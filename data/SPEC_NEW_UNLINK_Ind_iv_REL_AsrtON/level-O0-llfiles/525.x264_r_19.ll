; ModuleID = 'x264_src/encoder/me.c'
source_filename = "x264_src/encoder/me.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon.15 = type { i32, i32 }
%struct.x264_weight_t = type { [8 x i16], [8 x i16], i32, i32, i32, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, [8 x i8] }
%struct.x264_t = type { %struct.x264_param_t, [129 x %struct.x264_t*], i32, i32, i32, i32, i32, %struct.anon.2, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1 x %struct.x264_sps_t], %struct.x264_sps_t*, [1 x %struct.x264_pps_t], %struct.x264_pps_t*, i32, i32, [4 x [16 x i32]*], [2 x [64 x i32]*], [4 x [16 x i32]*], [2 x [64 x i32]*], [4 x [16 x i16]*], [2 x [64 x i16]*], [4 x [16 x i16]*], [2 x [64 x i16]*], [92 x i16*], [92 x [4 x i16*]], i8*, [8 x i8], %struct.x264_slice_header_t, %struct.x264_cabac_t, %struct.anon.8, %struct.x264_frame*, %struct.x264_frame*, i32, [19 x %struct.x264_frame*], i32, [19 x %struct.x264_frame*], [2 x i32], i32, i32, i64, %struct.anon.9, %struct.anon.10, %struct.x264_ratecontrol_t*, %struct.anon.13, [2 x [64 x i32]], [2 x [64 x i16]], [2 x i32], i8*, [2 x [3 x i8*]], [2 x [2 x [4 x [4 x i8]]]*], [7 x void (i8*)*], [7 x void (i8*)*], [12 x void (i8*, i8*)*], [12 x void (i8*)*], void (i8*, i8*, i32, i32)*, %struct.x264_pixel_function_t, %struct.x264_mc_functions_t, %struct.x264_dct_function_t, %struct.x264_zigzag_function_t, %struct.x264_quant_function_t, %struct.x264_deblock_function_t, %struct.x264_lookahead_t*, [8 x i8] }
%struct.x264_param_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.anon, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, [16 x i8], [16 x i8], [16 x i8], [16 x i8], [64 x i8], [64 x i8], void (i8*, i32, i8*, %struct.__va_list_tag*)*, i8*, i32, i32, i8*, %struct.anon.0, %struct.anon.1, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, void (i8*)* }
%struct.anon = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.anon.0 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, float, i32, [2 x i32], i32, i32 }
%struct.anon.1 = type { i32, i32, i32, i32, i32, i32, float, float, float, i32, i32, float, float, float, i32, float, i32, i32, i32, i8*, i32, i8*, float, float, float, %struct.x264_zone_t*, i32, i8* }
%struct.x264_zone_t = type { i32, i32, i32, i32, float, %struct.x264_param_t* }
%struct.anon.2 = type { i32, i32, %struct.x264_nal_t*, i32, i8*, %struct.bs_s }
%struct.x264_nal_t = type { i32, i32, i32, i8* }
%struct.bs_s = type { i8*, i8*, i8*, i64, i32, i32 }
%struct.x264_sps_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [256 x i32], i32, i32, i32, i32, i32, i32, i32, i32, %struct.anon.3, i32, %struct.anon.4, i32 }
%struct.anon.3 = type { i32, i32, i32, i32 }
%struct.anon.4 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.anon.5, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon.5 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.x264_pps_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i8*] }
%struct.x264_slice_header_t = type { %struct.x264_sps_t*, %struct.x264_pps_t*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, [2 x [16 x %struct.anon.6]], [32 x [3 x %struct.x264_weight_t]], i32, i32, [16 x %struct.anon.7], i32, i32, i32, i32, i32, i32, i32, i32, [8 x i8] }
%struct.anon.6 = type { i32, i32 }
%struct.anon.7 = type { i32, i32 }
%struct.x264_cabac_t = type { i32, i32, i32, i32, i8*, i8*, i8*, [8 x i8], i32, [460 x i8] }
%struct.anon.8 = type { %struct.x264_frame**, [2 x %struct.x264_frame**], %struct.x264_frame**, [18 x %struct.x264_frame*], i32, i32, i32, i32, i32, i32, i32, i64, i64, [2 x i64], i64, i64, i32, i32 }
%struct.x264_frame = type { i32, i32, i32, i64, i64, i32, i32, i32, i32, %struct.x264_param_t*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, float, float, i32, i32, [3 x i32], [3 x i32], [3 x i32], i32, i32, i32, [3 x i8*], [4 x i8*], [4 x i8*], i16*, [4 x i8*], [4 x i8*], [8 x i8], [16 x [3 x %struct.x264_weight_t]], [16 x i8*], i32, %struct.x264_frame*, i8*, i8*, [2 x [2 x i16]*], [2 x i16]*, [2 x [17 x [2 x i16]*]], [18 x [18 x i16*]], [2 x [17 x i32*]], [2 x i8*], [2 x i32], [2 x [16 x i32]], [2 x i16], [18 x [18 x i32]], [18 x [18 x i32]], i32, [18 x i32], [18 x [18 x i32*]], i32*, i32*, float*, float*, float*, i32, i16*, i16*, i16*, i32, [18 x float], i32, i64, %struct.x264_hrd_t, [251 x i8], [251 x i32], [251 x double], i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32 }
%struct.x264_hrd_t = type { double, double, double, double }
%struct.anon.9 = type { [16 x i16], [2 x [4 x i16]], [4 x [64 x i16]], [24 x [16 x i16]] }
%struct.anon.10 = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [2 x i32], [2 x i32], [2 x i32], [2 x i32], i32, [4 x i32], [16 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i16*, [8 x i8]*, [24 x i8]*, i8*, [2 x [2 x i16]*], [2 x [8 x [2 x i8]]*], [2 x i8*], [2 x [32 x [2 x i16]*]], i8*, i8*, i16*, [16 x i8*], i32, i32, [4 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x i8], %struct.anon.11, %struct.anon.12, i32, i32, i32, i32, i32, i32, i32, i32, [2 x [2 x i32]], i32, i32, [2 x [32 x [4 x i16]]], [4 x i16]*, [2 x [32 x [4 x i8]]], [4 x i8]*, [18 x i8], i32, [34 x i8], [14 x i8] }
%struct.anon.11 = type { [384 x i8], [864 x i8], [256 x i8], [256 x i8], [3 x [64 x i16]], [15 x [16 x i16]], [4 x i32], [4 x i32], i32, i32, [8 x i8], [4 x [64 x i16]], [16 x [16 x i16]], [9 x i64], [8 x i8], [32 x i32], [3 x i8*], [3 x i8*], [3 x i8*], [2 x i32], [2 x [32 x [6 x i8*]]], [32 x i8*], [2 x [16 x i16*]], [3 x i32] }
%struct.anon.12 = type { [40 x i8], [8 x i8], [48 x i8], [2 x [40 x i8]], [2 x [40 x [2 x i16]]], [2 x [40 x [2 x i8]]], [40 x i8], [2 x [4 x [2 x i16]]], [2 x [4 x i8]], i32, [2 x i16], i32, i32, i32, i32, [8 x i8] }
%struct.x264_ratecontrol_t = type opaque
%struct.anon.13 = type { %struct.anon.14, [5 x i32], [5 x i64], [5 x double], [17 x i32], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x [19 x i64]], [2 x [17 x i64]], [2 x i64], [2 x [2 x [32 x i64]]], [6 x i64], [4 x [13 x i64]], [2 x i32], [2 x i32], [3 x i32] }
%struct.anon.14 = type { i32, i32, i32, [19 x i32], i32, i32, i32, [2 x i32], [2 x [32 x i32]], [17 x i32], [6 x i32], [4 x [13 x i32]], [2 x i32], [3 x i64], double }
%struct.x264_pixel_function_t = type { [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [4 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x i32 (i8*, i32, i8*, i32)*], i32 (i8*, i32, i8*, i32, i32*)*, [4 x i64 (i8*, i32)*], [4 x i64 (i8*, i32)*], void (i8*, i32, i8*, i32, [4 x i32]*)*, float ([4 x i32]*, [4 x i32]*, i32)*, [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*], void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)*, void (i8*, i8*, i32*)* }
%struct.x264_mc_functions_t = type { void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*], [7 x void (i8*, i32, i8*, i32, i32)*], void (i8*, i32, i8*, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32)*, void (i8*, i8*, i8*, i8*, i32, i32, i32, i16*)*, void (i8*, i32, i8*, i32, i32)*, void (i8*, i32, i32)*, i8* (i8*, i8*, i64)*, void (i8*, i32)*, void (i16*, i8*, i32)*, void (i16*, i8*, i32)*, void (i16*, i16*, i32)*, void (i16*, i32)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (%struct.x264_t*, %struct.x264_weight_t*)*, void (i32*, i16*, i16*, i16*, i16*, i32)* }
%struct.x264_dct_function_t = type { void (i16*, i8*, i8*)*, void (i8*, i16*)*, void ([16 x i16]*, i8*, i8*)*, void (i16*, i8*, i8*)*, void (i8*, [16 x i16]*)*, void (i8*, i16*)*, void ([16 x i16]*, i8*, i8*)*, void (i8*, [16 x i16]*)*, void (i8*, i16*)*, void (i16*, i8*, i8*)*, void (i8*, i16*)*, void ([64 x i16]*, i8*, i8*)*, void (i8*, [64 x i16]*)*, void (i16*)*, void (i16*)* }
%struct.x264_zigzag_function_t = type { void (i16*, i16*)*, void (i16*, i16*)*, i32 (i16*, i8*, i8*)*, i32 (i16*, i8*, i8*)*, i32 (i16*, i8*, i8*, i16*)*, void (i16*, i16*, i8*)* }
%struct.x264_quant_function_t = type { i32 (i16*, i16*, i16*)*, i32 (i16*, i16*, i16*)*, i32 (i16*, i32, i32)*, i32 (i16*, i32, i32)*, void (i16*, [64 x i32]*, i32)*, void (i16*, [16 x i32]*, i32)*, void (i16*, [16 x i32]*, i32)*, void (i16*, i32*, i16*, i32)*, i32 (i16*)*, i32 (i16*)*, i32 (i16*)*, [6 x i32 (i16*)*], [5 x i32 (i16*, %struct.x264_run_level_t*)*] }
%struct.x264_run_level_t = type { i32, [16 x i16], [16 x i8] }
%struct.x264_deblock_function_t = type { [2 x void (i8*, i32, i32, i32, i8*)*], [2 x void (i8*, i32, i32, i32, i8*)*], [2 x void (i8*, i32, i32, i32)*], [2 x void (i8*, i32, i32, i32)*], void (i8*, [40 x i8]*, [40 x [2 x i16]]*, [4 x [4 x i8]]*, i32, i32)* }
%struct.x264_lookahead_t = type { i8, i8, i8, i32, i32, %struct.x264_frame*, %struct.x264_synch_frame_list_t, %struct.x264_synch_frame_list_t, %struct.x264_synch_frame_list_t }
%struct.x264_synch_frame_list_t = type { %struct.x264_frame**, i32, i32, i32, i32, i32 }
%struct.x264_me_t = type { i32, i16*, i32, i32, %struct.x264_weight_t*, [6 x i8*], i8*, [3 x i8*], i16*, [2 x i32], [2 x i16], i32, i32, [2 x i16] }
%struct.mvsad_t = type { i32, [2 x i16] }
%union.x264_union32_t = type { i32 }
%union.x264_union64_t = type { i64 }
%union.x264_union16_t = type { i16 }

@x264_pixel_size = internal constant [7 x %struct.anon.15] [%struct.anon.15 { i32 16, i32 16 }, %struct.anon.15 { i32 16, i32 8 }, %struct.anon.15 { i32 8, i32 16 }, %struct.anon.15 { i32 8, i32 8 }, %struct.anon.15 { i32 8, i32 4 }, %struct.anon.15 { i32 4, i32 8 }, %struct.anon.15 { i32 4, i32 4 }], align 16, !dbg !0
@hex2 = internal constant [8 x [2 x i8]] [[2 x i8] c"\FF\FE", [2 x i8] c"\FE\00", [2 x i8] c"\FF\02", [2 x i8] c"\01\02", [2 x i8] c"\02\00", [2 x i8] c"\01\FE", [2 x i8] c"\FF\FE", [2 x i8] c"\FE\00"], align 16, !dbg !1408
@mod6m1 = internal constant [8 x i8] c"\05\00\01\02\03\04\05\00", align 1, !dbg !1411
@square1 = internal constant [9 x [2 x i8]] [[2 x i8] zeroinitializer, [2 x i8] c"\00\FF", [2 x i8] c"\00\01", [2 x i8] c"\FF\00", [2 x i8] c"\01\00", [2 x i8] c"\FF\FF", [2 x i8] c"\FF\01", [2 x i8] c"\01\FF", [2 x i8] c"\01\01"], align 16, !dbg !1414
@x264_me_search_ref.x264_pixel_size_shift = internal constant [7 x i8] c"\00\01\01\02\03\03\04", align 1, !dbg !81
@x264_me_search_ref.range_mul = internal constant [4 x [4 x i8]] [[4 x i8] c"\03\03\04\04", [4 x i8] c"\03\04\04\04", [4 x i8] c"\04\04\04\05", [4 x i8] c"\04\04\05\06"], align 16, !dbg !1393
@x264_me_search_ref.hex4 = internal constant [16 x [2 x i8]] [[2 x i8] c"\00\FC", [2 x i8] c"\00\04", [2 x i8] c"\FE\FD", [2 x i8] c"\02\FD", [2 x i8] c"\FC\FE", [2 x i8] c"\04\FE", [2 x i8] c"\FC\FF", [2 x i8] c"\04\FF", [2 x i8] c"\FC\00", [2 x i8] c"\04\00", [2 x i8] c"\FC\01", [2 x i8] c"\04\01", [2 x i8] c"\FC\02", [2 x i8] c"\04\02", [2 x i8] c"\FE\03", [2 x i8] c"\02\03"], align 16, !dbg !1396
@x264_me_search_ref.zero = internal global [128 x i8] zeroinitializer, align 16, !dbg !1401
@x264_lambda_tab = external dso_local constant [52 x i8], align 16
@subpel_iterations = internal constant [11 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] c"\01\01\00\00", [4 x i8] c"\00\01\01\00", [4 x i8] c"\00\02\01\00", [4 x i8] c"\00\02\01\01", [4 x i8] c"\00\02\01\02", [4 x i8] c"\00\00\02\02", [4 x i8] c"\00\00\02\02", [4 x i8] c"\00\00\04\0A", [4 x i8] c"\00\00\04\0A", [4 x i8] c"\00\00\04\0A"], align 16, !dbg !1418
@x264_iter_kludge = dso_local global i32 0, align 4, !dbg !1406
@x264_scan8 = internal constant [27 x i32] [i32 12, i32 13, i32 20, i32 21, i32 14, i32 15, i32 22, i32 23, i32 28, i32 29, i32 36, i32 37, i32 30, i32 31, i32 38, i32 39, i32 9, i32 10, i32 17, i32 18, i32 33, i32 34, i32 41, i32 42, i32 44, i32 46, i32 47], align 16, !dbg !1431
@block_idx_xy_fdec = internal constant [16 x i16] [i16 0, i16 4, i16 128, i16 132, i16 8, i16 12, i16 136, i16 140, i16 256, i16 260, i16 384, i16 388, i16 264, i16 268, i16 392, i16 396], align 16, !dbg !1437
@block_idx_x = internal constant [16 x i8] c"\00\01\00\01\02\03\02\03\00\01\00\01\02\03\02\03", align 16, !dbg !1442
@block_idx_y = internal constant [16 x i8] c"\00\00\01\01\00\00\01\01\02\02\03\03\02\02\03\03", align 16, !dbg !1445
@x264_me_refine_bidir.dia4d = internal constant [33 x [4 x i8]] [[4 x i8] zeroinitializer, [4 x i8] c"\00\00\00\01", [4 x i8] c"\00\00\00\FF", [4 x i8] c"\00\00\01\00", [4 x i8] c"\00\00\FF\00", [4 x i8] c"\00\01\00\00", [4 x i8] c"\00\FF\00\00", [4 x i8] c"\01\00\00\00", [4 x i8] c"\FF\00\00\00", [4 x i8] c"\00\00\01\01", [4 x i8] c"\00\00\FF\FF", [4 x i8] c"\00\01\01\00", [4 x i8] c"\00\FF\FF\00", [4 x i8] c"\01\01\00\00", [4 x i8] c"\FF\FF\00\00", [4 x i8] c"\01\00\00\01", [4 x i8] c"\FF\00\00\FF", [4 x i8] c"\00\01\00\01", [4 x i8] c"\00\FF\00\FF", [4 x i8] c"\01\00\01\00", [4 x i8] c"\FF\00\FF\00", [4 x i8] c"\00\00\FF\01", [4 x i8] c"\00\00\01\FF", [4 x i8] c"\00\FF\01\00", [4 x i8] c"\00\01\FF\00", [4 x i8] c"\FF\01\00\00", [4 x i8] c"\01\FF\00\00", [4 x i8] c"\01\00\00\FF", [4 x i8] c"\FF\00\00\01", [4 x i8] c"\00\FF\00\01", [4 x i8] c"\00\01\00\FF", [4 x i8] c"\FF\00\01\00", [4 x i8] c"\01\00\FF\00"], align 8, !dbg !1423
@weight_none = external dso_local constant [3 x %struct.x264_weight_t], align 16

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_search_ref(%struct.x264_t* %h, %struct.x264_me_t* %m, [2 x i16]* %mvc, i32 %i_mvc, i32* %p_halfpel_thresh) #0 !dbg !83 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m.addr = alloca %struct.x264_me_t*, align 8
  %mvc.addr = alloca [2 x i16]*, align 8
  %i_mvc.addr = alloca i32, align 4
  %p_halfpel_thresh.addr = alloca i32*, align 8
  %bw = alloca i32, align 4
  %bh = alloca i32, align 4
  %i_pixel5 = alloca i32, align 4
  %stride = alloca i32, align 4
  %i_me_range = alloca i32, align 4
  %bmx = alloca i32, align 4
  %bmy = alloca i32, align 4
  %bcost = alloca i32, align 4
  %bpred_mx = alloca i32, align 4
  %bpred_my = alloca i32, align 4
  %bpred_cost = alloca i32, align 4
  %omx = alloca i32, align 4
  %omy = alloca i32, align 4
  %pmx = alloca i32, align 4
  %pmy = alloca i32, align 4
  %p_fenc = alloca i8*, align 8
  %p_fref_w = alloca i8*, align 8
  %pix = alloca [256 x i8], align 16
  %costs = alloca [16 x i32], align 16
  %mv_x_min = alloca i32, align 4
  %mv_y_min = alloca i32, align 4
  %mv_x_max = alloca i32, align 4
  %mv_y_max = alloca i32, align 4
  %mv_x_min_qpel = alloca i32, align 4
  %mv_y_min_qpel = alloca i32, align 4
  %mv_x_max_qpel = alloca i32, align 4
  %mv_y_max_qpel = alloca i32, align 4
  %mv_min = alloca i32, align 4
  %mv_max = alloca i32, align 4
  %p_cost_mvx = alloca i16*, align 8
  %p_cost_mvy = alloca i16*, align 8
  %pmv = alloca i32, align 4
  %stride2 = alloca i32, align 4
  %src = alloca i8*, align 8
  %cost = alloca i32, align 4
  %i = alloca i32, align 4
  %mx = alloca i32, align 4
  %my = alloca i32, align 4
  %stride293 = alloca i32, align 4
  %src94 = alloca i8*, align 8
  %cost103 = alloca i32, align 4
  %cost126 = alloca i32, align 4
  %mvc_fpel = alloca [16 x [2 x i16]], align 8
  %i164 = alloca i32, align 4
  %mx184 = alloca i32, align 4
  %my190 = alloca i32, align 4
  %cost196 = alloca i32, align 4
  %cost247 = alloca i32, align 4
  %i270 = alloca i32, align 4
  %pix_base = alloca i8*, align 8
  %pix_base413 = alloca i8*, align 8
  %pix_base474 = alloca i8*, align 8
  %dir = alloca i32, align 4
  %i621 = alloca i32, align 4
  %pix_base642 = alloca i8*, align 8
  %dir826 = alloca i32, align 4
  %pix_base827 = alloca i8*, align 8
  %pix_base930 = alloca i8*, align 8
  %ucost1 = alloca i32, align 4
  %ucost2 = alloca i32, align 4
  %cross_start = alloca i32, align 4
  %pix_base1044 = alloca i8*, align 8
  %pix_base1158 = alloca i8*, align 8
  %pix_base1282 = alloca i8*, align 8
  %pix_base1408 = alloca i8*, align 8
  %pix_base1519 = alloca i8*, align 8
  %range = alloca i32, align 4
  %i1646 = alloca i32, align 4
  %pix_base1661 = alloca i8*, align 8
  %cost1800 = alloca i32, align 4
  %cost1832 = alloca i32, align 4
  %pix_base1881 = alloca i8*, align 8
  %cost2016 = alloca i32, align 4
  %cost2048 = alloca i32, align 4
  %pix_base2079 = alloca i8*, align 8
  %pix_base2190 = alloca i8*, align 8
  %mvd = alloca i32, align 4
  %sad_ctx = alloca i32, align 4
  %mvd_ctx = alloca i32, align 4
  %denom = alloca i32, align 4
  %i2416 = alloca i32, align 4
  %pix_base2435 = alloca i8*, align 8
  %cost2574 = alloca i32, align 4
  %cost2606 = alloca i32, align 4
  %pix_base2657 = alloca i8*, align 8
  %cost2793 = alloca i32, align 4
  %cost2825 = alloca i32, align 4
  %pix_base2856 = alloca i8*, align 8
  %p_cost_omvx = alloca i16*, align 8
  %p_cost_omvy = alloca i16*, align 8
  %i2973 = alloca i32, align 4
  %j = alloca i32, align 4
  %mx3047 = alloca i32, align 4
  %my3054 = alloca i32, align 4
  %cost3073 = alloca i32, align 4
  %dir3102 = alloca i32, align 4
  %pix_base3103 = alloca i8*, align 8
  %dy = alloca i32, align 4
  %min_x = alloca i32, align 4
  %min_y = alloca i32, align 4
  %max_x = alloca i32, align 4
  %max_y = alloca i32, align 4
  %width = alloca i32, align 4
  %sums_base = alloca i16*, align 8
  %enc_dc = alloca [4 x i32], align 16
  %sad_size = alloca i32, align 4
  %delta = alloca i32, align 4
  %xs = alloca i16*, align 8
  %xn = alloca i32, align 4
  %cost_fpel_mvx = alloca i16*, align 8
  %mvsads = alloca %struct.mvsad_t*, align 8
  %nmvsad = alloca i32, align 4
  %limit = alloca i32, align 4
  %sad_thresh = alloca i32, align 4
  %bsad = alloca i32, align 4
  %my3693 = alloca i32, align 4
  %i3698 = alloca i32, align 4
  %ycost = alloca i32, align 4
  %ref = alloca i8*, align 8
  %sads = alloca [3 x i32], align 4
  %j3752 = alloca i32, align 4
  %sad3757 = alloca i32, align 4
  %mx3806 = alloca i32, align 4
  %sad3811 = alloca i32, align 4
  %i3870 = alloca i32, align 4
  %j3887 = alloca i32, align 4
  %sad3892 = alloca i32, align 4
  %mvsad = alloca i64, align 8
  %bi = alloca i32, align 4
  %i3911 = alloca i32, align 4
  %i3937 = alloca i32, align 4
  %cost3942 = alloca i32, align 4
  %my4000 = alloca i32, align 4
  %i4005 = alloca i32, align 4
  %ycost4006 = alloca i32, align 4
  %cost4140 = alloca i32, align 4
  %hpel = alloca i32, align 4
  %qpel = alloca i32, align 4
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !1457, metadata !DIExpression()), !dbg !1458
  store %struct.x264_me_t* %m, %struct.x264_me_t** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m.addr, metadata !1459, metadata !DIExpression()), !dbg !1460
  store [2 x i16]* %mvc, [2 x i16]** %mvc.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x i16]** %mvc.addr, metadata !1461, metadata !DIExpression()), !dbg !1462
  store i32 %i_mvc, i32* %i_mvc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_mvc.addr, metadata !1463, metadata !DIExpression()), !dbg !1464
  store i32* %p_halfpel_thresh, i32** %p_halfpel_thresh.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %p_halfpel_thresh.addr, metadata !1465, metadata !DIExpression()), !dbg !1466
  call void @llvm.dbg.declare(metadata i32* %bw, metadata !1467, metadata !DIExpression()), !dbg !1468
  %0 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1469
  %i_pixel = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %0, i32 0, i32 0, !dbg !1470
  %1 = load i32, i32* %i_pixel, align 16, !dbg !1470
  %idxprom = sext i32 %1 to i64, !dbg !1471
  %arrayidx = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom, !dbg !1471
  %w = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx, i32 0, i32 0, !dbg !1472
  %2 = load i32, i32* %w, align 8, !dbg !1472
  store i32 %2, i32* %bw, align 4, !dbg !1468
  call void @llvm.dbg.declare(metadata i32* %bh, metadata !1473, metadata !DIExpression()), !dbg !1474
  %3 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1475
  %i_pixel1 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %3, i32 0, i32 0, !dbg !1476
  %4 = load i32, i32* %i_pixel1, align 16, !dbg !1476
  %idxprom2 = sext i32 %4 to i64, !dbg !1477
  %arrayidx3 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom2, !dbg !1477
  %h4 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx3, i32 0, i32 1, !dbg !1478
  %5 = load i32, i32* %h4, align 4, !dbg !1478
  store i32 %5, i32* %bh, align 4, !dbg !1474
  call void @llvm.dbg.declare(metadata i32* %i_pixel5, metadata !1479, metadata !DIExpression()), !dbg !1480
  %6 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1481
  %i_pixel6 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %6, i32 0, i32 0, !dbg !1482
  %7 = load i32, i32* %i_pixel6, align 16, !dbg !1482
  store i32 %7, i32* %i_pixel5, align 4, !dbg !1480
  call void @llvm.dbg.declare(metadata i32* %stride, metadata !1483, metadata !DIExpression()), !dbg !1484
  %8 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1485
  %i_stride = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %8, i32 0, i32 9, !dbg !1486
  %arrayidx7 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride, i64 0, i64 0, !dbg !1485
  %9 = load i32, i32* %arrayidx7, align 8, !dbg !1485
  store i32 %9, i32* %stride, align 4, !dbg !1484
  call void @llvm.dbg.declare(metadata i32* %i_me_range, metadata !1487, metadata !DIExpression()), !dbg !1488
  %10 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1489
  %param = getelementptr inbounds %struct.x264_t, %struct.x264_t* %10, i32 0, i32 0, !dbg !1490
  %analyse = getelementptr inbounds %struct.x264_param_t, %struct.x264_param_t* %param, i32 0, i32 41, !dbg !1491
  %i_me_range8 = getelementptr inbounds %struct.anon.0, %struct.anon.0* %analyse, i32 0, i32 8, !dbg !1492
  %11 = load i32, i32* %i_me_range8, align 16, !dbg !1492
  store i32 %11, i32* %i_me_range, align 4, !dbg !1488
  call void @llvm.dbg.declare(metadata i32* %bmx, metadata !1493, metadata !DIExpression()), !dbg !1494
  call void @llvm.dbg.declare(metadata i32* %bmy, metadata !1495, metadata !DIExpression()), !dbg !1496
  call void @llvm.dbg.declare(metadata i32* %bcost, metadata !1497, metadata !DIExpression()), !dbg !1498
  call void @llvm.dbg.declare(metadata i32* %bpred_mx, metadata !1499, metadata !DIExpression()), !dbg !1500
  store i32 0, i32* %bpred_mx, align 4, !dbg !1500
  call void @llvm.dbg.declare(metadata i32* %bpred_my, metadata !1501, metadata !DIExpression()), !dbg !1502
  store i32 0, i32* %bpred_my, align 4, !dbg !1502
  call void @llvm.dbg.declare(metadata i32* %bpred_cost, metadata !1503, metadata !DIExpression()), !dbg !1504
  store i32 268435456, i32* %bpred_cost, align 4, !dbg !1504
  call void @llvm.dbg.declare(metadata i32* %omx, metadata !1505, metadata !DIExpression()), !dbg !1506
  call void @llvm.dbg.declare(metadata i32* %omy, metadata !1507, metadata !DIExpression()), !dbg !1508
  call void @llvm.dbg.declare(metadata i32* %pmx, metadata !1509, metadata !DIExpression()), !dbg !1510
  call void @llvm.dbg.declare(metadata i32* %pmy, metadata !1511, metadata !DIExpression()), !dbg !1512
  call void @llvm.dbg.declare(metadata i8** %p_fenc, metadata !1513, metadata !DIExpression()), !dbg !1514
  %12 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1515
  %p_fenc9 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %12, i32 0, i32 7, !dbg !1516
  %arrayidx10 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc9, i64 0, i64 0, !dbg !1515
  %13 = load i8*, i8** %arrayidx10, align 8, !dbg !1515
  store i8* %13, i8** %p_fenc, align 8, !dbg !1514
  call void @llvm.dbg.declare(metadata i8** %p_fref_w, metadata !1517, metadata !DIExpression()), !dbg !1518
  %14 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1519
  %p_fref_w11 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %14, i32 0, i32 6, !dbg !1520
  %15 = load i8*, i8** %p_fref_w11, align 16, !dbg !1520
  store i8* %15, i8** %p_fref_w, align 8, !dbg !1518
  call void @llvm.dbg.declare(metadata [256 x i8]* %pix, metadata !1521, metadata !DIExpression()), !dbg !1522
  call void @llvm.dbg.declare(metadata [16 x i32]* %costs, metadata !1523, metadata !DIExpression()), !dbg !1524
  call void @llvm.dbg.declare(metadata i32* %mv_x_min, metadata !1525, metadata !DIExpression()), !dbg !1526
  %16 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1527
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %16, i32 0, i32 55, !dbg !1528
  %mv_min_fpel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 22, !dbg !1529
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_fpel, i64 0, i64 0, !dbg !1527
  %17 = load i32, i32* %arrayidx12, align 8, !dbg !1527
  store i32 %17, i32* %mv_x_min, align 4, !dbg !1526
  call void @llvm.dbg.declare(metadata i32* %mv_y_min, metadata !1530, metadata !DIExpression()), !dbg !1531
  %18 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1532
  %mb13 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %18, i32 0, i32 55, !dbg !1533
  %mv_min_fpel14 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb13, i32 0, i32 22, !dbg !1534
  %arrayidx15 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_fpel14, i64 0, i64 1, !dbg !1532
  %19 = load i32, i32* %arrayidx15, align 4, !dbg !1532
  store i32 %19, i32* %mv_y_min, align 4, !dbg !1531
  call void @llvm.dbg.declare(metadata i32* %mv_x_max, metadata !1535, metadata !DIExpression()), !dbg !1536
  %20 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1537
  %mb16 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %20, i32 0, i32 55, !dbg !1538
  %mv_max_fpel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb16, i32 0, i32 23, !dbg !1539
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_fpel, i64 0, i64 0, !dbg !1537
  %21 = load i32, i32* %arrayidx17, align 16, !dbg !1537
  store i32 %21, i32* %mv_x_max, align 4, !dbg !1536
  call void @llvm.dbg.declare(metadata i32* %mv_y_max, metadata !1540, metadata !DIExpression()), !dbg !1541
  %22 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1542
  %mb18 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %22, i32 0, i32 55, !dbg !1543
  %mv_max_fpel19 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb18, i32 0, i32 23, !dbg !1544
  %arrayidx20 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_fpel19, i64 0, i64 1, !dbg !1542
  %23 = load i32, i32* %arrayidx20, align 4, !dbg !1542
  store i32 %23, i32* %mv_y_max, align 4, !dbg !1541
  call void @llvm.dbg.declare(metadata i32* %mv_x_min_qpel, metadata !1545, metadata !DIExpression()), !dbg !1546
  %24 = load i32, i32* %mv_x_min, align 4, !dbg !1547
  %shl = shl i32 %24, 2, !dbg !1548
  store i32 %shl, i32* %mv_x_min_qpel, align 4, !dbg !1546
  call void @llvm.dbg.declare(metadata i32* %mv_y_min_qpel, metadata !1549, metadata !DIExpression()), !dbg !1550
  %25 = load i32, i32* %mv_y_min, align 4, !dbg !1551
  %shl21 = shl i32 %25, 2, !dbg !1552
  store i32 %shl21, i32* %mv_y_min_qpel, align 4, !dbg !1550
  call void @llvm.dbg.declare(metadata i32* %mv_x_max_qpel, metadata !1553, metadata !DIExpression()), !dbg !1554
  %26 = load i32, i32* %mv_x_max, align 4, !dbg !1555
  %shl22 = shl i32 %26, 2, !dbg !1556
  store i32 %shl22, i32* %mv_x_max_qpel, align 4, !dbg !1554
  call void @llvm.dbg.declare(metadata i32* %mv_y_max_qpel, metadata !1557, metadata !DIExpression()), !dbg !1558
  %27 = load i32, i32* %mv_y_max, align 4, !dbg !1559
  %shl23 = shl i32 %27, 2, !dbg !1560
  store i32 %shl23, i32* %mv_y_max_qpel, align 4, !dbg !1558
  call void @llvm.dbg.declare(metadata i32* %mv_min, metadata !1561, metadata !DIExpression()), !dbg !1562
  %28 = load i32, i32* %mv_x_min, align 4, !dbg !1563
  %sub = sub nsw i32 0, %28, !dbg !1563
  %shl24 = shl i32 %sub, 16, !dbg !1563
  %29 = load i32, i32* %mv_y_min, align 4, !dbg !1563
  %sub25 = sub nsw i32 0, %29, !dbg !1563
  %and = and i32 %sub25, 32767, !dbg !1563
  %or = or i32 %shl24, %and, !dbg !1563
  store i32 %or, i32* %mv_min, align 4, !dbg !1562
  call void @llvm.dbg.declare(metadata i32* %mv_max, metadata !1564, metadata !DIExpression()), !dbg !1565
  %30 = load i32, i32* %mv_x_max, align 4, !dbg !1566
  %shl26 = shl i32 %30, 16, !dbg !1566
  %31 = load i32, i32* %mv_y_max, align 4, !dbg !1566
  %and27 = and i32 %31, 32767, !dbg !1566
  %or28 = or i32 %shl26, %and27, !dbg !1566
  %or29 = or i32 %or28, 32768, !dbg !1567
  store i32 %or29, i32* %mv_max, align 4, !dbg !1565
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvx, metadata !1568, metadata !DIExpression()), !dbg !1570
  %32 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1571
  %p_cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %32, i32 0, i32 1, !dbg !1572
  %33 = load i16*, i16** %p_cost_mv, align 8, !dbg !1572
  %34 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1573
  %mvp = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %34, i32 0, i32 10, !dbg !1574
  %arrayidx30 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp, i64 0, i64 0, !dbg !1573
  %35 = load i16, i16* %arrayidx30, align 16, !dbg !1573
  %conv = sext i16 %35 to i32, !dbg !1573
  %idx.ext = sext i32 %conv to i64, !dbg !1575
  %idx.neg = sub i64 0, %idx.ext, !dbg !1575
  %add.ptr = getelementptr inbounds i16, i16* %33, i64 %idx.neg, !dbg !1575
  store i16* %add.ptr, i16** %p_cost_mvx, align 8, !dbg !1570
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvy, metadata !1576, metadata !DIExpression()), !dbg !1577
  %36 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1578
  %p_cost_mv31 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %36, i32 0, i32 1, !dbg !1579
  %37 = load i16*, i16** %p_cost_mv31, align 8, !dbg !1579
  %38 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1580
  %mvp32 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %38, i32 0, i32 10, !dbg !1581
  %arrayidx33 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp32, i64 0, i64 1, !dbg !1580
  %39 = load i16, i16* %arrayidx33, align 2, !dbg !1580
  %conv34 = sext i16 %39 to i32, !dbg !1580
  %idx.ext35 = sext i32 %conv34 to i64, !dbg !1582
  %idx.neg36 = sub i64 0, %idx.ext35, !dbg !1582
  %add.ptr37 = getelementptr inbounds i16, i16* %37, i64 %idx.neg36, !dbg !1582
  store i16* %add.ptr37, i16** %p_cost_mvy, align 8, !dbg !1577
  call void @llvm.dbg.declare(metadata i32* %pmv, metadata !1583, metadata !DIExpression()), !dbg !1584
  %40 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1585
  %mvp38 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %40, i32 0, i32 10, !dbg !1586
  %arrayidx39 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp38, i64 0, i64 0, !dbg !1585
  %41 = load i16, i16* %arrayidx39, align 16, !dbg !1585
  %conv40 = sext i16 %41 to i32, !dbg !1585
  %42 = load i32, i32* %mv_x_min_qpel, align 4, !dbg !1587
  %43 = load i32, i32* %mv_x_max_qpel, align 4, !dbg !1588
  %call = call i32 @x264_clip3(i32 %conv40, i32 %42, i32 %43), !dbg !1589
  store i32 %call, i32* %bmx, align 4, !dbg !1590
  %44 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1591
  %mvp41 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %44, i32 0, i32 10, !dbg !1592
  %arrayidx42 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp41, i64 0, i64 1, !dbg !1591
  %45 = load i16, i16* %arrayidx42, align 2, !dbg !1591
  %conv43 = sext i16 %45 to i32, !dbg !1591
  %46 = load i32, i32* %mv_y_min_qpel, align 4, !dbg !1593
  %47 = load i32, i32* %mv_y_max_qpel, align 4, !dbg !1594
  %call44 = call i32 @x264_clip3(i32 %conv43, i32 %46, i32 %47), !dbg !1595
  store i32 %call44, i32* %bmy, align 4, !dbg !1596
  %48 = load i32, i32* %bmx, align 4, !dbg !1597
  %add = add nsw i32 %48, 2, !dbg !1598
  %shr = ashr i32 %add, 2, !dbg !1599
  store i32 %shr, i32* %pmx, align 4, !dbg !1600
  %49 = load i32, i32* %bmy, align 4, !dbg !1601
  %add45 = add nsw i32 %49, 2, !dbg !1602
  %shr46 = ashr i32 %add45, 2, !dbg !1603
  store i32 %shr46, i32* %pmy, align 4, !dbg !1604
  store i32 268435456, i32* %bcost, align 4, !dbg !1605
  %50 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1606
  %mb47 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %50, i32 0, i32 55, !dbg !1608
  %i_subpel_refine = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb47, i32 0, i32 10, !dbg !1609
  %51 = load i32, i32* %i_subpel_refine, align 8, !dbg !1609
  %cmp = icmp sge i32 %51, 3, !dbg !1610
  br i1 %cmp, label %if.then, label %if.else, !dbg !1611

if.then:                                          ; preds = %entry
  %52 = load i32, i32* %bmx, align 4, !dbg !1612
  %53 = load i32, i32* %bmy, align 4, !dbg !1614
  %call49 = call i32 @pack16to32_mask(i32 %52, i32 %53), !dbg !1615
  store i32 %call49, i32* %pmv, align 4, !dbg !1616
  %54 = load i32, i32* %i_mvc.addr, align 4, !dbg !1617
  %tobool = icmp ne i32 %54, 0, !dbg !1617
  br i1 %tobool, label %if.then50, label %if.end68, !dbg !1619

if.then50:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %stride2, metadata !1620, metadata !DIExpression()), !dbg !1622
  store i32 16, i32* %stride2, align 4, !dbg !1622
  call void @llvm.dbg.declare(metadata i8** %src, metadata !1623, metadata !DIExpression()), !dbg !1622
  %55 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1622
  %mc = getelementptr inbounds %struct.x264_t, %struct.x264_t* %55, i32 0, i32 70, !dbg !1622
  %get_ref = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc, i32 0, i32 1, !dbg !1622
  %56 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref, align 8, !dbg !1622
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %pix, i64 0, i64 0, !dbg !1622
  %57 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1622
  %p_fref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %57, i32 0, i32 5, !dbg !1622
  %arraydecay51 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref, i64 0, i64 0, !dbg !1622
  %58 = load i32, i32* %stride, align 4, !dbg !1622
  %59 = load i32, i32* %bmx, align 4, !dbg !1622
  %60 = load i32, i32* %bmy, align 4, !dbg !1622
  %61 = load i32, i32* %bw, align 4, !dbg !1622
  %62 = load i32, i32* %bh, align 4, !dbg !1622
  %63 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1622
  %weight = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %63, i32 0, i32 4, !dbg !1622
  %64 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight, align 8, !dbg !1622
  %arrayidx52 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %64, i64 0, !dbg !1622
  %call53 = call i8* %56(i8* %arraydecay, i32* %stride2, i8** %arraydecay51, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62, %struct.x264_weight_t* %arrayidx52), !dbg !1622
  store i8* %call53, i8** %src, align 8, !dbg !1622
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !1624, metadata !DIExpression()), !dbg !1622
  %65 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1622
  %pixf = getelementptr inbounds %struct.x264_t, %struct.x264_t* %65, i32 0, i32 69, !dbg !1622
  %fpelcmp = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf, i32 0, i32 7, !dbg !1622
  %66 = load i32, i32* %i_pixel5, align 4, !dbg !1622
  %idxprom54 = sext i32 %66 to i64, !dbg !1622
  %arrayidx55 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp, i64 0, i64 %idxprom54, !dbg !1622
  %67 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx55, align 8, !dbg !1622
  %68 = load i8*, i8** %p_fenc, align 8, !dbg !1622
  %69 = load i8*, i8** %src, align 8, !dbg !1622
  %70 = load i32, i32* %stride2, align 4, !dbg !1622
  %call56 = call i32 %67(i8* %68, i32 16, i8* %69, i32 %70), !dbg !1622
  %71 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1622
  %72 = load i32, i32* %bmx, align 4, !dbg !1622
  %idxprom57 = sext i32 %72 to i64, !dbg !1622
  %arrayidx58 = getelementptr inbounds i16, i16* %71, i64 %idxprom57, !dbg !1622
  %73 = load i16, i16* %arrayidx58, align 2, !dbg !1622
  %conv59 = zext i16 %73 to i32, !dbg !1622
  %add60 = add nsw i32 %call56, %conv59, !dbg !1622
  %74 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1622
  %75 = load i32, i32* %bmy, align 4, !dbg !1622
  %idxprom61 = sext i32 %75 to i64, !dbg !1622
  %arrayidx62 = getelementptr inbounds i16, i16* %74, i64 %idxprom61, !dbg !1622
  %76 = load i16, i16* %arrayidx62, align 2, !dbg !1622
  %conv63 = zext i16 %76 to i32, !dbg !1622
  %add64 = add nsw i32 %add60, %conv63, !dbg !1622
  store i32 %add64, i32* %cost, align 4, !dbg !1622
  %77 = load i32, i32* %cost, align 4, !dbg !1625
  %78 = load i32, i32* %bpred_cost, align 4, !dbg !1625
  %cmp65 = icmp slt i32 %77, %78, !dbg !1625
  br i1 %cmp65, label %if.then67, label %if.end, !dbg !1622

if.then67:                                        ; preds = %if.then50
  %79 = load i32, i32* %cost, align 4, !dbg !1627
  store i32 %79, i32* %bpred_cost, align 4, !dbg !1627
  %80 = load i32, i32* %bmx, align 4, !dbg !1627
  store i32 %80, i32* %bpred_mx, align 4, !dbg !1627
  %81 = load i32, i32* %bmy, align 4, !dbg !1627
  store i32 %81, i32* %bpred_my, align 4, !dbg !1627
  br label %if.end, !dbg !1627

if.end:                                           ; preds = %if.then67, %if.then50
  br label %if.end68, !dbg !1622

if.end68:                                         ; preds = %if.end, %if.then
  call void @llvm.dbg.declare(metadata i32* %i, metadata !1629, metadata !DIExpression()), !dbg !1631
  store i32 0, i32* %i, align 4, !dbg !1631
  br label %for.cond, !dbg !1632

for.cond:                                         ; preds = %for.inc, %if.end68
  %82 = load i32, i32* %i, align 4, !dbg !1633
  %83 = load i32, i32* %i_mvc.addr, align 4, !dbg !1635
  %cmp69 = icmp slt i32 %82, %83, !dbg !1636
  br i1 %cmp69, label %for.body, label %for.end, !dbg !1637

for.body:                                         ; preds = %for.cond
  %84 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1638
  %85 = load i32, i32* %i, align 4, !dbg !1638
  %idxprom71 = sext i32 %85 to i64, !dbg !1638
  %arrayidx72 = getelementptr inbounds [2 x i16], [2 x i16]* %84, i64 %idxprom71, !dbg !1638
  %arraydecay73 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx72, i64 0, i64 0, !dbg !1638
  %86 = bitcast i16* %arraydecay73 to %union.x264_union32_t*, !dbg !1638
  %i74 = bitcast %union.x264_union32_t* %86 to i32*, !dbg !1638
  %87 = load i32, i32* %i74, align 4, !dbg !1638
  %tobool75 = icmp ne i32 %87, 0, !dbg !1638
  br i1 %tobool75, label %land.lhs.true, label %if.end121, !dbg !1641

land.lhs.true:                                    ; preds = %for.body
  %88 = load i32, i32* %pmv, align 4, !dbg !1642
  %89 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1643
  %90 = load i32, i32* %i, align 4, !dbg !1643
  %idxprom76 = sext i32 %90 to i64, !dbg !1643
  %arrayidx77 = getelementptr inbounds [2 x i16], [2 x i16]* %89, i64 %idxprom76, !dbg !1643
  %arraydecay78 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx77, i64 0, i64 0, !dbg !1643
  %91 = bitcast i16* %arraydecay78 to %union.x264_union32_t*, !dbg !1643
  %i79 = bitcast %union.x264_union32_t* %91 to i32*, !dbg !1643
  %92 = load i32, i32* %i79, align 4, !dbg !1643
  %cmp80 = icmp ne i32 %88, %92, !dbg !1644
  br i1 %cmp80, label %if.then82, label %if.end121, !dbg !1645

if.then82:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %mx, metadata !1646, metadata !DIExpression()), !dbg !1648
  %93 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1649
  %94 = load i32, i32* %i, align 4, !dbg !1650
  %idxprom83 = sext i32 %94 to i64, !dbg !1649
  %arrayidx84 = getelementptr inbounds [2 x i16], [2 x i16]* %93, i64 %idxprom83, !dbg !1649
  %arrayidx85 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx84, i64 0, i64 0, !dbg !1649
  %95 = load i16, i16* %arrayidx85, align 2, !dbg !1649
  %conv86 = sext i16 %95 to i32, !dbg !1649
  %96 = load i32, i32* %mv_x_min_qpel, align 4, !dbg !1651
  %97 = load i32, i32* %mv_x_max_qpel, align 4, !dbg !1652
  %call87 = call i32 @x264_clip3(i32 %conv86, i32 %96, i32 %97), !dbg !1653
  store i32 %call87, i32* %mx, align 4, !dbg !1648
  call void @llvm.dbg.declare(metadata i32* %my, metadata !1654, metadata !DIExpression()), !dbg !1655
  %98 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1656
  %99 = load i32, i32* %i, align 4, !dbg !1657
  %idxprom88 = sext i32 %99 to i64, !dbg !1656
  %arrayidx89 = getelementptr inbounds [2 x i16], [2 x i16]* %98, i64 %idxprom88, !dbg !1656
  %arrayidx90 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx89, i64 0, i64 1, !dbg !1656
  %100 = load i16, i16* %arrayidx90, align 2, !dbg !1656
  %conv91 = sext i16 %100 to i32, !dbg !1656
  %101 = load i32, i32* %mv_y_min_qpel, align 4, !dbg !1658
  %102 = load i32, i32* %mv_y_max_qpel, align 4, !dbg !1659
  %call92 = call i32 @x264_clip3(i32 %conv91, i32 %101, i32 %102), !dbg !1660
  store i32 %call92, i32* %my, align 4, !dbg !1655
  call void @llvm.dbg.declare(metadata i32* %stride293, metadata !1661, metadata !DIExpression()), !dbg !1663
  store i32 16, i32* %stride293, align 4, !dbg !1663
  call void @llvm.dbg.declare(metadata i8** %src94, metadata !1664, metadata !DIExpression()), !dbg !1663
  %103 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1663
  %mc95 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %103, i32 0, i32 70, !dbg !1663
  %get_ref96 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc95, i32 0, i32 1, !dbg !1663
  %104 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref96, align 8, !dbg !1663
  %arraydecay97 = getelementptr inbounds [256 x i8], [256 x i8]* %pix, i64 0, i64 0, !dbg !1663
  %105 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1663
  %p_fref98 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %105, i32 0, i32 5, !dbg !1663
  %arraydecay99 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref98, i64 0, i64 0, !dbg !1663
  %106 = load i32, i32* %stride, align 4, !dbg !1663
  %107 = load i32, i32* %mx, align 4, !dbg !1663
  %108 = load i32, i32* %my, align 4, !dbg !1663
  %109 = load i32, i32* %bw, align 4, !dbg !1663
  %110 = load i32, i32* %bh, align 4, !dbg !1663
  %111 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !1663
  %weight100 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %111, i32 0, i32 4, !dbg !1663
  %112 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight100, align 8, !dbg !1663
  %arrayidx101 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %112, i64 0, !dbg !1663
  %call102 = call i8* %104(i8* %arraydecay97, i32* %stride293, i8** %arraydecay99, i32 %106, i32 %107, i32 %108, i32 %109, i32 %110, %struct.x264_weight_t* %arrayidx101), !dbg !1663
  store i8* %call102, i8** %src94, align 8, !dbg !1663
  call void @llvm.dbg.declare(metadata i32* %cost103, metadata !1665, metadata !DIExpression()), !dbg !1663
  %113 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1663
  %pixf104 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %113, i32 0, i32 69, !dbg !1663
  %fpelcmp105 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf104, i32 0, i32 7, !dbg !1663
  %114 = load i32, i32* %i_pixel5, align 4, !dbg !1663
  %idxprom106 = sext i32 %114 to i64, !dbg !1663
  %arrayidx107 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp105, i64 0, i64 %idxprom106, !dbg !1663
  %115 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx107, align 8, !dbg !1663
  %116 = load i8*, i8** %p_fenc, align 8, !dbg !1663
  %117 = load i8*, i8** %src94, align 8, !dbg !1663
  %118 = load i32, i32* %stride293, align 4, !dbg !1663
  %call108 = call i32 %115(i8* %116, i32 16, i8* %117, i32 %118), !dbg !1663
  %119 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1663
  %120 = load i32, i32* %mx, align 4, !dbg !1663
  %idxprom109 = sext i32 %120 to i64, !dbg !1663
  %arrayidx110 = getelementptr inbounds i16, i16* %119, i64 %idxprom109, !dbg !1663
  %121 = load i16, i16* %arrayidx110, align 2, !dbg !1663
  %conv111 = zext i16 %121 to i32, !dbg !1663
  %add112 = add nsw i32 %call108, %conv111, !dbg !1663
  %122 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1663
  %123 = load i32, i32* %my, align 4, !dbg !1663
  %idxprom113 = sext i32 %123 to i64, !dbg !1663
  %arrayidx114 = getelementptr inbounds i16, i16* %122, i64 %idxprom113, !dbg !1663
  %124 = load i16, i16* %arrayidx114, align 2, !dbg !1663
  %conv115 = zext i16 %124 to i32, !dbg !1663
  %add116 = add nsw i32 %add112, %conv115, !dbg !1663
  store i32 %add116, i32* %cost103, align 4, !dbg !1663
  %125 = load i32, i32* %cost103, align 4, !dbg !1666
  %126 = load i32, i32* %bpred_cost, align 4, !dbg !1666
  %cmp117 = icmp slt i32 %125, %126, !dbg !1666
  br i1 %cmp117, label %if.then119, label %if.end120, !dbg !1663

if.then119:                                       ; preds = %if.then82
  %127 = load i32, i32* %cost103, align 4, !dbg !1668
  store i32 %127, i32* %bpred_cost, align 4, !dbg !1668
  %128 = load i32, i32* %mx, align 4, !dbg !1668
  store i32 %128, i32* %bpred_mx, align 4, !dbg !1668
  %129 = load i32, i32* %my, align 4, !dbg !1668
  store i32 %129, i32* %bpred_my, align 4, !dbg !1668
  br label %if.end120, !dbg !1668

if.end120:                                        ; preds = %if.then119, %if.then82
  br label %if.end121, !dbg !1670

if.end121:                                        ; preds = %if.end120, %land.lhs.true, %for.body
  br label %for.inc, !dbg !1671

for.inc:                                          ; preds = %if.end121
  %130 = load i32, i32* %i, align 4, !dbg !1672
  %inc = add nsw i32 %130, 1, !dbg !1672
  store i32 %inc, i32* %i, align 4, !dbg !1672
  br label %for.cond, !dbg !1673, !llvm.loop !1674

for.end:                                          ; preds = %for.cond
  %131 = load i32, i32* %bpred_mx, align 4, !dbg !1676
  %add122 = add nsw i32 %131, 2, !dbg !1677
  %shr123 = ashr i32 %add122, 2, !dbg !1678
  store i32 %shr123, i32* %bmx, align 4, !dbg !1679
  %132 = load i32, i32* %bpred_my, align 4, !dbg !1680
  %add124 = add nsw i32 %132, 2, !dbg !1681
  %shr125 = ashr i32 %add124, 2, !dbg !1682
  store i32 %shr125, i32* %bmy, align 4, !dbg !1683
  call void @llvm.dbg.declare(metadata i32* %cost126, metadata !1684, metadata !DIExpression()), !dbg !1686
  %133 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1686
  %pixf127 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %133, i32 0, i32 69, !dbg !1686
  %fpelcmp128 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf127, i32 0, i32 7, !dbg !1686
  %134 = load i32, i32* %i_pixel5, align 4, !dbg !1686
  %idxprom129 = sext i32 %134 to i64, !dbg !1686
  %arrayidx130 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp128, i64 0, i64 %idxprom129, !dbg !1686
  %135 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx130, align 8, !dbg !1686
  %136 = load i8*, i8** %p_fenc, align 8, !dbg !1686
  %137 = load i8*, i8** %p_fref_w, align 8, !dbg !1686
  %138 = load i32, i32* %bmy, align 4, !dbg !1686
  %139 = load i32, i32* %stride, align 4, !dbg !1686
  %mul = mul nsw i32 %138, %139, !dbg !1686
  %140 = load i32, i32* %bmx, align 4, !dbg !1686
  %add131 = add nsw i32 %mul, %140, !dbg !1686
  %idxprom132 = sext i32 %add131 to i64, !dbg !1686
  %arrayidx133 = getelementptr inbounds i8, i8* %137, i64 %idxprom132, !dbg !1686
  %141 = load i32, i32* %stride, align 4, !dbg !1686
  %call134 = call i32 %135(i8* %136, i32 16, i8* %arrayidx133, i32 %141), !dbg !1686
  %142 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1686
  %143 = load i32, i32* %bmx, align 4, !dbg !1686
  %shl135 = shl i32 %143, 2, !dbg !1686
  %idxprom136 = sext i32 %shl135 to i64, !dbg !1686
  %arrayidx137 = getelementptr inbounds i16, i16* %142, i64 %idxprom136, !dbg !1686
  %144 = load i16, i16* %arrayidx137, align 2, !dbg !1686
  %conv138 = zext i16 %144 to i32, !dbg !1686
  %145 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1686
  %146 = load i32, i32* %bmy, align 4, !dbg !1686
  %shl139 = shl i32 %146, 2, !dbg !1686
  %idxprom140 = sext i32 %shl139 to i64, !dbg !1686
  %arrayidx141 = getelementptr inbounds i16, i16* %145, i64 %idxprom140, !dbg !1686
  %147 = load i16, i16* %arrayidx141, align 2, !dbg !1686
  %conv142 = zext i16 %147 to i32, !dbg !1686
  %add143 = add nsw i32 %conv138, %conv142, !dbg !1686
  %add144 = add nsw i32 %call134, %add143, !dbg !1686
  store i32 %add144, i32* %cost126, align 4, !dbg !1686
  %148 = load i32, i32* %cost126, align 4, !dbg !1687
  %149 = load i32, i32* %bcost, align 4, !dbg !1687
  %cmp145 = icmp slt i32 %148, %149, !dbg !1687
  br i1 %cmp145, label %if.then147, label %if.end148, !dbg !1686

if.then147:                                       ; preds = %for.end
  %150 = load i32, i32* %cost126, align 4, !dbg !1689
  store i32 %150, i32* %bcost, align 4, !dbg !1689
  %151 = load i32, i32* %bmx, align 4, !dbg !1689
  store i32 %151, i32* %bmx, align 4, !dbg !1689
  %152 = load i32, i32* %bmy, align 4, !dbg !1689
  store i32 %152, i32* %bmy, align 4, !dbg !1689
  br label %if.end148, !dbg !1689

if.end148:                                        ; preds = %if.then147, %for.end
  br label %if.end244, !dbg !1691

if.else:                                          ; preds = %entry
  %153 = load i32, i32* %pmx, align 4, !dbg !1692
  store i32 %153, i32* %bmx, align 4, !dbg !1694
  %154 = load i32, i32* %pmy, align 4, !dbg !1695
  store i32 %154, i32* %bmy, align 4, !dbg !1696
  %155 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1697
  %pixf149 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %155, i32 0, i32 69, !dbg !1698
  %fpelcmp150 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf149, i32 0, i32 7, !dbg !1699
  %156 = load i32, i32* %i_pixel5, align 4, !dbg !1700
  %idxprom151 = sext i32 %156 to i64, !dbg !1697
  %arrayidx152 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp150, i64 0, i64 %idxprom151, !dbg !1697
  %157 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx152, align 8, !dbg !1697
  %158 = load i8*, i8** %p_fenc, align 8, !dbg !1701
  %159 = load i8*, i8** %p_fref_w, align 8, !dbg !1702
  %160 = load i32, i32* %bmy, align 4, !dbg !1703
  %161 = load i32, i32* %stride, align 4, !dbg !1704
  %mul153 = mul nsw i32 %160, %161, !dbg !1705
  %162 = load i32, i32* %bmx, align 4, !dbg !1706
  %add154 = add nsw i32 %mul153, %162, !dbg !1707
  %idxprom155 = sext i32 %add154 to i64, !dbg !1702
  %arrayidx156 = getelementptr inbounds i8, i8* %159, i64 %idxprom155, !dbg !1702
  %163 = load i32, i32* %stride, align 4, !dbg !1708
  %call157 = call i32 %157(i8* %158, i32 16, i8* %arrayidx156, i32 %163), !dbg !1697
  store i32 %call157, i32* %bcost, align 4, !dbg !1709
  %164 = load i32, i32* %bmx, align 4, !dbg !1710
  %165 = load i32, i32* %bmy, align 4, !dbg !1711
  %call158 = call i32 @pack16to32_mask(i32 %164, i32 %165), !dbg !1712
  store i32 %call158, i32* %pmv, align 4, !dbg !1713
  %166 = load i32, i32* %i_mvc.addr, align 4, !dbg !1714
  %cmp159 = icmp sgt i32 %166, 0, !dbg !1716
  br i1 %cmp159, label %if.then161, label %if.end243, !dbg !1717

if.then161:                                       ; preds = %if.else
  call void @llvm.dbg.declare(metadata [16 x [2 x i16]]* %mvc_fpel, metadata !1718, metadata !DIExpression()), !dbg !1721
  %arraydecay162 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 0, !dbg !1722
  %167 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1723
  %168 = load i32, i32* %i_mvc.addr, align 4, !dbg !1724
  %169 = load i32, i32* %mv_x_min, align 4, !dbg !1725
  %170 = load i32, i32* %mv_x_max, align 4, !dbg !1726
  %171 = load i32, i32* %mv_y_min, align 4, !dbg !1727
  %172 = load i32, i32* %mv_y_max, align 4, !dbg !1728
  call void @x264_predictor_roundclip([2 x i16]* %arraydecay162, [2 x i16]* %167, i32 %168, i32 %169, i32 %170, i32 %171, i32 %172), !dbg !1729
  %173 = load i32, i32* %bcost, align 4, !dbg !1730
  %shl163 = shl i32 %173, 4, !dbg !1730
  store i32 %shl163, i32* %bcost, align 4, !dbg !1730
  call void @llvm.dbg.declare(metadata i32* %i164, metadata !1731, metadata !DIExpression()), !dbg !1733
  store i32 1, i32* %i164, align 4, !dbg !1733
  br label %for.cond165, !dbg !1734

for.cond165:                                      ; preds = %for.inc223, %if.then161
  %174 = load i32, i32* %i164, align 4, !dbg !1735
  %175 = load i32, i32* %i_mvc.addr, align 4, !dbg !1737
  %cmp166 = icmp sle i32 %174, %175, !dbg !1738
  br i1 %cmp166, label %for.body168, label %for.end225, !dbg !1739

for.body168:                                      ; preds = %for.cond165
  %176 = load i32, i32* %i164, align 4, !dbg !1740
  %sub169 = sub nsw i32 %176, 1, !dbg !1740
  %idxprom170 = sext i32 %sub169 to i64, !dbg !1740
  %arrayidx171 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 %idxprom170, !dbg !1740
  %arraydecay172 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx171, i64 0, i64 0, !dbg !1740
  %177 = bitcast i16* %arraydecay172 to %union.x264_union32_t*, !dbg !1740
  %i173 = bitcast %union.x264_union32_t* %177 to i32*, !dbg !1740
  %178 = load i32, i32* %i173, align 4, !dbg !1740
  %tobool174 = icmp ne i32 %178, 0, !dbg !1740
  br i1 %tobool174, label %land.lhs.true175, label %if.end222, !dbg !1743

land.lhs.true175:                                 ; preds = %for.body168
  %179 = load i32, i32* %pmv, align 4, !dbg !1744
  %180 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !1745
  %181 = load i32, i32* %i164, align 4, !dbg !1745
  %sub176 = sub nsw i32 %181, 1, !dbg !1745
  %idxprom177 = sext i32 %sub176 to i64, !dbg !1745
  %arrayidx178 = getelementptr inbounds [2 x i16], [2 x i16]* %180, i64 %idxprom177, !dbg !1745
  %arraydecay179 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx178, i64 0, i64 0, !dbg !1745
  %182 = bitcast i16* %arraydecay179 to %union.x264_union32_t*, !dbg !1745
  %i180 = bitcast %union.x264_union32_t* %182 to i32*, !dbg !1745
  %183 = load i32, i32* %i180, align 4, !dbg !1745
  %cmp181 = icmp ne i32 %179, %183, !dbg !1746
  br i1 %cmp181, label %if.then183, label %if.end222, !dbg !1747

if.then183:                                       ; preds = %land.lhs.true175
  call void @llvm.dbg.declare(metadata i32* %mx184, metadata !1748, metadata !DIExpression()), !dbg !1750
  %184 = load i32, i32* %i164, align 4, !dbg !1751
  %sub185 = sub nsw i32 %184, 1, !dbg !1752
  %idxprom186 = sext i32 %sub185 to i64, !dbg !1753
  %arrayidx187 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 %idxprom186, !dbg !1753
  %arrayidx188 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx187, i64 0, i64 0, !dbg !1753
  %185 = load i16, i16* %arrayidx188, align 4, !dbg !1753
  %conv189 = sext i16 %185 to i32, !dbg !1753
  store i32 %conv189, i32* %mx184, align 4, !dbg !1750
  call void @llvm.dbg.declare(metadata i32* %my190, metadata !1754, metadata !DIExpression()), !dbg !1755
  %186 = load i32, i32* %i164, align 4, !dbg !1756
  %sub191 = sub nsw i32 %186, 1, !dbg !1757
  %idxprom192 = sext i32 %sub191 to i64, !dbg !1758
  %arrayidx193 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 %idxprom192, !dbg !1758
  %arrayidx194 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx193, i64 0, i64 1, !dbg !1758
  %187 = load i16, i16* %arrayidx194, align 2, !dbg !1758
  %conv195 = sext i16 %187 to i32, !dbg !1758
  store i32 %conv195, i32* %my190, align 4, !dbg !1755
  call void @llvm.dbg.declare(metadata i32* %cost196, metadata !1759, metadata !DIExpression()), !dbg !1760
  %188 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1761
  %pixf197 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %188, i32 0, i32 69, !dbg !1762
  %fpelcmp198 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf197, i32 0, i32 7, !dbg !1763
  %189 = load i32, i32* %i_pixel5, align 4, !dbg !1764
  %idxprom199 = sext i32 %189 to i64, !dbg !1761
  %arrayidx200 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp198, i64 0, i64 %idxprom199, !dbg !1761
  %190 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx200, align 8, !dbg !1761
  %191 = load i8*, i8** %p_fenc, align 8, !dbg !1765
  %192 = load i8*, i8** %p_fref_w, align 8, !dbg !1766
  %193 = load i32, i32* %my190, align 4, !dbg !1767
  %194 = load i32, i32* %stride, align 4, !dbg !1768
  %mul201 = mul nsw i32 %193, %194, !dbg !1769
  %195 = load i32, i32* %mx184, align 4, !dbg !1770
  %add202 = add nsw i32 %mul201, %195, !dbg !1771
  %idxprom203 = sext i32 %add202 to i64, !dbg !1766
  %arrayidx204 = getelementptr inbounds i8, i8* %192, i64 %idxprom203, !dbg !1766
  %196 = load i32, i32* %stride, align 4, !dbg !1772
  %call205 = call i32 %190(i8* %191, i32 16, i8* %arrayidx204, i32 %196), !dbg !1761
  %197 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1773
  %198 = load i32, i32* %mx184, align 4, !dbg !1773
  %shl206 = shl i32 %198, 2, !dbg !1773
  %idxprom207 = sext i32 %shl206 to i64, !dbg !1773
  %arrayidx208 = getelementptr inbounds i16, i16* %197, i64 %idxprom207, !dbg !1773
  %199 = load i16, i16* %arrayidx208, align 2, !dbg !1773
  %conv209 = zext i16 %199 to i32, !dbg !1773
  %200 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1773
  %201 = load i32, i32* %my190, align 4, !dbg !1773
  %shl210 = shl i32 %201, 2, !dbg !1773
  %idxprom211 = sext i32 %shl210 to i64, !dbg !1773
  %arrayidx212 = getelementptr inbounds i16, i16* %200, i64 %idxprom211, !dbg !1773
  %202 = load i16, i16* %arrayidx212, align 2, !dbg !1773
  %conv213 = zext i16 %202 to i32, !dbg !1773
  %add214 = add nsw i32 %conv209, %conv213, !dbg !1773
  %add215 = add nsw i32 %call205, %add214, !dbg !1774
  store i32 %add215, i32* %cost196, align 4, !dbg !1760
  %203 = load i32, i32* %cost196, align 4, !dbg !1775
  %shl216 = shl i32 %203, 4, !dbg !1776
  %204 = load i32, i32* %i164, align 4, !dbg !1777
  %add217 = add nsw i32 %shl216, %204, !dbg !1778
  store i32 %add217, i32* %cost196, align 4, !dbg !1779
  %205 = load i32, i32* %cost196, align 4, !dbg !1780
  %206 = load i32, i32* %bcost, align 4, !dbg !1780
  %cmp218 = icmp slt i32 %205, %206, !dbg !1780
  br i1 %cmp218, label %if.then220, label %if.end221, !dbg !1782

if.then220:                                       ; preds = %if.then183
  %207 = load i32, i32* %cost196, align 4, !dbg !1780
  store i32 %207, i32* %bcost, align 4, !dbg !1780
  br label %if.end221, !dbg !1780

if.end221:                                        ; preds = %if.then220, %if.then183
  br label %if.end222, !dbg !1783

if.end222:                                        ; preds = %if.end221, %land.lhs.true175, %for.body168
  br label %for.inc223, !dbg !1784

for.inc223:                                       ; preds = %if.end222
  %208 = load i32, i32* %i164, align 4, !dbg !1785
  %inc224 = add nsw i32 %208, 1, !dbg !1785
  store i32 %inc224, i32* %i164, align 4, !dbg !1785
  br label %for.cond165, !dbg !1786, !llvm.loop !1787

for.end225:                                       ; preds = %for.cond165
  %209 = load i32, i32* %bcost, align 4, !dbg !1789
  %and226 = and i32 %209, 15, !dbg !1791
  %tobool227 = icmp ne i32 %and226, 0, !dbg !1791
  br i1 %tobool227, label %if.then228, label %if.end241, !dbg !1792

if.then228:                                       ; preds = %for.end225
  %210 = load i32, i32* %bcost, align 4, !dbg !1793
  %and229 = and i32 %210, 15, !dbg !1795
  %sub230 = sub nsw i32 %and229, 1, !dbg !1796
  %idxprom231 = sext i32 %sub230 to i64, !dbg !1797
  %arrayidx232 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 %idxprom231, !dbg !1797
  %arrayidx233 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx232, i64 0, i64 0, !dbg !1797
  %211 = load i16, i16* %arrayidx233, align 4, !dbg !1797
  %conv234 = sext i16 %211 to i32, !dbg !1797
  store i32 %conv234, i32* %bmx, align 4, !dbg !1798
  %212 = load i32, i32* %bcost, align 4, !dbg !1799
  %and235 = and i32 %212, 15, !dbg !1800
  %sub236 = sub nsw i32 %and235, 1, !dbg !1801
  %idxprom237 = sext i32 %sub236 to i64, !dbg !1802
  %arrayidx238 = getelementptr inbounds [16 x [2 x i16]], [16 x [2 x i16]]* %mvc_fpel, i64 0, i64 %idxprom237, !dbg !1802
  %arrayidx239 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx238, i64 0, i64 1, !dbg !1802
  %213 = load i16, i16* %arrayidx239, align 2, !dbg !1802
  %conv240 = sext i16 %213 to i32, !dbg !1802
  store i32 %conv240, i32* %bmy, align 4, !dbg !1803
  br label %if.end241, !dbg !1804

if.end241:                                        ; preds = %if.then228, %for.end225
  %214 = load i32, i32* %bcost, align 4, !dbg !1805
  %shr242 = ashr i32 %214, 4, !dbg !1805
  store i32 %shr242, i32* %bcost, align 4, !dbg !1805
  br label %if.end243, !dbg !1806

if.end243:                                        ; preds = %if.end241, %if.else
  br label %if.end244

if.end244:                                        ; preds = %if.end243, %if.end148
  %215 = load i32, i32* %pmv, align 4, !dbg !1807
  %tobool245 = icmp ne i32 %215, 0, !dbg !1807
  br i1 %tobool245, label %if.then246, label %if.end267, !dbg !1809

if.then246:                                       ; preds = %if.end244
  call void @llvm.dbg.declare(metadata i32* %cost247, metadata !1810, metadata !DIExpression()), !dbg !1812
  %216 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1812
  %pixf248 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %216, i32 0, i32 69, !dbg !1812
  %fpelcmp249 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf248, i32 0, i32 7, !dbg !1812
  %217 = load i32, i32* %i_pixel5, align 4, !dbg !1812
  %idxprom250 = sext i32 %217 to i64, !dbg !1812
  %arrayidx251 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp249, i64 0, i64 %idxprom250, !dbg !1812
  %218 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx251, align 8, !dbg !1812
  %219 = load i8*, i8** %p_fenc, align 8, !dbg !1812
  %220 = load i8*, i8** %p_fref_w, align 8, !dbg !1812
  %221 = load i32, i32* %stride, align 4, !dbg !1812
  %mul252 = mul nsw i32 0, %221, !dbg !1812
  %add253 = add nsw i32 %mul252, 0, !dbg !1812
  %idxprom254 = sext i32 %add253 to i64, !dbg !1812
  %arrayidx255 = getelementptr inbounds i8, i8* %220, i64 %idxprom254, !dbg !1812
  %222 = load i32, i32* %stride, align 4, !dbg !1812
  %call256 = call i32 %218(i8* %219, i32 16, i8* %arrayidx255, i32 %222), !dbg !1812
  %223 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1812
  %arrayidx257 = getelementptr inbounds i16, i16* %223, i64 0, !dbg !1812
  %224 = load i16, i16* %arrayidx257, align 2, !dbg !1812
  %conv258 = zext i16 %224 to i32, !dbg !1812
  %225 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1812
  %arrayidx259 = getelementptr inbounds i16, i16* %225, i64 0, !dbg !1812
  %226 = load i16, i16* %arrayidx259, align 2, !dbg !1812
  %conv260 = zext i16 %226 to i32, !dbg !1812
  %add261 = add nsw i32 %conv258, %conv260, !dbg !1812
  %add262 = add nsw i32 %call256, %add261, !dbg !1812
  store i32 %add262, i32* %cost247, align 4, !dbg !1812
  %227 = load i32, i32* %cost247, align 4, !dbg !1813
  %228 = load i32, i32* %bcost, align 4, !dbg !1813
  %cmp263 = icmp slt i32 %227, %228, !dbg !1813
  br i1 %cmp263, label %if.then265, label %if.end266, !dbg !1812

if.then265:                                       ; preds = %if.then246
  %229 = load i32, i32* %cost247, align 4, !dbg !1815
  store i32 %229, i32* %bcost, align 4, !dbg !1815
  store i32 0, i32* %bmx, align 4, !dbg !1815
  store i32 0, i32* %bmy, align 4, !dbg !1815
  br label %if.end266, !dbg !1815

if.end266:                                        ; preds = %if.then265, %if.then246
  br label %if.end267, !dbg !1812

if.end267:                                        ; preds = %if.end266, %if.end244
  %230 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1817
  %mb268 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %230, i32 0, i32 55, !dbg !1818
  %i_me_method = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb268, i32 0, i32 9, !dbg !1819
  %231 = load i32, i32* %i_me_method, align 4, !dbg !1819
  switch i32 %231, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb412
    i32 2, label %sw.bb1043
    i32 3, label %sw.bb3553
    i32 4, label %sw.bb3553
  ], !dbg !1820

sw.bb:                                            ; preds = %if.end267
  %232 = load i32, i32* %bcost, align 4, !dbg !1821
  %shl269 = shl i32 %232, 4, !dbg !1821
  store i32 %shl269, i32* %bcost, align 4, !dbg !1821
  call void @llvm.dbg.declare(metadata i32* %i270, metadata !1824, metadata !DIExpression()), !dbg !1825
  %233 = load i32, i32* %i_me_range, align 4, !dbg !1826
  store i32 %233, i32* %i270, align 4, !dbg !1825
  br label %do.body, !dbg !1827

do.body:                                          ; preds = %land.end, %sw.bb
  call void @llvm.dbg.declare(metadata i8** %pix_base, metadata !1828, metadata !DIExpression()), !dbg !1831
  %234 = load i8*, i8** %p_fref_w, align 8, !dbg !1831
  %235 = load i32, i32* %bmx, align 4, !dbg !1831
  %idx.ext271 = sext i32 %235 to i64, !dbg !1831
  %add.ptr272 = getelementptr inbounds i8, i8* %234, i64 %idx.ext271, !dbg !1831
  %236 = load i32, i32* %bmy, align 4, !dbg !1831
  %237 = load i32, i32* %stride, align 4, !dbg !1831
  %mul273 = mul nsw i32 %236, %237, !dbg !1831
  %idx.ext274 = sext i32 %mul273 to i64, !dbg !1831
  %add.ptr275 = getelementptr inbounds i8, i8* %add.ptr272, i64 %idx.ext274, !dbg !1831
  store i8* %add.ptr275, i8** %pix_base, align 8, !dbg !1831
  %238 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1831
  %pixf276 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %238, i32 0, i32 69, !dbg !1831
  %fpelcmp_x4 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf276, i32 0, i32 9, !dbg !1831
  %239 = load i32, i32* %i_pixel5, align 4, !dbg !1831
  %idxprom277 = sext i32 %239 to i64, !dbg !1831
  %arrayidx278 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x4, i64 0, i64 %idxprom277, !dbg !1831
  %240 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx278, align 8, !dbg !1831
  %241 = load i8*, i8** %p_fenc, align 8, !dbg !1831
  %242 = load i8*, i8** %pix_base, align 8, !dbg !1831
  %add.ptr279 = getelementptr inbounds i8, i8* %242, i64 0, !dbg !1831
  %243 = load i32, i32* %stride, align 4, !dbg !1831
  %mul280 = mul nsw i32 -1, %243, !dbg !1831
  %idx.ext281 = sext i32 %mul280 to i64, !dbg !1831
  %add.ptr282 = getelementptr inbounds i8, i8* %add.ptr279, i64 %idx.ext281, !dbg !1831
  %244 = load i8*, i8** %pix_base, align 8, !dbg !1831
  %add.ptr283 = getelementptr inbounds i8, i8* %244, i64 0, !dbg !1831
  %245 = load i32, i32* %stride, align 4, !dbg !1831
  %mul284 = mul nsw i32 1, %245, !dbg !1831
  %idx.ext285 = sext i32 %mul284 to i64, !dbg !1831
  %add.ptr286 = getelementptr inbounds i8, i8* %add.ptr283, i64 %idx.ext285, !dbg !1831
  %246 = load i8*, i8** %pix_base, align 8, !dbg !1831
  %add.ptr287 = getelementptr inbounds i8, i8* %246, i64 -1, !dbg !1831
  %247 = load i32, i32* %stride, align 4, !dbg !1831
  %mul288 = mul nsw i32 0, %247, !dbg !1831
  %idx.ext289 = sext i32 %mul288 to i64, !dbg !1831
  %add.ptr290 = getelementptr inbounds i8, i8* %add.ptr287, i64 %idx.ext289, !dbg !1831
  %248 = load i8*, i8** %pix_base, align 8, !dbg !1831
  %add.ptr291 = getelementptr inbounds i8, i8* %248, i64 1, !dbg !1831
  %249 = load i32, i32* %stride, align 4, !dbg !1831
  %mul292 = mul nsw i32 0, %249, !dbg !1831
  %idx.ext293 = sext i32 %mul292 to i64, !dbg !1831
  %add.ptr294 = getelementptr inbounds i8, i8* %add.ptr291, i64 %idx.ext293, !dbg !1831
  %250 = load i32, i32* %stride, align 4, !dbg !1831
  %arraydecay295 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1831
  call void %240(i8* %241, i8* %add.ptr282, i8* %add.ptr286, i8* %add.ptr290, i8* %add.ptr294, i32 %250, i32* %arraydecay295), !dbg !1831
  %251 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1831
  %252 = load i32, i32* %bmx, align 4, !dbg !1831
  %add296 = add nsw i32 %252, 0, !dbg !1831
  %shl297 = shl i32 %add296, 2, !dbg !1831
  %idxprom298 = sext i32 %shl297 to i64, !dbg !1831
  %arrayidx299 = getelementptr inbounds i16, i16* %251, i64 %idxprom298, !dbg !1831
  %253 = load i16, i16* %arrayidx299, align 2, !dbg !1831
  %conv300 = zext i16 %253 to i32, !dbg !1831
  %254 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1831
  %255 = load i32, i32* %bmy, align 4, !dbg !1831
  %add301 = add nsw i32 %255, -1, !dbg !1831
  %shl302 = shl i32 %add301, 2, !dbg !1831
  %idxprom303 = sext i32 %shl302 to i64, !dbg !1831
  %arrayidx304 = getelementptr inbounds i16, i16* %254, i64 %idxprom303, !dbg !1831
  %256 = load i16, i16* %arrayidx304, align 2, !dbg !1831
  %conv305 = zext i16 %256 to i32, !dbg !1831
  %add306 = add nsw i32 %conv300, %conv305, !dbg !1831
  %arrayidx307 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1831
  %257 = load i32, i32* %arrayidx307, align 16, !dbg !1831
  %add308 = add nsw i32 %257, %add306, !dbg !1831
  store i32 %add308, i32* %arrayidx307, align 16, !dbg !1831
  %258 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1831
  %259 = load i32, i32* %bmx, align 4, !dbg !1831
  %add309 = add nsw i32 %259, 0, !dbg !1831
  %shl310 = shl i32 %add309, 2, !dbg !1831
  %idxprom311 = sext i32 %shl310 to i64, !dbg !1831
  %arrayidx312 = getelementptr inbounds i16, i16* %258, i64 %idxprom311, !dbg !1831
  %260 = load i16, i16* %arrayidx312, align 2, !dbg !1831
  %conv313 = zext i16 %260 to i32, !dbg !1831
  %261 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1831
  %262 = load i32, i32* %bmy, align 4, !dbg !1831
  %add314 = add nsw i32 %262, 1, !dbg !1831
  %shl315 = shl i32 %add314, 2, !dbg !1831
  %idxprom316 = sext i32 %shl315 to i64, !dbg !1831
  %arrayidx317 = getelementptr inbounds i16, i16* %261, i64 %idxprom316, !dbg !1831
  %263 = load i16, i16* %arrayidx317, align 2, !dbg !1831
  %conv318 = zext i16 %263 to i32, !dbg !1831
  %add319 = add nsw i32 %conv313, %conv318, !dbg !1831
  %arrayidx320 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1831
  %264 = load i32, i32* %arrayidx320, align 4, !dbg !1831
  %add321 = add nsw i32 %264, %add319, !dbg !1831
  store i32 %add321, i32* %arrayidx320, align 4, !dbg !1831
  %265 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1831
  %266 = load i32, i32* %bmx, align 4, !dbg !1831
  %add322 = add nsw i32 %266, -1, !dbg !1831
  %shl323 = shl i32 %add322, 2, !dbg !1831
  %idxprom324 = sext i32 %shl323 to i64, !dbg !1831
  %arrayidx325 = getelementptr inbounds i16, i16* %265, i64 %idxprom324, !dbg !1831
  %267 = load i16, i16* %arrayidx325, align 2, !dbg !1831
  %conv326 = zext i16 %267 to i32, !dbg !1831
  %268 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1831
  %269 = load i32, i32* %bmy, align 4, !dbg !1831
  %add327 = add nsw i32 %269, 0, !dbg !1831
  %shl328 = shl i32 %add327, 2, !dbg !1831
  %idxprom329 = sext i32 %shl328 to i64, !dbg !1831
  %arrayidx330 = getelementptr inbounds i16, i16* %268, i64 %idxprom329, !dbg !1831
  %270 = load i16, i16* %arrayidx330, align 2, !dbg !1831
  %conv331 = zext i16 %270 to i32, !dbg !1831
  %add332 = add nsw i32 %conv326, %conv331, !dbg !1831
  %arrayidx333 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1831
  %271 = load i32, i32* %arrayidx333, align 8, !dbg !1831
  %add334 = add nsw i32 %271, %add332, !dbg !1831
  store i32 %add334, i32* %arrayidx333, align 8, !dbg !1831
  %272 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1831
  %273 = load i32, i32* %bmx, align 4, !dbg !1831
  %add335 = add nsw i32 %273, 1, !dbg !1831
  %shl336 = shl i32 %add335, 2, !dbg !1831
  %idxprom337 = sext i32 %shl336 to i64, !dbg !1831
  %arrayidx338 = getelementptr inbounds i16, i16* %272, i64 %idxprom337, !dbg !1831
  %274 = load i16, i16* %arrayidx338, align 2, !dbg !1831
  %conv339 = zext i16 %274 to i32, !dbg !1831
  %275 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1831
  %276 = load i32, i32* %bmy, align 4, !dbg !1831
  %add340 = add nsw i32 %276, 0, !dbg !1831
  %shl341 = shl i32 %add340, 2, !dbg !1831
  %idxprom342 = sext i32 %shl341 to i64, !dbg !1831
  %arrayidx343 = getelementptr inbounds i16, i16* %275, i64 %idxprom342, !dbg !1831
  %277 = load i16, i16* %arrayidx343, align 2, !dbg !1831
  %conv344 = zext i16 %277 to i32, !dbg !1831
  %add345 = add nsw i32 %conv339, %conv344, !dbg !1831
  %arrayidx346 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1831
  %278 = load i32, i32* %arrayidx346, align 4, !dbg !1831
  %add347 = add nsw i32 %278, %add345, !dbg !1831
  store i32 %add347, i32* %arrayidx346, align 4, !dbg !1831
  %arrayidx348 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1832
  %279 = load i32, i32* %arrayidx348, align 16, !dbg !1832
  %shl349 = shl i32 %279, 4, !dbg !1832
  %add350 = add nsw i32 %shl349, 1, !dbg !1832
  %280 = load i32, i32* %bcost, align 4, !dbg !1832
  %cmp351 = icmp slt i32 %add350, %280, !dbg !1832
  br i1 %cmp351, label %if.then353, label %if.end357, !dbg !1834

if.then353:                                       ; preds = %do.body
  %arrayidx354 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1832
  %281 = load i32, i32* %arrayidx354, align 16, !dbg !1832
  %shl355 = shl i32 %281, 4, !dbg !1832
  %add356 = add nsw i32 %shl355, 1, !dbg !1832
  store i32 %add356, i32* %bcost, align 4, !dbg !1832
  br label %if.end357, !dbg !1832

if.end357:                                        ; preds = %if.then353, %do.body
  %arrayidx358 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1835
  %282 = load i32, i32* %arrayidx358, align 4, !dbg !1835
  %shl359 = shl i32 %282, 4, !dbg !1835
  %add360 = add nsw i32 %shl359, 3, !dbg !1835
  %283 = load i32, i32* %bcost, align 4, !dbg !1835
  %cmp361 = icmp slt i32 %add360, %283, !dbg !1835
  br i1 %cmp361, label %if.then363, label %if.end367, !dbg !1837

if.then363:                                       ; preds = %if.end357
  %arrayidx364 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1835
  %284 = load i32, i32* %arrayidx364, align 4, !dbg !1835
  %shl365 = shl i32 %284, 4, !dbg !1835
  %add366 = add nsw i32 %shl365, 3, !dbg !1835
  store i32 %add366, i32* %bcost, align 4, !dbg !1835
  br label %if.end367, !dbg !1835

if.end367:                                        ; preds = %if.then363, %if.end357
  %arrayidx368 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1838
  %285 = load i32, i32* %arrayidx368, align 8, !dbg !1838
  %shl369 = shl i32 %285, 4, !dbg !1838
  %add370 = add nsw i32 %shl369, 4, !dbg !1838
  %286 = load i32, i32* %bcost, align 4, !dbg !1838
  %cmp371 = icmp slt i32 %add370, %286, !dbg !1838
  br i1 %cmp371, label %if.then373, label %if.end377, !dbg !1840

if.then373:                                       ; preds = %if.end367
  %arrayidx374 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1838
  %287 = load i32, i32* %arrayidx374, align 8, !dbg !1838
  %shl375 = shl i32 %287, 4, !dbg !1838
  %add376 = add nsw i32 %shl375, 4, !dbg !1838
  store i32 %add376, i32* %bcost, align 4, !dbg !1838
  br label %if.end377, !dbg !1838

if.end377:                                        ; preds = %if.then373, %if.end367
  %arrayidx378 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1841
  %288 = load i32, i32* %arrayidx378, align 4, !dbg !1841
  %shl379 = shl i32 %288, 4, !dbg !1841
  %add380 = add nsw i32 %shl379, 12, !dbg !1841
  %289 = load i32, i32* %bcost, align 4, !dbg !1841
  %cmp381 = icmp slt i32 %add380, %289, !dbg !1841
  br i1 %cmp381, label %if.then383, label %if.end387, !dbg !1843

if.then383:                                       ; preds = %if.end377
  %arrayidx384 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1841
  %290 = load i32, i32* %arrayidx384, align 4, !dbg !1841
  %shl385 = shl i32 %290, 4, !dbg !1841
  %add386 = add nsw i32 %shl385, 12, !dbg !1841
  store i32 %add386, i32* %bcost, align 4, !dbg !1841
  br label %if.end387, !dbg !1841

if.end387:                                        ; preds = %if.then383, %if.end377
  %291 = load i32, i32* %bcost, align 4, !dbg !1844
  %and388 = and i32 %291, 15, !dbg !1846
  %tobool389 = icmp ne i32 %and388, 0, !dbg !1846
  br i1 %tobool389, label %if.end391, label %if.then390, !dbg !1847

if.then390:                                       ; preds = %if.end387
  br label %do.end, !dbg !1848

if.end391:                                        ; preds = %if.end387
  %292 = load i32, i32* %bcost, align 4, !dbg !1849
  %shl392 = shl i32 %292, 28, !dbg !1850
  %shr393 = ashr i32 %shl392, 30, !dbg !1851
  %293 = load i32, i32* %bmx, align 4, !dbg !1852
  %sub394 = sub nsw i32 %293, %shr393, !dbg !1852
  store i32 %sub394, i32* %bmx, align 4, !dbg !1852
  %294 = load i32, i32* %bcost, align 4, !dbg !1853
  %shl395 = shl i32 %294, 30, !dbg !1854
  %shr396 = ashr i32 %shl395, 30, !dbg !1855
  %295 = load i32, i32* %bmy, align 4, !dbg !1856
  %sub397 = sub nsw i32 %295, %shr396, !dbg !1856
  store i32 %sub397, i32* %bmy, align 4, !dbg !1856
  %296 = load i32, i32* %bcost, align 4, !dbg !1857
  %and398 = and i32 %296, -16, !dbg !1857
  store i32 %and398, i32* %bcost, align 4, !dbg !1857
  br label %do.cond, !dbg !1858

do.cond:                                          ; preds = %if.end391
  %297 = load i32, i32* %i270, align 4, !dbg !1859
  %dec = add nsw i32 %297, -1, !dbg !1859
  store i32 %dec, i32* %i270, align 4, !dbg !1859
  %tobool399 = icmp ne i32 %dec, 0, !dbg !1859
  br i1 %tobool399, label %land.rhs, label %land.end, !dbg !1860

land.rhs:                                         ; preds = %do.cond
  %298 = load i32, i32* %bmx, align 4, !dbg !1861
  %shl400 = shl i32 %298, 16, !dbg !1861
  %299 = load i32, i32* %bmy, align 4, !dbg !1861
  %and401 = and i32 %299, 32767, !dbg !1861
  %or402 = or i32 %shl400, %and401, !dbg !1861
  %300 = load i32, i32* %mv_min, align 4, !dbg !1861
  %add403 = add i32 %or402, %300, !dbg !1861
  %301 = load i32, i32* %mv_max, align 4, !dbg !1861
  %302 = load i32, i32* %bmx, align 4, !dbg !1861
  %shl404 = shl i32 %302, 16, !dbg !1861
  %303 = load i32, i32* %bmy, align 4, !dbg !1861
  %and405 = and i32 %303, 32767, !dbg !1861
  %or406 = or i32 %shl404, %and405, !dbg !1861
  %sub407 = sub i32 %301, %or406, !dbg !1861
  %or408 = or i32 %add403, %sub407, !dbg !1861
  %and409 = and i32 %or408, -2147467264, !dbg !1861
  %tobool410 = icmp ne i32 %and409, 0, !dbg !1861
  %lnot = xor i1 %tobool410, true, !dbg !1861
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %304 = phi i1 [ false, %do.cond ], [ %lnot, %land.rhs ], !dbg !1862
  br i1 %304, label %do.body, label %do.end, !dbg !1858, !llvm.loop !1863

do.end:                                           ; preds = %land.end, %if.then390
  %305 = load i32, i32* %bcost, align 4, !dbg !1865
  %shr411 = ashr i32 %305, 4, !dbg !1865
  store i32 %shr411, i32* %bcost, align 4, !dbg !1865
  br label %sw.epilog, !dbg !1866

sw.bb412:                                         ; preds = %if.end267
  br label %me_hex2, !dbg !1867

me_hex2:                                          ; preds = %if.then3551, %if.then1272, %sw.bb412
  call void @llvm.dbg.label(metadata !1868), !dbg !1870
  call void @llvm.dbg.declare(metadata i8** %pix_base413, metadata !1871, metadata !DIExpression()), !dbg !1873
  %306 = load i8*, i8** %p_fref_w, align 8, !dbg !1873
  %307 = load i32, i32* %bmx, align 4, !dbg !1873
  %idx.ext414 = sext i32 %307 to i64, !dbg !1873
  %add.ptr415 = getelementptr inbounds i8, i8* %306, i64 %idx.ext414, !dbg !1873
  %308 = load i32, i32* %bmy, align 4, !dbg !1873
  %309 = load i32, i32* %stride, align 4, !dbg !1873
  %mul416 = mul nsw i32 %308, %309, !dbg !1873
  %idx.ext417 = sext i32 %mul416 to i64, !dbg !1873
  %add.ptr418 = getelementptr inbounds i8, i8* %add.ptr415, i64 %idx.ext417, !dbg !1873
  store i8* %add.ptr418, i8** %pix_base413, align 8, !dbg !1873
  %310 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1873
  %pixf419 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %310, i32 0, i32 69, !dbg !1873
  %fpelcmp_x3 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf419, i32 0, i32 8, !dbg !1873
  %311 = load i32, i32* %i_pixel5, align 4, !dbg !1873
  %idxprom420 = sext i32 %311 to i64, !dbg !1873
  %arrayidx421 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x3, i64 0, i64 %idxprom420, !dbg !1873
  %312 = load void (i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx421, align 8, !dbg !1873
  %313 = load i8*, i8** %p_fenc, align 8, !dbg !1873
  %314 = load i8*, i8** %pix_base413, align 8, !dbg !1873
  %add.ptr422 = getelementptr inbounds i8, i8* %314, i64 -2, !dbg !1873
  %315 = load i32, i32* %stride, align 4, !dbg !1873
  %mul423 = mul nsw i32 0, %315, !dbg !1873
  %idx.ext424 = sext i32 %mul423 to i64, !dbg !1873
  %add.ptr425 = getelementptr inbounds i8, i8* %add.ptr422, i64 %idx.ext424, !dbg !1873
  %316 = load i8*, i8** %pix_base413, align 8, !dbg !1873
  %add.ptr426 = getelementptr inbounds i8, i8* %316, i64 -1, !dbg !1873
  %317 = load i32, i32* %stride, align 4, !dbg !1873
  %mul427 = mul nsw i32 2, %317, !dbg !1873
  %idx.ext428 = sext i32 %mul427 to i64, !dbg !1873
  %add.ptr429 = getelementptr inbounds i8, i8* %add.ptr426, i64 %idx.ext428, !dbg !1873
  %318 = load i8*, i8** %pix_base413, align 8, !dbg !1873
  %add.ptr430 = getelementptr inbounds i8, i8* %318, i64 1, !dbg !1873
  %319 = load i32, i32* %stride, align 4, !dbg !1873
  %mul431 = mul nsw i32 2, %319, !dbg !1873
  %idx.ext432 = sext i32 %mul431 to i64, !dbg !1873
  %add.ptr433 = getelementptr inbounds i8, i8* %add.ptr430, i64 %idx.ext432, !dbg !1873
  %320 = load i32, i32* %stride, align 4, !dbg !1873
  %arraydecay434 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1873
  call void %312(i8* %313, i8* %add.ptr425, i8* %add.ptr429, i8* %add.ptr433, i32 %320, i32* %arraydecay434), !dbg !1873
  %321 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1873
  %322 = load i32, i32* %bmx, align 4, !dbg !1873
  %add435 = add nsw i32 %322, -2, !dbg !1873
  %shl436 = shl i32 %add435, 2, !dbg !1873
  %idxprom437 = sext i32 %shl436 to i64, !dbg !1873
  %arrayidx438 = getelementptr inbounds i16, i16* %321, i64 %idxprom437, !dbg !1873
  %323 = load i16, i16* %arrayidx438, align 2, !dbg !1873
  %conv439 = zext i16 %323 to i32, !dbg !1873
  %324 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1873
  %325 = load i32, i32* %bmy, align 4, !dbg !1873
  %add440 = add nsw i32 %325, 0, !dbg !1873
  %shl441 = shl i32 %add440, 2, !dbg !1873
  %idxprom442 = sext i32 %shl441 to i64, !dbg !1873
  %arrayidx443 = getelementptr inbounds i16, i16* %324, i64 %idxprom442, !dbg !1873
  %326 = load i16, i16* %arrayidx443, align 2, !dbg !1873
  %conv444 = zext i16 %326 to i32, !dbg !1873
  %add445 = add nsw i32 %conv439, %conv444, !dbg !1873
  %arrayidx446 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1873
  %327 = load i32, i32* %arrayidx446, align 16, !dbg !1873
  %add447 = add nsw i32 %327, %add445, !dbg !1873
  store i32 %add447, i32* %arrayidx446, align 16, !dbg !1873
  %328 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1873
  %329 = load i32, i32* %bmx, align 4, !dbg !1873
  %add448 = add nsw i32 %329, -1, !dbg !1873
  %shl449 = shl i32 %add448, 2, !dbg !1873
  %idxprom450 = sext i32 %shl449 to i64, !dbg !1873
  %arrayidx451 = getelementptr inbounds i16, i16* %328, i64 %idxprom450, !dbg !1873
  %330 = load i16, i16* %arrayidx451, align 2, !dbg !1873
  %conv452 = zext i16 %330 to i32, !dbg !1873
  %331 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1873
  %332 = load i32, i32* %bmy, align 4, !dbg !1873
  %add453 = add nsw i32 %332, 2, !dbg !1873
  %shl454 = shl i32 %add453, 2, !dbg !1873
  %idxprom455 = sext i32 %shl454 to i64, !dbg !1873
  %arrayidx456 = getelementptr inbounds i16, i16* %331, i64 %idxprom455, !dbg !1873
  %333 = load i16, i16* %arrayidx456, align 2, !dbg !1873
  %conv457 = zext i16 %333 to i32, !dbg !1873
  %add458 = add nsw i32 %conv452, %conv457, !dbg !1873
  %arrayidx459 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1873
  %334 = load i32, i32* %arrayidx459, align 4, !dbg !1873
  %add460 = add nsw i32 %334, %add458, !dbg !1873
  store i32 %add460, i32* %arrayidx459, align 4, !dbg !1873
  %335 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1873
  %336 = load i32, i32* %bmx, align 4, !dbg !1873
  %add461 = add nsw i32 %336, 1, !dbg !1873
  %shl462 = shl i32 %add461, 2, !dbg !1873
  %idxprom463 = sext i32 %shl462 to i64, !dbg !1873
  %arrayidx464 = getelementptr inbounds i16, i16* %335, i64 %idxprom463, !dbg !1873
  %337 = load i16, i16* %arrayidx464, align 2, !dbg !1873
  %conv465 = zext i16 %337 to i32, !dbg !1873
  %338 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1873
  %339 = load i32, i32* %bmy, align 4, !dbg !1873
  %add466 = add nsw i32 %339, 2, !dbg !1873
  %shl467 = shl i32 %add466, 2, !dbg !1873
  %idxprom468 = sext i32 %shl467 to i64, !dbg !1873
  %arrayidx469 = getelementptr inbounds i16, i16* %338, i64 %idxprom468, !dbg !1873
  %340 = load i16, i16* %arrayidx469, align 2, !dbg !1873
  %conv470 = zext i16 %340 to i32, !dbg !1873
  %add471 = add nsw i32 %conv465, %conv470, !dbg !1873
  %arrayidx472 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1873
  %341 = load i32, i32* %arrayidx472, align 8, !dbg !1873
  %add473 = add nsw i32 %341, %add471, !dbg !1873
  store i32 %add473, i32* %arrayidx472, align 8, !dbg !1873
  call void @llvm.dbg.declare(metadata i8** %pix_base474, metadata !1874, metadata !DIExpression()), !dbg !1876
  %342 = load i8*, i8** %p_fref_w, align 8, !dbg !1876
  %343 = load i32, i32* %bmx, align 4, !dbg !1876
  %idx.ext475 = sext i32 %343 to i64, !dbg !1876
  %add.ptr476 = getelementptr inbounds i8, i8* %342, i64 %idx.ext475, !dbg !1876
  %344 = load i32, i32* %bmy, align 4, !dbg !1876
  %345 = load i32, i32* %stride, align 4, !dbg !1876
  %mul477 = mul nsw i32 %344, %345, !dbg !1876
  %idx.ext478 = sext i32 %mul477 to i64, !dbg !1876
  %add.ptr479 = getelementptr inbounds i8, i8* %add.ptr476, i64 %idx.ext478, !dbg !1876
  store i8* %add.ptr479, i8** %pix_base474, align 8, !dbg !1876
  %346 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1876
  %pixf480 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %346, i32 0, i32 69, !dbg !1876
  %fpelcmp_x3481 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf480, i32 0, i32 8, !dbg !1876
  %347 = load i32, i32* %i_pixel5, align 4, !dbg !1876
  %idxprom482 = sext i32 %347 to i64, !dbg !1876
  %arrayidx483 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x3481, i64 0, i64 %idxprom482, !dbg !1876
  %348 = load void (i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx483, align 8, !dbg !1876
  %349 = load i8*, i8** %p_fenc, align 8, !dbg !1876
  %350 = load i8*, i8** %pix_base474, align 8, !dbg !1876
  %add.ptr484 = getelementptr inbounds i8, i8* %350, i64 2, !dbg !1876
  %351 = load i32, i32* %stride, align 4, !dbg !1876
  %mul485 = mul nsw i32 0, %351, !dbg !1876
  %idx.ext486 = sext i32 %mul485 to i64, !dbg !1876
  %add.ptr487 = getelementptr inbounds i8, i8* %add.ptr484, i64 %idx.ext486, !dbg !1876
  %352 = load i8*, i8** %pix_base474, align 8, !dbg !1876
  %add.ptr488 = getelementptr inbounds i8, i8* %352, i64 1, !dbg !1876
  %353 = load i32, i32* %stride, align 4, !dbg !1876
  %mul489 = mul nsw i32 -2, %353, !dbg !1876
  %idx.ext490 = sext i32 %mul489 to i64, !dbg !1876
  %add.ptr491 = getelementptr inbounds i8, i8* %add.ptr488, i64 %idx.ext490, !dbg !1876
  %354 = load i8*, i8** %pix_base474, align 8, !dbg !1876
  %add.ptr492 = getelementptr inbounds i8, i8* %354, i64 -1, !dbg !1876
  %355 = load i32, i32* %stride, align 4, !dbg !1876
  %mul493 = mul nsw i32 -2, %355, !dbg !1876
  %idx.ext494 = sext i32 %mul493 to i64, !dbg !1876
  %add.ptr495 = getelementptr inbounds i8, i8* %add.ptr492, i64 %idx.ext494, !dbg !1876
  %356 = load i32, i32* %stride, align 4, !dbg !1876
  %arraydecay496 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1876
  %add.ptr497 = getelementptr inbounds i32, i32* %arraydecay496, i64 3, !dbg !1876
  call void %348(i8* %349, i8* %add.ptr487, i8* %add.ptr491, i8* %add.ptr495, i32 %356, i32* %add.ptr497), !dbg !1876
  %357 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1876
  %358 = load i32, i32* %bmx, align 4, !dbg !1876
  %add498 = add nsw i32 %358, 2, !dbg !1876
  %shl499 = shl i32 %add498, 2, !dbg !1876
  %idxprom500 = sext i32 %shl499 to i64, !dbg !1876
  %arrayidx501 = getelementptr inbounds i16, i16* %357, i64 %idxprom500, !dbg !1876
  %359 = load i16, i16* %arrayidx501, align 2, !dbg !1876
  %conv502 = zext i16 %359 to i32, !dbg !1876
  %360 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1876
  %361 = load i32, i32* %bmy, align 4, !dbg !1876
  %add503 = add nsw i32 %361, 0, !dbg !1876
  %shl504 = shl i32 %add503, 2, !dbg !1876
  %idxprom505 = sext i32 %shl504 to i64, !dbg !1876
  %arrayidx506 = getelementptr inbounds i16, i16* %360, i64 %idxprom505, !dbg !1876
  %362 = load i16, i16* %arrayidx506, align 2, !dbg !1876
  %conv507 = zext i16 %362 to i32, !dbg !1876
  %add508 = add nsw i32 %conv502, %conv507, !dbg !1876
  %arraydecay509 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1876
  %add.ptr510 = getelementptr inbounds i32, i32* %arraydecay509, i64 3, !dbg !1876
  %arrayidx511 = getelementptr inbounds i32, i32* %add.ptr510, i64 0, !dbg !1876
  %363 = load i32, i32* %arrayidx511, align 4, !dbg !1876
  %add512 = add nsw i32 %363, %add508, !dbg !1876
  store i32 %add512, i32* %arrayidx511, align 4, !dbg !1876
  %364 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1876
  %365 = load i32, i32* %bmx, align 4, !dbg !1876
  %add513 = add nsw i32 %365, 1, !dbg !1876
  %shl514 = shl i32 %add513, 2, !dbg !1876
  %idxprom515 = sext i32 %shl514 to i64, !dbg !1876
  %arrayidx516 = getelementptr inbounds i16, i16* %364, i64 %idxprom515, !dbg !1876
  %366 = load i16, i16* %arrayidx516, align 2, !dbg !1876
  %conv517 = zext i16 %366 to i32, !dbg !1876
  %367 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1876
  %368 = load i32, i32* %bmy, align 4, !dbg !1876
  %add518 = add nsw i32 %368, -2, !dbg !1876
  %shl519 = shl i32 %add518, 2, !dbg !1876
  %idxprom520 = sext i32 %shl519 to i64, !dbg !1876
  %arrayidx521 = getelementptr inbounds i16, i16* %367, i64 %idxprom520, !dbg !1876
  %369 = load i16, i16* %arrayidx521, align 2, !dbg !1876
  %conv522 = zext i16 %369 to i32, !dbg !1876
  %add523 = add nsw i32 %conv517, %conv522, !dbg !1876
  %arraydecay524 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1876
  %add.ptr525 = getelementptr inbounds i32, i32* %arraydecay524, i64 3, !dbg !1876
  %arrayidx526 = getelementptr inbounds i32, i32* %add.ptr525, i64 1, !dbg !1876
  %370 = load i32, i32* %arrayidx526, align 4, !dbg !1876
  %add527 = add nsw i32 %370, %add523, !dbg !1876
  store i32 %add527, i32* %arrayidx526, align 4, !dbg !1876
  %371 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1876
  %372 = load i32, i32* %bmx, align 4, !dbg !1876
  %add528 = add nsw i32 %372, -1, !dbg !1876
  %shl529 = shl i32 %add528, 2, !dbg !1876
  %idxprom530 = sext i32 %shl529 to i64, !dbg !1876
  %arrayidx531 = getelementptr inbounds i16, i16* %371, i64 %idxprom530, !dbg !1876
  %373 = load i16, i16* %arrayidx531, align 2, !dbg !1876
  %conv532 = zext i16 %373 to i32, !dbg !1876
  %374 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1876
  %375 = load i32, i32* %bmy, align 4, !dbg !1876
  %add533 = add nsw i32 %375, -2, !dbg !1876
  %shl534 = shl i32 %add533, 2, !dbg !1876
  %idxprom535 = sext i32 %shl534 to i64, !dbg !1876
  %arrayidx536 = getelementptr inbounds i16, i16* %374, i64 %idxprom535, !dbg !1876
  %376 = load i16, i16* %arrayidx536, align 2, !dbg !1876
  %conv537 = zext i16 %376 to i32, !dbg !1876
  %add538 = add nsw i32 %conv532, %conv537, !dbg !1876
  %arraydecay539 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1876
  %add.ptr540 = getelementptr inbounds i32, i32* %arraydecay539, i64 3, !dbg !1876
  %arrayidx541 = getelementptr inbounds i32, i32* %add.ptr540, i64 2, !dbg !1876
  %377 = load i32, i32* %arrayidx541, align 4, !dbg !1876
  %add542 = add nsw i32 %377, %add538, !dbg !1876
  store i32 %add542, i32* %arrayidx541, align 4, !dbg !1876
  %378 = load i32, i32* %bcost, align 4, !dbg !1877
  %shl543 = shl i32 %378, 3, !dbg !1877
  store i32 %shl543, i32* %bcost, align 4, !dbg !1877
  %arrayidx544 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1878
  %379 = load i32, i32* %arrayidx544, align 16, !dbg !1878
  %shl545 = shl i32 %379, 3, !dbg !1878
  %add546 = add nsw i32 %shl545, 2, !dbg !1878
  %380 = load i32, i32* %bcost, align 4, !dbg !1878
  %cmp547 = icmp slt i32 %add546, %380, !dbg !1878
  br i1 %cmp547, label %if.then549, label %if.end553, !dbg !1880

if.then549:                                       ; preds = %me_hex2
  %arrayidx550 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1878
  %381 = load i32, i32* %arrayidx550, align 16, !dbg !1878
  %shl551 = shl i32 %381, 3, !dbg !1878
  %add552 = add nsw i32 %shl551, 2, !dbg !1878
  store i32 %add552, i32* %bcost, align 4, !dbg !1878
  br label %if.end553, !dbg !1878

if.end553:                                        ; preds = %if.then549, %me_hex2
  %arrayidx554 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1881
  %382 = load i32, i32* %arrayidx554, align 4, !dbg !1881
  %shl555 = shl i32 %382, 3, !dbg !1881
  %add556 = add nsw i32 %shl555, 3, !dbg !1881
  %383 = load i32, i32* %bcost, align 4, !dbg !1881
  %cmp557 = icmp slt i32 %add556, %383, !dbg !1881
  br i1 %cmp557, label %if.then559, label %if.end563, !dbg !1883

if.then559:                                       ; preds = %if.end553
  %arrayidx560 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1881
  %384 = load i32, i32* %arrayidx560, align 4, !dbg !1881
  %shl561 = shl i32 %384, 3, !dbg !1881
  %add562 = add nsw i32 %shl561, 3, !dbg !1881
  store i32 %add562, i32* %bcost, align 4, !dbg !1881
  br label %if.end563, !dbg !1881

if.end563:                                        ; preds = %if.then559, %if.end553
  %arrayidx564 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1884
  %385 = load i32, i32* %arrayidx564, align 8, !dbg !1884
  %shl565 = shl i32 %385, 3, !dbg !1884
  %add566 = add nsw i32 %shl565, 4, !dbg !1884
  %386 = load i32, i32* %bcost, align 4, !dbg !1884
  %cmp567 = icmp slt i32 %add566, %386, !dbg !1884
  br i1 %cmp567, label %if.then569, label %if.end573, !dbg !1886

if.then569:                                       ; preds = %if.end563
  %arrayidx570 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1884
  %387 = load i32, i32* %arrayidx570, align 8, !dbg !1884
  %shl571 = shl i32 %387, 3, !dbg !1884
  %add572 = add nsw i32 %shl571, 4, !dbg !1884
  store i32 %add572, i32* %bcost, align 4, !dbg !1884
  br label %if.end573, !dbg !1884

if.end573:                                        ; preds = %if.then569, %if.end563
  %arrayidx574 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1887
  %388 = load i32, i32* %arrayidx574, align 4, !dbg !1887
  %shl575 = shl i32 %388, 3, !dbg !1887
  %add576 = add nsw i32 %shl575, 5, !dbg !1887
  %389 = load i32, i32* %bcost, align 4, !dbg !1887
  %cmp577 = icmp slt i32 %add576, %389, !dbg !1887
  br i1 %cmp577, label %if.then579, label %if.end583, !dbg !1889

if.then579:                                       ; preds = %if.end573
  %arrayidx580 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1887
  %390 = load i32, i32* %arrayidx580, align 4, !dbg !1887
  %shl581 = shl i32 %390, 3, !dbg !1887
  %add582 = add nsw i32 %shl581, 5, !dbg !1887
  store i32 %add582, i32* %bcost, align 4, !dbg !1887
  br label %if.end583, !dbg !1887

if.end583:                                        ; preds = %if.then579, %if.end573
  %arrayidx584 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 4, !dbg !1890
  %391 = load i32, i32* %arrayidx584, align 16, !dbg !1890
  %shl585 = shl i32 %391, 3, !dbg !1890
  %add586 = add nsw i32 %shl585, 6, !dbg !1890
  %392 = load i32, i32* %bcost, align 4, !dbg !1890
  %cmp587 = icmp slt i32 %add586, %392, !dbg !1890
  br i1 %cmp587, label %if.then589, label %if.end593, !dbg !1892

if.then589:                                       ; preds = %if.end583
  %arrayidx590 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 4, !dbg !1890
  %393 = load i32, i32* %arrayidx590, align 16, !dbg !1890
  %shl591 = shl i32 %393, 3, !dbg !1890
  %add592 = add nsw i32 %shl591, 6, !dbg !1890
  store i32 %add592, i32* %bcost, align 4, !dbg !1890
  br label %if.end593, !dbg !1890

if.end593:                                        ; preds = %if.then589, %if.end583
  %arrayidx594 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 5, !dbg !1893
  %394 = load i32, i32* %arrayidx594, align 4, !dbg !1893
  %shl595 = shl i32 %394, 3, !dbg !1893
  %add596 = add nsw i32 %shl595, 7, !dbg !1893
  %395 = load i32, i32* %bcost, align 4, !dbg !1893
  %cmp597 = icmp slt i32 %add596, %395, !dbg !1893
  br i1 %cmp597, label %if.then599, label %if.end603, !dbg !1895

if.then599:                                       ; preds = %if.end593
  %arrayidx600 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 5, !dbg !1893
  %396 = load i32, i32* %arrayidx600, align 4, !dbg !1893
  %shl601 = shl i32 %396, 3, !dbg !1893
  %add602 = add nsw i32 %shl601, 7, !dbg !1893
  store i32 %add602, i32* %bcost, align 4, !dbg !1893
  br label %if.end603, !dbg !1893

if.end603:                                        ; preds = %if.then599, %if.end593
  %397 = load i32, i32* %bcost, align 4, !dbg !1896
  %and604 = and i32 %397, 7, !dbg !1898
  %tobool605 = icmp ne i32 %and604, 0, !dbg !1898
  br i1 %tobool605, label %if.then606, label %if.end824, !dbg !1899

if.then606:                                       ; preds = %if.end603
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !1900, metadata !DIExpression()), !dbg !1902
  %398 = load i32, i32* %bcost, align 4, !dbg !1903
  %and607 = and i32 %398, 7, !dbg !1904
  %sub608 = sub nsw i32 %and607, 2, !dbg !1905
  store i32 %sub608, i32* %dir, align 4, !dbg !1902
  %399 = load i32, i32* %dir, align 4, !dbg !1906
  %add609 = add nsw i32 %399, 1, !dbg !1907
  %idxprom610 = sext i32 %add609 to i64, !dbg !1908
  %arrayidx611 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom610, !dbg !1908
  %arrayidx612 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx611, i64 0, i64 0, !dbg !1908
  %400 = load i8, i8* %arrayidx612, align 2, !dbg !1908
  %conv613 = sext i8 %400 to i32, !dbg !1908
  %401 = load i32, i32* %bmx, align 4, !dbg !1909
  %add614 = add nsw i32 %401, %conv613, !dbg !1909
  store i32 %add614, i32* %bmx, align 4, !dbg !1909
  %402 = load i32, i32* %dir, align 4, !dbg !1910
  %add615 = add nsw i32 %402, 1, !dbg !1911
  %idxprom616 = sext i32 %add615 to i64, !dbg !1912
  %arrayidx617 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom616, !dbg !1912
  %arrayidx618 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx617, i64 0, i64 1, !dbg !1912
  %403 = load i8, i8* %arrayidx618, align 1, !dbg !1912
  %conv619 = sext i8 %403 to i32, !dbg !1912
  %404 = load i32, i32* %bmy, align 4, !dbg !1913
  %add620 = add nsw i32 %404, %conv619, !dbg !1913
  store i32 %add620, i32* %bmy, align 4, !dbg !1913
  call void @llvm.dbg.declare(metadata i32* %i621, metadata !1914, metadata !DIExpression()), !dbg !1916
  %405 = load i32, i32* %i_me_range, align 4, !dbg !1917
  %shr622 = ashr i32 %405, 1, !dbg !1918
  %sub623 = sub nsw i32 %shr622, 1, !dbg !1919
  store i32 %sub623, i32* %i621, align 4, !dbg !1916
  br label %for.cond624, !dbg !1920

for.cond624:                                      ; preds = %for.inc821, %if.then606
  %406 = load i32, i32* %i621, align 4, !dbg !1921
  %cmp625 = icmp sgt i32 %406, 0, !dbg !1923
  br i1 %cmp625, label %land.rhs627, label %land.end640, !dbg !1924

land.rhs627:                                      ; preds = %for.cond624
  %407 = load i32, i32* %bmx, align 4, !dbg !1925
  %shl628 = shl i32 %407, 16, !dbg !1925
  %408 = load i32, i32* %bmy, align 4, !dbg !1925
  %and629 = and i32 %408, 32767, !dbg !1925
  %or630 = or i32 %shl628, %and629, !dbg !1925
  %409 = load i32, i32* %mv_min, align 4, !dbg !1925
  %add631 = add i32 %or630, %409, !dbg !1925
  %410 = load i32, i32* %mv_max, align 4, !dbg !1925
  %411 = load i32, i32* %bmx, align 4, !dbg !1925
  %shl632 = shl i32 %411, 16, !dbg !1925
  %412 = load i32, i32* %bmy, align 4, !dbg !1925
  %and633 = and i32 %412, 32767, !dbg !1925
  %or634 = or i32 %shl632, %and633, !dbg !1925
  %sub635 = sub i32 %410, %or634, !dbg !1925
  %or636 = or i32 %add631, %sub635, !dbg !1925
  %and637 = and i32 %or636, -2147467264, !dbg !1925
  %tobool638 = icmp ne i32 %and637, 0, !dbg !1925
  %lnot639 = xor i1 %tobool638, true, !dbg !1925
  br label %land.end640

land.end640:                                      ; preds = %land.rhs627, %for.cond624
  %413 = phi i1 [ false, %for.cond624 ], [ %lnot639, %land.rhs627 ], !dbg !1926
  br i1 %413, label %for.body641, label %for.end823, !dbg !1927

for.body641:                                      ; preds = %land.end640
  call void @llvm.dbg.declare(metadata i8** %pix_base642, metadata !1928, metadata !DIExpression()), !dbg !1931
  %414 = load i8*, i8** %p_fref_w, align 8, !dbg !1931
  %415 = load i32, i32* %bmx, align 4, !dbg !1931
  %idx.ext643 = sext i32 %415 to i64, !dbg !1931
  %add.ptr644 = getelementptr inbounds i8, i8* %414, i64 %idx.ext643, !dbg !1931
  %416 = load i32, i32* %bmy, align 4, !dbg !1931
  %417 = load i32, i32* %stride, align 4, !dbg !1931
  %mul645 = mul nsw i32 %416, %417, !dbg !1931
  %idx.ext646 = sext i32 %mul645 to i64, !dbg !1931
  %add.ptr647 = getelementptr inbounds i8, i8* %add.ptr644, i64 %idx.ext646, !dbg !1931
  store i8* %add.ptr647, i8** %pix_base642, align 8, !dbg !1931
  %418 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1931
  %pixf648 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %418, i32 0, i32 69, !dbg !1931
  %fpelcmp_x3649 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf648, i32 0, i32 8, !dbg !1931
  %419 = load i32, i32* %i_pixel5, align 4, !dbg !1931
  %idxprom650 = sext i32 %419 to i64, !dbg !1931
  %arrayidx651 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x3649, i64 0, i64 %idxprom650, !dbg !1931
  %420 = load void (i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx651, align 8, !dbg !1931
  %421 = load i8*, i8** %p_fenc, align 8, !dbg !1931
  %422 = load i8*, i8** %pix_base642, align 8, !dbg !1931
  %423 = load i32, i32* %dir, align 4, !dbg !1931
  %add652 = add nsw i32 %423, 0, !dbg !1931
  %idxprom653 = sext i32 %add652 to i64, !dbg !1931
  %arrayidx654 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom653, !dbg !1931
  %arrayidx655 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx654, i64 0, i64 0, !dbg !1931
  %424 = load i8, i8* %arrayidx655, align 2, !dbg !1931
  %conv656 = sext i8 %424 to i32, !dbg !1931
  %idx.ext657 = sext i32 %conv656 to i64, !dbg !1931
  %add.ptr658 = getelementptr inbounds i8, i8* %422, i64 %idx.ext657, !dbg !1931
  %425 = load i32, i32* %dir, align 4, !dbg !1931
  %add659 = add nsw i32 %425, 0, !dbg !1931
  %idxprom660 = sext i32 %add659 to i64, !dbg !1931
  %arrayidx661 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom660, !dbg !1931
  %arrayidx662 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx661, i64 0, i64 1, !dbg !1931
  %426 = load i8, i8* %arrayidx662, align 1, !dbg !1931
  %conv663 = sext i8 %426 to i32, !dbg !1931
  %427 = load i32, i32* %stride, align 4, !dbg !1931
  %mul664 = mul nsw i32 %conv663, %427, !dbg !1931
  %idx.ext665 = sext i32 %mul664 to i64, !dbg !1931
  %add.ptr666 = getelementptr inbounds i8, i8* %add.ptr658, i64 %idx.ext665, !dbg !1931
  %428 = load i8*, i8** %pix_base642, align 8, !dbg !1931
  %429 = load i32, i32* %dir, align 4, !dbg !1931
  %add667 = add nsw i32 %429, 1, !dbg !1931
  %idxprom668 = sext i32 %add667 to i64, !dbg !1931
  %arrayidx669 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom668, !dbg !1931
  %arrayidx670 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx669, i64 0, i64 0, !dbg !1931
  %430 = load i8, i8* %arrayidx670, align 2, !dbg !1931
  %conv671 = sext i8 %430 to i32, !dbg !1931
  %idx.ext672 = sext i32 %conv671 to i64, !dbg !1931
  %add.ptr673 = getelementptr inbounds i8, i8* %428, i64 %idx.ext672, !dbg !1931
  %431 = load i32, i32* %dir, align 4, !dbg !1931
  %add674 = add nsw i32 %431, 1, !dbg !1931
  %idxprom675 = sext i32 %add674 to i64, !dbg !1931
  %arrayidx676 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom675, !dbg !1931
  %arrayidx677 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx676, i64 0, i64 1, !dbg !1931
  %432 = load i8, i8* %arrayidx677, align 1, !dbg !1931
  %conv678 = sext i8 %432 to i32, !dbg !1931
  %433 = load i32, i32* %stride, align 4, !dbg !1931
  %mul679 = mul nsw i32 %conv678, %433, !dbg !1931
  %idx.ext680 = sext i32 %mul679 to i64, !dbg !1931
  %add.ptr681 = getelementptr inbounds i8, i8* %add.ptr673, i64 %idx.ext680, !dbg !1931
  %434 = load i8*, i8** %pix_base642, align 8, !dbg !1931
  %435 = load i32, i32* %dir, align 4, !dbg !1931
  %add682 = add nsw i32 %435, 2, !dbg !1931
  %idxprom683 = sext i32 %add682 to i64, !dbg !1931
  %arrayidx684 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom683, !dbg !1931
  %arrayidx685 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx684, i64 0, i64 0, !dbg !1931
  %436 = load i8, i8* %arrayidx685, align 2, !dbg !1931
  %conv686 = sext i8 %436 to i32, !dbg !1931
  %idx.ext687 = sext i32 %conv686 to i64, !dbg !1931
  %add.ptr688 = getelementptr inbounds i8, i8* %434, i64 %idx.ext687, !dbg !1931
  %437 = load i32, i32* %dir, align 4, !dbg !1931
  %add689 = add nsw i32 %437, 2, !dbg !1931
  %idxprom690 = sext i32 %add689 to i64, !dbg !1931
  %arrayidx691 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom690, !dbg !1931
  %arrayidx692 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx691, i64 0, i64 1, !dbg !1931
  %438 = load i8, i8* %arrayidx692, align 1, !dbg !1931
  %conv693 = sext i8 %438 to i32, !dbg !1931
  %439 = load i32, i32* %stride, align 4, !dbg !1931
  %mul694 = mul nsw i32 %conv693, %439, !dbg !1931
  %idx.ext695 = sext i32 %mul694 to i64, !dbg !1931
  %add.ptr696 = getelementptr inbounds i8, i8* %add.ptr688, i64 %idx.ext695, !dbg !1931
  %440 = load i32, i32* %stride, align 4, !dbg !1931
  %arraydecay697 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1931
  call void %420(i8* %421, i8* %add.ptr666, i8* %add.ptr681, i8* %add.ptr696, i32 %440, i32* %arraydecay697), !dbg !1931
  %441 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1931
  %442 = load i32, i32* %bmx, align 4, !dbg !1931
  %443 = load i32, i32* %dir, align 4, !dbg !1931
  %add698 = add nsw i32 %443, 0, !dbg !1931
  %idxprom699 = sext i32 %add698 to i64, !dbg !1931
  %arrayidx700 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom699, !dbg !1931
  %arrayidx701 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx700, i64 0, i64 0, !dbg !1931
  %444 = load i8, i8* %arrayidx701, align 2, !dbg !1931
  %conv702 = sext i8 %444 to i32, !dbg !1931
  %add703 = add nsw i32 %442, %conv702, !dbg !1931
  %shl704 = shl i32 %add703, 2, !dbg !1931
  %idxprom705 = sext i32 %shl704 to i64, !dbg !1931
  %arrayidx706 = getelementptr inbounds i16, i16* %441, i64 %idxprom705, !dbg !1931
  %445 = load i16, i16* %arrayidx706, align 2, !dbg !1931
  %conv707 = zext i16 %445 to i32, !dbg !1931
  %446 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1931
  %447 = load i32, i32* %bmy, align 4, !dbg !1931
  %448 = load i32, i32* %dir, align 4, !dbg !1931
  %add708 = add nsw i32 %448, 0, !dbg !1931
  %idxprom709 = sext i32 %add708 to i64, !dbg !1931
  %arrayidx710 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom709, !dbg !1931
  %arrayidx711 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx710, i64 0, i64 1, !dbg !1931
  %449 = load i8, i8* %arrayidx711, align 1, !dbg !1931
  %conv712 = sext i8 %449 to i32, !dbg !1931
  %add713 = add nsw i32 %447, %conv712, !dbg !1931
  %shl714 = shl i32 %add713, 2, !dbg !1931
  %idxprom715 = sext i32 %shl714 to i64, !dbg !1931
  %arrayidx716 = getelementptr inbounds i16, i16* %446, i64 %idxprom715, !dbg !1931
  %450 = load i16, i16* %arrayidx716, align 2, !dbg !1931
  %conv717 = zext i16 %450 to i32, !dbg !1931
  %add718 = add nsw i32 %conv707, %conv717, !dbg !1931
  %arrayidx719 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1931
  %451 = load i32, i32* %arrayidx719, align 16, !dbg !1931
  %add720 = add nsw i32 %451, %add718, !dbg !1931
  store i32 %add720, i32* %arrayidx719, align 16, !dbg !1931
  %452 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1931
  %453 = load i32, i32* %bmx, align 4, !dbg !1931
  %454 = load i32, i32* %dir, align 4, !dbg !1931
  %add721 = add nsw i32 %454, 1, !dbg !1931
  %idxprom722 = sext i32 %add721 to i64, !dbg !1931
  %arrayidx723 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom722, !dbg !1931
  %arrayidx724 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx723, i64 0, i64 0, !dbg !1931
  %455 = load i8, i8* %arrayidx724, align 2, !dbg !1931
  %conv725 = sext i8 %455 to i32, !dbg !1931
  %add726 = add nsw i32 %453, %conv725, !dbg !1931
  %shl727 = shl i32 %add726, 2, !dbg !1931
  %idxprom728 = sext i32 %shl727 to i64, !dbg !1931
  %arrayidx729 = getelementptr inbounds i16, i16* %452, i64 %idxprom728, !dbg !1931
  %456 = load i16, i16* %arrayidx729, align 2, !dbg !1931
  %conv730 = zext i16 %456 to i32, !dbg !1931
  %457 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1931
  %458 = load i32, i32* %bmy, align 4, !dbg !1931
  %459 = load i32, i32* %dir, align 4, !dbg !1931
  %add731 = add nsw i32 %459, 1, !dbg !1931
  %idxprom732 = sext i32 %add731 to i64, !dbg !1931
  %arrayidx733 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom732, !dbg !1931
  %arrayidx734 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx733, i64 0, i64 1, !dbg !1931
  %460 = load i8, i8* %arrayidx734, align 1, !dbg !1931
  %conv735 = sext i8 %460 to i32, !dbg !1931
  %add736 = add nsw i32 %458, %conv735, !dbg !1931
  %shl737 = shl i32 %add736, 2, !dbg !1931
  %idxprom738 = sext i32 %shl737 to i64, !dbg !1931
  %arrayidx739 = getelementptr inbounds i16, i16* %457, i64 %idxprom738, !dbg !1931
  %461 = load i16, i16* %arrayidx739, align 2, !dbg !1931
  %conv740 = zext i16 %461 to i32, !dbg !1931
  %add741 = add nsw i32 %conv730, %conv740, !dbg !1931
  %arrayidx742 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1931
  %462 = load i32, i32* %arrayidx742, align 4, !dbg !1931
  %add743 = add nsw i32 %462, %add741, !dbg !1931
  store i32 %add743, i32* %arrayidx742, align 4, !dbg !1931
  %463 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1931
  %464 = load i32, i32* %bmx, align 4, !dbg !1931
  %465 = load i32, i32* %dir, align 4, !dbg !1931
  %add744 = add nsw i32 %465, 2, !dbg !1931
  %idxprom745 = sext i32 %add744 to i64, !dbg !1931
  %arrayidx746 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom745, !dbg !1931
  %arrayidx747 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx746, i64 0, i64 0, !dbg !1931
  %466 = load i8, i8* %arrayidx747, align 2, !dbg !1931
  %conv748 = sext i8 %466 to i32, !dbg !1931
  %add749 = add nsw i32 %464, %conv748, !dbg !1931
  %shl750 = shl i32 %add749, 2, !dbg !1931
  %idxprom751 = sext i32 %shl750 to i64, !dbg !1931
  %arrayidx752 = getelementptr inbounds i16, i16* %463, i64 %idxprom751, !dbg !1931
  %467 = load i16, i16* %arrayidx752, align 2, !dbg !1931
  %conv753 = zext i16 %467 to i32, !dbg !1931
  %468 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1931
  %469 = load i32, i32* %bmy, align 4, !dbg !1931
  %470 = load i32, i32* %dir, align 4, !dbg !1931
  %add754 = add nsw i32 %470, 2, !dbg !1931
  %idxprom755 = sext i32 %add754 to i64, !dbg !1931
  %arrayidx756 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom755, !dbg !1931
  %arrayidx757 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx756, i64 0, i64 1, !dbg !1931
  %471 = load i8, i8* %arrayidx757, align 1, !dbg !1931
  %conv758 = sext i8 %471 to i32, !dbg !1931
  %add759 = add nsw i32 %469, %conv758, !dbg !1931
  %shl760 = shl i32 %add759, 2, !dbg !1931
  %idxprom761 = sext i32 %shl760 to i64, !dbg !1931
  %arrayidx762 = getelementptr inbounds i16, i16* %468, i64 %idxprom761, !dbg !1931
  %472 = load i16, i16* %arrayidx762, align 2, !dbg !1931
  %conv763 = zext i16 %472 to i32, !dbg !1931
  %add764 = add nsw i32 %conv753, %conv763, !dbg !1931
  %arrayidx765 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1931
  %473 = load i32, i32* %arrayidx765, align 8, !dbg !1931
  %add766 = add nsw i32 %473, %add764, !dbg !1931
  store i32 %add766, i32* %arrayidx765, align 8, !dbg !1931
  %474 = load i32, i32* %bcost, align 4, !dbg !1932
  %and767 = and i32 %474, -8, !dbg !1932
  store i32 %and767, i32* %bcost, align 4, !dbg !1932
  %arrayidx768 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1933
  %475 = load i32, i32* %arrayidx768, align 16, !dbg !1933
  %shl769 = shl i32 %475, 3, !dbg !1933
  %add770 = add nsw i32 %shl769, 1, !dbg !1933
  %476 = load i32, i32* %bcost, align 4, !dbg !1933
  %cmp771 = icmp slt i32 %add770, %476, !dbg !1933
  br i1 %cmp771, label %if.then773, label %if.end777, !dbg !1935

if.then773:                                       ; preds = %for.body641
  %arrayidx774 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1933
  %477 = load i32, i32* %arrayidx774, align 16, !dbg !1933
  %shl775 = shl i32 %477, 3, !dbg !1933
  %add776 = add nsw i32 %shl775, 1, !dbg !1933
  store i32 %add776, i32* %bcost, align 4, !dbg !1933
  br label %if.end777, !dbg !1933

if.end777:                                        ; preds = %if.then773, %for.body641
  %arrayidx778 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1936
  %478 = load i32, i32* %arrayidx778, align 4, !dbg !1936
  %shl779 = shl i32 %478, 3, !dbg !1936
  %add780 = add nsw i32 %shl779, 2, !dbg !1936
  %479 = load i32, i32* %bcost, align 4, !dbg !1936
  %cmp781 = icmp slt i32 %add780, %479, !dbg !1936
  br i1 %cmp781, label %if.then783, label %if.end787, !dbg !1938

if.then783:                                       ; preds = %if.end777
  %arrayidx784 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1936
  %480 = load i32, i32* %arrayidx784, align 4, !dbg !1936
  %shl785 = shl i32 %480, 3, !dbg !1936
  %add786 = add nsw i32 %shl785, 2, !dbg !1936
  store i32 %add786, i32* %bcost, align 4, !dbg !1936
  br label %if.end787, !dbg !1936

if.end787:                                        ; preds = %if.then783, %if.end777
  %arrayidx788 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1939
  %481 = load i32, i32* %arrayidx788, align 8, !dbg !1939
  %shl789 = shl i32 %481, 3, !dbg !1939
  %add790 = add nsw i32 %shl789, 3, !dbg !1939
  %482 = load i32, i32* %bcost, align 4, !dbg !1939
  %cmp791 = icmp slt i32 %add790, %482, !dbg !1939
  br i1 %cmp791, label %if.then793, label %if.end797, !dbg !1941

if.then793:                                       ; preds = %if.end787
  %arrayidx794 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1939
  %483 = load i32, i32* %arrayidx794, align 8, !dbg !1939
  %shl795 = shl i32 %483, 3, !dbg !1939
  %add796 = add nsw i32 %shl795, 3, !dbg !1939
  store i32 %add796, i32* %bcost, align 4, !dbg !1939
  br label %if.end797, !dbg !1939

if.end797:                                        ; preds = %if.then793, %if.end787
  %484 = load i32, i32* %bcost, align 4, !dbg !1942
  %and798 = and i32 %484, 7, !dbg !1944
  %tobool799 = icmp ne i32 %and798, 0, !dbg !1944
  br i1 %tobool799, label %if.end801, label %if.then800, !dbg !1945

if.then800:                                       ; preds = %if.end797
  br label %for.end823, !dbg !1946

if.end801:                                        ; preds = %if.end797
  %485 = load i32, i32* %bcost, align 4, !dbg !1947
  %and802 = and i32 %485, 7, !dbg !1948
  %sub803 = sub nsw i32 %and802, 2, !dbg !1949
  %486 = load i32, i32* %dir, align 4, !dbg !1950
  %add804 = add nsw i32 %486, %sub803, !dbg !1950
  store i32 %add804, i32* %dir, align 4, !dbg !1950
  %487 = load i32, i32* %dir, align 4, !dbg !1951
  %add805 = add nsw i32 %487, 1, !dbg !1952
  %idxprom806 = sext i32 %add805 to i64, !dbg !1953
  %arrayidx807 = getelementptr inbounds [8 x i8], [8 x i8]* @mod6m1, i64 0, i64 %idxprom806, !dbg !1953
  %488 = load i8, i8* %arrayidx807, align 1, !dbg !1953
  %conv808 = zext i8 %488 to i32, !dbg !1953
  store i32 %conv808, i32* %dir, align 4, !dbg !1954
  %489 = load i32, i32* %dir, align 4, !dbg !1955
  %add809 = add nsw i32 %489, 1, !dbg !1956
  %idxprom810 = sext i32 %add809 to i64, !dbg !1957
  %arrayidx811 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom810, !dbg !1957
  %arrayidx812 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx811, i64 0, i64 0, !dbg !1957
  %490 = load i8, i8* %arrayidx812, align 2, !dbg !1957
  %conv813 = sext i8 %490 to i32, !dbg !1957
  %491 = load i32, i32* %bmx, align 4, !dbg !1958
  %add814 = add nsw i32 %491, %conv813, !dbg !1958
  store i32 %add814, i32* %bmx, align 4, !dbg !1958
  %492 = load i32, i32* %dir, align 4, !dbg !1959
  %add815 = add nsw i32 %492, 1, !dbg !1960
  %idxprom816 = sext i32 %add815 to i64, !dbg !1961
  %arrayidx817 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom816, !dbg !1961
  %arrayidx818 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx817, i64 0, i64 1, !dbg !1961
  %493 = load i8, i8* %arrayidx818, align 1, !dbg !1961
  %conv819 = sext i8 %493 to i32, !dbg !1961
  %494 = load i32, i32* %bmy, align 4, !dbg !1962
  %add820 = add nsw i32 %494, %conv819, !dbg !1962
  store i32 %add820, i32* %bmy, align 4, !dbg !1962
  br label %for.inc821, !dbg !1963

for.inc821:                                       ; preds = %if.end801
  %495 = load i32, i32* %i621, align 4, !dbg !1964
  %dec822 = add nsw i32 %495, -1, !dbg !1964
  store i32 %dec822, i32* %i621, align 4, !dbg !1964
  br label %for.cond624, !dbg !1965, !llvm.loop !1966

for.end823:                                       ; preds = %if.then800, %land.end640
  br label %if.end824, !dbg !1968

if.end824:                                        ; preds = %for.end823, %if.end603
  %496 = load i32, i32* %bcost, align 4, !dbg !1969
  %shr825 = ashr i32 %496, 3, !dbg !1969
  store i32 %shr825, i32* %bcost, align 4, !dbg !1969
  call void @llvm.dbg.declare(metadata i32* %dir826, metadata !1970, metadata !DIExpression()), !dbg !1971
  store i32 0, i32* %dir826, align 4, !dbg !1971
  call void @llvm.dbg.declare(metadata i8** %pix_base827, metadata !1972, metadata !DIExpression()), !dbg !1974
  %497 = load i8*, i8** %p_fref_w, align 8, !dbg !1974
  %498 = load i32, i32* %bmx, align 4, !dbg !1974
  %idx.ext828 = sext i32 %498 to i64, !dbg !1974
  %add.ptr829 = getelementptr inbounds i8, i8* %497, i64 %idx.ext828, !dbg !1974
  %499 = load i32, i32* %bmy, align 4, !dbg !1974
  %500 = load i32, i32* %stride, align 4, !dbg !1974
  %mul830 = mul nsw i32 %499, %500, !dbg !1974
  %idx.ext831 = sext i32 %mul830 to i64, !dbg !1974
  %add.ptr832 = getelementptr inbounds i8, i8* %add.ptr829, i64 %idx.ext831, !dbg !1974
  store i8* %add.ptr832, i8** %pix_base827, align 8, !dbg !1974
  %501 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1974
  %pixf833 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %501, i32 0, i32 69, !dbg !1974
  %fpelcmp_x4834 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf833, i32 0, i32 9, !dbg !1974
  %502 = load i32, i32* %i_pixel5, align 4, !dbg !1974
  %idxprom835 = sext i32 %502 to i64, !dbg !1974
  %arrayidx836 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x4834, i64 0, i64 %idxprom835, !dbg !1974
  %503 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx836, align 8, !dbg !1974
  %504 = load i8*, i8** %p_fenc, align 8, !dbg !1974
  %505 = load i8*, i8** %pix_base827, align 8, !dbg !1974
  %add.ptr837 = getelementptr inbounds i8, i8* %505, i64 0, !dbg !1974
  %506 = load i32, i32* %stride, align 4, !dbg !1974
  %mul838 = mul nsw i32 -1, %506, !dbg !1974
  %idx.ext839 = sext i32 %mul838 to i64, !dbg !1974
  %add.ptr840 = getelementptr inbounds i8, i8* %add.ptr837, i64 %idx.ext839, !dbg !1974
  %507 = load i8*, i8** %pix_base827, align 8, !dbg !1974
  %add.ptr841 = getelementptr inbounds i8, i8* %507, i64 0, !dbg !1974
  %508 = load i32, i32* %stride, align 4, !dbg !1974
  %mul842 = mul nsw i32 1, %508, !dbg !1974
  %idx.ext843 = sext i32 %mul842 to i64, !dbg !1974
  %add.ptr844 = getelementptr inbounds i8, i8* %add.ptr841, i64 %idx.ext843, !dbg !1974
  %509 = load i8*, i8** %pix_base827, align 8, !dbg !1974
  %add.ptr845 = getelementptr inbounds i8, i8* %509, i64 -1, !dbg !1974
  %510 = load i32, i32* %stride, align 4, !dbg !1974
  %mul846 = mul nsw i32 0, %510, !dbg !1974
  %idx.ext847 = sext i32 %mul846 to i64, !dbg !1974
  %add.ptr848 = getelementptr inbounds i8, i8* %add.ptr845, i64 %idx.ext847, !dbg !1974
  %511 = load i8*, i8** %pix_base827, align 8, !dbg !1974
  %add.ptr849 = getelementptr inbounds i8, i8* %511, i64 1, !dbg !1974
  %512 = load i32, i32* %stride, align 4, !dbg !1974
  %mul850 = mul nsw i32 0, %512, !dbg !1974
  %idx.ext851 = sext i32 %mul850 to i64, !dbg !1974
  %add.ptr852 = getelementptr inbounds i8, i8* %add.ptr849, i64 %idx.ext851, !dbg !1974
  %513 = load i32, i32* %stride, align 4, !dbg !1974
  %arraydecay853 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1974
  call void %503(i8* %504, i8* %add.ptr840, i8* %add.ptr844, i8* %add.ptr848, i8* %add.ptr852, i32 %513, i32* %arraydecay853), !dbg !1974
  %514 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1974
  %515 = load i32, i32* %bmx, align 4, !dbg !1974
  %add854 = add nsw i32 %515, 0, !dbg !1974
  %shl855 = shl i32 %add854, 2, !dbg !1974
  %idxprom856 = sext i32 %shl855 to i64, !dbg !1974
  %arrayidx857 = getelementptr inbounds i16, i16* %514, i64 %idxprom856, !dbg !1974
  %516 = load i16, i16* %arrayidx857, align 2, !dbg !1974
  %conv858 = zext i16 %516 to i32, !dbg !1974
  %517 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1974
  %518 = load i32, i32* %bmy, align 4, !dbg !1974
  %add859 = add nsw i32 %518, -1, !dbg !1974
  %shl860 = shl i32 %add859, 2, !dbg !1974
  %idxprom861 = sext i32 %shl860 to i64, !dbg !1974
  %arrayidx862 = getelementptr inbounds i16, i16* %517, i64 %idxprom861, !dbg !1974
  %519 = load i16, i16* %arrayidx862, align 2, !dbg !1974
  %conv863 = zext i16 %519 to i32, !dbg !1974
  %add864 = add nsw i32 %conv858, %conv863, !dbg !1974
  %arrayidx865 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1974
  %520 = load i32, i32* %arrayidx865, align 16, !dbg !1974
  %add866 = add nsw i32 %520, %add864, !dbg !1974
  store i32 %add866, i32* %arrayidx865, align 16, !dbg !1974
  %521 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1974
  %522 = load i32, i32* %bmx, align 4, !dbg !1974
  %add867 = add nsw i32 %522, 0, !dbg !1974
  %shl868 = shl i32 %add867, 2, !dbg !1974
  %idxprom869 = sext i32 %shl868 to i64, !dbg !1974
  %arrayidx870 = getelementptr inbounds i16, i16* %521, i64 %idxprom869, !dbg !1974
  %523 = load i16, i16* %arrayidx870, align 2, !dbg !1974
  %conv871 = zext i16 %523 to i32, !dbg !1974
  %524 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1974
  %525 = load i32, i32* %bmy, align 4, !dbg !1974
  %add872 = add nsw i32 %525, 1, !dbg !1974
  %shl873 = shl i32 %add872, 2, !dbg !1974
  %idxprom874 = sext i32 %shl873 to i64, !dbg !1974
  %arrayidx875 = getelementptr inbounds i16, i16* %524, i64 %idxprom874, !dbg !1974
  %526 = load i16, i16* %arrayidx875, align 2, !dbg !1974
  %conv876 = zext i16 %526 to i32, !dbg !1974
  %add877 = add nsw i32 %conv871, %conv876, !dbg !1974
  %arrayidx878 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1974
  %527 = load i32, i32* %arrayidx878, align 4, !dbg !1974
  %add879 = add nsw i32 %527, %add877, !dbg !1974
  store i32 %add879, i32* %arrayidx878, align 4, !dbg !1974
  %528 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1974
  %529 = load i32, i32* %bmx, align 4, !dbg !1974
  %add880 = add nsw i32 %529, -1, !dbg !1974
  %shl881 = shl i32 %add880, 2, !dbg !1974
  %idxprom882 = sext i32 %shl881 to i64, !dbg !1974
  %arrayidx883 = getelementptr inbounds i16, i16* %528, i64 %idxprom882, !dbg !1974
  %530 = load i16, i16* %arrayidx883, align 2, !dbg !1974
  %conv884 = zext i16 %530 to i32, !dbg !1974
  %531 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1974
  %532 = load i32, i32* %bmy, align 4, !dbg !1974
  %add885 = add nsw i32 %532, 0, !dbg !1974
  %shl886 = shl i32 %add885, 2, !dbg !1974
  %idxprom887 = sext i32 %shl886 to i64, !dbg !1974
  %arrayidx888 = getelementptr inbounds i16, i16* %531, i64 %idxprom887, !dbg !1974
  %533 = load i16, i16* %arrayidx888, align 2, !dbg !1974
  %conv889 = zext i16 %533 to i32, !dbg !1974
  %add890 = add nsw i32 %conv884, %conv889, !dbg !1974
  %arrayidx891 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1974
  %534 = load i32, i32* %arrayidx891, align 8, !dbg !1974
  %add892 = add nsw i32 %534, %add890, !dbg !1974
  store i32 %add892, i32* %arrayidx891, align 8, !dbg !1974
  %535 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1974
  %536 = load i32, i32* %bmx, align 4, !dbg !1974
  %add893 = add nsw i32 %536, 1, !dbg !1974
  %shl894 = shl i32 %add893, 2, !dbg !1974
  %idxprom895 = sext i32 %shl894 to i64, !dbg !1974
  %arrayidx896 = getelementptr inbounds i16, i16* %535, i64 %idxprom895, !dbg !1974
  %537 = load i16, i16* %arrayidx896, align 2, !dbg !1974
  %conv897 = zext i16 %537 to i32, !dbg !1974
  %538 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1974
  %539 = load i32, i32* %bmy, align 4, !dbg !1974
  %add898 = add nsw i32 %539, 0, !dbg !1974
  %shl899 = shl i32 %add898, 2, !dbg !1974
  %idxprom900 = sext i32 %shl899 to i64, !dbg !1974
  %arrayidx901 = getelementptr inbounds i16, i16* %538, i64 %idxprom900, !dbg !1974
  %540 = load i16, i16* %arrayidx901, align 2, !dbg !1974
  %conv902 = zext i16 %540 to i32, !dbg !1974
  %add903 = add nsw i32 %conv897, %conv902, !dbg !1974
  %arrayidx904 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1974
  %541 = load i32, i32* %arrayidx904, align 4, !dbg !1974
  %add905 = add nsw i32 %541, %add903, !dbg !1974
  store i32 %add905, i32* %arrayidx904, align 4, !dbg !1974
  %arrayidx906 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1975
  %542 = load i32, i32* %arrayidx906, align 16, !dbg !1975
  %543 = load i32, i32* %bcost, align 4, !dbg !1975
  %cmp907 = icmp slt i32 %542, %543, !dbg !1975
  br i1 %cmp907, label %if.then909, label %if.end911, !dbg !1977

if.then909:                                       ; preds = %if.end824
  %arrayidx910 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1978
  %544 = load i32, i32* %arrayidx910, align 16, !dbg !1978
  store i32 %544, i32* %bcost, align 4, !dbg !1978
  store i32 1, i32* %dir826, align 4, !dbg !1978
  br label %if.end911, !dbg !1978

if.end911:                                        ; preds = %if.then909, %if.end824
  %arrayidx912 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1980
  %545 = load i32, i32* %arrayidx912, align 4, !dbg !1980
  %546 = load i32, i32* %bcost, align 4, !dbg !1980
  %cmp913 = icmp slt i32 %545, %546, !dbg !1980
  br i1 %cmp913, label %if.then915, label %if.end917, !dbg !1982

if.then915:                                       ; preds = %if.end911
  %arrayidx916 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1983
  %547 = load i32, i32* %arrayidx916, align 4, !dbg !1983
  store i32 %547, i32* %bcost, align 4, !dbg !1983
  store i32 2, i32* %dir826, align 4, !dbg !1983
  br label %if.end917, !dbg !1983

if.end917:                                        ; preds = %if.then915, %if.end911
  %arrayidx918 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1985
  %548 = load i32, i32* %arrayidx918, align 8, !dbg !1985
  %549 = load i32, i32* %bcost, align 4, !dbg !1985
  %cmp919 = icmp slt i32 %548, %549, !dbg !1985
  br i1 %cmp919, label %if.then921, label %if.end923, !dbg !1987

if.then921:                                       ; preds = %if.end917
  %arrayidx922 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1988
  %550 = load i32, i32* %arrayidx922, align 8, !dbg !1988
  store i32 %550, i32* %bcost, align 4, !dbg !1988
  store i32 3, i32* %dir826, align 4, !dbg !1988
  br label %if.end923, !dbg !1988

if.end923:                                        ; preds = %if.then921, %if.end917
  %arrayidx924 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1990
  %551 = load i32, i32* %arrayidx924, align 4, !dbg !1990
  %552 = load i32, i32* %bcost, align 4, !dbg !1990
  %cmp925 = icmp slt i32 %551, %552, !dbg !1990
  br i1 %cmp925, label %if.then927, label %if.end929, !dbg !1992

if.then927:                                       ; preds = %if.end923
  %arrayidx928 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1993
  %553 = load i32, i32* %arrayidx928, align 4, !dbg !1993
  store i32 %553, i32* %bcost, align 4, !dbg !1993
  store i32 4, i32* %dir826, align 4, !dbg !1993
  br label %if.end929, !dbg !1993

if.end929:                                        ; preds = %if.then927, %if.end923
  call void @llvm.dbg.declare(metadata i8** %pix_base930, metadata !1995, metadata !DIExpression()), !dbg !1997
  %554 = load i8*, i8** %p_fref_w, align 8, !dbg !1997
  %555 = load i32, i32* %bmx, align 4, !dbg !1997
  %idx.ext931 = sext i32 %555 to i64, !dbg !1997
  %add.ptr932 = getelementptr inbounds i8, i8* %554, i64 %idx.ext931, !dbg !1997
  %556 = load i32, i32* %bmy, align 4, !dbg !1997
  %557 = load i32, i32* %stride, align 4, !dbg !1997
  %mul933 = mul nsw i32 %556, %557, !dbg !1997
  %idx.ext934 = sext i32 %mul933 to i64, !dbg !1997
  %add.ptr935 = getelementptr inbounds i8, i8* %add.ptr932, i64 %idx.ext934, !dbg !1997
  store i8* %add.ptr935, i8** %pix_base930, align 8, !dbg !1997
  %558 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !1997
  %pixf936 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %558, i32 0, i32 69, !dbg !1997
  %fpelcmp_x4937 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf936, i32 0, i32 9, !dbg !1997
  %559 = load i32, i32* %i_pixel5, align 4, !dbg !1997
  %idxprom938 = sext i32 %559 to i64, !dbg !1997
  %arrayidx939 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x4937, i64 0, i64 %idxprom938, !dbg !1997
  %560 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx939, align 8, !dbg !1997
  %561 = load i8*, i8** %p_fenc, align 8, !dbg !1997
  %562 = load i8*, i8** %pix_base930, align 8, !dbg !1997
  %add.ptr940 = getelementptr inbounds i8, i8* %562, i64 -1, !dbg !1997
  %563 = load i32, i32* %stride, align 4, !dbg !1997
  %mul941 = mul nsw i32 -1, %563, !dbg !1997
  %idx.ext942 = sext i32 %mul941 to i64, !dbg !1997
  %add.ptr943 = getelementptr inbounds i8, i8* %add.ptr940, i64 %idx.ext942, !dbg !1997
  %564 = load i8*, i8** %pix_base930, align 8, !dbg !1997
  %add.ptr944 = getelementptr inbounds i8, i8* %564, i64 -1, !dbg !1997
  %565 = load i32, i32* %stride, align 4, !dbg !1997
  %mul945 = mul nsw i32 1, %565, !dbg !1997
  %idx.ext946 = sext i32 %mul945 to i64, !dbg !1997
  %add.ptr947 = getelementptr inbounds i8, i8* %add.ptr944, i64 %idx.ext946, !dbg !1997
  %566 = load i8*, i8** %pix_base930, align 8, !dbg !1997
  %add.ptr948 = getelementptr inbounds i8, i8* %566, i64 1, !dbg !1997
  %567 = load i32, i32* %stride, align 4, !dbg !1997
  %mul949 = mul nsw i32 -1, %567, !dbg !1997
  %idx.ext950 = sext i32 %mul949 to i64, !dbg !1997
  %add.ptr951 = getelementptr inbounds i8, i8* %add.ptr948, i64 %idx.ext950, !dbg !1997
  %568 = load i8*, i8** %pix_base930, align 8, !dbg !1997
  %add.ptr952 = getelementptr inbounds i8, i8* %568, i64 1, !dbg !1997
  %569 = load i32, i32* %stride, align 4, !dbg !1997
  %mul953 = mul nsw i32 1, %569, !dbg !1997
  %idx.ext954 = sext i32 %mul953 to i64, !dbg !1997
  %add.ptr955 = getelementptr inbounds i8, i8* %add.ptr952, i64 %idx.ext954, !dbg !1997
  %570 = load i32, i32* %stride, align 4, !dbg !1997
  %arraydecay956 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1997
  call void %560(i8* %561, i8* %add.ptr943, i8* %add.ptr947, i8* %add.ptr951, i8* %add.ptr955, i32 %570, i32* %arraydecay956), !dbg !1997
  %571 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1997
  %572 = load i32, i32* %bmx, align 4, !dbg !1997
  %add957 = add nsw i32 %572, -1, !dbg !1997
  %shl958 = shl i32 %add957, 2, !dbg !1997
  %idxprom959 = sext i32 %shl958 to i64, !dbg !1997
  %arrayidx960 = getelementptr inbounds i16, i16* %571, i64 %idxprom959, !dbg !1997
  %573 = load i16, i16* %arrayidx960, align 2, !dbg !1997
  %conv961 = zext i16 %573 to i32, !dbg !1997
  %574 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1997
  %575 = load i32, i32* %bmy, align 4, !dbg !1997
  %add962 = add nsw i32 %575, -1, !dbg !1997
  %shl963 = shl i32 %add962, 2, !dbg !1997
  %idxprom964 = sext i32 %shl963 to i64, !dbg !1997
  %arrayidx965 = getelementptr inbounds i16, i16* %574, i64 %idxprom964, !dbg !1997
  %576 = load i16, i16* %arrayidx965, align 2, !dbg !1997
  %conv966 = zext i16 %576 to i32, !dbg !1997
  %add967 = add nsw i32 %conv961, %conv966, !dbg !1997
  %arrayidx968 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1997
  %577 = load i32, i32* %arrayidx968, align 16, !dbg !1997
  %add969 = add nsw i32 %577, %add967, !dbg !1997
  store i32 %add969, i32* %arrayidx968, align 16, !dbg !1997
  %578 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1997
  %579 = load i32, i32* %bmx, align 4, !dbg !1997
  %add970 = add nsw i32 %579, -1, !dbg !1997
  %shl971 = shl i32 %add970, 2, !dbg !1997
  %idxprom972 = sext i32 %shl971 to i64, !dbg !1997
  %arrayidx973 = getelementptr inbounds i16, i16* %578, i64 %idxprom972, !dbg !1997
  %580 = load i16, i16* %arrayidx973, align 2, !dbg !1997
  %conv974 = zext i16 %580 to i32, !dbg !1997
  %581 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1997
  %582 = load i32, i32* %bmy, align 4, !dbg !1997
  %add975 = add nsw i32 %582, 1, !dbg !1997
  %shl976 = shl i32 %add975, 2, !dbg !1997
  %idxprom977 = sext i32 %shl976 to i64, !dbg !1997
  %arrayidx978 = getelementptr inbounds i16, i16* %581, i64 %idxprom977, !dbg !1997
  %583 = load i16, i16* %arrayidx978, align 2, !dbg !1997
  %conv979 = zext i16 %583 to i32, !dbg !1997
  %add980 = add nsw i32 %conv974, %conv979, !dbg !1997
  %arrayidx981 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !1997
  %584 = load i32, i32* %arrayidx981, align 4, !dbg !1997
  %add982 = add nsw i32 %584, %add980, !dbg !1997
  store i32 %add982, i32* %arrayidx981, align 4, !dbg !1997
  %585 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1997
  %586 = load i32, i32* %bmx, align 4, !dbg !1997
  %add983 = add nsw i32 %586, 1, !dbg !1997
  %shl984 = shl i32 %add983, 2, !dbg !1997
  %idxprom985 = sext i32 %shl984 to i64, !dbg !1997
  %arrayidx986 = getelementptr inbounds i16, i16* %585, i64 %idxprom985, !dbg !1997
  %587 = load i16, i16* %arrayidx986, align 2, !dbg !1997
  %conv987 = zext i16 %587 to i32, !dbg !1997
  %588 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1997
  %589 = load i32, i32* %bmy, align 4, !dbg !1997
  %add988 = add nsw i32 %589, -1, !dbg !1997
  %shl989 = shl i32 %add988, 2, !dbg !1997
  %idxprom990 = sext i32 %shl989 to i64, !dbg !1997
  %arrayidx991 = getelementptr inbounds i16, i16* %588, i64 %idxprom990, !dbg !1997
  %590 = load i16, i16* %arrayidx991, align 2, !dbg !1997
  %conv992 = zext i16 %590 to i32, !dbg !1997
  %add993 = add nsw i32 %conv987, %conv992, !dbg !1997
  %arrayidx994 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !1997
  %591 = load i32, i32* %arrayidx994, align 8, !dbg !1997
  %add995 = add nsw i32 %591, %add993, !dbg !1997
  store i32 %add995, i32* %arrayidx994, align 8, !dbg !1997
  %592 = load i16*, i16** %p_cost_mvx, align 8, !dbg !1997
  %593 = load i32, i32* %bmx, align 4, !dbg !1997
  %add996 = add nsw i32 %593, 1, !dbg !1997
  %shl997 = shl i32 %add996, 2, !dbg !1997
  %idxprom998 = sext i32 %shl997 to i64, !dbg !1997
  %arrayidx999 = getelementptr inbounds i16, i16* %592, i64 %idxprom998, !dbg !1997
  %594 = load i16, i16* %arrayidx999, align 2, !dbg !1997
  %conv1000 = zext i16 %594 to i32, !dbg !1997
  %595 = load i16*, i16** %p_cost_mvy, align 8, !dbg !1997
  %596 = load i32, i32* %bmy, align 4, !dbg !1997
  %add1001 = add nsw i32 %596, 1, !dbg !1997
  %shl1002 = shl i32 %add1001, 2, !dbg !1997
  %idxprom1003 = sext i32 %shl1002 to i64, !dbg !1997
  %arrayidx1004 = getelementptr inbounds i16, i16* %595, i64 %idxprom1003, !dbg !1997
  %597 = load i16, i16* %arrayidx1004, align 2, !dbg !1997
  %conv1005 = zext i16 %597 to i32, !dbg !1997
  %add1006 = add nsw i32 %conv1000, %conv1005, !dbg !1997
  %arrayidx1007 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !1997
  %598 = load i32, i32* %arrayidx1007, align 4, !dbg !1997
  %add1008 = add nsw i32 %598, %add1006, !dbg !1997
  store i32 %add1008, i32* %arrayidx1007, align 4, !dbg !1997
  %arrayidx1009 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !1998
  %599 = load i32, i32* %arrayidx1009, align 16, !dbg !1998
  %600 = load i32, i32* %bcost, align 4, !dbg !1998
  %cmp1010 = icmp slt i32 %599, %600, !dbg !1998
  br i1 %cmp1010, label %if.then1012, label %if.end1014, !dbg !2000

if.then1012:                                      ; preds = %if.end929
  %arrayidx1013 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2001
  %601 = load i32, i32* %arrayidx1013, align 16, !dbg !2001
  store i32 %601, i32* %bcost, align 4, !dbg !2001
  store i32 5, i32* %dir826, align 4, !dbg !2001
  br label %if.end1014, !dbg !2001

if.end1014:                                       ; preds = %if.then1012, %if.end929
  %arrayidx1015 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2003
  %602 = load i32, i32* %arrayidx1015, align 4, !dbg !2003
  %603 = load i32, i32* %bcost, align 4, !dbg !2003
  %cmp1016 = icmp slt i32 %602, %603, !dbg !2003
  br i1 %cmp1016, label %if.then1018, label %if.end1020, !dbg !2005

if.then1018:                                      ; preds = %if.end1014
  %arrayidx1019 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2006
  %604 = load i32, i32* %arrayidx1019, align 4, !dbg !2006
  store i32 %604, i32* %bcost, align 4, !dbg !2006
  store i32 6, i32* %dir826, align 4, !dbg !2006
  br label %if.end1020, !dbg !2006

if.end1020:                                       ; preds = %if.then1018, %if.end1014
  %arrayidx1021 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2008
  %605 = load i32, i32* %arrayidx1021, align 8, !dbg !2008
  %606 = load i32, i32* %bcost, align 4, !dbg !2008
  %cmp1022 = icmp slt i32 %605, %606, !dbg !2008
  br i1 %cmp1022, label %if.then1024, label %if.end1026, !dbg !2010

if.then1024:                                      ; preds = %if.end1020
  %arrayidx1025 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2011
  %607 = load i32, i32* %arrayidx1025, align 8, !dbg !2011
  store i32 %607, i32* %bcost, align 4, !dbg !2011
  store i32 7, i32* %dir826, align 4, !dbg !2011
  br label %if.end1026, !dbg !2011

if.end1026:                                       ; preds = %if.then1024, %if.end1020
  %arrayidx1027 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2013
  %608 = load i32, i32* %arrayidx1027, align 4, !dbg !2013
  %609 = load i32, i32* %bcost, align 4, !dbg !2013
  %cmp1028 = icmp slt i32 %608, %609, !dbg !2013
  br i1 %cmp1028, label %if.then1030, label %if.end1032, !dbg !2015

if.then1030:                                      ; preds = %if.end1026
  %arrayidx1031 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2016
  %610 = load i32, i32* %arrayidx1031, align 4, !dbg !2016
  store i32 %610, i32* %bcost, align 4, !dbg !2016
  store i32 8, i32* %dir826, align 4, !dbg !2016
  br label %if.end1032, !dbg !2016

if.end1032:                                       ; preds = %if.then1030, %if.end1026
  %611 = load i32, i32* %dir826, align 4, !dbg !2018
  %idxprom1033 = sext i32 %611 to i64, !dbg !2019
  %arrayidx1034 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom1033, !dbg !2019
  %arrayidx1035 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx1034, i64 0, i64 0, !dbg !2019
  %612 = load i8, i8* %arrayidx1035, align 2, !dbg !2019
  %conv1036 = sext i8 %612 to i32, !dbg !2019
  %613 = load i32, i32* %bmx, align 4, !dbg !2020
  %add1037 = add nsw i32 %613, %conv1036, !dbg !2020
  store i32 %add1037, i32* %bmx, align 4, !dbg !2020
  %614 = load i32, i32* %dir826, align 4, !dbg !2021
  %idxprom1038 = sext i32 %614 to i64, !dbg !2022
  %arrayidx1039 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom1038, !dbg !2022
  %arrayidx1040 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx1039, i64 0, i64 1, !dbg !2022
  %615 = load i8, i8* %arrayidx1040, align 1, !dbg !2022
  %conv1041 = sext i8 %615 to i32, !dbg !2022
  %616 = load i32, i32* %bmy, align 4, !dbg !2023
  %add1042 = add nsw i32 %616, %conv1041, !dbg !2023
  store i32 %add1042, i32* %bmy, align 4, !dbg !2023
  br label %sw.epilog, !dbg !2024

sw.bb1043:                                        ; preds = %if.end267
  call void @llvm.dbg.declare(metadata i32* %ucost1, metadata !2025, metadata !DIExpression()), !dbg !2027
  call void @llvm.dbg.declare(metadata i32* %ucost2, metadata !2028, metadata !DIExpression()), !dbg !2029
  call void @llvm.dbg.declare(metadata i32* %cross_start, metadata !2030, metadata !DIExpression()), !dbg !2031
  store i32 1, i32* %cross_start, align 4, !dbg !2031
  %617 = load i32, i32* %bcost, align 4, !dbg !2032
  store i32 %617, i32* %ucost1, align 4, !dbg !2033
  %618 = load i32, i32* %pmx, align 4, !dbg !2034
  store i32 %618, i32* %omx, align 4, !dbg !2034
  %619 = load i32, i32* %pmy, align 4, !dbg !2034
  store i32 %619, i32* %omy, align 4, !dbg !2034
  call void @llvm.dbg.declare(metadata i8** %pix_base1044, metadata !2036, metadata !DIExpression()), !dbg !2038
  %620 = load i8*, i8** %p_fref_w, align 8, !dbg !2038
  %621 = load i32, i32* %omx, align 4, !dbg !2038
  %idx.ext1045 = sext i32 %621 to i64, !dbg !2038
  %add.ptr1046 = getelementptr inbounds i8, i8* %620, i64 %idx.ext1045, !dbg !2038
  %622 = load i32, i32* %omy, align 4, !dbg !2038
  %623 = load i32, i32* %stride, align 4, !dbg !2038
  %mul1047 = mul nsw i32 %622, %623, !dbg !2038
  %idx.ext1048 = sext i32 %mul1047 to i64, !dbg !2038
  %add.ptr1049 = getelementptr inbounds i8, i8* %add.ptr1046, i64 %idx.ext1048, !dbg !2038
  store i8* %add.ptr1049, i8** %pix_base1044, align 8, !dbg !2038
  %624 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2038
  %pixf1050 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %624, i32 0, i32 69, !dbg !2038
  %fpelcmp_x41051 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1050, i32 0, i32 9, !dbg !2038
  %625 = load i32, i32* %i_pixel5, align 4, !dbg !2038
  %idxprom1052 = sext i32 %625 to i64, !dbg !2038
  %arrayidx1053 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41051, i64 0, i64 %idxprom1052, !dbg !2038
  %626 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1053, align 8, !dbg !2038
  %627 = load i8*, i8** %p_fenc, align 8, !dbg !2038
  %628 = load i8*, i8** %pix_base1044, align 8, !dbg !2038
  %add.ptr1054 = getelementptr inbounds i8, i8* %628, i64 0, !dbg !2038
  %629 = load i32, i32* %stride, align 4, !dbg !2038
  %mul1055 = mul nsw i32 -1, %629, !dbg !2038
  %idx.ext1056 = sext i32 %mul1055 to i64, !dbg !2038
  %add.ptr1057 = getelementptr inbounds i8, i8* %add.ptr1054, i64 %idx.ext1056, !dbg !2038
  %630 = load i8*, i8** %pix_base1044, align 8, !dbg !2038
  %add.ptr1058 = getelementptr inbounds i8, i8* %630, i64 0, !dbg !2038
  %631 = load i32, i32* %stride, align 4, !dbg !2038
  %mul1059 = mul nsw i32 1, %631, !dbg !2038
  %idx.ext1060 = sext i32 %mul1059 to i64, !dbg !2038
  %add.ptr1061 = getelementptr inbounds i8, i8* %add.ptr1058, i64 %idx.ext1060, !dbg !2038
  %632 = load i8*, i8** %pix_base1044, align 8, !dbg !2038
  %add.ptr1062 = getelementptr inbounds i8, i8* %632, i64 -1, !dbg !2038
  %633 = load i32, i32* %stride, align 4, !dbg !2038
  %mul1063 = mul nsw i32 0, %633, !dbg !2038
  %idx.ext1064 = sext i32 %mul1063 to i64, !dbg !2038
  %add.ptr1065 = getelementptr inbounds i8, i8* %add.ptr1062, i64 %idx.ext1064, !dbg !2038
  %634 = load i8*, i8** %pix_base1044, align 8, !dbg !2038
  %add.ptr1066 = getelementptr inbounds i8, i8* %634, i64 1, !dbg !2038
  %635 = load i32, i32* %stride, align 4, !dbg !2038
  %mul1067 = mul nsw i32 0, %635, !dbg !2038
  %idx.ext1068 = sext i32 %mul1067 to i64, !dbg !2038
  %add.ptr1069 = getelementptr inbounds i8, i8* %add.ptr1066, i64 %idx.ext1068, !dbg !2038
  %636 = load i32, i32* %stride, align 4, !dbg !2038
  %arraydecay1070 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2038
  call void %626(i8* %627, i8* %add.ptr1057, i8* %add.ptr1061, i8* %add.ptr1065, i8* %add.ptr1069, i32 %636, i32* %arraydecay1070), !dbg !2038
  %637 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2038
  %638 = load i32, i32* %omx, align 4, !dbg !2038
  %add1071 = add nsw i32 %638, 0, !dbg !2038
  %shl1072 = shl i32 %add1071, 2, !dbg !2038
  %idxprom1073 = sext i32 %shl1072 to i64, !dbg !2038
  %arrayidx1074 = getelementptr inbounds i16, i16* %637, i64 %idxprom1073, !dbg !2038
  %639 = load i16, i16* %arrayidx1074, align 2, !dbg !2038
  %conv1075 = zext i16 %639 to i32, !dbg !2038
  %640 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2038
  %641 = load i32, i32* %omy, align 4, !dbg !2038
  %add1076 = add nsw i32 %641, -1, !dbg !2038
  %shl1077 = shl i32 %add1076, 2, !dbg !2038
  %idxprom1078 = sext i32 %shl1077 to i64, !dbg !2038
  %arrayidx1079 = getelementptr inbounds i16, i16* %640, i64 %idxprom1078, !dbg !2038
  %642 = load i16, i16* %arrayidx1079, align 2, !dbg !2038
  %conv1080 = zext i16 %642 to i32, !dbg !2038
  %add1081 = add nsw i32 %conv1075, %conv1080, !dbg !2038
  %arrayidx1082 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2038
  %643 = load i32, i32* %arrayidx1082, align 16, !dbg !2038
  %add1083 = add nsw i32 %643, %add1081, !dbg !2038
  store i32 %add1083, i32* %arrayidx1082, align 16, !dbg !2038
  %644 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2038
  %645 = load i32, i32* %omx, align 4, !dbg !2038
  %add1084 = add nsw i32 %645, 0, !dbg !2038
  %shl1085 = shl i32 %add1084, 2, !dbg !2038
  %idxprom1086 = sext i32 %shl1085 to i64, !dbg !2038
  %arrayidx1087 = getelementptr inbounds i16, i16* %644, i64 %idxprom1086, !dbg !2038
  %646 = load i16, i16* %arrayidx1087, align 2, !dbg !2038
  %conv1088 = zext i16 %646 to i32, !dbg !2038
  %647 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2038
  %648 = load i32, i32* %omy, align 4, !dbg !2038
  %add1089 = add nsw i32 %648, 1, !dbg !2038
  %shl1090 = shl i32 %add1089, 2, !dbg !2038
  %idxprom1091 = sext i32 %shl1090 to i64, !dbg !2038
  %arrayidx1092 = getelementptr inbounds i16, i16* %647, i64 %idxprom1091, !dbg !2038
  %649 = load i16, i16* %arrayidx1092, align 2, !dbg !2038
  %conv1093 = zext i16 %649 to i32, !dbg !2038
  %add1094 = add nsw i32 %conv1088, %conv1093, !dbg !2038
  %arrayidx1095 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2038
  %650 = load i32, i32* %arrayidx1095, align 4, !dbg !2038
  %add1096 = add nsw i32 %650, %add1094, !dbg !2038
  store i32 %add1096, i32* %arrayidx1095, align 4, !dbg !2038
  %651 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2038
  %652 = load i32, i32* %omx, align 4, !dbg !2038
  %add1097 = add nsw i32 %652, -1, !dbg !2038
  %shl1098 = shl i32 %add1097, 2, !dbg !2038
  %idxprom1099 = sext i32 %shl1098 to i64, !dbg !2038
  %arrayidx1100 = getelementptr inbounds i16, i16* %651, i64 %idxprom1099, !dbg !2038
  %653 = load i16, i16* %arrayidx1100, align 2, !dbg !2038
  %conv1101 = zext i16 %653 to i32, !dbg !2038
  %654 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2038
  %655 = load i32, i32* %omy, align 4, !dbg !2038
  %add1102 = add nsw i32 %655, 0, !dbg !2038
  %shl1103 = shl i32 %add1102, 2, !dbg !2038
  %idxprom1104 = sext i32 %shl1103 to i64, !dbg !2038
  %arrayidx1105 = getelementptr inbounds i16, i16* %654, i64 %idxprom1104, !dbg !2038
  %656 = load i16, i16* %arrayidx1105, align 2, !dbg !2038
  %conv1106 = zext i16 %656 to i32, !dbg !2038
  %add1107 = add nsw i32 %conv1101, %conv1106, !dbg !2038
  %arrayidx1108 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2038
  %657 = load i32, i32* %arrayidx1108, align 8, !dbg !2038
  %add1109 = add nsw i32 %657, %add1107, !dbg !2038
  store i32 %add1109, i32* %arrayidx1108, align 8, !dbg !2038
  %658 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2038
  %659 = load i32, i32* %omx, align 4, !dbg !2038
  %add1110 = add nsw i32 %659, 1, !dbg !2038
  %shl1111 = shl i32 %add1110, 2, !dbg !2038
  %idxprom1112 = sext i32 %shl1111 to i64, !dbg !2038
  %arrayidx1113 = getelementptr inbounds i16, i16* %658, i64 %idxprom1112, !dbg !2038
  %660 = load i16, i16* %arrayidx1113, align 2, !dbg !2038
  %conv1114 = zext i16 %660 to i32, !dbg !2038
  %661 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2038
  %662 = load i32, i32* %omy, align 4, !dbg !2038
  %add1115 = add nsw i32 %662, 0, !dbg !2038
  %shl1116 = shl i32 %add1115, 2, !dbg !2038
  %idxprom1117 = sext i32 %shl1116 to i64, !dbg !2038
  %arrayidx1118 = getelementptr inbounds i16, i16* %661, i64 %idxprom1117, !dbg !2038
  %663 = load i16, i16* %arrayidx1118, align 2, !dbg !2038
  %conv1119 = zext i16 %663 to i32, !dbg !2038
  %add1120 = add nsw i32 %conv1114, %conv1119, !dbg !2038
  %arrayidx1121 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2038
  %664 = load i32, i32* %arrayidx1121, align 4, !dbg !2038
  %add1122 = add nsw i32 %664, %add1120, !dbg !2038
  store i32 %add1122, i32* %arrayidx1121, align 4, !dbg !2038
  %arrayidx1123 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2039
  %665 = load i32, i32* %arrayidx1123, align 16, !dbg !2039
  %666 = load i32, i32* %bcost, align 4, !dbg !2039
  %cmp1124 = icmp slt i32 %665, %666, !dbg !2039
  br i1 %cmp1124, label %if.then1126, label %if.end1130, !dbg !2038

if.then1126:                                      ; preds = %sw.bb1043
  %arrayidx1127 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2041
  %667 = load i32, i32* %arrayidx1127, align 16, !dbg !2041
  store i32 %667, i32* %bcost, align 4, !dbg !2041
  %668 = load i32, i32* %omx, align 4, !dbg !2041
  %add1128 = add nsw i32 %668, 0, !dbg !2041
  store i32 %add1128, i32* %bmx, align 4, !dbg !2041
  %669 = load i32, i32* %omy, align 4, !dbg !2041
  %add1129 = add nsw i32 %669, -1, !dbg !2041
  store i32 %add1129, i32* %bmy, align 4, !dbg !2041
  br label %if.end1130, !dbg !2041

if.end1130:                                       ; preds = %if.then1126, %sw.bb1043
  %arrayidx1131 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2043
  %670 = load i32, i32* %arrayidx1131, align 4, !dbg !2043
  %671 = load i32, i32* %bcost, align 4, !dbg !2043
  %cmp1132 = icmp slt i32 %670, %671, !dbg !2043
  br i1 %cmp1132, label %if.then1134, label %if.end1138, !dbg !2038

if.then1134:                                      ; preds = %if.end1130
  %arrayidx1135 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2045
  %672 = load i32, i32* %arrayidx1135, align 4, !dbg !2045
  store i32 %672, i32* %bcost, align 4, !dbg !2045
  %673 = load i32, i32* %omx, align 4, !dbg !2045
  %add1136 = add nsw i32 %673, 0, !dbg !2045
  store i32 %add1136, i32* %bmx, align 4, !dbg !2045
  %674 = load i32, i32* %omy, align 4, !dbg !2045
  %add1137 = add nsw i32 %674, 1, !dbg !2045
  store i32 %add1137, i32* %bmy, align 4, !dbg !2045
  br label %if.end1138, !dbg !2045

if.end1138:                                       ; preds = %if.then1134, %if.end1130
  %arrayidx1139 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2047
  %675 = load i32, i32* %arrayidx1139, align 8, !dbg !2047
  %676 = load i32, i32* %bcost, align 4, !dbg !2047
  %cmp1140 = icmp slt i32 %675, %676, !dbg !2047
  br i1 %cmp1140, label %if.then1142, label %if.end1146, !dbg !2038

if.then1142:                                      ; preds = %if.end1138
  %arrayidx1143 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2049
  %677 = load i32, i32* %arrayidx1143, align 8, !dbg !2049
  store i32 %677, i32* %bcost, align 4, !dbg !2049
  %678 = load i32, i32* %omx, align 4, !dbg !2049
  %add1144 = add nsw i32 %678, -1, !dbg !2049
  store i32 %add1144, i32* %bmx, align 4, !dbg !2049
  %679 = load i32, i32* %omy, align 4, !dbg !2049
  %add1145 = add nsw i32 %679, 0, !dbg !2049
  store i32 %add1145, i32* %bmy, align 4, !dbg !2049
  br label %if.end1146, !dbg !2049

if.end1146:                                       ; preds = %if.then1142, %if.end1138
  %arrayidx1147 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2051
  %680 = load i32, i32* %arrayidx1147, align 4, !dbg !2051
  %681 = load i32, i32* %bcost, align 4, !dbg !2051
  %cmp1148 = icmp slt i32 %680, %681, !dbg !2051
  br i1 %cmp1148, label %if.then1150, label %if.end1154, !dbg !2038

if.then1150:                                      ; preds = %if.end1146
  %arrayidx1151 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2053
  %682 = load i32, i32* %arrayidx1151, align 4, !dbg !2053
  store i32 %682, i32* %bcost, align 4, !dbg !2053
  %683 = load i32, i32* %omx, align 4, !dbg !2053
  %add1152 = add nsw i32 %683, 1, !dbg !2053
  store i32 %add1152, i32* %bmx, align 4, !dbg !2053
  %684 = load i32, i32* %omy, align 4, !dbg !2053
  %add1153 = add nsw i32 %684, 0, !dbg !2053
  store i32 %add1153, i32* %bmy, align 4, !dbg !2053
  br label %if.end1154, !dbg !2053

if.end1154:                                       ; preds = %if.then1150, %if.end1146
  %685 = load i32, i32* %pmx, align 4, !dbg !2055
  %686 = load i32, i32* %pmy, align 4, !dbg !2057
  %or1155 = or i32 %685, %686, !dbg !2058
  %tobool1156 = icmp ne i32 %or1155, 0, !dbg !2058
  br i1 %tobool1156, label %if.then1157, label %if.end1269, !dbg !2059

if.then1157:                                      ; preds = %if.end1154
  store i32 0, i32* %omx, align 4, !dbg !2060
  store i32 0, i32* %omy, align 4, !dbg !2060
  call void @llvm.dbg.declare(metadata i8** %pix_base1158, metadata !2062, metadata !DIExpression()), !dbg !2064
  %687 = load i8*, i8** %p_fref_w, align 8, !dbg !2064
  %688 = load i32, i32* %omx, align 4, !dbg !2064
  %idx.ext1159 = sext i32 %688 to i64, !dbg !2064
  %add.ptr1160 = getelementptr inbounds i8, i8* %687, i64 %idx.ext1159, !dbg !2064
  %689 = load i32, i32* %omy, align 4, !dbg !2064
  %690 = load i32, i32* %stride, align 4, !dbg !2064
  %mul1161 = mul nsw i32 %689, %690, !dbg !2064
  %idx.ext1162 = sext i32 %mul1161 to i64, !dbg !2064
  %add.ptr1163 = getelementptr inbounds i8, i8* %add.ptr1160, i64 %idx.ext1162, !dbg !2064
  store i8* %add.ptr1163, i8** %pix_base1158, align 8, !dbg !2064
  %691 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2064
  %pixf1164 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %691, i32 0, i32 69, !dbg !2064
  %fpelcmp_x41165 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1164, i32 0, i32 9, !dbg !2064
  %692 = load i32, i32* %i_pixel5, align 4, !dbg !2064
  %idxprom1166 = sext i32 %692 to i64, !dbg !2064
  %arrayidx1167 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41165, i64 0, i64 %idxprom1166, !dbg !2064
  %693 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1167, align 8, !dbg !2064
  %694 = load i8*, i8** %p_fenc, align 8, !dbg !2064
  %695 = load i8*, i8** %pix_base1158, align 8, !dbg !2064
  %add.ptr1168 = getelementptr inbounds i8, i8* %695, i64 0, !dbg !2064
  %696 = load i32, i32* %stride, align 4, !dbg !2064
  %mul1169 = mul nsw i32 -1, %696, !dbg !2064
  %idx.ext1170 = sext i32 %mul1169 to i64, !dbg !2064
  %add.ptr1171 = getelementptr inbounds i8, i8* %add.ptr1168, i64 %idx.ext1170, !dbg !2064
  %697 = load i8*, i8** %pix_base1158, align 8, !dbg !2064
  %add.ptr1172 = getelementptr inbounds i8, i8* %697, i64 0, !dbg !2064
  %698 = load i32, i32* %stride, align 4, !dbg !2064
  %mul1173 = mul nsw i32 1, %698, !dbg !2064
  %idx.ext1174 = sext i32 %mul1173 to i64, !dbg !2064
  %add.ptr1175 = getelementptr inbounds i8, i8* %add.ptr1172, i64 %idx.ext1174, !dbg !2064
  %699 = load i8*, i8** %pix_base1158, align 8, !dbg !2064
  %add.ptr1176 = getelementptr inbounds i8, i8* %699, i64 -1, !dbg !2064
  %700 = load i32, i32* %stride, align 4, !dbg !2064
  %mul1177 = mul nsw i32 0, %700, !dbg !2064
  %idx.ext1178 = sext i32 %mul1177 to i64, !dbg !2064
  %add.ptr1179 = getelementptr inbounds i8, i8* %add.ptr1176, i64 %idx.ext1178, !dbg !2064
  %701 = load i8*, i8** %pix_base1158, align 8, !dbg !2064
  %add.ptr1180 = getelementptr inbounds i8, i8* %701, i64 1, !dbg !2064
  %702 = load i32, i32* %stride, align 4, !dbg !2064
  %mul1181 = mul nsw i32 0, %702, !dbg !2064
  %idx.ext1182 = sext i32 %mul1181 to i64, !dbg !2064
  %add.ptr1183 = getelementptr inbounds i8, i8* %add.ptr1180, i64 %idx.ext1182, !dbg !2064
  %703 = load i32, i32* %stride, align 4, !dbg !2064
  %arraydecay1184 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2064
  call void %693(i8* %694, i8* %add.ptr1171, i8* %add.ptr1175, i8* %add.ptr1179, i8* %add.ptr1183, i32 %703, i32* %arraydecay1184), !dbg !2064
  %704 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2064
  %705 = load i32, i32* %omx, align 4, !dbg !2064
  %add1185 = add nsw i32 %705, 0, !dbg !2064
  %shl1186 = shl i32 %add1185, 2, !dbg !2064
  %idxprom1187 = sext i32 %shl1186 to i64, !dbg !2064
  %arrayidx1188 = getelementptr inbounds i16, i16* %704, i64 %idxprom1187, !dbg !2064
  %706 = load i16, i16* %arrayidx1188, align 2, !dbg !2064
  %conv1189 = zext i16 %706 to i32, !dbg !2064
  %707 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2064
  %708 = load i32, i32* %omy, align 4, !dbg !2064
  %add1190 = add nsw i32 %708, -1, !dbg !2064
  %shl1191 = shl i32 %add1190, 2, !dbg !2064
  %idxprom1192 = sext i32 %shl1191 to i64, !dbg !2064
  %arrayidx1193 = getelementptr inbounds i16, i16* %707, i64 %idxprom1192, !dbg !2064
  %709 = load i16, i16* %arrayidx1193, align 2, !dbg !2064
  %conv1194 = zext i16 %709 to i32, !dbg !2064
  %add1195 = add nsw i32 %conv1189, %conv1194, !dbg !2064
  %arrayidx1196 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2064
  %710 = load i32, i32* %arrayidx1196, align 16, !dbg !2064
  %add1197 = add nsw i32 %710, %add1195, !dbg !2064
  store i32 %add1197, i32* %arrayidx1196, align 16, !dbg !2064
  %711 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2064
  %712 = load i32, i32* %omx, align 4, !dbg !2064
  %add1198 = add nsw i32 %712, 0, !dbg !2064
  %shl1199 = shl i32 %add1198, 2, !dbg !2064
  %idxprom1200 = sext i32 %shl1199 to i64, !dbg !2064
  %arrayidx1201 = getelementptr inbounds i16, i16* %711, i64 %idxprom1200, !dbg !2064
  %713 = load i16, i16* %arrayidx1201, align 2, !dbg !2064
  %conv1202 = zext i16 %713 to i32, !dbg !2064
  %714 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2064
  %715 = load i32, i32* %omy, align 4, !dbg !2064
  %add1203 = add nsw i32 %715, 1, !dbg !2064
  %shl1204 = shl i32 %add1203, 2, !dbg !2064
  %idxprom1205 = sext i32 %shl1204 to i64, !dbg !2064
  %arrayidx1206 = getelementptr inbounds i16, i16* %714, i64 %idxprom1205, !dbg !2064
  %716 = load i16, i16* %arrayidx1206, align 2, !dbg !2064
  %conv1207 = zext i16 %716 to i32, !dbg !2064
  %add1208 = add nsw i32 %conv1202, %conv1207, !dbg !2064
  %arrayidx1209 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2064
  %717 = load i32, i32* %arrayidx1209, align 4, !dbg !2064
  %add1210 = add nsw i32 %717, %add1208, !dbg !2064
  store i32 %add1210, i32* %arrayidx1209, align 4, !dbg !2064
  %718 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2064
  %719 = load i32, i32* %omx, align 4, !dbg !2064
  %add1211 = add nsw i32 %719, -1, !dbg !2064
  %shl1212 = shl i32 %add1211, 2, !dbg !2064
  %idxprom1213 = sext i32 %shl1212 to i64, !dbg !2064
  %arrayidx1214 = getelementptr inbounds i16, i16* %718, i64 %idxprom1213, !dbg !2064
  %720 = load i16, i16* %arrayidx1214, align 2, !dbg !2064
  %conv1215 = zext i16 %720 to i32, !dbg !2064
  %721 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2064
  %722 = load i32, i32* %omy, align 4, !dbg !2064
  %add1216 = add nsw i32 %722, 0, !dbg !2064
  %shl1217 = shl i32 %add1216, 2, !dbg !2064
  %idxprom1218 = sext i32 %shl1217 to i64, !dbg !2064
  %arrayidx1219 = getelementptr inbounds i16, i16* %721, i64 %idxprom1218, !dbg !2064
  %723 = load i16, i16* %arrayidx1219, align 2, !dbg !2064
  %conv1220 = zext i16 %723 to i32, !dbg !2064
  %add1221 = add nsw i32 %conv1215, %conv1220, !dbg !2064
  %arrayidx1222 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2064
  %724 = load i32, i32* %arrayidx1222, align 8, !dbg !2064
  %add1223 = add nsw i32 %724, %add1221, !dbg !2064
  store i32 %add1223, i32* %arrayidx1222, align 8, !dbg !2064
  %725 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2064
  %726 = load i32, i32* %omx, align 4, !dbg !2064
  %add1224 = add nsw i32 %726, 1, !dbg !2064
  %shl1225 = shl i32 %add1224, 2, !dbg !2064
  %idxprom1226 = sext i32 %shl1225 to i64, !dbg !2064
  %arrayidx1227 = getelementptr inbounds i16, i16* %725, i64 %idxprom1226, !dbg !2064
  %727 = load i16, i16* %arrayidx1227, align 2, !dbg !2064
  %conv1228 = zext i16 %727 to i32, !dbg !2064
  %728 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2064
  %729 = load i32, i32* %omy, align 4, !dbg !2064
  %add1229 = add nsw i32 %729, 0, !dbg !2064
  %shl1230 = shl i32 %add1229, 2, !dbg !2064
  %idxprom1231 = sext i32 %shl1230 to i64, !dbg !2064
  %arrayidx1232 = getelementptr inbounds i16, i16* %728, i64 %idxprom1231, !dbg !2064
  %730 = load i16, i16* %arrayidx1232, align 2, !dbg !2064
  %conv1233 = zext i16 %730 to i32, !dbg !2064
  %add1234 = add nsw i32 %conv1228, %conv1233, !dbg !2064
  %arrayidx1235 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2064
  %731 = load i32, i32* %arrayidx1235, align 4, !dbg !2064
  %add1236 = add nsw i32 %731, %add1234, !dbg !2064
  store i32 %add1236, i32* %arrayidx1235, align 4, !dbg !2064
  %arrayidx1237 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2065
  %732 = load i32, i32* %arrayidx1237, align 16, !dbg !2065
  %733 = load i32, i32* %bcost, align 4, !dbg !2065
  %cmp1238 = icmp slt i32 %732, %733, !dbg !2065
  br i1 %cmp1238, label %if.then1240, label %if.end1244, !dbg !2064

if.then1240:                                      ; preds = %if.then1157
  %arrayidx1241 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2067
  %734 = load i32, i32* %arrayidx1241, align 16, !dbg !2067
  store i32 %734, i32* %bcost, align 4, !dbg !2067
  %735 = load i32, i32* %omx, align 4, !dbg !2067
  %add1242 = add nsw i32 %735, 0, !dbg !2067
  store i32 %add1242, i32* %bmx, align 4, !dbg !2067
  %736 = load i32, i32* %omy, align 4, !dbg !2067
  %add1243 = add nsw i32 %736, -1, !dbg !2067
  store i32 %add1243, i32* %bmy, align 4, !dbg !2067
  br label %if.end1244, !dbg !2067

if.end1244:                                       ; preds = %if.then1240, %if.then1157
  %arrayidx1245 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2069
  %737 = load i32, i32* %arrayidx1245, align 4, !dbg !2069
  %738 = load i32, i32* %bcost, align 4, !dbg !2069
  %cmp1246 = icmp slt i32 %737, %738, !dbg !2069
  br i1 %cmp1246, label %if.then1248, label %if.end1252, !dbg !2064

if.then1248:                                      ; preds = %if.end1244
  %arrayidx1249 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2071
  %739 = load i32, i32* %arrayidx1249, align 4, !dbg !2071
  store i32 %739, i32* %bcost, align 4, !dbg !2071
  %740 = load i32, i32* %omx, align 4, !dbg !2071
  %add1250 = add nsw i32 %740, 0, !dbg !2071
  store i32 %add1250, i32* %bmx, align 4, !dbg !2071
  %741 = load i32, i32* %omy, align 4, !dbg !2071
  %add1251 = add nsw i32 %741, 1, !dbg !2071
  store i32 %add1251, i32* %bmy, align 4, !dbg !2071
  br label %if.end1252, !dbg !2071

if.end1252:                                       ; preds = %if.then1248, %if.end1244
  %arrayidx1253 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2073
  %742 = load i32, i32* %arrayidx1253, align 8, !dbg !2073
  %743 = load i32, i32* %bcost, align 4, !dbg !2073
  %cmp1254 = icmp slt i32 %742, %743, !dbg !2073
  br i1 %cmp1254, label %if.then1256, label %if.end1260, !dbg !2064

if.then1256:                                      ; preds = %if.end1252
  %arrayidx1257 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2075
  %744 = load i32, i32* %arrayidx1257, align 8, !dbg !2075
  store i32 %744, i32* %bcost, align 4, !dbg !2075
  %745 = load i32, i32* %omx, align 4, !dbg !2075
  %add1258 = add nsw i32 %745, -1, !dbg !2075
  store i32 %add1258, i32* %bmx, align 4, !dbg !2075
  %746 = load i32, i32* %omy, align 4, !dbg !2075
  %add1259 = add nsw i32 %746, 0, !dbg !2075
  store i32 %add1259, i32* %bmy, align 4, !dbg !2075
  br label %if.end1260, !dbg !2075

if.end1260:                                       ; preds = %if.then1256, %if.end1252
  %arrayidx1261 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2077
  %747 = load i32, i32* %arrayidx1261, align 4, !dbg !2077
  %748 = load i32, i32* %bcost, align 4, !dbg !2077
  %cmp1262 = icmp slt i32 %747, %748, !dbg !2077
  br i1 %cmp1262, label %if.then1264, label %if.end1268, !dbg !2064

if.then1264:                                      ; preds = %if.end1260
  %arrayidx1265 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2079
  %749 = load i32, i32* %arrayidx1265, align 4, !dbg !2079
  store i32 %749, i32* %bcost, align 4, !dbg !2079
  %750 = load i32, i32* %omx, align 4, !dbg !2079
  %add1266 = add nsw i32 %750, 1, !dbg !2079
  store i32 %add1266, i32* %bmx, align 4, !dbg !2079
  %751 = load i32, i32* %omy, align 4, !dbg !2079
  %add1267 = add nsw i32 %751, 0, !dbg !2079
  store i32 %add1267, i32* %bmy, align 4, !dbg !2079
  br label %if.end1268, !dbg !2079

if.end1268:                                       ; preds = %if.then1264, %if.end1260
  br label %if.end1269, !dbg !2060

if.end1269:                                       ; preds = %if.end1268, %if.end1154
  %752 = load i32, i32* %i_pixel5, align 4, !dbg !2081
  %cmp1270 = icmp eq i32 %752, 6, !dbg !2083
  br i1 %cmp1270, label %if.then1272, label %if.end1273, !dbg !2084

if.then1272:                                      ; preds = %if.end1269
  br label %me_hex2, !dbg !2085

if.end1273:                                       ; preds = %if.end1269
  %753 = load i32, i32* %bcost, align 4, !dbg !2086
  store i32 %753, i32* %ucost2, align 4, !dbg !2087
  %754 = load i32, i32* %bmx, align 4, !dbg !2088
  %755 = load i32, i32* %bmy, align 4, !dbg !2090
  %or1274 = or i32 %754, %755, !dbg !2091
  %tobool1275 = icmp ne i32 %or1274, 0, !dbg !2091
  br i1 %tobool1275, label %land.lhs.true1276, label %if.end1393, !dbg !2092

land.lhs.true1276:                                ; preds = %if.end1273
  %756 = load i32, i32* %bmx, align 4, !dbg !2093
  %757 = load i32, i32* %pmx, align 4, !dbg !2094
  %sub1277 = sub nsw i32 %756, %757, !dbg !2095
  %758 = load i32, i32* %bmy, align 4, !dbg !2096
  %759 = load i32, i32* %pmy, align 4, !dbg !2097
  %sub1278 = sub nsw i32 %758, %759, !dbg !2098
  %or1279 = or i32 %sub1277, %sub1278, !dbg !2099
  %tobool1280 = icmp ne i32 %or1279, 0, !dbg !2099
  br i1 %tobool1280, label %if.then1281, label %if.end1393, !dbg !2100

if.then1281:                                      ; preds = %land.lhs.true1276
  %760 = load i32, i32* %bmx, align 4, !dbg !2101
  store i32 %760, i32* %omx, align 4, !dbg !2101
  %761 = load i32, i32* %bmy, align 4, !dbg !2101
  store i32 %761, i32* %omy, align 4, !dbg !2101
  call void @llvm.dbg.declare(metadata i8** %pix_base1282, metadata !2103, metadata !DIExpression()), !dbg !2105
  %762 = load i8*, i8** %p_fref_w, align 8, !dbg !2105
  %763 = load i32, i32* %omx, align 4, !dbg !2105
  %idx.ext1283 = sext i32 %763 to i64, !dbg !2105
  %add.ptr1284 = getelementptr inbounds i8, i8* %762, i64 %idx.ext1283, !dbg !2105
  %764 = load i32, i32* %omy, align 4, !dbg !2105
  %765 = load i32, i32* %stride, align 4, !dbg !2105
  %mul1285 = mul nsw i32 %764, %765, !dbg !2105
  %idx.ext1286 = sext i32 %mul1285 to i64, !dbg !2105
  %add.ptr1287 = getelementptr inbounds i8, i8* %add.ptr1284, i64 %idx.ext1286, !dbg !2105
  store i8* %add.ptr1287, i8** %pix_base1282, align 8, !dbg !2105
  %766 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2105
  %pixf1288 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %766, i32 0, i32 69, !dbg !2105
  %fpelcmp_x41289 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1288, i32 0, i32 9, !dbg !2105
  %767 = load i32, i32* %i_pixel5, align 4, !dbg !2105
  %idxprom1290 = sext i32 %767 to i64, !dbg !2105
  %arrayidx1291 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41289, i64 0, i64 %idxprom1290, !dbg !2105
  %768 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1291, align 8, !dbg !2105
  %769 = load i8*, i8** %p_fenc, align 8, !dbg !2105
  %770 = load i8*, i8** %pix_base1282, align 8, !dbg !2105
  %add.ptr1292 = getelementptr inbounds i8, i8* %770, i64 0, !dbg !2105
  %771 = load i32, i32* %stride, align 4, !dbg !2105
  %mul1293 = mul nsw i32 -1, %771, !dbg !2105
  %idx.ext1294 = sext i32 %mul1293 to i64, !dbg !2105
  %add.ptr1295 = getelementptr inbounds i8, i8* %add.ptr1292, i64 %idx.ext1294, !dbg !2105
  %772 = load i8*, i8** %pix_base1282, align 8, !dbg !2105
  %add.ptr1296 = getelementptr inbounds i8, i8* %772, i64 0, !dbg !2105
  %773 = load i32, i32* %stride, align 4, !dbg !2105
  %mul1297 = mul nsw i32 1, %773, !dbg !2105
  %idx.ext1298 = sext i32 %mul1297 to i64, !dbg !2105
  %add.ptr1299 = getelementptr inbounds i8, i8* %add.ptr1296, i64 %idx.ext1298, !dbg !2105
  %774 = load i8*, i8** %pix_base1282, align 8, !dbg !2105
  %add.ptr1300 = getelementptr inbounds i8, i8* %774, i64 -1, !dbg !2105
  %775 = load i32, i32* %stride, align 4, !dbg !2105
  %mul1301 = mul nsw i32 0, %775, !dbg !2105
  %idx.ext1302 = sext i32 %mul1301 to i64, !dbg !2105
  %add.ptr1303 = getelementptr inbounds i8, i8* %add.ptr1300, i64 %idx.ext1302, !dbg !2105
  %776 = load i8*, i8** %pix_base1282, align 8, !dbg !2105
  %add.ptr1304 = getelementptr inbounds i8, i8* %776, i64 1, !dbg !2105
  %777 = load i32, i32* %stride, align 4, !dbg !2105
  %mul1305 = mul nsw i32 0, %777, !dbg !2105
  %idx.ext1306 = sext i32 %mul1305 to i64, !dbg !2105
  %add.ptr1307 = getelementptr inbounds i8, i8* %add.ptr1304, i64 %idx.ext1306, !dbg !2105
  %778 = load i32, i32* %stride, align 4, !dbg !2105
  %arraydecay1308 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2105
  call void %768(i8* %769, i8* %add.ptr1295, i8* %add.ptr1299, i8* %add.ptr1303, i8* %add.ptr1307, i32 %778, i32* %arraydecay1308), !dbg !2105
  %779 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2105
  %780 = load i32, i32* %omx, align 4, !dbg !2105
  %add1309 = add nsw i32 %780, 0, !dbg !2105
  %shl1310 = shl i32 %add1309, 2, !dbg !2105
  %idxprom1311 = sext i32 %shl1310 to i64, !dbg !2105
  %arrayidx1312 = getelementptr inbounds i16, i16* %779, i64 %idxprom1311, !dbg !2105
  %781 = load i16, i16* %arrayidx1312, align 2, !dbg !2105
  %conv1313 = zext i16 %781 to i32, !dbg !2105
  %782 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2105
  %783 = load i32, i32* %omy, align 4, !dbg !2105
  %add1314 = add nsw i32 %783, -1, !dbg !2105
  %shl1315 = shl i32 %add1314, 2, !dbg !2105
  %idxprom1316 = sext i32 %shl1315 to i64, !dbg !2105
  %arrayidx1317 = getelementptr inbounds i16, i16* %782, i64 %idxprom1316, !dbg !2105
  %784 = load i16, i16* %arrayidx1317, align 2, !dbg !2105
  %conv1318 = zext i16 %784 to i32, !dbg !2105
  %add1319 = add nsw i32 %conv1313, %conv1318, !dbg !2105
  %arrayidx1320 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2105
  %785 = load i32, i32* %arrayidx1320, align 16, !dbg !2105
  %add1321 = add nsw i32 %785, %add1319, !dbg !2105
  store i32 %add1321, i32* %arrayidx1320, align 16, !dbg !2105
  %786 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2105
  %787 = load i32, i32* %omx, align 4, !dbg !2105
  %add1322 = add nsw i32 %787, 0, !dbg !2105
  %shl1323 = shl i32 %add1322, 2, !dbg !2105
  %idxprom1324 = sext i32 %shl1323 to i64, !dbg !2105
  %arrayidx1325 = getelementptr inbounds i16, i16* %786, i64 %idxprom1324, !dbg !2105
  %788 = load i16, i16* %arrayidx1325, align 2, !dbg !2105
  %conv1326 = zext i16 %788 to i32, !dbg !2105
  %789 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2105
  %790 = load i32, i32* %omy, align 4, !dbg !2105
  %add1327 = add nsw i32 %790, 1, !dbg !2105
  %shl1328 = shl i32 %add1327, 2, !dbg !2105
  %idxprom1329 = sext i32 %shl1328 to i64, !dbg !2105
  %arrayidx1330 = getelementptr inbounds i16, i16* %789, i64 %idxprom1329, !dbg !2105
  %791 = load i16, i16* %arrayidx1330, align 2, !dbg !2105
  %conv1331 = zext i16 %791 to i32, !dbg !2105
  %add1332 = add nsw i32 %conv1326, %conv1331, !dbg !2105
  %arrayidx1333 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2105
  %792 = load i32, i32* %arrayidx1333, align 4, !dbg !2105
  %add1334 = add nsw i32 %792, %add1332, !dbg !2105
  store i32 %add1334, i32* %arrayidx1333, align 4, !dbg !2105
  %793 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2105
  %794 = load i32, i32* %omx, align 4, !dbg !2105
  %add1335 = add nsw i32 %794, -1, !dbg !2105
  %shl1336 = shl i32 %add1335, 2, !dbg !2105
  %idxprom1337 = sext i32 %shl1336 to i64, !dbg !2105
  %arrayidx1338 = getelementptr inbounds i16, i16* %793, i64 %idxprom1337, !dbg !2105
  %795 = load i16, i16* %arrayidx1338, align 2, !dbg !2105
  %conv1339 = zext i16 %795 to i32, !dbg !2105
  %796 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2105
  %797 = load i32, i32* %omy, align 4, !dbg !2105
  %add1340 = add nsw i32 %797, 0, !dbg !2105
  %shl1341 = shl i32 %add1340, 2, !dbg !2105
  %idxprom1342 = sext i32 %shl1341 to i64, !dbg !2105
  %arrayidx1343 = getelementptr inbounds i16, i16* %796, i64 %idxprom1342, !dbg !2105
  %798 = load i16, i16* %arrayidx1343, align 2, !dbg !2105
  %conv1344 = zext i16 %798 to i32, !dbg !2105
  %add1345 = add nsw i32 %conv1339, %conv1344, !dbg !2105
  %arrayidx1346 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2105
  %799 = load i32, i32* %arrayidx1346, align 8, !dbg !2105
  %add1347 = add nsw i32 %799, %add1345, !dbg !2105
  store i32 %add1347, i32* %arrayidx1346, align 8, !dbg !2105
  %800 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2105
  %801 = load i32, i32* %omx, align 4, !dbg !2105
  %add1348 = add nsw i32 %801, 1, !dbg !2105
  %shl1349 = shl i32 %add1348, 2, !dbg !2105
  %idxprom1350 = sext i32 %shl1349 to i64, !dbg !2105
  %arrayidx1351 = getelementptr inbounds i16, i16* %800, i64 %idxprom1350, !dbg !2105
  %802 = load i16, i16* %arrayidx1351, align 2, !dbg !2105
  %conv1352 = zext i16 %802 to i32, !dbg !2105
  %803 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2105
  %804 = load i32, i32* %omy, align 4, !dbg !2105
  %add1353 = add nsw i32 %804, 0, !dbg !2105
  %shl1354 = shl i32 %add1353, 2, !dbg !2105
  %idxprom1355 = sext i32 %shl1354 to i64, !dbg !2105
  %arrayidx1356 = getelementptr inbounds i16, i16* %803, i64 %idxprom1355, !dbg !2105
  %805 = load i16, i16* %arrayidx1356, align 2, !dbg !2105
  %conv1357 = zext i16 %805 to i32, !dbg !2105
  %add1358 = add nsw i32 %conv1352, %conv1357, !dbg !2105
  %arrayidx1359 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2105
  %806 = load i32, i32* %arrayidx1359, align 4, !dbg !2105
  %add1360 = add nsw i32 %806, %add1358, !dbg !2105
  store i32 %add1360, i32* %arrayidx1359, align 4, !dbg !2105
  %arrayidx1361 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2106
  %807 = load i32, i32* %arrayidx1361, align 16, !dbg !2106
  %808 = load i32, i32* %bcost, align 4, !dbg !2106
  %cmp1362 = icmp slt i32 %807, %808, !dbg !2106
  br i1 %cmp1362, label %if.then1364, label %if.end1368, !dbg !2105

if.then1364:                                      ; preds = %if.then1281
  %arrayidx1365 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2108
  %809 = load i32, i32* %arrayidx1365, align 16, !dbg !2108
  store i32 %809, i32* %bcost, align 4, !dbg !2108
  %810 = load i32, i32* %omx, align 4, !dbg !2108
  %add1366 = add nsw i32 %810, 0, !dbg !2108
  store i32 %add1366, i32* %bmx, align 4, !dbg !2108
  %811 = load i32, i32* %omy, align 4, !dbg !2108
  %add1367 = add nsw i32 %811, -1, !dbg !2108
  store i32 %add1367, i32* %bmy, align 4, !dbg !2108
  br label %if.end1368, !dbg !2108

if.end1368:                                       ; preds = %if.then1364, %if.then1281
  %arrayidx1369 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2110
  %812 = load i32, i32* %arrayidx1369, align 4, !dbg !2110
  %813 = load i32, i32* %bcost, align 4, !dbg !2110
  %cmp1370 = icmp slt i32 %812, %813, !dbg !2110
  br i1 %cmp1370, label %if.then1372, label %if.end1376, !dbg !2105

if.then1372:                                      ; preds = %if.end1368
  %arrayidx1373 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2112
  %814 = load i32, i32* %arrayidx1373, align 4, !dbg !2112
  store i32 %814, i32* %bcost, align 4, !dbg !2112
  %815 = load i32, i32* %omx, align 4, !dbg !2112
  %add1374 = add nsw i32 %815, 0, !dbg !2112
  store i32 %add1374, i32* %bmx, align 4, !dbg !2112
  %816 = load i32, i32* %omy, align 4, !dbg !2112
  %add1375 = add nsw i32 %816, 1, !dbg !2112
  store i32 %add1375, i32* %bmy, align 4, !dbg !2112
  br label %if.end1376, !dbg !2112

if.end1376:                                       ; preds = %if.then1372, %if.end1368
  %arrayidx1377 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2114
  %817 = load i32, i32* %arrayidx1377, align 8, !dbg !2114
  %818 = load i32, i32* %bcost, align 4, !dbg !2114
  %cmp1378 = icmp slt i32 %817, %818, !dbg !2114
  br i1 %cmp1378, label %if.then1380, label %if.end1384, !dbg !2105

if.then1380:                                      ; preds = %if.end1376
  %arrayidx1381 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2116
  %819 = load i32, i32* %arrayidx1381, align 8, !dbg !2116
  store i32 %819, i32* %bcost, align 4, !dbg !2116
  %820 = load i32, i32* %omx, align 4, !dbg !2116
  %add1382 = add nsw i32 %820, -1, !dbg !2116
  store i32 %add1382, i32* %bmx, align 4, !dbg !2116
  %821 = load i32, i32* %omy, align 4, !dbg !2116
  %add1383 = add nsw i32 %821, 0, !dbg !2116
  store i32 %add1383, i32* %bmy, align 4, !dbg !2116
  br label %if.end1384, !dbg !2116

if.end1384:                                       ; preds = %if.then1380, %if.end1376
  %arrayidx1385 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2118
  %822 = load i32, i32* %arrayidx1385, align 4, !dbg !2118
  %823 = load i32, i32* %bcost, align 4, !dbg !2118
  %cmp1386 = icmp slt i32 %822, %823, !dbg !2118
  br i1 %cmp1386, label %if.then1388, label %if.end1392, !dbg !2105

if.then1388:                                      ; preds = %if.end1384
  %arrayidx1389 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2120
  %824 = load i32, i32* %arrayidx1389, align 4, !dbg !2120
  store i32 %824, i32* %bcost, align 4, !dbg !2120
  %825 = load i32, i32* %omx, align 4, !dbg !2120
  %add1390 = add nsw i32 %825, 1, !dbg !2120
  store i32 %add1390, i32* %bmx, align 4, !dbg !2120
  %826 = load i32, i32* %omy, align 4, !dbg !2120
  %add1391 = add nsw i32 %826, 0, !dbg !2120
  store i32 %add1391, i32* %bmy, align 4, !dbg !2120
  br label %if.end1392, !dbg !2120

if.end1392:                                       ; preds = %if.then1388, %if.end1384
  br label %if.end1393, !dbg !2101

if.end1393:                                       ; preds = %if.end1392, %land.lhs.true1276, %if.end1273
  %827 = load i32, i32* %bcost, align 4, !dbg !2122
  %828 = load i32, i32* %ucost2, align 4, !dbg !2124
  %cmp1394 = icmp eq i32 %827, %828, !dbg !2125
  br i1 %cmp1394, label %if.then1396, label %if.end1397, !dbg !2126

if.then1396:                                      ; preds = %if.end1393
  store i32 3, i32* %cross_start, align 4, !dbg !2127
  br label %if.end1397, !dbg !2128

if.end1397:                                       ; preds = %if.then1396, %if.end1393
  %829 = load i32, i32* %bmx, align 4, !dbg !2129
  store i32 %829, i32* %omx, align 4, !dbg !2130
  %830 = load i32, i32* %bmy, align 4, !dbg !2131
  store i32 %830, i32* %omy, align 4, !dbg !2132
  %831 = load i32, i32* %bcost, align 4, !dbg !2133
  %832 = load i32, i32* %ucost2, align 4, !dbg !2135
  %cmp1398 = icmp eq i32 %831, %832, !dbg !2136
  br i1 %cmp1398, label %land.lhs.true1400, label %if.end2307, !dbg !2137

land.lhs.true1400:                                ; preds = %if.end1397
  %833 = load i32, i32* %bcost, align 4, !dbg !2138
  %834 = load i32, i32* %i_pixel5, align 4, !dbg !2138
  %idxprom1401 = sext i32 %834 to i64, !dbg !2138
  %arrayidx1402 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_me_search_ref.x264_pixel_size_shift, i64 0, i64 %idxprom1401, !dbg !2138
  %835 = load i8, i8* %arrayidx1402, align 1, !dbg !2138
  %conv1403 = zext i8 %835 to i32, !dbg !2138
  %shr1404 = ashr i32 2000, %conv1403, !dbg !2138
  %cmp1405 = icmp slt i32 %833, %shr1404, !dbg !2138
  br i1 %cmp1405, label %if.then1407, label %if.end2307, !dbg !2139

if.then1407:                                      ; preds = %land.lhs.true1400
  call void @llvm.dbg.declare(metadata i8** %pix_base1408, metadata !2140, metadata !DIExpression()), !dbg !2143
  %836 = load i8*, i8** %p_fref_w, align 8, !dbg !2143
  %837 = load i32, i32* %omx, align 4, !dbg !2143
  %idx.ext1409 = sext i32 %837 to i64, !dbg !2143
  %add.ptr1410 = getelementptr inbounds i8, i8* %836, i64 %idx.ext1409, !dbg !2143
  %838 = load i32, i32* %omy, align 4, !dbg !2143
  %839 = load i32, i32* %stride, align 4, !dbg !2143
  %mul1411 = mul nsw i32 %838, %839, !dbg !2143
  %idx.ext1412 = sext i32 %mul1411 to i64, !dbg !2143
  %add.ptr1413 = getelementptr inbounds i8, i8* %add.ptr1410, i64 %idx.ext1412, !dbg !2143
  store i8* %add.ptr1413, i8** %pix_base1408, align 8, !dbg !2143
  %840 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2143
  %pixf1414 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %840, i32 0, i32 69, !dbg !2143
  %fpelcmp_x41415 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1414, i32 0, i32 9, !dbg !2143
  %841 = load i32, i32* %i_pixel5, align 4, !dbg !2143
  %idxprom1416 = sext i32 %841 to i64, !dbg !2143
  %arrayidx1417 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41415, i64 0, i64 %idxprom1416, !dbg !2143
  %842 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1417, align 8, !dbg !2143
  %843 = load i8*, i8** %p_fenc, align 8, !dbg !2143
  %844 = load i8*, i8** %pix_base1408, align 8, !dbg !2143
  %add.ptr1418 = getelementptr inbounds i8, i8* %844, i64 0, !dbg !2143
  %845 = load i32, i32* %stride, align 4, !dbg !2143
  %mul1419 = mul nsw i32 -2, %845, !dbg !2143
  %idx.ext1420 = sext i32 %mul1419 to i64, !dbg !2143
  %add.ptr1421 = getelementptr inbounds i8, i8* %add.ptr1418, i64 %idx.ext1420, !dbg !2143
  %846 = load i8*, i8** %pix_base1408, align 8, !dbg !2143
  %add.ptr1422 = getelementptr inbounds i8, i8* %846, i64 -1, !dbg !2143
  %847 = load i32, i32* %stride, align 4, !dbg !2143
  %mul1423 = mul nsw i32 -1, %847, !dbg !2143
  %idx.ext1424 = sext i32 %mul1423 to i64, !dbg !2143
  %add.ptr1425 = getelementptr inbounds i8, i8* %add.ptr1422, i64 %idx.ext1424, !dbg !2143
  %848 = load i8*, i8** %pix_base1408, align 8, !dbg !2143
  %add.ptr1426 = getelementptr inbounds i8, i8* %848, i64 1, !dbg !2143
  %849 = load i32, i32* %stride, align 4, !dbg !2143
  %mul1427 = mul nsw i32 -1, %849, !dbg !2143
  %idx.ext1428 = sext i32 %mul1427 to i64, !dbg !2143
  %add.ptr1429 = getelementptr inbounds i8, i8* %add.ptr1426, i64 %idx.ext1428, !dbg !2143
  %850 = load i8*, i8** %pix_base1408, align 8, !dbg !2143
  %add.ptr1430 = getelementptr inbounds i8, i8* %850, i64 -2, !dbg !2143
  %851 = load i32, i32* %stride, align 4, !dbg !2143
  %mul1431 = mul nsw i32 0, %851, !dbg !2143
  %idx.ext1432 = sext i32 %mul1431 to i64, !dbg !2143
  %add.ptr1433 = getelementptr inbounds i8, i8* %add.ptr1430, i64 %idx.ext1432, !dbg !2143
  %852 = load i32, i32* %stride, align 4, !dbg !2143
  %arraydecay1434 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2143
  call void %842(i8* %843, i8* %add.ptr1421, i8* %add.ptr1425, i8* %add.ptr1429, i8* %add.ptr1433, i32 %852, i32* %arraydecay1434), !dbg !2143
  %853 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2143
  %854 = load i32, i32* %omx, align 4, !dbg !2143
  %add1435 = add nsw i32 %854, 0, !dbg !2143
  %shl1436 = shl i32 %add1435, 2, !dbg !2143
  %idxprom1437 = sext i32 %shl1436 to i64, !dbg !2143
  %arrayidx1438 = getelementptr inbounds i16, i16* %853, i64 %idxprom1437, !dbg !2143
  %855 = load i16, i16* %arrayidx1438, align 2, !dbg !2143
  %conv1439 = zext i16 %855 to i32, !dbg !2143
  %856 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2143
  %857 = load i32, i32* %omy, align 4, !dbg !2143
  %add1440 = add nsw i32 %857, -2, !dbg !2143
  %shl1441 = shl i32 %add1440, 2, !dbg !2143
  %idxprom1442 = sext i32 %shl1441 to i64, !dbg !2143
  %arrayidx1443 = getelementptr inbounds i16, i16* %856, i64 %idxprom1442, !dbg !2143
  %858 = load i16, i16* %arrayidx1443, align 2, !dbg !2143
  %conv1444 = zext i16 %858 to i32, !dbg !2143
  %add1445 = add nsw i32 %conv1439, %conv1444, !dbg !2143
  %arrayidx1446 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2143
  %859 = load i32, i32* %arrayidx1446, align 16, !dbg !2143
  %add1447 = add nsw i32 %859, %add1445, !dbg !2143
  store i32 %add1447, i32* %arrayidx1446, align 16, !dbg !2143
  %860 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2143
  %861 = load i32, i32* %omx, align 4, !dbg !2143
  %add1448 = add nsw i32 %861, -1, !dbg !2143
  %shl1449 = shl i32 %add1448, 2, !dbg !2143
  %idxprom1450 = sext i32 %shl1449 to i64, !dbg !2143
  %arrayidx1451 = getelementptr inbounds i16, i16* %860, i64 %idxprom1450, !dbg !2143
  %862 = load i16, i16* %arrayidx1451, align 2, !dbg !2143
  %conv1452 = zext i16 %862 to i32, !dbg !2143
  %863 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2143
  %864 = load i32, i32* %omy, align 4, !dbg !2143
  %add1453 = add nsw i32 %864, -1, !dbg !2143
  %shl1454 = shl i32 %add1453, 2, !dbg !2143
  %idxprom1455 = sext i32 %shl1454 to i64, !dbg !2143
  %arrayidx1456 = getelementptr inbounds i16, i16* %863, i64 %idxprom1455, !dbg !2143
  %865 = load i16, i16* %arrayidx1456, align 2, !dbg !2143
  %conv1457 = zext i16 %865 to i32, !dbg !2143
  %add1458 = add nsw i32 %conv1452, %conv1457, !dbg !2143
  %arrayidx1459 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2143
  %866 = load i32, i32* %arrayidx1459, align 4, !dbg !2143
  %add1460 = add nsw i32 %866, %add1458, !dbg !2143
  store i32 %add1460, i32* %arrayidx1459, align 4, !dbg !2143
  %867 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2143
  %868 = load i32, i32* %omx, align 4, !dbg !2143
  %add1461 = add nsw i32 %868, 1, !dbg !2143
  %shl1462 = shl i32 %add1461, 2, !dbg !2143
  %idxprom1463 = sext i32 %shl1462 to i64, !dbg !2143
  %arrayidx1464 = getelementptr inbounds i16, i16* %867, i64 %idxprom1463, !dbg !2143
  %869 = load i16, i16* %arrayidx1464, align 2, !dbg !2143
  %conv1465 = zext i16 %869 to i32, !dbg !2143
  %870 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2143
  %871 = load i32, i32* %omy, align 4, !dbg !2143
  %add1466 = add nsw i32 %871, -1, !dbg !2143
  %shl1467 = shl i32 %add1466, 2, !dbg !2143
  %idxprom1468 = sext i32 %shl1467 to i64, !dbg !2143
  %arrayidx1469 = getelementptr inbounds i16, i16* %870, i64 %idxprom1468, !dbg !2143
  %872 = load i16, i16* %arrayidx1469, align 2, !dbg !2143
  %conv1470 = zext i16 %872 to i32, !dbg !2143
  %add1471 = add nsw i32 %conv1465, %conv1470, !dbg !2143
  %arrayidx1472 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2143
  %873 = load i32, i32* %arrayidx1472, align 8, !dbg !2143
  %add1473 = add nsw i32 %873, %add1471, !dbg !2143
  store i32 %add1473, i32* %arrayidx1472, align 8, !dbg !2143
  %874 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2143
  %875 = load i32, i32* %omx, align 4, !dbg !2143
  %add1474 = add nsw i32 %875, -2, !dbg !2143
  %shl1475 = shl i32 %add1474, 2, !dbg !2143
  %idxprom1476 = sext i32 %shl1475 to i64, !dbg !2143
  %arrayidx1477 = getelementptr inbounds i16, i16* %874, i64 %idxprom1476, !dbg !2143
  %876 = load i16, i16* %arrayidx1477, align 2, !dbg !2143
  %conv1478 = zext i16 %876 to i32, !dbg !2143
  %877 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2143
  %878 = load i32, i32* %omy, align 4, !dbg !2143
  %add1479 = add nsw i32 %878, 0, !dbg !2143
  %shl1480 = shl i32 %add1479, 2, !dbg !2143
  %idxprom1481 = sext i32 %shl1480 to i64, !dbg !2143
  %arrayidx1482 = getelementptr inbounds i16, i16* %877, i64 %idxprom1481, !dbg !2143
  %879 = load i16, i16* %arrayidx1482, align 2, !dbg !2143
  %conv1483 = zext i16 %879 to i32, !dbg !2143
  %add1484 = add nsw i32 %conv1478, %conv1483, !dbg !2143
  %arrayidx1485 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2143
  %880 = load i32, i32* %arrayidx1485, align 4, !dbg !2143
  %add1486 = add nsw i32 %880, %add1484, !dbg !2143
  store i32 %add1486, i32* %arrayidx1485, align 4, !dbg !2143
  %arrayidx1487 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2144
  %881 = load i32, i32* %arrayidx1487, align 16, !dbg !2144
  %882 = load i32, i32* %bcost, align 4, !dbg !2144
  %cmp1488 = icmp slt i32 %881, %882, !dbg !2144
  br i1 %cmp1488, label %if.then1490, label %if.end1494, !dbg !2143

if.then1490:                                      ; preds = %if.then1407
  %arrayidx1491 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2146
  %883 = load i32, i32* %arrayidx1491, align 16, !dbg !2146
  store i32 %883, i32* %bcost, align 4, !dbg !2146
  %884 = load i32, i32* %omx, align 4, !dbg !2146
  %add1492 = add nsw i32 %884, 0, !dbg !2146
  store i32 %add1492, i32* %bmx, align 4, !dbg !2146
  %885 = load i32, i32* %omy, align 4, !dbg !2146
  %add1493 = add nsw i32 %885, -2, !dbg !2146
  store i32 %add1493, i32* %bmy, align 4, !dbg !2146
  br label %if.end1494, !dbg !2146

if.end1494:                                       ; preds = %if.then1490, %if.then1407
  %arrayidx1495 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2148
  %886 = load i32, i32* %arrayidx1495, align 4, !dbg !2148
  %887 = load i32, i32* %bcost, align 4, !dbg !2148
  %cmp1496 = icmp slt i32 %886, %887, !dbg !2148
  br i1 %cmp1496, label %if.then1498, label %if.end1502, !dbg !2143

if.then1498:                                      ; preds = %if.end1494
  %arrayidx1499 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2150
  %888 = load i32, i32* %arrayidx1499, align 4, !dbg !2150
  store i32 %888, i32* %bcost, align 4, !dbg !2150
  %889 = load i32, i32* %omx, align 4, !dbg !2150
  %add1500 = add nsw i32 %889, -1, !dbg !2150
  store i32 %add1500, i32* %bmx, align 4, !dbg !2150
  %890 = load i32, i32* %omy, align 4, !dbg !2150
  %add1501 = add nsw i32 %890, -1, !dbg !2150
  store i32 %add1501, i32* %bmy, align 4, !dbg !2150
  br label %if.end1502, !dbg !2150

if.end1502:                                       ; preds = %if.then1498, %if.end1494
  %arrayidx1503 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2152
  %891 = load i32, i32* %arrayidx1503, align 8, !dbg !2152
  %892 = load i32, i32* %bcost, align 4, !dbg !2152
  %cmp1504 = icmp slt i32 %891, %892, !dbg !2152
  br i1 %cmp1504, label %if.then1506, label %if.end1510, !dbg !2143

if.then1506:                                      ; preds = %if.end1502
  %arrayidx1507 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2154
  %893 = load i32, i32* %arrayidx1507, align 8, !dbg !2154
  store i32 %893, i32* %bcost, align 4, !dbg !2154
  %894 = load i32, i32* %omx, align 4, !dbg !2154
  %add1508 = add nsw i32 %894, 1, !dbg !2154
  store i32 %add1508, i32* %bmx, align 4, !dbg !2154
  %895 = load i32, i32* %omy, align 4, !dbg !2154
  %add1509 = add nsw i32 %895, -1, !dbg !2154
  store i32 %add1509, i32* %bmy, align 4, !dbg !2154
  br label %if.end1510, !dbg !2154

if.end1510:                                       ; preds = %if.then1506, %if.end1502
  %arrayidx1511 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2156
  %896 = load i32, i32* %arrayidx1511, align 4, !dbg !2156
  %897 = load i32, i32* %bcost, align 4, !dbg !2156
  %cmp1512 = icmp slt i32 %896, %897, !dbg !2156
  br i1 %cmp1512, label %if.then1514, label %if.end1518, !dbg !2143

if.then1514:                                      ; preds = %if.end1510
  %arrayidx1515 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2158
  %898 = load i32, i32* %arrayidx1515, align 4, !dbg !2158
  store i32 %898, i32* %bcost, align 4, !dbg !2158
  %899 = load i32, i32* %omx, align 4, !dbg !2158
  %add1516 = add nsw i32 %899, -2, !dbg !2158
  store i32 %add1516, i32* %bmx, align 4, !dbg !2158
  %900 = load i32, i32* %omy, align 4, !dbg !2158
  %add1517 = add nsw i32 %900, 0, !dbg !2158
  store i32 %add1517, i32* %bmy, align 4, !dbg !2158
  br label %if.end1518, !dbg !2158

if.end1518:                                       ; preds = %if.then1514, %if.end1510
  call void @llvm.dbg.declare(metadata i8** %pix_base1519, metadata !2160, metadata !DIExpression()), !dbg !2162
  %901 = load i8*, i8** %p_fref_w, align 8, !dbg !2162
  %902 = load i32, i32* %omx, align 4, !dbg !2162
  %idx.ext1520 = sext i32 %902 to i64, !dbg !2162
  %add.ptr1521 = getelementptr inbounds i8, i8* %901, i64 %idx.ext1520, !dbg !2162
  %903 = load i32, i32* %omy, align 4, !dbg !2162
  %904 = load i32, i32* %stride, align 4, !dbg !2162
  %mul1522 = mul nsw i32 %903, %904, !dbg !2162
  %idx.ext1523 = sext i32 %mul1522 to i64, !dbg !2162
  %add.ptr1524 = getelementptr inbounds i8, i8* %add.ptr1521, i64 %idx.ext1523, !dbg !2162
  store i8* %add.ptr1524, i8** %pix_base1519, align 8, !dbg !2162
  %905 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2162
  %pixf1525 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %905, i32 0, i32 69, !dbg !2162
  %fpelcmp_x41526 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1525, i32 0, i32 9, !dbg !2162
  %906 = load i32, i32* %i_pixel5, align 4, !dbg !2162
  %idxprom1527 = sext i32 %906 to i64, !dbg !2162
  %arrayidx1528 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41526, i64 0, i64 %idxprom1527, !dbg !2162
  %907 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1528, align 8, !dbg !2162
  %908 = load i8*, i8** %p_fenc, align 8, !dbg !2162
  %909 = load i8*, i8** %pix_base1519, align 8, !dbg !2162
  %add.ptr1529 = getelementptr inbounds i8, i8* %909, i64 2, !dbg !2162
  %910 = load i32, i32* %stride, align 4, !dbg !2162
  %mul1530 = mul nsw i32 0, %910, !dbg !2162
  %idx.ext1531 = sext i32 %mul1530 to i64, !dbg !2162
  %add.ptr1532 = getelementptr inbounds i8, i8* %add.ptr1529, i64 %idx.ext1531, !dbg !2162
  %911 = load i8*, i8** %pix_base1519, align 8, !dbg !2162
  %add.ptr1533 = getelementptr inbounds i8, i8* %911, i64 -1, !dbg !2162
  %912 = load i32, i32* %stride, align 4, !dbg !2162
  %mul1534 = mul nsw i32 1, %912, !dbg !2162
  %idx.ext1535 = sext i32 %mul1534 to i64, !dbg !2162
  %add.ptr1536 = getelementptr inbounds i8, i8* %add.ptr1533, i64 %idx.ext1535, !dbg !2162
  %913 = load i8*, i8** %pix_base1519, align 8, !dbg !2162
  %add.ptr1537 = getelementptr inbounds i8, i8* %913, i64 1, !dbg !2162
  %914 = load i32, i32* %stride, align 4, !dbg !2162
  %mul1538 = mul nsw i32 1, %914, !dbg !2162
  %idx.ext1539 = sext i32 %mul1538 to i64, !dbg !2162
  %add.ptr1540 = getelementptr inbounds i8, i8* %add.ptr1537, i64 %idx.ext1539, !dbg !2162
  %915 = load i8*, i8** %pix_base1519, align 8, !dbg !2162
  %add.ptr1541 = getelementptr inbounds i8, i8* %915, i64 0, !dbg !2162
  %916 = load i32, i32* %stride, align 4, !dbg !2162
  %mul1542 = mul nsw i32 2, %916, !dbg !2162
  %idx.ext1543 = sext i32 %mul1542 to i64, !dbg !2162
  %add.ptr1544 = getelementptr inbounds i8, i8* %add.ptr1541, i64 %idx.ext1543, !dbg !2162
  %917 = load i32, i32* %stride, align 4, !dbg !2162
  %arraydecay1545 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2162
  call void %907(i8* %908, i8* %add.ptr1532, i8* %add.ptr1536, i8* %add.ptr1540, i8* %add.ptr1544, i32 %917, i32* %arraydecay1545), !dbg !2162
  %918 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2162
  %919 = load i32, i32* %omx, align 4, !dbg !2162
  %add1546 = add nsw i32 %919, 2, !dbg !2162
  %shl1547 = shl i32 %add1546, 2, !dbg !2162
  %idxprom1548 = sext i32 %shl1547 to i64, !dbg !2162
  %arrayidx1549 = getelementptr inbounds i16, i16* %918, i64 %idxprom1548, !dbg !2162
  %920 = load i16, i16* %arrayidx1549, align 2, !dbg !2162
  %conv1550 = zext i16 %920 to i32, !dbg !2162
  %921 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2162
  %922 = load i32, i32* %omy, align 4, !dbg !2162
  %add1551 = add nsw i32 %922, 0, !dbg !2162
  %shl1552 = shl i32 %add1551, 2, !dbg !2162
  %idxprom1553 = sext i32 %shl1552 to i64, !dbg !2162
  %arrayidx1554 = getelementptr inbounds i16, i16* %921, i64 %idxprom1553, !dbg !2162
  %923 = load i16, i16* %arrayidx1554, align 2, !dbg !2162
  %conv1555 = zext i16 %923 to i32, !dbg !2162
  %add1556 = add nsw i32 %conv1550, %conv1555, !dbg !2162
  %arrayidx1557 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2162
  %924 = load i32, i32* %arrayidx1557, align 16, !dbg !2162
  %add1558 = add nsw i32 %924, %add1556, !dbg !2162
  store i32 %add1558, i32* %arrayidx1557, align 16, !dbg !2162
  %925 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2162
  %926 = load i32, i32* %omx, align 4, !dbg !2162
  %add1559 = add nsw i32 %926, -1, !dbg !2162
  %shl1560 = shl i32 %add1559, 2, !dbg !2162
  %idxprom1561 = sext i32 %shl1560 to i64, !dbg !2162
  %arrayidx1562 = getelementptr inbounds i16, i16* %925, i64 %idxprom1561, !dbg !2162
  %927 = load i16, i16* %arrayidx1562, align 2, !dbg !2162
  %conv1563 = zext i16 %927 to i32, !dbg !2162
  %928 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2162
  %929 = load i32, i32* %omy, align 4, !dbg !2162
  %add1564 = add nsw i32 %929, 1, !dbg !2162
  %shl1565 = shl i32 %add1564, 2, !dbg !2162
  %idxprom1566 = sext i32 %shl1565 to i64, !dbg !2162
  %arrayidx1567 = getelementptr inbounds i16, i16* %928, i64 %idxprom1566, !dbg !2162
  %930 = load i16, i16* %arrayidx1567, align 2, !dbg !2162
  %conv1568 = zext i16 %930 to i32, !dbg !2162
  %add1569 = add nsw i32 %conv1563, %conv1568, !dbg !2162
  %arrayidx1570 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2162
  %931 = load i32, i32* %arrayidx1570, align 4, !dbg !2162
  %add1571 = add nsw i32 %931, %add1569, !dbg !2162
  store i32 %add1571, i32* %arrayidx1570, align 4, !dbg !2162
  %932 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2162
  %933 = load i32, i32* %omx, align 4, !dbg !2162
  %add1572 = add nsw i32 %933, 1, !dbg !2162
  %shl1573 = shl i32 %add1572, 2, !dbg !2162
  %idxprom1574 = sext i32 %shl1573 to i64, !dbg !2162
  %arrayidx1575 = getelementptr inbounds i16, i16* %932, i64 %idxprom1574, !dbg !2162
  %934 = load i16, i16* %arrayidx1575, align 2, !dbg !2162
  %conv1576 = zext i16 %934 to i32, !dbg !2162
  %935 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2162
  %936 = load i32, i32* %omy, align 4, !dbg !2162
  %add1577 = add nsw i32 %936, 1, !dbg !2162
  %shl1578 = shl i32 %add1577, 2, !dbg !2162
  %idxprom1579 = sext i32 %shl1578 to i64, !dbg !2162
  %arrayidx1580 = getelementptr inbounds i16, i16* %935, i64 %idxprom1579, !dbg !2162
  %937 = load i16, i16* %arrayidx1580, align 2, !dbg !2162
  %conv1581 = zext i16 %937 to i32, !dbg !2162
  %add1582 = add nsw i32 %conv1576, %conv1581, !dbg !2162
  %arrayidx1583 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2162
  %938 = load i32, i32* %arrayidx1583, align 8, !dbg !2162
  %add1584 = add nsw i32 %938, %add1582, !dbg !2162
  store i32 %add1584, i32* %arrayidx1583, align 8, !dbg !2162
  %939 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2162
  %940 = load i32, i32* %omx, align 4, !dbg !2162
  %add1585 = add nsw i32 %940, 0, !dbg !2162
  %shl1586 = shl i32 %add1585, 2, !dbg !2162
  %idxprom1587 = sext i32 %shl1586 to i64, !dbg !2162
  %arrayidx1588 = getelementptr inbounds i16, i16* %939, i64 %idxprom1587, !dbg !2162
  %941 = load i16, i16* %arrayidx1588, align 2, !dbg !2162
  %conv1589 = zext i16 %941 to i32, !dbg !2162
  %942 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2162
  %943 = load i32, i32* %omy, align 4, !dbg !2162
  %add1590 = add nsw i32 %943, 2, !dbg !2162
  %shl1591 = shl i32 %add1590, 2, !dbg !2162
  %idxprom1592 = sext i32 %shl1591 to i64, !dbg !2162
  %arrayidx1593 = getelementptr inbounds i16, i16* %942, i64 %idxprom1592, !dbg !2162
  %944 = load i16, i16* %arrayidx1593, align 2, !dbg !2162
  %conv1594 = zext i16 %944 to i32, !dbg !2162
  %add1595 = add nsw i32 %conv1589, %conv1594, !dbg !2162
  %arrayidx1596 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2162
  %945 = load i32, i32* %arrayidx1596, align 4, !dbg !2162
  %add1597 = add nsw i32 %945, %add1595, !dbg !2162
  store i32 %add1597, i32* %arrayidx1596, align 4, !dbg !2162
  %arrayidx1598 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2163
  %946 = load i32, i32* %arrayidx1598, align 16, !dbg !2163
  %947 = load i32, i32* %bcost, align 4, !dbg !2163
  %cmp1599 = icmp slt i32 %946, %947, !dbg !2163
  br i1 %cmp1599, label %if.then1601, label %if.end1605, !dbg !2162

if.then1601:                                      ; preds = %if.end1518
  %arrayidx1602 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2165
  %948 = load i32, i32* %arrayidx1602, align 16, !dbg !2165
  store i32 %948, i32* %bcost, align 4, !dbg !2165
  %949 = load i32, i32* %omx, align 4, !dbg !2165
  %add1603 = add nsw i32 %949, 2, !dbg !2165
  store i32 %add1603, i32* %bmx, align 4, !dbg !2165
  %950 = load i32, i32* %omy, align 4, !dbg !2165
  %add1604 = add nsw i32 %950, 0, !dbg !2165
  store i32 %add1604, i32* %bmy, align 4, !dbg !2165
  br label %if.end1605, !dbg !2165

if.end1605:                                       ; preds = %if.then1601, %if.end1518
  %arrayidx1606 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2167
  %951 = load i32, i32* %arrayidx1606, align 4, !dbg !2167
  %952 = load i32, i32* %bcost, align 4, !dbg !2167
  %cmp1607 = icmp slt i32 %951, %952, !dbg !2167
  br i1 %cmp1607, label %if.then1609, label %if.end1613, !dbg !2162

if.then1609:                                      ; preds = %if.end1605
  %arrayidx1610 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2169
  %953 = load i32, i32* %arrayidx1610, align 4, !dbg !2169
  store i32 %953, i32* %bcost, align 4, !dbg !2169
  %954 = load i32, i32* %omx, align 4, !dbg !2169
  %add1611 = add nsw i32 %954, -1, !dbg !2169
  store i32 %add1611, i32* %bmx, align 4, !dbg !2169
  %955 = load i32, i32* %omy, align 4, !dbg !2169
  %add1612 = add nsw i32 %955, 1, !dbg !2169
  store i32 %add1612, i32* %bmy, align 4, !dbg !2169
  br label %if.end1613, !dbg !2169

if.end1613:                                       ; preds = %if.then1609, %if.end1605
  %arrayidx1614 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2171
  %956 = load i32, i32* %arrayidx1614, align 8, !dbg !2171
  %957 = load i32, i32* %bcost, align 4, !dbg !2171
  %cmp1615 = icmp slt i32 %956, %957, !dbg !2171
  br i1 %cmp1615, label %if.then1617, label %if.end1621, !dbg !2162

if.then1617:                                      ; preds = %if.end1613
  %arrayidx1618 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2173
  %958 = load i32, i32* %arrayidx1618, align 8, !dbg !2173
  store i32 %958, i32* %bcost, align 4, !dbg !2173
  %959 = load i32, i32* %omx, align 4, !dbg !2173
  %add1619 = add nsw i32 %959, 1, !dbg !2173
  store i32 %add1619, i32* %bmx, align 4, !dbg !2173
  %960 = load i32, i32* %omy, align 4, !dbg !2173
  %add1620 = add nsw i32 %960, 1, !dbg !2173
  store i32 %add1620, i32* %bmy, align 4, !dbg !2173
  br label %if.end1621, !dbg !2173

if.end1621:                                       ; preds = %if.then1617, %if.end1613
  %arrayidx1622 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2175
  %961 = load i32, i32* %arrayidx1622, align 4, !dbg !2175
  %962 = load i32, i32* %bcost, align 4, !dbg !2175
  %cmp1623 = icmp slt i32 %961, %962, !dbg !2175
  br i1 %cmp1623, label %if.then1625, label %if.end1629, !dbg !2162

if.then1625:                                      ; preds = %if.end1621
  %arrayidx1626 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2177
  %963 = load i32, i32* %arrayidx1626, align 4, !dbg !2177
  store i32 %963, i32* %bcost, align 4, !dbg !2177
  %964 = load i32, i32* %omx, align 4, !dbg !2177
  %add1627 = add nsw i32 %964, 0, !dbg !2177
  store i32 %add1627, i32* %bmx, align 4, !dbg !2177
  %965 = load i32, i32* %omy, align 4, !dbg !2177
  %add1628 = add nsw i32 %965, 2, !dbg !2177
  store i32 %add1628, i32* %bmy, align 4, !dbg !2177
  br label %if.end1629, !dbg !2177

if.end1629:                                       ; preds = %if.then1625, %if.end1621
  %966 = load i32, i32* %bcost, align 4, !dbg !2179
  %967 = load i32, i32* %ucost1, align 4, !dbg !2181
  %cmp1630 = icmp eq i32 %966, %967, !dbg !2182
  br i1 %cmp1630, label %land.lhs.true1632, label %if.end1640, !dbg !2183

land.lhs.true1632:                                ; preds = %if.end1629
  %968 = load i32, i32* %bcost, align 4, !dbg !2184
  %969 = load i32, i32* %i_pixel5, align 4, !dbg !2184
  %idxprom1633 = sext i32 %969 to i64, !dbg !2184
  %arrayidx1634 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_me_search_ref.x264_pixel_size_shift, i64 0, i64 %idxprom1633, !dbg !2184
  %970 = load i8, i8* %arrayidx1634, align 1, !dbg !2184
  %conv1635 = zext i8 %970 to i32, !dbg !2184
  %shr1636 = ashr i32 500, %conv1635, !dbg !2184
  %cmp1637 = icmp slt i32 %968, %shr1636, !dbg !2184
  br i1 %cmp1637, label %if.then1639, label %if.end1640, !dbg !2185

if.then1639:                                      ; preds = %land.lhs.true1632
  br label %sw.epilog, !dbg !2186

if.end1640:                                       ; preds = %land.lhs.true1632, %if.end1629
  %971 = load i32, i32* %bcost, align 4, !dbg !2187
  %972 = load i32, i32* %ucost2, align 4, !dbg !2189
  %cmp1641 = icmp eq i32 %971, %972, !dbg !2190
  br i1 %cmp1641, label %if.then1643, label %if.end2306, !dbg !2191

if.then1643:                                      ; preds = %if.end1640
  call void @llvm.dbg.declare(metadata i32* %range, metadata !2192, metadata !DIExpression()), !dbg !2194
  %973 = load i32, i32* %i_me_range, align 4, !dbg !2195
  %shr1644 = ashr i32 %973, 1, !dbg !2196
  %or1645 = or i32 %shr1644, 1, !dbg !2197
  store i32 %or1645, i32* %range, align 4, !dbg !2194
  call void @llvm.dbg.declare(metadata i32* %i1646, metadata !2198, metadata !DIExpression()), !dbg !2200
  store i32 3, i32* %i1646, align 4, !dbg !2200
  %974 = load i32, i32* %range, align 4, !dbg !2201
  %975 = load i32, i32* %mv_x_max, align 4, !dbg !2201
  %976 = load i32, i32* %omx, align 4, !dbg !2201
  %sub1647 = sub nsw i32 %975, %976, !dbg !2201
  %977 = load i32, i32* %omx, align 4, !dbg !2201
  %978 = load i32, i32* %mv_x_min, align 4, !dbg !2201
  %sub1648 = sub nsw i32 %977, %978, !dbg !2201
  %cmp1649 = icmp slt i32 %sub1647, %sub1648, !dbg !2201
  br i1 %cmp1649, label %cond.true, label %cond.false, !dbg !2201

cond.true:                                        ; preds = %if.then1643
  %979 = load i32, i32* %mv_x_max, align 4, !dbg !2201
  %980 = load i32, i32* %omx, align 4, !dbg !2201
  %sub1651 = sub nsw i32 %979, %980, !dbg !2201
  br label %cond.end, !dbg !2201

cond.false:                                       ; preds = %if.then1643
  %981 = load i32, i32* %omx, align 4, !dbg !2201
  %982 = load i32, i32* %mv_x_min, align 4, !dbg !2201
  %sub1652 = sub nsw i32 %981, %982, !dbg !2201
  br label %cond.end, !dbg !2201

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub1651, %cond.true ], [ %sub1652, %cond.false ], !dbg !2201
  %cmp1653 = icmp sle i32 %974, %cond, !dbg !2201
  br i1 %cmp1653, label %if.then1655, label %if.end1791, !dbg !2200

if.then1655:                                      ; preds = %cond.end
  br label %for.cond1656, !dbg !2201

for.cond1656:                                     ; preds = %for.inc1788, %if.then1655
  %983 = load i32, i32* %i1646, align 4, !dbg !2203
  %984 = load i32, i32* %range, align 4, !dbg !2203
  %sub1657 = sub nsw i32 %984, 2, !dbg !2203
  %cmp1658 = icmp slt i32 %983, %sub1657, !dbg !2203
  br i1 %cmp1658, label %for.body1660, label %for.end1790, !dbg !2206

for.body1660:                                     ; preds = %for.cond1656
  call void @llvm.dbg.declare(metadata i8** %pix_base1661, metadata !2207, metadata !DIExpression()), !dbg !2209
  %985 = load i8*, i8** %p_fref_w, align 8, !dbg !2209
  %986 = load i32, i32* %omx, align 4, !dbg !2209
  %idx.ext1662 = sext i32 %986 to i64, !dbg !2209
  %add.ptr1663 = getelementptr inbounds i8, i8* %985, i64 %idx.ext1662, !dbg !2209
  %987 = load i32, i32* %omy, align 4, !dbg !2209
  %988 = load i32, i32* %stride, align 4, !dbg !2209
  %mul1664 = mul nsw i32 %987, %988, !dbg !2209
  %idx.ext1665 = sext i32 %mul1664 to i64, !dbg !2209
  %add.ptr1666 = getelementptr inbounds i8, i8* %add.ptr1663, i64 %idx.ext1665, !dbg !2209
  store i8* %add.ptr1666, i8** %pix_base1661, align 8, !dbg !2209
  %989 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2209
  %pixf1667 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %989, i32 0, i32 69, !dbg !2209
  %fpelcmp_x41668 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1667, i32 0, i32 9, !dbg !2209
  %990 = load i32, i32* %i_pixel5, align 4, !dbg !2209
  %idxprom1669 = sext i32 %990 to i64, !dbg !2209
  %arrayidx1670 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41668, i64 0, i64 %idxprom1669, !dbg !2209
  %991 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1670, align 8, !dbg !2209
  %992 = load i8*, i8** %p_fenc, align 8, !dbg !2209
  %993 = load i8*, i8** %pix_base1661, align 8, !dbg !2209
  %994 = load i32, i32* %i1646, align 4, !dbg !2209
  %idx.ext1671 = sext i32 %994 to i64, !dbg !2209
  %add.ptr1672 = getelementptr inbounds i8, i8* %993, i64 %idx.ext1671, !dbg !2209
  %995 = load i32, i32* %stride, align 4, !dbg !2209
  %mul1673 = mul nsw i32 0, %995, !dbg !2209
  %idx.ext1674 = sext i32 %mul1673 to i64, !dbg !2209
  %add.ptr1675 = getelementptr inbounds i8, i8* %add.ptr1672, i64 %idx.ext1674, !dbg !2209
  %996 = load i8*, i8** %pix_base1661, align 8, !dbg !2209
  %997 = load i32, i32* %i1646, align 4, !dbg !2209
  %sub1676 = sub nsw i32 0, %997, !dbg !2209
  %idx.ext1677 = sext i32 %sub1676 to i64, !dbg !2209
  %add.ptr1678 = getelementptr inbounds i8, i8* %996, i64 %idx.ext1677, !dbg !2209
  %998 = load i32, i32* %stride, align 4, !dbg !2209
  %mul1679 = mul nsw i32 0, %998, !dbg !2209
  %idx.ext1680 = sext i32 %mul1679 to i64, !dbg !2209
  %add.ptr1681 = getelementptr inbounds i8, i8* %add.ptr1678, i64 %idx.ext1680, !dbg !2209
  %999 = load i8*, i8** %pix_base1661, align 8, !dbg !2209
  %1000 = load i32, i32* %i1646, align 4, !dbg !2209
  %add1682 = add nsw i32 %1000, 2, !dbg !2209
  %idx.ext1683 = sext i32 %add1682 to i64, !dbg !2209
  %add.ptr1684 = getelementptr inbounds i8, i8* %999, i64 %idx.ext1683, !dbg !2209
  %1001 = load i32, i32* %stride, align 4, !dbg !2209
  %mul1685 = mul nsw i32 0, %1001, !dbg !2209
  %idx.ext1686 = sext i32 %mul1685 to i64, !dbg !2209
  %add.ptr1687 = getelementptr inbounds i8, i8* %add.ptr1684, i64 %idx.ext1686, !dbg !2209
  %1002 = load i8*, i8** %pix_base1661, align 8, !dbg !2209
  %1003 = load i32, i32* %i1646, align 4, !dbg !2209
  %sub1688 = sub nsw i32 0, %1003, !dbg !2209
  %sub1689 = sub nsw i32 %sub1688, 2, !dbg !2209
  %idx.ext1690 = sext i32 %sub1689 to i64, !dbg !2209
  %add.ptr1691 = getelementptr inbounds i8, i8* %1002, i64 %idx.ext1690, !dbg !2209
  %1004 = load i32, i32* %stride, align 4, !dbg !2209
  %mul1692 = mul nsw i32 0, %1004, !dbg !2209
  %idx.ext1693 = sext i32 %mul1692 to i64, !dbg !2209
  %add.ptr1694 = getelementptr inbounds i8, i8* %add.ptr1691, i64 %idx.ext1693, !dbg !2209
  %1005 = load i32, i32* %stride, align 4, !dbg !2209
  %arraydecay1695 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2209
  call void %991(i8* %992, i8* %add.ptr1675, i8* %add.ptr1681, i8* %add.ptr1687, i8* %add.ptr1694, i32 %1005, i32* %arraydecay1695), !dbg !2209
  %1006 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2209
  %1007 = load i32, i32* %omx, align 4, !dbg !2209
  %1008 = load i32, i32* %i1646, align 4, !dbg !2209
  %add1696 = add nsw i32 %1007, %1008, !dbg !2209
  %shl1697 = shl i32 %add1696, 2, !dbg !2209
  %idxprom1698 = sext i32 %shl1697 to i64, !dbg !2209
  %arrayidx1699 = getelementptr inbounds i16, i16* %1006, i64 %idxprom1698, !dbg !2209
  %1009 = load i16, i16* %arrayidx1699, align 2, !dbg !2209
  %conv1700 = zext i16 %1009 to i32, !dbg !2209
  %1010 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2209
  %1011 = load i32, i32* %omy, align 4, !dbg !2209
  %add1701 = add nsw i32 %1011, 0, !dbg !2209
  %shl1702 = shl i32 %add1701, 2, !dbg !2209
  %idxprom1703 = sext i32 %shl1702 to i64, !dbg !2209
  %arrayidx1704 = getelementptr inbounds i16, i16* %1010, i64 %idxprom1703, !dbg !2209
  %1012 = load i16, i16* %arrayidx1704, align 2, !dbg !2209
  %conv1705 = zext i16 %1012 to i32, !dbg !2209
  %add1706 = add nsw i32 %conv1700, %conv1705, !dbg !2209
  %arrayidx1707 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2209
  %1013 = load i32, i32* %arrayidx1707, align 16, !dbg !2209
  %add1708 = add nsw i32 %1013, %add1706, !dbg !2209
  store i32 %add1708, i32* %arrayidx1707, align 16, !dbg !2209
  %1014 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2209
  %1015 = load i32, i32* %omx, align 4, !dbg !2209
  %1016 = load i32, i32* %i1646, align 4, !dbg !2209
  %sub1709 = sub nsw i32 0, %1016, !dbg !2209
  %add1710 = add nsw i32 %1015, %sub1709, !dbg !2209
  %shl1711 = shl i32 %add1710, 2, !dbg !2209
  %idxprom1712 = sext i32 %shl1711 to i64, !dbg !2209
  %arrayidx1713 = getelementptr inbounds i16, i16* %1014, i64 %idxprom1712, !dbg !2209
  %1017 = load i16, i16* %arrayidx1713, align 2, !dbg !2209
  %conv1714 = zext i16 %1017 to i32, !dbg !2209
  %1018 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2209
  %1019 = load i32, i32* %omy, align 4, !dbg !2209
  %add1715 = add nsw i32 %1019, 0, !dbg !2209
  %shl1716 = shl i32 %add1715, 2, !dbg !2209
  %idxprom1717 = sext i32 %shl1716 to i64, !dbg !2209
  %arrayidx1718 = getelementptr inbounds i16, i16* %1018, i64 %idxprom1717, !dbg !2209
  %1020 = load i16, i16* %arrayidx1718, align 2, !dbg !2209
  %conv1719 = zext i16 %1020 to i32, !dbg !2209
  %add1720 = add nsw i32 %conv1714, %conv1719, !dbg !2209
  %arrayidx1721 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2209
  %1021 = load i32, i32* %arrayidx1721, align 4, !dbg !2209
  %add1722 = add nsw i32 %1021, %add1720, !dbg !2209
  store i32 %add1722, i32* %arrayidx1721, align 4, !dbg !2209
  %1022 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2209
  %1023 = load i32, i32* %omx, align 4, !dbg !2209
  %1024 = load i32, i32* %i1646, align 4, !dbg !2209
  %add1723 = add nsw i32 %1024, 2, !dbg !2209
  %add1724 = add nsw i32 %1023, %add1723, !dbg !2209
  %shl1725 = shl i32 %add1724, 2, !dbg !2209
  %idxprom1726 = sext i32 %shl1725 to i64, !dbg !2209
  %arrayidx1727 = getelementptr inbounds i16, i16* %1022, i64 %idxprom1726, !dbg !2209
  %1025 = load i16, i16* %arrayidx1727, align 2, !dbg !2209
  %conv1728 = zext i16 %1025 to i32, !dbg !2209
  %1026 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2209
  %1027 = load i32, i32* %omy, align 4, !dbg !2209
  %add1729 = add nsw i32 %1027, 0, !dbg !2209
  %shl1730 = shl i32 %add1729, 2, !dbg !2209
  %idxprom1731 = sext i32 %shl1730 to i64, !dbg !2209
  %arrayidx1732 = getelementptr inbounds i16, i16* %1026, i64 %idxprom1731, !dbg !2209
  %1028 = load i16, i16* %arrayidx1732, align 2, !dbg !2209
  %conv1733 = zext i16 %1028 to i32, !dbg !2209
  %add1734 = add nsw i32 %conv1728, %conv1733, !dbg !2209
  %arrayidx1735 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2209
  %1029 = load i32, i32* %arrayidx1735, align 8, !dbg !2209
  %add1736 = add nsw i32 %1029, %add1734, !dbg !2209
  store i32 %add1736, i32* %arrayidx1735, align 8, !dbg !2209
  %1030 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2209
  %1031 = load i32, i32* %omx, align 4, !dbg !2209
  %1032 = load i32, i32* %i1646, align 4, !dbg !2209
  %sub1737 = sub nsw i32 0, %1032, !dbg !2209
  %sub1738 = sub nsw i32 %sub1737, 2, !dbg !2209
  %add1739 = add nsw i32 %1031, %sub1738, !dbg !2209
  %shl1740 = shl i32 %add1739, 2, !dbg !2209
  %idxprom1741 = sext i32 %shl1740 to i64, !dbg !2209
  %arrayidx1742 = getelementptr inbounds i16, i16* %1030, i64 %idxprom1741, !dbg !2209
  %1033 = load i16, i16* %arrayidx1742, align 2, !dbg !2209
  %conv1743 = zext i16 %1033 to i32, !dbg !2209
  %1034 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2209
  %1035 = load i32, i32* %omy, align 4, !dbg !2209
  %add1744 = add nsw i32 %1035, 0, !dbg !2209
  %shl1745 = shl i32 %add1744, 2, !dbg !2209
  %idxprom1746 = sext i32 %shl1745 to i64, !dbg !2209
  %arrayidx1747 = getelementptr inbounds i16, i16* %1034, i64 %idxprom1746, !dbg !2209
  %1036 = load i16, i16* %arrayidx1747, align 2, !dbg !2209
  %conv1748 = zext i16 %1036 to i32, !dbg !2209
  %add1749 = add nsw i32 %conv1743, %conv1748, !dbg !2209
  %arrayidx1750 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2209
  %1037 = load i32, i32* %arrayidx1750, align 4, !dbg !2209
  %add1751 = add nsw i32 %1037, %add1749, !dbg !2209
  store i32 %add1751, i32* %arrayidx1750, align 4, !dbg !2209
  %arrayidx1752 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2210
  %1038 = load i32, i32* %arrayidx1752, align 16, !dbg !2210
  %1039 = load i32, i32* %bcost, align 4, !dbg !2210
  %cmp1753 = icmp slt i32 %1038, %1039, !dbg !2210
  br i1 %cmp1753, label %if.then1755, label %if.end1759, !dbg !2209

if.then1755:                                      ; preds = %for.body1660
  %arrayidx1756 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2212
  %1040 = load i32, i32* %arrayidx1756, align 16, !dbg !2212
  store i32 %1040, i32* %bcost, align 4, !dbg !2212
  %1041 = load i32, i32* %omx, align 4, !dbg !2212
  %1042 = load i32, i32* %i1646, align 4, !dbg !2212
  %add1757 = add nsw i32 %1041, %1042, !dbg !2212
  store i32 %add1757, i32* %bmx, align 4, !dbg !2212
  %1043 = load i32, i32* %omy, align 4, !dbg !2212
  %add1758 = add nsw i32 %1043, 0, !dbg !2212
  store i32 %add1758, i32* %bmy, align 4, !dbg !2212
  br label %if.end1759, !dbg !2212

if.end1759:                                       ; preds = %if.then1755, %for.body1660
  %arrayidx1760 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2214
  %1044 = load i32, i32* %arrayidx1760, align 4, !dbg !2214
  %1045 = load i32, i32* %bcost, align 4, !dbg !2214
  %cmp1761 = icmp slt i32 %1044, %1045, !dbg !2214
  br i1 %cmp1761, label %if.then1763, label %if.end1768, !dbg !2209

if.then1763:                                      ; preds = %if.end1759
  %arrayidx1764 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2216
  %1046 = load i32, i32* %arrayidx1764, align 4, !dbg !2216
  store i32 %1046, i32* %bcost, align 4, !dbg !2216
  %1047 = load i32, i32* %omx, align 4, !dbg !2216
  %1048 = load i32, i32* %i1646, align 4, !dbg !2216
  %sub1765 = sub nsw i32 0, %1048, !dbg !2216
  %add1766 = add nsw i32 %1047, %sub1765, !dbg !2216
  store i32 %add1766, i32* %bmx, align 4, !dbg !2216
  %1049 = load i32, i32* %omy, align 4, !dbg !2216
  %add1767 = add nsw i32 %1049, 0, !dbg !2216
  store i32 %add1767, i32* %bmy, align 4, !dbg !2216
  br label %if.end1768, !dbg !2216

if.end1768:                                       ; preds = %if.then1763, %if.end1759
  %arrayidx1769 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2218
  %1050 = load i32, i32* %arrayidx1769, align 8, !dbg !2218
  %1051 = load i32, i32* %bcost, align 4, !dbg !2218
  %cmp1770 = icmp slt i32 %1050, %1051, !dbg !2218
  br i1 %cmp1770, label %if.then1772, label %if.end1777, !dbg !2209

if.then1772:                                      ; preds = %if.end1768
  %arrayidx1773 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2220
  %1052 = load i32, i32* %arrayidx1773, align 8, !dbg !2220
  store i32 %1052, i32* %bcost, align 4, !dbg !2220
  %1053 = load i32, i32* %omx, align 4, !dbg !2220
  %1054 = load i32, i32* %i1646, align 4, !dbg !2220
  %add1774 = add nsw i32 %1054, 2, !dbg !2220
  %add1775 = add nsw i32 %1053, %add1774, !dbg !2220
  store i32 %add1775, i32* %bmx, align 4, !dbg !2220
  %1055 = load i32, i32* %omy, align 4, !dbg !2220
  %add1776 = add nsw i32 %1055, 0, !dbg !2220
  store i32 %add1776, i32* %bmy, align 4, !dbg !2220
  br label %if.end1777, !dbg !2220

if.end1777:                                       ; preds = %if.then1772, %if.end1768
  %arrayidx1778 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2222
  %1056 = load i32, i32* %arrayidx1778, align 4, !dbg !2222
  %1057 = load i32, i32* %bcost, align 4, !dbg !2222
  %cmp1779 = icmp slt i32 %1056, %1057, !dbg !2222
  br i1 %cmp1779, label %if.then1781, label %if.end1787, !dbg !2209

if.then1781:                                      ; preds = %if.end1777
  %arrayidx1782 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2224
  %1058 = load i32, i32* %arrayidx1782, align 4, !dbg !2224
  store i32 %1058, i32* %bcost, align 4, !dbg !2224
  %1059 = load i32, i32* %omx, align 4, !dbg !2224
  %1060 = load i32, i32* %i1646, align 4, !dbg !2224
  %sub1783 = sub nsw i32 0, %1060, !dbg !2224
  %sub1784 = sub nsw i32 %sub1783, 2, !dbg !2224
  %add1785 = add nsw i32 %1059, %sub1784, !dbg !2224
  store i32 %add1785, i32* %bmx, align 4, !dbg !2224
  %1061 = load i32, i32* %omy, align 4, !dbg !2224
  %add1786 = add nsw i32 %1061, 0, !dbg !2224
  store i32 %add1786, i32* %bmy, align 4, !dbg !2224
  br label %if.end1787, !dbg !2224

if.end1787:                                       ; preds = %if.then1781, %if.end1777
  br label %for.inc1788, !dbg !2209

for.inc1788:                                      ; preds = %if.end1787
  %1062 = load i32, i32* %i1646, align 4, !dbg !2203
  %add1789 = add nsw i32 %1062, 4, !dbg !2203
  store i32 %add1789, i32* %i1646, align 4, !dbg !2203
  br label %for.cond1656, !dbg !2203, !llvm.loop !2226

for.end1790:                                      ; preds = %for.cond1656
  br label %if.end1791, !dbg !2206

if.end1791:                                       ; preds = %for.end1790, %cond.end
  br label %for.cond1792, !dbg !2200

for.cond1792:                                     ; preds = %for.inc1860, %if.end1791
  %1063 = load i32, i32* %i1646, align 4, !dbg !2227
  %1064 = load i32, i32* %range, align 4, !dbg !2227
  %cmp1793 = icmp slt i32 %1063, %1064, !dbg !2227
  br i1 %cmp1793, label %for.body1795, label %for.end1862, !dbg !2230

for.body1795:                                     ; preds = %for.cond1792
  %1065 = load i32, i32* %omx, align 4, !dbg !2231
  %1066 = load i32, i32* %i1646, align 4, !dbg !2231
  %add1796 = add nsw i32 %1065, %1066, !dbg !2231
  %1067 = load i32, i32* %mv_x_max, align 4, !dbg !2231
  %cmp1797 = icmp sle i32 %add1796, %1067, !dbg !2231
  br i1 %cmp1797, label %if.then1799, label %if.end1827, !dbg !2234

if.then1799:                                      ; preds = %for.body1795
  call void @llvm.dbg.declare(metadata i32* %cost1800, metadata !2235, metadata !DIExpression()), !dbg !2237
  %1068 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2237
  %pixf1801 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1068, i32 0, i32 69, !dbg !2237
  %fpelcmp1802 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1801, i32 0, i32 7, !dbg !2237
  %1069 = load i32, i32* %i_pixel5, align 4, !dbg !2237
  %idxprom1803 = sext i32 %1069 to i64, !dbg !2237
  %arrayidx1804 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp1802, i64 0, i64 %idxprom1803, !dbg !2237
  %1070 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx1804, align 8, !dbg !2237
  %1071 = load i8*, i8** %p_fenc, align 8, !dbg !2237
  %1072 = load i8*, i8** %p_fref_w, align 8, !dbg !2237
  %1073 = load i32, i32* %omy, align 4, !dbg !2237
  %1074 = load i32, i32* %stride, align 4, !dbg !2237
  %mul1805 = mul nsw i32 %1073, %1074, !dbg !2237
  %1075 = load i32, i32* %omx, align 4, !dbg !2237
  %1076 = load i32, i32* %i1646, align 4, !dbg !2237
  %add1806 = add nsw i32 %1075, %1076, !dbg !2237
  %add1807 = add nsw i32 %mul1805, %add1806, !dbg !2237
  %idxprom1808 = sext i32 %add1807 to i64, !dbg !2237
  %arrayidx1809 = getelementptr inbounds i8, i8* %1072, i64 %idxprom1808, !dbg !2237
  %1077 = load i32, i32* %stride, align 4, !dbg !2237
  %call1810 = call i32 %1070(i8* %1071, i32 16, i8* %arrayidx1809, i32 %1077), !dbg !2237
  %1078 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2237
  %1079 = load i32, i32* %omx, align 4, !dbg !2237
  %1080 = load i32, i32* %i1646, align 4, !dbg !2237
  %add1811 = add nsw i32 %1079, %1080, !dbg !2237
  %shl1812 = shl i32 %add1811, 2, !dbg !2237
  %idxprom1813 = sext i32 %shl1812 to i64, !dbg !2237
  %arrayidx1814 = getelementptr inbounds i16, i16* %1078, i64 %idxprom1813, !dbg !2237
  %1081 = load i16, i16* %arrayidx1814, align 2, !dbg !2237
  %conv1815 = zext i16 %1081 to i32, !dbg !2237
  %1082 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2237
  %1083 = load i32, i32* %omy, align 4, !dbg !2237
  %shl1816 = shl i32 %1083, 2, !dbg !2237
  %idxprom1817 = sext i32 %shl1816 to i64, !dbg !2237
  %arrayidx1818 = getelementptr inbounds i16, i16* %1082, i64 %idxprom1817, !dbg !2237
  %1084 = load i16, i16* %arrayidx1818, align 2, !dbg !2237
  %conv1819 = zext i16 %1084 to i32, !dbg !2237
  %add1820 = add nsw i32 %conv1815, %conv1819, !dbg !2237
  %add1821 = add nsw i32 %call1810, %add1820, !dbg !2237
  store i32 %add1821, i32* %cost1800, align 4, !dbg !2237
  %1085 = load i32, i32* %cost1800, align 4, !dbg !2238
  %1086 = load i32, i32* %bcost, align 4, !dbg !2238
  %cmp1822 = icmp slt i32 %1085, %1086, !dbg !2238
  br i1 %cmp1822, label %if.then1824, label %if.end1826, !dbg !2237

if.then1824:                                      ; preds = %if.then1799
  %1087 = load i32, i32* %cost1800, align 4, !dbg !2240
  store i32 %1087, i32* %bcost, align 4, !dbg !2240
  %1088 = load i32, i32* %omx, align 4, !dbg !2240
  %1089 = load i32, i32* %i1646, align 4, !dbg !2240
  %add1825 = add nsw i32 %1088, %1089, !dbg !2240
  store i32 %add1825, i32* %bmx, align 4, !dbg !2240
  %1090 = load i32, i32* %omy, align 4, !dbg !2240
  store i32 %1090, i32* %bmy, align 4, !dbg !2240
  br label %if.end1826, !dbg !2240

if.end1826:                                       ; preds = %if.then1824, %if.then1799
  br label %if.end1827, !dbg !2237

if.end1827:                                       ; preds = %if.end1826, %for.body1795
  %1091 = load i32, i32* %omx, align 4, !dbg !2242
  %1092 = load i32, i32* %i1646, align 4, !dbg !2242
  %sub1828 = sub nsw i32 %1091, %1092, !dbg !2242
  %1093 = load i32, i32* %mv_x_min, align 4, !dbg !2242
  %cmp1829 = icmp sge i32 %sub1828, %1093, !dbg !2242
  br i1 %cmp1829, label %if.then1831, label %if.end1859, !dbg !2234

if.then1831:                                      ; preds = %if.end1827
  call void @llvm.dbg.declare(metadata i32* %cost1832, metadata !2244, metadata !DIExpression()), !dbg !2246
  %1094 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2246
  %pixf1833 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1094, i32 0, i32 69, !dbg !2246
  %fpelcmp1834 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1833, i32 0, i32 7, !dbg !2246
  %1095 = load i32, i32* %i_pixel5, align 4, !dbg !2246
  %idxprom1835 = sext i32 %1095 to i64, !dbg !2246
  %arrayidx1836 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp1834, i64 0, i64 %idxprom1835, !dbg !2246
  %1096 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx1836, align 8, !dbg !2246
  %1097 = load i8*, i8** %p_fenc, align 8, !dbg !2246
  %1098 = load i8*, i8** %p_fref_w, align 8, !dbg !2246
  %1099 = load i32, i32* %omy, align 4, !dbg !2246
  %1100 = load i32, i32* %stride, align 4, !dbg !2246
  %mul1837 = mul nsw i32 %1099, %1100, !dbg !2246
  %1101 = load i32, i32* %omx, align 4, !dbg !2246
  %1102 = load i32, i32* %i1646, align 4, !dbg !2246
  %sub1838 = sub nsw i32 %1101, %1102, !dbg !2246
  %add1839 = add nsw i32 %mul1837, %sub1838, !dbg !2246
  %idxprom1840 = sext i32 %add1839 to i64, !dbg !2246
  %arrayidx1841 = getelementptr inbounds i8, i8* %1098, i64 %idxprom1840, !dbg !2246
  %1103 = load i32, i32* %stride, align 4, !dbg !2246
  %call1842 = call i32 %1096(i8* %1097, i32 16, i8* %arrayidx1841, i32 %1103), !dbg !2246
  %1104 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2246
  %1105 = load i32, i32* %omx, align 4, !dbg !2246
  %1106 = load i32, i32* %i1646, align 4, !dbg !2246
  %sub1843 = sub nsw i32 %1105, %1106, !dbg !2246
  %shl1844 = shl i32 %sub1843, 2, !dbg !2246
  %idxprom1845 = sext i32 %shl1844 to i64, !dbg !2246
  %arrayidx1846 = getelementptr inbounds i16, i16* %1104, i64 %idxprom1845, !dbg !2246
  %1107 = load i16, i16* %arrayidx1846, align 2, !dbg !2246
  %conv1847 = zext i16 %1107 to i32, !dbg !2246
  %1108 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2246
  %1109 = load i32, i32* %omy, align 4, !dbg !2246
  %shl1848 = shl i32 %1109, 2, !dbg !2246
  %idxprom1849 = sext i32 %shl1848 to i64, !dbg !2246
  %arrayidx1850 = getelementptr inbounds i16, i16* %1108, i64 %idxprom1849, !dbg !2246
  %1110 = load i16, i16* %arrayidx1850, align 2, !dbg !2246
  %conv1851 = zext i16 %1110 to i32, !dbg !2246
  %add1852 = add nsw i32 %conv1847, %conv1851, !dbg !2246
  %add1853 = add nsw i32 %call1842, %add1852, !dbg !2246
  store i32 %add1853, i32* %cost1832, align 4, !dbg !2246
  %1111 = load i32, i32* %cost1832, align 4, !dbg !2247
  %1112 = load i32, i32* %bcost, align 4, !dbg !2247
  %cmp1854 = icmp slt i32 %1111, %1112, !dbg !2247
  br i1 %cmp1854, label %if.then1856, label %if.end1858, !dbg !2246

if.then1856:                                      ; preds = %if.then1831
  %1113 = load i32, i32* %cost1832, align 4, !dbg !2249
  store i32 %1113, i32* %bcost, align 4, !dbg !2249
  %1114 = load i32, i32* %omx, align 4, !dbg !2249
  %1115 = load i32, i32* %i1646, align 4, !dbg !2249
  %sub1857 = sub nsw i32 %1114, %1115, !dbg !2249
  store i32 %sub1857, i32* %bmx, align 4, !dbg !2249
  %1116 = load i32, i32* %omy, align 4, !dbg !2249
  store i32 %1116, i32* %bmy, align 4, !dbg !2249
  br label %if.end1858, !dbg !2249

if.end1858:                                       ; preds = %if.then1856, %if.then1831
  br label %if.end1859, !dbg !2246

if.end1859:                                       ; preds = %if.end1858, %if.end1827
  br label %for.inc1860, !dbg !2234

for.inc1860:                                      ; preds = %if.end1859
  %1117 = load i32, i32* %i1646, align 4, !dbg !2227
  %add1861 = add nsw i32 %1117, 2, !dbg !2227
  store i32 %add1861, i32* %i1646, align 4, !dbg !2227
  br label %for.cond1792, !dbg !2227, !llvm.loop !2251

for.end1862:                                      ; preds = %for.cond1792
  store i32 3, i32* %i1646, align 4, !dbg !2200
  %1118 = load i32, i32* %range, align 4, !dbg !2252
  %1119 = load i32, i32* %mv_y_max, align 4, !dbg !2252
  %1120 = load i32, i32* %omy, align 4, !dbg !2252
  %sub1863 = sub nsw i32 %1119, %1120, !dbg !2252
  %1121 = load i32, i32* %omy, align 4, !dbg !2252
  %1122 = load i32, i32* %mv_y_min, align 4, !dbg !2252
  %sub1864 = sub nsw i32 %1121, %1122, !dbg !2252
  %cmp1865 = icmp slt i32 %sub1863, %sub1864, !dbg !2252
  br i1 %cmp1865, label %cond.true1867, label %cond.false1869, !dbg !2252

cond.true1867:                                    ; preds = %for.end1862
  %1123 = load i32, i32* %mv_y_max, align 4, !dbg !2252
  %1124 = load i32, i32* %omy, align 4, !dbg !2252
  %sub1868 = sub nsw i32 %1123, %1124, !dbg !2252
  br label %cond.end1871, !dbg !2252

cond.false1869:                                   ; preds = %for.end1862
  %1125 = load i32, i32* %omy, align 4, !dbg !2252
  %1126 = load i32, i32* %mv_y_min, align 4, !dbg !2252
  %sub1870 = sub nsw i32 %1125, %1126, !dbg !2252
  br label %cond.end1871, !dbg !2252

cond.end1871:                                     ; preds = %cond.false1869, %cond.true1867
  %cond1872 = phi i32 [ %sub1868, %cond.true1867 ], [ %sub1870, %cond.false1869 ], !dbg !2252
  %cmp1873 = icmp sle i32 %1118, %cond1872, !dbg !2252
  br i1 %cmp1873, label %if.then1875, label %if.end2007, !dbg !2200

if.then1875:                                      ; preds = %cond.end1871
  br label %for.cond1876, !dbg !2252

for.cond1876:                                     ; preds = %for.inc2004, %if.then1875
  %1127 = load i32, i32* %i1646, align 4, !dbg !2254
  %1128 = load i32, i32* %range, align 4, !dbg !2254
  %sub1877 = sub nsw i32 %1128, 2, !dbg !2254
  %cmp1878 = icmp slt i32 %1127, %sub1877, !dbg !2254
  br i1 %cmp1878, label %for.body1880, label %for.end2006, !dbg !2257

for.body1880:                                     ; preds = %for.cond1876
  call void @llvm.dbg.declare(metadata i8** %pix_base1881, metadata !2258, metadata !DIExpression()), !dbg !2260
  %1129 = load i8*, i8** %p_fref_w, align 8, !dbg !2260
  %1130 = load i32, i32* %omx, align 4, !dbg !2260
  %idx.ext1882 = sext i32 %1130 to i64, !dbg !2260
  %add.ptr1883 = getelementptr inbounds i8, i8* %1129, i64 %idx.ext1882, !dbg !2260
  %1131 = load i32, i32* %omy, align 4, !dbg !2260
  %1132 = load i32, i32* %stride, align 4, !dbg !2260
  %mul1884 = mul nsw i32 %1131, %1132, !dbg !2260
  %idx.ext1885 = sext i32 %mul1884 to i64, !dbg !2260
  %add.ptr1886 = getelementptr inbounds i8, i8* %add.ptr1883, i64 %idx.ext1885, !dbg !2260
  store i8* %add.ptr1886, i8** %pix_base1881, align 8, !dbg !2260
  %1133 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2260
  %pixf1887 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1133, i32 0, i32 69, !dbg !2260
  %fpelcmp_x41888 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1887, i32 0, i32 9, !dbg !2260
  %1134 = load i32, i32* %i_pixel5, align 4, !dbg !2260
  %idxprom1889 = sext i32 %1134 to i64, !dbg !2260
  %arrayidx1890 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41888, i64 0, i64 %idxprom1889, !dbg !2260
  %1135 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1890, align 8, !dbg !2260
  %1136 = load i8*, i8** %p_fenc, align 8, !dbg !2260
  %1137 = load i8*, i8** %pix_base1881, align 8, !dbg !2260
  %add.ptr1891 = getelementptr inbounds i8, i8* %1137, i64 0, !dbg !2260
  %1138 = load i32, i32* %i1646, align 4, !dbg !2260
  %1139 = load i32, i32* %stride, align 4, !dbg !2260
  %mul1892 = mul nsw i32 %1138, %1139, !dbg !2260
  %idx.ext1893 = sext i32 %mul1892 to i64, !dbg !2260
  %add.ptr1894 = getelementptr inbounds i8, i8* %add.ptr1891, i64 %idx.ext1893, !dbg !2260
  %1140 = load i8*, i8** %pix_base1881, align 8, !dbg !2260
  %add.ptr1895 = getelementptr inbounds i8, i8* %1140, i64 0, !dbg !2260
  %1141 = load i32, i32* %i1646, align 4, !dbg !2260
  %sub1896 = sub nsw i32 0, %1141, !dbg !2260
  %1142 = load i32, i32* %stride, align 4, !dbg !2260
  %mul1897 = mul nsw i32 %sub1896, %1142, !dbg !2260
  %idx.ext1898 = sext i32 %mul1897 to i64, !dbg !2260
  %add.ptr1899 = getelementptr inbounds i8, i8* %add.ptr1895, i64 %idx.ext1898, !dbg !2260
  %1143 = load i8*, i8** %pix_base1881, align 8, !dbg !2260
  %add.ptr1900 = getelementptr inbounds i8, i8* %1143, i64 0, !dbg !2260
  %1144 = load i32, i32* %i1646, align 4, !dbg !2260
  %add1901 = add nsw i32 %1144, 2, !dbg !2260
  %1145 = load i32, i32* %stride, align 4, !dbg !2260
  %mul1902 = mul nsw i32 %add1901, %1145, !dbg !2260
  %idx.ext1903 = sext i32 %mul1902 to i64, !dbg !2260
  %add.ptr1904 = getelementptr inbounds i8, i8* %add.ptr1900, i64 %idx.ext1903, !dbg !2260
  %1146 = load i8*, i8** %pix_base1881, align 8, !dbg !2260
  %add.ptr1905 = getelementptr inbounds i8, i8* %1146, i64 0, !dbg !2260
  %1147 = load i32, i32* %i1646, align 4, !dbg !2260
  %sub1906 = sub nsw i32 0, %1147, !dbg !2260
  %sub1907 = sub nsw i32 %sub1906, 2, !dbg !2260
  %1148 = load i32, i32* %stride, align 4, !dbg !2260
  %mul1908 = mul nsw i32 %sub1907, %1148, !dbg !2260
  %idx.ext1909 = sext i32 %mul1908 to i64, !dbg !2260
  %add.ptr1910 = getelementptr inbounds i8, i8* %add.ptr1905, i64 %idx.ext1909, !dbg !2260
  %1149 = load i32, i32* %stride, align 4, !dbg !2260
  %arraydecay1911 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2260
  call void %1135(i8* %1136, i8* %add.ptr1894, i8* %add.ptr1899, i8* %add.ptr1904, i8* %add.ptr1910, i32 %1149, i32* %arraydecay1911), !dbg !2260
  %1150 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2260
  %1151 = load i32, i32* %omx, align 4, !dbg !2260
  %add1912 = add nsw i32 %1151, 0, !dbg !2260
  %shl1913 = shl i32 %add1912, 2, !dbg !2260
  %idxprom1914 = sext i32 %shl1913 to i64, !dbg !2260
  %arrayidx1915 = getelementptr inbounds i16, i16* %1150, i64 %idxprom1914, !dbg !2260
  %1152 = load i16, i16* %arrayidx1915, align 2, !dbg !2260
  %conv1916 = zext i16 %1152 to i32, !dbg !2260
  %1153 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2260
  %1154 = load i32, i32* %omy, align 4, !dbg !2260
  %1155 = load i32, i32* %i1646, align 4, !dbg !2260
  %add1917 = add nsw i32 %1154, %1155, !dbg !2260
  %shl1918 = shl i32 %add1917, 2, !dbg !2260
  %idxprom1919 = sext i32 %shl1918 to i64, !dbg !2260
  %arrayidx1920 = getelementptr inbounds i16, i16* %1153, i64 %idxprom1919, !dbg !2260
  %1156 = load i16, i16* %arrayidx1920, align 2, !dbg !2260
  %conv1921 = zext i16 %1156 to i32, !dbg !2260
  %add1922 = add nsw i32 %conv1916, %conv1921, !dbg !2260
  %arrayidx1923 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2260
  %1157 = load i32, i32* %arrayidx1923, align 16, !dbg !2260
  %add1924 = add nsw i32 %1157, %add1922, !dbg !2260
  store i32 %add1924, i32* %arrayidx1923, align 16, !dbg !2260
  %1158 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2260
  %1159 = load i32, i32* %omx, align 4, !dbg !2260
  %add1925 = add nsw i32 %1159, 0, !dbg !2260
  %shl1926 = shl i32 %add1925, 2, !dbg !2260
  %idxprom1927 = sext i32 %shl1926 to i64, !dbg !2260
  %arrayidx1928 = getelementptr inbounds i16, i16* %1158, i64 %idxprom1927, !dbg !2260
  %1160 = load i16, i16* %arrayidx1928, align 2, !dbg !2260
  %conv1929 = zext i16 %1160 to i32, !dbg !2260
  %1161 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2260
  %1162 = load i32, i32* %omy, align 4, !dbg !2260
  %1163 = load i32, i32* %i1646, align 4, !dbg !2260
  %sub1930 = sub nsw i32 0, %1163, !dbg !2260
  %add1931 = add nsw i32 %1162, %sub1930, !dbg !2260
  %shl1932 = shl i32 %add1931, 2, !dbg !2260
  %idxprom1933 = sext i32 %shl1932 to i64, !dbg !2260
  %arrayidx1934 = getelementptr inbounds i16, i16* %1161, i64 %idxprom1933, !dbg !2260
  %1164 = load i16, i16* %arrayidx1934, align 2, !dbg !2260
  %conv1935 = zext i16 %1164 to i32, !dbg !2260
  %add1936 = add nsw i32 %conv1929, %conv1935, !dbg !2260
  %arrayidx1937 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2260
  %1165 = load i32, i32* %arrayidx1937, align 4, !dbg !2260
  %add1938 = add nsw i32 %1165, %add1936, !dbg !2260
  store i32 %add1938, i32* %arrayidx1937, align 4, !dbg !2260
  %1166 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2260
  %1167 = load i32, i32* %omx, align 4, !dbg !2260
  %add1939 = add nsw i32 %1167, 0, !dbg !2260
  %shl1940 = shl i32 %add1939, 2, !dbg !2260
  %idxprom1941 = sext i32 %shl1940 to i64, !dbg !2260
  %arrayidx1942 = getelementptr inbounds i16, i16* %1166, i64 %idxprom1941, !dbg !2260
  %1168 = load i16, i16* %arrayidx1942, align 2, !dbg !2260
  %conv1943 = zext i16 %1168 to i32, !dbg !2260
  %1169 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2260
  %1170 = load i32, i32* %omy, align 4, !dbg !2260
  %1171 = load i32, i32* %i1646, align 4, !dbg !2260
  %add1944 = add nsw i32 %1171, 2, !dbg !2260
  %add1945 = add nsw i32 %1170, %add1944, !dbg !2260
  %shl1946 = shl i32 %add1945, 2, !dbg !2260
  %idxprom1947 = sext i32 %shl1946 to i64, !dbg !2260
  %arrayidx1948 = getelementptr inbounds i16, i16* %1169, i64 %idxprom1947, !dbg !2260
  %1172 = load i16, i16* %arrayidx1948, align 2, !dbg !2260
  %conv1949 = zext i16 %1172 to i32, !dbg !2260
  %add1950 = add nsw i32 %conv1943, %conv1949, !dbg !2260
  %arrayidx1951 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2260
  %1173 = load i32, i32* %arrayidx1951, align 8, !dbg !2260
  %add1952 = add nsw i32 %1173, %add1950, !dbg !2260
  store i32 %add1952, i32* %arrayidx1951, align 8, !dbg !2260
  %1174 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2260
  %1175 = load i32, i32* %omx, align 4, !dbg !2260
  %add1953 = add nsw i32 %1175, 0, !dbg !2260
  %shl1954 = shl i32 %add1953, 2, !dbg !2260
  %idxprom1955 = sext i32 %shl1954 to i64, !dbg !2260
  %arrayidx1956 = getelementptr inbounds i16, i16* %1174, i64 %idxprom1955, !dbg !2260
  %1176 = load i16, i16* %arrayidx1956, align 2, !dbg !2260
  %conv1957 = zext i16 %1176 to i32, !dbg !2260
  %1177 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2260
  %1178 = load i32, i32* %omy, align 4, !dbg !2260
  %1179 = load i32, i32* %i1646, align 4, !dbg !2260
  %sub1958 = sub nsw i32 0, %1179, !dbg !2260
  %sub1959 = sub nsw i32 %sub1958, 2, !dbg !2260
  %add1960 = add nsw i32 %1178, %sub1959, !dbg !2260
  %shl1961 = shl i32 %add1960, 2, !dbg !2260
  %idxprom1962 = sext i32 %shl1961 to i64, !dbg !2260
  %arrayidx1963 = getelementptr inbounds i16, i16* %1177, i64 %idxprom1962, !dbg !2260
  %1180 = load i16, i16* %arrayidx1963, align 2, !dbg !2260
  %conv1964 = zext i16 %1180 to i32, !dbg !2260
  %add1965 = add nsw i32 %conv1957, %conv1964, !dbg !2260
  %arrayidx1966 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2260
  %1181 = load i32, i32* %arrayidx1966, align 4, !dbg !2260
  %add1967 = add nsw i32 %1181, %add1965, !dbg !2260
  store i32 %add1967, i32* %arrayidx1966, align 4, !dbg !2260
  %arrayidx1968 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2261
  %1182 = load i32, i32* %arrayidx1968, align 16, !dbg !2261
  %1183 = load i32, i32* %bcost, align 4, !dbg !2261
  %cmp1969 = icmp slt i32 %1182, %1183, !dbg !2261
  br i1 %cmp1969, label %if.then1971, label %if.end1975, !dbg !2260

if.then1971:                                      ; preds = %for.body1880
  %arrayidx1972 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2263
  %1184 = load i32, i32* %arrayidx1972, align 16, !dbg !2263
  store i32 %1184, i32* %bcost, align 4, !dbg !2263
  %1185 = load i32, i32* %omx, align 4, !dbg !2263
  %add1973 = add nsw i32 %1185, 0, !dbg !2263
  store i32 %add1973, i32* %bmx, align 4, !dbg !2263
  %1186 = load i32, i32* %omy, align 4, !dbg !2263
  %1187 = load i32, i32* %i1646, align 4, !dbg !2263
  %add1974 = add nsw i32 %1186, %1187, !dbg !2263
  store i32 %add1974, i32* %bmy, align 4, !dbg !2263
  br label %if.end1975, !dbg !2263

if.end1975:                                       ; preds = %if.then1971, %for.body1880
  %arrayidx1976 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2265
  %1188 = load i32, i32* %arrayidx1976, align 4, !dbg !2265
  %1189 = load i32, i32* %bcost, align 4, !dbg !2265
  %cmp1977 = icmp slt i32 %1188, %1189, !dbg !2265
  br i1 %cmp1977, label %if.then1979, label %if.end1984, !dbg !2260

if.then1979:                                      ; preds = %if.end1975
  %arrayidx1980 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2267
  %1190 = load i32, i32* %arrayidx1980, align 4, !dbg !2267
  store i32 %1190, i32* %bcost, align 4, !dbg !2267
  %1191 = load i32, i32* %omx, align 4, !dbg !2267
  %add1981 = add nsw i32 %1191, 0, !dbg !2267
  store i32 %add1981, i32* %bmx, align 4, !dbg !2267
  %1192 = load i32, i32* %omy, align 4, !dbg !2267
  %1193 = load i32, i32* %i1646, align 4, !dbg !2267
  %sub1982 = sub nsw i32 0, %1193, !dbg !2267
  %add1983 = add nsw i32 %1192, %sub1982, !dbg !2267
  store i32 %add1983, i32* %bmy, align 4, !dbg !2267
  br label %if.end1984, !dbg !2267

if.end1984:                                       ; preds = %if.then1979, %if.end1975
  %arrayidx1985 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2269
  %1194 = load i32, i32* %arrayidx1985, align 8, !dbg !2269
  %1195 = load i32, i32* %bcost, align 4, !dbg !2269
  %cmp1986 = icmp slt i32 %1194, %1195, !dbg !2269
  br i1 %cmp1986, label %if.then1988, label %if.end1993, !dbg !2260

if.then1988:                                      ; preds = %if.end1984
  %arrayidx1989 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2271
  %1196 = load i32, i32* %arrayidx1989, align 8, !dbg !2271
  store i32 %1196, i32* %bcost, align 4, !dbg !2271
  %1197 = load i32, i32* %omx, align 4, !dbg !2271
  %add1990 = add nsw i32 %1197, 0, !dbg !2271
  store i32 %add1990, i32* %bmx, align 4, !dbg !2271
  %1198 = load i32, i32* %omy, align 4, !dbg !2271
  %1199 = load i32, i32* %i1646, align 4, !dbg !2271
  %add1991 = add nsw i32 %1199, 2, !dbg !2271
  %add1992 = add nsw i32 %1198, %add1991, !dbg !2271
  store i32 %add1992, i32* %bmy, align 4, !dbg !2271
  br label %if.end1993, !dbg !2271

if.end1993:                                       ; preds = %if.then1988, %if.end1984
  %arrayidx1994 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2273
  %1200 = load i32, i32* %arrayidx1994, align 4, !dbg !2273
  %1201 = load i32, i32* %bcost, align 4, !dbg !2273
  %cmp1995 = icmp slt i32 %1200, %1201, !dbg !2273
  br i1 %cmp1995, label %if.then1997, label %if.end2003, !dbg !2260

if.then1997:                                      ; preds = %if.end1993
  %arrayidx1998 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2275
  %1202 = load i32, i32* %arrayidx1998, align 4, !dbg !2275
  store i32 %1202, i32* %bcost, align 4, !dbg !2275
  %1203 = load i32, i32* %omx, align 4, !dbg !2275
  %add1999 = add nsw i32 %1203, 0, !dbg !2275
  store i32 %add1999, i32* %bmx, align 4, !dbg !2275
  %1204 = load i32, i32* %omy, align 4, !dbg !2275
  %1205 = load i32, i32* %i1646, align 4, !dbg !2275
  %sub2000 = sub nsw i32 0, %1205, !dbg !2275
  %sub2001 = sub nsw i32 %sub2000, 2, !dbg !2275
  %add2002 = add nsw i32 %1204, %sub2001, !dbg !2275
  store i32 %add2002, i32* %bmy, align 4, !dbg !2275
  br label %if.end2003, !dbg !2275

if.end2003:                                       ; preds = %if.then1997, %if.end1993
  br label %for.inc2004, !dbg !2260

for.inc2004:                                      ; preds = %if.end2003
  %1206 = load i32, i32* %i1646, align 4, !dbg !2254
  %add2005 = add nsw i32 %1206, 4, !dbg !2254
  store i32 %add2005, i32* %i1646, align 4, !dbg !2254
  br label %for.cond1876, !dbg !2254, !llvm.loop !2277

for.end2006:                                      ; preds = %for.cond1876
  br label %if.end2007, !dbg !2257

if.end2007:                                       ; preds = %for.end2006, %cond.end1871
  br label %for.cond2008, !dbg !2200

for.cond2008:                                     ; preds = %for.inc2076, %if.end2007
  %1207 = load i32, i32* %i1646, align 4, !dbg !2278
  %1208 = load i32, i32* %range, align 4, !dbg !2278
  %cmp2009 = icmp slt i32 %1207, %1208, !dbg !2278
  br i1 %cmp2009, label %for.body2011, label %for.end2078, !dbg !2281

for.body2011:                                     ; preds = %for.cond2008
  %1209 = load i32, i32* %omy, align 4, !dbg !2282
  %1210 = load i32, i32* %i1646, align 4, !dbg !2282
  %add2012 = add nsw i32 %1209, %1210, !dbg !2282
  %1211 = load i32, i32* %mv_y_max, align 4, !dbg !2282
  %cmp2013 = icmp sle i32 %add2012, %1211, !dbg !2282
  br i1 %cmp2013, label %if.then2015, label %if.end2043, !dbg !2285

if.then2015:                                      ; preds = %for.body2011
  call void @llvm.dbg.declare(metadata i32* %cost2016, metadata !2286, metadata !DIExpression()), !dbg !2288
  %1212 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2288
  %pixf2017 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1212, i32 0, i32 69, !dbg !2288
  %fpelcmp2018 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2017, i32 0, i32 7, !dbg !2288
  %1213 = load i32, i32* %i_pixel5, align 4, !dbg !2288
  %idxprom2019 = sext i32 %1213 to i64, !dbg !2288
  %arrayidx2020 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2018, i64 0, i64 %idxprom2019, !dbg !2288
  %1214 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2020, align 8, !dbg !2288
  %1215 = load i8*, i8** %p_fenc, align 8, !dbg !2288
  %1216 = load i8*, i8** %p_fref_w, align 8, !dbg !2288
  %1217 = load i32, i32* %omy, align 4, !dbg !2288
  %1218 = load i32, i32* %i1646, align 4, !dbg !2288
  %add2021 = add nsw i32 %1217, %1218, !dbg !2288
  %1219 = load i32, i32* %stride, align 4, !dbg !2288
  %mul2022 = mul nsw i32 %add2021, %1219, !dbg !2288
  %1220 = load i32, i32* %omx, align 4, !dbg !2288
  %add2023 = add nsw i32 %mul2022, %1220, !dbg !2288
  %idxprom2024 = sext i32 %add2023 to i64, !dbg !2288
  %arrayidx2025 = getelementptr inbounds i8, i8* %1216, i64 %idxprom2024, !dbg !2288
  %1221 = load i32, i32* %stride, align 4, !dbg !2288
  %call2026 = call i32 %1214(i8* %1215, i32 16, i8* %arrayidx2025, i32 %1221), !dbg !2288
  %1222 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2288
  %1223 = load i32, i32* %omx, align 4, !dbg !2288
  %shl2027 = shl i32 %1223, 2, !dbg !2288
  %idxprom2028 = sext i32 %shl2027 to i64, !dbg !2288
  %arrayidx2029 = getelementptr inbounds i16, i16* %1222, i64 %idxprom2028, !dbg !2288
  %1224 = load i16, i16* %arrayidx2029, align 2, !dbg !2288
  %conv2030 = zext i16 %1224 to i32, !dbg !2288
  %1225 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2288
  %1226 = load i32, i32* %omy, align 4, !dbg !2288
  %1227 = load i32, i32* %i1646, align 4, !dbg !2288
  %add2031 = add nsw i32 %1226, %1227, !dbg !2288
  %shl2032 = shl i32 %add2031, 2, !dbg !2288
  %idxprom2033 = sext i32 %shl2032 to i64, !dbg !2288
  %arrayidx2034 = getelementptr inbounds i16, i16* %1225, i64 %idxprom2033, !dbg !2288
  %1228 = load i16, i16* %arrayidx2034, align 2, !dbg !2288
  %conv2035 = zext i16 %1228 to i32, !dbg !2288
  %add2036 = add nsw i32 %conv2030, %conv2035, !dbg !2288
  %add2037 = add nsw i32 %call2026, %add2036, !dbg !2288
  store i32 %add2037, i32* %cost2016, align 4, !dbg !2288
  %1229 = load i32, i32* %cost2016, align 4, !dbg !2289
  %1230 = load i32, i32* %bcost, align 4, !dbg !2289
  %cmp2038 = icmp slt i32 %1229, %1230, !dbg !2289
  br i1 %cmp2038, label %if.then2040, label %if.end2042, !dbg !2288

if.then2040:                                      ; preds = %if.then2015
  %1231 = load i32, i32* %cost2016, align 4, !dbg !2291
  store i32 %1231, i32* %bcost, align 4, !dbg !2291
  %1232 = load i32, i32* %omx, align 4, !dbg !2291
  store i32 %1232, i32* %bmx, align 4, !dbg !2291
  %1233 = load i32, i32* %omy, align 4, !dbg !2291
  %1234 = load i32, i32* %i1646, align 4, !dbg !2291
  %add2041 = add nsw i32 %1233, %1234, !dbg !2291
  store i32 %add2041, i32* %bmy, align 4, !dbg !2291
  br label %if.end2042, !dbg !2291

if.end2042:                                       ; preds = %if.then2040, %if.then2015
  br label %if.end2043, !dbg !2288

if.end2043:                                       ; preds = %if.end2042, %for.body2011
  %1235 = load i32, i32* %omy, align 4, !dbg !2293
  %1236 = load i32, i32* %i1646, align 4, !dbg !2293
  %sub2044 = sub nsw i32 %1235, %1236, !dbg !2293
  %1237 = load i32, i32* %mv_y_min, align 4, !dbg !2293
  %cmp2045 = icmp sge i32 %sub2044, %1237, !dbg !2293
  br i1 %cmp2045, label %if.then2047, label %if.end2075, !dbg !2285

if.then2047:                                      ; preds = %if.end2043
  call void @llvm.dbg.declare(metadata i32* %cost2048, metadata !2295, metadata !DIExpression()), !dbg !2297
  %1238 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2297
  %pixf2049 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1238, i32 0, i32 69, !dbg !2297
  %fpelcmp2050 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2049, i32 0, i32 7, !dbg !2297
  %1239 = load i32, i32* %i_pixel5, align 4, !dbg !2297
  %idxprom2051 = sext i32 %1239 to i64, !dbg !2297
  %arrayidx2052 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2050, i64 0, i64 %idxprom2051, !dbg !2297
  %1240 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2052, align 8, !dbg !2297
  %1241 = load i8*, i8** %p_fenc, align 8, !dbg !2297
  %1242 = load i8*, i8** %p_fref_w, align 8, !dbg !2297
  %1243 = load i32, i32* %omy, align 4, !dbg !2297
  %1244 = load i32, i32* %i1646, align 4, !dbg !2297
  %sub2053 = sub nsw i32 %1243, %1244, !dbg !2297
  %1245 = load i32, i32* %stride, align 4, !dbg !2297
  %mul2054 = mul nsw i32 %sub2053, %1245, !dbg !2297
  %1246 = load i32, i32* %omx, align 4, !dbg !2297
  %add2055 = add nsw i32 %mul2054, %1246, !dbg !2297
  %idxprom2056 = sext i32 %add2055 to i64, !dbg !2297
  %arrayidx2057 = getelementptr inbounds i8, i8* %1242, i64 %idxprom2056, !dbg !2297
  %1247 = load i32, i32* %stride, align 4, !dbg !2297
  %call2058 = call i32 %1240(i8* %1241, i32 16, i8* %arrayidx2057, i32 %1247), !dbg !2297
  %1248 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2297
  %1249 = load i32, i32* %omx, align 4, !dbg !2297
  %shl2059 = shl i32 %1249, 2, !dbg !2297
  %idxprom2060 = sext i32 %shl2059 to i64, !dbg !2297
  %arrayidx2061 = getelementptr inbounds i16, i16* %1248, i64 %idxprom2060, !dbg !2297
  %1250 = load i16, i16* %arrayidx2061, align 2, !dbg !2297
  %conv2062 = zext i16 %1250 to i32, !dbg !2297
  %1251 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2297
  %1252 = load i32, i32* %omy, align 4, !dbg !2297
  %1253 = load i32, i32* %i1646, align 4, !dbg !2297
  %sub2063 = sub nsw i32 %1252, %1253, !dbg !2297
  %shl2064 = shl i32 %sub2063, 2, !dbg !2297
  %idxprom2065 = sext i32 %shl2064 to i64, !dbg !2297
  %arrayidx2066 = getelementptr inbounds i16, i16* %1251, i64 %idxprom2065, !dbg !2297
  %1254 = load i16, i16* %arrayidx2066, align 2, !dbg !2297
  %conv2067 = zext i16 %1254 to i32, !dbg !2297
  %add2068 = add nsw i32 %conv2062, %conv2067, !dbg !2297
  %add2069 = add nsw i32 %call2058, %add2068, !dbg !2297
  store i32 %add2069, i32* %cost2048, align 4, !dbg !2297
  %1255 = load i32, i32* %cost2048, align 4, !dbg !2298
  %1256 = load i32, i32* %bcost, align 4, !dbg !2298
  %cmp2070 = icmp slt i32 %1255, %1256, !dbg !2298
  br i1 %cmp2070, label %if.then2072, label %if.end2074, !dbg !2297

if.then2072:                                      ; preds = %if.then2047
  %1257 = load i32, i32* %cost2048, align 4, !dbg !2300
  store i32 %1257, i32* %bcost, align 4, !dbg !2300
  %1258 = load i32, i32* %omx, align 4, !dbg !2300
  store i32 %1258, i32* %bmx, align 4, !dbg !2300
  %1259 = load i32, i32* %omy, align 4, !dbg !2300
  %1260 = load i32, i32* %i1646, align 4, !dbg !2300
  %sub2073 = sub nsw i32 %1259, %1260, !dbg !2300
  store i32 %sub2073, i32* %bmy, align 4, !dbg !2300
  br label %if.end2074, !dbg !2300

if.end2074:                                       ; preds = %if.then2072, %if.then2047
  br label %if.end2075, !dbg !2297

if.end2075:                                       ; preds = %if.end2074, %if.end2043
  br label %for.inc2076, !dbg !2285

for.inc2076:                                      ; preds = %if.end2075
  %1261 = load i32, i32* %i1646, align 4, !dbg !2278
  %add2077 = add nsw i32 %1261, 2, !dbg !2278
  store i32 %add2077, i32* %i1646, align 4, !dbg !2278
  br label %for.cond2008, !dbg !2278, !llvm.loop !2302

for.end2078:                                      ; preds = %for.cond2008
  call void @llvm.dbg.declare(metadata i8** %pix_base2079, metadata !2303, metadata !DIExpression()), !dbg !2305
  %1262 = load i8*, i8** %p_fref_w, align 8, !dbg !2305
  %1263 = load i32, i32* %omx, align 4, !dbg !2305
  %idx.ext2080 = sext i32 %1263 to i64, !dbg !2305
  %add.ptr2081 = getelementptr inbounds i8, i8* %1262, i64 %idx.ext2080, !dbg !2305
  %1264 = load i32, i32* %omy, align 4, !dbg !2305
  %1265 = load i32, i32* %stride, align 4, !dbg !2305
  %mul2082 = mul nsw i32 %1264, %1265, !dbg !2305
  %idx.ext2083 = sext i32 %mul2082 to i64, !dbg !2305
  %add.ptr2084 = getelementptr inbounds i8, i8* %add.ptr2081, i64 %idx.ext2083, !dbg !2305
  store i8* %add.ptr2084, i8** %pix_base2079, align 8, !dbg !2305
  %1266 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2305
  %pixf2085 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1266, i32 0, i32 69, !dbg !2305
  %fpelcmp_x42086 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2085, i32 0, i32 9, !dbg !2305
  %1267 = load i32, i32* %i_pixel5, align 4, !dbg !2305
  %idxprom2087 = sext i32 %1267 to i64, !dbg !2305
  %arrayidx2088 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x42086, i64 0, i64 %idxprom2087, !dbg !2305
  %1268 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx2088, align 8, !dbg !2305
  %1269 = load i8*, i8** %p_fenc, align 8, !dbg !2305
  %1270 = load i8*, i8** %pix_base2079, align 8, !dbg !2305
  %add.ptr2089 = getelementptr inbounds i8, i8* %1270, i64 -1, !dbg !2305
  %1271 = load i32, i32* %stride, align 4, !dbg !2305
  %mul2090 = mul nsw i32 -2, %1271, !dbg !2305
  %idx.ext2091 = sext i32 %mul2090 to i64, !dbg !2305
  %add.ptr2092 = getelementptr inbounds i8, i8* %add.ptr2089, i64 %idx.ext2091, !dbg !2305
  %1272 = load i8*, i8** %pix_base2079, align 8, !dbg !2305
  %add.ptr2093 = getelementptr inbounds i8, i8* %1272, i64 1, !dbg !2305
  %1273 = load i32, i32* %stride, align 4, !dbg !2305
  %mul2094 = mul nsw i32 -2, %1273, !dbg !2305
  %idx.ext2095 = sext i32 %mul2094 to i64, !dbg !2305
  %add.ptr2096 = getelementptr inbounds i8, i8* %add.ptr2093, i64 %idx.ext2095, !dbg !2305
  %1274 = load i8*, i8** %pix_base2079, align 8, !dbg !2305
  %add.ptr2097 = getelementptr inbounds i8, i8* %1274, i64 -2, !dbg !2305
  %1275 = load i32, i32* %stride, align 4, !dbg !2305
  %mul2098 = mul nsw i32 -1, %1275, !dbg !2305
  %idx.ext2099 = sext i32 %mul2098 to i64, !dbg !2305
  %add.ptr2100 = getelementptr inbounds i8, i8* %add.ptr2097, i64 %idx.ext2099, !dbg !2305
  %1276 = load i8*, i8** %pix_base2079, align 8, !dbg !2305
  %add.ptr2101 = getelementptr inbounds i8, i8* %1276, i64 2, !dbg !2305
  %1277 = load i32, i32* %stride, align 4, !dbg !2305
  %mul2102 = mul nsw i32 -1, %1277, !dbg !2305
  %idx.ext2103 = sext i32 %mul2102 to i64, !dbg !2305
  %add.ptr2104 = getelementptr inbounds i8, i8* %add.ptr2101, i64 %idx.ext2103, !dbg !2305
  %1278 = load i32, i32* %stride, align 4, !dbg !2305
  %arraydecay2105 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2305
  call void %1268(i8* %1269, i8* %add.ptr2092, i8* %add.ptr2096, i8* %add.ptr2100, i8* %add.ptr2104, i32 %1278, i32* %arraydecay2105), !dbg !2305
  %1279 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2305
  %1280 = load i32, i32* %omx, align 4, !dbg !2305
  %add2106 = add nsw i32 %1280, -1, !dbg !2305
  %shl2107 = shl i32 %add2106, 2, !dbg !2305
  %idxprom2108 = sext i32 %shl2107 to i64, !dbg !2305
  %arrayidx2109 = getelementptr inbounds i16, i16* %1279, i64 %idxprom2108, !dbg !2305
  %1281 = load i16, i16* %arrayidx2109, align 2, !dbg !2305
  %conv2110 = zext i16 %1281 to i32, !dbg !2305
  %1282 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2305
  %1283 = load i32, i32* %omy, align 4, !dbg !2305
  %add2111 = add nsw i32 %1283, -2, !dbg !2305
  %shl2112 = shl i32 %add2111, 2, !dbg !2305
  %idxprom2113 = sext i32 %shl2112 to i64, !dbg !2305
  %arrayidx2114 = getelementptr inbounds i16, i16* %1282, i64 %idxprom2113, !dbg !2305
  %1284 = load i16, i16* %arrayidx2114, align 2, !dbg !2305
  %conv2115 = zext i16 %1284 to i32, !dbg !2305
  %add2116 = add nsw i32 %conv2110, %conv2115, !dbg !2305
  %arrayidx2117 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2305
  %1285 = load i32, i32* %arrayidx2117, align 16, !dbg !2305
  %add2118 = add nsw i32 %1285, %add2116, !dbg !2305
  store i32 %add2118, i32* %arrayidx2117, align 16, !dbg !2305
  %1286 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2305
  %1287 = load i32, i32* %omx, align 4, !dbg !2305
  %add2119 = add nsw i32 %1287, 1, !dbg !2305
  %shl2120 = shl i32 %add2119, 2, !dbg !2305
  %idxprom2121 = sext i32 %shl2120 to i64, !dbg !2305
  %arrayidx2122 = getelementptr inbounds i16, i16* %1286, i64 %idxprom2121, !dbg !2305
  %1288 = load i16, i16* %arrayidx2122, align 2, !dbg !2305
  %conv2123 = zext i16 %1288 to i32, !dbg !2305
  %1289 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2305
  %1290 = load i32, i32* %omy, align 4, !dbg !2305
  %add2124 = add nsw i32 %1290, -2, !dbg !2305
  %shl2125 = shl i32 %add2124, 2, !dbg !2305
  %idxprom2126 = sext i32 %shl2125 to i64, !dbg !2305
  %arrayidx2127 = getelementptr inbounds i16, i16* %1289, i64 %idxprom2126, !dbg !2305
  %1291 = load i16, i16* %arrayidx2127, align 2, !dbg !2305
  %conv2128 = zext i16 %1291 to i32, !dbg !2305
  %add2129 = add nsw i32 %conv2123, %conv2128, !dbg !2305
  %arrayidx2130 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2305
  %1292 = load i32, i32* %arrayidx2130, align 4, !dbg !2305
  %add2131 = add nsw i32 %1292, %add2129, !dbg !2305
  store i32 %add2131, i32* %arrayidx2130, align 4, !dbg !2305
  %1293 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2305
  %1294 = load i32, i32* %omx, align 4, !dbg !2305
  %add2132 = add nsw i32 %1294, -2, !dbg !2305
  %shl2133 = shl i32 %add2132, 2, !dbg !2305
  %idxprom2134 = sext i32 %shl2133 to i64, !dbg !2305
  %arrayidx2135 = getelementptr inbounds i16, i16* %1293, i64 %idxprom2134, !dbg !2305
  %1295 = load i16, i16* %arrayidx2135, align 2, !dbg !2305
  %conv2136 = zext i16 %1295 to i32, !dbg !2305
  %1296 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2305
  %1297 = load i32, i32* %omy, align 4, !dbg !2305
  %add2137 = add nsw i32 %1297, -1, !dbg !2305
  %shl2138 = shl i32 %add2137, 2, !dbg !2305
  %idxprom2139 = sext i32 %shl2138 to i64, !dbg !2305
  %arrayidx2140 = getelementptr inbounds i16, i16* %1296, i64 %idxprom2139, !dbg !2305
  %1298 = load i16, i16* %arrayidx2140, align 2, !dbg !2305
  %conv2141 = zext i16 %1298 to i32, !dbg !2305
  %add2142 = add nsw i32 %conv2136, %conv2141, !dbg !2305
  %arrayidx2143 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2305
  %1299 = load i32, i32* %arrayidx2143, align 8, !dbg !2305
  %add2144 = add nsw i32 %1299, %add2142, !dbg !2305
  store i32 %add2144, i32* %arrayidx2143, align 8, !dbg !2305
  %1300 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2305
  %1301 = load i32, i32* %omx, align 4, !dbg !2305
  %add2145 = add nsw i32 %1301, 2, !dbg !2305
  %shl2146 = shl i32 %add2145, 2, !dbg !2305
  %idxprom2147 = sext i32 %shl2146 to i64, !dbg !2305
  %arrayidx2148 = getelementptr inbounds i16, i16* %1300, i64 %idxprom2147, !dbg !2305
  %1302 = load i16, i16* %arrayidx2148, align 2, !dbg !2305
  %conv2149 = zext i16 %1302 to i32, !dbg !2305
  %1303 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2305
  %1304 = load i32, i32* %omy, align 4, !dbg !2305
  %add2150 = add nsw i32 %1304, -1, !dbg !2305
  %shl2151 = shl i32 %add2150, 2, !dbg !2305
  %idxprom2152 = sext i32 %shl2151 to i64, !dbg !2305
  %arrayidx2153 = getelementptr inbounds i16, i16* %1303, i64 %idxprom2152, !dbg !2305
  %1305 = load i16, i16* %arrayidx2153, align 2, !dbg !2305
  %conv2154 = zext i16 %1305 to i32, !dbg !2305
  %add2155 = add nsw i32 %conv2149, %conv2154, !dbg !2305
  %arrayidx2156 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2305
  %1306 = load i32, i32* %arrayidx2156, align 4, !dbg !2305
  %add2157 = add nsw i32 %1306, %add2155, !dbg !2305
  store i32 %add2157, i32* %arrayidx2156, align 4, !dbg !2305
  %arrayidx2158 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2306
  %1307 = load i32, i32* %arrayidx2158, align 16, !dbg !2306
  %1308 = load i32, i32* %bcost, align 4, !dbg !2306
  %cmp2159 = icmp slt i32 %1307, %1308, !dbg !2306
  br i1 %cmp2159, label %if.then2161, label %if.end2165, !dbg !2305

if.then2161:                                      ; preds = %for.end2078
  %arrayidx2162 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2308
  %1309 = load i32, i32* %arrayidx2162, align 16, !dbg !2308
  store i32 %1309, i32* %bcost, align 4, !dbg !2308
  %1310 = load i32, i32* %omx, align 4, !dbg !2308
  %add2163 = add nsw i32 %1310, -1, !dbg !2308
  store i32 %add2163, i32* %bmx, align 4, !dbg !2308
  %1311 = load i32, i32* %omy, align 4, !dbg !2308
  %add2164 = add nsw i32 %1311, -2, !dbg !2308
  store i32 %add2164, i32* %bmy, align 4, !dbg !2308
  br label %if.end2165, !dbg !2308

if.end2165:                                       ; preds = %if.then2161, %for.end2078
  %arrayidx2166 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2310
  %1312 = load i32, i32* %arrayidx2166, align 4, !dbg !2310
  %1313 = load i32, i32* %bcost, align 4, !dbg !2310
  %cmp2167 = icmp slt i32 %1312, %1313, !dbg !2310
  br i1 %cmp2167, label %if.then2169, label %if.end2173, !dbg !2305

if.then2169:                                      ; preds = %if.end2165
  %arrayidx2170 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2312
  %1314 = load i32, i32* %arrayidx2170, align 4, !dbg !2312
  store i32 %1314, i32* %bcost, align 4, !dbg !2312
  %1315 = load i32, i32* %omx, align 4, !dbg !2312
  %add2171 = add nsw i32 %1315, 1, !dbg !2312
  store i32 %add2171, i32* %bmx, align 4, !dbg !2312
  %1316 = load i32, i32* %omy, align 4, !dbg !2312
  %add2172 = add nsw i32 %1316, -2, !dbg !2312
  store i32 %add2172, i32* %bmy, align 4, !dbg !2312
  br label %if.end2173, !dbg !2312

if.end2173:                                       ; preds = %if.then2169, %if.end2165
  %arrayidx2174 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2314
  %1317 = load i32, i32* %arrayidx2174, align 8, !dbg !2314
  %1318 = load i32, i32* %bcost, align 4, !dbg !2314
  %cmp2175 = icmp slt i32 %1317, %1318, !dbg !2314
  br i1 %cmp2175, label %if.then2177, label %if.end2181, !dbg !2305

if.then2177:                                      ; preds = %if.end2173
  %arrayidx2178 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2316
  %1319 = load i32, i32* %arrayidx2178, align 8, !dbg !2316
  store i32 %1319, i32* %bcost, align 4, !dbg !2316
  %1320 = load i32, i32* %omx, align 4, !dbg !2316
  %add2179 = add nsw i32 %1320, -2, !dbg !2316
  store i32 %add2179, i32* %bmx, align 4, !dbg !2316
  %1321 = load i32, i32* %omy, align 4, !dbg !2316
  %add2180 = add nsw i32 %1321, -1, !dbg !2316
  store i32 %add2180, i32* %bmy, align 4, !dbg !2316
  br label %if.end2181, !dbg !2316

if.end2181:                                       ; preds = %if.then2177, %if.end2173
  %arrayidx2182 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2318
  %1322 = load i32, i32* %arrayidx2182, align 4, !dbg !2318
  %1323 = load i32, i32* %bcost, align 4, !dbg !2318
  %cmp2183 = icmp slt i32 %1322, %1323, !dbg !2318
  br i1 %cmp2183, label %if.then2185, label %if.end2189, !dbg !2305

if.then2185:                                      ; preds = %if.end2181
  %arrayidx2186 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2320
  %1324 = load i32, i32* %arrayidx2186, align 4, !dbg !2320
  store i32 %1324, i32* %bcost, align 4, !dbg !2320
  %1325 = load i32, i32* %omx, align 4, !dbg !2320
  %add2187 = add nsw i32 %1325, 2, !dbg !2320
  store i32 %add2187, i32* %bmx, align 4, !dbg !2320
  %1326 = load i32, i32* %omy, align 4, !dbg !2320
  %add2188 = add nsw i32 %1326, -1, !dbg !2320
  store i32 %add2188, i32* %bmy, align 4, !dbg !2320
  br label %if.end2189, !dbg !2320

if.end2189:                                       ; preds = %if.then2185, %if.end2181
  call void @llvm.dbg.declare(metadata i8** %pix_base2190, metadata !2322, metadata !DIExpression()), !dbg !2324
  %1327 = load i8*, i8** %p_fref_w, align 8, !dbg !2324
  %1328 = load i32, i32* %omx, align 4, !dbg !2324
  %idx.ext2191 = sext i32 %1328 to i64, !dbg !2324
  %add.ptr2192 = getelementptr inbounds i8, i8* %1327, i64 %idx.ext2191, !dbg !2324
  %1329 = load i32, i32* %omy, align 4, !dbg !2324
  %1330 = load i32, i32* %stride, align 4, !dbg !2324
  %mul2193 = mul nsw i32 %1329, %1330, !dbg !2324
  %idx.ext2194 = sext i32 %mul2193 to i64, !dbg !2324
  %add.ptr2195 = getelementptr inbounds i8, i8* %add.ptr2192, i64 %idx.ext2194, !dbg !2324
  store i8* %add.ptr2195, i8** %pix_base2190, align 8, !dbg !2324
  %1331 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2324
  %pixf2196 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1331, i32 0, i32 69, !dbg !2324
  %fpelcmp_x42197 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2196, i32 0, i32 9, !dbg !2324
  %1332 = load i32, i32* %i_pixel5, align 4, !dbg !2324
  %idxprom2198 = sext i32 %1332 to i64, !dbg !2324
  %arrayidx2199 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x42197, i64 0, i64 %idxprom2198, !dbg !2324
  %1333 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx2199, align 8, !dbg !2324
  %1334 = load i8*, i8** %p_fenc, align 8, !dbg !2324
  %1335 = load i8*, i8** %pix_base2190, align 8, !dbg !2324
  %add.ptr2200 = getelementptr inbounds i8, i8* %1335, i64 -2, !dbg !2324
  %1336 = load i32, i32* %stride, align 4, !dbg !2324
  %mul2201 = mul nsw i32 1, %1336, !dbg !2324
  %idx.ext2202 = sext i32 %mul2201 to i64, !dbg !2324
  %add.ptr2203 = getelementptr inbounds i8, i8* %add.ptr2200, i64 %idx.ext2202, !dbg !2324
  %1337 = load i8*, i8** %pix_base2190, align 8, !dbg !2324
  %add.ptr2204 = getelementptr inbounds i8, i8* %1337, i64 2, !dbg !2324
  %1338 = load i32, i32* %stride, align 4, !dbg !2324
  %mul2205 = mul nsw i32 1, %1338, !dbg !2324
  %idx.ext2206 = sext i32 %mul2205 to i64, !dbg !2324
  %add.ptr2207 = getelementptr inbounds i8, i8* %add.ptr2204, i64 %idx.ext2206, !dbg !2324
  %1339 = load i8*, i8** %pix_base2190, align 8, !dbg !2324
  %add.ptr2208 = getelementptr inbounds i8, i8* %1339, i64 -1, !dbg !2324
  %1340 = load i32, i32* %stride, align 4, !dbg !2324
  %mul2209 = mul nsw i32 2, %1340, !dbg !2324
  %idx.ext2210 = sext i32 %mul2209 to i64, !dbg !2324
  %add.ptr2211 = getelementptr inbounds i8, i8* %add.ptr2208, i64 %idx.ext2210, !dbg !2324
  %1341 = load i8*, i8** %pix_base2190, align 8, !dbg !2324
  %add.ptr2212 = getelementptr inbounds i8, i8* %1341, i64 1, !dbg !2324
  %1342 = load i32, i32* %stride, align 4, !dbg !2324
  %mul2213 = mul nsw i32 2, %1342, !dbg !2324
  %idx.ext2214 = sext i32 %mul2213 to i64, !dbg !2324
  %add.ptr2215 = getelementptr inbounds i8, i8* %add.ptr2212, i64 %idx.ext2214, !dbg !2324
  %1343 = load i32, i32* %stride, align 4, !dbg !2324
  %arraydecay2216 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2324
  call void %1333(i8* %1334, i8* %add.ptr2203, i8* %add.ptr2207, i8* %add.ptr2211, i8* %add.ptr2215, i32 %1343, i32* %arraydecay2216), !dbg !2324
  %1344 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2324
  %1345 = load i32, i32* %omx, align 4, !dbg !2324
  %add2217 = add nsw i32 %1345, -2, !dbg !2324
  %shl2218 = shl i32 %add2217, 2, !dbg !2324
  %idxprom2219 = sext i32 %shl2218 to i64, !dbg !2324
  %arrayidx2220 = getelementptr inbounds i16, i16* %1344, i64 %idxprom2219, !dbg !2324
  %1346 = load i16, i16* %arrayidx2220, align 2, !dbg !2324
  %conv2221 = zext i16 %1346 to i32, !dbg !2324
  %1347 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2324
  %1348 = load i32, i32* %omy, align 4, !dbg !2324
  %add2222 = add nsw i32 %1348, 1, !dbg !2324
  %shl2223 = shl i32 %add2222, 2, !dbg !2324
  %idxprom2224 = sext i32 %shl2223 to i64, !dbg !2324
  %arrayidx2225 = getelementptr inbounds i16, i16* %1347, i64 %idxprom2224, !dbg !2324
  %1349 = load i16, i16* %arrayidx2225, align 2, !dbg !2324
  %conv2226 = zext i16 %1349 to i32, !dbg !2324
  %add2227 = add nsw i32 %conv2221, %conv2226, !dbg !2324
  %arrayidx2228 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2324
  %1350 = load i32, i32* %arrayidx2228, align 16, !dbg !2324
  %add2229 = add nsw i32 %1350, %add2227, !dbg !2324
  store i32 %add2229, i32* %arrayidx2228, align 16, !dbg !2324
  %1351 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2324
  %1352 = load i32, i32* %omx, align 4, !dbg !2324
  %add2230 = add nsw i32 %1352, 2, !dbg !2324
  %shl2231 = shl i32 %add2230, 2, !dbg !2324
  %idxprom2232 = sext i32 %shl2231 to i64, !dbg !2324
  %arrayidx2233 = getelementptr inbounds i16, i16* %1351, i64 %idxprom2232, !dbg !2324
  %1353 = load i16, i16* %arrayidx2233, align 2, !dbg !2324
  %conv2234 = zext i16 %1353 to i32, !dbg !2324
  %1354 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2324
  %1355 = load i32, i32* %omy, align 4, !dbg !2324
  %add2235 = add nsw i32 %1355, 1, !dbg !2324
  %shl2236 = shl i32 %add2235, 2, !dbg !2324
  %idxprom2237 = sext i32 %shl2236 to i64, !dbg !2324
  %arrayidx2238 = getelementptr inbounds i16, i16* %1354, i64 %idxprom2237, !dbg !2324
  %1356 = load i16, i16* %arrayidx2238, align 2, !dbg !2324
  %conv2239 = zext i16 %1356 to i32, !dbg !2324
  %add2240 = add nsw i32 %conv2234, %conv2239, !dbg !2324
  %arrayidx2241 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2324
  %1357 = load i32, i32* %arrayidx2241, align 4, !dbg !2324
  %add2242 = add nsw i32 %1357, %add2240, !dbg !2324
  store i32 %add2242, i32* %arrayidx2241, align 4, !dbg !2324
  %1358 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2324
  %1359 = load i32, i32* %omx, align 4, !dbg !2324
  %add2243 = add nsw i32 %1359, -1, !dbg !2324
  %shl2244 = shl i32 %add2243, 2, !dbg !2324
  %idxprom2245 = sext i32 %shl2244 to i64, !dbg !2324
  %arrayidx2246 = getelementptr inbounds i16, i16* %1358, i64 %idxprom2245, !dbg !2324
  %1360 = load i16, i16* %arrayidx2246, align 2, !dbg !2324
  %conv2247 = zext i16 %1360 to i32, !dbg !2324
  %1361 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2324
  %1362 = load i32, i32* %omy, align 4, !dbg !2324
  %add2248 = add nsw i32 %1362, 2, !dbg !2324
  %shl2249 = shl i32 %add2248, 2, !dbg !2324
  %idxprom2250 = sext i32 %shl2249 to i64, !dbg !2324
  %arrayidx2251 = getelementptr inbounds i16, i16* %1361, i64 %idxprom2250, !dbg !2324
  %1363 = load i16, i16* %arrayidx2251, align 2, !dbg !2324
  %conv2252 = zext i16 %1363 to i32, !dbg !2324
  %add2253 = add nsw i32 %conv2247, %conv2252, !dbg !2324
  %arrayidx2254 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2324
  %1364 = load i32, i32* %arrayidx2254, align 8, !dbg !2324
  %add2255 = add nsw i32 %1364, %add2253, !dbg !2324
  store i32 %add2255, i32* %arrayidx2254, align 8, !dbg !2324
  %1365 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2324
  %1366 = load i32, i32* %omx, align 4, !dbg !2324
  %add2256 = add nsw i32 %1366, 1, !dbg !2324
  %shl2257 = shl i32 %add2256, 2, !dbg !2324
  %idxprom2258 = sext i32 %shl2257 to i64, !dbg !2324
  %arrayidx2259 = getelementptr inbounds i16, i16* %1365, i64 %idxprom2258, !dbg !2324
  %1367 = load i16, i16* %arrayidx2259, align 2, !dbg !2324
  %conv2260 = zext i16 %1367 to i32, !dbg !2324
  %1368 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2324
  %1369 = load i32, i32* %omy, align 4, !dbg !2324
  %add2261 = add nsw i32 %1369, 2, !dbg !2324
  %shl2262 = shl i32 %add2261, 2, !dbg !2324
  %idxprom2263 = sext i32 %shl2262 to i64, !dbg !2324
  %arrayidx2264 = getelementptr inbounds i16, i16* %1368, i64 %idxprom2263, !dbg !2324
  %1370 = load i16, i16* %arrayidx2264, align 2, !dbg !2324
  %conv2265 = zext i16 %1370 to i32, !dbg !2324
  %add2266 = add nsw i32 %conv2260, %conv2265, !dbg !2324
  %arrayidx2267 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2324
  %1371 = load i32, i32* %arrayidx2267, align 4, !dbg !2324
  %add2268 = add nsw i32 %1371, %add2266, !dbg !2324
  store i32 %add2268, i32* %arrayidx2267, align 4, !dbg !2324
  %arrayidx2269 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2325
  %1372 = load i32, i32* %arrayidx2269, align 16, !dbg !2325
  %1373 = load i32, i32* %bcost, align 4, !dbg !2325
  %cmp2270 = icmp slt i32 %1372, %1373, !dbg !2325
  br i1 %cmp2270, label %if.then2272, label %if.end2276, !dbg !2324

if.then2272:                                      ; preds = %if.end2189
  %arrayidx2273 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2327
  %1374 = load i32, i32* %arrayidx2273, align 16, !dbg !2327
  store i32 %1374, i32* %bcost, align 4, !dbg !2327
  %1375 = load i32, i32* %omx, align 4, !dbg !2327
  %add2274 = add nsw i32 %1375, -2, !dbg !2327
  store i32 %add2274, i32* %bmx, align 4, !dbg !2327
  %1376 = load i32, i32* %omy, align 4, !dbg !2327
  %add2275 = add nsw i32 %1376, 1, !dbg !2327
  store i32 %add2275, i32* %bmy, align 4, !dbg !2327
  br label %if.end2276, !dbg !2327

if.end2276:                                       ; preds = %if.then2272, %if.end2189
  %arrayidx2277 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2329
  %1377 = load i32, i32* %arrayidx2277, align 4, !dbg !2329
  %1378 = load i32, i32* %bcost, align 4, !dbg !2329
  %cmp2278 = icmp slt i32 %1377, %1378, !dbg !2329
  br i1 %cmp2278, label %if.then2280, label %if.end2284, !dbg !2324

if.then2280:                                      ; preds = %if.end2276
  %arrayidx2281 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2331
  %1379 = load i32, i32* %arrayidx2281, align 4, !dbg !2331
  store i32 %1379, i32* %bcost, align 4, !dbg !2331
  %1380 = load i32, i32* %omx, align 4, !dbg !2331
  %add2282 = add nsw i32 %1380, 2, !dbg !2331
  store i32 %add2282, i32* %bmx, align 4, !dbg !2331
  %1381 = load i32, i32* %omy, align 4, !dbg !2331
  %add2283 = add nsw i32 %1381, 1, !dbg !2331
  store i32 %add2283, i32* %bmy, align 4, !dbg !2331
  br label %if.end2284, !dbg !2331

if.end2284:                                       ; preds = %if.then2280, %if.end2276
  %arrayidx2285 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2333
  %1382 = load i32, i32* %arrayidx2285, align 8, !dbg !2333
  %1383 = load i32, i32* %bcost, align 4, !dbg !2333
  %cmp2286 = icmp slt i32 %1382, %1383, !dbg !2333
  br i1 %cmp2286, label %if.then2288, label %if.end2292, !dbg !2324

if.then2288:                                      ; preds = %if.end2284
  %arrayidx2289 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2335
  %1384 = load i32, i32* %arrayidx2289, align 8, !dbg !2335
  store i32 %1384, i32* %bcost, align 4, !dbg !2335
  %1385 = load i32, i32* %omx, align 4, !dbg !2335
  %add2290 = add nsw i32 %1385, -1, !dbg !2335
  store i32 %add2290, i32* %bmx, align 4, !dbg !2335
  %1386 = load i32, i32* %omy, align 4, !dbg !2335
  %add2291 = add nsw i32 %1386, 2, !dbg !2335
  store i32 %add2291, i32* %bmy, align 4, !dbg !2335
  br label %if.end2292, !dbg !2335

if.end2292:                                       ; preds = %if.then2288, %if.end2284
  %arrayidx2293 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2337
  %1387 = load i32, i32* %arrayidx2293, align 4, !dbg !2337
  %1388 = load i32, i32* %bcost, align 4, !dbg !2337
  %cmp2294 = icmp slt i32 %1387, %1388, !dbg !2337
  br i1 %cmp2294, label %if.then2296, label %if.end2300, !dbg !2324

if.then2296:                                      ; preds = %if.end2292
  %arrayidx2297 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2339
  %1389 = load i32, i32* %arrayidx2297, align 4, !dbg !2339
  store i32 %1389, i32* %bcost, align 4, !dbg !2339
  %1390 = load i32, i32* %omx, align 4, !dbg !2339
  %add2298 = add nsw i32 %1390, 1, !dbg !2339
  store i32 %add2298, i32* %bmx, align 4, !dbg !2339
  %1391 = load i32, i32* %omy, align 4, !dbg !2339
  %add2299 = add nsw i32 %1391, 2, !dbg !2339
  store i32 %add2299, i32* %bmy, align 4, !dbg !2339
  br label %if.end2300, !dbg !2339

if.end2300:                                       ; preds = %if.then2296, %if.end2292
  %1392 = load i32, i32* %bcost, align 4, !dbg !2341
  %1393 = load i32, i32* %ucost2, align 4, !dbg !2343
  %cmp2301 = icmp eq i32 %1392, %1393, !dbg !2344
  br i1 %cmp2301, label %if.then2303, label %if.end2304, !dbg !2345

if.then2303:                                      ; preds = %if.end2300
  br label %sw.epilog, !dbg !2346

if.end2304:                                       ; preds = %if.end2300
  %1394 = load i32, i32* %range, align 4, !dbg !2347
  %add2305 = add nsw i32 %1394, 2, !dbg !2348
  store i32 %add2305, i32* %cross_start, align 4, !dbg !2349
  br label %if.end2306, !dbg !2350

if.end2306:                                       ; preds = %if.end2304, %if.end1640
  br label %if.end2307, !dbg !2351

if.end2307:                                       ; preds = %if.end2306, %land.lhs.true1400, %if.end1397
  %1395 = load i32, i32* %i_mvc.addr, align 4, !dbg !2352
  %tobool2308 = icmp ne i32 %1395, 0, !dbg !2352
  br i1 %tobool2308, label %if.then2309, label %if.end2415, !dbg !2354

if.then2309:                                      ; preds = %if.end2307
  call void @llvm.dbg.declare(metadata i32* %mvd, metadata !2355, metadata !DIExpression()), !dbg !2357
  call void @llvm.dbg.declare(metadata i32* %sad_ctx, metadata !2358, metadata !DIExpression()), !dbg !2359
  call void @llvm.dbg.declare(metadata i32* %mvd_ctx, metadata !2360, metadata !DIExpression()), !dbg !2361
  call void @llvm.dbg.declare(metadata i32* %denom, metadata !2362, metadata !DIExpression()), !dbg !2363
  store i32 1, i32* %denom, align 4, !dbg !2363
  %1396 = load i32, i32* %i_mvc.addr, align 4, !dbg !2364
  %cmp2310 = icmp eq i32 %1396, 1, !dbg !2366
  br i1 %cmp2310, label %if.then2312, label %if.else2335, !dbg !2367

if.then2312:                                      ; preds = %if.then2309
  %1397 = load i32, i32* %i_pixel5, align 4, !dbg !2368
  %cmp2313 = icmp eq i32 %1397, 0, !dbg !2371
  br i1 %cmp2313, label %if.then2315, label %if.else2316, !dbg !2372

if.then2315:                                      ; preds = %if.then2312
  store i32 25, i32* %mvd, align 4, !dbg !2373
  br label %if.end2334, !dbg !2374

if.else2316:                                      ; preds = %if.then2312
  %1398 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2375
  %mvp2317 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %1398, i32 0, i32 10, !dbg !2376
  %arrayidx2318 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp2317, i64 0, i64 0, !dbg !2375
  %1399 = load i16, i16* %arrayidx2318, align 16, !dbg !2375
  %conv2319 = sext i16 %1399 to i32, !dbg !2375
  %1400 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !2377
  %arrayidx2320 = getelementptr inbounds [2 x i16], [2 x i16]* %1400, i64 0, !dbg !2377
  %arrayidx2321 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx2320, i64 0, i64 0, !dbg !2377
  %1401 = load i16, i16* %arrayidx2321, align 2, !dbg !2377
  %conv2322 = sext i16 %1401 to i32, !dbg !2377
  %sub2323 = sub nsw i32 %conv2319, %conv2322, !dbg !2378
  %call2324 = call i32 @abs(i32 %sub2323) #4, !dbg !2379
  %1402 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2380
  %mvp2325 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %1402, i32 0, i32 10, !dbg !2381
  %arrayidx2326 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp2325, i64 0, i64 1, !dbg !2380
  %1403 = load i16, i16* %arrayidx2326, align 2, !dbg !2380
  %conv2327 = sext i16 %1403 to i32, !dbg !2380
  %1404 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !2382
  %arrayidx2328 = getelementptr inbounds [2 x i16], [2 x i16]* %1404, i64 0, !dbg !2382
  %arrayidx2329 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx2328, i64 0, i64 1, !dbg !2382
  %1405 = load i16, i16* %arrayidx2329, align 2, !dbg !2382
  %conv2330 = sext i16 %1405 to i32, !dbg !2382
  %sub2331 = sub nsw i32 %conv2327, %conv2330, !dbg !2383
  %call2332 = call i32 @abs(i32 %sub2331) #4, !dbg !2384
  %add2333 = add nsw i32 %call2324, %call2332, !dbg !2385
  store i32 %add2333, i32* %mvd, align 4, !dbg !2386
  br label %if.end2334

if.end2334:                                       ; preds = %if.else2316, %if.then2315
  br label %if.end2362, !dbg !2387

if.else2335:                                      ; preds = %if.then2309
  %1406 = load i32, i32* %i_mvc.addr, align 4, !dbg !2388
  %sub2336 = sub nsw i32 %1406, 1, !dbg !2390
  store i32 %sub2336, i32* %denom, align 4, !dbg !2391
  store i32 0, i32* %mvd, align 4, !dbg !2392
  %1407 = load i32, i32* %i_pixel5, align 4, !dbg !2393
  %cmp2337 = icmp ne i32 %1407, 0, !dbg !2395
  br i1 %cmp2337, label %if.then2339, label %if.end2358, !dbg !2396

if.then2339:                                      ; preds = %if.else2335
  %1408 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2397
  %mvp2340 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %1408, i32 0, i32 10, !dbg !2399
  %arrayidx2341 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp2340, i64 0, i64 0, !dbg !2397
  %1409 = load i16, i16* %arrayidx2341, align 16, !dbg !2397
  %conv2342 = sext i16 %1409 to i32, !dbg !2397
  %1410 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !2400
  %arrayidx2343 = getelementptr inbounds [2 x i16], [2 x i16]* %1410, i64 0, !dbg !2400
  %arrayidx2344 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx2343, i64 0, i64 0, !dbg !2400
  %1411 = load i16, i16* %arrayidx2344, align 2, !dbg !2400
  %conv2345 = sext i16 %1411 to i32, !dbg !2400
  %sub2346 = sub nsw i32 %conv2342, %conv2345, !dbg !2401
  %call2347 = call i32 @abs(i32 %sub2346) #4, !dbg !2402
  %1412 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2403
  %mvp2348 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %1412, i32 0, i32 10, !dbg !2404
  %arrayidx2349 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp2348, i64 0, i64 1, !dbg !2403
  %1413 = load i16, i16* %arrayidx2349, align 2, !dbg !2403
  %conv2350 = sext i16 %1413 to i32, !dbg !2403
  %1414 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !2405
  %arrayidx2351 = getelementptr inbounds [2 x i16], [2 x i16]* %1414, i64 0, !dbg !2405
  %arrayidx2352 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx2351, i64 0, i64 1, !dbg !2405
  %1415 = load i16, i16* %arrayidx2352, align 2, !dbg !2405
  %conv2353 = sext i16 %1415 to i32, !dbg !2405
  %sub2354 = sub nsw i32 %conv2350, %conv2353, !dbg !2406
  %call2355 = call i32 @abs(i32 %sub2354) #4, !dbg !2407
  %add2356 = add nsw i32 %call2347, %call2355, !dbg !2408
  store i32 %add2356, i32* %mvd, align 4, !dbg !2409
  %1416 = load i32, i32* %denom, align 4, !dbg !2410
  %inc2357 = add nsw i32 %1416, 1, !dbg !2410
  store i32 %inc2357, i32* %denom, align 4, !dbg !2410
  br label %if.end2358, !dbg !2411

if.end2358:                                       ; preds = %if.then2339, %if.else2335
  %1417 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !2412
  %1418 = load i32, i32* %i_mvc.addr, align 4, !dbg !2413
  %conv2359 = sext i32 %1418 to i64, !dbg !2413
  %call2360 = call i32 @x264_predictor_difference([2 x i16]* %1417, i64 %conv2359), !dbg !2414
  %1419 = load i32, i32* %mvd, align 4, !dbg !2415
  %add2361 = add nsw i32 %1419, %call2360, !dbg !2415
  store i32 %add2361, i32* %mvd, align 4, !dbg !2415
  br label %if.end2362

if.end2362:                                       ; preds = %if.end2358, %if.end2334
  %1420 = load i32, i32* %bcost, align 4, !dbg !2416
  %1421 = load i32, i32* %i_pixel5, align 4, !dbg !2416
  %idxprom2363 = sext i32 %1421 to i64, !dbg !2416
  %arrayidx2364 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_me_search_ref.x264_pixel_size_shift, i64 0, i64 %idxprom2363, !dbg !2416
  %1422 = load i8, i8* %arrayidx2364, align 1, !dbg !2416
  %conv2365 = zext i8 %1422 to i32, !dbg !2416
  %shr2366 = ashr i32 1000, %conv2365, !dbg !2416
  %cmp2367 = icmp slt i32 %1420, %shr2366, !dbg !2416
  br i1 %cmp2367, label %cond.true2369, label %cond.false2370, !dbg !2416

cond.true2369:                                    ; preds = %if.end2362
  br label %cond.end2388, !dbg !2416

cond.false2370:                                   ; preds = %if.end2362
  %1423 = load i32, i32* %bcost, align 4, !dbg !2417
  %1424 = load i32, i32* %i_pixel5, align 4, !dbg !2417
  %idxprom2371 = sext i32 %1424 to i64, !dbg !2417
  %arrayidx2372 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_me_search_ref.x264_pixel_size_shift, i64 0, i64 %idxprom2371, !dbg !2417
  %1425 = load i8, i8* %arrayidx2372, align 1, !dbg !2417
  %conv2373 = zext i8 %1425 to i32, !dbg !2417
  %shr2374 = ashr i32 2000, %conv2373, !dbg !2417
  %cmp2375 = icmp slt i32 %1423, %shr2374, !dbg !2417
  br i1 %cmp2375, label %cond.true2377, label %cond.false2378, !dbg !2417

cond.true2377:                                    ; preds = %cond.false2370
  br label %cond.end2386, !dbg !2417

cond.false2378:                                   ; preds = %cond.false2370
  %1426 = load i32, i32* %bcost, align 4, !dbg !2418
  %1427 = load i32, i32* %i_pixel5, align 4, !dbg !2418
  %idxprom2379 = sext i32 %1427 to i64, !dbg !2418
  %arrayidx2380 = getelementptr inbounds [7 x i8], [7 x i8]* @x264_me_search_ref.x264_pixel_size_shift, i64 0, i64 %idxprom2379, !dbg !2418
  %1428 = load i8, i8* %arrayidx2380, align 1, !dbg !2418
  %conv2381 = zext i8 %1428 to i32, !dbg !2418
  %shr2382 = ashr i32 4000, %conv2381, !dbg !2418
  %cmp2383 = icmp slt i32 %1426, %shr2382, !dbg !2418
  %1429 = zext i1 %cmp2383 to i64, !dbg !2418
  %cond2385 = select i1 %cmp2383, i32 2, i32 3, !dbg !2418
  br label %cond.end2386, !dbg !2417

cond.end2386:                                     ; preds = %cond.false2378, %cond.true2377
  %cond2387 = phi i32 [ 1, %cond.true2377 ], [ %cond2385, %cond.false2378 ], !dbg !2417
  br label %cond.end2388, !dbg !2416

cond.end2388:                                     ; preds = %cond.end2386, %cond.true2369
  %cond2389 = phi i32 [ 0, %cond.true2369 ], [ %cond2387, %cond.end2386 ], !dbg !2416
  store i32 %cond2389, i32* %sad_ctx, align 4, !dbg !2419
  %1430 = load i32, i32* %mvd, align 4, !dbg !2420
  %1431 = load i32, i32* %denom, align 4, !dbg !2421
  %mul2390 = mul nsw i32 10, %1431, !dbg !2422
  %cmp2391 = icmp slt i32 %1430, %mul2390, !dbg !2423
  br i1 %cmp2391, label %cond.true2393, label %cond.false2394, !dbg !2420

cond.true2393:                                    ; preds = %cond.end2388
  br label %cond.end2406, !dbg !2420

cond.false2394:                                   ; preds = %cond.end2388
  %1432 = load i32, i32* %mvd, align 4, !dbg !2424
  %1433 = load i32, i32* %denom, align 4, !dbg !2425
  %mul2395 = mul nsw i32 20, %1433, !dbg !2426
  %cmp2396 = icmp slt i32 %1432, %mul2395, !dbg !2427
  br i1 %cmp2396, label %cond.true2398, label %cond.false2399, !dbg !2424

cond.true2398:                                    ; preds = %cond.false2394
  br label %cond.end2404, !dbg !2424

cond.false2399:                                   ; preds = %cond.false2394
  %1434 = load i32, i32* %mvd, align 4, !dbg !2428
  %1435 = load i32, i32* %denom, align 4, !dbg !2429
  %mul2400 = mul nsw i32 40, %1435, !dbg !2430
  %cmp2401 = icmp slt i32 %1434, %mul2400, !dbg !2431
  %1436 = zext i1 %cmp2401 to i64, !dbg !2428
  %cond2403 = select i1 %cmp2401, i32 2, i32 3, !dbg !2428
  br label %cond.end2404, !dbg !2424

cond.end2404:                                     ; preds = %cond.false2399, %cond.true2398
  %cond2405 = phi i32 [ 1, %cond.true2398 ], [ %cond2403, %cond.false2399 ], !dbg !2424
  br label %cond.end2406, !dbg !2420

cond.end2406:                                     ; preds = %cond.end2404, %cond.true2393
  %cond2407 = phi i32 [ 0, %cond.true2393 ], [ %cond2405, %cond.end2404 ], !dbg !2420
  store i32 %cond2407, i32* %mvd_ctx, align 4, !dbg !2432
  %1437 = load i32, i32* %i_me_range, align 4, !dbg !2433
  %1438 = load i32, i32* %mvd_ctx, align 4, !dbg !2434
  %idxprom2408 = sext i32 %1438 to i64, !dbg !2435
  %arrayidx2409 = getelementptr inbounds [4 x [4 x i8]], [4 x [4 x i8]]* @x264_me_search_ref.range_mul, i64 0, i64 %idxprom2408, !dbg !2435
  %1439 = load i32, i32* %sad_ctx, align 4, !dbg !2436
  %idxprom2410 = sext i32 %1439 to i64, !dbg !2435
  %arrayidx2411 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx2409, i64 0, i64 %idxprom2410, !dbg !2435
  %1440 = load i8, i8* %arrayidx2411, align 1, !dbg !2435
  %conv2412 = zext i8 %1440 to i32, !dbg !2435
  %mul2413 = mul nsw i32 %1437, %conv2412, !dbg !2437
  %shr2414 = ashr i32 %mul2413, 2, !dbg !2438
  store i32 %shr2414, i32* %i_me_range, align 4, !dbg !2439
  br label %if.end2415, !dbg !2440

if.end2415:                                       ; preds = %cond.end2406, %if.end2307
  call void @llvm.dbg.declare(metadata i32* %i2416, metadata !2441, metadata !DIExpression()), !dbg !2443
  %1441 = load i32, i32* %cross_start, align 4, !dbg !2443
  store i32 %1441, i32* %i2416, align 4, !dbg !2443
  %1442 = load i32, i32* %i_me_range, align 4, !dbg !2444
  %1443 = load i32, i32* %mv_x_max, align 4, !dbg !2444
  %1444 = load i32, i32* %omx, align 4, !dbg !2444
  %sub2417 = sub nsw i32 %1443, %1444, !dbg !2444
  %1445 = load i32, i32* %omx, align 4, !dbg !2444
  %1446 = load i32, i32* %mv_x_min, align 4, !dbg !2444
  %sub2418 = sub nsw i32 %1445, %1446, !dbg !2444
  %cmp2419 = icmp slt i32 %sub2417, %sub2418, !dbg !2444
  br i1 %cmp2419, label %cond.true2421, label %cond.false2423, !dbg !2444

cond.true2421:                                    ; preds = %if.end2415
  %1447 = load i32, i32* %mv_x_max, align 4, !dbg !2444
  %1448 = load i32, i32* %omx, align 4, !dbg !2444
  %sub2422 = sub nsw i32 %1447, %1448, !dbg !2444
  br label %cond.end2425, !dbg !2444

cond.false2423:                                   ; preds = %if.end2415
  %1449 = load i32, i32* %omx, align 4, !dbg !2444
  %1450 = load i32, i32* %mv_x_min, align 4, !dbg !2444
  %sub2424 = sub nsw i32 %1449, %1450, !dbg !2444
  br label %cond.end2425, !dbg !2444

cond.end2425:                                     ; preds = %cond.false2423, %cond.true2421
  %cond2426 = phi i32 [ %sub2422, %cond.true2421 ], [ %sub2424, %cond.false2423 ], !dbg !2444
  %cmp2427 = icmp sle i32 %1442, %cond2426, !dbg !2444
  br i1 %cmp2427, label %if.then2429, label %if.end2565, !dbg !2443

if.then2429:                                      ; preds = %cond.end2425
  br label %for.cond2430, !dbg !2444

for.cond2430:                                     ; preds = %for.inc2562, %if.then2429
  %1451 = load i32, i32* %i2416, align 4, !dbg !2446
  %1452 = load i32, i32* %i_me_range, align 4, !dbg !2446
  %sub2431 = sub nsw i32 %1452, 2, !dbg !2446
  %cmp2432 = icmp slt i32 %1451, %sub2431, !dbg !2446
  br i1 %cmp2432, label %for.body2434, label %for.end2564, !dbg !2449

for.body2434:                                     ; preds = %for.cond2430
  call void @llvm.dbg.declare(metadata i8** %pix_base2435, metadata !2450, metadata !DIExpression()), !dbg !2452
  %1453 = load i8*, i8** %p_fref_w, align 8, !dbg !2452
  %1454 = load i32, i32* %omx, align 4, !dbg !2452
  %idx.ext2436 = sext i32 %1454 to i64, !dbg !2452
  %add.ptr2437 = getelementptr inbounds i8, i8* %1453, i64 %idx.ext2436, !dbg !2452
  %1455 = load i32, i32* %omy, align 4, !dbg !2452
  %1456 = load i32, i32* %stride, align 4, !dbg !2452
  %mul2438 = mul nsw i32 %1455, %1456, !dbg !2452
  %idx.ext2439 = sext i32 %mul2438 to i64, !dbg !2452
  %add.ptr2440 = getelementptr inbounds i8, i8* %add.ptr2437, i64 %idx.ext2439, !dbg !2452
  store i8* %add.ptr2440, i8** %pix_base2435, align 8, !dbg !2452
  %1457 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2452
  %pixf2441 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1457, i32 0, i32 69, !dbg !2452
  %fpelcmp_x42442 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2441, i32 0, i32 9, !dbg !2452
  %1458 = load i32, i32* %i_pixel5, align 4, !dbg !2452
  %idxprom2443 = sext i32 %1458 to i64, !dbg !2452
  %arrayidx2444 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x42442, i64 0, i64 %idxprom2443, !dbg !2452
  %1459 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx2444, align 8, !dbg !2452
  %1460 = load i8*, i8** %p_fenc, align 8, !dbg !2452
  %1461 = load i8*, i8** %pix_base2435, align 8, !dbg !2452
  %1462 = load i32, i32* %i2416, align 4, !dbg !2452
  %idx.ext2445 = sext i32 %1462 to i64, !dbg !2452
  %add.ptr2446 = getelementptr inbounds i8, i8* %1461, i64 %idx.ext2445, !dbg !2452
  %1463 = load i32, i32* %stride, align 4, !dbg !2452
  %mul2447 = mul nsw i32 0, %1463, !dbg !2452
  %idx.ext2448 = sext i32 %mul2447 to i64, !dbg !2452
  %add.ptr2449 = getelementptr inbounds i8, i8* %add.ptr2446, i64 %idx.ext2448, !dbg !2452
  %1464 = load i8*, i8** %pix_base2435, align 8, !dbg !2452
  %1465 = load i32, i32* %i2416, align 4, !dbg !2452
  %sub2450 = sub nsw i32 0, %1465, !dbg !2452
  %idx.ext2451 = sext i32 %sub2450 to i64, !dbg !2452
  %add.ptr2452 = getelementptr inbounds i8, i8* %1464, i64 %idx.ext2451, !dbg !2452
  %1466 = load i32, i32* %stride, align 4, !dbg !2452
  %mul2453 = mul nsw i32 0, %1466, !dbg !2452
  %idx.ext2454 = sext i32 %mul2453 to i64, !dbg !2452
  %add.ptr2455 = getelementptr inbounds i8, i8* %add.ptr2452, i64 %idx.ext2454, !dbg !2452
  %1467 = load i8*, i8** %pix_base2435, align 8, !dbg !2452
  %1468 = load i32, i32* %i2416, align 4, !dbg !2452
  %add2456 = add nsw i32 %1468, 2, !dbg !2452
  %idx.ext2457 = sext i32 %add2456 to i64, !dbg !2452
  %add.ptr2458 = getelementptr inbounds i8, i8* %1467, i64 %idx.ext2457, !dbg !2452
  %1469 = load i32, i32* %stride, align 4, !dbg !2452
  %mul2459 = mul nsw i32 0, %1469, !dbg !2452
  %idx.ext2460 = sext i32 %mul2459 to i64, !dbg !2452
  %add.ptr2461 = getelementptr inbounds i8, i8* %add.ptr2458, i64 %idx.ext2460, !dbg !2452
  %1470 = load i8*, i8** %pix_base2435, align 8, !dbg !2452
  %1471 = load i32, i32* %i2416, align 4, !dbg !2452
  %sub2462 = sub nsw i32 0, %1471, !dbg !2452
  %sub2463 = sub nsw i32 %sub2462, 2, !dbg !2452
  %idx.ext2464 = sext i32 %sub2463 to i64, !dbg !2452
  %add.ptr2465 = getelementptr inbounds i8, i8* %1470, i64 %idx.ext2464, !dbg !2452
  %1472 = load i32, i32* %stride, align 4, !dbg !2452
  %mul2466 = mul nsw i32 0, %1472, !dbg !2452
  %idx.ext2467 = sext i32 %mul2466 to i64, !dbg !2452
  %add.ptr2468 = getelementptr inbounds i8, i8* %add.ptr2465, i64 %idx.ext2467, !dbg !2452
  %1473 = load i32, i32* %stride, align 4, !dbg !2452
  %arraydecay2469 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2452
  call void %1459(i8* %1460, i8* %add.ptr2449, i8* %add.ptr2455, i8* %add.ptr2461, i8* %add.ptr2468, i32 %1473, i32* %arraydecay2469), !dbg !2452
  %1474 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2452
  %1475 = load i32, i32* %omx, align 4, !dbg !2452
  %1476 = load i32, i32* %i2416, align 4, !dbg !2452
  %add2470 = add nsw i32 %1475, %1476, !dbg !2452
  %shl2471 = shl i32 %add2470, 2, !dbg !2452
  %idxprom2472 = sext i32 %shl2471 to i64, !dbg !2452
  %arrayidx2473 = getelementptr inbounds i16, i16* %1474, i64 %idxprom2472, !dbg !2452
  %1477 = load i16, i16* %arrayidx2473, align 2, !dbg !2452
  %conv2474 = zext i16 %1477 to i32, !dbg !2452
  %1478 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2452
  %1479 = load i32, i32* %omy, align 4, !dbg !2452
  %add2475 = add nsw i32 %1479, 0, !dbg !2452
  %shl2476 = shl i32 %add2475, 2, !dbg !2452
  %idxprom2477 = sext i32 %shl2476 to i64, !dbg !2452
  %arrayidx2478 = getelementptr inbounds i16, i16* %1478, i64 %idxprom2477, !dbg !2452
  %1480 = load i16, i16* %arrayidx2478, align 2, !dbg !2452
  %conv2479 = zext i16 %1480 to i32, !dbg !2452
  %add2480 = add nsw i32 %conv2474, %conv2479, !dbg !2452
  %arrayidx2481 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2452
  %1481 = load i32, i32* %arrayidx2481, align 16, !dbg !2452
  %add2482 = add nsw i32 %1481, %add2480, !dbg !2452
  store i32 %add2482, i32* %arrayidx2481, align 16, !dbg !2452
  %1482 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2452
  %1483 = load i32, i32* %omx, align 4, !dbg !2452
  %1484 = load i32, i32* %i2416, align 4, !dbg !2452
  %sub2483 = sub nsw i32 0, %1484, !dbg !2452
  %add2484 = add nsw i32 %1483, %sub2483, !dbg !2452
  %shl2485 = shl i32 %add2484, 2, !dbg !2452
  %idxprom2486 = sext i32 %shl2485 to i64, !dbg !2452
  %arrayidx2487 = getelementptr inbounds i16, i16* %1482, i64 %idxprom2486, !dbg !2452
  %1485 = load i16, i16* %arrayidx2487, align 2, !dbg !2452
  %conv2488 = zext i16 %1485 to i32, !dbg !2452
  %1486 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2452
  %1487 = load i32, i32* %omy, align 4, !dbg !2452
  %add2489 = add nsw i32 %1487, 0, !dbg !2452
  %shl2490 = shl i32 %add2489, 2, !dbg !2452
  %idxprom2491 = sext i32 %shl2490 to i64, !dbg !2452
  %arrayidx2492 = getelementptr inbounds i16, i16* %1486, i64 %idxprom2491, !dbg !2452
  %1488 = load i16, i16* %arrayidx2492, align 2, !dbg !2452
  %conv2493 = zext i16 %1488 to i32, !dbg !2452
  %add2494 = add nsw i32 %conv2488, %conv2493, !dbg !2452
  %arrayidx2495 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2452
  %1489 = load i32, i32* %arrayidx2495, align 4, !dbg !2452
  %add2496 = add nsw i32 %1489, %add2494, !dbg !2452
  store i32 %add2496, i32* %arrayidx2495, align 4, !dbg !2452
  %1490 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2452
  %1491 = load i32, i32* %omx, align 4, !dbg !2452
  %1492 = load i32, i32* %i2416, align 4, !dbg !2452
  %add2497 = add nsw i32 %1492, 2, !dbg !2452
  %add2498 = add nsw i32 %1491, %add2497, !dbg !2452
  %shl2499 = shl i32 %add2498, 2, !dbg !2452
  %idxprom2500 = sext i32 %shl2499 to i64, !dbg !2452
  %arrayidx2501 = getelementptr inbounds i16, i16* %1490, i64 %idxprom2500, !dbg !2452
  %1493 = load i16, i16* %arrayidx2501, align 2, !dbg !2452
  %conv2502 = zext i16 %1493 to i32, !dbg !2452
  %1494 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2452
  %1495 = load i32, i32* %omy, align 4, !dbg !2452
  %add2503 = add nsw i32 %1495, 0, !dbg !2452
  %shl2504 = shl i32 %add2503, 2, !dbg !2452
  %idxprom2505 = sext i32 %shl2504 to i64, !dbg !2452
  %arrayidx2506 = getelementptr inbounds i16, i16* %1494, i64 %idxprom2505, !dbg !2452
  %1496 = load i16, i16* %arrayidx2506, align 2, !dbg !2452
  %conv2507 = zext i16 %1496 to i32, !dbg !2452
  %add2508 = add nsw i32 %conv2502, %conv2507, !dbg !2452
  %arrayidx2509 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2452
  %1497 = load i32, i32* %arrayidx2509, align 8, !dbg !2452
  %add2510 = add nsw i32 %1497, %add2508, !dbg !2452
  store i32 %add2510, i32* %arrayidx2509, align 8, !dbg !2452
  %1498 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2452
  %1499 = load i32, i32* %omx, align 4, !dbg !2452
  %1500 = load i32, i32* %i2416, align 4, !dbg !2452
  %sub2511 = sub nsw i32 0, %1500, !dbg !2452
  %sub2512 = sub nsw i32 %sub2511, 2, !dbg !2452
  %add2513 = add nsw i32 %1499, %sub2512, !dbg !2452
  %shl2514 = shl i32 %add2513, 2, !dbg !2452
  %idxprom2515 = sext i32 %shl2514 to i64, !dbg !2452
  %arrayidx2516 = getelementptr inbounds i16, i16* %1498, i64 %idxprom2515, !dbg !2452
  %1501 = load i16, i16* %arrayidx2516, align 2, !dbg !2452
  %conv2517 = zext i16 %1501 to i32, !dbg !2452
  %1502 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2452
  %1503 = load i32, i32* %omy, align 4, !dbg !2452
  %add2518 = add nsw i32 %1503, 0, !dbg !2452
  %shl2519 = shl i32 %add2518, 2, !dbg !2452
  %idxprom2520 = sext i32 %shl2519 to i64, !dbg !2452
  %arrayidx2521 = getelementptr inbounds i16, i16* %1502, i64 %idxprom2520, !dbg !2452
  %1504 = load i16, i16* %arrayidx2521, align 2, !dbg !2452
  %conv2522 = zext i16 %1504 to i32, !dbg !2452
  %add2523 = add nsw i32 %conv2517, %conv2522, !dbg !2452
  %arrayidx2524 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2452
  %1505 = load i32, i32* %arrayidx2524, align 4, !dbg !2452
  %add2525 = add nsw i32 %1505, %add2523, !dbg !2452
  store i32 %add2525, i32* %arrayidx2524, align 4, !dbg !2452
  %arrayidx2526 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2453
  %1506 = load i32, i32* %arrayidx2526, align 16, !dbg !2453
  %1507 = load i32, i32* %bcost, align 4, !dbg !2453
  %cmp2527 = icmp slt i32 %1506, %1507, !dbg !2453
  br i1 %cmp2527, label %if.then2529, label %if.end2533, !dbg !2452

if.then2529:                                      ; preds = %for.body2434
  %arrayidx2530 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2455
  %1508 = load i32, i32* %arrayidx2530, align 16, !dbg !2455
  store i32 %1508, i32* %bcost, align 4, !dbg !2455
  %1509 = load i32, i32* %omx, align 4, !dbg !2455
  %1510 = load i32, i32* %i2416, align 4, !dbg !2455
  %add2531 = add nsw i32 %1509, %1510, !dbg !2455
  store i32 %add2531, i32* %bmx, align 4, !dbg !2455
  %1511 = load i32, i32* %omy, align 4, !dbg !2455
  %add2532 = add nsw i32 %1511, 0, !dbg !2455
  store i32 %add2532, i32* %bmy, align 4, !dbg !2455
  br label %if.end2533, !dbg !2455

if.end2533:                                       ; preds = %if.then2529, %for.body2434
  %arrayidx2534 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2457
  %1512 = load i32, i32* %arrayidx2534, align 4, !dbg !2457
  %1513 = load i32, i32* %bcost, align 4, !dbg !2457
  %cmp2535 = icmp slt i32 %1512, %1513, !dbg !2457
  br i1 %cmp2535, label %if.then2537, label %if.end2542, !dbg !2452

if.then2537:                                      ; preds = %if.end2533
  %arrayidx2538 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2459
  %1514 = load i32, i32* %arrayidx2538, align 4, !dbg !2459
  store i32 %1514, i32* %bcost, align 4, !dbg !2459
  %1515 = load i32, i32* %omx, align 4, !dbg !2459
  %1516 = load i32, i32* %i2416, align 4, !dbg !2459
  %sub2539 = sub nsw i32 0, %1516, !dbg !2459
  %add2540 = add nsw i32 %1515, %sub2539, !dbg !2459
  store i32 %add2540, i32* %bmx, align 4, !dbg !2459
  %1517 = load i32, i32* %omy, align 4, !dbg !2459
  %add2541 = add nsw i32 %1517, 0, !dbg !2459
  store i32 %add2541, i32* %bmy, align 4, !dbg !2459
  br label %if.end2542, !dbg !2459

if.end2542:                                       ; preds = %if.then2537, %if.end2533
  %arrayidx2543 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2461
  %1518 = load i32, i32* %arrayidx2543, align 8, !dbg !2461
  %1519 = load i32, i32* %bcost, align 4, !dbg !2461
  %cmp2544 = icmp slt i32 %1518, %1519, !dbg !2461
  br i1 %cmp2544, label %if.then2546, label %if.end2551, !dbg !2452

if.then2546:                                      ; preds = %if.end2542
  %arrayidx2547 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2463
  %1520 = load i32, i32* %arrayidx2547, align 8, !dbg !2463
  store i32 %1520, i32* %bcost, align 4, !dbg !2463
  %1521 = load i32, i32* %omx, align 4, !dbg !2463
  %1522 = load i32, i32* %i2416, align 4, !dbg !2463
  %add2548 = add nsw i32 %1522, 2, !dbg !2463
  %add2549 = add nsw i32 %1521, %add2548, !dbg !2463
  store i32 %add2549, i32* %bmx, align 4, !dbg !2463
  %1523 = load i32, i32* %omy, align 4, !dbg !2463
  %add2550 = add nsw i32 %1523, 0, !dbg !2463
  store i32 %add2550, i32* %bmy, align 4, !dbg !2463
  br label %if.end2551, !dbg !2463

if.end2551:                                       ; preds = %if.then2546, %if.end2542
  %arrayidx2552 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2465
  %1524 = load i32, i32* %arrayidx2552, align 4, !dbg !2465
  %1525 = load i32, i32* %bcost, align 4, !dbg !2465
  %cmp2553 = icmp slt i32 %1524, %1525, !dbg !2465
  br i1 %cmp2553, label %if.then2555, label %if.end2561, !dbg !2452

if.then2555:                                      ; preds = %if.end2551
  %arrayidx2556 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2467
  %1526 = load i32, i32* %arrayidx2556, align 4, !dbg !2467
  store i32 %1526, i32* %bcost, align 4, !dbg !2467
  %1527 = load i32, i32* %omx, align 4, !dbg !2467
  %1528 = load i32, i32* %i2416, align 4, !dbg !2467
  %sub2557 = sub nsw i32 0, %1528, !dbg !2467
  %sub2558 = sub nsw i32 %sub2557, 2, !dbg !2467
  %add2559 = add nsw i32 %1527, %sub2558, !dbg !2467
  store i32 %add2559, i32* %bmx, align 4, !dbg !2467
  %1529 = load i32, i32* %omy, align 4, !dbg !2467
  %add2560 = add nsw i32 %1529, 0, !dbg !2467
  store i32 %add2560, i32* %bmy, align 4, !dbg !2467
  br label %if.end2561, !dbg !2467

if.end2561:                                       ; preds = %if.then2555, %if.end2551
  br label %for.inc2562, !dbg !2452

for.inc2562:                                      ; preds = %if.end2561
  %1530 = load i32, i32* %i2416, align 4, !dbg !2446
  %add2563 = add nsw i32 %1530, 4, !dbg !2446
  store i32 %add2563, i32* %i2416, align 4, !dbg !2446
  br label %for.cond2430, !dbg !2446, !llvm.loop !2469

for.end2564:                                      ; preds = %for.cond2430
  br label %if.end2565, !dbg !2449

if.end2565:                                       ; preds = %for.end2564, %cond.end2425
  br label %for.cond2566, !dbg !2443

for.cond2566:                                     ; preds = %for.inc2634, %if.end2565
  %1531 = load i32, i32* %i2416, align 4, !dbg !2470
  %1532 = load i32, i32* %i_me_range, align 4, !dbg !2470
  %cmp2567 = icmp slt i32 %1531, %1532, !dbg !2470
  br i1 %cmp2567, label %for.body2569, label %for.end2636, !dbg !2473

for.body2569:                                     ; preds = %for.cond2566
  %1533 = load i32, i32* %omx, align 4, !dbg !2474
  %1534 = load i32, i32* %i2416, align 4, !dbg !2474
  %add2570 = add nsw i32 %1533, %1534, !dbg !2474
  %1535 = load i32, i32* %mv_x_max, align 4, !dbg !2474
  %cmp2571 = icmp sle i32 %add2570, %1535, !dbg !2474
  br i1 %cmp2571, label %if.then2573, label %if.end2601, !dbg !2477

if.then2573:                                      ; preds = %for.body2569
  call void @llvm.dbg.declare(metadata i32* %cost2574, metadata !2478, metadata !DIExpression()), !dbg !2480
  %1536 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2480
  %pixf2575 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1536, i32 0, i32 69, !dbg !2480
  %fpelcmp2576 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2575, i32 0, i32 7, !dbg !2480
  %1537 = load i32, i32* %i_pixel5, align 4, !dbg !2480
  %idxprom2577 = sext i32 %1537 to i64, !dbg !2480
  %arrayidx2578 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2576, i64 0, i64 %idxprom2577, !dbg !2480
  %1538 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2578, align 8, !dbg !2480
  %1539 = load i8*, i8** %p_fenc, align 8, !dbg !2480
  %1540 = load i8*, i8** %p_fref_w, align 8, !dbg !2480
  %1541 = load i32, i32* %omy, align 4, !dbg !2480
  %1542 = load i32, i32* %stride, align 4, !dbg !2480
  %mul2579 = mul nsw i32 %1541, %1542, !dbg !2480
  %1543 = load i32, i32* %omx, align 4, !dbg !2480
  %1544 = load i32, i32* %i2416, align 4, !dbg !2480
  %add2580 = add nsw i32 %1543, %1544, !dbg !2480
  %add2581 = add nsw i32 %mul2579, %add2580, !dbg !2480
  %idxprom2582 = sext i32 %add2581 to i64, !dbg !2480
  %arrayidx2583 = getelementptr inbounds i8, i8* %1540, i64 %idxprom2582, !dbg !2480
  %1545 = load i32, i32* %stride, align 4, !dbg !2480
  %call2584 = call i32 %1538(i8* %1539, i32 16, i8* %arrayidx2583, i32 %1545), !dbg !2480
  %1546 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2480
  %1547 = load i32, i32* %omx, align 4, !dbg !2480
  %1548 = load i32, i32* %i2416, align 4, !dbg !2480
  %add2585 = add nsw i32 %1547, %1548, !dbg !2480
  %shl2586 = shl i32 %add2585, 2, !dbg !2480
  %idxprom2587 = sext i32 %shl2586 to i64, !dbg !2480
  %arrayidx2588 = getelementptr inbounds i16, i16* %1546, i64 %idxprom2587, !dbg !2480
  %1549 = load i16, i16* %arrayidx2588, align 2, !dbg !2480
  %conv2589 = zext i16 %1549 to i32, !dbg !2480
  %1550 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2480
  %1551 = load i32, i32* %omy, align 4, !dbg !2480
  %shl2590 = shl i32 %1551, 2, !dbg !2480
  %idxprom2591 = sext i32 %shl2590 to i64, !dbg !2480
  %arrayidx2592 = getelementptr inbounds i16, i16* %1550, i64 %idxprom2591, !dbg !2480
  %1552 = load i16, i16* %arrayidx2592, align 2, !dbg !2480
  %conv2593 = zext i16 %1552 to i32, !dbg !2480
  %add2594 = add nsw i32 %conv2589, %conv2593, !dbg !2480
  %add2595 = add nsw i32 %call2584, %add2594, !dbg !2480
  store i32 %add2595, i32* %cost2574, align 4, !dbg !2480
  %1553 = load i32, i32* %cost2574, align 4, !dbg !2481
  %1554 = load i32, i32* %bcost, align 4, !dbg !2481
  %cmp2596 = icmp slt i32 %1553, %1554, !dbg !2481
  br i1 %cmp2596, label %if.then2598, label %if.end2600, !dbg !2480

if.then2598:                                      ; preds = %if.then2573
  %1555 = load i32, i32* %cost2574, align 4, !dbg !2483
  store i32 %1555, i32* %bcost, align 4, !dbg !2483
  %1556 = load i32, i32* %omx, align 4, !dbg !2483
  %1557 = load i32, i32* %i2416, align 4, !dbg !2483
  %add2599 = add nsw i32 %1556, %1557, !dbg !2483
  store i32 %add2599, i32* %bmx, align 4, !dbg !2483
  %1558 = load i32, i32* %omy, align 4, !dbg !2483
  store i32 %1558, i32* %bmy, align 4, !dbg !2483
  br label %if.end2600, !dbg !2483

if.end2600:                                       ; preds = %if.then2598, %if.then2573
  br label %if.end2601, !dbg !2480

if.end2601:                                       ; preds = %if.end2600, %for.body2569
  %1559 = load i32, i32* %omx, align 4, !dbg !2485
  %1560 = load i32, i32* %i2416, align 4, !dbg !2485
  %sub2602 = sub nsw i32 %1559, %1560, !dbg !2485
  %1561 = load i32, i32* %mv_x_min, align 4, !dbg !2485
  %cmp2603 = icmp sge i32 %sub2602, %1561, !dbg !2485
  br i1 %cmp2603, label %if.then2605, label %if.end2633, !dbg !2477

if.then2605:                                      ; preds = %if.end2601
  call void @llvm.dbg.declare(metadata i32* %cost2606, metadata !2487, metadata !DIExpression()), !dbg !2489
  %1562 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2489
  %pixf2607 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1562, i32 0, i32 69, !dbg !2489
  %fpelcmp2608 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2607, i32 0, i32 7, !dbg !2489
  %1563 = load i32, i32* %i_pixel5, align 4, !dbg !2489
  %idxprom2609 = sext i32 %1563 to i64, !dbg !2489
  %arrayidx2610 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2608, i64 0, i64 %idxprom2609, !dbg !2489
  %1564 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2610, align 8, !dbg !2489
  %1565 = load i8*, i8** %p_fenc, align 8, !dbg !2489
  %1566 = load i8*, i8** %p_fref_w, align 8, !dbg !2489
  %1567 = load i32, i32* %omy, align 4, !dbg !2489
  %1568 = load i32, i32* %stride, align 4, !dbg !2489
  %mul2611 = mul nsw i32 %1567, %1568, !dbg !2489
  %1569 = load i32, i32* %omx, align 4, !dbg !2489
  %1570 = load i32, i32* %i2416, align 4, !dbg !2489
  %sub2612 = sub nsw i32 %1569, %1570, !dbg !2489
  %add2613 = add nsw i32 %mul2611, %sub2612, !dbg !2489
  %idxprom2614 = sext i32 %add2613 to i64, !dbg !2489
  %arrayidx2615 = getelementptr inbounds i8, i8* %1566, i64 %idxprom2614, !dbg !2489
  %1571 = load i32, i32* %stride, align 4, !dbg !2489
  %call2616 = call i32 %1564(i8* %1565, i32 16, i8* %arrayidx2615, i32 %1571), !dbg !2489
  %1572 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2489
  %1573 = load i32, i32* %omx, align 4, !dbg !2489
  %1574 = load i32, i32* %i2416, align 4, !dbg !2489
  %sub2617 = sub nsw i32 %1573, %1574, !dbg !2489
  %shl2618 = shl i32 %sub2617, 2, !dbg !2489
  %idxprom2619 = sext i32 %shl2618 to i64, !dbg !2489
  %arrayidx2620 = getelementptr inbounds i16, i16* %1572, i64 %idxprom2619, !dbg !2489
  %1575 = load i16, i16* %arrayidx2620, align 2, !dbg !2489
  %conv2621 = zext i16 %1575 to i32, !dbg !2489
  %1576 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2489
  %1577 = load i32, i32* %omy, align 4, !dbg !2489
  %shl2622 = shl i32 %1577, 2, !dbg !2489
  %idxprom2623 = sext i32 %shl2622 to i64, !dbg !2489
  %arrayidx2624 = getelementptr inbounds i16, i16* %1576, i64 %idxprom2623, !dbg !2489
  %1578 = load i16, i16* %arrayidx2624, align 2, !dbg !2489
  %conv2625 = zext i16 %1578 to i32, !dbg !2489
  %add2626 = add nsw i32 %conv2621, %conv2625, !dbg !2489
  %add2627 = add nsw i32 %call2616, %add2626, !dbg !2489
  store i32 %add2627, i32* %cost2606, align 4, !dbg !2489
  %1579 = load i32, i32* %cost2606, align 4, !dbg !2490
  %1580 = load i32, i32* %bcost, align 4, !dbg !2490
  %cmp2628 = icmp slt i32 %1579, %1580, !dbg !2490
  br i1 %cmp2628, label %if.then2630, label %if.end2632, !dbg !2489

if.then2630:                                      ; preds = %if.then2605
  %1581 = load i32, i32* %cost2606, align 4, !dbg !2492
  store i32 %1581, i32* %bcost, align 4, !dbg !2492
  %1582 = load i32, i32* %omx, align 4, !dbg !2492
  %1583 = load i32, i32* %i2416, align 4, !dbg !2492
  %sub2631 = sub nsw i32 %1582, %1583, !dbg !2492
  store i32 %sub2631, i32* %bmx, align 4, !dbg !2492
  %1584 = load i32, i32* %omy, align 4, !dbg !2492
  store i32 %1584, i32* %bmy, align 4, !dbg !2492
  br label %if.end2632, !dbg !2492

if.end2632:                                       ; preds = %if.then2630, %if.then2605
  br label %if.end2633, !dbg !2489

if.end2633:                                       ; preds = %if.end2632, %if.end2601
  br label %for.inc2634, !dbg !2477

for.inc2634:                                      ; preds = %if.end2633
  %1585 = load i32, i32* %i2416, align 4, !dbg !2470
  %add2635 = add nsw i32 %1585, 2, !dbg !2470
  store i32 %add2635, i32* %i2416, align 4, !dbg !2470
  br label %for.cond2566, !dbg !2470, !llvm.loop !2494

for.end2636:                                      ; preds = %for.cond2566
  %1586 = load i32, i32* %cross_start, align 4, !dbg !2443
  store i32 %1586, i32* %i2416, align 4, !dbg !2443
  %1587 = load i32, i32* %i_me_range, align 4, !dbg !2495
  %shr2637 = ashr i32 %1587, 1, !dbg !2495
  %1588 = load i32, i32* %mv_y_max, align 4, !dbg !2495
  %1589 = load i32, i32* %omy, align 4, !dbg !2495
  %sub2638 = sub nsw i32 %1588, %1589, !dbg !2495
  %1590 = load i32, i32* %omy, align 4, !dbg !2495
  %1591 = load i32, i32* %mv_y_min, align 4, !dbg !2495
  %sub2639 = sub nsw i32 %1590, %1591, !dbg !2495
  %cmp2640 = icmp slt i32 %sub2638, %sub2639, !dbg !2495
  br i1 %cmp2640, label %cond.true2642, label %cond.false2644, !dbg !2495

cond.true2642:                                    ; preds = %for.end2636
  %1592 = load i32, i32* %mv_y_max, align 4, !dbg !2495
  %1593 = load i32, i32* %omy, align 4, !dbg !2495
  %sub2643 = sub nsw i32 %1592, %1593, !dbg !2495
  br label %cond.end2646, !dbg !2495

cond.false2644:                                   ; preds = %for.end2636
  %1594 = load i32, i32* %omy, align 4, !dbg !2495
  %1595 = load i32, i32* %mv_y_min, align 4, !dbg !2495
  %sub2645 = sub nsw i32 %1594, %1595, !dbg !2495
  br label %cond.end2646, !dbg !2495

cond.end2646:                                     ; preds = %cond.false2644, %cond.true2642
  %cond2647 = phi i32 [ %sub2643, %cond.true2642 ], [ %sub2645, %cond.false2644 ], !dbg !2495
  %cmp2648 = icmp sle i32 %shr2637, %cond2647, !dbg !2495
  br i1 %cmp2648, label %if.then2650, label %if.end2783, !dbg !2443

if.then2650:                                      ; preds = %cond.end2646
  br label %for.cond2651, !dbg !2495

for.cond2651:                                     ; preds = %for.inc2780, %if.then2650
  %1596 = load i32, i32* %i2416, align 4, !dbg !2497
  %1597 = load i32, i32* %i_me_range, align 4, !dbg !2497
  %shr2652 = ashr i32 %1597, 1, !dbg !2497
  %sub2653 = sub nsw i32 %shr2652, 2, !dbg !2497
  %cmp2654 = icmp slt i32 %1596, %sub2653, !dbg !2497
  br i1 %cmp2654, label %for.body2656, label %for.end2782, !dbg !2500

for.body2656:                                     ; preds = %for.cond2651
  call void @llvm.dbg.declare(metadata i8** %pix_base2657, metadata !2501, metadata !DIExpression()), !dbg !2503
  %1598 = load i8*, i8** %p_fref_w, align 8, !dbg !2503
  %1599 = load i32, i32* %omx, align 4, !dbg !2503
  %idx.ext2658 = sext i32 %1599 to i64, !dbg !2503
  %add.ptr2659 = getelementptr inbounds i8, i8* %1598, i64 %idx.ext2658, !dbg !2503
  %1600 = load i32, i32* %omy, align 4, !dbg !2503
  %1601 = load i32, i32* %stride, align 4, !dbg !2503
  %mul2660 = mul nsw i32 %1600, %1601, !dbg !2503
  %idx.ext2661 = sext i32 %mul2660 to i64, !dbg !2503
  %add.ptr2662 = getelementptr inbounds i8, i8* %add.ptr2659, i64 %idx.ext2661, !dbg !2503
  store i8* %add.ptr2662, i8** %pix_base2657, align 8, !dbg !2503
  %1602 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2503
  %pixf2663 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1602, i32 0, i32 69, !dbg !2503
  %fpelcmp_x42664 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2663, i32 0, i32 9, !dbg !2503
  %1603 = load i32, i32* %i_pixel5, align 4, !dbg !2503
  %idxprom2665 = sext i32 %1603 to i64, !dbg !2503
  %arrayidx2666 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x42664, i64 0, i64 %idxprom2665, !dbg !2503
  %1604 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx2666, align 8, !dbg !2503
  %1605 = load i8*, i8** %p_fenc, align 8, !dbg !2503
  %1606 = load i8*, i8** %pix_base2657, align 8, !dbg !2503
  %add.ptr2667 = getelementptr inbounds i8, i8* %1606, i64 0, !dbg !2503
  %1607 = load i32, i32* %i2416, align 4, !dbg !2503
  %1608 = load i32, i32* %stride, align 4, !dbg !2503
  %mul2668 = mul nsw i32 %1607, %1608, !dbg !2503
  %idx.ext2669 = sext i32 %mul2668 to i64, !dbg !2503
  %add.ptr2670 = getelementptr inbounds i8, i8* %add.ptr2667, i64 %idx.ext2669, !dbg !2503
  %1609 = load i8*, i8** %pix_base2657, align 8, !dbg !2503
  %add.ptr2671 = getelementptr inbounds i8, i8* %1609, i64 0, !dbg !2503
  %1610 = load i32, i32* %i2416, align 4, !dbg !2503
  %sub2672 = sub nsw i32 0, %1610, !dbg !2503
  %1611 = load i32, i32* %stride, align 4, !dbg !2503
  %mul2673 = mul nsw i32 %sub2672, %1611, !dbg !2503
  %idx.ext2674 = sext i32 %mul2673 to i64, !dbg !2503
  %add.ptr2675 = getelementptr inbounds i8, i8* %add.ptr2671, i64 %idx.ext2674, !dbg !2503
  %1612 = load i8*, i8** %pix_base2657, align 8, !dbg !2503
  %add.ptr2676 = getelementptr inbounds i8, i8* %1612, i64 0, !dbg !2503
  %1613 = load i32, i32* %i2416, align 4, !dbg !2503
  %add2677 = add nsw i32 %1613, 2, !dbg !2503
  %1614 = load i32, i32* %stride, align 4, !dbg !2503
  %mul2678 = mul nsw i32 %add2677, %1614, !dbg !2503
  %idx.ext2679 = sext i32 %mul2678 to i64, !dbg !2503
  %add.ptr2680 = getelementptr inbounds i8, i8* %add.ptr2676, i64 %idx.ext2679, !dbg !2503
  %1615 = load i8*, i8** %pix_base2657, align 8, !dbg !2503
  %add.ptr2681 = getelementptr inbounds i8, i8* %1615, i64 0, !dbg !2503
  %1616 = load i32, i32* %i2416, align 4, !dbg !2503
  %sub2682 = sub nsw i32 0, %1616, !dbg !2503
  %sub2683 = sub nsw i32 %sub2682, 2, !dbg !2503
  %1617 = load i32, i32* %stride, align 4, !dbg !2503
  %mul2684 = mul nsw i32 %sub2683, %1617, !dbg !2503
  %idx.ext2685 = sext i32 %mul2684 to i64, !dbg !2503
  %add.ptr2686 = getelementptr inbounds i8, i8* %add.ptr2681, i64 %idx.ext2685, !dbg !2503
  %1618 = load i32, i32* %stride, align 4, !dbg !2503
  %arraydecay2687 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2503
  call void %1604(i8* %1605, i8* %add.ptr2670, i8* %add.ptr2675, i8* %add.ptr2680, i8* %add.ptr2686, i32 %1618, i32* %arraydecay2687), !dbg !2503
  %1619 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2503
  %1620 = load i32, i32* %omx, align 4, !dbg !2503
  %add2688 = add nsw i32 %1620, 0, !dbg !2503
  %shl2689 = shl i32 %add2688, 2, !dbg !2503
  %idxprom2690 = sext i32 %shl2689 to i64, !dbg !2503
  %arrayidx2691 = getelementptr inbounds i16, i16* %1619, i64 %idxprom2690, !dbg !2503
  %1621 = load i16, i16* %arrayidx2691, align 2, !dbg !2503
  %conv2692 = zext i16 %1621 to i32, !dbg !2503
  %1622 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2503
  %1623 = load i32, i32* %omy, align 4, !dbg !2503
  %1624 = load i32, i32* %i2416, align 4, !dbg !2503
  %add2693 = add nsw i32 %1623, %1624, !dbg !2503
  %shl2694 = shl i32 %add2693, 2, !dbg !2503
  %idxprom2695 = sext i32 %shl2694 to i64, !dbg !2503
  %arrayidx2696 = getelementptr inbounds i16, i16* %1622, i64 %idxprom2695, !dbg !2503
  %1625 = load i16, i16* %arrayidx2696, align 2, !dbg !2503
  %conv2697 = zext i16 %1625 to i32, !dbg !2503
  %add2698 = add nsw i32 %conv2692, %conv2697, !dbg !2503
  %arrayidx2699 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2503
  %1626 = load i32, i32* %arrayidx2699, align 16, !dbg !2503
  %add2700 = add nsw i32 %1626, %add2698, !dbg !2503
  store i32 %add2700, i32* %arrayidx2699, align 16, !dbg !2503
  %1627 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2503
  %1628 = load i32, i32* %omx, align 4, !dbg !2503
  %add2701 = add nsw i32 %1628, 0, !dbg !2503
  %shl2702 = shl i32 %add2701, 2, !dbg !2503
  %idxprom2703 = sext i32 %shl2702 to i64, !dbg !2503
  %arrayidx2704 = getelementptr inbounds i16, i16* %1627, i64 %idxprom2703, !dbg !2503
  %1629 = load i16, i16* %arrayidx2704, align 2, !dbg !2503
  %conv2705 = zext i16 %1629 to i32, !dbg !2503
  %1630 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2503
  %1631 = load i32, i32* %omy, align 4, !dbg !2503
  %1632 = load i32, i32* %i2416, align 4, !dbg !2503
  %sub2706 = sub nsw i32 0, %1632, !dbg !2503
  %add2707 = add nsw i32 %1631, %sub2706, !dbg !2503
  %shl2708 = shl i32 %add2707, 2, !dbg !2503
  %idxprom2709 = sext i32 %shl2708 to i64, !dbg !2503
  %arrayidx2710 = getelementptr inbounds i16, i16* %1630, i64 %idxprom2709, !dbg !2503
  %1633 = load i16, i16* %arrayidx2710, align 2, !dbg !2503
  %conv2711 = zext i16 %1633 to i32, !dbg !2503
  %add2712 = add nsw i32 %conv2705, %conv2711, !dbg !2503
  %arrayidx2713 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2503
  %1634 = load i32, i32* %arrayidx2713, align 4, !dbg !2503
  %add2714 = add nsw i32 %1634, %add2712, !dbg !2503
  store i32 %add2714, i32* %arrayidx2713, align 4, !dbg !2503
  %1635 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2503
  %1636 = load i32, i32* %omx, align 4, !dbg !2503
  %add2715 = add nsw i32 %1636, 0, !dbg !2503
  %shl2716 = shl i32 %add2715, 2, !dbg !2503
  %idxprom2717 = sext i32 %shl2716 to i64, !dbg !2503
  %arrayidx2718 = getelementptr inbounds i16, i16* %1635, i64 %idxprom2717, !dbg !2503
  %1637 = load i16, i16* %arrayidx2718, align 2, !dbg !2503
  %conv2719 = zext i16 %1637 to i32, !dbg !2503
  %1638 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2503
  %1639 = load i32, i32* %omy, align 4, !dbg !2503
  %1640 = load i32, i32* %i2416, align 4, !dbg !2503
  %add2720 = add nsw i32 %1640, 2, !dbg !2503
  %add2721 = add nsw i32 %1639, %add2720, !dbg !2503
  %shl2722 = shl i32 %add2721, 2, !dbg !2503
  %idxprom2723 = sext i32 %shl2722 to i64, !dbg !2503
  %arrayidx2724 = getelementptr inbounds i16, i16* %1638, i64 %idxprom2723, !dbg !2503
  %1641 = load i16, i16* %arrayidx2724, align 2, !dbg !2503
  %conv2725 = zext i16 %1641 to i32, !dbg !2503
  %add2726 = add nsw i32 %conv2719, %conv2725, !dbg !2503
  %arrayidx2727 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2503
  %1642 = load i32, i32* %arrayidx2727, align 8, !dbg !2503
  %add2728 = add nsw i32 %1642, %add2726, !dbg !2503
  store i32 %add2728, i32* %arrayidx2727, align 8, !dbg !2503
  %1643 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2503
  %1644 = load i32, i32* %omx, align 4, !dbg !2503
  %add2729 = add nsw i32 %1644, 0, !dbg !2503
  %shl2730 = shl i32 %add2729, 2, !dbg !2503
  %idxprom2731 = sext i32 %shl2730 to i64, !dbg !2503
  %arrayidx2732 = getelementptr inbounds i16, i16* %1643, i64 %idxprom2731, !dbg !2503
  %1645 = load i16, i16* %arrayidx2732, align 2, !dbg !2503
  %conv2733 = zext i16 %1645 to i32, !dbg !2503
  %1646 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2503
  %1647 = load i32, i32* %omy, align 4, !dbg !2503
  %1648 = load i32, i32* %i2416, align 4, !dbg !2503
  %sub2734 = sub nsw i32 0, %1648, !dbg !2503
  %sub2735 = sub nsw i32 %sub2734, 2, !dbg !2503
  %add2736 = add nsw i32 %1647, %sub2735, !dbg !2503
  %shl2737 = shl i32 %add2736, 2, !dbg !2503
  %idxprom2738 = sext i32 %shl2737 to i64, !dbg !2503
  %arrayidx2739 = getelementptr inbounds i16, i16* %1646, i64 %idxprom2738, !dbg !2503
  %1649 = load i16, i16* %arrayidx2739, align 2, !dbg !2503
  %conv2740 = zext i16 %1649 to i32, !dbg !2503
  %add2741 = add nsw i32 %conv2733, %conv2740, !dbg !2503
  %arrayidx2742 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2503
  %1650 = load i32, i32* %arrayidx2742, align 4, !dbg !2503
  %add2743 = add nsw i32 %1650, %add2741, !dbg !2503
  store i32 %add2743, i32* %arrayidx2742, align 4, !dbg !2503
  %arrayidx2744 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2504
  %1651 = load i32, i32* %arrayidx2744, align 16, !dbg !2504
  %1652 = load i32, i32* %bcost, align 4, !dbg !2504
  %cmp2745 = icmp slt i32 %1651, %1652, !dbg !2504
  br i1 %cmp2745, label %if.then2747, label %if.end2751, !dbg !2503

if.then2747:                                      ; preds = %for.body2656
  %arrayidx2748 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2506
  %1653 = load i32, i32* %arrayidx2748, align 16, !dbg !2506
  store i32 %1653, i32* %bcost, align 4, !dbg !2506
  %1654 = load i32, i32* %omx, align 4, !dbg !2506
  %add2749 = add nsw i32 %1654, 0, !dbg !2506
  store i32 %add2749, i32* %bmx, align 4, !dbg !2506
  %1655 = load i32, i32* %omy, align 4, !dbg !2506
  %1656 = load i32, i32* %i2416, align 4, !dbg !2506
  %add2750 = add nsw i32 %1655, %1656, !dbg !2506
  store i32 %add2750, i32* %bmy, align 4, !dbg !2506
  br label %if.end2751, !dbg !2506

if.end2751:                                       ; preds = %if.then2747, %for.body2656
  %arrayidx2752 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2508
  %1657 = load i32, i32* %arrayidx2752, align 4, !dbg !2508
  %1658 = load i32, i32* %bcost, align 4, !dbg !2508
  %cmp2753 = icmp slt i32 %1657, %1658, !dbg !2508
  br i1 %cmp2753, label %if.then2755, label %if.end2760, !dbg !2503

if.then2755:                                      ; preds = %if.end2751
  %arrayidx2756 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2510
  %1659 = load i32, i32* %arrayidx2756, align 4, !dbg !2510
  store i32 %1659, i32* %bcost, align 4, !dbg !2510
  %1660 = load i32, i32* %omx, align 4, !dbg !2510
  %add2757 = add nsw i32 %1660, 0, !dbg !2510
  store i32 %add2757, i32* %bmx, align 4, !dbg !2510
  %1661 = load i32, i32* %omy, align 4, !dbg !2510
  %1662 = load i32, i32* %i2416, align 4, !dbg !2510
  %sub2758 = sub nsw i32 0, %1662, !dbg !2510
  %add2759 = add nsw i32 %1661, %sub2758, !dbg !2510
  store i32 %add2759, i32* %bmy, align 4, !dbg !2510
  br label %if.end2760, !dbg !2510

if.end2760:                                       ; preds = %if.then2755, %if.end2751
  %arrayidx2761 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2512
  %1663 = load i32, i32* %arrayidx2761, align 8, !dbg !2512
  %1664 = load i32, i32* %bcost, align 4, !dbg !2512
  %cmp2762 = icmp slt i32 %1663, %1664, !dbg !2512
  br i1 %cmp2762, label %if.then2764, label %if.end2769, !dbg !2503

if.then2764:                                      ; preds = %if.end2760
  %arrayidx2765 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2514
  %1665 = load i32, i32* %arrayidx2765, align 8, !dbg !2514
  store i32 %1665, i32* %bcost, align 4, !dbg !2514
  %1666 = load i32, i32* %omx, align 4, !dbg !2514
  %add2766 = add nsw i32 %1666, 0, !dbg !2514
  store i32 %add2766, i32* %bmx, align 4, !dbg !2514
  %1667 = load i32, i32* %omy, align 4, !dbg !2514
  %1668 = load i32, i32* %i2416, align 4, !dbg !2514
  %add2767 = add nsw i32 %1668, 2, !dbg !2514
  %add2768 = add nsw i32 %1667, %add2767, !dbg !2514
  store i32 %add2768, i32* %bmy, align 4, !dbg !2514
  br label %if.end2769, !dbg !2514

if.end2769:                                       ; preds = %if.then2764, %if.end2760
  %arrayidx2770 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2516
  %1669 = load i32, i32* %arrayidx2770, align 4, !dbg !2516
  %1670 = load i32, i32* %bcost, align 4, !dbg !2516
  %cmp2771 = icmp slt i32 %1669, %1670, !dbg !2516
  br i1 %cmp2771, label %if.then2773, label %if.end2779, !dbg !2503

if.then2773:                                      ; preds = %if.end2769
  %arrayidx2774 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2518
  %1671 = load i32, i32* %arrayidx2774, align 4, !dbg !2518
  store i32 %1671, i32* %bcost, align 4, !dbg !2518
  %1672 = load i32, i32* %omx, align 4, !dbg !2518
  %add2775 = add nsw i32 %1672, 0, !dbg !2518
  store i32 %add2775, i32* %bmx, align 4, !dbg !2518
  %1673 = load i32, i32* %omy, align 4, !dbg !2518
  %1674 = load i32, i32* %i2416, align 4, !dbg !2518
  %sub2776 = sub nsw i32 0, %1674, !dbg !2518
  %sub2777 = sub nsw i32 %sub2776, 2, !dbg !2518
  %add2778 = add nsw i32 %1673, %sub2777, !dbg !2518
  store i32 %add2778, i32* %bmy, align 4, !dbg !2518
  br label %if.end2779, !dbg !2518

if.end2779:                                       ; preds = %if.then2773, %if.end2769
  br label %for.inc2780, !dbg !2503

for.inc2780:                                      ; preds = %if.end2779
  %1675 = load i32, i32* %i2416, align 4, !dbg !2497
  %add2781 = add nsw i32 %1675, 4, !dbg !2497
  store i32 %add2781, i32* %i2416, align 4, !dbg !2497
  br label %for.cond2651, !dbg !2497, !llvm.loop !2520

for.end2782:                                      ; preds = %for.cond2651
  br label %if.end2783, !dbg !2500

if.end2783:                                       ; preds = %for.end2782, %cond.end2646
  br label %for.cond2784, !dbg !2443

for.cond2784:                                     ; preds = %for.inc2853, %if.end2783
  %1676 = load i32, i32* %i2416, align 4, !dbg !2521
  %1677 = load i32, i32* %i_me_range, align 4, !dbg !2521
  %shr2785 = ashr i32 %1677, 1, !dbg !2521
  %cmp2786 = icmp slt i32 %1676, %shr2785, !dbg !2521
  br i1 %cmp2786, label %for.body2788, label %for.end2855, !dbg !2524

for.body2788:                                     ; preds = %for.cond2784
  %1678 = load i32, i32* %omy, align 4, !dbg !2525
  %1679 = load i32, i32* %i2416, align 4, !dbg !2525
  %add2789 = add nsw i32 %1678, %1679, !dbg !2525
  %1680 = load i32, i32* %mv_y_max, align 4, !dbg !2525
  %cmp2790 = icmp sle i32 %add2789, %1680, !dbg !2525
  br i1 %cmp2790, label %if.then2792, label %if.end2820, !dbg !2528

if.then2792:                                      ; preds = %for.body2788
  call void @llvm.dbg.declare(metadata i32* %cost2793, metadata !2529, metadata !DIExpression()), !dbg !2531
  %1681 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2531
  %pixf2794 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1681, i32 0, i32 69, !dbg !2531
  %fpelcmp2795 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2794, i32 0, i32 7, !dbg !2531
  %1682 = load i32, i32* %i_pixel5, align 4, !dbg !2531
  %idxprom2796 = sext i32 %1682 to i64, !dbg !2531
  %arrayidx2797 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2795, i64 0, i64 %idxprom2796, !dbg !2531
  %1683 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2797, align 8, !dbg !2531
  %1684 = load i8*, i8** %p_fenc, align 8, !dbg !2531
  %1685 = load i8*, i8** %p_fref_w, align 8, !dbg !2531
  %1686 = load i32, i32* %omy, align 4, !dbg !2531
  %1687 = load i32, i32* %i2416, align 4, !dbg !2531
  %add2798 = add nsw i32 %1686, %1687, !dbg !2531
  %1688 = load i32, i32* %stride, align 4, !dbg !2531
  %mul2799 = mul nsw i32 %add2798, %1688, !dbg !2531
  %1689 = load i32, i32* %omx, align 4, !dbg !2531
  %add2800 = add nsw i32 %mul2799, %1689, !dbg !2531
  %idxprom2801 = sext i32 %add2800 to i64, !dbg !2531
  %arrayidx2802 = getelementptr inbounds i8, i8* %1685, i64 %idxprom2801, !dbg !2531
  %1690 = load i32, i32* %stride, align 4, !dbg !2531
  %call2803 = call i32 %1683(i8* %1684, i32 16, i8* %arrayidx2802, i32 %1690), !dbg !2531
  %1691 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2531
  %1692 = load i32, i32* %omx, align 4, !dbg !2531
  %shl2804 = shl i32 %1692, 2, !dbg !2531
  %idxprom2805 = sext i32 %shl2804 to i64, !dbg !2531
  %arrayidx2806 = getelementptr inbounds i16, i16* %1691, i64 %idxprom2805, !dbg !2531
  %1693 = load i16, i16* %arrayidx2806, align 2, !dbg !2531
  %conv2807 = zext i16 %1693 to i32, !dbg !2531
  %1694 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2531
  %1695 = load i32, i32* %omy, align 4, !dbg !2531
  %1696 = load i32, i32* %i2416, align 4, !dbg !2531
  %add2808 = add nsw i32 %1695, %1696, !dbg !2531
  %shl2809 = shl i32 %add2808, 2, !dbg !2531
  %idxprom2810 = sext i32 %shl2809 to i64, !dbg !2531
  %arrayidx2811 = getelementptr inbounds i16, i16* %1694, i64 %idxprom2810, !dbg !2531
  %1697 = load i16, i16* %arrayidx2811, align 2, !dbg !2531
  %conv2812 = zext i16 %1697 to i32, !dbg !2531
  %add2813 = add nsw i32 %conv2807, %conv2812, !dbg !2531
  %add2814 = add nsw i32 %call2803, %add2813, !dbg !2531
  store i32 %add2814, i32* %cost2793, align 4, !dbg !2531
  %1698 = load i32, i32* %cost2793, align 4, !dbg !2532
  %1699 = load i32, i32* %bcost, align 4, !dbg !2532
  %cmp2815 = icmp slt i32 %1698, %1699, !dbg !2532
  br i1 %cmp2815, label %if.then2817, label %if.end2819, !dbg !2531

if.then2817:                                      ; preds = %if.then2792
  %1700 = load i32, i32* %cost2793, align 4, !dbg !2534
  store i32 %1700, i32* %bcost, align 4, !dbg !2534
  %1701 = load i32, i32* %omx, align 4, !dbg !2534
  store i32 %1701, i32* %bmx, align 4, !dbg !2534
  %1702 = load i32, i32* %omy, align 4, !dbg !2534
  %1703 = load i32, i32* %i2416, align 4, !dbg !2534
  %add2818 = add nsw i32 %1702, %1703, !dbg !2534
  store i32 %add2818, i32* %bmy, align 4, !dbg !2534
  br label %if.end2819, !dbg !2534

if.end2819:                                       ; preds = %if.then2817, %if.then2792
  br label %if.end2820, !dbg !2531

if.end2820:                                       ; preds = %if.end2819, %for.body2788
  %1704 = load i32, i32* %omy, align 4, !dbg !2536
  %1705 = load i32, i32* %i2416, align 4, !dbg !2536
  %sub2821 = sub nsw i32 %1704, %1705, !dbg !2536
  %1706 = load i32, i32* %mv_y_min, align 4, !dbg !2536
  %cmp2822 = icmp sge i32 %sub2821, %1706, !dbg !2536
  br i1 %cmp2822, label %if.then2824, label %if.end2852, !dbg !2528

if.then2824:                                      ; preds = %if.end2820
  call void @llvm.dbg.declare(metadata i32* %cost2825, metadata !2538, metadata !DIExpression()), !dbg !2540
  %1707 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2540
  %pixf2826 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1707, i32 0, i32 69, !dbg !2540
  %fpelcmp2827 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2826, i32 0, i32 7, !dbg !2540
  %1708 = load i32, i32* %i_pixel5, align 4, !dbg !2540
  %idxprom2828 = sext i32 %1708 to i64, !dbg !2540
  %arrayidx2829 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp2827, i64 0, i64 %idxprom2828, !dbg !2540
  %1709 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx2829, align 8, !dbg !2540
  %1710 = load i8*, i8** %p_fenc, align 8, !dbg !2540
  %1711 = load i8*, i8** %p_fref_w, align 8, !dbg !2540
  %1712 = load i32, i32* %omy, align 4, !dbg !2540
  %1713 = load i32, i32* %i2416, align 4, !dbg !2540
  %sub2830 = sub nsw i32 %1712, %1713, !dbg !2540
  %1714 = load i32, i32* %stride, align 4, !dbg !2540
  %mul2831 = mul nsw i32 %sub2830, %1714, !dbg !2540
  %1715 = load i32, i32* %omx, align 4, !dbg !2540
  %add2832 = add nsw i32 %mul2831, %1715, !dbg !2540
  %idxprom2833 = sext i32 %add2832 to i64, !dbg !2540
  %arrayidx2834 = getelementptr inbounds i8, i8* %1711, i64 %idxprom2833, !dbg !2540
  %1716 = load i32, i32* %stride, align 4, !dbg !2540
  %call2835 = call i32 %1709(i8* %1710, i32 16, i8* %arrayidx2834, i32 %1716), !dbg !2540
  %1717 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2540
  %1718 = load i32, i32* %omx, align 4, !dbg !2540
  %shl2836 = shl i32 %1718, 2, !dbg !2540
  %idxprom2837 = sext i32 %shl2836 to i64, !dbg !2540
  %arrayidx2838 = getelementptr inbounds i16, i16* %1717, i64 %idxprom2837, !dbg !2540
  %1719 = load i16, i16* %arrayidx2838, align 2, !dbg !2540
  %conv2839 = zext i16 %1719 to i32, !dbg !2540
  %1720 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2540
  %1721 = load i32, i32* %omy, align 4, !dbg !2540
  %1722 = load i32, i32* %i2416, align 4, !dbg !2540
  %sub2840 = sub nsw i32 %1721, %1722, !dbg !2540
  %shl2841 = shl i32 %sub2840, 2, !dbg !2540
  %idxprom2842 = sext i32 %shl2841 to i64, !dbg !2540
  %arrayidx2843 = getelementptr inbounds i16, i16* %1720, i64 %idxprom2842, !dbg !2540
  %1723 = load i16, i16* %arrayidx2843, align 2, !dbg !2540
  %conv2844 = zext i16 %1723 to i32, !dbg !2540
  %add2845 = add nsw i32 %conv2839, %conv2844, !dbg !2540
  %add2846 = add nsw i32 %call2835, %add2845, !dbg !2540
  store i32 %add2846, i32* %cost2825, align 4, !dbg !2540
  %1724 = load i32, i32* %cost2825, align 4, !dbg !2541
  %1725 = load i32, i32* %bcost, align 4, !dbg !2541
  %cmp2847 = icmp slt i32 %1724, %1725, !dbg !2541
  br i1 %cmp2847, label %if.then2849, label %if.end2851, !dbg !2540

if.then2849:                                      ; preds = %if.then2824
  %1726 = load i32, i32* %cost2825, align 4, !dbg !2543
  store i32 %1726, i32* %bcost, align 4, !dbg !2543
  %1727 = load i32, i32* %omx, align 4, !dbg !2543
  store i32 %1727, i32* %bmx, align 4, !dbg !2543
  %1728 = load i32, i32* %omy, align 4, !dbg !2543
  %1729 = load i32, i32* %i2416, align 4, !dbg !2543
  %sub2850 = sub nsw i32 %1728, %1729, !dbg !2543
  store i32 %sub2850, i32* %bmy, align 4, !dbg !2543
  br label %if.end2851, !dbg !2543

if.end2851:                                       ; preds = %if.then2849, %if.then2824
  br label %if.end2852, !dbg !2540

if.end2852:                                       ; preds = %if.end2851, %if.end2820
  br label %for.inc2853, !dbg !2528

for.inc2853:                                      ; preds = %if.end2852
  %1730 = load i32, i32* %i2416, align 4, !dbg !2521
  %add2854 = add nsw i32 %1730, 2, !dbg !2521
  store i32 %add2854, i32* %i2416, align 4, !dbg !2521
  br label %for.cond2784, !dbg !2521, !llvm.loop !2545

for.end2855:                                      ; preds = %for.cond2784
  call void @llvm.dbg.declare(metadata i8** %pix_base2856, metadata !2546, metadata !DIExpression()), !dbg !2548
  %1731 = load i8*, i8** %p_fref_w, align 8, !dbg !2548
  %1732 = load i32, i32* %omx, align 4, !dbg !2548
  %idx.ext2857 = sext i32 %1732 to i64, !dbg !2548
  %add.ptr2858 = getelementptr inbounds i8, i8* %1731, i64 %idx.ext2857, !dbg !2548
  %1733 = load i32, i32* %omy, align 4, !dbg !2548
  %1734 = load i32, i32* %stride, align 4, !dbg !2548
  %mul2859 = mul nsw i32 %1733, %1734, !dbg !2548
  %idx.ext2860 = sext i32 %mul2859 to i64, !dbg !2548
  %add.ptr2861 = getelementptr inbounds i8, i8* %add.ptr2858, i64 %idx.ext2860, !dbg !2548
  store i8* %add.ptr2861, i8** %pix_base2856, align 8, !dbg !2548
  %1735 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2548
  %pixf2862 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1735, i32 0, i32 69, !dbg !2548
  %fpelcmp_x42863 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf2862, i32 0, i32 9, !dbg !2548
  %1736 = load i32, i32* %i_pixel5, align 4, !dbg !2548
  %idxprom2864 = sext i32 %1736 to i64, !dbg !2548
  %arrayidx2865 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x42863, i64 0, i64 %idxprom2864, !dbg !2548
  %1737 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx2865, align 8, !dbg !2548
  %1738 = load i8*, i8** %p_fenc, align 8, !dbg !2548
  %1739 = load i8*, i8** %pix_base2856, align 8, !dbg !2548
  %add.ptr2866 = getelementptr inbounds i8, i8* %1739, i64 -2, !dbg !2548
  %1740 = load i32, i32* %stride, align 4, !dbg !2548
  %mul2867 = mul nsw i32 -2, %1740, !dbg !2548
  %idx.ext2868 = sext i32 %mul2867 to i64, !dbg !2548
  %add.ptr2869 = getelementptr inbounds i8, i8* %add.ptr2866, i64 %idx.ext2868, !dbg !2548
  %1741 = load i8*, i8** %pix_base2856, align 8, !dbg !2548
  %add.ptr2870 = getelementptr inbounds i8, i8* %1741, i64 -2, !dbg !2548
  %1742 = load i32, i32* %stride, align 4, !dbg !2548
  %mul2871 = mul nsw i32 2, %1742, !dbg !2548
  %idx.ext2872 = sext i32 %mul2871 to i64, !dbg !2548
  %add.ptr2873 = getelementptr inbounds i8, i8* %add.ptr2870, i64 %idx.ext2872, !dbg !2548
  %1743 = load i8*, i8** %pix_base2856, align 8, !dbg !2548
  %add.ptr2874 = getelementptr inbounds i8, i8* %1743, i64 2, !dbg !2548
  %1744 = load i32, i32* %stride, align 4, !dbg !2548
  %mul2875 = mul nsw i32 -2, %1744, !dbg !2548
  %idx.ext2876 = sext i32 %mul2875 to i64, !dbg !2548
  %add.ptr2877 = getelementptr inbounds i8, i8* %add.ptr2874, i64 %idx.ext2876, !dbg !2548
  %1745 = load i8*, i8** %pix_base2856, align 8, !dbg !2548
  %add.ptr2878 = getelementptr inbounds i8, i8* %1745, i64 2, !dbg !2548
  %1746 = load i32, i32* %stride, align 4, !dbg !2548
  %mul2879 = mul nsw i32 2, %1746, !dbg !2548
  %idx.ext2880 = sext i32 %mul2879 to i64, !dbg !2548
  %add.ptr2881 = getelementptr inbounds i8, i8* %add.ptr2878, i64 %idx.ext2880, !dbg !2548
  %1747 = load i32, i32* %stride, align 4, !dbg !2548
  %arraydecay2882 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2548
  call void %1737(i8* %1738, i8* %add.ptr2869, i8* %add.ptr2873, i8* %add.ptr2877, i8* %add.ptr2881, i32 %1747, i32* %arraydecay2882), !dbg !2548
  %1748 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2548
  %1749 = load i32, i32* %omx, align 4, !dbg !2548
  %add2883 = add nsw i32 %1749, -2, !dbg !2548
  %shl2884 = shl i32 %add2883, 2, !dbg !2548
  %idxprom2885 = sext i32 %shl2884 to i64, !dbg !2548
  %arrayidx2886 = getelementptr inbounds i16, i16* %1748, i64 %idxprom2885, !dbg !2548
  %1750 = load i16, i16* %arrayidx2886, align 2, !dbg !2548
  %conv2887 = zext i16 %1750 to i32, !dbg !2548
  %1751 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2548
  %1752 = load i32, i32* %omy, align 4, !dbg !2548
  %add2888 = add nsw i32 %1752, -2, !dbg !2548
  %shl2889 = shl i32 %add2888, 2, !dbg !2548
  %idxprom2890 = sext i32 %shl2889 to i64, !dbg !2548
  %arrayidx2891 = getelementptr inbounds i16, i16* %1751, i64 %idxprom2890, !dbg !2548
  %1753 = load i16, i16* %arrayidx2891, align 2, !dbg !2548
  %conv2892 = zext i16 %1753 to i32, !dbg !2548
  %add2893 = add nsw i32 %conv2887, %conv2892, !dbg !2548
  %arrayidx2894 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2548
  %1754 = load i32, i32* %arrayidx2894, align 16, !dbg !2548
  %add2895 = add nsw i32 %1754, %add2893, !dbg !2548
  store i32 %add2895, i32* %arrayidx2894, align 16, !dbg !2548
  %1755 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2548
  %1756 = load i32, i32* %omx, align 4, !dbg !2548
  %add2896 = add nsw i32 %1756, -2, !dbg !2548
  %shl2897 = shl i32 %add2896, 2, !dbg !2548
  %idxprom2898 = sext i32 %shl2897 to i64, !dbg !2548
  %arrayidx2899 = getelementptr inbounds i16, i16* %1755, i64 %idxprom2898, !dbg !2548
  %1757 = load i16, i16* %arrayidx2899, align 2, !dbg !2548
  %conv2900 = zext i16 %1757 to i32, !dbg !2548
  %1758 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2548
  %1759 = load i32, i32* %omy, align 4, !dbg !2548
  %add2901 = add nsw i32 %1759, 2, !dbg !2548
  %shl2902 = shl i32 %add2901, 2, !dbg !2548
  %idxprom2903 = sext i32 %shl2902 to i64, !dbg !2548
  %arrayidx2904 = getelementptr inbounds i16, i16* %1758, i64 %idxprom2903, !dbg !2548
  %1760 = load i16, i16* %arrayidx2904, align 2, !dbg !2548
  %conv2905 = zext i16 %1760 to i32, !dbg !2548
  %add2906 = add nsw i32 %conv2900, %conv2905, !dbg !2548
  %arrayidx2907 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2548
  %1761 = load i32, i32* %arrayidx2907, align 4, !dbg !2548
  %add2908 = add nsw i32 %1761, %add2906, !dbg !2548
  store i32 %add2908, i32* %arrayidx2907, align 4, !dbg !2548
  %1762 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2548
  %1763 = load i32, i32* %omx, align 4, !dbg !2548
  %add2909 = add nsw i32 %1763, 2, !dbg !2548
  %shl2910 = shl i32 %add2909, 2, !dbg !2548
  %idxprom2911 = sext i32 %shl2910 to i64, !dbg !2548
  %arrayidx2912 = getelementptr inbounds i16, i16* %1762, i64 %idxprom2911, !dbg !2548
  %1764 = load i16, i16* %arrayidx2912, align 2, !dbg !2548
  %conv2913 = zext i16 %1764 to i32, !dbg !2548
  %1765 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2548
  %1766 = load i32, i32* %omy, align 4, !dbg !2548
  %add2914 = add nsw i32 %1766, -2, !dbg !2548
  %shl2915 = shl i32 %add2914, 2, !dbg !2548
  %idxprom2916 = sext i32 %shl2915 to i64, !dbg !2548
  %arrayidx2917 = getelementptr inbounds i16, i16* %1765, i64 %idxprom2916, !dbg !2548
  %1767 = load i16, i16* %arrayidx2917, align 2, !dbg !2548
  %conv2918 = zext i16 %1767 to i32, !dbg !2548
  %add2919 = add nsw i32 %conv2913, %conv2918, !dbg !2548
  %arrayidx2920 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2548
  %1768 = load i32, i32* %arrayidx2920, align 8, !dbg !2548
  %add2921 = add nsw i32 %1768, %add2919, !dbg !2548
  store i32 %add2921, i32* %arrayidx2920, align 8, !dbg !2548
  %1769 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2548
  %1770 = load i32, i32* %omx, align 4, !dbg !2548
  %add2922 = add nsw i32 %1770, 2, !dbg !2548
  %shl2923 = shl i32 %add2922, 2, !dbg !2548
  %idxprom2924 = sext i32 %shl2923 to i64, !dbg !2548
  %arrayidx2925 = getelementptr inbounds i16, i16* %1769, i64 %idxprom2924, !dbg !2548
  %1771 = load i16, i16* %arrayidx2925, align 2, !dbg !2548
  %conv2926 = zext i16 %1771 to i32, !dbg !2548
  %1772 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2548
  %1773 = load i32, i32* %omy, align 4, !dbg !2548
  %add2927 = add nsw i32 %1773, 2, !dbg !2548
  %shl2928 = shl i32 %add2927, 2, !dbg !2548
  %idxprom2929 = sext i32 %shl2928 to i64, !dbg !2548
  %arrayidx2930 = getelementptr inbounds i16, i16* %1772, i64 %idxprom2929, !dbg !2548
  %1774 = load i16, i16* %arrayidx2930, align 2, !dbg !2548
  %conv2931 = zext i16 %1774 to i32, !dbg !2548
  %add2932 = add nsw i32 %conv2926, %conv2931, !dbg !2548
  %arrayidx2933 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2548
  %1775 = load i32, i32* %arrayidx2933, align 4, !dbg !2548
  %add2934 = add nsw i32 %1775, %add2932, !dbg !2548
  store i32 %add2934, i32* %arrayidx2933, align 4, !dbg !2548
  %arrayidx2935 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2549
  %1776 = load i32, i32* %arrayidx2935, align 16, !dbg !2549
  %1777 = load i32, i32* %bcost, align 4, !dbg !2549
  %cmp2936 = icmp slt i32 %1776, %1777, !dbg !2549
  br i1 %cmp2936, label %if.then2938, label %if.end2942, !dbg !2548

if.then2938:                                      ; preds = %for.end2855
  %arrayidx2939 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2551
  %1778 = load i32, i32* %arrayidx2939, align 16, !dbg !2551
  store i32 %1778, i32* %bcost, align 4, !dbg !2551
  %1779 = load i32, i32* %omx, align 4, !dbg !2551
  %add2940 = add nsw i32 %1779, -2, !dbg !2551
  store i32 %add2940, i32* %bmx, align 4, !dbg !2551
  %1780 = load i32, i32* %omy, align 4, !dbg !2551
  %add2941 = add nsw i32 %1780, -2, !dbg !2551
  store i32 %add2941, i32* %bmy, align 4, !dbg !2551
  br label %if.end2942, !dbg !2551

if.end2942:                                       ; preds = %if.then2938, %for.end2855
  %arrayidx2943 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2553
  %1781 = load i32, i32* %arrayidx2943, align 4, !dbg !2553
  %1782 = load i32, i32* %bcost, align 4, !dbg !2553
  %cmp2944 = icmp slt i32 %1781, %1782, !dbg !2553
  br i1 %cmp2944, label %if.then2946, label %if.end2950, !dbg !2548

if.then2946:                                      ; preds = %if.end2942
  %arrayidx2947 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2555
  %1783 = load i32, i32* %arrayidx2947, align 4, !dbg !2555
  store i32 %1783, i32* %bcost, align 4, !dbg !2555
  %1784 = load i32, i32* %omx, align 4, !dbg !2555
  %add2948 = add nsw i32 %1784, -2, !dbg !2555
  store i32 %add2948, i32* %bmx, align 4, !dbg !2555
  %1785 = load i32, i32* %omy, align 4, !dbg !2555
  %add2949 = add nsw i32 %1785, 2, !dbg !2555
  store i32 %add2949, i32* %bmy, align 4, !dbg !2555
  br label %if.end2950, !dbg !2555

if.end2950:                                       ; preds = %if.then2946, %if.end2942
  %arrayidx2951 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2557
  %1786 = load i32, i32* %arrayidx2951, align 8, !dbg !2557
  %1787 = load i32, i32* %bcost, align 4, !dbg !2557
  %cmp2952 = icmp slt i32 %1786, %1787, !dbg !2557
  br i1 %cmp2952, label %if.then2954, label %if.end2958, !dbg !2548

if.then2954:                                      ; preds = %if.end2950
  %arrayidx2955 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2559
  %1788 = load i32, i32* %arrayidx2955, align 8, !dbg !2559
  store i32 %1788, i32* %bcost, align 4, !dbg !2559
  %1789 = load i32, i32* %omx, align 4, !dbg !2559
  %add2956 = add nsw i32 %1789, 2, !dbg !2559
  store i32 %add2956, i32* %bmx, align 4, !dbg !2559
  %1790 = load i32, i32* %omy, align 4, !dbg !2559
  %add2957 = add nsw i32 %1790, -2, !dbg !2559
  store i32 %add2957, i32* %bmy, align 4, !dbg !2559
  br label %if.end2958, !dbg !2559

if.end2958:                                       ; preds = %if.then2954, %if.end2950
  %arrayidx2959 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2561
  %1791 = load i32, i32* %arrayidx2959, align 4, !dbg !2561
  %1792 = load i32, i32* %bcost, align 4, !dbg !2561
  %cmp2960 = icmp slt i32 %1791, %1792, !dbg !2561
  br i1 %cmp2960, label %if.then2962, label %if.end2966, !dbg !2548

if.then2962:                                      ; preds = %if.end2958
  %arrayidx2963 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2563
  %1793 = load i32, i32* %arrayidx2963, align 4, !dbg !2563
  store i32 %1793, i32* %bcost, align 4, !dbg !2563
  %1794 = load i32, i32* %omx, align 4, !dbg !2563
  %add2964 = add nsw i32 %1794, 2, !dbg !2563
  store i32 %add2964, i32* %bmx, align 4, !dbg !2563
  %1795 = load i32, i32* %omy, align 4, !dbg !2563
  %add2965 = add nsw i32 %1795, 2, !dbg !2563
  store i32 %add2965, i32* %bmy, align 4, !dbg !2563
  br label %if.end2966, !dbg !2563

if.end2966:                                       ; preds = %if.then2962, %if.end2958
  %1796 = load i32, i32* %bmx, align 4, !dbg !2565
  store i32 %1796, i32* %omx, align 4, !dbg !2566
  %1797 = load i32, i32* %bmy, align 4, !dbg !2567
  store i32 %1797, i32* %omy, align 4, !dbg !2568
  call void @llvm.dbg.declare(metadata i16** %p_cost_omvx, metadata !2569, metadata !DIExpression()), !dbg !2570
  %1798 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2571
  %1799 = load i32, i32* %omx, align 4, !dbg !2572
  %mul2967 = mul nsw i32 %1799, 4, !dbg !2573
  %idx.ext2968 = sext i32 %mul2967 to i64, !dbg !2574
  %add.ptr2969 = getelementptr inbounds i16, i16* %1798, i64 %idx.ext2968, !dbg !2574
  store i16* %add.ptr2969, i16** %p_cost_omvx, align 8, !dbg !2570
  call void @llvm.dbg.declare(metadata i16** %p_cost_omvy, metadata !2575, metadata !DIExpression()), !dbg !2576
  %1800 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2577
  %1801 = load i32, i32* %omy, align 4, !dbg !2578
  %mul2970 = mul nsw i32 %1801, 4, !dbg !2579
  %idx.ext2971 = sext i32 %mul2970 to i64, !dbg !2580
  %add.ptr2972 = getelementptr inbounds i16, i16* %1800, i64 %idx.ext2971, !dbg !2580
  store i16* %add.ptr2972, i16** %p_cost_omvy, align 8, !dbg !2576
  call void @llvm.dbg.declare(metadata i32* %i2973, metadata !2581, metadata !DIExpression()), !dbg !2582
  store i32 1, i32* %i2973, align 4, !dbg !2582
  br label %do.body2974, !dbg !2583

do.body2974:                                      ; preds = %do.cond3534, %if.end2966
  %1802 = load i32, i32* %i2973, align 4, !dbg !2584
  %mul2975 = mul nsw i32 4, %1802, !dbg !2587
  %1803 = load i32, i32* %mv_x_max, align 4, !dbg !2588
  %1804 = load i32, i32* %omx, align 4, !dbg !2588
  %sub2976 = sub nsw i32 %1803, %1804, !dbg !2588
  %1805 = load i32, i32* %omx, align 4, !dbg !2588
  %1806 = load i32, i32* %mv_x_min, align 4, !dbg !2588
  %sub2977 = sub nsw i32 %1805, %1806, !dbg !2588
  %1807 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1808 = load i32, i32* %omy, align 4, !dbg !2588
  %sub2978 = sub nsw i32 %1807, %1808, !dbg !2588
  %1809 = load i32, i32* %omy, align 4, !dbg !2588
  %1810 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub2979 = sub nsw i32 %1809, %1810, !dbg !2588
  %cmp2980 = icmp slt i32 %sub2978, %sub2979, !dbg !2588
  br i1 %cmp2980, label %cond.true2982, label %cond.false2984, !dbg !2588

cond.true2982:                                    ; preds = %do.body2974
  %1811 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1812 = load i32, i32* %omy, align 4, !dbg !2588
  %sub2983 = sub nsw i32 %1811, %1812, !dbg !2588
  br label %cond.end2986, !dbg !2588

cond.false2984:                                   ; preds = %do.body2974
  %1813 = load i32, i32* %omy, align 4, !dbg !2588
  %1814 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub2985 = sub nsw i32 %1813, %1814, !dbg !2588
  br label %cond.end2986, !dbg !2588

cond.end2986:                                     ; preds = %cond.false2984, %cond.true2982
  %cond2987 = phi i32 [ %sub2983, %cond.true2982 ], [ %sub2985, %cond.false2984 ], !dbg !2588
  %cmp2988 = icmp slt i32 %sub2977, %cond2987, !dbg !2588
  br i1 %cmp2988, label %cond.true2990, label %cond.false2992, !dbg !2588

cond.true2990:                                    ; preds = %cond.end2986
  %1815 = load i32, i32* %omx, align 4, !dbg !2588
  %1816 = load i32, i32* %mv_x_min, align 4, !dbg !2588
  %sub2991 = sub nsw i32 %1815, %1816, !dbg !2588
  br label %cond.end3003, !dbg !2588

cond.false2992:                                   ; preds = %cond.end2986
  %1817 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1818 = load i32, i32* %omy, align 4, !dbg !2588
  %sub2993 = sub nsw i32 %1817, %1818, !dbg !2588
  %1819 = load i32, i32* %omy, align 4, !dbg !2588
  %1820 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub2994 = sub nsw i32 %1819, %1820, !dbg !2588
  %cmp2995 = icmp slt i32 %sub2993, %sub2994, !dbg !2588
  br i1 %cmp2995, label %cond.true2997, label %cond.false2999, !dbg !2588

cond.true2997:                                    ; preds = %cond.false2992
  %1821 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1822 = load i32, i32* %omy, align 4, !dbg !2588
  %sub2998 = sub nsw i32 %1821, %1822, !dbg !2588
  br label %cond.end3001, !dbg !2588

cond.false2999:                                   ; preds = %cond.false2992
  %1823 = load i32, i32* %omy, align 4, !dbg !2588
  %1824 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub3000 = sub nsw i32 %1823, %1824, !dbg !2588
  br label %cond.end3001, !dbg !2588

cond.end3001:                                     ; preds = %cond.false2999, %cond.true2997
  %cond3002 = phi i32 [ %sub2998, %cond.true2997 ], [ %sub3000, %cond.false2999 ], !dbg !2588
  br label %cond.end3003, !dbg !2588

cond.end3003:                                     ; preds = %cond.end3001, %cond.true2990
  %cond3004 = phi i32 [ %sub2991, %cond.true2990 ], [ %cond3002, %cond.end3001 ], !dbg !2588
  %cmp3005 = icmp slt i32 %sub2976, %cond3004, !dbg !2588
  br i1 %cmp3005, label %cond.true3007, label %cond.false3009, !dbg !2588

cond.true3007:                                    ; preds = %cond.end3003
  %1825 = load i32, i32* %mv_x_max, align 4, !dbg !2588
  %1826 = load i32, i32* %omx, align 4, !dbg !2588
  %sub3008 = sub nsw i32 %1825, %1826, !dbg !2588
  br label %cond.end3038, !dbg !2588

cond.false3009:                                   ; preds = %cond.end3003
  %1827 = load i32, i32* %omx, align 4, !dbg !2588
  %1828 = load i32, i32* %mv_x_min, align 4, !dbg !2588
  %sub3010 = sub nsw i32 %1827, %1828, !dbg !2588
  %1829 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1830 = load i32, i32* %omy, align 4, !dbg !2588
  %sub3011 = sub nsw i32 %1829, %1830, !dbg !2588
  %1831 = load i32, i32* %omy, align 4, !dbg !2588
  %1832 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub3012 = sub nsw i32 %1831, %1832, !dbg !2588
  %cmp3013 = icmp slt i32 %sub3011, %sub3012, !dbg !2588
  br i1 %cmp3013, label %cond.true3015, label %cond.false3017, !dbg !2588

cond.true3015:                                    ; preds = %cond.false3009
  %1833 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1834 = load i32, i32* %omy, align 4, !dbg !2588
  %sub3016 = sub nsw i32 %1833, %1834, !dbg !2588
  br label %cond.end3019, !dbg !2588

cond.false3017:                                   ; preds = %cond.false3009
  %1835 = load i32, i32* %omy, align 4, !dbg !2588
  %1836 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub3018 = sub nsw i32 %1835, %1836, !dbg !2588
  br label %cond.end3019, !dbg !2588

cond.end3019:                                     ; preds = %cond.false3017, %cond.true3015
  %cond3020 = phi i32 [ %sub3016, %cond.true3015 ], [ %sub3018, %cond.false3017 ], !dbg !2588
  %cmp3021 = icmp slt i32 %sub3010, %cond3020, !dbg !2588
  br i1 %cmp3021, label %cond.true3023, label %cond.false3025, !dbg !2588

cond.true3023:                                    ; preds = %cond.end3019
  %1837 = load i32, i32* %omx, align 4, !dbg !2588
  %1838 = load i32, i32* %mv_x_min, align 4, !dbg !2588
  %sub3024 = sub nsw i32 %1837, %1838, !dbg !2588
  br label %cond.end3036, !dbg !2588

cond.false3025:                                   ; preds = %cond.end3019
  %1839 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1840 = load i32, i32* %omy, align 4, !dbg !2588
  %sub3026 = sub nsw i32 %1839, %1840, !dbg !2588
  %1841 = load i32, i32* %omy, align 4, !dbg !2588
  %1842 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub3027 = sub nsw i32 %1841, %1842, !dbg !2588
  %cmp3028 = icmp slt i32 %sub3026, %sub3027, !dbg !2588
  br i1 %cmp3028, label %cond.true3030, label %cond.false3032, !dbg !2588

cond.true3030:                                    ; preds = %cond.false3025
  %1843 = load i32, i32* %mv_y_max, align 4, !dbg !2588
  %1844 = load i32, i32* %omy, align 4, !dbg !2588
  %sub3031 = sub nsw i32 %1843, %1844, !dbg !2588
  br label %cond.end3034, !dbg !2588

cond.false3032:                                   ; preds = %cond.false3025
  %1845 = load i32, i32* %omy, align 4, !dbg !2588
  %1846 = load i32, i32* %mv_y_min, align 4, !dbg !2588
  %sub3033 = sub nsw i32 %1845, %1846, !dbg !2588
  br label %cond.end3034, !dbg !2588

cond.end3034:                                     ; preds = %cond.false3032, %cond.true3030
  %cond3035 = phi i32 [ %sub3031, %cond.true3030 ], [ %sub3033, %cond.false3032 ], !dbg !2588
  br label %cond.end3036, !dbg !2588

cond.end3036:                                     ; preds = %cond.end3034, %cond.true3023
  %cond3037 = phi i32 [ %sub3024, %cond.true3023 ], [ %cond3035, %cond.end3034 ], !dbg !2588
  br label %cond.end3038, !dbg !2588

cond.end3038:                                     ; preds = %cond.end3036, %cond.true3007
  %cond3039 = phi i32 [ %sub3008, %cond.true3007 ], [ %cond3037, %cond.end3036 ], !dbg !2588
  %cmp3040 = icmp sgt i32 %mul2975, %cond3039, !dbg !2589
  br i1 %cmp3040, label %if.then3042, label %if.else3101, !dbg !2590

if.then3042:                                      ; preds = %cond.end3038
  call void @llvm.dbg.declare(metadata i32* %j, metadata !2591, metadata !DIExpression()), !dbg !2594
  store i32 0, i32* %j, align 4, !dbg !2594
  br label %for.cond3043, !dbg !2595

for.cond3043:                                     ; preds = %for.inc3098, %if.then3042
  %1847 = load i32, i32* %j, align 4, !dbg !2596
  %cmp3044 = icmp slt i32 %1847, 16, !dbg !2598
  br i1 %cmp3044, label %for.body3046, label %for.end3100, !dbg !2599

for.body3046:                                     ; preds = %for.cond3043
  call void @llvm.dbg.declare(metadata i32* %mx3047, metadata !2600, metadata !DIExpression()), !dbg !2602
  %1848 = load i32, i32* %omx, align 4, !dbg !2603
  %1849 = load i32, i32* %j, align 4, !dbg !2604
  %idxprom3048 = sext i32 %1849 to i64, !dbg !2605
  %arrayidx3049 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @x264_me_search_ref.hex4, i64 0, i64 %idxprom3048, !dbg !2605
  %arrayidx3050 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx3049, i64 0, i64 0, !dbg !2605
  %1850 = load i8, i8* %arrayidx3050, align 2, !dbg !2605
  %conv3051 = sext i8 %1850 to i32, !dbg !2605
  %1851 = load i32, i32* %i2973, align 4, !dbg !2606
  %mul3052 = mul nsw i32 %conv3051, %1851, !dbg !2607
  %add3053 = add nsw i32 %1848, %mul3052, !dbg !2608
  store i32 %add3053, i32* %mx3047, align 4, !dbg !2602
  call void @llvm.dbg.declare(metadata i32* %my3054, metadata !2609, metadata !DIExpression()), !dbg !2610
  %1852 = load i32, i32* %omy, align 4, !dbg !2611
  %1853 = load i32, i32* %j, align 4, !dbg !2612
  %idxprom3055 = sext i32 %1853 to i64, !dbg !2613
  %arrayidx3056 = getelementptr inbounds [16 x [2 x i8]], [16 x [2 x i8]]* @x264_me_search_ref.hex4, i64 0, i64 %idxprom3055, !dbg !2613
  %arrayidx3057 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx3056, i64 0, i64 1, !dbg !2613
  %1854 = load i8, i8* %arrayidx3057, align 1, !dbg !2613
  %conv3058 = sext i8 %1854 to i32, !dbg !2613
  %1855 = load i32, i32* %i2973, align 4, !dbg !2614
  %mul3059 = mul nsw i32 %conv3058, %1855, !dbg !2615
  %add3060 = add nsw i32 %1852, %mul3059, !dbg !2616
  store i32 %add3060, i32* %my3054, align 4, !dbg !2610
  %1856 = load i32, i32* %mx3047, align 4, !dbg !2617
  %shl3061 = shl i32 %1856, 16, !dbg !2617
  %1857 = load i32, i32* %my3054, align 4, !dbg !2617
  %and3062 = and i32 %1857, 32767, !dbg !2617
  %or3063 = or i32 %shl3061, %and3062, !dbg !2617
  %1858 = load i32, i32* %mv_min, align 4, !dbg !2617
  %add3064 = add i32 %or3063, %1858, !dbg !2617
  %1859 = load i32, i32* %mv_max, align 4, !dbg !2617
  %1860 = load i32, i32* %mx3047, align 4, !dbg !2617
  %shl3065 = shl i32 %1860, 16, !dbg !2617
  %1861 = load i32, i32* %my3054, align 4, !dbg !2617
  %and3066 = and i32 %1861, 32767, !dbg !2617
  %or3067 = or i32 %shl3065, %and3066, !dbg !2617
  %sub3068 = sub i32 %1859, %or3067, !dbg !2617
  %or3069 = or i32 %add3064, %sub3068, !dbg !2617
  %and3070 = and i32 %or3069, -2147467264, !dbg !2617
  %tobool3071 = icmp ne i32 %and3070, 0, !dbg !2617
  br i1 %tobool3071, label %if.end3097, label %if.then3072, !dbg !2619

if.then3072:                                      ; preds = %for.body3046
  call void @llvm.dbg.declare(metadata i32* %cost3073, metadata !2620, metadata !DIExpression()), !dbg !2622
  %1862 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2622
  %pixf3074 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1862, i32 0, i32 69, !dbg !2622
  %fpelcmp3075 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3074, i32 0, i32 7, !dbg !2622
  %1863 = load i32, i32* %i_pixel5, align 4, !dbg !2622
  %idxprom3076 = sext i32 %1863 to i64, !dbg !2622
  %arrayidx3077 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp3075, i64 0, i64 %idxprom3076, !dbg !2622
  %1864 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx3077, align 8, !dbg !2622
  %1865 = load i8*, i8** %p_fenc, align 8, !dbg !2622
  %1866 = load i8*, i8** %p_fref_w, align 8, !dbg !2622
  %1867 = load i32, i32* %my3054, align 4, !dbg !2622
  %1868 = load i32, i32* %stride, align 4, !dbg !2622
  %mul3078 = mul nsw i32 %1867, %1868, !dbg !2622
  %1869 = load i32, i32* %mx3047, align 4, !dbg !2622
  %add3079 = add nsw i32 %mul3078, %1869, !dbg !2622
  %idxprom3080 = sext i32 %add3079 to i64, !dbg !2622
  %arrayidx3081 = getelementptr inbounds i8, i8* %1866, i64 %idxprom3080, !dbg !2622
  %1870 = load i32, i32* %stride, align 4, !dbg !2622
  %call3082 = call i32 %1864(i8* %1865, i32 16, i8* %arrayidx3081, i32 %1870), !dbg !2622
  %1871 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2622
  %1872 = load i32, i32* %mx3047, align 4, !dbg !2622
  %shl3083 = shl i32 %1872, 2, !dbg !2622
  %idxprom3084 = sext i32 %shl3083 to i64, !dbg !2622
  %arrayidx3085 = getelementptr inbounds i16, i16* %1871, i64 %idxprom3084, !dbg !2622
  %1873 = load i16, i16* %arrayidx3085, align 2, !dbg !2622
  %conv3086 = zext i16 %1873 to i32, !dbg !2622
  %1874 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2622
  %1875 = load i32, i32* %my3054, align 4, !dbg !2622
  %shl3087 = shl i32 %1875, 2, !dbg !2622
  %idxprom3088 = sext i32 %shl3087 to i64, !dbg !2622
  %arrayidx3089 = getelementptr inbounds i16, i16* %1874, i64 %idxprom3088, !dbg !2622
  %1876 = load i16, i16* %arrayidx3089, align 2, !dbg !2622
  %conv3090 = zext i16 %1876 to i32, !dbg !2622
  %add3091 = add nsw i32 %conv3086, %conv3090, !dbg !2622
  %add3092 = add nsw i32 %call3082, %add3091, !dbg !2622
  store i32 %add3092, i32* %cost3073, align 4, !dbg !2622
  %1877 = load i32, i32* %cost3073, align 4, !dbg !2623
  %1878 = load i32, i32* %bcost, align 4, !dbg !2623
  %cmp3093 = icmp slt i32 %1877, %1878, !dbg !2623
  br i1 %cmp3093, label %if.then3095, label %if.end3096, !dbg !2622

if.then3095:                                      ; preds = %if.then3072
  %1879 = load i32, i32* %cost3073, align 4, !dbg !2625
  store i32 %1879, i32* %bcost, align 4, !dbg !2625
  %1880 = load i32, i32* %mx3047, align 4, !dbg !2625
  store i32 %1880, i32* %bmx, align 4, !dbg !2625
  %1881 = load i32, i32* %my3054, align 4, !dbg !2625
  store i32 %1881, i32* %bmy, align 4, !dbg !2625
  br label %if.end3096, !dbg !2625

if.end3096:                                       ; preds = %if.then3095, %if.then3072
  br label %if.end3097, !dbg !2622

if.end3097:                                       ; preds = %if.end3096, %for.body3046
  br label %for.inc3098, !dbg !2627

for.inc3098:                                      ; preds = %if.end3097
  %1882 = load i32, i32* %j, align 4, !dbg !2628
  %inc3099 = add nsw i32 %1882, 1, !dbg !2628
  store i32 %inc3099, i32* %j, align 4, !dbg !2628
  br label %for.cond3043, !dbg !2629, !llvm.loop !2630

for.end3100:                                      ; preds = %for.cond3043
  br label %if.end3533, !dbg !2632

if.else3101:                                      ; preds = %cond.end3038
  call void @llvm.dbg.declare(metadata i32* %dir3102, metadata !2633, metadata !DIExpression()), !dbg !2635
  store i32 0, i32* %dir3102, align 4, !dbg !2635
  call void @llvm.dbg.declare(metadata i8** %pix_base3103, metadata !2636, metadata !DIExpression()), !dbg !2637
  %1883 = load i8*, i8** %p_fref_w, align 8, !dbg !2638
  %1884 = load i32, i32* %omx, align 4, !dbg !2639
  %idx.ext3104 = sext i32 %1884 to i64, !dbg !2640
  %add.ptr3105 = getelementptr inbounds i8, i8* %1883, i64 %idx.ext3104, !dbg !2640
  %1885 = load i32, i32* %omy, align 4, !dbg !2641
  %1886 = load i32, i32* %i2973, align 4, !dbg !2642
  %mul3106 = mul nsw i32 4, %1886, !dbg !2643
  %sub3107 = sub nsw i32 %1885, %mul3106, !dbg !2644
  %1887 = load i32, i32* %stride, align 4, !dbg !2645
  %mul3108 = mul nsw i32 %sub3107, %1887, !dbg !2646
  %idx.ext3109 = sext i32 %mul3108 to i64, !dbg !2647
  %add.ptr3110 = getelementptr inbounds i8, i8* %add.ptr3105, i64 %idx.ext3109, !dbg !2647
  store i8* %add.ptr3110, i8** %pix_base3103, align 8, !dbg !2637
  call void @llvm.dbg.declare(metadata i32* %dy, metadata !2648, metadata !DIExpression()), !dbg !2649
  %1888 = load i32, i32* %i2973, align 4, !dbg !2650
  %1889 = load i32, i32* %stride, align 4, !dbg !2651
  %mul3111 = mul nsw i32 %1888, %1889, !dbg !2652
  store i32 %mul3111, i32* %dy, align 4, !dbg !2649
  %1890 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2653
  %pixf3112 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1890, i32 0, i32 69, !dbg !2653
  %fpelcmp_x43113 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3112, i32 0, i32 9, !dbg !2653
  %1891 = load i32, i32* %i_pixel5, align 4, !dbg !2653
  %idxprom3114 = sext i32 %1891 to i64, !dbg !2653
  %arrayidx3115 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x43113, i64 0, i64 %idxprom3114, !dbg !2653
  %1892 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3115, align 8, !dbg !2653
  %1893 = load i8*, i8** %p_fenc, align 8, !dbg !2653
  %1894 = load i8*, i8** %pix_base3103, align 8, !dbg !2653
  %1895 = load i32, i32* %i2973, align 4, !dbg !2653
  %mul3116 = mul nsw i32 0, %1895, !dbg !2653
  %idx.ext3117 = sext i32 %mul3116 to i64, !dbg !2653
  %add.ptr3118 = getelementptr inbounds i8, i8* %1894, i64 %idx.ext3117, !dbg !2653
  %1896 = load i32, i32* %dy, align 4, !dbg !2653
  %mul3119 = mul nsw i32 0, %1896, !dbg !2653
  %idx.ext3120 = sext i32 %mul3119 to i64, !dbg !2653
  %add.ptr3121 = getelementptr inbounds i8, i8* %add.ptr3118, i64 %idx.ext3120, !dbg !2653
  %1897 = load i8*, i8** %pix_base3103, align 8, !dbg !2653
  %1898 = load i32, i32* %i2973, align 4, !dbg !2653
  %mul3122 = mul nsw i32 0, %1898, !dbg !2653
  %idx.ext3123 = sext i32 %mul3122 to i64, !dbg !2653
  %add.ptr3124 = getelementptr inbounds i8, i8* %1897, i64 %idx.ext3123, !dbg !2653
  %1899 = load i32, i32* %dy, align 4, !dbg !2653
  %mul3125 = mul nsw i32 8, %1899, !dbg !2653
  %idx.ext3126 = sext i32 %mul3125 to i64, !dbg !2653
  %add.ptr3127 = getelementptr inbounds i8, i8* %add.ptr3124, i64 %idx.ext3126, !dbg !2653
  %1900 = load i8*, i8** %pix_base3103, align 8, !dbg !2653
  %1901 = load i32, i32* %i2973, align 4, !dbg !2653
  %mul3128 = mul nsw i32 2, %1901, !dbg !2653
  %idx.ext3129 = sext i32 %mul3128 to i64, !dbg !2653
  %idx.neg3130 = sub i64 0, %idx.ext3129, !dbg !2653
  %add.ptr3131 = getelementptr inbounds i8, i8* %1900, i64 %idx.neg3130, !dbg !2653
  %1902 = load i32, i32* %dy, align 4, !dbg !2653
  %mul3132 = mul nsw i32 1, %1902, !dbg !2653
  %idx.ext3133 = sext i32 %mul3132 to i64, !dbg !2653
  %add.ptr3134 = getelementptr inbounds i8, i8* %add.ptr3131, i64 %idx.ext3133, !dbg !2653
  %1903 = load i8*, i8** %pix_base3103, align 8, !dbg !2653
  %1904 = load i32, i32* %i2973, align 4, !dbg !2653
  %mul3135 = mul nsw i32 2, %1904, !dbg !2653
  %idx.ext3136 = sext i32 %mul3135 to i64, !dbg !2653
  %add.ptr3137 = getelementptr inbounds i8, i8* %1903, i64 %idx.ext3136, !dbg !2653
  %1905 = load i32, i32* %dy, align 4, !dbg !2653
  %mul3138 = mul nsw i32 1, %1905, !dbg !2653
  %idx.ext3139 = sext i32 %mul3138 to i64, !dbg !2653
  %add.ptr3140 = getelementptr inbounds i8, i8* %add.ptr3137, i64 %idx.ext3139, !dbg !2653
  %1906 = load i32, i32* %stride, align 4, !dbg !2653
  %arraydecay3141 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2653
  %add.ptr3142 = getelementptr inbounds i32, i32* %arraydecay3141, i64 0, !dbg !2653
  call void %1892(i8* %1893, i8* %add.ptr3121, i8* %add.ptr3127, i8* %add.ptr3134, i8* %add.ptr3140, i32 %1906, i32* %add.ptr3142), !dbg !2653
  %1907 = load i32, i32* %dy, align 4, !dbg !2653
  %mul3143 = mul nsw i32 2, %1907, !dbg !2653
  %1908 = load i8*, i8** %pix_base3103, align 8, !dbg !2653
  %idx.ext3144 = sext i32 %mul3143 to i64, !dbg !2653
  %add.ptr3145 = getelementptr inbounds i8, i8* %1908, i64 %idx.ext3144, !dbg !2653
  store i8* %add.ptr3145, i8** %pix_base3103, align 8, !dbg !2653
  %1909 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2654
  %pixf3146 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1909, i32 0, i32 69, !dbg !2654
  %fpelcmp_x43147 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3146, i32 0, i32 9, !dbg !2654
  %1910 = load i32, i32* %i_pixel5, align 4, !dbg !2654
  %idxprom3148 = sext i32 %1910 to i64, !dbg !2654
  %arrayidx3149 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x43147, i64 0, i64 %idxprom3148, !dbg !2654
  %1911 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3149, align 8, !dbg !2654
  %1912 = load i8*, i8** %p_fenc, align 8, !dbg !2654
  %1913 = load i8*, i8** %pix_base3103, align 8, !dbg !2654
  %1914 = load i32, i32* %i2973, align 4, !dbg !2654
  %mul3150 = mul nsw i32 4, %1914, !dbg !2654
  %idx.ext3151 = sext i32 %mul3150 to i64, !dbg !2654
  %idx.neg3152 = sub i64 0, %idx.ext3151, !dbg !2654
  %add.ptr3153 = getelementptr inbounds i8, i8* %1913, i64 %idx.neg3152, !dbg !2654
  %1915 = load i32, i32* %dy, align 4, !dbg !2654
  %mul3154 = mul nsw i32 0, %1915, !dbg !2654
  %idx.ext3155 = sext i32 %mul3154 to i64, !dbg !2654
  %add.ptr3156 = getelementptr inbounds i8, i8* %add.ptr3153, i64 %idx.ext3155, !dbg !2654
  %1916 = load i8*, i8** %pix_base3103, align 8, !dbg !2654
  %1917 = load i32, i32* %i2973, align 4, !dbg !2654
  %mul3157 = mul nsw i32 4, %1917, !dbg !2654
  %idx.ext3158 = sext i32 %mul3157 to i64, !dbg !2654
  %add.ptr3159 = getelementptr inbounds i8, i8* %1916, i64 %idx.ext3158, !dbg !2654
  %1918 = load i32, i32* %dy, align 4, !dbg !2654
  %mul3160 = mul nsw i32 0, %1918, !dbg !2654
  %idx.ext3161 = sext i32 %mul3160 to i64, !dbg !2654
  %add.ptr3162 = getelementptr inbounds i8, i8* %add.ptr3159, i64 %idx.ext3161, !dbg !2654
  %1919 = load i8*, i8** %pix_base3103, align 8, !dbg !2654
  %1920 = load i32, i32* %i2973, align 4, !dbg !2654
  %mul3163 = mul nsw i32 4, %1920, !dbg !2654
  %idx.ext3164 = sext i32 %mul3163 to i64, !dbg !2654
  %idx.neg3165 = sub i64 0, %idx.ext3164, !dbg !2654
  %add.ptr3166 = getelementptr inbounds i8, i8* %1919, i64 %idx.neg3165, !dbg !2654
  %1921 = load i32, i32* %dy, align 4, !dbg !2654
  %mul3167 = mul nsw i32 1, %1921, !dbg !2654
  %idx.ext3168 = sext i32 %mul3167 to i64, !dbg !2654
  %add.ptr3169 = getelementptr inbounds i8, i8* %add.ptr3166, i64 %idx.ext3168, !dbg !2654
  %1922 = load i8*, i8** %pix_base3103, align 8, !dbg !2654
  %1923 = load i32, i32* %i2973, align 4, !dbg !2654
  %mul3170 = mul nsw i32 4, %1923, !dbg !2654
  %idx.ext3171 = sext i32 %mul3170 to i64, !dbg !2654
  %add.ptr3172 = getelementptr inbounds i8, i8* %1922, i64 %idx.ext3171, !dbg !2654
  %1924 = load i32, i32* %dy, align 4, !dbg !2654
  %mul3173 = mul nsw i32 1, %1924, !dbg !2654
  %idx.ext3174 = sext i32 %mul3173 to i64, !dbg !2654
  %add.ptr3175 = getelementptr inbounds i8, i8* %add.ptr3172, i64 %idx.ext3174, !dbg !2654
  %1925 = load i32, i32* %stride, align 4, !dbg !2654
  %arraydecay3176 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2654
  %add.ptr3177 = getelementptr inbounds i32, i32* %arraydecay3176, i64 4, !dbg !2654
  call void %1911(i8* %1912, i8* %add.ptr3156, i8* %add.ptr3162, i8* %add.ptr3169, i8* %add.ptr3175, i32 %1925, i32* %add.ptr3177), !dbg !2654
  %1926 = load i32, i32* %dy, align 4, !dbg !2654
  %mul3178 = mul nsw i32 2, %1926, !dbg !2654
  %1927 = load i8*, i8** %pix_base3103, align 8, !dbg !2654
  %idx.ext3179 = sext i32 %mul3178 to i64, !dbg !2654
  %add.ptr3180 = getelementptr inbounds i8, i8* %1927, i64 %idx.ext3179, !dbg !2654
  store i8* %add.ptr3180, i8** %pix_base3103, align 8, !dbg !2654
  %1928 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2655
  %pixf3181 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1928, i32 0, i32 69, !dbg !2655
  %fpelcmp_x43182 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3181, i32 0, i32 9, !dbg !2655
  %1929 = load i32, i32* %i_pixel5, align 4, !dbg !2655
  %idxprom3183 = sext i32 %1929 to i64, !dbg !2655
  %arrayidx3184 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x43182, i64 0, i64 %idxprom3183, !dbg !2655
  %1930 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3184, align 8, !dbg !2655
  %1931 = load i8*, i8** %p_fenc, align 8, !dbg !2655
  %1932 = load i8*, i8** %pix_base3103, align 8, !dbg !2655
  %1933 = load i32, i32* %i2973, align 4, !dbg !2655
  %mul3185 = mul nsw i32 4, %1933, !dbg !2655
  %idx.ext3186 = sext i32 %mul3185 to i64, !dbg !2655
  %idx.neg3187 = sub i64 0, %idx.ext3186, !dbg !2655
  %add.ptr3188 = getelementptr inbounds i8, i8* %1932, i64 %idx.neg3187, !dbg !2655
  %1934 = load i32, i32* %dy, align 4, !dbg !2655
  %mul3189 = mul nsw i32 0, %1934, !dbg !2655
  %idx.ext3190 = sext i32 %mul3189 to i64, !dbg !2655
  %add.ptr3191 = getelementptr inbounds i8, i8* %add.ptr3188, i64 %idx.ext3190, !dbg !2655
  %1935 = load i8*, i8** %pix_base3103, align 8, !dbg !2655
  %1936 = load i32, i32* %i2973, align 4, !dbg !2655
  %mul3192 = mul nsw i32 4, %1936, !dbg !2655
  %idx.ext3193 = sext i32 %mul3192 to i64, !dbg !2655
  %add.ptr3194 = getelementptr inbounds i8, i8* %1935, i64 %idx.ext3193, !dbg !2655
  %1937 = load i32, i32* %dy, align 4, !dbg !2655
  %mul3195 = mul nsw i32 0, %1937, !dbg !2655
  %idx.ext3196 = sext i32 %mul3195 to i64, !dbg !2655
  %add.ptr3197 = getelementptr inbounds i8, i8* %add.ptr3194, i64 %idx.ext3196, !dbg !2655
  %1938 = load i8*, i8** %pix_base3103, align 8, !dbg !2655
  %1939 = load i32, i32* %i2973, align 4, !dbg !2655
  %mul3198 = mul nsw i32 4, %1939, !dbg !2655
  %idx.ext3199 = sext i32 %mul3198 to i64, !dbg !2655
  %idx.neg3200 = sub i64 0, %idx.ext3199, !dbg !2655
  %add.ptr3201 = getelementptr inbounds i8, i8* %1938, i64 %idx.neg3200, !dbg !2655
  %1940 = load i32, i32* %dy, align 4, !dbg !2655
  %mul3202 = mul nsw i32 1, %1940, !dbg !2655
  %idx.ext3203 = sext i32 %mul3202 to i64, !dbg !2655
  %add.ptr3204 = getelementptr inbounds i8, i8* %add.ptr3201, i64 %idx.ext3203, !dbg !2655
  %1941 = load i8*, i8** %pix_base3103, align 8, !dbg !2655
  %1942 = load i32, i32* %i2973, align 4, !dbg !2655
  %mul3205 = mul nsw i32 4, %1942, !dbg !2655
  %idx.ext3206 = sext i32 %mul3205 to i64, !dbg !2655
  %add.ptr3207 = getelementptr inbounds i8, i8* %1941, i64 %idx.ext3206, !dbg !2655
  %1943 = load i32, i32* %dy, align 4, !dbg !2655
  %mul3208 = mul nsw i32 1, %1943, !dbg !2655
  %idx.ext3209 = sext i32 %mul3208 to i64, !dbg !2655
  %add.ptr3210 = getelementptr inbounds i8, i8* %add.ptr3207, i64 %idx.ext3209, !dbg !2655
  %1944 = load i32, i32* %stride, align 4, !dbg !2655
  %arraydecay3211 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2655
  %add.ptr3212 = getelementptr inbounds i32, i32* %arraydecay3211, i64 8, !dbg !2655
  call void %1930(i8* %1931, i8* %add.ptr3191, i8* %add.ptr3197, i8* %add.ptr3204, i8* %add.ptr3210, i32 %1944, i32* %add.ptr3212), !dbg !2655
  %1945 = load i32, i32* %dy, align 4, !dbg !2655
  %mul3213 = mul nsw i32 2, %1945, !dbg !2655
  %1946 = load i8*, i8** %pix_base3103, align 8, !dbg !2655
  %idx.ext3214 = sext i32 %mul3213 to i64, !dbg !2655
  %add.ptr3215 = getelementptr inbounds i8, i8* %1946, i64 %idx.ext3214, !dbg !2655
  store i8* %add.ptr3215, i8** %pix_base3103, align 8, !dbg !2655
  %1947 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2656
  %pixf3216 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %1947, i32 0, i32 69, !dbg !2656
  %fpelcmp_x43217 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3216, i32 0, i32 9, !dbg !2656
  %1948 = load i32, i32* %i_pixel5, align 4, !dbg !2656
  %idxprom3218 = sext i32 %1948 to i64, !dbg !2656
  %arrayidx3219 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x43217, i64 0, i64 %idxprom3218, !dbg !2656
  %1949 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3219, align 8, !dbg !2656
  %1950 = load i8*, i8** %p_fenc, align 8, !dbg !2656
  %1951 = load i8*, i8** %pix_base3103, align 8, !dbg !2656
  %1952 = load i32, i32* %i2973, align 4, !dbg !2656
  %mul3220 = mul nsw i32 4, %1952, !dbg !2656
  %idx.ext3221 = sext i32 %mul3220 to i64, !dbg !2656
  %idx.neg3222 = sub i64 0, %idx.ext3221, !dbg !2656
  %add.ptr3223 = getelementptr inbounds i8, i8* %1951, i64 %idx.neg3222, !dbg !2656
  %1953 = load i32, i32* %dy, align 4, !dbg !2656
  %mul3224 = mul nsw i32 0, %1953, !dbg !2656
  %idx.ext3225 = sext i32 %mul3224 to i64, !dbg !2656
  %add.ptr3226 = getelementptr inbounds i8, i8* %add.ptr3223, i64 %idx.ext3225, !dbg !2656
  %1954 = load i8*, i8** %pix_base3103, align 8, !dbg !2656
  %1955 = load i32, i32* %i2973, align 4, !dbg !2656
  %mul3227 = mul nsw i32 4, %1955, !dbg !2656
  %idx.ext3228 = sext i32 %mul3227 to i64, !dbg !2656
  %add.ptr3229 = getelementptr inbounds i8, i8* %1954, i64 %idx.ext3228, !dbg !2656
  %1956 = load i32, i32* %dy, align 4, !dbg !2656
  %mul3230 = mul nsw i32 0, %1956, !dbg !2656
  %idx.ext3231 = sext i32 %mul3230 to i64, !dbg !2656
  %add.ptr3232 = getelementptr inbounds i8, i8* %add.ptr3229, i64 %idx.ext3231, !dbg !2656
  %1957 = load i8*, i8** %pix_base3103, align 8, !dbg !2656
  %1958 = load i32, i32* %i2973, align 4, !dbg !2656
  %mul3233 = mul nsw i32 2, %1958, !dbg !2656
  %idx.ext3234 = sext i32 %mul3233 to i64, !dbg !2656
  %idx.neg3235 = sub i64 0, %idx.ext3234, !dbg !2656
  %add.ptr3236 = getelementptr inbounds i8, i8* %1957, i64 %idx.neg3235, !dbg !2656
  %1959 = load i32, i32* %dy, align 4, !dbg !2656
  %mul3237 = mul nsw i32 1, %1959, !dbg !2656
  %idx.ext3238 = sext i32 %mul3237 to i64, !dbg !2656
  %add.ptr3239 = getelementptr inbounds i8, i8* %add.ptr3236, i64 %idx.ext3238, !dbg !2656
  %1960 = load i8*, i8** %pix_base3103, align 8, !dbg !2656
  %1961 = load i32, i32* %i2973, align 4, !dbg !2656
  %mul3240 = mul nsw i32 2, %1961, !dbg !2656
  %idx.ext3241 = sext i32 %mul3240 to i64, !dbg !2656
  %add.ptr3242 = getelementptr inbounds i8, i8* %1960, i64 %idx.ext3241, !dbg !2656
  %1962 = load i32, i32* %dy, align 4, !dbg !2656
  %mul3243 = mul nsw i32 1, %1962, !dbg !2656
  %idx.ext3244 = sext i32 %mul3243 to i64, !dbg !2656
  %add.ptr3245 = getelementptr inbounds i8, i8* %add.ptr3242, i64 %idx.ext3244, !dbg !2656
  %1963 = load i32, i32* %stride, align 4, !dbg !2656
  %arraydecay3246 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2656
  %add.ptr3247 = getelementptr inbounds i32, i32* %arraydecay3246, i64 12, !dbg !2656
  call void %1949(i8* %1950, i8* %add.ptr3226, i8* %add.ptr3232, i8* %add.ptr3239, i8* %add.ptr3245, i32 %1963, i32* %add.ptr3247), !dbg !2656
  %1964 = load i32, i32* %dy, align 4, !dbg !2656
  %mul3248 = mul nsw i32 2, %1964, !dbg !2656
  %1965 = load i8*, i8** %pix_base3103, align 8, !dbg !2656
  %idx.ext3249 = sext i32 %mul3248 to i64, !dbg !2656
  %add.ptr3250 = getelementptr inbounds i8, i8* %1965, i64 %idx.ext3249, !dbg !2656
  store i8* %add.ptr3250, i8** %pix_base3103, align 8, !dbg !2656
  %1966 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2657
  %1967 = load i32, i32* %i2973, align 4, !dbg !2657
  %mul3251 = mul nsw i32 0, %1967, !dbg !2657
  %idxprom3252 = sext i32 %mul3251 to i64, !dbg !2657
  %arrayidx3253 = getelementptr inbounds i16, i16* %1966, i64 %idxprom3252, !dbg !2657
  %1968 = load i16, i16* %arrayidx3253, align 2, !dbg !2657
  %conv3254 = zext i16 %1968 to i32, !dbg !2657
  %1969 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2657
  %1970 = load i32, i32* %i2973, align 4, !dbg !2657
  %mul3255 = mul nsw i32 -16, %1970, !dbg !2657
  %idxprom3256 = sext i32 %mul3255 to i64, !dbg !2657
  %arrayidx3257 = getelementptr inbounds i16, i16* %1969, i64 %idxprom3256, !dbg !2657
  %1971 = load i16, i16* %arrayidx3257, align 2, !dbg !2657
  %conv3258 = zext i16 %1971 to i32, !dbg !2657
  %add3259 = add nsw i32 %conv3254, %conv3258, !dbg !2657
  %arrayidx3260 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2657
  %1972 = load i32, i32* %arrayidx3260, align 16, !dbg !2657
  %add3261 = add nsw i32 %1972, %add3259, !dbg !2657
  store i32 %add3261, i32* %arrayidx3260, align 16, !dbg !2657
  %1973 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2658
  %1974 = load i32, i32* %i2973, align 4, !dbg !2658
  %mul3262 = mul nsw i32 0, %1974, !dbg !2658
  %idxprom3263 = sext i32 %mul3262 to i64, !dbg !2658
  %arrayidx3264 = getelementptr inbounds i16, i16* %1973, i64 %idxprom3263, !dbg !2658
  %1975 = load i16, i16* %arrayidx3264, align 2, !dbg !2658
  %conv3265 = zext i16 %1975 to i32, !dbg !2658
  %1976 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2658
  %1977 = load i32, i32* %i2973, align 4, !dbg !2658
  %mul3266 = mul nsw i32 16, %1977, !dbg !2658
  %idxprom3267 = sext i32 %mul3266 to i64, !dbg !2658
  %arrayidx3268 = getelementptr inbounds i16, i16* %1976, i64 %idxprom3267, !dbg !2658
  %1978 = load i16, i16* %arrayidx3268, align 2, !dbg !2658
  %conv3269 = zext i16 %1978 to i32, !dbg !2658
  %add3270 = add nsw i32 %conv3265, %conv3269, !dbg !2658
  %arrayidx3271 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2658
  %1979 = load i32, i32* %arrayidx3271, align 4, !dbg !2658
  %add3272 = add nsw i32 %1979, %add3270, !dbg !2658
  store i32 %add3272, i32* %arrayidx3271, align 4, !dbg !2658
  %1980 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2659
  %1981 = load i32, i32* %i2973, align 4, !dbg !2659
  %mul3273 = mul nsw i32 -8, %1981, !dbg !2659
  %idxprom3274 = sext i32 %mul3273 to i64, !dbg !2659
  %arrayidx3275 = getelementptr inbounds i16, i16* %1980, i64 %idxprom3274, !dbg !2659
  %1982 = load i16, i16* %arrayidx3275, align 2, !dbg !2659
  %conv3276 = zext i16 %1982 to i32, !dbg !2659
  %1983 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2659
  %1984 = load i32, i32* %i2973, align 4, !dbg !2659
  %mul3277 = mul nsw i32 -12, %1984, !dbg !2659
  %idxprom3278 = sext i32 %mul3277 to i64, !dbg !2659
  %arrayidx3279 = getelementptr inbounds i16, i16* %1983, i64 %idxprom3278, !dbg !2659
  %1985 = load i16, i16* %arrayidx3279, align 2, !dbg !2659
  %conv3280 = zext i16 %1985 to i32, !dbg !2659
  %add3281 = add nsw i32 %conv3276, %conv3280, !dbg !2659
  %arrayidx3282 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2659
  %1986 = load i32, i32* %arrayidx3282, align 8, !dbg !2659
  %add3283 = add nsw i32 %1986, %add3281, !dbg !2659
  store i32 %add3283, i32* %arrayidx3282, align 8, !dbg !2659
  %1987 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2660
  %1988 = load i32, i32* %i2973, align 4, !dbg !2660
  %mul3284 = mul nsw i32 8, %1988, !dbg !2660
  %idxprom3285 = sext i32 %mul3284 to i64, !dbg !2660
  %arrayidx3286 = getelementptr inbounds i16, i16* %1987, i64 %idxprom3285, !dbg !2660
  %1989 = load i16, i16* %arrayidx3286, align 2, !dbg !2660
  %conv3287 = zext i16 %1989 to i32, !dbg !2660
  %1990 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2660
  %1991 = load i32, i32* %i2973, align 4, !dbg !2660
  %mul3288 = mul nsw i32 -12, %1991, !dbg !2660
  %idxprom3289 = sext i32 %mul3288 to i64, !dbg !2660
  %arrayidx3290 = getelementptr inbounds i16, i16* %1990, i64 %idxprom3289, !dbg !2660
  %1992 = load i16, i16* %arrayidx3290, align 2, !dbg !2660
  %conv3291 = zext i16 %1992 to i32, !dbg !2660
  %add3292 = add nsw i32 %conv3287, %conv3291, !dbg !2660
  %arrayidx3293 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2660
  %1993 = load i32, i32* %arrayidx3293, align 4, !dbg !2660
  %add3294 = add nsw i32 %1993, %add3292, !dbg !2660
  store i32 %add3294, i32* %arrayidx3293, align 4, !dbg !2660
  %1994 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2661
  %1995 = load i32, i32* %i2973, align 4, !dbg !2661
  %mul3295 = mul nsw i32 -16, %1995, !dbg !2661
  %idxprom3296 = sext i32 %mul3295 to i64, !dbg !2661
  %arrayidx3297 = getelementptr inbounds i16, i16* %1994, i64 %idxprom3296, !dbg !2661
  %1996 = load i16, i16* %arrayidx3297, align 2, !dbg !2661
  %conv3298 = zext i16 %1996 to i32, !dbg !2661
  %1997 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2661
  %1998 = load i32, i32* %i2973, align 4, !dbg !2661
  %mul3299 = mul nsw i32 -8, %1998, !dbg !2661
  %idxprom3300 = sext i32 %mul3299 to i64, !dbg !2661
  %arrayidx3301 = getelementptr inbounds i16, i16* %1997, i64 %idxprom3300, !dbg !2661
  %1999 = load i16, i16* %arrayidx3301, align 2, !dbg !2661
  %conv3302 = zext i16 %1999 to i32, !dbg !2661
  %add3303 = add nsw i32 %conv3298, %conv3302, !dbg !2661
  %arrayidx3304 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 4, !dbg !2661
  %2000 = load i32, i32* %arrayidx3304, align 16, !dbg !2661
  %add3305 = add nsw i32 %2000, %add3303, !dbg !2661
  store i32 %add3305, i32* %arrayidx3304, align 16, !dbg !2661
  %2001 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2662
  %2002 = load i32, i32* %i2973, align 4, !dbg !2662
  %mul3306 = mul nsw i32 16, %2002, !dbg !2662
  %idxprom3307 = sext i32 %mul3306 to i64, !dbg !2662
  %arrayidx3308 = getelementptr inbounds i16, i16* %2001, i64 %idxprom3307, !dbg !2662
  %2003 = load i16, i16* %arrayidx3308, align 2, !dbg !2662
  %conv3309 = zext i16 %2003 to i32, !dbg !2662
  %2004 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2662
  %2005 = load i32, i32* %i2973, align 4, !dbg !2662
  %mul3310 = mul nsw i32 -8, %2005, !dbg !2662
  %idxprom3311 = sext i32 %mul3310 to i64, !dbg !2662
  %arrayidx3312 = getelementptr inbounds i16, i16* %2004, i64 %idxprom3311, !dbg !2662
  %2006 = load i16, i16* %arrayidx3312, align 2, !dbg !2662
  %conv3313 = zext i16 %2006 to i32, !dbg !2662
  %add3314 = add nsw i32 %conv3309, %conv3313, !dbg !2662
  %arrayidx3315 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 5, !dbg !2662
  %2007 = load i32, i32* %arrayidx3315, align 4, !dbg !2662
  %add3316 = add nsw i32 %2007, %add3314, !dbg !2662
  store i32 %add3316, i32* %arrayidx3315, align 4, !dbg !2662
  %2008 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2663
  %2009 = load i32, i32* %i2973, align 4, !dbg !2663
  %mul3317 = mul nsw i32 -16, %2009, !dbg !2663
  %idxprom3318 = sext i32 %mul3317 to i64, !dbg !2663
  %arrayidx3319 = getelementptr inbounds i16, i16* %2008, i64 %idxprom3318, !dbg !2663
  %2010 = load i16, i16* %arrayidx3319, align 2, !dbg !2663
  %conv3320 = zext i16 %2010 to i32, !dbg !2663
  %2011 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2663
  %2012 = load i32, i32* %i2973, align 4, !dbg !2663
  %mul3321 = mul nsw i32 -4, %2012, !dbg !2663
  %idxprom3322 = sext i32 %mul3321 to i64, !dbg !2663
  %arrayidx3323 = getelementptr inbounds i16, i16* %2011, i64 %idxprom3322, !dbg !2663
  %2013 = load i16, i16* %arrayidx3323, align 2, !dbg !2663
  %conv3324 = zext i16 %2013 to i32, !dbg !2663
  %add3325 = add nsw i32 %conv3320, %conv3324, !dbg !2663
  %arrayidx3326 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 6, !dbg !2663
  %2014 = load i32, i32* %arrayidx3326, align 8, !dbg !2663
  %add3327 = add nsw i32 %2014, %add3325, !dbg !2663
  store i32 %add3327, i32* %arrayidx3326, align 8, !dbg !2663
  %2015 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2664
  %2016 = load i32, i32* %i2973, align 4, !dbg !2664
  %mul3328 = mul nsw i32 16, %2016, !dbg !2664
  %idxprom3329 = sext i32 %mul3328 to i64, !dbg !2664
  %arrayidx3330 = getelementptr inbounds i16, i16* %2015, i64 %idxprom3329, !dbg !2664
  %2017 = load i16, i16* %arrayidx3330, align 2, !dbg !2664
  %conv3331 = zext i16 %2017 to i32, !dbg !2664
  %2018 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2664
  %2019 = load i32, i32* %i2973, align 4, !dbg !2664
  %mul3332 = mul nsw i32 -4, %2019, !dbg !2664
  %idxprom3333 = sext i32 %mul3332 to i64, !dbg !2664
  %arrayidx3334 = getelementptr inbounds i16, i16* %2018, i64 %idxprom3333, !dbg !2664
  %2020 = load i16, i16* %arrayidx3334, align 2, !dbg !2664
  %conv3335 = zext i16 %2020 to i32, !dbg !2664
  %add3336 = add nsw i32 %conv3331, %conv3335, !dbg !2664
  %arrayidx3337 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 7, !dbg !2664
  %2021 = load i32, i32* %arrayidx3337, align 4, !dbg !2664
  %add3338 = add nsw i32 %2021, %add3336, !dbg !2664
  store i32 %add3338, i32* %arrayidx3337, align 4, !dbg !2664
  %2022 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2665
  %2023 = load i32, i32* %i2973, align 4, !dbg !2665
  %mul3339 = mul nsw i32 -16, %2023, !dbg !2665
  %idxprom3340 = sext i32 %mul3339 to i64, !dbg !2665
  %arrayidx3341 = getelementptr inbounds i16, i16* %2022, i64 %idxprom3340, !dbg !2665
  %2024 = load i16, i16* %arrayidx3341, align 2, !dbg !2665
  %conv3342 = zext i16 %2024 to i32, !dbg !2665
  %2025 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2665
  %2026 = load i32, i32* %i2973, align 4, !dbg !2665
  %mul3343 = mul nsw i32 0, %2026, !dbg !2665
  %idxprom3344 = sext i32 %mul3343 to i64, !dbg !2665
  %arrayidx3345 = getelementptr inbounds i16, i16* %2025, i64 %idxprom3344, !dbg !2665
  %2027 = load i16, i16* %arrayidx3345, align 2, !dbg !2665
  %conv3346 = zext i16 %2027 to i32, !dbg !2665
  %add3347 = add nsw i32 %conv3342, %conv3346, !dbg !2665
  %arrayidx3348 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 8, !dbg !2665
  %2028 = load i32, i32* %arrayidx3348, align 16, !dbg !2665
  %add3349 = add nsw i32 %2028, %add3347, !dbg !2665
  store i32 %add3349, i32* %arrayidx3348, align 16, !dbg !2665
  %2029 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2666
  %2030 = load i32, i32* %i2973, align 4, !dbg !2666
  %mul3350 = mul nsw i32 16, %2030, !dbg !2666
  %idxprom3351 = sext i32 %mul3350 to i64, !dbg !2666
  %arrayidx3352 = getelementptr inbounds i16, i16* %2029, i64 %idxprom3351, !dbg !2666
  %2031 = load i16, i16* %arrayidx3352, align 2, !dbg !2666
  %conv3353 = zext i16 %2031 to i32, !dbg !2666
  %2032 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2666
  %2033 = load i32, i32* %i2973, align 4, !dbg !2666
  %mul3354 = mul nsw i32 0, %2033, !dbg !2666
  %idxprom3355 = sext i32 %mul3354 to i64, !dbg !2666
  %arrayidx3356 = getelementptr inbounds i16, i16* %2032, i64 %idxprom3355, !dbg !2666
  %2034 = load i16, i16* %arrayidx3356, align 2, !dbg !2666
  %conv3357 = zext i16 %2034 to i32, !dbg !2666
  %add3358 = add nsw i32 %conv3353, %conv3357, !dbg !2666
  %arrayidx3359 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 9, !dbg !2666
  %2035 = load i32, i32* %arrayidx3359, align 4, !dbg !2666
  %add3360 = add nsw i32 %2035, %add3358, !dbg !2666
  store i32 %add3360, i32* %arrayidx3359, align 4, !dbg !2666
  %2036 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2667
  %2037 = load i32, i32* %i2973, align 4, !dbg !2667
  %mul3361 = mul nsw i32 -16, %2037, !dbg !2667
  %idxprom3362 = sext i32 %mul3361 to i64, !dbg !2667
  %arrayidx3363 = getelementptr inbounds i16, i16* %2036, i64 %idxprom3362, !dbg !2667
  %2038 = load i16, i16* %arrayidx3363, align 2, !dbg !2667
  %conv3364 = zext i16 %2038 to i32, !dbg !2667
  %2039 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2667
  %2040 = load i32, i32* %i2973, align 4, !dbg !2667
  %mul3365 = mul nsw i32 4, %2040, !dbg !2667
  %idxprom3366 = sext i32 %mul3365 to i64, !dbg !2667
  %arrayidx3367 = getelementptr inbounds i16, i16* %2039, i64 %idxprom3366, !dbg !2667
  %2041 = load i16, i16* %arrayidx3367, align 2, !dbg !2667
  %conv3368 = zext i16 %2041 to i32, !dbg !2667
  %add3369 = add nsw i32 %conv3364, %conv3368, !dbg !2667
  %arrayidx3370 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 10, !dbg !2667
  %2042 = load i32, i32* %arrayidx3370, align 8, !dbg !2667
  %add3371 = add nsw i32 %2042, %add3369, !dbg !2667
  store i32 %add3371, i32* %arrayidx3370, align 8, !dbg !2667
  %2043 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2668
  %2044 = load i32, i32* %i2973, align 4, !dbg !2668
  %mul3372 = mul nsw i32 16, %2044, !dbg !2668
  %idxprom3373 = sext i32 %mul3372 to i64, !dbg !2668
  %arrayidx3374 = getelementptr inbounds i16, i16* %2043, i64 %idxprom3373, !dbg !2668
  %2045 = load i16, i16* %arrayidx3374, align 2, !dbg !2668
  %conv3375 = zext i16 %2045 to i32, !dbg !2668
  %2046 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2668
  %2047 = load i32, i32* %i2973, align 4, !dbg !2668
  %mul3376 = mul nsw i32 4, %2047, !dbg !2668
  %idxprom3377 = sext i32 %mul3376 to i64, !dbg !2668
  %arrayidx3378 = getelementptr inbounds i16, i16* %2046, i64 %idxprom3377, !dbg !2668
  %2048 = load i16, i16* %arrayidx3378, align 2, !dbg !2668
  %conv3379 = zext i16 %2048 to i32, !dbg !2668
  %add3380 = add nsw i32 %conv3375, %conv3379, !dbg !2668
  %arrayidx3381 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 11, !dbg !2668
  %2049 = load i32, i32* %arrayidx3381, align 4, !dbg !2668
  %add3382 = add nsw i32 %2049, %add3380, !dbg !2668
  store i32 %add3382, i32* %arrayidx3381, align 4, !dbg !2668
  %2050 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2669
  %2051 = load i32, i32* %i2973, align 4, !dbg !2669
  %mul3383 = mul nsw i32 -16, %2051, !dbg !2669
  %idxprom3384 = sext i32 %mul3383 to i64, !dbg !2669
  %arrayidx3385 = getelementptr inbounds i16, i16* %2050, i64 %idxprom3384, !dbg !2669
  %2052 = load i16, i16* %arrayidx3385, align 2, !dbg !2669
  %conv3386 = zext i16 %2052 to i32, !dbg !2669
  %2053 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2669
  %2054 = load i32, i32* %i2973, align 4, !dbg !2669
  %mul3387 = mul nsw i32 8, %2054, !dbg !2669
  %idxprom3388 = sext i32 %mul3387 to i64, !dbg !2669
  %arrayidx3389 = getelementptr inbounds i16, i16* %2053, i64 %idxprom3388, !dbg !2669
  %2055 = load i16, i16* %arrayidx3389, align 2, !dbg !2669
  %conv3390 = zext i16 %2055 to i32, !dbg !2669
  %add3391 = add nsw i32 %conv3386, %conv3390, !dbg !2669
  %arrayidx3392 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 12, !dbg !2669
  %2056 = load i32, i32* %arrayidx3392, align 16, !dbg !2669
  %add3393 = add nsw i32 %2056, %add3391, !dbg !2669
  store i32 %add3393, i32* %arrayidx3392, align 16, !dbg !2669
  %2057 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2670
  %2058 = load i32, i32* %i2973, align 4, !dbg !2670
  %mul3394 = mul nsw i32 16, %2058, !dbg !2670
  %idxprom3395 = sext i32 %mul3394 to i64, !dbg !2670
  %arrayidx3396 = getelementptr inbounds i16, i16* %2057, i64 %idxprom3395, !dbg !2670
  %2059 = load i16, i16* %arrayidx3396, align 2, !dbg !2670
  %conv3397 = zext i16 %2059 to i32, !dbg !2670
  %2060 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2670
  %2061 = load i32, i32* %i2973, align 4, !dbg !2670
  %mul3398 = mul nsw i32 8, %2061, !dbg !2670
  %idxprom3399 = sext i32 %mul3398 to i64, !dbg !2670
  %arrayidx3400 = getelementptr inbounds i16, i16* %2060, i64 %idxprom3399, !dbg !2670
  %2062 = load i16, i16* %arrayidx3400, align 2, !dbg !2670
  %conv3401 = zext i16 %2062 to i32, !dbg !2670
  %add3402 = add nsw i32 %conv3397, %conv3401, !dbg !2670
  %arrayidx3403 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 13, !dbg !2670
  %2063 = load i32, i32* %arrayidx3403, align 4, !dbg !2670
  %add3404 = add nsw i32 %2063, %add3402, !dbg !2670
  store i32 %add3404, i32* %arrayidx3403, align 4, !dbg !2670
  %2064 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2671
  %2065 = load i32, i32* %i2973, align 4, !dbg !2671
  %mul3405 = mul nsw i32 -8, %2065, !dbg !2671
  %idxprom3406 = sext i32 %mul3405 to i64, !dbg !2671
  %arrayidx3407 = getelementptr inbounds i16, i16* %2064, i64 %idxprom3406, !dbg !2671
  %2066 = load i16, i16* %arrayidx3407, align 2, !dbg !2671
  %conv3408 = zext i16 %2066 to i32, !dbg !2671
  %2067 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2671
  %2068 = load i32, i32* %i2973, align 4, !dbg !2671
  %mul3409 = mul nsw i32 12, %2068, !dbg !2671
  %idxprom3410 = sext i32 %mul3409 to i64, !dbg !2671
  %arrayidx3411 = getelementptr inbounds i16, i16* %2067, i64 %idxprom3410, !dbg !2671
  %2069 = load i16, i16* %arrayidx3411, align 2, !dbg !2671
  %conv3412 = zext i16 %2069 to i32, !dbg !2671
  %add3413 = add nsw i32 %conv3408, %conv3412, !dbg !2671
  %arrayidx3414 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 14, !dbg !2671
  %2070 = load i32, i32* %arrayidx3414, align 8, !dbg !2671
  %add3415 = add nsw i32 %2070, %add3413, !dbg !2671
  store i32 %add3415, i32* %arrayidx3414, align 8, !dbg !2671
  %2071 = load i16*, i16** %p_cost_omvx, align 8, !dbg !2672
  %2072 = load i32, i32* %i2973, align 4, !dbg !2672
  %mul3416 = mul nsw i32 8, %2072, !dbg !2672
  %idxprom3417 = sext i32 %mul3416 to i64, !dbg !2672
  %arrayidx3418 = getelementptr inbounds i16, i16* %2071, i64 %idxprom3417, !dbg !2672
  %2073 = load i16, i16* %arrayidx3418, align 2, !dbg !2672
  %conv3419 = zext i16 %2073 to i32, !dbg !2672
  %2074 = load i16*, i16** %p_cost_omvy, align 8, !dbg !2672
  %2075 = load i32, i32* %i2973, align 4, !dbg !2672
  %mul3420 = mul nsw i32 12, %2075, !dbg !2672
  %idxprom3421 = sext i32 %mul3420 to i64, !dbg !2672
  %arrayidx3422 = getelementptr inbounds i16, i16* %2074, i64 %idxprom3421, !dbg !2672
  %2076 = load i16, i16* %arrayidx3422, align 2, !dbg !2672
  %conv3423 = zext i16 %2076 to i32, !dbg !2672
  %add3424 = add nsw i32 %conv3419, %conv3423, !dbg !2672
  %arrayidx3425 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 15, !dbg !2672
  %2077 = load i32, i32* %arrayidx3425, align 4, !dbg !2672
  %add3426 = add nsw i32 %2077, %add3424, !dbg !2672
  store i32 %add3426, i32* %arrayidx3425, align 4, !dbg !2672
  %arrayidx3427 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2673
  %2078 = load i32, i32* %arrayidx3427, align 16, !dbg !2673
  %2079 = load i32, i32* %bcost, align 4, !dbg !2673
  %cmp3428 = icmp slt i32 %2078, %2079, !dbg !2673
  br i1 %cmp3428, label %if.then3430, label %if.end3432, !dbg !2675

if.then3430:                                      ; preds = %if.else3101
  %arrayidx3431 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !2676
  %2080 = load i32, i32* %arrayidx3431, align 16, !dbg !2676
  store i32 %2080, i32* %bcost, align 4, !dbg !2676
  store i32 12, i32* %dir3102, align 4, !dbg !2676
  br label %if.end3432, !dbg !2676

if.end3432:                                       ; preds = %if.then3430, %if.else3101
  %arrayidx3433 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2678
  %2081 = load i32, i32* %arrayidx3433, align 4, !dbg !2678
  %2082 = load i32, i32* %bcost, align 4, !dbg !2678
  %cmp3434 = icmp slt i32 %2081, %2082, !dbg !2678
  br i1 %cmp3434, label %if.then3436, label %if.end3438, !dbg !2680

if.then3436:                                      ; preds = %if.end3432
  %arrayidx3437 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !2681
  %2083 = load i32, i32* %arrayidx3437, align 4, !dbg !2681
  store i32 %2083, i32* %bcost, align 4, !dbg !2681
  store i32 4, i32* %dir3102, align 4, !dbg !2681
  br label %if.end3438, !dbg !2681

if.end3438:                                       ; preds = %if.then3436, %if.end3432
  %arrayidx3439 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2683
  %2084 = load i32, i32* %arrayidx3439, align 8, !dbg !2683
  %2085 = load i32, i32* %bcost, align 4, !dbg !2683
  %cmp3440 = icmp slt i32 %2084, %2085, !dbg !2683
  br i1 %cmp3440, label %if.then3442, label %if.end3444, !dbg !2685

if.then3442:                                      ; preds = %if.end3438
  %arrayidx3443 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !2686
  %2086 = load i32, i32* %arrayidx3443, align 8, !dbg !2686
  store i32 %2086, i32* %bcost, align 4, !dbg !2686
  store i32 -19, i32* %dir3102, align 4, !dbg !2686
  br label %if.end3444, !dbg !2686

if.end3444:                                       ; preds = %if.then3442, %if.end3438
  %arrayidx3445 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2688
  %2087 = load i32, i32* %arrayidx3445, align 4, !dbg !2688
  %2088 = load i32, i32* %bcost, align 4, !dbg !2688
  %cmp3446 = icmp slt i32 %2087, %2088, !dbg !2688
  br i1 %cmp3446, label %if.then3448, label %if.end3450, !dbg !2690

if.then3448:                                      ; preds = %if.end3444
  %arrayidx3449 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 3, !dbg !2691
  %2089 = load i32, i32* %arrayidx3449, align 4, !dbg !2691
  store i32 %2089, i32* %bcost, align 4, !dbg !2691
  store i32 45, i32* %dir3102, align 4, !dbg !2691
  br label %if.end3450, !dbg !2691

if.end3450:                                       ; preds = %if.then3448, %if.end3444
  %arrayidx3451 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 4, !dbg !2693
  %2090 = load i32, i32* %arrayidx3451, align 16, !dbg !2693
  %2091 = load i32, i32* %bcost, align 4, !dbg !2693
  %cmp3452 = icmp slt i32 %2090, %2091, !dbg !2693
  br i1 %cmp3452, label %if.then3454, label %if.end3456, !dbg !2695

if.then3454:                                      ; preds = %if.end3450
  %arrayidx3455 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 4, !dbg !2696
  %2092 = load i32, i32* %arrayidx3455, align 16, !dbg !2696
  store i32 %2092, i32* %bcost, align 4, !dbg !2696
  store i32 -50, i32* %dir3102, align 4, !dbg !2696
  br label %if.end3456, !dbg !2696

if.end3456:                                       ; preds = %if.then3454, %if.end3450
  %arrayidx3457 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 5, !dbg !2698
  %2093 = load i32, i32* %arrayidx3457, align 4, !dbg !2698
  %2094 = load i32, i32* %bcost, align 4, !dbg !2698
  %cmp3458 = icmp slt i32 %2093, %2094, !dbg !2698
  br i1 %cmp3458, label %if.then3460, label %if.end3462, !dbg !2700

if.then3460:                                      ; preds = %if.end3456
  %arrayidx3461 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 5, !dbg !2701
  %2095 = load i32, i32* %arrayidx3461, align 4, !dbg !2701
  store i32 %2095, i32* %bcost, align 4, !dbg !2701
  store i32 78, i32* %dir3102, align 4, !dbg !2701
  br label %if.end3462, !dbg !2701

if.end3462:                                       ; preds = %if.then3460, %if.end3456
  %arrayidx3463 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 6, !dbg !2703
  %2096 = load i32, i32* %arrayidx3463, align 8, !dbg !2703
  %2097 = load i32, i32* %bcost, align 4, !dbg !2703
  %cmp3464 = icmp slt i32 %2096, %2097, !dbg !2703
  br i1 %cmp3464, label %if.then3466, label %if.end3468, !dbg !2705

if.then3466:                                      ; preds = %if.end3462
  %arrayidx3467 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 6, !dbg !2706
  %2098 = load i32, i32* %arrayidx3467, align 8, !dbg !2706
  store i32 %2098, i32* %bcost, align 4, !dbg !2706
  store i32 -49, i32* %dir3102, align 4, !dbg !2706
  br label %if.end3468, !dbg !2706

if.end3468:                                       ; preds = %if.then3466, %if.end3462
  %arrayidx3469 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 7, !dbg !2708
  %2099 = load i32, i32* %arrayidx3469, align 4, !dbg !2708
  %2100 = load i32, i32* %bcost, align 4, !dbg !2708
  %cmp3470 = icmp slt i32 %2099, %2100, !dbg !2708
  br i1 %cmp3470, label %if.then3472, label %if.end3474, !dbg !2710

if.then3472:                                      ; preds = %if.end3468
  %arrayidx3473 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 7, !dbg !2711
  %2101 = load i32, i32* %arrayidx3473, align 4, !dbg !2711
  store i32 %2101, i32* %bcost, align 4, !dbg !2711
  store i32 79, i32* %dir3102, align 4, !dbg !2711
  br label %if.end3474, !dbg !2711

if.end3474:                                       ; preds = %if.then3472, %if.end3468
  %arrayidx3475 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 8, !dbg !2713
  %2102 = load i32, i32* %arrayidx3475, align 16, !dbg !2713
  %2103 = load i32, i32* %bcost, align 4, !dbg !2713
  %cmp3476 = icmp slt i32 %2102, %2103, !dbg !2713
  br i1 %cmp3476, label %if.then3478, label %if.end3480, !dbg !2715

if.then3478:                                      ; preds = %if.end3474
  %arrayidx3479 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 8, !dbg !2716
  %2104 = load i32, i32* %arrayidx3479, align 16, !dbg !2716
  store i32 %2104, i32* %bcost, align 4, !dbg !2716
  store i32 -64, i32* %dir3102, align 4, !dbg !2716
  br label %if.end3480, !dbg !2716

if.end3480:                                       ; preds = %if.then3478, %if.end3474
  %arrayidx3481 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 9, !dbg !2718
  %2105 = load i32, i32* %arrayidx3481, align 4, !dbg !2718
  %2106 = load i32, i32* %bcost, align 4, !dbg !2718
  %cmp3482 = icmp slt i32 %2105, %2106, !dbg !2718
  br i1 %cmp3482, label %if.then3484, label %if.end3486, !dbg !2720

if.then3484:                                      ; preds = %if.end3480
  %arrayidx3485 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 9, !dbg !2721
  %2107 = load i32, i32* %arrayidx3485, align 4, !dbg !2721
  store i32 %2107, i32* %bcost, align 4, !dbg !2721
  store i32 64, i32* %dir3102, align 4, !dbg !2721
  br label %if.end3486, !dbg !2721

if.end3486:                                       ; preds = %if.then3484, %if.end3480
  %arrayidx3487 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 10, !dbg !2723
  %2108 = load i32, i32* %arrayidx3487, align 8, !dbg !2723
  %2109 = load i32, i32* %bcost, align 4, !dbg !2723
  %cmp3488 = icmp slt i32 %2108, %2109, !dbg !2723
  br i1 %cmp3488, label %if.then3490, label %if.end3492, !dbg !2725

if.then3490:                                      ; preds = %if.end3486
  %arrayidx3491 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 10, !dbg !2726
  %2110 = load i32, i32* %arrayidx3491, align 8, !dbg !2726
  store i32 %2110, i32* %bcost, align 4, !dbg !2726
  store i32 -63, i32* %dir3102, align 4, !dbg !2726
  br label %if.end3492, !dbg !2726

if.end3492:                                       ; preds = %if.then3490, %if.end3486
  %arrayidx3493 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 11, !dbg !2728
  %2111 = load i32, i32* %arrayidx3493, align 4, !dbg !2728
  %2112 = load i32, i32* %bcost, align 4, !dbg !2728
  %cmp3494 = icmp slt i32 %2111, %2112, !dbg !2728
  br i1 %cmp3494, label %if.then3496, label %if.end3498, !dbg !2730

if.then3496:                                      ; preds = %if.end3492
  %arrayidx3497 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 11, !dbg !2731
  %2113 = load i32, i32* %arrayidx3497, align 4, !dbg !2731
  store i32 %2113, i32* %bcost, align 4, !dbg !2731
  store i32 65, i32* %dir3102, align 4, !dbg !2731
  br label %if.end3498, !dbg !2731

if.end3498:                                       ; preds = %if.then3496, %if.end3492
  %arrayidx3499 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 12, !dbg !2733
  %2114 = load i32, i32* %arrayidx3499, align 16, !dbg !2733
  %2115 = load i32, i32* %bcost, align 4, !dbg !2733
  %cmp3500 = icmp slt i32 %2114, %2115, !dbg !2733
  br i1 %cmp3500, label %if.then3502, label %if.end3504, !dbg !2735

if.then3502:                                      ; preds = %if.end3498
  %arrayidx3503 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 12, !dbg !2736
  %2116 = load i32, i32* %arrayidx3503, align 16, !dbg !2736
  store i32 %2116, i32* %bcost, align 4, !dbg !2736
  store i32 -62, i32* %dir3102, align 4, !dbg !2736
  br label %if.end3504, !dbg !2736

if.end3504:                                       ; preds = %if.then3502, %if.end3498
  %arrayidx3505 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 13, !dbg !2738
  %2117 = load i32, i32* %arrayidx3505, align 4, !dbg !2738
  %2118 = load i32, i32* %bcost, align 4, !dbg !2738
  %cmp3506 = icmp slt i32 %2117, %2118, !dbg !2738
  br i1 %cmp3506, label %if.then3508, label %if.end3510, !dbg !2740

if.then3508:                                      ; preds = %if.end3504
  %arrayidx3509 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 13, !dbg !2741
  %2119 = load i32, i32* %arrayidx3509, align 4, !dbg !2741
  store i32 %2119, i32* %bcost, align 4, !dbg !2741
  store i32 66, i32* %dir3102, align 4, !dbg !2741
  br label %if.end3510, !dbg !2741

if.end3510:                                       ; preds = %if.then3508, %if.end3504
  %arrayidx3511 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 14, !dbg !2743
  %2120 = load i32, i32* %arrayidx3511, align 8, !dbg !2743
  %2121 = load i32, i32* %bcost, align 4, !dbg !2743
  %cmp3512 = icmp slt i32 %2120, %2121, !dbg !2743
  br i1 %cmp3512, label %if.then3514, label %if.end3516, !dbg !2745

if.then3514:                                      ; preds = %if.end3510
  %arrayidx3515 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 14, !dbg !2746
  %2122 = load i32, i32* %arrayidx3515, align 8, !dbg !2746
  store i32 %2122, i32* %bcost, align 4, !dbg !2746
  store i32 -29, i32* %dir3102, align 4, !dbg !2746
  br label %if.end3516, !dbg !2746

if.end3516:                                       ; preds = %if.then3514, %if.end3510
  %arrayidx3517 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 15, !dbg !2748
  %2123 = load i32, i32* %arrayidx3517, align 4, !dbg !2748
  %2124 = load i32, i32* %bcost, align 4, !dbg !2748
  %cmp3518 = icmp slt i32 %2123, %2124, !dbg !2748
  br i1 %cmp3518, label %if.then3520, label %if.end3522, !dbg !2750

if.then3520:                                      ; preds = %if.end3516
  %arrayidx3521 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 15, !dbg !2751
  %2125 = load i32, i32* %arrayidx3521, align 4, !dbg !2751
  store i32 %2125, i32* %bcost, align 4, !dbg !2751
  store i32 35, i32* %dir3102, align 4, !dbg !2751
  br label %if.end3522, !dbg !2751

if.end3522:                                       ; preds = %if.then3520, %if.end3516
  %2126 = load i32, i32* %dir3102, align 4, !dbg !2753
  %tobool3523 = icmp ne i32 %2126, 0, !dbg !2753
  br i1 %tobool3523, label %if.then3524, label %if.end3532, !dbg !2755

if.then3524:                                      ; preds = %if.end3522
  %2127 = load i32, i32* %omx, align 4, !dbg !2756
  %2128 = load i32, i32* %i2973, align 4, !dbg !2758
  %2129 = load i32, i32* %dir3102, align 4, !dbg !2759
  %shr3525 = ashr i32 %2129, 4, !dbg !2760
  %mul3526 = mul nsw i32 %2128, %shr3525, !dbg !2761
  %add3527 = add nsw i32 %2127, %mul3526, !dbg !2762
  store i32 %add3527, i32* %bmx, align 4, !dbg !2763
  %2130 = load i32, i32* %omy, align 4, !dbg !2764
  %2131 = load i32, i32* %i2973, align 4, !dbg !2765
  %2132 = load i32, i32* %dir3102, align 4, !dbg !2766
  %shl3528 = shl i32 %2132, 28, !dbg !2767
  %shr3529 = ashr i32 %shl3528, 28, !dbg !2768
  %mul3530 = mul nsw i32 %2131, %shr3529, !dbg !2769
  %add3531 = add nsw i32 %2130, %mul3530, !dbg !2770
  store i32 %add3531, i32* %bmy, align 4, !dbg !2771
  br label %if.end3532, !dbg !2772

if.end3532:                                       ; preds = %if.then3524, %if.end3522
  br label %if.end3533

if.end3533:                                       ; preds = %if.end3532, %for.end3100
  br label %do.cond3534, !dbg !2773

do.cond3534:                                      ; preds = %if.end3533
  %2133 = load i32, i32* %i2973, align 4, !dbg !2774
  %inc3535 = add nsw i32 %2133, 1, !dbg !2774
  store i32 %inc3535, i32* %i2973, align 4, !dbg !2774
  %2134 = load i32, i32* %i_me_range, align 4, !dbg !2775
  %shr3536 = ashr i32 %2134, 2, !dbg !2776
  %cmp3537 = icmp sle i32 %inc3535, %shr3536, !dbg !2777
  br i1 %cmp3537, label %do.body2974, label %do.end3539, !dbg !2773, !llvm.loop !2778

do.end3539:                                       ; preds = %do.cond3534
  %2135 = load i32, i32* %bmy, align 4, !dbg !2780
  %2136 = load i32, i32* %mv_y_max, align 4, !dbg !2782
  %cmp3540 = icmp sle i32 %2135, %2136, !dbg !2783
  br i1 %cmp3540, label %land.lhs.true3542, label %if.end3552, !dbg !2784

land.lhs.true3542:                                ; preds = %do.end3539
  %2137 = load i32, i32* %bmy, align 4, !dbg !2785
  %2138 = load i32, i32* %mv_y_min, align 4, !dbg !2786
  %cmp3543 = icmp sge i32 %2137, %2138, !dbg !2787
  br i1 %cmp3543, label %land.lhs.true3545, label %if.end3552, !dbg !2788

land.lhs.true3545:                                ; preds = %land.lhs.true3542
  %2139 = load i32, i32* %bmx, align 4, !dbg !2789
  %2140 = load i32, i32* %mv_x_max, align 4, !dbg !2790
  %cmp3546 = icmp sle i32 %2139, %2140, !dbg !2791
  br i1 %cmp3546, label %land.lhs.true3548, label %if.end3552, !dbg !2792

land.lhs.true3548:                                ; preds = %land.lhs.true3545
  %2141 = load i32, i32* %bmx, align 4, !dbg !2793
  %2142 = load i32, i32* %mv_x_min, align 4, !dbg !2794
  %cmp3549 = icmp sge i32 %2141, %2142, !dbg !2795
  br i1 %cmp3549, label %if.then3551, label %if.end3552, !dbg !2796

if.then3551:                                      ; preds = %land.lhs.true3548
  br label %me_hex2, !dbg !2797

if.end3552:                                       ; preds = %land.lhs.true3548, %land.lhs.true3545, %land.lhs.true3542, %do.end3539
  br label %sw.epilog, !dbg !2798

sw.bb3553:                                        ; preds = %if.end267, %if.end267
  call void @llvm.dbg.declare(metadata i32* %min_x, metadata !2799, metadata !DIExpression()), !dbg !2801
  %2143 = load i32, i32* %bmx, align 4, !dbg !2802
  %2144 = load i32, i32* %i_me_range, align 4, !dbg !2802
  %sub3554 = sub nsw i32 %2143, %2144, !dbg !2802
  %2145 = load i32, i32* %mv_x_min, align 4, !dbg !2802
  %cmp3555 = icmp sgt i32 %sub3554, %2145, !dbg !2802
  br i1 %cmp3555, label %cond.true3557, label %cond.false3559, !dbg !2802

cond.true3557:                                    ; preds = %sw.bb3553
  %2146 = load i32, i32* %bmx, align 4, !dbg !2802
  %2147 = load i32, i32* %i_me_range, align 4, !dbg !2802
  %sub3558 = sub nsw i32 %2146, %2147, !dbg !2802
  br label %cond.end3560, !dbg !2802

cond.false3559:                                   ; preds = %sw.bb3553
  %2148 = load i32, i32* %mv_x_min, align 4, !dbg !2802
  br label %cond.end3560, !dbg !2802

cond.end3560:                                     ; preds = %cond.false3559, %cond.true3557
  %cond3561 = phi i32 [ %sub3558, %cond.true3557 ], [ %2148, %cond.false3559 ], !dbg !2802
  store i32 %cond3561, i32* %min_x, align 4, !dbg !2801
  call void @llvm.dbg.declare(metadata i32* %min_y, metadata !2803, metadata !DIExpression()), !dbg !2804
  %2149 = load i32, i32* %bmy, align 4, !dbg !2805
  %2150 = load i32, i32* %i_me_range, align 4, !dbg !2805
  %sub3562 = sub nsw i32 %2149, %2150, !dbg !2805
  %2151 = load i32, i32* %mv_y_min, align 4, !dbg !2805
  %cmp3563 = icmp sgt i32 %sub3562, %2151, !dbg !2805
  br i1 %cmp3563, label %cond.true3565, label %cond.false3567, !dbg !2805

cond.true3565:                                    ; preds = %cond.end3560
  %2152 = load i32, i32* %bmy, align 4, !dbg !2805
  %2153 = load i32, i32* %i_me_range, align 4, !dbg !2805
  %sub3566 = sub nsw i32 %2152, %2153, !dbg !2805
  br label %cond.end3568, !dbg !2805

cond.false3567:                                   ; preds = %cond.end3560
  %2154 = load i32, i32* %mv_y_min, align 4, !dbg !2805
  br label %cond.end3568, !dbg !2805

cond.end3568:                                     ; preds = %cond.false3567, %cond.true3565
  %cond3569 = phi i32 [ %sub3566, %cond.true3565 ], [ %2154, %cond.false3567 ], !dbg !2805
  store i32 %cond3569, i32* %min_y, align 4, !dbg !2804
  call void @llvm.dbg.declare(metadata i32* %max_x, metadata !2806, metadata !DIExpression()), !dbg !2807
  %2155 = load i32, i32* %bmx, align 4, !dbg !2808
  %2156 = load i32, i32* %i_me_range, align 4, !dbg !2808
  %add3570 = add nsw i32 %2155, %2156, !dbg !2808
  %2157 = load i32, i32* %mv_x_max, align 4, !dbg !2808
  %cmp3571 = icmp slt i32 %add3570, %2157, !dbg !2808
  br i1 %cmp3571, label %cond.true3573, label %cond.false3575, !dbg !2808

cond.true3573:                                    ; preds = %cond.end3568
  %2158 = load i32, i32* %bmx, align 4, !dbg !2808
  %2159 = load i32, i32* %i_me_range, align 4, !dbg !2808
  %add3574 = add nsw i32 %2158, %2159, !dbg !2808
  br label %cond.end3576, !dbg !2808

cond.false3575:                                   ; preds = %cond.end3568
  %2160 = load i32, i32* %mv_x_max, align 4, !dbg !2808
  br label %cond.end3576, !dbg !2808

cond.end3576:                                     ; preds = %cond.false3575, %cond.true3573
  %cond3577 = phi i32 [ %add3574, %cond.true3573 ], [ %2160, %cond.false3575 ], !dbg !2808
  store i32 %cond3577, i32* %max_x, align 4, !dbg !2807
  call void @llvm.dbg.declare(metadata i32* %max_y, metadata !2809, metadata !DIExpression()), !dbg !2810
  %2161 = load i32, i32* %bmy, align 4, !dbg !2811
  %2162 = load i32, i32* %i_me_range, align 4, !dbg !2811
  %add3578 = add nsw i32 %2161, %2162, !dbg !2811
  %2163 = load i32, i32* %mv_y_max, align 4, !dbg !2811
  %cmp3579 = icmp slt i32 %add3578, %2163, !dbg !2811
  br i1 %cmp3579, label %cond.true3581, label %cond.false3583, !dbg !2811

cond.true3581:                                    ; preds = %cond.end3576
  %2164 = load i32, i32* %bmy, align 4, !dbg !2811
  %2165 = load i32, i32* %i_me_range, align 4, !dbg !2811
  %add3582 = add nsw i32 %2164, %2165, !dbg !2811
  br label %cond.end3584, !dbg !2811

cond.false3583:                                   ; preds = %cond.end3576
  %2166 = load i32, i32* %mv_y_max, align 4, !dbg !2811
  br label %cond.end3584, !dbg !2811

cond.end3584:                                     ; preds = %cond.false3583, %cond.true3581
  %cond3585 = phi i32 [ %add3582, %cond.true3581 ], [ %2166, %cond.false3583 ], !dbg !2811
  store i32 %cond3585, i32* %max_y, align 4, !dbg !2810
  call void @llvm.dbg.declare(metadata i32* %width, metadata !2812, metadata !DIExpression()), !dbg !2813
  %2167 = load i32, i32* %max_x, align 4, !dbg !2814
  %2168 = load i32, i32* %min_x, align 4, !dbg !2815
  %sub3586 = sub nsw i32 %2167, %2168, !dbg !2816
  %add3587 = add nsw i32 %sub3586, 3, !dbg !2817
  %and3588 = and i32 %add3587, -4, !dbg !2818
  store i32 %and3588, i32* %width, align 4, !dbg !2813
  call void @llvm.dbg.declare(metadata i16** %sums_base, metadata !2819, metadata !DIExpression()), !dbg !2820
  %2169 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2821
  %integral = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2169, i32 0, i32 8, !dbg !2822
  %2170 = load i16*, i16** %integral, align 16, !dbg !2822
  store i16* %2170, i16** %sums_base, align 8, !dbg !2820
  call void @llvm.dbg.declare(metadata [4 x i32]* %enc_dc, metadata !2823, metadata !DIExpression()), !dbg !2824
  call void @llvm.dbg.declare(metadata i32* %sad_size, metadata !2825, metadata !DIExpression()), !dbg !2826
  %2171 = load i32, i32* %i_pixel5, align 4, !dbg !2827
  %cmp3589 = icmp sle i32 %2171, 3, !dbg !2828
  %2172 = zext i1 %cmp3589 to i64, !dbg !2827
  %cond3591 = select i1 %cmp3589, i32 3, i32 6, !dbg !2827
  store i32 %cond3591, i32* %sad_size, align 4, !dbg !2826
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !2829, metadata !DIExpression()), !dbg !2830
  %2173 = load i32, i32* %sad_size, align 4, !dbg !2831
  %idxprom3592 = sext i32 %2173 to i64, !dbg !2832
  %arrayidx3593 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom3592, !dbg !2832
  %w3594 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx3593, i32 0, i32 0, !dbg !2833
  %2174 = load i32, i32* %w3594, align 8, !dbg !2833
  store i32 %2174, i32* %delta, align 4, !dbg !2830
  call void @llvm.dbg.declare(metadata i16** %xs, metadata !2834, metadata !DIExpression()), !dbg !2835
  %2175 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2836
  %scratch_buffer = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2175, i32 0, i32 61, !dbg !2837
  %2176 = load i8*, i8** %scratch_buffer, align 8, !dbg !2837
  %2177 = bitcast i8* %2176 to i16*, !dbg !2836
  store i16* %2177, i16** %xs, align 8, !dbg !2835
  call void @llvm.dbg.declare(metadata i32* %xn, metadata !2838, metadata !DIExpression()), !dbg !2839
  call void @llvm.dbg.declare(metadata i16** %cost_fpel_mvx, metadata !2840, metadata !DIExpression()), !dbg !2841
  %2178 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2842
  %cost_mv_fpel = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2178, i32 0, i32 38, !dbg !2843
  %2179 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2844
  %mb3595 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2179, i32 0, i32 55, !dbg !2845
  %i_qp = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb3595, i32 0, i32 68, !dbg !2846
  %2180 = load i32, i32* %i_qp, align 16, !dbg !2846
  %idxprom3596 = sext i32 %2180 to i64, !dbg !2847
  %arrayidx3597 = getelementptr inbounds [52 x i8], [52 x i8]* @x264_lambda_tab, i64 0, i64 %idxprom3596, !dbg !2847
  %2181 = load i8, i8* %arrayidx3597, align 1, !dbg !2847
  %idxprom3598 = zext i8 %2181 to i64, !dbg !2842
  %arrayidx3599 = getelementptr inbounds [92 x [4 x i16*]], [92 x [4 x i16*]]* %cost_mv_fpel, i64 0, i64 %idxprom3598, !dbg !2842
  %2182 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2848
  %mvp3600 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2182, i32 0, i32 10, !dbg !2849
  %arrayidx3601 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp3600, i64 0, i64 0, !dbg !2848
  %2183 = load i16, i16* %arrayidx3601, align 16, !dbg !2848
  %conv3602 = sext i16 %2183 to i32, !dbg !2848
  %sub3603 = sub nsw i32 0, %conv3602, !dbg !2850
  %and3604 = and i32 %sub3603, 3, !dbg !2851
  %idxprom3605 = sext i32 %and3604 to i64, !dbg !2842
  %arrayidx3606 = getelementptr inbounds [4 x i16*], [4 x i16*]* %arrayidx3599, i64 0, i64 %idxprom3605, !dbg !2842
  %2184 = load i16*, i16** %arrayidx3606, align 8, !dbg !2842
  %2185 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !2852
  %mvp3607 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2185, i32 0, i32 10, !dbg !2853
  %arrayidx3608 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp3607, i64 0, i64 0, !dbg !2852
  %2186 = load i16, i16* %arrayidx3608, align 16, !dbg !2852
  %conv3609 = sext i16 %2186 to i32, !dbg !2852
  %sub3610 = sub nsw i32 0, %conv3609, !dbg !2854
  %shr3611 = ashr i32 %sub3610, 2, !dbg !2855
  %idx.ext3612 = sext i32 %shr3611 to i64, !dbg !2856
  %add.ptr3613 = getelementptr inbounds i16, i16* %2184, i64 %idx.ext3612, !dbg !2856
  store i16* %add.ptr3613, i16** %cost_fpel_mvx, align 8, !dbg !2841
  %2187 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2857
  %pixf3614 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2187, i32 0, i32 69, !dbg !2858
  %sad_x4 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3614, i32 0, i32 17, !dbg !2859
  %2188 = load i32, i32* %sad_size, align 4, !dbg !2860
  %idxprom3615 = sext i32 %2188 to i64, !dbg !2857
  %arrayidx3616 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %sad_x4, i64 0, i64 %idxprom3615, !dbg !2857
  %2189 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3616, align 8, !dbg !2857
  %2190 = load i8*, i8** %p_fenc, align 8, !dbg !2861
  %2191 = load i8*, i8** %p_fenc, align 8, !dbg !2862
  %2192 = load i32, i32* %delta, align 4, !dbg !2863
  %idx.ext3617 = sext i32 %2192 to i64, !dbg !2864
  %add.ptr3618 = getelementptr inbounds i8, i8* %2191, i64 %idx.ext3617, !dbg !2864
  %2193 = load i8*, i8** %p_fenc, align 8, !dbg !2865
  %2194 = load i32, i32* %delta, align 4, !dbg !2866
  %mul3619 = mul nsw i32 %2194, 16, !dbg !2867
  %idx.ext3620 = sext i32 %mul3619 to i64, !dbg !2868
  %add.ptr3621 = getelementptr inbounds i8, i8* %2193, i64 %idx.ext3620, !dbg !2868
  %2195 = load i8*, i8** %p_fenc, align 8, !dbg !2869
  %2196 = load i32, i32* %delta, align 4, !dbg !2870
  %idx.ext3622 = sext i32 %2196 to i64, !dbg !2871
  %add.ptr3623 = getelementptr inbounds i8, i8* %2195, i64 %idx.ext3622, !dbg !2871
  %2197 = load i32, i32* %delta, align 4, !dbg !2872
  %mul3624 = mul nsw i32 %2197, 16, !dbg !2873
  %idx.ext3625 = sext i32 %mul3624 to i64, !dbg !2874
  %add.ptr3626 = getelementptr inbounds i8, i8* %add.ptr3623, i64 %idx.ext3625, !dbg !2874
  %arraydecay3627 = getelementptr inbounds [4 x i32], [4 x i32]* %enc_dc, i64 0, i64 0, !dbg !2875
  call void %2189(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @x264_me_search_ref.zero, i64 0, i64 0), i8* %2190, i8* %add.ptr3618, i8* %add.ptr3621, i8* %add.ptr3626, i32 16, i32* %arraydecay3627), !dbg !2857
  %2198 = load i32, i32* %delta, align 4, !dbg !2876
  %cmp3628 = icmp eq i32 %2198, 4, !dbg !2878
  br i1 %cmp3628, label %if.then3630, label %if.end3636, !dbg !2879

if.then3630:                                      ; preds = %cond.end3584
  %2199 = load i32, i32* %stride, align 4, !dbg !2880
  %2200 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2881
  %fenc = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2200, i32 0, i32 44, !dbg !2882
  %2201 = load %struct.x264_frame*, %struct.x264_frame** %fenc, align 8, !dbg !2882
  %i_lines = getelementptr inbounds %struct.x264_frame, %struct.x264_frame* %2201, i32 0, i32 26, !dbg !2883
  %arrayidx3631 = getelementptr inbounds [3 x i32], [3 x i32]* %i_lines, i64 0, i64 0, !dbg !2881
  %2202 = load i32, i32* %arrayidx3631, align 16, !dbg !2881
  %add3632 = add nsw i32 %2202, 64, !dbg !2884
  %mul3633 = mul nsw i32 %2199, %add3632, !dbg !2885
  %2203 = load i16*, i16** %sums_base, align 8, !dbg !2886
  %idx.ext3634 = sext i32 %mul3633 to i64, !dbg !2886
  %add.ptr3635 = getelementptr inbounds i16, i16* %2203, i64 %idx.ext3634, !dbg !2886
  store i16* %add.ptr3635, i16** %sums_base, align 8, !dbg !2886
  br label %if.end3636, !dbg !2887

if.end3636:                                       ; preds = %if.then3630, %cond.end3584
  %2204 = load i32, i32* %i_pixel5, align 4, !dbg !2888
  %cmp3637 = icmp eq i32 %2204, 0, !dbg !2890
  br i1 %cmp3637, label %if.then3644, label %lor.lhs.false, !dbg !2891

lor.lhs.false:                                    ; preds = %if.end3636
  %2205 = load i32, i32* %i_pixel5, align 4, !dbg !2892
  %cmp3639 = icmp eq i32 %2205, 2, !dbg !2893
  br i1 %cmp3639, label %if.then3644, label %lor.lhs.false3641, !dbg !2894

lor.lhs.false3641:                                ; preds = %lor.lhs.false
  %2206 = load i32, i32* %i_pixel5, align 4, !dbg !2895
  %cmp3642 = icmp eq i32 %2206, 5, !dbg !2896
  br i1 %cmp3642, label %if.then3644, label %if.end3646, !dbg !2897

if.then3644:                                      ; preds = %lor.lhs.false3641, %lor.lhs.false, %if.end3636
  %2207 = load i32, i32* %stride, align 4, !dbg !2898
  %2208 = load i32, i32* %delta, align 4, !dbg !2899
  %mul3645 = mul nsw i32 %2208, %2207, !dbg !2899
  store i32 %mul3645, i32* %delta, align 4, !dbg !2899
  br label %if.end3646, !dbg !2900

if.end3646:                                       ; preds = %if.then3644, %lor.lhs.false3641
  %2209 = load i32, i32* %i_pixel5, align 4, !dbg !2901
  %cmp3647 = icmp eq i32 %2209, 2, !dbg !2903
  br i1 %cmp3647, label %if.then3652, label %lor.lhs.false3649, !dbg !2904

lor.lhs.false3649:                                ; preds = %if.end3646
  %2210 = load i32, i32* %i_pixel5, align 4, !dbg !2905
  %cmp3650 = icmp eq i32 %2210, 5, !dbg !2906
  br i1 %cmp3650, label %if.then3652, label %if.end3655, !dbg !2907

if.then3652:                                      ; preds = %lor.lhs.false3649, %if.end3646
  %arrayidx3653 = getelementptr inbounds [4 x i32], [4 x i32]* %enc_dc, i64 0, i64 2, !dbg !2908
  %2211 = load i32, i32* %arrayidx3653, align 8, !dbg !2908
  %arrayidx3654 = getelementptr inbounds [4 x i32], [4 x i32]* %enc_dc, i64 0, i64 1, !dbg !2909
  store i32 %2211, i32* %arrayidx3654, align 4, !dbg !2910
  br label %if.end3655, !dbg !2909

if.end3655:                                       ; preds = %if.then3652, %lor.lhs.false3649
  %2212 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2911
  %mb3656 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2212, i32 0, i32 55, !dbg !2913
  %i_me_method3657 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb3656, i32 0, i32 9, !dbg !2914
  %2213 = load i32, i32* %i_me_method3657, align 4, !dbg !2914
  %cmp3658 = icmp eq i32 %2213, 4, !dbg !2915
  br i1 %cmp3658, label %if.then3660, label %if.else3999, !dbg !2916

if.then3660:                                      ; preds = %if.end3655
  call void @llvm.dbg.declare(metadata %struct.mvsad_t** %mvsads, metadata !2917, metadata !DIExpression()), !dbg !2919
  %2214 = load i16*, i16** %xs, align 8, !dbg !2920
  %2215 = load i32, i32* %width, align 4, !dbg !2921
  %add3661 = add nsw i32 %2215, 15, !dbg !2922
  %and3662 = and i32 %add3661, -16, !dbg !2923
  %idx.ext3663 = sext i32 %and3662 to i64, !dbg !2924
  %add.ptr3664 = getelementptr inbounds i16, i16* %2214, i64 %idx.ext3663, !dbg !2924
  %2216 = bitcast i16* %add.ptr3664 to %struct.mvsad_t*, !dbg !2925
  store %struct.mvsad_t* %2216, %struct.mvsad_t** %mvsads, align 8, !dbg !2919
  call void @llvm.dbg.declare(metadata i32* %nmvsad, metadata !2926, metadata !DIExpression()), !dbg !2927
  store i32 0, i32* %nmvsad, align 4, !dbg !2927
  call void @llvm.dbg.declare(metadata i32* %limit, metadata !2928, metadata !DIExpression()), !dbg !2929
  call void @llvm.dbg.declare(metadata i32* %sad_thresh, metadata !2930, metadata !DIExpression()), !dbg !2931
  %2217 = load i32, i32* %i_me_range, align 4, !dbg !2932
  %cmp3665 = icmp sle i32 %2217, 16, !dbg !2933
  br i1 %cmp3665, label %cond.true3667, label %cond.false3668, !dbg !2932

cond.true3667:                                    ; preds = %if.then3660
  br label %cond.end3672, !dbg !2932

cond.false3668:                                   ; preds = %if.then3660
  %2218 = load i32, i32* %i_me_range, align 4, !dbg !2934
  %cmp3669 = icmp sle i32 %2218, 24, !dbg !2935
  %2219 = zext i1 %cmp3669 to i64, !dbg !2934
  %cond3671 = select i1 %cmp3669, i32 11, i32 12, !dbg !2934
  br label %cond.end3672, !dbg !2932

cond.end3672:                                     ; preds = %cond.false3668, %cond.true3667
  %cond3673 = phi i32 [ 10, %cond.true3667 ], [ %cond3671, %cond.false3668 ], !dbg !2932
  store i32 %cond3673, i32* %sad_thresh, align 4, !dbg !2931
  call void @llvm.dbg.declare(metadata i32* %bsad, metadata !2936, metadata !DIExpression()), !dbg !2937
  %2220 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2938
  %pixf3674 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2220, i32 0, i32 69, !dbg !2939
  %sad = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3674, i32 0, i32 0, !dbg !2940
  %2221 = load i32, i32* %i_pixel5, align 4, !dbg !2941
  %idxprom3675 = sext i32 %2221 to i64, !dbg !2938
  %arrayidx3676 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %sad, i64 0, i64 %idxprom3675, !dbg !2938
  %2222 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx3676, align 8, !dbg !2938
  %2223 = load i8*, i8** %p_fenc, align 8, !dbg !2942
  %2224 = load i8*, i8** %p_fref_w, align 8, !dbg !2943
  %2225 = load i32, i32* %bmy, align 4, !dbg !2944
  %2226 = load i32, i32* %stride, align 4, !dbg !2945
  %mul3677 = mul nsw i32 %2225, %2226, !dbg !2946
  %idx.ext3678 = sext i32 %mul3677 to i64, !dbg !2947
  %add.ptr3679 = getelementptr inbounds i8, i8* %2224, i64 %idx.ext3678, !dbg !2947
  %2227 = load i32, i32* %bmx, align 4, !dbg !2948
  %idx.ext3680 = sext i32 %2227 to i64, !dbg !2949
  %add.ptr3681 = getelementptr inbounds i8, i8* %add.ptr3679, i64 %idx.ext3680, !dbg !2949
  %2228 = load i32, i32* %stride, align 4, !dbg !2950
  %call3682 = call i32 %2222(i8* %2223, i32 16, i8* %add.ptr3681, i32 %2228), !dbg !2938
  %2229 = load i16*, i16** %p_cost_mvx, align 8, !dbg !2951
  %2230 = load i32, i32* %bmx, align 4, !dbg !2951
  %shl3683 = shl i32 %2230, 2, !dbg !2951
  %idxprom3684 = sext i32 %shl3683 to i64, !dbg !2951
  %arrayidx3685 = getelementptr inbounds i16, i16* %2229, i64 %idxprom3684, !dbg !2951
  %2231 = load i16, i16* %arrayidx3685, align 2, !dbg !2951
  %conv3686 = zext i16 %2231 to i32, !dbg !2951
  %2232 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2951
  %2233 = load i32, i32* %bmy, align 4, !dbg !2951
  %shl3687 = shl i32 %2233, 2, !dbg !2951
  %idxprom3688 = sext i32 %shl3687 to i64, !dbg !2951
  %arrayidx3689 = getelementptr inbounds i16, i16* %2232, i64 %idxprom3688, !dbg !2951
  %2234 = load i16, i16* %arrayidx3689, align 2, !dbg !2951
  %conv3690 = zext i16 %2234 to i32, !dbg !2951
  %add3691 = add nsw i32 %conv3686, %conv3690, !dbg !2951
  %add3692 = add nsw i32 %call3682, %add3691, !dbg !2952
  store i32 %add3692, i32* %bsad, align 4, !dbg !2937
  call void @llvm.dbg.declare(metadata i32* %my3693, metadata !2953, metadata !DIExpression()), !dbg !2955
  %2235 = load i32, i32* %min_y, align 4, !dbg !2956
  store i32 %2235, i32* %my3693, align 4, !dbg !2955
  br label %for.cond3694, !dbg !2957

for.cond3694:                                     ; preds = %for.inc3857, %cond.end3672
  %2236 = load i32, i32* %my3693, align 4, !dbg !2958
  %2237 = load i32, i32* %max_y, align 4, !dbg !2960
  %cmp3695 = icmp sle i32 %2236, %2237, !dbg !2961
  br i1 %cmp3695, label %for.body3697, label %for.end3859, !dbg !2962

for.body3697:                                     ; preds = %for.cond3694
  call void @llvm.dbg.declare(metadata i32* %i3698, metadata !2963, metadata !DIExpression()), !dbg !2965
  call void @llvm.dbg.declare(metadata i32* %ycost, metadata !2966, metadata !DIExpression()), !dbg !2967
  %2238 = load i16*, i16** %p_cost_mvy, align 8, !dbg !2968
  %2239 = load i32, i32* %my3693, align 4, !dbg !2969
  %shl3699 = shl i32 %2239, 2, !dbg !2970
  %idxprom3700 = sext i32 %shl3699 to i64, !dbg !2968
  %arrayidx3701 = getelementptr inbounds i16, i16* %2238, i64 %idxprom3700, !dbg !2968
  %2240 = load i16, i16* %arrayidx3701, align 2, !dbg !2968
  %conv3702 = zext i16 %2240 to i32, !dbg !2968
  store i32 %conv3702, i32* %ycost, align 4, !dbg !2967
  %2241 = load i32, i32* %bsad, align 4, !dbg !2971
  %2242 = load i32, i32* %ycost, align 4, !dbg !2973
  %cmp3703 = icmp sle i32 %2241, %2242, !dbg !2974
  br i1 %cmp3703, label %if.then3705, label %if.end3706, !dbg !2975

if.then3705:                                      ; preds = %for.body3697
  br label %for.inc3857, !dbg !2976

if.end3706:                                       ; preds = %for.body3697
  %2243 = load i32, i32* %ycost, align 4, !dbg !2977
  %2244 = load i32, i32* %bsad, align 4, !dbg !2978
  %sub3707 = sub nsw i32 %2244, %2243, !dbg !2978
  store i32 %sub3707, i32* %bsad, align 4, !dbg !2978
  %2245 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !2979
  %pixf3708 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2245, i32 0, i32 69, !dbg !2980
  %ads = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3708, i32 0, i32 20, !dbg !2981
  %2246 = load i32, i32* %i_pixel5, align 4, !dbg !2982
  %idxprom3709 = sext i32 %2246 to i64, !dbg !2979
  %arrayidx3710 = getelementptr inbounds [7 x i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*], [7 x i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*]* %ads, i64 0, i64 %idxprom3709, !dbg !2979
  %2247 = load i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*, i32 (i32*, i16*, i32, i16*, i16*, i32, i32)** %arrayidx3710, align 8, !dbg !2979
  %arraydecay3711 = getelementptr inbounds [4 x i32], [4 x i32]* %enc_dc, i64 0, i64 0, !dbg !2983
  %2248 = load i16*, i16** %sums_base, align 8, !dbg !2984
  %2249 = load i32, i32* %min_x, align 4, !dbg !2985
  %idx.ext3712 = sext i32 %2249 to i64, !dbg !2986
  %add.ptr3713 = getelementptr inbounds i16, i16* %2248, i64 %idx.ext3712, !dbg !2986
  %2250 = load i32, i32* %my3693, align 4, !dbg !2987
  %2251 = load i32, i32* %stride, align 4, !dbg !2988
  %mul3714 = mul nsw i32 %2250, %2251, !dbg !2989
  %idx.ext3715 = sext i32 %mul3714 to i64, !dbg !2990
  %add.ptr3716 = getelementptr inbounds i16, i16* %add.ptr3713, i64 %idx.ext3715, !dbg !2990
  %2252 = load i32, i32* %delta, align 4, !dbg !2991
  %2253 = load i16*, i16** %cost_fpel_mvx, align 8, !dbg !2992
  %2254 = load i32, i32* %min_x, align 4, !dbg !2993
  %idx.ext3717 = sext i32 %2254 to i64, !dbg !2994
  %add.ptr3718 = getelementptr inbounds i16, i16* %2253, i64 %idx.ext3717, !dbg !2994
  %2255 = load i16*, i16** %xs, align 8, !dbg !2995
  %2256 = load i32, i32* %width, align 4, !dbg !2996
  %2257 = load i32, i32* %bsad, align 4, !dbg !2997
  %mul3719 = mul nsw i32 %2257, 17, !dbg !2998
  %div = sdiv i32 %mul3719, 16, !dbg !2999
  %call3720 = call i32 %2247(i32* %arraydecay3711, i16* %add.ptr3716, i32 %2252, i16* %add.ptr3718, i16* %2255, i32 %2256, i32 %div), !dbg !2979
  store i32 %call3720, i32* %xn, align 4, !dbg !3000
  store i32 0, i32* %i3698, align 4, !dbg !3001
  br label %for.cond3721, !dbg !3003

for.cond3721:                                     ; preds = %for.inc3799, %if.end3706
  %2258 = load i32, i32* %i3698, align 4, !dbg !3004
  %2259 = load i32, i32* %xn, align 4, !dbg !3006
  %sub3722 = sub nsw i32 %2259, 2, !dbg !3007
  %cmp3723 = icmp slt i32 %2258, %sub3722, !dbg !3008
  br i1 %cmp3723, label %for.body3725, label %for.end3801, !dbg !3009

for.body3725:                                     ; preds = %for.cond3721
  call void @llvm.dbg.declare(metadata i8** %ref, metadata !3010, metadata !DIExpression()), !dbg !3012
  %2260 = load i8*, i8** %p_fref_w, align 8, !dbg !3013
  %2261 = load i32, i32* %min_x, align 4, !dbg !3014
  %idx.ext3726 = sext i32 %2261 to i64, !dbg !3015
  %add.ptr3727 = getelementptr inbounds i8, i8* %2260, i64 %idx.ext3726, !dbg !3015
  %2262 = load i32, i32* %my3693, align 4, !dbg !3016
  %2263 = load i32, i32* %stride, align 4, !dbg !3017
  %mul3728 = mul nsw i32 %2262, %2263, !dbg !3018
  %idx.ext3729 = sext i32 %mul3728 to i64, !dbg !3019
  %add.ptr3730 = getelementptr inbounds i8, i8* %add.ptr3727, i64 %idx.ext3729, !dbg !3019
  store i8* %add.ptr3730, i8** %ref, align 8, !dbg !3012
  call void @llvm.dbg.declare(metadata [3 x i32]* %sads, metadata !3020, metadata !DIExpression()), !dbg !3021
  %2264 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3022
  %pixf3731 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2264, i32 0, i32 69, !dbg !3023
  %sad_x3 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3731, i32 0, i32 16, !dbg !3024
  %2265 = load i32, i32* %i_pixel5, align 4, !dbg !3025
  %idxprom3732 = sext i32 %2265 to i64, !dbg !3022
  %arrayidx3733 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*]* %sad_x3, i64 0, i64 %idxprom3732, !dbg !3022
  %2266 = load void (i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx3733, align 8, !dbg !3022
  %2267 = load i8*, i8** %p_fenc, align 8, !dbg !3026
  %2268 = load i8*, i8** %ref, align 8, !dbg !3027
  %2269 = load i16*, i16** %xs, align 8, !dbg !3028
  %2270 = load i32, i32* %i3698, align 4, !dbg !3029
  %idxprom3734 = sext i32 %2270 to i64, !dbg !3028
  %arrayidx3735 = getelementptr inbounds i16, i16* %2269, i64 %idxprom3734, !dbg !3028
  %2271 = load i16, i16* %arrayidx3735, align 2, !dbg !3028
  %conv3736 = sext i16 %2271 to i32, !dbg !3028
  %idx.ext3737 = sext i32 %conv3736 to i64, !dbg !3030
  %add.ptr3738 = getelementptr inbounds i8, i8* %2268, i64 %idx.ext3737, !dbg !3030
  %2272 = load i8*, i8** %ref, align 8, !dbg !3031
  %2273 = load i16*, i16** %xs, align 8, !dbg !3032
  %2274 = load i32, i32* %i3698, align 4, !dbg !3033
  %add3739 = add nsw i32 %2274, 1, !dbg !3034
  %idxprom3740 = sext i32 %add3739 to i64, !dbg !3032
  %arrayidx3741 = getelementptr inbounds i16, i16* %2273, i64 %idxprom3740, !dbg !3032
  %2275 = load i16, i16* %arrayidx3741, align 2, !dbg !3032
  %conv3742 = sext i16 %2275 to i32, !dbg !3032
  %idx.ext3743 = sext i32 %conv3742 to i64, !dbg !3035
  %add.ptr3744 = getelementptr inbounds i8, i8* %2272, i64 %idx.ext3743, !dbg !3035
  %2276 = load i8*, i8** %ref, align 8, !dbg !3036
  %2277 = load i16*, i16** %xs, align 8, !dbg !3037
  %2278 = load i32, i32* %i3698, align 4, !dbg !3038
  %add3745 = add nsw i32 %2278, 2, !dbg !3039
  %idxprom3746 = sext i32 %add3745 to i64, !dbg !3037
  %arrayidx3747 = getelementptr inbounds i16, i16* %2277, i64 %idxprom3746, !dbg !3037
  %2279 = load i16, i16* %arrayidx3747, align 2, !dbg !3037
  %conv3748 = sext i16 %2279 to i32, !dbg !3037
  %idx.ext3749 = sext i32 %conv3748 to i64, !dbg !3040
  %add.ptr3750 = getelementptr inbounds i8, i8* %2276, i64 %idx.ext3749, !dbg !3040
  %2280 = load i32, i32* %stride, align 4, !dbg !3041
  %arraydecay3751 = getelementptr inbounds [3 x i32], [3 x i32]* %sads, i64 0, i64 0, !dbg !3042
  call void %2266(i8* %2267, i8* %add.ptr3738, i8* %add.ptr3744, i8* %add.ptr3750, i32 %2280, i32* %arraydecay3751), !dbg !3022
  call void @llvm.dbg.declare(metadata i32* %j3752, metadata !3043, metadata !DIExpression()), !dbg !3045
  store i32 0, i32* %j3752, align 4, !dbg !3045
  br label %for.cond3753, !dbg !3046

for.cond3753:                                     ; preds = %for.inc3796, %for.body3725
  %2281 = load i32, i32* %j3752, align 4, !dbg !3047
  %cmp3754 = icmp slt i32 %2281, 3, !dbg !3049
  br i1 %cmp3754, label %for.body3756, label %for.end3798, !dbg !3050

for.body3756:                                     ; preds = %for.cond3753
  call void @llvm.dbg.declare(metadata i32* %sad3757, metadata !3051, metadata !DIExpression()), !dbg !3053
  %2282 = load i32, i32* %j3752, align 4, !dbg !3054
  %idxprom3758 = sext i32 %2282 to i64, !dbg !3055
  %arrayidx3759 = getelementptr inbounds [3 x i32], [3 x i32]* %sads, i64 0, i64 %idxprom3758, !dbg !3055
  %2283 = load i32, i32* %arrayidx3759, align 4, !dbg !3055
  %2284 = load i16*, i16** %cost_fpel_mvx, align 8, !dbg !3056
  %2285 = load i16*, i16** %xs, align 8, !dbg !3057
  %2286 = load i32, i32* %i3698, align 4, !dbg !3058
  %2287 = load i32, i32* %j3752, align 4, !dbg !3059
  %add3760 = add nsw i32 %2286, %2287, !dbg !3060
  %idxprom3761 = sext i32 %add3760 to i64, !dbg !3057
  %arrayidx3762 = getelementptr inbounds i16, i16* %2285, i64 %idxprom3761, !dbg !3057
  %2288 = load i16, i16* %arrayidx3762, align 2, !dbg !3057
  %idxprom3763 = sext i16 %2288 to i64, !dbg !3056
  %arrayidx3764 = getelementptr inbounds i16, i16* %2284, i64 %idxprom3763, !dbg !3056
  %2289 = load i16, i16* %arrayidx3764, align 2, !dbg !3056
  %conv3765 = zext i16 %2289 to i32, !dbg !3056
  %add3766 = add nsw i32 %2283, %conv3765, !dbg !3061
  store i32 %add3766, i32* %sad3757, align 4, !dbg !3053
  %2290 = load i32, i32* %sad3757, align 4, !dbg !3062
  %2291 = load i32, i32* %bsad, align 4, !dbg !3064
  %2292 = load i32, i32* %sad_thresh, align 4, !dbg !3065
  %mul3767 = mul nsw i32 %2291, %2292, !dbg !3066
  %shr3768 = ashr i32 %mul3767, 3, !dbg !3067
  %cmp3769 = icmp slt i32 %2290, %shr3768, !dbg !3068
  br i1 %cmp3769, label %if.then3771, label %if.end3795, !dbg !3069

if.then3771:                                      ; preds = %for.body3756
  %2293 = load i32, i32* %sad3757, align 4, !dbg !3070
  %2294 = load i32, i32* %bsad, align 4, !dbg !3070
  %cmp3772 = icmp slt i32 %2293, %2294, !dbg !3070
  br i1 %cmp3772, label %if.then3774, label %if.end3775, !dbg !3073

if.then3774:                                      ; preds = %if.then3771
  %2295 = load i32, i32* %sad3757, align 4, !dbg !3070
  store i32 %2295, i32* %bsad, align 4, !dbg !3070
  br label %if.end3775, !dbg !3070

if.end3775:                                       ; preds = %if.then3774, %if.then3771
  %2296 = load i32, i32* %sad3757, align 4, !dbg !3074
  %2297 = load i32, i32* %ycost, align 4, !dbg !3075
  %add3776 = add nsw i32 %2296, %2297, !dbg !3076
  %2298 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3077
  %2299 = load i32, i32* %nmvsad, align 4, !dbg !3078
  %idxprom3777 = sext i32 %2299 to i64, !dbg !3077
  %arrayidx3778 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2298, i64 %idxprom3777, !dbg !3077
  %sad3779 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3778, i32 0, i32 0, !dbg !3079
  store i32 %add3776, i32* %sad3779, align 4, !dbg !3080
  %2300 = load i32, i32* %min_x, align 4, !dbg !3081
  %2301 = load i16*, i16** %xs, align 8, !dbg !3082
  %2302 = load i32, i32* %i3698, align 4, !dbg !3083
  %2303 = load i32, i32* %j3752, align 4, !dbg !3084
  %add3780 = add nsw i32 %2302, %2303, !dbg !3085
  %idxprom3781 = sext i32 %add3780 to i64, !dbg !3082
  %arrayidx3782 = getelementptr inbounds i16, i16* %2301, i64 %idxprom3781, !dbg !3082
  %2304 = load i16, i16* %arrayidx3782, align 2, !dbg !3082
  %conv3783 = sext i16 %2304 to i32, !dbg !3082
  %add3784 = add nsw i32 %2300, %conv3783, !dbg !3086
  %conv3785 = trunc i32 %add3784 to i16, !dbg !3081
  %2305 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3087
  %2306 = load i32, i32* %nmvsad, align 4, !dbg !3088
  %idxprom3786 = sext i32 %2306 to i64, !dbg !3087
  %arrayidx3787 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2305, i64 %idxprom3786, !dbg !3087
  %mv = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3787, i32 0, i32 1, !dbg !3089
  %arrayidx3788 = getelementptr inbounds [2 x i16], [2 x i16]* %mv, i64 0, i64 0, !dbg !3087
  store i16 %conv3785, i16* %arrayidx3788, align 4, !dbg !3090
  %2307 = load i32, i32* %my3693, align 4, !dbg !3091
  %conv3789 = trunc i32 %2307 to i16, !dbg !3091
  %2308 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3092
  %2309 = load i32, i32* %nmvsad, align 4, !dbg !3093
  %idxprom3790 = sext i32 %2309 to i64, !dbg !3092
  %arrayidx3791 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2308, i64 %idxprom3790, !dbg !3092
  %mv3792 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3791, i32 0, i32 1, !dbg !3094
  %arrayidx3793 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3792, i64 0, i64 1, !dbg !3092
  store i16 %conv3789, i16* %arrayidx3793, align 2, !dbg !3095
  %2310 = load i32, i32* %nmvsad, align 4, !dbg !3096
  %inc3794 = add nsw i32 %2310, 1, !dbg !3096
  store i32 %inc3794, i32* %nmvsad, align 4, !dbg !3096
  br label %if.end3795, !dbg !3097

if.end3795:                                       ; preds = %if.end3775, %for.body3756
  br label %for.inc3796, !dbg !3098

for.inc3796:                                      ; preds = %if.end3795
  %2311 = load i32, i32* %j3752, align 4, !dbg !3099
  %inc3797 = add nsw i32 %2311, 1, !dbg !3099
  store i32 %inc3797, i32* %j3752, align 4, !dbg !3099
  br label %for.cond3753, !dbg !3100, !llvm.loop !3101

for.end3798:                                      ; preds = %for.cond3753
  br label %for.inc3799, !dbg !3103

for.inc3799:                                      ; preds = %for.end3798
  %2312 = load i32, i32* %i3698, align 4, !dbg !3104
  %add3800 = add nsw i32 %2312, 3, !dbg !3104
  store i32 %add3800, i32* %i3698, align 4, !dbg !3104
  br label %for.cond3721, !dbg !3105, !llvm.loop !3106

for.end3801:                                      ; preds = %for.cond3721
  br label %for.cond3802, !dbg !3108

for.cond3802:                                     ; preds = %for.inc3853, %for.end3801
  %2313 = load i32, i32* %i3698, align 4, !dbg !3109
  %2314 = load i32, i32* %xn, align 4, !dbg !3112
  %cmp3803 = icmp slt i32 %2313, %2314, !dbg !3113
  br i1 %cmp3803, label %for.body3805, label %for.end3855, !dbg !3114

for.body3805:                                     ; preds = %for.cond3802
  call void @llvm.dbg.declare(metadata i32* %mx3806, metadata !3115, metadata !DIExpression()), !dbg !3117
  %2315 = load i32, i32* %min_x, align 4, !dbg !3118
  %2316 = load i16*, i16** %xs, align 8, !dbg !3119
  %2317 = load i32, i32* %i3698, align 4, !dbg !3120
  %idxprom3807 = sext i32 %2317 to i64, !dbg !3119
  %arrayidx3808 = getelementptr inbounds i16, i16* %2316, i64 %idxprom3807, !dbg !3119
  %2318 = load i16, i16* %arrayidx3808, align 2, !dbg !3119
  %conv3809 = sext i16 %2318 to i32, !dbg !3119
  %add3810 = add nsw i32 %2315, %conv3809, !dbg !3121
  store i32 %add3810, i32* %mx3806, align 4, !dbg !3117
  call void @llvm.dbg.declare(metadata i32* %sad3811, metadata !3122, metadata !DIExpression()), !dbg !3123
  %2319 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3124
  %pixf3812 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2319, i32 0, i32 69, !dbg !3125
  %sad3813 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3812, i32 0, i32 0, !dbg !3126
  %2320 = load i32, i32* %i_pixel5, align 4, !dbg !3127
  %idxprom3814 = sext i32 %2320 to i64, !dbg !3124
  %arrayidx3815 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %sad3813, i64 0, i64 %idxprom3814, !dbg !3124
  %2321 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx3815, align 8, !dbg !3124
  %2322 = load i8*, i8** %p_fenc, align 8, !dbg !3128
  %2323 = load i8*, i8** %p_fref_w, align 8, !dbg !3129
  %2324 = load i32, i32* %mx3806, align 4, !dbg !3130
  %idx.ext3816 = sext i32 %2324 to i64, !dbg !3131
  %add.ptr3817 = getelementptr inbounds i8, i8* %2323, i64 %idx.ext3816, !dbg !3131
  %2325 = load i32, i32* %my3693, align 4, !dbg !3132
  %2326 = load i32, i32* %stride, align 4, !dbg !3133
  %mul3818 = mul nsw i32 %2325, %2326, !dbg !3134
  %idx.ext3819 = sext i32 %mul3818 to i64, !dbg !3135
  %add.ptr3820 = getelementptr inbounds i8, i8* %add.ptr3817, i64 %idx.ext3819, !dbg !3135
  %2327 = load i32, i32* %stride, align 4, !dbg !3136
  %call3821 = call i32 %2321(i8* %2322, i32 16, i8* %add.ptr3820, i32 %2327), !dbg !3124
  %2328 = load i16*, i16** %cost_fpel_mvx, align 8, !dbg !3137
  %2329 = load i16*, i16** %xs, align 8, !dbg !3138
  %2330 = load i32, i32* %i3698, align 4, !dbg !3139
  %idxprom3822 = sext i32 %2330 to i64, !dbg !3138
  %arrayidx3823 = getelementptr inbounds i16, i16* %2329, i64 %idxprom3822, !dbg !3138
  %2331 = load i16, i16* %arrayidx3823, align 2, !dbg !3138
  %idxprom3824 = sext i16 %2331 to i64, !dbg !3137
  %arrayidx3825 = getelementptr inbounds i16, i16* %2328, i64 %idxprom3824, !dbg !3137
  %2332 = load i16, i16* %arrayidx3825, align 2, !dbg !3137
  %conv3826 = zext i16 %2332 to i32, !dbg !3137
  %add3827 = add nsw i32 %call3821, %conv3826, !dbg !3140
  store i32 %add3827, i32* %sad3811, align 4, !dbg !3123
  %2333 = load i32, i32* %sad3811, align 4, !dbg !3141
  %2334 = load i32, i32* %bsad, align 4, !dbg !3143
  %2335 = load i32, i32* %sad_thresh, align 4, !dbg !3144
  %mul3828 = mul nsw i32 %2334, %2335, !dbg !3145
  %shr3829 = ashr i32 %mul3828, 3, !dbg !3146
  %cmp3830 = icmp slt i32 %2333, %shr3829, !dbg !3147
  br i1 %cmp3830, label %if.then3832, label %if.end3852, !dbg !3148

if.then3832:                                      ; preds = %for.body3805
  %2336 = load i32, i32* %sad3811, align 4, !dbg !3149
  %2337 = load i32, i32* %bsad, align 4, !dbg !3149
  %cmp3833 = icmp slt i32 %2336, %2337, !dbg !3149
  br i1 %cmp3833, label %if.then3835, label %if.end3836, !dbg !3152

if.then3835:                                      ; preds = %if.then3832
  %2338 = load i32, i32* %sad3811, align 4, !dbg !3149
  store i32 %2338, i32* %bsad, align 4, !dbg !3149
  br label %if.end3836, !dbg !3149

if.end3836:                                       ; preds = %if.then3835, %if.then3832
  %2339 = load i32, i32* %sad3811, align 4, !dbg !3153
  %2340 = load i32, i32* %ycost, align 4, !dbg !3154
  %add3837 = add nsw i32 %2339, %2340, !dbg !3155
  %2341 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3156
  %2342 = load i32, i32* %nmvsad, align 4, !dbg !3157
  %idxprom3838 = sext i32 %2342 to i64, !dbg !3156
  %arrayidx3839 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2341, i64 %idxprom3838, !dbg !3156
  %sad3840 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3839, i32 0, i32 0, !dbg !3158
  store i32 %add3837, i32* %sad3840, align 4, !dbg !3159
  %2343 = load i32, i32* %mx3806, align 4, !dbg !3160
  %conv3841 = trunc i32 %2343 to i16, !dbg !3160
  %2344 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3161
  %2345 = load i32, i32* %nmvsad, align 4, !dbg !3162
  %idxprom3842 = sext i32 %2345 to i64, !dbg !3161
  %arrayidx3843 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2344, i64 %idxprom3842, !dbg !3161
  %mv3844 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3843, i32 0, i32 1, !dbg !3163
  %arrayidx3845 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3844, i64 0, i64 0, !dbg !3161
  store i16 %conv3841, i16* %arrayidx3845, align 4, !dbg !3164
  %2346 = load i32, i32* %my3693, align 4, !dbg !3165
  %conv3846 = trunc i32 %2346 to i16, !dbg !3165
  %2347 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3166
  %2348 = load i32, i32* %nmvsad, align 4, !dbg !3167
  %idxprom3847 = sext i32 %2348 to i64, !dbg !3166
  %arrayidx3848 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2347, i64 %idxprom3847, !dbg !3166
  %mv3849 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3848, i32 0, i32 1, !dbg !3168
  %arrayidx3850 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3849, i64 0, i64 1, !dbg !3166
  store i16 %conv3846, i16* %arrayidx3850, align 2, !dbg !3169
  %2349 = load i32, i32* %nmvsad, align 4, !dbg !3170
  %inc3851 = add nsw i32 %2349, 1, !dbg !3170
  store i32 %inc3851, i32* %nmvsad, align 4, !dbg !3170
  br label %if.end3852, !dbg !3171

if.end3852:                                       ; preds = %if.end3836, %for.body3805
  br label %for.inc3853, !dbg !3172

for.inc3853:                                      ; preds = %if.end3852
  %2350 = load i32, i32* %i3698, align 4, !dbg !3173
  %inc3854 = add nsw i32 %2350, 1, !dbg !3173
  store i32 %inc3854, i32* %i3698, align 4, !dbg !3173
  br label %for.cond3802, !dbg !3174, !llvm.loop !3175

for.end3855:                                      ; preds = %for.cond3802
  %2351 = load i32, i32* %ycost, align 4, !dbg !3177
  %2352 = load i32, i32* %bsad, align 4, !dbg !3178
  %add3856 = add nsw i32 %2352, %2351, !dbg !3178
  store i32 %add3856, i32* %bsad, align 4, !dbg !3178
  br label %for.inc3857, !dbg !3179

for.inc3857:                                      ; preds = %for.end3855, %if.then3705
  %2353 = load i32, i32* %my3693, align 4, !dbg !3180
  %inc3858 = add nsw i32 %2353, 1, !dbg !3180
  store i32 %inc3858, i32* %my3693, align 4, !dbg !3180
  br label %for.cond3694, !dbg !3181, !llvm.loop !3182

for.end3859:                                      ; preds = %for.cond3694
  %2354 = load i32, i32* %i_me_range, align 4, !dbg !3184
  %shr3860 = ashr i32 %2354, 1, !dbg !3185
  store i32 %shr3860, i32* %limit, align 4, !dbg !3186
  %2355 = load i32, i32* %bsad, align 4, !dbg !3187
  %2356 = load i32, i32* %sad_thresh, align 4, !dbg !3188
  %mul3861 = mul nsw i32 %2355, %2356, !dbg !3189
  %shr3862 = ashr i32 %mul3861, 3, !dbg !3190
  store i32 %shr3862, i32* %sad_thresh, align 4, !dbg !3191
  br label %while.cond, !dbg !3192

while.cond:                                       ; preds = %for.end3906, %for.end3859
  %2357 = load i32, i32* %nmvsad, align 4, !dbg !3193
  %2358 = load i32, i32* %limit, align 4, !dbg !3194
  %mul3863 = mul nsw i32 %2358, 2, !dbg !3195
  %cmp3864 = icmp sgt i32 %2357, %mul3863, !dbg !3196
  br i1 %cmp3864, label %land.rhs3866, label %land.end3869, !dbg !3197

land.rhs3866:                                     ; preds = %while.cond
  %2359 = load i32, i32* %sad_thresh, align 4, !dbg !3198
  %2360 = load i32, i32* %bsad, align 4, !dbg !3199
  %cmp3867 = icmp sgt i32 %2359, %2360, !dbg !3200
  br label %land.end3869

land.end3869:                                     ; preds = %land.rhs3866, %while.cond
  %2361 = phi i1 [ false, %while.cond ], [ %cmp3867, %land.rhs3866 ], !dbg !3201
  br i1 %2361, label %while.body, label %while.end, !dbg !3192

while.body:                                       ; preds = %land.end3869
  call void @llvm.dbg.declare(metadata i32* %i3870, metadata !3202, metadata !DIExpression()), !dbg !3204
  %2362 = load i32, i32* %sad_thresh, align 4, !dbg !3205
  %2363 = load i32, i32* %bsad, align 4, !dbg !3206
  %add3871 = add nsw i32 %2362, %2363, !dbg !3207
  %shr3872 = ashr i32 %add3871, 1, !dbg !3208
  store i32 %shr3872, i32* %sad_thresh, align 4, !dbg !3209
  store i32 0, i32* %i3870, align 4, !dbg !3210
  br label %for.cond3873, !dbg !3212

for.cond3873:                                     ; preds = %for.inc3884, %while.body
  %2364 = load i32, i32* %i3870, align 4, !dbg !3213
  %2365 = load i32, i32* %nmvsad, align 4, !dbg !3215
  %cmp3874 = icmp slt i32 %2364, %2365, !dbg !3216
  br i1 %cmp3874, label %land.rhs3876, label %land.end3882, !dbg !3217

land.rhs3876:                                     ; preds = %for.cond3873
  %2366 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3218
  %2367 = load i32, i32* %i3870, align 4, !dbg !3219
  %idxprom3877 = sext i32 %2367 to i64, !dbg !3218
  %arrayidx3878 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2366, i64 %idxprom3877, !dbg !3218
  %sad3879 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3878, i32 0, i32 0, !dbg !3220
  %2368 = load i32, i32* %sad3879, align 4, !dbg !3220
  %2369 = load i32, i32* %sad_thresh, align 4, !dbg !3221
  %cmp3880 = icmp sle i32 %2368, %2369, !dbg !3222
  br label %land.end3882

land.end3882:                                     ; preds = %land.rhs3876, %for.cond3873
  %2370 = phi i1 [ false, %for.cond3873 ], [ %cmp3880, %land.rhs3876 ], !dbg !3223
  br i1 %2370, label %for.body3883, label %for.end3886, !dbg !3224

for.body3883:                                     ; preds = %land.end3882
  br label %for.inc3884, !dbg !3224

for.inc3884:                                      ; preds = %for.body3883
  %2371 = load i32, i32* %i3870, align 4, !dbg !3225
  %inc3885 = add nsw i32 %2371, 1, !dbg !3225
  store i32 %inc3885, i32* %i3870, align 4, !dbg !3225
  br label %for.cond3873, !dbg !3226, !llvm.loop !3227

for.end3886:                                      ; preds = %land.end3882
  call void @llvm.dbg.declare(metadata i32* %j3887, metadata !3229, metadata !DIExpression()), !dbg !3231
  %2372 = load i32, i32* %i3870, align 4, !dbg !3232
  store i32 %2372, i32* %j3887, align 4, !dbg !3231
  br label %for.cond3888, !dbg !3233

for.cond3888:                                     ; preds = %for.inc3904, %for.end3886
  %2373 = load i32, i32* %j3887, align 4, !dbg !3234
  %2374 = load i32, i32* %nmvsad, align 4, !dbg !3236
  %cmp3889 = icmp slt i32 %2373, %2374, !dbg !3237
  br i1 %cmp3889, label %for.body3891, label %for.end3906, !dbg !3238

for.body3891:                                     ; preds = %for.cond3888
  call void @llvm.dbg.declare(metadata i32* %sad3892, metadata !3239, metadata !DIExpression()), !dbg !3241
  call void @llvm.dbg.declare(metadata i64* %mvsad, metadata !3242, metadata !DIExpression()), !dbg !3245
  %2375 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3246
  %2376 = load i32, i32* %j3887, align 4, !dbg !3246
  %idxprom3893 = sext i32 %2376 to i64, !dbg !3246
  %arrayidx3894 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2375, i64 %idxprom3893, !dbg !3246
  %2377 = bitcast %struct.mvsad_t* %arrayidx3894 to %union.x264_union64_t*, !dbg !3246
  %i3895 = bitcast %union.x264_union64_t* %2377 to i64*, !dbg !3246
  %2378 = load i64, i64* %i3895, align 8, !dbg !3246
  %2379 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3247
  %2380 = load i32, i32* %i3870, align 4, !dbg !3247
  %idxprom3896 = sext i32 %2380 to i64, !dbg !3247
  %arrayidx3897 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2379, i64 %idxprom3896, !dbg !3247
  %2381 = bitcast %struct.mvsad_t* %arrayidx3897 to %union.x264_union64_t*, !dbg !3247
  %i3898 = bitcast %union.x264_union64_t* %2381 to i64*, !dbg !3247
  store i64 %2378, i64* %i3898, align 8, !dbg !3248
  store i64 %2378, i64* %mvsad, align 8, !dbg !3245
  %2382 = load i64, i64* %mvsad, align 8, !dbg !3249
  %conv3899 = trunc i64 %2382 to i32, !dbg !3249
  store i32 %conv3899, i32* %sad3892, align 4, !dbg !3250
  %2383 = load i32, i32* %sad3892, align 4, !dbg !3251
  %2384 = load i32, i32* %sad_thresh, align 4, !dbg !3252
  %add3900 = add nsw i32 %2384, 1, !dbg !3253
  %sub3901 = sub i32 %2383, %add3900, !dbg !3254
  %shr3902 = lshr i32 %sub3901, 31, !dbg !3255
  %2385 = load i32, i32* %i3870, align 4, !dbg !3256
  %add3903 = add i32 %2385, %shr3902, !dbg !3256
  store i32 %add3903, i32* %i3870, align 4, !dbg !3256
  br label %for.inc3904, !dbg !3257

for.inc3904:                                      ; preds = %for.body3891
  %2386 = load i32, i32* %j3887, align 4, !dbg !3258
  %inc3905 = add nsw i32 %2386, 1, !dbg !3258
  store i32 %inc3905, i32* %j3887, align 4, !dbg !3258
  br label %for.cond3888, !dbg !3259, !llvm.loop !3260

for.end3906:                                      ; preds = %for.cond3888
  %2387 = load i32, i32* %i3870, align 4, !dbg !3262
  store i32 %2387, i32* %nmvsad, align 4, !dbg !3263
  br label %while.cond, !dbg !3192, !llvm.loop !3264

while.end:                                        ; preds = %land.end3869
  br label %while.cond3907, !dbg !3266

while.cond3907:                                   ; preds = %for.end3928, %while.end
  %2388 = load i32, i32* %nmvsad, align 4, !dbg !3267
  %2389 = load i32, i32* %limit, align 4, !dbg !3268
  %cmp3908 = icmp sgt i32 %2388, %2389, !dbg !3269
  br i1 %cmp3908, label %while.body3910, label %while.end3936, !dbg !3266

while.body3910:                                   ; preds = %while.cond3907
  call void @llvm.dbg.declare(metadata i32* %bi, metadata !3270, metadata !DIExpression()), !dbg !3272
  store i32 0, i32* %bi, align 4, !dbg !3272
  call void @llvm.dbg.declare(metadata i32* %i3911, metadata !3273, metadata !DIExpression()), !dbg !3275
  store i32 1, i32* %i3911, align 4, !dbg !3275
  br label %for.cond3912, !dbg !3276

for.cond3912:                                     ; preds = %for.inc3926, %while.body3910
  %2390 = load i32, i32* %i3911, align 4, !dbg !3277
  %2391 = load i32, i32* %nmvsad, align 4, !dbg !3279
  %cmp3913 = icmp slt i32 %2390, %2391, !dbg !3280
  br i1 %cmp3913, label %for.body3915, label %for.end3928, !dbg !3281

for.body3915:                                     ; preds = %for.cond3912
  %2392 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3282
  %2393 = load i32, i32* %i3911, align 4, !dbg !3284
  %idxprom3916 = sext i32 %2393 to i64, !dbg !3282
  %arrayidx3917 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2392, i64 %idxprom3916, !dbg !3282
  %sad3918 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3917, i32 0, i32 0, !dbg !3285
  %2394 = load i32, i32* %sad3918, align 4, !dbg !3285
  %2395 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3286
  %2396 = load i32, i32* %bi, align 4, !dbg !3287
  %idxprom3919 = sext i32 %2396 to i64, !dbg !3286
  %arrayidx3920 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2395, i64 %idxprom3919, !dbg !3286
  %sad3921 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3920, i32 0, i32 0, !dbg !3288
  %2397 = load i32, i32* %sad3921, align 4, !dbg !3288
  %cmp3922 = icmp sgt i32 %2394, %2397, !dbg !3289
  br i1 %cmp3922, label %if.then3924, label %if.end3925, !dbg !3290

if.then3924:                                      ; preds = %for.body3915
  %2398 = load i32, i32* %i3911, align 4, !dbg !3291
  store i32 %2398, i32* %bi, align 4, !dbg !3292
  br label %if.end3925, !dbg !3293

if.end3925:                                       ; preds = %if.then3924, %for.body3915
  br label %for.inc3926, !dbg !3288

for.inc3926:                                      ; preds = %if.end3925
  %2399 = load i32, i32* %i3911, align 4, !dbg !3294
  %inc3927 = add nsw i32 %2399, 1, !dbg !3294
  store i32 %inc3927, i32* %i3911, align 4, !dbg !3294
  br label %for.cond3912, !dbg !3295, !llvm.loop !3296

for.end3928:                                      ; preds = %for.cond3912
  %2400 = load i32, i32* %nmvsad, align 4, !dbg !3298
  %dec3929 = add nsw i32 %2400, -1, !dbg !3298
  store i32 %dec3929, i32* %nmvsad, align 4, !dbg !3298
  %2401 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3299
  %2402 = load i32, i32* %nmvsad, align 4, !dbg !3299
  %idxprom3930 = sext i32 %2402 to i64, !dbg !3299
  %arrayidx3931 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2401, i64 %idxprom3930, !dbg !3299
  %2403 = bitcast %struct.mvsad_t* %arrayidx3931 to %union.x264_union64_t*, !dbg !3299
  %i3932 = bitcast %union.x264_union64_t* %2403 to i64*, !dbg !3299
  %2404 = load i64, i64* %i3932, align 8, !dbg !3299
  %2405 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3299
  %2406 = load i32, i32* %bi, align 4, !dbg !3299
  %idxprom3933 = sext i32 %2406 to i64, !dbg !3299
  %arrayidx3934 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2405, i64 %idxprom3933, !dbg !3299
  %2407 = bitcast %struct.mvsad_t* %arrayidx3934 to %union.x264_union64_t*, !dbg !3299
  %i3935 = bitcast %union.x264_union64_t* %2407 to i64*, !dbg !3299
  store i64 %2404, i64* %i3935, align 8, !dbg !3299
  br label %while.cond3907, !dbg !3266, !llvm.loop !3301

while.end3936:                                    ; preds = %while.cond3907
  call void @llvm.dbg.declare(metadata i32* %i3937, metadata !3303, metadata !DIExpression()), !dbg !3305
  store i32 0, i32* %i3937, align 4, !dbg !3305
  br label %for.cond3938, !dbg !3306

for.cond3938:                                     ; preds = %for.inc3996, %while.end3936
  %2408 = load i32, i32* %i3937, align 4, !dbg !3307
  %2409 = load i32, i32* %nmvsad, align 4, !dbg !3309
  %cmp3939 = icmp slt i32 %2408, %2409, !dbg !3310
  br i1 %cmp3939, label %for.body3941, label %for.end3998, !dbg !3311

for.body3941:                                     ; preds = %for.cond3938
  call void @llvm.dbg.declare(metadata i32* %cost3942, metadata !3312, metadata !DIExpression()), !dbg !3314
  %2410 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3314
  %pixf3943 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2410, i32 0, i32 69, !dbg !3314
  %fpelcmp3944 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf3943, i32 0, i32 7, !dbg !3314
  %2411 = load i32, i32* %i_pixel5, align 4, !dbg !3314
  %idxprom3945 = sext i32 %2411 to i64, !dbg !3314
  %arrayidx3946 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp3944, i64 0, i64 %idxprom3945, !dbg !3314
  %2412 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx3946, align 8, !dbg !3314
  %2413 = load i8*, i8** %p_fenc, align 8, !dbg !3314
  %2414 = load i8*, i8** %p_fref_w, align 8, !dbg !3314
  %2415 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3314
  %2416 = load i32, i32* %i3937, align 4, !dbg !3314
  %idxprom3947 = sext i32 %2416 to i64, !dbg !3314
  %arrayidx3948 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2415, i64 %idxprom3947, !dbg !3314
  %mv3949 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3948, i32 0, i32 1, !dbg !3314
  %arrayidx3950 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3949, i64 0, i64 1, !dbg !3314
  %2417 = load i16, i16* %arrayidx3950, align 2, !dbg !3314
  %conv3951 = sext i16 %2417 to i32, !dbg !3314
  %2418 = load i32, i32* %stride, align 4, !dbg !3314
  %mul3952 = mul nsw i32 %conv3951, %2418, !dbg !3314
  %2419 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3314
  %2420 = load i32, i32* %i3937, align 4, !dbg !3314
  %idxprom3953 = sext i32 %2420 to i64, !dbg !3314
  %arrayidx3954 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2419, i64 %idxprom3953, !dbg !3314
  %mv3955 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3954, i32 0, i32 1, !dbg !3314
  %arrayidx3956 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3955, i64 0, i64 0, !dbg !3314
  %2421 = load i16, i16* %arrayidx3956, align 4, !dbg !3314
  %conv3957 = sext i16 %2421 to i32, !dbg !3314
  %add3958 = add nsw i32 %mul3952, %conv3957, !dbg !3314
  %idxprom3959 = sext i32 %add3958 to i64, !dbg !3314
  %arrayidx3960 = getelementptr inbounds i8, i8* %2414, i64 %idxprom3959, !dbg !3314
  %2422 = load i32, i32* %stride, align 4, !dbg !3314
  %call3961 = call i32 %2412(i8* %2413, i32 16, i8* %arrayidx3960, i32 %2422), !dbg !3314
  %2423 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3314
  %2424 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3314
  %2425 = load i32, i32* %i3937, align 4, !dbg !3314
  %idxprom3962 = sext i32 %2425 to i64, !dbg !3314
  %arrayidx3963 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2424, i64 %idxprom3962, !dbg !3314
  %mv3964 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3963, i32 0, i32 1, !dbg !3314
  %arrayidx3965 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3964, i64 0, i64 0, !dbg !3314
  %2426 = load i16, i16* %arrayidx3965, align 4, !dbg !3314
  %conv3966 = sext i16 %2426 to i32, !dbg !3314
  %shl3967 = shl i32 %conv3966, 2, !dbg !3314
  %idxprom3968 = sext i32 %shl3967 to i64, !dbg !3314
  %arrayidx3969 = getelementptr inbounds i16, i16* %2423, i64 %idxprom3968, !dbg !3314
  %2427 = load i16, i16* %arrayidx3969, align 2, !dbg !3314
  %conv3970 = zext i16 %2427 to i32, !dbg !3314
  %2428 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3314
  %2429 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3314
  %2430 = load i32, i32* %i3937, align 4, !dbg !3314
  %idxprom3971 = sext i32 %2430 to i64, !dbg !3314
  %arrayidx3972 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2429, i64 %idxprom3971, !dbg !3314
  %mv3973 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3972, i32 0, i32 1, !dbg !3314
  %arrayidx3974 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3973, i64 0, i64 1, !dbg !3314
  %2431 = load i16, i16* %arrayidx3974, align 2, !dbg !3314
  %conv3975 = sext i16 %2431 to i32, !dbg !3314
  %shl3976 = shl i32 %conv3975, 2, !dbg !3314
  %idxprom3977 = sext i32 %shl3976 to i64, !dbg !3314
  %arrayidx3978 = getelementptr inbounds i16, i16* %2428, i64 %idxprom3977, !dbg !3314
  %2432 = load i16, i16* %arrayidx3978, align 2, !dbg !3314
  %conv3979 = zext i16 %2432 to i32, !dbg !3314
  %add3980 = add nsw i32 %conv3970, %conv3979, !dbg !3314
  %add3981 = add nsw i32 %call3961, %add3980, !dbg !3314
  store i32 %add3981, i32* %cost3942, align 4, !dbg !3314
  %2433 = load i32, i32* %cost3942, align 4, !dbg !3315
  %2434 = load i32, i32* %bcost, align 4, !dbg !3315
  %cmp3982 = icmp slt i32 %2433, %2434, !dbg !3315
  br i1 %cmp3982, label %if.then3984, label %if.end3995, !dbg !3314

if.then3984:                                      ; preds = %for.body3941
  %2435 = load i32, i32* %cost3942, align 4, !dbg !3317
  store i32 %2435, i32* %bcost, align 4, !dbg !3317
  %2436 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3317
  %2437 = load i32, i32* %i3937, align 4, !dbg !3317
  %idxprom3985 = sext i32 %2437 to i64, !dbg !3317
  %arrayidx3986 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2436, i64 %idxprom3985, !dbg !3317
  %mv3987 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3986, i32 0, i32 1, !dbg !3317
  %arrayidx3988 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3987, i64 0, i64 0, !dbg !3317
  %2438 = load i16, i16* %arrayidx3988, align 4, !dbg !3317
  %conv3989 = sext i16 %2438 to i32, !dbg !3317
  store i32 %conv3989, i32* %bmx, align 4, !dbg !3317
  %2439 = load %struct.mvsad_t*, %struct.mvsad_t** %mvsads, align 8, !dbg !3317
  %2440 = load i32, i32* %i3937, align 4, !dbg !3317
  %idxprom3990 = sext i32 %2440 to i64, !dbg !3317
  %arrayidx3991 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %2439, i64 %idxprom3990, !dbg !3317
  %mv3992 = getelementptr inbounds %struct.mvsad_t, %struct.mvsad_t* %arrayidx3991, i32 0, i32 1, !dbg !3317
  %arrayidx3993 = getelementptr inbounds [2 x i16], [2 x i16]* %mv3992, i64 0, i64 1, !dbg !3317
  %2441 = load i16, i16* %arrayidx3993, align 2, !dbg !3317
  %conv3994 = sext i16 %2441 to i32, !dbg !3317
  store i32 %conv3994, i32* %bmy, align 4, !dbg !3317
  br label %if.end3995, !dbg !3317

if.end3995:                                       ; preds = %if.then3984, %for.body3941
  br label %for.inc3996, !dbg !3314

for.inc3996:                                      ; preds = %if.end3995
  %2442 = load i32, i32* %i3937, align 4, !dbg !3319
  %inc3997 = add nsw i32 %2442, 1, !dbg !3319
  store i32 %inc3997, i32* %i3937, align 4, !dbg !3319
  br label %for.cond3938, !dbg !3320, !llvm.loop !3321

for.end3998:                                      ; preds = %for.cond3938
  br label %if.end4182, !dbg !3323

if.else3999:                                      ; preds = %if.end3655
  call void @llvm.dbg.declare(metadata i32* %my4000, metadata !3324, metadata !DIExpression()), !dbg !3327
  %2443 = load i32, i32* %min_y, align 4, !dbg !3328
  store i32 %2443, i32* %my4000, align 4, !dbg !3327
  br label %for.cond4001, !dbg !3329

for.cond4001:                                     ; preds = %for.inc4179, %if.else3999
  %2444 = load i32, i32* %my4000, align 4, !dbg !3330
  %2445 = load i32, i32* %max_y, align 4, !dbg !3332
  %cmp4002 = icmp sle i32 %2444, %2445, !dbg !3333
  br i1 %cmp4002, label %for.body4004, label %for.end4181, !dbg !3334

for.body4004:                                     ; preds = %for.cond4001
  call void @llvm.dbg.declare(metadata i32* %i4005, metadata !3335, metadata !DIExpression()), !dbg !3337
  call void @llvm.dbg.declare(metadata i32* %ycost4006, metadata !3338, metadata !DIExpression()), !dbg !3339
  %2446 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3340
  %2447 = load i32, i32* %my4000, align 4, !dbg !3341
  %shl4007 = shl i32 %2447, 2, !dbg !3342
  %idxprom4008 = sext i32 %shl4007 to i64, !dbg !3340
  %arrayidx4009 = getelementptr inbounds i16, i16* %2446, i64 %idxprom4008, !dbg !3340
  %2448 = load i16, i16* %arrayidx4009, align 2, !dbg !3340
  %conv4010 = zext i16 %2448 to i32, !dbg !3340
  store i32 %conv4010, i32* %ycost4006, align 4, !dbg !3339
  %2449 = load i32, i32* %bcost, align 4, !dbg !3343
  %2450 = load i32, i32* %ycost4006, align 4, !dbg !3345
  %cmp4011 = icmp sle i32 %2449, %2450, !dbg !3346
  br i1 %cmp4011, label %if.then4013, label %if.end4014, !dbg !3347

if.then4013:                                      ; preds = %for.body4004
  br label %for.inc4179, !dbg !3348

if.end4014:                                       ; preds = %for.body4004
  %2451 = load i32, i32* %ycost4006, align 4, !dbg !3349
  %2452 = load i32, i32* %bcost, align 4, !dbg !3350
  %sub4015 = sub nsw i32 %2452, %2451, !dbg !3350
  store i32 %sub4015, i32* %bcost, align 4, !dbg !3350
  %2453 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3351
  %pixf4016 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2453, i32 0, i32 69, !dbg !3352
  %ads4017 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf4016, i32 0, i32 20, !dbg !3353
  %2454 = load i32, i32* %i_pixel5, align 4, !dbg !3354
  %idxprom4018 = sext i32 %2454 to i64, !dbg !3351
  %arrayidx4019 = getelementptr inbounds [7 x i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*], [7 x i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*]* %ads4017, i64 0, i64 %idxprom4018, !dbg !3351
  %2455 = load i32 (i32*, i16*, i32, i16*, i16*, i32, i32)*, i32 (i32*, i16*, i32, i16*, i16*, i32, i32)** %arrayidx4019, align 8, !dbg !3351
  %arraydecay4020 = getelementptr inbounds [4 x i32], [4 x i32]* %enc_dc, i64 0, i64 0, !dbg !3355
  %2456 = load i16*, i16** %sums_base, align 8, !dbg !3356
  %2457 = load i32, i32* %min_x, align 4, !dbg !3357
  %idx.ext4021 = sext i32 %2457 to i64, !dbg !3358
  %add.ptr4022 = getelementptr inbounds i16, i16* %2456, i64 %idx.ext4021, !dbg !3358
  %2458 = load i32, i32* %my4000, align 4, !dbg !3359
  %2459 = load i32, i32* %stride, align 4, !dbg !3360
  %mul4023 = mul nsw i32 %2458, %2459, !dbg !3361
  %idx.ext4024 = sext i32 %mul4023 to i64, !dbg !3362
  %add.ptr4025 = getelementptr inbounds i16, i16* %add.ptr4022, i64 %idx.ext4024, !dbg !3362
  %2460 = load i32, i32* %delta, align 4, !dbg !3363
  %2461 = load i16*, i16** %cost_fpel_mvx, align 8, !dbg !3364
  %2462 = load i32, i32* %min_x, align 4, !dbg !3365
  %idx.ext4026 = sext i32 %2462 to i64, !dbg !3366
  %add.ptr4027 = getelementptr inbounds i16, i16* %2461, i64 %idx.ext4026, !dbg !3366
  %2463 = load i16*, i16** %xs, align 8, !dbg !3367
  %2464 = load i32, i32* %width, align 4, !dbg !3368
  %2465 = load i32, i32* %bcost, align 4, !dbg !3369
  %call4028 = call i32 %2455(i32* %arraydecay4020, i16* %add.ptr4025, i32 %2460, i16* %add.ptr4027, i16* %2463, i32 %2464, i32 %2465), !dbg !3351
  store i32 %call4028, i32* %xn, align 4, !dbg !3370
  store i32 0, i32* %i4005, align 4, !dbg !3371
  br label %for.cond4029, !dbg !3373

for.cond4029:                                     ; preds = %for.inc4132, %if.end4014
  %2466 = load i32, i32* %i4005, align 4, !dbg !3374
  %2467 = load i32, i32* %xn, align 4, !dbg !3376
  %sub4030 = sub nsw i32 %2467, 2, !dbg !3377
  %cmp4031 = icmp slt i32 %2466, %sub4030, !dbg !3378
  br i1 %cmp4031, label %for.body4033, label %for.end4134, !dbg !3379

for.body4033:                                     ; preds = %for.cond4029
  %2468 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3380
  %pixf4034 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2468, i32 0, i32 69, !dbg !3380
  %fpelcmp_x34035 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf4034, i32 0, i32 8, !dbg !3380
  %2469 = load i32, i32* %i_pixel5, align 4, !dbg !3380
  %idxprom4036 = sext i32 %2469 to i64, !dbg !3380
  %arrayidx4037 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x34035, i64 0, i64 %idxprom4036, !dbg !3380
  %2470 = load void (i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx4037, align 8, !dbg !3380
  %2471 = load i8*, i8** %p_fenc, align 8, !dbg !3380
  %2472 = load i8*, i8** %p_fref_w, align 8, !dbg !3380
  %2473 = load i32, i32* %min_x, align 4, !dbg !3380
  %2474 = load i16*, i16** %xs, align 8, !dbg !3380
  %2475 = load i32, i32* %i4005, align 4, !dbg !3380
  %idxprom4038 = sext i32 %2475 to i64, !dbg !3380
  %arrayidx4039 = getelementptr inbounds i16, i16* %2474, i64 %idxprom4038, !dbg !3380
  %2476 = load i16, i16* %arrayidx4039, align 2, !dbg !3380
  %conv4040 = sext i16 %2476 to i32, !dbg !3380
  %add4041 = add nsw i32 %2473, %conv4040, !dbg !3380
  %idx.ext4042 = sext i32 %add4041 to i64, !dbg !3380
  %add.ptr4043 = getelementptr inbounds i8, i8* %2472, i64 %idx.ext4042, !dbg !3380
  %2477 = load i32, i32* %my4000, align 4, !dbg !3380
  %2478 = load i32, i32* %stride, align 4, !dbg !3380
  %mul4044 = mul nsw i32 %2477, %2478, !dbg !3380
  %idx.ext4045 = sext i32 %mul4044 to i64, !dbg !3380
  %add.ptr4046 = getelementptr inbounds i8, i8* %add.ptr4043, i64 %idx.ext4045, !dbg !3380
  %2479 = load i8*, i8** %p_fref_w, align 8, !dbg !3380
  %2480 = load i32, i32* %min_x, align 4, !dbg !3380
  %2481 = load i16*, i16** %xs, align 8, !dbg !3380
  %2482 = load i32, i32* %i4005, align 4, !dbg !3380
  %add4047 = add nsw i32 %2482, 1, !dbg !3380
  %idxprom4048 = sext i32 %add4047 to i64, !dbg !3380
  %arrayidx4049 = getelementptr inbounds i16, i16* %2481, i64 %idxprom4048, !dbg !3380
  %2483 = load i16, i16* %arrayidx4049, align 2, !dbg !3380
  %conv4050 = sext i16 %2483 to i32, !dbg !3380
  %add4051 = add nsw i32 %2480, %conv4050, !dbg !3380
  %idx.ext4052 = sext i32 %add4051 to i64, !dbg !3380
  %add.ptr4053 = getelementptr inbounds i8, i8* %2479, i64 %idx.ext4052, !dbg !3380
  %2484 = load i32, i32* %my4000, align 4, !dbg !3380
  %2485 = load i32, i32* %stride, align 4, !dbg !3380
  %mul4054 = mul nsw i32 %2484, %2485, !dbg !3380
  %idx.ext4055 = sext i32 %mul4054 to i64, !dbg !3380
  %add.ptr4056 = getelementptr inbounds i8, i8* %add.ptr4053, i64 %idx.ext4055, !dbg !3380
  %2486 = load i8*, i8** %p_fref_w, align 8, !dbg !3380
  %2487 = load i32, i32* %min_x, align 4, !dbg !3380
  %2488 = load i16*, i16** %xs, align 8, !dbg !3380
  %2489 = load i32, i32* %i4005, align 4, !dbg !3380
  %add4057 = add nsw i32 %2489, 2, !dbg !3380
  %idxprom4058 = sext i32 %add4057 to i64, !dbg !3380
  %arrayidx4059 = getelementptr inbounds i16, i16* %2488, i64 %idxprom4058, !dbg !3380
  %2490 = load i16, i16* %arrayidx4059, align 2, !dbg !3380
  %conv4060 = sext i16 %2490 to i32, !dbg !3380
  %add4061 = add nsw i32 %2487, %conv4060, !dbg !3380
  %idx.ext4062 = sext i32 %add4061 to i64, !dbg !3380
  %add.ptr4063 = getelementptr inbounds i8, i8* %2486, i64 %idx.ext4062, !dbg !3380
  %2491 = load i32, i32* %my4000, align 4, !dbg !3380
  %2492 = load i32, i32* %stride, align 4, !dbg !3380
  %mul4064 = mul nsw i32 %2491, %2492, !dbg !3380
  %idx.ext4065 = sext i32 %mul4064 to i64, !dbg !3380
  %add.ptr4066 = getelementptr inbounds i8, i8* %add.ptr4063, i64 %idx.ext4065, !dbg !3380
  %2493 = load i32, i32* %stride, align 4, !dbg !3380
  %arraydecay4067 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !3380
  call void %2470(i8* %2471, i8* %add.ptr4046, i8* %add.ptr4056, i8* %add.ptr4066, i32 %2493, i32* %arraydecay4067), !dbg !3380
  %2494 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3380
  %2495 = load i32, i32* %min_x, align 4, !dbg !3380
  %2496 = load i16*, i16** %xs, align 8, !dbg !3380
  %2497 = load i32, i32* %i4005, align 4, !dbg !3380
  %idxprom4068 = sext i32 %2497 to i64, !dbg !3380
  %arrayidx4069 = getelementptr inbounds i16, i16* %2496, i64 %idxprom4068, !dbg !3380
  %2498 = load i16, i16* %arrayidx4069, align 2, !dbg !3380
  %conv4070 = sext i16 %2498 to i32, !dbg !3380
  %add4071 = add nsw i32 %2495, %conv4070, !dbg !3380
  %shl4072 = shl i32 %add4071, 2, !dbg !3380
  %idxprom4073 = sext i32 %shl4072 to i64, !dbg !3380
  %arrayidx4074 = getelementptr inbounds i16, i16* %2494, i64 %idxprom4073, !dbg !3380
  %2499 = load i16, i16* %arrayidx4074, align 2, !dbg !3380
  %conv4075 = zext i16 %2499 to i32, !dbg !3380
  %arrayidx4076 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !3380
  %2500 = load i32, i32* %arrayidx4076, align 16, !dbg !3380
  %add4077 = add nsw i32 %2500, %conv4075, !dbg !3380
  store i32 %add4077, i32* %arrayidx4076, align 16, !dbg !3380
  %2501 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3380
  %2502 = load i32, i32* %min_x, align 4, !dbg !3380
  %2503 = load i16*, i16** %xs, align 8, !dbg !3380
  %2504 = load i32, i32* %i4005, align 4, !dbg !3380
  %add4078 = add nsw i32 %2504, 1, !dbg !3380
  %idxprom4079 = sext i32 %add4078 to i64, !dbg !3380
  %arrayidx4080 = getelementptr inbounds i16, i16* %2503, i64 %idxprom4079, !dbg !3380
  %2505 = load i16, i16* %arrayidx4080, align 2, !dbg !3380
  %conv4081 = sext i16 %2505 to i32, !dbg !3380
  %add4082 = add nsw i32 %2502, %conv4081, !dbg !3380
  %shl4083 = shl i32 %add4082, 2, !dbg !3380
  %idxprom4084 = sext i32 %shl4083 to i64, !dbg !3380
  %arrayidx4085 = getelementptr inbounds i16, i16* %2501, i64 %idxprom4084, !dbg !3380
  %2506 = load i16, i16* %arrayidx4085, align 2, !dbg !3380
  %conv4086 = zext i16 %2506 to i32, !dbg !3380
  %arrayidx4087 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !3380
  %2507 = load i32, i32* %arrayidx4087, align 4, !dbg !3380
  %add4088 = add nsw i32 %2507, %conv4086, !dbg !3380
  store i32 %add4088, i32* %arrayidx4087, align 4, !dbg !3380
  %2508 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3380
  %2509 = load i32, i32* %min_x, align 4, !dbg !3380
  %2510 = load i16*, i16** %xs, align 8, !dbg !3380
  %2511 = load i32, i32* %i4005, align 4, !dbg !3380
  %add4089 = add nsw i32 %2511, 2, !dbg !3380
  %idxprom4090 = sext i32 %add4089 to i64, !dbg !3380
  %arrayidx4091 = getelementptr inbounds i16, i16* %2510, i64 %idxprom4090, !dbg !3380
  %2512 = load i16, i16* %arrayidx4091, align 2, !dbg !3380
  %conv4092 = sext i16 %2512 to i32, !dbg !3380
  %add4093 = add nsw i32 %2509, %conv4092, !dbg !3380
  %shl4094 = shl i32 %add4093, 2, !dbg !3380
  %idxprom4095 = sext i32 %shl4094 to i64, !dbg !3380
  %arrayidx4096 = getelementptr inbounds i16, i16* %2508, i64 %idxprom4095, !dbg !3380
  %2513 = load i16, i16* %arrayidx4096, align 2, !dbg !3380
  %conv4097 = zext i16 %2513 to i32, !dbg !3380
  %arrayidx4098 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !3380
  %2514 = load i32, i32* %arrayidx4098, align 8, !dbg !3380
  %add4099 = add nsw i32 %2514, %conv4097, !dbg !3380
  store i32 %add4099, i32* %arrayidx4098, align 8, !dbg !3380
  %arrayidx4100 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !3382
  %2515 = load i32, i32* %arrayidx4100, align 16, !dbg !3382
  %2516 = load i32, i32* %bcost, align 4, !dbg !3382
  %cmp4101 = icmp slt i32 %2515, %2516, !dbg !3382
  br i1 %cmp4101, label %if.then4103, label %if.end4109, !dbg !3380

if.then4103:                                      ; preds = %for.body4033
  %arrayidx4104 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 0, !dbg !3384
  %2517 = load i32, i32* %arrayidx4104, align 16, !dbg !3384
  store i32 %2517, i32* %bcost, align 4, !dbg !3384
  %2518 = load i32, i32* %min_x, align 4, !dbg !3384
  %2519 = load i16*, i16** %xs, align 8, !dbg !3384
  %2520 = load i32, i32* %i4005, align 4, !dbg !3384
  %idxprom4105 = sext i32 %2520 to i64, !dbg !3384
  %arrayidx4106 = getelementptr inbounds i16, i16* %2519, i64 %idxprom4105, !dbg !3384
  %2521 = load i16, i16* %arrayidx4106, align 2, !dbg !3384
  %conv4107 = sext i16 %2521 to i32, !dbg !3384
  %add4108 = add nsw i32 %2518, %conv4107, !dbg !3384
  store i32 %add4108, i32* %bmx, align 4, !dbg !3384
  %2522 = load i32, i32* %my4000, align 4, !dbg !3384
  store i32 %2522, i32* %bmy, align 4, !dbg !3384
  br label %if.end4109, !dbg !3384

if.end4109:                                       ; preds = %if.then4103, %for.body4033
  %arrayidx4110 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !3386
  %2523 = load i32, i32* %arrayidx4110, align 4, !dbg !3386
  %2524 = load i32, i32* %bcost, align 4, !dbg !3386
  %cmp4111 = icmp slt i32 %2523, %2524, !dbg !3386
  br i1 %cmp4111, label %if.then4113, label %if.end4120, !dbg !3380

if.then4113:                                      ; preds = %if.end4109
  %arrayidx4114 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 1, !dbg !3388
  %2525 = load i32, i32* %arrayidx4114, align 4, !dbg !3388
  store i32 %2525, i32* %bcost, align 4, !dbg !3388
  %2526 = load i32, i32* %min_x, align 4, !dbg !3388
  %2527 = load i16*, i16** %xs, align 8, !dbg !3388
  %2528 = load i32, i32* %i4005, align 4, !dbg !3388
  %add4115 = add nsw i32 %2528, 1, !dbg !3388
  %idxprom4116 = sext i32 %add4115 to i64, !dbg !3388
  %arrayidx4117 = getelementptr inbounds i16, i16* %2527, i64 %idxprom4116, !dbg !3388
  %2529 = load i16, i16* %arrayidx4117, align 2, !dbg !3388
  %conv4118 = sext i16 %2529 to i32, !dbg !3388
  %add4119 = add nsw i32 %2526, %conv4118, !dbg !3388
  store i32 %add4119, i32* %bmx, align 4, !dbg !3388
  %2530 = load i32, i32* %my4000, align 4, !dbg !3388
  store i32 %2530, i32* %bmy, align 4, !dbg !3388
  br label %if.end4120, !dbg !3388

if.end4120:                                       ; preds = %if.then4113, %if.end4109
  %arrayidx4121 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !3390
  %2531 = load i32, i32* %arrayidx4121, align 8, !dbg !3390
  %2532 = load i32, i32* %bcost, align 4, !dbg !3390
  %cmp4122 = icmp slt i32 %2531, %2532, !dbg !3390
  br i1 %cmp4122, label %if.then4124, label %if.end4131, !dbg !3380

if.then4124:                                      ; preds = %if.end4120
  %arrayidx4125 = getelementptr inbounds [16 x i32], [16 x i32]* %costs, i64 0, i64 2, !dbg !3392
  %2533 = load i32, i32* %arrayidx4125, align 8, !dbg !3392
  store i32 %2533, i32* %bcost, align 4, !dbg !3392
  %2534 = load i32, i32* %min_x, align 4, !dbg !3392
  %2535 = load i16*, i16** %xs, align 8, !dbg !3392
  %2536 = load i32, i32* %i4005, align 4, !dbg !3392
  %add4126 = add nsw i32 %2536, 2, !dbg !3392
  %idxprom4127 = sext i32 %add4126 to i64, !dbg !3392
  %arrayidx4128 = getelementptr inbounds i16, i16* %2535, i64 %idxprom4127, !dbg !3392
  %2537 = load i16, i16* %arrayidx4128, align 2, !dbg !3392
  %conv4129 = sext i16 %2537 to i32, !dbg !3392
  %add4130 = add nsw i32 %2534, %conv4129, !dbg !3392
  store i32 %add4130, i32* %bmx, align 4, !dbg !3392
  %2538 = load i32, i32* %my4000, align 4, !dbg !3392
  store i32 %2538, i32* %bmy, align 4, !dbg !3392
  br label %if.end4131, !dbg !3392

if.end4131:                                       ; preds = %if.then4124, %if.end4120
  br label %for.inc4132, !dbg !3380

for.inc4132:                                      ; preds = %if.end4131
  %2539 = load i32, i32* %i4005, align 4, !dbg !3394
  %add4133 = add nsw i32 %2539, 3, !dbg !3394
  store i32 %add4133, i32* %i4005, align 4, !dbg !3394
  br label %for.cond4029, !dbg !3395, !llvm.loop !3396

for.end4134:                                      ; preds = %for.cond4029
  %2540 = load i32, i32* %ycost4006, align 4, !dbg !3398
  %2541 = load i32, i32* %bcost, align 4, !dbg !3399
  %add4135 = add nsw i32 %2541, %2540, !dbg !3399
  store i32 %add4135, i32* %bcost, align 4, !dbg !3399
  br label %for.cond4136, !dbg !3400

for.cond4136:                                     ; preds = %for.inc4176, %for.end4134
  %2542 = load i32, i32* %i4005, align 4, !dbg !3401
  %2543 = load i32, i32* %xn, align 4, !dbg !3404
  %cmp4137 = icmp slt i32 %2542, %2543, !dbg !3405
  br i1 %cmp4137, label %for.body4139, label %for.end4178, !dbg !3406

for.body4139:                                     ; preds = %for.cond4136
  call void @llvm.dbg.declare(metadata i32* %cost4140, metadata !3407, metadata !DIExpression()), !dbg !3409
  %2544 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3409
  %pixf4141 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2544, i32 0, i32 69, !dbg !3409
  %fpelcmp4142 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf4141, i32 0, i32 7, !dbg !3409
  %2545 = load i32, i32* %i_pixel5, align 4, !dbg !3409
  %idxprom4143 = sext i32 %2545 to i64, !dbg !3409
  %arrayidx4144 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp4142, i64 0, i64 %idxprom4143, !dbg !3409
  %2546 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx4144, align 8, !dbg !3409
  %2547 = load i8*, i8** %p_fenc, align 8, !dbg !3409
  %2548 = load i8*, i8** %p_fref_w, align 8, !dbg !3409
  %2549 = load i32, i32* %my4000, align 4, !dbg !3409
  %2550 = load i32, i32* %stride, align 4, !dbg !3409
  %mul4145 = mul nsw i32 %2549, %2550, !dbg !3409
  %2551 = load i32, i32* %min_x, align 4, !dbg !3409
  %2552 = load i16*, i16** %xs, align 8, !dbg !3409
  %2553 = load i32, i32* %i4005, align 4, !dbg !3409
  %idxprom4146 = sext i32 %2553 to i64, !dbg !3409
  %arrayidx4147 = getelementptr inbounds i16, i16* %2552, i64 %idxprom4146, !dbg !3409
  %2554 = load i16, i16* %arrayidx4147, align 2, !dbg !3409
  %conv4148 = sext i16 %2554 to i32, !dbg !3409
  %add4149 = add nsw i32 %2551, %conv4148, !dbg !3409
  %add4150 = add nsw i32 %mul4145, %add4149, !dbg !3409
  %idxprom4151 = sext i32 %add4150 to i64, !dbg !3409
  %arrayidx4152 = getelementptr inbounds i8, i8* %2548, i64 %idxprom4151, !dbg !3409
  %2555 = load i32, i32* %stride, align 4, !dbg !3409
  %call4153 = call i32 %2546(i8* %2547, i32 16, i8* %arrayidx4152, i32 %2555), !dbg !3409
  %2556 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3409
  %2557 = load i32, i32* %min_x, align 4, !dbg !3409
  %2558 = load i16*, i16** %xs, align 8, !dbg !3409
  %2559 = load i32, i32* %i4005, align 4, !dbg !3409
  %idxprom4154 = sext i32 %2559 to i64, !dbg !3409
  %arrayidx4155 = getelementptr inbounds i16, i16* %2558, i64 %idxprom4154, !dbg !3409
  %2560 = load i16, i16* %arrayidx4155, align 2, !dbg !3409
  %conv4156 = sext i16 %2560 to i32, !dbg !3409
  %add4157 = add nsw i32 %2557, %conv4156, !dbg !3409
  %shl4158 = shl i32 %add4157, 2, !dbg !3409
  %idxprom4159 = sext i32 %shl4158 to i64, !dbg !3409
  %arrayidx4160 = getelementptr inbounds i16, i16* %2556, i64 %idxprom4159, !dbg !3409
  %2561 = load i16, i16* %arrayidx4160, align 2, !dbg !3409
  %conv4161 = zext i16 %2561 to i32, !dbg !3409
  %2562 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3409
  %2563 = load i32, i32* %my4000, align 4, !dbg !3409
  %shl4162 = shl i32 %2563, 2, !dbg !3409
  %idxprom4163 = sext i32 %shl4162 to i64, !dbg !3409
  %arrayidx4164 = getelementptr inbounds i16, i16* %2562, i64 %idxprom4163, !dbg !3409
  %2564 = load i16, i16* %arrayidx4164, align 2, !dbg !3409
  %conv4165 = zext i16 %2564 to i32, !dbg !3409
  %add4166 = add nsw i32 %conv4161, %conv4165, !dbg !3409
  %add4167 = add nsw i32 %call4153, %add4166, !dbg !3409
  store i32 %add4167, i32* %cost4140, align 4, !dbg !3409
  %2565 = load i32, i32* %cost4140, align 4, !dbg !3410
  %2566 = load i32, i32* %bcost, align 4, !dbg !3410
  %cmp4168 = icmp slt i32 %2565, %2566, !dbg !3410
  br i1 %cmp4168, label %if.then4170, label %if.end4175, !dbg !3409

if.then4170:                                      ; preds = %for.body4139
  %2567 = load i32, i32* %cost4140, align 4, !dbg !3412
  store i32 %2567, i32* %bcost, align 4, !dbg !3412
  %2568 = load i32, i32* %min_x, align 4, !dbg !3412
  %2569 = load i16*, i16** %xs, align 8, !dbg !3412
  %2570 = load i32, i32* %i4005, align 4, !dbg !3412
  %idxprom4171 = sext i32 %2570 to i64, !dbg !3412
  %arrayidx4172 = getelementptr inbounds i16, i16* %2569, i64 %idxprom4171, !dbg !3412
  %2571 = load i16, i16* %arrayidx4172, align 2, !dbg !3412
  %conv4173 = sext i16 %2571 to i32, !dbg !3412
  %add4174 = add nsw i32 %2568, %conv4173, !dbg !3412
  store i32 %add4174, i32* %bmx, align 4, !dbg !3412
  %2572 = load i32, i32* %my4000, align 4, !dbg !3412
  store i32 %2572, i32* %bmy, align 4, !dbg !3412
  br label %if.end4175, !dbg !3412

if.end4175:                                       ; preds = %if.then4170, %for.body4139
  br label %for.inc4176, !dbg !3409

for.inc4176:                                      ; preds = %if.end4175
  %2573 = load i32, i32* %i4005, align 4, !dbg !3414
  %inc4177 = add nsw i32 %2573, 1, !dbg !3414
  store i32 %inc4177, i32* %i4005, align 4, !dbg !3414
  br label %for.cond4136, !dbg !3415, !llvm.loop !3416

for.end4178:                                      ; preds = %for.cond4136
  br label %for.inc4179, !dbg !3418

for.inc4179:                                      ; preds = %for.end4178, %if.then4013
  %2574 = load i32, i32* %my4000, align 4, !dbg !3419
  %inc4180 = add nsw i32 %2574, 1, !dbg !3419
  store i32 %inc4180, i32* %my4000, align 4, !dbg !3419
  br label %for.cond4001, !dbg !3420, !llvm.loop !3421

for.end4181:                                      ; preds = %for.cond4001
  br label %if.end4182

if.end4182:                                       ; preds = %for.end4181, %for.end3998
  br label %sw.epilog, !dbg !3423

sw.epilog:                                        ; preds = %if.end267, %if.end4182, %if.end3552, %if.then2303, %if.then1639, %if.end1032, %do.end
  %2575 = load i32, i32* %bpred_cost, align 4, !dbg !3424
  %2576 = load i32, i32* %bcost, align 4, !dbg !3426
  %cmp4183 = icmp slt i32 %2575, %2576, !dbg !3427
  br i1 %cmp4183, label %if.then4185, label %if.else4193, !dbg !3428

if.then4185:                                      ; preds = %sw.epilog
  %2577 = load i32, i32* %bpred_mx, align 4, !dbg !3429
  %conv4186 = trunc i32 %2577 to i16, !dbg !3429
  %2578 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3431
  %mv4187 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2578, i32 0, i32 13, !dbg !3432
  %arrayidx4188 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4187, i64 0, i64 0, !dbg !3431
  store i16 %conv4186, i16* %arrayidx4188, align 4, !dbg !3433
  %2579 = load i32, i32* %bpred_my, align 4, !dbg !3434
  %conv4189 = trunc i32 %2579 to i16, !dbg !3434
  %2580 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3435
  %mv4190 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2580, i32 0, i32 13, !dbg !3436
  %arrayidx4191 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4190, i64 0, i64 1, !dbg !3435
  store i16 %conv4189, i16* %arrayidx4191, align 2, !dbg !3437
  %2581 = load i32, i32* %bpred_cost, align 4, !dbg !3438
  %2582 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3439
  %cost4192 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2582, i32 0, i32 12, !dbg !3440
  store i32 %2581, i32* %cost4192, align 8, !dbg !3441
  br label %if.end4203, !dbg !3442

if.else4193:                                      ; preds = %sw.epilog
  %2583 = load i32, i32* %bmx, align 4, !dbg !3443
  %shl4194 = shl i32 %2583, 2, !dbg !3445
  %conv4195 = trunc i32 %shl4194 to i16, !dbg !3443
  %2584 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3446
  %mv4196 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2584, i32 0, i32 13, !dbg !3447
  %arrayidx4197 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4196, i64 0, i64 0, !dbg !3446
  store i16 %conv4195, i16* %arrayidx4197, align 4, !dbg !3448
  %2585 = load i32, i32* %bmy, align 4, !dbg !3449
  %shl4198 = shl i32 %2585, 2, !dbg !3450
  %conv4199 = trunc i32 %shl4198 to i16, !dbg !3449
  %2586 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3451
  %mv4200 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2586, i32 0, i32 13, !dbg !3452
  %arrayidx4201 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4200, i64 0, i64 1, !dbg !3451
  store i16 %conv4199, i16* %arrayidx4201, align 2, !dbg !3453
  %2587 = load i32, i32* %bcost, align 4, !dbg !3454
  %2588 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3455
  %cost4202 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2588, i32 0, i32 12, !dbg !3456
  store i32 %2587, i32* %cost4202, align 8, !dbg !3457
  br label %if.end4203

if.end4203:                                       ; preds = %if.else4193, %if.then4185
  %2589 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3458
  %2590 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3459
  %mv4204 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2590, i32 0, i32 13, !dbg !3460
  %arrayidx4205 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4204, i64 0, i64 0, !dbg !3459
  %2591 = load i16, i16* %arrayidx4205, align 4, !dbg !3459
  %idxprom4206 = sext i16 %2591 to i64, !dbg !3458
  %arrayidx4207 = getelementptr inbounds i16, i16* %2589, i64 %idxprom4206, !dbg !3458
  %2592 = load i16, i16* %arrayidx4207, align 2, !dbg !3458
  %conv4208 = zext i16 %2592 to i32, !dbg !3458
  %2593 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3461
  %2594 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3462
  %mv4209 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2594, i32 0, i32 13, !dbg !3463
  %arrayidx4210 = getelementptr inbounds [2 x i16], [2 x i16]* %mv4209, i64 0, i64 1, !dbg !3462
  %2595 = load i16, i16* %arrayidx4210, align 2, !dbg !3462
  %idxprom4211 = sext i16 %2595 to i64, !dbg !3461
  %arrayidx4212 = getelementptr inbounds i16, i16* %2593, i64 %idxprom4211, !dbg !3461
  %2596 = load i16, i16* %arrayidx4212, align 2, !dbg !3461
  %conv4213 = zext i16 %2596 to i32, !dbg !3461
  %add4214 = add nsw i32 %conv4208, %conv4213, !dbg !3464
  %2597 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3465
  %cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2597, i32 0, i32 11, !dbg !3466
  store i32 %add4214, i32* %cost_mv, align 4, !dbg !3467
  %2598 = load i32, i32* %bmx, align 4, !dbg !3468
  %2599 = load i32, i32* %pmx, align 4, !dbg !3470
  %cmp4215 = icmp eq i32 %2598, %2599, !dbg !3471
  br i1 %cmp4215, label %land.lhs.true4217, label %if.end4229, !dbg !3472

land.lhs.true4217:                                ; preds = %if.end4203
  %2600 = load i32, i32* %bmy, align 4, !dbg !3473
  %2601 = load i32, i32* %pmy, align 4, !dbg !3474
  %cmp4218 = icmp eq i32 %2600, %2601, !dbg !3475
  br i1 %cmp4218, label %land.lhs.true4220, label %if.end4229, !dbg !3476

land.lhs.true4220:                                ; preds = %land.lhs.true4217
  %2602 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3477
  %mb4221 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2602, i32 0, i32 55, !dbg !3478
  %i_subpel_refine4222 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb4221, i32 0, i32 10, !dbg !3479
  %2603 = load i32, i32* %i_subpel_refine4222, align 8, !dbg !3479
  %cmp4223 = icmp slt i32 %2603, 3, !dbg !3480
  br i1 %cmp4223, label %if.then4225, label %if.end4229, !dbg !3481

if.then4225:                                      ; preds = %land.lhs.true4220
  %2604 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3482
  %cost_mv4226 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2604, i32 0, i32 11, !dbg !3483
  %2605 = load i32, i32* %cost_mv4226, align 4, !dbg !3483
  %2606 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3484
  %cost4227 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %2606, i32 0, i32 12, !dbg !3485
  %2607 = load i32, i32* %cost4227, align 8, !dbg !3486
  %add4228 = add nsw i32 %2607, %2605, !dbg !3486
  store i32 %add4228, i32* %cost4227, align 8, !dbg !3486
  br label %if.end4229, !dbg !3484

if.end4229:                                       ; preds = %if.then4225, %land.lhs.true4220, %land.lhs.true4217, %if.end4203
  %2608 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3487
  %mb4230 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2608, i32 0, i32 55, !dbg !3489
  %i_subpel_refine4231 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb4230, i32 0, i32 10, !dbg !3490
  %2609 = load i32, i32* %i_subpel_refine4231, align 8, !dbg !3490
  %cmp4232 = icmp sge i32 %2609, 2, !dbg !3491
  br i1 %cmp4232, label %if.then4234, label %if.end4247, !dbg !3492

if.then4234:                                      ; preds = %if.end4229
  call void @llvm.dbg.declare(metadata i32* %hpel, metadata !3493, metadata !DIExpression()), !dbg !3495
  %2610 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3496
  %mb4235 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2610, i32 0, i32 55, !dbg !3497
  %i_subpel_refine4236 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb4235, i32 0, i32 10, !dbg !3498
  %2611 = load i32, i32* %i_subpel_refine4236, align 8, !dbg !3498
  %idxprom4237 = sext i32 %2611 to i64, !dbg !3499
  %arrayidx4238 = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom4237, !dbg !3499
  %arrayidx4239 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4238, i64 0, i64 2, !dbg !3499
  %2612 = load i8, i8* %arrayidx4239, align 2, !dbg !3499
  %conv4240 = zext i8 %2612 to i32, !dbg !3499
  store i32 %conv4240, i32* %hpel, align 4, !dbg !3495
  call void @llvm.dbg.declare(metadata i32* %qpel, metadata !3500, metadata !DIExpression()), !dbg !3501
  %2613 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3502
  %mb4241 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2613, i32 0, i32 55, !dbg !3503
  %i_subpel_refine4242 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb4241, i32 0, i32 10, !dbg !3504
  %2614 = load i32, i32* %i_subpel_refine4242, align 8, !dbg !3504
  %idxprom4243 = sext i32 %2614 to i64, !dbg !3505
  %arrayidx4244 = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom4243, !dbg !3505
  %arrayidx4245 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx4244, i64 0, i64 3, !dbg !3505
  %2615 = load i8, i8* %arrayidx4245, align 1, !dbg !3505
  %conv4246 = zext i8 %2615 to i32, !dbg !3505
  store i32 %conv4246, i32* %qpel, align 4, !dbg !3501
  %2616 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3506
  %2617 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3507
  %2618 = load i32, i32* %hpel, align 4, !dbg !3508
  %2619 = load i32, i32* %qpel, align 4, !dbg !3509
  %2620 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !3510
  call void @refine_subpel(%struct.x264_t* %2616, %struct.x264_me_t* %2617, i32 %2618, i32 %2619, i32* %2620, i32 0), !dbg !3511
  br label %if.end4247, !dbg !3512

if.end4247:                                       ; preds = %if.then4234, %if.end4229
  ret void, !dbg !3513
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @x264_clip3(i32 %v, i32 %i_min, i32 %i_max) #0 !dbg !3514 {
entry:
  %v.addr = alloca i32, align 4
  %i_min.addr = alloca i32, align 4
  %i_max.addr = alloca i32, align 4
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !3517, metadata !DIExpression()), !dbg !3518
  store i32 %i_min, i32* %i_min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_min.addr, metadata !3519, metadata !DIExpression()), !dbg !3520
  store i32 %i_max, i32* %i_max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_max.addr, metadata !3521, metadata !DIExpression()), !dbg !3522
  %0 = load i32, i32* %v.addr, align 4, !dbg !3523
  %1 = load i32, i32* %i_min.addr, align 4, !dbg !3524
  %cmp = icmp slt i32 %0, %1, !dbg !3525
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3526

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %i_min.addr, align 4, !dbg !3527
  br label %cond.end4, !dbg !3526

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %v.addr, align 4, !dbg !3528
  %4 = load i32, i32* %i_max.addr, align 4, !dbg !3529
  %cmp1 = icmp sgt i32 %3, %4, !dbg !3530
  br i1 %cmp1, label %cond.true2, label %cond.false3, !dbg !3531

cond.true2:                                       ; preds = %cond.false
  %5 = load i32, i32* %i_max.addr, align 4, !dbg !3532
  br label %cond.end, !dbg !3531

cond.false3:                                      ; preds = %cond.false
  %6 = load i32, i32* %v.addr, align 4, !dbg !3533
  br label %cond.end, !dbg !3531

cond.end:                                         ; preds = %cond.false3, %cond.true2
  %cond = phi i32 [ %5, %cond.true2 ], [ %6, %cond.false3 ], !dbg !3531
  br label %cond.end4, !dbg !3526

cond.end4:                                        ; preds = %cond.end, %cond.true
  %cond5 = phi i32 [ %2, %cond.true ], [ %cond, %cond.end ], !dbg !3526
  ret i32 %cond5, !dbg !3534
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pack16to32_mask(i32 %a, i32 %b) #0 !dbg !3535 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !3538, metadata !DIExpression()), !dbg !3539
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !3540, metadata !DIExpression()), !dbg !3541
  %0 = load i32, i32* %a.addr, align 4, !dbg !3542
  %and = and i32 %0, 65535, !dbg !3543
  %1 = load i32, i32* %b.addr, align 4, !dbg !3544
  %shl = shl i32 %1, 16, !dbg !3545
  %add = add nsw i32 %and, %shl, !dbg !3546
  ret i32 %add, !dbg !3547
}

; Function Attrs: noinline nounwind uwtable
define internal void @x264_predictor_roundclip([2 x i16]* %dst, [2 x i16]* %mvc, i32 %i_mvc, i32 %mv_x_min, i32 %mv_x_max, i32 %mv_y_min, i32 %mv_y_max) #0 !dbg !3548 {
entry:
  %dst.addr = alloca [2 x i16]*, align 8
  %mvc.addr = alloca [2 x i16]*, align 8
  %i_mvc.addr = alloca i32, align 4
  %mv_x_min.addr = alloca i32, align 4
  %mv_x_max.addr = alloca i32, align 4
  %mv_y_min.addr = alloca i32, align 4
  %mv_y_max.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %mx = alloca i32, align 4
  %my = alloca i32, align 4
  store [2 x i16]* %dst, [2 x i16]** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x i16]** %dst.addr, metadata !3551, metadata !DIExpression()), !dbg !3552
  store [2 x i16]* %mvc, [2 x i16]** %mvc.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x i16]** %mvc.addr, metadata !3553, metadata !DIExpression()), !dbg !3554
  store i32 %i_mvc, i32* %i_mvc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_mvc.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  store i32 %mv_x_min, i32* %mv_x_min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mv_x_min.addr, metadata !3557, metadata !DIExpression()), !dbg !3558
  store i32 %mv_x_max, i32* %mv_x_max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mv_x_max.addr, metadata !3559, metadata !DIExpression()), !dbg !3560
  store i32 %mv_y_min, i32* %mv_y_min.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mv_y_min.addr, metadata !3561, metadata !DIExpression()), !dbg !3562
  store i32 %mv_y_max, i32* %mv_y_max.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mv_y_max.addr, metadata !3563, metadata !DIExpression()), !dbg !3564
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3565, metadata !DIExpression()), !dbg !3567
  store i32 0, i32* %i, align 4, !dbg !3567
  br label %for.cond, !dbg !3568

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3569
  %1 = load i32, i32* %i_mvc.addr, align 4, !dbg !3571
  %cmp = icmp slt i32 %0, %1, !dbg !3572
  br i1 %cmp, label %for.body, label %for.end, !dbg !3573

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %mx, metadata !3574, metadata !DIExpression()), !dbg !3576
  %2 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3577
  %3 = load i32, i32* %i, align 4, !dbg !3578
  %idxprom = sext i32 %3 to i64, !dbg !3577
  %arrayidx = getelementptr inbounds [2 x i16], [2 x i16]* %2, i64 %idxprom, !dbg !3577
  %arrayidx1 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx, i64 0, i64 0, !dbg !3577
  %4 = load i16, i16* %arrayidx1, align 2, !dbg !3577
  %conv = sext i16 %4 to i32, !dbg !3577
  %add = add nsw i32 %conv, 2, !dbg !3579
  %shr = ashr i32 %add, 2, !dbg !3580
  store i32 %shr, i32* %mx, align 4, !dbg !3576
  call void @llvm.dbg.declare(metadata i32* %my, metadata !3581, metadata !DIExpression()), !dbg !3582
  %5 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3583
  %6 = load i32, i32* %i, align 4, !dbg !3584
  %idxprom2 = sext i32 %6 to i64, !dbg !3583
  %arrayidx3 = getelementptr inbounds [2 x i16], [2 x i16]* %5, i64 %idxprom2, !dbg !3583
  %arrayidx4 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx3, i64 0, i64 1, !dbg !3583
  %7 = load i16, i16* %arrayidx4, align 2, !dbg !3583
  %conv5 = sext i16 %7 to i32, !dbg !3583
  %add6 = add nsw i32 %conv5, 2, !dbg !3585
  %shr7 = ashr i32 %add6, 2, !dbg !3586
  store i32 %shr7, i32* %my, align 4, !dbg !3582
  %8 = load i32, i32* %mx, align 4, !dbg !3587
  %9 = load i32, i32* %mv_x_min.addr, align 4, !dbg !3588
  %10 = load i32, i32* %mv_x_max.addr, align 4, !dbg !3589
  %call = call i32 @x264_clip3(i32 %8, i32 %9, i32 %10), !dbg !3590
  %conv8 = trunc i32 %call to i16, !dbg !3590
  %11 = load [2 x i16]*, [2 x i16]** %dst.addr, align 8, !dbg !3591
  %12 = load i32, i32* %i, align 4, !dbg !3592
  %idxprom9 = sext i32 %12 to i64, !dbg !3591
  %arrayidx10 = getelementptr inbounds [2 x i16], [2 x i16]* %11, i64 %idxprom9, !dbg !3591
  %arrayidx11 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx10, i64 0, i64 0, !dbg !3591
  store i16 %conv8, i16* %arrayidx11, align 2, !dbg !3593
  %13 = load i32, i32* %my, align 4, !dbg !3594
  %14 = load i32, i32* %mv_y_min.addr, align 4, !dbg !3595
  %15 = load i32, i32* %mv_y_max.addr, align 4, !dbg !3596
  %call12 = call i32 @x264_clip3(i32 %13, i32 %14, i32 %15), !dbg !3597
  %conv13 = trunc i32 %call12 to i16, !dbg !3597
  %16 = load [2 x i16]*, [2 x i16]** %dst.addr, align 8, !dbg !3598
  %17 = load i32, i32* %i, align 4, !dbg !3599
  %idxprom14 = sext i32 %17 to i64, !dbg !3598
  %arrayidx15 = getelementptr inbounds [2 x i16], [2 x i16]* %16, i64 %idxprom14, !dbg !3598
  %arrayidx16 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx15, i64 0, i64 1, !dbg !3598
  store i16 %conv13, i16* %arrayidx16, align 2, !dbg !3600
  br label %for.inc, !dbg !3601

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !3602
  %inc = add nsw i32 %18, 1, !dbg !3602
  store i32 %inc, i32* %i, align 4, !dbg !3602
  br label %for.cond, !dbg !3603, !llvm.loop !3604

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3606
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @x264_predictor_difference([2 x i16]* %mvc, i64 %i_mvc) #0 !dbg !3607 {
entry:
  %mvc.addr = alloca [2 x i16]*, align 8
  %i_mvc.addr = alloca i64, align 8
  %sum = alloca i32, align 4
  %i = alloca i32, align 4
  store [2 x i16]* %mvc, [2 x i16]** %mvc.addr, align 8
  call void @llvm.dbg.declare(metadata [2 x i16]** %mvc.addr, metadata !3610, metadata !DIExpression()), !dbg !3611
  store i64 %i_mvc, i64* %i_mvc.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i_mvc.addr, metadata !3612, metadata !DIExpression()), !dbg !3613
  call void @llvm.dbg.declare(metadata i32* %sum, metadata !3614, metadata !DIExpression()), !dbg !3615
  store i32 0, i32* %sum, align 4, !dbg !3615
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3616, metadata !DIExpression()), !dbg !3618
  store i32 0, i32* %i, align 4, !dbg !3618
  br label %for.cond, !dbg !3619

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !3620
  %conv = sext i32 %0 to i64, !dbg !3620
  %1 = load i64, i64* %i_mvc.addr, align 8, !dbg !3622
  %sub = sub nsw i64 %1, 1, !dbg !3623
  %cmp = icmp slt i64 %conv, %sub, !dbg !3624
  br i1 %cmp, label %for.body, label %for.end, !dbg !3625

for.body:                                         ; preds = %for.cond
  %2 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3626
  %3 = load i32, i32* %i, align 4, !dbg !3628
  %idxprom = sext i32 %3 to i64, !dbg !3626
  %arrayidx = getelementptr inbounds [2 x i16], [2 x i16]* %2, i64 %idxprom, !dbg !3626
  %arrayidx2 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx, i64 0, i64 0, !dbg !3626
  %4 = load i16, i16* %arrayidx2, align 2, !dbg !3626
  %conv3 = sext i16 %4 to i32, !dbg !3626
  %5 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3629
  %6 = load i32, i32* %i, align 4, !dbg !3630
  %add = add nsw i32 %6, 1, !dbg !3631
  %idxprom4 = sext i32 %add to i64, !dbg !3629
  %arrayidx5 = getelementptr inbounds [2 x i16], [2 x i16]* %5, i64 %idxprom4, !dbg !3629
  %arrayidx6 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx5, i64 0, i64 0, !dbg !3629
  %7 = load i16, i16* %arrayidx6, align 2, !dbg !3629
  %conv7 = sext i16 %7 to i32, !dbg !3629
  %sub8 = sub nsw i32 %conv3, %conv7, !dbg !3632
  %call = call i32 @abs(i32 %sub8) #4, !dbg !3633
  %8 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3634
  %9 = load i32, i32* %i, align 4, !dbg !3635
  %idxprom9 = sext i32 %9 to i64, !dbg !3634
  %arrayidx10 = getelementptr inbounds [2 x i16], [2 x i16]* %8, i64 %idxprom9, !dbg !3634
  %arrayidx11 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx10, i64 0, i64 1, !dbg !3634
  %10 = load i16, i16* %arrayidx11, align 2, !dbg !3634
  %conv12 = sext i16 %10 to i32, !dbg !3634
  %11 = load [2 x i16]*, [2 x i16]** %mvc.addr, align 8, !dbg !3636
  %12 = load i32, i32* %i, align 4, !dbg !3637
  %add13 = add nsw i32 %12, 1, !dbg !3638
  %idxprom14 = sext i32 %add13 to i64, !dbg !3636
  %arrayidx15 = getelementptr inbounds [2 x i16], [2 x i16]* %11, i64 %idxprom14, !dbg !3636
  %arrayidx16 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx15, i64 0, i64 1, !dbg !3636
  %13 = load i16, i16* %arrayidx16, align 2, !dbg !3636
  %conv17 = sext i16 %13 to i32, !dbg !3636
  %sub18 = sub nsw i32 %conv12, %conv17, !dbg !3639
  %call19 = call i32 @abs(i32 %sub18) #4, !dbg !3640
  %add20 = add nsw i32 %call, %call19, !dbg !3641
  %14 = load i32, i32* %sum, align 4, !dbg !3642
  %add21 = add nsw i32 %14, %add20, !dbg !3642
  store i32 %add21, i32* %sum, align 4, !dbg !3642
  br label %for.inc, !dbg !3643

for.inc:                                          ; preds = %for.body
  %15 = load i32, i32* %i, align 4, !dbg !3644
  %inc = add nsw i32 %15, 1, !dbg !3644
  store i32 %inc, i32* %i, align 4, !dbg !3644
  br label %for.cond, !dbg !3645, !llvm.loop !3646

for.end:                                          ; preds = %for.cond
  %16 = load i32, i32* %sum, align 4, !dbg !3648
  ret i32 %16, !dbg !3649
}

; Function Attrs: noinline nounwind uwtable
define internal void @refine_subpel(%struct.x264_t* %h, %struct.x264_me_t* %m, i32 %hpel_iters, i32 %qpel_iters, i32* %p_halfpel_thresh, i32 %b_refine_qpel) #0 !dbg !3650 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m.addr = alloca %struct.x264_me_t*, align 8
  %hpel_iters.addr = alloca i32, align 4
  %qpel_iters.addr = alloca i32, align 4
  %p_halfpel_thresh.addr = alloca i32*, align 8
  %b_refine_qpel.addr = alloca i32, align 4
  %bw = alloca i32, align 4
  %bh = alloca i32, align 4
  %p_cost_mvx = alloca i16*, align 8
  %p_cost_mvy = alloca i16*, align 8
  %i_pixel13 = alloca i32, align 4
  %b_chroma_me = alloca i32, align 4
  %mvy_offset = alloca i32, align 4
  %pix = alloca [1152 x i8], align 16
  %bmx = alloca i32, align 4
  %bmy = alloca i32, align 4
  %bcost = alloca i32, align 4
  %odir = alloca i32, align 4
  %bdir = alloca i32, align 4
  %mx = alloca i32, align 4
  %my = alloca i32, align 4
  %stride = alloca i32, align 4
  %src = alloca i8*, align 8
  %cost58 = alloca i32, align 4
  %i = alloca i32, align 4
  %omx = alloca i32, align 4
  %omy = alloca i32, align 4
  %costs = alloca [4 x i32], align 16
  %stride78 = alloca i32, align 4
  %src0 = alloca i8*, align 8
  %src1 = alloca i8*, align 8
  %src2 = alloca i8*, align 8
  %src3 = alloca i8*, align 8
  %stride237 = alloca i32, align 4
  %src238 = alloca i8*, align 8
  %cost249 = alloca i32, align 4
  %i387 = alloca i32, align 4
  %omx417 = alloca i32, align 4
  %omy418 = alloca i32, align 4
  %stride424 = alloca i32, align 4
  %src425 = alloca i8*, align 8
  %cost437 = alloca i32, align 4
  %stride563 = alloca i32, align 4
  %src564 = alloca i8*, align 8
  %cost576 = alloca i32, align 4
  %stride702 = alloca i32, align 4
  %src703 = alloca i8*, align 8
  %cost715 = alloca i32, align 4
  %stride841 = alloca i32, align 4
  %src842 = alloca i8*, align 8
  %cost854 = alloca i32, align 4
  %costs1011 = alloca [4 x i32], align 16
  %omx1012 = alloca i32, align 4
  %omy1013 = alloca i32, align 4
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !3653, metadata !DIExpression()), !dbg !3654
  store %struct.x264_me_t* %m, %struct.x264_me_t** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m.addr, metadata !3655, metadata !DIExpression()), !dbg !3656
  store i32 %hpel_iters, i32* %hpel_iters.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %hpel_iters.addr, metadata !3657, metadata !DIExpression()), !dbg !3658
  store i32 %qpel_iters, i32* %qpel_iters.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %qpel_iters.addr, metadata !3659, metadata !DIExpression()), !dbg !3660
  store i32* %p_halfpel_thresh, i32** %p_halfpel_thresh.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %p_halfpel_thresh.addr, metadata !3661, metadata !DIExpression()), !dbg !3662
  store i32 %b_refine_qpel, i32* %b_refine_qpel.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b_refine_qpel.addr, metadata !3663, metadata !DIExpression()), !dbg !3664
  call void @llvm.dbg.declare(metadata i32* %bw, metadata !3665, metadata !DIExpression()), !dbg !3666
  %0 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3667
  %i_pixel = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %0, i32 0, i32 0, !dbg !3668
  %1 = load i32, i32* %i_pixel, align 16, !dbg !3668
  %idxprom = sext i32 %1 to i64, !dbg !3669
  %arrayidx = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom, !dbg !3669
  %w = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx, i32 0, i32 0, !dbg !3670
  %2 = load i32, i32* %w, align 8, !dbg !3670
  store i32 %2, i32* %bw, align 4, !dbg !3666
  call void @llvm.dbg.declare(metadata i32* %bh, metadata !3671, metadata !DIExpression()), !dbg !3672
  %3 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3673
  %i_pixel1 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %3, i32 0, i32 0, !dbg !3674
  %4 = load i32, i32* %i_pixel1, align 16, !dbg !3674
  %idxprom2 = sext i32 %4 to i64, !dbg !3675
  %arrayidx3 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom2, !dbg !3675
  %h4 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx3, i32 0, i32 1, !dbg !3676
  %5 = load i32, i32* %h4, align 4, !dbg !3676
  store i32 %5, i32* %bh, align 4, !dbg !3672
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvx, metadata !3677, metadata !DIExpression()), !dbg !3678
  %6 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3679
  %p_cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %6, i32 0, i32 1, !dbg !3680
  %7 = load i16*, i16** %p_cost_mv, align 8, !dbg !3680
  %8 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3681
  %mvp = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %8, i32 0, i32 10, !dbg !3682
  %arrayidx5 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp, i64 0, i64 0, !dbg !3681
  %9 = load i16, i16* %arrayidx5, align 16, !dbg !3681
  %conv = sext i16 %9 to i32, !dbg !3681
  %idx.ext = sext i32 %conv to i64, !dbg !3683
  %idx.neg = sub i64 0, %idx.ext, !dbg !3683
  %add.ptr = getelementptr inbounds i16, i16* %7, i64 %idx.neg, !dbg !3683
  store i16* %add.ptr, i16** %p_cost_mvx, align 8, !dbg !3678
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvy, metadata !3684, metadata !DIExpression()), !dbg !3685
  %10 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3686
  %p_cost_mv6 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %10, i32 0, i32 1, !dbg !3687
  %11 = load i16*, i16** %p_cost_mv6, align 8, !dbg !3687
  %12 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3688
  %mvp7 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %12, i32 0, i32 10, !dbg !3689
  %arrayidx8 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp7, i64 0, i64 1, !dbg !3688
  %13 = load i16, i16* %arrayidx8, align 2, !dbg !3688
  %conv9 = sext i16 %13 to i32, !dbg !3688
  %idx.ext10 = sext i32 %conv9 to i64, !dbg !3690
  %idx.neg11 = sub i64 0, %idx.ext10, !dbg !3690
  %add.ptr12 = getelementptr inbounds i16, i16* %11, i64 %idx.neg11, !dbg !3690
  store i16* %add.ptr12, i16** %p_cost_mvy, align 8, !dbg !3685
  call void @llvm.dbg.declare(metadata i32* %i_pixel13, metadata !3691, metadata !DIExpression()), !dbg !3692
  %14 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3693
  %i_pixel14 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %14, i32 0, i32 0, !dbg !3694
  %15 = load i32, i32* %i_pixel14, align 16, !dbg !3694
  store i32 %15, i32* %i_pixel13, align 4, !dbg !3692
  call void @llvm.dbg.declare(metadata i32* %b_chroma_me, metadata !3695, metadata !DIExpression()), !dbg !3696
  %16 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3697
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %16, i32 0, i32 55, !dbg !3698
  %b_chroma_me15 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 11, !dbg !3699
  %17 = load i32, i32* %b_chroma_me15, align 4, !dbg !3699
  %tobool = icmp ne i32 %17, 0, !dbg !3697
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3700

land.rhs:                                         ; preds = %entry
  %18 = load i32, i32* %i_pixel13, align 4, !dbg !3701
  %cmp = icmp sle i32 %18, 3, !dbg !3702
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %19 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3703
  %land.ext = zext i1 %19 to i32, !dbg !3700
  store i32 %land.ext, i32* %b_chroma_me, align 4, !dbg !3696
  call void @llvm.dbg.declare(metadata i32* %mvy_offset, metadata !3704, metadata !DIExpression()), !dbg !3705
  %20 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3706
  %mb17 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %20, i32 0, i32 55, !dbg !3707
  %b_interlaced = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb17, i32 0, i32 17, !dbg !3708
  %21 = load i32, i32* %b_interlaced, align 4, !dbg !3708
  %22 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3709
  %i_ref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %22, i32 0, i32 3, !dbg !3710
  %23 = load i32, i32* %i_ref, align 4, !dbg !3710
  %and = and i32 %21, %23, !dbg !3711
  %tobool18 = icmp ne i32 %and, 0, !dbg !3711
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !3706

cond.true:                                        ; preds = %land.end
  %24 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3712
  %mb19 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %24, i32 0, i32 55, !dbg !3713
  %i_mb_y = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb19, i32 0, i32 5, !dbg !3714
  %25 = load i32, i32* %i_mb_y, align 4, !dbg !3714
  %and20 = and i32 %25, 1, !dbg !3715
  %mul = mul nsw i32 %and20, 4, !dbg !3716
  %sub = sub nsw i32 %mul, 2, !dbg !3717
  br label %cond.end, !dbg !3706

cond.false:                                       ; preds = %land.end
  br label %cond.end, !dbg !3706

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !3706
  store i32 %cond, i32* %mvy_offset, align 4, !dbg !3705
  call void @llvm.dbg.declare(metadata [1152 x i8]* %pix, metadata !3718, metadata !DIExpression()), !dbg !3722
  call void @llvm.dbg.declare(metadata i32* %bmx, metadata !3723, metadata !DIExpression()), !dbg !3724
  %26 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3725
  %mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %26, i32 0, i32 13, !dbg !3726
  %arrayidx21 = getelementptr inbounds [2 x i16], [2 x i16]* %mv, i64 0, i64 0, !dbg !3725
  %27 = load i16, i16* %arrayidx21, align 4, !dbg !3725
  %conv22 = sext i16 %27 to i32, !dbg !3725
  store i32 %conv22, i32* %bmx, align 4, !dbg !3724
  call void @llvm.dbg.declare(metadata i32* %bmy, metadata !3727, metadata !DIExpression()), !dbg !3728
  %28 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3729
  %mv23 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %28, i32 0, i32 13, !dbg !3730
  %arrayidx24 = getelementptr inbounds [2 x i16], [2 x i16]* %mv23, i64 0, i64 1, !dbg !3729
  %29 = load i16, i16* %arrayidx24, align 2, !dbg !3729
  %conv25 = sext i16 %29 to i32, !dbg !3729
  store i32 %conv25, i32* %bmy, align 4, !dbg !3728
  call void @llvm.dbg.declare(metadata i32* %bcost, metadata !3731, metadata !DIExpression()), !dbg !3732
  %30 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3733
  %cost = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %30, i32 0, i32 12, !dbg !3734
  %31 = load i32, i32* %cost, align 8, !dbg !3734
  store i32 %31, i32* %bcost, align 4, !dbg !3732
  call void @llvm.dbg.declare(metadata i32* %odir, metadata !3735, metadata !DIExpression()), !dbg !3736
  store i32 -1, i32* %odir, align 4, !dbg !3736
  call void @llvm.dbg.declare(metadata i32* %bdir, metadata !3737, metadata !DIExpression()), !dbg !3738
  %32 = load i32, i32* %hpel_iters.addr, align 4, !dbg !3739
  %tobool26 = icmp ne i32 %32, 0, !dbg !3739
  br i1 %tobool26, label %land.lhs.true, label %if.end75, !dbg !3741

land.lhs.true:                                    ; preds = %cond.end
  %33 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3742
  %mb27 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %33, i32 0, i32 55, !dbg !3743
  %i_subpel_refine = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb27, i32 0, i32 10, !dbg !3744
  %34 = load i32, i32* %i_subpel_refine, align 8, !dbg !3744
  %cmp28 = icmp slt i32 %34, 3, !dbg !3745
  br i1 %cmp28, label %if.then, label %if.end75, !dbg !3746

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %mx, metadata !3747, metadata !DIExpression()), !dbg !3749
  %35 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3750
  %mvp30 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %35, i32 0, i32 10, !dbg !3751
  %arrayidx31 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp30, i64 0, i64 0, !dbg !3750
  %36 = load i16, i16* %arrayidx31, align 16, !dbg !3750
  %conv32 = sext i16 %36 to i32, !dbg !3750
  %37 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3752
  %mb33 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %37, i32 0, i32 55, !dbg !3753
  %mv_min_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb33, i32 0, i32 20, !dbg !3754
  %arrayidx34 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel, i64 0, i64 0, !dbg !3752
  %38 = load i32, i32* %arrayidx34, align 8, !dbg !3752
  %add = add nsw i32 %38, 2, !dbg !3755
  %39 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3756
  %mb35 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %39, i32 0, i32 55, !dbg !3757
  %mv_max_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb35, i32 0, i32 21, !dbg !3758
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel, i64 0, i64 0, !dbg !3756
  %40 = load i32, i32* %arrayidx36, align 16, !dbg !3756
  %sub37 = sub nsw i32 %40, 2, !dbg !3759
  %call = call i32 @x264_clip3(i32 %conv32, i32 %add, i32 %sub37), !dbg !3760
  store i32 %call, i32* %mx, align 4, !dbg !3749
  call void @llvm.dbg.declare(metadata i32* %my, metadata !3761, metadata !DIExpression()), !dbg !3762
  %41 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3763
  %mvp38 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %41, i32 0, i32 10, !dbg !3764
  %arrayidx39 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp38, i64 0, i64 1, !dbg !3763
  %42 = load i16, i16* %arrayidx39, align 2, !dbg !3763
  %conv40 = sext i16 %42 to i32, !dbg !3763
  %43 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3765
  %mb41 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %43, i32 0, i32 55, !dbg !3766
  %mv_min_spel42 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb41, i32 0, i32 20, !dbg !3767
  %arrayidx43 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel42, i64 0, i64 1, !dbg !3765
  %44 = load i32, i32* %arrayidx43, align 4, !dbg !3765
  %add44 = add nsw i32 %44, 2, !dbg !3768
  %45 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3769
  %mb45 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %45, i32 0, i32 55, !dbg !3770
  %mv_max_spel46 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb45, i32 0, i32 21, !dbg !3771
  %arrayidx47 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel46, i64 0, i64 1, !dbg !3769
  %46 = load i32, i32* %arrayidx47, align 4, !dbg !3769
  %sub48 = sub nsw i32 %46, 2, !dbg !3772
  %call49 = call i32 @x264_clip3(i32 %conv40, i32 %add44, i32 %sub48), !dbg !3773
  store i32 %call49, i32* %my, align 4, !dbg !3762
  %47 = load i32, i32* %mx, align 4, !dbg !3774
  %48 = load i32, i32* %bmx, align 4, !dbg !3776
  %sub50 = sub nsw i32 %47, %48, !dbg !3777
  %49 = load i32, i32* %my, align 4, !dbg !3778
  %50 = load i32, i32* %bmy, align 4, !dbg !3779
  %sub51 = sub nsw i32 %49, %50, !dbg !3780
  %or = or i32 %sub50, %sub51, !dbg !3781
  %tobool52 = icmp ne i32 %or, 0, !dbg !3781
  br i1 %tobool52, label %if.then53, label %if.end74, !dbg !3782

if.then53:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %stride, metadata !3783, metadata !DIExpression()), !dbg !3785
  store i32 16, i32* %stride, align 4, !dbg !3785
  call void @llvm.dbg.declare(metadata i8** %src, metadata !3786, metadata !DIExpression()), !dbg !3785
  %51 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3785
  %mc = getelementptr inbounds %struct.x264_t, %struct.x264_t* %51, i32 0, i32 70, !dbg !3785
  %get_ref = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc, i32 0, i32 1, !dbg !3785
  %52 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref, align 8, !dbg !3785
  %arraydecay = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3785
  %53 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3785
  %p_fref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %53, i32 0, i32 5, !dbg !3785
  %arraydecay54 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref, i64 0, i64 0, !dbg !3785
  %54 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3785
  %i_stride = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %54, i32 0, i32 9, !dbg !3785
  %arrayidx55 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride, i64 0, i64 0, !dbg !3785
  %55 = load i32, i32* %arrayidx55, align 8, !dbg !3785
  %56 = load i32, i32* %mx, align 4, !dbg !3785
  %57 = load i32, i32* %my, align 4, !dbg !3785
  %58 = load i32, i32* %bw, align 4, !dbg !3785
  %59 = load i32, i32* %bh, align 4, !dbg !3785
  %60 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3785
  %weight = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %60, i32 0, i32 4, !dbg !3785
  %61 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight, align 8, !dbg !3785
  %arrayidx56 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %61, i64 0, !dbg !3785
  %call57 = call i8* %52(i8* %arraydecay, i32* %stride, i8** %arraydecay54, i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, %struct.x264_weight_t* %arrayidx56), !dbg !3785
  store i8* %call57, i8** %src, align 8, !dbg !3785
  call void @llvm.dbg.declare(metadata i32* %cost58, metadata !3787, metadata !DIExpression()), !dbg !3785
  %62 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3785
  %pixf = getelementptr inbounds %struct.x264_t, %struct.x264_t* %62, i32 0, i32 69, !dbg !3785
  %fpelcmp = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf, i32 0, i32 7, !dbg !3785
  %63 = load i32, i32* %i_pixel13, align 4, !dbg !3785
  %idxprom59 = sext i32 %63 to i64, !dbg !3785
  %arrayidx60 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp, i64 0, i64 %idxprom59, !dbg !3785
  %64 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx60, align 8, !dbg !3785
  %65 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3785
  %p_fenc = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %65, i32 0, i32 7, !dbg !3785
  %arrayidx61 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc, i64 0, i64 0, !dbg !3785
  %66 = load i8*, i8** %arrayidx61, align 8, !dbg !3785
  %67 = load i8*, i8** %src, align 8, !dbg !3785
  %68 = load i32, i32* %stride, align 4, !dbg !3785
  %call62 = call i32 %64(i8* %66, i32 16, i8* %67, i32 %68), !dbg !3785
  %69 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3785
  %70 = load i32, i32* %mx, align 4, !dbg !3785
  %idxprom63 = sext i32 %70 to i64, !dbg !3785
  %arrayidx64 = getelementptr inbounds i16, i16* %69, i64 %idxprom63, !dbg !3785
  %71 = load i16, i16* %arrayidx64, align 2, !dbg !3785
  %conv65 = zext i16 %71 to i32, !dbg !3785
  %add66 = add nsw i32 %call62, %conv65, !dbg !3785
  %72 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3785
  %73 = load i32, i32* %my, align 4, !dbg !3785
  %idxprom67 = sext i32 %73 to i64, !dbg !3785
  %arrayidx68 = getelementptr inbounds i16, i16* %72, i64 %idxprom67, !dbg !3785
  %74 = load i16, i16* %arrayidx68, align 2, !dbg !3785
  %conv69 = zext i16 %74 to i32, !dbg !3785
  %add70 = add nsw i32 %add66, %conv69, !dbg !3785
  store i32 %add70, i32* %cost58, align 4, !dbg !3785
  %75 = load i32, i32* %cost58, align 4, !dbg !3788
  %76 = load i32, i32* %bcost, align 4, !dbg !3788
  %cmp71 = icmp slt i32 %75, %76, !dbg !3788
  br i1 %cmp71, label %if.then73, label %if.end, !dbg !3785

if.then73:                                        ; preds = %if.then53
  %77 = load i32, i32* %cost58, align 4, !dbg !3790
  store i32 %77, i32* %bcost, align 4, !dbg !3790
  %78 = load i32, i32* %mx, align 4, !dbg !3790
  store i32 %78, i32* %bmx, align 4, !dbg !3790
  %79 = load i32, i32* %my, align 4, !dbg !3790
  store i32 %79, i32* %bmy, align 4, !dbg !3790
  br label %if.end, !dbg !3790

if.end:                                           ; preds = %if.then73, %if.then53
  br label %if.end74, !dbg !3785

if.end74:                                         ; preds = %if.end, %if.then
  br label %if.end75, !dbg !3792

if.end75:                                         ; preds = %if.end74, %land.lhs.true, %cond.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3793, metadata !DIExpression()), !dbg !3795
  %80 = load i32, i32* %hpel_iters.addr, align 4, !dbg !3796
  store i32 %80, i32* %i, align 4, !dbg !3795
  br label %for.cond, !dbg !3797

for.cond:                                         ; preds = %for.inc, %if.end75
  %81 = load i32, i32* %i, align 4, !dbg !3798
  %cmp76 = icmp sgt i32 %81, 0, !dbg !3800
  br i1 %cmp76, label %for.body, label %for.end, !dbg !3801

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %omx, metadata !3802, metadata !DIExpression()), !dbg !3804
  %82 = load i32, i32* %bmx, align 4, !dbg !3805
  store i32 %82, i32* %omx, align 4, !dbg !3804
  call void @llvm.dbg.declare(metadata i32* %omy, metadata !3806, metadata !DIExpression()), !dbg !3807
  %83 = load i32, i32* %bmy, align 4, !dbg !3808
  store i32 %83, i32* %omy, align 4, !dbg !3807
  call void @llvm.dbg.declare(metadata [4 x i32]* %costs, metadata !3809, metadata !DIExpression()), !dbg !3810
  call void @llvm.dbg.declare(metadata i32* %stride78, metadata !3811, metadata !DIExpression()), !dbg !3812
  store i32 64, i32* %stride78, align 4, !dbg !3812
  call void @llvm.dbg.declare(metadata i8** %src0, metadata !3813, metadata !DIExpression()), !dbg !3814
  call void @llvm.dbg.declare(metadata i8** %src1, metadata !3815, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.declare(metadata i8** %src2, metadata !3817, metadata !DIExpression()), !dbg !3818
  call void @llvm.dbg.declare(metadata i8** %src3, metadata !3819, metadata !DIExpression()), !dbg !3820
  %84 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3821
  %mc79 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %84, i32 0, i32 70, !dbg !3822
  %get_ref80 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc79, i32 0, i32 1, !dbg !3823
  %85 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref80, align 8, !dbg !3823
  %arraydecay81 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3824
  %86 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3825
  %p_fref82 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %86, i32 0, i32 5, !dbg !3826
  %arraydecay83 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref82, i64 0, i64 0, !dbg !3825
  %87 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3827
  %i_stride84 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %87, i32 0, i32 9, !dbg !3828
  %arrayidx85 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride84, i64 0, i64 0, !dbg !3827
  %88 = load i32, i32* %arrayidx85, align 8, !dbg !3827
  %89 = load i32, i32* %omx, align 4, !dbg !3829
  %90 = load i32, i32* %omy, align 4, !dbg !3830
  %sub86 = sub nsw i32 %90, 2, !dbg !3831
  %91 = load i32, i32* %bw, align 4, !dbg !3832
  %92 = load i32, i32* %bh, align 4, !dbg !3833
  %add87 = add nsw i32 %92, 1, !dbg !3834
  %93 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3835
  %weight88 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %93, i32 0, i32 4, !dbg !3836
  %94 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight88, align 8, !dbg !3836
  %arrayidx89 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %94, i64 0, !dbg !3835
  %call90 = call i8* %85(i8* %arraydecay81, i32* %stride78, i8** %arraydecay83, i32 %88, i32 %89, i32 %sub86, i32 %91, i32 %add87, %struct.x264_weight_t* %arrayidx89), !dbg !3821
  store i8* %call90, i8** %src0, align 8, !dbg !3837
  %95 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3838
  %mc91 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %95, i32 0, i32 70, !dbg !3839
  %get_ref92 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc91, i32 0, i32 1, !dbg !3840
  %96 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref92, align 8, !dbg !3840
  %arraydecay93 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3841
  %add.ptr94 = getelementptr inbounds i8, i8* %arraydecay93, i64 32, !dbg !3842
  %97 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3843
  %p_fref95 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %97, i32 0, i32 5, !dbg !3844
  %arraydecay96 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref95, i64 0, i64 0, !dbg !3843
  %98 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3845
  %i_stride97 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %98, i32 0, i32 9, !dbg !3846
  %arrayidx98 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride97, i64 0, i64 0, !dbg !3845
  %99 = load i32, i32* %arrayidx98, align 8, !dbg !3845
  %100 = load i32, i32* %omx, align 4, !dbg !3847
  %sub99 = sub nsw i32 %100, 2, !dbg !3848
  %101 = load i32, i32* %omy, align 4, !dbg !3849
  %102 = load i32, i32* %bw, align 4, !dbg !3850
  %add100 = add nsw i32 %102, 4, !dbg !3851
  %103 = load i32, i32* %bh, align 4, !dbg !3852
  %104 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3853
  %weight101 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %104, i32 0, i32 4, !dbg !3854
  %105 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight101, align 8, !dbg !3854
  %arrayidx102 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %105, i64 0, !dbg !3853
  %call103 = call i8* %96(i8* %add.ptr94, i32* %stride78, i8** %arraydecay96, i32 %99, i32 %sub99, i32 %101, i32 %add100, i32 %103, %struct.x264_weight_t* %arrayidx102), !dbg !3838
  store i8* %call103, i8** %src2, align 8, !dbg !3855
  %106 = load i8*, i8** %src0, align 8, !dbg !3856
  %107 = load i32, i32* %stride78, align 4, !dbg !3857
  %idx.ext104 = sext i32 %107 to i64, !dbg !3858
  %add.ptr105 = getelementptr inbounds i8, i8* %106, i64 %idx.ext104, !dbg !3858
  store i8* %add.ptr105, i8** %src1, align 8, !dbg !3859
  %108 = load i8*, i8** %src2, align 8, !dbg !3860
  %add.ptr106 = getelementptr inbounds i8, i8* %108, i64 1, !dbg !3861
  store i8* %add.ptr106, i8** %src3, align 8, !dbg !3862
  %109 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3863
  %pixf107 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %109, i32 0, i32 69, !dbg !3864
  %fpelcmp_x4 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf107, i32 0, i32 9, !dbg !3865
  %110 = load i32, i32* %i_pixel13, align 4, !dbg !3866
  %idxprom108 = sext i32 %110 to i64, !dbg !3863
  %arrayidx109 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x4, i64 0, i64 %idxprom108, !dbg !3863
  %111 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx109, align 8, !dbg !3863
  %112 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3867
  %p_fenc110 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %112, i32 0, i32 7, !dbg !3868
  %arrayidx111 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc110, i64 0, i64 0, !dbg !3867
  %113 = load i8*, i8** %arrayidx111, align 8, !dbg !3867
  %114 = load i8*, i8** %src0, align 8, !dbg !3869
  %115 = load i8*, i8** %src1, align 8, !dbg !3870
  %116 = load i8*, i8** %src2, align 8, !dbg !3871
  %117 = load i8*, i8** %src3, align 8, !dbg !3872
  %118 = load i32, i32* %stride78, align 4, !dbg !3873
  %arraydecay112 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 0, !dbg !3874
  call void %111(i8* %113, i8* %114, i8* %115, i8* %116, i8* %117, i32 %118, i32* %arraydecay112), !dbg !3863
  %arrayidx113 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 0, !dbg !3875
  %119 = load i32, i32* %arrayidx113, align 16, !dbg !3875
  %120 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3875
  %121 = load i32, i32* %omx, align 4, !dbg !3875
  %idxprom114 = sext i32 %121 to i64, !dbg !3875
  %arrayidx115 = getelementptr inbounds i16, i16* %120, i64 %idxprom114, !dbg !3875
  %122 = load i16, i16* %arrayidx115, align 2, !dbg !3875
  %conv116 = zext i16 %122 to i32, !dbg !3875
  %add117 = add nsw i32 %119, %conv116, !dbg !3875
  %123 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3875
  %124 = load i32, i32* %omy, align 4, !dbg !3875
  %sub118 = sub nsw i32 %124, 2, !dbg !3875
  %idxprom119 = sext i32 %sub118 to i64, !dbg !3875
  %arrayidx120 = getelementptr inbounds i16, i16* %123, i64 %idxprom119, !dbg !3875
  %125 = load i16, i16* %arrayidx120, align 2, !dbg !3875
  %conv121 = zext i16 %125 to i32, !dbg !3875
  %add122 = add nsw i32 %add117, %conv121, !dbg !3875
  %126 = load i32, i32* %bcost, align 4, !dbg !3875
  %cmp123 = icmp slt i32 %add122, %126, !dbg !3875
  br i1 %cmp123, label %if.then125, label %if.end137, !dbg !3877

if.then125:                                       ; preds = %for.body
  %arrayidx126 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 0, !dbg !3878
  %127 = load i32, i32* %arrayidx126, align 16, !dbg !3878
  %128 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3878
  %129 = load i32, i32* %omx, align 4, !dbg !3878
  %idxprom127 = sext i32 %129 to i64, !dbg !3878
  %arrayidx128 = getelementptr inbounds i16, i16* %128, i64 %idxprom127, !dbg !3878
  %130 = load i16, i16* %arrayidx128, align 2, !dbg !3878
  %conv129 = zext i16 %130 to i32, !dbg !3878
  %add130 = add nsw i32 %127, %conv129, !dbg !3878
  %131 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3878
  %132 = load i32, i32* %omy, align 4, !dbg !3878
  %sub131 = sub nsw i32 %132, 2, !dbg !3878
  %idxprom132 = sext i32 %sub131 to i64, !dbg !3878
  %arrayidx133 = getelementptr inbounds i16, i16* %131, i64 %idxprom132, !dbg !3878
  %133 = load i16, i16* %arrayidx133, align 2, !dbg !3878
  %conv134 = zext i16 %133 to i32, !dbg !3878
  %add135 = add nsw i32 %add130, %conv134, !dbg !3878
  store i32 %add135, i32* %bcost, align 4, !dbg !3878
  %134 = load i32, i32* %omy, align 4, !dbg !3878
  %sub136 = sub nsw i32 %134, 2, !dbg !3878
  store i32 %sub136, i32* %bmy, align 4, !dbg !3878
  br label %if.end137, !dbg !3878

if.end137:                                        ; preds = %if.then125, %for.body
  %arrayidx138 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 1, !dbg !3880
  %135 = load i32, i32* %arrayidx138, align 4, !dbg !3880
  %136 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3880
  %137 = load i32, i32* %omx, align 4, !dbg !3880
  %idxprom139 = sext i32 %137 to i64, !dbg !3880
  %arrayidx140 = getelementptr inbounds i16, i16* %136, i64 %idxprom139, !dbg !3880
  %138 = load i16, i16* %arrayidx140, align 2, !dbg !3880
  %conv141 = zext i16 %138 to i32, !dbg !3880
  %add142 = add nsw i32 %135, %conv141, !dbg !3880
  %139 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3880
  %140 = load i32, i32* %omy, align 4, !dbg !3880
  %add143 = add nsw i32 %140, 2, !dbg !3880
  %idxprom144 = sext i32 %add143 to i64, !dbg !3880
  %arrayidx145 = getelementptr inbounds i16, i16* %139, i64 %idxprom144, !dbg !3880
  %141 = load i16, i16* %arrayidx145, align 2, !dbg !3880
  %conv146 = zext i16 %141 to i32, !dbg !3880
  %add147 = add nsw i32 %add142, %conv146, !dbg !3880
  %142 = load i32, i32* %bcost, align 4, !dbg !3880
  %cmp148 = icmp slt i32 %add147, %142, !dbg !3880
  br i1 %cmp148, label %if.then150, label %if.end162, !dbg !3882

if.then150:                                       ; preds = %if.end137
  %arrayidx151 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 1, !dbg !3883
  %143 = load i32, i32* %arrayidx151, align 4, !dbg !3883
  %144 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3883
  %145 = load i32, i32* %omx, align 4, !dbg !3883
  %idxprom152 = sext i32 %145 to i64, !dbg !3883
  %arrayidx153 = getelementptr inbounds i16, i16* %144, i64 %idxprom152, !dbg !3883
  %146 = load i16, i16* %arrayidx153, align 2, !dbg !3883
  %conv154 = zext i16 %146 to i32, !dbg !3883
  %add155 = add nsw i32 %143, %conv154, !dbg !3883
  %147 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3883
  %148 = load i32, i32* %omy, align 4, !dbg !3883
  %add156 = add nsw i32 %148, 2, !dbg !3883
  %idxprom157 = sext i32 %add156 to i64, !dbg !3883
  %arrayidx158 = getelementptr inbounds i16, i16* %147, i64 %idxprom157, !dbg !3883
  %149 = load i16, i16* %arrayidx158, align 2, !dbg !3883
  %conv159 = zext i16 %149 to i32, !dbg !3883
  %add160 = add nsw i32 %add155, %conv159, !dbg !3883
  store i32 %add160, i32* %bcost, align 4, !dbg !3883
  %150 = load i32, i32* %omy, align 4, !dbg !3883
  %add161 = add nsw i32 %150, 2, !dbg !3883
  store i32 %add161, i32* %bmy, align 4, !dbg !3883
  br label %if.end162, !dbg !3883

if.end162:                                        ; preds = %if.then150, %if.end137
  %arrayidx163 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 2, !dbg !3885
  %151 = load i32, i32* %arrayidx163, align 8, !dbg !3885
  %152 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3885
  %153 = load i32, i32* %omx, align 4, !dbg !3885
  %sub164 = sub nsw i32 %153, 2, !dbg !3885
  %idxprom165 = sext i32 %sub164 to i64, !dbg !3885
  %arrayidx166 = getelementptr inbounds i16, i16* %152, i64 %idxprom165, !dbg !3885
  %154 = load i16, i16* %arrayidx166, align 2, !dbg !3885
  %conv167 = zext i16 %154 to i32, !dbg !3885
  %add168 = add nsw i32 %151, %conv167, !dbg !3885
  %155 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3885
  %156 = load i32, i32* %omy, align 4, !dbg !3885
  %idxprom169 = sext i32 %156 to i64, !dbg !3885
  %arrayidx170 = getelementptr inbounds i16, i16* %155, i64 %idxprom169, !dbg !3885
  %157 = load i16, i16* %arrayidx170, align 2, !dbg !3885
  %conv171 = zext i16 %157 to i32, !dbg !3885
  %add172 = add nsw i32 %add168, %conv171, !dbg !3885
  %158 = load i32, i32* %bcost, align 4, !dbg !3885
  %cmp173 = icmp slt i32 %add172, %158, !dbg !3885
  br i1 %cmp173, label %if.then175, label %if.end187, !dbg !3887

if.then175:                                       ; preds = %if.end162
  %arrayidx176 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 2, !dbg !3888
  %159 = load i32, i32* %arrayidx176, align 8, !dbg !3888
  %160 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3888
  %161 = load i32, i32* %omx, align 4, !dbg !3888
  %sub177 = sub nsw i32 %161, 2, !dbg !3888
  %idxprom178 = sext i32 %sub177 to i64, !dbg !3888
  %arrayidx179 = getelementptr inbounds i16, i16* %160, i64 %idxprom178, !dbg !3888
  %162 = load i16, i16* %arrayidx179, align 2, !dbg !3888
  %conv180 = zext i16 %162 to i32, !dbg !3888
  %add181 = add nsw i32 %159, %conv180, !dbg !3888
  %163 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3888
  %164 = load i32, i32* %omy, align 4, !dbg !3888
  %idxprom182 = sext i32 %164 to i64, !dbg !3888
  %arrayidx183 = getelementptr inbounds i16, i16* %163, i64 %idxprom182, !dbg !3888
  %165 = load i16, i16* %arrayidx183, align 2, !dbg !3888
  %conv184 = zext i16 %165 to i32, !dbg !3888
  %add185 = add nsw i32 %add181, %conv184, !dbg !3888
  store i32 %add185, i32* %bcost, align 4, !dbg !3888
  %166 = load i32, i32* %omx, align 4, !dbg !3888
  %sub186 = sub nsw i32 %166, 2, !dbg !3888
  store i32 %sub186, i32* %bmx, align 4, !dbg !3888
  %167 = load i32, i32* %omy, align 4, !dbg !3888
  store i32 %167, i32* %bmy, align 4, !dbg !3888
  br label %if.end187, !dbg !3888

if.end187:                                        ; preds = %if.then175, %if.end162
  %arrayidx188 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 3, !dbg !3890
  %168 = load i32, i32* %arrayidx188, align 4, !dbg !3890
  %169 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3890
  %170 = load i32, i32* %omx, align 4, !dbg !3890
  %add189 = add nsw i32 %170, 2, !dbg !3890
  %idxprom190 = sext i32 %add189 to i64, !dbg !3890
  %arrayidx191 = getelementptr inbounds i16, i16* %169, i64 %idxprom190, !dbg !3890
  %171 = load i16, i16* %arrayidx191, align 2, !dbg !3890
  %conv192 = zext i16 %171 to i32, !dbg !3890
  %add193 = add nsw i32 %168, %conv192, !dbg !3890
  %172 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3890
  %173 = load i32, i32* %omy, align 4, !dbg !3890
  %idxprom194 = sext i32 %173 to i64, !dbg !3890
  %arrayidx195 = getelementptr inbounds i16, i16* %172, i64 %idxprom194, !dbg !3890
  %174 = load i16, i16* %arrayidx195, align 2, !dbg !3890
  %conv196 = zext i16 %174 to i32, !dbg !3890
  %add197 = add nsw i32 %add193, %conv196, !dbg !3890
  %175 = load i32, i32* %bcost, align 4, !dbg !3890
  %cmp198 = icmp slt i32 %add197, %175, !dbg !3890
  br i1 %cmp198, label %if.then200, label %if.end212, !dbg !3892

if.then200:                                       ; preds = %if.end187
  %arrayidx201 = getelementptr inbounds [4 x i32], [4 x i32]* %costs, i64 0, i64 3, !dbg !3893
  %176 = load i32, i32* %arrayidx201, align 4, !dbg !3893
  %177 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3893
  %178 = load i32, i32* %omx, align 4, !dbg !3893
  %add202 = add nsw i32 %178, 2, !dbg !3893
  %idxprom203 = sext i32 %add202 to i64, !dbg !3893
  %arrayidx204 = getelementptr inbounds i16, i16* %177, i64 %idxprom203, !dbg !3893
  %179 = load i16, i16* %arrayidx204, align 2, !dbg !3893
  %conv205 = zext i16 %179 to i32, !dbg !3893
  %add206 = add nsw i32 %176, %conv205, !dbg !3893
  %180 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3893
  %181 = load i32, i32* %omy, align 4, !dbg !3893
  %idxprom207 = sext i32 %181 to i64, !dbg !3893
  %arrayidx208 = getelementptr inbounds i16, i16* %180, i64 %idxprom207, !dbg !3893
  %182 = load i16, i16* %arrayidx208, align 2, !dbg !3893
  %conv209 = zext i16 %182 to i32, !dbg !3893
  %add210 = add nsw i32 %add206, %conv209, !dbg !3893
  store i32 %add210, i32* %bcost, align 4, !dbg !3893
  %183 = load i32, i32* %omx, align 4, !dbg !3893
  %add211 = add nsw i32 %183, 2, !dbg !3893
  store i32 %add211, i32* %bmx, align 4, !dbg !3893
  %184 = load i32, i32* %omy, align 4, !dbg !3893
  store i32 %184, i32* %bmy, align 4, !dbg !3893
  br label %if.end212, !dbg !3893

if.end212:                                        ; preds = %if.then200, %if.end187
  %185 = load i32, i32* %bmx, align 4, !dbg !3895
  %186 = load i32, i32* %omx, align 4, !dbg !3897
  %cmp213 = icmp eq i32 %185, %186, !dbg !3898
  %conv214 = zext i1 %cmp213 to i32, !dbg !3898
  %187 = load i32, i32* %bmy, align 4, !dbg !3899
  %188 = load i32, i32* %omy, align 4, !dbg !3900
  %cmp215 = icmp eq i32 %187, %188, !dbg !3901
  %conv216 = zext i1 %cmp215 to i32, !dbg !3901
  %and217 = and i32 %conv214, %conv216, !dbg !3902
  %tobool218 = icmp ne i32 %and217, 0, !dbg !3902
  br i1 %tobool218, label %if.then219, label %if.end220, !dbg !3903

if.then219:                                       ; preds = %if.end212
  br label %for.end, !dbg !3904

if.end220:                                        ; preds = %if.end212
  br label %for.inc, !dbg !3905

for.inc:                                          ; preds = %if.end220
  %189 = load i32, i32* %i, align 4, !dbg !3906
  %dec = add nsw i32 %189, -1, !dbg !3906
  store i32 %dec, i32* %i, align 4, !dbg !3906
  br label %for.cond, !dbg !3907, !llvm.loop !3908

for.end:                                          ; preds = %if.then219, %for.cond
  %190 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !3910
  %tobool221 = icmp ne i32 %190, 0, !dbg !3910
  br i1 %tobool221, label %if.end361, label %land.lhs.true222, !dbg !3912

land.lhs.true222:                                 ; preds = %for.end
  %191 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3913
  %pixf223 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %191, i32 0, i32 69, !dbg !3914
  %mbcmp_unaligned = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf223, i32 0, i32 6, !dbg !3915
  %arrayidx224 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned, i64 0, i64 0, !dbg !3913
  %192 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx224, align 8, !dbg !3913
  %193 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3916
  %pixf225 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %193, i32 0, i32 69, !dbg !3917
  %fpelcmp226 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf225, i32 0, i32 7, !dbg !3918
  %arrayidx227 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %fpelcmp226, i64 0, i64 0, !dbg !3916
  %194 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx227, align 8, !dbg !3916
  %cmp228 = icmp ne i32 (i8*, i32, i8*, i32)* %192, %194, !dbg !3919
  br i1 %cmp228, label %if.then231, label %lor.lhs.false, !dbg !3920

lor.lhs.false:                                    ; preds = %land.lhs.true222
  %195 = load i32, i32* %b_chroma_me, align 4, !dbg !3921
  %tobool230 = icmp ne i32 %195, 0, !dbg !3921
  br i1 %tobool230, label %if.then231, label %if.end361, !dbg !3922

if.then231:                                       ; preds = %lor.lhs.false, %land.lhs.true222
  store i32 268435456, i32* %bcost, align 4, !dbg !3923
  %196 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !3925
  %tobool232 = icmp ne i32 %196, 0, !dbg !3925
  br i1 %tobool232, label %if.then236, label %lor.lhs.false233, !dbg !3925

lor.lhs.false233:                                 ; preds = %if.then231
  %197 = load i32, i32* %odir, align 4, !dbg !3925
  %cmp234 = icmp ne i32 -2, %197, !dbg !3925
  br i1 %cmp234, label %if.then236, label %if.end360, !dbg !3927

if.then236:                                       ; preds = %lor.lhs.false233, %if.then231
  call void @llvm.dbg.declare(metadata i32* %stride237, metadata !3928, metadata !DIExpression()), !dbg !3930
  store i32 16, i32* %stride237, align 4, !dbg !3930
  call void @llvm.dbg.declare(metadata i8** %src238, metadata !3931, metadata !DIExpression()), !dbg !3930
  %198 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3930
  %mc239 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %198, i32 0, i32 70, !dbg !3930
  %get_ref240 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc239, i32 0, i32 1, !dbg !3930
  %199 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref240, align 8, !dbg !3930
  %arraydecay241 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3930
  %200 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3930
  %p_fref242 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %200, i32 0, i32 5, !dbg !3930
  %arraydecay243 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref242, i64 0, i64 0, !dbg !3930
  %201 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3930
  %i_stride244 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %201, i32 0, i32 9, !dbg !3930
  %arrayidx245 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride244, i64 0, i64 0, !dbg !3930
  %202 = load i32, i32* %arrayidx245, align 8, !dbg !3930
  %203 = load i32, i32* %bmx, align 4, !dbg !3930
  %204 = load i32, i32* %bmy, align 4, !dbg !3930
  %205 = load i32, i32* %bw, align 4, !dbg !3930
  %206 = load i32, i32* %bh, align 4, !dbg !3930
  %207 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3930
  %weight246 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %207, i32 0, i32 4, !dbg !3930
  %208 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight246, align 8, !dbg !3930
  %arrayidx247 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %208, i64 0, !dbg !3930
  %call248 = call i8* %199(i8* %arraydecay241, i32* %stride237, i8** %arraydecay243, i32 %202, i32 %203, i32 %204, i32 %205, i32 %206, %struct.x264_weight_t* %arrayidx247), !dbg !3930
  store i8* %call248, i8** %src238, align 8, !dbg !3930
  call void @llvm.dbg.declare(metadata i32* %cost249, metadata !3932, metadata !DIExpression()), !dbg !3930
  %209 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3930
  %pixf250 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %209, i32 0, i32 69, !dbg !3930
  %mbcmp_unaligned251 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf250, i32 0, i32 6, !dbg !3930
  %210 = load i32, i32* %i_pixel13, align 4, !dbg !3930
  %idxprom252 = sext i32 %210 to i64, !dbg !3930
  %arrayidx253 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned251, i64 0, i64 %idxprom252, !dbg !3930
  %211 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx253, align 8, !dbg !3930
  %212 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3930
  %p_fenc254 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %212, i32 0, i32 7, !dbg !3930
  %arrayidx255 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc254, i64 0, i64 0, !dbg !3930
  %213 = load i8*, i8** %arrayidx255, align 8, !dbg !3930
  %214 = load i8*, i8** %src238, align 8, !dbg !3930
  %215 = load i32, i32* %stride237, align 4, !dbg !3930
  %call256 = call i32 %211(i8* %213, i32 16, i8* %214, i32 %215), !dbg !3930
  %216 = load i16*, i16** %p_cost_mvx, align 8, !dbg !3930
  %217 = load i32, i32* %bmx, align 4, !dbg !3930
  %idxprom257 = sext i32 %217 to i64, !dbg !3930
  %arrayidx258 = getelementptr inbounds i16, i16* %216, i64 %idxprom257, !dbg !3930
  %218 = load i16, i16* %arrayidx258, align 2, !dbg !3930
  %conv259 = zext i16 %218 to i32, !dbg !3930
  %add260 = add nsw i32 %call256, %conv259, !dbg !3930
  %219 = load i16*, i16** %p_cost_mvy, align 8, !dbg !3930
  %220 = load i32, i32* %bmy, align 4, !dbg !3930
  %idxprom261 = sext i32 %220 to i64, !dbg !3930
  %arrayidx262 = getelementptr inbounds i16, i16* %219, i64 %idxprom261, !dbg !3930
  %221 = load i16, i16* %arrayidx262, align 2, !dbg !3930
  %conv263 = zext i16 %221 to i32, !dbg !3930
  %add264 = add nsw i32 %add260, %conv263, !dbg !3930
  store i32 %add264, i32* %cost249, align 4, !dbg !3930
  %222 = load i32, i32* %b_chroma_me, align 4, !dbg !3933
  %tobool265 = icmp ne i32 %222, 0, !dbg !3933
  br i1 %tobool265, label %land.lhs.true266, label %if.end355, !dbg !3933

land.lhs.true266:                                 ; preds = %if.then236
  %223 = load i32, i32* %cost249, align 4, !dbg !3933
  %224 = load i32, i32* %bcost, align 4, !dbg !3933
  %cmp267 = icmp slt i32 %223, %224, !dbg !3933
  br i1 %cmp267, label %if.then269, label %if.end355, !dbg !3930

if.then269:                                       ; preds = %land.lhs.true266
  %225 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3935
  %mc270 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %225, i32 0, i32 70, !dbg !3935
  %mc_chroma = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc270, i32 0, i32 2, !dbg !3935
  %226 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma, align 8, !dbg !3935
  %arraydecay271 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3935
  %227 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3935
  %p_fref272 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %227, i32 0, i32 5, !dbg !3935
  %arrayidx273 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref272, i64 0, i64 4, !dbg !3935
  %228 = load i8*, i8** %arrayidx273, align 16, !dbg !3935
  %229 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3935
  %i_stride274 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %229, i32 0, i32 9, !dbg !3935
  %arrayidx275 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride274, i64 0, i64 1, !dbg !3935
  %230 = load i32, i32* %arrayidx275, align 4, !dbg !3935
  %231 = load i32, i32* %bmx, align 4, !dbg !3935
  %232 = load i32, i32* %bmy, align 4, !dbg !3935
  %233 = load i32, i32* %mvy_offset, align 4, !dbg !3935
  %add276 = add nsw i32 %232, %233, !dbg !3935
  %234 = load i32, i32* %bw, align 4, !dbg !3935
  %div = sdiv i32 %234, 2, !dbg !3935
  %235 = load i32, i32* %bh, align 4, !dbg !3935
  %div277 = sdiv i32 %235, 2, !dbg !3935
  call void %226(i8* %arraydecay271, i32 8, i8* %228, i32 %230, i32 %231, i32 %add276, i32 %div, i32 %div277), !dbg !3935
  %236 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3937
  %weight278 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %236, i32 0, i32 4, !dbg !3937
  %237 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight278, align 8, !dbg !3937
  %arrayidx279 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %237, i64 1, !dbg !3937
  %weightfn = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx279, i32 0, i32 5, !dbg !3937
  %238 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn, align 16, !dbg !3937
  %tobool280 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %238, null, !dbg !3937
  br i1 %tobool280, label %if.then281, label %if.end298, !dbg !3935

if.then281:                                       ; preds = %if.then269
  %239 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3937
  %weight282 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %239, i32 0, i32 4, !dbg !3937
  %240 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight282, align 8, !dbg !3937
  %arrayidx283 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %240, i64 1, !dbg !3937
  %weightfn284 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx283, i32 0, i32 5, !dbg !3937
  %241 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn284, align 16, !dbg !3937
  %242 = load i32, i32* %i_pixel13, align 4, !dbg !3937
  %idxprom285 = sext i32 %242 to i64, !dbg !3937
  %arrayidx286 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom285, !dbg !3937
  %w287 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx286, i32 0, i32 0, !dbg !3937
  %243 = load i32, i32* %w287, align 8, !dbg !3937
  %shr = ashr i32 %243, 3, !dbg !3937
  %idxprom288 = sext i32 %shr to i64, !dbg !3937
  %arrayidx289 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %241, i64 %idxprom288, !dbg !3937
  %244 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx289, align 8, !dbg !3937
  %arraydecay290 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3937
  %arraydecay291 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3937
  %245 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3937
  %weight292 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %245, i32 0, i32 4, !dbg !3937
  %246 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight292, align 8, !dbg !3937
  %arrayidx293 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %246, i64 1, !dbg !3937
  %247 = load i32, i32* %i_pixel13, align 4, !dbg !3937
  %idxprom294 = sext i32 %247 to i64, !dbg !3937
  %arrayidx295 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom294, !dbg !3937
  %h296 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx295, i32 0, i32 1, !dbg !3937
  %248 = load i32, i32* %h296, align 4, !dbg !3937
  %shr297 = ashr i32 %248, 1, !dbg !3937
  call void %244(i8* %arraydecay290, i32 8, i8* %arraydecay291, i32 8, %struct.x264_weight_t* %arrayidx293, i32 %shr297), !dbg !3937
  br label %if.end298, !dbg !3937

if.end298:                                        ; preds = %if.then281, %if.then269
  %249 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3935
  %pixf299 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %249, i32 0, i32 69, !dbg !3935
  %mbcmp = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf299, i32 0, i32 5, !dbg !3935
  %250 = load i32, i32* %i_pixel13, align 4, !dbg !3935
  %add300 = add nsw i32 %250, 3, !dbg !3935
  %idxprom301 = sext i32 %add300 to i64, !dbg !3935
  %arrayidx302 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp, i64 0, i64 %idxprom301, !dbg !3935
  %251 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx302, align 8, !dbg !3935
  %252 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3935
  %p_fenc303 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %252, i32 0, i32 7, !dbg !3935
  %arrayidx304 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc303, i64 0, i64 1, !dbg !3935
  %253 = load i8*, i8** %arrayidx304, align 8, !dbg !3935
  %arraydecay305 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3935
  %call306 = call i32 %251(i8* %253, i32 16, i8* %arraydecay305, i32 8), !dbg !3935
  %254 = load i32, i32* %cost249, align 4, !dbg !3935
  %add307 = add nsw i32 %254, %call306, !dbg !3935
  store i32 %add307, i32* %cost249, align 4, !dbg !3935
  %255 = load i32, i32* %cost249, align 4, !dbg !3939
  %256 = load i32, i32* %bcost, align 4, !dbg !3939
  %cmp308 = icmp slt i32 %255, %256, !dbg !3939
  br i1 %cmp308, label %if.then310, label %if.end354, !dbg !3935

if.then310:                                       ; preds = %if.end298
  %257 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3941
  %mc311 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %257, i32 0, i32 70, !dbg !3941
  %mc_chroma312 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc311, i32 0, i32 2, !dbg !3941
  %258 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma312, align 8, !dbg !3941
  %arraydecay313 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3941
  %259 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3941
  %p_fref314 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %259, i32 0, i32 5, !dbg !3941
  %arrayidx315 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref314, i64 0, i64 5, !dbg !3941
  %260 = load i8*, i8** %arrayidx315, align 8, !dbg !3941
  %261 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3941
  %i_stride316 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %261, i32 0, i32 9, !dbg !3941
  %arrayidx317 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride316, i64 0, i64 1, !dbg !3941
  %262 = load i32, i32* %arrayidx317, align 4, !dbg !3941
  %263 = load i32, i32* %bmx, align 4, !dbg !3941
  %264 = load i32, i32* %bmy, align 4, !dbg !3941
  %265 = load i32, i32* %mvy_offset, align 4, !dbg !3941
  %add318 = add nsw i32 %264, %265, !dbg !3941
  %266 = load i32, i32* %bw, align 4, !dbg !3941
  %div319 = sdiv i32 %266, 2, !dbg !3941
  %267 = load i32, i32* %bh, align 4, !dbg !3941
  %div320 = sdiv i32 %267, 2, !dbg !3941
  call void %258(i8* %arraydecay313, i32 8, i8* %260, i32 %262, i32 %263, i32 %add318, i32 %div319, i32 %div320), !dbg !3941
  %268 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3943
  %weight321 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %268, i32 0, i32 4, !dbg !3943
  %269 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight321, align 8, !dbg !3943
  %arrayidx322 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %269, i64 2, !dbg !3943
  %weightfn323 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx322, i32 0, i32 5, !dbg !3943
  %270 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn323, align 16, !dbg !3943
  %tobool324 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %270, null, !dbg !3943
  br i1 %tobool324, label %if.then325, label %if.end343, !dbg !3941

if.then325:                                       ; preds = %if.then310
  %271 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3943
  %weight326 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %271, i32 0, i32 4, !dbg !3943
  %272 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight326, align 8, !dbg !3943
  %arrayidx327 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %272, i64 2, !dbg !3943
  %weightfn328 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx327, i32 0, i32 5, !dbg !3943
  %273 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn328, align 16, !dbg !3943
  %274 = load i32, i32* %i_pixel13, align 4, !dbg !3943
  %idxprom329 = sext i32 %274 to i64, !dbg !3943
  %arrayidx330 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom329, !dbg !3943
  %w331 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx330, i32 0, i32 0, !dbg !3943
  %275 = load i32, i32* %w331, align 8, !dbg !3943
  %shr332 = ashr i32 %275, 3, !dbg !3943
  %idxprom333 = sext i32 %shr332 to i64, !dbg !3943
  %arrayidx334 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %273, i64 %idxprom333, !dbg !3943
  %276 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx334, align 8, !dbg !3943
  %arraydecay335 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3943
  %arraydecay336 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3943
  %277 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3943
  %weight337 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %277, i32 0, i32 4, !dbg !3943
  %278 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight337, align 8, !dbg !3943
  %arrayidx338 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %278, i64 2, !dbg !3943
  %279 = load i32, i32* %i_pixel13, align 4, !dbg !3943
  %idxprom339 = sext i32 %279 to i64, !dbg !3943
  %arrayidx340 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom339, !dbg !3943
  %h341 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx340, i32 0, i32 1, !dbg !3943
  %280 = load i32, i32* %h341, align 4, !dbg !3943
  %shr342 = ashr i32 %280, 1, !dbg !3943
  call void %276(i8* %arraydecay335, i32 8, i8* %arraydecay336, i32 8, %struct.x264_weight_t* %arrayidx338, i32 %shr342), !dbg !3943
  br label %if.end343, !dbg !3943

if.end343:                                        ; preds = %if.then325, %if.then310
  %281 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3941
  %pixf344 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %281, i32 0, i32 69, !dbg !3941
  %mbcmp345 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf344, i32 0, i32 5, !dbg !3941
  %282 = load i32, i32* %i_pixel13, align 4, !dbg !3941
  %add346 = add nsw i32 %282, 3, !dbg !3941
  %idxprom347 = sext i32 %add346 to i64, !dbg !3941
  %arrayidx348 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp345, i64 0, i64 %idxprom347, !dbg !3941
  %283 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx348, align 8, !dbg !3941
  %284 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3941
  %p_fenc349 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %284, i32 0, i32 7, !dbg !3941
  %arrayidx350 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc349, i64 0, i64 2, !dbg !3941
  %285 = load i8*, i8** %arrayidx350, align 8, !dbg !3941
  %arraydecay351 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !3941
  %call352 = call i32 %283(i8* %285, i32 16, i8* %arraydecay351, i32 8), !dbg !3941
  %286 = load i32, i32* %cost249, align 4, !dbg !3941
  %add353 = add nsw i32 %286, %call352, !dbg !3941
  store i32 %add353, i32* %cost249, align 4, !dbg !3941
  br label %if.end354, !dbg !3941

if.end354:                                        ; preds = %if.end343, %if.end298
  br label %if.end355, !dbg !3935

if.end355:                                        ; preds = %if.end354, %land.lhs.true266, %if.then236
  %287 = load i32, i32* %cost249, align 4, !dbg !3945
  %288 = load i32, i32* %bcost, align 4, !dbg !3945
  %cmp356 = icmp slt i32 %287, %288, !dbg !3945
  br i1 %cmp356, label %if.then358, label %if.end359, !dbg !3930

if.then358:                                       ; preds = %if.end355
  %289 = load i32, i32* %cost249, align 4, !dbg !3947
  store i32 %289, i32* %bcost, align 4, !dbg !3947
  %290 = load i32, i32* %bmx, align 4, !dbg !3947
  store i32 %290, i32* %bmx, align 4, !dbg !3947
  %291 = load i32, i32* %bmy, align 4, !dbg !3947
  store i32 %291, i32* %bmy, align 4, !dbg !3947
  store i32 -1, i32* %bdir, align 4, !dbg !3947
  br label %if.end359, !dbg !3947

if.end359:                                        ; preds = %if.then358, %if.end355
  br label %if.end360, !dbg !3930

if.end360:                                        ; preds = %if.end359, %lor.lhs.false233
  br label %if.end361, !dbg !3949

if.end361:                                        ; preds = %if.end360, %lor.lhs.false, %for.end
  %292 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !3950
  %tobool362 = icmp ne i32* %292, null, !dbg !3950
  br i1 %tobool362, label %if.then363, label %if.end381, !dbg !3952

if.then363:                                       ; preds = %if.end361
  %293 = load i32, i32* %bcost, align 4, !dbg !3953
  %mul364 = mul nsw i32 %293, 7, !dbg !3956
  %shr365 = ashr i32 %mul364, 3, !dbg !3957
  %294 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !3958
  %295 = load i32, i32* %294, align 4, !dbg !3959
  %cmp366 = icmp sgt i32 %shr365, %295, !dbg !3960
  br i1 %cmp366, label %if.then368, label %if.else, !dbg !3961

if.then368:                                       ; preds = %if.then363
  %296 = load i32, i32* %bcost, align 4, !dbg !3962
  %297 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3964
  %cost369 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %297, i32 0, i32 12, !dbg !3965
  store i32 %296, i32* %cost369, align 8, !dbg !3966
  %298 = load i32, i32* %bmx, align 4, !dbg !3967
  %conv370 = trunc i32 %298 to i16, !dbg !3967
  %299 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3968
  %mv371 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %299, i32 0, i32 13, !dbg !3969
  %arrayidx372 = getelementptr inbounds [2 x i16], [2 x i16]* %mv371, i64 0, i64 0, !dbg !3968
  store i16 %conv370, i16* %arrayidx372, align 4, !dbg !3970
  %300 = load i32, i32* %bmy, align 4, !dbg !3971
  %conv373 = trunc i32 %300 to i16, !dbg !3971
  %301 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !3972
  %mv374 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %301, i32 0, i32 13, !dbg !3973
  %arrayidx375 = getelementptr inbounds [2 x i16], [2 x i16]* %mv374, i64 0, i64 1, !dbg !3972
  store i16 %conv373, i16* %arrayidx375, align 2, !dbg !3974
  br label %return, !dbg !3975

if.else:                                          ; preds = %if.then363
  %302 = load i32, i32* %bcost, align 4, !dbg !3976
  %303 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !3978
  %304 = load i32, i32* %303, align 4, !dbg !3979
  %cmp376 = icmp slt i32 %302, %304, !dbg !3980
  br i1 %cmp376, label %if.then378, label %if.end379, !dbg !3981

if.then378:                                       ; preds = %if.else
  %305 = load i32, i32* %bcost, align 4, !dbg !3982
  %306 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !3983
  store i32 %305, i32* %306, align 4, !dbg !3984
  br label %if.end379, !dbg !3985

if.end379:                                        ; preds = %if.then378, %if.else
  br label %if.end380

if.end380:                                        ; preds = %if.end379
  br label %if.end381, !dbg !3986

if.end381:                                        ; preds = %if.end380, %if.end361
  %307 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !3987
  %mb382 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %307, i32 0, i32 55, !dbg !3989
  %i_subpel_refine383 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb382, i32 0, i32 10, !dbg !3990
  %308 = load i32, i32* %i_subpel_refine383, align 8, !dbg !3990
  %cmp384 = icmp sgt i32 %308, 1, !dbg !3991
  br i1 %cmp384, label %if.then386, label %if.else986, !dbg !3992

if.then386:                                       ; preds = %if.end381
  store i32 -1, i32* %bdir, align 4, !dbg !3993
  call void @llvm.dbg.declare(metadata i32* %i387, metadata !3995, metadata !DIExpression()), !dbg !3997
  %309 = load i32, i32* %qpel_iters.addr, align 4, !dbg !3998
  store i32 %309, i32* %i387, align 4, !dbg !3997
  br label %for.cond388, !dbg !3999

for.cond388:                                      ; preds = %for.inc983, %if.then386
  %310 = load i32, i32* %i387, align 4, !dbg !4000
  %cmp389 = icmp sgt i32 %310, 0, !dbg !4002
  br i1 %cmp389, label %for.body391, label %for.end985, !dbg !4003

for.body391:                                      ; preds = %for.cond388
  %311 = load i32, i32* %bmy, align 4, !dbg !4004
  %312 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4007
  %mb392 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %312, i32 0, i32 55, !dbg !4008
  %mv_min_spel393 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb392, i32 0, i32 20, !dbg !4009
  %arrayidx394 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel393, i64 0, i64 1, !dbg !4007
  %313 = load i32, i32* %arrayidx394, align 4, !dbg !4007
  %cmp395 = icmp sle i32 %311, %313, !dbg !4010
  br i1 %cmp395, label %if.then415, label %lor.lhs.false397, !dbg !4011

lor.lhs.false397:                                 ; preds = %for.body391
  %314 = load i32, i32* %bmy, align 4, !dbg !4012
  %315 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4013
  %mb398 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %315, i32 0, i32 55, !dbg !4014
  %mv_max_spel399 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb398, i32 0, i32 21, !dbg !4015
  %arrayidx400 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel399, i64 0, i64 1, !dbg !4013
  %316 = load i32, i32* %arrayidx400, align 4, !dbg !4013
  %cmp401 = icmp sge i32 %314, %316, !dbg !4016
  br i1 %cmp401, label %if.then415, label %lor.lhs.false403, !dbg !4017

lor.lhs.false403:                                 ; preds = %lor.lhs.false397
  %317 = load i32, i32* %bmx, align 4, !dbg !4018
  %318 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4019
  %mb404 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %318, i32 0, i32 55, !dbg !4020
  %mv_min_spel405 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb404, i32 0, i32 20, !dbg !4021
  %arrayidx406 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel405, i64 0, i64 0, !dbg !4019
  %319 = load i32, i32* %arrayidx406, align 8, !dbg !4019
  %cmp407 = icmp sle i32 %317, %319, !dbg !4022
  br i1 %cmp407, label %if.then415, label %lor.lhs.false409, !dbg !4023

lor.lhs.false409:                                 ; preds = %lor.lhs.false403
  %320 = load i32, i32* %bmx, align 4, !dbg !4024
  %321 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4025
  %mb410 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %321, i32 0, i32 55, !dbg !4026
  %mv_max_spel411 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb410, i32 0, i32 21, !dbg !4027
  %arrayidx412 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel411, i64 0, i64 0, !dbg !4025
  %322 = load i32, i32* %arrayidx412, align 16, !dbg !4025
  %cmp413 = icmp sge i32 %320, %322, !dbg !4028
  br i1 %cmp413, label %if.then415, label %if.end416, !dbg !4029

if.then415:                                       ; preds = %lor.lhs.false409, %lor.lhs.false403, %lor.lhs.false397, %for.body391
  br label %for.end985, !dbg !4030

if.end416:                                        ; preds = %lor.lhs.false409
  %323 = load i32, i32* %bdir, align 4, !dbg !4031
  store i32 %323, i32* %odir, align 4, !dbg !4032
  call void @llvm.dbg.declare(metadata i32* %omx417, metadata !4033, metadata !DIExpression()), !dbg !4034
  %324 = load i32, i32* %bmx, align 4, !dbg !4035
  store i32 %324, i32* %omx417, align 4, !dbg !4034
  call void @llvm.dbg.declare(metadata i32* %omy418, metadata !4036, metadata !DIExpression()), !dbg !4037
  %325 = load i32, i32* %bmy, align 4, !dbg !4038
  store i32 %325, i32* %omy418, align 4, !dbg !4037
  %326 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !4039
  %tobool419 = icmp ne i32 %326, 0, !dbg !4039
  br i1 %tobool419, label %if.then423, label %lor.lhs.false420, !dbg !4039

lor.lhs.false420:                                 ; preds = %if.end416
  %327 = load i32, i32* %odir, align 4, !dbg !4039
  %cmp421 = icmp ne i32 1, %327, !dbg !4039
  br i1 %cmp421, label %if.then423, label %if.end557, !dbg !4041

if.then423:                                       ; preds = %lor.lhs.false420, %if.end416
  call void @llvm.dbg.declare(metadata i32* %stride424, metadata !4042, metadata !DIExpression()), !dbg !4044
  store i32 16, i32* %stride424, align 4, !dbg !4044
  call void @llvm.dbg.declare(metadata i8** %src425, metadata !4045, metadata !DIExpression()), !dbg !4044
  %328 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4044
  %mc426 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %328, i32 0, i32 70, !dbg !4044
  %get_ref427 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc426, i32 0, i32 1, !dbg !4044
  %329 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref427, align 8, !dbg !4044
  %arraydecay428 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4044
  %330 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4044
  %p_fref429 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %330, i32 0, i32 5, !dbg !4044
  %arraydecay430 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref429, i64 0, i64 0, !dbg !4044
  %331 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4044
  %i_stride431 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %331, i32 0, i32 9, !dbg !4044
  %arrayidx432 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride431, i64 0, i64 0, !dbg !4044
  %332 = load i32, i32* %arrayidx432, align 8, !dbg !4044
  %333 = load i32, i32* %omx417, align 4, !dbg !4044
  %334 = load i32, i32* %omy418, align 4, !dbg !4044
  %sub433 = sub nsw i32 %334, 1, !dbg !4044
  %335 = load i32, i32* %bw, align 4, !dbg !4044
  %336 = load i32, i32* %bh, align 4, !dbg !4044
  %337 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4044
  %weight434 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %337, i32 0, i32 4, !dbg !4044
  %338 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight434, align 8, !dbg !4044
  %arrayidx435 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %338, i64 0, !dbg !4044
  %call436 = call i8* %329(i8* %arraydecay428, i32* %stride424, i8** %arraydecay430, i32 %332, i32 %333, i32 %sub433, i32 %335, i32 %336, %struct.x264_weight_t* %arrayidx435), !dbg !4044
  store i8* %call436, i8** %src425, align 8, !dbg !4044
  call void @llvm.dbg.declare(metadata i32* %cost437, metadata !4046, metadata !DIExpression()), !dbg !4044
  %339 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4044
  %pixf438 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %339, i32 0, i32 69, !dbg !4044
  %mbcmp_unaligned439 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf438, i32 0, i32 6, !dbg !4044
  %340 = load i32, i32* %i_pixel13, align 4, !dbg !4044
  %idxprom440 = sext i32 %340 to i64, !dbg !4044
  %arrayidx441 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned439, i64 0, i64 %idxprom440, !dbg !4044
  %341 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx441, align 8, !dbg !4044
  %342 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4044
  %p_fenc442 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %342, i32 0, i32 7, !dbg !4044
  %arrayidx443 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc442, i64 0, i64 0, !dbg !4044
  %343 = load i8*, i8** %arrayidx443, align 8, !dbg !4044
  %344 = load i8*, i8** %src425, align 8, !dbg !4044
  %345 = load i32, i32* %stride424, align 4, !dbg !4044
  %call444 = call i32 %341(i8* %343, i32 16, i8* %344, i32 %345), !dbg !4044
  %346 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4044
  %347 = load i32, i32* %omx417, align 4, !dbg !4044
  %idxprom445 = sext i32 %347 to i64, !dbg !4044
  %arrayidx446 = getelementptr inbounds i16, i16* %346, i64 %idxprom445, !dbg !4044
  %348 = load i16, i16* %arrayidx446, align 2, !dbg !4044
  %conv447 = zext i16 %348 to i32, !dbg !4044
  %add448 = add nsw i32 %call444, %conv447, !dbg !4044
  %349 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4044
  %350 = load i32, i32* %omy418, align 4, !dbg !4044
  %sub449 = sub nsw i32 %350, 1, !dbg !4044
  %idxprom450 = sext i32 %sub449 to i64, !dbg !4044
  %arrayidx451 = getelementptr inbounds i16, i16* %349, i64 %idxprom450, !dbg !4044
  %351 = load i16, i16* %arrayidx451, align 2, !dbg !4044
  %conv452 = zext i16 %351 to i32, !dbg !4044
  %add453 = add nsw i32 %add448, %conv452, !dbg !4044
  store i32 %add453, i32* %cost437, align 4, !dbg !4044
  %352 = load i32, i32* %b_chroma_me, align 4, !dbg !4047
  %tobool454 = icmp ne i32 %352, 0, !dbg !4047
  br i1 %tobool454, label %land.lhs.true455, label %if.end551, !dbg !4047

land.lhs.true455:                                 ; preds = %if.then423
  %353 = load i32, i32* %cost437, align 4, !dbg !4047
  %354 = load i32, i32* %bcost, align 4, !dbg !4047
  %cmp456 = icmp slt i32 %353, %354, !dbg !4047
  br i1 %cmp456, label %if.then458, label %if.end551, !dbg !4044

if.then458:                                       ; preds = %land.lhs.true455
  %355 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4049
  %mc459 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %355, i32 0, i32 70, !dbg !4049
  %mc_chroma460 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc459, i32 0, i32 2, !dbg !4049
  %356 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma460, align 8, !dbg !4049
  %arraydecay461 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4049
  %357 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4049
  %p_fref462 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %357, i32 0, i32 5, !dbg !4049
  %arrayidx463 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref462, i64 0, i64 4, !dbg !4049
  %358 = load i8*, i8** %arrayidx463, align 16, !dbg !4049
  %359 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4049
  %i_stride464 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %359, i32 0, i32 9, !dbg !4049
  %arrayidx465 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride464, i64 0, i64 1, !dbg !4049
  %360 = load i32, i32* %arrayidx465, align 4, !dbg !4049
  %361 = load i32, i32* %omx417, align 4, !dbg !4049
  %362 = load i32, i32* %omy418, align 4, !dbg !4049
  %sub466 = sub nsw i32 %362, 1, !dbg !4049
  %363 = load i32, i32* %mvy_offset, align 4, !dbg !4049
  %add467 = add nsw i32 %sub466, %363, !dbg !4049
  %364 = load i32, i32* %bw, align 4, !dbg !4049
  %div468 = sdiv i32 %364, 2, !dbg !4049
  %365 = load i32, i32* %bh, align 4, !dbg !4049
  %div469 = sdiv i32 %365, 2, !dbg !4049
  call void %356(i8* %arraydecay461, i32 8, i8* %358, i32 %360, i32 %361, i32 %add467, i32 %div468, i32 %div469), !dbg !4049
  %366 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4051
  %weight470 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %366, i32 0, i32 4, !dbg !4051
  %367 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight470, align 8, !dbg !4051
  %arrayidx471 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %367, i64 1, !dbg !4051
  %weightfn472 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx471, i32 0, i32 5, !dbg !4051
  %368 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn472, align 16, !dbg !4051
  %tobool473 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %368, null, !dbg !4051
  br i1 %tobool473, label %if.then474, label %if.end492, !dbg !4049

if.then474:                                       ; preds = %if.then458
  %369 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4051
  %weight475 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %369, i32 0, i32 4, !dbg !4051
  %370 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight475, align 8, !dbg !4051
  %arrayidx476 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %370, i64 1, !dbg !4051
  %weightfn477 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx476, i32 0, i32 5, !dbg !4051
  %371 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn477, align 16, !dbg !4051
  %372 = load i32, i32* %i_pixel13, align 4, !dbg !4051
  %idxprom478 = sext i32 %372 to i64, !dbg !4051
  %arrayidx479 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom478, !dbg !4051
  %w480 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx479, i32 0, i32 0, !dbg !4051
  %373 = load i32, i32* %w480, align 8, !dbg !4051
  %shr481 = ashr i32 %373, 3, !dbg !4051
  %idxprom482 = sext i32 %shr481 to i64, !dbg !4051
  %arrayidx483 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %371, i64 %idxprom482, !dbg !4051
  %374 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx483, align 8, !dbg !4051
  %arraydecay484 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4051
  %arraydecay485 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4051
  %375 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4051
  %weight486 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %375, i32 0, i32 4, !dbg !4051
  %376 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight486, align 8, !dbg !4051
  %arrayidx487 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %376, i64 1, !dbg !4051
  %377 = load i32, i32* %i_pixel13, align 4, !dbg !4051
  %idxprom488 = sext i32 %377 to i64, !dbg !4051
  %arrayidx489 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom488, !dbg !4051
  %h490 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx489, i32 0, i32 1, !dbg !4051
  %378 = load i32, i32* %h490, align 4, !dbg !4051
  %shr491 = ashr i32 %378, 1, !dbg !4051
  call void %374(i8* %arraydecay484, i32 8, i8* %arraydecay485, i32 8, %struct.x264_weight_t* %arrayidx487, i32 %shr491), !dbg !4051
  br label %if.end492, !dbg !4051

if.end492:                                        ; preds = %if.then474, %if.then458
  %379 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4049
  %pixf493 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %379, i32 0, i32 69, !dbg !4049
  %mbcmp494 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf493, i32 0, i32 5, !dbg !4049
  %380 = load i32, i32* %i_pixel13, align 4, !dbg !4049
  %add495 = add nsw i32 %380, 3, !dbg !4049
  %idxprom496 = sext i32 %add495 to i64, !dbg !4049
  %arrayidx497 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp494, i64 0, i64 %idxprom496, !dbg !4049
  %381 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx497, align 8, !dbg !4049
  %382 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4049
  %p_fenc498 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %382, i32 0, i32 7, !dbg !4049
  %arrayidx499 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc498, i64 0, i64 1, !dbg !4049
  %383 = load i8*, i8** %arrayidx499, align 8, !dbg !4049
  %arraydecay500 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4049
  %call501 = call i32 %381(i8* %383, i32 16, i8* %arraydecay500, i32 8), !dbg !4049
  %384 = load i32, i32* %cost437, align 4, !dbg !4049
  %add502 = add nsw i32 %384, %call501, !dbg !4049
  store i32 %add502, i32* %cost437, align 4, !dbg !4049
  %385 = load i32, i32* %cost437, align 4, !dbg !4053
  %386 = load i32, i32* %bcost, align 4, !dbg !4053
  %cmp503 = icmp slt i32 %385, %386, !dbg !4053
  br i1 %cmp503, label %if.then505, label %if.end550, !dbg !4049

if.then505:                                       ; preds = %if.end492
  %387 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4055
  %mc506 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %387, i32 0, i32 70, !dbg !4055
  %mc_chroma507 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc506, i32 0, i32 2, !dbg !4055
  %388 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma507, align 8, !dbg !4055
  %arraydecay508 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4055
  %389 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4055
  %p_fref509 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %389, i32 0, i32 5, !dbg !4055
  %arrayidx510 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref509, i64 0, i64 5, !dbg !4055
  %390 = load i8*, i8** %arrayidx510, align 8, !dbg !4055
  %391 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4055
  %i_stride511 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %391, i32 0, i32 9, !dbg !4055
  %arrayidx512 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride511, i64 0, i64 1, !dbg !4055
  %392 = load i32, i32* %arrayidx512, align 4, !dbg !4055
  %393 = load i32, i32* %omx417, align 4, !dbg !4055
  %394 = load i32, i32* %omy418, align 4, !dbg !4055
  %sub513 = sub nsw i32 %394, 1, !dbg !4055
  %395 = load i32, i32* %mvy_offset, align 4, !dbg !4055
  %add514 = add nsw i32 %sub513, %395, !dbg !4055
  %396 = load i32, i32* %bw, align 4, !dbg !4055
  %div515 = sdiv i32 %396, 2, !dbg !4055
  %397 = load i32, i32* %bh, align 4, !dbg !4055
  %div516 = sdiv i32 %397, 2, !dbg !4055
  call void %388(i8* %arraydecay508, i32 8, i8* %390, i32 %392, i32 %393, i32 %add514, i32 %div515, i32 %div516), !dbg !4055
  %398 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4057
  %weight517 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %398, i32 0, i32 4, !dbg !4057
  %399 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight517, align 8, !dbg !4057
  %arrayidx518 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %399, i64 2, !dbg !4057
  %weightfn519 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx518, i32 0, i32 5, !dbg !4057
  %400 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn519, align 16, !dbg !4057
  %tobool520 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %400, null, !dbg !4057
  br i1 %tobool520, label %if.then521, label %if.end539, !dbg !4055

if.then521:                                       ; preds = %if.then505
  %401 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4057
  %weight522 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %401, i32 0, i32 4, !dbg !4057
  %402 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight522, align 8, !dbg !4057
  %arrayidx523 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %402, i64 2, !dbg !4057
  %weightfn524 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx523, i32 0, i32 5, !dbg !4057
  %403 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn524, align 16, !dbg !4057
  %404 = load i32, i32* %i_pixel13, align 4, !dbg !4057
  %idxprom525 = sext i32 %404 to i64, !dbg !4057
  %arrayidx526 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom525, !dbg !4057
  %w527 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx526, i32 0, i32 0, !dbg !4057
  %405 = load i32, i32* %w527, align 8, !dbg !4057
  %shr528 = ashr i32 %405, 3, !dbg !4057
  %idxprom529 = sext i32 %shr528 to i64, !dbg !4057
  %arrayidx530 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %403, i64 %idxprom529, !dbg !4057
  %406 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx530, align 8, !dbg !4057
  %arraydecay531 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4057
  %arraydecay532 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4057
  %407 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4057
  %weight533 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %407, i32 0, i32 4, !dbg !4057
  %408 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight533, align 8, !dbg !4057
  %arrayidx534 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %408, i64 2, !dbg !4057
  %409 = load i32, i32* %i_pixel13, align 4, !dbg !4057
  %idxprom535 = sext i32 %409 to i64, !dbg !4057
  %arrayidx536 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom535, !dbg !4057
  %h537 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx536, i32 0, i32 1, !dbg !4057
  %410 = load i32, i32* %h537, align 4, !dbg !4057
  %shr538 = ashr i32 %410, 1, !dbg !4057
  call void %406(i8* %arraydecay531, i32 8, i8* %arraydecay532, i32 8, %struct.x264_weight_t* %arrayidx534, i32 %shr538), !dbg !4057
  br label %if.end539, !dbg !4057

if.end539:                                        ; preds = %if.then521, %if.then505
  %411 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4055
  %pixf540 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %411, i32 0, i32 69, !dbg !4055
  %mbcmp541 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf540, i32 0, i32 5, !dbg !4055
  %412 = load i32, i32* %i_pixel13, align 4, !dbg !4055
  %add542 = add nsw i32 %412, 3, !dbg !4055
  %idxprom543 = sext i32 %add542 to i64, !dbg !4055
  %arrayidx544 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp541, i64 0, i64 %idxprom543, !dbg !4055
  %413 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx544, align 8, !dbg !4055
  %414 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4055
  %p_fenc545 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %414, i32 0, i32 7, !dbg !4055
  %arrayidx546 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc545, i64 0, i64 2, !dbg !4055
  %415 = load i8*, i8** %arrayidx546, align 8, !dbg !4055
  %arraydecay547 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4055
  %call548 = call i32 %413(i8* %415, i32 16, i8* %arraydecay547, i32 8), !dbg !4055
  %416 = load i32, i32* %cost437, align 4, !dbg !4055
  %add549 = add nsw i32 %416, %call548, !dbg !4055
  store i32 %add549, i32* %cost437, align 4, !dbg !4055
  br label %if.end550, !dbg !4055

if.end550:                                        ; preds = %if.end539, %if.end492
  br label %if.end551, !dbg !4049

if.end551:                                        ; preds = %if.end550, %land.lhs.true455, %if.then423
  %417 = load i32, i32* %cost437, align 4, !dbg !4059
  %418 = load i32, i32* %bcost, align 4, !dbg !4059
  %cmp552 = icmp slt i32 %417, %418, !dbg !4059
  br i1 %cmp552, label %if.then554, label %if.end556, !dbg !4044

if.then554:                                       ; preds = %if.end551
  %419 = load i32, i32* %cost437, align 4, !dbg !4061
  store i32 %419, i32* %bcost, align 4, !dbg !4061
  %420 = load i32, i32* %omx417, align 4, !dbg !4061
  store i32 %420, i32* %bmx, align 4, !dbg !4061
  %421 = load i32, i32* %omy418, align 4, !dbg !4061
  %sub555 = sub nsw i32 %421, 1, !dbg !4061
  store i32 %sub555, i32* %bmy, align 4, !dbg !4061
  store i32 0, i32* %bdir, align 4, !dbg !4061
  br label %if.end556, !dbg !4061

if.end556:                                        ; preds = %if.then554, %if.end551
  br label %if.end557, !dbg !4044

if.end557:                                        ; preds = %if.end556, %lor.lhs.false420
  %422 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !4063
  %tobool558 = icmp ne i32 %422, 0, !dbg !4063
  br i1 %tobool558, label %if.then562, label %lor.lhs.false559, !dbg !4063

lor.lhs.false559:                                 ; preds = %if.end557
  %423 = load i32, i32* %odir, align 4, !dbg !4063
  %cmp560 = icmp ne i32 0, %423, !dbg !4063
  br i1 %cmp560, label %if.then562, label %if.end696, !dbg !4065

if.then562:                                       ; preds = %lor.lhs.false559, %if.end557
  call void @llvm.dbg.declare(metadata i32* %stride563, metadata !4066, metadata !DIExpression()), !dbg !4068
  store i32 16, i32* %stride563, align 4, !dbg !4068
  call void @llvm.dbg.declare(metadata i8** %src564, metadata !4069, metadata !DIExpression()), !dbg !4068
  %424 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4068
  %mc565 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %424, i32 0, i32 70, !dbg !4068
  %get_ref566 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc565, i32 0, i32 1, !dbg !4068
  %425 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref566, align 8, !dbg !4068
  %arraydecay567 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4068
  %426 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4068
  %p_fref568 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %426, i32 0, i32 5, !dbg !4068
  %arraydecay569 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref568, i64 0, i64 0, !dbg !4068
  %427 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4068
  %i_stride570 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %427, i32 0, i32 9, !dbg !4068
  %arrayidx571 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride570, i64 0, i64 0, !dbg !4068
  %428 = load i32, i32* %arrayidx571, align 8, !dbg !4068
  %429 = load i32, i32* %omx417, align 4, !dbg !4068
  %430 = load i32, i32* %omy418, align 4, !dbg !4068
  %add572 = add nsw i32 %430, 1, !dbg !4068
  %431 = load i32, i32* %bw, align 4, !dbg !4068
  %432 = load i32, i32* %bh, align 4, !dbg !4068
  %433 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4068
  %weight573 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %433, i32 0, i32 4, !dbg !4068
  %434 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight573, align 8, !dbg !4068
  %arrayidx574 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %434, i64 0, !dbg !4068
  %call575 = call i8* %425(i8* %arraydecay567, i32* %stride563, i8** %arraydecay569, i32 %428, i32 %429, i32 %add572, i32 %431, i32 %432, %struct.x264_weight_t* %arrayidx574), !dbg !4068
  store i8* %call575, i8** %src564, align 8, !dbg !4068
  call void @llvm.dbg.declare(metadata i32* %cost576, metadata !4070, metadata !DIExpression()), !dbg !4068
  %435 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4068
  %pixf577 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %435, i32 0, i32 69, !dbg !4068
  %mbcmp_unaligned578 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf577, i32 0, i32 6, !dbg !4068
  %436 = load i32, i32* %i_pixel13, align 4, !dbg !4068
  %idxprom579 = sext i32 %436 to i64, !dbg !4068
  %arrayidx580 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned578, i64 0, i64 %idxprom579, !dbg !4068
  %437 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx580, align 8, !dbg !4068
  %438 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4068
  %p_fenc581 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %438, i32 0, i32 7, !dbg !4068
  %arrayidx582 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc581, i64 0, i64 0, !dbg !4068
  %439 = load i8*, i8** %arrayidx582, align 8, !dbg !4068
  %440 = load i8*, i8** %src564, align 8, !dbg !4068
  %441 = load i32, i32* %stride563, align 4, !dbg !4068
  %call583 = call i32 %437(i8* %439, i32 16, i8* %440, i32 %441), !dbg !4068
  %442 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4068
  %443 = load i32, i32* %omx417, align 4, !dbg !4068
  %idxprom584 = sext i32 %443 to i64, !dbg !4068
  %arrayidx585 = getelementptr inbounds i16, i16* %442, i64 %idxprom584, !dbg !4068
  %444 = load i16, i16* %arrayidx585, align 2, !dbg !4068
  %conv586 = zext i16 %444 to i32, !dbg !4068
  %add587 = add nsw i32 %call583, %conv586, !dbg !4068
  %445 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4068
  %446 = load i32, i32* %omy418, align 4, !dbg !4068
  %add588 = add nsw i32 %446, 1, !dbg !4068
  %idxprom589 = sext i32 %add588 to i64, !dbg !4068
  %arrayidx590 = getelementptr inbounds i16, i16* %445, i64 %idxprom589, !dbg !4068
  %447 = load i16, i16* %arrayidx590, align 2, !dbg !4068
  %conv591 = zext i16 %447 to i32, !dbg !4068
  %add592 = add nsw i32 %add587, %conv591, !dbg !4068
  store i32 %add592, i32* %cost576, align 4, !dbg !4068
  %448 = load i32, i32* %b_chroma_me, align 4, !dbg !4071
  %tobool593 = icmp ne i32 %448, 0, !dbg !4071
  br i1 %tobool593, label %land.lhs.true594, label %if.end690, !dbg !4071

land.lhs.true594:                                 ; preds = %if.then562
  %449 = load i32, i32* %cost576, align 4, !dbg !4071
  %450 = load i32, i32* %bcost, align 4, !dbg !4071
  %cmp595 = icmp slt i32 %449, %450, !dbg !4071
  br i1 %cmp595, label %if.then597, label %if.end690, !dbg !4068

if.then597:                                       ; preds = %land.lhs.true594
  %451 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4073
  %mc598 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %451, i32 0, i32 70, !dbg !4073
  %mc_chroma599 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc598, i32 0, i32 2, !dbg !4073
  %452 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma599, align 8, !dbg !4073
  %arraydecay600 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4073
  %453 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4073
  %p_fref601 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %453, i32 0, i32 5, !dbg !4073
  %arrayidx602 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref601, i64 0, i64 4, !dbg !4073
  %454 = load i8*, i8** %arrayidx602, align 16, !dbg !4073
  %455 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4073
  %i_stride603 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %455, i32 0, i32 9, !dbg !4073
  %arrayidx604 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride603, i64 0, i64 1, !dbg !4073
  %456 = load i32, i32* %arrayidx604, align 4, !dbg !4073
  %457 = load i32, i32* %omx417, align 4, !dbg !4073
  %458 = load i32, i32* %omy418, align 4, !dbg !4073
  %add605 = add nsw i32 %458, 1, !dbg !4073
  %459 = load i32, i32* %mvy_offset, align 4, !dbg !4073
  %add606 = add nsw i32 %add605, %459, !dbg !4073
  %460 = load i32, i32* %bw, align 4, !dbg !4073
  %div607 = sdiv i32 %460, 2, !dbg !4073
  %461 = load i32, i32* %bh, align 4, !dbg !4073
  %div608 = sdiv i32 %461, 2, !dbg !4073
  call void %452(i8* %arraydecay600, i32 8, i8* %454, i32 %456, i32 %457, i32 %add606, i32 %div607, i32 %div608), !dbg !4073
  %462 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4075
  %weight609 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %462, i32 0, i32 4, !dbg !4075
  %463 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight609, align 8, !dbg !4075
  %arrayidx610 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %463, i64 1, !dbg !4075
  %weightfn611 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx610, i32 0, i32 5, !dbg !4075
  %464 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn611, align 16, !dbg !4075
  %tobool612 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %464, null, !dbg !4075
  br i1 %tobool612, label %if.then613, label %if.end631, !dbg !4073

if.then613:                                       ; preds = %if.then597
  %465 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4075
  %weight614 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %465, i32 0, i32 4, !dbg !4075
  %466 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight614, align 8, !dbg !4075
  %arrayidx615 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %466, i64 1, !dbg !4075
  %weightfn616 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx615, i32 0, i32 5, !dbg !4075
  %467 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn616, align 16, !dbg !4075
  %468 = load i32, i32* %i_pixel13, align 4, !dbg !4075
  %idxprom617 = sext i32 %468 to i64, !dbg !4075
  %arrayidx618 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom617, !dbg !4075
  %w619 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx618, i32 0, i32 0, !dbg !4075
  %469 = load i32, i32* %w619, align 8, !dbg !4075
  %shr620 = ashr i32 %469, 3, !dbg !4075
  %idxprom621 = sext i32 %shr620 to i64, !dbg !4075
  %arrayidx622 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %467, i64 %idxprom621, !dbg !4075
  %470 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx622, align 8, !dbg !4075
  %arraydecay623 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4075
  %arraydecay624 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4075
  %471 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4075
  %weight625 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %471, i32 0, i32 4, !dbg !4075
  %472 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight625, align 8, !dbg !4075
  %arrayidx626 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %472, i64 1, !dbg !4075
  %473 = load i32, i32* %i_pixel13, align 4, !dbg !4075
  %idxprom627 = sext i32 %473 to i64, !dbg !4075
  %arrayidx628 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom627, !dbg !4075
  %h629 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx628, i32 0, i32 1, !dbg !4075
  %474 = load i32, i32* %h629, align 4, !dbg !4075
  %shr630 = ashr i32 %474, 1, !dbg !4075
  call void %470(i8* %arraydecay623, i32 8, i8* %arraydecay624, i32 8, %struct.x264_weight_t* %arrayidx626, i32 %shr630), !dbg !4075
  br label %if.end631, !dbg !4075

if.end631:                                        ; preds = %if.then613, %if.then597
  %475 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4073
  %pixf632 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %475, i32 0, i32 69, !dbg !4073
  %mbcmp633 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf632, i32 0, i32 5, !dbg !4073
  %476 = load i32, i32* %i_pixel13, align 4, !dbg !4073
  %add634 = add nsw i32 %476, 3, !dbg !4073
  %idxprom635 = sext i32 %add634 to i64, !dbg !4073
  %arrayidx636 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp633, i64 0, i64 %idxprom635, !dbg !4073
  %477 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx636, align 8, !dbg !4073
  %478 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4073
  %p_fenc637 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %478, i32 0, i32 7, !dbg !4073
  %arrayidx638 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc637, i64 0, i64 1, !dbg !4073
  %479 = load i8*, i8** %arrayidx638, align 8, !dbg !4073
  %arraydecay639 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4073
  %call640 = call i32 %477(i8* %479, i32 16, i8* %arraydecay639, i32 8), !dbg !4073
  %480 = load i32, i32* %cost576, align 4, !dbg !4073
  %add641 = add nsw i32 %480, %call640, !dbg !4073
  store i32 %add641, i32* %cost576, align 4, !dbg !4073
  %481 = load i32, i32* %cost576, align 4, !dbg !4077
  %482 = load i32, i32* %bcost, align 4, !dbg !4077
  %cmp642 = icmp slt i32 %481, %482, !dbg !4077
  br i1 %cmp642, label %if.then644, label %if.end689, !dbg !4073

if.then644:                                       ; preds = %if.end631
  %483 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4079
  %mc645 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %483, i32 0, i32 70, !dbg !4079
  %mc_chroma646 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc645, i32 0, i32 2, !dbg !4079
  %484 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma646, align 8, !dbg !4079
  %arraydecay647 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4079
  %485 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4079
  %p_fref648 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %485, i32 0, i32 5, !dbg !4079
  %arrayidx649 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref648, i64 0, i64 5, !dbg !4079
  %486 = load i8*, i8** %arrayidx649, align 8, !dbg !4079
  %487 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4079
  %i_stride650 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %487, i32 0, i32 9, !dbg !4079
  %arrayidx651 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride650, i64 0, i64 1, !dbg !4079
  %488 = load i32, i32* %arrayidx651, align 4, !dbg !4079
  %489 = load i32, i32* %omx417, align 4, !dbg !4079
  %490 = load i32, i32* %omy418, align 4, !dbg !4079
  %add652 = add nsw i32 %490, 1, !dbg !4079
  %491 = load i32, i32* %mvy_offset, align 4, !dbg !4079
  %add653 = add nsw i32 %add652, %491, !dbg !4079
  %492 = load i32, i32* %bw, align 4, !dbg !4079
  %div654 = sdiv i32 %492, 2, !dbg !4079
  %493 = load i32, i32* %bh, align 4, !dbg !4079
  %div655 = sdiv i32 %493, 2, !dbg !4079
  call void %484(i8* %arraydecay647, i32 8, i8* %486, i32 %488, i32 %489, i32 %add653, i32 %div654, i32 %div655), !dbg !4079
  %494 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4081
  %weight656 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %494, i32 0, i32 4, !dbg !4081
  %495 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight656, align 8, !dbg !4081
  %arrayidx657 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %495, i64 2, !dbg !4081
  %weightfn658 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx657, i32 0, i32 5, !dbg !4081
  %496 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn658, align 16, !dbg !4081
  %tobool659 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %496, null, !dbg !4081
  br i1 %tobool659, label %if.then660, label %if.end678, !dbg !4079

if.then660:                                       ; preds = %if.then644
  %497 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4081
  %weight661 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %497, i32 0, i32 4, !dbg !4081
  %498 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight661, align 8, !dbg !4081
  %arrayidx662 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %498, i64 2, !dbg !4081
  %weightfn663 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx662, i32 0, i32 5, !dbg !4081
  %499 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn663, align 16, !dbg !4081
  %500 = load i32, i32* %i_pixel13, align 4, !dbg !4081
  %idxprom664 = sext i32 %500 to i64, !dbg !4081
  %arrayidx665 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom664, !dbg !4081
  %w666 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx665, i32 0, i32 0, !dbg !4081
  %501 = load i32, i32* %w666, align 8, !dbg !4081
  %shr667 = ashr i32 %501, 3, !dbg !4081
  %idxprom668 = sext i32 %shr667 to i64, !dbg !4081
  %arrayidx669 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %499, i64 %idxprom668, !dbg !4081
  %502 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx669, align 8, !dbg !4081
  %arraydecay670 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4081
  %arraydecay671 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4081
  %503 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4081
  %weight672 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %503, i32 0, i32 4, !dbg !4081
  %504 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight672, align 8, !dbg !4081
  %arrayidx673 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %504, i64 2, !dbg !4081
  %505 = load i32, i32* %i_pixel13, align 4, !dbg !4081
  %idxprom674 = sext i32 %505 to i64, !dbg !4081
  %arrayidx675 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom674, !dbg !4081
  %h676 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx675, i32 0, i32 1, !dbg !4081
  %506 = load i32, i32* %h676, align 4, !dbg !4081
  %shr677 = ashr i32 %506, 1, !dbg !4081
  call void %502(i8* %arraydecay670, i32 8, i8* %arraydecay671, i32 8, %struct.x264_weight_t* %arrayidx673, i32 %shr677), !dbg !4081
  br label %if.end678, !dbg !4081

if.end678:                                        ; preds = %if.then660, %if.then644
  %507 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4079
  %pixf679 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %507, i32 0, i32 69, !dbg !4079
  %mbcmp680 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf679, i32 0, i32 5, !dbg !4079
  %508 = load i32, i32* %i_pixel13, align 4, !dbg !4079
  %add681 = add nsw i32 %508, 3, !dbg !4079
  %idxprom682 = sext i32 %add681 to i64, !dbg !4079
  %arrayidx683 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp680, i64 0, i64 %idxprom682, !dbg !4079
  %509 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx683, align 8, !dbg !4079
  %510 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4079
  %p_fenc684 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %510, i32 0, i32 7, !dbg !4079
  %arrayidx685 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc684, i64 0, i64 2, !dbg !4079
  %511 = load i8*, i8** %arrayidx685, align 8, !dbg !4079
  %arraydecay686 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4079
  %call687 = call i32 %509(i8* %511, i32 16, i8* %arraydecay686, i32 8), !dbg !4079
  %512 = load i32, i32* %cost576, align 4, !dbg !4079
  %add688 = add nsw i32 %512, %call687, !dbg !4079
  store i32 %add688, i32* %cost576, align 4, !dbg !4079
  br label %if.end689, !dbg !4079

if.end689:                                        ; preds = %if.end678, %if.end631
  br label %if.end690, !dbg !4073

if.end690:                                        ; preds = %if.end689, %land.lhs.true594, %if.then562
  %513 = load i32, i32* %cost576, align 4, !dbg !4083
  %514 = load i32, i32* %bcost, align 4, !dbg !4083
  %cmp691 = icmp slt i32 %513, %514, !dbg !4083
  br i1 %cmp691, label %if.then693, label %if.end695, !dbg !4068

if.then693:                                       ; preds = %if.end690
  %515 = load i32, i32* %cost576, align 4, !dbg !4085
  store i32 %515, i32* %bcost, align 4, !dbg !4085
  %516 = load i32, i32* %omx417, align 4, !dbg !4085
  store i32 %516, i32* %bmx, align 4, !dbg !4085
  %517 = load i32, i32* %omy418, align 4, !dbg !4085
  %add694 = add nsw i32 %517, 1, !dbg !4085
  store i32 %add694, i32* %bmy, align 4, !dbg !4085
  store i32 1, i32* %bdir, align 4, !dbg !4085
  br label %if.end695, !dbg !4085

if.end695:                                        ; preds = %if.then693, %if.end690
  br label %if.end696, !dbg !4068

if.end696:                                        ; preds = %if.end695, %lor.lhs.false559
  %518 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !4087
  %tobool697 = icmp ne i32 %518, 0, !dbg !4087
  br i1 %tobool697, label %if.then701, label %lor.lhs.false698, !dbg !4087

lor.lhs.false698:                                 ; preds = %if.end696
  %519 = load i32, i32* %odir, align 4, !dbg !4087
  %cmp699 = icmp ne i32 3, %519, !dbg !4087
  br i1 %cmp699, label %if.then701, label %if.end835, !dbg !4089

if.then701:                                       ; preds = %lor.lhs.false698, %if.end696
  call void @llvm.dbg.declare(metadata i32* %stride702, metadata !4090, metadata !DIExpression()), !dbg !4092
  store i32 16, i32* %stride702, align 4, !dbg !4092
  call void @llvm.dbg.declare(metadata i8** %src703, metadata !4093, metadata !DIExpression()), !dbg !4092
  %520 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4092
  %mc704 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %520, i32 0, i32 70, !dbg !4092
  %get_ref705 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc704, i32 0, i32 1, !dbg !4092
  %521 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref705, align 8, !dbg !4092
  %arraydecay706 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4092
  %522 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4092
  %p_fref707 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %522, i32 0, i32 5, !dbg !4092
  %arraydecay708 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref707, i64 0, i64 0, !dbg !4092
  %523 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4092
  %i_stride709 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %523, i32 0, i32 9, !dbg !4092
  %arrayidx710 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride709, i64 0, i64 0, !dbg !4092
  %524 = load i32, i32* %arrayidx710, align 8, !dbg !4092
  %525 = load i32, i32* %omx417, align 4, !dbg !4092
  %sub711 = sub nsw i32 %525, 1, !dbg !4092
  %526 = load i32, i32* %omy418, align 4, !dbg !4092
  %527 = load i32, i32* %bw, align 4, !dbg !4092
  %528 = load i32, i32* %bh, align 4, !dbg !4092
  %529 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4092
  %weight712 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %529, i32 0, i32 4, !dbg !4092
  %530 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight712, align 8, !dbg !4092
  %arrayidx713 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %530, i64 0, !dbg !4092
  %call714 = call i8* %521(i8* %arraydecay706, i32* %stride702, i8** %arraydecay708, i32 %524, i32 %sub711, i32 %526, i32 %527, i32 %528, %struct.x264_weight_t* %arrayidx713), !dbg !4092
  store i8* %call714, i8** %src703, align 8, !dbg !4092
  call void @llvm.dbg.declare(metadata i32* %cost715, metadata !4094, metadata !DIExpression()), !dbg !4092
  %531 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4092
  %pixf716 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %531, i32 0, i32 69, !dbg !4092
  %mbcmp_unaligned717 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf716, i32 0, i32 6, !dbg !4092
  %532 = load i32, i32* %i_pixel13, align 4, !dbg !4092
  %idxprom718 = sext i32 %532 to i64, !dbg !4092
  %arrayidx719 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned717, i64 0, i64 %idxprom718, !dbg !4092
  %533 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx719, align 8, !dbg !4092
  %534 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4092
  %p_fenc720 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %534, i32 0, i32 7, !dbg !4092
  %arrayidx721 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc720, i64 0, i64 0, !dbg !4092
  %535 = load i8*, i8** %arrayidx721, align 8, !dbg !4092
  %536 = load i8*, i8** %src703, align 8, !dbg !4092
  %537 = load i32, i32* %stride702, align 4, !dbg !4092
  %call722 = call i32 %533(i8* %535, i32 16, i8* %536, i32 %537), !dbg !4092
  %538 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4092
  %539 = load i32, i32* %omx417, align 4, !dbg !4092
  %sub723 = sub nsw i32 %539, 1, !dbg !4092
  %idxprom724 = sext i32 %sub723 to i64, !dbg !4092
  %arrayidx725 = getelementptr inbounds i16, i16* %538, i64 %idxprom724, !dbg !4092
  %540 = load i16, i16* %arrayidx725, align 2, !dbg !4092
  %conv726 = zext i16 %540 to i32, !dbg !4092
  %add727 = add nsw i32 %call722, %conv726, !dbg !4092
  %541 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4092
  %542 = load i32, i32* %omy418, align 4, !dbg !4092
  %idxprom728 = sext i32 %542 to i64, !dbg !4092
  %arrayidx729 = getelementptr inbounds i16, i16* %541, i64 %idxprom728, !dbg !4092
  %543 = load i16, i16* %arrayidx729, align 2, !dbg !4092
  %conv730 = zext i16 %543 to i32, !dbg !4092
  %add731 = add nsw i32 %add727, %conv730, !dbg !4092
  store i32 %add731, i32* %cost715, align 4, !dbg !4092
  %544 = load i32, i32* %b_chroma_me, align 4, !dbg !4095
  %tobool732 = icmp ne i32 %544, 0, !dbg !4095
  br i1 %tobool732, label %land.lhs.true733, label %if.end829, !dbg !4095

land.lhs.true733:                                 ; preds = %if.then701
  %545 = load i32, i32* %cost715, align 4, !dbg !4095
  %546 = load i32, i32* %bcost, align 4, !dbg !4095
  %cmp734 = icmp slt i32 %545, %546, !dbg !4095
  br i1 %cmp734, label %if.then736, label %if.end829, !dbg !4092

if.then736:                                       ; preds = %land.lhs.true733
  %547 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4097
  %mc737 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %547, i32 0, i32 70, !dbg !4097
  %mc_chroma738 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc737, i32 0, i32 2, !dbg !4097
  %548 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma738, align 8, !dbg !4097
  %arraydecay739 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4097
  %549 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4097
  %p_fref740 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %549, i32 0, i32 5, !dbg !4097
  %arrayidx741 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref740, i64 0, i64 4, !dbg !4097
  %550 = load i8*, i8** %arrayidx741, align 16, !dbg !4097
  %551 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4097
  %i_stride742 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %551, i32 0, i32 9, !dbg !4097
  %arrayidx743 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride742, i64 0, i64 1, !dbg !4097
  %552 = load i32, i32* %arrayidx743, align 4, !dbg !4097
  %553 = load i32, i32* %omx417, align 4, !dbg !4097
  %sub744 = sub nsw i32 %553, 1, !dbg !4097
  %554 = load i32, i32* %omy418, align 4, !dbg !4097
  %555 = load i32, i32* %mvy_offset, align 4, !dbg !4097
  %add745 = add nsw i32 %554, %555, !dbg !4097
  %556 = load i32, i32* %bw, align 4, !dbg !4097
  %div746 = sdiv i32 %556, 2, !dbg !4097
  %557 = load i32, i32* %bh, align 4, !dbg !4097
  %div747 = sdiv i32 %557, 2, !dbg !4097
  call void %548(i8* %arraydecay739, i32 8, i8* %550, i32 %552, i32 %sub744, i32 %add745, i32 %div746, i32 %div747), !dbg !4097
  %558 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4099
  %weight748 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %558, i32 0, i32 4, !dbg !4099
  %559 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight748, align 8, !dbg !4099
  %arrayidx749 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %559, i64 1, !dbg !4099
  %weightfn750 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx749, i32 0, i32 5, !dbg !4099
  %560 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn750, align 16, !dbg !4099
  %tobool751 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %560, null, !dbg !4099
  br i1 %tobool751, label %if.then752, label %if.end770, !dbg !4097

if.then752:                                       ; preds = %if.then736
  %561 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4099
  %weight753 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %561, i32 0, i32 4, !dbg !4099
  %562 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight753, align 8, !dbg !4099
  %arrayidx754 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %562, i64 1, !dbg !4099
  %weightfn755 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx754, i32 0, i32 5, !dbg !4099
  %563 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn755, align 16, !dbg !4099
  %564 = load i32, i32* %i_pixel13, align 4, !dbg !4099
  %idxprom756 = sext i32 %564 to i64, !dbg !4099
  %arrayidx757 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom756, !dbg !4099
  %w758 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx757, i32 0, i32 0, !dbg !4099
  %565 = load i32, i32* %w758, align 8, !dbg !4099
  %shr759 = ashr i32 %565, 3, !dbg !4099
  %idxprom760 = sext i32 %shr759 to i64, !dbg !4099
  %arrayidx761 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %563, i64 %idxprom760, !dbg !4099
  %566 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx761, align 8, !dbg !4099
  %arraydecay762 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4099
  %arraydecay763 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4099
  %567 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4099
  %weight764 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %567, i32 0, i32 4, !dbg !4099
  %568 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight764, align 8, !dbg !4099
  %arrayidx765 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %568, i64 1, !dbg !4099
  %569 = load i32, i32* %i_pixel13, align 4, !dbg !4099
  %idxprom766 = sext i32 %569 to i64, !dbg !4099
  %arrayidx767 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom766, !dbg !4099
  %h768 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx767, i32 0, i32 1, !dbg !4099
  %570 = load i32, i32* %h768, align 4, !dbg !4099
  %shr769 = ashr i32 %570, 1, !dbg !4099
  call void %566(i8* %arraydecay762, i32 8, i8* %arraydecay763, i32 8, %struct.x264_weight_t* %arrayidx765, i32 %shr769), !dbg !4099
  br label %if.end770, !dbg !4099

if.end770:                                        ; preds = %if.then752, %if.then736
  %571 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4097
  %pixf771 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %571, i32 0, i32 69, !dbg !4097
  %mbcmp772 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf771, i32 0, i32 5, !dbg !4097
  %572 = load i32, i32* %i_pixel13, align 4, !dbg !4097
  %add773 = add nsw i32 %572, 3, !dbg !4097
  %idxprom774 = sext i32 %add773 to i64, !dbg !4097
  %arrayidx775 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp772, i64 0, i64 %idxprom774, !dbg !4097
  %573 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx775, align 8, !dbg !4097
  %574 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4097
  %p_fenc776 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %574, i32 0, i32 7, !dbg !4097
  %arrayidx777 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc776, i64 0, i64 1, !dbg !4097
  %575 = load i8*, i8** %arrayidx777, align 8, !dbg !4097
  %arraydecay778 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4097
  %call779 = call i32 %573(i8* %575, i32 16, i8* %arraydecay778, i32 8), !dbg !4097
  %576 = load i32, i32* %cost715, align 4, !dbg !4097
  %add780 = add nsw i32 %576, %call779, !dbg !4097
  store i32 %add780, i32* %cost715, align 4, !dbg !4097
  %577 = load i32, i32* %cost715, align 4, !dbg !4101
  %578 = load i32, i32* %bcost, align 4, !dbg !4101
  %cmp781 = icmp slt i32 %577, %578, !dbg !4101
  br i1 %cmp781, label %if.then783, label %if.end828, !dbg !4097

if.then783:                                       ; preds = %if.end770
  %579 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4103
  %mc784 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %579, i32 0, i32 70, !dbg !4103
  %mc_chroma785 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc784, i32 0, i32 2, !dbg !4103
  %580 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma785, align 8, !dbg !4103
  %arraydecay786 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4103
  %581 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4103
  %p_fref787 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %581, i32 0, i32 5, !dbg !4103
  %arrayidx788 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref787, i64 0, i64 5, !dbg !4103
  %582 = load i8*, i8** %arrayidx788, align 8, !dbg !4103
  %583 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4103
  %i_stride789 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %583, i32 0, i32 9, !dbg !4103
  %arrayidx790 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride789, i64 0, i64 1, !dbg !4103
  %584 = load i32, i32* %arrayidx790, align 4, !dbg !4103
  %585 = load i32, i32* %omx417, align 4, !dbg !4103
  %sub791 = sub nsw i32 %585, 1, !dbg !4103
  %586 = load i32, i32* %omy418, align 4, !dbg !4103
  %587 = load i32, i32* %mvy_offset, align 4, !dbg !4103
  %add792 = add nsw i32 %586, %587, !dbg !4103
  %588 = load i32, i32* %bw, align 4, !dbg !4103
  %div793 = sdiv i32 %588, 2, !dbg !4103
  %589 = load i32, i32* %bh, align 4, !dbg !4103
  %div794 = sdiv i32 %589, 2, !dbg !4103
  call void %580(i8* %arraydecay786, i32 8, i8* %582, i32 %584, i32 %sub791, i32 %add792, i32 %div793, i32 %div794), !dbg !4103
  %590 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4105
  %weight795 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %590, i32 0, i32 4, !dbg !4105
  %591 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight795, align 8, !dbg !4105
  %arrayidx796 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %591, i64 2, !dbg !4105
  %weightfn797 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx796, i32 0, i32 5, !dbg !4105
  %592 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn797, align 16, !dbg !4105
  %tobool798 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %592, null, !dbg !4105
  br i1 %tobool798, label %if.then799, label %if.end817, !dbg !4103

if.then799:                                       ; preds = %if.then783
  %593 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4105
  %weight800 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %593, i32 0, i32 4, !dbg !4105
  %594 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight800, align 8, !dbg !4105
  %arrayidx801 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %594, i64 2, !dbg !4105
  %weightfn802 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx801, i32 0, i32 5, !dbg !4105
  %595 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn802, align 16, !dbg !4105
  %596 = load i32, i32* %i_pixel13, align 4, !dbg !4105
  %idxprom803 = sext i32 %596 to i64, !dbg !4105
  %arrayidx804 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom803, !dbg !4105
  %w805 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx804, i32 0, i32 0, !dbg !4105
  %597 = load i32, i32* %w805, align 8, !dbg !4105
  %shr806 = ashr i32 %597, 3, !dbg !4105
  %idxprom807 = sext i32 %shr806 to i64, !dbg !4105
  %arrayidx808 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %595, i64 %idxprom807, !dbg !4105
  %598 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx808, align 8, !dbg !4105
  %arraydecay809 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4105
  %arraydecay810 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4105
  %599 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4105
  %weight811 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %599, i32 0, i32 4, !dbg !4105
  %600 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight811, align 8, !dbg !4105
  %arrayidx812 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %600, i64 2, !dbg !4105
  %601 = load i32, i32* %i_pixel13, align 4, !dbg !4105
  %idxprom813 = sext i32 %601 to i64, !dbg !4105
  %arrayidx814 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom813, !dbg !4105
  %h815 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx814, i32 0, i32 1, !dbg !4105
  %602 = load i32, i32* %h815, align 4, !dbg !4105
  %shr816 = ashr i32 %602, 1, !dbg !4105
  call void %598(i8* %arraydecay809, i32 8, i8* %arraydecay810, i32 8, %struct.x264_weight_t* %arrayidx812, i32 %shr816), !dbg !4105
  br label %if.end817, !dbg !4105

if.end817:                                        ; preds = %if.then799, %if.then783
  %603 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4103
  %pixf818 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %603, i32 0, i32 69, !dbg !4103
  %mbcmp819 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf818, i32 0, i32 5, !dbg !4103
  %604 = load i32, i32* %i_pixel13, align 4, !dbg !4103
  %add820 = add nsw i32 %604, 3, !dbg !4103
  %idxprom821 = sext i32 %add820 to i64, !dbg !4103
  %arrayidx822 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp819, i64 0, i64 %idxprom821, !dbg !4103
  %605 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx822, align 8, !dbg !4103
  %606 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4103
  %p_fenc823 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %606, i32 0, i32 7, !dbg !4103
  %arrayidx824 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc823, i64 0, i64 2, !dbg !4103
  %607 = load i8*, i8** %arrayidx824, align 8, !dbg !4103
  %arraydecay825 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4103
  %call826 = call i32 %605(i8* %607, i32 16, i8* %arraydecay825, i32 8), !dbg !4103
  %608 = load i32, i32* %cost715, align 4, !dbg !4103
  %add827 = add nsw i32 %608, %call826, !dbg !4103
  store i32 %add827, i32* %cost715, align 4, !dbg !4103
  br label %if.end828, !dbg !4103

if.end828:                                        ; preds = %if.end817, %if.end770
  br label %if.end829, !dbg !4097

if.end829:                                        ; preds = %if.end828, %land.lhs.true733, %if.then701
  %609 = load i32, i32* %cost715, align 4, !dbg !4107
  %610 = load i32, i32* %bcost, align 4, !dbg !4107
  %cmp830 = icmp slt i32 %609, %610, !dbg !4107
  br i1 %cmp830, label %if.then832, label %if.end834, !dbg !4092

if.then832:                                       ; preds = %if.end829
  %611 = load i32, i32* %cost715, align 4, !dbg !4109
  store i32 %611, i32* %bcost, align 4, !dbg !4109
  %612 = load i32, i32* %omx417, align 4, !dbg !4109
  %sub833 = sub nsw i32 %612, 1, !dbg !4109
  store i32 %sub833, i32* %bmx, align 4, !dbg !4109
  %613 = load i32, i32* %omy418, align 4, !dbg !4109
  store i32 %613, i32* %bmy, align 4, !dbg !4109
  store i32 2, i32* %bdir, align 4, !dbg !4109
  br label %if.end834, !dbg !4109

if.end834:                                        ; preds = %if.then832, %if.end829
  br label %if.end835, !dbg !4092

if.end835:                                        ; preds = %if.end834, %lor.lhs.false698
  %614 = load i32, i32* %b_refine_qpel.addr, align 4, !dbg !4111
  %tobool836 = icmp ne i32 %614, 0, !dbg !4111
  br i1 %tobool836, label %if.then840, label %lor.lhs.false837, !dbg !4111

lor.lhs.false837:                                 ; preds = %if.end835
  %615 = load i32, i32* %odir, align 4, !dbg !4111
  %cmp838 = icmp ne i32 2, %615, !dbg !4111
  br i1 %cmp838, label %if.then840, label %if.end974, !dbg !4113

if.then840:                                       ; preds = %lor.lhs.false837, %if.end835
  call void @llvm.dbg.declare(metadata i32* %stride841, metadata !4114, metadata !DIExpression()), !dbg !4116
  store i32 16, i32* %stride841, align 4, !dbg !4116
  call void @llvm.dbg.declare(metadata i8** %src842, metadata !4117, metadata !DIExpression()), !dbg !4116
  %616 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4116
  %mc843 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %616, i32 0, i32 70, !dbg !4116
  %get_ref844 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc843, i32 0, i32 1, !dbg !4116
  %617 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref844, align 8, !dbg !4116
  %arraydecay845 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4116
  %618 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4116
  %p_fref846 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %618, i32 0, i32 5, !dbg !4116
  %arraydecay847 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref846, i64 0, i64 0, !dbg !4116
  %619 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4116
  %i_stride848 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %619, i32 0, i32 9, !dbg !4116
  %arrayidx849 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride848, i64 0, i64 0, !dbg !4116
  %620 = load i32, i32* %arrayidx849, align 8, !dbg !4116
  %621 = load i32, i32* %omx417, align 4, !dbg !4116
  %add850 = add nsw i32 %621, 1, !dbg !4116
  %622 = load i32, i32* %omy418, align 4, !dbg !4116
  %623 = load i32, i32* %bw, align 4, !dbg !4116
  %624 = load i32, i32* %bh, align 4, !dbg !4116
  %625 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4116
  %weight851 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %625, i32 0, i32 4, !dbg !4116
  %626 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight851, align 8, !dbg !4116
  %arrayidx852 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %626, i64 0, !dbg !4116
  %call853 = call i8* %617(i8* %arraydecay845, i32* %stride841, i8** %arraydecay847, i32 %620, i32 %add850, i32 %622, i32 %623, i32 %624, %struct.x264_weight_t* %arrayidx852), !dbg !4116
  store i8* %call853, i8** %src842, align 8, !dbg !4116
  call void @llvm.dbg.declare(metadata i32* %cost854, metadata !4118, metadata !DIExpression()), !dbg !4116
  %627 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4116
  %pixf855 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %627, i32 0, i32 69, !dbg !4116
  %mbcmp_unaligned856 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf855, i32 0, i32 6, !dbg !4116
  %628 = load i32, i32* %i_pixel13, align 4, !dbg !4116
  %idxprom857 = sext i32 %628 to i64, !dbg !4116
  %arrayidx858 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp_unaligned856, i64 0, i64 %idxprom857, !dbg !4116
  %629 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx858, align 8, !dbg !4116
  %630 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4116
  %p_fenc859 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %630, i32 0, i32 7, !dbg !4116
  %arrayidx860 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc859, i64 0, i64 0, !dbg !4116
  %631 = load i8*, i8** %arrayidx860, align 8, !dbg !4116
  %632 = load i8*, i8** %src842, align 8, !dbg !4116
  %633 = load i32, i32* %stride841, align 4, !dbg !4116
  %call861 = call i32 %629(i8* %631, i32 16, i8* %632, i32 %633), !dbg !4116
  %634 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4116
  %635 = load i32, i32* %omx417, align 4, !dbg !4116
  %add862 = add nsw i32 %635, 1, !dbg !4116
  %idxprom863 = sext i32 %add862 to i64, !dbg !4116
  %arrayidx864 = getelementptr inbounds i16, i16* %634, i64 %idxprom863, !dbg !4116
  %636 = load i16, i16* %arrayidx864, align 2, !dbg !4116
  %conv865 = zext i16 %636 to i32, !dbg !4116
  %add866 = add nsw i32 %call861, %conv865, !dbg !4116
  %637 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4116
  %638 = load i32, i32* %omy418, align 4, !dbg !4116
  %idxprom867 = sext i32 %638 to i64, !dbg !4116
  %arrayidx868 = getelementptr inbounds i16, i16* %637, i64 %idxprom867, !dbg !4116
  %639 = load i16, i16* %arrayidx868, align 2, !dbg !4116
  %conv869 = zext i16 %639 to i32, !dbg !4116
  %add870 = add nsw i32 %add866, %conv869, !dbg !4116
  store i32 %add870, i32* %cost854, align 4, !dbg !4116
  %640 = load i32, i32* %b_chroma_me, align 4, !dbg !4119
  %tobool871 = icmp ne i32 %640, 0, !dbg !4119
  br i1 %tobool871, label %land.lhs.true872, label %if.end968, !dbg !4119

land.lhs.true872:                                 ; preds = %if.then840
  %641 = load i32, i32* %cost854, align 4, !dbg !4119
  %642 = load i32, i32* %bcost, align 4, !dbg !4119
  %cmp873 = icmp slt i32 %641, %642, !dbg !4119
  br i1 %cmp873, label %if.then875, label %if.end968, !dbg !4116

if.then875:                                       ; preds = %land.lhs.true872
  %643 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4121
  %mc876 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %643, i32 0, i32 70, !dbg !4121
  %mc_chroma877 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc876, i32 0, i32 2, !dbg !4121
  %644 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma877, align 8, !dbg !4121
  %arraydecay878 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4121
  %645 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4121
  %p_fref879 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %645, i32 0, i32 5, !dbg !4121
  %arrayidx880 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref879, i64 0, i64 4, !dbg !4121
  %646 = load i8*, i8** %arrayidx880, align 16, !dbg !4121
  %647 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4121
  %i_stride881 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %647, i32 0, i32 9, !dbg !4121
  %arrayidx882 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride881, i64 0, i64 1, !dbg !4121
  %648 = load i32, i32* %arrayidx882, align 4, !dbg !4121
  %649 = load i32, i32* %omx417, align 4, !dbg !4121
  %add883 = add nsw i32 %649, 1, !dbg !4121
  %650 = load i32, i32* %omy418, align 4, !dbg !4121
  %651 = load i32, i32* %mvy_offset, align 4, !dbg !4121
  %add884 = add nsw i32 %650, %651, !dbg !4121
  %652 = load i32, i32* %bw, align 4, !dbg !4121
  %div885 = sdiv i32 %652, 2, !dbg !4121
  %653 = load i32, i32* %bh, align 4, !dbg !4121
  %div886 = sdiv i32 %653, 2, !dbg !4121
  call void %644(i8* %arraydecay878, i32 8, i8* %646, i32 %648, i32 %add883, i32 %add884, i32 %div885, i32 %div886), !dbg !4121
  %654 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4123
  %weight887 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %654, i32 0, i32 4, !dbg !4123
  %655 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight887, align 8, !dbg !4123
  %arrayidx888 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %655, i64 1, !dbg !4123
  %weightfn889 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx888, i32 0, i32 5, !dbg !4123
  %656 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn889, align 16, !dbg !4123
  %tobool890 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %656, null, !dbg !4123
  br i1 %tobool890, label %if.then891, label %if.end909, !dbg !4121

if.then891:                                       ; preds = %if.then875
  %657 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4123
  %weight892 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %657, i32 0, i32 4, !dbg !4123
  %658 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight892, align 8, !dbg !4123
  %arrayidx893 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %658, i64 1, !dbg !4123
  %weightfn894 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx893, i32 0, i32 5, !dbg !4123
  %659 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn894, align 16, !dbg !4123
  %660 = load i32, i32* %i_pixel13, align 4, !dbg !4123
  %idxprom895 = sext i32 %660 to i64, !dbg !4123
  %arrayidx896 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom895, !dbg !4123
  %w897 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx896, i32 0, i32 0, !dbg !4123
  %661 = load i32, i32* %w897, align 8, !dbg !4123
  %shr898 = ashr i32 %661, 3, !dbg !4123
  %idxprom899 = sext i32 %shr898 to i64, !dbg !4123
  %arrayidx900 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %659, i64 %idxprom899, !dbg !4123
  %662 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx900, align 8, !dbg !4123
  %arraydecay901 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4123
  %arraydecay902 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4123
  %663 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4123
  %weight903 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %663, i32 0, i32 4, !dbg !4123
  %664 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight903, align 8, !dbg !4123
  %arrayidx904 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %664, i64 1, !dbg !4123
  %665 = load i32, i32* %i_pixel13, align 4, !dbg !4123
  %idxprom905 = sext i32 %665 to i64, !dbg !4123
  %arrayidx906 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom905, !dbg !4123
  %h907 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx906, i32 0, i32 1, !dbg !4123
  %666 = load i32, i32* %h907, align 4, !dbg !4123
  %shr908 = ashr i32 %666, 1, !dbg !4123
  call void %662(i8* %arraydecay901, i32 8, i8* %arraydecay902, i32 8, %struct.x264_weight_t* %arrayidx904, i32 %shr908), !dbg !4123
  br label %if.end909, !dbg !4123

if.end909:                                        ; preds = %if.then891, %if.then875
  %667 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4121
  %pixf910 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %667, i32 0, i32 69, !dbg !4121
  %mbcmp911 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf910, i32 0, i32 5, !dbg !4121
  %668 = load i32, i32* %i_pixel13, align 4, !dbg !4121
  %add912 = add nsw i32 %668, 3, !dbg !4121
  %idxprom913 = sext i32 %add912 to i64, !dbg !4121
  %arrayidx914 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp911, i64 0, i64 %idxprom913, !dbg !4121
  %669 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx914, align 8, !dbg !4121
  %670 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4121
  %p_fenc915 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %670, i32 0, i32 7, !dbg !4121
  %arrayidx916 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc915, i64 0, i64 1, !dbg !4121
  %671 = load i8*, i8** %arrayidx916, align 8, !dbg !4121
  %arraydecay917 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4121
  %call918 = call i32 %669(i8* %671, i32 16, i8* %arraydecay917, i32 8), !dbg !4121
  %672 = load i32, i32* %cost854, align 4, !dbg !4121
  %add919 = add nsw i32 %672, %call918, !dbg !4121
  store i32 %add919, i32* %cost854, align 4, !dbg !4121
  %673 = load i32, i32* %cost854, align 4, !dbg !4125
  %674 = load i32, i32* %bcost, align 4, !dbg !4125
  %cmp920 = icmp slt i32 %673, %674, !dbg !4125
  br i1 %cmp920, label %if.then922, label %if.end967, !dbg !4121

if.then922:                                       ; preds = %if.end909
  %675 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4127
  %mc923 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %675, i32 0, i32 70, !dbg !4127
  %mc_chroma924 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc923, i32 0, i32 2, !dbg !4127
  %676 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma924, align 8, !dbg !4127
  %arraydecay925 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4127
  %677 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4127
  %p_fref926 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %677, i32 0, i32 5, !dbg !4127
  %arrayidx927 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref926, i64 0, i64 5, !dbg !4127
  %678 = load i8*, i8** %arrayidx927, align 8, !dbg !4127
  %679 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4127
  %i_stride928 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %679, i32 0, i32 9, !dbg !4127
  %arrayidx929 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride928, i64 0, i64 1, !dbg !4127
  %680 = load i32, i32* %arrayidx929, align 4, !dbg !4127
  %681 = load i32, i32* %omx417, align 4, !dbg !4127
  %add930 = add nsw i32 %681, 1, !dbg !4127
  %682 = load i32, i32* %omy418, align 4, !dbg !4127
  %683 = load i32, i32* %mvy_offset, align 4, !dbg !4127
  %add931 = add nsw i32 %682, %683, !dbg !4127
  %684 = load i32, i32* %bw, align 4, !dbg !4127
  %div932 = sdiv i32 %684, 2, !dbg !4127
  %685 = load i32, i32* %bh, align 4, !dbg !4127
  %div933 = sdiv i32 %685, 2, !dbg !4127
  call void %676(i8* %arraydecay925, i32 8, i8* %678, i32 %680, i32 %add930, i32 %add931, i32 %div932, i32 %div933), !dbg !4127
  %686 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4129
  %weight934 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %686, i32 0, i32 4, !dbg !4129
  %687 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight934, align 8, !dbg !4129
  %arrayidx935 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %687, i64 2, !dbg !4129
  %weightfn936 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx935, i32 0, i32 5, !dbg !4129
  %688 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn936, align 16, !dbg !4129
  %tobool937 = icmp ne void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %688, null, !dbg !4129
  br i1 %tobool937, label %if.then938, label %if.end956, !dbg !4127

if.then938:                                       ; preds = %if.then922
  %689 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4129
  %weight939 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %689, i32 0, i32 4, !dbg !4129
  %690 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight939, align 8, !dbg !4129
  %arrayidx940 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %690, i64 2, !dbg !4129
  %weightfn941 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %arrayidx940, i32 0, i32 5, !dbg !4129
  %691 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)**, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*** %weightfn941, align 16, !dbg !4129
  %692 = load i32, i32* %i_pixel13, align 4, !dbg !4129
  %idxprom942 = sext i32 %692 to i64, !dbg !4129
  %arrayidx943 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom942, !dbg !4129
  %w944 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx943, i32 0, i32 0, !dbg !4129
  %693 = load i32, i32* %w944, align 8, !dbg !4129
  %shr945 = ashr i32 %693, 3, !dbg !4129
  %idxprom946 = sext i32 %shr945 to i64, !dbg !4129
  %arrayidx947 = getelementptr inbounds void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %691, i64 %idxprom946, !dbg !4129
  %694 = load void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)*, void (i8*, i32, i8*, i32, %struct.x264_weight_t*, i32)** %arrayidx947, align 8, !dbg !4129
  %arraydecay948 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4129
  %arraydecay949 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4129
  %695 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4129
  %weight950 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %695, i32 0, i32 4, !dbg !4129
  %696 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight950, align 8, !dbg !4129
  %arrayidx951 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %696, i64 2, !dbg !4129
  %697 = load i32, i32* %i_pixel13, align 4, !dbg !4129
  %idxprom952 = sext i32 %697 to i64, !dbg !4129
  %arrayidx953 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom952, !dbg !4129
  %h954 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx953, i32 0, i32 1, !dbg !4129
  %698 = load i32, i32* %h954, align 4, !dbg !4129
  %shr955 = ashr i32 %698, 1, !dbg !4129
  call void %694(i8* %arraydecay948, i32 8, i8* %arraydecay949, i32 8, %struct.x264_weight_t* %arrayidx951, i32 %shr955), !dbg !4129
  br label %if.end956, !dbg !4129

if.end956:                                        ; preds = %if.then938, %if.then922
  %699 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4127
  %pixf957 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %699, i32 0, i32 69, !dbg !4127
  %mbcmp958 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf957, i32 0, i32 5, !dbg !4127
  %700 = load i32, i32* %i_pixel13, align 4, !dbg !4127
  %add959 = add nsw i32 %700, 3, !dbg !4127
  %idxprom960 = sext i32 %add959 to i64, !dbg !4127
  %arrayidx961 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp958, i64 0, i64 %idxprom960, !dbg !4127
  %701 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx961, align 8, !dbg !4127
  %702 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4127
  %p_fenc962 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %702, i32 0, i32 7, !dbg !4127
  %arrayidx963 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc962, i64 0, i64 2, !dbg !4127
  %703 = load i8*, i8** %arrayidx963, align 8, !dbg !4127
  %arraydecay964 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4127
  %call965 = call i32 %701(i8* %703, i32 16, i8* %arraydecay964, i32 8), !dbg !4127
  %704 = load i32, i32* %cost854, align 4, !dbg !4127
  %add966 = add nsw i32 %704, %call965, !dbg !4127
  store i32 %add966, i32* %cost854, align 4, !dbg !4127
  br label %if.end967, !dbg !4127

if.end967:                                        ; preds = %if.end956, %if.end909
  br label %if.end968, !dbg !4121

if.end968:                                        ; preds = %if.end967, %land.lhs.true872, %if.then840
  %705 = load i32, i32* %cost854, align 4, !dbg !4131
  %706 = load i32, i32* %bcost, align 4, !dbg !4131
  %cmp969 = icmp slt i32 %705, %706, !dbg !4131
  br i1 %cmp969, label %if.then971, label %if.end973, !dbg !4116

if.then971:                                       ; preds = %if.end968
  %707 = load i32, i32* %cost854, align 4, !dbg !4133
  store i32 %707, i32* %bcost, align 4, !dbg !4133
  %708 = load i32, i32* %omx417, align 4, !dbg !4133
  %add972 = add nsw i32 %708, 1, !dbg !4133
  store i32 %add972, i32* %bmx, align 4, !dbg !4133
  %709 = load i32, i32* %omy418, align 4, !dbg !4133
  store i32 %709, i32* %bmy, align 4, !dbg !4133
  store i32 3, i32* %bdir, align 4, !dbg !4133
  br label %if.end973, !dbg !4133

if.end973:                                        ; preds = %if.then971, %if.end968
  br label %if.end974, !dbg !4116

if.end974:                                        ; preds = %if.end973, %lor.lhs.false837
  %710 = load i32, i32* %bmx, align 4, !dbg !4135
  %711 = load i32, i32* %omx417, align 4, !dbg !4137
  %cmp975 = icmp eq i32 %710, %711, !dbg !4138
  %conv976 = zext i1 %cmp975 to i32, !dbg !4138
  %712 = load i32, i32* %bmy, align 4, !dbg !4139
  %713 = load i32, i32* %omy418, align 4, !dbg !4140
  %cmp977 = icmp eq i32 %712, %713, !dbg !4141
  %conv978 = zext i1 %cmp977 to i32, !dbg !4141
  %and979 = and i32 %conv976, %conv978, !dbg !4142
  %tobool980 = icmp ne i32 %and979, 0, !dbg !4142
  br i1 %tobool980, label %if.then981, label %if.end982, !dbg !4143

if.then981:                                       ; preds = %if.end974
  br label %for.end985, !dbg !4144

if.end982:                                        ; preds = %if.end974
  br label %for.inc983, !dbg !4145

for.inc983:                                       ; preds = %if.end982
  %714 = load i32, i32* %i387, align 4, !dbg !4146
  %dec984 = add nsw i32 %714, -1, !dbg !4146
  store i32 %dec984, i32* %i387, align 4, !dbg !4146
  br label %for.cond388, !dbg !4147, !llvm.loop !4148

for.end985:                                       ; preds = %if.then981, %if.then415, %for.cond388
  br label %if.end1171, !dbg !4150

if.else986:                                       ; preds = %if.end381
  %715 = load i32, i32* %bmy, align 4, !dbg !4151
  %716 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4153
  %mb987 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %716, i32 0, i32 55, !dbg !4154
  %mv_min_spel988 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb987, i32 0, i32 20, !dbg !4155
  %arrayidx989 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel988, i64 0, i64 1, !dbg !4153
  %717 = load i32, i32* %arrayidx989, align 4, !dbg !4153
  %cmp990 = icmp sgt i32 %715, %717, !dbg !4156
  br i1 %cmp990, label %land.lhs.true992, label %if.end1170, !dbg !4157

land.lhs.true992:                                 ; preds = %if.else986
  %718 = load i32, i32* %bmy, align 4, !dbg !4158
  %719 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4159
  %mb993 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %719, i32 0, i32 55, !dbg !4160
  %mv_max_spel994 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb993, i32 0, i32 21, !dbg !4161
  %arrayidx995 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel994, i64 0, i64 1, !dbg !4159
  %720 = load i32, i32* %arrayidx995, align 4, !dbg !4159
  %cmp996 = icmp slt i32 %718, %720, !dbg !4162
  br i1 %cmp996, label %land.lhs.true998, label %if.end1170, !dbg !4163

land.lhs.true998:                                 ; preds = %land.lhs.true992
  %721 = load i32, i32* %bmx, align 4, !dbg !4164
  %722 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4165
  %mb999 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %722, i32 0, i32 55, !dbg !4166
  %mv_min_spel1000 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb999, i32 0, i32 20, !dbg !4167
  %arrayidx1001 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel1000, i64 0, i64 0, !dbg !4165
  %723 = load i32, i32* %arrayidx1001, align 8, !dbg !4165
  %cmp1002 = icmp sgt i32 %721, %723, !dbg !4168
  br i1 %cmp1002, label %land.lhs.true1004, label %if.end1170, !dbg !4169

land.lhs.true1004:                                ; preds = %land.lhs.true998
  %724 = load i32, i32* %bmx, align 4, !dbg !4170
  %725 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4171
  %mb1005 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %725, i32 0, i32 55, !dbg !4172
  %mv_max_spel1006 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb1005, i32 0, i32 21, !dbg !4173
  %arrayidx1007 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel1006, i64 0, i64 0, !dbg !4171
  %726 = load i32, i32* %arrayidx1007, align 16, !dbg !4171
  %cmp1008 = icmp slt i32 %724, %726, !dbg !4174
  br i1 %cmp1008, label %if.then1010, label %if.end1170, !dbg !4175

if.then1010:                                      ; preds = %land.lhs.true1004
  call void @llvm.dbg.declare(metadata [4 x i32]* %costs1011, metadata !4176, metadata !DIExpression()), !dbg !4178
  call void @llvm.dbg.declare(metadata i32* %omx1012, metadata !4179, metadata !DIExpression()), !dbg !4180
  %727 = load i32, i32* %bmx, align 4, !dbg !4181
  store i32 %727, i32* %omx1012, align 4, !dbg !4180
  call void @llvm.dbg.declare(metadata i32* %omy1013, metadata !4182, metadata !DIExpression()), !dbg !4183
  %728 = load i32, i32* %bmy, align 4, !dbg !4184
  store i32 %728, i32* %omy1013, align 4, !dbg !4183
  %729 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4185
  %mc1014 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %729, i32 0, i32 70, !dbg !4186
  %mc_luma = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc1014, i32 0, i32 0, !dbg !4187
  %730 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma, align 8, !dbg !4187
  %arraydecay1015 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4188
  %731 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4189
  %p_fref1016 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %731, i32 0, i32 5, !dbg !4190
  %arraydecay1017 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref1016, i64 0, i64 0, !dbg !4189
  %732 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4191
  %i_stride1018 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %732, i32 0, i32 9, !dbg !4192
  %arrayidx1019 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride1018, i64 0, i64 0, !dbg !4191
  %733 = load i32, i32* %arrayidx1019, align 8, !dbg !4191
  %734 = load i32, i32* %omx1012, align 4, !dbg !4193
  %735 = load i32, i32* %omy1013, align 4, !dbg !4194
  %sub1020 = sub nsw i32 %735, 1, !dbg !4195
  %736 = load i32, i32* %bw, align 4, !dbg !4196
  %737 = load i32, i32* %bh, align 4, !dbg !4197
  %738 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4198
  %weight1021 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %738, i32 0, i32 4, !dbg !4199
  %739 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight1021, align 8, !dbg !4199
  %arrayidx1022 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %739, i64 0, !dbg !4198
  call void %730(i8* %arraydecay1015, i32 64, i8** %arraydecay1017, i32 %733, i32 %734, i32 %sub1020, i32 %736, i32 %737, %struct.x264_weight_t* %arrayidx1022), !dbg !4185
  %740 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4200
  %mc1023 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %740, i32 0, i32 70, !dbg !4201
  %mc_luma1024 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc1023, i32 0, i32 0, !dbg !4202
  %741 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma1024, align 8, !dbg !4202
  %arraydecay1025 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4203
  %add.ptr1026 = getelementptr inbounds i8, i8* %arraydecay1025, i64 16, !dbg !4204
  %742 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4205
  %p_fref1027 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %742, i32 0, i32 5, !dbg !4206
  %arraydecay1028 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref1027, i64 0, i64 0, !dbg !4205
  %743 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4207
  %i_stride1029 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %743, i32 0, i32 9, !dbg !4208
  %arrayidx1030 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride1029, i64 0, i64 0, !dbg !4207
  %744 = load i32, i32* %arrayidx1030, align 8, !dbg !4207
  %745 = load i32, i32* %omx1012, align 4, !dbg !4209
  %746 = load i32, i32* %omy1013, align 4, !dbg !4210
  %add1031 = add nsw i32 %746, 1, !dbg !4211
  %747 = load i32, i32* %bw, align 4, !dbg !4212
  %748 = load i32, i32* %bh, align 4, !dbg !4213
  %749 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4214
  %weight1032 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %749, i32 0, i32 4, !dbg !4215
  %750 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight1032, align 8, !dbg !4215
  %arrayidx1033 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %750, i64 0, !dbg !4214
  call void %741(i8* %add.ptr1026, i32 64, i8** %arraydecay1028, i32 %744, i32 %745, i32 %add1031, i32 %747, i32 %748, %struct.x264_weight_t* %arrayidx1033), !dbg !4200
  %751 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4216
  %mc1034 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %751, i32 0, i32 70, !dbg !4217
  %mc_luma1035 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc1034, i32 0, i32 0, !dbg !4218
  %752 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma1035, align 8, !dbg !4218
  %arraydecay1036 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4219
  %add.ptr1037 = getelementptr inbounds i8, i8* %arraydecay1036, i64 32, !dbg !4220
  %753 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4221
  %p_fref1038 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %753, i32 0, i32 5, !dbg !4222
  %arraydecay1039 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref1038, i64 0, i64 0, !dbg !4221
  %754 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4223
  %i_stride1040 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %754, i32 0, i32 9, !dbg !4224
  %arrayidx1041 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride1040, i64 0, i64 0, !dbg !4223
  %755 = load i32, i32* %arrayidx1041, align 8, !dbg !4223
  %756 = load i32, i32* %omx1012, align 4, !dbg !4225
  %sub1042 = sub nsw i32 %756, 1, !dbg !4226
  %757 = load i32, i32* %omy1013, align 4, !dbg !4227
  %758 = load i32, i32* %bw, align 4, !dbg !4228
  %759 = load i32, i32* %bh, align 4, !dbg !4229
  %760 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4230
  %weight1043 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %760, i32 0, i32 4, !dbg !4231
  %761 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight1043, align 8, !dbg !4231
  %arrayidx1044 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %761, i64 0, !dbg !4230
  call void %752(i8* %add.ptr1037, i32 64, i8** %arraydecay1039, i32 %755, i32 %sub1042, i32 %757, i32 %758, i32 %759, %struct.x264_weight_t* %arrayidx1044), !dbg !4216
  %762 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4232
  %mc1045 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %762, i32 0, i32 70, !dbg !4233
  %mc_luma1046 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc1045, i32 0, i32 0, !dbg !4234
  %763 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma1046, align 8, !dbg !4234
  %arraydecay1047 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4235
  %add.ptr1048 = getelementptr inbounds i8, i8* %arraydecay1047, i64 48, !dbg !4236
  %764 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4237
  %p_fref1049 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %764, i32 0, i32 5, !dbg !4238
  %arraydecay1050 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref1049, i64 0, i64 0, !dbg !4237
  %765 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4239
  %i_stride1051 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %765, i32 0, i32 9, !dbg !4240
  %arrayidx1052 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride1051, i64 0, i64 0, !dbg !4239
  %766 = load i32, i32* %arrayidx1052, align 8, !dbg !4239
  %767 = load i32, i32* %omx1012, align 4, !dbg !4241
  %add1053 = add nsw i32 %767, 1, !dbg !4242
  %768 = load i32, i32* %omy1013, align 4, !dbg !4243
  %769 = load i32, i32* %bw, align 4, !dbg !4244
  %770 = load i32, i32* %bh, align 4, !dbg !4245
  %771 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4246
  %weight1054 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %771, i32 0, i32 4, !dbg !4247
  %772 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight1054, align 8, !dbg !4247
  %arrayidx1055 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %772, i64 0, !dbg !4246
  call void %763(i8* %add.ptr1048, i32 64, i8** %arraydecay1050, i32 %766, i32 %add1053, i32 %768, i32 %769, i32 %770, %struct.x264_weight_t* %arrayidx1055), !dbg !4232
  %773 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4248
  %pixf1056 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %773, i32 0, i32 69, !dbg !4249
  %fpelcmp_x41057 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf1056, i32 0, i32 9, !dbg !4250
  %774 = load i32, i32* %i_pixel13, align 4, !dbg !4251
  %idxprom1058 = sext i32 %774 to i64, !dbg !4248
  %arrayidx1059 = getelementptr inbounds [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*], [7 x void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*]* %fpelcmp_x41057, i64 0, i64 %idxprom1058, !dbg !4248
  %775 = load void (i8*, i8*, i8*, i8*, i8*, i32, i32*)*, void (i8*, i8*, i8*, i8*, i8*, i32, i32*)** %arrayidx1059, align 8, !dbg !4248
  %776 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4252
  %p_fenc1060 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %776, i32 0, i32 7, !dbg !4253
  %arrayidx1061 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc1060, i64 0, i64 0, !dbg !4252
  %777 = load i8*, i8** %arrayidx1061, align 8, !dbg !4252
  %arraydecay1062 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4254
  %arraydecay1063 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4255
  %add.ptr1064 = getelementptr inbounds i8, i8* %arraydecay1063, i64 16, !dbg !4256
  %arraydecay1065 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4257
  %add.ptr1066 = getelementptr inbounds i8, i8* %arraydecay1065, i64 32, !dbg !4258
  %arraydecay1067 = getelementptr inbounds [1152 x i8], [1152 x i8]* %pix, i64 0, i64 0, !dbg !4259
  %add.ptr1068 = getelementptr inbounds i8, i8* %arraydecay1067, i64 48, !dbg !4260
  %arraydecay1069 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 0, !dbg !4261
  call void %775(i8* %777, i8* %arraydecay1062, i8* %add.ptr1064, i8* %add.ptr1066, i8* %add.ptr1068, i32 64, i32* %arraydecay1069), !dbg !4248
  %arrayidx1070 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 0, !dbg !4262
  %778 = load i32, i32* %arrayidx1070, align 16, !dbg !4262
  %779 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4262
  %780 = load i32, i32* %omx1012, align 4, !dbg !4262
  %idxprom1071 = sext i32 %780 to i64, !dbg !4262
  %arrayidx1072 = getelementptr inbounds i16, i16* %779, i64 %idxprom1071, !dbg !4262
  %781 = load i16, i16* %arrayidx1072, align 2, !dbg !4262
  %conv1073 = zext i16 %781 to i32, !dbg !4262
  %add1074 = add nsw i32 %778, %conv1073, !dbg !4262
  %782 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4262
  %783 = load i32, i32* %omy1013, align 4, !dbg !4262
  %sub1075 = sub nsw i32 %783, 1, !dbg !4262
  %idxprom1076 = sext i32 %sub1075 to i64, !dbg !4262
  %arrayidx1077 = getelementptr inbounds i16, i16* %782, i64 %idxprom1076, !dbg !4262
  %784 = load i16, i16* %arrayidx1077, align 2, !dbg !4262
  %conv1078 = zext i16 %784 to i32, !dbg !4262
  %add1079 = add nsw i32 %add1074, %conv1078, !dbg !4262
  %785 = load i32, i32* %bcost, align 4, !dbg !4262
  %cmp1080 = icmp slt i32 %add1079, %785, !dbg !4262
  br i1 %cmp1080, label %if.then1082, label %if.end1094, !dbg !4264

if.then1082:                                      ; preds = %if.then1010
  %arrayidx1083 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 0, !dbg !4265
  %786 = load i32, i32* %arrayidx1083, align 16, !dbg !4265
  %787 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4265
  %788 = load i32, i32* %omx1012, align 4, !dbg !4265
  %idxprom1084 = sext i32 %788 to i64, !dbg !4265
  %arrayidx1085 = getelementptr inbounds i16, i16* %787, i64 %idxprom1084, !dbg !4265
  %789 = load i16, i16* %arrayidx1085, align 2, !dbg !4265
  %conv1086 = zext i16 %789 to i32, !dbg !4265
  %add1087 = add nsw i32 %786, %conv1086, !dbg !4265
  %790 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4265
  %791 = load i32, i32* %omy1013, align 4, !dbg !4265
  %sub1088 = sub nsw i32 %791, 1, !dbg !4265
  %idxprom1089 = sext i32 %sub1088 to i64, !dbg !4265
  %arrayidx1090 = getelementptr inbounds i16, i16* %790, i64 %idxprom1089, !dbg !4265
  %792 = load i16, i16* %arrayidx1090, align 2, !dbg !4265
  %conv1091 = zext i16 %792 to i32, !dbg !4265
  %add1092 = add nsw i32 %add1087, %conv1091, !dbg !4265
  store i32 %add1092, i32* %bcost, align 4, !dbg !4265
  %793 = load i32, i32* %omy1013, align 4, !dbg !4265
  %sub1093 = sub nsw i32 %793, 1, !dbg !4265
  store i32 %sub1093, i32* %bmy, align 4, !dbg !4265
  br label %if.end1094, !dbg !4265

if.end1094:                                       ; preds = %if.then1082, %if.then1010
  %arrayidx1095 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 1, !dbg !4267
  %794 = load i32, i32* %arrayidx1095, align 4, !dbg !4267
  %795 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4267
  %796 = load i32, i32* %omx1012, align 4, !dbg !4267
  %idxprom1096 = sext i32 %796 to i64, !dbg !4267
  %arrayidx1097 = getelementptr inbounds i16, i16* %795, i64 %idxprom1096, !dbg !4267
  %797 = load i16, i16* %arrayidx1097, align 2, !dbg !4267
  %conv1098 = zext i16 %797 to i32, !dbg !4267
  %add1099 = add nsw i32 %794, %conv1098, !dbg !4267
  %798 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4267
  %799 = load i32, i32* %omy1013, align 4, !dbg !4267
  %add1100 = add nsw i32 %799, 1, !dbg !4267
  %idxprom1101 = sext i32 %add1100 to i64, !dbg !4267
  %arrayidx1102 = getelementptr inbounds i16, i16* %798, i64 %idxprom1101, !dbg !4267
  %800 = load i16, i16* %arrayidx1102, align 2, !dbg !4267
  %conv1103 = zext i16 %800 to i32, !dbg !4267
  %add1104 = add nsw i32 %add1099, %conv1103, !dbg !4267
  %801 = load i32, i32* %bcost, align 4, !dbg !4267
  %cmp1105 = icmp slt i32 %add1104, %801, !dbg !4267
  br i1 %cmp1105, label %if.then1107, label %if.end1119, !dbg !4269

if.then1107:                                      ; preds = %if.end1094
  %arrayidx1108 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 1, !dbg !4270
  %802 = load i32, i32* %arrayidx1108, align 4, !dbg !4270
  %803 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4270
  %804 = load i32, i32* %omx1012, align 4, !dbg !4270
  %idxprom1109 = sext i32 %804 to i64, !dbg !4270
  %arrayidx1110 = getelementptr inbounds i16, i16* %803, i64 %idxprom1109, !dbg !4270
  %805 = load i16, i16* %arrayidx1110, align 2, !dbg !4270
  %conv1111 = zext i16 %805 to i32, !dbg !4270
  %add1112 = add nsw i32 %802, %conv1111, !dbg !4270
  %806 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4270
  %807 = load i32, i32* %omy1013, align 4, !dbg !4270
  %add1113 = add nsw i32 %807, 1, !dbg !4270
  %idxprom1114 = sext i32 %add1113 to i64, !dbg !4270
  %arrayidx1115 = getelementptr inbounds i16, i16* %806, i64 %idxprom1114, !dbg !4270
  %808 = load i16, i16* %arrayidx1115, align 2, !dbg !4270
  %conv1116 = zext i16 %808 to i32, !dbg !4270
  %add1117 = add nsw i32 %add1112, %conv1116, !dbg !4270
  store i32 %add1117, i32* %bcost, align 4, !dbg !4270
  %809 = load i32, i32* %omy1013, align 4, !dbg !4270
  %add1118 = add nsw i32 %809, 1, !dbg !4270
  store i32 %add1118, i32* %bmy, align 4, !dbg !4270
  br label %if.end1119, !dbg !4270

if.end1119:                                       ; preds = %if.then1107, %if.end1094
  %arrayidx1120 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 2, !dbg !4272
  %810 = load i32, i32* %arrayidx1120, align 8, !dbg !4272
  %811 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4272
  %812 = load i32, i32* %omx1012, align 4, !dbg !4272
  %sub1121 = sub nsw i32 %812, 1, !dbg !4272
  %idxprom1122 = sext i32 %sub1121 to i64, !dbg !4272
  %arrayidx1123 = getelementptr inbounds i16, i16* %811, i64 %idxprom1122, !dbg !4272
  %813 = load i16, i16* %arrayidx1123, align 2, !dbg !4272
  %conv1124 = zext i16 %813 to i32, !dbg !4272
  %add1125 = add nsw i32 %810, %conv1124, !dbg !4272
  %814 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4272
  %815 = load i32, i32* %omy1013, align 4, !dbg !4272
  %idxprom1126 = sext i32 %815 to i64, !dbg !4272
  %arrayidx1127 = getelementptr inbounds i16, i16* %814, i64 %idxprom1126, !dbg !4272
  %816 = load i16, i16* %arrayidx1127, align 2, !dbg !4272
  %conv1128 = zext i16 %816 to i32, !dbg !4272
  %add1129 = add nsw i32 %add1125, %conv1128, !dbg !4272
  %817 = load i32, i32* %bcost, align 4, !dbg !4272
  %cmp1130 = icmp slt i32 %add1129, %817, !dbg !4272
  br i1 %cmp1130, label %if.then1132, label %if.end1144, !dbg !4274

if.then1132:                                      ; preds = %if.end1119
  %arrayidx1133 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 2, !dbg !4275
  %818 = load i32, i32* %arrayidx1133, align 8, !dbg !4275
  %819 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4275
  %820 = load i32, i32* %omx1012, align 4, !dbg !4275
  %sub1134 = sub nsw i32 %820, 1, !dbg !4275
  %idxprom1135 = sext i32 %sub1134 to i64, !dbg !4275
  %arrayidx1136 = getelementptr inbounds i16, i16* %819, i64 %idxprom1135, !dbg !4275
  %821 = load i16, i16* %arrayidx1136, align 2, !dbg !4275
  %conv1137 = zext i16 %821 to i32, !dbg !4275
  %add1138 = add nsw i32 %818, %conv1137, !dbg !4275
  %822 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4275
  %823 = load i32, i32* %omy1013, align 4, !dbg !4275
  %idxprom1139 = sext i32 %823 to i64, !dbg !4275
  %arrayidx1140 = getelementptr inbounds i16, i16* %822, i64 %idxprom1139, !dbg !4275
  %824 = load i16, i16* %arrayidx1140, align 2, !dbg !4275
  %conv1141 = zext i16 %824 to i32, !dbg !4275
  %add1142 = add nsw i32 %add1138, %conv1141, !dbg !4275
  store i32 %add1142, i32* %bcost, align 4, !dbg !4275
  %825 = load i32, i32* %omx1012, align 4, !dbg !4275
  %sub1143 = sub nsw i32 %825, 1, !dbg !4275
  store i32 %sub1143, i32* %bmx, align 4, !dbg !4275
  %826 = load i32, i32* %omy1013, align 4, !dbg !4275
  store i32 %826, i32* %bmy, align 4, !dbg !4275
  br label %if.end1144, !dbg !4275

if.end1144:                                       ; preds = %if.then1132, %if.end1119
  %arrayidx1145 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 3, !dbg !4277
  %827 = load i32, i32* %arrayidx1145, align 4, !dbg !4277
  %828 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4277
  %829 = load i32, i32* %omx1012, align 4, !dbg !4277
  %add1146 = add nsw i32 %829, 1, !dbg !4277
  %idxprom1147 = sext i32 %add1146 to i64, !dbg !4277
  %arrayidx1148 = getelementptr inbounds i16, i16* %828, i64 %idxprom1147, !dbg !4277
  %830 = load i16, i16* %arrayidx1148, align 2, !dbg !4277
  %conv1149 = zext i16 %830 to i32, !dbg !4277
  %add1150 = add nsw i32 %827, %conv1149, !dbg !4277
  %831 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4277
  %832 = load i32, i32* %omy1013, align 4, !dbg !4277
  %idxprom1151 = sext i32 %832 to i64, !dbg !4277
  %arrayidx1152 = getelementptr inbounds i16, i16* %831, i64 %idxprom1151, !dbg !4277
  %833 = load i16, i16* %arrayidx1152, align 2, !dbg !4277
  %conv1153 = zext i16 %833 to i32, !dbg !4277
  %add1154 = add nsw i32 %add1150, %conv1153, !dbg !4277
  %834 = load i32, i32* %bcost, align 4, !dbg !4277
  %cmp1155 = icmp slt i32 %add1154, %834, !dbg !4277
  br i1 %cmp1155, label %if.then1157, label %if.end1169, !dbg !4279

if.then1157:                                      ; preds = %if.end1144
  %arrayidx1158 = getelementptr inbounds [4 x i32], [4 x i32]* %costs1011, i64 0, i64 3, !dbg !4280
  %835 = load i32, i32* %arrayidx1158, align 4, !dbg !4280
  %836 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4280
  %837 = load i32, i32* %omx1012, align 4, !dbg !4280
  %add1159 = add nsw i32 %837, 1, !dbg !4280
  %idxprom1160 = sext i32 %add1159 to i64, !dbg !4280
  %arrayidx1161 = getelementptr inbounds i16, i16* %836, i64 %idxprom1160, !dbg !4280
  %838 = load i16, i16* %arrayidx1161, align 2, !dbg !4280
  %conv1162 = zext i16 %838 to i32, !dbg !4280
  %add1163 = add nsw i32 %835, %conv1162, !dbg !4280
  %839 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4280
  %840 = load i32, i32* %omy1013, align 4, !dbg !4280
  %idxprom1164 = sext i32 %840 to i64, !dbg !4280
  %arrayidx1165 = getelementptr inbounds i16, i16* %839, i64 %idxprom1164, !dbg !4280
  %841 = load i16, i16* %arrayidx1165, align 2, !dbg !4280
  %conv1166 = zext i16 %841 to i32, !dbg !4280
  %add1167 = add nsw i32 %add1163, %conv1166, !dbg !4280
  store i32 %add1167, i32* %bcost, align 4, !dbg !4280
  %842 = load i32, i32* %omx1012, align 4, !dbg !4280
  %add1168 = add nsw i32 %842, 1, !dbg !4280
  store i32 %add1168, i32* %bmx, align 4, !dbg !4280
  %843 = load i32, i32* %omy1013, align 4, !dbg !4280
  store i32 %843, i32* %bmy, align 4, !dbg !4280
  br label %if.end1169, !dbg !4280

if.end1169:                                       ; preds = %if.then1157, %if.end1144
  br label %if.end1170, !dbg !4282

if.end1170:                                       ; preds = %if.end1169, %land.lhs.true1004, %land.lhs.true998, %land.lhs.true992, %if.else986
  br label %if.end1171

if.end1171:                                       ; preds = %if.end1170, %for.end985
  %844 = load i32, i32* %bcost, align 4, !dbg !4283
  %845 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4284
  %cost1172 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %845, i32 0, i32 12, !dbg !4285
  store i32 %844, i32* %cost1172, align 8, !dbg !4286
  %846 = load i32, i32* %bmx, align 4, !dbg !4287
  %conv1173 = trunc i32 %846 to i16, !dbg !4287
  %847 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4288
  %mv1174 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %847, i32 0, i32 13, !dbg !4289
  %arrayidx1175 = getelementptr inbounds [2 x i16], [2 x i16]* %mv1174, i64 0, i64 0, !dbg !4288
  store i16 %conv1173, i16* %arrayidx1175, align 4, !dbg !4290
  %848 = load i32, i32* %bmy, align 4, !dbg !4291
  %conv1176 = trunc i32 %848 to i16, !dbg !4291
  %849 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4292
  %mv1177 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %849, i32 0, i32 13, !dbg !4293
  %arrayidx1178 = getelementptr inbounds [2 x i16], [2 x i16]* %mv1177, i64 0, i64 1, !dbg !4292
  store i16 %conv1176, i16* %arrayidx1178, align 2, !dbg !4294
  %850 = load i16*, i16** %p_cost_mvx, align 8, !dbg !4295
  %851 = load i32, i32* %bmx, align 4, !dbg !4296
  %idxprom1179 = sext i32 %851 to i64, !dbg !4295
  %arrayidx1180 = getelementptr inbounds i16, i16* %850, i64 %idxprom1179, !dbg !4295
  %852 = load i16, i16* %arrayidx1180, align 2, !dbg !4295
  %conv1181 = zext i16 %852 to i32, !dbg !4295
  %853 = load i16*, i16** %p_cost_mvy, align 8, !dbg !4297
  %854 = load i32, i32* %bmy, align 4, !dbg !4298
  %idxprom1182 = sext i32 %854 to i64, !dbg !4297
  %arrayidx1183 = getelementptr inbounds i16, i16* %853, i64 %idxprom1182, !dbg !4297
  %855 = load i16, i16* %arrayidx1183, align 2, !dbg !4297
  %conv1184 = zext i16 %855 to i32, !dbg !4297
  %add1185 = add nsw i32 %conv1181, %conv1184, !dbg !4299
  %856 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4300
  %cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %856, i32 0, i32 11, !dbg !4301
  store i32 %add1185, i32* %cost_mv, align 4, !dbg !4302
  br label %return, !dbg !4303

return:                                           ; preds = %if.end1171, %if.then368
  ret void, !dbg !4303
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_refine_qpel(%struct.x264_t* %h, %struct.x264_me_t* %m) #0 !dbg !4304 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m.addr = alloca %struct.x264_me_t*, align 8
  %hpel = alloca i32, align 4
  %qpel = alloca i32, align 4
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !4307, metadata !DIExpression()), !dbg !4308
  store %struct.x264_me_t* %m, %struct.x264_me_t** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m.addr, metadata !4309, metadata !DIExpression()), !dbg !4310
  call void @llvm.dbg.declare(metadata i32* %hpel, metadata !4311, metadata !DIExpression()), !dbg !4312
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4313
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !4314
  %i_subpel_refine = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 10, !dbg !4315
  %1 = load i32, i32* %i_subpel_refine, align 8, !dbg !4315
  %idxprom = sext i32 %1 to i64, !dbg !4316
  %arrayidx = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom, !dbg !4316
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 0, !dbg !4316
  %2 = load i8, i8* %arrayidx1, align 4, !dbg !4316
  %conv = zext i8 %2 to i32, !dbg !4316
  store i32 %conv, i32* %hpel, align 4, !dbg !4312
  call void @llvm.dbg.declare(metadata i32* %qpel, metadata !4317, metadata !DIExpression()), !dbg !4318
  %3 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4319
  %mb2 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %3, i32 0, i32 55, !dbg !4320
  %i_subpel_refine3 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb2, i32 0, i32 10, !dbg !4321
  %4 = load i32, i32* %i_subpel_refine3, align 8, !dbg !4321
  %idxprom4 = sext i32 %4 to i64, !dbg !4322
  %arrayidx5 = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom4, !dbg !4322
  %arrayidx6 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx5, i64 0, i64 1, !dbg !4322
  %5 = load i8, i8* %arrayidx6, align 1, !dbg !4322
  %conv7 = zext i8 %5 to i32, !dbg !4322
  store i32 %conv7, i32* %qpel, align 4, !dbg !4318
  %6 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4323
  %i_pixel = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %6, i32 0, i32 0, !dbg !4325
  %7 = load i32, i32* %i_pixel, align 16, !dbg !4325
  %cmp = icmp sle i32 %7, 3, !dbg !4326
  br i1 %cmp, label %if.then, label %if.end, !dbg !4327

if.then:                                          ; preds = %entry
  %8 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4328
  %i_ref_cost = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %8, i32 0, i32 2, !dbg !4329
  %9 = load i32, i32* %i_ref_cost, align 16, !dbg !4329
  %10 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4330
  %cost = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %10, i32 0, i32 12, !dbg !4331
  %11 = load i32, i32* %cost, align 8, !dbg !4332
  %sub = sub nsw i32 %11, %9, !dbg !4332
  store i32 %sub, i32* %cost, align 8, !dbg !4332
  br label %if.end, !dbg !4330

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4333
  %13 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4334
  %14 = load i32, i32* %hpel, align 4, !dbg !4335
  %15 = load i32, i32* %qpel, align 4, !dbg !4336
  call void @refine_subpel(%struct.x264_t* %12, %struct.x264_me_t* %13, i32 %14, i32 %15, i32* null, i32 1), !dbg !4337
  ret void, !dbg !4338
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_refine_qpel_refdupe(%struct.x264_t* %h, %struct.x264_me_t* %m, i32* %p_halfpel_thresh) #0 !dbg !4339 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m.addr = alloca %struct.x264_me_t*, align 8
  %p_halfpel_thresh.addr = alloca i32*, align 8
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !4342, metadata !DIExpression()), !dbg !4343
  store %struct.x264_me_t* %m, %struct.x264_me_t** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m.addr, metadata !4344, metadata !DIExpression()), !dbg !4345
  store i32* %p_halfpel_thresh, i32** %p_halfpel_thresh.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %p_halfpel_thresh.addr, metadata !4346, metadata !DIExpression()), !dbg !4347
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4348
  %1 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !4349
  %2 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4350
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %2, i32 0, i32 55, !dbg !4350
  %i_subpel_refine = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 10, !dbg !4350
  %3 = load i32, i32* %i_subpel_refine, align 8, !dbg !4350
  %idxprom = sext i32 %3 to i64, !dbg !4350
  %arrayidx = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom, !dbg !4350
  %arrayidx1 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i64 0, i64 3, !dbg !4350
  %4 = load i8, i8* %arrayidx1, align 1, !dbg !4350
  %conv = zext i8 %4 to i32, !dbg !4350
  %cmp = icmp slt i32 2, %conv, !dbg !4350
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4350

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !4350

cond.false:                                       ; preds = %entry
  %5 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4350
  %mb3 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %5, i32 0, i32 55, !dbg !4350
  %i_subpel_refine4 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb3, i32 0, i32 10, !dbg !4350
  %6 = load i32, i32* %i_subpel_refine4, align 8, !dbg !4350
  %idxprom5 = sext i32 %6 to i64, !dbg !4350
  %arrayidx6 = getelementptr inbounds [11 x [4 x i8]], [11 x [4 x i8]]* @subpel_iterations, i64 0, i64 %idxprom5, !dbg !4350
  %arrayidx7 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx6, i64 0, i64 3, !dbg !4350
  %7 = load i8, i8* %arrayidx7, align 1, !dbg !4350
  %conv8 = zext i8 %7 to i32, !dbg !4350
  br label %cond.end, !dbg !4350

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %conv8, %cond.false ], !dbg !4350
  %8 = load i32*, i32** %p_halfpel_thresh.addr, align 8, !dbg !4351
  call void @refine_subpel(%struct.x264_t* %0, %struct.x264_me_t* %1, i32 0, i32 %cond, i32* %8, i32 0), !dbg !4352
  ret void, !dbg !4353
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_refine_bidir_satd(%struct.x264_t* %h, %struct.x264_me_t* %m0, %struct.x264_me_t* %m1, i32 %i_weight) #0 !dbg !4354 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m0.addr = alloca %struct.x264_me_t*, align 8
  %m1.addr = alloca %struct.x264_me_t*, align 8
  %i_weight.addr = alloca i32, align 4
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !4357, metadata !DIExpression()), !dbg !4358
  store %struct.x264_me_t* %m0, %struct.x264_me_t** %m0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m0.addr, metadata !4359, metadata !DIExpression()), !dbg !4360
  store %struct.x264_me_t* %m1, %struct.x264_me_t** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m1.addr, metadata !4361, metadata !DIExpression()), !dbg !4362
  store i32 %i_weight, i32* %i_weight.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_weight.addr, metadata !4363, metadata !DIExpression()), !dbg !4364
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4365
  %1 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4366
  %2 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4367
  %3 = load i32, i32* %i_weight.addr, align 4, !dbg !4368
  call void @x264_me_refine_bidir(%struct.x264_t* %0, %struct.x264_me_t* %1, %struct.x264_me_t* %2, i32 %3, i32 0, i32 0, i32 0), !dbg !4369
  ret void, !dbg !4370
}

; Function Attrs: noinline nounwind uwtable
define internal void @x264_me_refine_bidir(%struct.x264_t* %h, %struct.x264_me_t* %m0, %struct.x264_me_t* %m1, i32 %i_weight, i32 %i8, i32 %i_lambda2, i32 %rd) #0 !dbg !1425 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m0.addr = alloca %struct.x264_me_t*, align 8
  %m1.addr = alloca %struct.x264_me_t*, align 8
  %i_weight.addr = alloca i32, align 4
  %i8.addr = alloca i32, align 4
  %i_lambda2.addr = alloca i32, align 4
  %rd.addr = alloca i32, align 4
  %cache0_mv = alloca i16*, align 8
  %cache1_mv = alloca i16*, align 8
  %i_pixel = alloca i32, align 4
  %bw = alloca i32, align 4
  %bh = alloca i32, align 4
  %pixy_buf = alloca [2 x [9 x [256 x i8]]], align 16
  %pixu_buf = alloca [2 x [9 x [64 x i8]]], align 8
  %pixv_buf = alloca [2 x [9 x [64 x i8]]], align 8
  %src = alloca [2 x [9 x i8*]], align 16
  %pix = alloca i8*, align 8
  %pixu = alloca i8*, align 8
  %pixv = alloca i8*, align 8
  %ref0 = alloca i32, align 4
  %ref1 = alloca i32, align 4
  %mv0y_offset = alloca i32, align 4
  %mv1y_offset = alloca i32, align 4
  %stride = alloca [2 x [9 x i32]], align 16
  %bm0x = alloca i32, align 4
  %bm0y = alloca i32, align 4
  %bm1x = alloca i32, align 4
  %bm1y = alloca i32, align 4
  %bcost = alloca i32, align 4
  %mc_list0 = alloca i32, align 4
  %mc_list1 = alloca i32, align 4
  %bcostrd = alloca i64, align 8
  %amvd = alloca i16, align 2
  %visited = alloca [8 x [8 x [8 x i8]]], align 16
  %p_cost_m0x = alloca i16*, align 8
  %p_cost_m0y = alloca i16*, align 8
  %p_cost_m1x = alloca i16*, align 8
  %p_cost_m1y = alloca i16*, align 8
  %pass = alloca i32, align 4
  %bestj = alloca i32, align 4
  %j = alloca i32, align 4
  %m = alloca %struct.x264_me_t*, align 8
  %i = alloca i32, align 4
  %mvx = alloca i32, align 4
  %mvy = alloca i32, align 4
  %j266 = alloca i32, align 4
  %m271 = alloca %struct.x264_me_t*, align 8
  %i272 = alloca i32, align 4
  %mvx284 = alloca i32, align 4
  %mvy290 = alloca i32, align 4
  %j349 = alloca i32, align 4
  %m0x = alloca i32, align 4
  %m0y = alloca i32, align 4
  %m1x = alloca i32, align 4
  %m1y = alloca i32, align 4
  %i0 = alloca i32, align 4
  %i1 = alloca i32, align 4
  %cost = alloca i32, align 4
  %costrd = alloca i64, align 8
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !4371, metadata !DIExpression()), !dbg !4372
  store %struct.x264_me_t* %m0, %struct.x264_me_t** %m0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m0.addr, metadata !4373, metadata !DIExpression()), !dbg !4374
  store %struct.x264_me_t* %m1, %struct.x264_me_t** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m1.addr, metadata !4375, metadata !DIExpression()), !dbg !4376
  store i32 %i_weight, i32* %i_weight.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_weight.addr, metadata !4377, metadata !DIExpression()), !dbg !4378
  store i32 %i8, i32* %i8.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i8.addr, metadata !4379, metadata !DIExpression()), !dbg !4380
  store i32 %i_lambda2, i32* %i_lambda2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_lambda2.addr, metadata !4381, metadata !DIExpression()), !dbg !4382
  store i32 %rd, i32* %rd.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rd.addr, metadata !4383, metadata !DIExpression()), !dbg !4384
  call void @llvm.dbg.declare(metadata i16** %cache0_mv, metadata !4385, metadata !DIExpression()), !dbg !4386
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4387
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !4388
  %cache = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 67, !dbg !4389
  %mv = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache, i32 0, i32 4, !dbg !4390
  %arrayidx = getelementptr inbounds [2 x [40 x [2 x i16]]], [2 x [40 x [2 x i16]]]* %mv, i64 0, i64 0, !dbg !4387
  %1 = load i32, i32* %i8.addr, align 4, !dbg !4391
  %mul = mul nsw i32 %1, 4, !dbg !4392
  %idxprom = sext i32 %mul to i64, !dbg !4393
  %arrayidx1 = getelementptr inbounds [27 x i32], [27 x i32]* @x264_scan8, i64 0, i64 %idxprom, !dbg !4393
  %2 = load i32, i32* %arrayidx1, align 4, !dbg !4393
  %idxprom2 = sext i32 %2 to i64, !dbg !4387
  %arrayidx3 = getelementptr inbounds [40 x [2 x i16]], [40 x [2 x i16]]* %arrayidx, i64 0, i64 %idxprom2, !dbg !4387
  %arraydecay = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx3, i64 0, i64 0, !dbg !4387
  store i16* %arraydecay, i16** %cache0_mv, align 8, !dbg !4386
  call void @llvm.dbg.declare(metadata i16** %cache1_mv, metadata !4394, metadata !DIExpression()), !dbg !4395
  %3 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4396
  %mb4 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %3, i32 0, i32 55, !dbg !4397
  %cache5 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb4, i32 0, i32 67, !dbg !4398
  %mv6 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache5, i32 0, i32 4, !dbg !4399
  %arrayidx7 = getelementptr inbounds [2 x [40 x [2 x i16]]], [2 x [40 x [2 x i16]]]* %mv6, i64 0, i64 1, !dbg !4396
  %4 = load i32, i32* %i8.addr, align 4, !dbg !4400
  %mul8 = mul nsw i32 %4, 4, !dbg !4401
  %idxprom9 = sext i32 %mul8 to i64, !dbg !4402
  %arrayidx10 = getelementptr inbounds [27 x i32], [27 x i32]* @x264_scan8, i64 0, i64 %idxprom9, !dbg !4402
  %5 = load i32, i32* %arrayidx10, align 4, !dbg !4402
  %idxprom11 = sext i32 %5 to i64, !dbg !4396
  %arrayidx12 = getelementptr inbounds [40 x [2 x i16]], [40 x [2 x i16]]* %arrayidx7, i64 0, i64 %idxprom11, !dbg !4396
  %arraydecay13 = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx12, i64 0, i64 0, !dbg !4396
  store i16* %arraydecay13, i16** %cache1_mv, align 8, !dbg !4395
  call void @llvm.dbg.declare(metadata i32* %i_pixel, metadata !4403, metadata !DIExpression()), !dbg !4404
  %6 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4405
  %i_pixel14 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %6, i32 0, i32 0, !dbg !4406
  %7 = load i32, i32* %i_pixel14, align 16, !dbg !4406
  store i32 %7, i32* %i_pixel, align 4, !dbg !4404
  call void @llvm.dbg.declare(metadata i32* %bw, metadata !4407, metadata !DIExpression()), !dbg !4408
  %8 = load i32, i32* %i_pixel, align 4, !dbg !4409
  %idxprom15 = sext i32 %8 to i64, !dbg !4410
  %arrayidx16 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom15, !dbg !4410
  %w = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx16, i32 0, i32 0, !dbg !4411
  %9 = load i32, i32* %w, align 8, !dbg !4411
  store i32 %9, i32* %bw, align 4, !dbg !4408
  call void @llvm.dbg.declare(metadata i32* %bh, metadata !4412, metadata !DIExpression()), !dbg !4413
  %10 = load i32, i32* %i_pixel, align 4, !dbg !4414
  %idxprom17 = sext i32 %10 to i64, !dbg !4415
  %arrayidx18 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom17, !dbg !4415
  %h19 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx18, i32 0, i32 1, !dbg !4416
  %11 = load i32, i32* %h19, align 4, !dbg !4416
  store i32 %11, i32* %bh, align 4, !dbg !4413
  call void @llvm.dbg.declare(metadata [2 x [9 x [256 x i8]]]* %pixy_buf, metadata !4417, metadata !DIExpression()), !dbg !4420
  call void @llvm.dbg.declare(metadata [2 x [9 x [64 x i8]]]* %pixu_buf, metadata !4421, metadata !DIExpression()), !dbg !4424
  call void @llvm.dbg.declare(metadata [2 x [9 x [64 x i8]]]* %pixv_buf, metadata !4425, metadata !DIExpression()), !dbg !4426
  call void @llvm.dbg.declare(metadata [2 x [9 x i8*]]* %src, metadata !4427, metadata !DIExpression()), !dbg !4430
  call void @llvm.dbg.declare(metadata i8** %pix, metadata !4431, metadata !DIExpression()), !dbg !4432
  %12 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4433
  %mb20 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %12, i32 0, i32 55, !dbg !4434
  %pic = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb20, i32 0, i32 66, !dbg !4435
  %p_fdec = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic, i32 0, i32 18, !dbg !4436
  %arrayidx21 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec, i64 0, i64 0, !dbg !4433
  %13 = load i8*, i8** %arrayidx21, align 16, !dbg !4433
  %14 = load i32, i32* %i8.addr, align 4, !dbg !4437
  %shr = ashr i32 %14, 1, !dbg !4438
  %mul22 = mul nsw i32 %shr, 8, !dbg !4439
  %mul23 = mul nsw i32 %mul22, 32, !dbg !4440
  %15 = load i32, i32* %i8.addr, align 4, !dbg !4441
  %and = and i32 %15, 1, !dbg !4442
  %mul24 = mul nsw i32 %and, 8, !dbg !4443
  %add = add nsw i32 %mul23, %mul24, !dbg !4444
  %idxprom25 = sext i32 %add to i64, !dbg !4433
  %arrayidx26 = getelementptr inbounds i8, i8* %13, i64 %idxprom25, !dbg !4433
  store i8* %arrayidx26, i8** %pix, align 8, !dbg !4432
  call void @llvm.dbg.declare(metadata i8** %pixu, metadata !4445, metadata !DIExpression()), !dbg !4446
  %16 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4447
  %mb27 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %16, i32 0, i32 55, !dbg !4448
  %pic28 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb27, i32 0, i32 66, !dbg !4449
  %p_fdec29 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic28, i32 0, i32 18, !dbg !4450
  %arrayidx30 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec29, i64 0, i64 1, !dbg !4447
  %17 = load i8*, i8** %arrayidx30, align 8, !dbg !4447
  %18 = load i32, i32* %i8.addr, align 4, !dbg !4451
  %shr31 = ashr i32 %18, 1, !dbg !4452
  %mul32 = mul nsw i32 %shr31, 4, !dbg !4453
  %mul33 = mul nsw i32 %mul32, 32, !dbg !4454
  %19 = load i32, i32* %i8.addr, align 4, !dbg !4455
  %and34 = and i32 %19, 1, !dbg !4456
  %mul35 = mul nsw i32 %and34, 4, !dbg !4457
  %add36 = add nsw i32 %mul33, %mul35, !dbg !4458
  %idxprom37 = sext i32 %add36 to i64, !dbg !4447
  %arrayidx38 = getelementptr inbounds i8, i8* %17, i64 %idxprom37, !dbg !4447
  store i8* %arrayidx38, i8** %pixu, align 8, !dbg !4446
  call void @llvm.dbg.declare(metadata i8** %pixv, metadata !4459, metadata !DIExpression()), !dbg !4460
  %20 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4461
  %mb39 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %20, i32 0, i32 55, !dbg !4462
  %pic40 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb39, i32 0, i32 66, !dbg !4463
  %p_fdec41 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic40, i32 0, i32 18, !dbg !4464
  %arrayidx42 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec41, i64 0, i64 2, !dbg !4461
  %21 = load i8*, i8** %arrayidx42, align 16, !dbg !4461
  %22 = load i32, i32* %i8.addr, align 4, !dbg !4465
  %shr43 = ashr i32 %22, 1, !dbg !4466
  %mul44 = mul nsw i32 %shr43, 4, !dbg !4467
  %mul45 = mul nsw i32 %mul44, 32, !dbg !4468
  %23 = load i32, i32* %i8.addr, align 4, !dbg !4469
  %and46 = and i32 %23, 1, !dbg !4470
  %mul47 = mul nsw i32 %and46, 4, !dbg !4471
  %add48 = add nsw i32 %mul45, %mul47, !dbg !4472
  %idxprom49 = sext i32 %add48 to i64, !dbg !4461
  %arrayidx50 = getelementptr inbounds i8, i8* %21, i64 %idxprom49, !dbg !4461
  store i8* %arrayidx50, i8** %pixv, align 8, !dbg !4460
  call void @llvm.dbg.declare(metadata i32* %ref0, metadata !4473, metadata !DIExpression()), !dbg !4474
  %24 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4475
  %mb51 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %24, i32 0, i32 55, !dbg !4476
  %cache52 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb51, i32 0, i32 67, !dbg !4477
  %ref = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache52, i32 0, i32 3, !dbg !4478
  %arrayidx53 = getelementptr inbounds [2 x [40 x i8]], [2 x [40 x i8]]* %ref, i64 0, i64 0, !dbg !4475
  %25 = load i32, i32* %i8.addr, align 4, !dbg !4479
  %mul54 = mul nsw i32 %25, 4, !dbg !4480
  %idxprom55 = sext i32 %mul54 to i64, !dbg !4481
  %arrayidx56 = getelementptr inbounds [27 x i32], [27 x i32]* @x264_scan8, i64 0, i64 %idxprom55, !dbg !4481
  %26 = load i32, i32* %arrayidx56, align 4, !dbg !4481
  %idxprom57 = sext i32 %26 to i64, !dbg !4475
  %arrayidx58 = getelementptr inbounds [40 x i8], [40 x i8]* %arrayidx53, i64 0, i64 %idxprom57, !dbg !4475
  %27 = load i8, i8* %arrayidx58, align 1, !dbg !4475
  %conv = sext i8 %27 to i32, !dbg !4475
  store i32 %conv, i32* %ref0, align 4, !dbg !4474
  call void @llvm.dbg.declare(metadata i32* %ref1, metadata !4482, metadata !DIExpression()), !dbg !4483
  %28 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4484
  %mb59 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %28, i32 0, i32 55, !dbg !4485
  %cache60 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb59, i32 0, i32 67, !dbg !4486
  %ref61 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache60, i32 0, i32 3, !dbg !4487
  %arrayidx62 = getelementptr inbounds [2 x [40 x i8]], [2 x [40 x i8]]* %ref61, i64 0, i64 1, !dbg !4484
  %29 = load i32, i32* %i8.addr, align 4, !dbg !4488
  %mul63 = mul nsw i32 %29, 4, !dbg !4489
  %idxprom64 = sext i32 %mul63 to i64, !dbg !4490
  %arrayidx65 = getelementptr inbounds [27 x i32], [27 x i32]* @x264_scan8, i64 0, i64 %idxprom64, !dbg !4490
  %30 = load i32, i32* %arrayidx65, align 4, !dbg !4490
  %idxprom66 = sext i32 %30 to i64, !dbg !4484
  %arrayidx67 = getelementptr inbounds [40 x i8], [40 x i8]* %arrayidx62, i64 0, i64 %idxprom66, !dbg !4484
  %31 = load i8, i8* %arrayidx67, align 1, !dbg !4484
  %conv68 = sext i8 %31 to i32, !dbg !4484
  store i32 %conv68, i32* %ref1, align 4, !dbg !4483
  call void @llvm.dbg.declare(metadata i32* %mv0y_offset, metadata !4491, metadata !DIExpression()), !dbg !4492
  %32 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4493
  %mb69 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %32, i32 0, i32 55, !dbg !4494
  %b_interlaced = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb69, i32 0, i32 17, !dbg !4495
  %33 = load i32, i32* %b_interlaced, align 4, !dbg !4495
  %34 = load i32, i32* %ref0, align 4, !dbg !4496
  %and70 = and i32 %33, %34, !dbg !4497
  %tobool = icmp ne i32 %and70, 0, !dbg !4497
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4493

cond.true:                                        ; preds = %entry
  %35 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4498
  %mb71 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %35, i32 0, i32 55, !dbg !4499
  %i_mb_y = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb71, i32 0, i32 5, !dbg !4500
  %36 = load i32, i32* %i_mb_y, align 4, !dbg !4500
  %and72 = and i32 %36, 1, !dbg !4501
  %mul73 = mul nsw i32 %and72, 4, !dbg !4502
  %sub = sub nsw i32 %mul73, 2, !dbg !4503
  br label %cond.end, !dbg !4493

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !4493
  store i32 %cond, i32* %mv0y_offset, align 4, !dbg !4492
  call void @llvm.dbg.declare(metadata i32* %mv1y_offset, metadata !4504, metadata !DIExpression()), !dbg !4505
  %37 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4506
  %mb74 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %37, i32 0, i32 55, !dbg !4507
  %b_interlaced75 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb74, i32 0, i32 17, !dbg !4508
  %38 = load i32, i32* %b_interlaced75, align 4, !dbg !4508
  %39 = load i32, i32* %ref1, align 4, !dbg !4509
  %and76 = and i32 %38, %39, !dbg !4510
  %tobool77 = icmp ne i32 %and76, 0, !dbg !4510
  br i1 %tobool77, label %cond.true78, label %cond.false84, !dbg !4506

cond.true78:                                      ; preds = %cond.end
  %40 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4511
  %mb79 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %40, i32 0, i32 55, !dbg !4512
  %i_mb_y80 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb79, i32 0, i32 5, !dbg !4513
  %41 = load i32, i32* %i_mb_y80, align 4, !dbg !4513
  %and81 = and i32 %41, 1, !dbg !4514
  %mul82 = mul nsw i32 %and81, 4, !dbg !4515
  %sub83 = sub nsw i32 %mul82, 2, !dbg !4516
  br label %cond.end85, !dbg !4506

cond.false84:                                     ; preds = %cond.end
  br label %cond.end85, !dbg !4506

cond.end85:                                       ; preds = %cond.false84, %cond.true78
  %cond86 = phi i32 [ %sub83, %cond.true78 ], [ 0, %cond.false84 ], !dbg !4506
  store i32 %cond86, i32* %mv1y_offset, align 4, !dbg !4505
  call void @llvm.dbg.declare(metadata [2 x [9 x i32]]* %stride, metadata !4517, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.declare(metadata i32* %bm0x, metadata !4520, metadata !DIExpression()), !dbg !4521
  %42 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4522
  %mv87 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %42, i32 0, i32 13, !dbg !4523
  %arrayidx88 = getelementptr inbounds [2 x i16], [2 x i16]* %mv87, i64 0, i64 0, !dbg !4522
  %43 = load i16, i16* %arrayidx88, align 4, !dbg !4522
  %conv89 = sext i16 %43 to i32, !dbg !4522
  store i32 %conv89, i32* %bm0x, align 4, !dbg !4521
  call void @llvm.dbg.declare(metadata i32* %bm0y, metadata !4524, metadata !DIExpression()), !dbg !4525
  %44 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4526
  %mv90 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %44, i32 0, i32 13, !dbg !4527
  %arrayidx91 = getelementptr inbounds [2 x i16], [2 x i16]* %mv90, i64 0, i64 1, !dbg !4526
  %45 = load i16, i16* %arrayidx91, align 2, !dbg !4526
  %conv92 = sext i16 %45 to i32, !dbg !4526
  store i32 %conv92, i32* %bm0y, align 4, !dbg !4525
  call void @llvm.dbg.declare(metadata i32* %bm1x, metadata !4528, metadata !DIExpression()), !dbg !4529
  %46 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4530
  %mv93 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %46, i32 0, i32 13, !dbg !4531
  %arrayidx94 = getelementptr inbounds [2 x i16], [2 x i16]* %mv93, i64 0, i64 0, !dbg !4530
  %47 = load i16, i16* %arrayidx94, align 4, !dbg !4530
  %conv95 = sext i16 %47 to i32, !dbg !4530
  store i32 %conv95, i32* %bm1x, align 4, !dbg !4529
  call void @llvm.dbg.declare(metadata i32* %bm1y, metadata !4532, metadata !DIExpression()), !dbg !4533
  %48 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4534
  %mv96 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %48, i32 0, i32 13, !dbg !4535
  %arrayidx97 = getelementptr inbounds [2 x i16], [2 x i16]* %mv96, i64 0, i64 1, !dbg !4534
  %49 = load i16, i16* %arrayidx97, align 2, !dbg !4534
  %conv98 = sext i16 %49 to i32, !dbg !4534
  store i32 %conv98, i32* %bm1y, align 4, !dbg !4533
  call void @llvm.dbg.declare(metadata i32* %bcost, metadata !4536, metadata !DIExpression()), !dbg !4537
  store i32 268435456, i32* %bcost, align 4, !dbg !4537
  call void @llvm.dbg.declare(metadata i32* %mc_list0, metadata !4538, metadata !DIExpression()), !dbg !4539
  store i32 1, i32* %mc_list0, align 4, !dbg !4539
  call void @llvm.dbg.declare(metadata i32* %mc_list1, metadata !4540, metadata !DIExpression()), !dbg !4541
  store i32 1, i32* %mc_list1, align 4, !dbg !4541
  call void @llvm.dbg.declare(metadata i64* %bcostrd, metadata !4542, metadata !DIExpression()), !dbg !4543
  store i64 1152921504606846976, i64* %bcostrd, align 8, !dbg !4543
  call void @llvm.dbg.declare(metadata i16* %amvd, metadata !4544, metadata !DIExpression()), !dbg !4545
  call void @llvm.dbg.declare(metadata [8 x [8 x [8 x i8]]]* %visited, metadata !4546, metadata !DIExpression()), !dbg !4549
  %50 = load i32, i32* %bm0y, align 4, !dbg !4550
  %51 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4552
  %mb99 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %51, i32 0, i32 55, !dbg !4553
  %mv_min_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb99, i32 0, i32 20, !dbg !4554
  %arrayidx100 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel, i64 0, i64 1, !dbg !4552
  %52 = load i32, i32* %arrayidx100, align 4, !dbg !4552
  %add101 = add nsw i32 %52, 8, !dbg !4555
  %cmp = icmp slt i32 %50, %add101, !dbg !4556
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4557

lor.lhs.false:                                    ; preds = %cond.end85
  %53 = load i32, i32* %bm1y, align 4, !dbg !4558
  %54 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4559
  %mb103 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %54, i32 0, i32 55, !dbg !4560
  %mv_min_spel104 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb103, i32 0, i32 20, !dbg !4561
  %arrayidx105 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel104, i64 0, i64 1, !dbg !4559
  %55 = load i32, i32* %arrayidx105, align 4, !dbg !4559
  %add106 = add nsw i32 %55, 8, !dbg !4562
  %cmp107 = icmp slt i32 %53, %add106, !dbg !4563
  br i1 %cmp107, label %if.then, label %lor.lhs.false109, !dbg !4564

lor.lhs.false109:                                 ; preds = %lor.lhs.false
  %56 = load i32, i32* %bm0y, align 4, !dbg !4565
  %57 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4566
  %mb110 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %57, i32 0, i32 55, !dbg !4567
  %mv_max_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb110, i32 0, i32 21, !dbg !4568
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel, i64 0, i64 1, !dbg !4566
  %58 = load i32, i32* %arrayidx111, align 4, !dbg !4566
  %sub112 = sub nsw i32 %58, 8, !dbg !4569
  %cmp113 = icmp sgt i32 %56, %sub112, !dbg !4570
  br i1 %cmp113, label %if.then, label %lor.lhs.false115, !dbg !4571

lor.lhs.false115:                                 ; preds = %lor.lhs.false109
  %59 = load i32, i32* %bm1y, align 4, !dbg !4572
  %60 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4573
  %mb116 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %60, i32 0, i32 55, !dbg !4574
  %mv_max_spel117 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb116, i32 0, i32 21, !dbg !4575
  %arrayidx118 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel117, i64 0, i64 1, !dbg !4573
  %61 = load i32, i32* %arrayidx118, align 4, !dbg !4573
  %sub119 = sub nsw i32 %61, 8, !dbg !4576
  %cmp120 = icmp sgt i32 %59, %sub119, !dbg !4577
  br i1 %cmp120, label %if.then, label %lor.lhs.false122, !dbg !4578

lor.lhs.false122:                                 ; preds = %lor.lhs.false115
  %62 = load i32, i32* %bm0x, align 4, !dbg !4579
  %63 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4580
  %mb123 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %63, i32 0, i32 55, !dbg !4581
  %mv_min_spel124 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb123, i32 0, i32 20, !dbg !4582
  %arrayidx125 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel124, i64 0, i64 0, !dbg !4580
  %64 = load i32, i32* %arrayidx125, align 8, !dbg !4580
  %add126 = add nsw i32 %64, 8, !dbg !4583
  %cmp127 = icmp slt i32 %62, %add126, !dbg !4584
  br i1 %cmp127, label %if.then, label %lor.lhs.false129, !dbg !4585

lor.lhs.false129:                                 ; preds = %lor.lhs.false122
  %65 = load i32, i32* %bm1x, align 4, !dbg !4586
  %66 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4587
  %mb130 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %66, i32 0, i32 55, !dbg !4588
  %mv_min_spel131 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb130, i32 0, i32 20, !dbg !4589
  %arrayidx132 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel131, i64 0, i64 0, !dbg !4587
  %67 = load i32, i32* %arrayidx132, align 8, !dbg !4587
  %add133 = add nsw i32 %67, 8, !dbg !4590
  %cmp134 = icmp slt i32 %65, %add133, !dbg !4591
  br i1 %cmp134, label %if.then, label %lor.lhs.false136, !dbg !4592

lor.lhs.false136:                                 ; preds = %lor.lhs.false129
  %68 = load i32, i32* %bm0x, align 4, !dbg !4593
  %69 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4594
  %mb137 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %69, i32 0, i32 55, !dbg !4595
  %mv_max_spel138 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb137, i32 0, i32 21, !dbg !4596
  %arrayidx139 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel138, i64 0, i64 0, !dbg !4594
  %70 = load i32, i32* %arrayidx139, align 16, !dbg !4594
  %sub140 = sub nsw i32 %70, 8, !dbg !4597
  %cmp141 = icmp sgt i32 %68, %sub140, !dbg !4598
  br i1 %cmp141, label %if.then, label %lor.lhs.false143, !dbg !4599

lor.lhs.false143:                                 ; preds = %lor.lhs.false136
  %71 = load i32, i32* %bm1x, align 4, !dbg !4600
  %72 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4601
  %mb144 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %72, i32 0, i32 55, !dbg !4602
  %mv_max_spel145 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb144, i32 0, i32 21, !dbg !4603
  %arrayidx146 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel145, i64 0, i64 0, !dbg !4601
  %73 = load i32, i32* %arrayidx146, align 16, !dbg !4601
  %sub147 = sub nsw i32 %73, 8, !dbg !4604
  %cmp148 = icmp sgt i32 %71, %sub147, !dbg !4605
  br i1 %cmp148, label %if.then, label %if.end, !dbg !4606

if.then:                                          ; preds = %lor.lhs.false143, %lor.lhs.false136, %lor.lhs.false129, %lor.lhs.false122, %lor.lhs.false115, %lor.lhs.false109, %lor.lhs.false, %cond.end85
  br label %return, !dbg !4607

if.end:                                           ; preds = %lor.lhs.false143
  %74 = load i32, i32* %rd.addr, align 4, !dbg !4608
  %tobool150 = icmp ne i32 %74, 0, !dbg !4608
  br i1 %tobool150, label %land.lhs.true, label %if.end164, !dbg !4610

land.lhs.true:                                    ; preds = %if.end
  %75 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4611
  %i_pixel151 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %75, i32 0, i32 0, !dbg !4612
  %76 = load i32, i32* %i_pixel151, align 16, !dbg !4612
  %cmp152 = icmp ne i32 %76, 0, !dbg !4613
  br i1 %cmp152, label %land.lhs.true154, label %if.end164, !dbg !4614

land.lhs.true154:                                 ; preds = %land.lhs.true
  %77 = load i32, i32* %i8.addr, align 4, !dbg !4615
  %cmp155 = icmp ne i32 %77, 0, !dbg !4616
  br i1 %cmp155, label %if.then157, label %if.end164, !dbg !4617

if.then157:                                       ; preds = %land.lhs.true154
  %78 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4618
  %79 = load i32, i32* %i8.addr, align 4, !dbg !4620
  %shl = shl i32 %79, 2, !dbg !4621
  %80 = load i32, i32* %bw, align 4, !dbg !4622
  %shr158 = ashr i32 %80, 2, !dbg !4623
  %81 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4624
  %mvp = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %81, i32 0, i32 10, !dbg !4625
  %arraydecay159 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp, i64 0, i64 0, !dbg !4624
  call void @x264_mb_predict_mv(%struct.x264_t* %78, i32 0, i32 %shl, i32 %shr158, i16* %arraydecay159), !dbg !4626
  %82 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4627
  %83 = load i32, i32* %i8.addr, align 4, !dbg !4628
  %shl160 = shl i32 %83, 2, !dbg !4629
  %84 = load i32, i32* %bw, align 4, !dbg !4630
  %shr161 = ashr i32 %84, 2, !dbg !4631
  %85 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4632
  %mvp162 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %85, i32 0, i32 10, !dbg !4633
  %arraydecay163 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp162, i64 0, i64 0, !dbg !4632
  call void @x264_mb_predict_mv(%struct.x264_t* %82, i32 1, i32 %shl160, i32 %shr161, i16* %arraydecay163), !dbg !4634
  br label %if.end164, !dbg !4635

if.end164:                                        ; preds = %if.then157, %land.lhs.true154, %land.lhs.true, %if.end
  call void @llvm.dbg.declare(metadata i16** %p_cost_m0x, metadata !4636, metadata !DIExpression()), !dbg !4637
  %86 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4638
  %p_cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %86, i32 0, i32 1, !dbg !4639
  %87 = load i16*, i16** %p_cost_mv, align 8, !dbg !4639
  %88 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4640
  %mvp165 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %88, i32 0, i32 10, !dbg !4641
  %arrayidx166 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp165, i64 0, i64 0, !dbg !4640
  %89 = load i16, i16* %arrayidx166, align 16, !dbg !4640
  %conv167 = sext i16 %89 to i32, !dbg !4640
  %idx.ext = sext i32 %conv167 to i64, !dbg !4642
  %idx.neg = sub i64 0, %idx.ext, !dbg !4642
  %add.ptr = getelementptr inbounds i16, i16* %87, i64 %idx.neg, !dbg !4642
  store i16* %add.ptr, i16** %p_cost_m0x, align 8, !dbg !4637
  call void @llvm.dbg.declare(metadata i16** %p_cost_m0y, metadata !4643, metadata !DIExpression()), !dbg !4644
  %90 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4645
  %p_cost_mv168 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %90, i32 0, i32 1, !dbg !4646
  %91 = load i16*, i16** %p_cost_mv168, align 8, !dbg !4646
  %92 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4647
  %mvp169 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %92, i32 0, i32 10, !dbg !4648
  %arrayidx170 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp169, i64 0, i64 1, !dbg !4647
  %93 = load i16, i16* %arrayidx170, align 2, !dbg !4647
  %conv171 = sext i16 %93 to i32, !dbg !4647
  %idx.ext172 = sext i32 %conv171 to i64, !dbg !4649
  %idx.neg173 = sub i64 0, %idx.ext172, !dbg !4649
  %add.ptr174 = getelementptr inbounds i16, i16* %91, i64 %idx.neg173, !dbg !4649
  store i16* %add.ptr174, i16** %p_cost_m0y, align 8, !dbg !4644
  call void @llvm.dbg.declare(metadata i16** %p_cost_m1x, metadata !4650, metadata !DIExpression()), !dbg !4651
  %94 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4652
  %p_cost_mv175 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %94, i32 0, i32 1, !dbg !4653
  %95 = load i16*, i16** %p_cost_mv175, align 8, !dbg !4653
  %96 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4654
  %mvp176 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %96, i32 0, i32 10, !dbg !4655
  %arrayidx177 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp176, i64 0, i64 0, !dbg !4654
  %97 = load i16, i16* %arrayidx177, align 16, !dbg !4654
  %conv178 = sext i16 %97 to i32, !dbg !4654
  %idx.ext179 = sext i32 %conv178 to i64, !dbg !4656
  %idx.neg180 = sub i64 0, %idx.ext179, !dbg !4656
  %add.ptr181 = getelementptr inbounds i16, i16* %95, i64 %idx.neg180, !dbg !4656
  store i16* %add.ptr181, i16** %p_cost_m1x, align 8, !dbg !4651
  call void @llvm.dbg.declare(metadata i16** %p_cost_m1y, metadata !4657, metadata !DIExpression()), !dbg !4658
  %98 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4659
  %p_cost_mv182 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %98, i32 0, i32 1, !dbg !4660
  %99 = load i16*, i16** %p_cost_mv182, align 8, !dbg !4660
  %100 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4661
  %mvp183 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %100, i32 0, i32 10, !dbg !4662
  %arrayidx184 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp183, i64 0, i64 1, !dbg !4661
  %101 = load i16, i16* %arrayidx184, align 2, !dbg !4661
  %conv185 = sext i16 %101 to i32, !dbg !4661
  %idx.ext186 = sext i32 %conv185 to i64, !dbg !4663
  %idx.neg187 = sub i64 0, %idx.ext186, !dbg !4663
  %add.ptr188 = getelementptr inbounds i16, i16* %99, i64 %idx.neg187, !dbg !4663
  store i16* %add.ptr188, i16** %p_cost_m1y, align 8, !dbg !4658
  %102 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4664
  %mc = getelementptr inbounds %struct.x264_t, %struct.x264_t* %102, i32 0, i32 70, !dbg !4665
  %memzero_aligned = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc, i32 0, i32 11, !dbg !4666
  %103 = load void (i8*, i32)*, void (i8*, i32)** %memzero_aligned, align 8, !dbg !4666
  %arraydecay189 = getelementptr inbounds [8 x [8 x [8 x i8]]], [8 x [8 x [8 x i8]]]* %visited, i64 0, i64 0, !dbg !4667
  %104 = bitcast [8 x [8 x i8]]* %arraydecay189 to i8*, !dbg !4667
  call void %103(i8* %104, i32 512), !dbg !4664
  call void @llvm.dbg.declare(metadata i32* %pass, metadata !4668, metadata !DIExpression()), !dbg !4670
  store i32 0, i32* %pass, align 4, !dbg !4670
  br label %for.cond, !dbg !4671

for.cond:                                         ; preds = %for.inc555, %if.end164
  %105 = load i32, i32* %pass, align 4, !dbg !4672
  %cmp190 = icmp slt i32 %105, 8, !dbg !4674
  br i1 %cmp190, label %for.body, label %for.end557, !dbg !4675

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %bestj, metadata !4676, metadata !DIExpression()), !dbg !4678
  store i32 0, i32* %bestj, align 4, !dbg !4678
  %106 = load i32, i32* %mc_list0, align 4, !dbg !4679
  %tobool192 = icmp ne i32 %106, 0, !dbg !4679
  br i1 %tobool192, label %if.then193, label %if.end263, !dbg !4681

if.then193:                                       ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4682, metadata !DIExpression()), !dbg !4684
  %107 = load i32, i32* @x264_iter_kludge, align 4, !dbg !4685
  store i32 %107, i32* %j, align 4, !dbg !4684
  br label %for.cond194, !dbg !4686

for.cond194:                                      ; preds = %for.inc, %if.then193
  %108 = load i32, i32* %j, align 4, !dbg !4687
  %cmp195 = icmp slt i32 %108, 9, !dbg !4689
  br i1 %cmp195, label %for.body197, label %for.end, !dbg !4690

for.body197:                                      ; preds = %for.cond194
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m, metadata !4691, metadata !DIExpression()), !dbg !4693
  %109 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4693
  store %struct.x264_me_t* %109, %struct.x264_me_t** %m, align 8, !dbg !4693
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4694, metadata !DIExpression()), !dbg !4693
  %110 = load i32, i32* %j, align 4, !dbg !4693
  %idxprom198 = sext i32 %110 to i64, !dbg !4693
  %arrayidx199 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom198, !dbg !4693
  %arrayidx200 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx199, i64 0, i64 0, !dbg !4693
  %111 = load i8, i8* %arrayidx200, align 2, !dbg !4693
  %conv201 = sext i8 %111 to i32, !dbg !4693
  %mul202 = mul nsw i32 3, %conv201, !dbg !4693
  %add203 = add nsw i32 4, %mul202, !dbg !4693
  %112 = load i32, i32* %j, align 4, !dbg !4693
  %idxprom204 = sext i32 %112 to i64, !dbg !4693
  %arrayidx205 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom204, !dbg !4693
  %arrayidx206 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx205, i64 0, i64 1, !dbg !4693
  %113 = load i8, i8* %arrayidx206, align 1, !dbg !4693
  %conv207 = sext i8 %113 to i32, !dbg !4693
  %add208 = add nsw i32 %add203, %conv207, !dbg !4693
  store i32 %add208, i32* %i, align 4, !dbg !4693
  call void @llvm.dbg.declare(metadata i32* %mvx, metadata !4695, metadata !DIExpression()), !dbg !4693
  %114 = load i32, i32* %bm0x, align 4, !dbg !4693
  %115 = load i32, i32* %j, align 4, !dbg !4693
  %idxprom209 = sext i32 %115 to i64, !dbg !4693
  %arrayidx210 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom209, !dbg !4693
  %arrayidx211 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx210, i64 0, i64 0, !dbg !4693
  %116 = load i8, i8* %arrayidx211, align 2, !dbg !4693
  %conv212 = sext i8 %116 to i32, !dbg !4693
  %add213 = add nsw i32 %114, %conv212, !dbg !4693
  store i32 %add213, i32* %mvx, align 4, !dbg !4693
  call void @llvm.dbg.declare(metadata i32* %mvy, metadata !4696, metadata !DIExpression()), !dbg !4693
  %117 = load i32, i32* %bm0y, align 4, !dbg !4693
  %118 = load i32, i32* %j, align 4, !dbg !4693
  %idxprom214 = sext i32 %118 to i64, !dbg !4693
  %arrayidx215 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom214, !dbg !4693
  %arrayidx216 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx215, i64 0, i64 1, !dbg !4693
  %119 = load i8, i8* %arrayidx216, align 1, !dbg !4693
  %conv217 = sext i8 %119 to i32, !dbg !4693
  %add218 = add nsw i32 %117, %conv217, !dbg !4693
  store i32 %add218, i32* %mvy, align 4, !dbg !4693
  %120 = load i32, i32* %bw, align 4, !dbg !4693
  %arrayidx219 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 0, !dbg !4693
  %121 = load i32, i32* %i, align 4, !dbg !4693
  %idxprom220 = sext i32 %121 to i64, !dbg !4693
  %arrayidx221 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx219, i64 0, i64 %idxprom220, !dbg !4693
  store i32 %120, i32* %arrayidx221, align 4, !dbg !4693
  %122 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4693
  %mc222 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %122, i32 0, i32 70, !dbg !4693
  %get_ref = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc222, i32 0, i32 1, !dbg !4693
  %123 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref, align 8, !dbg !4693
  %arrayidx223 = getelementptr inbounds [2 x [9 x [256 x i8]]], [2 x [9 x [256 x i8]]]* %pixy_buf, i64 0, i64 0, !dbg !4693
  %124 = load i32, i32* %i, align 4, !dbg !4693
  %idxprom224 = sext i32 %124 to i64, !dbg !4693
  %arrayidx225 = getelementptr inbounds [9 x [256 x i8]], [9 x [256 x i8]]* %arrayidx223, i64 0, i64 %idxprom224, !dbg !4693
  %arraydecay226 = getelementptr inbounds [256 x i8], [256 x i8]* %arrayidx225, i64 0, i64 0, !dbg !4693
  %arrayidx227 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 0, !dbg !4693
  %125 = load i32, i32* %i, align 4, !dbg !4693
  %idxprom228 = sext i32 %125 to i64, !dbg !4693
  %arrayidx229 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx227, i64 0, i64 %idxprom228, !dbg !4693
  %126 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4693
  %p_fref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %126, i32 0, i32 5, !dbg !4693
  %arraydecay230 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref, i64 0, i64 0, !dbg !4693
  %127 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4693
  %i_stride = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %127, i32 0, i32 9, !dbg !4693
  %arrayidx231 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride, i64 0, i64 0, !dbg !4693
  %128 = load i32, i32* %arrayidx231, align 8, !dbg !4693
  %129 = load i32, i32* %mvx, align 4, !dbg !4693
  %130 = load i32, i32* %mvy, align 4, !dbg !4693
  %131 = load i32, i32* %bw, align 4, !dbg !4693
  %132 = load i32, i32* %bh, align 4, !dbg !4693
  %call = call i8* %123(i8* %arraydecay226, i32* %arrayidx229, i8** %arraydecay230, i32 %128, i32 %129, i32 %130, i32 %131, i32 %132, %struct.x264_weight_t* getelementptr inbounds ([3 x %struct.x264_weight_t], [3 x %struct.x264_weight_t]* @weight_none, i64 0, i64 0)), !dbg !4693
  %arrayidx232 = getelementptr inbounds [2 x [9 x i8*]], [2 x [9 x i8*]]* %src, i64 0, i64 0, !dbg !4693
  %133 = load i32, i32* %i, align 4, !dbg !4693
  %idxprom233 = sext i32 %133 to i64, !dbg !4693
  %arrayidx234 = getelementptr inbounds [9 x i8*], [9 x i8*]* %arrayidx232, i64 0, i64 %idxprom233, !dbg !4693
  store i8* %call, i8** %arrayidx234, align 8, !dbg !4693
  %134 = load i32, i32* %rd.addr, align 4, !dbg !4697
  %tobool235 = icmp ne i32 %134, 0, !dbg !4697
  br i1 %tobool235, label %if.then236, label %if.end262, !dbg !4693

if.then236:                                       ; preds = %for.body197
  %135 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4699
  %mc237 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %135, i32 0, i32 70, !dbg !4699
  %mc_chroma = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc237, i32 0, i32 2, !dbg !4699
  %136 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma, align 8, !dbg !4699
  %arrayidx238 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixu_buf, i64 0, i64 0, !dbg !4699
  %137 = load i32, i32* %i, align 4, !dbg !4699
  %idxprom239 = sext i32 %137 to i64, !dbg !4699
  %arrayidx240 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx238, i64 0, i64 %idxprom239, !dbg !4699
  %arraydecay241 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx240, i64 0, i64 0, !dbg !4699
  %138 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4699
  %p_fref242 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %138, i32 0, i32 5, !dbg !4699
  %arrayidx243 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref242, i64 0, i64 4, !dbg !4699
  %139 = load i8*, i8** %arrayidx243, align 16, !dbg !4699
  %140 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4699
  %i_stride244 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %140, i32 0, i32 9, !dbg !4699
  %arrayidx245 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride244, i64 0, i64 1, !dbg !4699
  %141 = load i32, i32* %arrayidx245, align 4, !dbg !4699
  %142 = load i32, i32* %mvx, align 4, !dbg !4699
  %143 = load i32, i32* %mvy, align 4, !dbg !4699
  %144 = load i32, i32* %mv0y_offset, align 4, !dbg !4699
  %add246 = add nsw i32 %143, %144, !dbg !4699
  %145 = load i32, i32* %bw, align 4, !dbg !4699
  %shr247 = ashr i32 %145, 1, !dbg !4699
  %146 = load i32, i32* %bh, align 4, !dbg !4699
  %shr248 = ashr i32 %146, 1, !dbg !4699
  call void %136(i8* %arraydecay241, i32 8, i8* %139, i32 %141, i32 %142, i32 %add246, i32 %shr247, i32 %shr248), !dbg !4699
  %147 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4699
  %mc249 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %147, i32 0, i32 70, !dbg !4699
  %mc_chroma250 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc249, i32 0, i32 2, !dbg !4699
  %148 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma250, align 8, !dbg !4699
  %arrayidx251 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixv_buf, i64 0, i64 0, !dbg !4699
  %149 = load i32, i32* %i, align 4, !dbg !4699
  %idxprom252 = sext i32 %149 to i64, !dbg !4699
  %arrayidx253 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx251, i64 0, i64 %idxprom252, !dbg !4699
  %arraydecay254 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx253, i64 0, i64 0, !dbg !4699
  %150 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4699
  %p_fref255 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %150, i32 0, i32 5, !dbg !4699
  %arrayidx256 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref255, i64 0, i64 5, !dbg !4699
  %151 = load i8*, i8** %arrayidx256, align 8, !dbg !4699
  %152 = load %struct.x264_me_t*, %struct.x264_me_t** %m, align 8, !dbg !4699
  %i_stride257 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %152, i32 0, i32 9, !dbg !4699
  %arrayidx258 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride257, i64 0, i64 1, !dbg !4699
  %153 = load i32, i32* %arrayidx258, align 4, !dbg !4699
  %154 = load i32, i32* %mvx, align 4, !dbg !4699
  %155 = load i32, i32* %mvy, align 4, !dbg !4699
  %156 = load i32, i32* %mv0y_offset, align 4, !dbg !4699
  %add259 = add nsw i32 %155, %156, !dbg !4699
  %157 = load i32, i32* %bw, align 4, !dbg !4699
  %shr260 = ashr i32 %157, 1, !dbg !4699
  %158 = load i32, i32* %bh, align 4, !dbg !4699
  %shr261 = ashr i32 %158, 1, !dbg !4699
  call void %148(i8* %arraydecay254, i32 8, i8* %151, i32 %153, i32 %154, i32 %add259, i32 %shr260, i32 %shr261), !dbg !4699
  br label %if.end262, !dbg !4699

if.end262:                                        ; preds = %if.then236, %for.body197
  br label %for.inc, !dbg !4693

for.inc:                                          ; preds = %if.end262
  %159 = load i32, i32* %j, align 4, !dbg !4701
  %inc = add nsw i32 %159, 1, !dbg !4701
  store i32 %inc, i32* %j, align 4, !dbg !4701
  br label %for.cond194, !dbg !4702, !llvm.loop !4703

for.end:                                          ; preds = %for.cond194
  br label %if.end263, !dbg !4704

if.end263:                                        ; preds = %for.end, %for.body
  %160 = load i32, i32* %mc_list1, align 4, !dbg !4705
  %tobool264 = icmp ne i32 %160, 0, !dbg !4705
  br i1 %tobool264, label %if.then265, label %if.end348, !dbg !4707

if.then265:                                       ; preds = %if.end263
  call void @llvm.dbg.declare(metadata i32* %j266, metadata !4708, metadata !DIExpression()), !dbg !4710
  %161 = load i32, i32* @x264_iter_kludge, align 4, !dbg !4711
  store i32 %161, i32* %j266, align 4, !dbg !4710
  br label %for.cond267, !dbg !4712

for.cond267:                                      ; preds = %for.inc345, %if.then265
  %162 = load i32, i32* %j266, align 4, !dbg !4713
  %cmp268 = icmp slt i32 %162, 9, !dbg !4715
  br i1 %cmp268, label %for.body270, label %for.end347, !dbg !4716

for.body270:                                      ; preds = %for.cond267
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m271, metadata !4717, metadata !DIExpression()), !dbg !4719
  %163 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4719
  store %struct.x264_me_t* %163, %struct.x264_me_t** %m271, align 8, !dbg !4719
  call void @llvm.dbg.declare(metadata i32* %i272, metadata !4720, metadata !DIExpression()), !dbg !4719
  %164 = load i32, i32* %j266, align 4, !dbg !4719
  %idxprom273 = sext i32 %164 to i64, !dbg !4719
  %arrayidx274 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom273, !dbg !4719
  %arrayidx275 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx274, i64 0, i64 0, !dbg !4719
  %165 = load i8, i8* %arrayidx275, align 2, !dbg !4719
  %conv276 = sext i8 %165 to i32, !dbg !4719
  %mul277 = mul nsw i32 3, %conv276, !dbg !4719
  %add278 = add nsw i32 4, %mul277, !dbg !4719
  %166 = load i32, i32* %j266, align 4, !dbg !4719
  %idxprom279 = sext i32 %166 to i64, !dbg !4719
  %arrayidx280 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom279, !dbg !4719
  %arrayidx281 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx280, i64 0, i64 1, !dbg !4719
  %167 = load i8, i8* %arrayidx281, align 1, !dbg !4719
  %conv282 = sext i8 %167 to i32, !dbg !4719
  %add283 = add nsw i32 %add278, %conv282, !dbg !4719
  store i32 %add283, i32* %i272, align 4, !dbg !4719
  call void @llvm.dbg.declare(metadata i32* %mvx284, metadata !4721, metadata !DIExpression()), !dbg !4719
  %168 = load i32, i32* %bm1x, align 4, !dbg !4719
  %169 = load i32, i32* %j266, align 4, !dbg !4719
  %idxprom285 = sext i32 %169 to i64, !dbg !4719
  %arrayidx286 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom285, !dbg !4719
  %arrayidx287 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx286, i64 0, i64 0, !dbg !4719
  %170 = load i8, i8* %arrayidx287, align 2, !dbg !4719
  %conv288 = sext i8 %170 to i32, !dbg !4719
  %add289 = add nsw i32 %168, %conv288, !dbg !4719
  store i32 %add289, i32* %mvx284, align 4, !dbg !4719
  call void @llvm.dbg.declare(metadata i32* %mvy290, metadata !4722, metadata !DIExpression()), !dbg !4719
  %171 = load i32, i32* %bm1y, align 4, !dbg !4719
  %172 = load i32, i32* %j266, align 4, !dbg !4719
  %idxprom291 = sext i32 %172 to i64, !dbg !4719
  %arrayidx292 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom291, !dbg !4719
  %arrayidx293 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx292, i64 0, i64 1, !dbg !4719
  %173 = load i8, i8* %arrayidx293, align 1, !dbg !4719
  %conv294 = sext i8 %173 to i32, !dbg !4719
  %add295 = add nsw i32 %171, %conv294, !dbg !4719
  store i32 %add295, i32* %mvy290, align 4, !dbg !4719
  %174 = load i32, i32* %bw, align 4, !dbg !4719
  %arrayidx296 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 1, !dbg !4719
  %175 = load i32, i32* %i272, align 4, !dbg !4719
  %idxprom297 = sext i32 %175 to i64, !dbg !4719
  %arrayidx298 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx296, i64 0, i64 %idxprom297, !dbg !4719
  store i32 %174, i32* %arrayidx298, align 4, !dbg !4719
  %176 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4719
  %mc299 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %176, i32 0, i32 70, !dbg !4719
  %get_ref300 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc299, i32 0, i32 1, !dbg !4719
  %177 = load i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, i8* (i8*, i32*, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %get_ref300, align 8, !dbg !4719
  %arrayidx301 = getelementptr inbounds [2 x [9 x [256 x i8]]], [2 x [9 x [256 x i8]]]* %pixy_buf, i64 0, i64 1, !dbg !4719
  %178 = load i32, i32* %i272, align 4, !dbg !4719
  %idxprom302 = sext i32 %178 to i64, !dbg !4719
  %arrayidx303 = getelementptr inbounds [9 x [256 x i8]], [9 x [256 x i8]]* %arrayidx301, i64 0, i64 %idxprom302, !dbg !4719
  %arraydecay304 = getelementptr inbounds [256 x i8], [256 x i8]* %arrayidx303, i64 0, i64 0, !dbg !4719
  %arrayidx305 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 1, !dbg !4719
  %179 = load i32, i32* %i272, align 4, !dbg !4719
  %idxprom306 = sext i32 %179 to i64, !dbg !4719
  %arrayidx307 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx305, i64 0, i64 %idxprom306, !dbg !4719
  %180 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4719
  %p_fref308 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %180, i32 0, i32 5, !dbg !4719
  %arraydecay309 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref308, i64 0, i64 0, !dbg !4719
  %181 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4719
  %i_stride310 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %181, i32 0, i32 9, !dbg !4719
  %arrayidx311 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride310, i64 0, i64 0, !dbg !4719
  %182 = load i32, i32* %arrayidx311, align 8, !dbg !4719
  %183 = load i32, i32* %mvx284, align 4, !dbg !4719
  %184 = load i32, i32* %mvy290, align 4, !dbg !4719
  %185 = load i32, i32* %bw, align 4, !dbg !4719
  %186 = load i32, i32* %bh, align 4, !dbg !4719
  %call312 = call i8* %177(i8* %arraydecay304, i32* %arrayidx307, i8** %arraydecay309, i32 %182, i32 %183, i32 %184, i32 %185, i32 %186, %struct.x264_weight_t* getelementptr inbounds ([3 x %struct.x264_weight_t], [3 x %struct.x264_weight_t]* @weight_none, i64 0, i64 0)), !dbg !4719
  %arrayidx313 = getelementptr inbounds [2 x [9 x i8*]], [2 x [9 x i8*]]* %src, i64 0, i64 1, !dbg !4719
  %187 = load i32, i32* %i272, align 4, !dbg !4719
  %idxprom314 = sext i32 %187 to i64, !dbg !4719
  %arrayidx315 = getelementptr inbounds [9 x i8*], [9 x i8*]* %arrayidx313, i64 0, i64 %idxprom314, !dbg !4719
  store i8* %call312, i8** %arrayidx315, align 8, !dbg !4719
  %188 = load i32, i32* %rd.addr, align 4, !dbg !4723
  %tobool316 = icmp ne i32 %188, 0, !dbg !4723
  br i1 %tobool316, label %if.then317, label %if.end344, !dbg !4719

if.then317:                                       ; preds = %for.body270
  %189 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4725
  %mc318 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %189, i32 0, i32 70, !dbg !4725
  %mc_chroma319 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc318, i32 0, i32 2, !dbg !4725
  %190 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma319, align 8, !dbg !4725
  %arrayidx320 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixu_buf, i64 0, i64 1, !dbg !4725
  %191 = load i32, i32* %i272, align 4, !dbg !4725
  %idxprom321 = sext i32 %191 to i64, !dbg !4725
  %arrayidx322 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx320, i64 0, i64 %idxprom321, !dbg !4725
  %arraydecay323 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx322, i64 0, i64 0, !dbg !4725
  %192 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4725
  %p_fref324 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %192, i32 0, i32 5, !dbg !4725
  %arrayidx325 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref324, i64 0, i64 4, !dbg !4725
  %193 = load i8*, i8** %arrayidx325, align 16, !dbg !4725
  %194 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4725
  %i_stride326 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %194, i32 0, i32 9, !dbg !4725
  %arrayidx327 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride326, i64 0, i64 1, !dbg !4725
  %195 = load i32, i32* %arrayidx327, align 4, !dbg !4725
  %196 = load i32, i32* %mvx284, align 4, !dbg !4725
  %197 = load i32, i32* %mvy290, align 4, !dbg !4725
  %198 = load i32, i32* %mv1y_offset, align 4, !dbg !4725
  %add328 = add nsw i32 %197, %198, !dbg !4725
  %199 = load i32, i32* %bw, align 4, !dbg !4725
  %shr329 = ashr i32 %199, 1, !dbg !4725
  %200 = load i32, i32* %bh, align 4, !dbg !4725
  %shr330 = ashr i32 %200, 1, !dbg !4725
  call void %190(i8* %arraydecay323, i32 8, i8* %193, i32 %195, i32 %196, i32 %add328, i32 %shr329, i32 %shr330), !dbg !4725
  %201 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4725
  %mc331 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %201, i32 0, i32 70, !dbg !4725
  %mc_chroma332 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc331, i32 0, i32 2, !dbg !4725
  %202 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma332, align 8, !dbg !4725
  %arrayidx333 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixv_buf, i64 0, i64 1, !dbg !4725
  %203 = load i32, i32* %i272, align 4, !dbg !4725
  %idxprom334 = sext i32 %203 to i64, !dbg !4725
  %arrayidx335 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx333, i64 0, i64 %idxprom334, !dbg !4725
  %arraydecay336 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx335, i64 0, i64 0, !dbg !4725
  %204 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4725
  %p_fref337 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %204, i32 0, i32 5, !dbg !4725
  %arrayidx338 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref337, i64 0, i64 5, !dbg !4725
  %205 = load i8*, i8** %arrayidx338, align 8, !dbg !4725
  %206 = load %struct.x264_me_t*, %struct.x264_me_t** %m271, align 8, !dbg !4725
  %i_stride339 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %206, i32 0, i32 9, !dbg !4725
  %arrayidx340 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride339, i64 0, i64 1, !dbg !4725
  %207 = load i32, i32* %arrayidx340, align 4, !dbg !4725
  %208 = load i32, i32* %mvx284, align 4, !dbg !4725
  %209 = load i32, i32* %mvy290, align 4, !dbg !4725
  %210 = load i32, i32* %mv1y_offset, align 4, !dbg !4725
  %add341 = add nsw i32 %209, %210, !dbg !4725
  %211 = load i32, i32* %bw, align 4, !dbg !4725
  %shr342 = ashr i32 %211, 1, !dbg !4725
  %212 = load i32, i32* %bh, align 4, !dbg !4725
  %shr343 = ashr i32 %212, 1, !dbg !4725
  call void %202(i8* %arraydecay336, i32 8, i8* %205, i32 %207, i32 %208, i32 %add341, i32 %shr342, i32 %shr343), !dbg !4725
  br label %if.end344, !dbg !4725

if.end344:                                        ; preds = %if.then317, %for.body270
  br label %for.inc345, !dbg !4719

for.inc345:                                       ; preds = %if.end344
  %213 = load i32, i32* %j266, align 4, !dbg !4727
  %inc346 = add nsw i32 %213, 1, !dbg !4727
  store i32 %inc346, i32* %j266, align 4, !dbg !4727
  br label %for.cond267, !dbg !4728, !llvm.loop !4729

for.end347:                                       ; preds = %for.cond267
  br label %if.end348, !dbg !4730

if.end348:                                        ; preds = %for.end347, %if.end263
  call void @llvm.dbg.declare(metadata i32* %j349, metadata !4731, metadata !DIExpression()), !dbg !4733
  %214 = load i32, i32* %pass, align 4, !dbg !4734
  %tobool350 = icmp ne i32 %214, 0, !dbg !4735
  %lnot = xor i1 %tobool350, true, !dbg !4735
  %lnot351 = xor i1 %lnot, true, !dbg !4736
  %lnot.ext = zext i1 %lnot351 to i32, !dbg !4736
  store i32 %lnot.ext, i32* %j349, align 4, !dbg !4733
  br label %for.cond352, !dbg !4737

for.cond352:                                      ; preds = %for.inc519, %if.end348
  %215 = load i32, i32* %j349, align 4, !dbg !4738
  %cmp353 = icmp slt i32 %215, 33, !dbg !4740
  br i1 %cmp353, label %for.body355, label %for.end521, !dbg !4741

for.body355:                                      ; preds = %for.cond352
  call void @llvm.dbg.declare(metadata i32* %m0x, metadata !4742, metadata !DIExpression()), !dbg !4744
  %216 = load i32, i32* %j349, align 4, !dbg !4745
  %idxprom356 = sext i32 %216 to i64, !dbg !4746
  %arrayidx357 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom356, !dbg !4746
  %arrayidx358 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx357, i64 0, i64 0, !dbg !4746
  %217 = load i8, i8* %arrayidx358, align 4, !dbg !4746
  %conv359 = sext i8 %217 to i32, !dbg !4746
  %218 = load i32, i32* %bm0x, align 4, !dbg !4747
  %add360 = add nsw i32 %conv359, %218, !dbg !4748
  store i32 %add360, i32* %m0x, align 4, !dbg !4744
  call void @llvm.dbg.declare(metadata i32* %m0y, metadata !4749, metadata !DIExpression()), !dbg !4750
  %219 = load i32, i32* %j349, align 4, !dbg !4751
  %idxprom361 = sext i32 %219 to i64, !dbg !4752
  %arrayidx362 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom361, !dbg !4752
  %arrayidx363 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx362, i64 0, i64 1, !dbg !4752
  %220 = load i8, i8* %arrayidx363, align 1, !dbg !4752
  %conv364 = sext i8 %220 to i32, !dbg !4752
  %221 = load i32, i32* %bm0y, align 4, !dbg !4753
  %add365 = add nsw i32 %conv364, %221, !dbg !4754
  store i32 %add365, i32* %m0y, align 4, !dbg !4750
  call void @llvm.dbg.declare(metadata i32* %m1x, metadata !4755, metadata !DIExpression()), !dbg !4756
  %222 = load i32, i32* %j349, align 4, !dbg !4757
  %idxprom366 = sext i32 %222 to i64, !dbg !4758
  %arrayidx367 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom366, !dbg !4758
  %arrayidx368 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx367, i64 0, i64 2, !dbg !4758
  %223 = load i8, i8* %arrayidx368, align 2, !dbg !4758
  %conv369 = sext i8 %223 to i32, !dbg !4758
  %224 = load i32, i32* %bm1x, align 4, !dbg !4759
  %add370 = add nsw i32 %conv369, %224, !dbg !4760
  store i32 %add370, i32* %m1x, align 4, !dbg !4756
  call void @llvm.dbg.declare(metadata i32* %m1y, metadata !4761, metadata !DIExpression()), !dbg !4762
  %225 = load i32, i32* %j349, align 4, !dbg !4763
  %idxprom371 = sext i32 %225 to i64, !dbg !4764
  %arrayidx372 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom371, !dbg !4764
  %arrayidx373 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx372, i64 0, i64 3, !dbg !4764
  %226 = load i8, i8* %arrayidx373, align 1, !dbg !4764
  %conv374 = sext i8 %226 to i32, !dbg !4764
  %227 = load i32, i32* %bm1y, align 4, !dbg !4765
  %add375 = add nsw i32 %conv374, %227, !dbg !4766
  store i32 %add375, i32* %m1y, align 4, !dbg !4762
  %228 = load i32, i32* %pass, align 4, !dbg !4767
  %tobool376 = icmp ne i32 %228, 0, !dbg !4767
  br i1 %tobool376, label %lor.lhs.false377, label %if.then392, !dbg !4769

lor.lhs.false377:                                 ; preds = %for.body355
  %229 = load i32, i32* %m0x, align 4, !dbg !4770
  %and378 = and i32 %229, 7, !dbg !4771
  %idxprom379 = sext i32 %and378 to i64, !dbg !4772
  %arrayidx380 = getelementptr inbounds [8 x [8 x [8 x i8]]], [8 x [8 x [8 x i8]]]* %visited, i64 0, i64 %idxprom379, !dbg !4772
  %230 = load i32, i32* %m0y, align 4, !dbg !4773
  %and381 = and i32 %230, 7, !dbg !4774
  %idxprom382 = sext i32 %and381 to i64, !dbg !4772
  %arrayidx383 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %arrayidx380, i64 0, i64 %idxprom382, !dbg !4772
  %231 = load i32, i32* %m1x, align 4, !dbg !4775
  %and384 = and i32 %231, 7, !dbg !4776
  %idxprom385 = sext i32 %and384 to i64, !dbg !4772
  %arrayidx386 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx383, i64 0, i64 %idxprom385, !dbg !4772
  %232 = load i8, i8* %arrayidx386, align 1, !dbg !4772
  %conv387 = zext i8 %232 to i32, !dbg !4772
  %233 = load i32, i32* %m1y, align 4, !dbg !4777
  %and388 = and i32 %233, 7, !dbg !4778
  %shl389 = shl i32 1, %and388, !dbg !4779
  %and390 = and i32 %conv387, %shl389, !dbg !4780
  %tobool391 = icmp ne i32 %and390, 0, !dbg !4780
  br i1 %tobool391, label %if.end518, label %if.then392, !dbg !4781

if.then392:                                       ; preds = %lor.lhs.false377, %for.body355
  call void @llvm.dbg.declare(metadata i32* %i0, metadata !4782, metadata !DIExpression()), !dbg !4784
  %234 = load i32, i32* %j349, align 4, !dbg !4785
  %idxprom393 = sext i32 %234 to i64, !dbg !4786
  %arrayidx394 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom393, !dbg !4786
  %arrayidx395 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx394, i64 0, i64 0, !dbg !4786
  %235 = load i8, i8* %arrayidx395, align 4, !dbg !4786
  %conv396 = sext i8 %235 to i32, !dbg !4786
  %mul397 = mul nsw i32 3, %conv396, !dbg !4787
  %add398 = add nsw i32 4, %mul397, !dbg !4788
  %236 = load i32, i32* %j349, align 4, !dbg !4789
  %idxprom399 = sext i32 %236 to i64, !dbg !4790
  %arrayidx400 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom399, !dbg !4790
  %arrayidx401 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx400, i64 0, i64 1, !dbg !4790
  %237 = load i8, i8* %arrayidx401, align 1, !dbg !4790
  %conv402 = sext i8 %237 to i32, !dbg !4790
  %add403 = add nsw i32 %add398, %conv402, !dbg !4791
  store i32 %add403, i32* %i0, align 4, !dbg !4784
  call void @llvm.dbg.declare(metadata i32* %i1, metadata !4792, metadata !DIExpression()), !dbg !4793
  %238 = load i32, i32* %j349, align 4, !dbg !4794
  %idxprom404 = sext i32 %238 to i64, !dbg !4795
  %arrayidx405 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom404, !dbg !4795
  %arrayidx406 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx405, i64 0, i64 2, !dbg !4795
  %239 = load i8, i8* %arrayidx406, align 2, !dbg !4795
  %conv407 = sext i8 %239 to i32, !dbg !4795
  %mul408 = mul nsw i32 3, %conv407, !dbg !4796
  %add409 = add nsw i32 4, %mul408, !dbg !4797
  %240 = load i32, i32* %j349, align 4, !dbg !4798
  %idxprom410 = sext i32 %240 to i64, !dbg !4799
  %arrayidx411 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom410, !dbg !4799
  %arrayidx412 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx411, i64 0, i64 3, !dbg !4799
  %241 = load i8, i8* %arrayidx412, align 1, !dbg !4799
  %conv413 = sext i8 %241 to i32, !dbg !4799
  %add414 = add nsw i32 %add409, %conv413, !dbg !4800
  store i32 %add414, i32* %i1, align 4, !dbg !4793
  %242 = load i32, i32* %m1y, align 4, !dbg !4801
  %and415 = and i32 %242, 7, !dbg !4802
  %shl416 = shl i32 1, %and415, !dbg !4803
  %243 = load i32, i32* %m0x, align 4, !dbg !4804
  %and417 = and i32 %243, 7, !dbg !4805
  %idxprom418 = sext i32 %and417 to i64, !dbg !4806
  %arrayidx419 = getelementptr inbounds [8 x [8 x [8 x i8]]], [8 x [8 x [8 x i8]]]* %visited, i64 0, i64 %idxprom418, !dbg !4806
  %244 = load i32, i32* %m0y, align 4, !dbg !4807
  %and420 = and i32 %244, 7, !dbg !4808
  %idxprom421 = sext i32 %and420 to i64, !dbg !4806
  %arrayidx422 = getelementptr inbounds [8 x [8 x i8]], [8 x [8 x i8]]* %arrayidx419, i64 0, i64 %idxprom421, !dbg !4806
  %245 = load i32, i32* %m1x, align 4, !dbg !4809
  %and423 = and i32 %245, 7, !dbg !4810
  %idxprom424 = sext i32 %and423 to i64, !dbg !4806
  %arrayidx425 = getelementptr inbounds [8 x i8], [8 x i8]* %arrayidx422, i64 0, i64 %idxprom424, !dbg !4806
  %246 = load i8, i8* %arrayidx425, align 1, !dbg !4811
  %conv426 = zext i8 %246 to i32, !dbg !4811
  %or = or i32 %conv426, %shl416, !dbg !4811
  %conv427 = trunc i32 %or to i8, !dbg !4811
  store i8 %conv427, i8* %arrayidx425, align 1, !dbg !4811
  %247 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4812
  %mc428 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %247, i32 0, i32 70, !dbg !4813
  %avg = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc428, i32 0, i32 3, !dbg !4814
  %248 = load i32, i32* %i_pixel, align 4, !dbg !4815
  %idxprom429 = sext i32 %248 to i64, !dbg !4812
  %arrayidx430 = getelementptr inbounds [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*], [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*]* %avg, i64 0, i64 %idxprom429, !dbg !4812
  %249 = load void (i8*, i32, i8*, i32, i8*, i32, i32)*, void (i8*, i32, i8*, i32, i8*, i32, i32)** %arrayidx430, align 8, !dbg !4812
  %250 = load i8*, i8** %pix, align 8, !dbg !4816
  %arrayidx431 = getelementptr inbounds [2 x [9 x i8*]], [2 x [9 x i8*]]* %src, i64 0, i64 0, !dbg !4817
  %251 = load i32, i32* %i0, align 4, !dbg !4818
  %idxprom432 = sext i32 %251 to i64, !dbg !4817
  %arrayidx433 = getelementptr inbounds [9 x i8*], [9 x i8*]* %arrayidx431, i64 0, i64 %idxprom432, !dbg !4817
  %252 = load i8*, i8** %arrayidx433, align 8, !dbg !4817
  %arrayidx434 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 0, !dbg !4819
  %253 = load i32, i32* %i0, align 4, !dbg !4820
  %idxprom435 = sext i32 %253 to i64, !dbg !4819
  %arrayidx436 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx434, i64 0, i64 %idxprom435, !dbg !4819
  %254 = load i32, i32* %arrayidx436, align 4, !dbg !4819
  %arrayidx437 = getelementptr inbounds [2 x [9 x i8*]], [2 x [9 x i8*]]* %src, i64 0, i64 1, !dbg !4821
  %255 = load i32, i32* %i1, align 4, !dbg !4822
  %idxprom438 = sext i32 %255 to i64, !dbg !4821
  %arrayidx439 = getelementptr inbounds [9 x i8*], [9 x i8*]* %arrayidx437, i64 0, i64 %idxprom438, !dbg !4821
  %256 = load i8*, i8** %arrayidx439, align 8, !dbg !4821
  %arrayidx440 = getelementptr inbounds [2 x [9 x i32]], [2 x [9 x i32]]* %stride, i64 0, i64 1, !dbg !4823
  %257 = load i32, i32* %i1, align 4, !dbg !4824
  %idxprom441 = sext i32 %257 to i64, !dbg !4823
  %arrayidx442 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx440, i64 0, i64 %idxprom441, !dbg !4823
  %258 = load i32, i32* %arrayidx442, align 4, !dbg !4823
  %259 = load i32, i32* %i_weight.addr, align 4, !dbg !4825
  call void %249(i8* %250, i32 32, i8* %252, i32 %254, i8* %256, i32 %258, i32 %259), !dbg !4812
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4826, metadata !DIExpression()), !dbg !4827
  %260 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4828
  %pixf = getelementptr inbounds %struct.x264_t, %struct.x264_t* %260, i32 0, i32 69, !dbg !4829
  %mbcmp = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf, i32 0, i32 5, !dbg !4830
  %261 = load i32, i32* %i_pixel, align 4, !dbg !4831
  %idxprom443 = sext i32 %261 to i64, !dbg !4828
  %arrayidx444 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp, i64 0, i64 %idxprom443, !dbg !4828
  %262 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx444, align 8, !dbg !4828
  %263 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4832
  %p_fenc = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %263, i32 0, i32 7, !dbg !4833
  %arrayidx445 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc, i64 0, i64 0, !dbg !4832
  %264 = load i8*, i8** %arrayidx445, align 8, !dbg !4832
  %265 = load i8*, i8** %pix, align 8, !dbg !4834
  %call446 = call i32 %262(i8* %264, i32 16, i8* %265, i32 32), !dbg !4828
  %266 = load i16*, i16** %p_cost_m0x, align 8, !dbg !4835
  %267 = load i32, i32* %m0x, align 4, !dbg !4836
  %idxprom447 = sext i32 %267 to i64, !dbg !4835
  %arrayidx448 = getelementptr inbounds i16, i16* %266, i64 %idxprom447, !dbg !4835
  %268 = load i16, i16* %arrayidx448, align 2, !dbg !4835
  %conv449 = zext i16 %268 to i32, !dbg !4835
  %add450 = add nsw i32 %call446, %conv449, !dbg !4837
  %269 = load i16*, i16** %p_cost_m0y, align 8, !dbg !4838
  %270 = load i32, i32* %m0y, align 4, !dbg !4839
  %idxprom451 = sext i32 %270 to i64, !dbg !4838
  %arrayidx452 = getelementptr inbounds i16, i16* %269, i64 %idxprom451, !dbg !4838
  %271 = load i16, i16* %arrayidx452, align 2, !dbg !4838
  %conv453 = zext i16 %271 to i32, !dbg !4838
  %add454 = add nsw i32 %add450, %conv453, !dbg !4840
  %272 = load i16*, i16** %p_cost_m1x, align 8, !dbg !4841
  %273 = load i32, i32* %m1x, align 4, !dbg !4842
  %idxprom455 = sext i32 %273 to i64, !dbg !4841
  %arrayidx456 = getelementptr inbounds i16, i16* %272, i64 %idxprom455, !dbg !4841
  %274 = load i16, i16* %arrayidx456, align 2, !dbg !4841
  %conv457 = zext i16 %274 to i32, !dbg !4841
  %add458 = add nsw i32 %add454, %conv457, !dbg !4843
  %275 = load i16*, i16** %p_cost_m1y, align 8, !dbg !4844
  %276 = load i32, i32* %m1y, align 4, !dbg !4845
  %idxprom459 = sext i32 %276 to i64, !dbg !4844
  %arrayidx460 = getelementptr inbounds i16, i16* %275, i64 %idxprom459, !dbg !4844
  %277 = load i16, i16* %arrayidx460, align 2, !dbg !4844
  %conv461 = zext i16 %277 to i32, !dbg !4844
  %add462 = add nsw i32 %add458, %conv461, !dbg !4846
  store i32 %add462, i32* %cost, align 4, !dbg !4827
  %278 = load i32, i32* %rd.addr, align 4, !dbg !4847
  %tobool463 = icmp ne i32 %278, 0, !dbg !4847
  br i1 %tobool463, label %if.then464, label %if.else, !dbg !4849

if.then464:                                       ; preds = %if.then392
  %279 = load i32, i32* %cost, align 4, !dbg !4850
  %280 = load i32, i32* %bcost, align 4, !dbg !4853
  %mul465 = mul nsw i32 %280, 17, !dbg !4854
  %div = sdiv i32 %mul465, 16, !dbg !4855
  %cmp466 = icmp slt i32 %279, %div, !dbg !4856
  br i1 %cmp466, label %if.then468, label %if.end512, !dbg !4857

if.then468:                                       ; preds = %if.then464
  %281 = load i32, i32* %cost, align 4, !dbg !4858
  %282 = load i32, i32* %bcost, align 4, !dbg !4858
  %cmp469 = icmp slt i32 %281, %282, !dbg !4858
  br i1 %cmp469, label %cond.true471, label %cond.false472, !dbg !4858

cond.true471:                                     ; preds = %if.then468
  %283 = load i32, i32* %cost, align 4, !dbg !4858
  br label %cond.end473, !dbg !4858

cond.false472:                                    ; preds = %if.then468
  %284 = load i32, i32* %bcost, align 4, !dbg !4858
  br label %cond.end473, !dbg !4858

cond.end473:                                      ; preds = %cond.false472, %cond.true471
  %cond474 = phi i32 [ %283, %cond.true471 ], [ %284, %cond.false472 ], !dbg !4858
  store i32 %cond474, i32* %bcost, align 4, !dbg !4860
  %285 = load i32, i32* %m0x, align 4, !dbg !4861
  %286 = load i32, i32* %m0y, align 4, !dbg !4862
  %call475 = call i32 @pack16to32_mask(i32 %285, i32 %286), !dbg !4863
  %287 = load i16*, i16** %cache0_mv, align 8, !dbg !4864
  %288 = bitcast i16* %287 to %union.x264_union32_t*, !dbg !4864
  %i476 = bitcast %union.x264_union32_t* %288 to i32*, !dbg !4864
  store i32 %call475, i32* %i476, align 4, !dbg !4865
  %289 = load i32, i32* %m1x, align 4, !dbg !4866
  %290 = load i32, i32* %m1y, align 4, !dbg !4867
  %call477 = call i32 @pack16to32_mask(i32 %289, i32 %290), !dbg !4868
  %291 = load i16*, i16** %cache1_mv, align 8, !dbg !4869
  %292 = bitcast i16* %291 to %union.x264_union32_t*, !dbg !4869
  %i478 = bitcast %union.x264_union32_t* %292 to i32*, !dbg !4869
  store i32 %call477, i32* %i478, align 4, !dbg !4870
  %293 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4871
  %mc479 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %293, i32 0, i32 70, !dbg !4872
  %avg480 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc479, i32 0, i32 3, !dbg !4873
  %294 = load i32, i32* %i_pixel, align 4, !dbg !4874
  %add481 = add nsw i32 %294, 3, !dbg !4875
  %idxprom482 = sext i32 %add481 to i64, !dbg !4871
  %arrayidx483 = getelementptr inbounds [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*], [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*]* %avg480, i64 0, i64 %idxprom482, !dbg !4871
  %295 = load void (i8*, i32, i8*, i32, i8*, i32, i32)*, void (i8*, i32, i8*, i32, i8*, i32, i32)** %arrayidx483, align 8, !dbg !4871
  %296 = load i8*, i8** %pixu, align 8, !dbg !4876
  %arrayidx484 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixu_buf, i64 0, i64 0, !dbg !4877
  %297 = load i32, i32* %i0, align 4, !dbg !4878
  %idxprom485 = sext i32 %297 to i64, !dbg !4877
  %arrayidx486 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx484, i64 0, i64 %idxprom485, !dbg !4877
  %arraydecay487 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx486, i64 0, i64 0, !dbg !4877
  %arrayidx488 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixu_buf, i64 0, i64 1, !dbg !4879
  %298 = load i32, i32* %i1, align 4, !dbg !4880
  %idxprom489 = sext i32 %298 to i64, !dbg !4879
  %arrayidx490 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx488, i64 0, i64 %idxprom489, !dbg !4879
  %arraydecay491 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx490, i64 0, i64 0, !dbg !4879
  %299 = load i32, i32* %i_weight.addr, align 4, !dbg !4881
  call void %295(i8* %296, i32 32, i8* %arraydecay487, i32 8, i8* %arraydecay491, i32 8, i32 %299), !dbg !4871
  %300 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4882
  %mc492 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %300, i32 0, i32 70, !dbg !4883
  %avg493 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc492, i32 0, i32 3, !dbg !4884
  %301 = load i32, i32* %i_pixel, align 4, !dbg !4885
  %add494 = add nsw i32 %301, 3, !dbg !4886
  %idxprom495 = sext i32 %add494 to i64, !dbg !4882
  %arrayidx496 = getelementptr inbounds [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*], [10 x void (i8*, i32, i8*, i32, i8*, i32, i32)*]* %avg493, i64 0, i64 %idxprom495, !dbg !4882
  %302 = load void (i8*, i32, i8*, i32, i8*, i32, i32)*, void (i8*, i32, i8*, i32, i8*, i32, i32)** %arrayidx496, align 8, !dbg !4882
  %303 = load i8*, i8** %pixv, align 8, !dbg !4887
  %arrayidx497 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixv_buf, i64 0, i64 0, !dbg !4888
  %304 = load i32, i32* %i0, align 4, !dbg !4889
  %idxprom498 = sext i32 %304 to i64, !dbg !4888
  %arrayidx499 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx497, i64 0, i64 %idxprom498, !dbg !4888
  %arraydecay500 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx499, i64 0, i64 0, !dbg !4888
  %arrayidx501 = getelementptr inbounds [2 x [9 x [64 x i8]]], [2 x [9 x [64 x i8]]]* %pixv_buf, i64 0, i64 1, !dbg !4890
  %305 = load i32, i32* %i1, align 4, !dbg !4891
  %idxprom502 = sext i32 %305 to i64, !dbg !4890
  %arrayidx503 = getelementptr inbounds [9 x [64 x i8]], [9 x [64 x i8]]* %arrayidx501, i64 0, i64 %idxprom502, !dbg !4890
  %arraydecay504 = getelementptr inbounds [64 x i8], [64 x i8]* %arrayidx503, i64 0, i64 0, !dbg !4890
  %306 = load i32, i32* %i_weight.addr, align 4, !dbg !4892
  call void %302(i8* %303, i32 32, i8* %arraydecay500, i32 8, i8* %arraydecay504, i32 8, i32 %306), !dbg !4882
  call void @llvm.dbg.declare(metadata i64* %costrd, metadata !4893, metadata !DIExpression()), !dbg !4894
  %307 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4895
  %308 = load i32, i32* %i_lambda2.addr, align 4, !dbg !4896
  %309 = load i32, i32* %i8.addr, align 4, !dbg !4897
  %mul505 = mul nsw i32 %309, 4, !dbg !4898
  %310 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4899
  %i_pixel506 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %310, i32 0, i32 0, !dbg !4900
  %311 = load i32, i32* %i_pixel506, align 16, !dbg !4900
  %call507 = call i64 @x264_rd_cost_part(%struct.x264_t* %307, i32 %308, i32 %mul505, i32 %311), !dbg !4901
  store i64 %call507, i64* %costrd, align 8, !dbg !4894
  %312 = load i64, i64* %costrd, align 8, !dbg !4902
  %313 = load i64, i64* %bcostrd, align 8, !dbg !4902
  %cmp508 = icmp ult i64 %312, %313, !dbg !4902
  br i1 %cmp508, label %if.then510, label %if.end511, !dbg !4904

if.then510:                                       ; preds = %cond.end473
  %314 = load i64, i64* %costrd, align 8, !dbg !4905
  store i64 %314, i64* %bcostrd, align 8, !dbg !4905
  %315 = load i32, i32* %j349, align 4, !dbg !4905
  store i32 %315, i32* %bestj, align 4, !dbg !4905
  br label %if.end511, !dbg !4905

if.end511:                                        ; preds = %if.then510, %cond.end473
  br label %if.end512, !dbg !4907

if.end512:                                        ; preds = %if.end511, %if.then464
  br label %if.end517, !dbg !4908

if.else:                                          ; preds = %if.then392
  %316 = load i32, i32* %cost, align 4, !dbg !4909
  %317 = load i32, i32* %bcost, align 4, !dbg !4909
  %cmp513 = icmp slt i32 %316, %317, !dbg !4909
  br i1 %cmp513, label %if.then515, label %if.end516, !dbg !4911

if.then515:                                       ; preds = %if.else
  %318 = load i32, i32* %cost, align 4, !dbg !4912
  store i32 %318, i32* %bcost, align 4, !dbg !4912
  %319 = load i32, i32* %j349, align 4, !dbg !4912
  store i32 %319, i32* %bestj, align 4, !dbg !4912
  br label %if.end516, !dbg !4912

if.end516:                                        ; preds = %if.then515, %if.else
  br label %if.end517

if.end517:                                        ; preds = %if.end516, %if.end512
  br label %if.end518, !dbg !4914

if.end518:                                        ; preds = %if.end517, %lor.lhs.false377
  br label %for.inc519, !dbg !4915

for.inc519:                                       ; preds = %if.end518
  %320 = load i32, i32* %j349, align 4, !dbg !4916
  %inc520 = add nsw i32 %320, 1, !dbg !4916
  store i32 %inc520, i32* %j349, align 4, !dbg !4916
  br label %for.cond352, !dbg !4917, !llvm.loop !4918

for.end521:                                       ; preds = %for.cond352
  %321 = load i32, i32* %bestj, align 4, !dbg !4920
  %tobool522 = icmp ne i32 %321, 0, !dbg !4920
  br i1 %tobool522, label %if.end524, label %if.then523, !dbg !4922

if.then523:                                       ; preds = %for.end521
  br label %for.end557, !dbg !4923

if.end524:                                        ; preds = %for.end521
  %322 = load i32, i32* %bestj, align 4, !dbg !4924
  %idxprom525 = sext i32 %322 to i64, !dbg !4925
  %arrayidx526 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom525, !dbg !4925
  %arrayidx527 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx526, i64 0, i64 0, !dbg !4925
  %323 = load i8, i8* %arrayidx527, align 4, !dbg !4925
  %conv528 = sext i8 %323 to i32, !dbg !4925
  %324 = load i32, i32* %bm0x, align 4, !dbg !4926
  %add529 = add nsw i32 %324, %conv528, !dbg !4926
  store i32 %add529, i32* %bm0x, align 4, !dbg !4926
  %325 = load i32, i32* %bestj, align 4, !dbg !4927
  %idxprom530 = sext i32 %325 to i64, !dbg !4928
  %arrayidx531 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom530, !dbg !4928
  %arrayidx532 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx531, i64 0, i64 1, !dbg !4928
  %326 = load i8, i8* %arrayidx532, align 1, !dbg !4928
  %conv533 = sext i8 %326 to i32, !dbg !4928
  %327 = load i32, i32* %bm0y, align 4, !dbg !4929
  %add534 = add nsw i32 %327, %conv533, !dbg !4929
  store i32 %add534, i32* %bm0y, align 4, !dbg !4929
  %328 = load i32, i32* %bestj, align 4, !dbg !4930
  %idxprom535 = sext i32 %328 to i64, !dbg !4931
  %arrayidx536 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom535, !dbg !4931
  %arrayidx537 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx536, i64 0, i64 2, !dbg !4931
  %329 = load i8, i8* %arrayidx537, align 2, !dbg !4931
  %conv538 = sext i8 %329 to i32, !dbg !4931
  %330 = load i32, i32* %bm1x, align 4, !dbg !4932
  %add539 = add nsw i32 %330, %conv538, !dbg !4932
  store i32 %add539, i32* %bm1x, align 4, !dbg !4932
  %331 = load i32, i32* %bestj, align 4, !dbg !4933
  %idxprom540 = sext i32 %331 to i64, !dbg !4934
  %arrayidx541 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom540, !dbg !4934
  %arrayidx542 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx541, i64 0, i64 3, !dbg !4934
  %332 = load i8, i8* %arrayidx542, align 1, !dbg !4934
  %conv543 = sext i8 %332 to i32, !dbg !4934
  %333 = load i32, i32* %bm1y, align 4, !dbg !4935
  %add544 = add nsw i32 %333, %conv543, !dbg !4935
  store i32 %add544, i32* %bm1y, align 4, !dbg !4935
  %334 = load i32, i32* %bestj, align 4, !dbg !4936
  %idxprom545 = sext i32 %334 to i64, !dbg !4936
  %arrayidx546 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom545, !dbg !4936
  %arrayidx547 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx546, i64 0, i64 0, !dbg !4936
  %335 = bitcast i8* %arrayidx547 to %union.x264_union16_t*, !dbg !4936
  %i548 = bitcast %union.x264_union16_t* %335 to i16*, !dbg !4936
  %336 = load i16, i16* %i548, align 4, !dbg !4936
  %conv549 = zext i16 %336 to i32, !dbg !4936
  store i32 %conv549, i32* %mc_list0, align 4, !dbg !4937
  %337 = load i32, i32* %bestj, align 4, !dbg !4938
  %idxprom550 = sext i32 %337 to i64, !dbg !4938
  %arrayidx551 = getelementptr inbounds [33 x [4 x i8]], [33 x [4 x i8]]* @x264_me_refine_bidir.dia4d, i64 0, i64 %idxprom550, !dbg !4938
  %arrayidx552 = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx551, i64 0, i64 2, !dbg !4938
  %338 = bitcast i8* %arrayidx552 to %union.x264_union16_t*, !dbg !4938
  %i553 = bitcast %union.x264_union16_t* %338 to i16*, !dbg !4938
  %339 = load i16, i16* %i553, align 2, !dbg !4938
  %conv554 = zext i16 %339 to i32, !dbg !4938
  store i32 %conv554, i32* %mc_list1, align 4, !dbg !4939
  br label %for.inc555, !dbg !4940

for.inc555:                                       ; preds = %if.end524
  %340 = load i32, i32* %pass, align 4, !dbg !4941
  %inc556 = add nsw i32 %340, 1, !dbg !4941
  store i32 %inc556, i32* %pass, align 4, !dbg !4941
  br label %for.cond, !dbg !4942, !llvm.loop !4943

for.end557:                                       ; preds = %if.then523, %for.cond
  %341 = load i32, i32* %rd.addr, align 4, !dbg !4945
  %tobool558 = icmp ne i32 %341, 0, !dbg !4945
  br i1 %tobool558, label %if.then559, label %if.end654, !dbg !4947

if.then559:                                       ; preds = %for.end557
  %342 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4948
  %343 = load i32, i32* %i8.addr, align 4, !dbg !4950
  %and560 = and i32 %343, 1, !dbg !4951
  %mul561 = mul nsw i32 %and560, 2, !dbg !4952
  %344 = load i32, i32* %i8.addr, align 4, !dbg !4953
  %shr562 = ashr i32 %344, 1, !dbg !4954
  %mul563 = mul nsw i32 %shr562, 2, !dbg !4955
  %345 = load i32, i32* %bw, align 4, !dbg !4956
  %shr564 = ashr i32 %345, 2, !dbg !4957
  %346 = load i32, i32* %bh, align 4, !dbg !4958
  %shr565 = ashr i32 %346, 2, !dbg !4959
  %347 = load i32, i32* %bm0x, align 4, !dbg !4960
  %348 = load i32, i32* %bm0y, align 4, !dbg !4961
  %call566 = call i32 @pack16to32_mask(i32 %347, i32 %348), !dbg !4962
  call void @x264_macroblock_cache_mv(%struct.x264_t* %342, i32 %mul561, i32 %mul563, i32 %shr564, i32 %shr565, i32 0, i32 %call566), !dbg !4963
  %349 = load i32, i32* %bm0x, align 4, !dbg !4964
  %350 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4964
  %mvp567 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %350, i32 0, i32 10, !dbg !4964
  %arrayidx568 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp567, i64 0, i64 0, !dbg !4964
  %351 = load i16, i16* %arrayidx568, align 16, !dbg !4964
  %conv569 = sext i16 %351 to i32, !dbg !4964
  %sub570 = sub nsw i32 %349, %conv569, !dbg !4964
  %call571 = call i32 @abs(i32 %sub570) #4, !dbg !4964
  %cmp572 = icmp slt i32 %call571, 33, !dbg !4964
  br i1 %cmp572, label %cond.true574, label %cond.false580, !dbg !4964

cond.true574:                                     ; preds = %if.then559
  %352 = load i32, i32* %bm0x, align 4, !dbg !4964
  %353 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4964
  %mvp575 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %353, i32 0, i32 10, !dbg !4964
  %arrayidx576 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp575, i64 0, i64 0, !dbg !4964
  %354 = load i16, i16* %arrayidx576, align 16, !dbg !4964
  %conv577 = sext i16 %354 to i32, !dbg !4964
  %sub578 = sub nsw i32 %352, %conv577, !dbg !4964
  %call579 = call i32 @abs(i32 %sub578) #4, !dbg !4964
  br label %cond.end581, !dbg !4964

cond.false580:                                    ; preds = %if.then559
  br label %cond.end581, !dbg !4964

cond.end581:                                      ; preds = %cond.false580, %cond.true574
  %cond582 = phi i32 [ %call579, %cond.true574 ], [ 33, %cond.false580 ], !dbg !4964
  %355 = load i32, i32* %bm0y, align 4, !dbg !4965
  %356 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4965
  %mvp583 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %356, i32 0, i32 10, !dbg !4965
  %arrayidx584 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp583, i64 0, i64 1, !dbg !4965
  %357 = load i16, i16* %arrayidx584, align 2, !dbg !4965
  %conv585 = sext i16 %357 to i32, !dbg !4965
  %sub586 = sub nsw i32 %355, %conv585, !dbg !4965
  %call587 = call i32 @abs(i32 %sub586) #4, !dbg !4965
  %cmp588 = icmp slt i32 %call587, 33, !dbg !4965
  br i1 %cmp588, label %cond.true590, label %cond.false596, !dbg !4965

cond.true590:                                     ; preds = %cond.end581
  %358 = load i32, i32* %bm0y, align 4, !dbg !4965
  %359 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !4965
  %mvp591 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %359, i32 0, i32 10, !dbg !4965
  %arrayidx592 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp591, i64 0, i64 1, !dbg !4965
  %360 = load i16, i16* %arrayidx592, align 2, !dbg !4965
  %conv593 = sext i16 %360 to i32, !dbg !4965
  %sub594 = sub nsw i32 %358, %conv593, !dbg !4965
  %call595 = call i32 @abs(i32 %sub594) #4, !dbg !4965
  br label %cond.end597, !dbg !4965

cond.false596:                                    ; preds = %cond.end581
  br label %cond.end597, !dbg !4965

cond.end597:                                      ; preds = %cond.false596, %cond.true590
  %cond598 = phi i32 [ %call595, %cond.true590 ], [ 33, %cond.false596 ], !dbg !4965
  %call599 = call i32 @pack8to16(i32 %cond582, i32 %cond598), !dbg !4966
  %conv600 = trunc i32 %call599 to i16, !dbg !4966
  store i16 %conv600, i16* %amvd, align 2, !dbg !4967
  %361 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4968
  %362 = load i32, i32* %i8.addr, align 4, !dbg !4969
  %and601 = and i32 %362, 1, !dbg !4970
  %mul602 = mul nsw i32 %and601, 2, !dbg !4971
  %363 = load i32, i32* %i8.addr, align 4, !dbg !4972
  %shr603 = ashr i32 %363, 1, !dbg !4973
  %mul604 = mul nsw i32 %shr603, 2, !dbg !4974
  %364 = load i32, i32* %bw, align 4, !dbg !4975
  %shr605 = ashr i32 %364, 2, !dbg !4976
  %365 = load i32, i32* %bh, align 4, !dbg !4977
  %shr606 = ashr i32 %365, 2, !dbg !4978
  %366 = load i16, i16* %amvd, align 2, !dbg !4979
  call void @x264_macroblock_cache_mvd(%struct.x264_t* %361, i32 %mul602, i32 %mul604, i32 %shr605, i32 %shr606, i32 0, i16 zeroext %366), !dbg !4980
  %367 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !4981
  %368 = load i32, i32* %i8.addr, align 4, !dbg !4982
  %and607 = and i32 %368, 1, !dbg !4983
  %mul608 = mul nsw i32 %and607, 2, !dbg !4984
  %369 = load i32, i32* %i8.addr, align 4, !dbg !4985
  %shr609 = ashr i32 %369, 1, !dbg !4986
  %mul610 = mul nsw i32 %shr609, 2, !dbg !4987
  %370 = load i32, i32* %bw, align 4, !dbg !4988
  %shr611 = ashr i32 %370, 2, !dbg !4989
  %371 = load i32, i32* %bh, align 4, !dbg !4990
  %shr612 = ashr i32 %371, 2, !dbg !4991
  %372 = load i32, i32* %bm1x, align 4, !dbg !4992
  %373 = load i32, i32* %bm1y, align 4, !dbg !4993
  %call613 = call i32 @pack16to32_mask(i32 %372, i32 %373), !dbg !4994
  call void @x264_macroblock_cache_mv(%struct.x264_t* %367, i32 %mul608, i32 %mul610, i32 %shr611, i32 %shr612, i32 1, i32 %call613), !dbg !4995
  %374 = load i32, i32* %bm1x, align 4, !dbg !4996
  %375 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4996
  %mvp614 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %375, i32 0, i32 10, !dbg !4996
  %arrayidx615 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp614, i64 0, i64 0, !dbg !4996
  %376 = load i16, i16* %arrayidx615, align 16, !dbg !4996
  %conv616 = sext i16 %376 to i32, !dbg !4996
  %sub617 = sub nsw i32 %374, %conv616, !dbg !4996
  %call618 = call i32 @abs(i32 %sub617) #4, !dbg !4996
  %cmp619 = icmp slt i32 %call618, 33, !dbg !4996
  br i1 %cmp619, label %cond.true621, label %cond.false627, !dbg !4996

cond.true621:                                     ; preds = %cond.end597
  %377 = load i32, i32* %bm1x, align 4, !dbg !4996
  %378 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4996
  %mvp622 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %378, i32 0, i32 10, !dbg !4996
  %arrayidx623 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp622, i64 0, i64 0, !dbg !4996
  %379 = load i16, i16* %arrayidx623, align 16, !dbg !4996
  %conv624 = sext i16 %379 to i32, !dbg !4996
  %sub625 = sub nsw i32 %377, %conv624, !dbg !4996
  %call626 = call i32 @abs(i32 %sub625) #4, !dbg !4996
  br label %cond.end628, !dbg !4996

cond.false627:                                    ; preds = %cond.end597
  br label %cond.end628, !dbg !4996

cond.end628:                                      ; preds = %cond.false627, %cond.true621
  %cond629 = phi i32 [ %call626, %cond.true621 ], [ 33, %cond.false627 ], !dbg !4996
  %380 = load i32, i32* %bm1y, align 4, !dbg !4997
  %381 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4997
  %mvp630 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %381, i32 0, i32 10, !dbg !4997
  %arrayidx631 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp630, i64 0, i64 1, !dbg !4997
  %382 = load i16, i16* %arrayidx631, align 2, !dbg !4997
  %conv632 = sext i16 %382 to i32, !dbg !4997
  %sub633 = sub nsw i32 %380, %conv632, !dbg !4997
  %call634 = call i32 @abs(i32 %sub633) #4, !dbg !4997
  %cmp635 = icmp slt i32 %call634, 33, !dbg !4997
  br i1 %cmp635, label %cond.true637, label %cond.false643, !dbg !4997

cond.true637:                                     ; preds = %cond.end628
  %383 = load i32, i32* %bm1y, align 4, !dbg !4997
  %384 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !4997
  %mvp638 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %384, i32 0, i32 10, !dbg !4997
  %arrayidx639 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp638, i64 0, i64 1, !dbg !4997
  %385 = load i16, i16* %arrayidx639, align 2, !dbg !4997
  %conv640 = sext i16 %385 to i32, !dbg !4997
  %sub641 = sub nsw i32 %383, %conv640, !dbg !4997
  %call642 = call i32 @abs(i32 %sub641) #4, !dbg !4997
  br label %cond.end644, !dbg !4997

cond.false643:                                    ; preds = %cond.end628
  br label %cond.end644, !dbg !4997

cond.end644:                                      ; preds = %cond.false643, %cond.true637
  %cond645 = phi i32 [ %call642, %cond.true637 ], [ 33, %cond.false643 ], !dbg !4997
  %call646 = call i32 @pack8to16(i32 %cond629, i32 %cond645), !dbg !4998
  %conv647 = trunc i32 %call646 to i16, !dbg !4998
  store i16 %conv647, i16* %amvd, align 2, !dbg !4999
  %386 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5000
  %387 = load i32, i32* %i8.addr, align 4, !dbg !5001
  %and648 = and i32 %387, 1, !dbg !5002
  %mul649 = mul nsw i32 %and648, 2, !dbg !5003
  %388 = load i32, i32* %i8.addr, align 4, !dbg !5004
  %shr650 = ashr i32 %388, 1, !dbg !5005
  %mul651 = mul nsw i32 %shr650, 2, !dbg !5006
  %389 = load i32, i32* %bw, align 4, !dbg !5007
  %shr652 = ashr i32 %389, 2, !dbg !5008
  %390 = load i32, i32* %bh, align 4, !dbg !5009
  %shr653 = ashr i32 %390, 2, !dbg !5010
  %391 = load i16, i16* %amvd, align 2, !dbg !5011
  call void @x264_macroblock_cache_mvd(%struct.x264_t* %386, i32 %mul649, i32 %mul651, i32 %shr652, i32 %shr653, i32 1, i16 zeroext %391), !dbg !5012
  br label %if.end654, !dbg !5013

if.end654:                                        ; preds = %cond.end644, %for.end557
  %392 = load i32, i32* %bm0x, align 4, !dbg !5014
  %conv655 = trunc i32 %392 to i16, !dbg !5014
  %393 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !5015
  %mv656 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %393, i32 0, i32 13, !dbg !5016
  %arrayidx657 = getelementptr inbounds [2 x i16], [2 x i16]* %mv656, i64 0, i64 0, !dbg !5015
  store i16 %conv655, i16* %arrayidx657, align 4, !dbg !5017
  %394 = load i32, i32* %bm0y, align 4, !dbg !5018
  %conv658 = trunc i32 %394 to i16, !dbg !5018
  %395 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !5019
  %mv659 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %395, i32 0, i32 13, !dbg !5020
  %arrayidx660 = getelementptr inbounds [2 x i16], [2 x i16]* %mv659, i64 0, i64 1, !dbg !5019
  store i16 %conv658, i16* %arrayidx660, align 2, !dbg !5021
  %396 = load i32, i32* %bm1x, align 4, !dbg !5022
  %conv661 = trunc i32 %396 to i16, !dbg !5022
  %397 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !5023
  %mv662 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %397, i32 0, i32 13, !dbg !5024
  %arrayidx663 = getelementptr inbounds [2 x i16], [2 x i16]* %mv662, i64 0, i64 0, !dbg !5023
  store i16 %conv661, i16* %arrayidx663, align 4, !dbg !5025
  %398 = load i32, i32* %bm1y, align 4, !dbg !5026
  %conv664 = trunc i32 %398 to i16, !dbg !5026
  %399 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !5027
  %mv665 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %399, i32 0, i32 13, !dbg !5028
  %arrayidx666 = getelementptr inbounds [2 x i16], [2 x i16]* %mv665, i64 0, i64 1, !dbg !5027
  store i16 %conv664, i16* %arrayidx666, align 2, !dbg !5029
  br label %return, !dbg !5030

return:                                           ; preds = %if.end654, %if.then
  ret void, !dbg !5030
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_refine_bidir_rd(%struct.x264_t* %h, %struct.x264_me_t* %m0, %struct.x264_me_t* %m1, i32 %i_weight, i32 %i8, i32 %i_lambda2) #0 !dbg !5031 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m0.addr = alloca %struct.x264_me_t*, align 8
  %m1.addr = alloca %struct.x264_me_t*, align 8
  %i_weight.addr = alloca i32, align 4
  %i8.addr = alloca i32, align 4
  %i_lambda2.addr = alloca i32, align 4
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !5034, metadata !DIExpression()), !dbg !5035
  store %struct.x264_me_t* %m0, %struct.x264_me_t** %m0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m0.addr, metadata !5036, metadata !DIExpression()), !dbg !5037
  store %struct.x264_me_t* %m1, %struct.x264_me_t** %m1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m1.addr, metadata !5038, metadata !DIExpression()), !dbg !5039
  store i32 %i_weight, i32* %i_weight.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_weight.addr, metadata !5040, metadata !DIExpression()), !dbg !5041
  store i32 %i8, i32* %i8.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i8.addr, metadata !5042, metadata !DIExpression()), !dbg !5043
  store i32 %i_lambda2, i32* %i_lambda2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_lambda2.addr, metadata !5044, metadata !DIExpression()), !dbg !5045
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5046
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !5047
  %b_skip_mc = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 62, !dbg !5048
  store i32 1, i32* %b_skip_mc, align 4, !dbg !5049
  %1 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5050
  %2 = load %struct.x264_me_t*, %struct.x264_me_t** %m0.addr, align 8, !dbg !5051
  %3 = load %struct.x264_me_t*, %struct.x264_me_t** %m1.addr, align 8, !dbg !5052
  %4 = load i32, i32* %i_weight.addr, align 4, !dbg !5053
  %5 = load i32, i32* %i8.addr, align 4, !dbg !5054
  %6 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5055
  call void @x264_me_refine_bidir(%struct.x264_t* %1, %struct.x264_me_t* %2, %struct.x264_me_t* %3, i32 %4, i32 %5, i32 %6, i32 1), !dbg !5056
  %7 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5057
  %mb1 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %7, i32 0, i32 55, !dbg !5058
  %b_skip_mc2 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb1, i32 0, i32 62, !dbg !5059
  store i32 0, i32* %b_skip_mc2, align 4, !dbg !5060
  ret void, !dbg !5061
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @x264_me_refine_qpel_rd(%struct.x264_t* %h, %struct.x264_me_t* %m, i32 %i_lambda2, i32 %i4, i32 %i_list) #0 !dbg !5062 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %m.addr = alloca %struct.x264_me_t*, align 8
  %i_lambda2.addr = alloca i32, align 4
  %i4.addr = alloca i32, align 4
  %i_list.addr = alloca i32, align 4
  %cache_mv = alloca i16*, align 8
  %p_cost_mvx = alloca i16*, align 8
  %p_cost_mvy = alloca i16*, align 8
  %bw = alloca i32, align 4
  %bh = alloca i32, align 4
  %i_pixel11 = alloca i32, align 4
  %mvy_offset = alloca i32, align 4
  %bcost = alloca i64, align 8
  %bmx = alloca i32, align 4
  %bmy = alloca i32, align 4
  %omx = alloca i32, align 4
  %omy = alloca i32, align 4
  %pmx = alloca i32, align 4
  %pmy = alloca i32, align 4
  %bsatd = alloca i32, align 4
  %satd = alloca i32, align 4
  %dir = alloca i32, align 4
  %i8 = alloca i32, align 4
  %amvd = alloca i16, align 2
  %pix = alloca i8*, align 8
  %pixu = alloca i8*, align 8
  %pixv = alloca i8*, align 8
  %cost = alloca i64, align 8
  %cost185 = alloca i64, align 8
  %j = alloca i32, align 4
  %cost341 = alloca i64, align 8
  %i425 = alloca i32, align 4
  %odir = alloca i32, align 4
  %j449 = alloca i32, align 4
  %cost530 = alloca i64, align 8
  %i624 = alloca i32, align 4
  %cost705 = alloca i64, align 8
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !5065, metadata !DIExpression()), !dbg !5066
  store %struct.x264_me_t* %m, %struct.x264_me_t** %m.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_me_t** %m.addr, metadata !5067, metadata !DIExpression()), !dbg !5068
  store i32 %i_lambda2, i32* %i_lambda2.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_lambda2.addr, metadata !5069, metadata !DIExpression()), !dbg !5070
  store i32 %i4, i32* %i4.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i4.addr, metadata !5071, metadata !DIExpression()), !dbg !5072
  store i32 %i_list, i32* %i_list.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_list.addr, metadata !5073, metadata !DIExpression()), !dbg !5074
  call void @llvm.dbg.declare(metadata i16** %cache_mv, metadata !5075, metadata !DIExpression()), !dbg !5076
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5077
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !5078
  %cache = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 67, !dbg !5079
  %mv = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache, i32 0, i32 4, !dbg !5080
  %1 = load i32, i32* %i_list.addr, align 4, !dbg !5081
  %idxprom = sext i32 %1 to i64, !dbg !5077
  %arrayidx = getelementptr inbounds [2 x [40 x [2 x i16]]], [2 x [40 x [2 x i16]]]* %mv, i64 0, i64 %idxprom, !dbg !5077
  %2 = load i32, i32* %i4.addr, align 4, !dbg !5082
  %idxprom1 = sext i32 %2 to i64, !dbg !5083
  %arrayidx2 = getelementptr inbounds [27 x i32], [27 x i32]* @x264_scan8, i64 0, i64 %idxprom1, !dbg !5083
  %3 = load i32, i32* %arrayidx2, align 4, !dbg !5083
  %idxprom3 = sext i32 %3 to i64, !dbg !5077
  %arrayidx4 = getelementptr inbounds [40 x [2 x i16]], [40 x [2 x i16]]* %arrayidx, i64 0, i64 %idxprom3, !dbg !5077
  %arraydecay = getelementptr inbounds [2 x i16], [2 x i16]* %arrayidx4, i64 0, i64 0, !dbg !5077
  store i16* %arraydecay, i16** %cache_mv, align 8, !dbg !5076
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvx, metadata !5084, metadata !DIExpression()), !dbg !5085
  call void @llvm.dbg.declare(metadata i16** %p_cost_mvy, metadata !5086, metadata !DIExpression()), !dbg !5087
  call void @llvm.dbg.declare(metadata i32* %bw, metadata !5088, metadata !DIExpression()), !dbg !5089
  %4 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5090
  %i_pixel = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %4, i32 0, i32 0, !dbg !5091
  %5 = load i32, i32* %i_pixel, align 16, !dbg !5091
  %idxprom5 = sext i32 %5 to i64, !dbg !5092
  %arrayidx6 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom5, !dbg !5092
  %w = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx6, i32 0, i32 0, !dbg !5093
  %6 = load i32, i32* %w, align 8, !dbg !5093
  store i32 %6, i32* %bw, align 4, !dbg !5089
  call void @llvm.dbg.declare(metadata i32* %bh, metadata !5094, metadata !DIExpression()), !dbg !5095
  %7 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5096
  %i_pixel7 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %7, i32 0, i32 0, !dbg !5097
  %8 = load i32, i32* %i_pixel7, align 16, !dbg !5097
  %idxprom8 = sext i32 %8 to i64, !dbg !5098
  %arrayidx9 = getelementptr inbounds [7 x %struct.anon.15], [7 x %struct.anon.15]* @x264_pixel_size, i64 0, i64 %idxprom8, !dbg !5098
  %h10 = getelementptr inbounds %struct.anon.15, %struct.anon.15* %arrayidx9, i32 0, i32 1, !dbg !5099
  %9 = load i32, i32* %h10, align 4, !dbg !5099
  store i32 %9, i32* %bh, align 4, !dbg !5095
  call void @llvm.dbg.declare(metadata i32* %i_pixel11, metadata !5100, metadata !DIExpression()), !dbg !5101
  %10 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5102
  %i_pixel12 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %10, i32 0, i32 0, !dbg !5103
  %11 = load i32, i32* %i_pixel12, align 16, !dbg !5103
  store i32 %11, i32* %i_pixel11, align 4, !dbg !5101
  call void @llvm.dbg.declare(metadata i32* %mvy_offset, metadata !5104, metadata !DIExpression()), !dbg !5105
  %12 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5106
  %mb13 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %12, i32 0, i32 55, !dbg !5107
  %b_interlaced = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb13, i32 0, i32 17, !dbg !5108
  %13 = load i32, i32* %b_interlaced, align 4, !dbg !5108
  %14 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5109
  %i_ref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %14, i32 0, i32 3, !dbg !5110
  %15 = load i32, i32* %i_ref, align 4, !dbg !5110
  %and = and i32 %13, %15, !dbg !5111
  %tobool = icmp ne i32 %and, 0, !dbg !5111
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5106

cond.true:                                        ; preds = %entry
  %16 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5112
  %mb14 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %16, i32 0, i32 55, !dbg !5113
  %i_mb_y = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb14, i32 0, i32 5, !dbg !5114
  %17 = load i32, i32* %i_mb_y, align 4, !dbg !5114
  %and15 = and i32 %17, 1, !dbg !5115
  %mul = mul nsw i32 %and15, 4, !dbg !5116
  %sub = sub nsw i32 %mul, 2, !dbg !5117
  br label %cond.end, !dbg !5106

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ 0, %cond.false ], !dbg !5106
  store i32 %cond, i32* %mvy_offset, align 4, !dbg !5105
  call void @llvm.dbg.declare(metadata i64* %bcost, metadata !5118, metadata !DIExpression()), !dbg !5119
  store i64 1152921504606846976, i64* %bcost, align 8, !dbg !5119
  call void @llvm.dbg.declare(metadata i32* %bmx, metadata !5120, metadata !DIExpression()), !dbg !5121
  %18 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5122
  %mv16 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %18, i32 0, i32 13, !dbg !5123
  %arrayidx17 = getelementptr inbounds [2 x i16], [2 x i16]* %mv16, i64 0, i64 0, !dbg !5122
  %19 = load i16, i16* %arrayidx17, align 4, !dbg !5122
  %conv = sext i16 %19 to i32, !dbg !5122
  store i32 %conv, i32* %bmx, align 4, !dbg !5121
  call void @llvm.dbg.declare(metadata i32* %bmy, metadata !5124, metadata !DIExpression()), !dbg !5125
  %20 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5126
  %mv18 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %20, i32 0, i32 13, !dbg !5127
  %arrayidx19 = getelementptr inbounds [2 x i16], [2 x i16]* %mv18, i64 0, i64 1, !dbg !5126
  %21 = load i16, i16* %arrayidx19, align 2, !dbg !5126
  %conv20 = sext i16 %21 to i32, !dbg !5126
  store i32 %conv20, i32* %bmy, align 4, !dbg !5125
  call void @llvm.dbg.declare(metadata i32* %omx, metadata !5128, metadata !DIExpression()), !dbg !5129
  call void @llvm.dbg.declare(metadata i32* %omy, metadata !5130, metadata !DIExpression()), !dbg !5131
  call void @llvm.dbg.declare(metadata i32* %pmx, metadata !5132, metadata !DIExpression()), !dbg !5133
  call void @llvm.dbg.declare(metadata i32* %pmy, metadata !5134, metadata !DIExpression()), !dbg !5135
  call void @llvm.dbg.declare(metadata i32* %bsatd, metadata !5136, metadata !DIExpression()), !dbg !5137
  call void @llvm.dbg.declare(metadata i32* %satd, metadata !5138, metadata !DIExpression()), !dbg !5139
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !5140, metadata !DIExpression()), !dbg !5141
  store i32 -2, i32* %dir, align 4, !dbg !5141
  call void @llvm.dbg.declare(metadata i32* %i8, metadata !5142, metadata !DIExpression()), !dbg !5143
  %22 = load i32, i32* %i4.addr, align 4, !dbg !5144
  %shr = ashr i32 %22, 2, !dbg !5145
  store i32 %shr, i32* %i8, align 4, !dbg !5143
  call void @llvm.dbg.declare(metadata i16* %amvd, metadata !5146, metadata !DIExpression()), !dbg !5147
  call void @llvm.dbg.declare(metadata i8** %pix, metadata !5148, metadata !DIExpression()), !dbg !5149
  %23 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5150
  %mb21 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %23, i32 0, i32 55, !dbg !5151
  %pic = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb21, i32 0, i32 66, !dbg !5152
  %p_fdec = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic, i32 0, i32 18, !dbg !5153
  %arrayidx22 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec, i64 0, i64 0, !dbg !5150
  %24 = load i8*, i8** %arrayidx22, align 16, !dbg !5150
  %25 = load i32, i32* %i4.addr, align 4, !dbg !5154
  %idxprom23 = sext i32 %25 to i64, !dbg !5155
  %arrayidx24 = getelementptr inbounds [16 x i16], [16 x i16]* @block_idx_xy_fdec, i64 0, i64 %idxprom23, !dbg !5155
  %26 = load i16, i16* %arrayidx24, align 2, !dbg !5155
  %idxprom25 = zext i16 %26 to i64, !dbg !5150
  %arrayidx26 = getelementptr inbounds i8, i8* %24, i64 %idxprom25, !dbg !5150
  store i8* %arrayidx26, i8** %pix, align 8, !dbg !5149
  call void @llvm.dbg.declare(metadata i8** %pixu, metadata !5156, metadata !DIExpression()), !dbg !5157
  %27 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5158
  %mb27 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %27, i32 0, i32 55, !dbg !5159
  %pic28 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb27, i32 0, i32 66, !dbg !5160
  %p_fdec29 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic28, i32 0, i32 18, !dbg !5161
  %arrayidx30 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec29, i64 0, i64 1, !dbg !5158
  %28 = load i8*, i8** %arrayidx30, align 8, !dbg !5158
  %29 = load i32, i32* %i8, align 4, !dbg !5162
  %shr31 = ashr i32 %29, 1, !dbg !5163
  %mul32 = mul nsw i32 %shr31, 4, !dbg !5164
  %mul33 = mul nsw i32 %mul32, 32, !dbg !5165
  %30 = load i32, i32* %i8, align 4, !dbg !5166
  %and34 = and i32 %30, 1, !dbg !5167
  %mul35 = mul nsw i32 %and34, 4, !dbg !5168
  %add = add nsw i32 %mul33, %mul35, !dbg !5169
  %idxprom36 = sext i32 %add to i64, !dbg !5158
  %arrayidx37 = getelementptr inbounds i8, i8* %28, i64 %idxprom36, !dbg !5158
  store i8* %arrayidx37, i8** %pixu, align 8, !dbg !5157
  call void @llvm.dbg.declare(metadata i8** %pixv, metadata !5170, metadata !DIExpression()), !dbg !5171
  %31 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5172
  %mb38 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %31, i32 0, i32 55, !dbg !5173
  %pic39 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb38, i32 0, i32 66, !dbg !5174
  %p_fdec40 = getelementptr inbounds %struct.anon.11, %struct.anon.11* %pic39, i32 0, i32 18, !dbg !5175
  %arrayidx41 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fdec40, i64 0, i64 2, !dbg !5172
  %32 = load i8*, i8** %arrayidx41, align 16, !dbg !5172
  %33 = load i32, i32* %i8, align 4, !dbg !5176
  %shr42 = ashr i32 %33, 1, !dbg !5177
  %mul43 = mul nsw i32 %shr42, 4, !dbg !5178
  %mul44 = mul nsw i32 %mul43, 32, !dbg !5179
  %34 = load i32, i32* %i8, align 4, !dbg !5180
  %and45 = and i32 %34, 1, !dbg !5181
  %mul46 = mul nsw i32 %and45, 4, !dbg !5182
  %add47 = add nsw i32 %mul44, %mul46, !dbg !5183
  %idxprom48 = sext i32 %add47 to i64, !dbg !5172
  %arrayidx49 = getelementptr inbounds i8, i8* %32, i64 %idxprom48, !dbg !5172
  store i8* %arrayidx49, i8** %pixv, align 8, !dbg !5171
  %35 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5184
  %mb50 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %35, i32 0, i32 55, !dbg !5185
  %b_skip_mc = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb50, i32 0, i32 62, !dbg !5186
  store i32 1, i32* %b_skip_mc, align 4, !dbg !5187
  %36 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5188
  %i_pixel51 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %36, i32 0, i32 0, !dbg !5190
  %37 = load i32, i32* %i_pixel51, align 16, !dbg !5190
  %cmp = icmp ne i32 %37, 0, !dbg !5191
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5192

land.lhs.true:                                    ; preds = %cond.end
  %38 = load i32, i32* %i4.addr, align 4, !dbg !5193
  %cmp53 = icmp ne i32 %38, 0, !dbg !5194
  br i1 %cmp53, label %if.then, label %if.end, !dbg !5195

if.then:                                          ; preds = %land.lhs.true
  %39 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5196
  %40 = load i32, i32* %i_list.addr, align 4, !dbg !5197
  %41 = load i32, i32* %i4.addr, align 4, !dbg !5198
  %42 = load i32, i32* %bw, align 4, !dbg !5199
  %shr55 = ashr i32 %42, 2, !dbg !5200
  %43 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5201
  %mvp = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %43, i32 0, i32 10, !dbg !5202
  %arraydecay56 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp, i64 0, i64 0, !dbg !5201
  call void @x264_mb_predict_mv(%struct.x264_t* %39, i32 %40, i32 %41, i32 %shr55, i16* %arraydecay56), !dbg !5203
  br label %if.end, !dbg !5203

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %44 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5204
  %mvp57 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %44, i32 0, i32 10, !dbg !5205
  %arrayidx58 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp57, i64 0, i64 0, !dbg !5204
  %45 = load i16, i16* %arrayidx58, align 16, !dbg !5204
  %conv59 = sext i16 %45 to i32, !dbg !5204
  store i32 %conv59, i32* %pmx, align 4, !dbg !5206
  %46 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5207
  %mvp60 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %46, i32 0, i32 10, !dbg !5208
  %arrayidx61 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp60, i64 0, i64 1, !dbg !5207
  %47 = load i16, i16* %arrayidx61, align 2, !dbg !5207
  %conv62 = sext i16 %47 to i32, !dbg !5207
  store i32 %conv62, i32* %pmy, align 4, !dbg !5209
  %48 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5210
  %p_cost_mv = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %48, i32 0, i32 1, !dbg !5211
  %49 = load i16*, i16** %p_cost_mv, align 8, !dbg !5211
  %50 = load i32, i32* %pmx, align 4, !dbg !5212
  %idx.ext = sext i32 %50 to i64, !dbg !5213
  %idx.neg = sub i64 0, %idx.ext, !dbg !5213
  %add.ptr = getelementptr inbounds i16, i16* %49, i64 %idx.neg, !dbg !5213
  store i16* %add.ptr, i16** %p_cost_mvx, align 8, !dbg !5214
  %51 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5215
  %p_cost_mv63 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %51, i32 0, i32 1, !dbg !5216
  %52 = load i16*, i16** %p_cost_mv63, align 8, !dbg !5216
  %53 = load i32, i32* %pmy, align 4, !dbg !5217
  %idx.ext64 = sext i32 %53 to i64, !dbg !5218
  %idx.neg65 = sub i64 0, %idx.ext64, !dbg !5218
  %add.ptr66 = getelementptr inbounds i16, i16* %52, i64 %idx.neg65, !dbg !5218
  store i16* %add.ptr66, i16** %p_cost_mvy, align 8, !dbg !5219
  %54 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5220
  %mc = getelementptr inbounds %struct.x264_t, %struct.x264_t* %54, i32 0, i32 70, !dbg !5220
  %mc_luma = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc, i32 0, i32 0, !dbg !5220
  %55 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma, align 8, !dbg !5220
  %56 = load i8*, i8** %pix, align 8, !dbg !5220
  %57 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5220
  %p_fref = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %57, i32 0, i32 5, !dbg !5220
  %arraydecay67 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref, i64 0, i64 0, !dbg !5220
  %58 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5220
  %i_stride = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %58, i32 0, i32 9, !dbg !5220
  %arrayidx68 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride, i64 0, i64 0, !dbg !5220
  %59 = load i32, i32* %arrayidx68, align 8, !dbg !5220
  %60 = load i32, i32* %bmx, align 4, !dbg !5220
  %61 = load i32, i32* %bmy, align 4, !dbg !5220
  %62 = load i32, i32* %bw, align 4, !dbg !5220
  %63 = load i32, i32* %bh, align 4, !dbg !5220
  %64 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5220
  %weight = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %64, i32 0, i32 4, !dbg !5220
  %65 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight, align 8, !dbg !5220
  %arrayidx69 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %65, i64 0, !dbg !5220
  call void %55(i8* %56, i32 32, i8** %arraydecay67, i32 %59, i32 %60, i32 %61, i32 %62, i32 %63, %struct.x264_weight_t* %arrayidx69), !dbg !5220
  %66 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5220
  %pixf = getelementptr inbounds %struct.x264_t, %struct.x264_t* %66, i32 0, i32 69, !dbg !5220
  %mbcmp = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf, i32 0, i32 5, !dbg !5220
  %67 = load i32, i32* %i_pixel11, align 4, !dbg !5220
  %idxprom70 = sext i32 %67 to i64, !dbg !5220
  %arrayidx71 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp, i64 0, i64 %idxprom70, !dbg !5220
  %68 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx71, align 8, !dbg !5220
  %69 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5220
  %p_fenc = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %69, i32 0, i32 7, !dbg !5220
  %arrayidx72 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc, i64 0, i64 0, !dbg !5220
  %70 = load i8*, i8** %arrayidx72, align 8, !dbg !5220
  %71 = load i8*, i8** %pix, align 8, !dbg !5220
  %call = call i32 %68(i8* %70, i32 16, i8* %71, i32 32), !dbg !5220
  %72 = load i16*, i16** %p_cost_mvx, align 8, !dbg !5220
  %73 = load i32, i32* %bmx, align 4, !dbg !5220
  %idxprom73 = sext i32 %73 to i64, !dbg !5220
  %arrayidx74 = getelementptr inbounds i16, i16* %72, i64 %idxprom73, !dbg !5220
  %74 = load i16, i16* %arrayidx74, align 2, !dbg !5220
  %conv75 = zext i16 %74 to i32, !dbg !5220
  %add76 = add nsw i32 %call, %conv75, !dbg !5220
  %75 = load i16*, i16** %p_cost_mvy, align 8, !dbg !5220
  %76 = load i32, i32* %bmy, align 4, !dbg !5220
  %idxprom77 = sext i32 %76 to i64, !dbg !5220
  %arrayidx78 = getelementptr inbounds i16, i16* %75, i64 %idxprom77, !dbg !5220
  %77 = load i16, i16* %arrayidx78, align 2, !dbg !5220
  %conv79 = zext i16 %77 to i32, !dbg !5220
  %add80 = add nsw i32 %add76, %conv79, !dbg !5220
  store i32 %add80, i32* %bsatd, align 4, !dbg !5220
  %78 = load i32, i32* %bsatd, align 4, !dbg !5224
  %79 = load i32, i32* %bsatd, align 4, !dbg !5224
  %cmp81 = icmp slt i32 %78, %79, !dbg !5224
  br i1 %cmp81, label %if.then83, label %if.end84, !dbg !5220

if.then83:                                        ; preds = %if.end
  %80 = load i32, i32* %bsatd, align 4, !dbg !5224
  store i32 %80, i32* %bsatd, align 4, !dbg !5224
  br label %if.end84, !dbg !5224

if.end84:                                         ; preds = %if.then83, %if.end
  %81 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5226
  %i_pixel85 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %81, i32 0, i32 0, !dbg !5228
  %82 = load i32, i32* %i_pixel85, align 16, !dbg !5228
  %cmp86 = icmp ne i32 %82, 0, !dbg !5229
  br i1 %cmp86, label %if.then88, label %if.else, !dbg !5230

if.then88:                                        ; preds = %if.end84
  %83 = load i32, i32* %bsatd, align 4, !dbg !5231
  %mul89 = mul nsw i32 %83, 17, !dbg !5231
  %div = sdiv i32 %mul89, 16, !dbg !5231
  %cmp90 = icmp sle i32 0, %div, !dbg !5231
  br i1 %cmp90, label %if.then92, label %if.end122, !dbg !5234

if.then92:                                        ; preds = %if.then88
  call void @llvm.dbg.declare(metadata i64* %cost, metadata !5235, metadata !DIExpression()), !dbg !5237
  %84 = load i32, i32* %bmx, align 4, !dbg !5237
  %85 = load i32, i32* %bmy, align 4, !dbg !5237
  %call93 = call i32 @pack16to32_mask(i32 %84, i32 %85), !dbg !5237
  %86 = load i16*, i16** %cache_mv, align 8, !dbg !5237
  %87 = bitcast i16* %86 to %union.x264_union32_t*, !dbg !5237
  %i = bitcast %union.x264_union32_t* %87 to i32*, !dbg !5237
  store i32 %call93, i32* %i, align 4, !dbg !5237
  %88 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5238
  %i_pixel94 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %88, i32 0, i32 0, !dbg !5238
  %89 = load i32, i32* %i_pixel94, align 16, !dbg !5238
  %cmp95 = icmp sle i32 %89, 3, !dbg !5238
  br i1 %cmp95, label %if.then97, label %if.end115, !dbg !5237

if.then97:                                        ; preds = %if.then92
  %90 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5240
  %mc98 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %90, i32 0, i32 70, !dbg !5240
  %mc_chroma = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc98, i32 0, i32 2, !dbg !5240
  %91 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma, align 8, !dbg !5240
  %92 = load i8*, i8** %pixu, align 8, !dbg !5240
  %93 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5240
  %p_fref99 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %93, i32 0, i32 5, !dbg !5240
  %arrayidx100 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref99, i64 0, i64 4, !dbg !5240
  %94 = load i8*, i8** %arrayidx100, align 16, !dbg !5240
  %95 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5240
  %i_stride101 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %95, i32 0, i32 9, !dbg !5240
  %arrayidx102 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride101, i64 0, i64 1, !dbg !5240
  %96 = load i32, i32* %arrayidx102, align 4, !dbg !5240
  %97 = load i32, i32* %bmx, align 4, !dbg !5240
  %98 = load i32, i32* %bmy, align 4, !dbg !5240
  %99 = load i32, i32* %mvy_offset, align 4, !dbg !5240
  %add103 = add nsw i32 %98, %99, !dbg !5240
  %100 = load i32, i32* %bw, align 4, !dbg !5240
  %shr104 = ashr i32 %100, 1, !dbg !5240
  %101 = load i32, i32* %bh, align 4, !dbg !5240
  %shr105 = ashr i32 %101, 1, !dbg !5240
  call void %91(i8* %92, i32 32, i8* %94, i32 %96, i32 %97, i32 %add103, i32 %shr104, i32 %shr105), !dbg !5240
  %102 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5240
  %mc106 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %102, i32 0, i32 70, !dbg !5240
  %mc_chroma107 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc106, i32 0, i32 2, !dbg !5240
  %103 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma107, align 8, !dbg !5240
  %104 = load i8*, i8** %pixv, align 8, !dbg !5240
  %105 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5240
  %p_fref108 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %105, i32 0, i32 5, !dbg !5240
  %arrayidx109 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref108, i64 0, i64 5, !dbg !5240
  %106 = load i8*, i8** %arrayidx109, align 8, !dbg !5240
  %107 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5240
  %i_stride110 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %107, i32 0, i32 9, !dbg !5240
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride110, i64 0, i64 1, !dbg !5240
  %108 = load i32, i32* %arrayidx111, align 4, !dbg !5240
  %109 = load i32, i32* %bmx, align 4, !dbg !5240
  %110 = load i32, i32* %bmy, align 4, !dbg !5240
  %111 = load i32, i32* %mvy_offset, align 4, !dbg !5240
  %add112 = add nsw i32 %110, %111, !dbg !5240
  %112 = load i32, i32* %bw, align 4, !dbg !5240
  %shr113 = ashr i32 %112, 1, !dbg !5240
  %113 = load i32, i32* %bh, align 4, !dbg !5240
  %shr114 = ashr i32 %113, 1, !dbg !5240
  call void %103(i8* %104, i32 32, i8* %106, i32 %108, i32 %109, i32 %add112, i32 %shr113, i32 %shr114), !dbg !5240
  br label %if.end115, !dbg !5240

if.end115:                                        ; preds = %if.then97, %if.then92
  %114 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5237
  %115 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5237
  %116 = load i32, i32* %i4.addr, align 4, !dbg !5237
  %117 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5237
  %i_pixel116 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %117, i32 0, i32 0, !dbg !5237
  %118 = load i32, i32* %i_pixel116, align 16, !dbg !5237
  %call117 = call i64 @x264_rd_cost_part(%struct.x264_t* %114, i32 %115, i32 %116, i32 %118), !dbg !5237
  store i64 %call117, i64* %cost, align 8, !dbg !5237
  %119 = load i64, i64* %cost, align 8, !dbg !5242
  %120 = load i64, i64* %bcost, align 8, !dbg !5242
  %cmp118 = icmp ult i64 %119, %120, !dbg !5242
  br i1 %cmp118, label %if.then120, label %if.end121, !dbg !5237

if.then120:                                       ; preds = %if.end115
  %121 = load i64, i64* %cost, align 8, !dbg !5244
  store i64 %121, i64* %bcost, align 8, !dbg !5244
  %122 = load i32, i32* %bmx, align 4, !dbg !5244
  store i32 %122, i32* %bmx, align 4, !dbg !5244
  %123 = load i32, i32* %bmy, align 4, !dbg !5244
  store i32 %123, i32* %bmy, align 4, !dbg !5244
  %124 = load i32, i32* %dir, align 4, !dbg !5244
  store i32 %124, i32* %dir, align 4, !dbg !5244
  br label %if.end121, !dbg !5244

if.end121:                                        ; preds = %if.then120, %if.end115
  br label %if.end122, !dbg !5237

if.end122:                                        ; preds = %if.end121, %if.then88
  br label %if.end125, !dbg !5234

if.else:                                          ; preds = %if.end84
  %125 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5246
  %cost123 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %125, i32 0, i32 12, !dbg !5247
  %126 = load i32, i32* %cost123, align 8, !dbg !5247
  %conv124 = sext i32 %126 to i64, !dbg !5246
  store i64 %conv124, i64* %bcost, align 8, !dbg !5248
  br label %if.end125

if.end125:                                        ; preds = %if.else, %if.end122
  %127 = load i32, i32* %bmx, align 4, !dbg !5249
  %128 = load i32, i32* %pmx, align 4, !dbg !5251
  %cmp126 = icmp ne i32 %127, %128, !dbg !5252
  br i1 %cmp126, label %land.lhs.true130, label %lor.lhs.false, !dbg !5253

lor.lhs.false:                                    ; preds = %if.end125
  %129 = load i32, i32* %bmy, align 4, !dbg !5254
  %130 = load i32, i32* %pmy, align 4, !dbg !5255
  %cmp128 = icmp ne i32 %129, %130, !dbg !5256
  br i1 %cmp128, label %land.lhs.true130, label %if.end231, !dbg !5257

land.lhs.true130:                                 ; preds = %lor.lhs.false, %if.end125
  %131 = load i32, i32* %pmx, align 4, !dbg !5258
  %132 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5259
  %mb131 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %132, i32 0, i32 55, !dbg !5260
  %mv_min_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb131, i32 0, i32 20, !dbg !5261
  %arrayidx132 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel, i64 0, i64 0, !dbg !5259
  %133 = load i32, i32* %arrayidx132, align 8, !dbg !5259
  %cmp133 = icmp sge i32 %131, %133, !dbg !5262
  br i1 %cmp133, label %land.lhs.true135, label %if.end231, !dbg !5263

land.lhs.true135:                                 ; preds = %land.lhs.true130
  %134 = load i32, i32* %pmx, align 4, !dbg !5264
  %135 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5265
  %mb136 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %135, i32 0, i32 55, !dbg !5266
  %mv_max_spel = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb136, i32 0, i32 21, !dbg !5267
  %arrayidx137 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel, i64 0, i64 0, !dbg !5265
  %136 = load i32, i32* %arrayidx137, align 16, !dbg !5265
  %cmp138 = icmp sle i32 %134, %136, !dbg !5268
  br i1 %cmp138, label %land.lhs.true140, label %if.end231, !dbg !5269

land.lhs.true140:                                 ; preds = %land.lhs.true135
  %137 = load i32, i32* %pmy, align 4, !dbg !5270
  %138 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5271
  %mb141 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %138, i32 0, i32 55, !dbg !5272
  %mv_min_spel142 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb141, i32 0, i32 20, !dbg !5273
  %arrayidx143 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel142, i64 0, i64 1, !dbg !5271
  %139 = load i32, i32* %arrayidx143, align 4, !dbg !5271
  %cmp144 = icmp sge i32 %137, %139, !dbg !5274
  br i1 %cmp144, label %land.lhs.true146, label %if.end231, !dbg !5275

land.lhs.true146:                                 ; preds = %land.lhs.true140
  %140 = load i32, i32* %pmy, align 4, !dbg !5276
  %141 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5277
  %mb147 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %141, i32 0, i32 55, !dbg !5278
  %mv_max_spel148 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb147, i32 0, i32 21, !dbg !5279
  %arrayidx149 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel148, i64 0, i64 1, !dbg !5277
  %142 = load i32, i32* %arrayidx149, align 4, !dbg !5277
  %cmp150 = icmp sle i32 %140, %142, !dbg !5280
  br i1 %cmp150, label %if.then152, label %if.end231, !dbg !5281

if.then152:                                       ; preds = %land.lhs.true146
  %143 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5282
  %mc153 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %143, i32 0, i32 70, !dbg !5282
  %mc_luma154 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc153, i32 0, i32 0, !dbg !5282
  %144 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma154, align 8, !dbg !5282
  %145 = load i8*, i8** %pix, align 8, !dbg !5282
  %146 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5282
  %p_fref155 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %146, i32 0, i32 5, !dbg !5282
  %arraydecay156 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref155, i64 0, i64 0, !dbg !5282
  %147 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5282
  %i_stride157 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %147, i32 0, i32 9, !dbg !5282
  %arrayidx158 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride157, i64 0, i64 0, !dbg !5282
  %148 = load i32, i32* %arrayidx158, align 8, !dbg !5282
  %149 = load i32, i32* %pmx, align 4, !dbg !5282
  %150 = load i32, i32* %pmy, align 4, !dbg !5282
  %151 = load i32, i32* %bw, align 4, !dbg !5282
  %152 = load i32, i32* %bh, align 4, !dbg !5282
  %153 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5282
  %weight159 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %153, i32 0, i32 4, !dbg !5282
  %154 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight159, align 8, !dbg !5282
  %arrayidx160 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %154, i64 0, !dbg !5282
  call void %144(i8* %145, i32 32, i8** %arraydecay156, i32 %148, i32 %149, i32 %150, i32 %151, i32 %152, %struct.x264_weight_t* %arrayidx160), !dbg !5282
  %155 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5282
  %pixf161 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %155, i32 0, i32 69, !dbg !5282
  %mbcmp162 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf161, i32 0, i32 5, !dbg !5282
  %156 = load i32, i32* %i_pixel11, align 4, !dbg !5282
  %idxprom163 = sext i32 %156 to i64, !dbg !5282
  %arrayidx164 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp162, i64 0, i64 %idxprom163, !dbg !5282
  %157 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx164, align 8, !dbg !5282
  %158 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5282
  %p_fenc165 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %158, i32 0, i32 7, !dbg !5282
  %arrayidx166 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc165, i64 0, i64 0, !dbg !5282
  %159 = load i8*, i8** %arrayidx166, align 8, !dbg !5282
  %160 = load i8*, i8** %pix, align 8, !dbg !5282
  %call167 = call i32 %157(i8* %159, i32 16, i8* %160, i32 32), !dbg !5282
  %161 = load i16*, i16** %p_cost_mvx, align 8, !dbg !5282
  %162 = load i32, i32* %pmx, align 4, !dbg !5282
  %idxprom168 = sext i32 %162 to i64, !dbg !5282
  %arrayidx169 = getelementptr inbounds i16, i16* %161, i64 %idxprom168, !dbg !5282
  %163 = load i16, i16* %arrayidx169, align 2, !dbg !5282
  %conv170 = zext i16 %163 to i32, !dbg !5282
  %add171 = add nsw i32 %call167, %conv170, !dbg !5282
  %164 = load i16*, i16** %p_cost_mvy, align 8, !dbg !5282
  %165 = load i32, i32* %pmy, align 4, !dbg !5282
  %idxprom172 = sext i32 %165 to i64, !dbg !5282
  %arrayidx173 = getelementptr inbounds i16, i16* %164, i64 %idxprom172, !dbg !5282
  %166 = load i16, i16* %arrayidx173, align 2, !dbg !5282
  %conv174 = zext i16 %166 to i32, !dbg !5282
  %add175 = add nsw i32 %add171, %conv174, !dbg !5282
  store i32 %add175, i32* %satd, align 4, !dbg !5282
  %167 = load i32, i32* %satd, align 4, !dbg !5287
  %168 = load i32, i32* %bsatd, align 4, !dbg !5287
  %cmp176 = icmp slt i32 %167, %168, !dbg !5287
  br i1 %cmp176, label %if.then178, label %if.end179, !dbg !5282

if.then178:                                       ; preds = %if.then152
  %169 = load i32, i32* %satd, align 4, !dbg !5287
  store i32 %169, i32* %bsatd, align 4, !dbg !5287
  br label %if.end179, !dbg !5287

if.end179:                                        ; preds = %if.then178, %if.then152
  %170 = load i32, i32* %satd, align 4, !dbg !5289
  %171 = load i32, i32* %bsatd, align 4, !dbg !5289
  %mul180 = mul nsw i32 %171, 17, !dbg !5289
  %div181 = sdiv i32 %mul180, 16, !dbg !5289
  %cmp182 = icmp sle i32 %170, %div181, !dbg !5289
  br i1 %cmp182, label %if.then184, label %if.end217, !dbg !5292

if.then184:                                       ; preds = %if.end179
  call void @llvm.dbg.declare(metadata i64* %cost185, metadata !5293, metadata !DIExpression()), !dbg !5295
  %172 = load i32, i32* %pmx, align 4, !dbg !5295
  %173 = load i32, i32* %pmy, align 4, !dbg !5295
  %call186 = call i32 @pack16to32_mask(i32 %172, i32 %173), !dbg !5295
  %174 = load i16*, i16** %cache_mv, align 8, !dbg !5295
  %175 = bitcast i16* %174 to %union.x264_union32_t*, !dbg !5295
  %i187 = bitcast %union.x264_union32_t* %175 to i32*, !dbg !5295
  store i32 %call186, i32* %i187, align 4, !dbg !5295
  %176 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5296
  %i_pixel188 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %176, i32 0, i32 0, !dbg !5296
  %177 = load i32, i32* %i_pixel188, align 16, !dbg !5296
  %cmp189 = icmp sle i32 %177, 3, !dbg !5296
  br i1 %cmp189, label %if.then191, label %if.end210, !dbg !5295

if.then191:                                       ; preds = %if.then184
  %178 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5298
  %mc192 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %178, i32 0, i32 70, !dbg !5298
  %mc_chroma193 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc192, i32 0, i32 2, !dbg !5298
  %179 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma193, align 8, !dbg !5298
  %180 = load i8*, i8** %pixu, align 8, !dbg !5298
  %181 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5298
  %p_fref194 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %181, i32 0, i32 5, !dbg !5298
  %arrayidx195 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref194, i64 0, i64 4, !dbg !5298
  %182 = load i8*, i8** %arrayidx195, align 16, !dbg !5298
  %183 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5298
  %i_stride196 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %183, i32 0, i32 9, !dbg !5298
  %arrayidx197 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride196, i64 0, i64 1, !dbg !5298
  %184 = load i32, i32* %arrayidx197, align 4, !dbg !5298
  %185 = load i32, i32* %pmx, align 4, !dbg !5298
  %186 = load i32, i32* %pmy, align 4, !dbg !5298
  %187 = load i32, i32* %mvy_offset, align 4, !dbg !5298
  %add198 = add nsw i32 %186, %187, !dbg !5298
  %188 = load i32, i32* %bw, align 4, !dbg !5298
  %shr199 = ashr i32 %188, 1, !dbg !5298
  %189 = load i32, i32* %bh, align 4, !dbg !5298
  %shr200 = ashr i32 %189, 1, !dbg !5298
  call void %179(i8* %180, i32 32, i8* %182, i32 %184, i32 %185, i32 %add198, i32 %shr199, i32 %shr200), !dbg !5298
  %190 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5298
  %mc201 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %190, i32 0, i32 70, !dbg !5298
  %mc_chroma202 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc201, i32 0, i32 2, !dbg !5298
  %191 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma202, align 8, !dbg !5298
  %192 = load i8*, i8** %pixv, align 8, !dbg !5298
  %193 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5298
  %p_fref203 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %193, i32 0, i32 5, !dbg !5298
  %arrayidx204 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref203, i64 0, i64 5, !dbg !5298
  %194 = load i8*, i8** %arrayidx204, align 8, !dbg !5298
  %195 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5298
  %i_stride205 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %195, i32 0, i32 9, !dbg !5298
  %arrayidx206 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride205, i64 0, i64 1, !dbg !5298
  %196 = load i32, i32* %arrayidx206, align 4, !dbg !5298
  %197 = load i32, i32* %pmx, align 4, !dbg !5298
  %198 = load i32, i32* %pmy, align 4, !dbg !5298
  %199 = load i32, i32* %mvy_offset, align 4, !dbg !5298
  %add207 = add nsw i32 %198, %199, !dbg !5298
  %200 = load i32, i32* %bw, align 4, !dbg !5298
  %shr208 = ashr i32 %200, 1, !dbg !5298
  %201 = load i32, i32* %bh, align 4, !dbg !5298
  %shr209 = ashr i32 %201, 1, !dbg !5298
  call void %191(i8* %192, i32 32, i8* %194, i32 %196, i32 %197, i32 %add207, i32 %shr208, i32 %shr209), !dbg !5298
  br label %if.end210, !dbg !5298

if.end210:                                        ; preds = %if.then191, %if.then184
  %202 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5295
  %203 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5295
  %204 = load i32, i32* %i4.addr, align 4, !dbg !5295
  %205 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5295
  %i_pixel211 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %205, i32 0, i32 0, !dbg !5295
  %206 = load i32, i32* %i_pixel211, align 16, !dbg !5295
  %call212 = call i64 @x264_rd_cost_part(%struct.x264_t* %202, i32 %203, i32 %204, i32 %206), !dbg !5295
  store i64 %call212, i64* %cost185, align 8, !dbg !5295
  %207 = load i64, i64* %cost185, align 8, !dbg !5300
  %208 = load i64, i64* %bcost, align 8, !dbg !5300
  %cmp213 = icmp ult i64 %207, %208, !dbg !5300
  br i1 %cmp213, label %if.then215, label %if.end216, !dbg !5295

if.then215:                                       ; preds = %if.end210
  %209 = load i64, i64* %cost185, align 8, !dbg !5302
  store i64 %209, i64* %bcost, align 8, !dbg !5302
  %210 = load i32, i32* %pmx, align 4, !dbg !5302
  store i32 %210, i32* %bmx, align 4, !dbg !5302
  %211 = load i32, i32* %pmy, align 4, !dbg !5302
  store i32 %211, i32* %bmy, align 4, !dbg !5302
  %212 = load i32, i32* %dir, align 4, !dbg !5302
  store i32 %212, i32* %dir, align 4, !dbg !5302
  br label %if.end216, !dbg !5302

if.end216:                                        ; preds = %if.then215, %if.end210
  br label %if.end217, !dbg !5295

if.end217:                                        ; preds = %if.end216, %if.end179
  %213 = load i32, i32* %bmx, align 4, !dbg !5304
  %214 = load i32, i32* %pmx, align 4, !dbg !5306
  %cmp218 = icmp eq i32 %213, %214, !dbg !5307
  br i1 %cmp218, label %land.lhs.true220, label %if.end230, !dbg !5308

land.lhs.true220:                                 ; preds = %if.end217
  %215 = load i32, i32* %bmy, align 4, !dbg !5309
  %216 = load i32, i32* %pmy, align 4, !dbg !5310
  %cmp221 = icmp eq i32 %215, %216, !dbg !5311
  br i1 %cmp221, label %if.then223, label %if.end230, !dbg !5312

if.then223:                                       ; preds = %land.lhs.true220
  %217 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5313
  %mv224 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %217, i32 0, i32 13, !dbg !5315
  %arrayidx225 = getelementptr inbounds [2 x i16], [2 x i16]* %mv224, i64 0, i64 0, !dbg !5313
  %218 = load i16, i16* %arrayidx225, align 4, !dbg !5313
  %conv226 = sext i16 %218 to i32, !dbg !5313
  store i32 %conv226, i32* %pmx, align 4, !dbg !5316
  %219 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5317
  %mv227 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %219, i32 0, i32 13, !dbg !5318
  %arrayidx228 = getelementptr inbounds [2 x i16], [2 x i16]* %mv227, i64 0, i64 1, !dbg !5317
  %220 = load i16, i16* %arrayidx228, align 2, !dbg !5317
  %conv229 = sext i16 %220 to i32, !dbg !5317
  store i32 %conv229, i32* %pmy, align 4, !dbg !5319
  br label %if.end230, !dbg !5320

if.end230:                                        ; preds = %if.then223, %land.lhs.true220, %if.end217
  br label %if.end231, !dbg !5321

if.end231:                                        ; preds = %if.end230, %land.lhs.true146, %land.lhs.true140, %land.lhs.true135, %land.lhs.true130, %lor.lhs.false
  %221 = load i32, i32* %bmy, align 4, !dbg !5322
  %222 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5324
  %mb232 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %222, i32 0, i32 55, !dbg !5325
  %mv_min_spel233 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb232, i32 0, i32 20, !dbg !5326
  %arrayidx234 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel233, i64 0, i64 1, !dbg !5324
  %223 = load i32, i32* %arrayidx234, align 4, !dbg !5324
  %add235 = add nsw i32 %223, 3, !dbg !5327
  %cmp236 = icmp slt i32 %221, %add235, !dbg !5328
  br i1 %cmp236, label %if.then259, label %lor.lhs.false238, !dbg !5329

lor.lhs.false238:                                 ; preds = %if.end231
  %224 = load i32, i32* %bmy, align 4, !dbg !5330
  %225 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5331
  %mb239 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %225, i32 0, i32 55, !dbg !5332
  %mv_max_spel240 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb239, i32 0, i32 21, !dbg !5333
  %arrayidx241 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel240, i64 0, i64 1, !dbg !5331
  %226 = load i32, i32* %arrayidx241, align 4, !dbg !5331
  %sub242 = sub nsw i32 %226, 3, !dbg !5334
  %cmp243 = icmp sgt i32 %224, %sub242, !dbg !5335
  br i1 %cmp243, label %if.then259, label %lor.lhs.false245, !dbg !5336

lor.lhs.false245:                                 ; preds = %lor.lhs.false238
  %227 = load i32, i32* %bmx, align 4, !dbg !5337
  %228 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5338
  %mb246 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %228, i32 0, i32 55, !dbg !5339
  %mv_min_spel247 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb246, i32 0, i32 20, !dbg !5340
  %arrayidx248 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel247, i64 0, i64 0, !dbg !5338
  %229 = load i32, i32* %arrayidx248, align 8, !dbg !5338
  %add249 = add nsw i32 %229, 3, !dbg !5341
  %cmp250 = icmp slt i32 %227, %add249, !dbg !5342
  br i1 %cmp250, label %if.then259, label %lor.lhs.false252, !dbg !5343

lor.lhs.false252:                                 ; preds = %lor.lhs.false245
  %230 = load i32, i32* %bmx, align 4, !dbg !5344
  %231 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5345
  %mb253 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %231, i32 0, i32 55, !dbg !5346
  %mv_max_spel254 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb253, i32 0, i32 21, !dbg !5347
  %arrayidx255 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel254, i64 0, i64 0, !dbg !5345
  %232 = load i32, i32* %arrayidx255, align 16, !dbg !5345
  %sub256 = sub nsw i32 %232, 3, !dbg !5348
  %cmp257 = icmp sgt i32 %230, %sub256, !dbg !5349
  br i1 %cmp257, label %if.then259, label %if.end262, !dbg !5350

if.then259:                                       ; preds = %lor.lhs.false252, %lor.lhs.false245, %lor.lhs.false238, %if.end231
  %233 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5351
  %mb260 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %233, i32 0, i32 55, !dbg !5353
  %b_skip_mc261 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb260, i32 0, i32 62, !dbg !5354
  store i32 0, i32* %b_skip_mc261, align 4, !dbg !5355
  br label %return, !dbg !5356

if.end262:                                        ; preds = %lor.lhs.false252
  store i32 -2, i32* %dir, align 4, !dbg !5357
  %234 = load i32, i32* %bmx, align 4, !dbg !5358
  store i32 %234, i32* %omx, align 4, !dbg !5359
  %235 = load i32, i32* %bmy, align 4, !dbg !5360
  store i32 %235, i32* %omy, align 4, !dbg !5361
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5362, metadata !DIExpression()), !dbg !5364
  store i32 0, i32* %j, align 4, !dbg !5364
  br label %for.cond, !dbg !5365

for.cond:                                         ; preds = %for.inc, %if.end262
  %236 = load i32, i32* %j, align 4, !dbg !5366
  %cmp263 = icmp slt i32 %236, 6, !dbg !5368
  br i1 %cmp263, label %for.body, label %for.end, !dbg !5369

for.body:                                         ; preds = %for.cond
  %237 = load i32, i32* %omx, align 4, !dbg !5370
  %238 = load i32, i32* %j, align 4, !dbg !5370
  %add265 = add nsw i32 %238, 1, !dbg !5370
  %idxprom266 = sext i32 %add265 to i64, !dbg !5370
  %arrayidx267 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom266, !dbg !5370
  %arrayidx268 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx267, i64 0, i64 0, !dbg !5370
  %239 = load i8, i8* %arrayidx268, align 2, !dbg !5370
  %conv269 = sext i8 %239 to i32, !dbg !5370
  %add270 = add nsw i32 %237, %conv269, !dbg !5370
  %240 = load i32, i32* %pmx, align 4, !dbg !5370
  %cmp271 = icmp eq i32 %add270, %240, !dbg !5370
  br i1 %cmp271, label %land.lhs.true273, label %if.then282, !dbg !5370

land.lhs.true273:                                 ; preds = %for.body
  %241 = load i32, i32* %omy, align 4, !dbg !5370
  %242 = load i32, i32* %j, align 4, !dbg !5370
  %add274 = add nsw i32 %242, 1, !dbg !5370
  %idxprom275 = sext i32 %add274 to i64, !dbg !5370
  %arrayidx276 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom275, !dbg !5370
  %arrayidx277 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx276, i64 0, i64 1, !dbg !5370
  %243 = load i8, i8* %arrayidx277, align 1, !dbg !5370
  %conv278 = sext i8 %243 to i32, !dbg !5370
  %add279 = add nsw i32 %241, %conv278, !dbg !5370
  %244 = load i32, i32* %pmy, align 4, !dbg !5370
  %cmp280 = icmp eq i32 %add279, %244, !dbg !5370
  br i1 %cmp280, label %if.else334, label %if.then282, !dbg !5374

if.then282:                                       ; preds = %land.lhs.true273, %for.body
  %245 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5375
  %mc283 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %245, i32 0, i32 70, !dbg !5375
  %mc_luma284 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc283, i32 0, i32 0, !dbg !5375
  %246 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma284, align 8, !dbg !5375
  %247 = load i8*, i8** %pix, align 8, !dbg !5375
  %248 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5375
  %p_fref285 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %248, i32 0, i32 5, !dbg !5375
  %arraydecay286 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref285, i64 0, i64 0, !dbg !5375
  %249 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5375
  %i_stride287 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %249, i32 0, i32 9, !dbg !5375
  %arrayidx288 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride287, i64 0, i64 0, !dbg !5375
  %250 = load i32, i32* %arrayidx288, align 8, !dbg !5375
  %251 = load i32, i32* %omx, align 4, !dbg !5375
  %252 = load i32, i32* %j, align 4, !dbg !5375
  %add289 = add nsw i32 %252, 1, !dbg !5375
  %idxprom290 = sext i32 %add289 to i64, !dbg !5375
  %arrayidx291 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom290, !dbg !5375
  %arrayidx292 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx291, i64 0, i64 0, !dbg !5375
  %253 = load i8, i8* %arrayidx292, align 2, !dbg !5375
  %conv293 = sext i8 %253 to i32, !dbg !5375
  %add294 = add nsw i32 %251, %conv293, !dbg !5375
  %254 = load i32, i32* %omy, align 4, !dbg !5375
  %255 = load i32, i32* %j, align 4, !dbg !5375
  %add295 = add nsw i32 %255, 1, !dbg !5375
  %idxprom296 = sext i32 %add295 to i64, !dbg !5375
  %arrayidx297 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom296, !dbg !5375
  %arrayidx298 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx297, i64 0, i64 1, !dbg !5375
  %256 = load i8, i8* %arrayidx298, align 1, !dbg !5375
  %conv299 = sext i8 %256 to i32, !dbg !5375
  %add300 = add nsw i32 %254, %conv299, !dbg !5375
  %257 = load i32, i32* %bw, align 4, !dbg !5375
  %258 = load i32, i32* %bh, align 4, !dbg !5375
  %259 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5375
  %weight301 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %259, i32 0, i32 4, !dbg !5375
  %260 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight301, align 8, !dbg !5375
  %arrayidx302 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %260, i64 0, !dbg !5375
  call void %246(i8* %247, i32 32, i8** %arraydecay286, i32 %250, i32 %add294, i32 %add300, i32 %257, i32 %258, %struct.x264_weight_t* %arrayidx302), !dbg !5375
  %261 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5375
  %pixf303 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %261, i32 0, i32 69, !dbg !5375
  %mbcmp304 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf303, i32 0, i32 5, !dbg !5375
  %262 = load i32, i32* %i_pixel11, align 4, !dbg !5375
  %idxprom305 = sext i32 %262 to i64, !dbg !5375
  %arrayidx306 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp304, i64 0, i64 %idxprom305, !dbg !5375
  %263 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx306, align 8, !dbg !5375
  %264 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5375
  %p_fenc307 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %264, i32 0, i32 7, !dbg !5375
  %arrayidx308 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc307, i64 0, i64 0, !dbg !5375
  %265 = load i8*, i8** %arrayidx308, align 8, !dbg !5375
  %266 = load i8*, i8** %pix, align 8, !dbg !5375
  %call309 = call i32 %263(i8* %265, i32 16, i8* %266, i32 32), !dbg !5375
  %267 = load i16*, i16** %p_cost_mvx, align 8, !dbg !5375
  %268 = load i32, i32* %omx, align 4, !dbg !5375
  %269 = load i32, i32* %j, align 4, !dbg !5375
  %add310 = add nsw i32 %269, 1, !dbg !5375
  %idxprom311 = sext i32 %add310 to i64, !dbg !5375
  %arrayidx312 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom311, !dbg !5375
  %arrayidx313 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx312, i64 0, i64 0, !dbg !5375
  %270 = load i8, i8* %arrayidx313, align 2, !dbg !5375
  %conv314 = sext i8 %270 to i32, !dbg !5375
  %add315 = add nsw i32 %268, %conv314, !dbg !5375
  %idxprom316 = sext i32 %add315 to i64, !dbg !5375
  %arrayidx317 = getelementptr inbounds i16, i16* %267, i64 %idxprom316, !dbg !5375
  %271 = load i16, i16* %arrayidx317, align 2, !dbg !5375
  %conv318 = zext i16 %271 to i32, !dbg !5375
  %add319 = add nsw i32 %call309, %conv318, !dbg !5375
  %272 = load i16*, i16** %p_cost_mvy, align 8, !dbg !5375
  %273 = load i32, i32* %omy, align 4, !dbg !5375
  %274 = load i32, i32* %j, align 4, !dbg !5375
  %add320 = add nsw i32 %274, 1, !dbg !5375
  %idxprom321 = sext i32 %add320 to i64, !dbg !5375
  %arrayidx322 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom321, !dbg !5375
  %arrayidx323 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx322, i64 0, i64 1, !dbg !5375
  %275 = load i8, i8* %arrayidx323, align 1, !dbg !5375
  %conv324 = sext i8 %275 to i32, !dbg !5375
  %add325 = add nsw i32 %273, %conv324, !dbg !5375
  %idxprom326 = sext i32 %add325 to i64, !dbg !5375
  %arrayidx327 = getelementptr inbounds i16, i16* %272, i64 %idxprom326, !dbg !5375
  %276 = load i16, i16* %arrayidx327, align 2, !dbg !5375
  %conv328 = zext i16 %276 to i32, !dbg !5375
  %add329 = add nsw i32 %add319, %conv328, !dbg !5375
  store i32 %add329, i32* %satd, align 4, !dbg !5375
  %277 = load i32, i32* %satd, align 4, !dbg !5377
  %278 = load i32, i32* %bsatd, align 4, !dbg !5377
  %cmp330 = icmp slt i32 %277, %278, !dbg !5377
  br i1 %cmp330, label %if.then332, label %if.end333, !dbg !5375

if.then332:                                       ; preds = %if.then282
  %279 = load i32, i32* %satd, align 4, !dbg !5377
  store i32 %279, i32* %bsatd, align 4, !dbg !5377
  br label %if.end333, !dbg !5377

if.end333:                                        ; preds = %if.then332, %if.then282
  br label %if.end335, !dbg !5375

if.else334:                                       ; preds = %land.lhs.true273
  store i32 268435456, i32* %satd, align 4, !dbg !5370
  br label %if.end335

if.end335:                                        ; preds = %if.else334, %if.end333
  %280 = load i32, i32* %satd, align 4, !dbg !5379
  %281 = load i32, i32* %bsatd, align 4, !dbg !5379
  %mul336 = mul nsw i32 %281, 17, !dbg !5379
  %div337 = sdiv i32 %mul336, 16, !dbg !5379
  %cmp338 = icmp sle i32 %280, %div337, !dbg !5379
  br i1 %cmp338, label %if.then340, label %if.end421, !dbg !5382

if.then340:                                       ; preds = %if.end335
  call void @llvm.dbg.declare(metadata i64* %cost341, metadata !5383, metadata !DIExpression()), !dbg !5385
  %282 = load i32, i32* %omx, align 4, !dbg !5385
  %283 = load i32, i32* %j, align 4, !dbg !5385
  %add342 = add nsw i32 %283, 1, !dbg !5385
  %idxprom343 = sext i32 %add342 to i64, !dbg !5385
  %arrayidx344 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom343, !dbg !5385
  %arrayidx345 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx344, i64 0, i64 0, !dbg !5385
  %284 = load i8, i8* %arrayidx345, align 2, !dbg !5385
  %conv346 = sext i8 %284 to i32, !dbg !5385
  %add347 = add nsw i32 %282, %conv346, !dbg !5385
  %285 = load i32, i32* %omy, align 4, !dbg !5385
  %286 = load i32, i32* %j, align 4, !dbg !5385
  %add348 = add nsw i32 %286, 1, !dbg !5385
  %idxprom349 = sext i32 %add348 to i64, !dbg !5385
  %arrayidx350 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom349, !dbg !5385
  %arrayidx351 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx350, i64 0, i64 1, !dbg !5385
  %287 = load i8, i8* %arrayidx351, align 1, !dbg !5385
  %conv352 = sext i8 %287 to i32, !dbg !5385
  %add353 = add nsw i32 %285, %conv352, !dbg !5385
  %call354 = call i32 @pack16to32_mask(i32 %add347, i32 %add353), !dbg !5385
  %288 = load i16*, i16** %cache_mv, align 8, !dbg !5385
  %289 = bitcast i16* %288 to %union.x264_union32_t*, !dbg !5385
  %i355 = bitcast %union.x264_union32_t* %289 to i32*, !dbg !5385
  store i32 %call354, i32* %i355, align 4, !dbg !5385
  %290 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5386
  %i_pixel356 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %290, i32 0, i32 0, !dbg !5386
  %291 = load i32, i32* %i_pixel356, align 16, !dbg !5386
  %cmp357 = icmp sle i32 %291, 3, !dbg !5386
  br i1 %cmp357, label %if.then359, label %if.end402, !dbg !5385

if.then359:                                       ; preds = %if.then340
  %292 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5388
  %mc360 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %292, i32 0, i32 70, !dbg !5388
  %mc_chroma361 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc360, i32 0, i32 2, !dbg !5388
  %293 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma361, align 8, !dbg !5388
  %294 = load i8*, i8** %pixu, align 8, !dbg !5388
  %295 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5388
  %p_fref362 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %295, i32 0, i32 5, !dbg !5388
  %arrayidx363 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref362, i64 0, i64 4, !dbg !5388
  %296 = load i8*, i8** %arrayidx363, align 16, !dbg !5388
  %297 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5388
  %i_stride364 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %297, i32 0, i32 9, !dbg !5388
  %arrayidx365 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride364, i64 0, i64 1, !dbg !5388
  %298 = load i32, i32* %arrayidx365, align 4, !dbg !5388
  %299 = load i32, i32* %omx, align 4, !dbg !5388
  %300 = load i32, i32* %j, align 4, !dbg !5388
  %add366 = add nsw i32 %300, 1, !dbg !5388
  %idxprom367 = sext i32 %add366 to i64, !dbg !5388
  %arrayidx368 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom367, !dbg !5388
  %arrayidx369 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx368, i64 0, i64 0, !dbg !5388
  %301 = load i8, i8* %arrayidx369, align 2, !dbg !5388
  %conv370 = sext i8 %301 to i32, !dbg !5388
  %add371 = add nsw i32 %299, %conv370, !dbg !5388
  %302 = load i32, i32* %omy, align 4, !dbg !5388
  %303 = load i32, i32* %j, align 4, !dbg !5388
  %add372 = add nsw i32 %303, 1, !dbg !5388
  %idxprom373 = sext i32 %add372 to i64, !dbg !5388
  %arrayidx374 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom373, !dbg !5388
  %arrayidx375 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx374, i64 0, i64 1, !dbg !5388
  %304 = load i8, i8* %arrayidx375, align 1, !dbg !5388
  %conv376 = sext i8 %304 to i32, !dbg !5388
  %add377 = add nsw i32 %302, %conv376, !dbg !5388
  %305 = load i32, i32* %mvy_offset, align 4, !dbg !5388
  %add378 = add nsw i32 %add377, %305, !dbg !5388
  %306 = load i32, i32* %bw, align 4, !dbg !5388
  %shr379 = ashr i32 %306, 1, !dbg !5388
  %307 = load i32, i32* %bh, align 4, !dbg !5388
  %shr380 = ashr i32 %307, 1, !dbg !5388
  call void %293(i8* %294, i32 32, i8* %296, i32 %298, i32 %add371, i32 %add378, i32 %shr379, i32 %shr380), !dbg !5388
  %308 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5388
  %mc381 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %308, i32 0, i32 70, !dbg !5388
  %mc_chroma382 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc381, i32 0, i32 2, !dbg !5388
  %309 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma382, align 8, !dbg !5388
  %310 = load i8*, i8** %pixv, align 8, !dbg !5388
  %311 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5388
  %p_fref383 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %311, i32 0, i32 5, !dbg !5388
  %arrayidx384 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref383, i64 0, i64 5, !dbg !5388
  %312 = load i8*, i8** %arrayidx384, align 8, !dbg !5388
  %313 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5388
  %i_stride385 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %313, i32 0, i32 9, !dbg !5388
  %arrayidx386 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride385, i64 0, i64 1, !dbg !5388
  %314 = load i32, i32* %arrayidx386, align 4, !dbg !5388
  %315 = load i32, i32* %omx, align 4, !dbg !5388
  %316 = load i32, i32* %j, align 4, !dbg !5388
  %add387 = add nsw i32 %316, 1, !dbg !5388
  %idxprom388 = sext i32 %add387 to i64, !dbg !5388
  %arrayidx389 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom388, !dbg !5388
  %arrayidx390 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx389, i64 0, i64 0, !dbg !5388
  %317 = load i8, i8* %arrayidx390, align 2, !dbg !5388
  %conv391 = sext i8 %317 to i32, !dbg !5388
  %add392 = add nsw i32 %315, %conv391, !dbg !5388
  %318 = load i32, i32* %omy, align 4, !dbg !5388
  %319 = load i32, i32* %j, align 4, !dbg !5388
  %add393 = add nsw i32 %319, 1, !dbg !5388
  %idxprom394 = sext i32 %add393 to i64, !dbg !5388
  %arrayidx395 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom394, !dbg !5388
  %arrayidx396 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx395, i64 0, i64 1, !dbg !5388
  %320 = load i8, i8* %arrayidx396, align 1, !dbg !5388
  %conv397 = sext i8 %320 to i32, !dbg !5388
  %add398 = add nsw i32 %318, %conv397, !dbg !5388
  %321 = load i32, i32* %mvy_offset, align 4, !dbg !5388
  %add399 = add nsw i32 %add398, %321, !dbg !5388
  %322 = load i32, i32* %bw, align 4, !dbg !5388
  %shr400 = ashr i32 %322, 1, !dbg !5388
  %323 = load i32, i32* %bh, align 4, !dbg !5388
  %shr401 = ashr i32 %323, 1, !dbg !5388
  call void %309(i8* %310, i32 32, i8* %312, i32 %314, i32 %add392, i32 %add399, i32 %shr400, i32 %shr401), !dbg !5388
  br label %if.end402, !dbg !5388

if.end402:                                        ; preds = %if.then359, %if.then340
  %324 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5385
  %325 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5385
  %326 = load i32, i32* %i4.addr, align 4, !dbg !5385
  %327 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5385
  %i_pixel403 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %327, i32 0, i32 0, !dbg !5385
  %328 = load i32, i32* %i_pixel403, align 16, !dbg !5385
  %call404 = call i64 @x264_rd_cost_part(%struct.x264_t* %324, i32 %325, i32 %326, i32 %328), !dbg !5385
  store i64 %call404, i64* %cost341, align 8, !dbg !5385
  %329 = load i64, i64* %cost341, align 8, !dbg !5390
  %330 = load i64, i64* %bcost, align 8, !dbg !5390
  %cmp405 = icmp ult i64 %329, %330, !dbg !5390
  br i1 %cmp405, label %if.then407, label %if.end420, !dbg !5385

if.then407:                                       ; preds = %if.end402
  %331 = load i64, i64* %cost341, align 8, !dbg !5392
  store i64 %331, i64* %bcost, align 8, !dbg !5392
  %332 = load i32, i32* %omx, align 4, !dbg !5392
  %333 = load i32, i32* %j, align 4, !dbg !5392
  %add408 = add nsw i32 %333, 1, !dbg !5392
  %idxprom409 = sext i32 %add408 to i64, !dbg !5392
  %arrayidx410 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom409, !dbg !5392
  %arrayidx411 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx410, i64 0, i64 0, !dbg !5392
  %334 = load i8, i8* %arrayidx411, align 2, !dbg !5392
  %conv412 = sext i8 %334 to i32, !dbg !5392
  %add413 = add nsw i32 %332, %conv412, !dbg !5392
  store i32 %add413, i32* %bmx, align 4, !dbg !5392
  %335 = load i32, i32* %omy, align 4, !dbg !5392
  %336 = load i32, i32* %j, align 4, !dbg !5392
  %add414 = add nsw i32 %336, 1, !dbg !5392
  %idxprom415 = sext i32 %add414 to i64, !dbg !5392
  %arrayidx416 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom415, !dbg !5392
  %arrayidx417 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx416, i64 0, i64 1, !dbg !5392
  %337 = load i8, i8* %arrayidx417, align 1, !dbg !5392
  %conv418 = sext i8 %337 to i32, !dbg !5392
  %add419 = add nsw i32 %335, %conv418, !dbg !5392
  store i32 %add419, i32* %bmy, align 4, !dbg !5392
  %338 = load i32, i32* %j, align 4, !dbg !5392
  store i32 %338, i32* %dir, align 4, !dbg !5392
  br label %if.end420, !dbg !5392

if.end420:                                        ; preds = %if.then407, %if.end402
  br label %if.end421, !dbg !5385

if.end421:                                        ; preds = %if.end420, %if.end335
  br label %for.inc, !dbg !5394

for.inc:                                          ; preds = %if.end421
  %339 = load i32, i32* %j, align 4, !dbg !5395
  %inc = add nsw i32 %339, 1, !dbg !5395
  store i32 %inc, i32* %j, align 4, !dbg !5395
  br label %for.cond, !dbg !5396, !llvm.loop !5397

for.end:                                          ; preds = %for.cond
  %340 = load i32, i32* %dir, align 4, !dbg !5399
  %cmp422 = icmp ne i32 %340, -2, !dbg !5401
  br i1 %cmp422, label %if.then424, label %if.end623, !dbg !5402

if.then424:                                       ; preds = %for.end
  call void @llvm.dbg.declare(metadata i32* %i425, metadata !5403, metadata !DIExpression()), !dbg !5406
  store i32 1, i32* %i425, align 4, !dbg !5406
  br label %for.cond426, !dbg !5407

for.cond426:                                      ; preds = %for.inc620, %if.then424
  %341 = load i32, i32* %i425, align 4, !dbg !5408
  %cmp427 = icmp slt i32 %341, 10, !dbg !5410
  br i1 %cmp427, label %for.body429, label %for.end622, !dbg !5411

for.body429:                                      ; preds = %for.cond426
  call void @llvm.dbg.declare(metadata i32* %odir, metadata !5412, metadata !DIExpression()), !dbg !5414
  %342 = load i32, i32* %dir, align 4, !dbg !5415
  %add430 = add nsw i32 %342, 1, !dbg !5416
  %idxprom431 = sext i32 %add430 to i64, !dbg !5417
  %arrayidx432 = getelementptr inbounds [8 x i8], [8 x i8]* @mod6m1, i64 0, i64 %idxprom431, !dbg !5417
  %343 = load i8, i8* %arrayidx432, align 1, !dbg !5417
  %conv433 = zext i8 %343 to i32, !dbg !5417
  store i32 %conv433, i32* %odir, align 4, !dbg !5414
  %344 = load i32, i32* %bmy, align 4, !dbg !5418
  %345 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5420
  %mb434 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %345, i32 0, i32 55, !dbg !5421
  %mv_min_spel435 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb434, i32 0, i32 20, !dbg !5422
  %arrayidx436 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_min_spel435, i64 0, i64 1, !dbg !5420
  %346 = load i32, i32* %arrayidx436, align 4, !dbg !5420
  %add437 = add nsw i32 %346, 3, !dbg !5423
  %cmp438 = icmp slt i32 %344, %add437, !dbg !5424
  br i1 %cmp438, label %if.then447, label %lor.lhs.false440, !dbg !5425

lor.lhs.false440:                                 ; preds = %for.body429
  %347 = load i32, i32* %bmy, align 4, !dbg !5426
  %348 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5427
  %mb441 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %348, i32 0, i32 55, !dbg !5428
  %mv_max_spel442 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb441, i32 0, i32 21, !dbg !5429
  %arrayidx443 = getelementptr inbounds [2 x i32], [2 x i32]* %mv_max_spel442, i64 0, i64 1, !dbg !5427
  %349 = load i32, i32* %arrayidx443, align 4, !dbg !5427
  %sub444 = sub nsw i32 %349, 3, !dbg !5430
  %cmp445 = icmp sgt i32 %347, %sub444, !dbg !5431
  br i1 %cmp445, label %if.then447, label %if.end448, !dbg !5432

if.then447:                                       ; preds = %lor.lhs.false440, %for.body429
  br label %for.end622, !dbg !5433

if.end448:                                        ; preds = %lor.lhs.false440
  store i32 -2, i32* %dir, align 4, !dbg !5434
  %350 = load i32, i32* %bmx, align 4, !dbg !5435
  store i32 %350, i32* %omx, align 4, !dbg !5436
  %351 = load i32, i32* %bmy, align 4, !dbg !5437
  store i32 %351, i32* %omy, align 4, !dbg !5438
  call void @llvm.dbg.declare(metadata i32* %j449, metadata !5439, metadata !DIExpression()), !dbg !5441
  store i32 0, i32* %j449, align 4, !dbg !5441
  br label %for.cond450, !dbg !5442

for.cond450:                                      ; preds = %for.inc613, %if.end448
  %352 = load i32, i32* %j449, align 4, !dbg !5443
  %cmp451 = icmp slt i32 %352, 3, !dbg !5445
  br i1 %cmp451, label %for.body453, label %for.end615, !dbg !5446

for.body453:                                      ; preds = %for.cond450
  %353 = load i32, i32* %omx, align 4, !dbg !5447
  %354 = load i32, i32* %odir, align 4, !dbg !5447
  %355 = load i32, i32* %j449, align 4, !dbg !5447
  %add454 = add nsw i32 %354, %355, !dbg !5447
  %idxprom455 = sext i32 %add454 to i64, !dbg !5447
  %arrayidx456 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom455, !dbg !5447
  %arrayidx457 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx456, i64 0, i64 0, !dbg !5447
  %356 = load i8, i8* %arrayidx457, align 2, !dbg !5447
  %conv458 = sext i8 %356 to i32, !dbg !5447
  %add459 = add nsw i32 %353, %conv458, !dbg !5447
  %357 = load i32, i32* %pmx, align 4, !dbg !5447
  %cmp460 = icmp eq i32 %add459, %357, !dbg !5447
  br i1 %cmp460, label %land.lhs.true462, label %if.then471, !dbg !5447

land.lhs.true462:                                 ; preds = %for.body453
  %358 = load i32, i32* %omy, align 4, !dbg !5447
  %359 = load i32, i32* %odir, align 4, !dbg !5447
  %360 = load i32, i32* %j449, align 4, !dbg !5447
  %add463 = add nsw i32 %359, %360, !dbg !5447
  %idxprom464 = sext i32 %add463 to i64, !dbg !5447
  %arrayidx465 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom464, !dbg !5447
  %arrayidx466 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx465, i64 0, i64 1, !dbg !5447
  %361 = load i8, i8* %arrayidx466, align 1, !dbg !5447
  %conv467 = sext i8 %361 to i32, !dbg !5447
  %add468 = add nsw i32 %358, %conv467, !dbg !5447
  %362 = load i32, i32* %pmy, align 4, !dbg !5447
  %cmp469 = icmp eq i32 %add468, %362, !dbg !5447
  br i1 %cmp469, label %if.else523, label %if.then471, !dbg !5451

if.then471:                                       ; preds = %land.lhs.true462, %for.body453
  %363 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5452
  %mc472 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %363, i32 0, i32 70, !dbg !5452
  %mc_luma473 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc472, i32 0, i32 0, !dbg !5452
  %364 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma473, align 8, !dbg !5452
  %365 = load i8*, i8** %pix, align 8, !dbg !5452
  %366 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5452
  %p_fref474 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %366, i32 0, i32 5, !dbg !5452
  %arraydecay475 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref474, i64 0, i64 0, !dbg !5452
  %367 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5452
  %i_stride476 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %367, i32 0, i32 9, !dbg !5452
  %arrayidx477 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride476, i64 0, i64 0, !dbg !5452
  %368 = load i32, i32* %arrayidx477, align 8, !dbg !5452
  %369 = load i32, i32* %omx, align 4, !dbg !5452
  %370 = load i32, i32* %odir, align 4, !dbg !5452
  %371 = load i32, i32* %j449, align 4, !dbg !5452
  %add478 = add nsw i32 %370, %371, !dbg !5452
  %idxprom479 = sext i32 %add478 to i64, !dbg !5452
  %arrayidx480 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom479, !dbg !5452
  %arrayidx481 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx480, i64 0, i64 0, !dbg !5452
  %372 = load i8, i8* %arrayidx481, align 2, !dbg !5452
  %conv482 = sext i8 %372 to i32, !dbg !5452
  %add483 = add nsw i32 %369, %conv482, !dbg !5452
  %373 = load i32, i32* %omy, align 4, !dbg !5452
  %374 = load i32, i32* %odir, align 4, !dbg !5452
  %375 = load i32, i32* %j449, align 4, !dbg !5452
  %add484 = add nsw i32 %374, %375, !dbg !5452
  %idxprom485 = sext i32 %add484 to i64, !dbg !5452
  %arrayidx486 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom485, !dbg !5452
  %arrayidx487 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx486, i64 0, i64 1, !dbg !5452
  %376 = load i8, i8* %arrayidx487, align 1, !dbg !5452
  %conv488 = sext i8 %376 to i32, !dbg !5452
  %add489 = add nsw i32 %373, %conv488, !dbg !5452
  %377 = load i32, i32* %bw, align 4, !dbg !5452
  %378 = load i32, i32* %bh, align 4, !dbg !5452
  %379 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5452
  %weight490 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %379, i32 0, i32 4, !dbg !5452
  %380 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight490, align 8, !dbg !5452
  %arrayidx491 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %380, i64 0, !dbg !5452
  call void %364(i8* %365, i32 32, i8** %arraydecay475, i32 %368, i32 %add483, i32 %add489, i32 %377, i32 %378, %struct.x264_weight_t* %arrayidx491), !dbg !5452
  %381 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5452
  %pixf492 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %381, i32 0, i32 69, !dbg !5452
  %mbcmp493 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf492, i32 0, i32 5, !dbg !5452
  %382 = load i32, i32* %i_pixel11, align 4, !dbg !5452
  %idxprom494 = sext i32 %382 to i64, !dbg !5452
  %arrayidx495 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp493, i64 0, i64 %idxprom494, !dbg !5452
  %383 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx495, align 8, !dbg !5452
  %384 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5452
  %p_fenc496 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %384, i32 0, i32 7, !dbg !5452
  %arrayidx497 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc496, i64 0, i64 0, !dbg !5452
  %385 = load i8*, i8** %arrayidx497, align 8, !dbg !5452
  %386 = load i8*, i8** %pix, align 8, !dbg !5452
  %call498 = call i32 %383(i8* %385, i32 16, i8* %386, i32 32), !dbg !5452
  %387 = load i16*, i16** %p_cost_mvx, align 8, !dbg !5452
  %388 = load i32, i32* %omx, align 4, !dbg !5452
  %389 = load i32, i32* %odir, align 4, !dbg !5452
  %390 = load i32, i32* %j449, align 4, !dbg !5452
  %add499 = add nsw i32 %389, %390, !dbg !5452
  %idxprom500 = sext i32 %add499 to i64, !dbg !5452
  %arrayidx501 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom500, !dbg !5452
  %arrayidx502 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx501, i64 0, i64 0, !dbg !5452
  %391 = load i8, i8* %arrayidx502, align 2, !dbg !5452
  %conv503 = sext i8 %391 to i32, !dbg !5452
  %add504 = add nsw i32 %388, %conv503, !dbg !5452
  %idxprom505 = sext i32 %add504 to i64, !dbg !5452
  %arrayidx506 = getelementptr inbounds i16, i16* %387, i64 %idxprom505, !dbg !5452
  %392 = load i16, i16* %arrayidx506, align 2, !dbg !5452
  %conv507 = zext i16 %392 to i32, !dbg !5452
  %add508 = add nsw i32 %call498, %conv507, !dbg !5452
  %393 = load i16*, i16** %p_cost_mvy, align 8, !dbg !5452
  %394 = load i32, i32* %omy, align 4, !dbg !5452
  %395 = load i32, i32* %odir, align 4, !dbg !5452
  %396 = load i32, i32* %j449, align 4, !dbg !5452
  %add509 = add nsw i32 %395, %396, !dbg !5452
  %idxprom510 = sext i32 %add509 to i64, !dbg !5452
  %arrayidx511 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom510, !dbg !5452
  %arrayidx512 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx511, i64 0, i64 1, !dbg !5452
  %397 = load i8, i8* %arrayidx512, align 1, !dbg !5452
  %conv513 = sext i8 %397 to i32, !dbg !5452
  %add514 = add nsw i32 %394, %conv513, !dbg !5452
  %idxprom515 = sext i32 %add514 to i64, !dbg !5452
  %arrayidx516 = getelementptr inbounds i16, i16* %393, i64 %idxprom515, !dbg !5452
  %398 = load i16, i16* %arrayidx516, align 2, !dbg !5452
  %conv517 = zext i16 %398 to i32, !dbg !5452
  %add518 = add nsw i32 %add508, %conv517, !dbg !5452
  store i32 %add518, i32* %satd, align 4, !dbg !5452
  %399 = load i32, i32* %satd, align 4, !dbg !5454
  %400 = load i32, i32* %bsatd, align 4, !dbg !5454
  %cmp519 = icmp slt i32 %399, %400, !dbg !5454
  br i1 %cmp519, label %if.then521, label %if.end522, !dbg !5452

if.then521:                                       ; preds = %if.then471
  %401 = load i32, i32* %satd, align 4, !dbg !5454
  store i32 %401, i32* %bsatd, align 4, !dbg !5454
  br label %if.end522, !dbg !5454

if.end522:                                        ; preds = %if.then521, %if.then471
  br label %if.end524, !dbg !5452

if.else523:                                       ; preds = %land.lhs.true462
  store i32 268435456, i32* %satd, align 4, !dbg !5447
  br label %if.end524

if.end524:                                        ; preds = %if.else523, %if.end522
  %402 = load i32, i32* %satd, align 4, !dbg !5456
  %403 = load i32, i32* %bsatd, align 4, !dbg !5456
  %mul525 = mul nsw i32 %403, 17, !dbg !5456
  %div526 = sdiv i32 %mul525, 16, !dbg !5456
  %cmp527 = icmp sle i32 %402, %div526, !dbg !5456
  br i1 %cmp527, label %if.then529, label %if.end612, !dbg !5459

if.then529:                                       ; preds = %if.end524
  call void @llvm.dbg.declare(metadata i64* %cost530, metadata !5460, metadata !DIExpression()), !dbg !5462
  %404 = load i32, i32* %omx, align 4, !dbg !5462
  %405 = load i32, i32* %odir, align 4, !dbg !5462
  %406 = load i32, i32* %j449, align 4, !dbg !5462
  %add531 = add nsw i32 %405, %406, !dbg !5462
  %idxprom532 = sext i32 %add531 to i64, !dbg !5462
  %arrayidx533 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom532, !dbg !5462
  %arrayidx534 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx533, i64 0, i64 0, !dbg !5462
  %407 = load i8, i8* %arrayidx534, align 2, !dbg !5462
  %conv535 = sext i8 %407 to i32, !dbg !5462
  %add536 = add nsw i32 %404, %conv535, !dbg !5462
  %408 = load i32, i32* %omy, align 4, !dbg !5462
  %409 = load i32, i32* %odir, align 4, !dbg !5462
  %410 = load i32, i32* %j449, align 4, !dbg !5462
  %add537 = add nsw i32 %409, %410, !dbg !5462
  %idxprom538 = sext i32 %add537 to i64, !dbg !5462
  %arrayidx539 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom538, !dbg !5462
  %arrayidx540 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx539, i64 0, i64 1, !dbg !5462
  %411 = load i8, i8* %arrayidx540, align 1, !dbg !5462
  %conv541 = sext i8 %411 to i32, !dbg !5462
  %add542 = add nsw i32 %408, %conv541, !dbg !5462
  %call543 = call i32 @pack16to32_mask(i32 %add536, i32 %add542), !dbg !5462
  %412 = load i16*, i16** %cache_mv, align 8, !dbg !5462
  %413 = bitcast i16* %412 to %union.x264_union32_t*, !dbg !5462
  %i544 = bitcast %union.x264_union32_t* %413 to i32*, !dbg !5462
  store i32 %call543, i32* %i544, align 4, !dbg !5462
  %414 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5463
  %i_pixel545 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %414, i32 0, i32 0, !dbg !5463
  %415 = load i32, i32* %i_pixel545, align 16, !dbg !5463
  %cmp546 = icmp sle i32 %415, 3, !dbg !5463
  br i1 %cmp546, label %if.then548, label %if.end591, !dbg !5462

if.then548:                                       ; preds = %if.then529
  %416 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5465
  %mc549 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %416, i32 0, i32 70, !dbg !5465
  %mc_chroma550 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc549, i32 0, i32 2, !dbg !5465
  %417 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma550, align 8, !dbg !5465
  %418 = load i8*, i8** %pixu, align 8, !dbg !5465
  %419 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5465
  %p_fref551 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %419, i32 0, i32 5, !dbg !5465
  %arrayidx552 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref551, i64 0, i64 4, !dbg !5465
  %420 = load i8*, i8** %arrayidx552, align 16, !dbg !5465
  %421 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5465
  %i_stride553 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %421, i32 0, i32 9, !dbg !5465
  %arrayidx554 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride553, i64 0, i64 1, !dbg !5465
  %422 = load i32, i32* %arrayidx554, align 4, !dbg !5465
  %423 = load i32, i32* %omx, align 4, !dbg !5465
  %424 = load i32, i32* %odir, align 4, !dbg !5465
  %425 = load i32, i32* %j449, align 4, !dbg !5465
  %add555 = add nsw i32 %424, %425, !dbg !5465
  %idxprom556 = sext i32 %add555 to i64, !dbg !5465
  %arrayidx557 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom556, !dbg !5465
  %arrayidx558 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx557, i64 0, i64 0, !dbg !5465
  %426 = load i8, i8* %arrayidx558, align 2, !dbg !5465
  %conv559 = sext i8 %426 to i32, !dbg !5465
  %add560 = add nsw i32 %423, %conv559, !dbg !5465
  %427 = load i32, i32* %omy, align 4, !dbg !5465
  %428 = load i32, i32* %odir, align 4, !dbg !5465
  %429 = load i32, i32* %j449, align 4, !dbg !5465
  %add561 = add nsw i32 %428, %429, !dbg !5465
  %idxprom562 = sext i32 %add561 to i64, !dbg !5465
  %arrayidx563 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom562, !dbg !5465
  %arrayidx564 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx563, i64 0, i64 1, !dbg !5465
  %430 = load i8, i8* %arrayidx564, align 1, !dbg !5465
  %conv565 = sext i8 %430 to i32, !dbg !5465
  %add566 = add nsw i32 %427, %conv565, !dbg !5465
  %431 = load i32, i32* %mvy_offset, align 4, !dbg !5465
  %add567 = add nsw i32 %add566, %431, !dbg !5465
  %432 = load i32, i32* %bw, align 4, !dbg !5465
  %shr568 = ashr i32 %432, 1, !dbg !5465
  %433 = load i32, i32* %bh, align 4, !dbg !5465
  %shr569 = ashr i32 %433, 1, !dbg !5465
  call void %417(i8* %418, i32 32, i8* %420, i32 %422, i32 %add560, i32 %add567, i32 %shr568, i32 %shr569), !dbg !5465
  %434 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5465
  %mc570 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %434, i32 0, i32 70, !dbg !5465
  %mc_chroma571 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc570, i32 0, i32 2, !dbg !5465
  %435 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma571, align 8, !dbg !5465
  %436 = load i8*, i8** %pixv, align 8, !dbg !5465
  %437 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5465
  %p_fref572 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %437, i32 0, i32 5, !dbg !5465
  %arrayidx573 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref572, i64 0, i64 5, !dbg !5465
  %438 = load i8*, i8** %arrayidx573, align 8, !dbg !5465
  %439 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5465
  %i_stride574 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %439, i32 0, i32 9, !dbg !5465
  %arrayidx575 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride574, i64 0, i64 1, !dbg !5465
  %440 = load i32, i32* %arrayidx575, align 4, !dbg !5465
  %441 = load i32, i32* %omx, align 4, !dbg !5465
  %442 = load i32, i32* %odir, align 4, !dbg !5465
  %443 = load i32, i32* %j449, align 4, !dbg !5465
  %add576 = add nsw i32 %442, %443, !dbg !5465
  %idxprom577 = sext i32 %add576 to i64, !dbg !5465
  %arrayidx578 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom577, !dbg !5465
  %arrayidx579 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx578, i64 0, i64 0, !dbg !5465
  %444 = load i8, i8* %arrayidx579, align 2, !dbg !5465
  %conv580 = sext i8 %444 to i32, !dbg !5465
  %add581 = add nsw i32 %441, %conv580, !dbg !5465
  %445 = load i32, i32* %omy, align 4, !dbg !5465
  %446 = load i32, i32* %odir, align 4, !dbg !5465
  %447 = load i32, i32* %j449, align 4, !dbg !5465
  %add582 = add nsw i32 %446, %447, !dbg !5465
  %idxprom583 = sext i32 %add582 to i64, !dbg !5465
  %arrayidx584 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom583, !dbg !5465
  %arrayidx585 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx584, i64 0, i64 1, !dbg !5465
  %448 = load i8, i8* %arrayidx585, align 1, !dbg !5465
  %conv586 = sext i8 %448 to i32, !dbg !5465
  %add587 = add nsw i32 %445, %conv586, !dbg !5465
  %449 = load i32, i32* %mvy_offset, align 4, !dbg !5465
  %add588 = add nsw i32 %add587, %449, !dbg !5465
  %450 = load i32, i32* %bw, align 4, !dbg !5465
  %shr589 = ashr i32 %450, 1, !dbg !5465
  %451 = load i32, i32* %bh, align 4, !dbg !5465
  %shr590 = ashr i32 %451, 1, !dbg !5465
  call void %435(i8* %436, i32 32, i8* %438, i32 %440, i32 %add581, i32 %add588, i32 %shr589, i32 %shr590), !dbg !5465
  br label %if.end591, !dbg !5465

if.end591:                                        ; preds = %if.then548, %if.then529
  %452 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5462
  %453 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5462
  %454 = load i32, i32* %i4.addr, align 4, !dbg !5462
  %455 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5462
  %i_pixel592 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %455, i32 0, i32 0, !dbg !5462
  %456 = load i32, i32* %i_pixel592, align 16, !dbg !5462
  %call593 = call i64 @x264_rd_cost_part(%struct.x264_t* %452, i32 %453, i32 %454, i32 %456), !dbg !5462
  store i64 %call593, i64* %cost530, align 8, !dbg !5462
  %457 = load i64, i64* %cost530, align 8, !dbg !5467
  %458 = load i64, i64* %bcost, align 8, !dbg !5467
  %cmp594 = icmp ult i64 %457, %458, !dbg !5467
  br i1 %cmp594, label %if.then596, label %if.end611, !dbg !5462

if.then596:                                       ; preds = %if.end591
  %459 = load i64, i64* %cost530, align 8, !dbg !5469
  store i64 %459, i64* %bcost, align 8, !dbg !5469
  %460 = load i32, i32* %omx, align 4, !dbg !5469
  %461 = load i32, i32* %odir, align 4, !dbg !5469
  %462 = load i32, i32* %j449, align 4, !dbg !5469
  %add597 = add nsw i32 %461, %462, !dbg !5469
  %idxprom598 = sext i32 %add597 to i64, !dbg !5469
  %arrayidx599 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom598, !dbg !5469
  %arrayidx600 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx599, i64 0, i64 0, !dbg !5469
  %463 = load i8, i8* %arrayidx600, align 2, !dbg !5469
  %conv601 = sext i8 %463 to i32, !dbg !5469
  %add602 = add nsw i32 %460, %conv601, !dbg !5469
  store i32 %add602, i32* %bmx, align 4, !dbg !5469
  %464 = load i32, i32* %omy, align 4, !dbg !5469
  %465 = load i32, i32* %odir, align 4, !dbg !5469
  %466 = load i32, i32* %j449, align 4, !dbg !5469
  %add603 = add nsw i32 %465, %466, !dbg !5469
  %idxprom604 = sext i32 %add603 to i64, !dbg !5469
  %arrayidx605 = getelementptr inbounds [8 x [2 x i8]], [8 x [2 x i8]]* @hex2, i64 0, i64 %idxprom604, !dbg !5469
  %arrayidx606 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx605, i64 0, i64 1, !dbg !5469
  %467 = load i8, i8* %arrayidx606, align 1, !dbg !5469
  %conv607 = sext i8 %467 to i32, !dbg !5469
  %add608 = add nsw i32 %464, %conv607, !dbg !5469
  store i32 %add608, i32* %bmy, align 4, !dbg !5469
  %468 = load i32, i32* %odir, align 4, !dbg !5469
  %sub609 = sub nsw i32 %468, 1, !dbg !5469
  %469 = load i32, i32* %j449, align 4, !dbg !5469
  %add610 = add nsw i32 %sub609, %469, !dbg !5469
  store i32 %add610, i32* %dir, align 4, !dbg !5469
  br label %if.end611, !dbg !5469

if.end611:                                        ; preds = %if.then596, %if.end591
  br label %if.end612, !dbg !5462

if.end612:                                        ; preds = %if.end611, %if.end524
  br label %for.inc613, !dbg !5471

for.inc613:                                       ; preds = %if.end612
  %470 = load i32, i32* %j449, align 4, !dbg !5472
  %inc614 = add nsw i32 %470, 1, !dbg !5472
  store i32 %inc614, i32* %j449, align 4, !dbg !5472
  br label %for.cond450, !dbg !5473, !llvm.loop !5474

for.end615:                                       ; preds = %for.cond450
  %471 = load i32, i32* %dir, align 4, !dbg !5476
  %cmp616 = icmp eq i32 %471, -2, !dbg !5478
  br i1 %cmp616, label %if.then618, label %if.end619, !dbg !5479

if.then618:                                       ; preds = %for.end615
  br label %for.end622, !dbg !5480

if.end619:                                        ; preds = %for.end615
  br label %for.inc620, !dbg !5481

for.inc620:                                       ; preds = %if.end619
  %472 = load i32, i32* %i425, align 4, !dbg !5482
  %inc621 = add nsw i32 %472, 1, !dbg !5482
  store i32 %inc621, i32* %i425, align 4, !dbg !5482
  br label %for.cond426, !dbg !5483, !llvm.loop !5484

for.end622:                                       ; preds = %if.then618, %if.then447, %for.cond426
  br label %if.end623, !dbg !5486

if.end623:                                        ; preds = %for.end622, %for.end
  %473 = load i32, i32* %bmx, align 4, !dbg !5487
  store i32 %473, i32* %omx, align 4, !dbg !5488
  %474 = load i32, i32* %bmy, align 4, !dbg !5489
  store i32 %474, i32* %omy, align 4, !dbg !5490
  call void @llvm.dbg.declare(metadata i32* %i624, metadata !5491, metadata !DIExpression()), !dbg !5493
  store i32 0, i32* %i624, align 4, !dbg !5493
  br label %for.cond625, !dbg !5494

for.cond625:                                      ; preds = %for.inc786, %if.end623
  %475 = load i32, i32* %i624, align 4, !dbg !5495
  %cmp626 = icmp slt i32 %475, 8, !dbg !5497
  br i1 %cmp626, label %for.body628, label %for.end788, !dbg !5498

for.body628:                                      ; preds = %for.cond625
  %476 = load i32, i32* %omx, align 4, !dbg !5499
  %477 = load i32, i32* %i624, align 4, !dbg !5499
  %add629 = add nsw i32 %477, 1, !dbg !5499
  %idxprom630 = sext i32 %add629 to i64, !dbg !5499
  %arrayidx631 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom630, !dbg !5499
  %arrayidx632 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx631, i64 0, i64 0, !dbg !5499
  %478 = load i8, i8* %arrayidx632, align 2, !dbg !5499
  %conv633 = sext i8 %478 to i32, !dbg !5499
  %add634 = add nsw i32 %476, %conv633, !dbg !5499
  %479 = load i32, i32* %pmx, align 4, !dbg !5499
  %cmp635 = icmp eq i32 %add634, %479, !dbg !5499
  br i1 %cmp635, label %land.lhs.true637, label %if.then646, !dbg !5499

land.lhs.true637:                                 ; preds = %for.body628
  %480 = load i32, i32* %omy, align 4, !dbg !5499
  %481 = load i32, i32* %i624, align 4, !dbg !5499
  %add638 = add nsw i32 %481, 1, !dbg !5499
  %idxprom639 = sext i32 %add638 to i64, !dbg !5499
  %arrayidx640 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom639, !dbg !5499
  %arrayidx641 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx640, i64 0, i64 1, !dbg !5499
  %482 = load i8, i8* %arrayidx641, align 1, !dbg !5499
  %conv642 = sext i8 %482 to i32, !dbg !5499
  %add643 = add nsw i32 %480, %conv642, !dbg !5499
  %483 = load i32, i32* %pmy, align 4, !dbg !5499
  %cmp644 = icmp eq i32 %add643, %483, !dbg !5499
  br i1 %cmp644, label %if.else698, label %if.then646, !dbg !5503

if.then646:                                       ; preds = %land.lhs.true637, %for.body628
  %484 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5504
  %mc647 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %484, i32 0, i32 70, !dbg !5504
  %mc_luma648 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc647, i32 0, i32 0, !dbg !5504
  %485 = load void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)*, void (i8*, i32, i8**, i32, i32, i32, i32, i32, %struct.x264_weight_t*)** %mc_luma648, align 8, !dbg !5504
  %486 = load i8*, i8** %pix, align 8, !dbg !5504
  %487 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5504
  %p_fref649 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %487, i32 0, i32 5, !dbg !5504
  %arraydecay650 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref649, i64 0, i64 0, !dbg !5504
  %488 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5504
  %i_stride651 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %488, i32 0, i32 9, !dbg !5504
  %arrayidx652 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride651, i64 0, i64 0, !dbg !5504
  %489 = load i32, i32* %arrayidx652, align 8, !dbg !5504
  %490 = load i32, i32* %omx, align 4, !dbg !5504
  %491 = load i32, i32* %i624, align 4, !dbg !5504
  %add653 = add nsw i32 %491, 1, !dbg !5504
  %idxprom654 = sext i32 %add653 to i64, !dbg !5504
  %arrayidx655 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom654, !dbg !5504
  %arrayidx656 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx655, i64 0, i64 0, !dbg !5504
  %492 = load i8, i8* %arrayidx656, align 2, !dbg !5504
  %conv657 = sext i8 %492 to i32, !dbg !5504
  %add658 = add nsw i32 %490, %conv657, !dbg !5504
  %493 = load i32, i32* %omy, align 4, !dbg !5504
  %494 = load i32, i32* %i624, align 4, !dbg !5504
  %add659 = add nsw i32 %494, 1, !dbg !5504
  %idxprom660 = sext i32 %add659 to i64, !dbg !5504
  %arrayidx661 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom660, !dbg !5504
  %arrayidx662 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx661, i64 0, i64 1, !dbg !5504
  %495 = load i8, i8* %arrayidx662, align 1, !dbg !5504
  %conv663 = sext i8 %495 to i32, !dbg !5504
  %add664 = add nsw i32 %493, %conv663, !dbg !5504
  %496 = load i32, i32* %bw, align 4, !dbg !5504
  %497 = load i32, i32* %bh, align 4, !dbg !5504
  %498 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5504
  %weight665 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %498, i32 0, i32 4, !dbg !5504
  %499 = load %struct.x264_weight_t*, %struct.x264_weight_t** %weight665, align 8, !dbg !5504
  %arrayidx666 = getelementptr inbounds %struct.x264_weight_t, %struct.x264_weight_t* %499, i64 0, !dbg !5504
  call void %485(i8* %486, i32 32, i8** %arraydecay650, i32 %489, i32 %add658, i32 %add664, i32 %496, i32 %497, %struct.x264_weight_t* %arrayidx666), !dbg !5504
  %500 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5504
  %pixf667 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %500, i32 0, i32 69, !dbg !5504
  %mbcmp668 = getelementptr inbounds %struct.x264_pixel_function_t, %struct.x264_pixel_function_t* %pixf667, i32 0, i32 5, !dbg !5504
  %501 = load i32, i32* %i_pixel11, align 4, !dbg !5504
  %idxprom669 = sext i32 %501 to i64, !dbg !5504
  %arrayidx670 = getelementptr inbounds [7 x i32 (i8*, i32, i8*, i32)*], [7 x i32 (i8*, i32, i8*, i32)*]* %mbcmp668, i64 0, i64 %idxprom669, !dbg !5504
  %502 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %arrayidx670, align 8, !dbg !5504
  %503 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5504
  %p_fenc671 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %503, i32 0, i32 7, !dbg !5504
  %arrayidx672 = getelementptr inbounds [3 x i8*], [3 x i8*]* %p_fenc671, i64 0, i64 0, !dbg !5504
  %504 = load i8*, i8** %arrayidx672, align 8, !dbg !5504
  %505 = load i8*, i8** %pix, align 8, !dbg !5504
  %call673 = call i32 %502(i8* %504, i32 16, i8* %505, i32 32), !dbg !5504
  %506 = load i16*, i16** %p_cost_mvx, align 8, !dbg !5504
  %507 = load i32, i32* %omx, align 4, !dbg !5504
  %508 = load i32, i32* %i624, align 4, !dbg !5504
  %add674 = add nsw i32 %508, 1, !dbg !5504
  %idxprom675 = sext i32 %add674 to i64, !dbg !5504
  %arrayidx676 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom675, !dbg !5504
  %arrayidx677 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx676, i64 0, i64 0, !dbg !5504
  %509 = load i8, i8* %arrayidx677, align 2, !dbg !5504
  %conv678 = sext i8 %509 to i32, !dbg !5504
  %add679 = add nsw i32 %507, %conv678, !dbg !5504
  %idxprom680 = sext i32 %add679 to i64, !dbg !5504
  %arrayidx681 = getelementptr inbounds i16, i16* %506, i64 %idxprom680, !dbg !5504
  %510 = load i16, i16* %arrayidx681, align 2, !dbg !5504
  %conv682 = zext i16 %510 to i32, !dbg !5504
  %add683 = add nsw i32 %call673, %conv682, !dbg !5504
  %511 = load i16*, i16** %p_cost_mvy, align 8, !dbg !5504
  %512 = load i32, i32* %omy, align 4, !dbg !5504
  %513 = load i32, i32* %i624, align 4, !dbg !5504
  %add684 = add nsw i32 %513, 1, !dbg !5504
  %idxprom685 = sext i32 %add684 to i64, !dbg !5504
  %arrayidx686 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom685, !dbg !5504
  %arrayidx687 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx686, i64 0, i64 1, !dbg !5504
  %514 = load i8, i8* %arrayidx687, align 1, !dbg !5504
  %conv688 = sext i8 %514 to i32, !dbg !5504
  %add689 = add nsw i32 %512, %conv688, !dbg !5504
  %idxprom690 = sext i32 %add689 to i64, !dbg !5504
  %arrayidx691 = getelementptr inbounds i16, i16* %511, i64 %idxprom690, !dbg !5504
  %515 = load i16, i16* %arrayidx691, align 2, !dbg !5504
  %conv692 = zext i16 %515 to i32, !dbg !5504
  %add693 = add nsw i32 %add683, %conv692, !dbg !5504
  store i32 %add693, i32* %satd, align 4, !dbg !5504
  %516 = load i32, i32* %satd, align 4, !dbg !5506
  %517 = load i32, i32* %bsatd, align 4, !dbg !5506
  %cmp694 = icmp slt i32 %516, %517, !dbg !5506
  br i1 %cmp694, label %if.then696, label %if.end697, !dbg !5504

if.then696:                                       ; preds = %if.then646
  %518 = load i32, i32* %satd, align 4, !dbg !5506
  store i32 %518, i32* %bsatd, align 4, !dbg !5506
  br label %if.end697, !dbg !5506

if.end697:                                        ; preds = %if.then696, %if.then646
  br label %if.end699, !dbg !5504

if.else698:                                       ; preds = %land.lhs.true637
  store i32 268435456, i32* %satd, align 4, !dbg !5499
  br label %if.end699

if.end699:                                        ; preds = %if.else698, %if.end697
  %519 = load i32, i32* %satd, align 4, !dbg !5508
  %520 = load i32, i32* %bsatd, align 4, !dbg !5508
  %mul700 = mul nsw i32 %520, 17, !dbg !5508
  %div701 = sdiv i32 %mul700, 16, !dbg !5508
  %cmp702 = icmp sle i32 %519, %div701, !dbg !5508
  br i1 %cmp702, label %if.then704, label %if.end785, !dbg !5511

if.then704:                                       ; preds = %if.end699
  call void @llvm.dbg.declare(metadata i64* %cost705, metadata !5512, metadata !DIExpression()), !dbg !5514
  %521 = load i32, i32* %omx, align 4, !dbg !5514
  %522 = load i32, i32* %i624, align 4, !dbg !5514
  %add706 = add nsw i32 %522, 1, !dbg !5514
  %idxprom707 = sext i32 %add706 to i64, !dbg !5514
  %arrayidx708 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom707, !dbg !5514
  %arrayidx709 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx708, i64 0, i64 0, !dbg !5514
  %523 = load i8, i8* %arrayidx709, align 2, !dbg !5514
  %conv710 = sext i8 %523 to i32, !dbg !5514
  %add711 = add nsw i32 %521, %conv710, !dbg !5514
  %524 = load i32, i32* %omy, align 4, !dbg !5514
  %525 = load i32, i32* %i624, align 4, !dbg !5514
  %add712 = add nsw i32 %525, 1, !dbg !5514
  %idxprom713 = sext i32 %add712 to i64, !dbg !5514
  %arrayidx714 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom713, !dbg !5514
  %arrayidx715 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx714, i64 0, i64 1, !dbg !5514
  %526 = load i8, i8* %arrayidx715, align 1, !dbg !5514
  %conv716 = sext i8 %526 to i32, !dbg !5514
  %add717 = add nsw i32 %524, %conv716, !dbg !5514
  %call718 = call i32 @pack16to32_mask(i32 %add711, i32 %add717), !dbg !5514
  %527 = load i16*, i16** %cache_mv, align 8, !dbg !5514
  %528 = bitcast i16* %527 to %union.x264_union32_t*, !dbg !5514
  %i719 = bitcast %union.x264_union32_t* %528 to i32*, !dbg !5514
  store i32 %call718, i32* %i719, align 4, !dbg !5514
  %529 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5515
  %i_pixel720 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %529, i32 0, i32 0, !dbg !5515
  %530 = load i32, i32* %i_pixel720, align 16, !dbg !5515
  %cmp721 = icmp sle i32 %530, 3, !dbg !5515
  br i1 %cmp721, label %if.then723, label %if.end766, !dbg !5514

if.then723:                                       ; preds = %if.then704
  %531 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5517
  %mc724 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %531, i32 0, i32 70, !dbg !5517
  %mc_chroma725 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc724, i32 0, i32 2, !dbg !5517
  %532 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma725, align 8, !dbg !5517
  %533 = load i8*, i8** %pixu, align 8, !dbg !5517
  %534 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5517
  %p_fref726 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %534, i32 0, i32 5, !dbg !5517
  %arrayidx727 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref726, i64 0, i64 4, !dbg !5517
  %535 = load i8*, i8** %arrayidx727, align 16, !dbg !5517
  %536 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5517
  %i_stride728 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %536, i32 0, i32 9, !dbg !5517
  %arrayidx729 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride728, i64 0, i64 1, !dbg !5517
  %537 = load i32, i32* %arrayidx729, align 4, !dbg !5517
  %538 = load i32, i32* %omx, align 4, !dbg !5517
  %539 = load i32, i32* %i624, align 4, !dbg !5517
  %add730 = add nsw i32 %539, 1, !dbg !5517
  %idxprom731 = sext i32 %add730 to i64, !dbg !5517
  %arrayidx732 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom731, !dbg !5517
  %arrayidx733 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx732, i64 0, i64 0, !dbg !5517
  %540 = load i8, i8* %arrayidx733, align 2, !dbg !5517
  %conv734 = sext i8 %540 to i32, !dbg !5517
  %add735 = add nsw i32 %538, %conv734, !dbg !5517
  %541 = load i32, i32* %omy, align 4, !dbg !5517
  %542 = load i32, i32* %i624, align 4, !dbg !5517
  %add736 = add nsw i32 %542, 1, !dbg !5517
  %idxprom737 = sext i32 %add736 to i64, !dbg !5517
  %arrayidx738 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom737, !dbg !5517
  %arrayidx739 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx738, i64 0, i64 1, !dbg !5517
  %543 = load i8, i8* %arrayidx739, align 1, !dbg !5517
  %conv740 = sext i8 %543 to i32, !dbg !5517
  %add741 = add nsw i32 %541, %conv740, !dbg !5517
  %544 = load i32, i32* %mvy_offset, align 4, !dbg !5517
  %add742 = add nsw i32 %add741, %544, !dbg !5517
  %545 = load i32, i32* %bw, align 4, !dbg !5517
  %shr743 = ashr i32 %545, 1, !dbg !5517
  %546 = load i32, i32* %bh, align 4, !dbg !5517
  %shr744 = ashr i32 %546, 1, !dbg !5517
  call void %532(i8* %533, i32 32, i8* %535, i32 %537, i32 %add735, i32 %add742, i32 %shr743, i32 %shr744), !dbg !5517
  %547 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5517
  %mc745 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %547, i32 0, i32 70, !dbg !5517
  %mc_chroma746 = getelementptr inbounds %struct.x264_mc_functions_t, %struct.x264_mc_functions_t* %mc745, i32 0, i32 2, !dbg !5517
  %548 = load void (i8*, i32, i8*, i32, i32, i32, i32, i32)*, void (i8*, i32, i8*, i32, i32, i32, i32, i32)** %mc_chroma746, align 8, !dbg !5517
  %549 = load i8*, i8** %pixv, align 8, !dbg !5517
  %550 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5517
  %p_fref747 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %550, i32 0, i32 5, !dbg !5517
  %arrayidx748 = getelementptr inbounds [6 x i8*], [6 x i8*]* %p_fref747, i64 0, i64 5, !dbg !5517
  %551 = load i8*, i8** %arrayidx748, align 8, !dbg !5517
  %552 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5517
  %i_stride749 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %552, i32 0, i32 9, !dbg !5517
  %arrayidx750 = getelementptr inbounds [2 x i32], [2 x i32]* %i_stride749, i64 0, i64 1, !dbg !5517
  %553 = load i32, i32* %arrayidx750, align 4, !dbg !5517
  %554 = load i32, i32* %omx, align 4, !dbg !5517
  %555 = load i32, i32* %i624, align 4, !dbg !5517
  %add751 = add nsw i32 %555, 1, !dbg !5517
  %idxprom752 = sext i32 %add751 to i64, !dbg !5517
  %arrayidx753 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom752, !dbg !5517
  %arrayidx754 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx753, i64 0, i64 0, !dbg !5517
  %556 = load i8, i8* %arrayidx754, align 2, !dbg !5517
  %conv755 = sext i8 %556 to i32, !dbg !5517
  %add756 = add nsw i32 %554, %conv755, !dbg !5517
  %557 = load i32, i32* %omy, align 4, !dbg !5517
  %558 = load i32, i32* %i624, align 4, !dbg !5517
  %add757 = add nsw i32 %558, 1, !dbg !5517
  %idxprom758 = sext i32 %add757 to i64, !dbg !5517
  %arrayidx759 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom758, !dbg !5517
  %arrayidx760 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx759, i64 0, i64 1, !dbg !5517
  %559 = load i8, i8* %arrayidx760, align 1, !dbg !5517
  %conv761 = sext i8 %559 to i32, !dbg !5517
  %add762 = add nsw i32 %557, %conv761, !dbg !5517
  %560 = load i32, i32* %mvy_offset, align 4, !dbg !5517
  %add763 = add nsw i32 %add762, %560, !dbg !5517
  %561 = load i32, i32* %bw, align 4, !dbg !5517
  %shr764 = ashr i32 %561, 1, !dbg !5517
  %562 = load i32, i32* %bh, align 4, !dbg !5517
  %shr765 = ashr i32 %562, 1, !dbg !5517
  call void %548(i8* %549, i32 32, i8* %551, i32 %553, i32 %add756, i32 %add763, i32 %shr764, i32 %shr765), !dbg !5517
  br label %if.end766, !dbg !5517

if.end766:                                        ; preds = %if.then723, %if.then704
  %563 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5514
  %564 = load i32, i32* %i_lambda2.addr, align 4, !dbg !5514
  %565 = load i32, i32* %i4.addr, align 4, !dbg !5514
  %566 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5514
  %i_pixel767 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %566, i32 0, i32 0, !dbg !5514
  %567 = load i32, i32* %i_pixel767, align 16, !dbg !5514
  %call768 = call i64 @x264_rd_cost_part(%struct.x264_t* %563, i32 %564, i32 %565, i32 %567), !dbg !5514
  store i64 %call768, i64* %cost705, align 8, !dbg !5514
  %568 = load i64, i64* %cost705, align 8, !dbg !5519
  %569 = load i64, i64* %bcost, align 8, !dbg !5519
  %cmp769 = icmp ult i64 %568, %569, !dbg !5519
  br i1 %cmp769, label %if.then771, label %if.end784, !dbg !5514

if.then771:                                       ; preds = %if.end766
  %570 = load i64, i64* %cost705, align 8, !dbg !5521
  store i64 %570, i64* %bcost, align 8, !dbg !5521
  %571 = load i32, i32* %omx, align 4, !dbg !5521
  %572 = load i32, i32* %i624, align 4, !dbg !5521
  %add772 = add nsw i32 %572, 1, !dbg !5521
  %idxprom773 = sext i32 %add772 to i64, !dbg !5521
  %arrayidx774 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom773, !dbg !5521
  %arrayidx775 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx774, i64 0, i64 0, !dbg !5521
  %573 = load i8, i8* %arrayidx775, align 2, !dbg !5521
  %conv776 = sext i8 %573 to i32, !dbg !5521
  %add777 = add nsw i32 %571, %conv776, !dbg !5521
  store i32 %add777, i32* %bmx, align 4, !dbg !5521
  %574 = load i32, i32* %omy, align 4, !dbg !5521
  %575 = load i32, i32* %i624, align 4, !dbg !5521
  %add778 = add nsw i32 %575, 1, !dbg !5521
  %idxprom779 = sext i32 %add778 to i64, !dbg !5521
  %arrayidx780 = getelementptr inbounds [9 x [2 x i8]], [9 x [2 x i8]]* @square1, i64 0, i64 %idxprom779, !dbg !5521
  %arrayidx781 = getelementptr inbounds [2 x i8], [2 x i8]* %arrayidx780, i64 0, i64 1, !dbg !5521
  %576 = load i8, i8* %arrayidx781, align 1, !dbg !5521
  %conv782 = sext i8 %576 to i32, !dbg !5521
  %add783 = add nsw i32 %574, %conv782, !dbg !5521
  store i32 %add783, i32* %bmy, align 4, !dbg !5521
  %577 = load i32, i32* %dir, align 4, !dbg !5521
  store i32 %577, i32* %dir, align 4, !dbg !5521
  br label %if.end784, !dbg !5521

if.end784:                                        ; preds = %if.then771, %if.end766
  br label %if.end785, !dbg !5514

if.end785:                                        ; preds = %if.end784, %if.end699
  br label %for.inc786, !dbg !5523

for.inc786:                                       ; preds = %if.end785
  %578 = load i32, i32* %i624, align 4, !dbg !5524
  %inc787 = add nsw i32 %578, 1, !dbg !5524
  store i32 %inc787, i32* %i624, align 4, !dbg !5524
  br label %for.cond625, !dbg !5525, !llvm.loop !5526

for.end788:                                       ; preds = %for.cond625
  %579 = load i64, i64* %bcost, align 8, !dbg !5528
  %conv789 = trunc i64 %579 to i32, !dbg !5528
  %580 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5529
  %cost790 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %580, i32 0, i32 12, !dbg !5530
  store i32 %conv789, i32* %cost790, align 8, !dbg !5531
  %581 = load i32, i32* %bmx, align 4, !dbg !5532
  %conv791 = trunc i32 %581 to i16, !dbg !5532
  %582 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5533
  %mv792 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %582, i32 0, i32 13, !dbg !5534
  %arrayidx793 = getelementptr inbounds [2 x i16], [2 x i16]* %mv792, i64 0, i64 0, !dbg !5533
  store i16 %conv791, i16* %arrayidx793, align 4, !dbg !5535
  %583 = load i32, i32* %bmy, align 4, !dbg !5536
  %conv794 = trunc i32 %583 to i16, !dbg !5536
  %584 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5537
  %mv795 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %584, i32 0, i32 13, !dbg !5538
  %arrayidx796 = getelementptr inbounds [2 x i16], [2 x i16]* %mv795, i64 0, i64 1, !dbg !5537
  store i16 %conv794, i16* %arrayidx796, align 2, !dbg !5539
  %585 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5540
  %586 = load i32, i32* %i4.addr, align 4, !dbg !5541
  %idxprom797 = sext i32 %586 to i64, !dbg !5542
  %arrayidx798 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_x, i64 0, i64 %idxprom797, !dbg !5542
  %587 = load i8, i8* %arrayidx798, align 1, !dbg !5542
  %conv799 = zext i8 %587 to i32, !dbg !5542
  %588 = load i32, i32* %i4.addr, align 4, !dbg !5543
  %idxprom800 = sext i32 %588 to i64, !dbg !5544
  %arrayidx801 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_y, i64 0, i64 %idxprom800, !dbg !5544
  %589 = load i8, i8* %arrayidx801, align 1, !dbg !5544
  %conv802 = zext i8 %589 to i32, !dbg !5544
  %590 = load i32, i32* %bw, align 4, !dbg !5545
  %shr803 = ashr i32 %590, 2, !dbg !5546
  %591 = load i32, i32* %bh, align 4, !dbg !5547
  %shr804 = ashr i32 %591, 2, !dbg !5548
  %592 = load i32, i32* %i_list.addr, align 4, !dbg !5549
  %593 = load i32, i32* %bmx, align 4, !dbg !5550
  %594 = load i32, i32* %bmy, align 4, !dbg !5551
  %call805 = call i32 @pack16to32_mask(i32 %593, i32 %594), !dbg !5552
  call void @x264_macroblock_cache_mv(%struct.x264_t* %585, i32 %conv799, i32 %conv802, i32 %shr803, i32 %shr804, i32 %592, i32 %call805), !dbg !5553
  %595 = load i32, i32* %bmx, align 4, !dbg !5554
  %596 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5554
  %mvp806 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %596, i32 0, i32 10, !dbg !5554
  %arrayidx807 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp806, i64 0, i64 0, !dbg !5554
  %597 = load i16, i16* %arrayidx807, align 16, !dbg !5554
  %conv808 = sext i16 %597 to i32, !dbg !5554
  %sub809 = sub nsw i32 %595, %conv808, !dbg !5554
  %call810 = call i32 @abs(i32 %sub809) #4, !dbg !5554
  %cmp811 = icmp slt i32 %call810, 33, !dbg !5554
  br i1 %cmp811, label %cond.true813, label %cond.false819, !dbg !5554

cond.true813:                                     ; preds = %for.end788
  %598 = load i32, i32* %bmx, align 4, !dbg !5554
  %599 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5554
  %mvp814 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %599, i32 0, i32 10, !dbg !5554
  %arrayidx815 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp814, i64 0, i64 0, !dbg !5554
  %600 = load i16, i16* %arrayidx815, align 16, !dbg !5554
  %conv816 = sext i16 %600 to i32, !dbg !5554
  %sub817 = sub nsw i32 %598, %conv816, !dbg !5554
  %call818 = call i32 @abs(i32 %sub817) #4, !dbg !5554
  br label %cond.end820, !dbg !5554

cond.false819:                                    ; preds = %for.end788
  br label %cond.end820, !dbg !5554

cond.end820:                                      ; preds = %cond.false819, %cond.true813
  %cond821 = phi i32 [ %call818, %cond.true813 ], [ 33, %cond.false819 ], !dbg !5554
  %601 = load i32, i32* %bmy, align 4, !dbg !5555
  %602 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5555
  %mvp822 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %602, i32 0, i32 10, !dbg !5555
  %arrayidx823 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp822, i64 0, i64 1, !dbg !5555
  %603 = load i16, i16* %arrayidx823, align 2, !dbg !5555
  %conv824 = sext i16 %603 to i32, !dbg !5555
  %sub825 = sub nsw i32 %601, %conv824, !dbg !5555
  %call826 = call i32 @abs(i32 %sub825) #4, !dbg !5555
  %cmp827 = icmp slt i32 %call826, 33, !dbg !5555
  br i1 %cmp827, label %cond.true829, label %cond.false835, !dbg !5555

cond.true829:                                     ; preds = %cond.end820
  %604 = load i32, i32* %bmy, align 4, !dbg !5555
  %605 = load %struct.x264_me_t*, %struct.x264_me_t** %m.addr, align 8, !dbg !5555
  %mvp830 = getelementptr inbounds %struct.x264_me_t, %struct.x264_me_t* %605, i32 0, i32 10, !dbg !5555
  %arrayidx831 = getelementptr inbounds [2 x i16], [2 x i16]* %mvp830, i64 0, i64 1, !dbg !5555
  %606 = load i16, i16* %arrayidx831, align 2, !dbg !5555
  %conv832 = sext i16 %606 to i32, !dbg !5555
  %sub833 = sub nsw i32 %604, %conv832, !dbg !5555
  %call834 = call i32 @abs(i32 %sub833) #4, !dbg !5555
  br label %cond.end836, !dbg !5555

cond.false835:                                    ; preds = %cond.end820
  br label %cond.end836, !dbg !5555

cond.end836:                                      ; preds = %cond.false835, %cond.true829
  %cond837 = phi i32 [ %call834, %cond.true829 ], [ 33, %cond.false835 ], !dbg !5555
  %call838 = call i32 @pack8to16(i32 %cond821, i32 %cond837), !dbg !5556
  %conv839 = trunc i32 %call838 to i16, !dbg !5556
  store i16 %conv839, i16* %amvd, align 2, !dbg !5557
  %607 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5558
  %608 = load i32, i32* %i4.addr, align 4, !dbg !5559
  %idxprom840 = sext i32 %608 to i64, !dbg !5560
  %arrayidx841 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_x, i64 0, i64 %idxprom840, !dbg !5560
  %609 = load i8, i8* %arrayidx841, align 1, !dbg !5560
  %conv842 = zext i8 %609 to i32, !dbg !5560
  %610 = load i32, i32* %i4.addr, align 4, !dbg !5561
  %idxprom843 = sext i32 %610 to i64, !dbg !5562
  %arrayidx844 = getelementptr inbounds [16 x i8], [16 x i8]* @block_idx_y, i64 0, i64 %idxprom843, !dbg !5562
  %611 = load i8, i8* %arrayidx844, align 1, !dbg !5562
  %conv845 = zext i8 %611 to i32, !dbg !5562
  %612 = load i32, i32* %bw, align 4, !dbg !5563
  %shr846 = ashr i32 %612, 2, !dbg !5564
  %613 = load i32, i32* %bh, align 4, !dbg !5565
  %shr847 = ashr i32 %613, 2, !dbg !5566
  %614 = load i32, i32* %i_list.addr, align 4, !dbg !5567
  %615 = load i16, i16* %amvd, align 2, !dbg !5568
  call void @x264_macroblock_cache_mvd(%struct.x264_t* %607, i32 %conv842, i32 %conv845, i32 %shr846, i32 %shr847, i32 %614, i16 zeroext %615), !dbg !5569
  %616 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5570
  %mb848 = getelementptr inbounds %struct.x264_t, %struct.x264_t* %616, i32 0, i32 55, !dbg !5571
  %b_skip_mc849 = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb848, i32 0, i32 62, !dbg !5572
  store i32 0, i32* %b_skip_mc849, align 4, !dbg !5573
  br label %return, !dbg !5574

return:                                           ; preds = %cond.end836, %if.then259
  ret void, !dbg !5574
}

declare dso_local void @x264_mb_predict_mv(%struct.x264_t*, i32, i32, i32, i16*) #3

declare dso_local i64 @x264_rd_cost_part(%struct.x264_t*, i32, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal void @x264_macroblock_cache_mv(%struct.x264_t* %h, i32 %x, i32 %y, i32 %width, i32 %height, i32 %i_list, i32 %mv) #0 !dbg !5575 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %i_list.addr = alloca i32, align 4
  %mv.addr = alloca i32, align 4
  %mv_cache = alloca i8*, align 8
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !5579, metadata !DIExpression()), !dbg !5580
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !5581, metadata !DIExpression()), !dbg !5582
  store i32 %y, i32* %y.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %y.addr, metadata !5583, metadata !DIExpression()), !dbg !5584
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5585, metadata !DIExpression()), !dbg !5586
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5587, metadata !DIExpression()), !dbg !5588
  store i32 %i_list, i32* %i_list.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_list.addr, metadata !5589, metadata !DIExpression()), !dbg !5590
  store i32 %mv, i32* %mv.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mv.addr, metadata !5591, metadata !DIExpression()), !dbg !5592
  call void @llvm.dbg.declare(metadata i8** %mv_cache, metadata !5593, metadata !DIExpression()), !dbg !5594
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5595
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !5596
  %cache = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 67, !dbg !5597
  %mv1 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache, i32 0, i32 4, !dbg !5598
  %1 = load i32, i32* %i_list.addr, align 4, !dbg !5599
  %idxprom = sext i32 %1 to i64, !dbg !5595
  %arrayidx = getelementptr inbounds [2 x [40 x [2 x i16]]], [2 x [40 x [2 x i16]]]* %mv1, i64 0, i64 %idxprom, !dbg !5595
  %2 = load i32, i32* %x.addr, align 4, !dbg !5600
  %add = add nsw i32 12, %2, !dbg !5601
  %3 = load i32, i32* %y.addr, align 4, !dbg !5602
  %mul = mul nsw i32 8, %3, !dbg !5603
  %add2 = add nsw i32 %add, %mul, !dbg !5604
  %idxprom3 = sext i32 %add2 to i64, !dbg !5595
  %arrayidx4 = getelementptr inbounds [40 x [2 x i16]], [40 x [2 x i16]]* %arrayidx, i64 0, i64 %idxprom3, !dbg !5595
  %4 = bitcast [2 x i16]* %arrayidx4 to i8*, !dbg !5605
  store i8* %4, i8** %mv_cache, align 8, !dbg !5594
  %5 = load i8*, i8** %mv_cache, align 8, !dbg !5606
  %6 = load i32, i32* %width.addr, align 4, !dbg !5608
  %mul5 = mul nsw i32 %6, 4, !dbg !5609
  %7 = load i32, i32* %height.addr, align 4, !dbg !5610
  %8 = load i32, i32* %mv.addr, align 4, !dbg !5611
  call void @x264_macroblock_cache_rect(i8* %5, i32 %mul5, i32 %7, i32 4, i32 %8), !dbg !5612
  ret void, !dbg !5613
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pack8to16(i32 %a, i32 %b) #0 !dbg !5614 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %a.addr, metadata !5615, metadata !DIExpression()), !dbg !5616
  store i32 %b, i32* %b.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %b.addr, metadata !5617, metadata !DIExpression()), !dbg !5618
  %0 = load i32, i32* %a.addr, align 4, !dbg !5619
  %1 = load i32, i32* %b.addr, align 4, !dbg !5620
  %shl = shl i32 %1, 8, !dbg !5621
  %add = add nsw i32 %0, %shl, !dbg !5622
  ret i32 %add, !dbg !5623
}

; Function Attrs: noinline nounwind uwtable
define internal void @x264_macroblock_cache_mvd(%struct.x264_t* %h, i32 %x, i32 %y, i32 %width, i32 %height, i32 %i_list, i16 zeroext %mvd) #0 !dbg !5624 {
entry:
  %h.addr = alloca %struct.x264_t*, align 8
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %width.addr = alloca i32, align 4
  %height.addr = alloca i32, align 4
  %i_list.addr = alloca i32, align 4
  %mvd.addr = alloca i16, align 2
  %mvd_cache = alloca i8*, align 8
  store %struct.x264_t* %h, %struct.x264_t** %h.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.x264_t** %h.addr, metadata !5627, metadata !DIExpression()), !dbg !5628
  store i32 %x, i32* %x.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr, metadata !5629, metadata !DIExpression()), !dbg !5630
  store i32 %y, i32* %y.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %y.addr, metadata !5631, metadata !DIExpression()), !dbg !5632
  store i32 %width, i32* %width.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %width.addr, metadata !5633, metadata !DIExpression()), !dbg !5634
  store i32 %height, i32* %height.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %height.addr, metadata !5635, metadata !DIExpression()), !dbg !5636
  store i32 %i_list, i32* %i_list.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i_list.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  store i16 %mvd, i16* %mvd.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %mvd.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  call void @llvm.dbg.declare(metadata i8** %mvd_cache, metadata !5641, metadata !DIExpression()), !dbg !5642
  %0 = load %struct.x264_t*, %struct.x264_t** %h.addr, align 8, !dbg !5643
  %mb = getelementptr inbounds %struct.x264_t, %struct.x264_t* %0, i32 0, i32 55, !dbg !5644
  %cache = getelementptr inbounds %struct.anon.10, %struct.anon.10* %mb, i32 0, i32 67, !dbg !5645
  %mvd1 = getelementptr inbounds %struct.anon.12, %struct.anon.12* %cache, i32 0, i32 5, !dbg !5646
  %1 = load i32, i32* %i_list.addr, align 4, !dbg !5647
  %idxprom = sext i32 %1 to i64, !dbg !5643
  %arrayidx = getelementptr inbounds [2 x [40 x [2 x i8]]], [2 x [40 x [2 x i8]]]* %mvd1, i64 0, i64 %idxprom, !dbg !5643
  %2 = load i32, i32* %x.addr, align 4, !dbg !5648
  %add = add nsw i32 12, %2, !dbg !5649
  %3 = load i32, i32* %y.addr, align 4, !dbg !5650
  %mul = mul nsw i32 8, %3, !dbg !5651
  %add2 = add nsw i32 %add, %mul, !dbg !5652
  %idxprom3 = sext i32 %add2 to i64, !dbg !5643
  %arrayidx4 = getelementptr inbounds [40 x [2 x i8]], [40 x [2 x i8]]* %arrayidx, i64 0, i64 %idxprom3, !dbg !5643
  %4 = bitcast [2 x i8]* %arrayidx4 to i8*, !dbg !5653
  store i8* %4, i8** %mvd_cache, align 8, !dbg !5642
  %5 = load i8*, i8** %mvd_cache, align 8, !dbg !5654
  %6 = load i32, i32* %width.addr, align 4, !dbg !5656
  %mul5 = mul nsw i32 %6, 2, !dbg !5657
  %7 = load i32, i32* %height.addr, align 4, !dbg !5658
  %8 = load i16, i16* %mvd.addr, align 2, !dbg !5659
  %conv = zext i16 %8 to i32, !dbg !5659
  call void @x264_macroblock_cache_rect(i8* %5, i32 %mul5, i32 %7, i32 2, i32 %conv), !dbg !5660
  ret void, !dbg !5661
}

; Function Attrs: noinline nounwind uwtable
define internal void @x264_macroblock_cache_rect(i8* %dst, i32 %w, i32 %h, i32 %s, i32 %v) #0 !dbg !5662 {
entry:
  %dst.addr = alloca i8*, align 8
  %w.addr = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %v.addr = alloca i32, align 4
  %d = alloca i8*, align 8
  %v2 = alloca i16, align 2
  %v4 = alloca i32, align 4
  %v8 = alloca i64, align 8
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !5665, metadata !DIExpression()), !dbg !5666
  store i32 %w, i32* %w.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %w.addr, metadata !5667, metadata !DIExpression()), !dbg !5668
  store i32 %h, i32* %h.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %h.addr, metadata !5669, metadata !DIExpression()), !dbg !5670
  store i32 %s, i32* %s.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %s.addr, metadata !5671, metadata !DIExpression()), !dbg !5672
  store i32 %v, i32* %v.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %v.addr, metadata !5673, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata i8** %d, metadata !5675, metadata !DIExpression()), !dbg !5676
  %0 = load i8*, i8** %dst.addr, align 8, !dbg !5677
  store i8* %0, i8** %d, align 8, !dbg !5676
  call void @llvm.dbg.declare(metadata i16* %v2, metadata !5678, metadata !DIExpression()), !dbg !5679
  %1 = load i32, i32* %s.addr, align 4, !dbg !5680
  %cmp = icmp eq i32 %1, 2, !dbg !5681
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !5680

cond.true:                                        ; preds = %entry
  %2 = load i32, i32* %v.addr, align 4, !dbg !5682
  br label %cond.end, !dbg !5680

cond.false:                                       ; preds = %entry
  %3 = load i32, i32* %v.addr, align 4, !dbg !5683
  %mul = mul i32 %3, 257, !dbg !5684
  br label %cond.end, !dbg !5680

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %mul, %cond.false ], !dbg !5680
  %conv = trunc i32 %cond to i16, !dbg !5680
  store i16 %conv, i16* %v2, align 2, !dbg !5679
  call void @llvm.dbg.declare(metadata i32* %v4, metadata !5685, metadata !DIExpression()), !dbg !5686
  %4 = load i32, i32* %s.addr, align 4, !dbg !5687
  %cmp1 = icmp eq i32 %4, 4, !dbg !5688
  br i1 %cmp1, label %cond.true3, label %cond.false4, !dbg !5687

cond.true3:                                       ; preds = %cond.end
  %5 = load i32, i32* %v.addr, align 4, !dbg !5689
  br label %cond.end13, !dbg !5687

cond.false4:                                      ; preds = %cond.end
  %6 = load i32, i32* %s.addr, align 4, !dbg !5690
  %cmp5 = icmp eq i32 %6, 2, !dbg !5691
  br i1 %cmp5, label %cond.true7, label %cond.false9, !dbg !5690

cond.true7:                                       ; preds = %cond.false4
  %7 = load i32, i32* %v.addr, align 4, !dbg !5692
  %mul8 = mul i32 %7, 65537, !dbg !5693
  br label %cond.end11, !dbg !5690

cond.false9:                                      ; preds = %cond.false4
  %8 = load i32, i32* %v.addr, align 4, !dbg !5694
  %mul10 = mul i32 %8, 16843009, !dbg !5695
  br label %cond.end11, !dbg !5690

cond.end11:                                       ; preds = %cond.false9, %cond.true7
  %cond12 = phi i32 [ %mul8, %cond.true7 ], [ %mul10, %cond.false9 ], !dbg !5690
  br label %cond.end13, !dbg !5687

cond.end13:                                       ; preds = %cond.end11, %cond.true3
  %cond14 = phi i32 [ %5, %cond.true3 ], [ %cond12, %cond.end11 ], !dbg !5687
  store i32 %cond14, i32* %v4, align 4, !dbg !5686
  call void @llvm.dbg.declare(metadata i64* %v8, metadata !5696, metadata !DIExpression()), !dbg !5697
  %9 = load i32, i32* %v4, align 4, !dbg !5698
  %conv15 = zext i32 %9 to i64, !dbg !5698
  %10 = load i32, i32* %v4, align 4, !dbg !5699
  %conv16 = zext i32 %10 to i64, !dbg !5700
  %shl = shl i64 %conv16, 32, !dbg !5701
  %add = add i64 %conv15, %shl, !dbg !5702
  store i64 %add, i64* %v8, align 8, !dbg !5697
  %11 = load i32, i32* %s.addr, align 4, !dbg !5703
  %mul17 = mul nsw i32 %11, 8, !dbg !5703
  store i32 %mul17, i32* %s.addr, align 4, !dbg !5703
  %12 = load i32, i32* %w.addr, align 4, !dbg !5704
  %cmp18 = icmp eq i32 %12, 2, !dbg !5706
  br i1 %cmp18, label %if.then, label %if.else, !dbg !5707

if.then:                                          ; preds = %cond.end13
  %13 = load i16, i16* %v2, align 2, !dbg !5708
  %14 = load i8*, i8** %d, align 8, !dbg !5710
  %15 = load i32, i32* %s.addr, align 4, !dbg !5710
  %mul20 = mul nsw i32 %15, 0, !dbg !5710
  %idx.ext = sext i32 %mul20 to i64, !dbg !5710
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %idx.ext, !dbg !5710
  %16 = bitcast i8* %add.ptr to %union.x264_union16_t*, !dbg !5710
  %i = bitcast %union.x264_union16_t* %16 to i16*, !dbg !5710
  store i16 %13, i16* %i, align 2, !dbg !5711
  %17 = load i32, i32* %h.addr, align 4, !dbg !5712
  %cmp21 = icmp eq i32 %17, 1, !dbg !5714
  br i1 %cmp21, label %if.then23, label %if.end, !dbg !5715

if.then23:                                        ; preds = %if.then
  br label %if.end126, !dbg !5716

if.end:                                           ; preds = %if.then
  %18 = load i16, i16* %v2, align 2, !dbg !5717
  %19 = load i8*, i8** %d, align 8, !dbg !5718
  %20 = load i32, i32* %s.addr, align 4, !dbg !5718
  %mul24 = mul nsw i32 %20, 1, !dbg !5718
  %idx.ext25 = sext i32 %mul24 to i64, !dbg !5718
  %add.ptr26 = getelementptr inbounds i8, i8* %19, i64 %idx.ext25, !dbg !5718
  %21 = bitcast i8* %add.ptr26 to %union.x264_union16_t*, !dbg !5718
  %i27 = bitcast %union.x264_union16_t* %21 to i16*, !dbg !5718
  store i16 %18, i16* %i27, align 2, !dbg !5719
  %22 = load i32, i32* %h.addr, align 4, !dbg !5720
  %cmp28 = icmp eq i32 %22, 2, !dbg !5722
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !5723

if.then30:                                        ; preds = %if.end
  br label %if.end126, !dbg !5724

if.end31:                                         ; preds = %if.end
  %23 = load i16, i16* %v2, align 2, !dbg !5725
  %24 = load i8*, i8** %d, align 8, !dbg !5726
  %25 = load i32, i32* %s.addr, align 4, !dbg !5726
  %mul32 = mul nsw i32 %25, 2, !dbg !5726
  %idx.ext33 = sext i32 %mul32 to i64, !dbg !5726
  %add.ptr34 = getelementptr inbounds i8, i8* %24, i64 %idx.ext33, !dbg !5726
  %26 = bitcast i8* %add.ptr34 to %union.x264_union16_t*, !dbg !5726
  %i35 = bitcast %union.x264_union16_t* %26 to i16*, !dbg !5726
  store i16 %23, i16* %i35, align 2, !dbg !5727
  %27 = load i16, i16* %v2, align 2, !dbg !5728
  %28 = load i8*, i8** %d, align 8, !dbg !5729
  %29 = load i32, i32* %s.addr, align 4, !dbg !5729
  %mul36 = mul nsw i32 %29, 3, !dbg !5729
  %idx.ext37 = sext i32 %mul36 to i64, !dbg !5729
  %add.ptr38 = getelementptr inbounds i8, i8* %28, i64 %idx.ext37, !dbg !5729
  %30 = bitcast i8* %add.ptr38 to %union.x264_union16_t*, !dbg !5729
  %i39 = bitcast %union.x264_union16_t* %30 to i16*, !dbg !5729
  store i16 %27, i16* %i39, align 2, !dbg !5730
  br label %if.end126, !dbg !5731

if.else:                                          ; preds = %cond.end13
  %31 = load i32, i32* %w.addr, align 4, !dbg !5732
  %cmp40 = icmp eq i32 %31, 4, !dbg !5734
  br i1 %cmp40, label %if.then42, label %if.else67, !dbg !5735

if.then42:                                        ; preds = %if.else
  %32 = load i32, i32* %v4, align 4, !dbg !5736
  %33 = load i8*, i8** %d, align 8, !dbg !5738
  %34 = load i32, i32* %s.addr, align 4, !dbg !5738
  %mul43 = mul nsw i32 %34, 0, !dbg !5738
  %idx.ext44 = sext i32 %mul43 to i64, !dbg !5738
  %add.ptr45 = getelementptr inbounds i8, i8* %33, i64 %idx.ext44, !dbg !5738
  %35 = bitcast i8* %add.ptr45 to %union.x264_union32_t*, !dbg !5738
  %i46 = bitcast %union.x264_union32_t* %35 to i32*, !dbg !5738
  store i32 %32, i32* %i46, align 4, !dbg !5739
  %36 = load i32, i32* %h.addr, align 4, !dbg !5740
  %cmp47 = icmp eq i32 %36, 1, !dbg !5742
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !5743

if.then49:                                        ; preds = %if.then42
  br label %if.end126, !dbg !5744

if.end50:                                         ; preds = %if.then42
  %37 = load i32, i32* %v4, align 4, !dbg !5745
  %38 = load i8*, i8** %d, align 8, !dbg !5746
  %39 = load i32, i32* %s.addr, align 4, !dbg !5746
  %mul51 = mul nsw i32 %39, 1, !dbg !5746
  %idx.ext52 = sext i32 %mul51 to i64, !dbg !5746
  %add.ptr53 = getelementptr inbounds i8, i8* %38, i64 %idx.ext52, !dbg !5746
  %40 = bitcast i8* %add.ptr53 to %union.x264_union32_t*, !dbg !5746
  %i54 = bitcast %union.x264_union32_t* %40 to i32*, !dbg !5746
  store i32 %37, i32* %i54, align 4, !dbg !5747
  %41 = load i32, i32* %h.addr, align 4, !dbg !5748
  %cmp55 = icmp eq i32 %41, 2, !dbg !5750
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !5751

if.then57:                                        ; preds = %if.end50
  br label %if.end126, !dbg !5752

if.end58:                                         ; preds = %if.end50
  %42 = load i32, i32* %v4, align 4, !dbg !5753
  %43 = load i8*, i8** %d, align 8, !dbg !5754
  %44 = load i32, i32* %s.addr, align 4, !dbg !5754
  %mul59 = mul nsw i32 %44, 2, !dbg !5754
  %idx.ext60 = sext i32 %mul59 to i64, !dbg !5754
  %add.ptr61 = getelementptr inbounds i8, i8* %43, i64 %idx.ext60, !dbg !5754
  %45 = bitcast i8* %add.ptr61 to %union.x264_union32_t*, !dbg !5754
  %i62 = bitcast %union.x264_union32_t* %45 to i32*, !dbg !5754
  store i32 %42, i32* %i62, align 4, !dbg !5755
  %46 = load i32, i32* %v4, align 4, !dbg !5756
  %47 = load i8*, i8** %d, align 8, !dbg !5757
  %48 = load i32, i32* %s.addr, align 4, !dbg !5757
  %mul63 = mul nsw i32 %48, 3, !dbg !5757
  %idx.ext64 = sext i32 %mul63 to i64, !dbg !5757
  %add.ptr65 = getelementptr inbounds i8, i8* %47, i64 %idx.ext64, !dbg !5757
  %49 = bitcast i8* %add.ptr65 to %union.x264_union32_t*, !dbg !5757
  %i66 = bitcast %union.x264_union32_t* %49 to i32*, !dbg !5757
  store i32 %46, i32* %i66, align 4, !dbg !5758
  br label %if.end125, !dbg !5759

if.else67:                                        ; preds = %if.else
  %50 = load i32, i32* %w.addr, align 4, !dbg !5760
  %cmp68 = icmp eq i32 %50, 8, !dbg !5762
  br i1 %cmp68, label %if.then70, label %if.else95, !dbg !5763

if.then70:                                        ; preds = %if.else67
  %51 = load i64, i64* %v8, align 8, !dbg !5764
  %52 = load i8*, i8** %d, align 8, !dbg !5768
  %53 = load i32, i32* %s.addr, align 4, !dbg !5768
  %mul71 = mul nsw i32 %53, 0, !dbg !5768
  %idx.ext72 = sext i32 %mul71 to i64, !dbg !5768
  %add.ptr73 = getelementptr inbounds i8, i8* %52, i64 %idx.ext72, !dbg !5768
  %54 = bitcast i8* %add.ptr73 to %union.x264_union64_t*, !dbg !5768
  %i74 = bitcast %union.x264_union64_t* %54 to i64*, !dbg !5768
  store i64 %51, i64* %i74, align 8, !dbg !5769
  %55 = load i32, i32* %h.addr, align 4, !dbg !5770
  %cmp75 = icmp eq i32 %55, 1, !dbg !5772
  br i1 %cmp75, label %if.then77, label %if.end78, !dbg !5773

if.then77:                                        ; preds = %if.then70
  br label %if.end126, !dbg !5774

if.end78:                                         ; preds = %if.then70
  %56 = load i64, i64* %v8, align 8, !dbg !5775
  %57 = load i8*, i8** %d, align 8, !dbg !5776
  %58 = load i32, i32* %s.addr, align 4, !dbg !5776
  %mul79 = mul nsw i32 %58, 1, !dbg !5776
  %idx.ext80 = sext i32 %mul79 to i64, !dbg !5776
  %add.ptr81 = getelementptr inbounds i8, i8* %57, i64 %idx.ext80, !dbg !5776
  %59 = bitcast i8* %add.ptr81 to %union.x264_union64_t*, !dbg !5776
  %i82 = bitcast %union.x264_union64_t* %59 to i64*, !dbg !5776
  store i64 %56, i64* %i82, align 8, !dbg !5777
  %60 = load i32, i32* %h.addr, align 4, !dbg !5778
  %cmp83 = icmp eq i32 %60, 2, !dbg !5780
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !5781

if.then85:                                        ; preds = %if.end78
  br label %if.end126, !dbg !5782

if.end86:                                         ; preds = %if.end78
  %61 = load i64, i64* %v8, align 8, !dbg !5783
  %62 = load i8*, i8** %d, align 8, !dbg !5784
  %63 = load i32, i32* %s.addr, align 4, !dbg !5784
  %mul87 = mul nsw i32 %63, 2, !dbg !5784
  %idx.ext88 = sext i32 %mul87 to i64, !dbg !5784
  %add.ptr89 = getelementptr inbounds i8, i8* %62, i64 %idx.ext88, !dbg !5784
  %64 = bitcast i8* %add.ptr89 to %union.x264_union64_t*, !dbg !5784
  %i90 = bitcast %union.x264_union64_t* %64 to i64*, !dbg !5784
  store i64 %61, i64* %i90, align 8, !dbg !5785
  %65 = load i64, i64* %v8, align 8, !dbg !5786
  %66 = load i8*, i8** %d, align 8, !dbg !5787
  %67 = load i32, i32* %s.addr, align 4, !dbg !5787
  %mul91 = mul nsw i32 %67, 3, !dbg !5787
  %idx.ext92 = sext i32 %mul91 to i64, !dbg !5787
  %add.ptr93 = getelementptr inbounds i8, i8* %66, i64 %idx.ext92, !dbg !5787
  %68 = bitcast i8* %add.ptr93 to %union.x264_union64_t*, !dbg !5787
  %i94 = bitcast %union.x264_union64_t* %68 to i64*, !dbg !5787
  store i64 %65, i64* %i94, align 8, !dbg !5788
  br label %if.end124, !dbg !5789

if.else95:                                        ; preds = %if.else67
  %69 = load i32, i32* %w.addr, align 4, !dbg !5790
  %cmp96 = icmp eq i32 %69, 16, !dbg !5792
  br i1 %cmp96, label %if.then98, label %if.else122, !dbg !5793

if.then98:                                        ; preds = %if.else95
  br label %do.body, !dbg !5794

do.body:                                          ; preds = %do.cond, %if.then98
  %70 = load i64, i64* %v8, align 8, !dbg !5798
  %71 = load i8*, i8** %d, align 8, !dbg !5800
  %72 = load i32, i32* %s.addr, align 4, !dbg !5800
  %mul99 = mul nsw i32 %72, 0, !dbg !5800
  %idx.ext100 = sext i32 %mul99 to i64, !dbg !5800
  %add.ptr101 = getelementptr inbounds i8, i8* %71, i64 %idx.ext100, !dbg !5800
  %add.ptr102 = getelementptr inbounds i8, i8* %add.ptr101, i64 0, !dbg !5800
  %73 = bitcast i8* %add.ptr102 to %union.x264_union64_t*, !dbg !5800
  %i103 = bitcast %union.x264_union64_t* %73 to i64*, !dbg !5800
  store i64 %70, i64* %i103, align 8, !dbg !5801
  %74 = load i64, i64* %v8, align 8, !dbg !5802
  %75 = load i8*, i8** %d, align 8, !dbg !5803
  %76 = load i32, i32* %s.addr, align 4, !dbg !5803
  %mul104 = mul nsw i32 %76, 0, !dbg !5803
  %idx.ext105 = sext i32 %mul104 to i64, !dbg !5803
  %add.ptr106 = getelementptr inbounds i8, i8* %75, i64 %idx.ext105, !dbg !5803
  %add.ptr107 = getelementptr inbounds i8, i8* %add.ptr106, i64 8, !dbg !5803
  %77 = bitcast i8* %add.ptr107 to %union.x264_union64_t*, !dbg !5803
  %i108 = bitcast %union.x264_union64_t* %77 to i64*, !dbg !5803
  store i64 %74, i64* %i108, align 8, !dbg !5804
  %78 = load i64, i64* %v8, align 8, !dbg !5805
  %79 = load i8*, i8** %d, align 8, !dbg !5806
  %80 = load i32, i32* %s.addr, align 4, !dbg !5806
  %mul109 = mul nsw i32 %80, 1, !dbg !5806
  %idx.ext110 = sext i32 %mul109 to i64, !dbg !5806
  %add.ptr111 = getelementptr inbounds i8, i8* %79, i64 %idx.ext110, !dbg !5806
  %add.ptr112 = getelementptr inbounds i8, i8* %add.ptr111, i64 0, !dbg !5806
  %81 = bitcast i8* %add.ptr112 to %union.x264_union64_t*, !dbg !5806
  %i113 = bitcast %union.x264_union64_t* %81 to i64*, !dbg !5806
  store i64 %78, i64* %i113, align 8, !dbg !5807
  %82 = load i64, i64* %v8, align 8, !dbg !5808
  %83 = load i8*, i8** %d, align 8, !dbg !5809
  %84 = load i32, i32* %s.addr, align 4, !dbg !5809
  %mul114 = mul nsw i32 %84, 1, !dbg !5809
  %idx.ext115 = sext i32 %mul114 to i64, !dbg !5809
  %add.ptr116 = getelementptr inbounds i8, i8* %83, i64 %idx.ext115, !dbg !5809
  %add.ptr117 = getelementptr inbounds i8, i8* %add.ptr116, i64 8, !dbg !5809
  %85 = bitcast i8* %add.ptr117 to %union.x264_union64_t*, !dbg !5809
  %i118 = bitcast %union.x264_union64_t* %85 to i64*, !dbg !5809
  store i64 %82, i64* %i118, align 8, !dbg !5810
  %86 = load i32, i32* %h.addr, align 4, !dbg !5811
  %sub = sub nsw i32 %86, 2, !dbg !5811
  store i32 %sub, i32* %h.addr, align 4, !dbg !5811
  %87 = load i32, i32* %s.addr, align 4, !dbg !5812
  %mul119 = mul nsw i32 %87, 2, !dbg !5813
  %88 = load i8*, i8** %d, align 8, !dbg !5814
  %idx.ext120 = sext i32 %mul119 to i64, !dbg !5814
  %add.ptr121 = getelementptr inbounds i8, i8* %88, i64 %idx.ext120, !dbg !5814
  store i8* %add.ptr121, i8** %d, align 8, !dbg !5814
  br label %do.cond, !dbg !5815

do.cond:                                          ; preds = %do.body
  %89 = load i32, i32* %h.addr, align 4, !dbg !5816
  %tobool = icmp ne i32 %89, 0, !dbg !5815
  br i1 %tobool, label %do.body, label %do.end, !dbg !5815, !llvm.loop !5817

do.end:                                           ; preds = %do.cond
  br label %if.end123, !dbg !5819

if.else122:                                       ; preds = %if.else95
  br label %if.end123

if.end123:                                        ; preds = %if.else122, %do.end
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.end86
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.end58
  br label %if.end126

if.end126:                                        ; preds = %if.then23, %if.then30, %if.then49, %if.then57, %if.then77, %if.then85, %if.end125, %if.end31
  ret void, !dbg !5820
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1453, !1454, !1455}
!llvm.ident = !{!1456}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "x264_pixel_size", scope: !2, file: !6, line: 47, type: !1447, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !19, globals: !80, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "x264_src/encoder/me.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 30, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "x264_src/common/pixel.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18}
!9 = !DIEnumerator(name: "PIXEL_16x16", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "PIXEL_16x8", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "PIXEL_8x16", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "PIXEL_8x8", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "PIXEL_8x4", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "PIXEL_4x8", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "PIXEL_4x4", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "PIXEL_4x2", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "PIXEL_2x4", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "PIXEL_2x2", value: 9, isUnsigned: true)
!19 = !{!20, !44, !57, !73, !62}
!20 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_union32_t", file: !22, line: 89, baseType: !23)
!22 = !DIFile(filename: "x264_src/common/common.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!23 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !22, line: 89, size: 32, elements: !24)
!24 = !{!25, !30, !37}
!25 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !23, file: !22, line: 89, baseType: !26, size: 32)
!26 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !27, line: 26, baseType: !28)
!27 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h", directory: "")
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint32_t", file: !29, line: 42, baseType: !7)
!29 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!30 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !23, file: !22, line: 89, baseType: !31, size: 32)
!31 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 32, elements: !35)
!32 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !27, line: 25, baseType: !33)
!33 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint16_t", file: !29, line: 40, baseType: !34)
!34 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!35 = !{!36}
!36 = !DISubrange(count: 2)
!37 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !23, file: !22, line: 89, baseType: !38, size: 32)
!38 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 32, elements: !42)
!39 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !27, line: 24, baseType: !40)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint8_t", file: !29, line: 38, baseType: !41)
!41 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!42 = !{!43}
!43 = !DISubrange(count: 4)
!44 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !45, size: 64)
!45 = !DIDerivedType(tag: DW_TAG_typedef, name: "mvsad_t", file: !46, line: 58, baseType: !47)
!46 = !DIFile(filename: "x264_src/encoder/me.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!47 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !46, line: 55, size: 64, elements: !48)
!48 = !{!49, !51}
!49 = !DIDerivedType(tag: DW_TAG_member, name: "sad", scope: !47, file: !46, line: 56, baseType: !50, size: 32)
!50 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "mv", scope: !47, file: !46, line: 57, baseType: !52, size: 32, offset: 32)
!52 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 32, elements: !35)
!53 = !DIDerivedType(tag: DW_TAG_typedef, name: "int16_t", file: !54, line: 25, baseType: !55)
!54 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h", directory: "")
!55 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int16_t", file: !29, line: 39, baseType: !56)
!56 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!57 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !58, size: 64)
!58 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_union64_t", file: !22, line: 90, baseType: !59)
!59 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !22, line: 90, size: 64, elements: !60)
!60 = !{!61, !65, !67, !69}
!61 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !59, file: !22, line: 90, baseType: !62, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !27, line: 27, baseType: !63)
!63 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uint64_t", file: !29, line: 45, baseType: !64)
!64 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !59, file: !22, line: 90, baseType: !66, size: 64)
!66 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 64, elements: !35)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !59, file: !22, line: 90, baseType: !68, size: 64)
!68 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 64, elements: !42)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !59, file: !22, line: 90, baseType: !70, size: 64)
!70 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 64, elements: !71)
!71 = !{!72}
!72 = !DISubrange(count: 8)
!73 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !74, size: 64)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_union16_t", file: !22, line: 88, baseType: !75)
!75 = distinct !DICompositeType(tag: DW_TAG_union_type, file: !22, line: 88, size: 16, elements: !76)
!76 = !{!77, !78}
!77 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !75, file: !22, line: 88, baseType: !32, size: 16)
!78 = !DIDerivedType(tag: DW_TAG_member, name: "c", scope: !75, file: !22, line: 88, baseType: !79, size: 16)
!79 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 16, elements: !35)
!80 = !{!81, !1393, !1396, !1401, !1406, !0, !1408, !1411, !1414, !1418, !1423, !1431, !1437, !1442, !1445}
!81 = !DIGlobalVariableExpression(var: !82, expr: !DIExpression())
!82 = distinct !DIGlobalVariable(name: "x264_pixel_size_shift", scope: !83, file: !3, line: 380, type: !1392, isLocal: true, isDefinition: true)
!83 = distinct !DISubprogram(name: "x264_me_search_ref", scope: !3, file: !3, line: 173, type: !84, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!84 = !DISubroutineType(types: !85)
!85 = !{null, !86, !1372, !626, !50, !638}
!86 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !87, size: 64)
!87 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_t", file: !88, line: 46, baseType: !89)
!88 = !DIFile(filename: "x264_src/x264.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "x264_t", file: !22, line: 381, size: 266752, elements: !90)
!90 = !{!91, !259, !263, !264, !265, !266, !267, !268, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !404, !406, !434, !436, !437, !438, !442, !446, !447, !448, !452, !456, !457, !458, !463, !466, !467, !540, !557, !717, !718, !719, !720, !724, !725, !726, !727, !728, !729, !730, !745, !938, !942, !1003, !1006, !1008, !1009, !1010, !1013, !1018, !1027, !1028, !1036, !1038, !1043, !1118, !1204, !1248, !1270, !1319, !1348}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "param", scope: !89, file: !22, line: 384, baseType: !92, size: 5632)
!92 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_param_t", file: !88, line: 376, baseType: !93)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "x264_param_t", file: !88, line: 176, size: 5632, elements: !94)
!94 = !{!95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !138, !142, !143, !144, !145, !149, !150, !164, !165, !166, !167, !168, !197, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "cpu", scope: !93, file: !88, line: 179, baseType: !7, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "i_threads", scope: !93, file: !88, line: 180, baseType: !50, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "b_sliced_threads", scope: !93, file: !88, line: 181, baseType: !50, size: 32, offset: 64)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "b_deterministic", scope: !93, file: !88, line: 182, baseType: !50, size: 32, offset: 96)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "i_sync_lookahead", scope: !93, file: !88, line: 183, baseType: !50, size: 32, offset: 128)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "i_width", scope: !93, file: !88, line: 186, baseType: !50, size: 32, offset: 160)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "i_height", scope: !93, file: !88, line: 187, baseType: !50, size: 32, offset: 192)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "i_csp", scope: !93, file: !88, line: 188, baseType: !50, size: 32, offset: 224)
!103 = !DIDerivedType(tag: DW_TAG_member, name: "i_level_idc", scope: !93, file: !88, line: 189, baseType: !50, size: 32, offset: 256)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_total", scope: !93, file: !88, line: 190, baseType: !50, size: 32, offset: 288)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "i_nal_hrd", scope: !93, file: !88, line: 198, baseType: !50, size: 32, offset: 320)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "vui", scope: !93, file: !88, line: 215, baseType: !107, size: 288, offset: 352)
!107 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !93, file: !88, line: 200, size: 288, elements: !108)
!108 = !{!109, !110, !111, !112, !113, !114, !115, !116, !117}
!109 = !DIDerivedType(tag: DW_TAG_member, name: "i_sar_height", scope: !107, file: !88, line: 203, baseType: !50, size: 32)
!110 = !DIDerivedType(tag: DW_TAG_member, name: "i_sar_width", scope: !107, file: !88, line: 204, baseType: !50, size: 32, offset: 32)
!111 = !DIDerivedType(tag: DW_TAG_member, name: "i_overscan", scope: !107, file: !88, line: 206, baseType: !50, size: 32, offset: 64)
!112 = !DIDerivedType(tag: DW_TAG_member, name: "i_vidformat", scope: !107, file: !88, line: 209, baseType: !50, size: 32, offset: 96)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "b_fullrange", scope: !107, file: !88, line: 210, baseType: !50, size: 32, offset: 128)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "i_colorprim", scope: !107, file: !88, line: 211, baseType: !50, size: 32, offset: 160)
!115 = !DIDerivedType(tag: DW_TAG_member, name: "i_transfer", scope: !107, file: !88, line: 212, baseType: !50, size: 32, offset: 192)
!116 = !DIDerivedType(tag: DW_TAG_member, name: "i_colmatrix", scope: !107, file: !88, line: 213, baseType: !50, size: 32, offset: 224)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_loc", scope: !107, file: !88, line: 214, baseType: !50, size: 32, offset: 256)
!118 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_reference", scope: !93, file: !88, line: 218, baseType: !50, size: 32, offset: 640)
!119 = !DIDerivedType(tag: DW_TAG_member, name: "i_keyint_max", scope: !93, file: !88, line: 219, baseType: !50, size: 32, offset: 672)
!120 = !DIDerivedType(tag: DW_TAG_member, name: "i_keyint_min", scope: !93, file: !88, line: 220, baseType: !50, size: 32, offset: 704)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "i_scenecut_threshold", scope: !93, file: !88, line: 221, baseType: !50, size: 32, offset: 736)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "b_intra_refresh", scope: !93, file: !88, line: 222, baseType: !50, size: 32, offset: 768)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe", scope: !93, file: !88, line: 224, baseType: !50, size: 32, offset: 800)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe_adaptive", scope: !93, file: !88, line: 225, baseType: !50, size: 32, offset: 832)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe_bias", scope: !93, file: !88, line: 226, baseType: !50, size: 32, offset: 864)
!126 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe_pyramid", scope: !93, file: !88, line: 227, baseType: !50, size: 32, offset: 896)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "b_deblocking_filter", scope: !93, file: !88, line: 229, baseType: !50, size: 32, offset: 928)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "i_deblocking_filter_alphac0", scope: !93, file: !88, line: 230, baseType: !50, size: 32, offset: 960)
!129 = !DIDerivedType(tag: DW_TAG_member, name: "i_deblocking_filter_beta", scope: !93, file: !88, line: 231, baseType: !50, size: 32, offset: 992)
!130 = !DIDerivedType(tag: DW_TAG_member, name: "b_cabac", scope: !93, file: !88, line: 233, baseType: !50, size: 32, offset: 1024)
!131 = !DIDerivedType(tag: DW_TAG_member, name: "i_cabac_init_idc", scope: !93, file: !88, line: 234, baseType: !50, size: 32, offset: 1056)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "b_interlaced", scope: !93, file: !88, line: 236, baseType: !50, size: 32, offset: 1088)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "b_constrained_intra", scope: !93, file: !88, line: 237, baseType: !50, size: 32, offset: 1120)
!134 = !DIDerivedType(tag: DW_TAG_member, name: "i_cqm_preset", scope: !93, file: !88, line: 239, baseType: !50, size: 32, offset: 1152)
!135 = !DIDerivedType(tag: DW_TAG_member, name: "psz_cqm_file", scope: !93, file: !88, line: 240, baseType: !136, size: 64, offset: 1216)
!136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !137, size: 64)
!137 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!138 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_4iy", scope: !93, file: !88, line: 241, baseType: !139, size: 128, offset: 1280)
!139 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 128, elements: !140)
!140 = !{!141}
!141 = !DISubrange(count: 16)
!142 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_4ic", scope: !93, file: !88, line: 242, baseType: !139, size: 128, offset: 1408)
!143 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_4py", scope: !93, file: !88, line: 243, baseType: !139, size: 128, offset: 1536)
!144 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_4pc", scope: !93, file: !88, line: 244, baseType: !139, size: 128, offset: 1664)
!145 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_8iy", scope: !93, file: !88, line: 245, baseType: !146, size: 512, offset: 1792)
!146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 512, elements: !147)
!147 = !{!148}
!148 = !DISubrange(count: 64)
!149 = !DIDerivedType(tag: DW_TAG_member, name: "cqm_8py", scope: !93, file: !88, line: 246, baseType: !146, size: 512, offset: 2304)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "pf_log", scope: !93, file: !88, line: 249, baseType: !151, size: 64, offset: 2816)
!151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!152 = !DISubroutineType(types: !153)
!153 = !{null, !154, !50, !155, !157}
!154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !156, size: 64)
!156 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !137)
!157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !159)
!159 = !{!160, !161, !162, !163}
!160 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !158, file: !3, baseType: !7, size: 32)
!161 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !158, file: !3, baseType: !7, size: 32, offset: 32)
!162 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !158, file: !3, baseType: !154, size: 64, offset: 64)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !158, file: !3, baseType: !154, size: 64, offset: 128)
!164 = !DIDerivedType(tag: DW_TAG_member, name: "p_log_private", scope: !93, file: !88, line: 250, baseType: !154, size: 64, offset: 2880)
!165 = !DIDerivedType(tag: DW_TAG_member, name: "i_log_level", scope: !93, file: !88, line: 251, baseType: !50, size: 32, offset: 2944)
!166 = !DIDerivedType(tag: DW_TAG_member, name: "b_visualize", scope: !93, file: !88, line: 252, baseType: !50, size: 32, offset: 2976)
!167 = !DIDerivedType(tag: DW_TAG_member, name: "psz_dump_yuv", scope: !93, file: !88, line: 253, baseType: !136, size: 64, offset: 3008)
!168 = !DIDerivedType(tag: DW_TAG_member, name: "analyse", scope: !93, file: !88, line: 287, baseType: !169, size: 800, offset: 3072)
!169 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !93, file: !88, line: 256, size: 800, elements: !170)
!170 = !{!171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !191, !192, !193, !195, !196}
!171 = !DIDerivedType(tag: DW_TAG_member, name: "intra", scope: !169, file: !88, line: 258, baseType: !7, size: 32)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "inter", scope: !169, file: !88, line: 259, baseType: !7, size: 32, offset: 32)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "b_transform_8x8", scope: !169, file: !88, line: 261, baseType: !50, size: 32, offset: 64)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "i_weighted_pred", scope: !169, file: !88, line: 262, baseType: !50, size: 32, offset: 96)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "b_weighted_bipred", scope: !169, file: !88, line: 263, baseType: !50, size: 32, offset: 128)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "i_direct_mv_pred", scope: !169, file: !88, line: 264, baseType: !50, size: 32, offset: 160)
!177 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_qp_offset", scope: !169, file: !88, line: 265, baseType: !50, size: 32, offset: 192)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "i_me_method", scope: !169, file: !88, line: 267, baseType: !50, size: 32, offset: 224)
!179 = !DIDerivedType(tag: DW_TAG_member, name: "i_me_range", scope: !169, file: !88, line: 268, baseType: !50, size: 32, offset: 256)
!180 = !DIDerivedType(tag: DW_TAG_member, name: "i_mv_range", scope: !169, file: !88, line: 269, baseType: !50, size: 32, offset: 288)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "i_mv_range_thread", scope: !169, file: !88, line: 270, baseType: !50, size: 32, offset: 320)
!182 = !DIDerivedType(tag: DW_TAG_member, name: "i_subpel_refine", scope: !169, file: !88, line: 271, baseType: !50, size: 32, offset: 352)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "b_chroma_me", scope: !169, file: !88, line: 272, baseType: !50, size: 32, offset: 384)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "b_mixed_references", scope: !169, file: !88, line: 273, baseType: !50, size: 32, offset: 416)
!185 = !DIDerivedType(tag: DW_TAG_member, name: "i_trellis", scope: !169, file: !88, line: 274, baseType: !50, size: 32, offset: 448)
!186 = !DIDerivedType(tag: DW_TAG_member, name: "b_fast_pskip", scope: !169, file: !88, line: 275, baseType: !50, size: 32, offset: 480)
!187 = !DIDerivedType(tag: DW_TAG_member, name: "b_dct_decimate", scope: !169, file: !88, line: 276, baseType: !50, size: 32, offset: 512)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "i_noise_reduction", scope: !169, file: !88, line: 277, baseType: !50, size: 32, offset: 544)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "f_psy_rd", scope: !169, file: !88, line: 278, baseType: !190, size: 32, offset: 576)
!190 = !DIBasicType(name: "float", size: 32, encoding: DW_ATE_float)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "f_psy_trellis", scope: !169, file: !88, line: 279, baseType: !190, size: 32, offset: 608)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "b_psy", scope: !169, file: !88, line: 280, baseType: !50, size: 32, offset: 640)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "i_luma_deadzone", scope: !169, file: !88, line: 283, baseType: !194, size: 64, offset: 672)
!194 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 64, elements: !35)
!195 = !DIDerivedType(tag: DW_TAG_member, name: "b_psnr", scope: !169, file: !88, line: 285, baseType: !50, size: 32, offset: 736)
!196 = !DIDerivedType(tag: DW_TAG_member, name: "b_ssim", scope: !169, file: !88, line: 286, baseType: !50, size: 32, offset: 768)
!197 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !93, file: !88, line: 327, baseType: !198, size: 1152, offset: 3904)
!198 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !93, file: !88, line: 290, size: 1152, elements: !199)
!199 = !{!200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !237, !238}
!200 = !DIDerivedType(tag: DW_TAG_member, name: "i_rc_method", scope: !198, file: !88, line: 292, baseType: !50, size: 32)
!201 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp_constant", scope: !198, file: !88, line: 294, baseType: !50, size: 32, offset: 32)
!202 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp_min", scope: !198, file: !88, line: 295, baseType: !50, size: 32, offset: 64)
!203 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp_max", scope: !198, file: !88, line: 296, baseType: !50, size: 32, offset: 96)
!204 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp_step", scope: !198, file: !88, line: 297, baseType: !50, size: 32, offset: 128)
!205 = !DIDerivedType(tag: DW_TAG_member, name: "i_bitrate", scope: !198, file: !88, line: 299, baseType: !50, size: 32, offset: 160)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "f_rf_constant", scope: !198, file: !88, line: 300, baseType: !190, size: 32, offset: 192)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "f_rf_constant_max", scope: !198, file: !88, line: 301, baseType: !190, size: 32, offset: 224)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "f_rate_tolerance", scope: !198, file: !88, line: 302, baseType: !190, size: 32, offset: 256)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "i_vbv_max_bitrate", scope: !198, file: !88, line: 303, baseType: !50, size: 32, offset: 288)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "i_vbv_buffer_size", scope: !198, file: !88, line: 304, baseType: !50, size: 32, offset: 320)
!211 = !DIDerivedType(tag: DW_TAG_member, name: "f_vbv_buffer_init", scope: !198, file: !88, line: 305, baseType: !190, size: 32, offset: 352)
!212 = !DIDerivedType(tag: DW_TAG_member, name: "f_ip_factor", scope: !198, file: !88, line: 306, baseType: !190, size: 32, offset: 384)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "f_pb_factor", scope: !198, file: !88, line: 307, baseType: !190, size: 32, offset: 416)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "i_aq_mode", scope: !198, file: !88, line: 309, baseType: !50, size: 32, offset: 448)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "f_aq_strength", scope: !198, file: !88, line: 310, baseType: !190, size: 32, offset: 480)
!216 = !DIDerivedType(tag: DW_TAG_member, name: "b_mb_tree", scope: !198, file: !88, line: 311, baseType: !50, size: 32, offset: 512)
!217 = !DIDerivedType(tag: DW_TAG_member, name: "i_lookahead", scope: !198, file: !88, line: 312, baseType: !50, size: 32, offset: 544)
!218 = !DIDerivedType(tag: DW_TAG_member, name: "b_stat_write", scope: !198, file: !88, line: 315, baseType: !50, size: 32, offset: 576)
!219 = !DIDerivedType(tag: DW_TAG_member, name: "psz_stat_out", scope: !198, file: !88, line: 316, baseType: !136, size: 64, offset: 640)
!220 = !DIDerivedType(tag: DW_TAG_member, name: "b_stat_read", scope: !198, file: !88, line: 317, baseType: !50, size: 32, offset: 704)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "psz_stat_in", scope: !198, file: !88, line: 318, baseType: !136, size: 64, offset: 768)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "f_qcompress", scope: !198, file: !88, line: 321, baseType: !190, size: 32, offset: 832)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "f_qblur", scope: !198, file: !88, line: 322, baseType: !190, size: 32, offset: 864)
!224 = !DIDerivedType(tag: DW_TAG_member, name: "f_complexity_blur", scope: !198, file: !88, line: 323, baseType: !190, size: 32, offset: 896)
!225 = !DIDerivedType(tag: DW_TAG_member, name: "zones", scope: !198, file: !88, line: 324, baseType: !226, size: 64, offset: 960)
!226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !227, size: 64)
!227 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_zone_t", file: !88, line: 174, baseType: !228)
!228 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !88, line: 167, size: 256, elements: !229)
!229 = !{!230, !231, !232, !233, !234, !235}
!230 = !DIDerivedType(tag: DW_TAG_member, name: "i_start", scope: !228, file: !88, line: 169, baseType: !50, size: 32)
!231 = !DIDerivedType(tag: DW_TAG_member, name: "i_end", scope: !228, file: !88, line: 169, baseType: !50, size: 32, offset: 32)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "b_force_qp", scope: !228, file: !88, line: 170, baseType: !50, size: 32, offset: 64)
!233 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp", scope: !228, file: !88, line: 171, baseType: !50, size: 32, offset: 96)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "f_bitrate_factor", scope: !228, file: !88, line: 172, baseType: !190, size: 32, offset: 128)
!235 = !DIDerivedType(tag: DW_TAG_member, name: "param", scope: !228, file: !88, line: 173, baseType: !236, size: 64, offset: 192)
!236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "i_zones", scope: !198, file: !88, line: 325, baseType: !50, size: 32, offset: 1024)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "psz_zones", scope: !198, file: !88, line: 326, baseType: !136, size: 64, offset: 1088)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "b_aud", scope: !93, file: !88, line: 330, baseType: !50, size: 32, offset: 5056)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "b_repeat_headers", scope: !93, file: !88, line: 331, baseType: !50, size: 32, offset: 5088)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "b_annexb", scope: !93, file: !88, line: 332, baseType: !50, size: 32, offset: 5120)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "i_sps_id", scope: !93, file: !88, line: 334, baseType: !50, size: 32, offset: 5152)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "b_vfr_input", scope: !93, file: !88, line: 335, baseType: !50, size: 32, offset: 5184)
!244 = !DIDerivedType(tag: DW_TAG_member, name: "i_fps_num", scope: !93, file: !88, line: 336, baseType: !26, size: 32, offset: 5216)
!245 = !DIDerivedType(tag: DW_TAG_member, name: "i_fps_den", scope: !93, file: !88, line: 337, baseType: !26, size: 32, offset: 5248)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "i_timebase_num", scope: !93, file: !88, line: 338, baseType: !26, size: 32, offset: 5280)
!247 = !DIDerivedType(tag: DW_TAG_member, name: "i_timebase_den", scope: !93, file: !88, line: 339, baseType: !26, size: 32, offset: 5312)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "b_dts_compress", scope: !93, file: !88, line: 340, baseType: !50, size: 32, offset: 5344)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "b_tff", scope: !93, file: !88, line: 344, baseType: !50, size: 32, offset: 5376)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "b_pic_struct", scope: !93, file: !88, line: 356, baseType: !50, size: 32, offset: 5408)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "b_fake_interlaced", scope: !93, file: !88, line: 364, baseType: !50, size: 32, offset: 5440)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "i_slice_max_size", scope: !93, file: !88, line: 367, baseType: !50, size: 32, offset: 5472)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "i_slice_max_mbs", scope: !93, file: !88, line: 368, baseType: !50, size: 32, offset: 5504)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "i_slice_count", scope: !93, file: !88, line: 369, baseType: !50, size: 32, offset: 5536)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "param_free", scope: !93, file: !88, line: 375, baseType: !256, size: 64, offset: 5568)
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !257, size: 64)
!257 = !DISubroutineType(types: !258)
!258 = !{null, !154}
!259 = !DIDerivedType(tag: DW_TAG_member, name: "thread", scope: !89, file: !22, line: 386, baseType: !260, size: 8256, offset: 5632)
!260 = !DICompositeType(tag: DW_TAG_array_type, baseType: !86, size: 8256, elements: !261)
!261 = !{!262}
!262 = !DISubrange(count: 129)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "thread_handle", scope: !89, file: !22, line: 387, baseType: !50, size: 32, offset: 13888)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "b_thread_active", scope: !89, file: !22, line: 388, baseType: !50, size: 32, offset: 13920)
!265 = !DIDerivedType(tag: DW_TAG_member, name: "i_thread_phase", scope: !89, file: !22, line: 389, baseType: !50, size: 32, offset: 13952)
!266 = !DIDerivedType(tag: DW_TAG_member, name: "i_threadslice_start", scope: !89, file: !22, line: 390, baseType: !50, size: 32, offset: 13984)
!267 = !DIDerivedType(tag: DW_TAG_member, name: "i_threadslice_end", scope: !89, file: !22, line: 391, baseType: !50, size: 32, offset: 14016)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !89, file: !22, line: 402, baseType: !269, size: 576, offset: 14080)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !89, file: !22, line: 394, size: 576, elements: !270)
!270 = !{!271, !272, !273, !283, !284, !285}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "i_nal", scope: !269, file: !22, line: 396, baseType: !50, size: 32)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "i_nals_allocated", scope: !269, file: !22, line: 397, baseType: !50, size: 32, offset: 32)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "nal", scope: !269, file: !22, line: 398, baseType: !274, size: 64, offset: 64)
!274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !275, size: 64)
!275 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_nal_t", file: !88, line: 604, baseType: !276)
!276 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !88, line: 593, size: 192, elements: !277)
!277 = !{!278, !279, !280, !281}
!278 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref_idc", scope: !276, file: !88, line: 595, baseType: !50, size: 32)
!279 = !DIDerivedType(tag: DW_TAG_member, name: "i_type", scope: !276, file: !88, line: 596, baseType: !50, size: 32, offset: 32)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "i_payload", scope: !276, file: !88, line: 599, baseType: !50, size: 32, offset: 64)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "p_payload", scope: !276, file: !88, line: 603, baseType: !282, size: 64, offset: 128)
!282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !39, size: 64)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "i_bitstream", scope: !269, file: !22, line: 399, baseType: !50, size: 32, offset: 128)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "p_bitstream", scope: !269, file: !22, line: 400, baseType: !282, size: 64, offset: 192)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "bs", scope: !269, file: !22, line: 401, baseType: !286, size: 320, offset: 256)
!286 = !DIDerivedType(tag: DW_TAG_typedef, name: "bs_t", file: !287, line: 56, baseType: !288)
!287 = !DIFile(filename: "x264_src/common/bs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bs_s", file: !287, line: 47, size: 320, elements: !289)
!289 = !{!290, !291, !292, !293, !297, !298}
!290 = !DIDerivedType(tag: DW_TAG_member, name: "p_start", scope: !288, file: !287, line: 49, baseType: !282, size: 64)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !288, file: !287, line: 50, baseType: !282, size: 64, offset: 64)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "p_end", scope: !288, file: !287, line: 51, baseType: !282, size: 64, offset: 128)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "cur_bits", scope: !288, file: !287, line: 53, baseType: !294, size: 64, offset: 192)
!294 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !295, line: 87, baseType: !296)
!295 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!296 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "i_left", scope: !288, file: !287, line: 54, baseType: !50, size: 32, offset: 256)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "i_bits_encoded", scope: !288, file: !287, line: 55, baseType: !50, size: 32, offset: 288)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "nal_buffer", scope: !89, file: !22, line: 404, baseType: !282, size: 64, offset: 14656)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "nal_buffer_size", scope: !89, file: !22, line: 405, baseType: !50, size: 32, offset: 14720)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame", scope: !89, file: !22, line: 410, baseType: !50, size: 32, offset: 14752)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_num", scope: !89, file: !22, line: 411, baseType: !50, size: 32, offset: 14784)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "i_thread_frames", scope: !89, file: !22, line: 413, baseType: !50, size: 32, offset: 14816)
!304 = !DIDerivedType(tag: DW_TAG_member, name: "i_nal_type", scope: !89, file: !22, line: 415, baseType: !50, size: 32, offset: 14848)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "i_nal_ref_idc", scope: !89, file: !22, line: 416, baseType: !50, size: 32, offset: 14880)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "i_disp_fields", scope: !89, file: !22, line: 418, baseType: !50, size: 32, offset: 14912)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "i_disp_fields_last_frame", scope: !89, file: !22, line: 419, baseType: !50, size: 32, offset: 14944)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "i_prev_duration", scope: !89, file: !22, line: 420, baseType: !50, size: 32, offset: 14976)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "i_coded_fields", scope: !89, file: !22, line: 421, baseType: !50, size: 32, offset: 15008)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_delay", scope: !89, file: !22, line: 422, baseType: !50, size: 32, offset: 15040)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "i_coded_fields_lookahead", scope: !89, file: !22, line: 424, baseType: !50, size: 32, offset: 15072)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_delay_lookahead", scope: !89, file: !22, line: 425, baseType: !50, size: 32, offset: 15104)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "b_queued_intra_refresh", scope: !89, file: !22, line: 427, baseType: !50, size: 32, offset: 15136)
!314 = !DIDerivedType(tag: DW_TAG_member, name: "sps_array", scope: !89, file: !22, line: 430, baseType: !315, size: 10400, offset: 15168)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 10400, elements: !402)
!316 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_sps_t", file: !317, line: 154, baseType: !318)
!317 = !DIFile(filename: "x264_src/common/set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!318 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !317, line: 52, size: 10400, elements: !319)
!319 = !{!320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !337, !338, !339, !340, !341, !342, !343, !344, !345, !352, !353, !401}
!320 = !DIDerivedType(tag: DW_TAG_member, name: "i_id", scope: !318, file: !317, line: 54, baseType: !50, size: 32)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "i_profile_idc", scope: !318, file: !317, line: 56, baseType: !50, size: 32, offset: 32)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "i_level_idc", scope: !318, file: !317, line: 57, baseType: !50, size: 32, offset: 64)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "b_constraint_set0", scope: !318, file: !317, line: 59, baseType: !50, size: 32, offset: 96)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "b_constraint_set1", scope: !318, file: !317, line: 60, baseType: !50, size: 32, offset: 128)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "b_constraint_set2", scope: !318, file: !317, line: 61, baseType: !50, size: 32, offset: 160)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "i_log2_max_frame_num", scope: !318, file: !317, line: 63, baseType: !50, size: 32, offset: 192)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "i_poc_type", scope: !318, file: !317, line: 65, baseType: !50, size: 32, offset: 224)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "i_log2_max_poc_lsb", scope: !318, file: !317, line: 67, baseType: !50, size: 32, offset: 256)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "b_delta_pic_order_always_zero", scope: !318, file: !317, line: 69, baseType: !50, size: 32, offset: 288)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "i_offset_for_non_ref_pic", scope: !318, file: !317, line: 70, baseType: !50, size: 32, offset: 320)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "i_offset_for_top_to_bottom_field", scope: !318, file: !317, line: 71, baseType: !50, size: 32, offset: 352)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_frames_in_poc_cycle", scope: !318, file: !317, line: 72, baseType: !50, size: 32, offset: 384)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "i_offset_for_ref_frame", scope: !318, file: !317, line: 73, baseType: !334, size: 8192, offset: 416)
!334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 8192, elements: !335)
!335 = !{!336}
!336 = !DISubrange(count: 256)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_frames", scope: !318, file: !317, line: 75, baseType: !50, size: 32, offset: 8608)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "b_gaps_in_frame_num_value_allowed", scope: !318, file: !317, line: 76, baseType: !50, size: 32, offset: 8640)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_width", scope: !318, file: !317, line: 77, baseType: !50, size: 32, offset: 8672)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_height", scope: !318, file: !317, line: 78, baseType: !50, size: 32, offset: 8704)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "b_frame_mbs_only", scope: !318, file: !317, line: 79, baseType: !50, size: 32, offset: 8736)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "b_mb_adaptive_frame_field", scope: !318, file: !317, line: 80, baseType: !50, size: 32, offset: 8768)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "b_direct8x8_inference", scope: !318, file: !317, line: 81, baseType: !50, size: 32, offset: 8800)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "b_crop", scope: !318, file: !317, line: 83, baseType: !50, size: 32, offset: 8832)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "crop", scope: !318, file: !317, line: 90, baseType: !346, size: 128, offset: 8864)
!346 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !318, file: !317, line: 84, size: 128, elements: !347)
!347 = !{!348, !349, !350, !351}
!348 = !DIDerivedType(tag: DW_TAG_member, name: "i_left", scope: !346, file: !317, line: 86, baseType: !50, size: 32)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "i_right", scope: !346, file: !317, line: 87, baseType: !50, size: 32, offset: 32)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "i_top", scope: !346, file: !317, line: 88, baseType: !50, size: 32, offset: 64)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "i_bottom", scope: !346, file: !317, line: 89, baseType: !50, size: 32, offset: 96)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "b_vui", scope: !318, file: !317, line: 92, baseType: !50, size: 32, offset: 8992)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "vui", scope: !318, file: !317, line: 150, baseType: !354, size: 1344, offset: 9024)
!354 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !318, file: !317, line: 93, size: 1344, elements: !355)
!355 = !{!356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !392, !393, !394, !395, !396, !397, !398, !399, !400}
!356 = !DIDerivedType(tag: DW_TAG_member, name: "b_aspect_ratio_info_present", scope: !354, file: !317, line: 95, baseType: !50, size: 32)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "i_sar_width", scope: !354, file: !317, line: 96, baseType: !50, size: 32, offset: 32)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "i_sar_height", scope: !354, file: !317, line: 97, baseType: !50, size: 32, offset: 64)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "b_overscan_info_present", scope: !354, file: !317, line: 99, baseType: !50, size: 32, offset: 96)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "b_overscan_info", scope: !354, file: !317, line: 100, baseType: !50, size: 32, offset: 128)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "b_signal_type_present", scope: !354, file: !317, line: 102, baseType: !50, size: 32, offset: 160)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "i_vidformat", scope: !354, file: !317, line: 103, baseType: !50, size: 32, offset: 192)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "b_fullrange", scope: !354, file: !317, line: 104, baseType: !50, size: 32, offset: 224)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "b_color_description_present", scope: !354, file: !317, line: 105, baseType: !50, size: 32, offset: 256)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "i_colorprim", scope: !354, file: !317, line: 106, baseType: !50, size: 32, offset: 288)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "i_transfer", scope: !354, file: !317, line: 107, baseType: !50, size: 32, offset: 320)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "i_colmatrix", scope: !354, file: !317, line: 108, baseType: !50, size: 32, offset: 352)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "b_chroma_loc_info_present", scope: !354, file: !317, line: 110, baseType: !50, size: 32, offset: 384)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_loc_top", scope: !354, file: !317, line: 111, baseType: !50, size: 32, offset: 416)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_loc_bottom", scope: !354, file: !317, line: 112, baseType: !50, size: 32, offset: 448)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "b_timing_info_present", scope: !354, file: !317, line: 114, baseType: !50, size: 32, offset: 480)
!372 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_units_in_tick", scope: !354, file: !317, line: 115, baseType: !26, size: 32, offset: 512)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "i_time_scale", scope: !354, file: !317, line: 116, baseType: !26, size: 32, offset: 544)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "b_fixed_frame_rate", scope: !354, file: !317, line: 117, baseType: !50, size: 32, offset: 576)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "b_nal_hrd_parameters_present", scope: !354, file: !317, line: 119, baseType: !50, size: 32, offset: 608)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "b_vcl_hrd_parameters_present", scope: !354, file: !317, line: 120, baseType: !50, size: 32, offset: 640)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "hrd", scope: !354, file: !317, line: 137, baseType: !378, size: 384, offset: 672)
!378 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !354, file: !317, line: 122, size: 384, elements: !379)
!379 = !{!380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391}
!380 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_cnt", scope: !378, file: !317, line: 124, baseType: !50, size: 32)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "i_bit_rate_scale", scope: !378, file: !317, line: 125, baseType: !50, size: 32, offset: 32)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_size_scale", scope: !378, file: !317, line: 126, baseType: !50, size: 32, offset: 64)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "i_bit_rate_value", scope: !378, file: !317, line: 127, baseType: !50, size: 32, offset: 96)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_size_value", scope: !378, file: !317, line: 128, baseType: !50, size: 32, offset: 128)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "i_bit_rate_unscaled", scope: !378, file: !317, line: 129, baseType: !50, size: 32, offset: 160)
!386 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_size_unscaled", scope: !378, file: !317, line: 130, baseType: !50, size: 32, offset: 192)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "b_cbr_hrd", scope: !378, file: !317, line: 131, baseType: !50, size: 32, offset: 224)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "i_initial_cpb_removal_delay_length", scope: !378, file: !317, line: 133, baseType: !50, size: 32, offset: 256)
!389 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_removal_delay_length", scope: !378, file: !317, line: 134, baseType: !50, size: 32, offset: 288)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "i_dpb_output_delay_length", scope: !378, file: !317, line: 135, baseType: !50, size: 32, offset: 320)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "i_time_offset_length", scope: !378, file: !317, line: 136, baseType: !50, size: 32, offset: 352)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "b_pic_struct_present", scope: !354, file: !317, line: 139, baseType: !50, size: 32, offset: 1056)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "b_bitstream_restriction", scope: !354, file: !317, line: 140, baseType: !50, size: 32, offset: 1088)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "b_motion_vectors_over_pic_boundaries", scope: !354, file: !317, line: 141, baseType: !50, size: 32, offset: 1120)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_bytes_per_pic_denom", scope: !354, file: !317, line: 142, baseType: !50, size: 32, offset: 1152)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_bits_per_mb_denom", scope: !354, file: !317, line: 143, baseType: !50, size: 32, offset: 1184)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "i_log2_max_mv_length_horizontal", scope: !354, file: !317, line: 144, baseType: !50, size: 32, offset: 1216)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "i_log2_max_mv_length_vertical", scope: !354, file: !317, line: 145, baseType: !50, size: 32, offset: 1248)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_reorder_frames", scope: !354, file: !317, line: 146, baseType: !50, size: 32, offset: 1280)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_dec_frame_buffering", scope: !354, file: !317, line: 147, baseType: !50, size: 32, offset: 1312)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "b_qpprime_y_zero_transform_bypass", scope: !318, file: !317, line: 152, baseType: !50, size: 32, offset: 10368)
!402 = !{!403}
!403 = !DISubrange(count: 1)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "sps", scope: !89, file: !22, line: 431, baseType: !405, size: 64, offset: 25600)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "pps_array", scope: !89, file: !22, line: 432, baseType: !407, size: 960, offset: 25664)
!407 = !DICompositeType(tag: DW_TAG_array_type, baseType: !408, size: 960, elements: !402)
!408 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_pps_t", file: !317, line: 186, baseType: !409)
!409 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !317, line: 156, size: 960, elements: !410)
!410 = !{!411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428}
!411 = !DIDerivedType(tag: DW_TAG_member, name: "i_id", scope: !409, file: !317, line: 158, baseType: !50, size: 32)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "i_sps_id", scope: !409, file: !317, line: 159, baseType: !50, size: 32, offset: 32)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "b_cabac", scope: !409, file: !317, line: 161, baseType: !50, size: 32, offset: 64)
!414 = !DIDerivedType(tag: DW_TAG_member, name: "b_pic_order", scope: !409, file: !317, line: 163, baseType: !50, size: 32, offset: 96)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_slice_groups", scope: !409, file: !317, line: 164, baseType: !50, size: 32, offset: 128)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_idx_l0_default_active", scope: !409, file: !317, line: 166, baseType: !50, size: 32, offset: 160)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_idx_l1_default_active", scope: !409, file: !317, line: 167, baseType: !50, size: 32, offset: 192)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "b_weighted_pred", scope: !409, file: !317, line: 169, baseType: !50, size: 32, offset: 224)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "b_weighted_bipred", scope: !409, file: !317, line: 170, baseType: !50, size: 32, offset: 256)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "i_pic_init_qp", scope: !409, file: !317, line: 172, baseType: !50, size: 32, offset: 288)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "i_pic_init_qs", scope: !409, file: !317, line: 173, baseType: !50, size: 32, offset: 320)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_qp_index_offset", scope: !409, file: !317, line: 175, baseType: !50, size: 32, offset: 352)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "b_deblocking_filter_control", scope: !409, file: !317, line: 177, baseType: !50, size: 32, offset: 384)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "b_constrained_intra_pred", scope: !409, file: !317, line: 178, baseType: !50, size: 32, offset: 416)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "b_redundant_pic_cnt", scope: !409, file: !317, line: 179, baseType: !50, size: 32, offset: 448)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "b_transform_8x8_mode", scope: !409, file: !317, line: 181, baseType: !50, size: 32, offset: 480)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "i_cqm_preset", scope: !409, file: !317, line: 183, baseType: !50, size: 32, offset: 512)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "scaling_list", scope: !409, file: !317, line: 184, baseType: !429, size: 384, offset: 576)
!429 = !DICompositeType(tag: DW_TAG_array_type, baseType: !430, size: 384, elements: !432)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64)
!431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !39)
!432 = !{!433}
!433 = !DISubrange(count: 6)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "pps", scope: !89, file: !22, line: 433, baseType: !435, size: 64, offset: 26624)
!435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !408, size: 64)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "i_idr_pic_id", scope: !89, file: !22, line: 434, baseType: !50, size: 32, offset: 26688)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "i_dts_compress_multiplier", scope: !89, file: !22, line: 437, baseType: !50, size: 32, offset: 26720)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "dequant4_mf", scope: !89, file: !22, line: 440, baseType: !439, size: 256, offset: 26752)
!439 = !DICompositeType(tag: DW_TAG_array_type, baseType: !440, size: 256, elements: !42)
!440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !441, size: 64)
!441 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 512, elements: !140)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "dequant8_mf", scope: !89, file: !22, line: 441, baseType: !443, size: 128, offset: 27008)
!443 = !DICompositeType(tag: DW_TAG_array_type, baseType: !444, size: 128, elements: !35)
!444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !445, size: 64)
!445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 2048, elements: !147)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "unquant4_mf", scope: !89, file: !22, line: 443, baseType: !439, size: 256, offset: 27136)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "unquant8_mf", scope: !89, file: !22, line: 444, baseType: !443, size: 128, offset: 27392)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "quant4_mf", scope: !89, file: !22, line: 446, baseType: !449, size: 256, offset: 27520)
!449 = !DICompositeType(tag: DW_TAG_array_type, baseType: !450, size: 256, elements: !42)
!450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !451, size: 64)
!451 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 256, elements: !140)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "quant8_mf", scope: !89, file: !22, line: 447, baseType: !453, size: 128, offset: 27776)
!453 = !DICompositeType(tag: DW_TAG_array_type, baseType: !454, size: 128, elements: !35)
!454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !455, size: 64)
!455 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 1024, elements: !147)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "quant4_bias", scope: !89, file: !22, line: 448, baseType: !449, size: 256, offset: 27904)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "quant8_bias", scope: !89, file: !22, line: 449, baseType: !453, size: 128, offset: 28160)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "cost_mv", scope: !89, file: !22, line: 454, baseType: !459, size: 5888, offset: 28288)
!459 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 5888, elements: !461)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!461 = !{!462}
!462 = !DISubrange(count: 92)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "cost_mv_fpel", scope: !89, file: !22, line: 455, baseType: !464, size: 23552, offset: 34176)
!464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 23552, elements: !465)
!465 = !{!462, !43}
!466 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_qp_table", scope: !89, file: !22, line: 457, baseType: !430, size: 64, offset: 57728)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "sh", scope: !89, file: !22, line: 460, baseType: !468, size: 53376, offset: 57856)
!468 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_slice_header_t", file: !22, line: 364, baseType: !469)
!469 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !22, line: 302, size: 53376, elements: !470)
!470 = !{!471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !499, !524, !525, !526, !532, !533, !534, !535, !536, !537, !538, !539}
!471 = !DIDerivedType(tag: DW_TAG_member, name: "sps", scope: !469, file: !22, line: 304, baseType: !405, size: 64)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "pps", scope: !469, file: !22, line: 305, baseType: !435, size: 64, offset: 64)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "i_type", scope: !469, file: !22, line: 307, baseType: !50, size: 32, offset: 128)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "i_first_mb", scope: !469, file: !22, line: 308, baseType: !50, size: 32, offset: 160)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "i_last_mb", scope: !469, file: !22, line: 309, baseType: !50, size: 32, offset: 192)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "i_pps_id", scope: !469, file: !22, line: 311, baseType: !50, size: 32, offset: 224)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_num", scope: !469, file: !22, line: 313, baseType: !50, size: 32, offset: 256)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "b_mbaff", scope: !469, file: !22, line: 315, baseType: !50, size: 32, offset: 288)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "b_field_pic", scope: !469, file: !22, line: 316, baseType: !50, size: 32, offset: 320)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "b_bottom_field", scope: !469, file: !22, line: 317, baseType: !50, size: 32, offset: 352)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "i_idr_pic_id", scope: !469, file: !22, line: 319, baseType: !50, size: 32, offset: 384)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "i_poc", scope: !469, file: !22, line: 321, baseType: !50, size: 32, offset: 416)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "i_delta_poc_bottom", scope: !469, file: !22, line: 322, baseType: !50, size: 32, offset: 448)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "i_delta_poc", scope: !469, file: !22, line: 324, baseType: !194, size: 64, offset: 480)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "i_redundant_pic_cnt", scope: !469, file: !22, line: 325, baseType: !50, size: 32, offset: 544)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "b_direct_spatial_mv_pred", scope: !469, file: !22, line: 327, baseType: !50, size: 32, offset: 576)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "b_num_ref_idx_override", scope: !469, file: !22, line: 329, baseType: !50, size: 32, offset: 608)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_idx_l0_active", scope: !469, file: !22, line: 330, baseType: !50, size: 32, offset: 640)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "i_num_ref_idx_l1_active", scope: !469, file: !22, line: 331, baseType: !50, size: 32, offset: 672)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "b_ref_pic_list_reordering_l0", scope: !469, file: !22, line: 333, baseType: !50, size: 32, offset: 704)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "b_ref_pic_list_reordering_l1", scope: !469, file: !22, line: 334, baseType: !50, size: 32, offset: 736)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "ref_pic_list_order", scope: !469, file: !22, line: 339, baseType: !493, size: 2048, offset: 768)
!493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !494, size: 2048, elements: !498)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !469, file: !22, line: 335, size: 64, elements: !495)
!495 = !{!496, !497}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "idc", scope: !494, file: !22, line: 337, baseType: !50, size: 32)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !494, file: !22, line: 338, baseType: !50, size: 32, offset: 32)
!498 = !{!36, !141}
!499 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !469, file: !22, line: 342, baseType: !500, size: 49152, offset: 2816)
!500 = !DICompositeType(tag: DW_TAG_array_type, baseType: !501, size: 49152, elements: !521)
!501 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_weight_t", file: !502, line: 36, baseType: !503, align: 128)
!502 = !DIFile(filename: "x264_src/common/mc.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "x264_weight_t", file: !502, line: 26, size: 512, elements: !504)
!504 = !{!505, !507, !508, !511, !512, !513}
!505 = !DIDerivedType(tag: DW_TAG_member, name: "cachea", scope: !503, file: !502, line: 30, baseType: !506, size: 128, align: 128)
!506 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 128, elements: !71)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "cacheb", scope: !503, file: !502, line: 31, baseType: !506, size: 128, offset: 128)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "i_denom", scope: !503, file: !502, line: 32, baseType: !509, size: 32, offset: 256)
!509 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !54, line: 26, baseType: !510)
!510 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !29, line: 41, baseType: !50)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "i_scale", scope: !503, file: !502, line: 33, baseType: !509, size: 32, offset: 288)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "i_offset", scope: !503, file: !502, line: 34, baseType: !509, size: 32, offset: 320)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "weightfn", scope: !503, file: !502, line: 35, baseType: !514, size: 64, offset: 384)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !515, size: 64)
!515 = !DIDerivedType(tag: DW_TAG_typedef, name: "weight_fn_t", file: !502, line: 25, baseType: !516)
!516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !517, size: 64)
!517 = !DISubroutineType(types: !518)
!518 = !{null, !282, !50, !282, !50, !519, !50}
!519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !520, size: 64)
!520 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !503)
!521 = !{!522, !523}
!522 = !DISubrange(count: 32)
!523 = !DISubrange(count: 3)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmco_remove_from_end", scope: !469, file: !22, line: 344, baseType: !50, size: 32, offset: 51968)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmco_command_count", scope: !469, file: !22, line: 345, baseType: !50, size: 32, offset: 52000)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "mmco", scope: !469, file: !22, line: 350, baseType: !527, size: 1024, offset: 52032)
!527 = !DICompositeType(tag: DW_TAG_array_type, baseType: !528, size: 1024, elements: !140)
!528 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !469, file: !22, line: 346, size: 64, elements: !529)
!529 = !{!530, !531}
!530 = !DIDerivedType(tag: DW_TAG_member, name: "i_difference_of_pic_nums", scope: !528, file: !22, line: 348, baseType: !50, size: 32)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "i_poc", scope: !528, file: !22, line: 349, baseType: !50, size: 32, offset: 32)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "i_cabac_init_idc", scope: !469, file: !22, line: 352, baseType: !50, size: 32, offset: 53056)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp", scope: !469, file: !22, line: 354, baseType: !50, size: 32, offset: 53088)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp_delta", scope: !469, file: !22, line: 355, baseType: !50, size: 32, offset: 53120)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "b_sp_for_swidth", scope: !469, file: !22, line: 356, baseType: !50, size: 32, offset: 53152)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "i_qs_delta", scope: !469, file: !22, line: 357, baseType: !50, size: 32, offset: 53184)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "i_disable_deblocking_filter_idc", scope: !469, file: !22, line: 360, baseType: !50, size: 32, offset: 53216)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "i_alpha_c0_offset", scope: !469, file: !22, line: 361, baseType: !50, size: 32, offset: 53248)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "i_beta_offset", scope: !469, file: !22, line: 362, baseType: !50, size: 32, offset: 53280)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "cabac", scope: !89, file: !22, line: 463, baseType: !541, size: 4096, offset: 111232)
!541 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_cabac_t", file: !542, line: 46, baseType: !543)
!542 = !DIFile(filename: "x264_src/common/cabac.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!543 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !542, line: 27, size: 4096, elements: !544)
!544 = !{!545, !546, !547, !548, !549, !550, !551, !552, !553}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "i_low", scope: !543, file: !542, line: 30, baseType: !50, size: 32)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "i_range", scope: !543, file: !542, line: 31, baseType: !50, size: 32, offset: 32)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "i_queue", scope: !543, file: !542, line: 34, baseType: !50, size: 32, offset: 64)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "i_bytes_outstanding", scope: !543, file: !542, line: 35, baseType: !50, size: 32, offset: 96)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "p_start", scope: !543, file: !542, line: 37, baseType: !282, size: 64, offset: 128)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !543, file: !542, line: 38, baseType: !282, size: 64, offset: 192)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "p_end", scope: !543, file: !542, line: 39, baseType: !282, size: 64, offset: 256)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "f8_bits_encoded", scope: !543, file: !542, line: 42, baseType: !50, size: 32, align: 128, offset: 384)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !543, file: !542, line: 45, baseType: !554, size: 3680, offset: 416)
!554 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 3680, elements: !555)
!555 = !{!556}
!556 = !DISubrange(count: 460)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "frames", scope: !89, file: !22, line: 494, baseType: !558, size: 2112, offset: 115328)
!558 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !89, file: !22, line: 465, size: 2112, elements: !559)
!559 = !{!560, !697, !699, !700, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !713, !714, !715, !716}
!560 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !558, file: !22, line: 468, baseType: !561, size: 64)
!561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !562, size: 64)
!562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64)
!563 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_frame_t", file: !564, line: 146, baseType: !565)
!564 = !DIFile(filename: "x264_src/common/frame.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "x264_frame", file: !564, line: 31, size: 125056, elements: !566)
!566 = !{!567, !568, !569, !570, !573, !574, !575, !576, !577, !578, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !597, !598, !599, !600, !601, !602, !604, !606, !607, !608, !609, !610, !613, !615, !616, !618, !623, !624, !627, !628, !632, !636, !639, !641, !642, !644, !645, !647, !648, !649, !652, !654, !655, !656, !658, !659, !660, !661, !662, !663, !664, !665, !667, !668, !669, !678, !682, !684, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "i_poc", scope: !565, file: !564, line: 34, baseType: !50, size: 32)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "i_type", scope: !565, file: !564, line: 35, baseType: !50, size: 32, offset: 32)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "i_qpplus1", scope: !565, file: !564, line: 36, baseType: !50, size: 32, offset: 64)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "i_pts", scope: !565, file: !564, line: 37, baseType: !571, size: 64, offset: 128)
!571 = !DIDerivedType(tag: DW_TAG_typedef, name: "int64_t", file: !54, line: 27, baseType: !572)
!572 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int64_t", file: !29, line: 44, baseType: !296)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "i_reordered_pts", scope: !565, file: !564, line: 38, baseType: !571, size: 64, offset: 192)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "i_duration", scope: !565, file: !564, line: 39, baseType: !50, size: 32, offset: 256)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_duration", scope: !565, file: !564, line: 40, baseType: !50, size: 32, offset: 288)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_delay", scope: !565, file: !564, line: 41, baseType: !50, size: 32, offset: 320)
!577 = !DIDerivedType(tag: DW_TAG_member, name: "i_dpb_output_delay", scope: !565, file: !564, line: 42, baseType: !50, size: 32, offset: 352)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "param", scope: !565, file: !564, line: 43, baseType: !579, size: 64, offset: 384)
!579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !92, size: 64)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame", scope: !565, file: !564, line: 45, baseType: !50, size: 32, offset: 448)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "i_coded", scope: !565, file: !564, line: 46, baseType: !50, size: 32, offset: 480)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "i_field_cnt", scope: !565, file: !564, line: 47, baseType: !50, size: 32, offset: 512)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_num", scope: !565, file: !564, line: 48, baseType: !50, size: 32, offset: 544)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "b_kept_as_ref", scope: !565, file: !564, line: 49, baseType: !50, size: 32, offset: 576)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "i_pic_struct", scope: !565, file: !564, line: 50, baseType: !50, size: 32, offset: 608)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "b_keyframe", scope: !565, file: !564, line: 51, baseType: !50, size: 32, offset: 640)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "b_fdec", scope: !565, file: !564, line: 52, baseType: !39, size: 8, offset: 672)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "b_last_minigop_bframe", scope: !565, file: !564, line: 53, baseType: !39, size: 8, offset: 680)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframes", scope: !565, file: !564, line: 54, baseType: !39, size: 8, offset: 688)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "f_qp_avg_rc", scope: !565, file: !564, line: 55, baseType: !190, size: 32, offset: 704)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "f_qp_avg_aq", scope: !565, file: !564, line: 56, baseType: !190, size: 32, offset: 736)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "i_poc_l0ref0", scope: !565, file: !564, line: 57, baseType: !50, size: 32, offset: 768)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "i_plane", scope: !565, file: !564, line: 60, baseType: !50, size: 32, offset: 800)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "i_stride", scope: !565, file: !564, line: 61, baseType: !595, size: 96, offset: 832)
!595 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 96, elements: !596)
!596 = !{!523}
!597 = !DIDerivedType(tag: DW_TAG_member, name: "i_width", scope: !565, file: !564, line: 62, baseType: !595, size: 96, offset: 928)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "i_lines", scope: !565, file: !564, line: 63, baseType: !595, size: 96, offset: 1024)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "i_stride_lowres", scope: !565, file: !564, line: 64, baseType: !50, size: 32, offset: 1120)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "i_width_lowres", scope: !565, file: !564, line: 65, baseType: !50, size: 32, offset: 1152)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "i_lines_lowres", scope: !565, file: !564, line: 66, baseType: !50, size: 32, offset: 1184)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "plane", scope: !565, file: !564, line: 67, baseType: !603, size: 192, offset: 1216)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 192, elements: !596)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "filtered", scope: !565, file: !564, line: 68, baseType: !605, size: 256, offset: 1408)
!605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 256, elements: !42)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "lowres", scope: !565, file: !564, line: 69, baseType: !605, size: 256, offset: 1664)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "integral", scope: !565, file: !564, line: 70, baseType: !460, size: 64, offset: 1920)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "buffer", scope: !565, file: !564, line: 74, baseType: !605, size: 256, offset: 1984)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "buffer_lowres", scope: !565, file: !564, line: 75, baseType: !605, size: 256, offset: 2240)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !565, file: !564, line: 77, baseType: !611, size: 24576, offset: 2560)
!611 = !DICompositeType(tag: DW_TAG_array_type, baseType: !501, size: 24576, elements: !612)
!612 = !{!141, !523}
!613 = !DIDerivedType(tag: DW_TAG_member, name: "weighted", scope: !565, file: !564, line: 78, baseType: !614, size: 1024, offset: 27136)
!614 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 1024, elements: !140)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "b_duplicate", scope: !565, file: !564, line: 79, baseType: !50, size: 32, offset: 28160)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "orig", scope: !565, file: !564, line: 80, baseType: !617, size: 64, offset: 28224)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !565, size: 64)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "mb_type", scope: !565, file: !564, line: 83, baseType: !619, size: 64, offset: 28288)
!619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !620, size: 64)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "int8_t", file: !54, line: 24, baseType: !621)
!621 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int8_t", file: !29, line: 37, baseType: !622)
!622 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "mb_partition", scope: !565, file: !564, line: 84, baseType: !282, size: 64, offset: 28352)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "mv", scope: !565, file: !564, line: 85, baseType: !625, size: 128, offset: 28416)
!625 = !DICompositeType(tag: DW_TAG_array_type, baseType: !626, size: 128, elements: !35)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "mv16x16", scope: !565, file: !564, line: 86, baseType: !626, size: 64, offset: 28544)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "lowres_mvs", scope: !565, file: !564, line: 87, baseType: !629, size: 2176, offset: 28608)
!629 = !DICompositeType(tag: DW_TAG_array_type, baseType: !626, size: 2176, elements: !630)
!630 = !{!36, !631}
!631 = !DISubrange(count: 17)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "lowres_costs", scope: !565, file: !564, line: 92, baseType: !633, size: 20736, offset: 30784)
!633 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 20736, elements: !634)
!634 = !{!635, !635}
!635 = !DISubrange(count: 18)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "lowres_mv_costs", scope: !565, file: !564, line: 96, baseType: !637, size: 2176, offset: 51520)
!637 = !DICompositeType(tag: DW_TAG_array_type, baseType: !638, size: 2176, elements: !630)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!639 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !565, file: !564, line: 97, baseType: !640, size: 128, offset: 53696)
!640 = !DICompositeType(tag: DW_TAG_array_type, baseType: !619, size: 128, elements: !35)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref", scope: !565, file: !564, line: 98, baseType: !194, size: 64, offset: 53824)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "ref_poc", scope: !565, file: !564, line: 99, baseType: !643, size: 1024, offset: 53888)
!643 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 1024, elements: !498)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "inv_ref_poc", scope: !565, file: !564, line: 100, baseType: !52, size: 32, offset: 54912)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "i_cost_est", scope: !565, file: !564, line: 105, baseType: !646, size: 10368, offset: 54944)
!646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 10368, elements: !634)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "i_cost_est_aq", scope: !565, file: !564, line: 106, baseType: !646, size: 10368, offset: 65312)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "i_satd", scope: !565, file: !564, line: 107, baseType: !50, size: 32, offset: 75680)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "i_intra_mbs", scope: !565, file: !564, line: 108, baseType: !650, size: 576, offset: 75712)
!650 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 576, elements: !651)
!651 = !{!635}
!652 = !DIDerivedType(tag: DW_TAG_member, name: "i_row_satds", scope: !565, file: !564, line: 109, baseType: !653, size: 20736, offset: 76288)
!653 = !DICompositeType(tag: DW_TAG_array_type, baseType: !638, size: 20736, elements: !634)
!654 = !DIDerivedType(tag: DW_TAG_member, name: "i_row_satd", scope: !565, file: !564, line: 110, baseType: !638, size: 64, offset: 97024)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "i_row_bits", scope: !565, file: !564, line: 111, baseType: !638, size: 64, offset: 97088)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "f_row_qp", scope: !565, file: !564, line: 112, baseType: !657, size: 64, offset: 97152)
!657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !190, size: 64)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "f_qp_offset", scope: !565, file: !564, line: 113, baseType: !657, size: 64, offset: 97216)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "f_qp_offset_aq", scope: !565, file: !564, line: 114, baseType: !657, size: 64, offset: 97280)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "b_intra_calculated", scope: !565, file: !564, line: 115, baseType: !50, size: 32, offset: 97344)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "i_intra_cost", scope: !565, file: !564, line: 116, baseType: !460, size: 64, offset: 97408)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "i_propagate_cost", scope: !565, file: !564, line: 117, baseType: !460, size: 64, offset: 97472)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "i_inv_qscale_factor", scope: !565, file: !564, line: 118, baseType: !460, size: 64, offset: 97536)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "b_scenecut", scope: !565, file: !564, line: 119, baseType: !50, size: 32, offset: 97600)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "f_weighted_cost_delta", scope: !565, file: !564, line: 120, baseType: !666, size: 576, offset: 97632)
!666 = !DICompositeType(tag: DW_TAG_array_type, baseType: !190, size: 576, elements: !651)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "i_pixel_sum", scope: !565, file: !564, line: 121, baseType: !26, size: 32, offset: 98208)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "i_pixel_ssd", scope: !565, file: !564, line: 122, baseType: !62, size: 64, offset: 98240)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "hrd_timing", scope: !565, file: !564, line: 125, baseType: !670, size: 256, offset: 98304)
!670 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_hrd_t", file: !88, line: 503, baseType: !671)
!671 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !88, line: 496, size: 256, elements: !672)
!672 = !{!673, !675, !676, !677}
!673 = !DIDerivedType(tag: DW_TAG_member, name: "cpb_initial_arrival_time", scope: !671, file: !88, line: 498, baseType: !674, size: 64)
!674 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "cpb_final_arrival_time", scope: !671, file: !88, line: 499, baseType: !674, size: 64, offset: 64)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "cpb_removal_time", scope: !671, file: !88, line: 500, baseType: !674, size: 64, offset: 128)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "dpb_output_time", scope: !671, file: !88, line: 502, baseType: !674, size: 64, offset: 192)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "i_planned_type", scope: !565, file: !564, line: 128, baseType: !679, size: 2008, offset: 98560)
!679 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 2008, elements: !680)
!680 = !{!681}
!681 = !DISubrange(count: 251)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "i_planned_satd", scope: !565, file: !564, line: 129, baseType: !683, size: 8032, offset: 100576)
!683 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 8032, elements: !680)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "f_planned_cpb_duration", scope: !565, file: !564, line: 130, baseType: !685, size: 16064, offset: 108608)
!685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !674, size: 16064, elements: !680)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "i_coded_fields_lookahead", scope: !565, file: !564, line: 131, baseType: !50, size: 32, offset: 124672)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "i_cpb_delay_lookahead", scope: !565, file: !564, line: 132, baseType: !50, size: 32, offset: 124704)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "i_lines_completed", scope: !565, file: !564, line: 135, baseType: !50, size: 32, offset: 124736)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "i_lines_weighted", scope: !565, file: !564, line: 136, baseType: !50, size: 32, offset: 124768)
!690 = !DIDerivedType(tag: DW_TAG_member, name: "i_reference_count", scope: !565, file: !564, line: 137, baseType: !50, size: 32, offset: 124800)
!691 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !565, file: !564, line: 138, baseType: !50, size: 32, offset: 124832)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "cv", scope: !565, file: !564, line: 139, baseType: !50, size: 32, offset: 124864)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "f_pir_position", scope: !565, file: !564, line: 142, baseType: !190, size: 32, offset: 124896)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "i_pir_start_col", scope: !565, file: !564, line: 143, baseType: !50, size: 32, offset: 124928)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "i_pir_end_col", scope: !565, file: !564, line: 144, baseType: !50, size: 32, offset: 124960)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "i_frames_since_pir", scope: !565, file: !564, line: 145, baseType: !50, size: 32, offset: 124992)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "unused", scope: !558, file: !22, line: 470, baseType: !698, size: 128, offset: 64)
!698 = !DICompositeType(tag: DW_TAG_array_type, baseType: !561, size: 128, elements: !35)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "blank_unused", scope: !558, file: !22, line: 473, baseType: !561, size: 64, offset: 192)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "reference", scope: !558, file: !22, line: 476, baseType: !701, size: 1152, offset: 256)
!701 = !DICompositeType(tag: DW_TAG_array_type, baseType: !562, size: 1152, elements: !651)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "i_last_keyframe", scope: !558, file: !22, line: 478, baseType: !50, size: 32, offset: 1408)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "i_input", scope: !558, file: !22, line: 480, baseType: !50, size: 32, offset: 1440)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_dpb", scope: !558, file: !22, line: 482, baseType: !50, size: 32, offset: 1472)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_ref0", scope: !558, file: !22, line: 483, baseType: !50, size: 32, offset: 1504)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_ref1", scope: !558, file: !22, line: 484, baseType: !50, size: 32, offset: 1536)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "i_delay", scope: !558, file: !22, line: 485, baseType: !50, size: 32, offset: 1568)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe_delay", scope: !558, file: !22, line: 486, baseType: !50, size: 32, offset: 1600)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "i_bframe_delay_time", scope: !558, file: !22, line: 487, baseType: !571, size: 64, offset: 1664)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "i_init_delta", scope: !558, file: !22, line: 488, baseType: !571, size: 64, offset: 1728)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "i_prev_reordered_pts", scope: !558, file: !22, line: 489, baseType: !712, size: 128, offset: 1792)
!712 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 128, elements: !35)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "i_largest_pts", scope: !558, file: !22, line: 490, baseType: !571, size: 64, offset: 1920)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "i_second_largest_pts", scope: !558, file: !22, line: 491, baseType: !571, size: 64, offset: 1984)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "b_have_lowres", scope: !558, file: !22, line: 492, baseType: !50, size: 32, offset: 2048)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "b_have_sub8x8_esa", scope: !558, file: !22, line: 493, baseType: !50, size: 32, offset: 2080)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "fenc", scope: !89, file: !22, line: 497, baseType: !562, size: 64, offset: 117440)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "fdec", scope: !89, file: !22, line: 500, baseType: !562, size: 64, offset: 117504)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref0", scope: !89, file: !22, line: 503, baseType: !50, size: 32, offset: 117568)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "fref0", scope: !89, file: !22, line: 504, baseType: !721, size: 1216, offset: 117632)
!721 = !DICompositeType(tag: DW_TAG_array_type, baseType: !562, size: 1216, elements: !722)
!722 = !{!723}
!723 = !DISubrange(count: 19)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref1", scope: !89, file: !22, line: 505, baseType: !50, size: 32, offset: 118848)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "fref1", scope: !89, file: !22, line: 506, baseType: !721, size: 1216, offset: 118912)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "b_ref_reorder", scope: !89, file: !22, line: 507, baseType: !194, size: 64, offset: 120128)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "initial_cpb_removal_delay", scope: !89, file: !22, line: 510, baseType: !50, size: 32, offset: 120192)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "initial_cpb_removal_delay_offset", scope: !89, file: !22, line: 511, baseType: !50, size: 32, offset: 120224)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "i_reordered_pts_delay", scope: !89, file: !22, line: 512, baseType: !571, size: 64, offset: 120256)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "dct", scope: !89, file: !22, line: 522, baseType: !731, size: 10624, offset: 120320)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !89, file: !22, line: 515, size: 10624, elements: !732)
!732 = !{!733, !735, !738, !741}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "luma16x16_dc", scope: !731, file: !22, line: 517, baseType: !734, size: 256, align: 128)
!734 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 256, elements: !140)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_dc", scope: !731, file: !22, line: 518, baseType: !736, size: 128, align: 128, offset: 256)
!736 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 128, elements: !737)
!737 = !{!36, !43}
!738 = !DIDerivedType(tag: DW_TAG_member, name: "luma8x8", scope: !731, file: !22, line: 520, baseType: !739, size: 4096, align: 128, offset: 384)
!739 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 4096, elements: !740)
!740 = !{!43, !148}
!741 = !DIDerivedType(tag: DW_TAG_member, name: "luma4x4", scope: !731, file: !22, line: 521, baseType: !742, size: 6144, align: 128, offset: 4480)
!742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 6144, elements: !743)
!743 = !{!744, !141}
!744 = !DISubrange(count: 24)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "mb", scope: !89, file: !22, line: 732, baseType: !746, size: 82688, offset: 130944)
!746 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !89, file: !22, line: 525, size: 82688, elements: !747)
!747 = !{!748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !775, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !793, !796, !800, !801, !802, !807, !808, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !876, !907, !908, !909, !910, !911, !912, !913, !914, !915, !918, !919, !920, !923, !926, !928, !931, !933, !934}
!748 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count", scope: !746, file: !22, line: 527, baseType: !50, size: 32)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_stride", scope: !746, file: !22, line: 530, baseType: !50, size: 32, offset: 32)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "i_b8_stride", scope: !746, file: !22, line: 531, baseType: !50, size: 32, offset: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "i_b4_stride", scope: !746, file: !22, line: 532, baseType: !50, size: 32, offset: 96)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_x", scope: !746, file: !22, line: 535, baseType: !50, size: 32, offset: 128)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_y", scope: !746, file: !22, line: 536, baseType: !50, size: 32, offset: 160)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_xy", scope: !746, file: !22, line: 537, baseType: !50, size: 32, offset: 192)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "i_b8_xy", scope: !746, file: !22, line: 538, baseType: !50, size: 32, offset: 224)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "i_b4_xy", scope: !746, file: !22, line: 539, baseType: !50, size: 32, offset: 256)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "i_me_method", scope: !746, file: !22, line: 542, baseType: !50, size: 32, offset: 288)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "i_subpel_refine", scope: !746, file: !22, line: 543, baseType: !50, size: 32, offset: 320)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "b_chroma_me", scope: !746, file: !22, line: 544, baseType: !50, size: 32, offset: 352)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "b_trellis", scope: !746, file: !22, line: 545, baseType: !50, size: 32, offset: 384)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "b_noise_reduction", scope: !746, file: !22, line: 546, baseType: !50, size: 32, offset: 416)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "b_dct_decimate", scope: !746, file: !22, line: 547, baseType: !50, size: 32, offset: 448)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "i_psy_rd", scope: !746, file: !22, line: 548, baseType: !50, size: 32, offset: 480)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "i_psy_trellis", scope: !746, file: !22, line: 549, baseType: !50, size: 32, offset: 512)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "b_interlaced", scope: !746, file: !22, line: 551, baseType: !50, size: 32, offset: 544)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "mv_min", scope: !746, file: !22, line: 554, baseType: !194, size: 64, offset: 576)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "mv_max", scope: !746, file: !22, line: 555, baseType: !194, size: 64, offset: 640)
!768 = !DIDerivedType(tag: DW_TAG_member, name: "mv_min_spel", scope: !746, file: !22, line: 558, baseType: !194, size: 64, offset: 704)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "mv_max_spel", scope: !746, file: !22, line: 559, baseType: !194, size: 64, offset: 768)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "mv_min_fpel", scope: !746, file: !22, line: 561, baseType: !194, size: 64, offset: 832)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "mv_max_fpel", scope: !746, file: !22, line: 562, baseType: !194, size: 64, offset: 896)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour", scope: !746, file: !22, line: 565, baseType: !7, size: 32, offset: 960)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour8", scope: !746, file: !22, line: 566, baseType: !774, size: 128, offset: 992)
!774 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 128, elements: !42)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour4", scope: !746, file: !22, line: 567, baseType: !776, size: 512, offset: 1120)
!776 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 512, elements: !140)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour_intra", scope: !746, file: !22, line: 568, baseType: !7, size: 32, offset: 1632)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour_frame", scope: !746, file: !22, line: 569, baseType: !7, size: 32, offset: 1664)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_type_top", scope: !746, file: !22, line: 570, baseType: !50, size: 32, offset: 1696)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_type_left", scope: !746, file: !22, line: 571, baseType: !50, size: 32, offset: 1728)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_type_topleft", scope: !746, file: !22, line: 572, baseType: !50, size: 32, offset: 1760)
!782 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_type_topright", scope: !746, file: !22, line: 573, baseType: !50, size: 32, offset: 1792)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_prev_xy", scope: !746, file: !22, line: 574, baseType: !50, size: 32, offset: 1824)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_left_xy", scope: !746, file: !22, line: 575, baseType: !50, size: 32, offset: 1856)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_top_xy", scope: !746, file: !22, line: 576, baseType: !50, size: 32, offset: 1888)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_topleft_xy", scope: !746, file: !22, line: 577, baseType: !50, size: 32, offset: 1920)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_topright_xy", scope: !746, file: !22, line: 578, baseType: !50, size: 32, offset: 1952)
!788 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !746, file: !22, line: 585, baseType: !619, size: 64, offset: 1984)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "partition", scope: !746, file: !22, line: 586, baseType: !282, size: 64, offset: 2048)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "qp", scope: !746, file: !22, line: 587, baseType: !619, size: 64, offset: 2112)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "cbp", scope: !746, file: !22, line: 588, baseType: !792, size: 64, offset: 2176)
!792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "intra4x4_pred_mode", scope: !746, file: !22, line: 589, baseType: !794, size: 64, offset: 2240)
!794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !795, size: 64)
!795 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 64, elements: !71)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "non_zero_count", scope: !746, file: !22, line: 591, baseType: !797, size: 64, offset: 2304)
!797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !798, size: 64)
!798 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 192, elements: !799)
!799 = !{!744}
!800 = !DIDerivedType(tag: DW_TAG_member, name: "chroma_pred_mode", scope: !746, file: !22, line: 592, baseType: !619, size: 64, offset: 2368)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "mv", scope: !746, file: !22, line: 593, baseType: !625, size: 128, offset: 2432)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "mvd", scope: !746, file: !22, line: 594, baseType: !803, size: 128, offset: 2560)
!803 = !DICompositeType(tag: DW_TAG_array_type, baseType: !804, size: 128, elements: !35)
!804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !805, size: 64)
!805 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 128, elements: !806)
!806 = !{!72, !36}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !746, file: !22, line: 595, baseType: !640, size: 128, offset: 2688)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "mvr", scope: !746, file: !22, line: 596, baseType: !809, size: 4096, offset: 2816)
!809 = !DICompositeType(tag: DW_TAG_array_type, baseType: !626, size: 4096, elements: !810)
!810 = !{!36, !522}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "skipbp", scope: !746, file: !22, line: 597, baseType: !619, size: 64, offset: 6912)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "mb_transform_size", scope: !746, file: !22, line: 598, baseType: !619, size: 64, offset: 6976)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "slice_table", scope: !746, file: !22, line: 599, baseType: !460, size: 64, offset: 7040)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "p_weight_buf", scope: !746, file: !22, line: 603, baseType: !614, size: 1024, offset: 7104)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "i_type", scope: !746, file: !22, line: 606, baseType: !50, size: 32, offset: 8128)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "i_partition", scope: !746, file: !22, line: 607, baseType: !50, size: 32, offset: 8160)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "i_sub_partition", scope: !746, file: !22, line: 608, baseType: !38, size: 32, align: 32, offset: 8192)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "b_transform_8x8", scope: !746, file: !22, line: 609, baseType: !50, size: 32, offset: 8224)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "i_cbp_luma", scope: !746, file: !22, line: 611, baseType: !50, size: 32, offset: 8256)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "i_cbp_chroma", scope: !746, file: !22, line: 612, baseType: !50, size: 32, offset: 8288)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "i_intra16x16_pred_mode", scope: !746, file: !22, line: 614, baseType: !50, size: 32, offset: 8320)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_pred_mode", scope: !746, file: !22, line: 615, baseType: !50, size: 32, offset: 8352)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "i_skip_intra", scope: !746, file: !22, line: 621, baseType: !50, size: 32, offset: 8384)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "b_skip_mc", scope: !746, file: !22, line: 624, baseType: !50, size: 32, offset: 8416)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "b_reencode_mb", scope: !746, file: !22, line: 626, baseType: !50, size: 32, offset: 8448)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "ip_offset", scope: !746, file: !22, line: 627, baseType: !50, size: 32, offset: 8480)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "pic", scope: !746, file: !22, line: 671, baseType: !828, size: 60672, offset: 8576)
!828 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !746, file: !22, line: 629, size: 60672, elements: !829)
!829 = !{!830, !834, !838, !840, !841, !844, !848, !850, !851, !852, !853, !854, !857, !861, !864, !865, !866, !867, !868, !871, !873, !875}
!830 = !DIDerivedType(tag: DW_TAG_member, name: "fenc_buf", scope: !828, file: !22, line: 634, baseType: !831, size: 3072, align: 128)
!831 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 3072, elements: !832)
!832 = !{!833}
!833 = !DISubrange(count: 384)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "fdec_buf", scope: !828, file: !22, line: 635, baseType: !835, size: 6912, align: 128, offset: 3072)
!835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 6912, elements: !836)
!836 = !{!837}
!837 = !DISubrange(count: 864)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "i4x4_fdec_buf", scope: !828, file: !22, line: 638, baseType: !839, size: 2048, align: 128, offset: 9984)
!839 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 2048, elements: !335)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "i8x8_fdec_buf", scope: !828, file: !22, line: 639, baseType: !839, size: 2048, align: 128, offset: 12032)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "i8x8_dct_buf", scope: !828, file: !22, line: 640, baseType: !842, size: 3072, align: 128, offset: 14080)
!842 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 3072, elements: !843)
!843 = !{!523, !148}
!844 = !DIDerivedType(tag: DW_TAG_member, name: "i4x4_dct_buf", scope: !828, file: !22, line: 641, baseType: !845, size: 3840, align: 128, offset: 17152)
!845 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 3840, elements: !846)
!846 = !{!847, !141}
!847 = !DISubrange(count: 15)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "i4x4_nnz_buf", scope: !828, file: !22, line: 642, baseType: !849, size: 128, offset: 20992)
!849 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 128, elements: !42)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "i8x8_nnz_buf", scope: !828, file: !22, line: 643, baseType: !849, size: 128, offset: 21120)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "i4x4_cbp", scope: !828, file: !22, line: 644, baseType: !50, size: 32, offset: 21248)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "i8x8_cbp", scope: !828, file: !22, line: 645, baseType: !50, size: 32, offset: 21280)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "fenc_dct8", scope: !828, file: !22, line: 648, baseType: !739, size: 4096, align: 128, offset: 21376)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "fenc_dct4", scope: !828, file: !22, line: 649, baseType: !855, size: 4096, align: 128, offset: 25472)
!855 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 4096, elements: !856)
!856 = !{!141, !141}
!857 = !DIDerivedType(tag: DW_TAG_member, name: "fenc_hadamard_cache", scope: !828, file: !22, line: 652, baseType: !858, size: 576, align: 128, offset: 29568)
!858 = !DICompositeType(tag: DW_TAG_array_type, baseType: !62, size: 576, elements: !859)
!859 = !{!860}
!860 = !DISubrange(count: 9)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "fenc_satd_cache", scope: !828, file: !22, line: 653, baseType: !862, size: 1024, align: 128, offset: 30208)
!862 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 1024, elements: !863)
!863 = !{!522}
!864 = !DIDerivedType(tag: DW_TAG_member, name: "p_fenc", scope: !828, file: !22, line: 656, baseType: !603, size: 192, offset: 31232)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "p_fenc_plane", scope: !828, file: !22, line: 658, baseType: !603, size: 192, offset: 31424)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "p_fdec", scope: !828, file: !22, line: 661, baseType: !603, size: 192, offset: 31616)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "i_fref", scope: !828, file: !22, line: 664, baseType: !194, size: 64, offset: 31808)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "p_fref", scope: !828, file: !22, line: 665, baseType: !869, size: 24576, offset: 31872)
!869 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 24576, elements: !870)
!870 = !{!36, !522, !433}
!871 = !DIDerivedType(tag: DW_TAG_member, name: "p_fref_w", scope: !828, file: !22, line: 666, baseType: !872, size: 2048, offset: 56448)
!872 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 2048, elements: !863)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "p_integral", scope: !828, file: !22, line: 667, baseType: !874, size: 2048, offset: 58496)
!874 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 2048, elements: !498)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "i_stride", scope: !828, file: !22, line: 670, baseType: !595, size: 96, offset: 60544)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !746, file: !22, line: 704, baseType: !877, size: 6144, offset: 69248)
!877 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !746, file: !22, line: 674, size: 6144, elements: !878)
!878 = !{!879, !883, !887, !890, !893, !895, !896, !899, !901, !902, !903, !904, !905, !906}
!879 = !DIDerivedType(tag: DW_TAG_member, name: "intra4x4_pred_mode", scope: !877, file: !22, line: 677, baseType: !880, size: 320, align: 64)
!880 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 320, elements: !881)
!881 = !{!882}
!882 = !DISubrange(count: 40)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "non_zero_count", scope: !877, file: !22, line: 680, baseType: !884, size: 384, align: 128, offset: 384)
!884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 384, elements: !885)
!885 = !{!886}
!886 = !DISubrange(count: 48)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !877, file: !22, line: 683, baseType: !888, size: 640, align: 32, offset: 768)
!888 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 640, elements: !889)
!889 = !{!36, !882}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "mv", scope: !877, file: !22, line: 686, baseType: !891, size: 2560, align: 128, offset: 1408)
!891 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 2560, elements: !892)
!892 = !{!36, !882, !36}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "mvd", scope: !877, file: !22, line: 687, baseType: !894, size: 1280, align: 64, offset: 3968)
!894 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 1280, elements: !892)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "skip", scope: !877, file: !22, line: 690, baseType: !880, size: 320, align: 32, offset: 5248)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "direct_mv", scope: !877, file: !22, line: 692, baseType: !897, size: 256, align: 32, offset: 5568)
!897 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 256, elements: !898)
!898 = !{!36, !43, !36}
!899 = !DIDerivedType(tag: DW_TAG_member, name: "direct_ref", scope: !877, file: !22, line: 693, baseType: !900, size: 64, align: 32, offset: 5824)
!900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 64, elements: !737)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "direct_partition", scope: !877, file: !22, line: 694, baseType: !50, size: 32, offset: 5888)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "pskip_mv", scope: !877, file: !22, line: 695, baseType: !52, size: 32, align: 32, offset: 5920)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour_transform_size", scope: !877, file: !22, line: 698, baseType: !50, size: 32, offset: 5952)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "i_neighbour_interlaced", scope: !877, file: !22, line: 699, baseType: !50, size: 32, offset: 5984)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "i_cbp_top", scope: !877, file: !22, line: 702, baseType: !50, size: 32, offset: 6016)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "i_cbp_left", scope: !877, file: !22, line: 703, baseType: !50, size: 32, offset: 6048)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "i_qp", scope: !746, file: !22, line: 707, baseType: !50, size: 32, offset: 75392)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_qp", scope: !746, file: !22, line: 708, baseType: !50, size: 32, offset: 75424)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "i_last_qp", scope: !746, file: !22, line: 709, baseType: !50, size: 32, offset: 75456)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "i_last_dqp", scope: !746, file: !22, line: 710, baseType: !50, size: 32, offset: 75488)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "b_variable_qp", scope: !746, file: !22, line: 711, baseType: !50, size: 32, offset: 75520)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "b_lossless", scope: !746, file: !22, line: 712, baseType: !50, size: 32, offset: 75552)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "b_direct_auto_read", scope: !746, file: !22, line: 713, baseType: !50, size: 32, offset: 75584)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "b_direct_auto_write", scope: !746, file: !22, line: 714, baseType: !50, size: 32, offset: 75616)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "i_trellis_lambda2", scope: !746, file: !22, line: 717, baseType: !916, size: 128, offset: 75648)
!916 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 128, elements: !917)
!917 = !{!36, !36}
!918 = !DIDerivedType(tag: DW_TAG_member, name: "i_psy_rd_lambda", scope: !746, file: !22, line: 718, baseType: !50, size: 32, offset: 75776)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "i_chroma_lambda2_offset", scope: !746, file: !22, line: 719, baseType: !50, size: 32, offset: 75808)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "dist_scale_factor_buf", scope: !746, file: !22, line: 722, baseType: !921, size: 4096, offset: 75840)
!921 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 4096, elements: !922)
!922 = !{!36, !522, !43}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "dist_scale_factor", scope: !746, file: !22, line: 723, baseType: !924, size: 64, offset: 79936)
!924 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !925, size: 64)
!925 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 64, elements: !42)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "bipred_weight_buf", scope: !746, file: !22, line: 724, baseType: !927, size: 2048, offset: 80000)
!927 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 2048, elements: !922)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "bipred_weight", scope: !746, file: !22, line: 725, baseType: !929, size: 64, offset: 82048)
!929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !930, size: 64)
!930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 32, elements: !42)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "map_col_to_list0", scope: !746, file: !22, line: 728, baseType: !932, size: 144, offset: 82112)
!932 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 144, elements: !651)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ref_blind_dupe", scope: !746, file: !22, line: 729, baseType: !50, size: 32, offset: 82272)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_ref_table", scope: !746, file: !22, line: 730, baseType: !935, size: 272, offset: 82304)
!935 = !DICompositeType(tag: DW_TAG_array_type, baseType: !620, size: 272, elements: !936)
!936 = !{!937}
!937 = !DISubrange(count: 34)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "rc", scope: !89, file: !22, line: 735, baseType: !939, size: 64, offset: 213632)
!939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !940, size: 64)
!940 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_ratecontrol_t", file: !22, line: 379, baseType: !941)
!941 = !DICompositeType(tag: DW_TAG_structure_type, name: "x264_ratecontrol_t", file: !22, line: 379, flags: DIFlagFwdDecl)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "stat", scope: !89, file: !22, line: 793, baseType: !943, size: 29504, offset: 213696)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !89, file: !22, line: 738, size: 29504, elements: !944)
!944 = !{!945, !972, !976, !978, !980, !981, !982, !983, !984, !985, !986, !987, !990, !992, !993, !996, !998, !1000, !1001, !1002}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "frame", scope: !943, file: !22, line: 764, baseType: !946, size: 5632)
!946 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !943, file: !22, line: 741, size: 5632, elements: !947)
!947 = !{!948, !949, !950, !951, !953, !954, !955, !956, !957, !959, !962, !964, !968, !969, !971}
!948 = !DIDerivedType(tag: DW_TAG_member, name: "i_mv_bits", scope: !946, file: !22, line: 744, baseType: !50, size: 32)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "i_tex_bits", scope: !946, file: !22, line: 746, baseType: !50, size: 32, offset: 32)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "i_misc_bits", scope: !946, file: !22, line: 748, baseType: !50, size: 32, offset: 64)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count", scope: !946, file: !22, line: 750, baseType: !952, size: 608, offset: 96)
!952 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 608, elements: !722)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_i", scope: !946, file: !22, line: 751, baseType: !50, size: 32, offset: 704)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_p", scope: !946, file: !22, line: 752, baseType: !50, size: 32, offset: 736)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_skip", scope: !946, file: !22, line: 753, baseType: !50, size: 32, offset: 768)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_8x8dct", scope: !946, file: !22, line: 754, baseType: !194, size: 64, offset: 800)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_ref", scope: !946, file: !22, line: 755, baseType: !958, size: 2048, offset: 864)
!958 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 2048, elements: !810)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_partition", scope: !946, file: !22, line: 756, baseType: !960, size: 544, offset: 2912)
!960 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 544, elements: !961)
!961 = !{!631}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_cbp", scope: !946, file: !22, line: 757, baseType: !963, size: 192, offset: 3456)
!963 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 192, elements: !432)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_pred_mode", scope: !946, file: !22, line: 758, baseType: !965, size: 1664, offset: 3648)
!965 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 1664, elements: !966)
!966 = !{!43, !967}
!967 = !DISubrange(count: 13)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "i_direct_score", scope: !946, file: !22, line: 760, baseType: !194, size: 64, offset: 5312)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "i_ssd", scope: !946, file: !22, line: 762, baseType: !970, size: 192, offset: 5376)
!970 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 192, elements: !596)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "f_ssim", scope: !946, file: !22, line: 763, baseType: !674, size: 64, offset: 5568)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_count", scope: !943, file: !22, line: 769, baseType: !973, size: 160, offset: 5632)
!973 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 160, elements: !974)
!974 = !{!975}
!975 = !DISubrange(count: 5)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "i_frame_size", scope: !943, file: !22, line: 770, baseType: !977, size: 320, offset: 5824)
!977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 320, elements: !974)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "f_frame_qp", scope: !943, file: !22, line: 771, baseType: !979, size: 320, offset: 6144)
!979 = !DICompositeType(tag: DW_TAG_array_type, baseType: !674, size: 320, elements: !974)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "i_consecutive_bframes", scope: !943, file: !22, line: 772, baseType: !960, size: 544, offset: 6464)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "i_ssd_global", scope: !943, file: !22, line: 774, baseType: !977, size: 320, offset: 7040)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "f_psnr_average", scope: !943, file: !22, line: 775, baseType: !979, size: 320, offset: 7360)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "f_psnr_mean_y", scope: !943, file: !22, line: 776, baseType: !979, size: 320, offset: 7680)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "f_psnr_mean_u", scope: !943, file: !22, line: 777, baseType: !979, size: 320, offset: 8000)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "f_psnr_mean_v", scope: !943, file: !22, line: 778, baseType: !979, size: 320, offset: 8320)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "f_ssim_mean_y", scope: !943, file: !22, line: 779, baseType: !979, size: 320, offset: 8640)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count", scope: !943, file: !22, line: 781, baseType: !988, size: 6080, offset: 8960)
!988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 6080, elements: !989)
!989 = !{!975, !723}
!990 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_partition", scope: !943, file: !22, line: 782, baseType: !991, size: 2176, offset: 15040)
!991 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 2176, elements: !630)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_8x8dct", scope: !943, file: !22, line: 783, baseType: !712, size: 128, offset: 17216)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_count_ref", scope: !943, file: !22, line: 784, baseType: !994, size: 8192, offset: 17344)
!994 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 8192, elements: !995)
!995 = !{!36, !36, !522}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_cbp", scope: !943, file: !22, line: 785, baseType: !997, size: 384, offset: 25536)
!997 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 384, elements: !432)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "i_mb_pred_mode", scope: !943, file: !22, line: 786, baseType: !999, size: 3328, offset: 25920)
!999 = !DICompositeType(tag: DW_TAG_array_type, baseType: !571, size: 3328, elements: !966)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "i_direct_score", scope: !943, file: !22, line: 788, baseType: !194, size: 64, offset: 29248)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "i_direct_frames", scope: !943, file: !22, line: 789, baseType: !194, size: 64, offset: 29312)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "i_wpred", scope: !943, file: !22, line: 791, baseType: !595, size: 96, offset: 29376)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "nr_residual_sum", scope: !89, file: !22, line: 795, baseType: !1004, size: 4096, align: 128, offset: 243200)
!1004 = !DICompositeType(tag: DW_TAG_array_type, baseType: !26, size: 4096, elements: !1005)
!1005 = !{!36, !148}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "nr_offset", scope: !89, file: !22, line: 796, baseType: !1007, size: 2048, align: 128, offset: 247296)
!1007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 2048, elements: !1005)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "nr_count", scope: !89, file: !22, line: 797, baseType: !66, size: 64, offset: 249344)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "scratch_buffer", scope: !89, file: !22, line: 800, baseType: !154, size: 64, offset: 249408)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "intra_border_backup", scope: !89, file: !22, line: 801, baseType: !1011, size: 384, offset: 249472)
!1011 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 384, elements: !1012)
!1012 = !{!36, !523}
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_strength", scope: !89, file: !22, line: 802, baseType: !1014, size: 128, offset: 249856)
!1014 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1015, size: 128, elements: !35)
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1016 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 256, elements: !1017)
!1017 = !{!36, !43, !43}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "predict_16x16", scope: !89, file: !22, line: 805, baseType: !1019, size: 448, offset: 249984)
!1019 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 448, elements: !1025)
!1020 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_predict_t", file: !1021, line: 27, baseType: !1022)
!1021 = !DIFile(filename: "x264_src/common/predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!1022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1023, size: 64)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{null, !282}
!1025 = !{!1026}
!1026 = !DISubrange(count: 7)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "predict_8x8c", scope: !89, file: !22, line: 806, baseType: !1019, size: 448, offset: 250432)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "predict_8x8", scope: !89, file: !22, line: 807, baseType: !1029, size: 768, offset: 250880)
!1029 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1030, size: 768, elements: !1034)
!1030 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_predict8x8_t", file: !1021, line: 28, baseType: !1031)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1032 = !DISubroutineType(types: !1033)
!1033 = !{null, !282, !282}
!1034 = !{!1035}
!1035 = !DISubrange(count: 12)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "predict_4x4", scope: !89, file: !22, line: 808, baseType: !1037, size: 768, offset: 251648)
!1037 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1020, size: 768, elements: !1034)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "predict_8x8_filter", scope: !89, file: !22, line: 809, baseType: !1039, size: 64, offset: 252416)
!1039 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_predict_8x8_filter_t", file: !1021, line: 29, baseType: !1040)
!1040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1041, size: 64)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{null, !282, !282, !50, !50}
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "pixf", scope: !89, file: !22, line: 811, baseType: !1044, size: 8448, offset: 252480)
!1044 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_pixel_function_t", file: !6, line: 110, baseType: !1045)
!1045 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 63, size: 8448, elements: !1046)
!1046 = !{!1047, !1053, !1054, !1055, !1056, !1058, !1059, !1060, !1061, !1067, !1073, !1074, !1078, !1083, !1084, !1090, !1094, !1095, !1096, !1097, !1098, !1103, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117}
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "sad", scope: !1045, file: !6, line: 65, baseType: !1048, size: 448)
!1048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1049, size: 448, elements: !1025)
!1049 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_pixel_cmp_t", file: !6, line: 26, baseType: !1050)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64)
!1051 = !DISubroutineType(types: !1052)
!1052 = !{!50, !282, !50, !282, !50}
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "ssd", scope: !1045, file: !6, line: 66, baseType: !1048, size: 448, offset: 448)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "satd", scope: !1045, file: !6, line: 67, baseType: !1048, size: 448, offset: 896)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "ssim", scope: !1045, file: !6, line: 68, baseType: !1048, size: 448, offset: 1344)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "sa8d", scope: !1045, file: !6, line: 69, baseType: !1057, size: 256, offset: 1792)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1049, size: 256, elements: !42)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "mbcmp", scope: !1045, file: !6, line: 70, baseType: !1048, size: 448, offset: 2048)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "mbcmp_unaligned", scope: !1045, file: !6, line: 71, baseType: !1048, size: 448, offset: 2496)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "fpelcmp", scope: !1045, file: !6, line: 72, baseType: !1048, size: 448, offset: 2944)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "fpelcmp_x3", scope: !1045, file: !6, line: 73, baseType: !1062, size: 448, offset: 3392)
!1062 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1063, size: 448, elements: !1025)
!1063 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_pixel_cmp_x3_t", file: !6, line: 27, baseType: !1064)
!1064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64)
!1065 = !DISubroutineType(types: !1066)
!1066 = !{null, !282, !282, !282, !282, !50, !638}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "fpelcmp_x4", scope: !1045, file: !6, line: 74, baseType: !1068, size: 448, offset: 3840)
!1068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1069, size: 448, elements: !1025)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_pixel_cmp_x4_t", file: !6, line: 28, baseType: !1070)
!1070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1071, size: 64)
!1071 = !DISubroutineType(types: !1072)
!1072 = !{null, !282, !282, !282, !282, !282, !50, !638}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "sad_aligned", scope: !1045, file: !6, line: 75, baseType: !1048, size: 448, offset: 4288)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "var2_8x8", scope: !1045, file: !6, line: 76, baseType: !1075, size: 64, offset: 4736)
!1075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1076, size: 64)
!1076 = !DISubroutineType(types: !1077)
!1077 = !{!50, !282, !50, !282, !50, !638}
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1045, file: !6, line: 78, baseType: !1079, size: 256, offset: 4800)
!1079 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1080, size: 256, elements: !42)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = !DISubroutineType(types: !1082)
!1082 = !{!62, !282, !50}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "hadamard_ac", scope: !1045, file: !6, line: 79, baseType: !1079, size: 256, offset: 5056)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "ssim_4x4x2_core", scope: !1045, file: !6, line: 81, baseType: !1085, size: 64, offset: 5312)
!1085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1086, size: 64)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{null, !430, !50, !430, !50, !1088}
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1089, size: 64)
!1089 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 128, elements: !42)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "ssim_end4", scope: !1045, file: !6, line: 83, baseType: !1091, size: 64, offset: 5376)
!1091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1092, size: 64)
!1092 = !DISubroutineType(types: !1093)
!1093 = !{!190, !1088, !1088, !50}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "sad_x3", scope: !1045, file: !6, line: 86, baseType: !1062, size: 448, offset: 5440)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "sad_x4", scope: !1045, file: !6, line: 87, baseType: !1068, size: 448, offset: 5888)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "satd_x3", scope: !1045, file: !6, line: 88, baseType: !1062, size: 448, offset: 6336)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "satd_x4", scope: !1045, file: !6, line: 89, baseType: !1068, size: 448, offset: 6784)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "ads", scope: !1045, file: !6, line: 93, baseType: !1099, size: 448, offset: 7232)
!1099 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1100, size: 448, elements: !1025)
!1100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1101, size: 64)
!1101 = !DISubroutineType(types: !1102)
!1102 = !{!50, !638, !460, !50, !460, !792, !50, !50}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "intra_mbcmp_x3_16x16", scope: !1045, file: !6, line: 98, baseType: !1104, size: 64, offset: 7680)
!1104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1105, size: 64)
!1105 = !DISubroutineType(types: !1106)
!1106 = !{null, !282, !282, !638}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "intra_satd_x3_16x16", scope: !1045, file: !6, line: 99, baseType: !1104, size: 64, offset: 7744)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "intra_sad_x3_16x16", scope: !1045, file: !6, line: 100, baseType: !1104, size: 64, offset: 7808)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "intra_mbcmp_x3_8x8c", scope: !1045, file: !6, line: 101, baseType: !1104, size: 64, offset: 7872)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "intra_satd_x3_8x8c", scope: !1045, file: !6, line: 102, baseType: !1104, size: 64, offset: 7936)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "intra_sad_x3_8x8c", scope: !1045, file: !6, line: 103, baseType: !1104, size: 64, offset: 8000)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "intra_mbcmp_x3_4x4", scope: !1045, file: !6, line: 104, baseType: !1104, size: 64, offset: 8064)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "intra_satd_x3_4x4", scope: !1045, file: !6, line: 105, baseType: !1104, size: 64, offset: 8128)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "intra_sad_x3_4x4", scope: !1045, file: !6, line: 106, baseType: !1104, size: 64, offset: 8192)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "intra_mbcmp_x3_8x8", scope: !1045, file: !6, line: 107, baseType: !1104, size: 64, offset: 8256)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "intra_sa8d_x3_8x8", scope: !1045, file: !6, line: 108, baseType: !1104, size: 64, offset: 8320)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "intra_sad_x3_8x8", scope: !1045, file: !6, line: 109, baseType: !1104, size: 64, offset: 8384)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "mc", scope: !89, file: !22, line: 812, baseType: !1119, size: 2368, offset: 260928)
!1119 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_mc_functions_t", file: !502, line: 111, baseType: !1120)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !502, line: 58, size: 2368, elements: !1121)
!1121 = !{!1122, !1129, !1133, !1137, !1144, !1149, !1150, !1154, !1158, !1159, !1163, !1171, !1175, !1179, !1180, !1184, !1188, !1192, !1193, !1194, !1195, !1200}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "mc_luma", scope: !1120, file: !502, line: 60, baseType: !1123, size: 64)
!1123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1124, size: 64)
!1124 = !DISubroutineType(types: !1125)
!1125 = !{null, !282, !50, !1126, !50, !50, !50, !50, !50, !1127}
!1126 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !282, size: 64)
!1127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1128, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !501)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "get_ref", scope: !1120, file: !502, line: 65, baseType: !1130, size: 64, offset: 64)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1131, size: 64)
!1131 = !DISubroutineType(types: !1132)
!1132 = !{!282, !282, !638, !1126, !50, !50, !50, !50, !50, !1127}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "mc_chroma", scope: !1120, file: !502, line: 71, baseType: !1134, size: 64, offset: 128)
!1134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1135, size: 64)
!1135 = !DISubroutineType(types: !1136)
!1136 = !{null, !282, !50, !282, !50, !50, !50, !50, !50}
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "avg", scope: !1120, file: !502, line: 75, baseType: !1138, size: 640, offset: 192)
!1138 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1139, size: 640, elements: !1142)
!1139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1140, size: 64)
!1140 = !DISubroutineType(types: !1141)
!1141 = !{null, !282, !50, !282, !50, !282, !50, !50}
!1142 = !{!1143}
!1143 = !DISubrange(count: 10)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "copy", scope: !1120, file: !502, line: 78, baseType: !1145, size: 448, offset: 832)
!1145 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1146, size: 448, elements: !1025)
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{null, !282, !50, !282, !50, !50}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "copy_16x16_unaligned", scope: !1120, file: !502, line: 79, baseType: !1146, size: 64, offset: 1280)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "plane_copy", scope: !1120, file: !502, line: 81, baseType: !1151, size: 64, offset: 1344)
!1151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1152, size: 64)
!1152 = !DISubroutineType(types: !1153)
!1153 = !{null, !282, !50, !282, !50, !50, !50}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "hpel_filter", scope: !1120, file: !502, line: 84, baseType: !1155, size: 64, offset: 1408)
!1155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1156, size: 64)
!1156 = !DISubroutineType(types: !1157)
!1157 = !{null, !282, !282, !282, !282, !50, !50, !50, !792}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "prefetch_fenc", scope: !1120, file: !502, line: 88, baseType: !1146, size: 64, offset: 1472)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "prefetch_ref", scope: !1120, file: !502, line: 91, baseType: !1160, size: 64, offset: 1536)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1161, size: 64)
!1161 = !DISubroutineType(types: !1162)
!1162 = !{null, !282, !50, !50}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "memcpy_aligned", scope: !1120, file: !502, line: 93, baseType: !1164, size: 64, offset: 1600)
!1164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1165, size: 64)
!1165 = !DISubroutineType(types: !1166)
!1166 = !{!154, !154, !1167, !1169}
!1167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1168, size: 64)
!1168 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1169 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1170, line: 46, baseType: !64)
!1170 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "memzero_aligned", scope: !1120, file: !502, line: 94, baseType: !1172, size: 64, offset: 1664)
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = !DISubroutineType(types: !1174)
!1174 = !{null, !154, !50}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "integral_init4h", scope: !1120, file: !502, line: 97, baseType: !1176, size: 64, offset: 1728)
!1176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1177, size: 64)
!1177 = !DISubroutineType(types: !1178)
!1178 = !{null, !460, !282, !50}
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "integral_init8h", scope: !1120, file: !502, line: 98, baseType: !1176, size: 64, offset: 1792)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "integral_init4v", scope: !1120, file: !502, line: 99, baseType: !1181, size: 64, offset: 1856)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = !DISubroutineType(types: !1183)
!1183 = !{null, !460, !460, !50}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "integral_init8v", scope: !1120, file: !502, line: 100, baseType: !1185, size: 64, offset: 1920)
!1185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1186, size: 64)
!1186 = !DISubroutineType(types: !1187)
!1187 = !{null, !460, !50}
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "frame_init_lowres_core", scope: !1120, file: !502, line: 102, baseType: !1189, size: 64, offset: 1984)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = !DISubroutineType(types: !1191)
!1191 = !{null, !282, !282, !282, !282, !282, !50, !50, !50, !50}
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1120, file: !502, line: 104, baseType: !514, size: 64, offset: 2048)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "offsetadd", scope: !1120, file: !502, line: 105, baseType: !514, size: 64, offset: 2112)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "offsetsub", scope: !1120, file: !502, line: 106, baseType: !514, size: 64, offset: 2176)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "weight_cache", scope: !1120, file: !502, line: 107, baseType: !1196, size: 64, offset: 2240)
!1196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1197, size: 64)
!1197 = !DISubroutineType(types: !1198)
!1198 = !{null, !86, !1199}
!1199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !501, size: 64)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "mbtree_propagate_cost", scope: !1120, file: !502, line: 109, baseType: !1201, size: 64, offset: 2304)
!1201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1202, size: 64)
!1202 = !DISubroutineType(types: !1203)
!1203 = !{null, !638, !460, !460, !460, !460, !50}
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "dctf", scope: !89, file: !22, line: 813, baseType: !1205, size: 960, offset: 263296)
!1205 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_dct_function_t", file: !1206, line: 115, baseType: !1207)
!1206 = !DIFile(filename: "x264_src/common/dct.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!1207 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1206, line: 89, size: 960, elements: !1208)
!1208 = !{!1209, !1213, !1217, !1222, !1223, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1239, !1243, !1247}
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "sub4x4_dct", scope: !1207, file: !1206, line: 94, baseType: !1210, size: 64)
!1210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1211, size: 64)
!1211 = !DISubroutineType(types: !1212)
!1212 = !{null, !792, !282, !282}
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "add4x4_idct", scope: !1207, file: !1206, line: 95, baseType: !1214, size: 64, offset: 64)
!1214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1215, size: 64)
!1215 = !DISubroutineType(types: !1216)
!1216 = !{null, !282, !792}
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "sub8x8_dct", scope: !1207, file: !1206, line: 97, baseType: !1218, size: 64, offset: 128)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = !DISubroutineType(types: !1220)
!1220 = !{null, !1221, !282, !282}
!1221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "sub8x8_dct_dc", scope: !1207, file: !1206, line: 98, baseType: !1210, size: 64, offset: 192)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "add8x8_idct", scope: !1207, file: !1206, line: 99, baseType: !1224, size: 64, offset: 256)
!1224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1225, size: 64)
!1225 = !DISubroutineType(types: !1226)
!1226 = !{null, !282, !1221}
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "add8x8_idct_dc", scope: !1207, file: !1206, line: 100, baseType: !1214, size: 64, offset: 320)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "sub16x16_dct", scope: !1207, file: !1206, line: 102, baseType: !1218, size: 64, offset: 384)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "add16x16_idct", scope: !1207, file: !1206, line: 103, baseType: !1224, size: 64, offset: 448)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "add16x16_idct_dc", scope: !1207, file: !1206, line: 104, baseType: !1214, size: 64, offset: 512)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "sub8x8_dct8", scope: !1207, file: !1206, line: 106, baseType: !1210, size: 64, offset: 576)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "add8x8_idct8", scope: !1207, file: !1206, line: 107, baseType: !1214, size: 64, offset: 640)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "sub16x16_dct8", scope: !1207, file: !1206, line: 109, baseType: !1234, size: 64, offset: 704)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DISubroutineType(types: !1236)
!1236 = !{null, !1237, !282, !282}
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1238, size: 64)
!1238 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 1024, elements: !147)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "add16x16_idct8", scope: !1207, file: !1206, line: 110, baseType: !1240, size: 64, offset: 768)
!1240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1241, size: 64)
!1241 = !DISubroutineType(types: !1242)
!1242 = !{null, !282, !1237}
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "dct4x4dc", scope: !1207, file: !1206, line: 112, baseType: !1244, size: 64, offset: 832)
!1244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1245, size: 64)
!1245 = !DISubroutineType(types: !1246)
!1246 = !{null, !792}
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "idct4x4dc", scope: !1207, file: !1206, line: 113, baseType: !1244, size: 64, offset: 896)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "zigzagf", scope: !89, file: !22, line: 814, baseType: !1249, size: 384, offset: 264256)
!1249 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_zigzag_function_t", file: !1206, line: 126, baseType: !1250)
!1250 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1206, line: 117, size: 384, elements: !1251)
!1251 = !{!1252, !1256, !1257, !1261, !1262, !1266}
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "scan_8x8", scope: !1250, file: !1206, line: 119, baseType: !1253, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = !DISubroutineType(types: !1255)
!1255 = !{null, !792, !792}
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "scan_4x4", scope: !1250, file: !1206, line: 120, baseType: !1253, size: 64, offset: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "sub_8x8", scope: !1250, file: !1206, line: 121, baseType: !1258, size: 64, offset: 128)
!1258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1259, size: 64)
!1259 = !DISubroutineType(types: !1260)
!1260 = !{!50, !792, !430, !282}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "sub_4x4", scope: !1250, file: !1206, line: 122, baseType: !1258, size: 64, offset: 192)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "sub_4x4ac", scope: !1250, file: !1206, line: 123, baseType: !1263, size: 64, offset: 256)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DISubroutineType(types: !1265)
!1265 = !{!50, !792, !430, !282, !792}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "interleave_8x8_cavlc", scope: !1250, file: !1206, line: 124, baseType: !1267, size: 64, offset: 320)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = !DISubroutineType(types: !1269)
!1269 = !{null, !792, !792, !282}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "quantf", scope: !89, file: !22, line: 815, baseType: !1271, size: 1408, offset: 264640)
!1271 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_quant_function_t", file: !1272, line: 44, baseType: !1273)
!1272 = !DIFile(filename: "x264_src/common/quant.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!1273 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1272, line: 26, size: 1408, elements: !1274)
!1274 = !{!1275, !1279, !1280, !1284, !1285, !1289, !1293, !1294, !1299, !1303, !1304, !1305, !1307}
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "quant_8x8", scope: !1273, file: !1272, line: 28, baseType: !1276, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DISubroutineType(types: !1278)
!1278 = !{!50, !792, !460, !460}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "quant_4x4", scope: !1273, file: !1272, line: 29, baseType: !1276, size: 64, offset: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "quant_4x4_dc", scope: !1273, file: !1272, line: 30, baseType: !1281, size: 64, offset: 128)
!1281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1282, size: 64)
!1282 = !DISubroutineType(types: !1283)
!1283 = !{!50, !792, !50, !50}
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "quant_2x2_dc", scope: !1273, file: !1272, line: 31, baseType: !1281, size: 64, offset: 192)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "dequant_8x8", scope: !1273, file: !1272, line: 33, baseType: !1286, size: 64, offset: 256)
!1286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1287, size: 64)
!1287 = !DISubroutineType(types: !1288)
!1288 = !{null, !792, !444, !50}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "dequant_4x4", scope: !1273, file: !1272, line: 34, baseType: !1290, size: 64, offset: 320)
!1290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1291, size: 64)
!1291 = !DISubroutineType(types: !1292)
!1292 = !{null, !792, !440, !50}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "dequant_4x4_dc", scope: !1273, file: !1272, line: 35, baseType: !1290, size: 64, offset: 384)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "denoise_dct", scope: !1273, file: !1272, line: 37, baseType: !1295, size: 64, offset: 448)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = !DISubroutineType(types: !1297)
!1297 = !{null, !792, !1298, !460, !50}
!1298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "decimate_score15", scope: !1273, file: !1272, line: 39, baseType: !1300, size: 64, offset: 512)
!1300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1301, size: 64)
!1301 = !DISubroutineType(types: !1302)
!1302 = !{!50, !792}
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "decimate_score16", scope: !1273, file: !1272, line: 40, baseType: !1300, size: 64, offset: 576)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "decimate_score64", scope: !1273, file: !1272, line: 41, baseType: !1300, size: 64, offset: 640)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "coeff_last", scope: !1273, file: !1272, line: 42, baseType: !1306, size: 384, offset: 704)
!1306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1300, size: 384, elements: !432)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "coeff_level_run", scope: !1273, file: !1272, line: 43, baseType: !1308, size: 320, offset: 1088)
!1308 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1309, size: 320, elements: !974)
!1309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1310, size: 64)
!1310 = !DISubroutineType(types: !1311)
!1311 = !{!50, !792, !1312}
!1312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1313, size: 64)
!1313 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_run_level_t", file: !287, line: 63, baseType: !1314)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !287, line: 58, size: 416, elements: !1315)
!1315 = !{!1316, !1317, !1318}
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1314, file: !287, line: 60, baseType: !50, size: 32)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1314, file: !287, line: 61, baseType: !734, size: 256, offset: 32)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "run", scope: !1314, file: !287, line: 62, baseType: !139, size: 128, offset: 288)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "loopf", scope: !89, file: !22, line: 816, baseType: !1320, size: 576, offset: 266048)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_deblock_function_t", file: !564, line: 170, baseType: !1321)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !564, line: 161, size: 576, elements: !1322)
!1322 = !{!1323, !1329, !1330, !1336, !1337}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_luma", scope: !1321, file: !564, line: 163, baseType: !1324, size: 128)
!1324 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1325, size: 128, elements: !35)
!1325 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_deblock_inter_t", file: !564, line: 159, baseType: !1326)
!1326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1327, size: 64)
!1327 = !DISubroutineType(types: !1328)
!1328 = !{null, !282, !50, !50, !50, !619}
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_chroma", scope: !1321, file: !564, line: 164, baseType: !1324, size: 128, offset: 128)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_luma_intra", scope: !1321, file: !564, line: 165, baseType: !1331, size: 128, offset: 256)
!1331 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1332, size: 128, elements: !35)
!1332 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_deblock_intra_t", file: !564, line: 160, baseType: !1333)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = !DISubroutineType(types: !1335)
!1335 = !{null, !282, !50, !50, !50}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_chroma_intra", scope: !1321, file: !564, line: 166, baseType: !1331, size: 128, offset: 384)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "deblock_strength", scope: !1321, file: !564, line: 167, baseType: !1338, size: 64, offset: 512)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = !DISubroutineType(types: !1340)
!1340 = !{null, !282, !1341, !1342, !1345, !50, !50}
!1341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !880, size: 64)
!1342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1343, size: 64)
!1343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 1280, elements: !1344)
!1344 = !{!882, !36}
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1346, size: 64)
!1346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 128, elements: !1347)
!1347 = !{!43, !43}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "lookahead", scope: !89, file: !22, line: 821, baseType: !1349, size: 64, offset: 266624)
!1349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1350, size: 64)
!1350 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_lookahead_t", file: !22, line: 377, baseType: !1351)
!1351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "x264_lookahead_t", file: !22, line: 366, size: 960, elements: !1352)
!1352 = !{!1353, !1355, !1356, !1357, !1358, !1359, !1360, !1370, !1371}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "b_exit_thread", scope: !1351, file: !22, line: 368, baseType: !1354, size: 8)
!1354 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !39)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "b_thread_active", scope: !1351, file: !22, line: 369, baseType: !39, size: 8, offset: 8)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "b_analyse_keyframe", scope: !1351, file: !22, line: 370, baseType: !39, size: 8, offset: 16)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "i_last_keyframe", scope: !1351, file: !22, line: 371, baseType: !50, size: 32, offset: 32)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "i_slicetype_length", scope: !1351, file: !22, line: 372, baseType: !50, size: 32, offset: 64)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "last_nonb", scope: !1351, file: !22, line: 373, baseType: !562, size: 64, offset: 128)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "ifbuf", scope: !1351, file: !22, line: 374, baseType: !1361, size: 256, offset: 192)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_synch_frame_list_t", file: !564, line: 157, baseType: !1362)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !564, line: 149, size: 256, elements: !1363)
!1363 = !{!1364, !1365, !1366, !1367, !1368, !1369}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1362, file: !564, line: 151, baseType: !561, size: 64)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "i_max_size", scope: !1362, file: !564, line: 152, baseType: !50, size: 32, offset: 64)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "i_size", scope: !1362, file: !564, line: 153, baseType: !50, size: 32, offset: 96)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !1362, file: !564, line: 154, baseType: !50, size: 32, offset: 128)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "cv_fill", scope: !1362, file: !564, line: 155, baseType: !50, size: 32, offset: 160)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "cv_empty", scope: !1362, file: !564, line: 156, baseType: !50, size: 32, offset: 192)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1351, file: !22, line: 375, baseType: !1361, size: 256, offset: 448)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "ofbuf", scope: !1351, file: !22, line: 376, baseType: !1361, size: 256, offset: 704)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_typedef, name: "x264_me_t", file: !46, line: 53, baseType: !1374, align: 128)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !46, line: 30, size: 1152, elements: !1375)
!1375 = !{!1376, !1377, !1378, !1379, !1380, !1381, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "i_pixel", scope: !1374, file: !46, line: 35, baseType: !50, size: 32, align: 128)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "p_cost_mv", scope: !1374, file: !46, line: 36, baseType: !460, size: 64, offset: 64)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref_cost", scope: !1374, file: !46, line: 37, baseType: !50, size: 32, offset: 128)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "i_ref", scope: !1374, file: !46, line: 38, baseType: !50, size: 32, offset: 160)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1374, file: !46, line: 39, baseType: !1127, size: 64, offset: 192)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "p_fref", scope: !1374, file: !46, line: 41, baseType: !1382, size: 384, offset: 256)
!1382 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 384, elements: !432)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "p_fref_w", scope: !1374, file: !46, line: 42, baseType: !282, size: 64, offset: 640)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "p_fenc", scope: !1374, file: !46, line: 43, baseType: !603, size: 192, offset: 704)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "integral", scope: !1374, file: !46, line: 44, baseType: !460, size: 64, offset: 896)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "i_stride", scope: !1374, file: !46, line: 45, baseType: !194, size: 64, offset: 960)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "mvp", scope: !1374, file: !46, line: 47, baseType: !52, size: 32, align: 32, offset: 1024)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "cost_mv", scope: !1374, file: !46, line: 50, baseType: !50, size: 32, offset: 1056)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !1374, file: !46, line: 51, baseType: !50, size: 32, offset: 1088)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "mv", scope: !1374, file: !46, line: 52, baseType: !52, size: 32, align: 32, offset: 1120)
!1391 = !{}
!1392 = !DICompositeType(tag: DW_TAG_array_type, baseType: !431, size: 56, elements: !1025)
!1393 = !DIGlobalVariableExpression(var: !1394, expr: !DIExpression())
!1394 = distinct !DIGlobalVariable(name: "range_mul", scope: !83, file: !3, line: 427, type: !1395, isLocal: true, isDefinition: true)
!1395 = !DICompositeType(tag: DW_TAG_array_type, baseType: !431, size: 128, elements: !1347)
!1396 = !DIGlobalVariableExpression(var: !1397, expr: !DIExpression())
!1397 = distinct !DIGlobalVariable(name: "hex4", scope: !83, file: !3, line: 487, type: !1398, isLocal: true, isDefinition: true)
!1398 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 256, elements: !1400)
!1399 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !620)
!1400 = !{!141, !36}
!1401 = !DIGlobalVariableExpression(var: !1402, expr: !DIExpression())
!1402 = distinct !DIGlobalVariable(name: "zero", scope: !83, file: !3, line: 591, type: !1403, isLocal: true, isDefinition: true, align: 128)
!1403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 1024, elements: !1404)
!1404 = !{!1405}
!1405 = !DISubrange(count: 128)
!1406 = !DIGlobalVariableExpression(var: !1407, expr: !DIExpression())
!1407 = distinct !DIGlobalVariable(name: "x264_iter_kludge", scope: !2, file: !3, line: 936, type: !50, isLocal: false, isDefinition: true)
!1408 = !DIGlobalVariableExpression(var: !1409, expr: !DIExpression())
!1409 = distinct !DIGlobalVariable(name: "hex2", scope: !2, file: !3, line: 51, type: !1410, isLocal: true, isDefinition: true)
!1410 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 128, elements: !806)
!1411 = !DIGlobalVariableExpression(var: !1412, expr: !DIExpression())
!1412 = distinct !DIGlobalVariable(name: "mod6m1", scope: !2, file: !3, line: 49, type: !1413, isLocal: true, isDefinition: true)
!1413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !431, size: 64, elements: !71)
!1414 = !DIGlobalVariableExpression(var: !1415, expr: !DIExpression())
!1415 = distinct !DIGlobalVariable(name: "square1", scope: !2, file: !3, line: 52, type: !1416, isLocal: true, isDefinition: true)
!1416 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 144, elements: !1417)
!1417 = !{!860, !36}
!1418 = !DIGlobalVariableExpression(var: !1419, expr: !DIExpression())
!1419 = distinct !DIGlobalVariable(name: "subpel_iterations", scope: !2, file: !3, line: 35, type: !1420, isLocal: true, isDefinition: true)
!1420 = !DICompositeType(tag: DW_TAG_array_type, baseType: !431, size: 352, elements: !1421)
!1421 = !{!1422, !43}
!1422 = !DISubrange(count: 11)
!1423 = !DIGlobalVariableExpression(var: !1424, expr: !DIExpression())
!1424 = distinct !DIGlobalVariable(name: "dia4d", scope: !1425, file: !3, line: 972, type: !1428, isLocal: true, isDefinition: true, align: 64)
!1425 = distinct !DISubprogram(name: "x264_me_refine_bidir", scope: !3, file: !3, line: 938, type: !1426, scopeLine: 939, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!1426 = !DISubroutineType(types: !1427)
!1427 = !{null, !86, !1372, !1372, !50, !50, !50, !50}
!1428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 1056, elements: !1429)
!1429 = !{!1430, !43}
!1430 = !DISubrange(count: 33)
!1431 = !DIGlobalVariableExpression(var: !1432, expr: !DIExpression())
!1432 = distinct !DIGlobalVariable(name: "x264_scan8", scope: !2, file: !22, line: 125, type: !1433, isLocal: true, isDefinition: true)
!1433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1434, size: 864, elements: !1435)
!1434 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !50)
!1435 = !{!1436}
!1436 = !DISubrange(count: 27)
!1437 = !DIGlobalVariableExpression(var: !1438, expr: !DIExpression())
!1438 = distinct !DIGlobalVariable(name: "block_idx_xy_fdec", scope: !2, file: !1439, line: 234, type: !1440, isLocal: true, isDefinition: true)
!1439 = !DIFile(filename: "x264_src/common/macroblock.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!1440 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1441, size: 256, elements: !140)
!1441 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !32)
!1442 = !DIGlobalVariableExpression(var: !1443, expr: !DIExpression())
!1443 = distinct !DIGlobalVariable(name: "block_idx_x", scope: !2, file: !1439, line: 200, type: !1444, isLocal: true, isDefinition: true)
!1444 = !DICompositeType(tag: DW_TAG_array_type, baseType: !431, size: 128, elements: !140)
!1445 = !DIGlobalVariableExpression(var: !1446, expr: !DIExpression())
!1446 = distinct !DIGlobalVariable(name: "block_idx_y", scope: !2, file: !1439, line: 204, type: !1444, isLocal: true, isDefinition: true)
!1447 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1448, size: 448, elements: !1025)
!1448 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1449)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 44, size: 64, elements: !1450)
!1450 = !{!1451, !1452}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "w", scope: !1449, file: !6, line: 45, baseType: !50, size: 32)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "h", scope: !1449, file: !6, line: 46, baseType: !50, size: 32, offset: 32)
!1453 = !{i32 7, !"Dwarf Version", i32 4}
!1454 = !{i32 2, !"Debug Info Version", i32 3}
!1455 = !{i32 1, !"wchar_size", i32 4}
!1456 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!1457 = !DILocalVariable(name: "h", arg: 1, scope: !83, file: !3, line: 173, type: !86)
!1458 = !DILocation(line: 173, column: 34, scope: !83)
!1459 = !DILocalVariable(name: "m", arg: 2, scope: !83, file: !3, line: 173, type: !1372)
!1460 = !DILocation(line: 173, column: 48, scope: !83)
!1461 = !DILocalVariable(name: "mvc", arg: 3, scope: !83, file: !3, line: 173, type: !626)
!1462 = !DILocation(line: 173, column: 61, scope: !83)
!1463 = !DILocalVariable(name: "i_mvc", arg: 4, scope: !83, file: !3, line: 173, type: !50)
!1464 = !DILocation(line: 173, column: 74, scope: !83)
!1465 = !DILocalVariable(name: "p_halfpel_thresh", arg: 5, scope: !83, file: !3, line: 173, type: !638)
!1466 = !DILocation(line: 173, column: 86, scope: !83)
!1467 = !DILocalVariable(name: "bw", scope: !83, file: !3, line: 175, type: !1434)
!1468 = !DILocation(line: 175, column: 15, scope: !83)
!1469 = !DILocation(line: 175, column: 36, scope: !83)
!1470 = !DILocation(line: 175, column: 39, scope: !83)
!1471 = !DILocation(line: 175, column: 20, scope: !83)
!1472 = !DILocation(line: 175, column: 48, scope: !83)
!1473 = !DILocalVariable(name: "bh", scope: !83, file: !3, line: 176, type: !1434)
!1474 = !DILocation(line: 176, column: 15, scope: !83)
!1475 = !DILocation(line: 176, column: 36, scope: !83)
!1476 = !DILocation(line: 176, column: 39, scope: !83)
!1477 = !DILocation(line: 176, column: 20, scope: !83)
!1478 = !DILocation(line: 176, column: 48, scope: !83)
!1479 = !DILocalVariable(name: "i_pixel", scope: !83, file: !3, line: 177, type: !1434)
!1480 = !DILocation(line: 177, column: 15, scope: !83)
!1481 = !DILocation(line: 177, column: 25, scope: !83)
!1482 = !DILocation(line: 177, column: 28, scope: !83)
!1483 = !DILocalVariable(name: "stride", scope: !83, file: !3, line: 178, type: !1434)
!1484 = !DILocation(line: 178, column: 15, scope: !83)
!1485 = !DILocation(line: 178, column: 24, scope: !83)
!1486 = !DILocation(line: 178, column: 27, scope: !83)
!1487 = !DILocalVariable(name: "i_me_range", scope: !83, file: !3, line: 179, type: !50)
!1488 = !DILocation(line: 179, column: 9, scope: !83)
!1489 = !DILocation(line: 179, column: 22, scope: !83)
!1490 = !DILocation(line: 179, column: 25, scope: !83)
!1491 = !DILocation(line: 179, column: 31, scope: !83)
!1492 = !DILocation(line: 179, column: 39, scope: !83)
!1493 = !DILocalVariable(name: "bmx", scope: !83, file: !3, line: 180, type: !50)
!1494 = !DILocation(line: 180, column: 9, scope: !83)
!1495 = !DILocalVariable(name: "bmy", scope: !83, file: !3, line: 180, type: !50)
!1496 = !DILocation(line: 180, column: 14, scope: !83)
!1497 = !DILocalVariable(name: "bcost", scope: !83, file: !3, line: 180, type: !50)
!1498 = !DILocation(line: 180, column: 19, scope: !83)
!1499 = !DILocalVariable(name: "bpred_mx", scope: !83, file: !3, line: 181, type: !50)
!1500 = !DILocation(line: 181, column: 9, scope: !83)
!1501 = !DILocalVariable(name: "bpred_my", scope: !83, file: !3, line: 181, type: !50)
!1502 = !DILocation(line: 181, column: 23, scope: !83)
!1503 = !DILocalVariable(name: "bpred_cost", scope: !83, file: !3, line: 181, type: !50)
!1504 = !DILocation(line: 181, column: 37, scope: !83)
!1505 = !DILocalVariable(name: "omx", scope: !83, file: !3, line: 182, type: !50)
!1506 = !DILocation(line: 182, column: 9, scope: !83)
!1507 = !DILocalVariable(name: "omy", scope: !83, file: !3, line: 182, type: !50)
!1508 = !DILocation(line: 182, column: 14, scope: !83)
!1509 = !DILocalVariable(name: "pmx", scope: !83, file: !3, line: 182, type: !50)
!1510 = !DILocation(line: 182, column: 19, scope: !83)
!1511 = !DILocalVariable(name: "pmy", scope: !83, file: !3, line: 182, type: !50)
!1512 = !DILocation(line: 182, column: 24, scope: !83)
!1513 = !DILocalVariable(name: "p_fenc", scope: !83, file: !3, line: 183, type: !282)
!1514 = !DILocation(line: 183, column: 14, scope: !83)
!1515 = !DILocation(line: 183, column: 23, scope: !83)
!1516 = !DILocation(line: 183, column: 26, scope: !83)
!1517 = !DILocalVariable(name: "p_fref_w", scope: !83, file: !3, line: 184, type: !282)
!1518 = !DILocation(line: 184, column: 14, scope: !83)
!1519 = !DILocation(line: 184, column: 25, scope: !83)
!1520 = !DILocation(line: 184, column: 28, scope: !83)
!1521 = !DILocalVariable(name: "pix", scope: !83, file: !3, line: 185, type: !839, align: 128)
!1522 = !DILocation(line: 185, column: 5, scope: !83)
!1523 = !DILocalVariable(name: "costs", scope: !83, file: !3, line: 187, type: !441)
!1524 = !DILocation(line: 187, column: 9, scope: !83)
!1525 = !DILocalVariable(name: "mv_x_min", scope: !83, file: !3, line: 189, type: !50)
!1526 = !DILocation(line: 189, column: 9, scope: !83)
!1527 = !DILocation(line: 189, column: 20, scope: !83)
!1528 = !DILocation(line: 189, column: 23, scope: !83)
!1529 = !DILocation(line: 189, column: 26, scope: !83)
!1530 = !DILocalVariable(name: "mv_y_min", scope: !83, file: !3, line: 190, type: !50)
!1531 = !DILocation(line: 190, column: 9, scope: !83)
!1532 = !DILocation(line: 190, column: 20, scope: !83)
!1533 = !DILocation(line: 190, column: 23, scope: !83)
!1534 = !DILocation(line: 190, column: 26, scope: !83)
!1535 = !DILocalVariable(name: "mv_x_max", scope: !83, file: !3, line: 191, type: !50)
!1536 = !DILocation(line: 191, column: 9, scope: !83)
!1537 = !DILocation(line: 191, column: 20, scope: !83)
!1538 = !DILocation(line: 191, column: 23, scope: !83)
!1539 = !DILocation(line: 191, column: 26, scope: !83)
!1540 = !DILocalVariable(name: "mv_y_max", scope: !83, file: !3, line: 192, type: !50)
!1541 = !DILocation(line: 192, column: 9, scope: !83)
!1542 = !DILocation(line: 192, column: 20, scope: !83)
!1543 = !DILocation(line: 192, column: 23, scope: !83)
!1544 = !DILocation(line: 192, column: 26, scope: !83)
!1545 = !DILocalVariable(name: "mv_x_min_qpel", scope: !83, file: !3, line: 193, type: !50)
!1546 = !DILocation(line: 193, column: 9, scope: !83)
!1547 = !DILocation(line: 193, column: 25, scope: !83)
!1548 = !DILocation(line: 193, column: 34, scope: !83)
!1549 = !DILocalVariable(name: "mv_y_min_qpel", scope: !83, file: !3, line: 194, type: !50)
!1550 = !DILocation(line: 194, column: 9, scope: !83)
!1551 = !DILocation(line: 194, column: 25, scope: !83)
!1552 = !DILocation(line: 194, column: 34, scope: !83)
!1553 = !DILocalVariable(name: "mv_x_max_qpel", scope: !83, file: !3, line: 195, type: !50)
!1554 = !DILocation(line: 195, column: 9, scope: !83)
!1555 = !DILocation(line: 195, column: 25, scope: !83)
!1556 = !DILocation(line: 195, column: 34, scope: !83)
!1557 = !DILocalVariable(name: "mv_y_max_qpel", scope: !83, file: !3, line: 196, type: !50)
!1558 = !DILocation(line: 196, column: 9, scope: !83)
!1559 = !DILocation(line: 196, column: 25, scope: !83)
!1560 = !DILocation(line: 196, column: 34, scope: !83)
!1561 = !DILocalVariable(name: "mv_min", scope: !83, file: !3, line: 199, type: !26)
!1562 = !DILocation(line: 199, column: 14, scope: !83)
!1563 = !DILocation(line: 199, column: 23, scope: !83)
!1564 = !DILocalVariable(name: "mv_max", scope: !83, file: !3, line: 200, type: !26)
!1565 = !DILocation(line: 200, column: 14, scope: !83)
!1566 = !DILocation(line: 200, column: 23, scope: !83)
!1567 = !DILocation(line: 200, column: 61, scope: !83)
!1568 = !DILocalVariable(name: "p_cost_mvx", scope: !83, file: !3, line: 204, type: !1569)
!1569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1441, size: 64)
!1570 = !DILocation(line: 204, column: 21, scope: !83)
!1571 = !DILocation(line: 204, column: 34, scope: !83)
!1572 = !DILocation(line: 204, column: 37, scope: !83)
!1573 = !DILocation(line: 204, column: 49, scope: !83)
!1574 = !DILocation(line: 204, column: 52, scope: !83)
!1575 = !DILocation(line: 204, column: 47, scope: !83)
!1576 = !DILocalVariable(name: "p_cost_mvy", scope: !83, file: !3, line: 205, type: !1569)
!1577 = !DILocation(line: 205, column: 21, scope: !83)
!1578 = !DILocation(line: 205, column: 34, scope: !83)
!1579 = !DILocation(line: 205, column: 37, scope: !83)
!1580 = !DILocation(line: 205, column: 49, scope: !83)
!1581 = !DILocation(line: 205, column: 52, scope: !83)
!1582 = !DILocation(line: 205, column: 47, scope: !83)
!1583 = !DILocalVariable(name: "pmv", scope: !83, file: !3, line: 207, type: !26)
!1584 = !DILocation(line: 207, column: 14, scope: !83)
!1585 = !DILocation(line: 208, column: 23, scope: !83)
!1586 = !DILocation(line: 208, column: 26, scope: !83)
!1587 = !DILocation(line: 208, column: 34, scope: !83)
!1588 = !DILocation(line: 208, column: 49, scope: !83)
!1589 = !DILocation(line: 208, column: 11, scope: !83)
!1590 = !DILocation(line: 208, column: 9, scope: !83)
!1591 = !DILocation(line: 209, column: 23, scope: !83)
!1592 = !DILocation(line: 209, column: 26, scope: !83)
!1593 = !DILocation(line: 209, column: 34, scope: !83)
!1594 = !DILocation(line: 209, column: 49, scope: !83)
!1595 = !DILocation(line: 209, column: 11, scope: !83)
!1596 = !DILocation(line: 209, column: 9, scope: !83)
!1597 = !DILocation(line: 210, column: 13, scope: !83)
!1598 = !DILocation(line: 210, column: 17, scope: !83)
!1599 = !DILocation(line: 210, column: 23, scope: !83)
!1600 = !DILocation(line: 210, column: 9, scope: !83)
!1601 = !DILocation(line: 211, column: 13, scope: !83)
!1602 = !DILocation(line: 211, column: 17, scope: !83)
!1603 = !DILocation(line: 211, column: 23, scope: !83)
!1604 = !DILocation(line: 211, column: 9, scope: !83)
!1605 = !DILocation(line: 212, column: 11, scope: !83)
!1606 = !DILocation(line: 215, column: 9, scope: !1607)
!1607 = distinct !DILexicalBlock(scope: !83, file: !3, line: 215, column: 9)
!1608 = !DILocation(line: 215, column: 12, scope: !1607)
!1609 = !DILocation(line: 215, column: 15, scope: !1607)
!1610 = !DILocation(line: 215, column: 31, scope: !1607)
!1611 = !DILocation(line: 215, column: 9, scope: !83)
!1612 = !DILocation(line: 217, column: 31, scope: !1613)
!1613 = distinct !DILexicalBlock(scope: !1607, file: !3, line: 216, column: 5)
!1614 = !DILocation(line: 217, column: 35, scope: !1613)
!1615 = !DILocation(line: 217, column: 15, scope: !1613)
!1616 = !DILocation(line: 217, column: 13, scope: !1613)
!1617 = !DILocation(line: 218, column: 13, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1613, file: !3, line: 218, column: 13)
!1619 = !DILocation(line: 218, column: 13, scope: !1613)
!1620 = !DILocalVariable(name: "stride2", scope: !1621, file: !3, line: 219, type: !50)
!1621 = distinct !DILexicalBlock(scope: !1618, file: !3, line: 219, column: 13)
!1622 = !DILocation(line: 219, column: 13, scope: !1621)
!1623 = !DILocalVariable(name: "src", scope: !1621, file: !3, line: 219, type: !282)
!1624 = !DILocalVariable(name: "cost", scope: !1621, file: !3, line: 219, type: !50)
!1625 = !DILocation(line: 219, column: 13, scope: !1626)
!1626 = distinct !DILexicalBlock(scope: !1621, file: !3, line: 219, column: 13)
!1627 = !DILocation(line: 219, column: 13, scope: !1628)
!1628 = distinct !DILexicalBlock(scope: !1626, file: !3, line: 219, column: 13)
!1629 = !DILocalVariable(name: "i", scope: !1630, file: !3, line: 220, type: !50)
!1630 = distinct !DILexicalBlock(scope: !1613, file: !3, line: 220, column: 9)
!1631 = !DILocation(line: 220, column: 18, scope: !1630)
!1632 = !DILocation(line: 220, column: 14, scope: !1630)
!1633 = !DILocation(line: 220, column: 25, scope: !1634)
!1634 = distinct !DILexicalBlock(scope: !1630, file: !3, line: 220, column: 9)
!1635 = !DILocation(line: 220, column: 29, scope: !1634)
!1636 = !DILocation(line: 220, column: 27, scope: !1634)
!1637 = !DILocation(line: 220, column: 9, scope: !1630)
!1638 = !DILocation(line: 222, column: 17, scope: !1639)
!1639 = distinct !DILexicalBlock(scope: !1640, file: !3, line: 222, column: 17)
!1640 = distinct !DILexicalBlock(scope: !1634, file: !3, line: 221, column: 9)
!1641 = !DILocation(line: 222, column: 31, scope: !1639)
!1642 = !DILocation(line: 222, column: 35, scope: !1639)
!1643 = !DILocation(line: 222, column: 42, scope: !1639)
!1644 = !DILocation(line: 222, column: 39, scope: !1639)
!1645 = !DILocation(line: 222, column: 17, scope: !1640)
!1646 = !DILocalVariable(name: "mx", scope: !1647, file: !3, line: 224, type: !50)
!1647 = distinct !DILexicalBlock(scope: !1639, file: !3, line: 223, column: 13)
!1648 = !DILocation(line: 224, column: 21, scope: !1647)
!1649 = !DILocation(line: 224, column: 38, scope: !1647)
!1650 = !DILocation(line: 224, column: 42, scope: !1647)
!1651 = !DILocation(line: 224, column: 49, scope: !1647)
!1652 = !DILocation(line: 224, column: 64, scope: !1647)
!1653 = !DILocation(line: 224, column: 26, scope: !1647)
!1654 = !DILocalVariable(name: "my", scope: !1647, file: !3, line: 225, type: !50)
!1655 = !DILocation(line: 225, column: 21, scope: !1647)
!1656 = !DILocation(line: 225, column: 38, scope: !1647)
!1657 = !DILocation(line: 225, column: 42, scope: !1647)
!1658 = !DILocation(line: 225, column: 49, scope: !1647)
!1659 = !DILocation(line: 225, column: 64, scope: !1647)
!1660 = !DILocation(line: 225, column: 26, scope: !1647)
!1661 = !DILocalVariable(name: "stride2", scope: !1662, file: !3, line: 226, type: !50)
!1662 = distinct !DILexicalBlock(scope: !1647, file: !3, line: 226, column: 17)
!1663 = !DILocation(line: 226, column: 17, scope: !1662)
!1664 = !DILocalVariable(name: "src", scope: !1662, file: !3, line: 226, type: !282)
!1665 = !DILocalVariable(name: "cost", scope: !1662, file: !3, line: 226, type: !50)
!1666 = !DILocation(line: 226, column: 17, scope: !1667)
!1667 = distinct !DILexicalBlock(scope: !1662, file: !3, line: 226, column: 17)
!1668 = !DILocation(line: 226, column: 17, scope: !1669)
!1669 = distinct !DILexicalBlock(scope: !1667, file: !3, line: 226, column: 17)
!1670 = !DILocation(line: 227, column: 13, scope: !1647)
!1671 = !DILocation(line: 228, column: 9, scope: !1640)
!1672 = !DILocation(line: 220, column: 37, scope: !1634)
!1673 = !DILocation(line: 220, column: 9, scope: !1634)
!1674 = distinct !{!1674, !1637, !1675}
!1675 = !DILocation(line: 228, column: 9, scope: !1630)
!1676 = !DILocation(line: 229, column: 17, scope: !1613)
!1677 = !DILocation(line: 229, column: 26, scope: !1613)
!1678 = !DILocation(line: 229, column: 32, scope: !1613)
!1679 = !DILocation(line: 229, column: 13, scope: !1613)
!1680 = !DILocation(line: 230, column: 17, scope: !1613)
!1681 = !DILocation(line: 230, column: 26, scope: !1613)
!1682 = !DILocation(line: 230, column: 32, scope: !1613)
!1683 = !DILocation(line: 230, column: 13, scope: !1613)
!1684 = !DILocalVariable(name: "cost", scope: !1685, file: !3, line: 231, type: !50)
!1685 = distinct !DILexicalBlock(scope: !1613, file: !3, line: 231, column: 9)
!1686 = !DILocation(line: 231, column: 9, scope: !1685)
!1687 = !DILocation(line: 231, column: 9, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1685, file: !3, line: 231, column: 9)
!1689 = !DILocation(line: 231, column: 9, scope: !1690)
!1690 = distinct !DILexicalBlock(scope: !1688, file: !3, line: 231, column: 9)
!1691 = !DILocation(line: 232, column: 5, scope: !1613)
!1692 = !DILocation(line: 236, column: 15, scope: !1693)
!1693 = distinct !DILexicalBlock(scope: !1607, file: !3, line: 234, column: 5)
!1694 = !DILocation(line: 236, column: 13, scope: !1693)
!1695 = !DILocation(line: 237, column: 15, scope: !1693)
!1696 = !DILocation(line: 237, column: 13, scope: !1693)
!1697 = !DILocation(line: 244, column: 17, scope: !1693)
!1698 = !DILocation(line: 244, column: 20, scope: !1693)
!1699 = !DILocation(line: 244, column: 25, scope: !1693)
!1700 = !DILocation(line: 244, column: 33, scope: !1693)
!1701 = !DILocation(line: 244, column: 43, scope: !1693)
!1702 = !DILocation(line: 244, column: 65, scope: !1693)
!1703 = !DILocation(line: 244, column: 74, scope: !1693)
!1704 = !DILocation(line: 244, column: 78, scope: !1693)
!1705 = !DILocation(line: 244, column: 77, scope: !1693)
!1706 = !DILocation(line: 244, column: 85, scope: !1693)
!1707 = !DILocation(line: 244, column: 84, scope: !1693)
!1708 = !DILocation(line: 244, column: 91, scope: !1693)
!1709 = !DILocation(line: 244, column: 15, scope: !1693)
!1710 = !DILocation(line: 245, column: 32, scope: !1693)
!1711 = !DILocation(line: 245, column: 37, scope: !1693)
!1712 = !DILocation(line: 245, column: 15, scope: !1693)
!1713 = !DILocation(line: 245, column: 13, scope: !1693)
!1714 = !DILocation(line: 246, column: 13, scope: !1715)
!1715 = distinct !DILexicalBlock(scope: !1693, file: !3, line: 246, column: 13)
!1716 = !DILocation(line: 246, column: 19, scope: !1715)
!1717 = !DILocation(line: 246, column: 13, scope: !1693)
!1718 = !DILocalVariable(name: "mvc_fpel", scope: !1719, file: !3, line: 248, type: !1720, align: 64)
!1719 = distinct !DILexicalBlock(scope: !1715, file: !3, line: 247, column: 9)
!1720 = !DICompositeType(tag: DW_TAG_array_type, baseType: !53, size: 512, elements: !1400)
!1721 = !DILocation(line: 248, column: 13, scope: !1719)
!1722 = !DILocation(line: 249, column: 39, scope: !1719)
!1723 = !DILocation(line: 249, column: 49, scope: !1719)
!1724 = !DILocation(line: 249, column: 54, scope: !1719)
!1725 = !DILocation(line: 249, column: 61, scope: !1719)
!1726 = !DILocation(line: 249, column: 71, scope: !1719)
!1727 = !DILocation(line: 249, column: 81, scope: !1719)
!1728 = !DILocation(line: 249, column: 91, scope: !1719)
!1729 = !DILocation(line: 249, column: 13, scope: !1719)
!1730 = !DILocation(line: 250, column: 19, scope: !1719)
!1731 = !DILocalVariable(name: "i", scope: !1732, file: !3, line: 251, type: !50)
!1732 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 251, column: 13)
!1733 = !DILocation(line: 251, column: 22, scope: !1732)
!1734 = !DILocation(line: 251, column: 18, scope: !1732)
!1735 = !DILocation(line: 251, column: 29, scope: !1736)
!1736 = distinct !DILexicalBlock(scope: !1732, file: !3, line: 251, column: 13)
!1737 = !DILocation(line: 251, column: 34, scope: !1736)
!1738 = !DILocation(line: 251, column: 31, scope: !1736)
!1739 = !DILocation(line: 251, column: 13, scope: !1732)
!1740 = !DILocation(line: 253, column: 21, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !1742, file: !3, line: 253, column: 21)
!1742 = distinct !DILexicalBlock(scope: !1736, file: !3, line: 252, column: 13)
!1743 = !DILocation(line: 253, column: 42, scope: !1741)
!1744 = !DILocation(line: 253, column: 46, scope: !1741)
!1745 = !DILocation(line: 253, column: 53, scope: !1741)
!1746 = !DILocation(line: 253, column: 50, scope: !1741)
!1747 = !DILocation(line: 253, column: 21, scope: !1742)
!1748 = !DILocalVariable(name: "mx", scope: !1749, file: !3, line: 255, type: !50)
!1749 = distinct !DILexicalBlock(scope: !1741, file: !3, line: 254, column: 17)
!1750 = !DILocation(line: 255, column: 25, scope: !1749)
!1751 = !DILocation(line: 255, column: 39, scope: !1749)
!1752 = !DILocation(line: 255, column: 40, scope: !1749)
!1753 = !DILocation(line: 255, column: 30, scope: !1749)
!1754 = !DILocalVariable(name: "my", scope: !1749, file: !3, line: 256, type: !50)
!1755 = !DILocation(line: 256, column: 25, scope: !1749)
!1756 = !DILocation(line: 256, column: 39, scope: !1749)
!1757 = !DILocation(line: 256, column: 40, scope: !1749)
!1758 = !DILocation(line: 256, column: 30, scope: !1749)
!1759 = !DILocalVariable(name: "cost", scope: !1749, file: !3, line: 257, type: !50)
!1760 = !DILocation(line: 257, column: 25, scope: !1749)
!1761 = !DILocation(line: 257, column: 32, scope: !1749)
!1762 = !DILocation(line: 257, column: 35, scope: !1749)
!1763 = !DILocation(line: 257, column: 40, scope: !1749)
!1764 = !DILocation(line: 257, column: 48, scope: !1749)
!1765 = !DILocation(line: 257, column: 58, scope: !1749)
!1766 = !DILocation(line: 257, column: 80, scope: !1749)
!1767 = !DILocation(line: 257, column: 89, scope: !1749)
!1768 = !DILocation(line: 257, column: 92, scope: !1749)
!1769 = !DILocation(line: 257, column: 91, scope: !1749)
!1770 = !DILocation(line: 257, column: 99, scope: !1749)
!1771 = !DILocation(line: 257, column: 98, scope: !1749)
!1772 = !DILocation(line: 257, column: 104, scope: !1749)
!1773 = !DILocation(line: 257, column: 115, scope: !1749)
!1774 = !DILocation(line: 257, column: 113, scope: !1749)
!1775 = !DILocation(line: 258, column: 29, scope: !1749)
!1776 = !DILocation(line: 258, column: 34, scope: !1749)
!1777 = !DILocation(line: 258, column: 42, scope: !1749)
!1778 = !DILocation(line: 258, column: 40, scope: !1749)
!1779 = !DILocation(line: 258, column: 26, scope: !1749)
!1780 = !DILocation(line: 259, column: 21, scope: !1781)
!1781 = distinct !DILexicalBlock(scope: !1749, file: !3, line: 259, column: 21)
!1782 = !DILocation(line: 259, column: 21, scope: !1749)
!1783 = !DILocation(line: 260, column: 17, scope: !1749)
!1784 = !DILocation(line: 261, column: 13, scope: !1742)
!1785 = !DILocation(line: 251, column: 42, scope: !1736)
!1786 = !DILocation(line: 251, column: 13, scope: !1736)
!1787 = distinct !{!1787, !1739, !1788}
!1788 = !DILocation(line: 261, column: 13, scope: !1732)
!1789 = !DILocation(line: 262, column: 17, scope: !1790)
!1790 = distinct !DILexicalBlock(scope: !1719, file: !3, line: 262, column: 17)
!1791 = !DILocation(line: 262, column: 22, scope: !1790)
!1792 = !DILocation(line: 262, column: 17, scope: !1719)
!1793 = !DILocation(line: 264, column: 33, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1790, file: !3, line: 263, column: 13)
!1795 = !DILocation(line: 264, column: 38, scope: !1794)
!1796 = !DILocation(line: 264, column: 42, scope: !1794)
!1797 = !DILocation(line: 264, column: 23, scope: !1794)
!1798 = !DILocation(line: 264, column: 21, scope: !1794)
!1799 = !DILocation(line: 265, column: 33, scope: !1794)
!1800 = !DILocation(line: 265, column: 38, scope: !1794)
!1801 = !DILocation(line: 265, column: 42, scope: !1794)
!1802 = !DILocation(line: 265, column: 23, scope: !1794)
!1803 = !DILocation(line: 265, column: 21, scope: !1794)
!1804 = !DILocation(line: 266, column: 13, scope: !1794)
!1805 = !DILocation(line: 267, column: 19, scope: !1719)
!1806 = !DILocation(line: 268, column: 9, scope: !1719)
!1807 = !DILocation(line: 271, column: 9, scope: !1808)
!1808 = distinct !DILexicalBlock(scope: !83, file: !3, line: 271, column: 9)
!1809 = !DILocation(line: 271, column: 9, scope: !83)
!1810 = !DILocalVariable(name: "cost", scope: !1811, file: !3, line: 272, type: !50)
!1811 = distinct !DILexicalBlock(scope: !1808, file: !3, line: 272, column: 9)
!1812 = !DILocation(line: 272, column: 9, scope: !1811)
!1813 = !DILocation(line: 272, column: 9, scope: !1814)
!1814 = distinct !DILexicalBlock(scope: !1811, file: !3, line: 272, column: 9)
!1815 = !DILocation(line: 272, column: 9, scope: !1816)
!1816 = distinct !DILexicalBlock(scope: !1814, file: !3, line: 272, column: 9)
!1817 = !DILocation(line: 274, column: 13, scope: !83)
!1818 = !DILocation(line: 274, column: 16, scope: !83)
!1819 = !DILocation(line: 274, column: 19, scope: !83)
!1820 = !DILocation(line: 274, column: 5, scope: !83)
!1821 = !DILocation(line: 279, column: 19, scope: !1822)
!1822 = distinct !DILexicalBlock(scope: !1823, file: !3, line: 277, column: 9)
!1823 = distinct !DILexicalBlock(scope: !83, file: !3, line: 275, column: 5)
!1824 = !DILocalVariable(name: "i", scope: !1822, file: !3, line: 280, type: !50)
!1825 = !DILocation(line: 280, column: 17, scope: !1822)
!1826 = !DILocation(line: 280, column: 21, scope: !1822)
!1827 = !DILocation(line: 281, column: 13, scope: !1822)
!1828 = !DILocalVariable(name: "pix_base", scope: !1829, file: !3, line: 283, type: !282)
!1829 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 283, column: 17)
!1830 = distinct !DILexicalBlock(scope: !1822, file: !3, line: 282, column: 13)
!1831 = !DILocation(line: 283, column: 17, scope: !1829)
!1832 = !DILocation(line: 284, column: 17, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 284, column: 17)
!1834 = !DILocation(line: 284, column: 17, scope: !1830)
!1835 = !DILocation(line: 285, column: 17, scope: !1836)
!1836 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 285, column: 17)
!1837 = !DILocation(line: 285, column: 17, scope: !1830)
!1838 = !DILocation(line: 286, column: 17, scope: !1839)
!1839 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 286, column: 17)
!1840 = !DILocation(line: 286, column: 17, scope: !1830)
!1841 = !DILocation(line: 287, column: 17, scope: !1842)
!1842 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 287, column: 17)
!1843 = !DILocation(line: 287, column: 17, scope: !1830)
!1844 = !DILocation(line: 288, column: 23, scope: !1845)
!1845 = distinct !DILexicalBlock(scope: !1830, file: !3, line: 288, column: 21)
!1846 = !DILocation(line: 288, column: 28, scope: !1845)
!1847 = !DILocation(line: 288, column: 21, scope: !1830)
!1848 = !DILocation(line: 289, column: 21, scope: !1845)
!1849 = !DILocation(line: 290, column: 25, scope: !1830)
!1850 = !DILocation(line: 290, column: 30, scope: !1830)
!1851 = !DILocation(line: 290, column: 35, scope: !1830)
!1852 = !DILocation(line: 290, column: 21, scope: !1830)
!1853 = !DILocation(line: 291, column: 25, scope: !1830)
!1854 = !DILocation(line: 291, column: 30, scope: !1830)
!1855 = !DILocation(line: 291, column: 35, scope: !1830)
!1856 = !DILocation(line: 291, column: 21, scope: !1830)
!1857 = !DILocation(line: 292, column: 23, scope: !1830)
!1858 = !DILocation(line: 293, column: 13, scope: !1830)
!1859 = !DILocation(line: 293, column: 22, scope: !1822)
!1860 = !DILocation(line: 293, column: 26, scope: !1822)
!1861 = !DILocation(line: 293, column: 29, scope: !1822)
!1862 = !DILocation(line: 0, scope: !1822)
!1863 = distinct !{!1863, !1827, !1864}
!1864 = !DILocation(line: 293, column: 53, scope: !1822)
!1865 = !DILocation(line: 294, column: 19, scope: !1822)
!1866 = !DILocation(line: 295, column: 13, scope: !1822)
!1867 = !DILocation(line: 299, column: 13, scope: !1823)
!1868 = !DILabel(scope: !1869, name: "me_hex2", file: !3, line: 300)
!1869 = distinct !DILexicalBlock(scope: !1823, file: !3, line: 299, column: 13)
!1870 = !DILocation(line: 300, column: 5, scope: !1869)
!1871 = !DILocalVariable(name: "pix_base", scope: !1872, file: !3, line: 321, type: !282)
!1872 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 321, column: 13)
!1873 = !DILocation(line: 321, column: 13, scope: !1872)
!1874 = !DILocalVariable(name: "pix_base", scope: !1875, file: !3, line: 322, type: !282)
!1875 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 322, column: 13)
!1876 = !DILocation(line: 322, column: 13, scope: !1875)
!1877 = !DILocation(line: 323, column: 19, scope: !1869)
!1878 = !DILocation(line: 324, column: 13, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 324, column: 13)
!1880 = !DILocation(line: 324, column: 13, scope: !1869)
!1881 = !DILocation(line: 325, column: 13, scope: !1882)
!1882 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 325, column: 13)
!1883 = !DILocation(line: 325, column: 13, scope: !1869)
!1884 = !DILocation(line: 326, column: 13, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 326, column: 13)
!1886 = !DILocation(line: 326, column: 13, scope: !1869)
!1887 = !DILocation(line: 327, column: 13, scope: !1888)
!1888 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 327, column: 13)
!1889 = !DILocation(line: 327, column: 13, scope: !1869)
!1890 = !DILocation(line: 328, column: 13, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 328, column: 13)
!1892 = !DILocation(line: 328, column: 13, scope: !1869)
!1893 = !DILocation(line: 329, column: 13, scope: !1894)
!1894 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 329, column: 13)
!1895 = !DILocation(line: 329, column: 13, scope: !1869)
!1896 = !DILocation(line: 331, column: 17, scope: !1897)
!1897 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 331, column: 17)
!1898 = !DILocation(line: 331, column: 22, scope: !1897)
!1899 = !DILocation(line: 331, column: 17, scope: !1869)
!1900 = !DILocalVariable(name: "dir", scope: !1901, file: !3, line: 333, type: !50)
!1901 = distinct !DILexicalBlock(scope: !1897, file: !3, line: 332, column: 13)
!1902 = !DILocation(line: 333, column: 21, scope: !1901)
!1903 = !DILocation(line: 333, column: 28, scope: !1901)
!1904 = !DILocation(line: 333, column: 33, scope: !1901)
!1905 = !DILocation(line: 333, column: 36, scope: !1901)
!1906 = !DILocation(line: 334, column: 29, scope: !1901)
!1907 = !DILocation(line: 334, column: 32, scope: !1901)
!1908 = !DILocation(line: 334, column: 24, scope: !1901)
!1909 = !DILocation(line: 334, column: 21, scope: !1901)
!1910 = !DILocation(line: 335, column: 29, scope: !1901)
!1911 = !DILocation(line: 335, column: 32, scope: !1901)
!1912 = !DILocation(line: 335, column: 24, scope: !1901)
!1913 = !DILocation(line: 335, column: 21, scope: !1901)
!1914 = !DILocalVariable(name: "i", scope: !1915, file: !3, line: 338, type: !50)
!1915 = distinct !DILexicalBlock(scope: !1901, file: !3, line: 338, column: 17)
!1916 = !DILocation(line: 338, column: 26, scope: !1915)
!1917 = !DILocation(line: 338, column: 31, scope: !1915)
!1918 = !DILocation(line: 338, column: 41, scope: !1915)
!1919 = !DILocation(line: 338, column: 46, scope: !1915)
!1920 = !DILocation(line: 338, column: 22, scope: !1915)
!1921 = !DILocation(line: 338, column: 51, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1915, file: !3, line: 338, column: 17)
!1923 = !DILocation(line: 338, column: 53, scope: !1922)
!1924 = !DILocation(line: 338, column: 57, scope: !1922)
!1925 = !DILocation(line: 338, column: 60, scope: !1922)
!1926 = !DILocation(line: 0, scope: !1922)
!1927 = !DILocation(line: 338, column: 17, scope: !1915)
!1928 = !DILocalVariable(name: "pix_base", scope: !1929, file: !3, line: 340, type: !282)
!1929 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 340, column: 21)
!1930 = distinct !DILexicalBlock(scope: !1922, file: !3, line: 339, column: 17)
!1931 = !DILocation(line: 340, column: 21, scope: !1929)
!1932 = !DILocation(line: 344, column: 27, scope: !1930)
!1933 = !DILocation(line: 345, column: 21, scope: !1934)
!1934 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 345, column: 21)
!1935 = !DILocation(line: 345, column: 21, scope: !1930)
!1936 = !DILocation(line: 346, column: 21, scope: !1937)
!1937 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 346, column: 21)
!1938 = !DILocation(line: 346, column: 21, scope: !1930)
!1939 = !DILocation(line: 347, column: 21, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 347, column: 21)
!1941 = !DILocation(line: 347, column: 21, scope: !1930)
!1942 = !DILocation(line: 348, column: 27, scope: !1943)
!1943 = distinct !DILexicalBlock(scope: !1930, file: !3, line: 348, column: 25)
!1944 = !DILocation(line: 348, column: 32, scope: !1943)
!1945 = !DILocation(line: 348, column: 25, scope: !1930)
!1946 = !DILocation(line: 349, column: 25, scope: !1943)
!1947 = !DILocation(line: 350, column: 29, scope: !1930)
!1948 = !DILocation(line: 350, column: 34, scope: !1930)
!1949 = !DILocation(line: 350, column: 37, scope: !1930)
!1950 = !DILocation(line: 350, column: 25, scope: !1930)
!1951 = !DILocation(line: 351, column: 34, scope: !1930)
!1952 = !DILocation(line: 351, column: 37, scope: !1930)
!1953 = !DILocation(line: 351, column: 27, scope: !1930)
!1954 = !DILocation(line: 351, column: 25, scope: !1930)
!1955 = !DILocation(line: 352, column: 33, scope: !1930)
!1956 = !DILocation(line: 352, column: 36, scope: !1930)
!1957 = !DILocation(line: 352, column: 28, scope: !1930)
!1958 = !DILocation(line: 352, column: 25, scope: !1930)
!1959 = !DILocation(line: 353, column: 33, scope: !1930)
!1960 = !DILocation(line: 353, column: 36, scope: !1930)
!1961 = !DILocation(line: 353, column: 28, scope: !1930)
!1962 = !DILocation(line: 353, column: 25, scope: !1930)
!1963 = !DILocation(line: 354, column: 17, scope: !1930)
!1964 = !DILocation(line: 338, column: 86, scope: !1922)
!1965 = !DILocation(line: 338, column: 17, scope: !1922)
!1966 = distinct !{!1966, !1927, !1967}
!1967 = !DILocation(line: 354, column: 17, scope: !1915)
!1968 = !DILocation(line: 355, column: 13, scope: !1901)
!1969 = !DILocation(line: 356, column: 19, scope: !1869)
!1970 = !DILocalVariable(name: "dir", scope: !1869, file: !3, line: 359, type: !50)
!1971 = !DILocation(line: 359, column: 17, scope: !1869)
!1972 = !DILocalVariable(name: "pix_base", scope: !1973, file: !3, line: 360, type: !282)
!1973 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 360, column: 13)
!1974 = !DILocation(line: 360, column: 13, scope: !1973)
!1975 = !DILocation(line: 361, column: 13, scope: !1976)
!1976 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 361, column: 13)
!1977 = !DILocation(line: 361, column: 13, scope: !1869)
!1978 = !DILocation(line: 361, column: 13, scope: !1979)
!1979 = distinct !DILexicalBlock(scope: !1976, file: !3, line: 361, column: 13)
!1980 = !DILocation(line: 362, column: 13, scope: !1981)
!1981 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 362, column: 13)
!1982 = !DILocation(line: 362, column: 13, scope: !1869)
!1983 = !DILocation(line: 362, column: 13, scope: !1984)
!1984 = distinct !DILexicalBlock(scope: !1981, file: !3, line: 362, column: 13)
!1985 = !DILocation(line: 363, column: 13, scope: !1986)
!1986 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 363, column: 13)
!1987 = !DILocation(line: 363, column: 13, scope: !1869)
!1988 = !DILocation(line: 363, column: 13, scope: !1989)
!1989 = distinct !DILexicalBlock(scope: !1986, file: !3, line: 363, column: 13)
!1990 = !DILocation(line: 364, column: 13, scope: !1991)
!1991 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 364, column: 13)
!1992 = !DILocation(line: 364, column: 13, scope: !1869)
!1993 = !DILocation(line: 364, column: 13, scope: !1994)
!1994 = distinct !DILexicalBlock(scope: !1991, file: !3, line: 364, column: 13)
!1995 = !DILocalVariable(name: "pix_base", scope: !1996, file: !3, line: 365, type: !282)
!1996 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 365, column: 13)
!1997 = !DILocation(line: 365, column: 13, scope: !1996)
!1998 = !DILocation(line: 366, column: 13, scope: !1999)
!1999 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 366, column: 13)
!2000 = !DILocation(line: 366, column: 13, scope: !1869)
!2001 = !DILocation(line: 366, column: 13, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !1999, file: !3, line: 366, column: 13)
!2003 = !DILocation(line: 367, column: 13, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 367, column: 13)
!2005 = !DILocation(line: 367, column: 13, scope: !1869)
!2006 = !DILocation(line: 367, column: 13, scope: !2007)
!2007 = distinct !DILexicalBlock(scope: !2004, file: !3, line: 367, column: 13)
!2008 = !DILocation(line: 368, column: 13, scope: !2009)
!2009 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 368, column: 13)
!2010 = !DILocation(line: 368, column: 13, scope: !1869)
!2011 = !DILocation(line: 368, column: 13, scope: !2012)
!2012 = distinct !DILexicalBlock(scope: !2009, file: !3, line: 368, column: 13)
!2013 = !DILocation(line: 369, column: 13, scope: !2014)
!2014 = distinct !DILexicalBlock(scope: !1869, file: !3, line: 369, column: 13)
!2015 = !DILocation(line: 369, column: 13, scope: !1869)
!2016 = !DILocation(line: 369, column: 13, scope: !2017)
!2017 = distinct !DILexicalBlock(scope: !2014, file: !3, line: 369, column: 13)
!2018 = !DILocation(line: 370, column: 28, scope: !1869)
!2019 = !DILocation(line: 370, column: 20, scope: !1869)
!2020 = !DILocation(line: 370, column: 17, scope: !1869)
!2021 = !DILocation(line: 371, column: 28, scope: !1869)
!2022 = !DILocation(line: 371, column: 20, scope: !1869)
!2023 = !DILocation(line: 371, column: 17, scope: !1869)
!2024 = !DILocation(line: 372, column: 13, scope: !1869)
!2025 = !DILocalVariable(name: "ucost1", scope: !2026, file: !3, line: 382, type: !50)
!2026 = distinct !DILexicalBlock(scope: !1823, file: !3, line: 376, column: 9)
!2027 = !DILocation(line: 382, column: 17, scope: !2026)
!2028 = !DILocalVariable(name: "ucost2", scope: !2026, file: !3, line: 382, type: !50)
!2029 = !DILocation(line: 382, column: 25, scope: !2026)
!2030 = !DILocalVariable(name: "cross_start", scope: !2026, file: !3, line: 383, type: !50)
!2031 = !DILocation(line: 383, column: 17, scope: !2026)
!2032 = !DILocation(line: 386, column: 22, scope: !2026)
!2033 = !DILocation(line: 386, column: 20, scope: !2026)
!2034 = !DILocation(line: 387, column: 13, scope: !2035)
!2035 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 387, column: 13)
!2036 = !DILocalVariable(name: "pix_base", scope: !2037, file: !3, line: 387, type: !282)
!2037 = distinct !DILexicalBlock(scope: !2035, file: !3, line: 387, column: 13)
!2038 = !DILocation(line: 387, column: 13, scope: !2037)
!2039 = !DILocation(line: 387, column: 13, scope: !2040)
!2040 = distinct !DILexicalBlock(scope: !2037, file: !3, line: 387, column: 13)
!2041 = !DILocation(line: 387, column: 13, scope: !2042)
!2042 = distinct !DILexicalBlock(scope: !2040, file: !3, line: 387, column: 13)
!2043 = !DILocation(line: 387, column: 13, scope: !2044)
!2044 = distinct !DILexicalBlock(scope: !2037, file: !3, line: 387, column: 13)
!2045 = !DILocation(line: 387, column: 13, scope: !2046)
!2046 = distinct !DILexicalBlock(scope: !2044, file: !3, line: 387, column: 13)
!2047 = !DILocation(line: 387, column: 13, scope: !2048)
!2048 = distinct !DILexicalBlock(scope: !2037, file: !3, line: 387, column: 13)
!2049 = !DILocation(line: 387, column: 13, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2048, file: !3, line: 387, column: 13)
!2051 = !DILocation(line: 387, column: 13, scope: !2052)
!2052 = distinct !DILexicalBlock(scope: !2037, file: !3, line: 387, column: 13)
!2053 = !DILocation(line: 387, column: 13, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2052, file: !3, line: 387, column: 13)
!2055 = !DILocation(line: 388, column: 17, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 388, column: 17)
!2057 = !DILocation(line: 388, column: 23, scope: !2056)
!2058 = !DILocation(line: 388, column: 21, scope: !2056)
!2059 = !DILocation(line: 388, column: 17, scope: !2026)
!2060 = !DILocation(line: 389, column: 17, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2056, file: !3, line: 389, column: 17)
!2062 = !DILocalVariable(name: "pix_base", scope: !2063, file: !3, line: 389, type: !282)
!2063 = distinct !DILexicalBlock(scope: !2061, file: !3, line: 389, column: 17)
!2064 = !DILocation(line: 389, column: 17, scope: !2063)
!2065 = !DILocation(line: 389, column: 17, scope: !2066)
!2066 = distinct !DILexicalBlock(scope: !2063, file: !3, line: 389, column: 17)
!2067 = !DILocation(line: 389, column: 17, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2066, file: !3, line: 389, column: 17)
!2069 = !DILocation(line: 389, column: 17, scope: !2070)
!2070 = distinct !DILexicalBlock(scope: !2063, file: !3, line: 389, column: 17)
!2071 = !DILocation(line: 389, column: 17, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2070, file: !3, line: 389, column: 17)
!2073 = !DILocation(line: 389, column: 17, scope: !2074)
!2074 = distinct !DILexicalBlock(scope: !2063, file: !3, line: 389, column: 17)
!2075 = !DILocation(line: 389, column: 17, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !2074, file: !3, line: 389, column: 17)
!2077 = !DILocation(line: 389, column: 17, scope: !2078)
!2078 = distinct !DILexicalBlock(scope: !2063, file: !3, line: 389, column: 17)
!2079 = !DILocation(line: 389, column: 17, scope: !2080)
!2080 = distinct !DILexicalBlock(scope: !2078, file: !3, line: 389, column: 17)
!2081 = !DILocation(line: 391, column: 17, scope: !2082)
!2082 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 391, column: 17)
!2083 = !DILocation(line: 391, column: 25, scope: !2082)
!2084 = !DILocation(line: 391, column: 17, scope: !2026)
!2085 = !DILocation(line: 392, column: 17, scope: !2082)
!2086 = !DILocation(line: 394, column: 22, scope: !2026)
!2087 = !DILocation(line: 394, column: 20, scope: !2026)
!2088 = !DILocation(line: 395, column: 18, scope: !2089)
!2089 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 395, column: 17)
!2090 = !DILocation(line: 395, column: 24, scope: !2089)
!2091 = !DILocation(line: 395, column: 22, scope: !2089)
!2092 = !DILocation(line: 395, column: 29, scope: !2089)
!2093 = !DILocation(line: 395, column: 34, scope: !2089)
!2094 = !DILocation(line: 395, column: 38, scope: !2089)
!2095 = !DILocation(line: 395, column: 37, scope: !2089)
!2096 = !DILocation(line: 395, column: 46, scope: !2089)
!2097 = !DILocation(line: 395, column: 50, scope: !2089)
!2098 = !DILocation(line: 395, column: 49, scope: !2089)
!2099 = !DILocation(line: 395, column: 43, scope: !2089)
!2100 = !DILocation(line: 395, column: 17, scope: !2026)
!2101 = !DILocation(line: 396, column: 17, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !2089, file: !3, line: 396, column: 17)
!2103 = !DILocalVariable(name: "pix_base", scope: !2104, file: !3, line: 396, type: !282)
!2104 = distinct !DILexicalBlock(scope: !2102, file: !3, line: 396, column: 17)
!2105 = !DILocation(line: 396, column: 17, scope: !2104)
!2106 = !DILocation(line: 396, column: 17, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 396, column: 17)
!2108 = !DILocation(line: 396, column: 17, scope: !2109)
!2109 = distinct !DILexicalBlock(scope: !2107, file: !3, line: 396, column: 17)
!2110 = !DILocation(line: 396, column: 17, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 396, column: 17)
!2112 = !DILocation(line: 396, column: 17, scope: !2113)
!2113 = distinct !DILexicalBlock(scope: !2111, file: !3, line: 396, column: 17)
!2114 = !DILocation(line: 396, column: 17, scope: !2115)
!2115 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 396, column: 17)
!2116 = !DILocation(line: 396, column: 17, scope: !2117)
!2117 = distinct !DILexicalBlock(scope: !2115, file: !3, line: 396, column: 17)
!2118 = !DILocation(line: 396, column: 17, scope: !2119)
!2119 = distinct !DILexicalBlock(scope: !2104, file: !3, line: 396, column: 17)
!2120 = !DILocation(line: 396, column: 17, scope: !2121)
!2121 = distinct !DILexicalBlock(scope: !2119, file: !3, line: 396, column: 17)
!2122 = !DILocation(line: 397, column: 17, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 397, column: 17)
!2124 = !DILocation(line: 397, column: 26, scope: !2123)
!2125 = !DILocation(line: 397, column: 23, scope: !2123)
!2126 = !DILocation(line: 397, column: 17, scope: !2026)
!2127 = !DILocation(line: 398, column: 29, scope: !2123)
!2128 = !DILocation(line: 398, column: 17, scope: !2123)
!2129 = !DILocation(line: 399, column: 19, scope: !2026)
!2130 = !DILocation(line: 399, column: 17, scope: !2026)
!2131 = !DILocation(line: 399, column: 30, scope: !2026)
!2132 = !DILocation(line: 399, column: 28, scope: !2026)
!2133 = !DILocation(line: 403, column: 17, scope: !2134)
!2134 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 403, column: 17)
!2135 = !DILocation(line: 403, column: 26, scope: !2134)
!2136 = !DILocation(line: 403, column: 23, scope: !2134)
!2137 = !DILocation(line: 403, column: 33, scope: !2134)
!2138 = !DILocation(line: 403, column: 36, scope: !2134)
!2139 = !DILocation(line: 403, column: 17, scope: !2026)
!2140 = !DILocalVariable(name: "pix_base", scope: !2141, file: !3, line: 405, type: !282)
!2141 = distinct !DILexicalBlock(scope: !2142, file: !3, line: 405, column: 17)
!2142 = distinct !DILexicalBlock(scope: !2134, file: !3, line: 404, column: 13)
!2143 = !DILocation(line: 405, column: 17, scope: !2141)
!2144 = !DILocation(line: 405, column: 17, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 405, column: 17)
!2146 = !DILocation(line: 405, column: 17, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !2145, file: !3, line: 405, column: 17)
!2148 = !DILocation(line: 405, column: 17, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 405, column: 17)
!2150 = !DILocation(line: 405, column: 17, scope: !2151)
!2151 = distinct !DILexicalBlock(scope: !2149, file: !3, line: 405, column: 17)
!2152 = !DILocation(line: 405, column: 17, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 405, column: 17)
!2154 = !DILocation(line: 405, column: 17, scope: !2155)
!2155 = distinct !DILexicalBlock(scope: !2153, file: !3, line: 405, column: 17)
!2156 = !DILocation(line: 405, column: 17, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2141, file: !3, line: 405, column: 17)
!2158 = !DILocation(line: 405, column: 17, scope: !2159)
!2159 = distinct !DILexicalBlock(scope: !2157, file: !3, line: 405, column: 17)
!2160 = !DILocalVariable(name: "pix_base", scope: !2161, file: !3, line: 406, type: !282)
!2161 = distinct !DILexicalBlock(scope: !2142, file: !3, line: 406, column: 17)
!2162 = !DILocation(line: 406, column: 17, scope: !2161)
!2163 = !DILocation(line: 406, column: 17, scope: !2164)
!2164 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 406, column: 17)
!2165 = !DILocation(line: 406, column: 17, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2164, file: !3, line: 406, column: 17)
!2167 = !DILocation(line: 406, column: 17, scope: !2168)
!2168 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 406, column: 17)
!2169 = !DILocation(line: 406, column: 17, scope: !2170)
!2170 = distinct !DILexicalBlock(scope: !2168, file: !3, line: 406, column: 17)
!2171 = !DILocation(line: 406, column: 17, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 406, column: 17)
!2173 = !DILocation(line: 406, column: 17, scope: !2174)
!2174 = distinct !DILexicalBlock(scope: !2172, file: !3, line: 406, column: 17)
!2175 = !DILocation(line: 406, column: 17, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2161, file: !3, line: 406, column: 17)
!2177 = !DILocation(line: 406, column: 17, scope: !2178)
!2178 = distinct !DILexicalBlock(scope: !2176, file: !3, line: 406, column: 17)
!2179 = !DILocation(line: 407, column: 21, scope: !2180)
!2180 = distinct !DILexicalBlock(scope: !2142, file: !3, line: 407, column: 21)
!2181 = !DILocation(line: 407, column: 30, scope: !2180)
!2182 = !DILocation(line: 407, column: 27, scope: !2180)
!2183 = !DILocation(line: 407, column: 37, scope: !2180)
!2184 = !DILocation(line: 407, column: 40, scope: !2180)
!2185 = !DILocation(line: 407, column: 21, scope: !2142)
!2186 = !DILocation(line: 408, column: 21, scope: !2180)
!2187 = !DILocation(line: 409, column: 21, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2142, file: !3, line: 409, column: 21)
!2189 = !DILocation(line: 409, column: 30, scope: !2188)
!2190 = !DILocation(line: 409, column: 27, scope: !2188)
!2191 = !DILocation(line: 409, column: 21, scope: !2142)
!2192 = !DILocalVariable(name: "range", scope: !2193, file: !3, line: 411, type: !50)
!2193 = distinct !DILexicalBlock(scope: !2188, file: !3, line: 410, column: 17)
!2194 = !DILocation(line: 411, column: 25, scope: !2193)
!2195 = !DILocation(line: 411, column: 34, scope: !2193)
!2196 = !DILocation(line: 411, column: 44, scope: !2193)
!2197 = !DILocation(line: 411, column: 49, scope: !2193)
!2198 = !DILocalVariable(name: "i", scope: !2199, file: !3, line: 412, type: !50)
!2199 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 412, column: 21)
!2200 = !DILocation(line: 412, column: 21, scope: !2199)
!2201 = !DILocation(line: 412, column: 21, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 412, column: 21)
!2203 = !DILocation(line: 412, column: 21, scope: !2204)
!2204 = distinct !DILexicalBlock(scope: !2205, file: !3, line: 412, column: 21)
!2205 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 412, column: 21)
!2206 = !DILocation(line: 412, column: 21, scope: !2205)
!2207 = !DILocalVariable(name: "pix_base", scope: !2208, file: !3, line: 412, type: !282)
!2208 = distinct !DILexicalBlock(scope: !2204, file: !3, line: 412, column: 21)
!2209 = !DILocation(line: 412, column: 21, scope: !2208)
!2210 = !DILocation(line: 412, column: 21, scope: !2211)
!2211 = distinct !DILexicalBlock(scope: !2208, file: !3, line: 412, column: 21)
!2212 = !DILocation(line: 412, column: 21, scope: !2213)
!2213 = distinct !DILexicalBlock(scope: !2211, file: !3, line: 412, column: 21)
!2214 = !DILocation(line: 412, column: 21, scope: !2215)
!2215 = distinct !DILexicalBlock(scope: !2208, file: !3, line: 412, column: 21)
!2216 = !DILocation(line: 412, column: 21, scope: !2217)
!2217 = distinct !DILexicalBlock(scope: !2215, file: !3, line: 412, column: 21)
!2218 = !DILocation(line: 412, column: 21, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2208, file: !3, line: 412, column: 21)
!2220 = !DILocation(line: 412, column: 21, scope: !2221)
!2221 = distinct !DILexicalBlock(scope: !2219, file: !3, line: 412, column: 21)
!2222 = !DILocation(line: 412, column: 21, scope: !2223)
!2223 = distinct !DILexicalBlock(scope: !2208, file: !3, line: 412, column: 21)
!2224 = !DILocation(line: 412, column: 21, scope: !2225)
!2225 = distinct !DILexicalBlock(scope: !2223, file: !3, line: 412, column: 21)
!2226 = distinct !{!2226, !2206, !2206}
!2227 = !DILocation(line: 412, column: 21, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2229, file: !3, line: 412, column: 21)
!2229 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 412, column: 21)
!2230 = !DILocation(line: 412, column: 21, scope: !2229)
!2231 = !DILocation(line: 412, column: 21, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2233, file: !3, line: 412, column: 21)
!2233 = distinct !DILexicalBlock(scope: !2228, file: !3, line: 412, column: 21)
!2234 = !DILocation(line: 412, column: 21, scope: !2233)
!2235 = !DILocalVariable(name: "cost", scope: !2236, file: !3, line: 412, type: !50)
!2236 = distinct !DILexicalBlock(scope: !2232, file: !3, line: 412, column: 21)
!2237 = !DILocation(line: 412, column: 21, scope: !2236)
!2238 = !DILocation(line: 412, column: 21, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2236, file: !3, line: 412, column: 21)
!2240 = !DILocation(line: 412, column: 21, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2239, file: !3, line: 412, column: 21)
!2242 = !DILocation(line: 412, column: 21, scope: !2243)
!2243 = distinct !DILexicalBlock(scope: !2233, file: !3, line: 412, column: 21)
!2244 = !DILocalVariable(name: "cost", scope: !2245, file: !3, line: 412, type: !50)
!2245 = distinct !DILexicalBlock(scope: !2243, file: !3, line: 412, column: 21)
!2246 = !DILocation(line: 412, column: 21, scope: !2245)
!2247 = !DILocation(line: 412, column: 21, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2245, file: !3, line: 412, column: 21)
!2249 = !DILocation(line: 412, column: 21, scope: !2250)
!2250 = distinct !DILexicalBlock(scope: !2248, file: !3, line: 412, column: 21)
!2251 = distinct !{!2251, !2230, !2230}
!2252 = !DILocation(line: 412, column: 21, scope: !2253)
!2253 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 412, column: 21)
!2254 = !DILocation(line: 412, column: 21, scope: !2255)
!2255 = distinct !DILexicalBlock(scope: !2256, file: !3, line: 412, column: 21)
!2256 = distinct !DILexicalBlock(scope: !2253, file: !3, line: 412, column: 21)
!2257 = !DILocation(line: 412, column: 21, scope: !2256)
!2258 = !DILocalVariable(name: "pix_base", scope: !2259, file: !3, line: 412, type: !282)
!2259 = distinct !DILexicalBlock(scope: !2255, file: !3, line: 412, column: 21)
!2260 = !DILocation(line: 412, column: 21, scope: !2259)
!2261 = !DILocation(line: 412, column: 21, scope: !2262)
!2262 = distinct !DILexicalBlock(scope: !2259, file: !3, line: 412, column: 21)
!2263 = !DILocation(line: 412, column: 21, scope: !2264)
!2264 = distinct !DILexicalBlock(scope: !2262, file: !3, line: 412, column: 21)
!2265 = !DILocation(line: 412, column: 21, scope: !2266)
!2266 = distinct !DILexicalBlock(scope: !2259, file: !3, line: 412, column: 21)
!2267 = !DILocation(line: 412, column: 21, scope: !2268)
!2268 = distinct !DILexicalBlock(scope: !2266, file: !3, line: 412, column: 21)
!2269 = !DILocation(line: 412, column: 21, scope: !2270)
!2270 = distinct !DILexicalBlock(scope: !2259, file: !3, line: 412, column: 21)
!2271 = !DILocation(line: 412, column: 21, scope: !2272)
!2272 = distinct !DILexicalBlock(scope: !2270, file: !3, line: 412, column: 21)
!2273 = !DILocation(line: 412, column: 21, scope: !2274)
!2274 = distinct !DILexicalBlock(scope: !2259, file: !3, line: 412, column: 21)
!2275 = !DILocation(line: 412, column: 21, scope: !2276)
!2276 = distinct !DILexicalBlock(scope: !2274, file: !3, line: 412, column: 21)
!2277 = distinct !{!2277, !2257, !2257}
!2278 = !DILocation(line: 412, column: 21, scope: !2279)
!2279 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 412, column: 21)
!2280 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 412, column: 21)
!2281 = !DILocation(line: 412, column: 21, scope: !2280)
!2282 = !DILocation(line: 412, column: 21, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2284, file: !3, line: 412, column: 21)
!2284 = distinct !DILexicalBlock(scope: !2279, file: !3, line: 412, column: 21)
!2285 = !DILocation(line: 412, column: 21, scope: !2284)
!2286 = !DILocalVariable(name: "cost", scope: !2287, file: !3, line: 412, type: !50)
!2287 = distinct !DILexicalBlock(scope: !2283, file: !3, line: 412, column: 21)
!2288 = !DILocation(line: 412, column: 21, scope: !2287)
!2289 = !DILocation(line: 412, column: 21, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2287, file: !3, line: 412, column: 21)
!2291 = !DILocation(line: 412, column: 21, scope: !2292)
!2292 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 412, column: 21)
!2293 = !DILocation(line: 412, column: 21, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2284, file: !3, line: 412, column: 21)
!2295 = !DILocalVariable(name: "cost", scope: !2296, file: !3, line: 412, type: !50)
!2296 = distinct !DILexicalBlock(scope: !2294, file: !3, line: 412, column: 21)
!2297 = !DILocation(line: 412, column: 21, scope: !2296)
!2298 = !DILocation(line: 412, column: 21, scope: !2299)
!2299 = distinct !DILexicalBlock(scope: !2296, file: !3, line: 412, column: 21)
!2300 = !DILocation(line: 412, column: 21, scope: !2301)
!2301 = distinct !DILexicalBlock(scope: !2299, file: !3, line: 412, column: 21)
!2302 = distinct !{!2302, !2281, !2281}
!2303 = !DILocalVariable(name: "pix_base", scope: !2304, file: !3, line: 413, type: !282)
!2304 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 413, column: 21)
!2305 = !DILocation(line: 413, column: 21, scope: !2304)
!2306 = !DILocation(line: 413, column: 21, scope: !2307)
!2307 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 413, column: 21)
!2308 = !DILocation(line: 413, column: 21, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2307, file: !3, line: 413, column: 21)
!2310 = !DILocation(line: 413, column: 21, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 413, column: 21)
!2312 = !DILocation(line: 413, column: 21, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !2311, file: !3, line: 413, column: 21)
!2314 = !DILocation(line: 413, column: 21, scope: !2315)
!2315 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 413, column: 21)
!2316 = !DILocation(line: 413, column: 21, scope: !2317)
!2317 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 413, column: 21)
!2318 = !DILocation(line: 413, column: 21, scope: !2319)
!2319 = distinct !DILexicalBlock(scope: !2304, file: !3, line: 413, column: 21)
!2320 = !DILocation(line: 413, column: 21, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2319, file: !3, line: 413, column: 21)
!2322 = !DILocalVariable(name: "pix_base", scope: !2323, file: !3, line: 414, type: !282)
!2323 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 414, column: 21)
!2324 = !DILocation(line: 414, column: 21, scope: !2323)
!2325 = !DILocation(line: 414, column: 21, scope: !2326)
!2326 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 414, column: 21)
!2327 = !DILocation(line: 414, column: 21, scope: !2328)
!2328 = distinct !DILexicalBlock(scope: !2326, file: !3, line: 414, column: 21)
!2329 = !DILocation(line: 414, column: 21, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 414, column: 21)
!2331 = !DILocation(line: 414, column: 21, scope: !2332)
!2332 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 414, column: 21)
!2333 = !DILocation(line: 414, column: 21, scope: !2334)
!2334 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 414, column: 21)
!2335 = !DILocation(line: 414, column: 21, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2334, file: !3, line: 414, column: 21)
!2337 = !DILocation(line: 414, column: 21, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2323, file: !3, line: 414, column: 21)
!2339 = !DILocation(line: 414, column: 21, scope: !2340)
!2340 = distinct !DILexicalBlock(scope: !2338, file: !3, line: 414, column: 21)
!2341 = !DILocation(line: 415, column: 25, scope: !2342)
!2342 = distinct !DILexicalBlock(scope: !2193, file: !3, line: 415, column: 25)
!2343 = !DILocation(line: 415, column: 34, scope: !2342)
!2344 = !DILocation(line: 415, column: 31, scope: !2342)
!2345 = !DILocation(line: 415, column: 25, scope: !2193)
!2346 = !DILocation(line: 416, column: 25, scope: !2342)
!2347 = !DILocation(line: 417, column: 35, scope: !2193)
!2348 = !DILocation(line: 417, column: 41, scope: !2193)
!2349 = !DILocation(line: 417, column: 33, scope: !2193)
!2350 = !DILocation(line: 418, column: 17, scope: !2193)
!2351 = !DILocation(line: 419, column: 13, scope: !2142)
!2352 = !DILocation(line: 422, column: 17, scope: !2353)
!2353 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 422, column: 17)
!2354 = !DILocation(line: 422, column: 17, scope: !2026)
!2355 = !DILocalVariable(name: "mvd", scope: !2356, file: !3, line: 434, type: !50)
!2356 = distinct !DILexicalBlock(scope: !2353, file: !3, line: 423, column: 13)
!2357 = !DILocation(line: 434, column: 21, scope: !2356)
!2358 = !DILocalVariable(name: "sad_ctx", scope: !2356, file: !3, line: 435, type: !50)
!2359 = !DILocation(line: 435, column: 21, scope: !2356)
!2360 = !DILocalVariable(name: "mvd_ctx", scope: !2356, file: !3, line: 435, type: !50)
!2361 = !DILocation(line: 435, column: 30, scope: !2356)
!2362 = !DILocalVariable(name: "denom", scope: !2356, file: !3, line: 436, type: !50)
!2363 = !DILocation(line: 436, column: 21, scope: !2356)
!2364 = !DILocation(line: 438, column: 21, scope: !2365)
!2365 = distinct !DILexicalBlock(scope: !2356, file: !3, line: 438, column: 21)
!2366 = !DILocation(line: 438, column: 27, scope: !2365)
!2367 = !DILocation(line: 438, column: 21, scope: !2356)
!2368 = !DILocation(line: 440, column: 25, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2370, file: !3, line: 440, column: 25)
!2370 = distinct !DILexicalBlock(scope: !2365, file: !3, line: 439, column: 17)
!2371 = !DILocation(line: 440, column: 33, scope: !2369)
!2372 = !DILocation(line: 440, column: 25, scope: !2370)
!2373 = !DILocation(line: 443, column: 29, scope: !2369)
!2374 = !DILocation(line: 443, column: 25, scope: !2369)
!2375 = !DILocation(line: 445, column: 36, scope: !2369)
!2376 = !DILocation(line: 445, column: 39, scope: !2369)
!2377 = !DILocation(line: 445, column: 48, scope: !2369)
!2378 = !DILocation(line: 445, column: 46, scope: !2369)
!2379 = !DILocation(line: 445, column: 31, scope: !2369)
!2380 = !DILocation(line: 446, column: 36, scope: !2369)
!2381 = !DILocation(line: 446, column: 39, scope: !2369)
!2382 = !DILocation(line: 446, column: 48, scope: !2369)
!2383 = !DILocation(line: 446, column: 46, scope: !2369)
!2384 = !DILocation(line: 446, column: 31, scope: !2369)
!2385 = !DILocation(line: 446, column: 29, scope: !2369)
!2386 = !DILocation(line: 445, column: 29, scope: !2369)
!2387 = !DILocation(line: 447, column: 17, scope: !2370)
!2388 = !DILocation(line: 453, column: 29, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2365, file: !3, line: 449, column: 17)
!2390 = !DILocation(line: 453, column: 35, scope: !2389)
!2391 = !DILocation(line: 453, column: 27, scope: !2389)
!2392 = !DILocation(line: 454, column: 25, scope: !2389)
!2393 = !DILocation(line: 455, column: 25, scope: !2394)
!2394 = distinct !DILexicalBlock(scope: !2389, file: !3, line: 455, column: 25)
!2395 = !DILocation(line: 455, column: 33, scope: !2394)
!2396 = !DILocation(line: 455, column: 25, scope: !2389)
!2397 = !DILocation(line: 457, column: 36, scope: !2398)
!2398 = distinct !DILexicalBlock(scope: !2394, file: !3, line: 456, column: 21)
!2399 = !DILocation(line: 457, column: 39, scope: !2398)
!2400 = !DILocation(line: 457, column: 48, scope: !2398)
!2401 = !DILocation(line: 457, column: 46, scope: !2398)
!2402 = !DILocation(line: 457, column: 31, scope: !2398)
!2403 = !DILocation(line: 458, column: 36, scope: !2398)
!2404 = !DILocation(line: 458, column: 39, scope: !2398)
!2405 = !DILocation(line: 458, column: 48, scope: !2398)
!2406 = !DILocation(line: 458, column: 46, scope: !2398)
!2407 = !DILocation(line: 458, column: 31, scope: !2398)
!2408 = !DILocation(line: 458, column: 29, scope: !2398)
!2409 = !DILocation(line: 457, column: 29, scope: !2398)
!2410 = !DILocation(line: 459, column: 30, scope: !2398)
!2411 = !DILocation(line: 460, column: 21, scope: !2398)
!2412 = !DILocation(line: 461, column: 55, scope: !2389)
!2413 = !DILocation(line: 461, column: 60, scope: !2389)
!2414 = !DILocation(line: 461, column: 28, scope: !2389)
!2415 = !DILocation(line: 461, column: 25, scope: !2389)
!2416 = !DILocation(line: 464, column: 27, scope: !2356)
!2417 = !DILocation(line: 465, column: 27, scope: !2356)
!2418 = !DILocation(line: 466, column: 27, scope: !2356)
!2419 = !DILocation(line: 464, column: 25, scope: !2356)
!2420 = !DILocation(line: 467, column: 27, scope: !2356)
!2421 = !DILocation(line: 467, column: 36, scope: !2356)
!2422 = !DILocation(line: 467, column: 35, scope: !2356)
!2423 = !DILocation(line: 467, column: 31, scope: !2356)
!2424 = !DILocation(line: 468, column: 27, scope: !2356)
!2425 = !DILocation(line: 468, column: 36, scope: !2356)
!2426 = !DILocation(line: 468, column: 35, scope: !2356)
!2427 = !DILocation(line: 468, column: 31, scope: !2356)
!2428 = !DILocation(line: 469, column: 27, scope: !2356)
!2429 = !DILocation(line: 469, column: 36, scope: !2356)
!2430 = !DILocation(line: 469, column: 35, scope: !2356)
!2431 = !DILocation(line: 469, column: 31, scope: !2356)
!2432 = !DILocation(line: 467, column: 25, scope: !2356)
!2433 = !DILocation(line: 471, column: 30, scope: !2356)
!2434 = !DILocation(line: 471, column: 53, scope: !2356)
!2435 = !DILocation(line: 471, column: 43, scope: !2356)
!2436 = !DILocation(line: 471, column: 62, scope: !2356)
!2437 = !DILocation(line: 471, column: 41, scope: !2356)
!2438 = !DILocation(line: 471, column: 71, scope: !2356)
!2439 = !DILocation(line: 471, column: 28, scope: !2356)
!2440 = !DILocation(line: 472, column: 13, scope: !2356)
!2441 = !DILocalVariable(name: "i", scope: !2442, file: !3, line: 476, type: !50)
!2442 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 476, column: 13)
!2443 = !DILocation(line: 476, column: 13, scope: !2442)
!2444 = !DILocation(line: 476, column: 13, scope: !2445)
!2445 = distinct !DILexicalBlock(scope: !2442, file: !3, line: 476, column: 13)
!2446 = !DILocation(line: 476, column: 13, scope: !2447)
!2447 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 476, column: 13)
!2448 = distinct !DILexicalBlock(scope: !2445, file: !3, line: 476, column: 13)
!2449 = !DILocation(line: 476, column: 13, scope: !2448)
!2450 = !DILocalVariable(name: "pix_base", scope: !2451, file: !3, line: 476, type: !282)
!2451 = distinct !DILexicalBlock(scope: !2447, file: !3, line: 476, column: 13)
!2452 = !DILocation(line: 476, column: 13, scope: !2451)
!2453 = !DILocation(line: 476, column: 13, scope: !2454)
!2454 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 476, column: 13)
!2455 = !DILocation(line: 476, column: 13, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !2454, file: !3, line: 476, column: 13)
!2457 = !DILocation(line: 476, column: 13, scope: !2458)
!2458 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 476, column: 13)
!2459 = !DILocation(line: 476, column: 13, scope: !2460)
!2460 = distinct !DILexicalBlock(scope: !2458, file: !3, line: 476, column: 13)
!2461 = !DILocation(line: 476, column: 13, scope: !2462)
!2462 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 476, column: 13)
!2463 = !DILocation(line: 476, column: 13, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2462, file: !3, line: 476, column: 13)
!2465 = !DILocation(line: 476, column: 13, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2451, file: !3, line: 476, column: 13)
!2467 = !DILocation(line: 476, column: 13, scope: !2468)
!2468 = distinct !DILexicalBlock(scope: !2466, file: !3, line: 476, column: 13)
!2469 = distinct !{!2469, !2449, !2449}
!2470 = !DILocation(line: 476, column: 13, scope: !2471)
!2471 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 476, column: 13)
!2472 = distinct !DILexicalBlock(scope: !2442, file: !3, line: 476, column: 13)
!2473 = !DILocation(line: 476, column: 13, scope: !2472)
!2474 = !DILocation(line: 476, column: 13, scope: !2475)
!2475 = distinct !DILexicalBlock(scope: !2476, file: !3, line: 476, column: 13)
!2476 = distinct !DILexicalBlock(scope: !2471, file: !3, line: 476, column: 13)
!2477 = !DILocation(line: 476, column: 13, scope: !2476)
!2478 = !DILocalVariable(name: "cost", scope: !2479, file: !3, line: 476, type: !50)
!2479 = distinct !DILexicalBlock(scope: !2475, file: !3, line: 476, column: 13)
!2480 = !DILocation(line: 476, column: 13, scope: !2479)
!2481 = !DILocation(line: 476, column: 13, scope: !2482)
!2482 = distinct !DILexicalBlock(scope: !2479, file: !3, line: 476, column: 13)
!2483 = !DILocation(line: 476, column: 13, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2482, file: !3, line: 476, column: 13)
!2485 = !DILocation(line: 476, column: 13, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2476, file: !3, line: 476, column: 13)
!2487 = !DILocalVariable(name: "cost", scope: !2488, file: !3, line: 476, type: !50)
!2488 = distinct !DILexicalBlock(scope: !2486, file: !3, line: 476, column: 13)
!2489 = !DILocation(line: 476, column: 13, scope: !2488)
!2490 = !DILocation(line: 476, column: 13, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2488, file: !3, line: 476, column: 13)
!2492 = !DILocation(line: 476, column: 13, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2491, file: !3, line: 476, column: 13)
!2494 = distinct !{!2494, !2473, !2473}
!2495 = !DILocation(line: 476, column: 13, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2442, file: !3, line: 476, column: 13)
!2497 = !DILocation(line: 476, column: 13, scope: !2498)
!2498 = distinct !DILexicalBlock(scope: !2499, file: !3, line: 476, column: 13)
!2499 = distinct !DILexicalBlock(scope: !2496, file: !3, line: 476, column: 13)
!2500 = !DILocation(line: 476, column: 13, scope: !2499)
!2501 = !DILocalVariable(name: "pix_base", scope: !2502, file: !3, line: 476, type: !282)
!2502 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 476, column: 13)
!2503 = !DILocation(line: 476, column: 13, scope: !2502)
!2504 = !DILocation(line: 476, column: 13, scope: !2505)
!2505 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 476, column: 13)
!2506 = !DILocation(line: 476, column: 13, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2505, file: !3, line: 476, column: 13)
!2508 = !DILocation(line: 476, column: 13, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 476, column: 13)
!2510 = !DILocation(line: 476, column: 13, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2509, file: !3, line: 476, column: 13)
!2512 = !DILocation(line: 476, column: 13, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 476, column: 13)
!2514 = !DILocation(line: 476, column: 13, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2513, file: !3, line: 476, column: 13)
!2516 = !DILocation(line: 476, column: 13, scope: !2517)
!2517 = distinct !DILexicalBlock(scope: !2502, file: !3, line: 476, column: 13)
!2518 = !DILocation(line: 476, column: 13, scope: !2519)
!2519 = distinct !DILexicalBlock(scope: !2517, file: !3, line: 476, column: 13)
!2520 = distinct !{!2520, !2500, !2500}
!2521 = !DILocation(line: 476, column: 13, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2523, file: !3, line: 476, column: 13)
!2523 = distinct !DILexicalBlock(scope: !2442, file: !3, line: 476, column: 13)
!2524 = !DILocation(line: 476, column: 13, scope: !2523)
!2525 = !DILocation(line: 476, column: 13, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !2527, file: !3, line: 476, column: 13)
!2527 = distinct !DILexicalBlock(scope: !2522, file: !3, line: 476, column: 13)
!2528 = !DILocation(line: 476, column: 13, scope: !2527)
!2529 = !DILocalVariable(name: "cost", scope: !2530, file: !3, line: 476, type: !50)
!2530 = distinct !DILexicalBlock(scope: !2526, file: !3, line: 476, column: 13)
!2531 = !DILocation(line: 476, column: 13, scope: !2530)
!2532 = !DILocation(line: 476, column: 13, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !2530, file: !3, line: 476, column: 13)
!2534 = !DILocation(line: 476, column: 13, scope: !2535)
!2535 = distinct !DILexicalBlock(scope: !2533, file: !3, line: 476, column: 13)
!2536 = !DILocation(line: 476, column: 13, scope: !2537)
!2537 = distinct !DILexicalBlock(scope: !2527, file: !3, line: 476, column: 13)
!2538 = !DILocalVariable(name: "cost", scope: !2539, file: !3, line: 476, type: !50)
!2539 = distinct !DILexicalBlock(scope: !2537, file: !3, line: 476, column: 13)
!2540 = !DILocation(line: 476, column: 13, scope: !2539)
!2541 = !DILocation(line: 476, column: 13, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2539, file: !3, line: 476, column: 13)
!2543 = !DILocation(line: 476, column: 13, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2542, file: !3, line: 476, column: 13)
!2545 = distinct !{!2545, !2524, !2524}
!2546 = !DILocalVariable(name: "pix_base", scope: !2547, file: !3, line: 478, type: !282)
!2547 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 478, column: 13)
!2548 = !DILocation(line: 478, column: 13, scope: !2547)
!2549 = !DILocation(line: 478, column: 13, scope: !2550)
!2550 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 478, column: 13)
!2551 = !DILocation(line: 478, column: 13, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2550, file: !3, line: 478, column: 13)
!2553 = !DILocation(line: 478, column: 13, scope: !2554)
!2554 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 478, column: 13)
!2555 = !DILocation(line: 478, column: 13, scope: !2556)
!2556 = distinct !DILexicalBlock(scope: !2554, file: !3, line: 478, column: 13)
!2557 = !DILocation(line: 478, column: 13, scope: !2558)
!2558 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 478, column: 13)
!2559 = !DILocation(line: 478, column: 13, scope: !2560)
!2560 = distinct !DILexicalBlock(scope: !2558, file: !3, line: 478, column: 13)
!2561 = !DILocation(line: 478, column: 13, scope: !2562)
!2562 = distinct !DILexicalBlock(scope: !2547, file: !3, line: 478, column: 13)
!2563 = !DILocation(line: 478, column: 13, scope: !2564)
!2564 = distinct !DILexicalBlock(scope: !2562, file: !3, line: 478, column: 13)
!2565 = !DILocation(line: 481, column: 19, scope: !2026)
!2566 = !DILocation(line: 481, column: 17, scope: !2026)
!2567 = !DILocation(line: 481, column: 30, scope: !2026)
!2568 = !DILocation(line: 481, column: 28, scope: !2026)
!2569 = !DILocalVariable(name: "p_cost_omvx", scope: !2026, file: !3, line: 482, type: !1569)
!2570 = !DILocation(line: 482, column: 29, scope: !2026)
!2571 = !DILocation(line: 482, column: 43, scope: !2026)
!2572 = !DILocation(line: 482, column: 56, scope: !2026)
!2573 = !DILocation(line: 482, column: 59, scope: !2026)
!2574 = !DILocation(line: 482, column: 54, scope: !2026)
!2575 = !DILocalVariable(name: "p_cost_omvy", scope: !2026, file: !3, line: 483, type: !1569)
!2576 = !DILocation(line: 483, column: 29, scope: !2026)
!2577 = !DILocation(line: 483, column: 43, scope: !2026)
!2578 = !DILocation(line: 483, column: 56, scope: !2026)
!2579 = !DILocation(line: 483, column: 59, scope: !2026)
!2580 = !DILocation(line: 483, column: 54, scope: !2026)
!2581 = !DILocalVariable(name: "i", scope: !2026, file: !3, line: 484, type: !50)
!2582 = !DILocation(line: 484, column: 17, scope: !2026)
!2583 = !DILocation(line: 485, column: 13, scope: !2026)
!2584 = !DILocation(line: 494, column: 23, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2586, file: !3, line: 494, column: 21)
!2586 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 486, column: 13)
!2587 = !DILocation(line: 494, column: 22, scope: !2585)
!2588 = !DILocation(line: 494, column: 27, scope: !2585)
!2589 = !DILocation(line: 494, column: 25, scope: !2585)
!2590 = !DILocation(line: 494, column: 21, scope: !2586)
!2591 = !DILocalVariable(name: "j", scope: !2592, file: !3, line: 497, type: !50)
!2592 = distinct !DILexicalBlock(scope: !2593, file: !3, line: 497, column: 21)
!2593 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 496, column: 17)
!2594 = !DILocation(line: 497, column: 30, scope: !2592)
!2595 = !DILocation(line: 497, column: 26, scope: !2592)
!2596 = !DILocation(line: 497, column: 37, scope: !2597)
!2597 = distinct !DILexicalBlock(scope: !2592, file: !3, line: 497, column: 21)
!2598 = !DILocation(line: 497, column: 39, scope: !2597)
!2599 = !DILocation(line: 497, column: 21, scope: !2592)
!2600 = !DILocalVariable(name: "mx", scope: !2601, file: !3, line: 499, type: !50)
!2601 = distinct !DILexicalBlock(scope: !2597, file: !3, line: 498, column: 21)
!2602 = !DILocation(line: 499, column: 29, scope: !2601)
!2603 = !DILocation(line: 499, column: 34, scope: !2601)
!2604 = !DILocation(line: 499, column: 45, scope: !2601)
!2605 = !DILocation(line: 499, column: 40, scope: !2601)
!2606 = !DILocation(line: 499, column: 51, scope: !2601)
!2607 = !DILocation(line: 499, column: 50, scope: !2601)
!2608 = !DILocation(line: 499, column: 38, scope: !2601)
!2609 = !DILocalVariable(name: "my", scope: !2601, file: !3, line: 500, type: !50)
!2610 = !DILocation(line: 500, column: 29, scope: !2601)
!2611 = !DILocation(line: 500, column: 34, scope: !2601)
!2612 = !DILocation(line: 500, column: 45, scope: !2601)
!2613 = !DILocation(line: 500, column: 40, scope: !2601)
!2614 = !DILocation(line: 500, column: 51, scope: !2601)
!2615 = !DILocation(line: 500, column: 50, scope: !2601)
!2616 = !DILocation(line: 500, column: 38, scope: !2601)
!2617 = !DILocation(line: 501, column: 29, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2601, file: !3, line: 501, column: 29)
!2619 = !DILocation(line: 501, column: 29, scope: !2601)
!2620 = !DILocalVariable(name: "cost", scope: !2621, file: !3, line: 502, type: !50)
!2621 = distinct !DILexicalBlock(scope: !2618, file: !3, line: 502, column: 29)
!2622 = !DILocation(line: 502, column: 29, scope: !2621)
!2623 = !DILocation(line: 502, column: 29, scope: !2624)
!2624 = distinct !DILexicalBlock(scope: !2621, file: !3, line: 502, column: 29)
!2625 = !DILocation(line: 502, column: 29, scope: !2626)
!2626 = distinct !DILexicalBlock(scope: !2624, file: !3, line: 502, column: 29)
!2627 = !DILocation(line: 503, column: 21, scope: !2601)
!2628 = !DILocation(line: 497, column: 46, scope: !2597)
!2629 = !DILocation(line: 497, column: 21, scope: !2597)
!2630 = distinct !{!2630, !2599, !2631}
!2631 = !DILocation(line: 503, column: 21, scope: !2592)
!2632 = !DILocation(line: 504, column: 17, scope: !2593)
!2633 = !DILocalVariable(name: "dir", scope: !2634, file: !3, line: 507, type: !50)
!2634 = distinct !DILexicalBlock(scope: !2585, file: !3, line: 506, column: 17)
!2635 = !DILocation(line: 507, column: 25, scope: !2634)
!2636 = !DILocalVariable(name: "pix_base", scope: !2634, file: !3, line: 508, type: !282)
!2637 = !DILocation(line: 508, column: 30, scope: !2634)
!2638 = !DILocation(line: 508, column: 41, scope: !2634)
!2639 = !DILocation(line: 508, column: 52, scope: !2634)
!2640 = !DILocation(line: 508, column: 50, scope: !2634)
!2641 = !DILocation(line: 508, column: 59, scope: !2634)
!2642 = !DILocation(line: 508, column: 65, scope: !2634)
!2643 = !DILocation(line: 508, column: 64, scope: !2634)
!2644 = !DILocation(line: 508, column: 62, scope: !2634)
!2645 = !DILocation(line: 508, column: 68, scope: !2634)
!2646 = !DILocation(line: 508, column: 67, scope: !2634)
!2647 = !DILocation(line: 508, column: 56, scope: !2634)
!2648 = !DILocalVariable(name: "dy", scope: !2634, file: !3, line: 509, type: !50)
!2649 = !DILocation(line: 509, column: 25, scope: !2634)
!2650 = !DILocation(line: 509, column: 30, scope: !2634)
!2651 = !DILocation(line: 509, column: 32, scope: !2634)
!2652 = !DILocation(line: 509, column: 31, scope: !2634)
!2653 = !DILocation(line: 520, column: 21, scope: !2634)
!2654 = !DILocation(line: 521, column: 21, scope: !2634)
!2655 = !DILocation(line: 522, column: 21, scope: !2634)
!2656 = !DILocation(line: 523, column: 21, scope: !2634)
!2657 = !DILocation(line: 524, column: 21, scope: !2634)
!2658 = !DILocation(line: 525, column: 21, scope: !2634)
!2659 = !DILocation(line: 526, column: 21, scope: !2634)
!2660 = !DILocation(line: 527, column: 21, scope: !2634)
!2661 = !DILocation(line: 528, column: 21, scope: !2634)
!2662 = !DILocation(line: 529, column: 21, scope: !2634)
!2663 = !DILocation(line: 530, column: 21, scope: !2634)
!2664 = !DILocation(line: 531, column: 21, scope: !2634)
!2665 = !DILocation(line: 532, column: 21, scope: !2634)
!2666 = !DILocation(line: 533, column: 21, scope: !2634)
!2667 = !DILocation(line: 534, column: 21, scope: !2634)
!2668 = !DILocation(line: 535, column: 21, scope: !2634)
!2669 = !DILocation(line: 536, column: 21, scope: !2634)
!2670 = !DILocation(line: 537, column: 21, scope: !2634)
!2671 = !DILocation(line: 538, column: 21, scope: !2634)
!2672 = !DILocation(line: 539, column: 21, scope: !2634)
!2673 = !DILocation(line: 540, column: 21, scope: !2674)
!2674 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 540, column: 21)
!2675 = !DILocation(line: 540, column: 21, scope: !2634)
!2676 = !DILocation(line: 540, column: 21, scope: !2677)
!2677 = distinct !DILexicalBlock(scope: !2674, file: !3, line: 540, column: 21)
!2678 = !DILocation(line: 541, column: 21, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 541, column: 21)
!2680 = !DILocation(line: 541, column: 21, scope: !2634)
!2681 = !DILocation(line: 541, column: 21, scope: !2682)
!2682 = distinct !DILexicalBlock(scope: !2679, file: !3, line: 541, column: 21)
!2683 = !DILocation(line: 542, column: 21, scope: !2684)
!2684 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 542, column: 21)
!2685 = !DILocation(line: 542, column: 21, scope: !2634)
!2686 = !DILocation(line: 542, column: 21, scope: !2687)
!2687 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 542, column: 21)
!2688 = !DILocation(line: 543, column: 21, scope: !2689)
!2689 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 543, column: 21)
!2690 = !DILocation(line: 543, column: 21, scope: !2634)
!2691 = !DILocation(line: 543, column: 21, scope: !2692)
!2692 = distinct !DILexicalBlock(scope: !2689, file: !3, line: 543, column: 21)
!2693 = !DILocation(line: 544, column: 21, scope: !2694)
!2694 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 544, column: 21)
!2695 = !DILocation(line: 544, column: 21, scope: !2634)
!2696 = !DILocation(line: 544, column: 21, scope: !2697)
!2697 = distinct !DILexicalBlock(scope: !2694, file: !3, line: 544, column: 21)
!2698 = !DILocation(line: 545, column: 21, scope: !2699)
!2699 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 545, column: 21)
!2700 = !DILocation(line: 545, column: 21, scope: !2634)
!2701 = !DILocation(line: 545, column: 21, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !2699, file: !3, line: 545, column: 21)
!2703 = !DILocation(line: 546, column: 21, scope: !2704)
!2704 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 546, column: 21)
!2705 = !DILocation(line: 546, column: 21, scope: !2634)
!2706 = !DILocation(line: 546, column: 21, scope: !2707)
!2707 = distinct !DILexicalBlock(scope: !2704, file: !3, line: 546, column: 21)
!2708 = !DILocation(line: 547, column: 21, scope: !2709)
!2709 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 547, column: 21)
!2710 = !DILocation(line: 547, column: 21, scope: !2634)
!2711 = !DILocation(line: 547, column: 21, scope: !2712)
!2712 = distinct !DILexicalBlock(scope: !2709, file: !3, line: 547, column: 21)
!2713 = !DILocation(line: 548, column: 21, scope: !2714)
!2714 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 548, column: 21)
!2715 = !DILocation(line: 548, column: 21, scope: !2634)
!2716 = !DILocation(line: 548, column: 21, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 548, column: 21)
!2718 = !DILocation(line: 549, column: 21, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 549, column: 21)
!2720 = !DILocation(line: 549, column: 21, scope: !2634)
!2721 = !DILocation(line: 549, column: 21, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 549, column: 21)
!2723 = !DILocation(line: 550, column: 21, scope: !2724)
!2724 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 550, column: 21)
!2725 = !DILocation(line: 550, column: 21, scope: !2634)
!2726 = !DILocation(line: 550, column: 21, scope: !2727)
!2727 = distinct !DILexicalBlock(scope: !2724, file: !3, line: 550, column: 21)
!2728 = !DILocation(line: 551, column: 21, scope: !2729)
!2729 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 551, column: 21)
!2730 = !DILocation(line: 551, column: 21, scope: !2634)
!2731 = !DILocation(line: 551, column: 21, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2729, file: !3, line: 551, column: 21)
!2733 = !DILocation(line: 552, column: 21, scope: !2734)
!2734 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 552, column: 21)
!2735 = !DILocation(line: 552, column: 21, scope: !2634)
!2736 = !DILocation(line: 552, column: 21, scope: !2737)
!2737 = distinct !DILexicalBlock(scope: !2734, file: !3, line: 552, column: 21)
!2738 = !DILocation(line: 553, column: 21, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 553, column: 21)
!2740 = !DILocation(line: 553, column: 21, scope: !2634)
!2741 = !DILocation(line: 553, column: 21, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 553, column: 21)
!2743 = !DILocation(line: 554, column: 21, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 554, column: 21)
!2745 = !DILocation(line: 554, column: 21, scope: !2634)
!2746 = !DILocation(line: 554, column: 21, scope: !2747)
!2747 = distinct !DILexicalBlock(scope: !2744, file: !3, line: 554, column: 21)
!2748 = !DILocation(line: 555, column: 21, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 555, column: 21)
!2750 = !DILocation(line: 555, column: 21, scope: !2634)
!2751 = !DILocation(line: 555, column: 21, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2749, file: !3, line: 555, column: 21)
!2753 = !DILocation(line: 559, column: 24, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2634, file: !3, line: 559, column: 24)
!2755 = !DILocation(line: 559, column: 24, scope: !2634)
!2756 = !DILocation(line: 561, column: 31, scope: !2757)
!2757 = distinct !DILexicalBlock(scope: !2754, file: !3, line: 560, column: 21)
!2758 = !DILocation(line: 561, column: 37, scope: !2757)
!2759 = !DILocation(line: 561, column: 40, scope: !2757)
!2760 = !DILocation(line: 561, column: 43, scope: !2757)
!2761 = !DILocation(line: 561, column: 38, scope: !2757)
!2762 = !DILocation(line: 561, column: 35, scope: !2757)
!2763 = !DILocation(line: 561, column: 29, scope: !2757)
!2764 = !DILocation(line: 562, column: 31, scope: !2757)
!2765 = !DILocation(line: 562, column: 37, scope: !2757)
!2766 = !DILocation(line: 562, column: 41, scope: !2757)
!2767 = !DILocation(line: 562, column: 44, scope: !2757)
!2768 = !DILocation(line: 562, column: 49, scope: !2757)
!2769 = !DILocation(line: 562, column: 38, scope: !2757)
!2770 = !DILocation(line: 562, column: 35, scope: !2757)
!2771 = !DILocation(line: 562, column: 29, scope: !2757)
!2772 = !DILocation(line: 563, column: 21, scope: !2757)
!2773 = !DILocation(line: 565, column: 13, scope: !2586)
!2774 = !DILocation(line: 565, column: 22, scope: !2026)
!2775 = !DILocation(line: 565, column: 29, scope: !2026)
!2776 = !DILocation(line: 565, column: 39, scope: !2026)
!2777 = !DILocation(line: 565, column: 26, scope: !2026)
!2778 = distinct !{!2778, !2583, !2779}
!2779 = !DILocation(line: 565, column: 43, scope: !2026)
!2780 = !DILocation(line: 566, column: 17, scope: !2781)
!2781 = distinct !DILexicalBlock(scope: !2026, file: !3, line: 566, column: 17)
!2782 = !DILocation(line: 566, column: 24, scope: !2781)
!2783 = !DILocation(line: 566, column: 21, scope: !2781)
!2784 = !DILocation(line: 566, column: 33, scope: !2781)
!2785 = !DILocation(line: 566, column: 36, scope: !2781)
!2786 = !DILocation(line: 566, column: 43, scope: !2781)
!2787 = !DILocation(line: 566, column: 40, scope: !2781)
!2788 = !DILocation(line: 566, column: 52, scope: !2781)
!2789 = !DILocation(line: 566, column: 55, scope: !2781)
!2790 = !DILocation(line: 566, column: 62, scope: !2781)
!2791 = !DILocation(line: 566, column: 59, scope: !2781)
!2792 = !DILocation(line: 566, column: 71, scope: !2781)
!2793 = !DILocation(line: 566, column: 74, scope: !2781)
!2794 = !DILocation(line: 566, column: 81, scope: !2781)
!2795 = !DILocation(line: 566, column: 78, scope: !2781)
!2796 = !DILocation(line: 566, column: 17, scope: !2026)
!2797 = !DILocation(line: 567, column: 17, scope: !2781)
!2798 = !DILocation(line: 568, column: 13, scope: !2026)
!2799 = !DILocalVariable(name: "min_x", scope: !2800, file: !3, line: 574, type: !1434)
!2800 = distinct !DILexicalBlock(scope: !1823, file: !3, line: 573, column: 9)
!2801 = !DILocation(line: 574, column: 23, scope: !2800)
!2802 = !DILocation(line: 574, column: 31, scope: !2800)
!2803 = !DILocalVariable(name: "min_y", scope: !2800, file: !3, line: 575, type: !1434)
!2804 = !DILocation(line: 575, column: 23, scope: !2800)
!2805 = !DILocation(line: 575, column: 31, scope: !2800)
!2806 = !DILocalVariable(name: "max_x", scope: !2800, file: !3, line: 576, type: !1434)
!2807 = !DILocation(line: 576, column: 23, scope: !2800)
!2808 = !DILocation(line: 576, column: 31, scope: !2800)
!2809 = !DILocalVariable(name: "max_y", scope: !2800, file: !3, line: 577, type: !1434)
!2810 = !DILocation(line: 577, column: 23, scope: !2800)
!2811 = !DILocation(line: 577, column: 31, scope: !2800)
!2812 = !DILocalVariable(name: "width", scope: !2800, file: !3, line: 579, type: !1434)
!2813 = !DILocation(line: 579, column: 23, scope: !2800)
!2814 = !DILocation(line: 579, column: 32, scope: !2800)
!2815 = !DILocation(line: 579, column: 40, scope: !2800)
!2816 = !DILocation(line: 579, column: 38, scope: !2800)
!2817 = !DILocation(line: 579, column: 46, scope: !2800)
!2818 = !DILocation(line: 579, column: 51, scope: !2800)
!2819 = !DILocalVariable(name: "sums_base", scope: !2800, file: !3, line: 588, type: !460)
!2820 = !DILocation(line: 588, column: 23, scope: !2800)
!2821 = !DILocation(line: 588, column: 35, scope: !2800)
!2822 = !DILocation(line: 588, column: 38, scope: !2800)
!2823 = !DILocalVariable(name: "enc_dc", scope: !2800, file: !3, line: 592, type: !1089, align: 128)
!2824 = !DILocation(line: 592, column: 13, scope: !2800)
!2825 = !DILocalVariable(name: "sad_size", scope: !2800, file: !3, line: 593, type: !50)
!2826 = !DILocation(line: 593, column: 17, scope: !2800)
!2827 = !DILocation(line: 593, column: 28, scope: !2800)
!2828 = !DILocation(line: 593, column: 36, scope: !2800)
!2829 = !DILocalVariable(name: "delta", scope: !2800, file: !3, line: 594, type: !50)
!2830 = !DILocation(line: 594, column: 17, scope: !2800)
!2831 = !DILocation(line: 594, column: 41, scope: !2800)
!2832 = !DILocation(line: 594, column: 25, scope: !2800)
!2833 = !DILocation(line: 594, column: 51, scope: !2800)
!2834 = !DILocalVariable(name: "xs", scope: !2800, file: !3, line: 595, type: !792)
!2835 = !DILocation(line: 595, column: 22, scope: !2800)
!2836 = !DILocation(line: 595, column: 27, scope: !2800)
!2837 = !DILocation(line: 595, column: 30, scope: !2800)
!2838 = !DILocalVariable(name: "xn", scope: !2800, file: !3, line: 596, type: !50)
!2839 = !DILocation(line: 596, column: 17, scope: !2800)
!2840 = !DILocalVariable(name: "cost_fpel_mvx", scope: !2800, file: !3, line: 597, type: !460)
!2841 = !DILocation(line: 597, column: 23, scope: !2800)
!2842 = !DILocation(line: 597, column: 39, scope: !2800)
!2843 = !DILocation(line: 597, column: 42, scope: !2800)
!2844 = !DILocation(line: 597, column: 71, scope: !2800)
!2845 = !DILocation(line: 597, column: 74, scope: !2800)
!2846 = !DILocation(line: 597, column: 77, scope: !2800)
!2847 = !DILocation(line: 597, column: 55, scope: !2800)
!2848 = !DILocation(line: 597, column: 85, scope: !2800)
!2849 = !DILocation(line: 597, column: 88, scope: !2800)
!2850 = !DILocation(line: 597, column: 84, scope: !2800)
!2851 = !DILocation(line: 597, column: 94, scope: !2800)
!2852 = !DILocation(line: 597, column: 102, scope: !2800)
!2853 = !DILocation(line: 597, column: 105, scope: !2800)
!2854 = !DILocation(line: 597, column: 101, scope: !2800)
!2855 = !DILocation(line: 597, column: 111, scope: !2800)
!2856 = !DILocation(line: 597, column: 98, scope: !2800)
!2857 = !DILocation(line: 599, column: 13, scope: !2800)
!2858 = !DILocation(line: 599, column: 16, scope: !2800)
!2859 = !DILocation(line: 599, column: 21, scope: !2800)
!2860 = !DILocation(line: 599, column: 28, scope: !2800)
!2861 = !DILocation(line: 599, column: 45, scope: !2800)
!2862 = !DILocation(line: 599, column: 53, scope: !2800)
!2863 = !DILocation(line: 599, column: 60, scope: !2800)
!2864 = !DILocation(line: 599, column: 59, scope: !2800)
!2865 = !DILocation(line: 600, column: 17, scope: !2800)
!2866 = !DILocation(line: 600, column: 24, scope: !2800)
!2867 = !DILocation(line: 600, column: 29, scope: !2800)
!2868 = !DILocation(line: 600, column: 23, scope: !2800)
!2869 = !DILocation(line: 600, column: 43, scope: !2800)
!2870 = !DILocation(line: 600, column: 50, scope: !2800)
!2871 = !DILocation(line: 600, column: 49, scope: !2800)
!2872 = !DILocation(line: 600, column: 56, scope: !2800)
!2873 = !DILocation(line: 600, column: 61, scope: !2800)
!2874 = !DILocation(line: 600, column: 55, scope: !2800)
!2875 = !DILocation(line: 601, column: 30, scope: !2800)
!2876 = !DILocation(line: 602, column: 17, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 602, column: 17)
!2878 = !DILocation(line: 602, column: 23, scope: !2877)
!2879 = !DILocation(line: 602, column: 17, scope: !2800)
!2880 = !DILocation(line: 603, column: 30, scope: !2877)
!2881 = !DILocation(line: 603, column: 40, scope: !2877)
!2882 = !DILocation(line: 603, column: 43, scope: !2877)
!2883 = !DILocation(line: 603, column: 49, scope: !2877)
!2884 = !DILocation(line: 603, column: 60, scope: !2877)
!2885 = !DILocation(line: 603, column: 37, scope: !2877)
!2886 = !DILocation(line: 603, column: 27, scope: !2877)
!2887 = !DILocation(line: 603, column: 17, scope: !2877)
!2888 = !DILocation(line: 604, column: 17, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 604, column: 17)
!2890 = !DILocation(line: 604, column: 25, scope: !2889)
!2891 = !DILocation(line: 604, column: 40, scope: !2889)
!2892 = !DILocation(line: 604, column: 43, scope: !2889)
!2893 = !DILocation(line: 604, column: 51, scope: !2889)
!2894 = !DILocation(line: 604, column: 65, scope: !2889)
!2895 = !DILocation(line: 604, column: 68, scope: !2889)
!2896 = !DILocation(line: 604, column: 76, scope: !2889)
!2897 = !DILocation(line: 604, column: 17, scope: !2800)
!2898 = !DILocation(line: 605, column: 26, scope: !2889)
!2899 = !DILocation(line: 605, column: 23, scope: !2889)
!2900 = !DILocation(line: 605, column: 17, scope: !2889)
!2901 = !DILocation(line: 606, column: 17, scope: !2902)
!2902 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 606, column: 17)
!2903 = !DILocation(line: 606, column: 25, scope: !2902)
!2904 = !DILocation(line: 606, column: 39, scope: !2902)
!2905 = !DILocation(line: 606, column: 42, scope: !2902)
!2906 = !DILocation(line: 606, column: 50, scope: !2902)
!2907 = !DILocation(line: 606, column: 17, scope: !2800)
!2908 = !DILocation(line: 607, column: 29, scope: !2902)
!2909 = !DILocation(line: 607, column: 17, scope: !2902)
!2910 = !DILocation(line: 607, column: 27, scope: !2902)
!2911 = !DILocation(line: 609, column: 17, scope: !2912)
!2912 = distinct !DILexicalBlock(scope: !2800, file: !3, line: 609, column: 17)
!2913 = !DILocation(line: 609, column: 20, scope: !2912)
!2914 = !DILocation(line: 609, column: 23, scope: !2912)
!2915 = !DILocation(line: 609, column: 35, scope: !2912)
!2916 = !DILocation(line: 609, column: 17, scope: !2800)
!2917 = !DILocalVariable(name: "mvsads", scope: !2918, file: !3, line: 612, type: !44)
!2918 = distinct !DILexicalBlock(scope: !2912, file: !3, line: 610, column: 13)
!2919 = !DILocation(line: 612, column: 26, scope: !2918)
!2920 = !DILocation(line: 612, column: 47, scope: !2918)
!2921 = !DILocation(line: 612, column: 54, scope: !2918)
!2922 = !DILocation(line: 612, column: 59, scope: !2918)
!2923 = !DILocation(line: 612, column: 63, scope: !2918)
!2924 = !DILocation(line: 612, column: 50, scope: !2918)
!2925 = !DILocation(line: 612, column: 35, scope: !2918)
!2926 = !DILocalVariable(name: "nmvsad", scope: !2918, file: !3, line: 613, type: !50)
!2927 = !DILocation(line: 613, column: 21, scope: !2918)
!2928 = !DILocalVariable(name: "limit", scope: !2918, file: !3, line: 613, type: !50)
!2929 = !DILocation(line: 613, column: 33, scope: !2918)
!2930 = !DILocalVariable(name: "sad_thresh", scope: !2918, file: !3, line: 614, type: !50)
!2931 = !DILocation(line: 614, column: 21, scope: !2918)
!2932 = !DILocation(line: 614, column: 34, scope: !2918)
!2933 = !DILocation(line: 614, column: 45, scope: !2918)
!2934 = !DILocation(line: 614, column: 58, scope: !2918)
!2935 = !DILocation(line: 614, column: 69, scope: !2918)
!2936 = !DILocalVariable(name: "bsad", scope: !2918, file: !3, line: 615, type: !50)
!2937 = !DILocation(line: 615, column: 21, scope: !2918)
!2938 = !DILocation(line: 615, column: 28, scope: !2918)
!2939 = !DILocation(line: 615, column: 31, scope: !2918)
!2940 = !DILocation(line: 615, column: 36, scope: !2918)
!2941 = !DILocation(line: 615, column: 40, scope: !2918)
!2942 = !DILocation(line: 615, column: 50, scope: !2918)
!2943 = !DILocation(line: 615, column: 71, scope: !2918)
!2944 = !DILocation(line: 615, column: 80, scope: !2918)
!2945 = !DILocation(line: 615, column: 84, scope: !2918)
!2946 = !DILocation(line: 615, column: 83, scope: !2918)
!2947 = !DILocation(line: 615, column: 79, scope: !2918)
!2948 = !DILocation(line: 615, column: 91, scope: !2918)
!2949 = !DILocation(line: 615, column: 90, scope: !2918)
!2950 = !DILocation(line: 615, column: 96, scope: !2918)
!2951 = !DILocation(line: 616, column: 28, scope: !2918)
!2952 = !DILocation(line: 616, column: 26, scope: !2918)
!2953 = !DILocalVariable(name: "my", scope: !2954, file: !3, line: 617, type: !50)
!2954 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 617, column: 17)
!2955 = !DILocation(line: 617, column: 26, scope: !2954)
!2956 = !DILocation(line: 617, column: 31, scope: !2954)
!2957 = !DILocation(line: 617, column: 22, scope: !2954)
!2958 = !DILocation(line: 617, column: 38, scope: !2959)
!2959 = distinct !DILexicalBlock(scope: !2954, file: !3, line: 617, column: 17)
!2960 = !DILocation(line: 617, column: 44, scope: !2959)
!2961 = !DILocation(line: 617, column: 41, scope: !2959)
!2962 = !DILocation(line: 617, column: 17, scope: !2954)
!2963 = !DILocalVariable(name: "i", scope: !2964, file: !3, line: 619, type: !50)
!2964 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 618, column: 17)
!2965 = !DILocation(line: 619, column: 25, scope: !2964)
!2966 = !DILocalVariable(name: "ycost", scope: !2964, file: !3, line: 620, type: !50)
!2967 = !DILocation(line: 620, column: 25, scope: !2964)
!2968 = !DILocation(line: 620, column: 33, scope: !2964)
!2969 = !DILocation(line: 620, column: 44, scope: !2964)
!2970 = !DILocation(line: 620, column: 46, scope: !2964)
!2971 = !DILocation(line: 621, column: 25, scope: !2972)
!2972 = distinct !DILexicalBlock(scope: !2964, file: !3, line: 621, column: 25)
!2973 = !DILocation(line: 621, column: 33, scope: !2972)
!2974 = !DILocation(line: 621, column: 30, scope: !2972)
!2975 = !DILocation(line: 621, column: 25, scope: !2964)
!2976 = !DILocation(line: 622, column: 25, scope: !2972)
!2977 = !DILocation(line: 623, column: 29, scope: !2964)
!2978 = !DILocation(line: 623, column: 26, scope: !2964)
!2979 = !DILocation(line: 624, column: 26, scope: !2964)
!2980 = !DILocation(line: 624, column: 29, scope: !2964)
!2981 = !DILocation(line: 624, column: 34, scope: !2964)
!2982 = !DILocation(line: 624, column: 38, scope: !2964)
!2983 = !DILocation(line: 624, column: 48, scope: !2964)
!2984 = !DILocation(line: 624, column: 56, scope: !2964)
!2985 = !DILocation(line: 624, column: 68, scope: !2964)
!2986 = !DILocation(line: 624, column: 66, scope: !2964)
!2987 = !DILocation(line: 624, column: 76, scope: !2964)
!2988 = !DILocation(line: 624, column: 81, scope: !2964)
!2989 = !DILocation(line: 624, column: 79, scope: !2964)
!2990 = !DILocation(line: 624, column: 74, scope: !2964)
!2991 = !DILocation(line: 624, column: 89, scope: !2964)
!2992 = !DILocation(line: 625, column: 48, scope: !2964)
!2993 = !DILocation(line: 625, column: 62, scope: !2964)
!2994 = !DILocation(line: 625, column: 61, scope: !2964)
!2995 = !DILocation(line: 625, column: 69, scope: !2964)
!2996 = !DILocation(line: 625, column: 73, scope: !2964)
!2997 = !DILocation(line: 625, column: 80, scope: !2964)
!2998 = !DILocation(line: 625, column: 84, scope: !2964)
!2999 = !DILocation(line: 625, column: 87, scope: !2964)
!3000 = !DILocation(line: 624, column: 24, scope: !2964)
!3001 = !DILocation(line: 626, column: 28, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2964, file: !3, line: 626, column: 21)
!3003 = !DILocation(line: 626, column: 26, scope: !3002)
!3004 = !DILocation(line: 626, column: 33, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !3002, file: !3, line: 626, column: 21)
!3006 = !DILocation(line: 626, column: 37, scope: !3005)
!3007 = !DILocation(line: 626, column: 39, scope: !3005)
!3008 = !DILocation(line: 626, column: 35, scope: !3005)
!3009 = !DILocation(line: 626, column: 21, scope: !3002)
!3010 = !DILocalVariable(name: "ref", scope: !3011, file: !3, line: 628, type: !282)
!3011 = distinct !DILexicalBlock(scope: !3005, file: !3, line: 627, column: 21)
!3012 = !DILocation(line: 628, column: 34, scope: !3011)
!3013 = !DILocation(line: 628, column: 40, scope: !3011)
!3014 = !DILocation(line: 628, column: 49, scope: !3011)
!3015 = !DILocation(line: 628, column: 48, scope: !3011)
!3016 = !DILocation(line: 628, column: 55, scope: !3011)
!3017 = !DILocation(line: 628, column: 58, scope: !3011)
!3018 = !DILocation(line: 628, column: 57, scope: !3011)
!3019 = !DILocation(line: 628, column: 54, scope: !3011)
!3020 = !DILocalVariable(name: "sads", scope: !3011, file: !3, line: 629, type: !595)
!3021 = !DILocation(line: 629, column: 29, scope: !3011)
!3022 = !DILocation(line: 630, column: 25, scope: !3011)
!3023 = !DILocation(line: 630, column: 28, scope: !3011)
!3024 = !DILocation(line: 630, column: 33, scope: !3011)
!3025 = !DILocation(line: 630, column: 40, scope: !3011)
!3026 = !DILocation(line: 630, column: 50, scope: !3011)
!3027 = !DILocation(line: 630, column: 58, scope: !3011)
!3028 = !DILocation(line: 630, column: 62, scope: !3011)
!3029 = !DILocation(line: 630, column: 65, scope: !3011)
!3030 = !DILocation(line: 630, column: 61, scope: !3011)
!3031 = !DILocation(line: 630, column: 69, scope: !3011)
!3032 = !DILocation(line: 630, column: 73, scope: !3011)
!3033 = !DILocation(line: 630, column: 76, scope: !3011)
!3034 = !DILocation(line: 630, column: 77, scope: !3011)
!3035 = !DILocation(line: 630, column: 72, scope: !3011)
!3036 = !DILocation(line: 630, column: 82, scope: !3011)
!3037 = !DILocation(line: 630, column: 86, scope: !3011)
!3038 = !DILocation(line: 630, column: 89, scope: !3011)
!3039 = !DILocation(line: 630, column: 90, scope: !3011)
!3040 = !DILocation(line: 630, column: 85, scope: !3011)
!3041 = !DILocation(line: 630, column: 95, scope: !3011)
!3042 = !DILocation(line: 630, column: 103, scope: !3011)
!3043 = !DILocalVariable(name: "j", scope: !3044, file: !3, line: 631, type: !50)
!3044 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 631, column: 25)
!3045 = !DILocation(line: 631, column: 34, scope: !3044)
!3046 = !DILocation(line: 631, column: 30, scope: !3044)
!3047 = !DILocation(line: 631, column: 41, scope: !3048)
!3048 = distinct !DILexicalBlock(scope: !3044, file: !3, line: 631, column: 25)
!3049 = !DILocation(line: 631, column: 43, scope: !3048)
!3050 = !DILocation(line: 631, column: 25, scope: !3044)
!3051 = !DILocalVariable(name: "sad", scope: !3052, file: !3, line: 633, type: !50)
!3052 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 632, column: 25)
!3053 = !DILocation(line: 633, column: 33, scope: !3052)
!3054 = !DILocation(line: 633, column: 44, scope: !3052)
!3055 = !DILocation(line: 633, column: 39, scope: !3052)
!3056 = !DILocation(line: 633, column: 49, scope: !3052)
!3057 = !DILocation(line: 633, column: 63, scope: !3052)
!3058 = !DILocation(line: 633, column: 66, scope: !3052)
!3059 = !DILocation(line: 633, column: 68, scope: !3052)
!3060 = !DILocation(line: 633, column: 67, scope: !3052)
!3061 = !DILocation(line: 633, column: 47, scope: !3052)
!3062 = !DILocation(line: 634, column: 33, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3052, file: !3, line: 634, column: 33)
!3064 = !DILocation(line: 634, column: 39, scope: !3063)
!3065 = !DILocation(line: 634, column: 44, scope: !3063)
!3066 = !DILocation(line: 634, column: 43, scope: !3063)
!3067 = !DILocation(line: 634, column: 54, scope: !3063)
!3068 = !DILocation(line: 634, column: 37, scope: !3063)
!3069 = !DILocation(line: 634, column: 33, scope: !3052)
!3070 = !DILocation(line: 636, column: 33, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 636, column: 33)
!3072 = distinct !DILexicalBlock(scope: !3063, file: !3, line: 635, column: 29)
!3073 = !DILocation(line: 636, column: 33, scope: !3072)
!3074 = !DILocation(line: 637, column: 54, scope: !3072)
!3075 = !DILocation(line: 637, column: 60, scope: !3072)
!3076 = !DILocation(line: 637, column: 58, scope: !3072)
!3077 = !DILocation(line: 637, column: 33, scope: !3072)
!3078 = !DILocation(line: 637, column: 40, scope: !3072)
!3079 = !DILocation(line: 637, column: 48, scope: !3072)
!3080 = !DILocation(line: 637, column: 52, scope: !3072)
!3081 = !DILocation(line: 638, column: 56, scope: !3072)
!3082 = !DILocation(line: 638, column: 62, scope: !3072)
!3083 = !DILocation(line: 638, column: 65, scope: !3072)
!3084 = !DILocation(line: 638, column: 67, scope: !3072)
!3085 = !DILocation(line: 638, column: 66, scope: !3072)
!3086 = !DILocation(line: 638, column: 61, scope: !3072)
!3087 = !DILocation(line: 638, column: 33, scope: !3072)
!3088 = !DILocation(line: 638, column: 40, scope: !3072)
!3089 = !DILocation(line: 638, column: 48, scope: !3072)
!3090 = !DILocation(line: 638, column: 54, scope: !3072)
!3091 = !DILocation(line: 639, column: 56, scope: !3072)
!3092 = !DILocation(line: 639, column: 33, scope: !3072)
!3093 = !DILocation(line: 639, column: 40, scope: !3072)
!3094 = !DILocation(line: 639, column: 48, scope: !3072)
!3095 = !DILocation(line: 639, column: 54, scope: !3072)
!3096 = !DILocation(line: 640, column: 39, scope: !3072)
!3097 = !DILocation(line: 641, column: 29, scope: !3072)
!3098 = !DILocation(line: 642, column: 25, scope: !3052)
!3099 = !DILocation(line: 631, column: 49, scope: !3048)
!3100 = !DILocation(line: 631, column: 25, scope: !3048)
!3101 = distinct !{!3101, !3050, !3102}
!3102 = !DILocation(line: 642, column: 25, scope: !3044)
!3103 = !DILocation(line: 643, column: 21, scope: !3011)
!3104 = !DILocation(line: 626, column: 45, scope: !3005)
!3105 = !DILocation(line: 626, column: 21, scope: !3005)
!3106 = distinct !{!3106, !3009, !3107}
!3107 = !DILocation(line: 643, column: 21, scope: !3002)
!3108 = !DILocation(line: 644, column: 21, scope: !2964)
!3109 = !DILocation(line: 644, column: 28, scope: !3110)
!3110 = distinct !DILexicalBlock(scope: !3111, file: !3, line: 644, column: 21)
!3111 = distinct !DILexicalBlock(scope: !2964, file: !3, line: 644, column: 21)
!3112 = !DILocation(line: 644, column: 32, scope: !3110)
!3113 = !DILocation(line: 644, column: 30, scope: !3110)
!3114 = !DILocation(line: 644, column: 21, scope: !3111)
!3115 = !DILocalVariable(name: "mx", scope: !3116, file: !3, line: 646, type: !50)
!3116 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 645, column: 21)
!3117 = !DILocation(line: 646, column: 29, scope: !3116)
!3118 = !DILocation(line: 646, column: 34, scope: !3116)
!3119 = !DILocation(line: 646, column: 40, scope: !3116)
!3120 = !DILocation(line: 646, column: 43, scope: !3116)
!3121 = !DILocation(line: 646, column: 39, scope: !3116)
!3122 = !DILocalVariable(name: "sad", scope: !3116, file: !3, line: 647, type: !50)
!3123 = !DILocation(line: 647, column: 29, scope: !3116)
!3124 = !DILocation(line: 647, column: 35, scope: !3116)
!3125 = !DILocation(line: 647, column: 38, scope: !3116)
!3126 = !DILocation(line: 647, column: 43, scope: !3116)
!3127 = !DILocation(line: 647, column: 47, scope: !3116)
!3128 = !DILocation(line: 647, column: 57, scope: !3116)
!3129 = !DILocation(line: 647, column: 78, scope: !3116)
!3130 = !DILocation(line: 647, column: 87, scope: !3116)
!3131 = !DILocation(line: 647, column: 86, scope: !3116)
!3132 = !DILocation(line: 647, column: 90, scope: !3116)
!3133 = !DILocation(line: 647, column: 93, scope: !3116)
!3134 = !DILocation(line: 647, column: 92, scope: !3116)
!3135 = !DILocation(line: 647, column: 89, scope: !3116)
!3136 = !DILocation(line: 647, column: 101, scope: !3116)
!3137 = !DILocation(line: 648, column: 35, scope: !3116)
!3138 = !DILocation(line: 648, column: 49, scope: !3116)
!3139 = !DILocation(line: 648, column: 52, scope: !3116)
!3140 = !DILocation(line: 648, column: 33, scope: !3116)
!3141 = !DILocation(line: 649, column: 29, scope: !3142)
!3142 = distinct !DILexicalBlock(scope: !3116, file: !3, line: 649, column: 29)
!3143 = !DILocation(line: 649, column: 35, scope: !3142)
!3144 = !DILocation(line: 649, column: 40, scope: !3142)
!3145 = !DILocation(line: 649, column: 39, scope: !3142)
!3146 = !DILocation(line: 649, column: 50, scope: !3142)
!3147 = !DILocation(line: 649, column: 33, scope: !3142)
!3148 = !DILocation(line: 649, column: 29, scope: !3116)
!3149 = !DILocation(line: 651, column: 29, scope: !3150)
!3150 = distinct !DILexicalBlock(scope: !3151, file: !3, line: 651, column: 29)
!3151 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 650, column: 25)
!3152 = !DILocation(line: 651, column: 29, scope: !3151)
!3153 = !DILocation(line: 652, column: 50, scope: !3151)
!3154 = !DILocation(line: 652, column: 56, scope: !3151)
!3155 = !DILocation(line: 652, column: 54, scope: !3151)
!3156 = !DILocation(line: 652, column: 29, scope: !3151)
!3157 = !DILocation(line: 652, column: 36, scope: !3151)
!3158 = !DILocation(line: 652, column: 44, scope: !3151)
!3159 = !DILocation(line: 652, column: 48, scope: !3151)
!3160 = !DILocation(line: 653, column: 52, scope: !3151)
!3161 = !DILocation(line: 653, column: 29, scope: !3151)
!3162 = !DILocation(line: 653, column: 36, scope: !3151)
!3163 = !DILocation(line: 653, column: 44, scope: !3151)
!3164 = !DILocation(line: 653, column: 50, scope: !3151)
!3165 = !DILocation(line: 654, column: 52, scope: !3151)
!3166 = !DILocation(line: 654, column: 29, scope: !3151)
!3167 = !DILocation(line: 654, column: 36, scope: !3151)
!3168 = !DILocation(line: 654, column: 44, scope: !3151)
!3169 = !DILocation(line: 654, column: 50, scope: !3151)
!3170 = !DILocation(line: 655, column: 35, scope: !3151)
!3171 = !DILocation(line: 656, column: 25, scope: !3151)
!3172 = !DILocation(line: 657, column: 21, scope: !3116)
!3173 = !DILocation(line: 644, column: 37, scope: !3110)
!3174 = !DILocation(line: 644, column: 21, scope: !3110)
!3175 = distinct !{!3175, !3114, !3176}
!3176 = !DILocation(line: 657, column: 21, scope: !3111)
!3177 = !DILocation(line: 658, column: 29, scope: !2964)
!3178 = !DILocation(line: 658, column: 26, scope: !2964)
!3179 = !DILocation(line: 659, column: 17, scope: !2964)
!3180 = !DILocation(line: 617, column: 53, scope: !2959)
!3181 = !DILocation(line: 617, column: 17, scope: !2959)
!3182 = distinct !{!3182, !2962, !3183}
!3183 = !DILocation(line: 659, column: 17, scope: !2954)
!3184 = !DILocation(line: 661, column: 25, scope: !2918)
!3185 = !DILocation(line: 661, column: 36, scope: !2918)
!3186 = !DILocation(line: 661, column: 23, scope: !2918)
!3187 = !DILocation(line: 662, column: 30, scope: !2918)
!3188 = !DILocation(line: 662, column: 35, scope: !2918)
!3189 = !DILocation(line: 662, column: 34, scope: !2918)
!3190 = !DILocation(line: 662, column: 45, scope: !2918)
!3191 = !DILocation(line: 662, column: 28, scope: !2918)
!3192 = !DILocation(line: 663, column: 17, scope: !2918)
!3193 = !DILocation(line: 663, column: 24, scope: !2918)
!3194 = !DILocation(line: 663, column: 33, scope: !2918)
!3195 = !DILocation(line: 663, column: 38, scope: !2918)
!3196 = !DILocation(line: 663, column: 31, scope: !2918)
!3197 = !DILocation(line: 663, column: 41, scope: !2918)
!3198 = !DILocation(line: 663, column: 44, scope: !2918)
!3199 = !DILocation(line: 663, column: 57, scope: !2918)
!3200 = !DILocation(line: 663, column: 55, scope: !2918)
!3201 = !DILocation(line: 0, scope: !2918)
!3202 = !DILocalVariable(name: "i", scope: !3203, file: !3, line: 665, type: !50)
!3203 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 664, column: 17)
!3204 = !DILocation(line: 665, column: 25, scope: !3203)
!3205 = !DILocation(line: 667, column: 35, scope: !3203)
!3206 = !DILocation(line: 667, column: 48, scope: !3203)
!3207 = !DILocation(line: 667, column: 46, scope: !3203)
!3208 = !DILocation(line: 667, column: 54, scope: !3203)
!3209 = !DILocation(line: 667, column: 32, scope: !3203)
!3210 = !DILocation(line: 668, column: 28, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3203, file: !3, line: 668, column: 21)
!3212 = !DILocation(line: 668, column: 26, scope: !3211)
!3213 = !DILocation(line: 668, column: 33, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3211, file: !3, line: 668, column: 21)
!3215 = !DILocation(line: 668, column: 37, scope: !3214)
!3216 = !DILocation(line: 668, column: 35, scope: !3214)
!3217 = !DILocation(line: 668, column: 44, scope: !3214)
!3218 = !DILocation(line: 668, column: 47, scope: !3214)
!3219 = !DILocation(line: 668, column: 54, scope: !3214)
!3220 = !DILocation(line: 668, column: 57, scope: !3214)
!3221 = !DILocation(line: 668, column: 64, scope: !3214)
!3222 = !DILocation(line: 668, column: 61, scope: !3214)
!3223 = !DILocation(line: 0, scope: !3214)
!3224 = !DILocation(line: 668, column: 21, scope: !3211)
!3225 = !DILocation(line: 668, column: 77, scope: !3214)
!3226 = !DILocation(line: 668, column: 21, scope: !3214)
!3227 = distinct !{!3227, !3224, !3228}
!3228 = !DILocation(line: 668, column: 81, scope: !3211)
!3229 = !DILocalVariable(name: "j", scope: !3230, file: !3, line: 669, type: !50)
!3230 = distinct !DILexicalBlock(scope: !3203, file: !3, line: 669, column: 21)
!3231 = !DILocation(line: 669, column: 30, scope: !3230)
!3232 = !DILocation(line: 669, column: 34, scope: !3230)
!3233 = !DILocation(line: 669, column: 26, scope: !3230)
!3234 = !DILocation(line: 669, column: 37, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3230, file: !3, line: 669, column: 21)
!3236 = !DILocation(line: 669, column: 41, scope: !3235)
!3237 = !DILocation(line: 669, column: 39, scope: !3235)
!3238 = !DILocation(line: 669, column: 21, scope: !3230)
!3239 = !DILocalVariable(name: "sad", scope: !3240, file: !3, line: 671, type: !26)
!3240 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 670, column: 21)
!3241 = !DILocation(line: 671, column: 34, scope: !3240)
!3242 = !DILocalVariable(name: "mvsad", scope: !3243, file: !3, line: 674, type: !62)
!3243 = distinct !DILexicalBlock(scope: !3244, file: !3, line: 673, column: 25)
!3244 = distinct !DILexicalBlock(scope: !3240, file: !3, line: 672, column: 29)
!3245 = !DILocation(line: 674, column: 38, scope: !3243)
!3246 = !DILocation(line: 674, column: 66, scope: !3243)
!3247 = !DILocation(line: 674, column: 46, scope: !3243)
!3248 = !DILocation(line: 674, column: 64, scope: !3243)
!3249 = !DILocation(line: 678, column: 35, scope: !3243)
!3250 = !DILocation(line: 678, column: 33, scope: !3243)
!3251 = !DILocation(line: 686, column: 31, scope: !3240)
!3252 = !DILocation(line: 686, column: 38, scope: !3240)
!3253 = !DILocation(line: 686, column: 48, scope: !3240)
!3254 = !DILocation(line: 686, column: 35, scope: !3240)
!3255 = !DILocation(line: 686, column: 53, scope: !3240)
!3256 = !DILocation(line: 686, column: 27, scope: !3240)
!3257 = !DILocation(line: 687, column: 21, scope: !3240)
!3258 = !DILocation(line: 669, column: 50, scope: !3235)
!3259 = !DILocation(line: 669, column: 21, scope: !3235)
!3260 = distinct !{!3260, !3238, !3261}
!3261 = !DILocation(line: 687, column: 21, scope: !3230)
!3262 = !DILocation(line: 688, column: 30, scope: !3203)
!3263 = !DILocation(line: 688, column: 28, scope: !3203)
!3264 = distinct !{!3264, !3192, !3265}
!3265 = !DILocation(line: 689, column: 17, scope: !2918)
!3266 = !DILocation(line: 690, column: 17, scope: !2918)
!3267 = !DILocation(line: 690, column: 24, scope: !2918)
!3268 = !DILocation(line: 690, column: 33, scope: !2918)
!3269 = !DILocation(line: 690, column: 31, scope: !2918)
!3270 = !DILocalVariable(name: "bi", scope: !3271, file: !3, line: 692, type: !50)
!3271 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 691, column: 17)
!3272 = !DILocation(line: 692, column: 25, scope: !3271)
!3273 = !DILocalVariable(name: "i", scope: !3274, file: !3, line: 693, type: !50)
!3274 = distinct !DILexicalBlock(scope: !3271, file: !3, line: 693, column: 21)
!3275 = !DILocation(line: 693, column: 30, scope: !3274)
!3276 = !DILocation(line: 693, column: 26, scope: !3274)
!3277 = !DILocation(line: 693, column: 37, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3274, file: !3, line: 693, column: 21)
!3279 = !DILocation(line: 693, column: 41, scope: !3278)
!3280 = !DILocation(line: 693, column: 39, scope: !3278)
!3281 = !DILocation(line: 693, column: 21, scope: !3274)
!3282 = !DILocation(line: 694, column: 29, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3278, file: !3, line: 694, column: 29)
!3284 = !DILocation(line: 694, column: 36, scope: !3283)
!3285 = !DILocation(line: 694, column: 39, scope: !3283)
!3286 = !DILocation(line: 694, column: 45, scope: !3283)
!3287 = !DILocation(line: 694, column: 52, scope: !3283)
!3288 = !DILocation(line: 694, column: 56, scope: !3283)
!3289 = !DILocation(line: 694, column: 43, scope: !3283)
!3290 = !DILocation(line: 694, column: 29, scope: !3278)
!3291 = !DILocation(line: 695, column: 34, scope: !3283)
!3292 = !DILocation(line: 695, column: 32, scope: !3283)
!3293 = !DILocation(line: 695, column: 29, scope: !3283)
!3294 = !DILocation(line: 693, column: 50, scope: !3278)
!3295 = !DILocation(line: 693, column: 21, scope: !3278)
!3296 = distinct !{!3296, !3281, !3297}
!3297 = !DILocation(line: 695, column: 34, scope: !3274)
!3298 = !DILocation(line: 696, column: 27, scope: !3271)
!3299 = !DILocation(line: 698, column: 25, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3271, file: !3, line: 697, column: 25)
!3301 = distinct !{!3301, !3266, !3302}
!3302 = !DILocation(line: 701, column: 17, scope: !2918)
!3303 = !DILocalVariable(name: "i", scope: !3304, file: !3, line: 702, type: !50)
!3304 = distinct !DILexicalBlock(scope: !2918, file: !3, line: 702, column: 17)
!3305 = !DILocation(line: 702, column: 26, scope: !3304)
!3306 = !DILocation(line: 702, column: 22, scope: !3304)
!3307 = !DILocation(line: 702, column: 33, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3304, file: !3, line: 702, column: 17)
!3309 = !DILocation(line: 702, column: 37, scope: !3308)
!3310 = !DILocation(line: 702, column: 35, scope: !3308)
!3311 = !DILocation(line: 702, column: 17, scope: !3304)
!3312 = !DILocalVariable(name: "cost", scope: !3313, file: !3, line: 703, type: !50)
!3313 = distinct !DILexicalBlock(scope: !3308, file: !3, line: 703, column: 21)
!3314 = !DILocation(line: 703, column: 21, scope: !3313)
!3315 = !DILocation(line: 703, column: 21, scope: !3316)
!3316 = distinct !DILexicalBlock(scope: !3313, file: !3, line: 703, column: 21)
!3317 = !DILocation(line: 703, column: 21, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3316, file: !3, line: 703, column: 21)
!3319 = !DILocation(line: 702, column: 46, scope: !3308)
!3320 = !DILocation(line: 702, column: 17, scope: !3308)
!3321 = distinct !{!3321, !3311, !3322}
!3322 = !DILocation(line: 703, column: 21, scope: !3304)
!3323 = !DILocation(line: 704, column: 13, scope: !2918)
!3324 = !DILocalVariable(name: "my", scope: !3325, file: !3, line: 708, type: !50)
!3325 = distinct !DILexicalBlock(scope: !3326, file: !3, line: 708, column: 17)
!3326 = distinct !DILexicalBlock(scope: !2912, file: !3, line: 706, column: 13)
!3327 = !DILocation(line: 708, column: 26, scope: !3325)
!3328 = !DILocation(line: 708, column: 31, scope: !3325)
!3329 = !DILocation(line: 708, column: 22, scope: !3325)
!3330 = !DILocation(line: 708, column: 38, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 708, column: 17)
!3332 = !DILocation(line: 708, column: 44, scope: !3331)
!3333 = !DILocation(line: 708, column: 41, scope: !3331)
!3334 = !DILocation(line: 708, column: 17, scope: !3325)
!3335 = !DILocalVariable(name: "i", scope: !3336, file: !3, line: 710, type: !50)
!3336 = distinct !DILexicalBlock(scope: !3331, file: !3, line: 709, column: 17)
!3337 = !DILocation(line: 710, column: 25, scope: !3336)
!3338 = !DILocalVariable(name: "ycost", scope: !3336, file: !3, line: 711, type: !50)
!3339 = !DILocation(line: 711, column: 25, scope: !3336)
!3340 = !DILocation(line: 711, column: 33, scope: !3336)
!3341 = !DILocation(line: 711, column: 44, scope: !3336)
!3342 = !DILocation(line: 711, column: 46, scope: !3336)
!3343 = !DILocation(line: 712, column: 25, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 712, column: 25)
!3345 = !DILocation(line: 712, column: 34, scope: !3344)
!3346 = !DILocation(line: 712, column: 31, scope: !3344)
!3347 = !DILocation(line: 712, column: 25, scope: !3336)
!3348 = !DILocation(line: 713, column: 25, scope: !3344)
!3349 = !DILocation(line: 714, column: 30, scope: !3336)
!3350 = !DILocation(line: 714, column: 27, scope: !3336)
!3351 = !DILocation(line: 715, column: 26, scope: !3336)
!3352 = !DILocation(line: 715, column: 29, scope: !3336)
!3353 = !DILocation(line: 715, column: 34, scope: !3336)
!3354 = !DILocation(line: 715, column: 38, scope: !3336)
!3355 = !DILocation(line: 715, column: 48, scope: !3336)
!3356 = !DILocation(line: 715, column: 56, scope: !3336)
!3357 = !DILocation(line: 715, column: 68, scope: !3336)
!3358 = !DILocation(line: 715, column: 66, scope: !3336)
!3359 = !DILocation(line: 715, column: 76, scope: !3336)
!3360 = !DILocation(line: 715, column: 81, scope: !3336)
!3361 = !DILocation(line: 715, column: 79, scope: !3336)
!3362 = !DILocation(line: 715, column: 74, scope: !3336)
!3363 = !DILocation(line: 715, column: 89, scope: !3336)
!3364 = !DILocation(line: 716, column: 48, scope: !3336)
!3365 = !DILocation(line: 716, column: 62, scope: !3336)
!3366 = !DILocation(line: 716, column: 61, scope: !3336)
!3367 = !DILocation(line: 716, column: 69, scope: !3336)
!3368 = !DILocation(line: 716, column: 73, scope: !3336)
!3369 = !DILocation(line: 716, column: 80, scope: !3336)
!3370 = !DILocation(line: 715, column: 24, scope: !3336)
!3371 = !DILocation(line: 717, column: 28, scope: !3372)
!3372 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 717, column: 21)
!3373 = !DILocation(line: 717, column: 26, scope: !3372)
!3374 = !DILocation(line: 717, column: 33, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 717, column: 21)
!3376 = !DILocation(line: 717, column: 37, scope: !3375)
!3377 = !DILocation(line: 717, column: 39, scope: !3375)
!3378 = !DILocation(line: 717, column: 35, scope: !3375)
!3379 = !DILocation(line: 717, column: 21, scope: !3372)
!3380 = !DILocation(line: 718, column: 25, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3375, file: !3, line: 718, column: 25)
!3382 = !DILocation(line: 718, column: 25, scope: !3383)
!3383 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 718, column: 25)
!3384 = !DILocation(line: 718, column: 25, scope: !3385)
!3385 = distinct !DILexicalBlock(scope: !3383, file: !3, line: 718, column: 25)
!3386 = !DILocation(line: 718, column: 25, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 718, column: 25)
!3388 = !DILocation(line: 718, column: 25, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3387, file: !3, line: 718, column: 25)
!3390 = !DILocation(line: 718, column: 25, scope: !3391)
!3391 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 718, column: 25)
!3392 = !DILocation(line: 718, column: 25, scope: !3393)
!3393 = distinct !DILexicalBlock(scope: !3391, file: !3, line: 718, column: 25)
!3394 = !DILocation(line: 717, column: 45, scope: !3375)
!3395 = !DILocation(line: 717, column: 21, scope: !3375)
!3396 = distinct !{!3396, !3379, !3397}
!3397 = !DILocation(line: 718, column: 25, scope: !3372)
!3398 = !DILocation(line: 719, column: 30, scope: !3336)
!3399 = !DILocation(line: 719, column: 27, scope: !3336)
!3400 = !DILocation(line: 720, column: 21, scope: !3336)
!3401 = !DILocation(line: 720, column: 28, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3403, file: !3, line: 720, column: 21)
!3403 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 720, column: 21)
!3404 = !DILocation(line: 720, column: 32, scope: !3402)
!3405 = !DILocation(line: 720, column: 30, scope: !3402)
!3406 = !DILocation(line: 720, column: 21, scope: !3403)
!3407 = !DILocalVariable(name: "cost", scope: !3408, file: !3, line: 721, type: !50)
!3408 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 721, column: 25)
!3409 = !DILocation(line: 721, column: 25, scope: !3408)
!3410 = !DILocation(line: 721, column: 25, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3408, file: !3, line: 721, column: 25)
!3412 = !DILocation(line: 721, column: 25, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3411, file: !3, line: 721, column: 25)
!3414 = !DILocation(line: 720, column: 37, scope: !3402)
!3415 = !DILocation(line: 720, column: 21, scope: !3402)
!3416 = distinct !{!3416, !3406, !3417}
!3417 = !DILocation(line: 721, column: 25, scope: !3403)
!3418 = !DILocation(line: 722, column: 17, scope: !3336)
!3419 = !DILocation(line: 708, column: 53, scope: !3331)
!3420 = !DILocation(line: 708, column: 17, scope: !3331)
!3421 = distinct !{!3421, !3334, !3422}
!3422 = !DILocation(line: 722, column: 17, scope: !3325)
!3423 = !DILocation(line: 726, column: 9, scope: !1823)
!3424 = !DILocation(line: 730, column: 9, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !83, file: !3, line: 730, column: 9)
!3426 = !DILocation(line: 730, column: 22, scope: !3425)
!3427 = !DILocation(line: 730, column: 20, scope: !3425)
!3428 = !DILocation(line: 730, column: 9, scope: !83)
!3429 = !DILocation(line: 732, column: 20, scope: !3430)
!3430 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 731, column: 5)
!3431 = !DILocation(line: 732, column: 9, scope: !3430)
!3432 = !DILocation(line: 732, column: 12, scope: !3430)
!3433 = !DILocation(line: 732, column: 18, scope: !3430)
!3434 = !DILocation(line: 733, column: 20, scope: !3430)
!3435 = !DILocation(line: 733, column: 9, scope: !3430)
!3436 = !DILocation(line: 733, column: 12, scope: !3430)
!3437 = !DILocation(line: 733, column: 18, scope: !3430)
!3438 = !DILocation(line: 734, column: 19, scope: !3430)
!3439 = !DILocation(line: 734, column: 9, scope: !3430)
!3440 = !DILocation(line: 734, column: 12, scope: !3430)
!3441 = !DILocation(line: 734, column: 17, scope: !3430)
!3442 = !DILocation(line: 735, column: 5, scope: !3430)
!3443 = !DILocation(line: 738, column: 20, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 737, column: 5)
!3445 = !DILocation(line: 738, column: 24, scope: !3444)
!3446 = !DILocation(line: 738, column: 9, scope: !3444)
!3447 = !DILocation(line: 738, column: 12, scope: !3444)
!3448 = !DILocation(line: 738, column: 18, scope: !3444)
!3449 = !DILocation(line: 739, column: 20, scope: !3444)
!3450 = !DILocation(line: 739, column: 24, scope: !3444)
!3451 = !DILocation(line: 739, column: 9, scope: !3444)
!3452 = !DILocation(line: 739, column: 12, scope: !3444)
!3453 = !DILocation(line: 739, column: 18, scope: !3444)
!3454 = !DILocation(line: 740, column: 19, scope: !3444)
!3455 = !DILocation(line: 740, column: 9, scope: !3444)
!3456 = !DILocation(line: 740, column: 12, scope: !3444)
!3457 = !DILocation(line: 740, column: 17, scope: !3444)
!3458 = !DILocation(line: 744, column: 18, scope: !83)
!3459 = !DILocation(line: 744, column: 30, scope: !83)
!3460 = !DILocation(line: 744, column: 33, scope: !83)
!3461 = !DILocation(line: 744, column: 43, scope: !83)
!3462 = !DILocation(line: 744, column: 55, scope: !83)
!3463 = !DILocation(line: 744, column: 58, scope: !83)
!3464 = !DILocation(line: 744, column: 41, scope: !83)
!3465 = !DILocation(line: 744, column: 5, scope: !83)
!3466 = !DILocation(line: 744, column: 8, scope: !83)
!3467 = !DILocation(line: 744, column: 16, scope: !83)
!3468 = !DILocation(line: 745, column: 9, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !83, file: !3, line: 745, column: 9)
!3470 = !DILocation(line: 745, column: 16, scope: !3469)
!3471 = !DILocation(line: 745, column: 13, scope: !3469)
!3472 = !DILocation(line: 745, column: 20, scope: !3469)
!3473 = !DILocation(line: 745, column: 23, scope: !3469)
!3474 = !DILocation(line: 745, column: 30, scope: !3469)
!3475 = !DILocation(line: 745, column: 27, scope: !3469)
!3476 = !DILocation(line: 745, column: 34, scope: !3469)
!3477 = !DILocation(line: 745, column: 37, scope: !3469)
!3478 = !DILocation(line: 745, column: 40, scope: !3469)
!3479 = !DILocation(line: 745, column: 43, scope: !3469)
!3480 = !DILocation(line: 745, column: 59, scope: !3469)
!3481 = !DILocation(line: 745, column: 9, scope: !83)
!3482 = !DILocation(line: 746, column: 20, scope: !3469)
!3483 = !DILocation(line: 746, column: 23, scope: !3469)
!3484 = !DILocation(line: 746, column: 9, scope: !3469)
!3485 = !DILocation(line: 746, column: 12, scope: !3469)
!3486 = !DILocation(line: 746, column: 17, scope: !3469)
!3487 = !DILocation(line: 749, column: 9, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !83, file: !3, line: 749, column: 9)
!3489 = !DILocation(line: 749, column: 12, scope: !3488)
!3490 = !DILocation(line: 749, column: 15, scope: !3488)
!3491 = !DILocation(line: 749, column: 31, scope: !3488)
!3492 = !DILocation(line: 749, column: 9, scope: !83)
!3493 = !DILocalVariable(name: "hpel", scope: !3494, file: !3, line: 751, type: !50)
!3494 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 750, column: 5)
!3495 = !DILocation(line: 751, column: 13, scope: !3494)
!3496 = !DILocation(line: 751, column: 38, scope: !3494)
!3497 = !DILocation(line: 751, column: 41, scope: !3494)
!3498 = !DILocation(line: 751, column: 44, scope: !3494)
!3499 = !DILocation(line: 751, column: 20, scope: !3494)
!3500 = !DILocalVariable(name: "qpel", scope: !3494, file: !3, line: 752, type: !50)
!3501 = !DILocation(line: 752, column: 13, scope: !3494)
!3502 = !DILocation(line: 752, column: 38, scope: !3494)
!3503 = !DILocation(line: 752, column: 41, scope: !3494)
!3504 = !DILocation(line: 752, column: 44, scope: !3494)
!3505 = !DILocation(line: 752, column: 20, scope: !3494)
!3506 = !DILocation(line: 753, column: 24, scope: !3494)
!3507 = !DILocation(line: 753, column: 27, scope: !3494)
!3508 = !DILocation(line: 753, column: 30, scope: !3494)
!3509 = !DILocation(line: 753, column: 36, scope: !3494)
!3510 = !DILocation(line: 753, column: 42, scope: !3494)
!3511 = !DILocation(line: 753, column: 9, scope: !3494)
!3512 = !DILocation(line: 754, column: 5, scope: !3494)
!3513 = !DILocation(line: 755, column: 1, scope: !83)
!3514 = distinct !DISubprogram(name: "x264_clip3", scope: !22, file: !22, line: 200, type: !3515, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!3515 = !DISubroutineType(types: !3516)
!3516 = !{!50, !50, !50, !50}
!3517 = !DILocalVariable(name: "v", arg: 1, scope: !3514, file: !22, line: 200, type: !50)
!3518 = !DILocation(line: 200, column: 42, scope: !3514)
!3519 = !DILocalVariable(name: "i_min", arg: 2, scope: !3514, file: !22, line: 200, type: !50)
!3520 = !DILocation(line: 200, column: 49, scope: !3514)
!3521 = !DILocalVariable(name: "i_max", arg: 3, scope: !3514, file: !22, line: 200, type: !50)
!3522 = !DILocation(line: 200, column: 60, scope: !3514)
!3523 = !DILocation(line: 202, column: 15, scope: !3514)
!3524 = !DILocation(line: 202, column: 19, scope: !3514)
!3525 = !DILocation(line: 202, column: 17, scope: !3514)
!3526 = !DILocation(line: 202, column: 14, scope: !3514)
!3527 = !DILocation(line: 202, column: 28, scope: !3514)
!3528 = !DILocation(line: 202, column: 37, scope: !3514)
!3529 = !DILocation(line: 202, column: 41, scope: !3514)
!3530 = !DILocation(line: 202, column: 39, scope: !3514)
!3531 = !DILocation(line: 202, column: 36, scope: !3514)
!3532 = !DILocation(line: 202, column: 50, scope: !3514)
!3533 = !DILocation(line: 202, column: 58, scope: !3514)
!3534 = !DILocation(line: 202, column: 5, scope: !3514)
!3535 = distinct !DISubprogram(name: "pack16to32_mask", scope: !1439, file: !1439, line: 340, type: !3536, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!3536 = !DISubroutineType(types: !3537)
!3537 = !{!26, !50, !50}
!3538 = !DILocalVariable(name: "a", arg: 1, scope: !3535, file: !1439, line: 340, type: !50)
!3539 = !DILocation(line: 340, column: 52, scope: !3535)
!3540 = !DILocalVariable(name: "b", arg: 2, scope: !3535, file: !1439, line: 340, type: !50)
!3541 = !DILocation(line: 340, column: 59, scope: !3535)
!3542 = !DILocation(line: 345, column: 12, scope: !3535)
!3543 = !DILocation(line: 345, column: 13, scope: !3535)
!3544 = !DILocation(line: 345, column: 25, scope: !3535)
!3545 = !DILocation(line: 345, column: 26, scope: !3535)
!3546 = !DILocation(line: 345, column: 22, scope: !3535)
!3547 = !DILocation(line: 345, column: 4, scope: !3535)
!3548 = distinct !DISubprogram(name: "x264_predictor_roundclip", scope: !22, file: !22, line: 246, type: !3549, scopeLine: 247, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!3549 = !DISubroutineType(types: !3550)
!3550 = !{null, !626, !626, !50, !50, !50, !50, !50}
!3551 = !DILocalVariable(name: "dst", arg: 1, scope: !3548, file: !22, line: 246, type: !626)
!3552 = !DILocation(line: 246, column: 63, scope: !3548)
!3553 = !DILocalVariable(name: "mvc", arg: 2, scope: !3548, file: !22, line: 246, type: !626)
!3554 = !DILocation(line: 246, column: 82, scope: !3548)
!3555 = !DILocalVariable(name: "i_mvc", arg: 3, scope: !3548, file: !22, line: 246, type: !50)
!3556 = !DILocation(line: 246, column: 95, scope: !3548)
!3557 = !DILocalVariable(name: "mv_x_min", arg: 4, scope: !3548, file: !22, line: 246, type: !50)
!3558 = !DILocation(line: 246, column: 106, scope: !3548)
!3559 = !DILocalVariable(name: "mv_x_max", arg: 5, scope: !3548, file: !22, line: 246, type: !50)
!3560 = !DILocation(line: 246, column: 120, scope: !3548)
!3561 = !DILocalVariable(name: "mv_y_min", arg: 6, scope: !3548, file: !22, line: 246, type: !50)
!3562 = !DILocation(line: 246, column: 134, scope: !3548)
!3563 = !DILocalVariable(name: "mv_y_max", arg: 7, scope: !3548, file: !22, line: 246, type: !50)
!3564 = !DILocation(line: 246, column: 148, scope: !3548)
!3565 = !DILocalVariable(name: "i", scope: !3566, file: !22, line: 248, type: !50)
!3566 = distinct !DILexicalBlock(scope: !3548, file: !22, line: 248, column: 5)
!3567 = !DILocation(line: 248, column: 14, scope: !3566)
!3568 = !DILocation(line: 248, column: 10, scope: !3566)
!3569 = !DILocation(line: 248, column: 21, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3566, file: !22, line: 248, column: 5)
!3571 = !DILocation(line: 248, column: 25, scope: !3570)
!3572 = !DILocation(line: 248, column: 23, scope: !3570)
!3573 = !DILocation(line: 248, column: 5, scope: !3566)
!3574 = !DILocalVariable(name: "mx", scope: !3575, file: !22, line: 250, type: !50)
!3575 = distinct !DILexicalBlock(scope: !3570, file: !22, line: 249, column: 5)
!3576 = !DILocation(line: 250, column: 13, scope: !3575)
!3577 = !DILocation(line: 250, column: 19, scope: !3575)
!3578 = !DILocation(line: 250, column: 23, scope: !3575)
!3579 = !DILocation(line: 250, column: 29, scope: !3575)
!3580 = !DILocation(line: 250, column: 34, scope: !3575)
!3581 = !DILocalVariable(name: "my", scope: !3575, file: !22, line: 251, type: !50)
!3582 = !DILocation(line: 251, column: 13, scope: !3575)
!3583 = !DILocation(line: 251, column: 19, scope: !3575)
!3584 = !DILocation(line: 251, column: 23, scope: !3575)
!3585 = !DILocation(line: 251, column: 29, scope: !3575)
!3586 = !DILocation(line: 251, column: 34, scope: !3575)
!3587 = !DILocation(line: 252, column: 33, scope: !3575)
!3588 = !DILocation(line: 252, column: 37, scope: !3575)
!3589 = !DILocation(line: 252, column: 47, scope: !3575)
!3590 = !DILocation(line: 252, column: 21, scope: !3575)
!3591 = !DILocation(line: 252, column: 9, scope: !3575)
!3592 = !DILocation(line: 252, column: 13, scope: !3575)
!3593 = !DILocation(line: 252, column: 19, scope: !3575)
!3594 = !DILocation(line: 253, column: 33, scope: !3575)
!3595 = !DILocation(line: 253, column: 37, scope: !3575)
!3596 = !DILocation(line: 253, column: 47, scope: !3575)
!3597 = !DILocation(line: 253, column: 21, scope: !3575)
!3598 = !DILocation(line: 253, column: 9, scope: !3575)
!3599 = !DILocation(line: 253, column: 13, scope: !3575)
!3600 = !DILocation(line: 253, column: 19, scope: !3575)
!3601 = !DILocation(line: 254, column: 5, scope: !3575)
!3602 = !DILocation(line: 248, column: 33, scope: !3570)
!3603 = !DILocation(line: 248, column: 5, scope: !3570)
!3604 = distinct !{!3604, !3573, !3605}
!3605 = !DILocation(line: 254, column: 5, scope: !3566)
!3606 = !DILocation(line: 255, column: 1, scope: !3548)
!3607 = distinct !DISubprogram(name: "x264_predictor_difference", scope: !22, file: !22, line: 226, type: !3608, scopeLine: 227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!3608 = !DISubroutineType(types: !3609)
!3609 = !{!50, !626, !294}
!3610 = !DILocalVariable(name: "mvc", arg: 1, scope: !3607, file: !22, line: 226, type: !626)
!3611 = !DILocation(line: 226, column: 63, scope: !3607)
!3612 = !DILocalVariable(name: "i_mvc", arg: 2, scope: !3607, file: !22, line: 226, type: !294)
!3613 = !DILocation(line: 226, column: 81, scope: !3607)
!3614 = !DILocalVariable(name: "sum", scope: !3607, file: !22, line: 228, type: !50)
!3615 = !DILocation(line: 228, column: 9, scope: !3607)
!3616 = !DILocalVariable(name: "i", scope: !3617, file: !22, line: 229, type: !50)
!3617 = distinct !DILexicalBlock(scope: !3607, file: !22, line: 229, column: 5)
!3618 = !DILocation(line: 229, column: 14, scope: !3617)
!3619 = !DILocation(line: 229, column: 10, scope: !3617)
!3620 = !DILocation(line: 229, column: 21, scope: !3621)
!3621 = distinct !DILexicalBlock(scope: !3617, file: !22, line: 229, column: 5)
!3622 = !DILocation(line: 229, column: 25, scope: !3621)
!3623 = !DILocation(line: 229, column: 30, scope: !3621)
!3624 = !DILocation(line: 229, column: 23, scope: !3621)
!3625 = !DILocation(line: 229, column: 5, scope: !3617)
!3626 = !DILocation(line: 231, column: 21, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3621, file: !22, line: 230, column: 5)
!3628 = !DILocation(line: 231, column: 25, scope: !3627)
!3629 = !DILocation(line: 231, column: 33, scope: !3627)
!3630 = !DILocation(line: 231, column: 37, scope: !3627)
!3631 = !DILocation(line: 231, column: 38, scope: !3627)
!3632 = !DILocation(line: 231, column: 31, scope: !3627)
!3633 = !DILocation(line: 231, column: 16, scope: !3627)
!3634 = !DILocation(line: 232, column: 21, scope: !3627)
!3635 = !DILocation(line: 232, column: 25, scope: !3627)
!3636 = !DILocation(line: 232, column: 33, scope: !3627)
!3637 = !DILocation(line: 232, column: 37, scope: !3627)
!3638 = !DILocation(line: 232, column: 38, scope: !3627)
!3639 = !DILocation(line: 232, column: 31, scope: !3627)
!3640 = !DILocation(line: 232, column: 16, scope: !3627)
!3641 = !DILocation(line: 232, column: 14, scope: !3627)
!3642 = !DILocation(line: 231, column: 13, scope: !3627)
!3643 = !DILocation(line: 233, column: 5, scope: !3627)
!3644 = !DILocation(line: 229, column: 35, scope: !3621)
!3645 = !DILocation(line: 229, column: 5, scope: !3621)
!3646 = distinct !{!3646, !3625, !3647}
!3647 = !DILocation(line: 233, column: 5, scope: !3617)
!3648 = !DILocation(line: 234, column: 12, scope: !3607)
!3649 = !DILocation(line: 234, column: 5, scope: !3607)
!3650 = distinct !DISubprogram(name: "refine_subpel", scope: !3, file: !3, line: 809, type: !3651, scopeLine: 810, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!3651 = !DISubroutineType(types: !3652)
!3652 = !{null, !86, !1372, !50, !50, !638, !50}
!3653 = !DILocalVariable(name: "h", arg: 1, scope: !3650, file: !3, line: 809, type: !86)
!3654 = !DILocation(line: 809, column: 36, scope: !3650)
!3655 = !DILocalVariable(name: "m", arg: 2, scope: !3650, file: !3, line: 809, type: !1372)
!3656 = !DILocation(line: 809, column: 50, scope: !3650)
!3657 = !DILocalVariable(name: "hpel_iters", arg: 3, scope: !3650, file: !3, line: 809, type: !50)
!3658 = !DILocation(line: 809, column: 57, scope: !3650)
!3659 = !DILocalVariable(name: "qpel_iters", arg: 4, scope: !3650, file: !3, line: 809, type: !50)
!3660 = !DILocation(line: 809, column: 73, scope: !3650)
!3661 = !DILocalVariable(name: "p_halfpel_thresh", arg: 5, scope: !3650, file: !3, line: 809, type: !638)
!3662 = !DILocation(line: 809, column: 90, scope: !3650)
!3663 = !DILocalVariable(name: "b_refine_qpel", arg: 6, scope: !3650, file: !3, line: 809, type: !50)
!3664 = !DILocation(line: 809, column: 112, scope: !3650)
!3665 = !DILocalVariable(name: "bw", scope: !3650, file: !3, line: 811, type: !1434)
!3666 = !DILocation(line: 811, column: 15, scope: !3650)
!3667 = !DILocation(line: 811, column: 36, scope: !3650)
!3668 = !DILocation(line: 811, column: 39, scope: !3650)
!3669 = !DILocation(line: 811, column: 20, scope: !3650)
!3670 = !DILocation(line: 811, column: 48, scope: !3650)
!3671 = !DILocalVariable(name: "bh", scope: !3650, file: !3, line: 812, type: !1434)
!3672 = !DILocation(line: 812, column: 15, scope: !3650)
!3673 = !DILocation(line: 812, column: 36, scope: !3650)
!3674 = !DILocation(line: 812, column: 39, scope: !3650)
!3675 = !DILocation(line: 812, column: 20, scope: !3650)
!3676 = !DILocation(line: 812, column: 48, scope: !3650)
!3677 = !DILocalVariable(name: "p_cost_mvx", scope: !3650, file: !3, line: 813, type: !1569)
!3678 = !DILocation(line: 813, column: 21, scope: !3650)
!3679 = !DILocation(line: 813, column: 34, scope: !3650)
!3680 = !DILocation(line: 813, column: 37, scope: !3650)
!3681 = !DILocation(line: 813, column: 49, scope: !3650)
!3682 = !DILocation(line: 813, column: 52, scope: !3650)
!3683 = !DILocation(line: 813, column: 47, scope: !3650)
!3684 = !DILocalVariable(name: "p_cost_mvy", scope: !3650, file: !3, line: 814, type: !1569)
!3685 = !DILocation(line: 814, column: 21, scope: !3650)
!3686 = !DILocation(line: 814, column: 34, scope: !3650)
!3687 = !DILocation(line: 814, column: 37, scope: !3650)
!3688 = !DILocation(line: 814, column: 49, scope: !3650)
!3689 = !DILocation(line: 814, column: 52, scope: !3650)
!3690 = !DILocation(line: 814, column: 47, scope: !3650)
!3691 = !DILocalVariable(name: "i_pixel", scope: !3650, file: !3, line: 815, type: !1434)
!3692 = !DILocation(line: 815, column: 15, scope: !3650)
!3693 = !DILocation(line: 815, column: 25, scope: !3650)
!3694 = !DILocation(line: 815, column: 28, scope: !3650)
!3695 = !DILocalVariable(name: "b_chroma_me", scope: !3650, file: !3, line: 816, type: !1434)
!3696 = !DILocation(line: 816, column: 15, scope: !3650)
!3697 = !DILocation(line: 816, column: 29, scope: !3650)
!3698 = !DILocation(line: 816, column: 32, scope: !3650)
!3699 = !DILocation(line: 816, column: 35, scope: !3650)
!3700 = !DILocation(line: 816, column: 47, scope: !3650)
!3701 = !DILocation(line: 816, column: 50, scope: !3650)
!3702 = !DILocation(line: 816, column: 58, scope: !3650)
!3703 = !DILocation(line: 0, scope: !3650)
!3704 = !DILocalVariable(name: "mvy_offset", scope: !3650, file: !3, line: 817, type: !1434)
!3705 = !DILocation(line: 817, column: 15, scope: !3650)
!3706 = !DILocation(line: 817, column: 28, scope: !3650)
!3707 = !DILocation(line: 817, column: 31, scope: !3650)
!3708 = !DILocation(line: 817, column: 34, scope: !3650)
!3709 = !DILocation(line: 817, column: 49, scope: !3650)
!3710 = !DILocation(line: 817, column: 52, scope: !3650)
!3711 = !DILocation(line: 817, column: 47, scope: !3650)
!3712 = !DILocation(line: 817, column: 61, scope: !3650)
!3713 = !DILocation(line: 817, column: 64, scope: !3650)
!3714 = !DILocation(line: 817, column: 67, scope: !3650)
!3715 = !DILocation(line: 817, column: 74, scope: !3650)
!3716 = !DILocation(line: 817, column: 78, scope: !3650)
!3717 = !DILocation(line: 817, column: 81, scope: !3650)
!3718 = !DILocalVariable(name: "pix", scope: !3650, file: !3, line: 819, type: !3719, align: 128)
!3719 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 9216, elements: !3720)
!3720 = !{!3721}
!3721 = !DISubrange(count: 1152)
!3722 = !DILocation(line: 819, column: 5, scope: !3650)
!3723 = !DILocalVariable(name: "bmx", scope: !3650, file: !3, line: 821, type: !50)
!3724 = !DILocation(line: 821, column: 9, scope: !3650)
!3725 = !DILocation(line: 821, column: 15, scope: !3650)
!3726 = !DILocation(line: 821, column: 18, scope: !3650)
!3727 = !DILocalVariable(name: "bmy", scope: !3650, file: !3, line: 822, type: !50)
!3728 = !DILocation(line: 822, column: 9, scope: !3650)
!3729 = !DILocation(line: 822, column: 15, scope: !3650)
!3730 = !DILocation(line: 822, column: 18, scope: !3650)
!3731 = !DILocalVariable(name: "bcost", scope: !3650, file: !3, line: 823, type: !50)
!3732 = !DILocation(line: 823, column: 9, scope: !3650)
!3733 = !DILocation(line: 823, column: 17, scope: !3650)
!3734 = !DILocation(line: 823, column: 20, scope: !3650)
!3735 = !DILocalVariable(name: "odir", scope: !3650, file: !3, line: 824, type: !50)
!3736 = !DILocation(line: 824, column: 9, scope: !3650)
!3737 = !DILocalVariable(name: "bdir", scope: !3650, file: !3, line: 824, type: !50)
!3738 = !DILocation(line: 824, column: 20, scope: !3650)
!3739 = !DILocation(line: 827, column: 9, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 827, column: 9)
!3741 = !DILocation(line: 827, column: 20, scope: !3740)
!3742 = !DILocation(line: 827, column: 23, scope: !3740)
!3743 = !DILocation(line: 827, column: 26, scope: !3740)
!3744 = !DILocation(line: 827, column: 29, scope: !3740)
!3745 = !DILocation(line: 827, column: 45, scope: !3740)
!3746 = !DILocation(line: 827, column: 9, scope: !3650)
!3747 = !DILocalVariable(name: "mx", scope: !3748, file: !3, line: 829, type: !50)
!3748 = distinct !DILexicalBlock(scope: !3740, file: !3, line: 828, column: 5)
!3749 = !DILocation(line: 829, column: 13, scope: !3748)
!3750 = !DILocation(line: 829, column: 30, scope: !3748)
!3751 = !DILocation(line: 829, column: 33, scope: !3748)
!3752 = !DILocation(line: 829, column: 41, scope: !3748)
!3753 = !DILocation(line: 829, column: 44, scope: !3748)
!3754 = !DILocation(line: 829, column: 47, scope: !3748)
!3755 = !DILocation(line: 829, column: 61, scope: !3748)
!3756 = !DILocation(line: 829, column: 65, scope: !3748)
!3757 = !DILocation(line: 829, column: 68, scope: !3748)
!3758 = !DILocation(line: 829, column: 71, scope: !3748)
!3759 = !DILocation(line: 829, column: 85, scope: !3748)
!3760 = !DILocation(line: 829, column: 18, scope: !3748)
!3761 = !DILocalVariable(name: "my", scope: !3748, file: !3, line: 830, type: !50)
!3762 = !DILocation(line: 830, column: 13, scope: !3748)
!3763 = !DILocation(line: 830, column: 30, scope: !3748)
!3764 = !DILocation(line: 830, column: 33, scope: !3748)
!3765 = !DILocation(line: 830, column: 41, scope: !3748)
!3766 = !DILocation(line: 830, column: 44, scope: !3748)
!3767 = !DILocation(line: 830, column: 47, scope: !3748)
!3768 = !DILocation(line: 830, column: 61, scope: !3748)
!3769 = !DILocation(line: 830, column: 65, scope: !3748)
!3770 = !DILocation(line: 830, column: 68, scope: !3748)
!3771 = !DILocation(line: 830, column: 71, scope: !3748)
!3772 = !DILocation(line: 830, column: 85, scope: !3748)
!3773 = !DILocation(line: 830, column: 18, scope: !3748)
!3774 = !DILocation(line: 831, column: 14, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3748, file: !3, line: 831, column: 13)
!3776 = !DILocation(line: 831, column: 17, scope: !3775)
!3777 = !DILocation(line: 831, column: 16, scope: !3775)
!3778 = !DILocation(line: 831, column: 23, scope: !3775)
!3779 = !DILocation(line: 831, column: 26, scope: !3775)
!3780 = !DILocation(line: 831, column: 25, scope: !3775)
!3781 = !DILocation(line: 831, column: 21, scope: !3775)
!3782 = !DILocation(line: 831, column: 13, scope: !3748)
!3783 = !DILocalVariable(name: "stride", scope: !3784, file: !3, line: 832, type: !50)
!3784 = distinct !DILexicalBlock(scope: !3775, file: !3, line: 832, column: 13)
!3785 = !DILocation(line: 832, column: 13, scope: !3784)
!3786 = !DILocalVariable(name: "src", scope: !3784, file: !3, line: 832, type: !282)
!3787 = !DILocalVariable(name: "cost", scope: !3784, file: !3, line: 832, type: !50)
!3788 = !DILocation(line: 832, column: 13, scope: !3789)
!3789 = distinct !DILexicalBlock(scope: !3784, file: !3, line: 832, column: 13)
!3790 = !DILocation(line: 832, column: 13, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3789, file: !3, line: 832, column: 13)
!3792 = !DILocation(line: 833, column: 5, scope: !3748)
!3793 = !DILocalVariable(name: "i", scope: !3794, file: !3, line: 836, type: !50)
!3794 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 836, column: 5)
!3795 = !DILocation(line: 836, column: 14, scope: !3794)
!3796 = !DILocation(line: 836, column: 18, scope: !3794)
!3797 = !DILocation(line: 836, column: 10, scope: !3794)
!3798 = !DILocation(line: 836, column: 30, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3794, file: !3, line: 836, column: 5)
!3800 = !DILocation(line: 836, column: 32, scope: !3799)
!3801 = !DILocation(line: 836, column: 5, scope: !3794)
!3802 = !DILocalVariable(name: "omx", scope: !3803, file: !3, line: 838, type: !50)
!3803 = distinct !DILexicalBlock(scope: !3799, file: !3, line: 837, column: 5)
!3804 = !DILocation(line: 838, column: 13, scope: !3803)
!3805 = !DILocation(line: 838, column: 19, scope: !3803)
!3806 = !DILocalVariable(name: "omy", scope: !3803, file: !3, line: 838, type: !50)
!3807 = !DILocation(line: 838, column: 24, scope: !3803)
!3808 = !DILocation(line: 838, column: 30, scope: !3803)
!3809 = !DILocalVariable(name: "costs", scope: !3803, file: !3, line: 839, type: !1089)
!3810 = !DILocation(line: 839, column: 13, scope: !3803)
!3811 = !DILocalVariable(name: "stride", scope: !3803, file: !3, line: 840, type: !50)
!3812 = !DILocation(line: 840, column: 13, scope: !3803)
!3813 = !DILocalVariable(name: "src0", scope: !3803, file: !3, line: 841, type: !282)
!3814 = !DILocation(line: 841, column: 18, scope: !3803)
!3815 = !DILocalVariable(name: "src1", scope: !3803, file: !3, line: 841, type: !282)
!3816 = !DILocation(line: 841, column: 25, scope: !3803)
!3817 = !DILocalVariable(name: "src2", scope: !3803, file: !3, line: 841, type: !282)
!3818 = !DILocation(line: 841, column: 32, scope: !3803)
!3819 = !DILocalVariable(name: "src3", scope: !3803, file: !3, line: 841, type: !282)
!3820 = !DILocation(line: 841, column: 39, scope: !3803)
!3821 = !DILocation(line: 842, column: 16, scope: !3803)
!3822 = !DILocation(line: 842, column: 19, scope: !3803)
!3823 = !DILocation(line: 842, column: 22, scope: !3803)
!3824 = !DILocation(line: 842, column: 31, scope: !3803)
!3825 = !DILocation(line: 842, column: 48, scope: !3803)
!3826 = !DILocation(line: 842, column: 51, scope: !3803)
!3827 = !DILocation(line: 842, column: 59, scope: !3803)
!3828 = !DILocation(line: 842, column: 62, scope: !3803)
!3829 = !DILocation(line: 842, column: 75, scope: !3803)
!3830 = !DILocation(line: 842, column: 80, scope: !3803)
!3831 = !DILocation(line: 842, column: 83, scope: !3803)
!3832 = !DILocation(line: 842, column: 87, scope: !3803)
!3833 = !DILocation(line: 842, column: 91, scope: !3803)
!3834 = !DILocation(line: 842, column: 93, scope: !3803)
!3835 = !DILocation(line: 842, column: 98, scope: !3803)
!3836 = !DILocation(line: 842, column: 101, scope: !3803)
!3837 = !DILocation(line: 842, column: 14, scope: !3803)
!3838 = !DILocation(line: 843, column: 16, scope: !3803)
!3839 = !DILocation(line: 843, column: 19, scope: !3803)
!3840 = !DILocation(line: 843, column: 22, scope: !3803)
!3841 = !DILocation(line: 843, column: 31, scope: !3803)
!3842 = !DILocation(line: 843, column: 34, scope: !3803)
!3843 = !DILocation(line: 843, column: 48, scope: !3803)
!3844 = !DILocation(line: 843, column: 51, scope: !3803)
!3845 = !DILocation(line: 843, column: 59, scope: !3803)
!3846 = !DILocation(line: 843, column: 62, scope: !3803)
!3847 = !DILocation(line: 843, column: 75, scope: !3803)
!3848 = !DILocation(line: 843, column: 78, scope: !3803)
!3849 = !DILocation(line: 843, column: 82, scope: !3803)
!3850 = !DILocation(line: 843, column: 87, scope: !3803)
!3851 = !DILocation(line: 843, column: 89, scope: !3803)
!3852 = !DILocation(line: 843, column: 93, scope: !3803)
!3853 = !DILocation(line: 843, column: 98, scope: !3803)
!3854 = !DILocation(line: 843, column: 101, scope: !3803)
!3855 = !DILocation(line: 843, column: 14, scope: !3803)
!3856 = !DILocation(line: 844, column: 16, scope: !3803)
!3857 = !DILocation(line: 844, column: 23, scope: !3803)
!3858 = !DILocation(line: 844, column: 21, scope: !3803)
!3859 = !DILocation(line: 844, column: 14, scope: !3803)
!3860 = !DILocation(line: 845, column: 16, scope: !3803)
!3861 = !DILocation(line: 845, column: 21, scope: !3803)
!3862 = !DILocation(line: 845, column: 14, scope: !3803)
!3863 = !DILocation(line: 846, column: 9, scope: !3803)
!3864 = !DILocation(line: 846, column: 12, scope: !3803)
!3865 = !DILocation(line: 846, column: 17, scope: !3803)
!3866 = !DILocation(line: 846, column: 28, scope: !3803)
!3867 = !DILocation(line: 846, column: 38, scope: !3803)
!3868 = !DILocation(line: 846, column: 41, scope: !3803)
!3869 = !DILocation(line: 846, column: 52, scope: !3803)
!3870 = !DILocation(line: 846, column: 58, scope: !3803)
!3871 = !DILocation(line: 846, column: 64, scope: !3803)
!3872 = !DILocation(line: 846, column: 70, scope: !3803)
!3873 = !DILocation(line: 846, column: 76, scope: !3803)
!3874 = !DILocation(line: 846, column: 84, scope: !3803)
!3875 = !DILocation(line: 847, column: 9, scope: !3876)
!3876 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 847, column: 9)
!3877 = !DILocation(line: 847, column: 9, scope: !3803)
!3878 = !DILocation(line: 847, column: 9, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 847, column: 9)
!3880 = !DILocation(line: 848, column: 9, scope: !3881)
!3881 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 848, column: 9)
!3882 = !DILocation(line: 848, column: 9, scope: !3803)
!3883 = !DILocation(line: 848, column: 9, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3881, file: !3, line: 848, column: 9)
!3885 = !DILocation(line: 849, column: 9, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 849, column: 9)
!3887 = !DILocation(line: 849, column: 9, scope: !3803)
!3888 = !DILocation(line: 849, column: 9, scope: !3889)
!3889 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 849, column: 9)
!3890 = !DILocation(line: 850, column: 9, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 850, column: 9)
!3892 = !DILocation(line: 850, column: 9, scope: !3803)
!3893 = !DILocation(line: 850, column: 9, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3891, file: !3, line: 850, column: 9)
!3895 = !DILocation(line: 851, column: 14, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3803, file: !3, line: 851, column: 13)
!3897 = !DILocation(line: 851, column: 21, scope: !3896)
!3898 = !DILocation(line: 851, column: 18, scope: !3896)
!3899 = !DILocation(line: 851, column: 29, scope: !3896)
!3900 = !DILocation(line: 851, column: 36, scope: !3896)
!3901 = !DILocation(line: 851, column: 33, scope: !3896)
!3902 = !DILocation(line: 851, column: 26, scope: !3896)
!3903 = !DILocation(line: 851, column: 13, scope: !3803)
!3904 = !DILocation(line: 852, column: 13, scope: !3896)
!3905 = !DILocation(line: 853, column: 5, scope: !3803)
!3906 = !DILocation(line: 836, column: 38, scope: !3799)
!3907 = !DILocation(line: 836, column: 5, scope: !3799)
!3908 = distinct !{!3908, !3801, !3909}
!3909 = !DILocation(line: 853, column: 5, scope: !3794)
!3910 = !DILocation(line: 855, column: 10, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 855, column: 9)
!3912 = !DILocation(line: 855, column: 24, scope: !3911)
!3913 = !DILocation(line: 855, column: 28, scope: !3911)
!3914 = !DILocation(line: 855, column: 31, scope: !3911)
!3915 = !DILocation(line: 855, column: 36, scope: !3911)
!3916 = !DILocation(line: 855, column: 58, scope: !3911)
!3917 = !DILocation(line: 855, column: 61, scope: !3911)
!3918 = !DILocation(line: 855, column: 66, scope: !3911)
!3919 = !DILocation(line: 855, column: 55, scope: !3911)
!3920 = !DILocation(line: 855, column: 77, scope: !3911)
!3921 = !DILocation(line: 855, column: 80, scope: !3911)
!3922 = !DILocation(line: 855, column: 9, scope: !3650)
!3923 = !DILocation(line: 857, column: 15, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3911, file: !3, line: 856, column: 5)
!3925 = !DILocation(line: 858, column: 9, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 858, column: 9)
!3927 = !DILocation(line: 858, column: 9, scope: !3924)
!3928 = !DILocalVariable(name: "stride", scope: !3929, file: !3, line: 858, type: !50)
!3929 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 858, column: 9)
!3930 = !DILocation(line: 858, column: 9, scope: !3929)
!3931 = !DILocalVariable(name: "src", scope: !3929, file: !3, line: 858, type: !282)
!3932 = !DILocalVariable(name: "cost", scope: !3929, file: !3, line: 858, type: !50)
!3933 = !DILocation(line: 858, column: 9, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 858, column: 9)
!3935 = !DILocation(line: 858, column: 9, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3934, file: !3, line: 858, column: 9)
!3937 = !DILocation(line: 858, column: 9, scope: !3938)
!3938 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 858, column: 9)
!3939 = !DILocation(line: 858, column: 9, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 858, column: 9)
!3941 = !DILocation(line: 858, column: 9, scope: !3942)
!3942 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 858, column: 9)
!3943 = !DILocation(line: 858, column: 9, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3942, file: !3, line: 858, column: 9)
!3945 = !DILocation(line: 858, column: 9, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 858, column: 9)
!3947 = !DILocation(line: 858, column: 9, scope: !3948)
!3948 = distinct !DILexicalBlock(scope: !3946, file: !3, line: 858, column: 9)
!3949 = !DILocation(line: 859, column: 5, scope: !3924)
!3950 = !DILocation(line: 862, column: 9, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 862, column: 9)
!3952 = !DILocation(line: 862, column: 9, scope: !3650)
!3953 = !DILocation(line: 864, column: 14, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3955, file: !3, line: 864, column: 13)
!3955 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 863, column: 5)
!3956 = !DILocation(line: 864, column: 19, scope: !3954)
!3957 = !DILocation(line: 864, column: 22, scope: !3954)
!3958 = !DILocation(line: 864, column: 29, scope: !3954)
!3959 = !DILocation(line: 864, column: 28, scope: !3954)
!3960 = !DILocation(line: 864, column: 26, scope: !3954)
!3961 = !DILocation(line: 864, column: 13, scope: !3955)
!3962 = !DILocation(line: 866, column: 23, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 865, column: 9)
!3964 = !DILocation(line: 866, column: 13, scope: !3963)
!3965 = !DILocation(line: 866, column: 16, scope: !3963)
!3966 = !DILocation(line: 866, column: 21, scope: !3963)
!3967 = !DILocation(line: 867, column: 24, scope: !3963)
!3968 = !DILocation(line: 867, column: 13, scope: !3963)
!3969 = !DILocation(line: 867, column: 16, scope: !3963)
!3970 = !DILocation(line: 867, column: 22, scope: !3963)
!3971 = !DILocation(line: 868, column: 24, scope: !3963)
!3972 = !DILocation(line: 868, column: 13, scope: !3963)
!3973 = !DILocation(line: 868, column: 16, scope: !3963)
!3974 = !DILocation(line: 868, column: 22, scope: !3963)
!3975 = !DILocation(line: 870, column: 13, scope: !3963)
!3976 = !DILocation(line: 872, column: 18, scope: !3977)
!3977 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 872, column: 18)
!3978 = !DILocation(line: 872, column: 27, scope: !3977)
!3979 = !DILocation(line: 872, column: 26, scope: !3977)
!3980 = !DILocation(line: 872, column: 24, scope: !3977)
!3981 = !DILocation(line: 872, column: 18, scope: !3954)
!3982 = !DILocation(line: 873, column: 33, scope: !3977)
!3983 = !DILocation(line: 873, column: 14, scope: !3977)
!3984 = !DILocation(line: 873, column: 31, scope: !3977)
!3985 = !DILocation(line: 873, column: 13, scope: !3977)
!3986 = !DILocation(line: 874, column: 5, scope: !3955)
!3987 = !DILocation(line: 877, column: 9, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 877, column: 9)
!3989 = !DILocation(line: 877, column: 12, scope: !3988)
!3990 = !DILocation(line: 877, column: 15, scope: !3988)
!3991 = !DILocation(line: 877, column: 31, scope: !3988)
!3992 = !DILocation(line: 877, column: 9, scope: !3650)
!3993 = !DILocation(line: 879, column: 14, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3988, file: !3, line: 878, column: 5)
!3995 = !DILocalVariable(name: "i", scope: !3996, file: !3, line: 880, type: !50)
!3996 = distinct !DILexicalBlock(scope: !3994, file: !3, line: 880, column: 9)
!3997 = !DILocation(line: 880, column: 18, scope: !3996)
!3998 = !DILocation(line: 880, column: 22, scope: !3996)
!3999 = !DILocation(line: 880, column: 14, scope: !3996)
!4000 = !DILocation(line: 880, column: 34, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3996, file: !3, line: 880, column: 9)
!4002 = !DILocation(line: 880, column: 36, scope: !4001)
!4003 = !DILocation(line: 880, column: 9, scope: !3996)
!4004 = !DILocation(line: 882, column: 17, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 882, column: 17)
!4006 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 881, column: 9)
!4007 = !DILocation(line: 882, column: 24, scope: !4005)
!4008 = !DILocation(line: 882, column: 27, scope: !4005)
!4009 = !DILocation(line: 882, column: 30, scope: !4005)
!4010 = !DILocation(line: 882, column: 21, scope: !4005)
!4011 = !DILocation(line: 882, column: 45, scope: !4005)
!4012 = !DILocation(line: 882, column: 48, scope: !4005)
!4013 = !DILocation(line: 882, column: 55, scope: !4005)
!4014 = !DILocation(line: 882, column: 58, scope: !4005)
!4015 = !DILocation(line: 882, column: 61, scope: !4005)
!4016 = !DILocation(line: 882, column: 52, scope: !4005)
!4017 = !DILocation(line: 882, column: 76, scope: !4005)
!4018 = !DILocation(line: 882, column: 79, scope: !4005)
!4019 = !DILocation(line: 882, column: 86, scope: !4005)
!4020 = !DILocation(line: 882, column: 89, scope: !4005)
!4021 = !DILocation(line: 882, column: 92, scope: !4005)
!4022 = !DILocation(line: 882, column: 83, scope: !4005)
!4023 = !DILocation(line: 882, column: 107, scope: !4005)
!4024 = !DILocation(line: 882, column: 110, scope: !4005)
!4025 = !DILocation(line: 882, column: 117, scope: !4005)
!4026 = !DILocation(line: 882, column: 120, scope: !4005)
!4027 = !DILocation(line: 882, column: 123, scope: !4005)
!4028 = !DILocation(line: 882, column: 114, scope: !4005)
!4029 = !DILocation(line: 882, column: 17, scope: !4006)
!4030 = !DILocation(line: 883, column: 17, scope: !4005)
!4031 = !DILocation(line: 884, column: 20, scope: !4006)
!4032 = !DILocation(line: 884, column: 18, scope: !4006)
!4033 = !DILocalVariable(name: "omx", scope: !4006, file: !3, line: 885, type: !50)
!4034 = !DILocation(line: 885, column: 17, scope: !4006)
!4035 = !DILocation(line: 885, column: 23, scope: !4006)
!4036 = !DILocalVariable(name: "omy", scope: !4006, file: !3, line: 885, type: !50)
!4037 = !DILocation(line: 885, column: 28, scope: !4006)
!4038 = !DILocation(line: 885, column: 34, scope: !4006)
!4039 = !DILocation(line: 886, column: 13, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 886, column: 13)
!4041 = !DILocation(line: 886, column: 13, scope: !4006)
!4042 = !DILocalVariable(name: "stride", scope: !4043, file: !3, line: 886, type: !50)
!4043 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 886, column: 13)
!4044 = !DILocation(line: 886, column: 13, scope: !4043)
!4045 = !DILocalVariable(name: "src", scope: !4043, file: !3, line: 886, type: !282)
!4046 = !DILocalVariable(name: "cost", scope: !4043, file: !3, line: 886, type: !50)
!4047 = !DILocation(line: 886, column: 13, scope: !4048)
!4048 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 886, column: 13)
!4049 = !DILocation(line: 886, column: 13, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4048, file: !3, line: 886, column: 13)
!4051 = !DILocation(line: 886, column: 13, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 886, column: 13)
!4053 = !DILocation(line: 886, column: 13, scope: !4054)
!4054 = distinct !DILexicalBlock(scope: !4050, file: !3, line: 886, column: 13)
!4055 = !DILocation(line: 886, column: 13, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4054, file: !3, line: 886, column: 13)
!4057 = !DILocation(line: 886, column: 13, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4056, file: !3, line: 886, column: 13)
!4059 = !DILocation(line: 886, column: 13, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 886, column: 13)
!4061 = !DILocation(line: 886, column: 13, scope: !4062)
!4062 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 886, column: 13)
!4063 = !DILocation(line: 887, column: 13, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 887, column: 13)
!4065 = !DILocation(line: 887, column: 13, scope: !4006)
!4066 = !DILocalVariable(name: "stride", scope: !4067, file: !3, line: 887, type: !50)
!4067 = distinct !DILexicalBlock(scope: !4064, file: !3, line: 887, column: 13)
!4068 = !DILocation(line: 887, column: 13, scope: !4067)
!4069 = !DILocalVariable(name: "src", scope: !4067, file: !3, line: 887, type: !282)
!4070 = !DILocalVariable(name: "cost", scope: !4067, file: !3, line: 887, type: !50)
!4071 = !DILocation(line: 887, column: 13, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4067, file: !3, line: 887, column: 13)
!4073 = !DILocation(line: 887, column: 13, scope: !4074)
!4074 = distinct !DILexicalBlock(scope: !4072, file: !3, line: 887, column: 13)
!4075 = !DILocation(line: 887, column: 13, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 887, column: 13)
!4077 = !DILocation(line: 887, column: 13, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !4074, file: !3, line: 887, column: 13)
!4079 = !DILocation(line: 887, column: 13, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 887, column: 13)
!4081 = !DILocation(line: 887, column: 13, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 887, column: 13)
!4083 = !DILocation(line: 887, column: 13, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4067, file: !3, line: 887, column: 13)
!4085 = !DILocation(line: 887, column: 13, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4084, file: !3, line: 887, column: 13)
!4087 = !DILocation(line: 888, column: 13, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 888, column: 13)
!4089 = !DILocation(line: 888, column: 13, scope: !4006)
!4090 = !DILocalVariable(name: "stride", scope: !4091, file: !3, line: 888, type: !50)
!4091 = distinct !DILexicalBlock(scope: !4088, file: !3, line: 888, column: 13)
!4092 = !DILocation(line: 888, column: 13, scope: !4091)
!4093 = !DILocalVariable(name: "src", scope: !4091, file: !3, line: 888, type: !282)
!4094 = !DILocalVariable(name: "cost", scope: !4091, file: !3, line: 888, type: !50)
!4095 = !DILocation(line: 888, column: 13, scope: !4096)
!4096 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 888, column: 13)
!4097 = !DILocation(line: 888, column: 13, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 888, column: 13)
!4099 = !DILocation(line: 888, column: 13, scope: !4100)
!4100 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 888, column: 13)
!4101 = !DILocation(line: 888, column: 13, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 888, column: 13)
!4103 = !DILocation(line: 888, column: 13, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 888, column: 13)
!4105 = !DILocation(line: 888, column: 13, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4104, file: !3, line: 888, column: 13)
!4107 = !DILocation(line: 888, column: 13, scope: !4108)
!4108 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 888, column: 13)
!4109 = !DILocation(line: 888, column: 13, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4108, file: !3, line: 888, column: 13)
!4111 = !DILocation(line: 889, column: 13, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 889, column: 13)
!4113 = !DILocation(line: 889, column: 13, scope: !4006)
!4114 = !DILocalVariable(name: "stride", scope: !4115, file: !3, line: 889, type: !50)
!4115 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 889, column: 13)
!4116 = !DILocation(line: 889, column: 13, scope: !4115)
!4117 = !DILocalVariable(name: "src", scope: !4115, file: !3, line: 889, type: !282)
!4118 = !DILocalVariable(name: "cost", scope: !4115, file: !3, line: 889, type: !50)
!4119 = !DILocation(line: 889, column: 13, scope: !4120)
!4120 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 889, column: 13)
!4121 = !DILocation(line: 889, column: 13, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4120, file: !3, line: 889, column: 13)
!4123 = !DILocation(line: 889, column: 13, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 889, column: 13)
!4125 = !DILocation(line: 889, column: 13, scope: !4126)
!4126 = distinct !DILexicalBlock(scope: !4122, file: !3, line: 889, column: 13)
!4127 = !DILocation(line: 889, column: 13, scope: !4128)
!4128 = distinct !DILexicalBlock(scope: !4126, file: !3, line: 889, column: 13)
!4129 = !DILocation(line: 889, column: 13, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4128, file: !3, line: 889, column: 13)
!4131 = !DILocation(line: 889, column: 13, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 889, column: 13)
!4133 = !DILocation(line: 889, column: 13, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 889, column: 13)
!4135 = !DILocation(line: 890, column: 18, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 890, column: 17)
!4137 = !DILocation(line: 890, column: 25, scope: !4136)
!4138 = !DILocation(line: 890, column: 22, scope: !4136)
!4139 = !DILocation(line: 890, column: 33, scope: !4136)
!4140 = !DILocation(line: 890, column: 40, scope: !4136)
!4141 = !DILocation(line: 890, column: 37, scope: !4136)
!4142 = !DILocation(line: 890, column: 30, scope: !4136)
!4143 = !DILocation(line: 890, column: 17, scope: !4006)
!4144 = !DILocation(line: 891, column: 17, scope: !4136)
!4145 = !DILocation(line: 892, column: 9, scope: !4006)
!4146 = !DILocation(line: 880, column: 42, scope: !4001)
!4147 = !DILocation(line: 880, column: 9, scope: !4001)
!4148 = distinct !{!4148, !4003, !4149}
!4149 = !DILocation(line: 892, column: 9, scope: !3996)
!4150 = !DILocation(line: 893, column: 5, scope: !3994)
!4151 = !DILocation(line: 895, column: 14, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !3988, file: !3, line: 895, column: 14)
!4153 = !DILocation(line: 895, column: 20, scope: !4152)
!4154 = !DILocation(line: 895, column: 23, scope: !4152)
!4155 = !DILocation(line: 895, column: 26, scope: !4152)
!4156 = !DILocation(line: 895, column: 18, scope: !4152)
!4157 = !DILocation(line: 895, column: 41, scope: !4152)
!4158 = !DILocation(line: 895, column: 44, scope: !4152)
!4159 = !DILocation(line: 895, column: 50, scope: !4152)
!4160 = !DILocation(line: 895, column: 53, scope: !4152)
!4161 = !DILocation(line: 895, column: 56, scope: !4152)
!4162 = !DILocation(line: 895, column: 48, scope: !4152)
!4163 = !DILocation(line: 895, column: 71, scope: !4152)
!4164 = !DILocation(line: 895, column: 74, scope: !4152)
!4165 = !DILocation(line: 895, column: 80, scope: !4152)
!4166 = !DILocation(line: 895, column: 83, scope: !4152)
!4167 = !DILocation(line: 895, column: 86, scope: !4152)
!4168 = !DILocation(line: 895, column: 78, scope: !4152)
!4169 = !DILocation(line: 895, column: 101, scope: !4152)
!4170 = !DILocation(line: 895, column: 104, scope: !4152)
!4171 = !DILocation(line: 895, column: 110, scope: !4152)
!4172 = !DILocation(line: 895, column: 113, scope: !4152)
!4173 = !DILocation(line: 895, column: 116, scope: !4152)
!4174 = !DILocation(line: 895, column: 108, scope: !4152)
!4175 = !DILocation(line: 895, column: 14, scope: !3988)
!4176 = !DILocalVariable(name: "costs", scope: !4177, file: !3, line: 897, type: !1089)
!4177 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 896, column: 5)
!4178 = !DILocation(line: 897, column: 13, scope: !4177)
!4179 = !DILocalVariable(name: "omx", scope: !4177, file: !3, line: 898, type: !50)
!4180 = !DILocation(line: 898, column: 13, scope: !4177)
!4181 = !DILocation(line: 898, column: 19, scope: !4177)
!4182 = !DILocalVariable(name: "omy", scope: !4177, file: !3, line: 898, type: !50)
!4183 = !DILocation(line: 898, column: 24, scope: !4177)
!4184 = !DILocation(line: 898, column: 30, scope: !4177)
!4185 = !DILocation(line: 900, column: 9, scope: !4177)
!4186 = !DILocation(line: 900, column: 12, scope: !4177)
!4187 = !DILocation(line: 900, column: 15, scope: !4177)
!4188 = !DILocation(line: 900, column: 24, scope: !4177)
!4189 = !DILocation(line: 900, column: 36, scope: !4177)
!4190 = !DILocation(line: 900, column: 39, scope: !4177)
!4191 = !DILocation(line: 900, column: 47, scope: !4177)
!4192 = !DILocation(line: 900, column: 50, scope: !4177)
!4193 = !DILocation(line: 900, column: 63, scope: !4177)
!4194 = !DILocation(line: 900, column: 68, scope: !4177)
!4195 = !DILocation(line: 900, column: 71, scope: !4177)
!4196 = !DILocation(line: 900, column: 75, scope: !4177)
!4197 = !DILocation(line: 900, column: 79, scope: !4177)
!4198 = !DILocation(line: 900, column: 84, scope: !4177)
!4199 = !DILocation(line: 900, column: 87, scope: !4177)
!4200 = !DILocation(line: 901, column: 9, scope: !4177)
!4201 = !DILocation(line: 901, column: 12, scope: !4177)
!4202 = !DILocation(line: 901, column: 15, scope: !4177)
!4203 = !DILocation(line: 901, column: 24, scope: !4177)
!4204 = !DILocation(line: 901, column: 27, scope: !4177)
!4205 = !DILocation(line: 901, column: 36, scope: !4177)
!4206 = !DILocation(line: 901, column: 39, scope: !4177)
!4207 = !DILocation(line: 901, column: 47, scope: !4177)
!4208 = !DILocation(line: 901, column: 50, scope: !4177)
!4209 = !DILocation(line: 901, column: 63, scope: !4177)
!4210 = !DILocation(line: 901, column: 68, scope: !4177)
!4211 = !DILocation(line: 901, column: 71, scope: !4177)
!4212 = !DILocation(line: 901, column: 75, scope: !4177)
!4213 = !DILocation(line: 901, column: 79, scope: !4177)
!4214 = !DILocation(line: 901, column: 84, scope: !4177)
!4215 = !DILocation(line: 901, column: 87, scope: !4177)
!4216 = !DILocation(line: 902, column: 9, scope: !4177)
!4217 = !DILocation(line: 902, column: 12, scope: !4177)
!4218 = !DILocation(line: 902, column: 15, scope: !4177)
!4219 = !DILocation(line: 902, column: 24, scope: !4177)
!4220 = !DILocation(line: 902, column: 27, scope: !4177)
!4221 = !DILocation(line: 902, column: 36, scope: !4177)
!4222 = !DILocation(line: 902, column: 39, scope: !4177)
!4223 = !DILocation(line: 902, column: 47, scope: !4177)
!4224 = !DILocation(line: 902, column: 50, scope: !4177)
!4225 = !DILocation(line: 902, column: 63, scope: !4177)
!4226 = !DILocation(line: 902, column: 66, scope: !4177)
!4227 = !DILocation(line: 902, column: 70, scope: !4177)
!4228 = !DILocation(line: 902, column: 75, scope: !4177)
!4229 = !DILocation(line: 902, column: 79, scope: !4177)
!4230 = !DILocation(line: 902, column: 84, scope: !4177)
!4231 = !DILocation(line: 902, column: 87, scope: !4177)
!4232 = !DILocation(line: 903, column: 9, scope: !4177)
!4233 = !DILocation(line: 903, column: 12, scope: !4177)
!4234 = !DILocation(line: 903, column: 15, scope: !4177)
!4235 = !DILocation(line: 903, column: 24, scope: !4177)
!4236 = !DILocation(line: 903, column: 27, scope: !4177)
!4237 = !DILocation(line: 903, column: 36, scope: !4177)
!4238 = !DILocation(line: 903, column: 39, scope: !4177)
!4239 = !DILocation(line: 903, column: 47, scope: !4177)
!4240 = !DILocation(line: 903, column: 50, scope: !4177)
!4241 = !DILocation(line: 903, column: 63, scope: !4177)
!4242 = !DILocation(line: 903, column: 66, scope: !4177)
!4243 = !DILocation(line: 903, column: 70, scope: !4177)
!4244 = !DILocation(line: 903, column: 75, scope: !4177)
!4245 = !DILocation(line: 903, column: 79, scope: !4177)
!4246 = !DILocation(line: 903, column: 84, scope: !4177)
!4247 = !DILocation(line: 903, column: 87, scope: !4177)
!4248 = !DILocation(line: 904, column: 9, scope: !4177)
!4249 = !DILocation(line: 904, column: 12, scope: !4177)
!4250 = !DILocation(line: 904, column: 17, scope: !4177)
!4251 = !DILocation(line: 904, column: 28, scope: !4177)
!4252 = !DILocation(line: 904, column: 38, scope: !4177)
!4253 = !DILocation(line: 904, column: 41, scope: !4177)
!4254 = !DILocation(line: 904, column: 52, scope: !4177)
!4255 = !DILocation(line: 904, column: 57, scope: !4177)
!4256 = !DILocation(line: 904, column: 60, scope: !4177)
!4257 = !DILocation(line: 904, column: 65, scope: !4177)
!4258 = !DILocation(line: 904, column: 68, scope: !4177)
!4259 = !DILocation(line: 904, column: 73, scope: !4177)
!4260 = !DILocation(line: 904, column: 76, scope: !4177)
!4261 = !DILocation(line: 904, column: 85, scope: !4177)
!4262 = !DILocation(line: 905, column: 9, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 905, column: 9)
!4264 = !DILocation(line: 905, column: 9, scope: !4177)
!4265 = !DILocation(line: 905, column: 9, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 905, column: 9)
!4267 = !DILocation(line: 906, column: 9, scope: !4268)
!4268 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 906, column: 9)
!4269 = !DILocation(line: 906, column: 9, scope: !4177)
!4270 = !DILocation(line: 906, column: 9, scope: !4271)
!4271 = distinct !DILexicalBlock(scope: !4268, file: !3, line: 906, column: 9)
!4272 = !DILocation(line: 907, column: 9, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 907, column: 9)
!4274 = !DILocation(line: 907, column: 9, scope: !4177)
!4275 = !DILocation(line: 907, column: 9, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 907, column: 9)
!4277 = !DILocation(line: 908, column: 9, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4177, file: !3, line: 908, column: 9)
!4279 = !DILocation(line: 908, column: 9, scope: !4177)
!4280 = !DILocation(line: 908, column: 9, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 908, column: 9)
!4282 = !DILocation(line: 909, column: 5, scope: !4177)
!4283 = !DILocation(line: 911, column: 15, scope: !3650)
!4284 = !DILocation(line: 911, column: 5, scope: !3650)
!4285 = !DILocation(line: 911, column: 8, scope: !3650)
!4286 = !DILocation(line: 911, column: 13, scope: !3650)
!4287 = !DILocation(line: 912, column: 16, scope: !3650)
!4288 = !DILocation(line: 912, column: 5, scope: !3650)
!4289 = !DILocation(line: 912, column: 8, scope: !3650)
!4290 = !DILocation(line: 912, column: 14, scope: !3650)
!4291 = !DILocation(line: 913, column: 16, scope: !3650)
!4292 = !DILocation(line: 913, column: 5, scope: !3650)
!4293 = !DILocation(line: 913, column: 8, scope: !3650)
!4294 = !DILocation(line: 913, column: 14, scope: !3650)
!4295 = !DILocation(line: 914, column: 18, scope: !3650)
!4296 = !DILocation(line: 914, column: 29, scope: !3650)
!4297 = !DILocation(line: 914, column: 36, scope: !3650)
!4298 = !DILocation(line: 914, column: 47, scope: !3650)
!4299 = !DILocation(line: 914, column: 34, scope: !3650)
!4300 = !DILocation(line: 914, column: 5, scope: !3650)
!4301 = !DILocation(line: 914, column: 8, scope: !3650)
!4302 = !DILocation(line: 914, column: 16, scope: !3650)
!4303 = !DILocation(line: 915, column: 1, scope: !3650)
!4304 = distinct !DISubprogram(name: "x264_me_refine_qpel", scope: !3, file: !3, line: 758, type: !4305, scopeLine: 759, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!4305 = !DISubroutineType(types: !4306)
!4306 = !{null, !86, !1372}
!4307 = !DILocalVariable(name: "h", arg: 1, scope: !4304, file: !3, line: 758, type: !86)
!4308 = !DILocation(line: 758, column: 35, scope: !4304)
!4309 = !DILocalVariable(name: "m", arg: 2, scope: !4304, file: !3, line: 758, type: !1372)
!4310 = !DILocation(line: 758, column: 49, scope: !4304)
!4311 = !DILocalVariable(name: "hpel", scope: !4304, file: !3, line: 760, type: !50)
!4312 = !DILocation(line: 760, column: 9, scope: !4304)
!4313 = !DILocation(line: 760, column: 34, scope: !4304)
!4314 = !DILocation(line: 760, column: 37, scope: !4304)
!4315 = !DILocation(line: 760, column: 40, scope: !4304)
!4316 = !DILocation(line: 760, column: 16, scope: !4304)
!4317 = !DILocalVariable(name: "qpel", scope: !4304, file: !3, line: 761, type: !50)
!4318 = !DILocation(line: 761, column: 9, scope: !4304)
!4319 = !DILocation(line: 761, column: 34, scope: !4304)
!4320 = !DILocation(line: 761, column: 37, scope: !4304)
!4321 = !DILocation(line: 761, column: 40, scope: !4304)
!4322 = !DILocation(line: 761, column: 16, scope: !4304)
!4323 = !DILocation(line: 763, column: 9, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4304, file: !3, line: 763, column: 9)
!4325 = !DILocation(line: 763, column: 12, scope: !4324)
!4326 = !DILocation(line: 763, column: 20, scope: !4324)
!4327 = !DILocation(line: 763, column: 9, scope: !4304)
!4328 = !DILocation(line: 764, column: 20, scope: !4324)
!4329 = !DILocation(line: 764, column: 23, scope: !4324)
!4330 = !DILocation(line: 764, column: 9, scope: !4324)
!4331 = !DILocation(line: 764, column: 12, scope: !4324)
!4332 = !DILocation(line: 764, column: 17, scope: !4324)
!4333 = !DILocation(line: 766, column: 20, scope: !4304)
!4334 = !DILocation(line: 766, column: 23, scope: !4304)
!4335 = !DILocation(line: 766, column: 26, scope: !4304)
!4336 = !DILocation(line: 766, column: 32, scope: !4304)
!4337 = !DILocation(line: 766, column: 5, scope: !4304)
!4338 = !DILocation(line: 767, column: 1, scope: !4304)
!4339 = distinct !DISubprogram(name: "x264_me_refine_qpel_refdupe", scope: !3, file: !3, line: 769, type: !4340, scopeLine: 770, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!4340 = !DISubroutineType(types: !4341)
!4341 = !{null, !86, !1372, !638}
!4342 = !DILocalVariable(name: "h", arg: 1, scope: !4339, file: !3, line: 769, type: !86)
!4343 = !DILocation(line: 769, column: 43, scope: !4339)
!4344 = !DILocalVariable(name: "m", arg: 2, scope: !4339, file: !3, line: 769, type: !1372)
!4345 = !DILocation(line: 769, column: 57, scope: !4339)
!4346 = !DILocalVariable(name: "p_halfpel_thresh", arg: 3, scope: !4339, file: !3, line: 769, type: !638)
!4347 = !DILocation(line: 769, column: 65, scope: !4339)
!4348 = !DILocation(line: 771, column: 20, scope: !4339)
!4349 = !DILocation(line: 771, column: 23, scope: !4339)
!4350 = !DILocation(line: 771, column: 29, scope: !4339)
!4351 = !DILocation(line: 771, column: 89, scope: !4339)
!4352 = !DILocation(line: 771, column: 5, scope: !4339)
!4353 = !DILocation(line: 772, column: 1, scope: !4339)
!4354 = distinct !DISubprogram(name: "x264_me_refine_bidir_satd", scope: !3, file: !3, line: 1081, type: !4355, scopeLine: 1082, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!4355 = !DISubroutineType(types: !4356)
!4356 = !{null, !86, !1372, !1372, !50}
!4357 = !DILocalVariable(name: "h", arg: 1, scope: !4354, file: !3, line: 1081, type: !86)
!4358 = !DILocation(line: 1081, column: 41, scope: !4354)
!4359 = !DILocalVariable(name: "m0", arg: 2, scope: !4354, file: !3, line: 1081, type: !1372)
!4360 = !DILocation(line: 1081, column: 55, scope: !4354)
!4361 = !DILocalVariable(name: "m1", arg: 3, scope: !4354, file: !3, line: 1081, type: !1372)
!4362 = !DILocation(line: 1081, column: 70, scope: !4354)
!4363 = !DILocalVariable(name: "i_weight", arg: 4, scope: !4354, file: !3, line: 1081, type: !50)
!4364 = !DILocation(line: 1081, column: 78, scope: !4354)
!4365 = !DILocation(line: 1083, column: 27, scope: !4354)
!4366 = !DILocation(line: 1083, column: 30, scope: !4354)
!4367 = !DILocation(line: 1083, column: 34, scope: !4354)
!4368 = !DILocation(line: 1083, column: 38, scope: !4354)
!4369 = !DILocation(line: 1083, column: 5, scope: !4354)
!4370 = !DILocation(line: 1084, column: 1, scope: !4354)
!4371 = !DILocalVariable(name: "h", arg: 1, scope: !1425, file: !3, line: 938, type: !86)
!4372 = !DILocation(line: 938, column: 57, scope: !1425)
!4373 = !DILocalVariable(name: "m0", arg: 2, scope: !1425, file: !3, line: 938, type: !1372)
!4374 = !DILocation(line: 938, column: 71, scope: !1425)
!4375 = !DILocalVariable(name: "m1", arg: 3, scope: !1425, file: !3, line: 938, type: !1372)
!4376 = !DILocation(line: 938, column: 86, scope: !1425)
!4377 = !DILocalVariable(name: "i_weight", arg: 4, scope: !1425, file: !3, line: 938, type: !50)
!4378 = !DILocation(line: 938, column: 94, scope: !1425)
!4379 = !DILocalVariable(name: "i8", arg: 5, scope: !1425, file: !3, line: 938, type: !50)
!4380 = !DILocation(line: 938, column: 108, scope: !1425)
!4381 = !DILocalVariable(name: "i_lambda2", arg: 6, scope: !1425, file: !3, line: 938, type: !50)
!4382 = !DILocation(line: 938, column: 116, scope: !1425)
!4383 = !DILocalVariable(name: "rd", arg: 7, scope: !1425, file: !3, line: 938, type: !50)
!4384 = !DILocation(line: 938, column: 131, scope: !1425)
!4385 = !DILocalVariable(name: "cache0_mv", scope: !1425, file: !3, line: 940, type: !792)
!4386 = !DILocation(line: 940, column: 14, scope: !1425)
!4387 = !DILocation(line: 940, column: 26, scope: !1425)
!4388 = !DILocation(line: 940, column: 29, scope: !1425)
!4389 = !DILocation(line: 940, column: 32, scope: !1425)
!4390 = !DILocation(line: 940, column: 38, scope: !1425)
!4391 = !DILocation(line: 940, column: 55, scope: !1425)
!4392 = !DILocation(line: 940, column: 57, scope: !1425)
!4393 = !DILocation(line: 940, column: 44, scope: !1425)
!4394 = !DILocalVariable(name: "cache1_mv", scope: !1425, file: !3, line: 941, type: !792)
!4395 = !DILocation(line: 941, column: 14, scope: !1425)
!4396 = !DILocation(line: 941, column: 26, scope: !1425)
!4397 = !DILocation(line: 941, column: 29, scope: !1425)
!4398 = !DILocation(line: 941, column: 32, scope: !1425)
!4399 = !DILocation(line: 941, column: 38, scope: !1425)
!4400 = !DILocation(line: 941, column: 55, scope: !1425)
!4401 = !DILocation(line: 941, column: 57, scope: !1425)
!4402 = !DILocation(line: 941, column: 44, scope: !1425)
!4403 = !DILocalVariable(name: "i_pixel", scope: !1425, file: !3, line: 942, type: !1434)
!4404 = !DILocation(line: 942, column: 15, scope: !1425)
!4405 = !DILocation(line: 942, column: 25, scope: !1425)
!4406 = !DILocation(line: 942, column: 29, scope: !1425)
!4407 = !DILocalVariable(name: "bw", scope: !1425, file: !3, line: 943, type: !1434)
!4408 = !DILocation(line: 943, column: 15, scope: !1425)
!4409 = !DILocation(line: 943, column: 36, scope: !1425)
!4410 = !DILocation(line: 943, column: 20, scope: !1425)
!4411 = !DILocation(line: 943, column: 45, scope: !1425)
!4412 = !DILocalVariable(name: "bh", scope: !1425, file: !3, line: 944, type: !1434)
!4413 = !DILocation(line: 944, column: 15, scope: !1425)
!4414 = !DILocation(line: 944, column: 36, scope: !1425)
!4415 = !DILocation(line: 944, column: 20, scope: !1425)
!4416 = !DILocation(line: 944, column: 45, scope: !1425)
!4417 = !DILocalVariable(name: "pixy_buf", scope: !1425, file: !3, line: 945, type: !4418, align: 128)
!4418 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 36864, elements: !4419)
!4419 = !{!36, !860, !336}
!4420 = !DILocation(line: 945, column: 5, scope: !1425)
!4421 = !DILocalVariable(name: "pixu_buf", scope: !1425, file: !3, line: 946, type: !4422, align: 64)
!4422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 9216, elements: !4423)
!4423 = !{!36, !860, !148}
!4424 = !DILocation(line: 946, column: 5, scope: !1425)
!4425 = !DILocalVariable(name: "pixv_buf", scope: !1425, file: !3, line: 947, type: !4422, align: 64)
!4426 = !DILocation(line: 947, column: 5, scope: !1425)
!4427 = !DILocalVariable(name: "src", scope: !1425, file: !3, line: 948, type: !4428)
!4428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !282, size: 1152, elements: !4429)
!4429 = !{!36, !860}
!4430 = !DILocation(line: 948, column: 14, scope: !1425)
!4431 = !DILocalVariable(name: "pix", scope: !1425, file: !3, line: 949, type: !282)
!4432 = !DILocation(line: 949, column: 14, scope: !1425)
!4433 = !DILocation(line: 949, column: 22, scope: !1425)
!4434 = !DILocation(line: 949, column: 25, scope: !1425)
!4435 = !DILocation(line: 949, column: 28, scope: !1425)
!4436 = !DILocation(line: 949, column: 32, scope: !1425)
!4437 = !DILocation(line: 949, column: 43, scope: !1425)
!4438 = !DILocation(line: 949, column: 45, scope: !1425)
!4439 = !DILocation(line: 949, column: 49, scope: !1425)
!4440 = !DILocation(line: 949, column: 51, scope: !1425)
!4441 = !DILocation(line: 949, column: 65, scope: !1425)
!4442 = !DILocation(line: 949, column: 67, scope: !1425)
!4443 = !DILocation(line: 949, column: 70, scope: !1425)
!4444 = !DILocation(line: 949, column: 63, scope: !1425)
!4445 = !DILocalVariable(name: "pixu", scope: !1425, file: !3, line: 950, type: !282)
!4446 = !DILocation(line: 950, column: 14, scope: !1425)
!4447 = !DILocation(line: 950, column: 22, scope: !1425)
!4448 = !DILocation(line: 950, column: 25, scope: !1425)
!4449 = !DILocation(line: 950, column: 28, scope: !1425)
!4450 = !DILocation(line: 950, column: 32, scope: !1425)
!4451 = !DILocation(line: 950, column: 43, scope: !1425)
!4452 = !DILocation(line: 950, column: 45, scope: !1425)
!4453 = !DILocation(line: 950, column: 49, scope: !1425)
!4454 = !DILocation(line: 950, column: 51, scope: !1425)
!4455 = !DILocation(line: 950, column: 65, scope: !1425)
!4456 = !DILocation(line: 950, column: 67, scope: !1425)
!4457 = !DILocation(line: 950, column: 70, scope: !1425)
!4458 = !DILocation(line: 950, column: 63, scope: !1425)
!4459 = !DILocalVariable(name: "pixv", scope: !1425, file: !3, line: 951, type: !282)
!4460 = !DILocation(line: 951, column: 14, scope: !1425)
!4461 = !DILocation(line: 951, column: 22, scope: !1425)
!4462 = !DILocation(line: 951, column: 25, scope: !1425)
!4463 = !DILocation(line: 951, column: 28, scope: !1425)
!4464 = !DILocation(line: 951, column: 32, scope: !1425)
!4465 = !DILocation(line: 951, column: 43, scope: !1425)
!4466 = !DILocation(line: 951, column: 45, scope: !1425)
!4467 = !DILocation(line: 951, column: 49, scope: !1425)
!4468 = !DILocation(line: 951, column: 51, scope: !1425)
!4469 = !DILocation(line: 951, column: 65, scope: !1425)
!4470 = !DILocation(line: 951, column: 67, scope: !1425)
!4471 = !DILocation(line: 951, column: 70, scope: !1425)
!4472 = !DILocation(line: 951, column: 63, scope: !1425)
!4473 = !DILocalVariable(name: "ref0", scope: !1425, file: !3, line: 952, type: !1434)
!4474 = !DILocation(line: 952, column: 15, scope: !1425)
!4475 = !DILocation(line: 952, column: 22, scope: !1425)
!4476 = !DILocation(line: 952, column: 25, scope: !1425)
!4477 = !DILocation(line: 952, column: 28, scope: !1425)
!4478 = !DILocation(line: 952, column: 34, scope: !1425)
!4479 = !DILocation(line: 952, column: 52, scope: !1425)
!4480 = !DILocation(line: 952, column: 54, scope: !1425)
!4481 = !DILocation(line: 952, column: 41, scope: !1425)
!4482 = !DILocalVariable(name: "ref1", scope: !1425, file: !3, line: 953, type: !1434)
!4483 = !DILocation(line: 953, column: 15, scope: !1425)
!4484 = !DILocation(line: 953, column: 22, scope: !1425)
!4485 = !DILocation(line: 953, column: 25, scope: !1425)
!4486 = !DILocation(line: 953, column: 28, scope: !1425)
!4487 = !DILocation(line: 953, column: 34, scope: !1425)
!4488 = !DILocation(line: 953, column: 52, scope: !1425)
!4489 = !DILocation(line: 953, column: 54, scope: !1425)
!4490 = !DILocation(line: 953, column: 41, scope: !1425)
!4491 = !DILocalVariable(name: "mv0y_offset", scope: !1425, file: !3, line: 954, type: !1434)
!4492 = !DILocation(line: 954, column: 15, scope: !1425)
!4493 = !DILocation(line: 954, column: 29, scope: !1425)
!4494 = !DILocation(line: 954, column: 32, scope: !1425)
!4495 = !DILocation(line: 954, column: 35, scope: !1425)
!4496 = !DILocation(line: 954, column: 50, scope: !1425)
!4497 = !DILocation(line: 954, column: 48, scope: !1425)
!4498 = !DILocation(line: 954, column: 58, scope: !1425)
!4499 = !DILocation(line: 954, column: 61, scope: !1425)
!4500 = !DILocation(line: 954, column: 64, scope: !1425)
!4501 = !DILocation(line: 954, column: 71, scope: !1425)
!4502 = !DILocation(line: 954, column: 75, scope: !1425)
!4503 = !DILocation(line: 954, column: 78, scope: !1425)
!4504 = !DILocalVariable(name: "mv1y_offset", scope: !1425, file: !3, line: 955, type: !1434)
!4505 = !DILocation(line: 955, column: 15, scope: !1425)
!4506 = !DILocation(line: 955, column: 29, scope: !1425)
!4507 = !DILocation(line: 955, column: 32, scope: !1425)
!4508 = !DILocation(line: 955, column: 35, scope: !1425)
!4509 = !DILocation(line: 955, column: 50, scope: !1425)
!4510 = !DILocation(line: 955, column: 48, scope: !1425)
!4511 = !DILocation(line: 955, column: 58, scope: !1425)
!4512 = !DILocation(line: 955, column: 61, scope: !1425)
!4513 = !DILocation(line: 955, column: 64, scope: !1425)
!4514 = !DILocation(line: 955, column: 71, scope: !1425)
!4515 = !DILocation(line: 955, column: 75, scope: !1425)
!4516 = !DILocation(line: 955, column: 78, scope: !1425)
!4517 = !DILocalVariable(name: "stride", scope: !1425, file: !3, line: 956, type: !4518)
!4518 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 576, elements: !4429)
!4519 = !DILocation(line: 956, column: 9, scope: !1425)
!4520 = !DILocalVariable(name: "bm0x", scope: !1425, file: !3, line: 957, type: !50)
!4521 = !DILocation(line: 957, column: 9, scope: !1425)
!4522 = !DILocation(line: 957, column: 16, scope: !1425)
!4523 = !DILocation(line: 957, column: 20, scope: !1425)
!4524 = !DILocalVariable(name: "bm0y", scope: !1425, file: !3, line: 958, type: !50)
!4525 = !DILocation(line: 958, column: 9, scope: !1425)
!4526 = !DILocation(line: 958, column: 16, scope: !1425)
!4527 = !DILocation(line: 958, column: 20, scope: !1425)
!4528 = !DILocalVariable(name: "bm1x", scope: !1425, file: !3, line: 959, type: !50)
!4529 = !DILocation(line: 959, column: 9, scope: !1425)
!4530 = !DILocation(line: 959, column: 16, scope: !1425)
!4531 = !DILocation(line: 959, column: 20, scope: !1425)
!4532 = !DILocalVariable(name: "bm1y", scope: !1425, file: !3, line: 960, type: !50)
!4533 = !DILocation(line: 960, column: 9, scope: !1425)
!4534 = !DILocation(line: 960, column: 16, scope: !1425)
!4535 = !DILocation(line: 960, column: 20, scope: !1425)
!4536 = !DILocalVariable(name: "bcost", scope: !1425, file: !3, line: 961, type: !50)
!4537 = !DILocation(line: 961, column: 9, scope: !1425)
!4538 = !DILocalVariable(name: "mc_list0", scope: !1425, file: !3, line: 962, type: !50)
!4539 = !DILocation(line: 962, column: 9, scope: !1425)
!4540 = !DILocalVariable(name: "mc_list1", scope: !1425, file: !3, line: 962, type: !50)
!4541 = !DILocation(line: 962, column: 23, scope: !1425)
!4542 = !DILocalVariable(name: "bcostrd", scope: !1425, file: !3, line: 963, type: !62)
!4543 = !DILocation(line: 963, column: 14, scope: !1425)
!4544 = !DILocalVariable(name: "amvd", scope: !1425, file: !3, line: 964, type: !32)
!4545 = !DILocation(line: 964, column: 14, scope: !1425)
!4546 = !DILocalVariable(name: "visited", scope: !1425, file: !3, line: 966, type: !4547, align: 128)
!4547 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 4096, elements: !4548)
!4548 = !{!72, !72, !72}
!4549 = !DILocation(line: 966, column: 5, scope: !1425)
!4550 = !DILocation(line: 986, column: 9, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !1425, file: !3, line: 986, column: 9)
!4552 = !DILocation(line: 986, column: 16, scope: !4551)
!4553 = !DILocation(line: 986, column: 19, scope: !4551)
!4554 = !DILocation(line: 986, column: 22, scope: !4551)
!4555 = !DILocation(line: 986, column: 37, scope: !4551)
!4556 = !DILocation(line: 986, column: 14, scope: !4551)
!4557 = !DILocation(line: 986, column: 41, scope: !4551)
!4558 = !DILocation(line: 986, column: 44, scope: !4551)
!4559 = !DILocation(line: 986, column: 51, scope: !4551)
!4560 = !DILocation(line: 986, column: 54, scope: !4551)
!4561 = !DILocation(line: 986, column: 57, scope: !4551)
!4562 = !DILocation(line: 986, column: 72, scope: !4551)
!4563 = !DILocation(line: 986, column: 49, scope: !4551)
!4564 = !DILocation(line: 986, column: 76, scope: !4551)
!4565 = !DILocation(line: 987, column: 9, scope: !4551)
!4566 = !DILocation(line: 987, column: 16, scope: !4551)
!4567 = !DILocation(line: 987, column: 19, scope: !4551)
!4568 = !DILocation(line: 987, column: 22, scope: !4551)
!4569 = !DILocation(line: 987, column: 37, scope: !4551)
!4570 = !DILocation(line: 987, column: 14, scope: !4551)
!4571 = !DILocation(line: 987, column: 41, scope: !4551)
!4572 = !DILocation(line: 987, column: 44, scope: !4551)
!4573 = !DILocation(line: 987, column: 51, scope: !4551)
!4574 = !DILocation(line: 987, column: 54, scope: !4551)
!4575 = !DILocation(line: 987, column: 57, scope: !4551)
!4576 = !DILocation(line: 987, column: 72, scope: !4551)
!4577 = !DILocation(line: 987, column: 49, scope: !4551)
!4578 = !DILocation(line: 987, column: 76, scope: !4551)
!4579 = !DILocation(line: 988, column: 9, scope: !4551)
!4580 = !DILocation(line: 988, column: 16, scope: !4551)
!4581 = !DILocation(line: 988, column: 19, scope: !4551)
!4582 = !DILocation(line: 988, column: 22, scope: !4551)
!4583 = !DILocation(line: 988, column: 37, scope: !4551)
!4584 = !DILocation(line: 988, column: 14, scope: !4551)
!4585 = !DILocation(line: 988, column: 41, scope: !4551)
!4586 = !DILocation(line: 988, column: 44, scope: !4551)
!4587 = !DILocation(line: 988, column: 51, scope: !4551)
!4588 = !DILocation(line: 988, column: 54, scope: !4551)
!4589 = !DILocation(line: 988, column: 57, scope: !4551)
!4590 = !DILocation(line: 988, column: 72, scope: !4551)
!4591 = !DILocation(line: 988, column: 49, scope: !4551)
!4592 = !DILocation(line: 988, column: 76, scope: !4551)
!4593 = !DILocation(line: 989, column: 9, scope: !4551)
!4594 = !DILocation(line: 989, column: 16, scope: !4551)
!4595 = !DILocation(line: 989, column: 19, scope: !4551)
!4596 = !DILocation(line: 989, column: 22, scope: !4551)
!4597 = !DILocation(line: 989, column: 37, scope: !4551)
!4598 = !DILocation(line: 989, column: 14, scope: !4551)
!4599 = !DILocation(line: 989, column: 41, scope: !4551)
!4600 = !DILocation(line: 989, column: 44, scope: !4551)
!4601 = !DILocation(line: 989, column: 51, scope: !4551)
!4602 = !DILocation(line: 989, column: 54, scope: !4551)
!4603 = !DILocation(line: 989, column: 57, scope: !4551)
!4604 = !DILocation(line: 989, column: 72, scope: !4551)
!4605 = !DILocation(line: 989, column: 49, scope: !4551)
!4606 = !DILocation(line: 986, column: 9, scope: !1425)
!4607 = !DILocation(line: 990, column: 9, scope: !4551)
!4608 = !DILocation(line: 992, column: 9, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !1425, file: !3, line: 992, column: 9)
!4610 = !DILocation(line: 992, column: 12, scope: !4609)
!4611 = !DILocation(line: 992, column: 15, scope: !4609)
!4612 = !DILocation(line: 992, column: 19, scope: !4609)
!4613 = !DILocation(line: 992, column: 27, scope: !4609)
!4614 = !DILocation(line: 992, column: 42, scope: !4609)
!4615 = !DILocation(line: 992, column: 45, scope: !4609)
!4616 = !DILocation(line: 992, column: 48, scope: !4609)
!4617 = !DILocation(line: 992, column: 9, scope: !1425)
!4618 = !DILocation(line: 994, column: 29, scope: !4619)
!4619 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 993, column: 5)
!4620 = !DILocation(line: 994, column: 35, scope: !4619)
!4621 = !DILocation(line: 994, column: 37, scope: !4619)
!4622 = !DILocation(line: 994, column: 42, scope: !4619)
!4623 = !DILocation(line: 994, column: 44, scope: !4619)
!4624 = !DILocation(line: 994, column: 49, scope: !4619)
!4625 = !DILocation(line: 994, column: 53, scope: !4619)
!4626 = !DILocation(line: 994, column: 9, scope: !4619)
!4627 = !DILocation(line: 995, column: 29, scope: !4619)
!4628 = !DILocation(line: 995, column: 35, scope: !4619)
!4629 = !DILocation(line: 995, column: 37, scope: !4619)
!4630 = !DILocation(line: 995, column: 42, scope: !4619)
!4631 = !DILocation(line: 995, column: 44, scope: !4619)
!4632 = !DILocation(line: 995, column: 49, scope: !4619)
!4633 = !DILocation(line: 995, column: 53, scope: !4619)
!4634 = !DILocation(line: 995, column: 9, scope: !4619)
!4635 = !DILocation(line: 996, column: 5, scope: !4619)
!4636 = !DILocalVariable(name: "p_cost_m0x", scope: !1425, file: !3, line: 998, type: !1569)
!4637 = !DILocation(line: 998, column: 21, scope: !1425)
!4638 = !DILocation(line: 998, column: 34, scope: !1425)
!4639 = !DILocation(line: 998, column: 38, scope: !1425)
!4640 = !DILocation(line: 998, column: 50, scope: !1425)
!4641 = !DILocation(line: 998, column: 54, scope: !1425)
!4642 = !DILocation(line: 998, column: 48, scope: !1425)
!4643 = !DILocalVariable(name: "p_cost_m0y", scope: !1425, file: !3, line: 999, type: !1569)
!4644 = !DILocation(line: 999, column: 21, scope: !1425)
!4645 = !DILocation(line: 999, column: 34, scope: !1425)
!4646 = !DILocation(line: 999, column: 38, scope: !1425)
!4647 = !DILocation(line: 999, column: 50, scope: !1425)
!4648 = !DILocation(line: 999, column: 54, scope: !1425)
!4649 = !DILocation(line: 999, column: 48, scope: !1425)
!4650 = !DILocalVariable(name: "p_cost_m1x", scope: !1425, file: !3, line: 1000, type: !1569)
!4651 = !DILocation(line: 1000, column: 21, scope: !1425)
!4652 = !DILocation(line: 1000, column: 34, scope: !1425)
!4653 = !DILocation(line: 1000, column: 38, scope: !1425)
!4654 = !DILocation(line: 1000, column: 50, scope: !1425)
!4655 = !DILocation(line: 1000, column: 54, scope: !1425)
!4656 = !DILocation(line: 1000, column: 48, scope: !1425)
!4657 = !DILocalVariable(name: "p_cost_m1y", scope: !1425, file: !3, line: 1001, type: !1569)
!4658 = !DILocation(line: 1001, column: 21, scope: !1425)
!4659 = !DILocation(line: 1001, column: 34, scope: !1425)
!4660 = !DILocation(line: 1001, column: 38, scope: !1425)
!4661 = !DILocation(line: 1001, column: 50, scope: !1425)
!4662 = !DILocation(line: 1001, column: 54, scope: !1425)
!4663 = !DILocation(line: 1001, column: 48, scope: !1425)
!4664 = !DILocation(line: 1003, column: 5, scope: !1425)
!4665 = !DILocation(line: 1003, column: 8, scope: !1425)
!4666 = !DILocation(line: 1003, column: 11, scope: !1425)
!4667 = !DILocation(line: 1003, column: 28, scope: !1425)
!4668 = !DILocalVariable(name: "pass", scope: !4669, file: !3, line: 1005, type: !50)
!4669 = distinct !DILexicalBlock(scope: !1425, file: !3, line: 1005, column: 5)
!4670 = !DILocation(line: 1005, column: 14, scope: !4669)
!4671 = !DILocation(line: 1005, column: 10, scope: !4669)
!4672 = !DILocation(line: 1005, column: 24, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4669, file: !3, line: 1005, column: 5)
!4674 = !DILocation(line: 1005, column: 29, scope: !4673)
!4675 = !DILocation(line: 1005, column: 5, scope: !4669)
!4676 = !DILocalVariable(name: "bestj", scope: !4677, file: !3, line: 1007, type: !50)
!4677 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 1006, column: 5)
!4678 = !DILocation(line: 1007, column: 13, scope: !4677)
!4679 = !DILocation(line: 1012, column: 13, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 1012, column: 13)
!4681 = !DILocation(line: 1012, column: 13, scope: !4677)
!4682 = !DILocalVariable(name: "j", scope: !4683, file: !3, line: 1013, type: !50)
!4683 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 1013, column: 13)
!4684 = !DILocation(line: 1013, column: 22, scope: !4683)
!4685 = !DILocation(line: 1013, column: 26, scope: !4683)
!4686 = !DILocation(line: 1013, column: 18, scope: !4683)
!4687 = !DILocation(line: 1013, column: 44, scope: !4688)
!4688 = distinct !DILexicalBlock(scope: !4683, file: !3, line: 1013, column: 13)
!4689 = !DILocation(line: 1013, column: 46, scope: !4688)
!4690 = !DILocation(line: 1013, column: 13, scope: !4683)
!4691 = !DILocalVariable(name: "m", scope: !4692, file: !3, line: 1014, type: !1372)
!4692 = distinct !DILexicalBlock(scope: !4688, file: !3, line: 1014, column: 17)
!4693 = !DILocation(line: 1014, column: 17, scope: !4692)
!4694 = !DILocalVariable(name: "i", scope: !4692, file: !3, line: 1014, type: !50)
!4695 = !DILocalVariable(name: "mvx", scope: !4692, file: !3, line: 1014, type: !50)
!4696 = !DILocalVariable(name: "mvy", scope: !4692, file: !3, line: 1014, type: !50)
!4697 = !DILocation(line: 1014, column: 17, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 1014, column: 17)
!4699 = !DILocation(line: 1014, column: 17, scope: !4700)
!4700 = distinct !DILexicalBlock(scope: !4698, file: !3, line: 1014, column: 17)
!4701 = !DILocation(line: 1013, column: 52, scope: !4688)
!4702 = !DILocation(line: 1013, column: 13, scope: !4688)
!4703 = distinct !{!4703, !4690, !4704}
!4704 = !DILocation(line: 1014, column: 17, scope: !4683)
!4705 = !DILocation(line: 1016, column: 13, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 1016, column: 13)
!4707 = !DILocation(line: 1016, column: 13, scope: !4677)
!4708 = !DILocalVariable(name: "j", scope: !4709, file: !3, line: 1017, type: !50)
!4709 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 1017, column: 13)
!4710 = !DILocation(line: 1017, column: 22, scope: !4709)
!4711 = !DILocation(line: 1017, column: 26, scope: !4709)
!4712 = !DILocation(line: 1017, column: 18, scope: !4709)
!4713 = !DILocation(line: 1017, column: 44, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4709, file: !3, line: 1017, column: 13)
!4715 = !DILocation(line: 1017, column: 46, scope: !4714)
!4716 = !DILocation(line: 1017, column: 13, scope: !4709)
!4717 = !DILocalVariable(name: "m", scope: !4718, file: !3, line: 1018, type: !1372)
!4718 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 1018, column: 17)
!4719 = !DILocation(line: 1018, column: 17, scope: !4718)
!4720 = !DILocalVariable(name: "i", scope: !4718, file: !3, line: 1018, type: !50)
!4721 = !DILocalVariable(name: "mvx", scope: !4718, file: !3, line: 1018, type: !50)
!4722 = !DILocalVariable(name: "mvy", scope: !4718, file: !3, line: 1018, type: !50)
!4723 = !DILocation(line: 1018, column: 17, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 1018, column: 17)
!4725 = !DILocation(line: 1018, column: 17, scope: !4726)
!4726 = distinct !DILexicalBlock(scope: !4724, file: !3, line: 1018, column: 17)
!4727 = !DILocation(line: 1017, column: 52, scope: !4714)
!4728 = !DILocation(line: 1017, column: 13, scope: !4714)
!4729 = distinct !{!4729, !4716, !4730}
!4730 = !DILocation(line: 1018, column: 17, scope: !4709)
!4731 = !DILocalVariable(name: "j", scope: !4732, file: !3, line: 1020, type: !50)
!4732 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 1020, column: 9)
!4733 = !DILocation(line: 1020, column: 18, scope: !4732)
!4734 = !DILocation(line: 1020, column: 24, scope: !4732)
!4735 = !DILocation(line: 1020, column: 23, scope: !4732)
!4736 = !DILocation(line: 1020, column: 22, scope: !4732)
!4737 = !DILocation(line: 1020, column: 14, scope: !4732)
!4738 = !DILocation(line: 1020, column: 30, scope: !4739)
!4739 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 1020, column: 9)
!4740 = !DILocation(line: 1020, column: 32, scope: !4739)
!4741 = !DILocation(line: 1020, column: 9, scope: !4732)
!4742 = !DILocalVariable(name: "m0x", scope: !4743, file: !3, line: 1022, type: !50)
!4743 = distinct !DILexicalBlock(scope: !4739, file: !3, line: 1021, column: 9)
!4744 = !DILocation(line: 1022, column: 17, scope: !4743)
!4745 = !DILocation(line: 1022, column: 29, scope: !4743)
!4746 = !DILocation(line: 1022, column: 23, scope: !4743)
!4747 = !DILocation(line: 1022, column: 37, scope: !4743)
!4748 = !DILocation(line: 1022, column: 35, scope: !4743)
!4749 = !DILocalVariable(name: "m0y", scope: !4743, file: !3, line: 1023, type: !50)
!4750 = !DILocation(line: 1023, column: 17, scope: !4743)
!4751 = !DILocation(line: 1023, column: 29, scope: !4743)
!4752 = !DILocation(line: 1023, column: 23, scope: !4743)
!4753 = !DILocation(line: 1023, column: 37, scope: !4743)
!4754 = !DILocation(line: 1023, column: 35, scope: !4743)
!4755 = !DILocalVariable(name: "m1x", scope: !4743, file: !3, line: 1024, type: !50)
!4756 = !DILocation(line: 1024, column: 17, scope: !4743)
!4757 = !DILocation(line: 1024, column: 29, scope: !4743)
!4758 = !DILocation(line: 1024, column: 23, scope: !4743)
!4759 = !DILocation(line: 1024, column: 37, scope: !4743)
!4760 = !DILocation(line: 1024, column: 35, scope: !4743)
!4761 = !DILocalVariable(name: "m1y", scope: !4743, file: !3, line: 1025, type: !50)
!4762 = !DILocation(line: 1025, column: 17, scope: !4743)
!4763 = !DILocation(line: 1025, column: 29, scope: !4743)
!4764 = !DILocation(line: 1025, column: 23, scope: !4743)
!4765 = !DILocation(line: 1025, column: 37, scope: !4743)
!4766 = !DILocation(line: 1025, column: 35, scope: !4743)
!4767 = !DILocation(line: 1026, column: 18, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4743, file: !3, line: 1026, column: 17)
!4769 = !DILocation(line: 1026, column: 23, scope: !4768)
!4770 = !DILocation(line: 1026, column: 38, scope: !4768)
!4771 = !DILocation(line: 1026, column: 42, scope: !4768)
!4772 = !DILocation(line: 1026, column: 29, scope: !4768)
!4773 = !DILocation(line: 1026, column: 47, scope: !4768)
!4774 = !DILocation(line: 1026, column: 51, scope: !4768)
!4775 = !DILocation(line: 1026, column: 56, scope: !4768)
!4776 = !DILocation(line: 1026, column: 60, scope: !4768)
!4777 = !DILocation(line: 1026, column: 72, scope: !4768)
!4778 = !DILocation(line: 1026, column: 76, scope: !4768)
!4779 = !DILocation(line: 1026, column: 68, scope: !4768)
!4780 = !DILocation(line: 1026, column: 64, scope: !4768)
!4781 = !DILocation(line: 1026, column: 17, scope: !4743)
!4782 = !DILocalVariable(name: "i0", scope: !4783, file: !3, line: 1028, type: !50)
!4783 = distinct !DILexicalBlock(scope: !4768, file: !3, line: 1027, column: 13)
!4784 = !DILocation(line: 1028, column: 21, scope: !4783)
!4785 = !DILocation(line: 1028, column: 38, scope: !4783)
!4786 = !DILocation(line: 1028, column: 32, scope: !4783)
!4787 = !DILocation(line: 1028, column: 31, scope: !4783)
!4788 = !DILocation(line: 1028, column: 28, scope: !4783)
!4789 = !DILocation(line: 1028, column: 52, scope: !4783)
!4790 = !DILocation(line: 1028, column: 46, scope: !4783)
!4791 = !DILocation(line: 1028, column: 44, scope: !4783)
!4792 = !DILocalVariable(name: "i1", scope: !4783, file: !3, line: 1029, type: !50)
!4793 = !DILocation(line: 1029, column: 21, scope: !4783)
!4794 = !DILocation(line: 1029, column: 38, scope: !4783)
!4795 = !DILocation(line: 1029, column: 32, scope: !4783)
!4796 = !DILocation(line: 1029, column: 31, scope: !4783)
!4797 = !DILocation(line: 1029, column: 28, scope: !4783)
!4798 = !DILocation(line: 1029, column: 52, scope: !4783)
!4799 = !DILocation(line: 1029, column: 46, scope: !4783)
!4800 = !DILocation(line: 1029, column: 44, scope: !4783)
!4801 = !DILocation(line: 1030, column: 61, scope: !4783)
!4802 = !DILocation(line: 1030, column: 65, scope: !4783)
!4803 = !DILocation(line: 1030, column: 57, scope: !4783)
!4804 = !DILocation(line: 1030, column: 26, scope: !4783)
!4805 = !DILocation(line: 1030, column: 30, scope: !4783)
!4806 = !DILocation(line: 1030, column: 17, scope: !4783)
!4807 = !DILocation(line: 1030, column: 35, scope: !4783)
!4808 = !DILocation(line: 1030, column: 39, scope: !4783)
!4809 = !DILocation(line: 1030, column: 44, scope: !4783)
!4810 = !DILocation(line: 1030, column: 48, scope: !4783)
!4811 = !DILocation(line: 1030, column: 52, scope: !4783)
!4812 = !DILocation(line: 1031, column: 17, scope: !4783)
!4813 = !DILocation(line: 1031, column: 20, scope: !4783)
!4814 = !DILocation(line: 1031, column: 23, scope: !4783)
!4815 = !DILocation(line: 1031, column: 27, scope: !4783)
!4816 = !DILocation(line: 1031, column: 37, scope: !4783)
!4817 = !DILocation(line: 1031, column: 55, scope: !4783)
!4818 = !DILocation(line: 1031, column: 62, scope: !4783)
!4819 = !DILocation(line: 1031, column: 67, scope: !4783)
!4820 = !DILocation(line: 1031, column: 77, scope: !4783)
!4821 = !DILocation(line: 1031, column: 82, scope: !4783)
!4822 = !DILocation(line: 1031, column: 89, scope: !4783)
!4823 = !DILocation(line: 1031, column: 94, scope: !4783)
!4824 = !DILocation(line: 1031, column: 104, scope: !4783)
!4825 = !DILocation(line: 1031, column: 109, scope: !4783)
!4826 = !DILocalVariable(name: "cost", scope: !4783, file: !3, line: 1032, type: !50)
!4827 = !DILocation(line: 1032, column: 21, scope: !4783)
!4828 = !DILocation(line: 1032, column: 28, scope: !4783)
!4829 = !DILocation(line: 1032, column: 31, scope: !4783)
!4830 = !DILocation(line: 1032, column: 36, scope: !4783)
!4831 = !DILocation(line: 1032, column: 42, scope: !4783)
!4832 = !DILocation(line: 1032, column: 52, scope: !4783)
!4833 = !DILocation(line: 1032, column: 56, scope: !4783)
!4834 = !DILocation(line: 1032, column: 80, scope: !4783)
!4835 = !DILocation(line: 1033, column: 28, scope: !4783)
!4836 = !DILocation(line: 1033, column: 39, scope: !4783)
!4837 = !DILocation(line: 1033, column: 26, scope: !4783)
!4838 = !DILocation(line: 1033, column: 46, scope: !4783)
!4839 = !DILocation(line: 1033, column: 57, scope: !4783)
!4840 = !DILocation(line: 1033, column: 44, scope: !4783)
!4841 = !DILocation(line: 1033, column: 64, scope: !4783)
!4842 = !DILocation(line: 1033, column: 75, scope: !4783)
!4843 = !DILocation(line: 1033, column: 62, scope: !4783)
!4844 = !DILocation(line: 1033, column: 82, scope: !4783)
!4845 = !DILocation(line: 1033, column: 93, scope: !4783)
!4846 = !DILocation(line: 1033, column: 80, scope: !4783)
!4847 = !DILocation(line: 1034, column: 21, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4783, file: !3, line: 1034, column: 21)
!4849 = !DILocation(line: 1034, column: 21, scope: !4783)
!4850 = !DILocation(line: 1036, column: 25, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4852, file: !3, line: 1036, column: 25)
!4852 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1035, column: 17)
!4853 = !DILocation(line: 1036, column: 32, scope: !4851)
!4854 = !DILocation(line: 1036, column: 38, scope: !4851)
!4855 = !DILocation(line: 1036, column: 40, scope: !4851)
!4856 = !DILocation(line: 1036, column: 30, scope: !4851)
!4857 = !DILocation(line: 1036, column: 25, scope: !4852)
!4858 = !DILocation(line: 1038, column: 33, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 1037, column: 21)
!4860 = !DILocation(line: 1038, column: 31, scope: !4859)
!4861 = !DILocation(line: 1039, column: 60, scope: !4859)
!4862 = !DILocation(line: 1039, column: 64, scope: !4859)
!4863 = !DILocation(line: 1039, column: 44, scope: !4859)
!4864 = !DILocation(line: 1039, column: 25, scope: !4859)
!4865 = !DILocation(line: 1039, column: 42, scope: !4859)
!4866 = !DILocation(line: 1040, column: 60, scope: !4859)
!4867 = !DILocation(line: 1040, column: 64, scope: !4859)
!4868 = !DILocation(line: 1040, column: 44, scope: !4859)
!4869 = !DILocation(line: 1040, column: 25, scope: !4859)
!4870 = !DILocation(line: 1040, column: 42, scope: !4859)
!4871 = !DILocation(line: 1041, column: 25, scope: !4859)
!4872 = !DILocation(line: 1041, column: 28, scope: !4859)
!4873 = !DILocation(line: 1041, column: 31, scope: !4859)
!4874 = !DILocation(line: 1041, column: 35, scope: !4859)
!4875 = !DILocation(line: 1041, column: 42, scope: !4859)
!4876 = !DILocation(line: 1041, column: 47, scope: !4859)
!4877 = !DILocation(line: 1041, column: 66, scope: !4859)
!4878 = !DILocation(line: 1041, column: 78, scope: !4859)
!4879 = !DILocation(line: 1041, column: 86, scope: !4859)
!4880 = !DILocation(line: 1041, column: 98, scope: !4859)
!4881 = !DILocation(line: 1041, column: 106, scope: !4859)
!4882 = !DILocation(line: 1042, column: 25, scope: !4859)
!4883 = !DILocation(line: 1042, column: 28, scope: !4859)
!4884 = !DILocation(line: 1042, column: 31, scope: !4859)
!4885 = !DILocation(line: 1042, column: 35, scope: !4859)
!4886 = !DILocation(line: 1042, column: 42, scope: !4859)
!4887 = !DILocation(line: 1042, column: 47, scope: !4859)
!4888 = !DILocation(line: 1042, column: 66, scope: !4859)
!4889 = !DILocation(line: 1042, column: 78, scope: !4859)
!4890 = !DILocation(line: 1042, column: 86, scope: !4859)
!4891 = !DILocation(line: 1042, column: 98, scope: !4859)
!4892 = !DILocation(line: 1042, column: 106, scope: !4859)
!4893 = !DILocalVariable(name: "costrd", scope: !4859, file: !3, line: 1043, type: !62)
!4894 = !DILocation(line: 1043, column: 34, scope: !4859)
!4895 = !DILocation(line: 1043, column: 62, scope: !4859)
!4896 = !DILocation(line: 1043, column: 65, scope: !4859)
!4897 = !DILocation(line: 1043, column: 76, scope: !4859)
!4898 = !DILocation(line: 1043, column: 78, scope: !4859)
!4899 = !DILocation(line: 1043, column: 82, scope: !4859)
!4900 = !DILocation(line: 1043, column: 86, scope: !4859)
!4901 = !DILocation(line: 1043, column: 43, scope: !4859)
!4902 = !DILocation(line: 1044, column: 25, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4859, file: !3, line: 1044, column: 25)
!4904 = !DILocation(line: 1044, column: 25, scope: !4859)
!4905 = !DILocation(line: 1044, column: 25, scope: !4906)
!4906 = distinct !DILexicalBlock(scope: !4903, file: !3, line: 1044, column: 25)
!4907 = !DILocation(line: 1045, column: 21, scope: !4859)
!4908 = !DILocation(line: 1046, column: 17, scope: !4852)
!4909 = !DILocation(line: 1048, column: 21, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1048, column: 21)
!4911 = !DILocation(line: 1048, column: 21, scope: !4848)
!4912 = !DILocation(line: 1048, column: 21, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 1048, column: 21)
!4914 = !DILocation(line: 1049, column: 13, scope: !4783)
!4915 = !DILocation(line: 1050, column: 9, scope: !4743)
!4916 = !DILocation(line: 1020, column: 39, scope: !4739)
!4917 = !DILocation(line: 1020, column: 9, scope: !4739)
!4918 = distinct !{!4918, !4741, !4919}
!4919 = !DILocation(line: 1050, column: 9, scope: !4732)
!4920 = !DILocation(line: 1052, column: 14, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !4677, file: !3, line: 1052, column: 13)
!4922 = !DILocation(line: 1052, column: 13, scope: !4677)
!4923 = !DILocation(line: 1053, column: 13, scope: !4921)
!4924 = !DILocation(line: 1055, column: 23, scope: !4677)
!4925 = !DILocation(line: 1055, column: 17, scope: !4677)
!4926 = !DILocation(line: 1055, column: 14, scope: !4677)
!4927 = !DILocation(line: 1056, column: 23, scope: !4677)
!4928 = !DILocation(line: 1056, column: 17, scope: !4677)
!4929 = !DILocation(line: 1056, column: 14, scope: !4677)
!4930 = !DILocation(line: 1057, column: 23, scope: !4677)
!4931 = !DILocation(line: 1057, column: 17, scope: !4677)
!4932 = !DILocation(line: 1057, column: 14, scope: !4677)
!4933 = !DILocation(line: 1058, column: 23, scope: !4677)
!4934 = !DILocation(line: 1058, column: 17, scope: !4677)
!4935 = !DILocation(line: 1058, column: 14, scope: !4677)
!4936 = !DILocation(line: 1060, column: 20, scope: !4677)
!4937 = !DILocation(line: 1060, column: 18, scope: !4677)
!4938 = !DILocation(line: 1061, column: 20, scope: !4677)
!4939 = !DILocation(line: 1061, column: 18, scope: !4677)
!4940 = !DILocation(line: 1062, column: 5, scope: !4677)
!4941 = !DILocation(line: 1005, column: 38, scope: !4673)
!4942 = !DILocation(line: 1005, column: 5, scope: !4673)
!4943 = distinct !{!4943, !4675, !4944}
!4944 = !DILocation(line: 1062, column: 5, scope: !4669)
!4945 = !DILocation(line: 1064, column: 9, scope: !4946)
!4946 = distinct !DILexicalBlock(scope: !1425, file: !3, line: 1064, column: 9)
!4947 = !DILocation(line: 1064, column: 9, scope: !1425)
!4948 = !DILocation(line: 1066, column: 36, scope: !4949)
!4949 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 1065, column: 5)
!4950 = !DILocation(line: 1066, column: 40, scope: !4949)
!4951 = !DILocation(line: 1066, column: 42, scope: !4949)
!4952 = !DILocation(line: 1066, column: 45, scope: !4949)
!4953 = !DILocation(line: 1066, column: 50, scope: !4949)
!4954 = !DILocation(line: 1066, column: 52, scope: !4949)
!4955 = !DILocation(line: 1066, column: 56, scope: !4949)
!4956 = !DILocation(line: 1066, column: 60, scope: !4949)
!4957 = !DILocation(line: 1066, column: 62, scope: !4949)
!4958 = !DILocation(line: 1066, column: 67, scope: !4949)
!4959 = !DILocation(line: 1066, column: 69, scope: !4949)
!4960 = !DILocation(line: 1066, column: 93, scope: !4949)
!4961 = !DILocation(line: 1066, column: 99, scope: !4949)
!4962 = !DILocation(line: 1066, column: 77, scope: !4949)
!4963 = !DILocation(line: 1066, column: 9, scope: !4949)
!4964 = !DILocation(line: 1067, column: 27, scope: !4949)
!4965 = !DILocation(line: 1067, column: 64, scope: !4949)
!4966 = !DILocation(line: 1067, column: 16, scope: !4949)
!4967 = !DILocation(line: 1067, column: 14, scope: !4949)
!4968 = !DILocation(line: 1068, column: 36, scope: !4949)
!4969 = !DILocation(line: 1068, column: 40, scope: !4949)
!4970 = !DILocation(line: 1068, column: 42, scope: !4949)
!4971 = !DILocation(line: 1068, column: 45, scope: !4949)
!4972 = !DILocation(line: 1068, column: 50, scope: !4949)
!4973 = !DILocation(line: 1068, column: 52, scope: !4949)
!4974 = !DILocation(line: 1068, column: 56, scope: !4949)
!4975 = !DILocation(line: 1068, column: 60, scope: !4949)
!4976 = !DILocation(line: 1068, column: 62, scope: !4949)
!4977 = !DILocation(line: 1068, column: 67, scope: !4949)
!4978 = !DILocation(line: 1068, column: 69, scope: !4949)
!4979 = !DILocation(line: 1068, column: 77, scope: !4949)
!4980 = !DILocation(line: 1068, column: 9, scope: !4949)
!4981 = !DILocation(line: 1070, column: 36, scope: !4949)
!4982 = !DILocation(line: 1070, column: 40, scope: !4949)
!4983 = !DILocation(line: 1070, column: 42, scope: !4949)
!4984 = !DILocation(line: 1070, column: 45, scope: !4949)
!4985 = !DILocation(line: 1070, column: 50, scope: !4949)
!4986 = !DILocation(line: 1070, column: 52, scope: !4949)
!4987 = !DILocation(line: 1070, column: 56, scope: !4949)
!4988 = !DILocation(line: 1070, column: 60, scope: !4949)
!4989 = !DILocation(line: 1070, column: 62, scope: !4949)
!4990 = !DILocation(line: 1070, column: 67, scope: !4949)
!4991 = !DILocation(line: 1070, column: 69, scope: !4949)
!4992 = !DILocation(line: 1070, column: 93, scope: !4949)
!4993 = !DILocation(line: 1070, column: 99, scope: !4949)
!4994 = !DILocation(line: 1070, column: 77, scope: !4949)
!4995 = !DILocation(line: 1070, column: 9, scope: !4949)
!4996 = !DILocation(line: 1071, column: 27, scope: !4949)
!4997 = !DILocation(line: 1071, column: 64, scope: !4949)
!4998 = !DILocation(line: 1071, column: 16, scope: !4949)
!4999 = !DILocation(line: 1071, column: 14, scope: !4949)
!5000 = !DILocation(line: 1072, column: 36, scope: !4949)
!5001 = !DILocation(line: 1072, column: 40, scope: !4949)
!5002 = !DILocation(line: 1072, column: 42, scope: !4949)
!5003 = !DILocation(line: 1072, column: 45, scope: !4949)
!5004 = !DILocation(line: 1072, column: 50, scope: !4949)
!5005 = !DILocation(line: 1072, column: 52, scope: !4949)
!5006 = !DILocation(line: 1072, column: 56, scope: !4949)
!5007 = !DILocation(line: 1072, column: 60, scope: !4949)
!5008 = !DILocation(line: 1072, column: 62, scope: !4949)
!5009 = !DILocation(line: 1072, column: 67, scope: !4949)
!5010 = !DILocation(line: 1072, column: 69, scope: !4949)
!5011 = !DILocation(line: 1072, column: 77, scope: !4949)
!5012 = !DILocation(line: 1072, column: 9, scope: !4949)
!5013 = !DILocation(line: 1073, column: 5, scope: !4949)
!5014 = !DILocation(line: 1075, column: 17, scope: !1425)
!5015 = !DILocation(line: 1075, column: 5, scope: !1425)
!5016 = !DILocation(line: 1075, column: 9, scope: !1425)
!5017 = !DILocation(line: 1075, column: 15, scope: !1425)
!5018 = !DILocation(line: 1076, column: 17, scope: !1425)
!5019 = !DILocation(line: 1076, column: 5, scope: !1425)
!5020 = !DILocation(line: 1076, column: 9, scope: !1425)
!5021 = !DILocation(line: 1076, column: 15, scope: !1425)
!5022 = !DILocation(line: 1077, column: 17, scope: !1425)
!5023 = !DILocation(line: 1077, column: 5, scope: !1425)
!5024 = !DILocation(line: 1077, column: 9, scope: !1425)
!5025 = !DILocation(line: 1077, column: 15, scope: !1425)
!5026 = !DILocation(line: 1078, column: 17, scope: !1425)
!5027 = !DILocation(line: 1078, column: 5, scope: !1425)
!5028 = !DILocation(line: 1078, column: 9, scope: !1425)
!5029 = !DILocation(line: 1078, column: 15, scope: !1425)
!5030 = !DILocation(line: 1079, column: 1, scope: !1425)
!5031 = distinct !DISubprogram(name: "x264_me_refine_bidir_rd", scope: !3, file: !3, line: 1086, type: !5032, scopeLine: 1087, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5032 = !DISubroutineType(types: !5033)
!5033 = !{null, !86, !1372, !1372, !50, !50, !50}
!5034 = !DILocalVariable(name: "h", arg: 1, scope: !5031, file: !3, line: 1086, type: !86)
!5035 = !DILocation(line: 1086, column: 39, scope: !5031)
!5036 = !DILocalVariable(name: "m0", arg: 2, scope: !5031, file: !3, line: 1086, type: !1372)
!5037 = !DILocation(line: 1086, column: 53, scope: !5031)
!5038 = !DILocalVariable(name: "m1", arg: 3, scope: !5031, file: !3, line: 1086, type: !1372)
!5039 = !DILocation(line: 1086, column: 68, scope: !5031)
!5040 = !DILocalVariable(name: "i_weight", arg: 4, scope: !5031, file: !3, line: 1086, type: !50)
!5041 = !DILocation(line: 1086, column: 76, scope: !5031)
!5042 = !DILocalVariable(name: "i8", arg: 5, scope: !5031, file: !3, line: 1086, type: !50)
!5043 = !DILocation(line: 1086, column: 90, scope: !5031)
!5044 = !DILocalVariable(name: "i_lambda2", arg: 6, scope: !5031, file: !3, line: 1086, type: !50)
!5045 = !DILocation(line: 1086, column: 98, scope: !5031)
!5046 = !DILocation(line: 1090, column: 5, scope: !5031)
!5047 = !DILocation(line: 1090, column: 8, scope: !5031)
!5048 = !DILocation(line: 1090, column: 11, scope: !5031)
!5049 = !DILocation(line: 1090, column: 21, scope: !5031)
!5050 = !DILocation(line: 1091, column: 27, scope: !5031)
!5051 = !DILocation(line: 1091, column: 30, scope: !5031)
!5052 = !DILocation(line: 1091, column: 34, scope: !5031)
!5053 = !DILocation(line: 1091, column: 38, scope: !5031)
!5054 = !DILocation(line: 1091, column: 48, scope: !5031)
!5055 = !DILocation(line: 1091, column: 52, scope: !5031)
!5056 = !DILocation(line: 1091, column: 5, scope: !5031)
!5057 = !DILocation(line: 1092, column: 5, scope: !5031)
!5058 = !DILocation(line: 1092, column: 8, scope: !5031)
!5059 = !DILocation(line: 1092, column: 11, scope: !5031)
!5060 = !DILocation(line: 1092, column: 21, scope: !5031)
!5061 = !DILocation(line: 1093, column: 1, scope: !5031)
!5062 = distinct !DISubprogram(name: "x264_me_refine_qpel_rd", scope: !3, file: !3, line: 1125, type: !5063, scopeLine: 1126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5063 = !DISubroutineType(types: !5064)
!5064 = !{null, !86, !1372, !50, !50, !50}
!5065 = !DILocalVariable(name: "h", arg: 1, scope: !5062, file: !3, line: 1125, type: !86)
!5066 = !DILocation(line: 1125, column: 38, scope: !5062)
!5067 = !DILocalVariable(name: "m", arg: 2, scope: !5062, file: !3, line: 1125, type: !1372)
!5068 = !DILocation(line: 1125, column: 52, scope: !5062)
!5069 = !DILocalVariable(name: "i_lambda2", arg: 3, scope: !5062, file: !3, line: 1125, type: !50)
!5070 = !DILocation(line: 1125, column: 59, scope: !5062)
!5071 = !DILocalVariable(name: "i4", arg: 4, scope: !5062, file: !3, line: 1125, type: !50)
!5072 = !DILocation(line: 1125, column: 74, scope: !5062)
!5073 = !DILocalVariable(name: "i_list", arg: 5, scope: !5062, file: !3, line: 1125, type: !50)
!5074 = !DILocation(line: 1125, column: 82, scope: !5062)
!5075 = !DILocalVariable(name: "cache_mv", scope: !5062, file: !3, line: 1127, type: !792)
!5076 = !DILocation(line: 1127, column: 14, scope: !5062)
!5077 = !DILocation(line: 1127, column: 25, scope: !5062)
!5078 = !DILocation(line: 1127, column: 28, scope: !5062)
!5079 = !DILocation(line: 1127, column: 31, scope: !5062)
!5080 = !DILocation(line: 1127, column: 37, scope: !5062)
!5081 = !DILocation(line: 1127, column: 40, scope: !5062)
!5082 = !DILocation(line: 1127, column: 59, scope: !5062)
!5083 = !DILocation(line: 1127, column: 48, scope: !5062)
!5084 = !DILocalVariable(name: "p_cost_mvx", scope: !5062, file: !3, line: 1128, type: !1569)
!5085 = !DILocation(line: 1128, column: 21, scope: !5062)
!5086 = !DILocalVariable(name: "p_cost_mvy", scope: !5062, file: !3, line: 1128, type: !1569)
!5087 = !DILocation(line: 1128, column: 34, scope: !5062)
!5088 = !DILocalVariable(name: "bw", scope: !5062, file: !3, line: 1129, type: !1434)
!5089 = !DILocation(line: 1129, column: 15, scope: !5062)
!5090 = !DILocation(line: 1129, column: 36, scope: !5062)
!5091 = !DILocation(line: 1129, column: 39, scope: !5062)
!5092 = !DILocation(line: 1129, column: 20, scope: !5062)
!5093 = !DILocation(line: 1129, column: 48, scope: !5062)
!5094 = !DILocalVariable(name: "bh", scope: !5062, file: !3, line: 1130, type: !1434)
!5095 = !DILocation(line: 1130, column: 15, scope: !5062)
!5096 = !DILocation(line: 1130, column: 36, scope: !5062)
!5097 = !DILocation(line: 1130, column: 39, scope: !5062)
!5098 = !DILocation(line: 1130, column: 20, scope: !5062)
!5099 = !DILocation(line: 1130, column: 48, scope: !5062)
!5100 = !DILocalVariable(name: "i_pixel", scope: !5062, file: !3, line: 1131, type: !1434)
!5101 = !DILocation(line: 1131, column: 15, scope: !5062)
!5102 = !DILocation(line: 1131, column: 25, scope: !5062)
!5103 = !DILocation(line: 1131, column: 28, scope: !5062)
!5104 = !DILocalVariable(name: "mvy_offset", scope: !5062, file: !3, line: 1132, type: !1434)
!5105 = !DILocation(line: 1132, column: 15, scope: !5062)
!5106 = !DILocation(line: 1132, column: 28, scope: !5062)
!5107 = !DILocation(line: 1132, column: 31, scope: !5062)
!5108 = !DILocation(line: 1132, column: 34, scope: !5062)
!5109 = !DILocation(line: 1132, column: 49, scope: !5062)
!5110 = !DILocation(line: 1132, column: 52, scope: !5062)
!5111 = !DILocation(line: 1132, column: 47, scope: !5062)
!5112 = !DILocation(line: 1132, column: 61, scope: !5062)
!5113 = !DILocation(line: 1132, column: 64, scope: !5062)
!5114 = !DILocation(line: 1132, column: 67, scope: !5062)
!5115 = !DILocation(line: 1132, column: 74, scope: !5062)
!5116 = !DILocation(line: 1132, column: 78, scope: !5062)
!5117 = !DILocation(line: 1132, column: 81, scope: !5062)
!5118 = !DILocalVariable(name: "bcost", scope: !5062, file: !3, line: 1134, type: !62)
!5119 = !DILocation(line: 1134, column: 14, scope: !5062)
!5120 = !DILocalVariable(name: "bmx", scope: !5062, file: !3, line: 1135, type: !50)
!5121 = !DILocation(line: 1135, column: 9, scope: !5062)
!5122 = !DILocation(line: 1135, column: 15, scope: !5062)
!5123 = !DILocation(line: 1135, column: 18, scope: !5062)
!5124 = !DILocalVariable(name: "bmy", scope: !5062, file: !3, line: 1136, type: !50)
!5125 = !DILocation(line: 1136, column: 9, scope: !5062)
!5126 = !DILocation(line: 1136, column: 15, scope: !5062)
!5127 = !DILocation(line: 1136, column: 18, scope: !5062)
!5128 = !DILocalVariable(name: "omx", scope: !5062, file: !3, line: 1137, type: !50)
!5129 = !DILocation(line: 1137, column: 9, scope: !5062)
!5130 = !DILocalVariable(name: "omy", scope: !5062, file: !3, line: 1137, type: !50)
!5131 = !DILocation(line: 1137, column: 14, scope: !5062)
!5132 = !DILocalVariable(name: "pmx", scope: !5062, file: !3, line: 1137, type: !50)
!5133 = !DILocation(line: 1137, column: 19, scope: !5062)
!5134 = !DILocalVariable(name: "pmy", scope: !5062, file: !3, line: 1137, type: !50)
!5135 = !DILocation(line: 1137, column: 24, scope: !5062)
!5136 = !DILocalVariable(name: "bsatd", scope: !5062, file: !3, line: 1139, type: !50)
!5137 = !DILocation(line: 1139, column: 9, scope: !5062)
!5138 = !DILocalVariable(name: "satd", scope: !5062, file: !3, line: 1143, type: !50)
!5139 = !DILocation(line: 1143, column: 9, scope: !5062)
!5140 = !DILocalVariable(name: "dir", scope: !5062, file: !3, line: 1144, type: !50)
!5141 = !DILocation(line: 1144, column: 9, scope: !5062)
!5142 = !DILocalVariable(name: "i8", scope: !5062, file: !3, line: 1145, type: !50)
!5143 = !DILocation(line: 1145, column: 9, scope: !5062)
!5144 = !DILocation(line: 1145, column: 14, scope: !5062)
!5145 = !DILocation(line: 1145, column: 16, scope: !5062)
!5146 = !DILocalVariable(name: "amvd", scope: !5062, file: !3, line: 1146, type: !32)
!5147 = !DILocation(line: 1146, column: 14, scope: !5062)
!5148 = !DILocalVariable(name: "pix", scope: !5062, file: !3, line: 1148, type: !282)
!5149 = !DILocation(line: 1148, column: 14, scope: !5062)
!5150 = !DILocation(line: 1148, column: 22, scope: !5062)
!5151 = !DILocation(line: 1148, column: 25, scope: !5062)
!5152 = !DILocation(line: 1148, column: 28, scope: !5062)
!5153 = !DILocation(line: 1148, column: 32, scope: !5062)
!5154 = !DILocation(line: 1148, column: 60, scope: !5062)
!5155 = !DILocation(line: 1148, column: 42, scope: !5062)
!5156 = !DILocalVariable(name: "pixu", scope: !5062, file: !3, line: 1149, type: !282)
!5157 = !DILocation(line: 1149, column: 14, scope: !5062)
!5158 = !DILocation(line: 1149, column: 22, scope: !5062)
!5159 = !DILocation(line: 1149, column: 25, scope: !5062)
!5160 = !DILocation(line: 1149, column: 28, scope: !5062)
!5161 = !DILocation(line: 1149, column: 32, scope: !5062)
!5162 = !DILocation(line: 1149, column: 43, scope: !5062)
!5163 = !DILocation(line: 1149, column: 45, scope: !5062)
!5164 = !DILocation(line: 1149, column: 49, scope: !5062)
!5165 = !DILocation(line: 1149, column: 51, scope: !5062)
!5166 = !DILocation(line: 1149, column: 65, scope: !5062)
!5167 = !DILocation(line: 1149, column: 67, scope: !5062)
!5168 = !DILocation(line: 1149, column: 70, scope: !5062)
!5169 = !DILocation(line: 1149, column: 63, scope: !5062)
!5170 = !DILocalVariable(name: "pixv", scope: !5062, file: !3, line: 1150, type: !282)
!5171 = !DILocation(line: 1150, column: 14, scope: !5062)
!5172 = !DILocation(line: 1150, column: 22, scope: !5062)
!5173 = !DILocation(line: 1150, column: 25, scope: !5062)
!5174 = !DILocation(line: 1150, column: 28, scope: !5062)
!5175 = !DILocation(line: 1150, column: 32, scope: !5062)
!5176 = !DILocation(line: 1150, column: 43, scope: !5062)
!5177 = !DILocation(line: 1150, column: 45, scope: !5062)
!5178 = !DILocation(line: 1150, column: 49, scope: !5062)
!5179 = !DILocation(line: 1150, column: 51, scope: !5062)
!5180 = !DILocation(line: 1150, column: 65, scope: !5062)
!5181 = !DILocation(line: 1150, column: 67, scope: !5062)
!5182 = !DILocation(line: 1150, column: 70, scope: !5062)
!5183 = !DILocation(line: 1150, column: 63, scope: !5062)
!5184 = !DILocation(line: 1152, column: 5, scope: !5062)
!5185 = !DILocation(line: 1152, column: 8, scope: !5062)
!5186 = !DILocation(line: 1152, column: 11, scope: !5062)
!5187 = !DILocation(line: 1152, column: 21, scope: !5062)
!5188 = !DILocation(line: 1154, column: 9, scope: !5189)
!5189 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1154, column: 9)
!5190 = !DILocation(line: 1154, column: 12, scope: !5189)
!5191 = !DILocation(line: 1154, column: 20, scope: !5189)
!5192 = !DILocation(line: 1154, column: 35, scope: !5189)
!5193 = !DILocation(line: 1154, column: 38, scope: !5189)
!5194 = !DILocation(line: 1154, column: 41, scope: !5189)
!5195 = !DILocation(line: 1154, column: 9, scope: !5062)
!5196 = !DILocation(line: 1155, column: 29, scope: !5189)
!5197 = !DILocation(line: 1155, column: 32, scope: !5189)
!5198 = !DILocation(line: 1155, column: 40, scope: !5189)
!5199 = !DILocation(line: 1155, column: 44, scope: !5189)
!5200 = !DILocation(line: 1155, column: 46, scope: !5189)
!5201 = !DILocation(line: 1155, column: 51, scope: !5189)
!5202 = !DILocation(line: 1155, column: 54, scope: !5189)
!5203 = !DILocation(line: 1155, column: 9, scope: !5189)
!5204 = !DILocation(line: 1156, column: 11, scope: !5062)
!5205 = !DILocation(line: 1156, column: 14, scope: !5062)
!5206 = !DILocation(line: 1156, column: 9, scope: !5062)
!5207 = !DILocation(line: 1157, column: 11, scope: !5062)
!5208 = !DILocation(line: 1157, column: 14, scope: !5062)
!5209 = !DILocation(line: 1157, column: 9, scope: !5062)
!5210 = !DILocation(line: 1158, column: 18, scope: !5062)
!5211 = !DILocation(line: 1158, column: 21, scope: !5062)
!5212 = !DILocation(line: 1158, column: 33, scope: !5062)
!5213 = !DILocation(line: 1158, column: 31, scope: !5062)
!5214 = !DILocation(line: 1158, column: 16, scope: !5062)
!5215 = !DILocation(line: 1159, column: 18, scope: !5062)
!5216 = !DILocation(line: 1159, column: 21, scope: !5062)
!5217 = !DILocation(line: 1159, column: 33, scope: !5062)
!5218 = !DILocation(line: 1159, column: 31, scope: !5062)
!5219 = !DILocation(line: 1159, column: 16, scope: !5062)
!5220 = !DILocation(line: 1160, column: 5, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5222, file: !3, line: 1160, column: 5)
!5222 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1160, column: 5)
!5223 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1160, column: 5)
!5224 = !DILocation(line: 1160, column: 5, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5221, file: !3, line: 1160, column: 5)
!5226 = !DILocation(line: 1161, column: 9, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1161, column: 9)
!5228 = !DILocation(line: 1161, column: 12, scope: !5227)
!5229 = !DILocation(line: 1161, column: 20, scope: !5227)
!5230 = !DILocation(line: 1161, column: 9, scope: !5062)
!5231 = !DILocation(line: 1162, column: 9, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5233, file: !3, line: 1162, column: 9)
!5233 = distinct !DILexicalBlock(scope: !5227, file: !3, line: 1162, column: 9)
!5234 = !DILocation(line: 1162, column: 9, scope: !5233)
!5235 = !DILocalVariable(name: "cost", scope: !5236, file: !3, line: 1162, type: !62)
!5236 = distinct !DILexicalBlock(scope: !5232, file: !3, line: 1162, column: 9)
!5237 = !DILocation(line: 1162, column: 9, scope: !5236)
!5238 = !DILocation(line: 1162, column: 9, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1162, column: 9)
!5240 = !DILocation(line: 1162, column: 9, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5239, file: !3, line: 1162, column: 9)
!5242 = !DILocation(line: 1162, column: 9, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5236, file: !3, line: 1162, column: 9)
!5244 = !DILocation(line: 1162, column: 9, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5243, file: !3, line: 1162, column: 9)
!5246 = !DILocation(line: 1164, column: 17, scope: !5227)
!5247 = !DILocation(line: 1164, column: 20, scope: !5227)
!5248 = !DILocation(line: 1164, column: 15, scope: !5227)
!5249 = !DILocation(line: 1167, column: 10, scope: !5250)
!5250 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1167, column: 9)
!5251 = !DILocation(line: 1167, column: 17, scope: !5250)
!5252 = !DILocation(line: 1167, column: 14, scope: !5250)
!5253 = !DILocation(line: 1167, column: 21, scope: !5250)
!5254 = !DILocation(line: 1167, column: 24, scope: !5250)
!5255 = !DILocation(line: 1167, column: 31, scope: !5250)
!5256 = !DILocation(line: 1167, column: 28, scope: !5250)
!5257 = !DILocation(line: 1168, column: 9, scope: !5250)
!5258 = !DILocation(line: 1168, column: 12, scope: !5250)
!5259 = !DILocation(line: 1168, column: 19, scope: !5250)
!5260 = !DILocation(line: 1168, column: 22, scope: !5250)
!5261 = !DILocation(line: 1168, column: 25, scope: !5250)
!5262 = !DILocation(line: 1168, column: 16, scope: !5250)
!5263 = !DILocation(line: 1168, column: 40, scope: !5250)
!5264 = !DILocation(line: 1168, column: 43, scope: !5250)
!5265 = !DILocation(line: 1168, column: 50, scope: !5250)
!5266 = !DILocation(line: 1168, column: 53, scope: !5250)
!5267 = !DILocation(line: 1168, column: 56, scope: !5250)
!5268 = !DILocation(line: 1168, column: 47, scope: !5250)
!5269 = !DILocation(line: 1169, column: 9, scope: !5250)
!5270 = !DILocation(line: 1169, column: 12, scope: !5250)
!5271 = !DILocation(line: 1169, column: 19, scope: !5250)
!5272 = !DILocation(line: 1169, column: 22, scope: !5250)
!5273 = !DILocation(line: 1169, column: 25, scope: !5250)
!5274 = !DILocation(line: 1169, column: 16, scope: !5250)
!5275 = !DILocation(line: 1169, column: 40, scope: !5250)
!5276 = !DILocation(line: 1169, column: 43, scope: !5250)
!5277 = !DILocation(line: 1169, column: 50, scope: !5250)
!5278 = !DILocation(line: 1169, column: 53, scope: !5250)
!5279 = !DILocation(line: 1169, column: 56, scope: !5250)
!5280 = !DILocation(line: 1169, column: 47, scope: !5250)
!5281 = !DILocation(line: 1167, column: 9, scope: !5062)
!5282 = !DILocation(line: 1171, column: 9, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5284, file: !3, line: 1171, column: 9)
!5284 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 1171, column: 9)
!5285 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1171, column: 9)
!5286 = distinct !DILexicalBlock(scope: !5250, file: !3, line: 1170, column: 5)
!5287 = !DILocation(line: 1171, column: 9, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1171, column: 9)
!5289 = !DILocation(line: 1172, column: 9, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1172, column: 9)
!5291 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1172, column: 9)
!5292 = !DILocation(line: 1172, column: 9, scope: !5291)
!5293 = !DILocalVariable(name: "cost", scope: !5294, file: !3, line: 1172, type: !62)
!5294 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 1172, column: 9)
!5295 = !DILocation(line: 1172, column: 9, scope: !5294)
!5296 = !DILocation(line: 1172, column: 9, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 1172, column: 9)
!5298 = !DILocation(line: 1172, column: 9, scope: !5299)
!5299 = distinct !DILexicalBlock(scope: !5297, file: !3, line: 1172, column: 9)
!5300 = !DILocation(line: 1172, column: 9, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5294, file: !3, line: 1172, column: 9)
!5302 = !DILocation(line: 1172, column: 9, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 1172, column: 9)
!5304 = !DILocation(line: 1175, column: 13, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1175, column: 13)
!5306 = !DILocation(line: 1175, column: 20, scope: !5305)
!5307 = !DILocation(line: 1175, column: 17, scope: !5305)
!5308 = !DILocation(line: 1175, column: 24, scope: !5305)
!5309 = !DILocation(line: 1175, column: 27, scope: !5305)
!5310 = !DILocation(line: 1175, column: 34, scope: !5305)
!5311 = !DILocation(line: 1175, column: 31, scope: !5305)
!5312 = !DILocation(line: 1175, column: 13, scope: !5286)
!5313 = !DILocation(line: 1177, column: 19, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5305, file: !3, line: 1176, column: 9)
!5315 = !DILocation(line: 1177, column: 22, scope: !5314)
!5316 = !DILocation(line: 1177, column: 17, scope: !5314)
!5317 = !DILocation(line: 1178, column: 19, scope: !5314)
!5318 = !DILocation(line: 1178, column: 22, scope: !5314)
!5319 = !DILocation(line: 1178, column: 17, scope: !5314)
!5320 = !DILocation(line: 1179, column: 9, scope: !5314)
!5321 = !DILocation(line: 1180, column: 5, scope: !5286)
!5322 = !DILocation(line: 1182, column: 9, scope: !5323)
!5323 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1182, column: 9)
!5324 = !DILocation(line: 1182, column: 15, scope: !5323)
!5325 = !DILocation(line: 1182, column: 18, scope: !5323)
!5326 = !DILocation(line: 1182, column: 21, scope: !5323)
!5327 = !DILocation(line: 1182, column: 36, scope: !5323)
!5328 = !DILocation(line: 1182, column: 13, scope: !5323)
!5329 = !DILocation(line: 1182, column: 40, scope: !5323)
!5330 = !DILocation(line: 1182, column: 43, scope: !5323)
!5331 = !DILocation(line: 1182, column: 49, scope: !5323)
!5332 = !DILocation(line: 1182, column: 52, scope: !5323)
!5333 = !DILocation(line: 1182, column: 55, scope: !5323)
!5334 = !DILocation(line: 1182, column: 70, scope: !5323)
!5335 = !DILocation(line: 1182, column: 47, scope: !5323)
!5336 = !DILocation(line: 1182, column: 74, scope: !5323)
!5337 = !DILocation(line: 1183, column: 9, scope: !5323)
!5338 = !DILocation(line: 1183, column: 15, scope: !5323)
!5339 = !DILocation(line: 1183, column: 18, scope: !5323)
!5340 = !DILocation(line: 1183, column: 21, scope: !5323)
!5341 = !DILocation(line: 1183, column: 36, scope: !5323)
!5342 = !DILocation(line: 1183, column: 13, scope: !5323)
!5343 = !DILocation(line: 1183, column: 40, scope: !5323)
!5344 = !DILocation(line: 1183, column: 43, scope: !5323)
!5345 = !DILocation(line: 1183, column: 49, scope: !5323)
!5346 = !DILocation(line: 1183, column: 52, scope: !5323)
!5347 = !DILocation(line: 1183, column: 55, scope: !5323)
!5348 = !DILocation(line: 1183, column: 70, scope: !5323)
!5349 = !DILocation(line: 1183, column: 47, scope: !5323)
!5350 = !DILocation(line: 1182, column: 9, scope: !5062)
!5351 = !DILocation(line: 1185, column: 9, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5323, file: !3, line: 1184, column: 5)
!5353 = !DILocation(line: 1185, column: 12, scope: !5352)
!5354 = !DILocation(line: 1185, column: 15, scope: !5352)
!5355 = !DILocation(line: 1185, column: 25, scope: !5352)
!5356 = !DILocation(line: 1186, column: 9, scope: !5352)
!5357 = !DILocation(line: 1190, column: 9, scope: !5062)
!5358 = !DILocation(line: 1191, column: 11, scope: !5062)
!5359 = !DILocation(line: 1191, column: 9, scope: !5062)
!5360 = !DILocation(line: 1192, column: 11, scope: !5062)
!5361 = !DILocation(line: 1192, column: 9, scope: !5062)
!5362 = !DILocalVariable(name: "j", scope: !5363, file: !3, line: 1193, type: !50)
!5363 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1193, column: 5)
!5364 = !DILocation(line: 1193, column: 14, scope: !5363)
!5365 = !DILocation(line: 1193, column: 10, scope: !5363)
!5366 = !DILocation(line: 1193, column: 21, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5363, file: !3, line: 1193, column: 5)
!5368 = !DILocation(line: 1193, column: 23, scope: !5367)
!5369 = !DILocation(line: 1193, column: 5, scope: !5363)
!5370 = !DILocation(line: 1195, column: 9, scope: !5371)
!5371 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 1195, column: 9)
!5372 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 1195, column: 9)
!5373 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 1194, column: 5)
!5374 = !DILocation(line: 1195, column: 9, scope: !5372)
!5375 = !DILocation(line: 1195, column: 9, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5371, file: !3, line: 1195, column: 9)
!5377 = !DILocation(line: 1195, column: 9, scope: !5378)
!5378 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 1195, column: 9)
!5379 = !DILocation(line: 1196, column: 9, scope: !5380)
!5380 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 1196, column: 9)
!5381 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 1196, column: 9)
!5382 = !DILocation(line: 1196, column: 9, scope: !5381)
!5383 = !DILocalVariable(name: "cost", scope: !5384, file: !3, line: 1196, type: !62)
!5384 = distinct !DILexicalBlock(scope: !5380, file: !3, line: 1196, column: 9)
!5385 = !DILocation(line: 1196, column: 9, scope: !5384)
!5386 = !DILocation(line: 1196, column: 9, scope: !5387)
!5387 = distinct !DILexicalBlock(scope: !5384, file: !3, line: 1196, column: 9)
!5388 = !DILocation(line: 1196, column: 9, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5387, file: !3, line: 1196, column: 9)
!5390 = !DILocation(line: 1196, column: 9, scope: !5391)
!5391 = distinct !DILexicalBlock(scope: !5384, file: !3, line: 1196, column: 9)
!5392 = !DILocation(line: 1196, column: 9, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5391, file: !3, line: 1196, column: 9)
!5394 = !DILocation(line: 1197, column: 5, scope: !5373)
!5395 = !DILocation(line: 1193, column: 29, scope: !5367)
!5396 = !DILocation(line: 1193, column: 5, scope: !5367)
!5397 = distinct !{!5397, !5369, !5398}
!5398 = !DILocation(line: 1197, column: 5, scope: !5363)
!5399 = !DILocation(line: 1199, column: 9, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1199, column: 9)
!5401 = !DILocation(line: 1199, column: 13, scope: !5400)
!5402 = !DILocation(line: 1199, column: 9, scope: !5062)
!5403 = !DILocalVariable(name: "i", scope: !5404, file: !3, line: 1202, type: !50)
!5404 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 1202, column: 9)
!5405 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 1200, column: 5)
!5406 = !DILocation(line: 1202, column: 18, scope: !5404)
!5407 = !DILocation(line: 1202, column: 14, scope: !5404)
!5408 = !DILocation(line: 1202, column: 25, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5404, file: !3, line: 1202, column: 9)
!5410 = !DILocation(line: 1202, column: 27, scope: !5409)
!5411 = !DILocation(line: 1202, column: 9, scope: !5404)
!5412 = !DILocalVariable(name: "odir", scope: !5413, file: !3, line: 1204, type: !1434)
!5413 = distinct !DILexicalBlock(scope: !5409, file: !3, line: 1203, column: 9)
!5414 = !DILocation(line: 1204, column: 23, scope: !5413)
!5415 = !DILocation(line: 1204, column: 37, scope: !5413)
!5416 = !DILocation(line: 1204, column: 40, scope: !5413)
!5417 = !DILocation(line: 1204, column: 30, scope: !5413)
!5418 = !DILocation(line: 1205, column: 17, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 1205, column: 17)
!5420 = !DILocation(line: 1205, column: 23, scope: !5419)
!5421 = !DILocation(line: 1205, column: 26, scope: !5419)
!5422 = !DILocation(line: 1205, column: 29, scope: !5419)
!5423 = !DILocation(line: 1205, column: 44, scope: !5419)
!5424 = !DILocation(line: 1205, column: 21, scope: !5419)
!5425 = !DILocation(line: 1205, column: 48, scope: !5419)
!5426 = !DILocation(line: 1206, column: 17, scope: !5419)
!5427 = !DILocation(line: 1206, column: 23, scope: !5419)
!5428 = !DILocation(line: 1206, column: 26, scope: !5419)
!5429 = !DILocation(line: 1206, column: 29, scope: !5419)
!5430 = !DILocation(line: 1206, column: 44, scope: !5419)
!5431 = !DILocation(line: 1206, column: 21, scope: !5419)
!5432 = !DILocation(line: 1205, column: 17, scope: !5413)
!5433 = !DILocation(line: 1207, column: 17, scope: !5419)
!5434 = !DILocation(line: 1208, column: 17, scope: !5413)
!5435 = !DILocation(line: 1209, column: 19, scope: !5413)
!5436 = !DILocation(line: 1209, column: 17, scope: !5413)
!5437 = !DILocation(line: 1210, column: 19, scope: !5413)
!5438 = !DILocation(line: 1210, column: 17, scope: !5413)
!5439 = !DILocalVariable(name: "j", scope: !5440, file: !3, line: 1211, type: !50)
!5440 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 1211, column: 13)
!5441 = !DILocation(line: 1211, column: 22, scope: !5440)
!5442 = !DILocation(line: 1211, column: 18, scope: !5440)
!5443 = !DILocation(line: 1211, column: 29, scope: !5444)
!5444 = distinct !DILexicalBlock(scope: !5440, file: !3, line: 1211, column: 13)
!5445 = !DILocation(line: 1211, column: 31, scope: !5444)
!5446 = !DILocation(line: 1211, column: 13, scope: !5440)
!5447 = !DILocation(line: 1213, column: 17, scope: !5448)
!5448 = distinct !DILexicalBlock(scope: !5449, file: !3, line: 1213, column: 17)
!5449 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 1213, column: 17)
!5450 = distinct !DILexicalBlock(scope: !5444, file: !3, line: 1212, column: 13)
!5451 = !DILocation(line: 1213, column: 17, scope: !5449)
!5452 = !DILocation(line: 1213, column: 17, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5448, file: !3, line: 1213, column: 17)
!5454 = !DILocation(line: 1213, column: 17, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 1213, column: 17)
!5456 = !DILocation(line: 1214, column: 17, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5458, file: !3, line: 1214, column: 17)
!5458 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 1214, column: 17)
!5459 = !DILocation(line: 1214, column: 17, scope: !5458)
!5460 = !DILocalVariable(name: "cost", scope: !5461, file: !3, line: 1214, type: !62)
!5461 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 1214, column: 17)
!5462 = !DILocation(line: 1214, column: 17, scope: !5461)
!5463 = !DILocation(line: 1214, column: 17, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 1214, column: 17)
!5465 = !DILocation(line: 1214, column: 17, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5464, file: !3, line: 1214, column: 17)
!5467 = !DILocation(line: 1214, column: 17, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5461, file: !3, line: 1214, column: 17)
!5469 = !DILocation(line: 1214, column: 17, scope: !5470)
!5470 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 1214, column: 17)
!5471 = !DILocation(line: 1215, column: 13, scope: !5450)
!5472 = !DILocation(line: 1211, column: 37, scope: !5444)
!5473 = !DILocation(line: 1211, column: 13, scope: !5444)
!5474 = distinct !{!5474, !5446, !5475}
!5475 = !DILocation(line: 1215, column: 13, scope: !5440)
!5476 = !DILocation(line: 1216, column: 17, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 1216, column: 17)
!5478 = !DILocation(line: 1216, column: 21, scope: !5477)
!5479 = !DILocation(line: 1216, column: 17, scope: !5413)
!5480 = !DILocation(line: 1217, column: 17, scope: !5477)
!5481 = !DILocation(line: 1218, column: 9, scope: !5413)
!5482 = !DILocation(line: 1202, column: 34, scope: !5409)
!5483 = !DILocation(line: 1202, column: 9, scope: !5409)
!5484 = distinct !{!5484, !5411, !5485}
!5485 = !DILocation(line: 1218, column: 9, scope: !5404)
!5486 = !DILocation(line: 1219, column: 5, scope: !5405)
!5487 = !DILocation(line: 1222, column: 11, scope: !5062)
!5488 = !DILocation(line: 1222, column: 9, scope: !5062)
!5489 = !DILocation(line: 1223, column: 11, scope: !5062)
!5490 = !DILocation(line: 1223, column: 9, scope: !5062)
!5491 = !DILocalVariable(name: "i", scope: !5492, file: !3, line: 1224, type: !50)
!5492 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 1224, column: 5)
!5493 = !DILocation(line: 1224, column: 14, scope: !5492)
!5494 = !DILocation(line: 1224, column: 10, scope: !5492)
!5495 = !DILocation(line: 1224, column: 21, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 1224, column: 5)
!5497 = !DILocation(line: 1224, column: 23, scope: !5496)
!5498 = !DILocation(line: 1224, column: 5, scope: !5492)
!5499 = !DILocation(line: 1226, column: 9, scope: !5500)
!5500 = distinct !DILexicalBlock(scope: !5501, file: !3, line: 1226, column: 9)
!5501 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 1226, column: 9)
!5502 = distinct !DILexicalBlock(scope: !5496, file: !3, line: 1225, column: 5)
!5503 = !DILocation(line: 1226, column: 9, scope: !5501)
!5504 = !DILocation(line: 1226, column: 9, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5500, file: !3, line: 1226, column: 9)
!5506 = !DILocation(line: 1226, column: 9, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 1226, column: 9)
!5508 = !DILocation(line: 1227, column: 9, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5510, file: !3, line: 1227, column: 9)
!5510 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 1227, column: 9)
!5511 = !DILocation(line: 1227, column: 9, scope: !5510)
!5512 = !DILocalVariable(name: "cost", scope: !5513, file: !3, line: 1227, type: !62)
!5513 = distinct !DILexicalBlock(scope: !5509, file: !3, line: 1227, column: 9)
!5514 = !DILocation(line: 1227, column: 9, scope: !5513)
!5515 = !DILocation(line: 1227, column: 9, scope: !5516)
!5516 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 1227, column: 9)
!5517 = !DILocation(line: 1227, column: 9, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5516, file: !3, line: 1227, column: 9)
!5519 = !DILocation(line: 1227, column: 9, scope: !5520)
!5520 = distinct !DILexicalBlock(scope: !5513, file: !3, line: 1227, column: 9)
!5521 = !DILocation(line: 1227, column: 9, scope: !5522)
!5522 = distinct !DILexicalBlock(scope: !5520, file: !3, line: 1227, column: 9)
!5523 = !DILocation(line: 1228, column: 5, scope: !5502)
!5524 = !DILocation(line: 1224, column: 29, scope: !5496)
!5525 = !DILocation(line: 1224, column: 5, scope: !5496)
!5526 = distinct !{!5526, !5498, !5527}
!5527 = !DILocation(line: 1228, column: 5, scope: !5492)
!5528 = !DILocation(line: 1230, column: 15, scope: !5062)
!5529 = !DILocation(line: 1230, column: 5, scope: !5062)
!5530 = !DILocation(line: 1230, column: 8, scope: !5062)
!5531 = !DILocation(line: 1230, column: 13, scope: !5062)
!5532 = !DILocation(line: 1231, column: 16, scope: !5062)
!5533 = !DILocation(line: 1231, column: 5, scope: !5062)
!5534 = !DILocation(line: 1231, column: 8, scope: !5062)
!5535 = !DILocation(line: 1231, column: 14, scope: !5062)
!5536 = !DILocation(line: 1232, column: 16, scope: !5062)
!5537 = !DILocation(line: 1232, column: 5, scope: !5062)
!5538 = !DILocation(line: 1232, column: 8, scope: !5062)
!5539 = !DILocation(line: 1232, column: 14, scope: !5062)
!5540 = !DILocation(line: 1233, column: 32, scope: !5062)
!5541 = !DILocation(line: 1233, column: 47, scope: !5062)
!5542 = !DILocation(line: 1233, column: 35, scope: !5062)
!5543 = !DILocation(line: 1233, column: 64, scope: !5062)
!5544 = !DILocation(line: 1233, column: 52, scope: !5062)
!5545 = !DILocation(line: 1233, column: 69, scope: !5062)
!5546 = !DILocation(line: 1233, column: 71, scope: !5062)
!5547 = !DILocation(line: 1233, column: 76, scope: !5062)
!5548 = !DILocation(line: 1233, column: 78, scope: !5062)
!5549 = !DILocation(line: 1233, column: 83, scope: !5062)
!5550 = !DILocation(line: 1233, column: 107, scope: !5062)
!5551 = !DILocation(line: 1233, column: 112, scope: !5062)
!5552 = !DILocation(line: 1233, column: 91, scope: !5062)
!5553 = !DILocation(line: 1233, column: 5, scope: !5062)
!5554 = !DILocation(line: 1234, column: 23, scope: !5062)
!5555 = !DILocation(line: 1234, column: 58, scope: !5062)
!5556 = !DILocation(line: 1234, column: 12, scope: !5062)
!5557 = !DILocation(line: 1234, column: 10, scope: !5062)
!5558 = !DILocation(line: 1235, column: 32, scope: !5062)
!5559 = !DILocation(line: 1235, column: 47, scope: !5062)
!5560 = !DILocation(line: 1235, column: 35, scope: !5062)
!5561 = !DILocation(line: 1235, column: 64, scope: !5062)
!5562 = !DILocation(line: 1235, column: 52, scope: !5062)
!5563 = !DILocation(line: 1235, column: 69, scope: !5062)
!5564 = !DILocation(line: 1235, column: 71, scope: !5062)
!5565 = !DILocation(line: 1235, column: 76, scope: !5062)
!5566 = !DILocation(line: 1235, column: 78, scope: !5062)
!5567 = !DILocation(line: 1235, column: 83, scope: !5062)
!5568 = !DILocation(line: 1235, column: 91, scope: !5062)
!5569 = !DILocation(line: 1235, column: 5, scope: !5062)
!5570 = !DILocation(line: 1236, column: 5, scope: !5062)
!5571 = !DILocation(line: 1236, column: 8, scope: !5062)
!5572 = !DILocation(line: 1236, column: 11, scope: !5062)
!5573 = !DILocation(line: 1236, column: 21, scope: !5062)
!5574 = !DILocation(line: 1237, column: 1, scope: !5062)
!5575 = distinct !DISubprogram(name: "x264_macroblock_cache_mv", scope: !5576, file: !5576, line: 110, type: !5577, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5576 = !DIFile(filename: "x264_src/common/rectangle.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/525.x264_r/build/build_base_ld-loop-ext-m64.0000")
!5577 = !DISubroutineType(types: !5578)
!5578 = !{null, !86, !50, !50, !50, !50, !50, !26}
!5579 = !DILocalVariable(name: "h", arg: 1, scope: !5575, file: !5576, line: 110, type: !86)
!5580 = !DILocation(line: 110, column: 61, scope: !5575)
!5581 = !DILocalVariable(name: "x", arg: 2, scope: !5575, file: !5576, line: 110, type: !50)
!5582 = !DILocation(line: 110, column: 68, scope: !5575)
!5583 = !DILocalVariable(name: "y", arg: 3, scope: !5575, file: !5576, line: 110, type: !50)
!5584 = !DILocation(line: 110, column: 75, scope: !5575)
!5585 = !DILocalVariable(name: "width", arg: 4, scope: !5575, file: !5576, line: 110, type: !50)
!5586 = !DILocation(line: 110, column: 82, scope: !5575)
!5587 = !DILocalVariable(name: "height", arg: 5, scope: !5575, file: !5576, line: 110, type: !50)
!5588 = !DILocation(line: 110, column: 93, scope: !5575)
!5589 = !DILocalVariable(name: "i_list", arg: 6, scope: !5575, file: !5576, line: 110, type: !50)
!5590 = !DILocation(line: 110, column: 105, scope: !5575)
!5591 = !DILocalVariable(name: "mv", arg: 7, scope: !5575, file: !5576, line: 110, type: !26)
!5592 = !DILocation(line: 110, column: 122, scope: !5575)
!5593 = !DILocalVariable(name: "mv_cache", scope: !5575, file: !5576, line: 112, type: !154)
!5594 = !DILocation(line: 112, column: 11, scope: !5575)
!5595 = !DILocation(line: 112, column: 23, scope: !5575)
!5596 = !DILocation(line: 112, column: 26, scope: !5575)
!5597 = !DILocation(line: 112, column: 29, scope: !5575)
!5598 = !DILocation(line: 112, column: 35, scope: !5575)
!5599 = !DILocation(line: 112, column: 38, scope: !5575)
!5600 = !DILocation(line: 112, column: 59, scope: !5575)
!5601 = !DILocation(line: 112, column: 58, scope: !5575)
!5602 = !DILocation(line: 112, column: 63, scope: !5575)
!5603 = !DILocation(line: 112, column: 62, scope: !5575)
!5604 = !DILocation(line: 112, column: 60, scope: !5575)
!5605 = !DILocation(line: 112, column: 22, scope: !5575)
!5606 = !DILocation(line: 116, column: 37, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5575, file: !5576, line: 113, column: 9)
!5608 = !DILocation(line: 116, column: 47, scope: !5607)
!5609 = !DILocation(line: 116, column: 52, scope: !5607)
!5610 = !DILocation(line: 116, column: 56, scope: !5607)
!5611 = !DILocation(line: 116, column: 67, scope: !5607)
!5612 = !DILocation(line: 116, column: 9, scope: !5607)
!5613 = !DILocation(line: 117, column: 1, scope: !5575)
!5614 = distinct !DISubprogram(name: "pack8to16", scope: !1439, file: !1439, line: 324, type: !3536, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5615 = !DILocalVariable(name: "a", arg: 1, scope: !5614, file: !1439, line: 324, type: !50)
!5616 = !DILocation(line: 324, column: 46, scope: !5614)
!5617 = !DILocalVariable(name: "b", arg: 2, scope: !5614, file: !1439, line: 324, type: !50)
!5618 = !DILocation(line: 324, column: 53, scope: !5614)
!5619 = !DILocation(line: 329, column: 11, scope: !5614)
!5620 = !DILocation(line: 329, column: 16, scope: !5614)
!5621 = !DILocation(line: 329, column: 17, scope: !5614)
!5622 = !DILocation(line: 329, column: 13, scope: !5614)
!5623 = !DILocation(line: 329, column: 4, scope: !5614)
!5624 = distinct !DISubprogram(name: "x264_macroblock_cache_mvd", scope: !5576, file: !5576, line: 118, type: !5625, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5625 = !DISubroutineType(types: !5626)
!5626 = !{null, !86, !50, !50, !50, !50, !50, !32}
!5627 = !DILocalVariable(name: "h", arg: 1, scope: !5624, file: !5576, line: 118, type: !86)
!5628 = !DILocation(line: 118, column: 62, scope: !5624)
!5629 = !DILocalVariable(name: "x", arg: 2, scope: !5624, file: !5576, line: 118, type: !50)
!5630 = !DILocation(line: 118, column: 69, scope: !5624)
!5631 = !DILocalVariable(name: "y", arg: 3, scope: !5624, file: !5576, line: 118, type: !50)
!5632 = !DILocation(line: 118, column: 76, scope: !5624)
!5633 = !DILocalVariable(name: "width", arg: 4, scope: !5624, file: !5576, line: 118, type: !50)
!5634 = !DILocation(line: 118, column: 83, scope: !5624)
!5635 = !DILocalVariable(name: "height", arg: 5, scope: !5624, file: !5576, line: 118, type: !50)
!5636 = !DILocation(line: 118, column: 94, scope: !5624)
!5637 = !DILocalVariable(name: "i_list", arg: 6, scope: !5624, file: !5576, line: 118, type: !50)
!5638 = !DILocation(line: 118, column: 106, scope: !5624)
!5639 = !DILocalVariable(name: "mvd", arg: 7, scope: !5624, file: !5576, line: 118, type: !32)
!5640 = !DILocation(line: 118, column: 123, scope: !5624)
!5641 = !DILocalVariable(name: "mvd_cache", scope: !5624, file: !5576, line: 120, type: !154)
!5642 = !DILocation(line: 120, column: 11, scope: !5624)
!5643 = !DILocation(line: 120, column: 24, scope: !5624)
!5644 = !DILocation(line: 120, column: 27, scope: !5624)
!5645 = !DILocation(line: 120, column: 30, scope: !5624)
!5646 = !DILocation(line: 120, column: 36, scope: !5624)
!5647 = !DILocation(line: 120, column: 40, scope: !5624)
!5648 = !DILocation(line: 120, column: 61, scope: !5624)
!5649 = !DILocation(line: 120, column: 60, scope: !5624)
!5650 = !DILocation(line: 120, column: 65, scope: !5624)
!5651 = !DILocation(line: 120, column: 64, scope: !5624)
!5652 = !DILocation(line: 120, column: 62, scope: !5624)
!5653 = !DILocation(line: 120, column: 23, scope: !5624)
!5654 = !DILocation(line: 124, column: 37, scope: !5655)
!5655 = distinct !DILexicalBlock(scope: !5624, file: !5576, line: 121, column: 9)
!5656 = !DILocation(line: 124, column: 48, scope: !5655)
!5657 = !DILocation(line: 124, column: 53, scope: !5655)
!5658 = !DILocation(line: 124, column: 57, scope: !5655)
!5659 = !DILocation(line: 124, column: 68, scope: !5655)
!5660 = !DILocation(line: 124, column: 9, scope: !5655)
!5661 = !DILocation(line: 125, column: 1, scope: !5624)
!5662 = distinct !DISubprogram(name: "x264_macroblock_cache_rect", scope: !5576, file: !5576, line: 22, type: !5663, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !1391)
!5663 = !DISubroutineType(types: !5664)
!5664 = !{null, !154, !50, !50, !50, !26}
!5665 = !DILocalVariable(name: "dst", arg: 1, scope: !5662, file: !5576, line: 22, type: !154)
!5666 = !DILocation(line: 22, column: 61, scope: !5662)
!5667 = !DILocalVariable(name: "w", arg: 2, scope: !5662, file: !5576, line: 22, type: !50)
!5668 = !DILocation(line: 22, column: 70, scope: !5662)
!5669 = !DILocalVariable(name: "h", arg: 3, scope: !5662, file: !5576, line: 22, type: !50)
!5670 = !DILocation(line: 22, column: 77, scope: !5662)
!5671 = !DILocalVariable(name: "s", arg: 4, scope: !5662, file: !5576, line: 22, type: !50)
!5672 = !DILocation(line: 22, column: 84, scope: !5662)
!5673 = !DILocalVariable(name: "v", arg: 5, scope: !5662, file: !5576, line: 22, type: !26)
!5674 = !DILocation(line: 22, column: 96, scope: !5662)
!5675 = !DILocalVariable(name: "d", scope: !5662, file: !5576, line: 24, type: !282)
!5676 = !DILocation(line: 24, column: 14, scope: !5662)
!5677 = !DILocation(line: 24, column: 18, scope: !5662)
!5678 = !DILocalVariable(name: "v2", scope: !5662, file: !5576, line: 25, type: !32)
!5679 = !DILocation(line: 25, column: 14, scope: !5662)
!5680 = !DILocation(line: 25, column: 19, scope: !5662)
!5681 = !DILocation(line: 25, column: 21, scope: !5662)
!5682 = !DILocation(line: 25, column: 28, scope: !5662)
!5683 = !DILocation(line: 25, column: 32, scope: !5662)
!5684 = !DILocation(line: 25, column: 34, scope: !5662)
!5685 = !DILocalVariable(name: "v4", scope: !5662, file: !5576, line: 26, type: !26)
!5686 = !DILocation(line: 26, column: 14, scope: !5662)
!5687 = !DILocation(line: 26, column: 19, scope: !5662)
!5688 = !DILocation(line: 26, column: 21, scope: !5662)
!5689 = !DILocation(line: 26, column: 28, scope: !5662)
!5690 = !DILocation(line: 26, column: 32, scope: !5662)
!5691 = !DILocation(line: 26, column: 34, scope: !5662)
!5692 = !DILocation(line: 26, column: 41, scope: !5662)
!5693 = !DILocation(line: 26, column: 43, scope: !5662)
!5694 = !DILocation(line: 26, column: 55, scope: !5662)
!5695 = !DILocation(line: 26, column: 57, scope: !5662)
!5696 = !DILocalVariable(name: "v8", scope: !5662, file: !5576, line: 27, type: !62)
!5697 = !DILocation(line: 27, column: 14, scope: !5662)
!5698 = !DILocation(line: 27, column: 19, scope: !5662)
!5699 = !DILocation(line: 27, column: 35, scope: !5662)
!5700 = !DILocation(line: 27, column: 25, scope: !5662)
!5701 = !DILocation(line: 27, column: 38, scope: !5662)
!5702 = !DILocation(line: 27, column: 22, scope: !5662)
!5703 = !DILocation(line: 28, column: 7, scope: !5662)
!5704 = !DILocation(line: 30, column: 9, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5662, file: !5576, line: 30, column: 9)
!5706 = !DILocation(line: 30, column: 11, scope: !5705)
!5707 = !DILocation(line: 30, column: 9, scope: !5662)
!5708 = !DILocation(line: 32, column: 24, scope: !5709)
!5709 = distinct !DILexicalBlock(scope: !5705, file: !5576, line: 31, column: 5)
!5710 = !DILocation(line: 32, column: 9, scope: !5709)
!5711 = !DILocation(line: 32, column: 22, scope: !5709)
!5712 = !DILocation(line: 33, column: 13, scope: !5713)
!5713 = distinct !DILexicalBlock(scope: !5709, file: !5576, line: 33, column: 13)
!5714 = !DILocation(line: 33, column: 15, scope: !5713)
!5715 = !DILocation(line: 33, column: 13, scope: !5709)
!5716 = !DILocation(line: 33, column: 22, scope: !5713)
!5717 = !DILocation(line: 34, column: 24, scope: !5709)
!5718 = !DILocation(line: 34, column: 9, scope: !5709)
!5719 = !DILocation(line: 34, column: 22, scope: !5709)
!5720 = !DILocation(line: 35, column: 13, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5709, file: !5576, line: 35, column: 13)
!5722 = !DILocation(line: 35, column: 15, scope: !5721)
!5723 = !DILocation(line: 35, column: 13, scope: !5709)
!5724 = !DILocation(line: 35, column: 22, scope: !5721)
!5725 = !DILocation(line: 36, column: 24, scope: !5709)
!5726 = !DILocation(line: 36, column: 9, scope: !5709)
!5727 = !DILocation(line: 36, column: 22, scope: !5709)
!5728 = !DILocation(line: 37, column: 24, scope: !5709)
!5729 = !DILocation(line: 37, column: 9, scope: !5709)
!5730 = !DILocation(line: 37, column: 22, scope: !5709)
!5731 = !DILocation(line: 38, column: 5, scope: !5709)
!5732 = !DILocation(line: 39, column: 14, scope: !5733)
!5733 = distinct !DILexicalBlock(scope: !5705, file: !5576, line: 39, column: 14)
!5734 = !DILocation(line: 39, column: 16, scope: !5733)
!5735 = !DILocation(line: 39, column: 14, scope: !5705)
!5736 = !DILocation(line: 41, column: 24, scope: !5737)
!5737 = distinct !DILexicalBlock(scope: !5733, file: !5576, line: 40, column: 5)
!5738 = !DILocation(line: 41, column: 9, scope: !5737)
!5739 = !DILocation(line: 41, column: 22, scope: !5737)
!5740 = !DILocation(line: 42, column: 13, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5737, file: !5576, line: 42, column: 13)
!5742 = !DILocation(line: 42, column: 15, scope: !5741)
!5743 = !DILocation(line: 42, column: 13, scope: !5737)
!5744 = !DILocation(line: 42, column: 22, scope: !5741)
!5745 = !DILocation(line: 43, column: 24, scope: !5737)
!5746 = !DILocation(line: 43, column: 9, scope: !5737)
!5747 = !DILocation(line: 43, column: 22, scope: !5737)
!5748 = !DILocation(line: 44, column: 13, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5737, file: !5576, line: 44, column: 13)
!5750 = !DILocation(line: 44, column: 15, scope: !5749)
!5751 = !DILocation(line: 44, column: 13, scope: !5737)
!5752 = !DILocation(line: 44, column: 22, scope: !5749)
!5753 = !DILocation(line: 45, column: 24, scope: !5737)
!5754 = !DILocation(line: 45, column: 9, scope: !5737)
!5755 = !DILocation(line: 45, column: 22, scope: !5737)
!5756 = !DILocation(line: 46, column: 24, scope: !5737)
!5757 = !DILocation(line: 46, column: 9, scope: !5737)
!5758 = !DILocation(line: 46, column: 22, scope: !5737)
!5759 = !DILocation(line: 47, column: 5, scope: !5737)
!5760 = !DILocation(line: 48, column: 14, scope: !5761)
!5761 = distinct !DILexicalBlock(scope: !5733, file: !5576, line: 48, column: 14)
!5762 = !DILocation(line: 48, column: 16, scope: !5761)
!5763 = !DILocation(line: 48, column: 14, scope: !5733)
!5764 = !DILocation(line: 52, column: 28, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5766, file: !5576, line: 51, column: 9)
!5766 = distinct !DILexicalBlock(scope: !5767, file: !5576, line: 50, column: 13)
!5767 = distinct !DILexicalBlock(scope: !5761, file: !5576, line: 49, column: 5)
!5768 = !DILocation(line: 52, column: 13, scope: !5765)
!5769 = !DILocation(line: 52, column: 26, scope: !5765)
!5770 = !DILocation(line: 53, column: 17, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5765, file: !5576, line: 53, column: 17)
!5772 = !DILocation(line: 53, column: 19, scope: !5771)
!5773 = !DILocation(line: 53, column: 17, scope: !5765)
!5774 = !DILocation(line: 53, column: 26, scope: !5771)
!5775 = !DILocation(line: 54, column: 28, scope: !5765)
!5776 = !DILocation(line: 54, column: 13, scope: !5765)
!5777 = !DILocation(line: 54, column: 26, scope: !5765)
!5778 = !DILocation(line: 55, column: 17, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !5765, file: !5576, line: 55, column: 17)
!5780 = !DILocation(line: 55, column: 19, scope: !5779)
!5781 = !DILocation(line: 55, column: 17, scope: !5765)
!5782 = !DILocation(line: 55, column: 26, scope: !5779)
!5783 = !DILocation(line: 56, column: 28, scope: !5765)
!5784 = !DILocation(line: 56, column: 13, scope: !5765)
!5785 = !DILocation(line: 56, column: 26, scope: !5765)
!5786 = !DILocation(line: 57, column: 28, scope: !5765)
!5787 = !DILocation(line: 57, column: 13, scope: !5765)
!5788 = !DILocation(line: 57, column: 26, scope: !5765)
!5789 = !DILocation(line: 72, column: 5, scope: !5767)
!5790 = !DILocation(line: 73, column: 14, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5761, file: !5576, line: 73, column: 14)
!5792 = !DILocation(line: 73, column: 16, scope: !5791)
!5793 = !DILocation(line: 73, column: 14, scope: !5761)
!5794 = !DILocation(line: 79, column: 13, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5796, file: !5576, line: 78, column: 9)
!5796 = distinct !DILexicalBlock(scope: !5797, file: !5576, line: 77, column: 13)
!5797 = distinct !DILexicalBlock(scope: !5791, file: !5576, line: 74, column: 5)
!5798 = !DILocation(line: 81, column: 34, scope: !5799)
!5799 = distinct !DILexicalBlock(scope: !5795, file: !5576, line: 80, column: 13)
!5800 = !DILocation(line: 81, column: 17, scope: !5799)
!5801 = !DILocation(line: 81, column: 32, scope: !5799)
!5802 = !DILocation(line: 82, column: 34, scope: !5799)
!5803 = !DILocation(line: 82, column: 17, scope: !5799)
!5804 = !DILocation(line: 82, column: 32, scope: !5799)
!5805 = !DILocation(line: 83, column: 34, scope: !5799)
!5806 = !DILocation(line: 83, column: 17, scope: !5799)
!5807 = !DILocation(line: 83, column: 32, scope: !5799)
!5808 = !DILocation(line: 84, column: 34, scope: !5799)
!5809 = !DILocation(line: 84, column: 17, scope: !5799)
!5810 = !DILocation(line: 84, column: 32, scope: !5799)
!5811 = !DILocation(line: 85, column: 19, scope: !5799)
!5812 = !DILocation(line: 86, column: 22, scope: !5799)
!5813 = !DILocation(line: 86, column: 23, scope: !5799)
!5814 = !DILocation(line: 86, column: 19, scope: !5799)
!5815 = !DILocation(line: 87, column: 13, scope: !5799)
!5816 = !DILocation(line: 87, column: 22, scope: !5795)
!5817 = distinct !{!5817, !5794, !5818}
!5818 = !DILocation(line: 87, column: 24, scope: !5795)
!5819 = !DILocation(line: 100, column: 5, scope: !5797)
!5820 = !DILocation(line: 103, column: 1, scope: !5662)
