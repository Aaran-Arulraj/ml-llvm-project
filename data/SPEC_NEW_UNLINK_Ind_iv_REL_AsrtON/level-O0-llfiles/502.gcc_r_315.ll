; ModuleID = 'tree-vect-loop-manip.c'
source_filename = "tree-vect-loop-manip.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.VEC_vec_void_p_heap = type { %struct.VEC_vec_void_p_base }
%struct.VEC_vec_void_p_base = type { i32, i32, [1 x i8*] }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.VEC_adjust_info_stack = type { %struct.VEC_adjust_info_base }
%struct.VEC_adjust_info_base = type { i32, i32, [1 x %struct.adjust_info] }
%struct.adjust_info = type { %union.tree_node*, %union.tree_node*, %struct.basic_block_def* }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct._loop_vec_info = type { %struct.loop*, %struct.basic_block_def**, %union.tree_node*, %union.tree_node*, i32, i8, i32, %struct.data_reference*, i32, i32, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_gimple_heap*, i32, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, i32 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.VEC_slp_instance_heap = type { %struct.VEC_slp_instance_base }
%struct.VEC_slp_instance_base = type { i32, i32, [1 x %struct._slp_instance*] }
%struct._slp_instance = type { %struct._slp_tree*, i32, i32, %struct.anon.0, %struct.VEC_int_heap*, %struct.VEC_slp_tree_heap*, %union.gimple_statement_d* }
%struct._slp_tree = type { %struct._slp_tree*, %struct._slp_tree*, %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap*, i32, %struct.anon }
%struct.anon = type { i32, i32 }
%struct.anon.0 = type { i32, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_slp_tree_heap = type { %struct.VEC_slp_tree_base }
%struct.VEC_slp_tree_base = type { i32, i32, [1 x %struct._slp_tree*] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct._stmt_vec_info = type { i32, %union.gimple_statement_d*, %struct._loop_vec_info*, i32, i8, %union.tree_node*, %union.gimple_statement_d*, %struct.data_reference*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8, %union.gimple_statement_d*, %struct.VEC_dr_p_heap*, i32, %union.gimple_statement_d*, %union.gimple_statement_d*, i32, i32, i32, %union.gimple_statement_d*, i8, %struct.anon.1, i32, %struct._bb_vec_info* }
%struct.VEC_dr_p_heap = type { %struct.VEC_dr_p_base }
%struct.VEC_dr_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.anon.1 = type { i32, i32 }
%struct._bb_vec_info = type { %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }

@.str = private unnamed_addr constant [23 x i8] c"tree-vect-loop-manip.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"\0Aloop at %s:%d: \00", align 1
@cfun = external dso_local global %struct.function*, align 8
@vect_dump = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"vect_can_advance_ivs_p:\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"Analyze phi: \00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"virtual phi. skip.\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"reduc phi. skip.\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"No Access function.\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"Access function of PHI: \00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"No evolution.\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"=== vect_do_peeling_for_loop_bound ===\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"=== vect_do_peeling_for_alignment ===\00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.12 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@stmt_vec_info_vec = external dso_local global %struct.VEC_vec_void_p_heap*, align 8
@.str.15 = private unnamed_addr constant [20 x i8] c"./tree-vectorizer.h\00", align 1
@chrec_dont_know = external dso_local global %union.tree_node*, align 8
@chrec_known = external dso_local global %union.tree_node*, align 8
@.str.16 = private unnamed_addr constant [4 x i8] c"bnd\00", align 1
@.str.17 = private unnamed_addr constant [14 x i8] c"ratio_mult_vf\00", align 1
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.18 = private unnamed_addr constant [47 x i8] c"Profitability threshold is %u loop iterations.\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"\0A%s:%d: note: \00", align 1
@.str.20 = private unnamed_addr constant [41 x i8] c"tree_duplicate_loop_to_edge_cfg failed.\0A\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@adjust_vec = internal global %struct.VEC_adjust_info_stack* null, align 8, !dbg !0
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.21 = private unnamed_addr constant [27 x i8] c"prologue_after_cost_adjust\00", align 1
@.str.22 = private unnamed_addr constant [40 x i8] c"vect_update_ivs_after_vectorizer: phi: \00", align 1
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@.str.23 = private unnamed_addr constant [4 x i8] c"tmp\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"niters\00", align 1
@mode_size = external dso_local global [87 x i8], align 16
@.str.25 = private unnamed_addr constant [22 x i8] c"known alignment = %d.\00", align 1
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@.str.26 = private unnamed_addr constant [25 x i8] c"niters for prolog loop: \00", align 1
@.str.27 = private unnamed_addr constant [19 x i8] c"prolog_loop_niters\00", align 1
@.str.28 = private unnamed_addr constant [32 x i8] c"=== vect_update_inits_of_dr ===\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"%s%d\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"addr2int\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"orptrs\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"andmask\00", align 1
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@.str.33 = private unnamed_addr constant [42 x i8] c"create runtime check for data references \00", align 1
@.str.34 = private unnamed_addr constant [6 x i8] c" and \00", align 1
@.str.35 = private unnamed_addr constant [41 x i8] c"created %u versioning for alias checks.\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @rename_variables_in_bb(%struct.basic_block_def* %bb) #0 !dbg !2498 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp11 = alloca %struct.edge_iterator, align 8
  %tmp19 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2502, metadata !DIExpression()), !dbg !2503
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2504, metadata !DIExpression()), !dbg !2511
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2512, metadata !DIExpression()), !dbg !2513
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !2514, metadata !DIExpression()), !dbg !2515
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !2516, metadata !DIExpression()), !dbg !2529
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2530, metadata !DIExpression()), !dbg !2531
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2532, metadata !DIExpression()), !dbg !2539
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !2540, metadata !DIExpression()), !dbg !2541
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2542
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !2543
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2543
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !2541
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2544
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %2), !dbg !2546
  %3 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2546
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2546
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 24, i1 false), !dbg !2546
  br label %for.cond, !dbg !2547

for.cond:                                         ; preds = %for.inc9, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2548
  %tobool = icmp ne i8 %call, 0, !dbg !2550
  %lnot = xor i1 %tobool, true, !dbg !2550
  br i1 %lnot, label %for.body, label %for.end10, !dbg !2551

for.body:                                         ; preds = %for.cond
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2552
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !2554
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2555
  %call2 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %5, i32 5), !dbg !2555
  store %struct.ssa_use_operand_d* %call2, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2555
  br label %for.cond3, !dbg !2555

for.cond3:                                        ; preds = %for.inc, %for.body
  %call4 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !2557
  %tobool5 = icmp ne i8 %call4, 0, !dbg !2557
  %lnot6 = xor i1 %tobool5, true, !dbg !2557
  br i1 %lnot6, label %for.body7, label %for.end, !dbg !2555

for.body7:                                        ; preds = %for.cond3
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2559
  call void @rename_use_op(%struct.ssa_use_operand_d* %6), !dbg !2560
  br label %for.inc, !dbg !2560

for.inc:                                          ; preds = %for.body7
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !2557
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2557
  br label %for.cond3, !dbg !2557, !llvm.loop !2561

for.end:                                          ; preds = %for.cond3
  br label %for.inc9, !dbg !2563

for.inc9:                                         ; preds = %for.end
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2564
  br label %for.cond, !dbg !2565, !llvm.loop !2566

for.end10:                                        ; preds = %for.cond
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2568
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !2568
  %call12 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2568
  %8 = bitcast %struct.edge_iterator* %tmp11 to { i32, %struct.VEC_edge_gc** }*, !dbg !2568
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2568
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 0, !dbg !2568
  store i32 %10, i32* %9, align 8, !dbg !2568
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2568
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call12, 1, !dbg !2568
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !2568
  %13 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2568
  %14 = bitcast %struct.edge_iterator* %tmp11 to i8*, !dbg !2568
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 16, i1 false), !dbg !2568
  br label %for.cond13, !dbg !2568

for.cond13:                                       ; preds = %for.inc30, %for.end10
  %15 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2570
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !2570
  %17 = load i32, i32* %16, align 8, !dbg !2570
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !2570
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %18, align 8, !dbg !2570
  %call14 = call zeroext i8 @ei_cond(i32 %17, %struct.VEC_edge_gc** %19, %struct.edge_def** %e), !dbg !2570
  %tobool15 = icmp ne i8 %call14, 0, !dbg !2568
  br i1 %tobool15, label %for.body16, label %for.end31, !dbg !2568

for.body16:                                       ; preds = %for.cond13
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !2572
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2575
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !2576
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2576
  %call17 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %20, %struct.basic_block_def* %22), !dbg !2577
  %tobool18 = icmp ne i8 %call17, 0, !dbg !2577
  br i1 %tobool18, label %if.end, label %if.then, !dbg !2578

if.then:                                          ; preds = %for.body16
  br label %for.inc30, !dbg !2579

if.end:                                           ; preds = %for.body16
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2580
  %dest20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !2582
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest20, align 8, !dbg !2582
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp19, %struct.basic_block_def* %24), !dbg !2583
  %25 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2583
  %26 = bitcast %struct.gimple_stmt_iterator* %tmp19 to i8*, !dbg !2583
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 24, i1 false), !dbg !2583
  br label %for.cond21, !dbg !2584

for.cond21:                                       ; preds = %for.inc28, %if.end
  %call22 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2585
  %tobool23 = icmp ne i8 %call22, 0, !dbg !2587
  %lnot24 = xor i1 %tobool23, true, !dbg !2587
  br i1 %lnot24, label %for.body25, label %for.end29, !dbg !2588

for.body25:                                       ; preds = %for.cond21
  %call26 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !2589
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2589
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 6, !dbg !2589
  %28 = load i32, i32* %dest_idx, align 4, !dbg !2589
  %call27 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %call26, i32 %28), !dbg !2589
  call void @rename_use_op(%struct.ssa_use_operand_d* %call27), !dbg !2590
  br label %for.inc28, !dbg !2590

for.inc28:                                        ; preds = %for.body25
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !2591
  br label %for.cond21, !dbg !2592, !llvm.loop !2593

for.end29:                                        ; preds = %for.cond21
  br label %for.inc30, !dbg !2595

for.inc30:                                        ; preds = %for.end29, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2570
  br label %for.cond13, !dbg !2570, !llvm.loop !2596

for.end31:                                        ; preds = %for.cond13
  ret void, !dbg !2598
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !2599 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2602, metadata !DIExpression()), !dbg !2603
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !2604, metadata !DIExpression()), !dbg !2605
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !2606, metadata !DIExpression()), !dbg !2607
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2608
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !2609
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !2610
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !2611
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !2612
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !2613
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2614
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !2615
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !2616
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !2617
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2618
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !2619
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !2620
  ret void, !dbg !2621
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !2622 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2625, metadata !DIExpression()), !dbg !2626
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !2627
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2627
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !2628
  %conv = zext i1 %cmp to i32, !dbg !2628
  %conv1 = trunc i32 %conv to i8, !dbg !2629
  ret i8 %conv1, !dbg !2630
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !2631 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2634, metadata !DIExpression()), !dbg !2635
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !2636
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2636
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !2637
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2637
  ret %union.gimple_statement_d* %1, !dbg !2638
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !2639 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !2644, metadata !DIExpression()), !dbg !2645
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !2646, metadata !DIExpression()), !dbg !2647
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2648, metadata !DIExpression()), !dbg !2649
  %0 = load i32, i32* %flags.addr, align 4, !dbg !2650
  %and = and i32 %0, 10, !dbg !2650
  %cmp = icmp eq i32 %and, 0, !dbg !2650
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !2650

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !2650
  %and1 = and i32 %1, 1, !dbg !2650
  %tobool = icmp ne i32 %and1, 0, !dbg !2650
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2650

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2650
  br label %cond.end, !dbg !2650

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !2650

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2650
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2651
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !2652
  %4 = load i32, i32* %flags.addr, align 4, !dbg !2653
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !2654
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2655
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !2656
  store i32 2, i32* %iter_type, align 4, !dbg !2657
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2658
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !2659
  ret %struct.ssa_use_operand_d* %call, !dbg !2660
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !2661 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !2666, metadata !DIExpression()), !dbg !2667
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2668
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !2669
  %1 = load i8, i8* %done, align 8, !dbg !2669
  ret i8 %1, !dbg !2670
}

; Function Attrs: noinline nounwind uwtable
define internal void @rename_use_op(%struct.ssa_use_operand_d* %op_p) #0 !dbg !2671 {
entry:
  %op_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %new_name = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %op_p, %struct.ssa_use_operand_d** %op_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %op_p.addr, metadata !2674, metadata !DIExpression()), !dbg !2675
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !2676, metadata !DIExpression()), !dbg !2677
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p.addr, align 8, !dbg !2678
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %0), !dbg !2678
  %base = bitcast %union.tree_node* %call to %struct.tree_base*, !dbg !2678
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !2678
  %bf.load = load i64, i64* %1, align 8, !dbg !2678
  %bf.clear = and i64 %bf.load, 65535, !dbg !2678
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !2678
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !2680
  br i1 %cmp, label %if.then, label %if.end, !dbg !2681

if.then:                                          ; preds = %entry
  br label %return, !dbg !2682

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p.addr, align 8, !dbg !2683
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %2), !dbg !2683
  %call2 = call %union.tree_node* @get_current_def(%union.tree_node* %call1), !dbg !2684
  store %union.tree_node* %call2, %union.tree_node** %new_name, align 8, !dbg !2685
  %3 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !2686
  %tobool = icmp ne %union.tree_node* %3, null, !dbg !2686
  br i1 %tobool, label %if.end4, label %if.then3, !dbg !2688

if.then3:                                         ; preds = %if.end
  br label %return, !dbg !2689

if.end4:                                          ; preds = %if.end
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p.addr, align 8, !dbg !2690
  %5 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !2690
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !2690
  br label %return, !dbg !2691

return:                                           ; preds = %if.end4, %if.then3, %if.then
  ret void, !dbg !2691
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !2692 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !2695, metadata !DIExpression()), !dbg !2696
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !2697, metadata !DIExpression()), !dbg !2698
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2699
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !2701
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !2701
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !2699
  br i1 %tobool, label %if.then, label %if.end, !dbg !2702

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2703
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !2703
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !2703
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !2703
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2705
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2706
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !2707
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !2707
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !2708
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !2708
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2709
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !2710
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !2711
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !2712
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !2713
  br label %return, !dbg !2713

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2714
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !2716
  %10 = load i32, i32* %phi_i, align 8, !dbg !2716
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2717
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !2718
  %12 = load i32, i32* %num_phi, align 4, !dbg !2718
  %cmp = icmp slt i32 %10, %12, !dbg !2719
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !2720

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2721
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !2721
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !2721
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2721
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !2721
  %16 = load i32, i32* %phi_i5, align 8, !dbg !2721
  %inc = add nsw i32 %16, 1, !dbg !2721
  store i32 %inc, i32* %phi_i5, align 8, !dbg !2721
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !2721
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !2723
  br label %return, !dbg !2723

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !2724
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !2725
  store i8 1, i8* %done, align 8, !dbg !2726
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !2727
  br label %return, !dbg !2727

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !2728
  ret %struct.ssa_use_operand_d* %18, !dbg !2728
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !2729 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !2733, metadata !DIExpression()), !dbg !2734
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !2735
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !2736
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2736
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !2737
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !2737
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !2738
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !2739
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !2740
  ret void, !dbg !2741
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2742 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2745, metadata !DIExpression()), !dbg !2746
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2747, metadata !DIExpression()), !dbg !2748
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2749
  store i32 0, i32* %index, align 8, !dbg !2750
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2751
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2752
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2753
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2754
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2754
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2754
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2755 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2759, metadata !DIExpression()), !dbg !2760
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2761, metadata !DIExpression()), !dbg !2762
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2763
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2763
  %5 = load i32, i32* %4, align 8, !dbg !2763
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2763
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2763
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2763
  %tobool = icmp ne i8 %call, 0, !dbg !2763
  br i1 %tobool, label %if.else, label %if.then, !dbg !2765

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2766
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2766
  %10 = load i32, i32* %9, align 8, !dbg !2766
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2766
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2766
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2766
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2768
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2769
  store i8 1, i8* %retval, align 1, !dbg !2770
  br label %return, !dbg !2770

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2771
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2773
  store i8 0, i8* %retval, align 1, !dbg !2774
  br label %return, !dbg !2774

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2775
  ret i8 %15, !dbg !2775
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #3

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !2776 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !2779, metadata !DIExpression()), !dbg !2780
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !2781, metadata !DIExpression()), !dbg !2782
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !2783
  %1 = load i32, i32* %i.addr, align 4, !dbg !2784
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !2785
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !2786
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !2787
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2788 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2792, metadata !DIExpression()), !dbg !2793
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2794
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2794
  %1 = load i32, i32* %index, align 8, !dbg !2794
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2794
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2794
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2794
  %5 = load i32, i32* %4, align 8, !dbg !2794
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2794
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2794
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2794
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2794
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2794

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2794
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2794
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2794
  %11 = load i32, i32* %10, align 8, !dbg !2794
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2794
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2794
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2794
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2794
  br label %cond.end, !dbg !2794

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2794

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2794
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2794
  %cmp = icmp ult i32 %1, %call2, !dbg !2794
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2794

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2794
  br label %cond.end5, !dbg !2794

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2794

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2794
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2795
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2796
  %15 = load i32, i32* %index7, align 8, !dbg !2797
  %inc = add i32 %15, 1, !dbg !2797
  store i32 %inc, i32* %index7, align 8, !dbg !2797
  ret void, !dbg !2798
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rename_variables_in_loop(%struct.loop* %loop) #0 !dbg !2799 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2802, metadata !DIExpression()), !dbg !2803
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2804, metadata !DIExpression()), !dbg !2805
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2806, metadata !DIExpression()), !dbg !2807
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2808
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !2809
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !2810
  store i32 0, i32* %i, align 4, !dbg !2811
  br label %for.cond, !dbg !2813

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !2814
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2816
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !2817
  %3 = load i32, i32* %num_nodes, align 4, !dbg !2817
  %cmp = icmp ult i32 %1, %3, !dbg !2818
  br i1 %cmp, label %for.body, label %for.end, !dbg !2819

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2820
  %5 = load i32, i32* %i, align 4, !dbg !2821
  %idxprom = zext i32 %5 to i64, !dbg !2820
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %4, i64 %idxprom, !dbg !2820
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2820
  call void @rename_variables_in_bb(%struct.basic_block_def* %6), !dbg !2822
  br label %for.inc, !dbg !2822

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4, !dbg !2823
  %inc = add i32 %7, 1, !dbg !2823
  store i32 %inc, i32* %i, align 4, !dbg !2823
  br label %for.cond, !dbg !2824, !llvm.loop !2825

for.end:                                          ; preds = %for.cond
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2827
  %9 = bitcast %struct.basic_block_def** %8 to i8*, !dbg !2827
  call void @free(i8* %9), !dbg !2828
  ret void, !dbg !2829
}

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #3

declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @slpeel_make_loop_iterate_ntimes(%struct.loop* %loop, %union.tree_node* %niters) #0 !dbg !2830 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %niters.addr = alloca %union.tree_node*, align 8
  %indx_before_incr = alloca %union.tree_node*, align 8
  %indx_after_incr = alloca %union.tree_node*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %orig_cond = alloca %union.gimple_statement_d*, align 8
  %exit_edge = alloca %struct.edge_def*, align 8
  %loop_cond_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %incr_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %insert_after = alloca i8, align 1
  %init = alloca %union.tree_node*, align 8
  %step = alloca %union.tree_node*, align 8
  %loop_loc = alloca i32, align 4
  %code = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp16 = alloca %struct.expanded_location, align 8
  %tmp17 = alloca %struct.expanded_location, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2833, metadata !DIExpression()), !dbg !2834
  store %union.tree_node* %niters, %union.tree_node** %niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters.addr, metadata !2835, metadata !DIExpression()), !dbg !2836
  call void @llvm.dbg.declare(metadata %union.tree_node** %indx_before_incr, metadata !2837, metadata !DIExpression()), !dbg !2838
  call void @llvm.dbg.declare(metadata %union.tree_node** %indx_after_incr, metadata !2839, metadata !DIExpression()), !dbg !2840
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !2841, metadata !DIExpression()), !dbg !2842
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_cond, metadata !2843, metadata !DIExpression()), !dbg !2844
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_edge, metadata !2845, metadata !DIExpression()), !dbg !2846
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2847
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !2848
  store %struct.edge_def* %call, %struct.edge_def** %exit_edge, align 8, !dbg !2846
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %loop_cond_gsi, metadata !2849, metadata !DIExpression()), !dbg !2850
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %incr_gsi, metadata !2851, metadata !DIExpression()), !dbg !2852
  call void @llvm.dbg.declare(metadata i8* %insert_after, metadata !2853, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.declare(metadata %union.tree_node** %init, metadata !2855, metadata !DIExpression()), !dbg !2856
  %1 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !2857
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !2857
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !2857
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2857
  %call1 = call %union.tree_node* @build_int_cst(%union.tree_node* %2, i64 0), !dbg !2858
  store %union.tree_node* %call1, %union.tree_node** %init, align 8, !dbg !2856
  call void @llvm.dbg.declare(metadata %union.tree_node** %step, metadata !2859, metadata !DIExpression()), !dbg !2860
  %3 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !2861
  %common2 = bitcast %union.tree_node* %3 to %struct.tree_common*, !dbg !2861
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common2, i32 0, i32 2, !dbg !2861
  %4 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !2861
  %call4 = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 1), !dbg !2862
  store %union.tree_node* %call4, %union.tree_node** %step, align 8, !dbg !2860
  call void @llvm.dbg.declare(metadata i32* %loop_loc, metadata !2863, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.declare(metadata i32* %code, metadata !2865, metadata !DIExpression()), !dbg !2866
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2867
  %call5 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %5), !dbg !2868
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %orig_cond, align 8, !dbg !2869
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_cond, align 8, !dbg !2870
  %tobool = icmp ne %union.gimple_statement_d* %6, null, !dbg !2870
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2870

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2870
  br label %cond.end, !dbg !2870

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2870

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2870
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_cond, align 8, !dbg !2871
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %tmp, %union.gimple_statement_d* %7), !dbg !2872
  %8 = bitcast %struct.gimple_stmt_iterator* %loop_cond_gsi to i8*, !dbg !2872
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2872
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !2872
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2873
  call void @standard_iv_increment_position(%struct.loop* %10, %struct.gimple_stmt_iterator* %incr_gsi, i8* %insert_after), !dbg !2874
  %11 = load %union.tree_node*, %union.tree_node** %init, align 8, !dbg !2875
  %12 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2876
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2877
  %14 = load i8, i8* %insert_after, align 1, !dbg !2878
  call void @create_iv(%union.tree_node* %11, %union.tree_node* %12, %union.tree_node* null, %struct.loop* %13, %struct.gimple_stmt_iterator* %incr_gsi, i8 zeroext %14, %union.tree_node** %indx_before_incr, %union.tree_node** %indx_after_incr), !dbg !2879
  %15 = load %union.tree_node*, %union.tree_node** %indx_after_incr, align 8, !dbg !2880
  %call6 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %loop_cond_gsi, %union.tree_node* %15, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !2881
  store %union.tree_node* %call6, %union.tree_node** %indx_after_incr, align 8, !dbg !2882
  %16 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !2883
  %call7 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %loop_cond_gsi, %union.tree_node* %16, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1), !dbg !2884
  store %union.tree_node* %call7, %union.tree_node** %niters.addr, align 8, !dbg !2885
  %17 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !2886
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 7, !dbg !2887
  %18 = load i32, i32* %flags, align 8, !dbg !2887
  %and = and i32 %18, 1024, !dbg !2888
  %tobool8 = icmp ne i32 %and, 0, !dbg !2889
  %19 = zext i1 %tobool8 to i64, !dbg !2889
  %cond9 = select i1 %tobool8, i32 100, i32 97, !dbg !2889
  store i32 %cond9, i32* %code, align 4, !dbg !2890
  %20 = load i32, i32* %code, align 4, !dbg !2891
  %21 = load %union.tree_node*, %union.tree_node** %indx_after_incr, align 8, !dbg !2892
  %22 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !2893
  %call10 = call %union.gimple_statement_d* @gimple_build_cond(i32 %20, %union.tree_node* %21, %union.tree_node* %22, %union.tree_node* null, %union.tree_node* null), !dbg !2894
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !2895
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !2896
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* %loop_cond_gsi, %union.gimple_statement_d* %23, i32 1), !dbg !2897
  call void @gsi_remove(%struct.gimple_stmt_iterator* %loop_cond_gsi, i8 zeroext 1), !dbg !2898
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2899
  %call11 = call i32 @find_loop_location(%struct.loop* %24), !dbg !2900
  store i32 %call11, i32* %loop_loc, align 4, !dbg !2901
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2902
  %tobool12 = icmp ne %struct._IO_FILE* %25, null, !dbg !2902
  br i1 %tobool12, label %land.lhs.true, label %if.end19, !dbg !2904

land.lhs.true:                                    ; preds = %cond.end
  %26 = load i32, i32* @dump_flags, align 4, !dbg !2905
  %and13 = and i32 %26, 8, !dbg !2906
  %tobool14 = icmp ne i32 %and13, 0, !dbg !2906
  br i1 %tobool14, label %if.then, label %if.end19, !dbg !2907

if.then:                                          ; preds = %land.lhs.true
  %27 = load i32, i32* %loop_loc, align 4, !dbg !2908
  %cmp = icmp ne i32 %27, 0, !dbg !2911
  br i1 %cmp, label %if.then15, label %if.end, !dbg !2912

if.then15:                                        ; preds = %if.then
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2913
  %29 = load i32, i32* %loop_loc, align 4, !dbg !2914
  call void @expand_location(%struct.expanded_location* sret %tmp16, i32 %29), !dbg !2914
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp16, i32 0, i32 0, !dbg !2914
  %30 = load i8*, i8** %file, align 8, !dbg !2914
  %31 = load i32, i32* %loop_loc, align 4, !dbg !2915
  call void @expand_location(%struct.expanded_location* sret %tmp17, i32 %31), !dbg !2915
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp17, i32 0, i32 1, !dbg !2915
  %32 = load i32, i32* %line, align 8, !dbg !2915
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8* %30, i32 %32), !dbg !2916
  br label %if.end, !dbg !2916

if.end:                                           ; preds = %if.then15, %if.then
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !2917
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !2918
  call void @print_gimple_stmt(%struct._IO_FILE* %33, %union.gimple_statement_d* %34, i32 0, i32 2), !dbg !2919
  br label %if.end19, !dbg !2920

if.end19:                                         ; preds = %if.end, %land.lhs.true, %cond.end
  %35 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !2921
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2922
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 11, !dbg !2923
  store %union.tree_node* %35, %union.tree_node** %nb_iterations, align 8, !dbg !2924
  ret void, !dbg !2925
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #3

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #3

declare dso_local %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop*) #3

declare dso_local void @fancy_abort(i8*, i32, i8*) #3

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #3

declare dso_local void @standard_iv_increment_position(%struct.loop*, %struct.gimple_stmt_iterator*, i8*) #3

declare dso_local void @create_iv(%union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.loop*, %struct.gimple_stmt_iterator*, i8 zeroext, %union.tree_node**, %union.tree_node**) #3

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #3

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #3

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @find_loop_location(%struct.loop* %loop) #0 !dbg !2926 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2929, metadata !DIExpression()), !dbg !2930
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !2931, metadata !DIExpression()), !dbg !2932
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !2932
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2933, metadata !DIExpression()), !dbg !2934
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !2935, metadata !DIExpression()), !dbg !2936
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2937
  %tobool = icmp ne %struct.loop* %0, null, !dbg !2937
  br i1 %tobool, label %if.end, label %if.then, !dbg !2939

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !2940
  br label %return, !dbg !2940

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2941
  %call = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %1), !dbg !2942
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !2943
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2944
  %tobool1 = icmp ne %union.gimple_statement_d* %2, null, !dbg !2944
  br i1 %tobool1, label %land.lhs.true, label %if.end5, !dbg !2946

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2947
  %call2 = call i32 @gimple_location(%union.gimple_statement_d* %3), !dbg !2948
  %cmp = icmp ne i32 %call2, 0, !dbg !2949
  br i1 %cmp, label %if.then3, label %if.end5, !dbg !2950

if.then3:                                         ; preds = %land.lhs.true
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2951
  %call4 = call i32 @gimple_location(%union.gimple_statement_d* %4), !dbg !2952
  store i32 %call4, i32* %retval, align 4, !dbg !2953
  br label %return, !dbg !2953

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2954
  %header = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 2, !dbg !2956
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2956
  %tobool6 = icmp ne %struct.basic_block_def* %6, null, !dbg !2954
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !2957

if.then7:                                         ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !2958
  br label %return, !dbg !2958

if.end8:                                          ; preds = %if.end5
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2959
  %header9 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !2960
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header9, align 8, !dbg !2960
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb, align 8, !dbg !2961
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2962
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %9), !dbg !2964
  %10 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !2964
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !2964
  br label %for.cond, !dbg !2965

for.cond:                                         ; preds = %for.inc, %if.end8
  %call10 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !2966
  %tobool11 = icmp ne i8 %call10, 0, !dbg !2968
  %lnot = xor i1 %tobool11, true, !dbg !2968
  br i1 %lnot, label %for.body, label %for.end, !dbg !2969

for.body:                                         ; preds = %for.cond
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !2970
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !2972
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2973
  %call13 = call i32 @gimple_location(%union.gimple_statement_d* %12), !dbg !2975
  %cmp14 = icmp ne i32 %call13, 0, !dbg !2976
  br i1 %cmp14, label %if.then15, label %if.end17, !dbg !2977

if.then15:                                        ; preds = %for.body
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2978
  %call16 = call i32 @gimple_location(%union.gimple_statement_d* %13), !dbg !2979
  store i32 %call16, i32* %retval, align 4, !dbg !2980
  br label %return, !dbg !2980

if.end17:                                         ; preds = %for.body
  br label %for.inc, !dbg !2981

for.inc:                                          ; preds = %if.end17
  call void @gsi_next(%struct.gimple_stmt_iterator* %si), !dbg !2982
  br label %for.cond, !dbg !2983, !llvm.loop !2984

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !2986
  br label %return, !dbg !2986

return:                                           ; preds = %for.end, %if.then15, %if.then7, %if.then3, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !2987
  ret i32 %14, !dbg !2987
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) #3

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @slpeel_tree_duplicate_loop_to_edge_cfg(%struct.loop* %loop, %struct.edge_def* %e) #0 !dbg !2988 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %new_loop = alloca %struct.loop*, align 8
  %new_bbs = alloca %struct.basic_block_def**, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %at_exit = alloca i8, align 1
  %was_imm_dom = alloca i8, align 1
  %exit_dest = alloca %struct.basic_block_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %phi_arg = alloca %union.tree_node*, align 8
  %exit = alloca %struct.edge_def*, align 8
  %new_exit = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %new_loop_exit_edge = alloca %struct.edge_def*, align 8
  %locus = alloca i32, align 4
  %new_exit_e = alloca %struct.edge_def*, align 8
  %entry_e = alloca %struct.edge_def*, align 8
  %preheader = alloca %struct.basic_block_def*, align 8
  %tmp127 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2991, metadata !DIExpression()), !dbg !2992
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !2993, metadata !DIExpression()), !dbg !2994
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop, metadata !2995, metadata !DIExpression()), !dbg !2996
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %new_bbs, metadata !2997, metadata !DIExpression()), !dbg !2998
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2999, metadata !DIExpression()), !dbg !3000
  call void @llvm.dbg.declare(metadata i8* %at_exit, metadata !3001, metadata !DIExpression()), !dbg !3002
  call void @llvm.dbg.declare(metadata i8* %was_imm_dom, metadata !3003, metadata !DIExpression()), !dbg !3004
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_dest, metadata !3005, metadata !DIExpression()), !dbg !3006
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3007, metadata !DIExpression()), !dbg !3008
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_arg, metadata !3009, metadata !DIExpression()), !dbg !3010
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit, metadata !3011, metadata !DIExpression()), !dbg !3012
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_exit, metadata !3013, metadata !DIExpression()), !dbg !3014
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3015, metadata !DIExpression()), !dbg !3016
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3017
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3018
  %call = call %struct.edge_def* @single_exit(%struct.loop* %1), !dbg !3019
  %cmp = icmp eq %struct.edge_def* %0, %call, !dbg !3020
  %conv = zext i1 %cmp to i32, !dbg !3020
  %conv1 = trunc i32 %conv to i8, !dbg !3021
  store i8 %conv1, i8* %at_exit, align 1, !dbg !3022
  %2 = load i8, i8* %at_exit, align 1, !dbg !3023
  %tobool = icmp ne i8 %2, 0, !dbg !3023
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3025

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3026
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3027
  %call2 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %4), !dbg !3028
  %cmp3 = icmp ne %struct.edge_def* %3, %call2, !dbg !3029
  br i1 %cmp3, label %if.then, label %if.end, !dbg !3030

if.then:                                          ; preds = %land.lhs.true
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3031
  br label %return, !dbg !3031

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3032
  %call5 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %5), !dbg !3033
  store %struct.basic_block_def** %call5, %struct.basic_block_def*** %bbs, align 8, !dbg !3034
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3035
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3037
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 6, !dbg !3038
  %8 = load i32, i32* %num_nodes, align 4, !dbg !3038
  %call6 = call zeroext i8 @can_copy_bbs_p(%struct.basic_block_def** %6, i32 %8), !dbg !3039
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3039
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !3040

if.then8:                                         ; preds = %if.end
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3041
  %10 = bitcast %struct.basic_block_def** %9 to i8*, !dbg !3041
  call void @free(i8* %10), !dbg !3043
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3044
  br label %return, !dbg !3044

if.end9:                                          ; preds = %if.end
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3045
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3046
  %call10 = call %struct.loop* @loop_outer(%struct.loop* %12), !dbg !3047
  %call11 = call %struct.loop* @duplicate_loop(%struct.loop* %11, %struct.loop* %call10), !dbg !3048
  store %struct.loop* %call11, %struct.loop** %new_loop, align 8, !dbg !3049
  %13 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3050
  %tobool12 = icmp ne %struct.loop* %13, null, !dbg !3050
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !3052

if.then13:                                        ; preds = %if.end9
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3053
  %15 = bitcast %struct.basic_block_def** %14 to i8*, !dbg !3053
  call void @free(i8* %15), !dbg !3055
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3056
  br label %return, !dbg !3056

if.end14:                                         ; preds = %if.end9
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3057
  %call15 = call %struct.edge_def* @single_exit(%struct.loop* %16), !dbg !3058
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call15, i32 0, i32 1, !dbg !3059
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3059
  store %struct.basic_block_def* %17, %struct.basic_block_def** %exit_dest, align 8, !dbg !3060
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_dest, align 8, !dbg !3061
  %call16 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %18), !dbg !3062
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3063
  %header = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 2, !dbg !3064
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3064
  %cmp17 = icmp eq %struct.basic_block_def* %call16, %20, !dbg !3065
  %21 = zext i1 %cmp17 to i64, !dbg !3062
  %cond = select i1 %cmp17, i32 1, i32 0, !dbg !3062
  %conv19 = trunc i32 %cond to i8, !dbg !3066
  store i8 %conv19, i8* %was_imm_dom, align 1, !dbg !3067
  %22 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3068
  %num_nodes20 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 6, !dbg !3068
  %23 = load i32, i32* %num_nodes20, align 4, !dbg !3068
  %conv21 = zext i32 %23 to i64, !dbg !3068
  %mul = mul i64 8, %conv21, !dbg !3068
  %call22 = call i8* @xmalloc(i64 %mul), !dbg !3068
  %24 = bitcast i8* %call22 to %struct.basic_block_def**, !dbg !3068
  store %struct.basic_block_def** %24, %struct.basic_block_def*** %new_bbs, align 8, !dbg !3069
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3070
  %call23 = call %struct.edge_def* @single_exit(%struct.loop* %25), !dbg !3071
  store %struct.edge_def* %call23, %struct.edge_def** %exit, align 8, !dbg !3072
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3073
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3074
  %num_nodes24 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 6, !dbg !3075
  %28 = load i32, i32* %num_nodes24, align 4, !dbg !3075
  %29 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !3076
  %30 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3077
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 0, !dbg !3078
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3078
  call void @copy_bbs(%struct.basic_block_def** %26, i32 %28, %struct.basic_block_def** %29, %struct.edge_def** %exit, i32 1, %struct.edge_def** %new_exit, %struct.loop* null, %struct.basic_block_def* %31), !dbg !3079
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_dest, align 8, !dbg !3080
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %32), !dbg !3082
  %33 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3082
  %34 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3082
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 24, i1 false), !dbg !3082
  br label %for.cond, !dbg !3083

for.cond:                                         ; preds = %for.inc, %if.end14
  %call25 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3084
  %tobool26 = icmp ne i8 %call25, 0, !dbg !3086
  %lnot = xor i1 %tobool26, true, !dbg !3086
  br i1 %lnot, label %for.body, label %for.end, !dbg !3087

for.body:                                         ; preds = %for.cond
  %call27 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3088
  store %union.gimple_statement_d* %call27, %union.gimple_statement_d** %phi, align 8, !dbg !3090
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3091
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3091
  %call28 = call %struct.edge_def* @single_exit(%struct.loop* %36), !dbg !3091
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call28, i32 0, i32 6, !dbg !3091
  %37 = load i32, i32* %dest_idx, align 4, !dbg !3091
  %call29 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %35, i32 %37), !dbg !3091
  %call30 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call29), !dbg !3091
  store %union.tree_node* %call30, %union.tree_node** %phi_arg, align 8, !dbg !3092
  %38 = load %union.tree_node*, %union.tree_node** %phi_arg, align 8, !dbg !3093
  %tobool31 = icmp ne %union.tree_node* %38, null, !dbg !3093
  br i1 %tobool31, label %if.then32, label %if.end68, !dbg !3095

if.then32:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_loop_exit_edge, metadata !3096, metadata !DIExpression()), !dbg !3098
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !3099, metadata !DIExpression()), !dbg !3100
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3101
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3102
  %call33 = call %struct.edge_def* @single_exit(%struct.loop* %40), !dbg !3103
  %call34 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %39, %struct.edge_def* %call33), !dbg !3104
  store i32 %call34, i32* %locus, align 4, !dbg !3105
  %41 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3106
  %header35 = getelementptr inbounds %struct.loop, %struct.loop* %41, i32 0, i32 2, !dbg !3106
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %header35, align 8, !dbg !3106
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 1, !dbg !3106
  %43 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3106
  %tobool36 = icmp ne %struct.VEC_edge_gc* %43, null, !dbg !3106
  br i1 %tobool36, label %cond.true, label %cond.false, !dbg !3106

cond.true:                                        ; preds = %if.then32
  %44 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3106
  %header37 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 2, !dbg !3106
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %header37, align 8, !dbg !3106
  %succs38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 1, !dbg !3106
  %46 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs38, align 8, !dbg !3106
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %46, i32 0, i32 0, !dbg !3106
  br label %cond.end, !dbg !3106

cond.false:                                       ; preds = %if.then32
  br label %cond.end, !dbg !3106

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond39 = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3106
  %call40 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond39, i32 0), !dbg !3106
  %dest41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call40, i32 0, i32 1, !dbg !3108
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %dest41, align 8, !dbg !3108
  %48 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3109
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 3, !dbg !3110
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3110
  %cmp42 = icmp eq %struct.basic_block_def* %47, %49, !dbg !3111
  br i1 %cmp42, label %if.then44, label %if.else, !dbg !3112

if.then44:                                        ; preds = %cond.end
  %50 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3113
  %header45 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 2, !dbg !3113
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %header45, align 8, !dbg !3113
  %succs46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !3113
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs46, align 8, !dbg !3113
  %tobool47 = icmp ne %struct.VEC_edge_gc* %52, null, !dbg !3113
  br i1 %tobool47, label %cond.true48, label %cond.false52, !dbg !3113

cond.true48:                                      ; preds = %if.then44
  %53 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3113
  %header49 = getelementptr inbounds %struct.loop, %struct.loop* %53, i32 0, i32 2, !dbg !3113
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %header49, align 8, !dbg !3113
  %succs50 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 1, !dbg !3113
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs50, align 8, !dbg !3113
  %base51 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !3113
  br label %cond.end53, !dbg !3113

cond.false52:                                     ; preds = %if.then44
  br label %cond.end53, !dbg !3113

cond.end53:                                       ; preds = %cond.false52, %cond.true48
  %cond54 = phi %struct.VEC_edge_base* [ %base51, %cond.true48 ], [ null, %cond.false52 ], !dbg !3113
  %call55 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond54, i32 1), !dbg !3113
  store %struct.edge_def* %call55, %struct.edge_def** %new_loop_exit_edge, align 8, !dbg !3114
  br label %if.end67, !dbg !3115

if.else:                                          ; preds = %cond.end
  %56 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3116
  %header56 = getelementptr inbounds %struct.loop, %struct.loop* %56, i32 0, i32 2, !dbg !3116
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %header56, align 8, !dbg !3116
  %succs57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 1, !dbg !3116
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs57, align 8, !dbg !3116
  %tobool58 = icmp ne %struct.VEC_edge_gc* %58, null, !dbg !3116
  br i1 %tobool58, label %cond.true59, label %cond.false63, !dbg !3116

cond.true59:                                      ; preds = %if.else
  %59 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3116
  %header60 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 2, !dbg !3116
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %header60, align 8, !dbg !3116
  %succs61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !3116
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs61, align 8, !dbg !3116
  %base62 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !3116
  br label %cond.end64, !dbg !3116

cond.false63:                                     ; preds = %if.else
  br label %cond.end64, !dbg !3116

cond.end64:                                       ; preds = %cond.false63, %cond.true59
  %cond65 = phi %struct.VEC_edge_base* [ %base62, %cond.true59 ], [ null, %cond.false63 ], !dbg !3116
  %call66 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond65, i32 0), !dbg !3116
  store %struct.edge_def* %call66, %struct.edge_def** %new_loop_exit_edge, align 8, !dbg !3117
  br label %if.end67

if.end67:                                         ; preds = %cond.end64, %cond.end53
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3118
  %63 = load %union.tree_node*, %union.tree_node** %phi_arg, align 8, !dbg !3119
  %64 = load %struct.edge_def*, %struct.edge_def** %new_loop_exit_edge, align 8, !dbg !3120
  %65 = load i32, i32* %locus, align 4, !dbg !3121
  call void @add_phi_arg(%union.gimple_statement_d* %62, %union.tree_node* %63, %struct.edge_def* %64, i32 %65), !dbg !3122
  br label %if.end68, !dbg !3123

if.end68:                                         ; preds = %if.end67, %for.body
  br label %for.inc, !dbg !3124

for.inc:                                          ; preds = %if.end68
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3125
  br label %for.cond, !dbg !3126, !llvm.loop !3127

for.end:                                          ; preds = %for.cond
  %66 = load i8, i8* %at_exit, align 1, !dbg !3129
  %tobool69 = icmp ne i8 %66, 0, !dbg !3129
  br i1 %tobool69, label %if.then70, label %if.else79, !dbg !3131

if.then70:                                        ; preds = %for.end
  %67 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3132
  %68 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3134
  %header71 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 2, !dbg !3135
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %header71, align 8, !dbg !3135
  %call72 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %67, %struct.basic_block_def* %69), !dbg !3136
  %70 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3137
  %insns = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 2, !dbg !3137
  %g = bitcast %union.edge_def_insns* %insns to %struct.gimple_seq_d**, !dbg !3137
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g, align 8, !dbg !3138
  %71 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3139
  %header73 = getelementptr inbounds %struct.loop, %struct.loop* %71, i32 0, i32 2, !dbg !3140
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %header73, align 8, !dbg !3140
  %73 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3141
  %src74 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !3142
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src74, align 8, !dbg !3142
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %72, %struct.basic_block_def* %74), !dbg !3143
  %75 = load i8, i8* %was_imm_dom, align 1, !dbg !3144
  %tobool75 = icmp ne i8 %75, 0, !dbg !3144
  br i1 %tobool75, label %if.then76, label %if.end78, !dbg !3146

if.then76:                                        ; preds = %if.then70
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_dest, align 8, !dbg !3147
  %77 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3148
  %header77 = getelementptr inbounds %struct.loop, %struct.loop* %77, i32 0, i32 2, !dbg !3149
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %header77, align 8, !dbg !3149
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %76, %struct.basic_block_def* %78), !dbg !3150
  br label %if.end78, !dbg !3150

if.end78:                                         ; preds = %if.then76, %if.then70
  br label %if.end149, !dbg !3151

if.else79:                                        ; preds = %for.end
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_exit_e, metadata !3152, metadata !DIExpression()), !dbg !3154
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_e, metadata !3155, metadata !DIExpression()), !dbg !3156
  %79 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3157
  %call80 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %79), !dbg !3158
  store %struct.edge_def* %call80, %struct.edge_def** %entry_e, align 8, !dbg !3156
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheader, metadata !3159, metadata !DIExpression()), !dbg !3160
  %80 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3161
  %src81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 0, !dbg !3162
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %src81, align 8, !dbg !3162
  store %struct.basic_block_def* %81, %struct.basic_block_def** %preheader, align 8, !dbg !3160
  %82 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3163
  %83 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3165
  %header82 = getelementptr inbounds %struct.loop, %struct.loop* %83, i32 0, i32 2, !dbg !3165
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %header82, align 8, !dbg !3165
  %succs83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 1, !dbg !3165
  %85 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs83, align 8, !dbg !3165
  %tobool84 = icmp ne %struct.VEC_edge_gc* %85, null, !dbg !3165
  br i1 %tobool84, label %cond.true85, label %cond.false89, !dbg !3165

cond.true85:                                      ; preds = %if.else79
  %86 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3165
  %header86 = getelementptr inbounds %struct.loop, %struct.loop* %86, i32 0, i32 2, !dbg !3165
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %header86, align 8, !dbg !3165
  %succs87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 1, !dbg !3165
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs87, align 8, !dbg !3165
  %base88 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %88, i32 0, i32 0, !dbg !3165
  br label %cond.end90, !dbg !3165

cond.false89:                                     ; preds = %if.else79
  br label %cond.end90, !dbg !3165

cond.end90:                                       ; preds = %cond.false89, %cond.true85
  %cond91 = phi %struct.VEC_edge_base* [ %base88, %cond.true85 ], [ null, %cond.false89 ], !dbg !3165
  %call92 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond91, i32 0), !dbg !3165
  %dest93 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call92, i32 0, i32 1, !dbg !3166
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %dest93, align 8, !dbg !3166
  %call94 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %82, %struct.basic_block_def* %89), !dbg !3167
  %tobool95 = icmp ne i8 %call94, 0, !dbg !3167
  br i1 %tobool95, label %if.else108, label %if.then96, !dbg !3168

if.then96:                                        ; preds = %cond.end90
  %90 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3169
  %header97 = getelementptr inbounds %struct.loop, %struct.loop* %90, i32 0, i32 2, !dbg !3169
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %header97, align 8, !dbg !3169
  %succs98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 1, !dbg !3169
  %92 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs98, align 8, !dbg !3169
  %tobool99 = icmp ne %struct.VEC_edge_gc* %92, null, !dbg !3169
  br i1 %tobool99, label %cond.true100, label %cond.false104, !dbg !3169

cond.true100:                                     ; preds = %if.then96
  %93 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3169
  %header101 = getelementptr inbounds %struct.loop, %struct.loop* %93, i32 0, i32 2, !dbg !3169
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %header101, align 8, !dbg !3169
  %succs102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 1, !dbg !3169
  %95 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs102, align 8, !dbg !3169
  %base103 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %95, i32 0, i32 0, !dbg !3169
  br label %cond.end105, !dbg !3169

cond.false104:                                    ; preds = %if.then96
  br label %cond.end105, !dbg !3169

cond.end105:                                      ; preds = %cond.false104, %cond.true100
  %cond106 = phi %struct.VEC_edge_base* [ %base103, %cond.true100 ], [ null, %cond.false104 ], !dbg !3169
  %call107 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond106, i32 0), !dbg !3169
  store %struct.edge_def* %call107, %struct.edge_def** %new_exit_e, align 8, !dbg !3170
  br label %if.end120, !dbg !3171

if.else108:                                       ; preds = %cond.end90
  %96 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3172
  %header109 = getelementptr inbounds %struct.loop, %struct.loop* %96, i32 0, i32 2, !dbg !3172
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %header109, align 8, !dbg !3172
  %succs110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 1, !dbg !3172
  %98 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs110, align 8, !dbg !3172
  %tobool111 = icmp ne %struct.VEC_edge_gc* %98, null, !dbg !3172
  br i1 %tobool111, label %cond.true112, label %cond.false116, !dbg !3172

cond.true112:                                     ; preds = %if.else108
  %99 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3172
  %header113 = getelementptr inbounds %struct.loop, %struct.loop* %99, i32 0, i32 2, !dbg !3172
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %header113, align 8, !dbg !3172
  %succs114 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 1, !dbg !3172
  %101 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs114, align 8, !dbg !3172
  %base115 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %101, i32 0, i32 0, !dbg !3172
  br label %cond.end117, !dbg !3172

cond.false116:                                    ; preds = %if.else108
  br label %cond.end117, !dbg !3172

cond.end117:                                      ; preds = %cond.false116, %cond.true112
  %cond118 = phi %struct.VEC_edge_base* [ %base115, %cond.true112 ], [ null, %cond.false116 ], !dbg !3172
  %call119 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond118, i32 1), !dbg !3172
  store %struct.edge_def* %call119, %struct.edge_def** %new_exit_e, align 8, !dbg !3173
  br label %if.end120

if.end120:                                        ; preds = %cond.end117, %cond.end105
  %102 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !3174
  %103 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3175
  %header121 = getelementptr inbounds %struct.loop, %struct.loop* %103, i32 0, i32 2, !dbg !3176
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %header121, align 8, !dbg !3176
  %call122 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %102, %struct.basic_block_def* %104), !dbg !3177
  %105 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !3178
  %insns123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %105, i32 0, i32 2, !dbg !3178
  %g124 = bitcast %union.edge_def_insns* %insns123 to %struct.gimple_seq_d**, !dbg !3178
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g124, align 8, !dbg !3179
  %106 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3180
  %header125 = getelementptr inbounds %struct.loop, %struct.loop* %106, i32 0, i32 2, !dbg !3181
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %header125, align 8, !dbg !3181
  %108 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !3182
  %src126 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %108, i32 0, i32 0, !dbg !3183
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %src126, align 8, !dbg !3183
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %107, %struct.basic_block_def* %109), !dbg !3184
  %110 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3185
  %header128 = getelementptr inbounds %struct.loop, %struct.loop* %110, i32 0, i32 2, !dbg !3187
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %header128, align 8, !dbg !3187
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp127, %struct.basic_block_def* %111), !dbg !3188
  %112 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3188
  %113 = bitcast %struct.gimple_stmt_iterator* %tmp127 to i8*, !dbg !3188
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 24, i1 false), !dbg !3188
  br label %for.cond129, !dbg !3189

for.cond129:                                      ; preds = %for.inc142, %if.end120
  %call130 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3190
  %tobool131 = icmp ne i8 %call130, 0, !dbg !3192
  %lnot132 = xor i1 %tobool131, true, !dbg !3192
  br i1 %lnot132, label %for.body133, label %for.end143, !dbg !3193

for.body133:                                      ; preds = %for.cond129
  %call134 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3194
  store %union.gimple_statement_d* %call134, %union.gimple_statement_d** %phi, align 8, !dbg !3196
  %114 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3197
  %115 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3197
  %dest_idx135 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %115, i32 0, i32 6, !dbg !3197
  %116 = load i32, i32* %dest_idx135, align 4, !dbg !3197
  %call136 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %114, i32 %116), !dbg !3197
  %call137 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call136), !dbg !3197
  store %union.tree_node* %call137, %union.tree_node** %phi_arg, align 8, !dbg !3198
  %117 = load %union.tree_node*, %union.tree_node** %phi_arg, align 8, !dbg !3199
  %tobool138 = icmp ne %union.tree_node* %117, null, !dbg !3199
  br i1 %tobool138, label %if.then139, label %if.end141, !dbg !3201

if.then139:                                       ; preds = %for.body133
  %118 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3202
  %119 = load %union.tree_node*, %union.tree_node** %phi_arg, align 8, !dbg !3203
  %120 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !3204
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3205
  %122 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3206
  %call140 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %121, %struct.edge_def* %122), !dbg !3207
  call void @add_phi_arg(%union.gimple_statement_d* %118, %union.tree_node* %119, %struct.edge_def* %120, i32 %call140), !dbg !3208
  br label %if.end141, !dbg !3208

if.end141:                                        ; preds = %if.then139, %for.body133
  br label %for.inc142, !dbg !3209

for.inc142:                                       ; preds = %if.end141
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3210
  br label %for.cond129, !dbg !3211, !llvm.loop !3212

for.end143:                                       ; preds = %for.cond129
  %123 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3214
  %124 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3215
  %header144 = getelementptr inbounds %struct.loop, %struct.loop* %124, i32 0, i32 2, !dbg !3216
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %header144, align 8, !dbg !3216
  %call145 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %123, %struct.basic_block_def* %125), !dbg !3217
  %126 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3218
  %insns146 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %126, i32 0, i32 2, !dbg !3218
  %g147 = bitcast %union.edge_def_insns* %insns146 to %struct.gimple_seq_d**, !dbg !3218
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %g147, align 8, !dbg !3219
  %127 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3220
  %header148 = getelementptr inbounds %struct.loop, %struct.loop* %127, i32 0, i32 2, !dbg !3221
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %header148, align 8, !dbg !3221
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3222
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %128, %struct.basic_block_def* %129), !dbg !3223
  br label %if.end149

if.end149:                                        ; preds = %for.end143, %if.end78
  %130 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !3224
  %131 = bitcast %struct.basic_block_def** %130 to i8*, !dbg !3224
  call void @free(i8* %131), !dbg !3225
  %132 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3226
  %133 = bitcast %struct.basic_block_def** %132 to i8*, !dbg !3226
  call void @free(i8* %133), !dbg !3227
  %134 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3228
  store %struct.loop* %134, %struct.loop** %retval, align 8, !dbg !3229
  br label %return, !dbg !3229

return:                                           ; preds = %if.end149, %if.then13, %if.then8, %if.then
  %135 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3230
  ret %struct.loop* %135, !dbg !3230
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #3

declare dso_local zeroext i8 @can_copy_bbs_p(%struct.basic_block_def**, i32) #3

declare dso_local %struct.loop* @duplicate_loop(%struct.loop*, %struct.loop*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !3231 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3236, metadata !DIExpression()), !dbg !3237
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3238, metadata !DIExpression()), !dbg !3239
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3240
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !3240
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !3240
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !3240
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3240

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3240
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !3240
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !3240
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !3240
  br label %cond.end, !dbg !3240

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3240

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3240
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !3240
  store i32 %call, i32* %n, align 4, !dbg !3239
  %4 = load i32, i32* %n, align 4, !dbg !3241
  %cmp = icmp eq i32 %4, 0, !dbg !3243
  br i1 %cmp, label %if.then, label %if.end, !dbg !3244

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3245
  br label %return, !dbg !3245

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3246
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !3246
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !3246
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !3246
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !3246

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3246
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !3246
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !3246
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !3246
  br label %cond.end8, !dbg !3246

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !3246

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !3246
  %9 = load i32, i32* %n, align 4, !dbg !3246
  %sub = sub i32 %9, 1, !dbg !3246
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !3246
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !3247
  br label %return, !dbg !3247

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !3248
  ret %struct.loop* %10, !dbg !3248
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #3

declare dso_local i8* @xmalloc(i64) #3

declare dso_local void @copy_bbs(%struct.basic_block_def**, i32, %struct.basic_block_def**, %struct.edge_def**, i32, %struct.edge_def**, %struct.loop*, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !3249 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !3252, metadata !DIExpression()), !dbg !3253
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !3254
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !3255
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !3255
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3256
  ret %union.tree_node* %2, !dbg !3257
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) #0 !dbg !3258 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3261, metadata !DIExpression()), !dbg !3262
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3263, metadata !DIExpression()), !dbg !3264
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3265
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3266
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !3267
  %2 = load i32, i32* %dest_idx, align 4, !dbg !3267
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %2), !dbg !3268
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 2, !dbg !3269
  %3 = load i32, i32* %locus, align 8, !dbg !3269
  ret i32 %3, !dbg !3270
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !3271 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !3276, metadata !DIExpression()), !dbg !3277
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !3278, metadata !DIExpression()), !dbg !3277
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3277
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !3277
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3277

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !3277
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3277
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !3277
  %3 = load i32, i32* %num, align 8, !dbg !3277
  %cmp = icmp ult i32 %1, %3, !dbg !3277
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !3279
  %land.ext = zext i1 %4 to i32, !dbg !3277
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !3277
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !3277
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !3277
  %idxprom = zext i32 %6 to i64, !dbg !3277
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !3277
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !3277
  ret %struct.edge_def* %7, !dbg !3277
}

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) #3

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #3

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @slpeel_can_duplicate_loop_p(%struct.loop* %loop, %struct.edge_def* %e) #0 !dbg !3280 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %exit_e = alloca %struct.edge_def*, align 8
  %entry_e = alloca %struct.edge_def*, align 8
  %orig_cond = alloca %union.gimple_statement_d*, align 8
  %loop_exit_gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3286, metadata !DIExpression()), !dbg !3287
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3288, metadata !DIExpression()), !dbg !3289
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_e, metadata !3290, metadata !DIExpression()), !dbg !3291
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3292
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !3293
  store %struct.edge_def* %call, %struct.edge_def** %exit_e, align 8, !dbg !3291
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_e, metadata !3294, metadata !DIExpression()), !dbg !3295
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3296
  %call1 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %1), !dbg !3297
  store %struct.edge_def* %call1, %struct.edge_def** %entry_e, align 8, !dbg !3295
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_cond, metadata !3298, metadata !DIExpression()), !dbg !3299
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3300
  %call2 = call %union.gimple_statement_d* @get_loop_exit_condition(%struct.loop* %2), !dbg !3301
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %orig_cond, align 8, !dbg !3299
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %loop_exit_gsi, metadata !3302, metadata !DIExpression()), !dbg !3303
  %3 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3304
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !3305
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3305
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %loop_exit_gsi, %struct.basic_block_def* %4), !dbg !3306
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3307
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !3307
  %call3 = call zeroext i8 @need_ssa_update_p(%struct.function* %add.ptr), !dbg !3309
  %tobool = icmp ne i8 %call3, 0, !dbg !3309
  br i1 %tobool, label %if.then, label %if.end, !dbg !3310

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3311
  br label %return, !dbg !3311

if.end:                                           ; preds = %entry
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3312
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 8, !dbg !3314
  %7 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3314
  %tobool4 = icmp ne %struct.loop* %7, null, !dbg !3312
  br i1 %tobool4, label %if.then22, label %lor.lhs.false, !dbg !3315

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3316
  %call5 = call %struct.loop* @loop_outer(%struct.loop* %8), !dbg !3317
  %tobool6 = icmp ne %struct.loop* %call5, null, !dbg !3317
  br i1 %tobool6, label %lor.lhs.false7, label %if.then22, !dbg !3318

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3319
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 6, !dbg !3320
  %10 = load i32, i32* %num_nodes, align 4, !dbg !3320
  %cmp = icmp ne i32 %10, 2, !dbg !3321
  br i1 %cmp, label %if.then22, label %lor.lhs.false8, !dbg !3322

lor.lhs.false8:                                   ; preds = %lor.lhs.false7
  %11 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3323
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 3, !dbg !3324
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3324
  %call9 = call zeroext i8 @empty_block_p(%struct.basic_block_def* %12), !dbg !3325
  %tobool10 = icmp ne i8 %call9, 0, !dbg !3325
  br i1 %tobool10, label %lor.lhs.false11, label %if.then22, !dbg !3326

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3327
  %call12 = call %struct.edge_def* @single_exit(%struct.loop* %13), !dbg !3328
  %tobool13 = icmp ne %struct.edge_def* %call12, null, !dbg !3328
  br i1 %tobool13, label %lor.lhs.false14, label %if.then22, !dbg !3329

lor.lhs.false14:                                  ; preds = %lor.lhs.false11
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_cond, align 8, !dbg !3330
  %tobool15 = icmp ne %union.gimple_statement_d* %14, null, !dbg !3330
  br i1 %tobool15, label %lor.lhs.false16, label %if.then22, !dbg !3331

lor.lhs.false16:                                  ; preds = %lor.lhs.false14
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_cond, align 8, !dbg !3332
  %call17 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %loop_exit_gsi), !dbg !3333
  %cmp18 = icmp ne %union.gimple_statement_d* %15, %call17, !dbg !3334
  br i1 %cmp18, label %if.then22, label %lor.lhs.false19, !dbg !3335

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3336
  %17 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3337
  %cmp20 = icmp ne %struct.edge_def* %16, %17, !dbg !3338
  br i1 %cmp20, label %land.lhs.true, label %if.end23, !dbg !3339

land.lhs.true:                                    ; preds = %lor.lhs.false19
  %18 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3340
  %19 = load %struct.edge_def*, %struct.edge_def** %entry_e, align 8, !dbg !3341
  %cmp21 = icmp ne %struct.edge_def* %18, %19, !dbg !3342
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !3343

if.then22:                                        ; preds = %land.lhs.true, %lor.lhs.false16, %lor.lhs.false14, %lor.lhs.false11, %lor.lhs.false8, %lor.lhs.false7, %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !3344
  br label %return, !dbg !3344

if.end23:                                         ; preds = %land.lhs.true, %lor.lhs.false19
  store i8 1, i8* %retval, align 1, !dbg !3345
  br label %return, !dbg !3345

return:                                           ; preds = %if.end23, %if.then22, %if.then
  %20 = load i8, i8* %retval, align 1, !dbg !3346
  ret i8 %20, !dbg !3346
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3347 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3348, metadata !DIExpression()), !dbg !3349
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3350, metadata !DIExpression()), !dbg !3351
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3352, metadata !DIExpression()), !dbg !3353
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3354
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3355
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3356
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3357
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !3358
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3359
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3360
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3361
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3362
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3363
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3364
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3365
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3366
  ret void, !dbg !3367
}

declare dso_local zeroext i8 @need_ssa_update_p(%struct.function*) #3

declare dso_local zeroext i8 @empty_block_p(%struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !3368 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3374, metadata !DIExpression()), !dbg !3375
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3376
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3377
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !3378
  %1 = load i32, i32* %location, align 8, !dbg !3378
  ret i32 %1, !dbg !3379
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vect_can_advance_ivs_p(%struct._loop_vec_info* %loop_vinfo) #0 !dbg !3380 {
entry:
  %retval = alloca i8, align 1
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %loop = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %access_fn = alloca %union.tree_node*, align 8
  %evolution_part = alloca %union.tree_node*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !3383, metadata !DIExpression()), !dbg !3384
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3385, metadata !DIExpression()), !dbg !3386
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3387
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !3387
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !3387
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !3386
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3388, metadata !DIExpression()), !dbg !3389
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3390
  %header = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 2, !dbg !3391
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3391
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !3389
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !3392, metadata !DIExpression()), !dbg !3393
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3394, metadata !DIExpression()), !dbg !3395
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3396
  %tobool = icmp ne i8 %call, 0, !dbg !3396
  br i1 %tobool, label %if.then, label %if.end, !dbg !3398

if.then:                                          ; preds = %entry
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3399
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0)), !dbg !3400
  br label %if.end, !dbg !3400

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3401
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %5), !dbg !3403
  %6 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3403
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3403
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 24, i1 false), !dbg !3403
  br label %for.cond, !dbg !3404

for.cond:                                         ; preds = %for.inc, %if.end
  %call3 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3405
  %tobool4 = icmp ne i8 %call3, 0, !dbg !3407
  %lnot = xor i1 %tobool4, true, !dbg !3407
  br i1 %lnot, label %for.body, label %for.end, !dbg !3408

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn, metadata !3409, metadata !DIExpression()), !dbg !3411
  store %union.tree_node* null, %union.tree_node** %access_fn, align 8, !dbg !3411
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_part, metadata !3412, metadata !DIExpression()), !dbg !3413
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3414
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %phi, align 8, !dbg !3415
  %call6 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3416
  %tobool7 = icmp ne i8 %call6, 0, !dbg !3416
  br i1 %tobool7, label %if.then8, label %if.end10, !dbg !3418

if.then8:                                         ; preds = %for.body
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3419
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0)), !dbg !3421
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3422
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3423
  call void @print_gimple_stmt(%struct._IO_FILE* %9, %union.gimple_statement_d* %10, i32 0, i32 2), !dbg !3424
  br label %if.end10, !dbg !3425

if.end10:                                         ; preds = %if.then8, %for.body
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3426
  %call11 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %11), !dbg !3426
  %call12 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call11), !dbg !3426
  %ssa_name = bitcast %union.tree_node* %call12 to %struct.tree_ssa_name*, !dbg !3426
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !3426
  %12 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3426
  %call13 = call zeroext i8 @is_gimple_reg(%union.tree_node* %12), !dbg !3428
  %tobool14 = icmp ne i8 %call13, 0, !dbg !3428
  br i1 %tobool14, label %if.end21, label %if.then15, !dbg !3429

if.then15:                                        ; preds = %if.end10
  %call16 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3430
  %tobool17 = icmp ne i8 %call16, 0, !dbg !3430
  br i1 %tobool17, label %if.then18, label %if.end20, !dbg !3433

if.then18:                                        ; preds = %if.then15
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3434
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)), !dbg !3435
  br label %if.end20, !dbg !3435

if.end20:                                         ; preds = %if.then18, %if.then15
  br label %for.inc, !dbg !3436

if.end21:                                         ; preds = %if.end10
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3437
  %call22 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %14), !dbg !3437
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call22, i32 0, i32 16, !dbg !3437
  %15 = load i32, i32* %def_type, align 8, !dbg !3437
  %cmp = icmp eq i32 %15, 5, !dbg !3439
  br i1 %cmp, label %if.then23, label %if.end29, !dbg !3440

if.then23:                                        ; preds = %if.end21
  %call24 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3441
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3441
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !3444

if.then26:                                        ; preds = %if.then23
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3445
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)), !dbg !3446
  br label %if.end28, !dbg !3446

if.end28:                                         ; preds = %if.then26, %if.then23
  br label %for.inc, !dbg !3447

if.end29:                                         ; preds = %if.end21
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3448
  %18 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3449
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !3450
  %call30 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %19), !dbg !3450
  %call31 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call30), !dbg !3450
  %call32 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %18, %union.tree_node* %call31), !dbg !3451
  %call33 = call %union.tree_node* @instantiate_parameters(%struct.loop* %17, %union.tree_node* %call32), !dbg !3452
  store %union.tree_node* %call33, %union.tree_node** %access_fn, align 8, !dbg !3453
  %20 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3454
  %tobool34 = icmp ne %union.tree_node* %20, null, !dbg !3454
  br i1 %tobool34, label %if.end41, label %if.then35, !dbg !3456

if.then35:                                        ; preds = %if.end29
  %call36 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3457
  %tobool37 = icmp ne i8 %call36, 0, !dbg !3457
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !3460

if.then38:                                        ; preds = %if.then35
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3461
  %call39 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0)), !dbg !3462
  br label %if.end40, !dbg !3462

if.end40:                                         ; preds = %if.then38, %if.then35
  store i8 0, i8* %retval, align 1, !dbg !3463
  br label %return, !dbg !3463

if.end41:                                         ; preds = %if.end29
  %call42 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3464
  %tobool43 = icmp ne i8 %call42, 0, !dbg !3464
  br i1 %tobool43, label %if.then44, label %if.end46, !dbg !3466

if.then44:                                        ; preds = %if.end41
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3467
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0)), !dbg !3469
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3470
  %24 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3471
  call void @print_generic_expr(%struct._IO_FILE* %23, %union.tree_node* %24, i32 2), !dbg !3472
  br label %if.end46, !dbg !3473

if.end46:                                         ; preds = %if.then44, %if.end41
  %25 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !3474
  %26 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3475
  %num = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !3476
  %27 = load i32, i32* %num, align 8, !dbg !3476
  %call47 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %25, i32 %27), !dbg !3477
  store %union.tree_node* %call47, %union.tree_node** %evolution_part, align 8, !dbg !3478
  %28 = load %union.tree_node*, %union.tree_node** %evolution_part, align 8, !dbg !3479
  %cmp48 = icmp eq %union.tree_node* %28, null, !dbg !3481
  br i1 %cmp48, label %if.then49, label %if.end55, !dbg !3482

if.then49:                                        ; preds = %if.end46
  %call50 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3483
  %tobool51 = icmp ne i8 %call50, 0, !dbg !3483
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !3486

if.then52:                                        ; preds = %if.then49
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3487
  %call53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0)), !dbg !3488
  br label %if.end54, !dbg !3488

if.end54:                                         ; preds = %if.then52, %if.then49
  store i8 0, i8* %retval, align 1, !dbg !3489
  br label %return, !dbg !3489

if.end55:                                         ; preds = %if.end46
  %30 = load %union.tree_node*, %union.tree_node** %evolution_part, align 8, !dbg !3490
  %call56 = call zeroext i8 @tree_is_chrec(%union.tree_node* %30), !dbg !3492
  %tobool57 = icmp ne i8 %call56, 0, !dbg !3492
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !3493

if.then58:                                        ; preds = %if.end55
  store i8 0, i8* %retval, align 1, !dbg !3494
  br label %return, !dbg !3494

if.end59:                                         ; preds = %if.end55
  br label %for.inc, !dbg !3495

for.inc:                                          ; preds = %if.end59, %if.end28, %if.end20
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3496
  br label %for.cond, !dbg !3497, !llvm.loop !3498

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !3500
  br label %return, !dbg !3500

return:                                           ; preds = %for.end, %if.then58, %if.end54, %if.end40
  %31 = load i8, i8* %retval, align 1, !dbg !3501
  ret i8 %31, !dbg !3501
}

declare dso_local zeroext i8 @vect_print_dump_info(i32) #3

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !3502 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !3506, metadata !DIExpression()), !dbg !3507
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !3508
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !3509
  ret %union.tree_node* %1, !dbg !3510
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !3511 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3514, metadata !DIExpression()), !dbg !3515
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3516
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3517
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3518
  ret %union.tree_node** %result, !dbg !3519
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !3520 {
entry:
  %retval = alloca %struct._stmt_vec_info*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %uid = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !3525, metadata !DIExpression()), !dbg !3526
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3527
  %call = call i32 @gimple_uid(%union.gimple_statement_d* %0), !dbg !3528
  store i32 %call, i32* %uid, align 4, !dbg !3526
  %1 = load i32, i32* %uid, align 4, !dbg !3529
  %cmp = icmp eq i32 %1, 0, !dbg !3531
  br i1 %cmp, label %if.then, label %if.end, !dbg !3532

if.then:                                          ; preds = %entry
  store %struct._stmt_vec_info* null, %struct._stmt_vec_info** %retval, align 8, !dbg !3533
  br label %return, !dbg !3533

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %uid, align 4, !dbg !3534
  %3 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !3534
  %tobool = icmp ne %struct.VEC_vec_void_p_heap* %3, null, !dbg !3534
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3534

cond.true:                                        ; preds = %if.end
  %4 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !3534
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %4, i32 0, i32 0, !dbg !3534
  br label %cond.end, !dbg !3534

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3534
  %call1 = call i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %cond), !dbg !3534
  %cmp2 = icmp ule i32 %2, %call1, !dbg !3534
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !3534

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0), i32 629, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3534
  br label %cond.end5, !dbg !3534

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3534

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !3534
  %5 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !3535
  %tobool7 = icmp ne %struct.VEC_vec_void_p_heap* %5, null, !dbg !3535
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !3535

cond.true8:                                       ; preds = %cond.end5
  %6 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !3535
  %base9 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %6, i32 0, i32 0, !dbg !3535
  br label %cond.end11, !dbg !3535

cond.false10:                                     ; preds = %cond.end5
  br label %cond.end11, !dbg !3535

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_vec_void_p_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !3535
  %7 = load i32, i32* %uid, align 4, !dbg !3535
  %sub = sub i32 %7, 1, !dbg !3535
  %call13 = call i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %cond12, i32 %sub), !dbg !3535
  %8 = bitcast i8* %call13 to %struct._stmt_vec_info*, !dbg !3536
  store %struct._stmt_vec_info* %8, %struct._stmt_vec_info** %retval, align 8, !dbg !3537
  br label %return, !dbg !3537

return:                                           ; preds = %cond.end11, %if.then
  %9 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %retval, align 8, !dbg !3538
  ret %struct._stmt_vec_info* %9, !dbg !3538
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) #0 !dbg !3539 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %chrec.addr = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3543, metadata !DIExpression()), !dbg !3544
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !3545, metadata !DIExpression()), !dbg !3546
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3547
  %call = call %struct.basic_block_def* @block_before_loop(%struct.loop* %0), !dbg !3548
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3549
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !3550
  %call1 = call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %1, %union.tree_node* %2), !dbg !3551
  ret %union.tree_node* %call1, !dbg !3552
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) #3

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #3

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @tree_is_chrec(%union.tree_node* %expr) #0 !dbg !3553 {
entry:
  %retval = alloca i8, align 1
  %expr.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !3558, metadata !DIExpression()), !dbg !3559
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3560
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3560
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3560
  %bf.load = load i64, i64* %1, align 8, !dbg !3560
  %bf.clear = and i64 %bf.load, 65535, !dbg !3560
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3560
  %cmp = icmp eq i32 %bf.cast, 146, !dbg !3562
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3563

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !3564
  %call = call zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %2), !dbg !3565
  %conv = zext i8 %call to i32, !dbg !3565
  %tobool = icmp ne i32 %conv, 0, !dbg !3565
  br i1 %tobool, label %if.then, label %if.else, !dbg !3566

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !3567
  br label %return, !dbg !3567

if.else:                                          ; preds = %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !3568
  br label %return, !dbg !3568

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !3569
  ret i8 %3, !dbg !3569
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_do_peeling_for_loop_bound(%struct._loop_vec_info* %loop_vinfo, %union.tree_node** %ratio, %union.tree_node* %cond_expr, %struct.gimple_seq_d* %cond_expr_stmt_list) #0 !dbg !3570 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %ratio.addr = alloca %union.tree_node**, align 8
  %cond_expr.addr = alloca %union.tree_node*, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d*, align 8
  %ni_name = alloca %union.tree_node*, align 8
  %ratio_mult_vf_name = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %new_loop = alloca %struct.loop*, align 8
  %update_e = alloca %struct.edge_def*, align 8
  %preheader = alloca %struct.basic_block_def*, align 8
  %loop_num = alloca i32, align 4
  %check_profitability = alloca i8, align 1
  %th = alloca i32, align 4
  %min_profitable_iters = alloca i32, align 4
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !3573, metadata !DIExpression()), !dbg !3574
  store %union.tree_node** %ratio, %union.tree_node*** %ratio.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ratio.addr, metadata !3575, metadata !DIExpression()), !dbg !3576
  store %union.tree_node* %cond_expr, %union.tree_node** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_expr.addr, metadata !3577, metadata !DIExpression()), !dbg !3578
  store %struct.gimple_seq_d* %cond_expr_stmt_list, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cond_expr_stmt_list.addr, metadata !3579, metadata !DIExpression()), !dbg !3580
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni_name, metadata !3581, metadata !DIExpression()), !dbg !3582
  call void @llvm.dbg.declare(metadata %union.tree_node** %ratio_mult_vf_name, metadata !3583, metadata !DIExpression()), !dbg !3584
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3585, metadata !DIExpression()), !dbg !3586
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3587
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !3587
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !3587
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !3586
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop, metadata !3588, metadata !DIExpression()), !dbg !3589
  call void @llvm.dbg.declare(metadata %struct.edge_def** %update_e, metadata !3590, metadata !DIExpression()), !dbg !3591
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheader, metadata !3592, metadata !DIExpression()), !dbg !3593
  call void @llvm.dbg.declare(metadata i32* %loop_num, metadata !3594, metadata !DIExpression()), !dbg !3595
  call void @llvm.dbg.declare(metadata i8* %check_profitability, metadata !3596, metadata !DIExpression()), !dbg !3597
  store i8 0, i8* %check_profitability, align 1, !dbg !3597
  call void @llvm.dbg.declare(metadata i32* %th, metadata !3598, metadata !DIExpression()), !dbg !3599
  store i32 0, i32* %th, align 4, !dbg !3599
  call void @llvm.dbg.declare(metadata i32* %min_profitable_iters, metadata !3600, metadata !DIExpression()), !dbg !3601
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !3602
  %tobool = icmp ne i8 %call, 0, !dbg !3602
  br i1 %tobool, label %if.then, label %if.end, !dbg !3604

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3605
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0)), !dbg !3606
  br label %if.end, !dbg !3606

if.end:                                           ; preds = %if.then, %entry
  call void @initialize_original_copy_tables(), !dbg !3607
  %3 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3608
  %4 = load %union.tree_node**, %union.tree_node*** %ratio.addr, align 8, !dbg !3609
  %5 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !3610
  call void @vect_generate_tmps_on_preheader(%struct._loop_vec_info* %3, %union.tree_node** %ni_name, %union.tree_node** %ratio_mult_vf_name, %union.tree_node** %4, %struct.gimple_seq_d* %5), !dbg !3611
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3612
  %num = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 0, !dbg !3613
  %7 = load i32, i32* %num, align 8, !dbg !3613
  store i32 %7, i32* %loop_num, align 4, !dbg !3614
  %8 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3615
  %may_misalign_stmts = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %8, i32 0, i32 13, !dbg !3615
  %9 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts, align 8, !dbg !3615
  %tobool3 = icmp ne %struct.VEC_gimple_heap* %9, null, !dbg !3615
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !3615

cond.true:                                        ; preds = %if.end
  %10 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3615
  %may_misalign_stmts4 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %10, i32 0, i32 13, !dbg !3615
  %11 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts4, align 8, !dbg !3615
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %11, i32 0, i32 0, !dbg !3615
  br label %cond.end, !dbg !3615

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !3615

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3615
  %call5 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !3615
  %cmp = icmp ugt i32 %call5, 0, !dbg !3615
  br i1 %cmp, label %if.end22, label %land.lhs.true, !dbg !3617

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3618
  %may_alias_ddrs = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %12, i32 0, i32 12, !dbg !3618
  %13 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !3618
  %tobool6 = icmp ne %struct.VEC_ddr_p_heap* %13, null, !dbg !3618
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !3618

cond.true7:                                       ; preds = %land.lhs.true
  %14 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3618
  %may_alias_ddrs8 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %14, i32 0, i32 12, !dbg !3618
  %15 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs8, align 8, !dbg !3618
  %base9 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %15, i32 0, i32 0, !dbg !3618
  br label %cond.end11, !dbg !3618

cond.false10:                                     ; preds = %land.lhs.true
  br label %cond.end11, !dbg !3618

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_ddr_p_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !3618
  %call13 = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond12), !dbg !3618
  %cmp14 = icmp ugt i32 %call13, 0, !dbg !3618
  br i1 %cmp14, label %if.end22, label %land.lhs.true15, !dbg !3619

land.lhs.true15:                                  ; preds = %cond.end11
  %16 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3620
  %peeling_for_alignment = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %16, i32 0, i32 8, !dbg !3620
  %17 = load i32, i32* %peeling_for_alignment, align 8, !dbg !3620
  %tobool16 = icmp ne i32 %17, 0, !dbg !3620
  br i1 %tobool16, label %if.end22, label %land.lhs.true17, !dbg !3621

land.lhs.true17:                                  ; preds = %land.lhs.true15
  %18 = load %union.tree_node*, %union.tree_node** %cond_expr.addr, align 8, !dbg !3622
  %tobool18 = icmp ne %union.tree_node* %18, null, !dbg !3622
  br i1 %tobool18, label %if.end22, label %if.then19, !dbg !3623

if.then19:                                        ; preds = %land.lhs.true17
  store i8 1, i8* %check_profitability, align 1, !dbg !3624
  %19 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3626
  %min_profitable_iters20 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %19, i32 0, i32 4, !dbg !3626
  %20 = load i32, i32* %min_profitable_iters20, align 8, !dbg !3626
  store i32 %20, i32* %min_profitable_iters, align 4, !dbg !3627
  %21 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3628
  %22 = load i32, i32* %min_profitable_iters, align 4, !dbg !3629
  %call21 = call i32 @conservative_cost_threshold(%struct._loop_vec_info* %21, i32 %22), !dbg !3630
  store i32 %call21, i32* %th, align 4, !dbg !3631
  br label %if.end22, !dbg !3632

if.end22:                                         ; preds = %if.then19, %land.lhs.true17, %land.lhs.true15, %cond.end11, %cond.end
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3633
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3634
  %call23 = call %struct.edge_def* @single_exit(%struct.loop* %24), !dbg !3635
  %25 = load %union.tree_node*, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3636
  %26 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !3637
  %27 = load i32, i32* %th, align 4, !dbg !3638
  %28 = load i8, i8* %check_profitability, align 1, !dbg !3639
  %29 = load %union.tree_node*, %union.tree_node** %cond_expr.addr, align 8, !dbg !3640
  %30 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !3641
  %call24 = call %struct.loop* @slpeel_tree_peel_loop_to_edge(%struct.loop* %23, %struct.edge_def* %call23, %union.tree_node* %25, %union.tree_node* %26, i8 zeroext 0, i32 %27, i8 zeroext %28, %union.tree_node* %29, %struct.gimple_seq_d* %30), !dbg !3642
  store %struct.loop* %call24, %struct.loop** %new_loop, align 8, !dbg !3643
  %31 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3644
  %tobool25 = icmp ne %struct.loop* %31, null, !dbg !3644
  br i1 %tobool25, label %cond.false27, label %cond.true26, !dbg !3644

cond.true26:                                      ; preds = %if.end22
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1904, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3644
  br label %cond.end28, !dbg !3644

cond.false27:                                     ; preds = %if.end22
  br label %cond.end28, !dbg !3644

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi i32 [ 0, %cond.true26 ], [ 0, %cond.false27 ], !dbg !3644
  %32 = load i32, i32* %loop_num, align 4, !dbg !3645
  %33 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3645
  %num30 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 0, !dbg !3645
  %34 = load i32, i32* %num30, align 8, !dbg !3645
  %cmp31 = icmp eq i32 %32, %34, !dbg !3645
  br i1 %cmp31, label %cond.false33, label %cond.true32, !dbg !3645

cond.true32:                                      ; preds = %cond.end28
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1905, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3645
  br label %cond.end34, !dbg !3645

cond.false33:                                     ; preds = %cond.end28
  br label %cond.end34, !dbg !3645

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !3645
  %35 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3646
  %call36 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %35), !dbg !3647
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call36, i32 0, i32 0, !dbg !3648
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3648
  store %struct.basic_block_def* %36, %struct.basic_block_def** %preheader, align 8, !dbg !3649
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3650
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 0, !dbg !3650
  %38 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3650
  %tobool37 = icmp ne %struct.VEC_edge_gc* %38, null, !dbg !3650
  br i1 %tobool37, label %cond.true38, label %cond.false41, !dbg !3650

cond.true38:                                      ; preds = %cond.end34
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3650
  %preds39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 0, !dbg !3650
  %40 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds39, align 8, !dbg !3650
  %base40 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %40, i32 0, i32 0, !dbg !3650
  br label %cond.end42, !dbg !3650

cond.false41:                                     ; preds = %cond.end34
  br label %cond.end42, !dbg !3650

cond.end42:                                       ; preds = %cond.false41, %cond.true38
  %cond43 = phi %struct.VEC_edge_base* [ %base40, %cond.true38 ], [ null, %cond.false41 ], !dbg !3650
  %call44 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond43, i32 0), !dbg !3650
  %src45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call44, i32 0, i32 0, !dbg !3652
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %src45, align 8, !dbg !3652
  %42 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3653
  %call46 = call %struct.edge_def* @single_exit(%struct.loop* %42), !dbg !3654
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call46, i32 0, i32 1, !dbg !3655
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3655
  %cmp47 = icmp eq %struct.basic_block_def* %41, %43, !dbg !3656
  br i1 %cmp47, label %if.then48, label %if.else, !dbg !3657

if.then48:                                        ; preds = %cond.end42
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3658
  %preds49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 0, !dbg !3658
  %45 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds49, align 8, !dbg !3658
  %tobool50 = icmp ne %struct.VEC_edge_gc* %45, null, !dbg !3658
  br i1 %tobool50, label %cond.true51, label %cond.false54, !dbg !3658

cond.true51:                                      ; preds = %if.then48
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3658
  %preds52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 0, !dbg !3658
  %47 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds52, align 8, !dbg !3658
  %base53 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %47, i32 0, i32 0, !dbg !3658
  br label %cond.end55, !dbg !3658

cond.false54:                                     ; preds = %if.then48
  br label %cond.end55, !dbg !3658

cond.end55:                                       ; preds = %cond.false54, %cond.true51
  %cond56 = phi %struct.VEC_edge_base* [ %base53, %cond.true51 ], [ null, %cond.false54 ], !dbg !3658
  %call57 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond56, i32 0), !dbg !3658
  store %struct.edge_def* %call57, %struct.edge_def** %update_e, align 8, !dbg !3659
  br label %if.end67, !dbg !3660

if.else:                                          ; preds = %cond.end42
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3661
  %preds58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 0, !dbg !3661
  %49 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds58, align 8, !dbg !3661
  %tobool59 = icmp ne %struct.VEC_edge_gc* %49, null, !dbg !3661
  br i1 %tobool59, label %cond.true60, label %cond.false63, !dbg !3661

cond.true60:                                      ; preds = %if.else
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader, align 8, !dbg !3661
  %preds61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 0, !dbg !3661
  %51 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds61, align 8, !dbg !3661
  %base62 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %51, i32 0, i32 0, !dbg !3661
  br label %cond.end64, !dbg !3661

cond.false63:                                     ; preds = %if.else
  br label %cond.end64, !dbg !3661

cond.end64:                                       ; preds = %cond.false63, %cond.true60
  %cond65 = phi %struct.VEC_edge_base* [ %base62, %cond.true60 ], [ null, %cond.false63 ], !dbg !3661
  %call66 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond65, i32 1), !dbg !3661
  store %struct.edge_def* %call66, %struct.edge_def** %update_e, align 8, !dbg !3662
  br label %if.end67

if.end67:                                         ; preds = %cond.end64, %cond.end55
  %52 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3663
  %53 = load %union.tree_node*, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3664
  %54 = load %struct.edge_def*, %struct.edge_def** %update_e, align 8, !dbg !3665
  call void @vect_update_ivs_after_vectorizer(%struct._loop_vec_info* %52, %union.tree_node* %53, %struct.edge_def* %54), !dbg !3666
  call void @scev_reset(), !dbg !3667
  call void @free_original_copy_tables(), !dbg !3668
  ret void, !dbg !3669
}

declare dso_local void @initialize_original_copy_tables() #3

; Function Attrs: noinline nounwind uwtable
define internal void @vect_generate_tmps_on_preheader(%struct._loop_vec_info* %loop_vinfo, %union.tree_node** %ni_name_ptr, %union.tree_node** %ratio_mult_vf_name_ptr, %union.tree_node** %ratio_name_ptr, %struct.gimple_seq_d* %cond_expr_stmt_list) #0 !dbg !3670 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %ni_name_ptr.addr = alloca %union.tree_node**, align 8
  %ratio_mult_vf_name_ptr.addr = alloca %union.tree_node**, align 8
  %ratio_name_ptr.addr = alloca %union.tree_node**, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d*, align 8
  %pe = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %ni_name = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %ratio_name = alloca %union.tree_node*, align 8
  %ratio_mult_vf_name = alloca %union.tree_node*, align 8
  %loop = alloca %struct.loop*, align 8
  %ni = alloca %union.tree_node*, align 8
  %vf = alloca i32, align 4
  %log_vf = alloca %union.tree_node*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !3673, metadata !DIExpression()), !dbg !3674
  store %union.tree_node** %ni_name_ptr, %union.tree_node*** %ni_name_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ni_name_ptr.addr, metadata !3675, metadata !DIExpression()), !dbg !3676
  store %union.tree_node** %ratio_mult_vf_name_ptr, %union.tree_node*** %ratio_mult_vf_name_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ratio_mult_vf_name_ptr.addr, metadata !3677, metadata !DIExpression()), !dbg !3678
  store %union.tree_node** %ratio_name_ptr, %union.tree_node*** %ratio_name_ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %ratio_name_ptr.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  store %struct.gimple_seq_d* %cond_expr_stmt_list, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cond_expr_stmt_list.addr, metadata !3681, metadata !DIExpression()), !dbg !3682
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pe, metadata !3683, metadata !DIExpression()), !dbg !3684
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !3685, metadata !DIExpression()), !dbg !3686
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !3687, metadata !DIExpression()), !dbg !3688
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni_name, metadata !3689, metadata !DIExpression()), !dbg !3690
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !3691, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %union.tree_node** %ratio_name, metadata !3693, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.declare(metadata %union.tree_node** %ratio_mult_vf_name, metadata !3695, metadata !DIExpression()), !dbg !3696
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3697, metadata !DIExpression()), !dbg !3698
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3699
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !3699
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !3699
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !3698
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni, metadata !3700, metadata !DIExpression()), !dbg !3701
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3702
  %num_iters = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 2, !dbg !3702
  %3 = load %union.tree_node*, %union.tree_node** %num_iters, align 8, !dbg !3702
  store %union.tree_node* %3, %union.tree_node** %ni, align 8, !dbg !3701
  call void @llvm.dbg.declare(metadata i32* %vf, metadata !3703, metadata !DIExpression()), !dbg !3704
  %4 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3705
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %4, i32 0, i32 6, !dbg !3705
  %5 = load i32, i32* %vectorization_factor, align 8, !dbg !3705
  store i32 %5, i32* %vf, align 4, !dbg !3704
  call void @llvm.dbg.declare(metadata %union.tree_node** %log_vf, metadata !3706, metadata !DIExpression()), !dbg !3707
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3708
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %6), !dbg !3709
  store %struct.edge_def* %call, %struct.edge_def** %pe, align 8, !dbg !3710
  %7 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3711
  %8 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !3712
  %call2 = call %union.tree_node* @vect_build_loop_niters(%struct._loop_vec_info* %7, %struct.gimple_seq_d* %8), !dbg !3713
  store %union.tree_node* %call2, %union.tree_node** %ni_name, align 8, !dbg !3714
  %9 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !3715
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3715
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3715
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3715
  %11 = load i32, i32* %vf, align 4, !dbg !3716
  %conv = sext i32 %11 to i64, !dbg !3716
  %call3 = call i32 @exact_log2(i64 %conv), !dbg !3717
  %conv4 = sext i32 %call3 to i64, !dbg !3717
  %call5 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 %conv4), !dbg !3718
  store %union.tree_node* %call5, %union.tree_node** %log_vf, align 8, !dbg !3719
  %12 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !3720
  %common6 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !3720
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common6, i32 0, i32 2, !dbg !3720
  %13 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !3720
  %14 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !3720
  %15 = load %union.tree_node*, %union.tree_node** %log_vf, align 8, !dbg !3720
  %call8 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 84, %union.tree_node* %13, %union.tree_node* %14, %union.tree_node* %15), !dbg !3720
  store %union.tree_node* %call8, %union.tree_node** %ratio_name, align 8, !dbg !3721
  %16 = load %union.tree_node*, %union.tree_node** %ratio_name, align 8, !dbg !3722
  %call9 = call zeroext i8 @is_gimple_val(%union.tree_node* %16), !dbg !3724
  %tobool = icmp ne i8 %call9, 0, !dbg !3724
  br i1 %tobool, label %if.end20, label %if.then, !dbg !3725

if.then:                                          ; preds = %entry
  %17 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !3726
  %common10 = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !3726
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common10, i32 0, i32 2, !dbg !3726
  %18 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !3726
  %call12 = call %union.tree_node* @create_tmp_var(%union.tree_node* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0)), !dbg !3728
  store %union.tree_node* %call12, %union.tree_node** %var, align 8, !dbg !3729
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3730
  %call13 = call zeroext i8 @add_referenced_var(%union.tree_node* %19), !dbg !3731
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !3732
  %20 = load %union.tree_node*, %union.tree_node** %ratio_name, align 8, !dbg !3733
  %21 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3734
  %call14 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %20, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* %21), !dbg !3735
  store %union.tree_node* %call14, %union.tree_node** %ratio_name, align 8, !dbg !3736
  %22 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !3737
  %tobool15 = icmp ne %struct.gimple_seq_d* %22, null, !dbg !3737
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !3739

if.then16:                                        ; preds = %if.then
  %23 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3740
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %cond_expr_stmt_list.addr, %struct.gimple_seq_d* %23), !dbg !3741
  br label %if.end, !dbg !3741

if.else:                                          ; preds = %if.then
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3742
  %call17 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %24), !dbg !3744
  store %struct.edge_def* %call17, %struct.edge_def** %pe, align 8, !dbg !3745
  %25 = load %struct.edge_def*, %struct.edge_def** %pe, align 8, !dbg !3746
  %26 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3747
  %call18 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %25, %struct.gimple_seq_d* %26), !dbg !3748
  store %struct.basic_block_def* %call18, %struct.basic_block_def** %new_bb, align 8, !dbg !3749
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3750
  %tobool19 = icmp ne %struct.basic_block_def* %27, null, !dbg !3750
  br i1 %tobool19, label %cond.true, label %cond.false, !dbg !3750

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3750
  br label %cond.end, !dbg !3750

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !3750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3750
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then16
  br label %if.end20, !dbg !3751

if.end20:                                         ; preds = %if.end, %entry
  %28 = load %union.tree_node*, %union.tree_node** %ratio_name, align 8, !dbg !3752
  %common21 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !3752
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !3752
  %29 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !3752
  %30 = load %union.tree_node*, %union.tree_node** %ratio_name, align 8, !dbg !3752
  %31 = load %union.tree_node*, %union.tree_node** %log_vf, align 8, !dbg !3752
  %call23 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 83, %union.tree_node* %29, %union.tree_node* %30, %union.tree_node* %31), !dbg !3752
  store %union.tree_node* %call23, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3753
  %32 = load %union.tree_node*, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3754
  %call24 = call zeroext i8 @is_gimple_val(%union.tree_node* %32), !dbg !3756
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3756
  br i1 %tobool25, label %if.end43, label %if.then26, !dbg !3757

if.then26:                                        ; preds = %if.end20
  %33 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !3758
  %common27 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !3758
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !3758
  %34 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !3758
  %call29 = call %union.tree_node* @create_tmp_var(%union.tree_node* %34, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17, i64 0, i64 0)), !dbg !3760
  store %union.tree_node* %call29, %union.tree_node** %var, align 8, !dbg !3761
  %35 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3762
  %call30 = call zeroext i8 @add_referenced_var(%union.tree_node* %35), !dbg !3763
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !3764
  %36 = load %union.tree_node*, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3765
  %37 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !3766
  %call31 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %36, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* %37), !dbg !3767
  store %union.tree_node* %call31, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3768
  %38 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !3769
  %tobool32 = icmp ne %struct.gimple_seq_d* %38, null, !dbg !3769
  br i1 %tobool32, label %if.then33, label %if.else34, !dbg !3771

if.then33:                                        ; preds = %if.then26
  %39 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3772
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %cond_expr_stmt_list.addr, %struct.gimple_seq_d* %39), !dbg !3773
  br label %if.end42, !dbg !3773

if.else34:                                        ; preds = %if.then26
  %40 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3774
  %call35 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %40), !dbg !3776
  store %struct.edge_def* %call35, %struct.edge_def** %pe, align 8, !dbg !3777
  %41 = load %struct.edge_def*, %struct.edge_def** %pe, align 8, !dbg !3778
  %42 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3779
  %call36 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %41, %struct.gimple_seq_d* %42), !dbg !3780
  store %struct.basic_block_def* %call36, %struct.basic_block_def** %new_bb, align 8, !dbg !3781
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3782
  %tobool37 = icmp ne %struct.basic_block_def* %43, null, !dbg !3782
  br i1 %tobool37, label %cond.true38, label %cond.false39, !dbg !3782

cond.true38:                                      ; preds = %if.else34
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3782
  br label %cond.end40, !dbg !3782

cond.false39:                                     ; preds = %if.else34
  br label %cond.end40, !dbg !3782

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !3782
  br label %if.end42

if.end42:                                         ; preds = %cond.end40, %if.then33
  br label %if.end43, !dbg !3783

if.end43:                                         ; preds = %if.end42, %if.end20
  %44 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !3784
  %45 = load %union.tree_node**, %union.tree_node*** %ni_name_ptr.addr, align 8, !dbg !3785
  store %union.tree_node* %44, %union.tree_node** %45, align 8, !dbg !3786
  %46 = load %union.tree_node*, %union.tree_node** %ratio_mult_vf_name, align 8, !dbg !3787
  %47 = load %union.tree_node**, %union.tree_node*** %ratio_mult_vf_name_ptr.addr, align 8, !dbg !3788
  store %union.tree_node* %46, %union.tree_node** %47, align 8, !dbg !3789
  %48 = load %union.tree_node*, %union.tree_node** %ratio_name, align 8, !dbg !3790
  %49 = load %union.tree_node**, %union.tree_node*** %ratio_name_ptr.addr, align 8, !dbg !3791
  store %union.tree_node* %48, %union.tree_node** %49, align 8, !dbg !3792
  ret void, !dbg !3793
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) #0 !dbg !3794 {
entry:
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !3799, metadata !DIExpression()), !dbg !3800
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3800
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !3800
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3800

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !3800
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %1, i32 0, i32 0, !dbg !3800
  %2 = load i32, i32* %num, align 8, !dbg !3800
  br label %cond.end, !dbg !3800

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3800

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3800
  ret i32 %cond, !dbg !3800
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %vec_) #0 !dbg !3801 {
entry:
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !3806, metadata !DIExpression()), !dbg !3807
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !3807
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !3807
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3807

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !3807
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %1, i32 0, i32 0, !dbg !3807
  %2 = load i32, i32* %num, align 8, !dbg !3807
  br label %cond.end, !dbg !3807

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3807

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !3807
  ret i32 %cond, !dbg !3807
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @conservative_cost_threshold(%struct._loop_vec_info* %loop_vinfo, i32 %min_profitable_iters) #0 !dbg !3808 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %min_profitable_iters.addr = alloca i32, align 4
  %th = alloca i32, align 4
  %min_scalar_loop_bound = alloca i32, align 4
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !3811, metadata !DIExpression()), !dbg !3812
  store i32 %min_profitable_iters, i32* %min_profitable_iters.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %min_profitable_iters.addr, metadata !3813, metadata !DIExpression()), !dbg !3814
  call void @llvm.dbg.declare(metadata i32* %th, metadata !3815, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.declare(metadata i32* %min_scalar_loop_bound, metadata !3817, metadata !DIExpression()), !dbg !3818
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3819
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 11, !dbg !3819
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3819
  %1 = load i32, i32* %value, align 8, !dbg !3819
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !3820
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 6, !dbg !3820
  %3 = load i32, i32* %vectorization_factor, align 8, !dbg !3820
  %mul = mul nsw i32 %1, %3, !dbg !3821
  %sub = sub nsw i32 %mul, 1, !dbg !3822
  store i32 %sub, i32* %min_scalar_loop_bound, align 4, !dbg !3823
  %4 = load i32, i32* %min_scalar_loop_bound, align 4, !dbg !3824
  store i32 %4, i32* %th, align 4, !dbg !3825
  %5 = load i32, i32* %min_profitable_iters.addr, align 4, !dbg !3826
  %tobool = icmp ne i32 %5, 0, !dbg !3826
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3828

land.lhs.true:                                    ; preds = %entry
  %6 = load i32, i32* %min_scalar_loop_bound, align 4, !dbg !3829
  %tobool1 = icmp ne i32 %6, 0, !dbg !3829
  br i1 %tobool1, label %lor.lhs.false, label %if.then, !dbg !3830

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load i32, i32* %min_profitable_iters.addr, align 4, !dbg !3831
  %8 = load i32, i32* %min_scalar_loop_bound, align 4, !dbg !3832
  %cmp = icmp sgt i32 %7, %8, !dbg !3833
  br i1 %cmp, label %if.then, label %if.end, !dbg !3834

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %9 = load i32, i32* %min_profitable_iters.addr, align 4, !dbg !3835
  store i32 %9, i32* %th, align 4, !dbg !3836
  br label %if.end, !dbg !3837

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %10 = load i32, i32* %th, align 4, !dbg !3838
  %tobool2 = icmp ne i32 %10, 0, !dbg !3838
  br i1 %tobool2, label %land.lhs.true3, label %if.end7, !dbg !3840

land.lhs.true3:                                   ; preds = %if.end
  %call = call zeroext i8 @vect_print_dump_info(i32 3), !dbg !3841
  %conv = zext i8 %call to i32, !dbg !3841
  %tobool4 = icmp ne i32 %conv, 0, !dbg !3841
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !3842

if.then5:                                         ; preds = %land.lhs.true3
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !3843
  %12 = load i32, i32* %th, align 4, !dbg !3844
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.18, i64 0, i64 0), i32 %12), !dbg !3845
  br label %if.end7, !dbg !3845

if.end7:                                          ; preds = %if.then5, %land.lhs.true3, %if.end
  %13 = load i32, i32* %th, align 4, !dbg !3846
  ret i32 %13, !dbg !3847
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @slpeel_tree_peel_loop_to_edge(%struct.loop* %loop, %struct.edge_def* %e, %union.tree_node* %first_niters, %union.tree_node* %niters, i8 zeroext %update_first_loop_count, i32 %th, i8 zeroext %check_profitability, %union.tree_node* %cond_expr, %struct.gimple_seq_d* %cond_expr_stmt_list) #0 !dbg !3848 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %first_niters.addr = alloca %union.tree_node*, align 8
  %niters.addr = alloca %union.tree_node*, align 8
  %update_first_loop_count.addr = alloca i8, align 1
  %th.addr = alloca i32, align 4
  %check_profitability.addr = alloca i8, align 1
  %cond_expr.addr = alloca %union.tree_node*, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d*, align 8
  %new_loop = alloca %struct.loop*, align 8
  %first_loop = alloca %struct.loop*, align 8
  %second_loop = alloca %struct.loop*, align 8
  %skip_e = alloca %struct.edge_def*, align 8
  %pre_condition = alloca %union.tree_node*, align 8
  %definitions = alloca %struct.bitmap_head_def*, align 8
  %bb_before_second_loop = alloca %struct.basic_block_def*, align 8
  %bb_after_second_loop = alloca %struct.basic_block_def*, align 8
  %bb_before_first_loop = alloca %struct.basic_block_def*, align 8
  %bb_between_loops = alloca %struct.basic_block_def*, align 8
  %new_exit_bb = alloca %struct.basic_block_def*, align 8
  %exit_e = alloca %struct.edge_def*, align 8
  %loop_loc = alloca i32, align 4
  %cost_pre_condition = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %tmp10 = alloca %struct.expanded_location, align 8
  %scalar_loop_iters = alloca %union.tree_node*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3851, metadata !DIExpression()), !dbg !3852
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3853, metadata !DIExpression()), !dbg !3854
  store %union.tree_node* %first_niters, %union.tree_node** %first_niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_niters.addr, metadata !3855, metadata !DIExpression()), !dbg !3856
  store %union.tree_node* %niters, %union.tree_node** %niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters.addr, metadata !3857, metadata !DIExpression()), !dbg !3858
  store i8 %update_first_loop_count, i8* %update_first_loop_count.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %update_first_loop_count.addr, metadata !3859, metadata !DIExpression()), !dbg !3860
  store i32 %th, i32* %th.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %th.addr, metadata !3861, metadata !DIExpression()), !dbg !3862
  store i8 %check_profitability, i8* %check_profitability.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %check_profitability.addr, metadata !3863, metadata !DIExpression()), !dbg !3864
  store %union.tree_node* %cond_expr, %union.tree_node** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond_expr.addr, metadata !3865, metadata !DIExpression()), !dbg !3866
  store %struct.gimple_seq_d* %cond_expr_stmt_list, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cond_expr_stmt_list.addr, metadata !3867, metadata !DIExpression()), !dbg !3868
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop, metadata !3869, metadata !DIExpression()), !dbg !3870
  store %struct.loop* null, %struct.loop** %new_loop, align 8, !dbg !3870
  call void @llvm.dbg.declare(metadata %struct.loop** %first_loop, metadata !3871, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata %struct.loop** %second_loop, metadata !3873, metadata !DIExpression()), !dbg !3874
  call void @llvm.dbg.declare(metadata %struct.edge_def** %skip_e, metadata !3875, metadata !DIExpression()), !dbg !3876
  call void @llvm.dbg.declare(metadata %union.tree_node** %pre_condition, metadata !3877, metadata !DIExpression()), !dbg !3878
  store %union.tree_node* null, %union.tree_node** %pre_condition, align 8, !dbg !3878
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %definitions, metadata !3879, metadata !DIExpression()), !dbg !3880
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_before_second_loop, metadata !3881, metadata !DIExpression()), !dbg !3882
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_after_second_loop, metadata !3883, metadata !DIExpression()), !dbg !3884
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_before_first_loop, metadata !3885, metadata !DIExpression()), !dbg !3886
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_between_loops, metadata !3887, metadata !DIExpression()), !dbg !3888
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_exit_bb, metadata !3889, metadata !DIExpression()), !dbg !3890
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_e, metadata !3891, metadata !DIExpression()), !dbg !3892
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3893
  %call = call %struct.edge_def* @single_exit(%struct.loop* %0), !dbg !3894
  store %struct.edge_def* %call, %struct.edge_def** %exit_e, align 8, !dbg !3892
  call void @llvm.dbg.declare(metadata i32* %loop_loc, metadata !3895, metadata !DIExpression()), !dbg !3896
  call void @llvm.dbg.declare(metadata %union.tree_node** %cost_pre_condition, metadata !3897, metadata !DIExpression()), !dbg !3898
  store %union.tree_node* null, %union.tree_node** %cost_pre_condition, align 8, !dbg !3898
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3899
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3901
  %call1 = call zeroext i8 @slpeel_can_duplicate_loop_p(%struct.loop* %1, %struct.edge_def* %2), !dbg !3902
  %tobool = icmp ne i8 %call1, 0, !dbg !3902
  br i1 %tobool, label %if.end, label %if.then, !dbg !3903

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3904
  br label %return, !dbg !3904

if.end:                                           ; preds = %entry
  call void @gimple_register_cfg_hooks(), !dbg !3905
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3906
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3908
  %call2 = call %struct.loop* @slpeel_tree_duplicate_loop_to_edge_cfg(%struct.loop* %3, %struct.edge_def* %4), !dbg !3909
  store %struct.loop* %call2, %struct.loop** %new_loop, align 8, !dbg !3910
  %tobool3 = icmp ne %struct.loop* %call2, null, !dbg !3910
  br i1 %tobool3, label %if.end15, label %if.then4, !dbg !3911

if.then4:                                         ; preds = %if.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3912
  %call5 = call i32 @find_loop_location(%struct.loop* %5), !dbg !3914
  store i32 %call5, i32* %loop_loc, align 4, !dbg !3915
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3916
  %tobool6 = icmp ne %struct._IO_FILE* %6, null, !dbg !3916
  br i1 %tobool6, label %land.lhs.true, label %if.end14, !dbg !3918

land.lhs.true:                                    ; preds = %if.then4
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3919
  %and = and i32 %7, 8, !dbg !3920
  %tobool7 = icmp ne i32 %and, 0, !dbg !3920
  br i1 %tobool7, label %if.then8, label %if.end14, !dbg !3921

if.then8:                                         ; preds = %land.lhs.true
  %8 = load i32, i32* %loop_loc, align 4, !dbg !3922
  %cmp = icmp ne i32 %8, 0, !dbg !3925
  br i1 %cmp, label %if.then9, label %if.end12, !dbg !3926

if.then9:                                         ; preds = %if.then8
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3927
  %10 = load i32, i32* %loop_loc, align 4, !dbg !3928
  call void @expand_location(%struct.expanded_location* sret %tmp, i32 %10), !dbg !3928
  %file = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i32 0, i32 0, !dbg !3928
  %11 = load i8*, i8** %file, align 8, !dbg !3928
  %12 = load i32, i32* %loop_loc, align 4, !dbg !3929
  call void @expand_location(%struct.expanded_location* sret %tmp10, i32 %12), !dbg !3929
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp10, i32 0, i32 1, !dbg !3929
  %13 = load i32, i32* %line, align 8, !dbg !3929
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i8* %11, i32 %13), !dbg !3930
  br label %if.end12, !dbg !3930

if.end12:                                         ; preds = %if.then9, %if.then8
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3931
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.20, i64 0, i64 0)), !dbg !3932
  br label %if.end14, !dbg !3933

if.end14:                                         ; preds = %if.end12, %land.lhs.true, %if.then4
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !3934
  br label %return, !dbg !3934

if.end15:                                         ; preds = %if.end
  %15 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3935
  %tobool16 = icmp ne i32 %15, 0, !dbg !3935
  br i1 %tobool16, label %if.then17, label %if.end21, !dbg !3937

if.then17:                                        ; preds = %if.end15
  %16 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !3938
  %tobool18 = icmp ne %struct.VEC_adjust_info_stack* %16, null, !dbg !3938
  br i1 %tobool18, label %cond.true, label %cond.false, !dbg !3938

cond.true:                                        ; preds = %if.then17
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1218, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3938
  br label %cond.end, !dbg !3938

cond.false:                                       ; preds = %if.then17
  br label %cond.end, !dbg !3938

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3938
  %call19 = call i64 @VEC_adjust_info_base_embedded_size(i32 32), !dbg !3940
  %17 = alloca i8, i64 %call19, align 16, !dbg !3940
  %18 = bitcast i8* %17 to %struct.VEC_adjust_info_stack*, !dbg !3940
  %call20 = call %struct.VEC_adjust_info_stack* @VEC_adjust_info_stack_alloc1(i32 32, %struct.VEC_adjust_info_stack* %18), !dbg !3940
  store %struct.VEC_adjust_info_stack* %call20, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !3941
  br label %if.end21, !dbg !3942

if.end21:                                         ; preds = %cond.end, %if.end15
  %19 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3943
  %20 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3945
  %cmp22 = icmp eq %struct.edge_def* %19, %20, !dbg !3946
  br i1 %cmp22, label %if.then23, label %if.else, !dbg !3947

if.then23:                                        ; preds = %if.end21
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3948
  store %struct.loop* %21, %struct.loop** %first_loop, align 8, !dbg !3950
  %22 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3951
  store %struct.loop* %22, %struct.loop** %second_loop, align 8, !dbg !3952
  br label %if.end24, !dbg !3953

if.else:                                          ; preds = %if.end21
  %23 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3954
  store %struct.loop* %23, %struct.loop** %first_loop, align 8, !dbg !3956
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3957
  store %struct.loop* %24, %struct.loop** %second_loop, align 8, !dbg !3958
  br label %if.end24

if.end24:                                         ; preds = %if.else, %if.then23
  %call25 = call %struct.bitmap_head_def* @ssa_names_to_replace(), !dbg !3959
  store %struct.bitmap_head_def* %call25, %struct.bitmap_head_def** %definitions, align 8, !dbg !3960
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3961
  %26 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3962
  %27 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3963
  %28 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3964
  %cmp26 = icmp eq %struct.edge_def* %27, %28, !dbg !3965
  %conv = zext i1 %cmp26 to i32, !dbg !3965
  %conv27 = trunc i32 %conv to i8, !dbg !3963
  call void @slpeel_update_phis_for_duplicate_loop(%struct.loop* %25, %struct.loop* %26, i8 zeroext %conv27), !dbg !3966
  %29 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !3967
  call void @rename_variables_in_loop(%struct.loop* %29), !dbg !3968
  %30 = load %struct.loop*, %struct.loop** %first_loop, align 8, !dbg !3969
  %call28 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %30), !dbg !3970
  %call29 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call28), !dbg !3971
  store %struct.basic_block_def* %call29, %struct.basic_block_def** %bb_before_first_loop, align 8, !dbg !3972
  %31 = load %struct.loop*, %struct.loop** %first_loop, align 8, !dbg !3973
  %call30 = call %struct.edge_def* @single_exit(%struct.loop* %31), !dbg !3974
  %call31 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call30), !dbg !3975
  store %struct.basic_block_def* %call31, %struct.basic_block_def** %bb_before_second_loop, align 8, !dbg !3976
  %32 = load i8, i8* %update_first_loop_count.addr, align 1, !dbg !3977
  %tobool32 = icmp ne i8 %32, 0, !dbg !3977
  br i1 %tobool32, label %if.else52, label %if.then33, !dbg !3979

if.then33:                                        ; preds = %if.end24
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3980
  %34 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !3980
  %35 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !3980
  %common = bitcast %union.tree_node* %35 to %struct.tree_common*, !dbg !3980
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3980
  %36 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3980
  %call34 = call %union.tree_node* @build_int_cst(%union.tree_node* %36, i64 0), !dbg !3980
  %call35 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %33, %union.tree_node* %34, %union.tree_node* %call34), !dbg !3980
  store %union.tree_node* %call35, %union.tree_node** %pre_condition, align 8, !dbg !3982
  %37 = load i8, i8* %check_profitability.addr, align 1, !dbg !3983
  %tobool36 = icmp ne i8 %37, 0, !dbg !3983
  br i1 %tobool36, label %if.then37, label %if.end46, !dbg !3985

if.then37:                                        ; preds = %if.then33
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_loop_iters, metadata !3986, metadata !DIExpression()), !dbg !3988
  %38 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3989
  %call38 = call %struct._loop_vec_info* @loop_vec_info_for_loop(%struct.loop* %38), !dbg !3989
  %num_iters_unchanged = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %call38, i32 0, i32 3, !dbg !3989
  %39 = load %union.tree_node*, %union.tree_node** %num_iters_unchanged, align 8, !dbg !3989
  %call39 = call %union.tree_node* @unshare_expr(%union.tree_node* %39), !dbg !3990
  store %union.tree_node* %call39, %union.tree_node** %scalar_loop_iters, align 8, !dbg !3988
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3991
  %41 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !3991
  %42 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !3991
  %common40 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !3991
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !3991
  %43 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !3991
  %44 = load i32, i32* %th.addr, align 4, !dbg !3991
  %conv42 = zext i32 %44 to i64, !dbg !3991
  %call43 = call %union.tree_node* @build_int_cst(%union.tree_node* %43, i64 %conv42), !dbg !3991
  %call44 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %40, %union.tree_node* %41, %union.tree_node* %call43), !dbg !3991
  store %union.tree_node* %call44, %union.tree_node** %cost_pre_condition, align 8, !dbg !3992
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3993
  %46 = load %union.tree_node*, %union.tree_node** %cost_pre_condition, align 8, !dbg !3993
  %47 = load %union.tree_node*, %union.tree_node** %pre_condition, align 8, !dbg !3993
  %call45 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %45, %union.tree_node* %46, %union.tree_node* %47), !dbg !3993
  store %union.tree_node* %call45, %union.tree_node** %pre_condition, align 8, !dbg !3994
  br label %if.end46, !dbg !3995

if.end46:                                         ; preds = %if.then37, %if.then33
  %48 = load %union.tree_node*, %union.tree_node** %cond_expr.addr, align 8, !dbg !3996
  %tobool47 = icmp ne %union.tree_node* %48, null, !dbg !3996
  br i1 %tobool47, label %if.then48, label %if.end51, !dbg !3998

if.then48:                                        ; preds = %if.end46
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3999
  %50 = load %union.tree_node*, %union.tree_node** %pre_condition, align 8, !dbg !3999
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3999
  %52 = load %union.tree_node*, %union.tree_node** %cond_expr.addr, align 8, !dbg !3999
  %call49 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 96, %union.tree_node* %51, %union.tree_node* %52), !dbg !3999
  %call50 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %call49), !dbg !3999
  store %union.tree_node* %call50, %union.tree_node** %pre_condition, align 8, !dbg !4001
  br label %if.end51, !dbg !4002

if.end51:                                         ; preds = %if.then48, %if.end46
  br label %if.end60, !dbg !4003

if.else52:                                        ; preds = %if.end24
  %53 = load i8, i8* %check_profitability.addr, align 1, !dbg !4004
  %tobool53 = icmp ne i8 %53, 0, !dbg !4004
  br i1 %tobool53, label %if.then54, label %if.end55, !dbg !4007

if.then54:                                        ; preds = %if.else52
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop, align 8, !dbg !4008
  %55 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !4009
  %56 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4010
  %57 = load i32, i32* %th.addr, align 4, !dbg !4011
  call void @set_prologue_iterations(%struct.basic_block_def* %54, %union.tree_node* %55, %struct.loop* %56, i32 %57), !dbg !4012
  br label %if.end55, !dbg !4012

if.end55:                                         ; preds = %if.then54, %if.else52
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4013
  %59 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !4013
  %60 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !4013
  %common56 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !4013
  %type57 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common56, i32 0, i32 2, !dbg !4013
  %61 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !4013
  %call58 = call %union.tree_node* @build_int_cst(%union.tree_node* %61, i64 0), !dbg !4013
  %call59 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %58, %union.tree_node* %59, %union.tree_node* %call58), !dbg !4013
  store %union.tree_node* %call59, %union.tree_node** %pre_condition, align 8, !dbg !4014
  br label %if.end60

if.end60:                                         ; preds = %if.end55, %if.end51
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop, align 8, !dbg !4015
  %63 = load %union.tree_node*, %union.tree_node** %pre_condition, align 8, !dbg !4016
  %64 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !4017
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_second_loop, align 8, !dbg !4018
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop, align 8, !dbg !4019
  %call61 = call %struct.edge_def* @slpeel_add_loop_guard(%struct.basic_block_def* %62, %union.tree_node* %63, %struct.gimple_seq_d* %64, %struct.basic_block_def* %65, %struct.basic_block_def* %66), !dbg !4020
  store %struct.edge_def* %call61, %struct.edge_def** %skip_e, align 8, !dbg !4021
  %67 = load %struct.edge_def*, %struct.edge_def** %skip_e, align 8, !dbg !4022
  %68 = load %struct.loop*, %struct.loop** %first_loop, align 8, !dbg !4023
  %69 = load %struct.loop*, %struct.loop** %first_loop, align 8, !dbg !4024
  %70 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !4025
  %cmp62 = icmp eq %struct.loop* %69, %70, !dbg !4026
  %conv63 = zext i1 %cmp62 to i32, !dbg !4026
  %conv64 = trunc i32 %conv63 to i8, !dbg !4024
  call void @slpeel_update_phi_nodes_for_guard1(%struct.edge_def* %67, %struct.loop* %68, i8 zeroext %conv64, %struct.basic_block_def** %new_exit_bb, %struct.bitmap_head_def** %definitions), !dbg !4027
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %new_exit_bb, align 8, !dbg !4028
  store %struct.basic_block_def* %71, %struct.basic_block_def** %bb_between_loops, align 8, !dbg !4029
  %72 = load %struct.loop*, %struct.loop** %second_loop, align 8, !dbg !4030
  %call65 = call %struct.edge_def* @single_exit(%struct.loop* %72), !dbg !4031
  %call66 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call65), !dbg !4032
  store %struct.basic_block_def* %call66, %struct.basic_block_def** %bb_after_second_loop, align 8, !dbg !4033
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4034
  %74 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !4034
  %75 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !4034
  %call67 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 101, %union.tree_node* %73, %union.tree_node* %74, %union.tree_node* %75), !dbg !4034
  store %union.tree_node* %call67, %union.tree_node** %pre_condition, align 8, !dbg !4035
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_between_loops, align 8, !dbg !4036
  %77 = load %union.tree_node*, %union.tree_node** %pre_condition, align 8, !dbg !4037
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_after_second_loop, align 8, !dbg !4038
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop, align 8, !dbg !4039
  %call68 = call %struct.edge_def* @slpeel_add_loop_guard(%struct.basic_block_def* %76, %union.tree_node* %77, %struct.gimple_seq_d* null, %struct.basic_block_def* %78, %struct.basic_block_def* %79), !dbg !4040
  store %struct.edge_def* %call68, %struct.edge_def** %skip_e, align 8, !dbg !4041
  %80 = load %struct.edge_def*, %struct.edge_def** %skip_e, align 8, !dbg !4042
  %81 = load %struct.loop*, %struct.loop** %second_loop, align 8, !dbg !4043
  %82 = load %struct.loop*, %struct.loop** %second_loop, align 8, !dbg !4044
  %83 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !4045
  %cmp69 = icmp eq %struct.loop* %82, %83, !dbg !4046
  %conv70 = zext i1 %cmp69 to i32, !dbg !4046
  %conv71 = trunc i32 %conv70 to i8, !dbg !4044
  call void @slpeel_update_phi_nodes_for_guard2(%struct.edge_def* %80, %struct.loop* %81, i8 zeroext %conv71, %struct.basic_block_def** %new_exit_bb), !dbg !4047
  %84 = load i8, i8* %update_first_loop_count.addr, align 1, !dbg !4048
  %tobool72 = icmp ne i8 %84, 0, !dbg !4048
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !4050

if.then73:                                        ; preds = %if.end60
  %85 = load %struct.loop*, %struct.loop** %first_loop, align 8, !dbg !4051
  %86 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !4052
  call void @slpeel_make_loop_iterate_ntimes(%struct.loop* %85, %union.tree_node* %86), !dbg !4053
  br label %if.end74, !dbg !4053

if.end74:                                         ; preds = %if.then73, %if.end60
  call void @adjust_vec_debug_stmts(), !dbg !4054
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %definitions, align 8, !dbg !4055
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %87), !dbg !4055
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %definitions, align 8, !dbg !4055
  call void @delete_update_ssa(), !dbg !4056
  %88 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !4057
  store %struct.loop* %88, %struct.loop** %retval, align 8, !dbg !4058
  br label %return, !dbg !4058

return:                                           ; preds = %if.end74, %if.end14, %if.then
  %89 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4059
  ret %struct.loop* %89, !dbg !4059
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_update_ivs_after_vectorizer(%struct._loop_vec_info* %loop_vinfo, %union.tree_node* %niters, %struct.edge_def* %update_e) #0 !dbg !4060 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %niters.addr = alloca %union.tree_node*, align 8
  %update_e.addr = alloca %struct.edge_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %exit_bb = alloca %struct.basic_block_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %phi1 = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %gsi1 = alloca %struct.gimple_stmt_iterator, align 8
  %update_bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp4 = alloca %struct.gimple_stmt_iterator, align 8
  %access_fn = alloca %union.tree_node*, align 8
  %evolution_part = alloca %union.tree_node*, align 8
  %init_expr = alloca %union.tree_node*, align 8
  %step_expr = alloca %union.tree_node*, align 8
  %off = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %ni = alloca %union.tree_node*, align 8
  %ni_name = alloca %union.tree_node*, align 8
  %last_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp93 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4063, metadata !DIExpression()), !dbg !4064
  store %union.tree_node* %niters, %union.tree_node** %niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters.addr, metadata !4065, metadata !DIExpression()), !dbg !4066
  store %struct.edge_def* %update_e, %struct.edge_def** %update_e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %update_e.addr, metadata !4067, metadata !DIExpression()), !dbg !4068
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4069, metadata !DIExpression()), !dbg !4070
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4071
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4071
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4071
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4070
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb, metadata !4072, metadata !DIExpression()), !dbg !4073
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4074
  %call = call %struct.edge_def* @single_exit(%struct.loop* %2), !dbg !4075
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4076
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4076
  store %struct.basic_block_def* %3, %struct.basic_block_def** %exit_bb, align 8, !dbg !4073
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4077, metadata !DIExpression()), !dbg !4078
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi1, metadata !4079, metadata !DIExpression()), !dbg !4080
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4081, metadata !DIExpression()), !dbg !4082
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi1, metadata !4083, metadata !DIExpression()), !dbg !4084
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %update_bb, metadata !4085, metadata !DIExpression()), !dbg !4086
  %4 = load %struct.edge_def*, %struct.edge_def** %update_e.addr, align 8, !dbg !4087
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 1, !dbg !4088
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !4088
  store %struct.basic_block_def* %5, %struct.basic_block_def** %update_bb, align 8, !dbg !4086
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4089
  %call3 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %6), !dbg !4089
  %tobool = icmp ne i8 %call3, 0, !dbg !4089
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4089

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1730, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4089
  br label %cond.end, !dbg !4089

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4089
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4090
  %header = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !4092
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4092
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !4093
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4093
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4093
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !4093
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %update_bb, align 8, !dbg !4094
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp4, %struct.basic_block_def* %11), !dbg !4095
  %12 = bitcast %struct.gimple_stmt_iterator* %gsi1 to i8*, !dbg !4095
  %13 = bitcast %struct.gimple_stmt_iterator* %tmp4 to i8*, !dbg !4095
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 24, i1 false), !dbg !4095
  br label %for.cond, !dbg !4096

for.cond:                                         ; preds = %for.inc, %cond.end
  %call5 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4097
  %tobool6 = icmp ne i8 %call5, 0, !dbg !4097
  br i1 %tobool6, label %land.end, label %land.rhs, !dbg !4099

land.rhs:                                         ; preds = %for.cond
  %call7 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi1), !dbg !4100
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4101
  %lnot = xor i1 %tobool8, true, !dbg !4101
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !4102
  br i1 %14, label %for.body, label %for.end, !dbg !4103

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %access_fn, metadata !4104, metadata !DIExpression()), !dbg !4106
  store %union.tree_node* null, %union.tree_node** %access_fn, align 8, !dbg !4106
  call void @llvm.dbg.declare(metadata %union.tree_node** %evolution_part, metadata !4107, metadata !DIExpression()), !dbg !4108
  call void @llvm.dbg.declare(metadata %union.tree_node** %init_expr, metadata !4109, metadata !DIExpression()), !dbg !4110
  call void @llvm.dbg.declare(metadata %union.tree_node** %step_expr, metadata !4111, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.declare(metadata %union.tree_node** %off, metadata !4113, metadata !DIExpression()), !dbg !4114
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !4115, metadata !DIExpression()), !dbg !4116
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4117, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni, metadata !4119, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni_name, metadata !4121, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %last_gsi, metadata !4123, metadata !DIExpression()), !dbg !4124
  %call9 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4125
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %phi, align 8, !dbg !4126
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi1), !dbg !4127
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %phi1, align 8, !dbg !4128
  %call11 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4129
  %tobool12 = icmp ne i8 %call11, 0, !dbg !4129
  br i1 %tobool12, label %if.then, label %if.end, !dbg !4131

if.then:                                          ; preds = %for.body
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4132
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.22, i64 0, i64 0)), !dbg !4134
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4135
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4136
  call void @print_gimple_stmt(%struct._IO_FILE* %16, %union.gimple_statement_d* %17, i32 0, i32 2), !dbg !4137
  br label %if.end, !dbg !4138

if.end:                                           ; preds = %if.then, %for.body
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4139
  %call14 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %18), !dbg !4139
  %call15 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call14), !dbg !4139
  %ssa_name = bitcast %union.tree_node* %call15 to %struct.tree_ssa_name*, !dbg !4139
  %var16 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4139
  %19 = load %union.tree_node*, %union.tree_node** %var16, align 8, !dbg !4139
  %call17 = call zeroext i8 @is_gimple_reg(%union.tree_node* %19), !dbg !4141
  %tobool18 = icmp ne i8 %call17, 0, !dbg !4141
  br i1 %tobool18, label %if.end25, label %if.then19, !dbg !4142

if.then19:                                        ; preds = %if.end
  %call20 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4143
  %tobool21 = icmp ne i8 %call20, 0, !dbg !4143
  br i1 %tobool21, label %if.then22, label %if.end24, !dbg !4146

if.then22:                                        ; preds = %if.then19
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4147
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0)), !dbg !4148
  br label %if.end24, !dbg !4148

if.end24:                                         ; preds = %if.then22, %if.then19
  br label %for.inc, !dbg !4149

if.end25:                                         ; preds = %if.end
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4150
  %call26 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %21), !dbg !4150
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call26, i32 0, i32 16, !dbg !4150
  %22 = load i32, i32* %def_type, align 8, !dbg !4150
  %cmp = icmp eq i32 %22, 5, !dbg !4152
  br i1 %cmp, label %if.then27, label %if.end33, !dbg !4153

if.then27:                                        ; preds = %if.end25
  %call28 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4154
  %tobool29 = icmp ne i8 %call28, 0, !dbg !4154
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !4157

if.then30:                                        ; preds = %if.then27
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4158
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0)), !dbg !4159
  br label %if.end32, !dbg !4159

if.end32:                                         ; preds = %if.then30, %if.then27
  br label %for.inc, !dbg !4160

if.end33:                                         ; preds = %if.end25
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4161
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4162
  %call34 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %25), !dbg !4162
  %call35 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call34), !dbg !4162
  %call36 = call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %24, %union.tree_node* %call35), !dbg !4163
  store %union.tree_node* %call36, %union.tree_node** %access_fn, align 8, !dbg !4164
  %26 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4165
  %tobool37 = icmp ne %union.tree_node* %26, null, !dbg !4165
  br i1 %tobool37, label %cond.false39, label %cond.true38, !dbg !4165

cond.true38:                                      ; preds = %if.end33
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1769, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4165
  br label %cond.end40, !dbg !4165

cond.false39:                                     ; preds = %if.end33
  br label %cond.end40, !dbg !4165

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !4165
  %27 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4166
  %common = bitcast %union.tree_node* %27 to %struct.tree_common*, !dbg !4166
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4166
  %28 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !4166
  store %union.tree_node* %28, %union.tree_node** %type, align 8, !dbg !4167
  %29 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4168
  %call43 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %29), !dbg !4168
  store %union.tree_node* %call43, %union.tree_node** %access_fn, align 8, !dbg !4168
  %30 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4169
  %31 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4170
  %num = getelementptr inbounds %struct.loop, %struct.loop* %31, i32 0, i32 0, !dbg !4171
  %32 = load i32, i32* %num, align 8, !dbg !4171
  %call44 = call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %30, i32 %32), !dbg !4172
  %call45 = call %union.tree_node* @unshare_expr(%union.tree_node* %call44), !dbg !4173
  store %union.tree_node* %call45, %union.tree_node** %evolution_part, align 8, !dbg !4174
  %33 = load %union.tree_node*, %union.tree_node** %evolution_part, align 8, !dbg !4175
  %cmp46 = icmp ne %union.tree_node* %33, null, !dbg !4175
  br i1 %cmp46, label %cond.false48, label %cond.true47, !dbg !4175

cond.true47:                                      ; preds = %cond.end40
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1778, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4175
  br label %cond.end49, !dbg !4175

cond.false48:                                     ; preds = %cond.end40
  br label %cond.end49, !dbg !4175

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi i32 [ 0, %cond.true47 ], [ 0, %cond.false48 ], !dbg !4175
  %34 = load %union.tree_node*, %union.tree_node** %evolution_part, align 8, !dbg !4176
  %call51 = call zeroext i8 @tree_is_chrec(%union.tree_node* %34), !dbg !4176
  %tobool52 = icmp ne i8 %call51, 0, !dbg !4176
  br i1 %tobool52, label %cond.true53, label %cond.false54, !dbg !4176

cond.true53:                                      ; preds = %cond.end49
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1782, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4176
  br label %cond.end55, !dbg !4176

cond.false54:                                     ; preds = %cond.end49
  br label %cond.end55, !dbg !4176

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi i32 [ 0, %cond.true53 ], [ 0, %cond.false54 ], !dbg !4176
  %35 = load %union.tree_node*, %union.tree_node** %evolution_part, align 8, !dbg !4177
  store %union.tree_node* %35, %union.tree_node** %step_expr, align 8, !dbg !4178
  %36 = load %union.tree_node*, %union.tree_node** %access_fn, align 8, !dbg !4179
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4180
  %num57 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !4181
  %38 = load i32, i32* %num57, align 8, !dbg !4181
  %call58 = call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %36, i32 %38), !dbg !4182
  %call59 = call %union.tree_node* @unshare_expr(%union.tree_node* %call58), !dbg !4183
  store %union.tree_node* %call59, %union.tree_node** %init_expr, align 8, !dbg !4184
  %39 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4185
  %40 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4185
  %call60 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %39, %union.tree_node* %40), !dbg !4185
  store %union.tree_node* %call60, %union.tree_node** %init_expr, align 8, !dbg !4186
  %41 = load %union.tree_node*, %union.tree_node** %step_expr, align 8, !dbg !4187
  %common61 = bitcast %union.tree_node* %41 to %struct.tree_common*, !dbg !4187
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !4187
  %42 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !4187
  %43 = load %union.tree_node*, %union.tree_node** %step_expr, align 8, !dbg !4187
  %common63 = bitcast %union.tree_node* %43 to %struct.tree_common*, !dbg !4187
  %type64 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common63, i32 0, i32 2, !dbg !4187
  %44 = load %union.tree_node*, %union.tree_node** %type64, align 8, !dbg !4187
  %45 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !4187
  %call65 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %44, %union.tree_node* %45), !dbg !4187
  %46 = load %union.tree_node*, %union.tree_node** %step_expr, align 8, !dbg !4187
  %call66 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %42, %union.tree_node* %call65, %union.tree_node* %46), !dbg !4187
  store %union.tree_node* %call66, %union.tree_node** %off, align 8, !dbg !4188
  %47 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4189
  %common67 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !4189
  %type68 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common67, i32 0, i32 2, !dbg !4189
  %48 = load %union.tree_node*, %union.tree_node** %type68, align 8, !dbg !4189
  %base = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !4189
  %49 = bitcast %struct.tree_base* %base to i64*, !dbg !4189
  %bf.load = load i64, i64* %49, align 8, !dbg !4189
  %bf.clear = and i64 %bf.load, 65535, !dbg !4189
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4189
  %cmp69 = icmp eq i32 %bf.cast, 10, !dbg !4189
  br i1 %cmp69, label %if.then77, label %lor.lhs.false, !dbg !4189

lor.lhs.false:                                    ; preds = %cond.end55
  %50 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4189
  %common70 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !4189
  %type71 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common70, i32 0, i32 2, !dbg !4189
  %51 = load %union.tree_node*, %union.tree_node** %type71, align 8, !dbg !4189
  %base72 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !4189
  %52 = bitcast %struct.tree_base* %base72 to i64*, !dbg !4189
  %bf.load73 = load i64, i64* %52, align 8, !dbg !4189
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !4189
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !4189
  %cmp76 = icmp eq i32 %bf.cast75, 12, !dbg !4189
  br i1 %cmp76, label %if.then77, label %if.else, !dbg !4191

if.then77:                                        ; preds = %lor.lhs.false, %cond.end55
  %53 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4192
  %common78 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !4192
  %type79 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common78, i32 0, i32 2, !dbg !4192
  %54 = load %union.tree_node*, %union.tree_node** %type79, align 8, !dbg !4192
  %55 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4192
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4192
  %57 = load %union.tree_node*, %union.tree_node** %off, align 8, !dbg !4192
  %call80 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %56, %union.tree_node* %57), !dbg !4192
  %call81 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %54, %union.tree_node* %55, %union.tree_node* %call80), !dbg !4192
  store %union.tree_node* %call81, %union.tree_node** %ni, align 8, !dbg !4193
  br label %if.end88, !dbg !4194

if.else:                                          ; preds = %lor.lhs.false
  %58 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4195
  %common82 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !4195
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !4195
  %59 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !4195
  %60 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4195
  %61 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4195
  %common84 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !4195
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !4195
  %62 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !4195
  %63 = load %union.tree_node*, %union.tree_node** %off, align 8, !dbg !4195
  %call86 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %62, %union.tree_node* %63), !dbg !4195
  %call87 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %call86), !dbg !4195
  store %union.tree_node* %call87, %union.tree_node** %ni, align 8, !dbg !4196
  br label %if.end88

if.end88:                                         ; preds = %if.else, %if.then77
  %64 = load %union.tree_node*, %union.tree_node** %init_expr, align 8, !dbg !4197
  %common89 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !4197
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !4197
  %65 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !4197
  %call91 = call %union.tree_node* @create_tmp_var(%union.tree_node* %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.23, i64 0, i64 0)), !dbg !4198
  store %union.tree_node* %call91, %union.tree_node** %var, align 8, !dbg !4199
  %66 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4200
  %call92 = call zeroext i8 @add_referenced_var(%union.tree_node* %66), !dbg !4201
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb, align 8, !dbg !4202
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp93, %struct.basic_block_def* %67), !dbg !4203
  %68 = bitcast %struct.gimple_stmt_iterator* %last_gsi to i8*, !dbg !4203
  %69 = bitcast %struct.gimple_stmt_iterator* %tmp93 to i8*, !dbg !4203
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 24, i1 false), !dbg !4203
  %70 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !4204
  %71 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4205
  %call94 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %last_gsi, %union.tree_node* %70, i8 zeroext 0, %union.tree_node* %71, i8 zeroext 1, i32 1), !dbg !4206
  store %union.tree_node* %call94, %union.tree_node** %ni_name, align 8, !dbg !4207
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi1, align 8, !dbg !4208
  %73 = load %struct.edge_def*, %struct.edge_def** %update_e.addr, align 8, !dbg !4209
  %74 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !4210
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %72, %struct.edge_def* %73, %union.tree_node* %74), !dbg !4211
  br label %for.inc, !dbg !4212

for.inc:                                          ; preds = %if.end88, %if.end32, %if.end24
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4213
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi1), !dbg !4214
  br label %for.cond, !dbg !4215, !llvm.loop !4216

for.end:                                          ; preds = %land.end
  ret void, !dbg !4218
}

declare dso_local void @scev_reset() #3

declare dso_local void @free_original_copy_tables() #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_do_peeling_for_alignment(%struct._loop_vec_info* %loop_vinfo) #0 !dbg !4219 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %loop = alloca %struct.loop*, align 8
  %niters_of_prolog_loop = alloca %union.tree_node*, align 8
  %ni_name = alloca %union.tree_node*, align 8
  %n_iters = alloca %union.tree_node*, align 8
  %wide_prolog_niters = alloca %union.tree_node*, align 8
  %new_loop = alloca %struct.loop*, align 8
  %th = alloca i32, align 4
  %min_profitable_iters = alloca i32, align 4
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4222, metadata !DIExpression()), !dbg !4223
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4224, metadata !DIExpression()), !dbg !4225
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4226
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4226
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4226
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4225
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters_of_prolog_loop, metadata !4227, metadata !DIExpression()), !dbg !4228
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni_name, metadata !4229, metadata !DIExpression()), !dbg !4230
  call void @llvm.dbg.declare(metadata %union.tree_node** %n_iters, metadata !4231, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.declare(metadata %union.tree_node** %wide_prolog_niters, metadata !4233, metadata !DIExpression()), !dbg !4234
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %th, metadata !4237, metadata !DIExpression()), !dbg !4238
  store i32 0, i32* %th, align 4, !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %min_profitable_iters, metadata !4239, metadata !DIExpression()), !dbg !4240
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4241
  %tobool = icmp ne i8 %call, 0, !dbg !4241
  br i1 %tobool, label %if.then, label %if.end, !dbg !4243

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4244
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0)), !dbg !4245
  br label %if.end, !dbg !4245

if.end:                                           ; preds = %if.then, %entry
  call void @initialize_original_copy_tables(), !dbg !4246
  %3 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4247
  %call3 = call %union.tree_node* @vect_build_loop_niters(%struct._loop_vec_info* %3, %struct.gimple_seq_d* null), !dbg !4248
  store %union.tree_node* %call3, %union.tree_node** %ni_name, align 8, !dbg !4249
  %4 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4250
  %5 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !4251
  %call4 = call %union.tree_node* @vect_gen_niters_for_prolog_loop(%struct._loop_vec_info* %4, %union.tree_node* %5, %union.tree_node** %wide_prolog_niters), !dbg !4252
  store %union.tree_node* %call4, %union.tree_node** %niters_of_prolog_loop, align 8, !dbg !4253
  %6 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4254
  %min_profitable_iters5 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %6, i32 0, i32 4, !dbg !4254
  %7 = load i32, i32* %min_profitable_iters5, align 8, !dbg !4254
  store i32 %7, i32* %min_profitable_iters, align 4, !dbg !4255
  %8 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4256
  %9 = load i32, i32* %min_profitable_iters, align 4, !dbg !4257
  %call6 = call i32 @conservative_cost_threshold(%struct._loop_vec_info* %8, i32 %9), !dbg !4258
  store i32 %call6, i32* %th, align 4, !dbg !4259
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4260
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4261
  %call7 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %11), !dbg !4262
  %12 = load %union.tree_node*, %union.tree_node** %niters_of_prolog_loop, align 8, !dbg !4263
  %13 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !4264
  %14 = load i32, i32* %th, align 4, !dbg !4265
  %call8 = call %struct.loop* @slpeel_tree_peel_loop_to_edge(%struct.loop* %10, %struct.edge_def* %call7, %union.tree_node* %12, %union.tree_node* %13, i8 zeroext 1, i32 %14, i8 zeroext 1, %union.tree_node* null, %struct.gimple_seq_d* null), !dbg !4266
  store %struct.loop* %call8, %struct.loop** %new_loop, align 8, !dbg !4267
  %15 = load %struct.loop*, %struct.loop** %new_loop, align 8, !dbg !4268
  %tobool9 = icmp ne %struct.loop* %15, null, !dbg !4268
  br i1 %tobool9, label %cond.false, label %cond.true, !dbg !4268

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2158, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4268
  br label %cond.end, !dbg !4268

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4268

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4268
  %16 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4269
  %num_iters = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %16, i32 0, i32 2, !dbg !4269
  %17 = load %union.tree_node*, %union.tree_node** %num_iters, align 8, !dbg !4269
  store %union.tree_node* %17, %union.tree_node** %n_iters, align 8, !dbg !4270
  %18 = load %union.tree_node*, %union.tree_node** %n_iters, align 8, !dbg !4271
  %common = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4271
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4271
  %19 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4271
  %20 = load %union.tree_node*, %union.tree_node** %n_iters, align 8, !dbg !4271
  %21 = load %union.tree_node*, %union.tree_node** %niters_of_prolog_loop, align 8, !dbg !4271
  %call10 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %19, %union.tree_node* %20, %union.tree_node* %21), !dbg !4271
  %22 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4272
  %num_iters11 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %22, i32 0, i32 2, !dbg !4272
  store %union.tree_node* %call10, %union.tree_node** %num_iters11, align 8, !dbg !4273
  %23 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4274
  %24 = load %union.tree_node*, %union.tree_node** %wide_prolog_niters, align 8, !dbg !4275
  call void @vect_update_inits_of_drs(%struct._loop_vec_info* %23, %union.tree_node* %24), !dbg !4276
  call void @scev_reset(), !dbg !4277
  call void @free_original_copy_tables(), !dbg !4278
  ret void, !dbg !4279
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vect_build_loop_niters(%struct._loop_vec_info* %loop_vinfo, %struct.gimple_seq_d* %seq) #0 !dbg !4280 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %seq.addr = alloca %struct.gimple_seq_d*, align 8
  %ni_name = alloca %union.tree_node*, align 8
  %var = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %pe = alloca %struct.edge_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %ni = alloca %union.tree_node*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq.addr, metadata !4285, metadata !DIExpression()), !dbg !4286
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni_name, metadata !4287, metadata !DIExpression()), !dbg !4288
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4289, metadata !DIExpression()), !dbg !4290
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !4291, metadata !DIExpression()), !dbg !4292
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !4292
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pe, metadata !4293, metadata !DIExpression()), !dbg !4294
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4295, metadata !DIExpression()), !dbg !4296
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4297
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4297
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4297
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4296
  call void @llvm.dbg.declare(metadata %union.tree_node** %ni, metadata !4298, metadata !DIExpression()), !dbg !4299
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4300
  %num_iters = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 2, !dbg !4300
  %3 = load %union.tree_node*, %union.tree_node** %num_iters, align 8, !dbg !4300
  %call = call %union.tree_node* @unshare_expr(%union.tree_node* %3), !dbg !4301
  store %union.tree_node* %call, %union.tree_node** %ni, align 8, !dbg !4299
  %4 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !4302
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !4302
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4302
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4302
  %call2 = call %union.tree_node* @create_tmp_var(%union.tree_node* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0)), !dbg !4303
  store %union.tree_node* %call2, %union.tree_node** %var, align 8, !dbg !4304
  %6 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4305
  %call3 = call zeroext i8 @add_referenced_var(%union.tree_node* %6), !dbg !4306
  %7 = load %union.tree_node*, %union.tree_node** %ni, align 8, !dbg !4307
  %8 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4308
  %call4 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %7, %struct.gimple_seq_d** %stmts, i8 zeroext 0, %union.tree_node* %8), !dbg !4309
  store %union.tree_node* %call4, %union.tree_node** %ni_name, align 8, !dbg !4310
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4311
  %call5 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %9), !dbg !4312
  store %struct.edge_def* %call5, %struct.edge_def** %pe, align 8, !dbg !4313
  %10 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !4314
  %tobool = icmp ne %struct.gimple_seq_d* %10, null, !dbg !4314
  br i1 %tobool, label %if.then, label %if.end10, !dbg !4316

if.then:                                          ; preds = %entry
  %11 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq.addr, align 8, !dbg !4317
  %tobool6 = icmp ne %struct.gimple_seq_d* %11, null, !dbg !4317
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !4320

if.then7:                                         ; preds = %if.then
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !4321
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %seq.addr, %struct.gimple_seq_d* %12), !dbg !4322
  br label %if.end, !dbg !4322

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !4323, metadata !DIExpression()), !dbg !4325
  %13 = load %struct.edge_def*, %struct.edge_def** %pe, align 8, !dbg !4326
  %14 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !4327
  %call8 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %13, %struct.gimple_seq_d* %14), !dbg !4328
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %new_bb, align 8, !dbg !4325
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !4329
  %tobool9 = icmp ne %struct.basic_block_def* %15, null, !dbg !4329
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !4329

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 1491, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4329
  br label %cond.end, !dbg !4329

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !4329

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4329
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then7
  br label %if.end10, !dbg !4330

if.end10:                                         ; preds = %if.end, %entry
  %16 = load %union.tree_node*, %union.tree_node** %ni_name, align 8, !dbg !4331
  ret %union.tree_node* %16, !dbg !4332
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vect_gen_niters_for_prolog_loop(%struct._loop_vec_info* %loop_vinfo, %union.tree_node* %loop_niters, %union.tree_node** %wide_prolog_niters) #0 !dbg !4333 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %loop_niters.addr = alloca %union.tree_node*, align 8
  %wide_prolog_niters.addr = alloca %union.tree_node**, align 8
  %dr = alloca %struct.data_reference*, align 8
  %loop = alloca %struct.loop*, align 8
  %var = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %iters = alloca %union.tree_node*, align 8
  %iters_name = alloca %union.tree_node*, align 8
  %pe = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %dr_stmt = alloca %union.gimple_statement_d*, align 8
  %stmt_info = alloca %struct._stmt_vec_info*, align 8
  %vectype = alloca %union.tree_node*, align 8
  %vectype_align = alloca i32, align 4
  %niters_type = alloca %union.tree_node*, align 8
  %step = alloca i32, align 4
  %element_size = alloca i32, align 4
  %nelements = alloca i32, align 4
  %byte_misalign = alloca i32, align 4
  %elem_misalign = alloca i32, align 4
  %new_stmts = alloca %struct.gimple_seq_d*, align 8
  %start_addr = alloca %union.tree_node*, align 8
  %ptr_type = alloca %union.tree_node*, align 8
  %size42 = alloca %union.tree_node*, align 8
  %type45 = alloca %union.tree_node*, align 8
  %vectype_size_minus_1 = alloca %union.tree_node*, align 8
  %elem_size_log = alloca %union.tree_node*, align 8
  %nelements_minus_1 = alloca %union.tree_node*, align 8
  %nelements_tree = alloca %union.tree_node*, align 8
  %byte_misalign62 = alloca %union.tree_node*, align 8
  %elem_misalign63 = alloca %union.tree_node*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  %wide_iters = alloca %union.tree_node*, align 8
  %new_bb108 = alloca %struct.basic_block_def*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4336, metadata !DIExpression()), !dbg !4337
  store %union.tree_node* %loop_niters, %union.tree_node** %loop_niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_niters.addr, metadata !4338, metadata !DIExpression()), !dbg !4339
  store %union.tree_node** %wide_prolog_niters, %union.tree_node*** %wide_prolog_niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %wide_prolog_niters.addr, metadata !4340, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !4342, metadata !DIExpression()), !dbg !4343
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4344
  %unaligned_dr = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 7, !dbg !4344
  %1 = load %struct.data_reference*, %struct.data_reference** %unaligned_dr, align 8, !dbg !4344
  store %struct.data_reference* %1, %struct.data_reference** %dr, align 8, !dbg !4343
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4345, metadata !DIExpression()), !dbg !4346
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4347
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 0, !dbg !4347
  %3 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4347
  store %struct.loop* %3, %struct.loop** %loop, align 8, !dbg !4346
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !4348, metadata !DIExpression()), !dbg !4349
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !4350, metadata !DIExpression()), !dbg !4351
  call void @llvm.dbg.declare(metadata %union.tree_node** %iters, metadata !4352, metadata !DIExpression()), !dbg !4353
  call void @llvm.dbg.declare(metadata %union.tree_node** %iters_name, metadata !4354, metadata !DIExpression()), !dbg !4355
  call void @llvm.dbg.declare(metadata %struct.edge_def** %pe, metadata !4356, metadata !DIExpression()), !dbg !4357
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !4358, metadata !DIExpression()), !dbg !4359
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dr_stmt, metadata !4360, metadata !DIExpression()), !dbg !4361
  %4 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !4362
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %4, i32 0, i32 0, !dbg !4362
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4362
  store %union.gimple_statement_d* %5, %union.gimple_statement_d** %dr_stmt, align 8, !dbg !4361
  call void @llvm.dbg.declare(metadata %struct._stmt_vec_info** %stmt_info, metadata !4363, metadata !DIExpression()), !dbg !4364
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_stmt, align 8, !dbg !4365
  %call = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %6), !dbg !4366
  store %struct._stmt_vec_info* %call, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4364
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype, metadata !4367, metadata !DIExpression()), !dbg !4368
  %7 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4369
  %vectype2 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %7, i32 0, i32 5, !dbg !4369
  %8 = load %union.tree_node*, %union.tree_node** %vectype2, align 8, !dbg !4369
  store %union.tree_node* %8, %union.tree_node** %vectype, align 8, !dbg !4368
  call void @llvm.dbg.declare(metadata i32* %vectype_align, metadata !4370, metadata !DIExpression()), !dbg !4371
  %9 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !4372
  %type = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !4372
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 7, !dbg !4372
  %10 = load i32, i32* %align, align 8, !dbg !4372
  %div = udiv i32 %10, 8, !dbg !4373
  store i32 %div, i32* %vectype_align, align 4, !dbg !4371
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters_type, metadata !4374, metadata !DIExpression()), !dbg !4375
  %11 = load %union.tree_node*, %union.tree_node** %loop_niters.addr, align 8, !dbg !4376
  %common = bitcast %union.tree_node* %11 to %struct.tree_common*, !dbg !4376
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4376
  %12 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !4376
  store %union.tree_node* %12, %union.tree_node** %niters_type, align 8, !dbg !4375
  call void @llvm.dbg.declare(metadata i32* %step, metadata !4377, metadata !DIExpression()), !dbg !4378
  store i32 1, i32* %step, align 4, !dbg !4378
  call void @llvm.dbg.declare(metadata i32* %element_size, metadata !4379, metadata !DIExpression()), !dbg !4380
  %13 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !4381
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 1, !dbg !4381
  %14 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !4381
  %common4 = bitcast %union.tree_node* %14 to %struct.tree_common*, !dbg !4381
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !4381
  %15 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !4381
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !4381
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !4381
  %bf.load = load i64, i64* %16, align 8, !dbg !4381
  %bf.clear = and i64 %bf.load, 65535, !dbg !4381
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4381
  %cmp = icmp eq i32 %bf.cast, 14, !dbg !4381
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4381

cond.true:                                        ; preds = %entry
  %17 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !4381
  %ref6 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %17, i32 0, i32 1, !dbg !4381
  %18 = load %union.tree_node*, %union.tree_node** %ref6, align 8, !dbg !4381
  %common7 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !4381
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common7, i32 0, i32 2, !dbg !4381
  %19 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !4381
  %call9 = call i32 @vector_type_mode(%union.tree_node* %19), !dbg !4381
  br label %cond.end, !dbg !4381

cond.false:                                       ; preds = %entry
  %20 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !4381
  %ref10 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %20, i32 0, i32 1, !dbg !4381
  %21 = load %union.tree_node*, %union.tree_node** %ref10, align 8, !dbg !4381
  %common11 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !4381
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common11, i32 0, i32 2, !dbg !4381
  %22 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !4381
  %type13 = bitcast %union.tree_node* %22 to %struct.tree_type*, !dbg !4381
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type13, i32 0, i32 6, !dbg !4381
  %bf.load14 = load i32, i32* %mode, align 4, !dbg !4381
  %bf.lshr = lshr i32 %bf.load14, 16, !dbg !4381
  %bf.clear15 = and i32 %bf.lshr, 255, !dbg !4381
  br label %cond.end, !dbg !4381

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call9, %cond.true ], [ %bf.clear15, %cond.false ], !dbg !4381
  %idxprom = zext i32 %cond to i64, !dbg !4381
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4381
  %23 = load i8, i8* %arrayidx, align 1, !dbg !4381
  %conv = zext i8 %23 to i16, !dbg !4381
  %conv16 = zext i16 %conv to i32, !dbg !4381
  store i32 %conv16, i32* %element_size, align 4, !dbg !4380
  call void @llvm.dbg.declare(metadata i32* %nelements, metadata !4382, metadata !DIExpression()), !dbg !4383
  %24 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !4384
  %type17 = bitcast %union.tree_node* %24 to %struct.tree_type*, !dbg !4384
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type17, i32 0, i32 6, !dbg !4384
  %bf.load18 = load i32, i32* %precision, align 4, !dbg !4384
  %bf.clear19 = and i32 %bf.load18, 1023, !dbg !4384
  %sh_prom = zext i32 %bf.clear19 to i64, !dbg !4384
  %shl = shl i64 1, %sh_prom, !dbg !4384
  %conv20 = trunc i64 %shl to i32, !dbg !4384
  store i32 %conv20, i32* %nelements, align 4, !dbg !4383
  %25 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4385
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %25, i32 0, i32 17, !dbg !4385
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !4385
  %cmp21 = icmp ne %union.gimple_statement_d* %26, null, !dbg !4385
  br i1 %cmp21, label %if.then, label %if.end, !dbg !4387

if.then:                                          ; preds = %cond.end
  %27 = load %struct._stmt_vec_info*, %struct._stmt_vec_info** %stmt_info, align 8, !dbg !4388
  %first_dr23 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %27, i32 0, i32 17, !dbg !4388
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr23, align 8, !dbg !4388
  %call24 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %28), !dbg !4388
  %size = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call24, i32 0, i32 19, !dbg !4388
  %29 = load i32, i32* %size, align 8, !dbg !4388
  store i32 %29, i32* %step, align 4, !dbg !4389
  br label %if.end, !dbg !4390

if.end:                                           ; preds = %if.then, %cond.end
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4391
  %call25 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %30), !dbg !4392
  store %struct.edge_def* %call25, %struct.edge_def** %pe, align 8, !dbg !4393
  %31 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4394
  %peeling_for_alignment = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %31, i32 0, i32 8, !dbg !4394
  %32 = load i32, i32* %peeling_for_alignment, align 8, !dbg !4394
  %cmp26 = icmp sgt i32 %32, 0, !dbg !4396
  br i1 %cmp26, label %if.then28, label %if.else, !dbg !4397

if.then28:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %byte_misalign, metadata !4398, metadata !DIExpression()), !dbg !4400
  %33 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4401
  %peeling_for_alignment29 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %33, i32 0, i32 8, !dbg !4401
  %34 = load i32, i32* %peeling_for_alignment29, align 8, !dbg !4401
  store i32 %34, i32* %byte_misalign, align 4, !dbg !4400
  call void @llvm.dbg.declare(metadata i32* %elem_misalign, metadata !4402, metadata !DIExpression()), !dbg !4403
  %35 = load i32, i32* %byte_misalign, align 4, !dbg !4404
  %36 = load i32, i32* %element_size, align 4, !dbg !4405
  %div30 = sdiv i32 %35, %36, !dbg !4406
  store i32 %div30, i32* %elem_misalign, align 4, !dbg !4403
  %call31 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4407
  %tobool = icmp ne i8 %call31, 0, !dbg !4407
  br i1 %tobool, label %if.then32, label %if.end34, !dbg !4409

if.then32:                                        ; preds = %if.then28
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4410
  %38 = load i32, i32* %byte_misalign, align 4, !dbg !4411
  %call33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0), i32 %38), !dbg !4412
  br label %if.end34, !dbg !4412

if.end34:                                         ; preds = %if.then32, %if.then28
  %39 = load %union.tree_node*, %union.tree_node** %niters_type, align 8, !dbg !4413
  %40 = load i32, i32* %nelements, align 4, !dbg !4414
  %41 = load i32, i32* %elem_misalign, align 4, !dbg !4415
  %sub = sub nsw i32 %40, %41, !dbg !4416
  %42 = load i32, i32* %nelements, align 4, !dbg !4417
  %sub35 = sub nsw i32 %42, 1, !dbg !4418
  %and = and i32 %sub, %sub35, !dbg !4419
  %43 = load i32, i32* %step, align 4, !dbg !4420
  %div36 = sdiv i32 %and, %43, !dbg !4421
  %conv37 = sext i32 %div36 to i64, !dbg !4422
  %call38 = call %union.tree_node* @build_int_cst(%union.tree_node* %39, i64 %conv37), !dbg !4423
  store %union.tree_node* %call38, %union.tree_node** %iters, align 8, !dbg !4424
  br label %if.end76, !dbg !4425

if.else:                                          ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_stmts, metadata !4426, metadata !DIExpression()), !dbg !4428
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !4428
  call void @llvm.dbg.declare(metadata %union.tree_node** %start_addr, metadata !4429, metadata !DIExpression()), !dbg !4430
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_stmt, align 8, !dbg !4431
  %45 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4432
  %call39 = call %union.tree_node* @vect_create_addr_base_for_vector_ref(%union.gimple_statement_d* %44, %struct.gimple_seq_d** %new_stmts, %union.tree_node* null, %struct.loop* %45), !dbg !4433
  store %union.tree_node* %call39, %union.tree_node** %start_addr, align 8, !dbg !4430
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptr_type, metadata !4434, metadata !DIExpression()), !dbg !4435
  %46 = load %union.tree_node*, %union.tree_node** %start_addr, align 8, !dbg !4436
  %common40 = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !4436
  %type41 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common40, i32 0, i32 2, !dbg !4436
  %47 = load %union.tree_node*, %union.tree_node** %type41, align 8, !dbg !4436
  store %union.tree_node* %47, %union.tree_node** %ptr_type, align 8, !dbg !4435
  call void @llvm.dbg.declare(metadata %union.tree_node** %size42, metadata !4437, metadata !DIExpression()), !dbg !4438
  %48 = load %union.tree_node*, %union.tree_node** %ptr_type, align 8, !dbg !4439
  %type43 = bitcast %union.tree_node* %48 to %struct.tree_type*, !dbg !4439
  %size44 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type43, i32 0, i32 2, !dbg !4439
  %49 = load %union.tree_node*, %union.tree_node** %size44, align 8, !dbg !4439
  store %union.tree_node* %49, %union.tree_node** %size42, align 8, !dbg !4438
  call void @llvm.dbg.declare(metadata %union.tree_node** %type45, metadata !4440, metadata !DIExpression()), !dbg !4441
  %50 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 3), align 8, !dbg !4442
  %51 = load %union.tree_node*, %union.tree_node** %size42, align 8, !dbg !4443
  %call46 = call i64 @tree_low_cst(%union.tree_node* %51, i32 1), !dbg !4444
  %conv47 = trunc i64 %call46 to i32, !dbg !4444
  %call48 = call %union.tree_node* %50(i32 %conv47, i32 1), !dbg !4445
  store %union.tree_node* %call48, %union.tree_node** %type45, align 8, !dbg !4441
  call void @llvm.dbg.declare(metadata %union.tree_node** %vectype_size_minus_1, metadata !4446, metadata !DIExpression()), !dbg !4447
  %52 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4448
  %53 = load i32, i32* %vectype_align, align 4, !dbg !4449
  %sub49 = sub nsw i32 %53, 1, !dbg !4450
  %conv50 = sext i32 %sub49 to i64, !dbg !4449
  %call51 = call %union.tree_node* @build_int_cst(%union.tree_node* %52, i64 %conv50), !dbg !4451
  store %union.tree_node* %call51, %union.tree_node** %vectype_size_minus_1, align 8, !dbg !4447
  call void @llvm.dbg.declare(metadata %union.tree_node** %elem_size_log, metadata !4452, metadata !DIExpression()), !dbg !4453
  %54 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4454
  %55 = load i32, i32* %vectype_align, align 4, !dbg !4455
  %56 = load i32, i32* %nelements, align 4, !dbg !4456
  %div52 = sdiv i32 %55, %56, !dbg !4457
  %conv53 = sext i32 %div52 to i64, !dbg !4455
  %call54 = call i32 @exact_log2(i64 %conv53), !dbg !4458
  %conv55 = sext i32 %call54 to i64, !dbg !4458
  %call56 = call %union.tree_node* @build_int_cst(%union.tree_node* %54, i64 %conv55), !dbg !4459
  store %union.tree_node* %call56, %union.tree_node** %elem_size_log, align 8, !dbg !4453
  call void @llvm.dbg.declare(metadata %union.tree_node** %nelements_minus_1, metadata !4460, metadata !DIExpression()), !dbg !4461
  %57 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4462
  %58 = load i32, i32* %nelements, align 4, !dbg !4463
  %sub57 = sub nsw i32 %58, 1, !dbg !4464
  %conv58 = sext i32 %sub57 to i64, !dbg !4463
  %call59 = call %union.tree_node* @build_int_cst(%union.tree_node* %57, i64 %conv58), !dbg !4465
  store %union.tree_node* %call59, %union.tree_node** %nelements_minus_1, align 8, !dbg !4461
  call void @llvm.dbg.declare(metadata %union.tree_node** %nelements_tree, metadata !4466, metadata !DIExpression()), !dbg !4467
  %59 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4468
  %60 = load i32, i32* %nelements, align 4, !dbg !4469
  %conv60 = sext i32 %60 to i64, !dbg !4469
  %call61 = call %union.tree_node* @build_int_cst(%union.tree_node* %59, i64 %conv60), !dbg !4470
  store %union.tree_node* %call61, %union.tree_node** %nelements_tree, align 8, !dbg !4467
  call void @llvm.dbg.declare(metadata %union.tree_node** %byte_misalign62, metadata !4471, metadata !DIExpression()), !dbg !4472
  call void @llvm.dbg.declare(metadata %union.tree_node** %elem_misalign63, metadata !4473, metadata !DIExpression()), !dbg !4474
  %61 = load %struct.edge_def*, %struct.edge_def** %pe, align 8, !dbg !4475
  %62 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmts, align 8, !dbg !4476
  %call64 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %61, %struct.gimple_seq_d* %62), !dbg !4477
  store %struct.basic_block_def* %call64, %struct.basic_block_def** %new_bb, align 8, !dbg !4478
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !4479
  %tobool65 = icmp ne %struct.basic_block_def* %63, null, !dbg !4479
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !4479

cond.true66:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2016, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4479
  br label %cond.end68, !dbg !4479

cond.false67:                                     ; preds = %if.else
  br label %cond.end68, !dbg !4479

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !4479
  %64 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4480
  %65 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4480
  %66 = load %union.tree_node*, %union.tree_node** %start_addr, align 8, !dbg !4480
  %call70 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %65, %union.tree_node* %66), !dbg !4480
  %67 = load %union.tree_node*, %union.tree_node** %vectype_size_minus_1, align 8, !dbg !4480
  %call71 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %64, %union.tree_node* %call70, %union.tree_node* %67), !dbg !4480
  store %union.tree_node* %call71, %union.tree_node** %byte_misalign62, align 8, !dbg !4481
  %68 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4482
  %69 = load %union.tree_node*, %union.tree_node** %byte_misalign62, align 8, !dbg !4482
  %70 = load %union.tree_node*, %union.tree_node** %elem_size_log, align 8, !dbg !4482
  %call72 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 84, %union.tree_node* %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !4482
  store %union.tree_node* %call72, %union.tree_node** %elem_misalign63, align 8, !dbg !4483
  %71 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4484
  %72 = load %union.tree_node*, %union.tree_node** %nelements_tree, align 8, !dbg !4484
  %73 = load %union.tree_node*, %union.tree_node** %elem_misalign63, align 8, !dbg !4484
  %call73 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %71, %union.tree_node* %72, %union.tree_node* %73), !dbg !4484
  store %union.tree_node* %call73, %union.tree_node** %iters, align 8, !dbg !4485
  %74 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !4486
  %75 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4486
  %76 = load %union.tree_node*, %union.tree_node** %nelements_minus_1, align 8, !dbg !4486
  %call74 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %74, %union.tree_node* %75, %union.tree_node* %76), !dbg !4486
  store %union.tree_node* %call74, %union.tree_node** %iters, align 8, !dbg !4487
  %77 = load %union.tree_node*, %union.tree_node** %niters_type, align 8, !dbg !4488
  %78 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4488
  %call75 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %77, %union.tree_node* %78), !dbg !4488
  store %union.tree_node* %call75, %union.tree_node** %iters, align 8, !dbg !4489
  br label %if.end76

if.end76:                                         ; preds = %cond.end68, %if.end34
  %79 = load %union.tree_node*, %union.tree_node** %loop_niters.addr, align 8, !dbg !4490
  %base77 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !4490
  %80 = bitcast %struct.tree_base* %base77 to i64*, !dbg !4490
  %bf.load78 = load i64, i64* %80, align 8, !dbg !4490
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !4490
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !4490
  %cmp81 = icmp ne i32 %bf.cast80, 23, !dbg !4492
  br i1 %cmp81, label %if.then83, label %if.end85, !dbg !4493

if.then83:                                        ; preds = %if.end76
  %81 = load %union.tree_node*, %union.tree_node** %niters_type, align 8, !dbg !4494
  %82 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4494
  %83 = load %union.tree_node*, %union.tree_node** %loop_niters.addr, align 8, !dbg !4494
  %call84 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 80, %union.tree_node* %81, %union.tree_node* %82, %union.tree_node* %83), !dbg !4494
  store %union.tree_node* %call84, %union.tree_node** %iters, align 8, !dbg !4495
  br label %if.end85, !dbg !4496

if.end85:                                         ; preds = %if.then83, %if.end76
  %call86 = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4497
  %tobool87 = icmp ne i8 %call86, 0, !dbg !4497
  br i1 %tobool87, label %if.then88, label %if.end90, !dbg !4499

if.then88:                                        ; preds = %if.end85
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4500
  %call89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0)), !dbg !4502
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4503
  %86 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4504
  call void @print_generic_expr(%struct._IO_FILE* %85, %union.tree_node* %86, i32 2), !dbg !4505
  br label %if.end90, !dbg !4506

if.end90:                                         ; preds = %if.then88, %if.end85
  %87 = load %union.tree_node*, %union.tree_node** %niters_type, align 8, !dbg !4507
  %call91 = call %union.tree_node* @create_tmp_var(%union.tree_node* %87, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.27, i64 0, i64 0)), !dbg !4508
  store %union.tree_node* %call91, %union.tree_node** %var, align 8, !dbg !4509
  %88 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4510
  %call92 = call zeroext i8 @add_referenced_var(%union.tree_node* %88), !dbg !4511
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !4512
  %89 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4513
  %90 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4514
  %call93 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %89, %struct.gimple_seq_d** %stmts, i8 zeroext 0, %union.tree_node* %90), !dbg !4515
  store %union.tree_node* %call93, %union.tree_node** %iters_name, align 8, !dbg !4516
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4517
  %92 = load %union.tree_node*, %union.tree_node** %niters_type, align 8, !dbg !4519
  %call94 = call zeroext i8 @types_compatible_p(%union.tree_node* %91, %union.tree_node* %92), !dbg !4520
  %tobool95 = icmp ne i8 %call94, 0, !dbg !4520
  br i1 %tobool95, label %if.then96, label %if.else97, !dbg !4521

if.then96:                                        ; preds = %if.end90
  %93 = load %union.tree_node*, %union.tree_node** %iters_name, align 8, !dbg !4522
  %94 = load %union.tree_node**, %union.tree_node*** %wide_prolog_niters.addr, align 8, !dbg !4523
  store %union.tree_node* %93, %union.tree_node** %94, align 8, !dbg !4524
  br label %if.end105, !dbg !4525

if.else97:                                        ; preds = %if.end90
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !4526, metadata !DIExpression()), !dbg !4528
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %seq, align 8, !dbg !4528
  call void @llvm.dbg.declare(metadata %union.tree_node** %wide_iters, metadata !4529, metadata !DIExpression()), !dbg !4530
  %95 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4531
  %96 = load %union.tree_node*, %union.tree_node** %iters, align 8, !dbg !4531
  %call98 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %95, %union.tree_node* %96), !dbg !4531
  store %union.tree_node* %call98, %union.tree_node** %wide_iters, align 8, !dbg !4530
  %97 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !4532
  %call99 = call %union.tree_node* @create_tmp_var(%union.tree_node* %97, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.27, i64 0, i64 0)), !dbg !4533
  store %union.tree_node* %call99, %union.tree_node** %var, align 8, !dbg !4534
  %98 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4535
  %call100 = call zeroext i8 @add_referenced_var(%union.tree_node* %98), !dbg !4536
  %99 = load %union.tree_node*, %union.tree_node** %wide_iters, align 8, !dbg !4537
  %100 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4538
  %call101 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %99, %struct.gimple_seq_d** %seq, i8 zeroext 0, %union.tree_node* %100), !dbg !4539
  %101 = load %union.tree_node**, %union.tree_node*** %wide_prolog_niters.addr, align 8, !dbg !4540
  store %union.tree_node* %call101, %union.tree_node** %101, align 8, !dbg !4541
  %102 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4542
  %tobool102 = icmp ne %struct.gimple_seq_d* %102, null, !dbg !4542
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !4544

if.then103:                                       ; preds = %if.else97
  %103 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4545
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %stmts, %struct.gimple_seq_d* %103), !dbg !4546
  br label %if.end104, !dbg !4546

if.end104:                                        ; preds = %if.then103, %if.else97
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then96
  %104 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !4547
  %tobool106 = icmp ne %struct.gimple_seq_d* %104, null, !dbg !4547
  br i1 %tobool106, label %if.then107, label %if.end115, !dbg !4549

if.then107:                                       ; preds = %if.end105
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb108, metadata !4550, metadata !DIExpression()), !dbg !4552
  %105 = load %struct.edge_def*, %struct.edge_def** %pe, align 8, !dbg !4553
  %106 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !4554
  %call109 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %105, %struct.gimple_seq_d* %106), !dbg !4555
  store %struct.basic_block_def* %call109, %struct.basic_block_def** %new_bb108, align 8, !dbg !4552
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb108, align 8, !dbg !4556
  %tobool110 = icmp ne %struct.basic_block_def* %107, null, !dbg !4556
  br i1 %tobool110, label %cond.true111, label %cond.false112, !dbg !4556

cond.true111:                                     ; preds = %if.then107
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2067, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4556
  br label %cond.end113, !dbg !4556

cond.false112:                                    ; preds = %if.then107
  br label %cond.end113, !dbg !4556

cond.end113:                                      ; preds = %cond.false112, %cond.true111
  %cond114 = phi i32 [ 0, %cond.true111 ], [ 0, %cond.false112 ], !dbg !4556
  br label %if.end115, !dbg !4557

if.end115:                                        ; preds = %cond.end113, %if.end105
  %108 = load %union.tree_node*, %union.tree_node** %iters_name, align 8, !dbg !4558
  ret %union.tree_node* %108, !dbg !4559
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @vect_update_inits_of_drs(%struct._loop_vec_info* %loop_vinfo, %union.tree_node* %niters) #0 !dbg !4560 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %niters.addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %datarefs = alloca %struct.VEC_data_reference_p_heap*, align 8
  %dr = alloca %struct.data_reference*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4563, metadata !DIExpression()), !dbg !4564
  store %union.tree_node* %niters, %union.tree_node** %niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters.addr, metadata !4565, metadata !DIExpression()), !dbg !4566
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4567, metadata !DIExpression()), !dbg !4568
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_heap** %datarefs, metadata !4569, metadata !DIExpression()), !dbg !4570
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4571
  %datarefs1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 10, !dbg !4571
  %1 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs1, align 8, !dbg !4571
  store %struct.VEC_data_reference_p_heap* %1, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !4570
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr, metadata !4572, metadata !DIExpression()), !dbg !4573
  %call = call zeroext i8 @vect_print_dump_info(i32 9), !dbg !4574
  %tobool = icmp ne i8 %call, 0, !dbg !4574
  br i1 %tobool, label %if.then, label %if.end, !dbg !4576

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4577
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.28, i64 0, i64 0)), !dbg !4578
  br label %if.end, !dbg !4578

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %i, align 4, !dbg !4579
  br label %for.cond, !dbg !4581

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !4582
  %tobool3 = icmp ne %struct.VEC_data_reference_p_heap* %3, null, !dbg !4582
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !4582

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_data_reference_p_heap*, %struct.VEC_data_reference_p_heap** %datarefs, align 8, !dbg !4582
  %base = getelementptr inbounds %struct.VEC_data_reference_p_heap, %struct.VEC_data_reference_p_heap* %4, i32 0, i32 0, !dbg !4582
  br label %cond.end, !dbg !4582

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !4582

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_data_reference_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4582
  %5 = load i32, i32* %i, align 4, !dbg !4582
  %call4 = call i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %cond, i32 %5, %struct.data_reference** %dr), !dbg !4582
  %tobool5 = icmp ne i32 %call4, 0, !dbg !4584
  br i1 %tobool5, label %for.body, label %for.end, !dbg !4584

for.body:                                         ; preds = %cond.end
  %6 = load %struct.data_reference*, %struct.data_reference** %dr, align 8, !dbg !4585
  %7 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !4586
  call void @vect_update_init_of_dr(%struct.data_reference* %6, %union.tree_node* %7), !dbg !4587
  br label %for.inc, !dbg !4587

for.inc:                                          ; preds = %for.body
  %8 = load i32, i32* %i, align 4, !dbg !4588
  %inc = add i32 %8, 1, !dbg !4588
  store i32 %inc, i32* %i, align 4, !dbg !4588
  br label %for.cond, !dbg !4589, !llvm.loop !4590

for.end:                                          ; preds = %cond.end
  ret void, !dbg !4592
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vect_loop_versioning(%struct._loop_vec_info* %loop_vinfo, i8 zeroext %do_versioning, %union.tree_node** %cond_expr, %struct.gimple_seq_d** %cond_expr_stmt_list) #0 !dbg !4593 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %do_versioning.addr = alloca i8, align 1
  %cond_expr.addr = alloca %union.tree_node**, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d**, align 8
  %loop = alloca %struct.loop*, align 8
  %condition_bb = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %cond_exp_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %merge_bb = alloca %struct.basic_block_def*, align 8
  %new_exit_bb = alloca %struct.basic_block_def*, align 8
  %new_exit_e = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %orig_phi = alloca %union.gimple_statement_d*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %arg = alloca %union.tree_node*, align 8
  %prob = alloca i32, align 4
  %gimplify_stmt_list = alloca %struct.gimple_seq_d*, align 8
  %scalar_loop_iters = alloca %union.tree_node*, align 8
  %min_profitable_iters = alloca i32, align 4
  %th = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp66 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4597, metadata !DIExpression()), !dbg !4598
  store i8 %do_versioning, i8* %do_versioning.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %do_versioning.addr, metadata !4599, metadata !DIExpression()), !dbg !4600
  store %union.tree_node** %cond_expr, %union.tree_node*** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cond_expr.addr, metadata !4601, metadata !DIExpression()), !dbg !4602
  store %struct.gimple_seq_d** %cond_expr_stmt_list, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, metadata !4603, metadata !DIExpression()), !dbg !4604
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4605, metadata !DIExpression()), !dbg !4606
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4607
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4607
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4607
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4606
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %condition_bb, metadata !4608, metadata !DIExpression()), !dbg !4609
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4610, metadata !DIExpression()), !dbg !4611
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %cond_exp_gsi, metadata !4612, metadata !DIExpression()), !dbg !4613
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %merge_bb, metadata !4614, metadata !DIExpression()), !dbg !4615
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_exit_bb, metadata !4616, metadata !DIExpression()), !dbg !4617
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_exit_e, metadata !4618, metadata !DIExpression()), !dbg !4619
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4620, metadata !DIExpression()), !dbg !4621
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_phi, metadata !4622, metadata !DIExpression()), !dbg !4623
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !4624, metadata !DIExpression()), !dbg !4625
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4626, metadata !DIExpression()), !dbg !4627
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !4628, metadata !DIExpression()), !dbg !4629
  store i32 8000, i32* %prob, align 4, !dbg !4629
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %gimplify_stmt_list, metadata !4630, metadata !DIExpression()), !dbg !4631
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !4631
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_loop_iters, metadata !4632, metadata !DIExpression()), !dbg !4633
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4634
  %num_iters = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 2, !dbg !4634
  %3 = load %union.tree_node*, %union.tree_node** %num_iters, align 8, !dbg !4634
  store %union.tree_node* %3, %union.tree_node** %scalar_loop_iters, align 8, !dbg !4633
  call void @llvm.dbg.declare(metadata i32* %min_profitable_iters, metadata !4635, metadata !DIExpression()), !dbg !4636
  store i32 0, i32* %min_profitable_iters, align 4, !dbg !4636
  call void @llvm.dbg.declare(metadata i32* %th, metadata !4637, metadata !DIExpression()), !dbg !4638
  %4 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4639
  %min_profitable_iters2 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %4, i32 0, i32 4, !dbg !4639
  %5 = load i32, i32* %min_profitable_iters2, align 8, !dbg !4639
  store i32 %5, i32* %min_profitable_iters, align 4, !dbg !4640
  %6 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4641
  %7 = load i32, i32* %min_profitable_iters, align 4, !dbg !4642
  %call = call i32 @conservative_cost_threshold(%struct._loop_vec_info* %6, i32 %7), !dbg !4643
  store i32 %call, i32* %th, align 4, !dbg !4644
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4645
  %9 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !4645
  %10 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !4645
  %common = bitcast %union.tree_node* %10 to %struct.tree_common*, !dbg !4645
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4645
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4645
  %12 = load i32, i32* %th, align 4, !dbg !4645
  %conv = zext i32 %12 to i64, !dbg !4645
  %call3 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 %conv), !dbg !4645
  %call4 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %8, %union.tree_node* %9, %union.tree_node* %call3), !dbg !4645
  %13 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4646
  store %union.tree_node* %call4, %union.tree_node** %13, align 8, !dbg !4647
  %14 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4648
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !4649
  %16 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4650
  %call5 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %15, %struct.gimple_seq_d** %16, i8 zeroext 0, %union.tree_node* null), !dbg !4651
  %17 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4652
  store %union.tree_node* %call5, %union.tree_node** %17, align 8, !dbg !4653
  %18 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4654
  %may_misalign_stmts = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %18, i32 0, i32 13, !dbg !4654
  %19 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts, align 8, !dbg !4654
  %tobool = icmp ne %struct.VEC_gimple_heap* %19, null, !dbg !4654
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4654

cond.true:                                        ; preds = %entry
  %20 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4654
  %may_misalign_stmts6 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %20, i32 0, i32 13, !dbg !4654
  %21 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts6, align 8, !dbg !4654
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %21, i32 0, i32 0, !dbg !4654
  br label %cond.end, !dbg !4654

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4654

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4654
  %call7 = call i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond), !dbg !4654
  %cmp = icmp ugt i32 %call7, 0, !dbg !4654
  br i1 %cmp, label %if.then, label %if.end, !dbg !4656

if.then:                                          ; preds = %cond.end
  %22 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4657
  %23 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4658
  %24 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4659
  call void @vect_create_cond_for_align_checks(%struct._loop_vec_info* %22, %union.tree_node** %23, %struct.gimple_seq_d** %24), !dbg !4660
  br label %if.end, !dbg !4660

if.end:                                           ; preds = %if.then, %cond.end
  %25 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4661
  %may_alias_ddrs = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %25, i32 0, i32 12, !dbg !4661
  %26 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4661
  %tobool9 = icmp ne %struct.VEC_ddr_p_heap* %26, null, !dbg !4661
  br i1 %tobool9, label %cond.true10, label %cond.false13, !dbg !4661

cond.true10:                                      ; preds = %if.end
  %27 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4661
  %may_alias_ddrs11 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %27, i32 0, i32 12, !dbg !4661
  %28 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs11, align 8, !dbg !4661
  %base12 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %28, i32 0, i32 0, !dbg !4661
  br label %cond.end14, !dbg !4661

cond.false13:                                     ; preds = %if.end
  br label %cond.end14, !dbg !4661

cond.end14:                                       ; preds = %cond.false13, %cond.true10
  %cond15 = phi %struct.VEC_ddr_p_base* [ %base12, %cond.true10 ], [ null, %cond.false13 ], !dbg !4661
  %call16 = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond15), !dbg !4661
  %cmp17 = icmp ugt i32 %call16, 0, !dbg !4661
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !4663

if.then19:                                        ; preds = %cond.end14
  %29 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4664
  %30 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4665
  %31 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4666
  call void @vect_create_cond_for_alias_checks(%struct._loop_vec_info* %29, %union.tree_node** %30, %struct.gimple_seq_d** %31), !dbg !4667
  br label %if.end20, !dbg !4667

if.end20:                                         ; preds = %if.then19, %cond.end14
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4668
  %33 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4668
  %34 = load %union.tree_node*, %union.tree_node** %33, align 8, !dbg !4668
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4668
  %call21 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 102, %union.tree_node* %32, %union.tree_node* %34, %union.tree_node* %35), !dbg !4668
  %36 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4669
  store %union.tree_node* %call21, %union.tree_node** %36, align 8, !dbg !4670
  %37 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4671
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !4672
  %call22 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %38, %struct.gimple_seq_d** %gimplify_stmt_list, i8 zeroext 1, %union.tree_node* null), !dbg !4673
  %39 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4674
  store %union.tree_node* %call22, %union.tree_node** %39, align 8, !dbg !4675
  %40 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4676
  %41 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !4677
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %40, %struct.gimple_seq_d* %41), !dbg !4678
  %42 = load i8, i8* %do_versioning.addr, align 1, !dbg !4679
  %tobool23 = icmp ne i8 %42, 0, !dbg !4679
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !4681

if.then24:                                        ; preds = %if.end20
  br label %return, !dbg !4682

if.end25:                                         ; preds = %if.end20
  call void @initialize_original_copy_tables(), !dbg !4683
  %43 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4684
  %44 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4685
  %45 = load %union.tree_node*, %union.tree_node** %44, align 8, !dbg !4686
  %46 = bitcast %union.tree_node* %45 to i8*, !dbg !4686
  %47 = load i32, i32* %prob, align 4, !dbg !4687
  %48 = load i32, i32* %prob, align 4, !dbg !4688
  %49 = load i32, i32* %prob, align 4, !dbg !4689
  %sub = sub i32 10000, %49, !dbg !4690
  %call26 = call %struct.loop* @loop_version(%struct.loop* %43, i8* %46, %struct.basic_block_def** %condition_bb, i32 %47, i32 %48, i32 %sub, i8 zeroext 1), !dbg !4691
  call void @free_original_copy_tables(), !dbg !4692
  %50 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4693
  %call27 = call %struct.edge_def* @single_exit(%struct.loop* %50), !dbg !4694
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call27, i32 0, i32 1, !dbg !4695
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4695
  store %struct.basic_block_def* %51, %struct.basic_block_def** %merge_bb, align 8, !dbg !4696
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !4697
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 0, !dbg !4697
  %53 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4697
  %tobool28 = icmp ne %struct.VEC_edge_gc* %53, null, !dbg !4697
  br i1 %tobool28, label %cond.true29, label %cond.false32, !dbg !4697

cond.true29:                                      ; preds = %if.end25
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !4697
  %preds30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !4697
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds30, align 8, !dbg !4697
  %base31 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !4697
  br label %cond.end33, !dbg !4697

cond.false32:                                     ; preds = %if.end25
  br label %cond.end33, !dbg !4697

cond.end33:                                       ; preds = %cond.false32, %cond.true29
  %cond34 = phi %struct.VEC_edge_base* [ %base31, %cond.true29 ], [ null, %cond.false32 ], !dbg !4697
  %call35 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond34), !dbg !4697
  %cmp36 = icmp eq i32 %call35, 2, !dbg !4697
  br i1 %cmp36, label %cond.false39, label %cond.true38, !dbg !4697

cond.true38:                                      ; preds = %cond.end33
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2543, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4697
  br label %cond.end40, !dbg !4697

cond.false39:                                     ; preds = %cond.end33
  br label %cond.end40, !dbg !4697

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !4697
  %56 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4698
  %call42 = call %struct.edge_def* @single_exit(%struct.loop* %56), !dbg !4699
  %call43 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call42), !dbg !4700
  store %struct.basic_block_def* %call43, %struct.basic_block_def** %new_exit_bb, align 8, !dbg !4701
  %57 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4702
  %call44 = call %struct.edge_def* @single_exit(%struct.loop* %57), !dbg !4703
  store %struct.edge_def* %call44, %struct.edge_def** %new_exit_e, align 8, !dbg !4704
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %new_exit_bb, align 8, !dbg !4705
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 1, !dbg !4705
  %59 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4705
  %tobool45 = icmp ne %struct.VEC_edge_gc* %59, null, !dbg !4705
  br i1 %tobool45, label %cond.true46, label %cond.false49, !dbg !4705

cond.true46:                                      ; preds = %cond.end40
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %new_exit_bb, align 8, !dbg !4705
  %succs47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !4705
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs47, align 8, !dbg !4705
  %base48 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !4705
  br label %cond.end50, !dbg !4705

cond.false49:                                     ; preds = %cond.end40
  br label %cond.end50, !dbg !4705

cond.end50:                                       ; preds = %cond.false49, %cond.true46
  %cond51 = phi %struct.VEC_edge_base* [ %base48, %cond.true46 ], [ null, %cond.false49 ], !dbg !4705
  %call52 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond51, i32 0), !dbg !4705
  store %struct.edge_def* %call52, %struct.edge_def** %e, align 8, !dbg !4706
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !4707
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %62), !dbg !4709
  %63 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4709
  %64 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4709
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %63, i8* align 8 %64, i64 24, i1 false), !dbg !4709
  br label %for.cond, !dbg !4710

for.cond:                                         ; preds = %for.inc, %cond.end50
  %call53 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4711
  %tobool54 = icmp ne i8 %call53, 0, !dbg !4713
  %lnot = xor i1 %tobool54, true, !dbg !4713
  br i1 %lnot, label %for.body, label %for.end, !dbg !4714

for.body:                                         ; preds = %for.cond
  %call55 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4715
  store %union.gimple_statement_d* %call55, %union.gimple_statement_d** %orig_phi, align 8, !dbg !4717
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !4718
  %call56 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %65), !dbg !4718
  %call57 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call56), !dbg !4718
  %ssa_name = bitcast %union.tree_node* %call57 to %struct.tree_ssa_name*, !dbg !4718
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !4718
  %66 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4718
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %new_exit_bb, align 8, !dbg !4719
  %call58 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %66, %struct.basic_block_def* %67), !dbg !4720
  store %union.gimple_statement_d* %call58, %union.gimple_statement_d** %new_phi, align 8, !dbg !4721
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !4722
  %69 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4722
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 6, !dbg !4722
  %70 = load i32, i32* %dest_idx, align 4, !dbg !4722
  %call59 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %68, i32 %70), !dbg !4722
  %call60 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call59), !dbg !4722
  store %union.tree_node* %call60, %union.tree_node** %arg, align 8, !dbg !4723
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !4724
  %72 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4725
  %73 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !4726
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !4727
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4728
  %call61 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %74, %struct.edge_def* %75), !dbg !4729
  call void @add_phi_arg(%union.gimple_statement_d* %71, %union.tree_node* %72, %struct.edge_def* %73, i32 %call61), !dbg !4730
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !4731
  %77 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4732
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !4733
  %call62 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %78), !dbg !4733
  %call63 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call62), !dbg !4733
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %76, %struct.edge_def* %77, %union.tree_node* %call63), !dbg !4734
  br label %for.inc, !dbg !4735

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4736
  br label %for.cond, !dbg !4737, !llvm.loop !4738

for.end:                                          ; preds = %for.cond
  call void @update_ssa(i32 2048), !dbg !4740
  %79 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4741
  %80 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %79, align 8, !dbg !4743
  %tobool64 = icmp ne %struct.gimple_seq_d* %80, null, !dbg !4743
  br i1 %tobool64, label %if.then65, label %if.end67, !dbg !4744

if.then65:                                        ; preds = %for.end
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %condition_bb, align 8, !dbg !4745
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp66, %struct.basic_block_def* %81), !dbg !4747
  %82 = bitcast %struct.gimple_stmt_iterator* %cond_exp_gsi to i8*, !dbg !4747
  %83 = bitcast %struct.gimple_stmt_iterator* %tmp66 to i8*, !dbg !4747
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 24, i1 false), !dbg !4747
  %84 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4748
  %85 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %84, align 8, !dbg !4749
  call void @gsi_insert_seq_before(%struct.gimple_stmt_iterator* %cond_exp_gsi, %struct.gimple_seq_d* %85, i32 1), !dbg !4750
  %86 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4751
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %86, align 8, !dbg !4752
  br label %if.end67, !dbg !4753

if.end67:                                         ; preds = %if.then65, %for.end
  %87 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4754
  store %union.tree_node* null, %union.tree_node** %87, align 8, !dbg !4755
  br label %return, !dbg !4756

return:                                           ; preds = %if.end67, %if.then24
  ret void, !dbg !4756
}

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @vect_create_cond_for_align_checks(%struct._loop_vec_info* %loop_vinfo, %union.tree_node** %cond_expr, %struct.gimple_seq_d** %cond_expr_stmt_list) #0 !dbg !4757 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %cond_expr.addr = alloca %union.tree_node**, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d**, align 8
  %loop = alloca %struct.loop*, align 8
  %may_misalign_stmts = alloca %struct.VEC_gimple_heap*, align 8
  %ref_stmt = alloca %union.gimple_statement_d*, align 8
  %mask = alloca i32, align 4
  %mask_cst = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %psize = alloca %union.tree_node*, align 8
  %int_ptrsize_type = alloca %union.tree_node*, align 8
  %tmp_name = alloca [20 x i8], align 16
  %or_tmp_name = alloca %union.tree_node*, align 8
  %and_tmp = alloca %union.tree_node*, align 8
  %and_tmp_name = alloca %union.tree_node*, align 8
  %and_stmt = alloca %union.gimple_statement_d*, align 8
  %ptrsize_zero = alloca %union.tree_node*, align 8
  %part_cond_expr = alloca %union.tree_node*, align 8
  %new_stmt_list = alloca %struct.gimple_seq_d*, align 8
  %addr_base = alloca %union.tree_node*, align 8
  %addr_tmp = alloca %union.tree_node*, align 8
  %addr_tmp_name = alloca %union.tree_node*, align 8
  %or_tmp = alloca %union.tree_node*, align 8
  %new_or_tmp_name = alloca %union.tree_node*, align 8
  %addr_stmt = alloca %union.gimple_statement_d*, align 8
  %or_stmt = alloca %union.gimple_statement_d*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4760, metadata !DIExpression()), !dbg !4761
  store %union.tree_node** %cond_expr, %union.tree_node*** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cond_expr.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  store %struct.gimple_seq_d** %cond_expr_stmt_list, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, metadata !4764, metadata !DIExpression()), !dbg !4765
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4766, metadata !DIExpression()), !dbg !4767
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4768
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4768
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4768
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4767
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_heap** %may_misalign_stmts, metadata !4769, metadata !DIExpression()), !dbg !4770
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4771
  %may_misalign_stmts2 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 13, !dbg !4771
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts2, align 8, !dbg !4771
  store %struct.VEC_gimple_heap* %3, %struct.VEC_gimple_heap** %may_misalign_stmts, align 8, !dbg !4770
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ref_stmt, metadata !4772, metadata !DIExpression()), !dbg !4773
  call void @llvm.dbg.declare(metadata i32* %mask, metadata !4774, metadata !DIExpression()), !dbg !4775
  %4 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4776
  %ptr_mask = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %4, i32 0, i32 9, !dbg !4776
  %5 = load i32, i32* %ptr_mask, align 4, !dbg !4776
  store i32 %5, i32* %mask, align 4, !dbg !4775
  call void @llvm.dbg.declare(metadata %union.tree_node** %mask_cst, metadata !4777, metadata !DIExpression()), !dbg !4778
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4779, metadata !DIExpression()), !dbg !4780
  call void @llvm.dbg.declare(metadata %union.tree_node** %psize, metadata !4781, metadata !DIExpression()), !dbg !4782
  call void @llvm.dbg.declare(metadata %union.tree_node** %int_ptrsize_type, metadata !4783, metadata !DIExpression()), !dbg !4784
  call void @llvm.dbg.declare(metadata [20 x i8]* %tmp_name, metadata !4785, metadata !DIExpression()), !dbg !4789
  call void @llvm.dbg.declare(metadata %union.tree_node** %or_tmp_name, metadata !4790, metadata !DIExpression()), !dbg !4791
  store %union.tree_node* null, %union.tree_node** %or_tmp_name, align 8, !dbg !4791
  call void @llvm.dbg.declare(metadata %union.tree_node** %and_tmp, metadata !4792, metadata !DIExpression()), !dbg !4793
  call void @llvm.dbg.declare(metadata %union.tree_node** %and_tmp_name, metadata !4794, metadata !DIExpression()), !dbg !4795
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %and_stmt, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata %union.tree_node** %ptrsize_zero, metadata !4798, metadata !DIExpression()), !dbg !4799
  call void @llvm.dbg.declare(metadata %union.tree_node** %part_cond_expr, metadata !4800, metadata !DIExpression()), !dbg !4801
  %6 = load i32, i32* %mask, align 4, !dbg !4802
  %cmp = icmp ne i32 %6, 0, !dbg !4802
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !4802

land.lhs.true:                                    ; preds = %entry
  %7 = load i32, i32* %mask, align 4, !dbg !4802
  %8 = load i32, i32* %mask, align 4, !dbg !4802
  %add = add nsw i32 %8, 1, !dbg !4802
  %and = and i32 %7, %add, !dbg !4802
  %cmp3 = icmp eq i32 %and, 0, !dbg !4802
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !4802

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 2226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4802
  br label %cond.end, !dbg !4802

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4802

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4802
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !4803
  %type = bitcast %union.tree_node* %9 to %struct.tree_type*, !dbg !4803
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 2, !dbg !4803
  %10 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !4803
  store %union.tree_node* %10, %union.tree_node** %psize, align 8, !dbg !4804
  %11 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 3), align 8, !dbg !4805
  %12 = load %union.tree_node*, %union.tree_node** %psize, align 8, !dbg !4806
  %call = call i64 @tree_low_cst(%union.tree_node* %12, i32 1), !dbg !4807
  %conv = trunc i64 %call to i32, !dbg !4807
  %call4 = call %union.tree_node* %11(i32 %conv, i32 0), !dbg !4808
  store %union.tree_node* %call4, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4809
  store i32 0, i32* %i, align 4, !dbg !4810
  br label %for.cond, !dbg !4812

for.cond:                                         ; preds = %for.inc, %cond.end
  %13 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts, align 8, !dbg !4813
  %tobool = icmp ne %struct.VEC_gimple_heap* %13, null, !dbg !4813
  br i1 %tobool, label %cond.true5, label %cond.false6, !dbg !4813

cond.true5:                                       ; preds = %for.cond
  %14 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %may_misalign_stmts, align 8, !dbg !4813
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %14, i32 0, i32 0, !dbg !4813
  br label %cond.end7, !dbg !4813

cond.false6:                                      ; preds = %for.cond
  br label %cond.end7, !dbg !4813

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi %struct.VEC_gimple_base* [ %base, %cond.true5 ], [ null, %cond.false6 ], !dbg !4813
  %15 = load i32, i32* %i, align 4, !dbg !4813
  %call9 = call i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond8, i32 %15, %union.gimple_statement_d** %ref_stmt), !dbg !4813
  %tobool10 = icmp ne i32 %call9, 0, !dbg !4815
  br i1 %tobool10, label %for.body, label %for.end, !dbg !4815

for.body:                                         ; preds = %cond.end7
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %new_stmt_list, metadata !4816, metadata !DIExpression()), !dbg !4818
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_stmt_list, align 8, !dbg !4818
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_base, metadata !4819, metadata !DIExpression()), !dbg !4820
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_tmp, metadata !4821, metadata !DIExpression()), !dbg !4822
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_tmp_name, metadata !4823, metadata !DIExpression()), !dbg !4824
  call void @llvm.dbg.declare(metadata %union.tree_node** %or_tmp, metadata !4825, metadata !DIExpression()), !dbg !4826
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_or_tmp_name, metadata !4827, metadata !DIExpression()), !dbg !4828
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %addr_stmt, metadata !4829, metadata !DIExpression()), !dbg !4830
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %or_stmt, metadata !4831, metadata !DIExpression()), !dbg !4832
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ref_stmt, align 8, !dbg !4833
  %17 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4834
  %call11 = call %union.tree_node* @vect_create_addr_base_for_vector_ref(%union.gimple_statement_d* %16, %struct.gimple_seq_d** %new_stmt_list, %union.tree_node* null, %struct.loop* %17), !dbg !4835
  store %union.tree_node* %call11, %union.tree_node** %addr_base, align 8, !dbg !4836
  %18 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmt_list, align 8, !dbg !4837
  %cmp12 = icmp ne %struct.gimple_seq_d* %18, null, !dbg !4839
  br i1 %cmp12, label %if.then, label %if.end, !dbg !4840

if.then:                                          ; preds = %for.body
  %19 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4841
  %20 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_stmt_list, align 8, !dbg !4842
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %19, %struct.gimple_seq_d* %20), !dbg !4843
  br label %if.end, !dbg !4843

if.end:                                           ; preds = %if.then, %for.body
  %arraydecay = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_name, i64 0, i64 0, !dbg !4844
  %21 = load i32, i32* %i, align 4, !dbg !4845
  %call14 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i64 0, i64 0), i32 %21), !dbg !4846
  %22 = load %union.tree_node*, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4847
  %arraydecay15 = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_name, i64 0, i64 0, !dbg !4848
  %call16 = call %union.tree_node* @create_tmp_var(%union.tree_node* %22, i8* %arraydecay15), !dbg !4849
  store %union.tree_node* %call16, %union.tree_node** %addr_tmp, align 8, !dbg !4850
  %23 = load %union.tree_node*, %union.tree_node** %addr_tmp, align 8, !dbg !4851
  %call17 = call zeroext i8 @add_referenced_var(%union.tree_node* %23), !dbg !4852
  %24 = load %union.tree_node*, %union.tree_node** %addr_tmp, align 8, !dbg !4853
  %call18 = call %union.tree_node* @make_ssa_name(%union.tree_node* %24, %union.gimple_statement_d* null), !dbg !4854
  store %union.tree_node* %call18, %union.tree_node** %addr_tmp_name, align 8, !dbg !4855
  %25 = load %union.tree_node*, %union.tree_node** %addr_tmp_name, align 8, !dbg !4856
  %26 = load %union.tree_node*, %union.tree_node** %addr_base, align 8, !dbg !4856
  %call19 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 116, %union.tree_node* %25, %union.tree_node* %26, %union.tree_node* null), !dbg !4856
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %addr_stmt, align 8, !dbg !4857
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %addr_stmt, align 8, !dbg !4858
  %28 = load %union.tree_node*, %union.tree_node** %addr_tmp_name, align 8, !dbg !4859
  %ssa_name = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !4859
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !4859
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %def_stmt, align 8, !dbg !4860
  %29 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4861
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %addr_stmt, align 8, !dbg !4862
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %29, %union.gimple_statement_d* %30), !dbg !4863
  %31 = load %union.tree_node*, %union.tree_node** %or_tmp_name, align 8, !dbg !4864
  %cmp20 = icmp ne %union.tree_node* %31, null, !dbg !4866
  br i1 %cmp20, label %if.then22, label %if.else, !dbg !4867

if.then22:                                        ; preds = %if.end
  %arraydecay23 = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_name, i64 0, i64 0, !dbg !4868
  %32 = load i32, i32* %i, align 4, !dbg !4870
  %call24 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i64 0, i64 0), i32 %32), !dbg !4871
  %33 = load %union.tree_node*, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4872
  %arraydecay25 = getelementptr inbounds [20 x i8], [20 x i8]* %tmp_name, i64 0, i64 0, !dbg !4873
  %call26 = call %union.tree_node* @create_tmp_var(%union.tree_node* %33, i8* %arraydecay25), !dbg !4874
  store %union.tree_node* %call26, %union.tree_node** %or_tmp, align 8, !dbg !4875
  %34 = load %union.tree_node*, %union.tree_node** %or_tmp, align 8, !dbg !4876
  %call27 = call zeroext i8 @add_referenced_var(%union.tree_node* %34), !dbg !4877
  %35 = load %union.tree_node*, %union.tree_node** %or_tmp, align 8, !dbg !4878
  %call28 = call %union.tree_node* @make_ssa_name(%union.tree_node* %35, %union.gimple_statement_d* null), !dbg !4879
  store %union.tree_node* %call28, %union.tree_node** %new_or_tmp_name, align 8, !dbg !4880
  %36 = load %union.tree_node*, %union.tree_node** %new_or_tmp_name, align 8, !dbg !4881
  %37 = load %union.tree_node*, %union.tree_node** %or_tmp_name, align 8, !dbg !4881
  %38 = load %union.tree_node*, %union.tree_node** %addr_tmp_name, align 8, !dbg !4881
  %call29 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 87, %union.tree_node* %36, %union.tree_node* %37, %union.tree_node* %38), !dbg !4881
  store %union.gimple_statement_d* %call29, %union.gimple_statement_d** %or_stmt, align 8, !dbg !4882
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %or_stmt, align 8, !dbg !4883
  %40 = load %union.tree_node*, %union.tree_node** %new_or_tmp_name, align 8, !dbg !4884
  %ssa_name30 = bitcast %union.tree_node* %40 to %struct.tree_ssa_name*, !dbg !4884
  %def_stmt31 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name30, i32 0, i32 2, !dbg !4884
  store %union.gimple_statement_d* %39, %union.gimple_statement_d** %def_stmt31, align 8, !dbg !4885
  %41 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4886
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %or_stmt, align 8, !dbg !4887
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %41, %union.gimple_statement_d* %42), !dbg !4888
  %43 = load %union.tree_node*, %union.tree_node** %new_or_tmp_name, align 8, !dbg !4889
  store %union.tree_node* %43, %union.tree_node** %or_tmp_name, align 8, !dbg !4890
  br label %if.end32, !dbg !4891

if.else:                                          ; preds = %if.end
  %44 = load %union.tree_node*, %union.tree_node** %addr_tmp_name, align 8, !dbg !4892
  store %union.tree_node* %44, %union.tree_node** %or_tmp_name, align 8, !dbg !4893
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then22
  br label %for.inc, !dbg !4894

for.inc:                                          ; preds = %if.end32
  %45 = load i32, i32* %i, align 4, !dbg !4895
  %inc = add i32 %45, 1, !dbg !4895
  store i32 %inc, i32* %i, align 4, !dbg !4895
  br label %for.cond, !dbg !4896, !llvm.loop !4897

for.end:                                          ; preds = %cond.end7
  %46 = load %union.tree_node*, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4899
  %47 = load i32, i32* %mask, align 4, !dbg !4900
  %conv33 = sext i32 %47 to i64, !dbg !4900
  %call34 = call %union.tree_node* @build_int_cst(%union.tree_node* %46, i64 %conv33), !dbg !4901
  store %union.tree_node* %call34, %union.tree_node** %mask_cst, align 8, !dbg !4902
  %48 = load %union.tree_node*, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4903
  %call35 = call %union.tree_node* @create_tmp_var(%union.tree_node* %48, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i64 0, i64 0)), !dbg !4904
  store %union.tree_node* %call35, %union.tree_node** %and_tmp, align 8, !dbg !4905
  %49 = load %union.tree_node*, %union.tree_node** %and_tmp, align 8, !dbg !4906
  %call36 = call zeroext i8 @add_referenced_var(%union.tree_node* %49), !dbg !4907
  %50 = load %union.tree_node*, %union.tree_node** %and_tmp, align 8, !dbg !4908
  %call37 = call %union.tree_node* @make_ssa_name(%union.tree_node* %50, %union.gimple_statement_d* null), !dbg !4909
  store %union.tree_node* %call37, %union.tree_node** %and_tmp_name, align 8, !dbg !4910
  %51 = load %union.tree_node*, %union.tree_node** %and_tmp_name, align 8, !dbg !4911
  %52 = load %union.tree_node*, %union.tree_node** %or_tmp_name, align 8, !dbg !4911
  %53 = load %union.tree_node*, %union.tree_node** %mask_cst, align 8, !dbg !4911
  %call38 = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 89, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* %53), !dbg !4911
  store %union.gimple_statement_d* %call38, %union.gimple_statement_d** %and_stmt, align 8, !dbg !4912
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %and_stmt, align 8, !dbg !4913
  %55 = load %union.tree_node*, %union.tree_node** %and_tmp_name, align 8, !dbg !4914
  %ssa_name39 = bitcast %union.tree_node* %55 to %struct.tree_ssa_name*, !dbg !4914
  %def_stmt40 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name39, i32 0, i32 2, !dbg !4914
  store %union.gimple_statement_d* %54, %union.gimple_statement_d** %def_stmt40, align 8, !dbg !4915
  %56 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !4916
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %and_stmt, align 8, !dbg !4917
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** %56, %union.gimple_statement_d* %57), !dbg !4918
  %58 = load %union.tree_node*, %union.tree_node** %int_ptrsize_type, align 8, !dbg !4919
  %call41 = call %union.tree_node* @build_int_cst(%union.tree_node* %58, i64 0), !dbg !4920
  store %union.tree_node* %call41, %union.tree_node** %ptrsize_zero, align 8, !dbg !4921
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4922
  %60 = load %union.tree_node*, %union.tree_node** %and_tmp_name, align 8, !dbg !4922
  %61 = load %union.tree_node*, %union.tree_node** %ptrsize_zero, align 8, !dbg !4922
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 101, %union.tree_node* %59, %union.tree_node* %60, %union.tree_node* %61), !dbg !4922
  store %union.tree_node* %call42, %union.tree_node** %part_cond_expr, align 8, !dbg !4923
  %62 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4924
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !4926
  %tobool43 = icmp ne %union.tree_node* %63, null, !dbg !4926
  br i1 %tobool43, label %if.then44, label %if.else46, !dbg !4927

if.then44:                                        ; preds = %for.end
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4928
  %65 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4928
  %66 = load %union.tree_node*, %union.tree_node** %65, align 8, !dbg !4928
  %67 = load %union.tree_node*, %union.tree_node** %part_cond_expr, align 8, !dbg !4928
  %call45 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %64, %union.tree_node* %66, %union.tree_node* %67), !dbg !4928
  %68 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4929
  store %union.tree_node* %call45, %union.tree_node** %68, align 8, !dbg !4930
  br label %if.end47, !dbg !4931

if.else46:                                        ; preds = %for.end
  %69 = load %union.tree_node*, %union.tree_node** %part_cond_expr, align 8, !dbg !4932
  %70 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !4933
  store %union.tree_node* %69, %union.tree_node** %70, align 8, !dbg !4934
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.then44
  ret void, !dbg !4935
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_create_cond_for_alias_checks(%struct._loop_vec_info* %loop_vinfo, %union.tree_node** %cond_expr, %struct.gimple_seq_d** %cond_expr_stmt_list) #0 !dbg !4936 {
entry:
  %loop_vinfo.addr = alloca %struct._loop_vec_info*, align 8
  %cond_expr.addr = alloca %union.tree_node**, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d**, align 8
  %loop = alloca %struct.loop*, align 8
  %may_alias_ddrs = alloca %struct.VEC_ddr_p_heap*, align 8
  %vect_factor = alloca %union.tree_node*, align 8
  %ddr = alloca %struct.data_dependence_relation*, align 8
  %i = alloca i32, align 4
  %part_cond_expr = alloca %union.tree_node*, align 8
  %dr_a = alloca %struct.data_reference*, align 8
  %dr_b = alloca %struct.data_reference*, align 8
  %dr_group_first_a = alloca %union.gimple_statement_d*, align 8
  %dr_group_first_b = alloca %union.gimple_statement_d*, align 8
  %addr_base_a = alloca %union.tree_node*, align 8
  %addr_base_b = alloca %union.tree_node*, align 8
  %segment_length_a = alloca %union.tree_node*, align 8
  %segment_length_b = alloca %union.tree_node*, align 8
  %stmt_a = alloca %union.gimple_statement_d*, align 8
  %stmt_b = alloca %union.gimple_statement_d*, align 8
  store %struct._loop_vec_info* %loop_vinfo, %struct._loop_vec_info** %loop_vinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._loop_vec_info** %loop_vinfo.addr, metadata !4937, metadata !DIExpression()), !dbg !4938
  store %union.tree_node** %cond_expr, %union.tree_node*** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %cond_expr.addr, metadata !4939, metadata !DIExpression()), !dbg !4940
  store %struct.gimple_seq_d** %cond_expr_stmt_list, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, metadata !4941, metadata !DIExpression()), !dbg !4942
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !4943, metadata !DIExpression()), !dbg !4944
  %0 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4945
  %loop1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %0, i32 0, i32 0, !dbg !4945
  %1 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !4945
  store %struct.loop* %1, %struct.loop** %loop, align 8, !dbg !4944
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_heap** %may_alias_ddrs, metadata !4946, metadata !DIExpression()), !dbg !4947
  %2 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4948
  %may_alias_ddrs2 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %2, i32 0, i32 12, !dbg !4948
  %3 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs2, align 8, !dbg !4948
  store %struct.VEC_ddr_p_heap* %3, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4947
  call void @llvm.dbg.declare(metadata %union.tree_node** %vect_factor, metadata !4949, metadata !DIExpression()), !dbg !4950
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !4951
  %5 = load %struct._loop_vec_info*, %struct._loop_vec_info** %loop_vinfo.addr, align 8, !dbg !4952
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %5, i32 0, i32 6, !dbg !4952
  %6 = load i32, i32* %vectorization_factor, align 8, !dbg !4952
  %conv = sext i32 %6 to i64, !dbg !4952
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* %4, i64 %conv), !dbg !4953
  store %union.tree_node* %call, %union.tree_node** %vect_factor, align 8, !dbg !4950
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation** %ddr, metadata !4954, metadata !DIExpression()), !dbg !4955
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4956, metadata !DIExpression()), !dbg !4957
  call void @llvm.dbg.declare(metadata %union.tree_node** %part_cond_expr, metadata !4958, metadata !DIExpression()), !dbg !4959
  %7 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4960
  %tobool = icmp ne %struct.VEC_ddr_p_heap* %7, null, !dbg !4960
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4960

cond.true:                                        ; preds = %entry
  %8 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4960
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %8, i32 0, i32 0, !dbg !4960
  br label %cond.end, !dbg !4960

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4960

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_ddr_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4960
  %call3 = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond), !dbg !4960
  %cmp = icmp eq i32 %call3, 0, !dbg !4960
  br i1 %cmp, label %if.then, label %if.end, !dbg !4962

if.then:                                          ; preds = %cond.end
  br label %if.end61, !dbg !4963

if.end:                                           ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !4964
  br label %for.cond, !dbg !4966

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4967
  %tobool5 = icmp ne %struct.VEC_ddr_p_heap* %9, null, !dbg !4967
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !4967

cond.true6:                                       ; preds = %for.cond
  %10 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !4967
  %base7 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %10, i32 0, i32 0, !dbg !4967
  br label %cond.end9, !dbg !4967

cond.false8:                                      ; preds = %for.cond
  br label %cond.end9, !dbg !4967

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_ddr_p_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !4967
  %11 = load i32, i32* %i, align 4, !dbg !4967
  %call11 = call i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %cond10, i32 %11, %struct.data_dependence_relation** %ddr), !dbg !4967
  %tobool12 = icmp ne i32 %call11, 0, !dbg !4969
  br i1 %tobool12, label %for.body, label %for.end, !dbg !4969

for.body:                                         ; preds = %cond.end9
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr_a, metadata !4970, metadata !DIExpression()), !dbg !4972
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr_b, metadata !4973, metadata !DIExpression()), !dbg !4974
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dr_group_first_a, metadata !4975, metadata !DIExpression()), !dbg !4976
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dr_group_first_b, metadata !4977, metadata !DIExpression()), !dbg !4978
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_base_a, metadata !4979, metadata !DIExpression()), !dbg !4980
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr_base_b, metadata !4981, metadata !DIExpression()), !dbg !4982
  call void @llvm.dbg.declare(metadata %union.tree_node** %segment_length_a, metadata !4983, metadata !DIExpression()), !dbg !4984
  call void @llvm.dbg.declare(metadata %union.tree_node** %segment_length_b, metadata !4985, metadata !DIExpression()), !dbg !4986
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt_a, metadata !4987, metadata !DIExpression()), !dbg !4988
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt_b, metadata !4989, metadata !DIExpression()), !dbg !4990
  %12 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4991
  %a = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %12, i32 0, i32 0, !dbg !4991
  %13 = load %struct.data_reference*, %struct.data_reference** %a, align 8, !dbg !4991
  store %struct.data_reference* %13, %struct.data_reference** %dr_a, align 8, !dbg !4992
  %14 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !4993
  %a13 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %14, i32 0, i32 0, !dbg !4993
  %15 = load %struct.data_reference*, %struct.data_reference** %a13, align 8, !dbg !4993
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %15, i32 0, i32 0, !dbg !4993
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4993
  store %union.gimple_statement_d* %16, %union.gimple_statement_d** %stmt_a, align 8, !dbg !4994
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_a, align 8, !dbg !4995
  %call14 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %17), !dbg !4995
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call14, i32 0, i32 17, !dbg !4995
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !4995
  store %union.gimple_statement_d* %18, %union.gimple_statement_d** %dr_group_first_a, align 8, !dbg !4996
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_group_first_a, align 8, !dbg !4997
  %tobool15 = icmp ne %union.gimple_statement_d* %19, null, !dbg !4997
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !4999

if.then16:                                        ; preds = %for.body
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_group_first_a, align 8, !dbg !5000
  store %union.gimple_statement_d* %20, %union.gimple_statement_d** %stmt_a, align 8, !dbg !5002
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_a, align 8, !dbg !5003
  %call17 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %21), !dbg !5003
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call17, i32 0, i32 7, !dbg !5003
  %22 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !5003
  store %struct.data_reference* %22, %struct.data_reference** %dr_a, align 8, !dbg !5004
  br label %if.end18, !dbg !5005

if.end18:                                         ; preds = %if.then16, %for.body
  %23 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5006
  %b = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %23, i32 0, i32 1, !dbg !5006
  %24 = load %struct.data_reference*, %struct.data_reference** %b, align 8, !dbg !5006
  store %struct.data_reference* %24, %struct.data_reference** %dr_b, align 8, !dbg !5007
  %25 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %ddr, align 8, !dbg !5008
  %b19 = getelementptr inbounds %struct.data_dependence_relation, %struct.data_dependence_relation* %25, i32 0, i32 1, !dbg !5008
  %26 = load %struct.data_reference*, %struct.data_reference** %b19, align 8, !dbg !5008
  %stmt20 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %26, i32 0, i32 0, !dbg !5008
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt20, align 8, !dbg !5008
  store %union.gimple_statement_d* %27, %union.gimple_statement_d** %stmt_b, align 8, !dbg !5009
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_b, align 8, !dbg !5010
  %call21 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %28), !dbg !5010
  %first_dr22 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call21, i32 0, i32 17, !dbg !5010
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr22, align 8, !dbg !5010
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %dr_group_first_b, align 8, !dbg !5011
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_group_first_b, align 8, !dbg !5012
  %tobool23 = icmp ne %union.gimple_statement_d* %30, null, !dbg !5012
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !5014

if.then24:                                        ; preds = %if.end18
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dr_group_first_b, align 8, !dbg !5015
  store %union.gimple_statement_d* %31, %union.gimple_statement_d** %stmt_b, align 8, !dbg !5017
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_b, align 8, !dbg !5018
  %call25 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %32), !dbg !5018
  %data_ref_info26 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call25, i32 0, i32 7, !dbg !5018
  %33 = load %struct.data_reference*, %struct.data_reference** %data_ref_info26, align 8, !dbg !5018
  store %struct.data_reference* %33, %struct.data_reference** %dr_b, align 8, !dbg !5019
  br label %if.end27, !dbg !5020

if.end27:                                         ; preds = %if.then24, %if.end18
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_a, align 8, !dbg !5021
  %35 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !5022
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5023
  %call28 = call %union.tree_node* @vect_create_addr_base_for_vector_ref(%union.gimple_statement_d* %34, %struct.gimple_seq_d** %35, %union.tree_node* null, %struct.loop* %36), !dbg !5024
  store %union.tree_node* %call28, %union.tree_node** %addr_base_a, align 8, !dbg !5025
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt_b, align 8, !dbg !5026
  %38 = load %struct.gimple_seq_d**, %struct.gimple_seq_d*** %cond_expr_stmt_list.addr, align 8, !dbg !5027
  %39 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5028
  %call29 = call %union.tree_node* @vect_create_addr_base_for_vector_ref(%union.gimple_statement_d* %37, %struct.gimple_seq_d** %38, %union.tree_node* null, %struct.loop* %39), !dbg !5029
  store %union.tree_node* %call29, %union.tree_node** %addr_base_b, align 8, !dbg !5030
  %40 = load %struct.data_reference*, %struct.data_reference** %dr_a, align 8, !dbg !5031
  %41 = load %union.tree_node*, %union.tree_node** %vect_factor, align 8, !dbg !5032
  %call30 = call %union.tree_node* @vect_vfa_segment_size(%struct.data_reference* %40, %union.tree_node* %41), !dbg !5033
  store %union.tree_node* %call30, %union.tree_node** %segment_length_a, align 8, !dbg !5034
  %42 = load %struct.data_reference*, %struct.data_reference** %dr_b, align 8, !dbg !5035
  %43 = load %union.tree_node*, %union.tree_node** %vect_factor, align 8, !dbg !5036
  %call31 = call %union.tree_node* @vect_vfa_segment_size(%struct.data_reference* %42, %union.tree_node* %43), !dbg !5037
  store %union.tree_node* %call31, %union.tree_node** %segment_length_b, align 8, !dbg !5038
  %call32 = call zeroext i8 @vect_print_dump_info(i32 5), !dbg !5039
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5039
  br i1 %tobool33, label %if.then34, label %if.end38, !dbg !5041

if.then34:                                        ; preds = %if.end27
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5042
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.33, i64 0, i64 0)), !dbg !5044
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5045
  %46 = load %struct.data_reference*, %struct.data_reference** %dr_a, align 8, !dbg !5046
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %46, i32 0, i32 1, !dbg !5046
  %47 = load %union.tree_node*, %union.tree_node** %ref, align 8, !dbg !5046
  call void @print_generic_expr(%struct._IO_FILE* %45, %union.tree_node* %47, i32 2), !dbg !5047
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5048
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.34, i64 0, i64 0)), !dbg !5049
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5050
  %50 = load %struct.data_reference*, %struct.data_reference** %dr_b, align 8, !dbg !5051
  %ref37 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %50, i32 0, i32 1, !dbg !5051
  %51 = load %union.tree_node*, %union.tree_node** %ref37, align 8, !dbg !5051
  call void @print_generic_expr(%struct._IO_FILE* %49, %union.tree_node* %51, i32 2), !dbg !5052
  br label %if.end38, !dbg !5053

if.end38:                                         ; preds = %if.then34, %if.end27
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5054
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5054
  %54 = load %union.tree_node*, %union.tree_node** %addr_base_a, align 8, !dbg !5054
  %common = bitcast %union.tree_node* %54 to %struct.tree_common*, !dbg !5054
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5054
  %55 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5054
  %56 = load %union.tree_node*, %union.tree_node** %addr_base_a, align 8, !dbg !5054
  %57 = load %union.tree_node*, %union.tree_node** %segment_length_a, align 8, !dbg !5054
  %call39 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %55, %union.tree_node* %56, %union.tree_node* %57), !dbg !5054
  %58 = load %union.tree_node*, %union.tree_node** %addr_base_b, align 8, !dbg !5054
  %call40 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 97, %union.tree_node* %53, %union.tree_node* %call39, %union.tree_node* %58), !dbg !5054
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5054
  %60 = load %union.tree_node*, %union.tree_node** %addr_base_b, align 8, !dbg !5054
  %common41 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !5054
  %type42 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common41, i32 0, i32 2, !dbg !5054
  %61 = load %union.tree_node*, %union.tree_node** %type42, align 8, !dbg !5054
  %62 = load %union.tree_node*, %union.tree_node** %addr_base_b, align 8, !dbg !5054
  %63 = load %union.tree_node*, %union.tree_node** %segment_length_b, align 8, !dbg !5054
  %call43 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %61, %union.tree_node* %62, %union.tree_node* %63), !dbg !5054
  %64 = load %union.tree_node*, %union.tree_node** %addr_base_a, align 8, !dbg !5054
  %call44 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 97, %union.tree_node* %59, %union.tree_node* %call43, %union.tree_node* %64), !dbg !5054
  %call45 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %52, %union.tree_node* %call40, %union.tree_node* %call44), !dbg !5054
  store %union.tree_node* %call45, %union.tree_node** %part_cond_expr, align 8, !dbg !5055
  %65 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !5056
  %66 = load %union.tree_node*, %union.tree_node** %65, align 8, !dbg !5058
  %tobool46 = icmp ne %union.tree_node* %66, null, !dbg !5058
  br i1 %tobool46, label %if.then47, label %if.else, !dbg !5059

if.then47:                                        ; preds = %if.end38
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5060
  %68 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !5060
  %69 = load %union.tree_node*, %union.tree_node** %68, align 8, !dbg !5060
  %70 = load %union.tree_node*, %union.tree_node** %part_cond_expr, align 8, !dbg !5060
  %call48 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %67, %union.tree_node* %69, %union.tree_node* %70), !dbg !5060
  %71 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !5061
  store %union.tree_node* %call48, %union.tree_node** %71, align 8, !dbg !5062
  br label %if.end49, !dbg !5063

if.else:                                          ; preds = %if.end38
  %72 = load %union.tree_node*, %union.tree_node** %part_cond_expr, align 8, !dbg !5064
  %73 = load %union.tree_node**, %union.tree_node*** %cond_expr.addr, align 8, !dbg !5065
  store %union.tree_node* %72, %union.tree_node** %73, align 8, !dbg !5066
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then47
  br label %for.inc, !dbg !5067

for.inc:                                          ; preds = %if.end49
  %74 = load i32, i32* %i, align 4, !dbg !5068
  %inc = add i32 %74, 1, !dbg !5068
  store i32 %inc, i32* %i, align 4, !dbg !5068
  br label %for.cond, !dbg !5069, !llvm.loop !5070

for.end:                                          ; preds = %cond.end9
  %call50 = call zeroext i8 @vect_print_dump_info(i32 1), !dbg !5072
  %tobool51 = icmp ne i8 %call50, 0, !dbg !5072
  br i1 %tobool51, label %if.then52, label %if.end61, !dbg !5074

if.then52:                                        ; preds = %for.end
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5075
  %76 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !5076
  %tobool53 = icmp ne %struct.VEC_ddr_p_heap* %76, null, !dbg !5076
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !5076

cond.true54:                                      ; preds = %if.then52
  %77 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %may_alias_ddrs, align 8, !dbg !5076
  %base55 = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %77, i32 0, i32 0, !dbg !5076
  br label %cond.end57, !dbg !5076

cond.false56:                                     ; preds = %if.then52
  br label %cond.end57, !dbg !5076

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_ddr_p_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !5076
  %call59 = call i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %cond58), !dbg !5076
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %75, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.35, i64 0, i64 0), i32 %call59), !dbg !5077
  br label %if.end61, !dbg !5077

if.end61:                                         ; preds = %if.then, %cond.end57, %for.end
  ret void, !dbg !5078
}

declare dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d**, %struct.gimple_seq_d*) #3

declare dso_local %struct.loop* @loop_version(%struct.loop*, i8*, %struct.basic_block_def**, i32, i32, i32, i8 zeroext) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5079 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5082, metadata !DIExpression()), !dbg !5083
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5083
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5083
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5083

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5083
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5083
  %2 = load i32, i32* %num, align 8, !dbg !5083
  br label %cond.end, !dbg !5083

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5083

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5083
  ret i32 %cond, !dbg !5083
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #3

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %update_phi, %struct.edge_def* %e, %union.tree_node* %new_def) #0 !dbg !5084 {
entry:
  %update_phi.addr = alloca %union.gimple_statement_d*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %new_def.addr = alloca %union.tree_node*, align 8
  %orig_def = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %update_phi, %union.gimple_statement_d** %update_phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %update_phi.addr, metadata !5087, metadata !DIExpression()), !dbg !5088
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5089, metadata !DIExpression()), !dbg !5090
  store %union.tree_node* %new_def, %union.tree_node** %new_def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_def.addr, metadata !5091, metadata !DIExpression()), !dbg !5092
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_def, metadata !5093, metadata !DIExpression()), !dbg !5094
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi.addr, align 8, !dbg !5095
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5095
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 6, !dbg !5095
  %2 = load i32, i32* %dest_idx, align 4, !dbg !5095
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %0, i32 %2), !dbg !5095
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call), !dbg !5095
  store %union.tree_node* %call1, %union.tree_node** %orig_def, align 8, !dbg !5094
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi.addr, align 8, !dbg !5096
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5096
  %dest_idx2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 6, !dbg !5096
  %5 = load i32, i32* %dest_idx2, align 4, !dbg !5096
  %call3 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %3, i32 %5), !dbg !5096
  %6 = load %union.tree_node*, %union.tree_node** %new_def.addr, align 8, !dbg !5096
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call3, %union.tree_node* %6), !dbg !5096
  %7 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5097
  %tobool = icmp ne i32 %7, 0, !dbg !5097
  br i1 %tobool, label %if.then, label %if.end, !dbg !5099

if.then:                                          ; preds = %entry
  %8 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !5100
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi.addr, align 8, !dbg !5101
  %call4 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %9), !dbg !5101
  %call5 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call4), !dbg !5101
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi.addr, align 8, !dbg !5102
  %call6 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %10), !dbg !5103
  call void @adjust_debug_stmts(%union.tree_node* %8, %union.tree_node* %call5, %struct.basic_block_def* %call6), !dbg !5104
  br label %if.end, !dbg !5104

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !5105
}

declare dso_local void @update_ssa(i32) #3

declare dso_local void @gsi_insert_seq_before(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !5106 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5112, metadata !DIExpression()), !dbg !5113
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5114
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !5115
  %1 = load i32, i32* %flags, align 8, !dbg !5115
  %and = and i32 %1, 512, !dbg !5116
  %tobool = icmp ne i32 %and, 0, !dbg !5116
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !5117

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5118
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !5119
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !5120
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !5120
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !5118
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5121

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5122
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5123
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !5124
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !5124
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !5125
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !5125
  br label %cond.end, !dbg !5121

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !5121
  ret %struct.gimple_seq_d* %cond, !dbg !5126
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !5127 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5133, metadata !DIExpression()), !dbg !5134
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5135
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5135
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5135

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5136
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !5137
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !5137
  br label %cond.end, !dbg !5135

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5135

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5135
  ret %struct.gimple_seq_node_d* %cond, !dbg !5138
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !5139 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !5142, metadata !DIExpression()), !dbg !5143
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !5144, metadata !DIExpression()), !dbg !5145
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5146, metadata !DIExpression()), !dbg !5147
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5148
  %and = and i32 %0, 8, !dbg !5148
  %tobool = icmp ne i32 %and, 0, !dbg !5148
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !5148

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5148
  %and1 = and i32 %1, 2, !dbg !5148
  %tobool2 = icmp ne i32 %and1, 0, !dbg !5148
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !5148

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !5148
  %and3 = and i32 %2, 4, !dbg !5148
  %tobool4 = icmp ne i32 %and3, 0, !dbg !5148
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !5148

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !5148
  %and6 = and i32 %3, 1, !dbg !5148
  %tobool7 = icmp ne i32 %and6, 0, !dbg !5148
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !5148

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5148
  br label %cond.end, !dbg !5148

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !5148

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5148
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5149
  %and8 = and i32 %4, 10, !dbg !5150
  %tobool9 = icmp ne i32 %and8, 0, !dbg !5150
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !5151

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5152
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !5153
  br label %cond.end12, !dbg !5151

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !5151

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !5151
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5154
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !5155
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !5156
  %7 = load i32, i32* %flags.addr, align 4, !dbg !5157
  %and14 = and i32 %7, 8, !dbg !5159
  %tobool15 = icmp ne i32 %and14, 0, !dbg !5159
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !5160

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5161
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !5162
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !5162
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !5161
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !5163

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5164
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !5165
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !5166
  br i1 %cmp, label %if.then, label %if.end, !dbg !5167

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5168
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !5169
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !5169
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !5170
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !5170
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5171
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !5172
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !5173
  br label %if.end, !dbg !5171

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !5174
  %and23 = and i32 %15, 5, !dbg !5175
  %tobool24 = icmp ne i32 %and23, 0, !dbg !5175
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5176

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5177
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !5178
  br label %cond.end28, !dbg !5176

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !5176

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5176
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5179
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !5180
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !5181
  %18 = load i32, i32* %flags.addr, align 4, !dbg !5182
  %and30 = and i32 %18, 4, !dbg !5184
  %tobool31 = icmp ne i32 %and30, 0, !dbg !5184
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !5185

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5186
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !5187
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !5187
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !5186
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !5188

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !5189
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !5190
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !5191
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !5192

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5193
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !5194
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !5194
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !5195
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !5195
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5196
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !5197
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !5198
  br label %if.end42, !dbg !5196

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5199
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !5200
  store i8 0, i8* %done, align 8, !dbg !5201
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5202
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !5203
  store i32 0, i32* %phi_i, align 8, !dbg !5204
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5205
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !5206
  store i32 0, i32* %num_phi, align 4, !dbg !5207
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !5208
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !5209
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5210
  ret void, !dbg !5211
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !5212 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5215, metadata !DIExpression()), !dbg !5216
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5217
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5219
  %tobool = icmp ne i8 %call, 0, !dbg !5219
  br i1 %tobool, label %if.end, label %if.then, !dbg !5220

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !5221
  br label %return, !dbg !5221

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5222
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5223
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5224
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !5225
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !5225
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !5226
  br label %return, !dbg !5226

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !5227
  ret %struct.def_optype_d* %3, !dbg !5227
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !5228 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5231, metadata !DIExpression()), !dbg !5232
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5233
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5235
  %tobool = icmp ne i8 %call, 0, !dbg !5235
  br i1 %tobool, label %if.end, label %if.then, !dbg !5236

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5237
  br label %return, !dbg !5237

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5238
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5239
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !5240
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !5240
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5241
  br label %return, !dbg !5241

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5242
  ret %union.tree_node* %3, !dbg !5242
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !5243 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5246, metadata !DIExpression()), !dbg !5247
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5248
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !5250
  %tobool = icmp ne i8 %call, 0, !dbg !5250
  br i1 %tobool, label %if.end, label %if.then, !dbg !5251

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !5252
  br label %return, !dbg !5252

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5253
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !5254
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !5255
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !5256
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !5256
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !5257
  br label %return, !dbg !5257

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !5258
  ret %struct.use_optype_d* %3, !dbg !5258
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !5259 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5260, metadata !DIExpression()), !dbg !5261
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5262
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !5264
  %tobool = icmp ne i8 %call, 0, !dbg !5264
  br i1 %tobool, label %if.end, label %if.then, !dbg !5265

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5266
  br label %return, !dbg !5266

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5267
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !5268
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !5269
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !5269
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !5270
  br label %return, !dbg !5270

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5271
  ret %union.tree_node* %3, !dbg !5271
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !5272 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5275, metadata !DIExpression()), !dbg !5276
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5277
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5278
  %cmp = icmp uge i32 %call, 1, !dbg !5279
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5280

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5281
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5282
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5283
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5284
  %land.ext = zext i1 %2 to i32, !dbg !5280
  %conv = trunc i32 %land.ext to i8, !dbg !5278
  ret i8 %conv, !dbg !5285
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !5286 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5289, metadata !DIExpression()), !dbg !5290
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5291
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5292
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !5293
  %bf.load = load i32, i32* %1, align 8, !dbg !5293
  %bf.clear = and i32 %bf.load, 255, !dbg !5293
  ret i32 %bf.clear, !dbg !5294
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !5295 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5296, metadata !DIExpression()), !dbg !5297
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5298
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !5299
  %cmp = icmp uge i32 %call, 6, !dbg !5300
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5301

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5302
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !5303
  %cmp2 = icmp ule i32 %call1, 9, !dbg !5304
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !5305
  %land.ext = zext i1 %2 to i32, !dbg !5301
  %conv = trunc i32 %land.ext to i8, !dbg !5299
  ret i8 %conv, !dbg !5306
}

declare dso_local %union.tree_node* @get_current_def(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #0 !dbg !5307 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val.addr = alloca %union.tree_node*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !5310, metadata !DIExpression()), !dbg !5311
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !5312, metadata !DIExpression()), !dbg !5313
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5314
  call void @delink_imm_use(%struct.ssa_use_operand_d* %0), !dbg !5315
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5316
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5317
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 3, !dbg !5318
  %3 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5318
  store %union.tree_node* %1, %union.tree_node** %3, align 8, !dbg !5319
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !5320
  %5 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !5321
  call void @link_imm_use(%struct.ssa_use_operand_d* %4, %union.tree_node* %5), !dbg !5322
  ret void, !dbg !5323
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !5324 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5327, metadata !DIExpression()), !dbg !5328
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5329
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !5331
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5331
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !5332
  br i1 %cmp, label %if.then, label %if.end, !dbg !5333

if.then:                                          ; preds = %entry
  br label %return, !dbg !5334

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5335
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5336
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5336
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5337
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !5338
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !5338
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !5339
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5340
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5341
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !5342
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5342
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5343
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !5344
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5344
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !5345
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !5346
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5347
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !5348
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !5349
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5350
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !5351
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !5352
  br label %return, !dbg !5353

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !5353
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) #0 !dbg !5354 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %def.addr = alloca %union.tree_node*, align 8
  %root = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5357, metadata !DIExpression()), !dbg !5358
  store %union.tree_node* %def, %union.tree_node** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %def.addr, metadata !5359, metadata !DIExpression()), !dbg !5360
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %root, metadata !5361, metadata !DIExpression()), !dbg !5362
  %0 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5363
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !5363
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5365

lor.lhs.false:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5366
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !5366
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !5366
  %bf.load = load i64, i64* %2, align 8, !dbg !5366
  %bf.clear = and i64 %bf.load, 65535, !dbg !5366
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5366
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5367
  br i1 %cmp, label %if.then, label %if.else, !dbg !5368

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5369
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 0, !dbg !5370
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5371
  br label %if.end, !dbg !5369

if.else:                                          ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** %def.addr, align 8, !dbg !5372
  %ssa_name = bitcast %union.tree_node* %4 to %struct.tree_ssa_name*, !dbg !5372
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !5372
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %root, align 8, !dbg !5374
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5375
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %root, align 8, !dbg !5376
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d* %6), !dbg !5377
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5378
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !5379 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !5382, metadata !DIExpression()), !dbg !5383
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !5384, metadata !DIExpression()), !dbg !5385
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5386
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5387
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !5388
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5389
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5390
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !5391
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5391
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5392
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !5393
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !5394
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5395
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5396
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !5397
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5397
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !5398
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5399
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !5400
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !5401
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !5402
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !5403
  ret void, !dbg !5404
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5405 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5408, metadata !DIExpression()), !dbg !5409
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5410
  %3 = load i32, i32* %index, align 8, !dbg !5410
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5411
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5411
  %6 = load i32, i32* %5, align 8, !dbg !5411
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5411
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5411
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5411
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5411
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5411

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5411
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5411
  %11 = load i32, i32* %10, align 8, !dbg !5411
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5411
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5411
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5411
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5411
  br label %cond.end, !dbg !5411

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5411

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5411
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5411
  %cmp = icmp eq i32 %3, %call2, !dbg !5412
  %conv = zext i1 %cmp to i32, !dbg !5412
  %conv3 = trunc i32 %conv to i8, !dbg !5413
  ret i8 %conv3, !dbg !5414
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5415 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5418, metadata !DIExpression()), !dbg !5419
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5420
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5420
  %5 = load i32, i32* %4, align 8, !dbg !5420
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5420
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5420
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5420
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5420
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5420

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5420
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5420
  %10 = load i32, i32* %9, align 8, !dbg !5420
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5420
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5420
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5420
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5420
  br label %cond.end, !dbg !5420

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5420

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5420
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5420
  %13 = load i32, i32* %index, align 8, !dbg !5420
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5420
  ret %struct.edge_def* %call2, !dbg !5421
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5422 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5425, metadata !DIExpression()), !dbg !5426
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5427
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5427
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5427
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5427

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5427
  br label %cond.end, !dbg !5427

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5427
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5428
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5428
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5429
  ret %struct.VEC_edge_gc* %5, !dbg !5430
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !5431 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !5435, metadata !DIExpression()), !dbg !5436
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !5437, metadata !DIExpression()), !dbg !5438
  %0 = load i32, i32* %index.addr, align 4, !dbg !5439
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5439
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !5439
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !5439
  %2 = load i32, i32* %capacity, align 8, !dbg !5439
  %cmp = icmp ule i32 %0, %2, !dbg !5439
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5439

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5439
  br label %cond.end, !dbg !5439

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5439

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5439
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !5440
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !5441
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !5442
  %4 = load i32, i32* %index.addr, align 4, !dbg !5443
  %idxprom = zext i32 %4 to i64, !dbg !5440
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !5440
  ret %struct.phi_arg_d* %arrayidx, !dbg !5444
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !5445 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5450, metadata !DIExpression()), !dbg !5451
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5451
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5451
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5451

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5451
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !5451
  %2 = load i32, i32* %num, align 8, !dbg !5451
  br label %cond.end, !dbg !5451

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5451

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5451
  ret i32 %cond, !dbg !5451
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !5452 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5455, metadata !DIExpression()), !dbg !5456
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5457, metadata !DIExpression()), !dbg !5456
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5456
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5456
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5456

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5456
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5456
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5456
  %3 = load i32, i32* %num, align 8, !dbg !5456
  %cmp = icmp ult i32 %1, %3, !dbg !5456
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5458
  %land.ext = zext i1 %4 to i32, !dbg !5456
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5456
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !5456
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5456
  %idxprom = zext i32 %6 to i64, !dbg !5456
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5456
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5456
  ret %struct.loop* %7, !dbg !5456
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !5459 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !5460, metadata !DIExpression()), !dbg !5461
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5462
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !5462
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5462

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !5463
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !5464
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !5464
  br label %cond.end, !dbg !5462

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5462

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !5462
  ret %struct.gimple_seq_node_d* %cond, !dbg !5465
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_uid(%union.gimple_statement_d* %g) #0 !dbg !5466 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !5469, metadata !DIExpression()), !dbg !5470
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !5471
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !5472
  %uid = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 1, !dbg !5473
  %1 = load i32, i32* %uid, align 4, !dbg !5473
  ret i32 %1, !dbg !5474
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %vec_) #0 !dbg !5475 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !5488, metadata !DIExpression()), !dbg !5489
  %0 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !5489
  %tobool = icmp ne %struct.VEC_vec_void_p_base* %0, null, !dbg !5489
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5489

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !5489
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %1, i32 0, i32 0, !dbg !5489
  %2 = load i32, i32* %num, align 8, !dbg !5489
  br label %cond.end, !dbg !5489

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5489

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5489
  ret i32 %cond, !dbg !5489
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %vec_, i32 %ix_) #0 !dbg !5490 {
entry:
  %vec_.addr = alloca %struct.VEC_vec_void_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_vec_void_p_base* %vec_, %struct.VEC_vec_void_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_vec_void_p_base** %vec_.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5495, metadata !DIExpression()), !dbg !5494
  %0 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !5494
  %tobool = icmp ne %struct.VEC_vec_void_p_base* %0, null, !dbg !5494
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5494

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5494
  %2 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !5494
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %2, i32 0, i32 0, !dbg !5494
  %3 = load i32, i32* %num, align 8, !dbg !5494
  %cmp = icmp ult i32 %1, %3, !dbg !5494
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5496
  %land.ext = zext i1 %4 to i32, !dbg !5494
  %5 = load %struct.VEC_vec_void_p_base*, %struct.VEC_vec_void_p_base** %vec_.addr, align 8, !dbg !5494
  %vec = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %5, i32 0, i32 2, !dbg !5494
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5494
  %idxprom = zext i32 %6 to i64, !dbg !5494
  %arrayidx = getelementptr inbounds [1 x i8*], [1 x i8*]* %vec, i64 0, i64 %idxprom, !dbg !5494
  %7 = load i8*, i8** %arrayidx, align 8, !dbg !5494
  ret i8* %7, !dbg !5494
}

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #0 !dbg !5497 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %preheader = alloca %struct.edge_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5500, metadata !DIExpression()), !dbg !5501
  call void @llvm.dbg.declare(metadata %struct.edge_def** %preheader, metadata !5502, metadata !DIExpression()), !dbg !5503
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5504
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !5505
  store %struct.edge_def* %call, %struct.edge_def** %preheader, align 8, !dbg !5503
  %1 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !5506
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !5506
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5506

cond.true:                                        ; preds = %entry
  %2 = load %struct.edge_def*, %struct.edge_def** %preheader, align 8, !dbg !5507
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !5508
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5508
  br label %cond.end, !dbg !5506

cond.false:                                       ; preds = %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5509
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5509
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5509
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5509
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !5509
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5509
  br label %cond.end, !dbg !5506

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %3, %cond.true ], [ %6, %cond.false ], !dbg !5506
  ret %struct.basic_block_def* %cond, !dbg !5510
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @automatically_generated_chrec_p(%union.tree_node* %chrec) #0 !dbg !5511 {
entry:
  %chrec.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %chrec, %union.tree_node** %chrec.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %chrec.addr, metadata !5512, metadata !DIExpression()), !dbg !5513
  %0 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5514
  %1 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !5515
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !5516
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !5517

lor.rhs:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %chrec.addr, align 8, !dbg !5518
  %3 = load %union.tree_node*, %union.tree_node** @chrec_known, align 8, !dbg !5519
  %cmp1 = icmp eq %union.tree_node* %2, %3, !dbg !5520
  br label %lor.end, !dbg !5517

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp1, %lor.rhs ]
  %lor.ext = zext i1 %4 to i32, !dbg !5517
  %conv = trunc i32 %lor.ext to i8, !dbg !5521
  ret i8 %conv, !dbg !5522
}

declare dso_local i32 @exact_log2(i64) #3

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) #3

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) #3

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) #3

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) #3

declare dso_local void @gimple_register_cfg_hooks() #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_adjust_info_stack* @VEC_adjust_info_stack_alloc1(i32 %alloc_, %struct.VEC_adjust_info_stack* %space) #0 !dbg !5523 {
entry:
  %alloc_.addr = alloca i32, align 4
  %space.addr = alloca %struct.VEC_adjust_info_stack*, align 8
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5526, metadata !DIExpression()), !dbg !5527
  store %struct.VEC_adjust_info_stack* %space, %struct.VEC_adjust_info_stack** %space.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_stack** %space.addr, metadata !5528, metadata !DIExpression()), !dbg !5527
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5527
  %1 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %space.addr, align 8, !dbg !5527
  %2 = bitcast %struct.VEC_adjust_info_stack* %1 to i8*, !dbg !5527
  %call = call i8* @vec_stack_p_reserve_exact_1(i32 %0, i8* %2), !dbg !5527
  %3 = bitcast i8* %call to %struct.VEC_adjust_info_stack*, !dbg !5527
  ret %struct.VEC_adjust_info_stack* %3, !dbg !5527
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @VEC_adjust_info_base_embedded_size(i32 %alloc_) #0 !dbg !5529 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5532, metadata !DIExpression()), !dbg !5533
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5533
  %conv = sext i32 %0 to i64, !dbg !5533
  %mul = mul i64 %conv, 24, !dbg !5533
  %add = add i64 8, %mul, !dbg !5533
  ret i64 %add, !dbg !5533
}

declare dso_local %struct.bitmap_head_def* @ssa_names_to_replace() #3

; Function Attrs: noinline nounwind uwtable
define internal void @slpeel_update_phis_for_duplicate_loop(%struct.loop* %orig_loop, %struct.loop* %new_loop, i8 zeroext %after) #0 !dbg !5534 {
entry:
  %orig_loop.addr = alloca %struct.loop*, align 8
  %new_loop.addr = alloca %struct.loop*, align 8
  %after.addr = alloca i8, align 1
  %new_ssa_name = alloca %union.tree_node*, align 8
  %phi_new = alloca %union.gimple_statement_d*, align 8
  %phi_orig = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  %orig_loop_latch = alloca %struct.edge_def*, align 8
  %orig_entry_e = alloca %struct.edge_def*, align 8
  %new_loop_exit_e = alloca %struct.edge_def*, align 8
  %new_loop_entry_e = alloca %struct.edge_def*, align 8
  %entry_arg_e = alloca %struct.edge_def*, align 8
  %gsi_new = alloca %struct.gimple_stmt_iterator, align 8
  %gsi_orig = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp4 = alloca %struct.gimple_stmt_iterator, align 8
  %locus = alloca i32, align 4
  store %struct.loop* %orig_loop, %struct.loop** %orig_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %orig_loop.addr, metadata !5537, metadata !DIExpression()), !dbg !5538
  store %struct.loop* %new_loop, %struct.loop** %new_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %new_loop.addr, metadata !5539, metadata !DIExpression()), !dbg !5540
  store i8 %after, i8* %after.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %after.addr, metadata !5541, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_ssa_name, metadata !5543, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi_new, metadata !5545, metadata !DIExpression()), !dbg !5546
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi_orig, metadata !5547, metadata !DIExpression()), !dbg !5548
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !5549, metadata !DIExpression()), !dbg !5550
  call void @llvm.dbg.declare(metadata %struct.edge_def** %orig_loop_latch, metadata !5551, metadata !DIExpression()), !dbg !5552
  %0 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !5553
  %call = call %struct.edge_def* @loop_latch_edge(%struct.loop* %0), !dbg !5554
  store %struct.edge_def* %call, %struct.edge_def** %orig_loop_latch, align 8, !dbg !5552
  call void @llvm.dbg.declare(metadata %struct.edge_def** %orig_entry_e, metadata !5555, metadata !DIExpression()), !dbg !5556
  %1 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !5557
  %call1 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %1), !dbg !5558
  store %struct.edge_def* %call1, %struct.edge_def** %orig_entry_e, align 8, !dbg !5556
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_loop_exit_e, metadata !5559, metadata !DIExpression()), !dbg !5560
  %2 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !5561
  %call2 = call %struct.edge_def* @single_exit(%struct.loop* %2), !dbg !5562
  store %struct.edge_def* %call2, %struct.edge_def** %new_loop_exit_e, align 8, !dbg !5560
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_loop_entry_e, metadata !5563, metadata !DIExpression()), !dbg !5564
  %3 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !5565
  %call3 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %3), !dbg !5566
  store %struct.edge_def* %call3, %struct.edge_def** %new_loop_entry_e, align 8, !dbg !5564
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_arg_e, metadata !5567, metadata !DIExpression()), !dbg !5568
  %4 = load i8, i8* %after.addr, align 1, !dbg !5569
  %conv = zext i8 %4 to i32, !dbg !5569
  %tobool = icmp ne i32 %conv, 0, !dbg !5569
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5569

cond.true:                                        ; preds = %entry
  %5 = load %struct.edge_def*, %struct.edge_def** %orig_loop_latch, align 8, !dbg !5570
  br label %cond.end, !dbg !5569

cond.false:                                       ; preds = %entry
  %6 = load %struct.edge_def*, %struct.edge_def** %orig_entry_e, align 8, !dbg !5571
  br label %cond.end, !dbg !5569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %5, %cond.true ], [ %6, %cond.false ], !dbg !5569
  store %struct.edge_def* %cond, %struct.edge_def** %entry_arg_e, align 8, !dbg !5568
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_new, metadata !5572, metadata !DIExpression()), !dbg !5573
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_orig, metadata !5574, metadata !DIExpression()), !dbg !5575
  %7 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !5576
  %header = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 2, !dbg !5578
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5578
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !5579
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi_new to i8*, !dbg !5579
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5579
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !5579
  %11 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !5580
  %header5 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 2, !dbg !5581
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %header5, align 8, !dbg !5581
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp4, %struct.basic_block_def* %12), !dbg !5582
  %13 = bitcast %struct.gimple_stmt_iterator* %gsi_orig to i8*, !dbg !5582
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp4 to i8*, !dbg !5582
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !5582
  br label %for.cond, !dbg !5583

for.cond:                                         ; preds = %for.inc, %cond.end
  %call6 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_new), !dbg !5584
  %tobool7 = icmp ne i8 %call6, 0, !dbg !5584
  br i1 %tobool7, label %land.end, label %land.rhs, !dbg !5586

land.rhs:                                         ; preds = %for.cond
  %call8 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_orig), !dbg !5587
  %tobool9 = icmp ne i8 %call8, 0, !dbg !5588
  %lnot = xor i1 %tobool9, true, !dbg !5588
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !5589
  br i1 %15, label %for.body, label %for.end, !dbg !5590

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %locus, metadata !5591, metadata !DIExpression()), !dbg !5593
  %call10 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_new), !dbg !5594
  store %union.gimple_statement_d* %call10, %union.gimple_statement_d** %phi_new, align 8, !dbg !5595
  %call11 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_orig), !dbg !5596
  store %union.gimple_statement_d* %call11, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5597
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5598
  %17 = load %struct.edge_def*, %struct.edge_def** %entry_arg_e, align 8, !dbg !5598
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 6, !dbg !5598
  %18 = load i32, i32* %dest_idx, align 4, !dbg !5598
  %call12 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %16, i32 %18), !dbg !5598
  %call13 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call12), !dbg !5598
  store %union.tree_node* %call13, %union.tree_node** %def, align 8, !dbg !5599
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5600
  %20 = load %struct.edge_def*, %struct.edge_def** %entry_arg_e, align 8, !dbg !5601
  %call14 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %19, %struct.edge_def* %20), !dbg !5602
  store i32 %call14, i32* %locus, align 4, !dbg !5603
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_new, align 8, !dbg !5604
  %22 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5605
  %23 = load %struct.edge_def*, %struct.edge_def** %new_loop_entry_e, align 8, !dbg !5606
  %24 = load i32, i32* %locus, align 4, !dbg !5607
  call void @add_phi_arg(%union.gimple_statement_d* %21, %union.tree_node* %22, %struct.edge_def* %23, i32 %24), !dbg !5608
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5609
  %26 = load %struct.edge_def*, %struct.edge_def** %orig_loop_latch, align 8, !dbg !5609
  %dest_idx15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 6, !dbg !5609
  %27 = load i32, i32* %dest_idx15, align 4, !dbg !5609
  %call16 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %25, i32 %27), !dbg !5609
  %call17 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call16), !dbg !5609
  store %union.tree_node* %call17, %union.tree_node** %def, align 8, !dbg !5610
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5611
  %29 = load %struct.edge_def*, %struct.edge_def** %orig_loop_latch, align 8, !dbg !5612
  %call18 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %28, %struct.edge_def* %29), !dbg !5613
  store i32 %call18, i32* %locus, align 4, !dbg !5614
  %30 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5615
  %base = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !5615
  %31 = bitcast %struct.tree_base* %base to i64*, !dbg !5615
  %bf.load = load i64, i64* %31, align 8, !dbg !5615
  %bf.clear = and i64 %bf.load, 65535, !dbg !5615
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5615
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5617
  br i1 %cmp, label %if.then, label %if.end, !dbg !5618

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5619

if.end:                                           ; preds = %for.body
  %32 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5620
  %call20 = call %union.tree_node* @get_current_def(%union.tree_node* %32), !dbg !5621
  store %union.tree_node* %call20, %union.tree_node** %new_ssa_name, align 8, !dbg !5622
  %33 = load %union.tree_node*, %union.tree_node** %new_ssa_name, align 8, !dbg !5623
  %tobool21 = icmp ne %union.tree_node* %33, null, !dbg !5623
  br i1 %tobool21, label %if.end25, label %if.then22, !dbg !5625

if.then22:                                        ; preds = %if.end
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_new, align 8, !dbg !5626
  %call23 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %34), !dbg !5626
  %call24 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call23), !dbg !5626
  store %union.tree_node* %call24, %union.tree_node** %new_ssa_name, align 8, !dbg !5628
  br label %if.end25, !dbg !5629

if.end25:                                         ; preds = %if.then22, %if.end
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_new, align 8, !dbg !5630
  %36 = load %union.tree_node*, %union.tree_node** %new_ssa_name, align 8, !dbg !5631
  %37 = load %struct.loop*, %struct.loop** %new_loop.addr, align 8, !dbg !5632
  %call26 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %37), !dbg !5633
  %38 = load i32, i32* %locus, align 4, !dbg !5634
  call void @add_phi_arg(%union.gimple_statement_d* %35, %union.tree_node* %36, %struct.edge_def* %call26, i32 %38), !dbg !5635
  %39 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5636
  %40 = load %struct.loop*, %struct.loop** %orig_loop.addr, align 8, !dbg !5637
  %call27 = call %struct.edge_def* @single_exit(%struct.loop* %40), !dbg !5638
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call27, i32 0, i32 1, !dbg !5639
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5639
  call void @adjust_debug_stmts(%union.tree_node* %39, %union.tree_node* null, %struct.basic_block_def* %41), !dbg !5640
  %42 = load i8, i8* %after.addr, align 1, !dbg !5641
  %tobool28 = icmp ne i8 %42, 0, !dbg !5641
  br i1 %tobool28, label %if.end36, label %if.then29, !dbg !5643

if.then29:                                        ; preds = %if.end25
  %43 = load %struct.edge_def*, %struct.edge_def** %new_loop_exit_e, align 8, !dbg !5644
  %44 = load %struct.edge_def*, %struct.edge_def** %orig_entry_e, align 8, !dbg !5644
  %cmp30 = icmp eq %struct.edge_def* %43, %44, !dbg !5644
  br i1 %cmp30, label %cond.false33, label %cond.true32, !dbg !5644

cond.true32:                                      ; preds = %if.then29
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5644
  br label %cond.end34, !dbg !5644

cond.false33:                                     ; preds = %if.then29
  br label %cond.end34, !dbg !5644

cond.end34:                                       ; preds = %cond.false33, %cond.true32
  %cond35 = phi i32 [ 0, %cond.true32 ], [ 0, %cond.false33 ], !dbg !5644
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_orig, align 8, !dbg !5646
  %46 = load %struct.edge_def*, %struct.edge_def** %new_loop_exit_e, align 8, !dbg !5647
  %47 = load %union.tree_node*, %union.tree_node** %new_ssa_name, align 8, !dbg !5648
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %45, %struct.edge_def* %46, %union.tree_node* %47), !dbg !5649
  br label %if.end36, !dbg !5650

if.end36:                                         ; preds = %cond.end34, %if.end25
  br label %for.inc, !dbg !5651

for.inc:                                          ; preds = %if.end36, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi_new), !dbg !5652
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi_orig), !dbg !5653
  br label %for.cond, !dbg !5654, !llvm.loop !5655

for.end:                                          ; preds = %land.end
  ret void, !dbg !5657
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct._loop_vec_info* @loop_vec_info_for_loop(%struct.loop* %loop) #0 !dbg !5658 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5661, metadata !DIExpression()), !dbg !5662
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5663
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 10, !dbg !5664
  %1 = load i8*, i8** %aux, align 8, !dbg !5664
  %2 = bitcast i8* %1 to %struct._loop_vec_info*, !dbg !5665
  ret %struct._loop_vec_info* %2, !dbg !5666
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @set_prologue_iterations(%struct.basic_block_def* %bb_before_first_loop, %union.tree_node* %first_niters, %struct.loop* %loop, i32 %th) #0 !dbg !5667 {
entry:
  %bb_before_first_loop.addr = alloca %struct.basic_block_def*, align 8
  %first_niters.addr = alloca %union.tree_node*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %th.addr = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %cond_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %var = alloca %union.tree_node*, align 8
  %prologue_after_cost_adjust_name = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %newphi = alloca %union.gimple_statement_d*, align 8
  %e_true = alloca %struct.edge_def*, align 8
  %e_false = alloca %struct.edge_def*, align 8
  %e_fallthru = alloca %struct.edge_def*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %gimplify_stmt_list = alloca %struct.gimple_seq_d*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %cost_pre_condition = alloca %union.tree_node*, align 8
  %scalar_loop_iters = alloca %union.tree_node*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp26 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp32 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %bb_before_first_loop, %struct.basic_block_def** %bb_before_first_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_before_first_loop.addr, metadata !5670, metadata !DIExpression()), !dbg !5671
  store %union.tree_node* %first_niters, %union.tree_node** %first_niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %first_niters.addr, metadata !5672, metadata !DIExpression()), !dbg !5673
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5674, metadata !DIExpression()), !dbg !5675
  store i32 %th, i32* %th.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %th.addr, metadata !5676, metadata !DIExpression()), !dbg !5677
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5678, metadata !DIExpression()), !dbg !5679
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb, metadata !5680, metadata !DIExpression()), !dbg !5681
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !5682, metadata !DIExpression()), !dbg !5683
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !5684, metadata !DIExpression()), !dbg !5685
  call void @llvm.dbg.declare(metadata %union.tree_node** %prologue_after_cost_adjust_name, metadata !5686, metadata !DIExpression()), !dbg !5687
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5688, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %newphi, metadata !5690, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_true, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_false, metadata !5694, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_fallthru, metadata !5696, metadata !DIExpression()), !dbg !5697
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !5698, metadata !DIExpression()), !dbg !5699
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %gimplify_stmt_list, metadata !5700, metadata !DIExpression()), !dbg !5701
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5701
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !5702, metadata !DIExpression()), !dbg !5703
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !5703
  call void @llvm.dbg.declare(metadata %union.tree_node** %cost_pre_condition, metadata !5704, metadata !DIExpression()), !dbg !5705
  store %union.tree_node* null, %union.tree_node** %cost_pre_condition, align 8, !dbg !5705
  call void @llvm.dbg.declare(metadata %union.tree_node** %scalar_loop_iters, metadata !5706, metadata !DIExpression()), !dbg !5707
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5708
  %call = call %struct._loop_vec_info* @loop_vec_info_for_loop(%struct.loop* %0), !dbg !5708
  %num_iters_unchanged = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %call, i32 0, i32 3, !dbg !5708
  %1 = load %union.tree_node*, %union.tree_node** %num_iters_unchanged, align 8, !dbg !5708
  %call1 = call %union.tree_node* @unshare_expr(%union.tree_node* %1), !dbg !5709
  store %union.tree_node* %call1, %union.tree_node** %scalar_loop_iters, align 8, !dbg !5707
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop.addr, align 8, !dbg !5710
  %call2 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %2), !dbg !5711
  store %struct.edge_def* %call2, %struct.edge_def** %e, align 8, !dbg !5712
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5713
  %call3 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %3), !dbg !5714
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %cond_bb, align 8, !dbg !5715
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop.addr, align 8, !dbg !5716
  %call4 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %4), !dbg !5717
  store %struct.edge_def* %call4, %struct.edge_def** %e, align 8, !dbg !5718
  %5 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5719
  %call5 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %5), !dbg !5720
  store %struct.basic_block_def* %call5, %struct.basic_block_def** %then_bb, align 8, !dbg !5721
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5722
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5723
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %6, %struct.basic_block_def* %7), !dbg !5724
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5725
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop.addr, align 8, !dbg !5726
  %call6 = call %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def* %8, %struct.basic_block_def* %9, i32 2048), !dbg !5727
  store %struct.edge_def* %call6, %struct.edge_def** %e_false, align 8, !dbg !5728
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop.addr, align 8, !dbg !5729
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5730
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %10, %struct.basic_block_def* %11), !dbg !5731
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5732
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !5732
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5732
  %tobool = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !5732
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5732

cond.true:                                        ; preds = %entry
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5732
  %preds7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 0, !dbg !5732
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds7, align 8, !dbg !5732
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !5732
  br label %cond.end, !dbg !5732

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5732
  %call8 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !5732
  store %struct.edge_def* %call8, %struct.edge_def** %e_true, align 8, !dbg !5733
  %16 = load %struct.edge_def*, %struct.edge_def** %e_true, align 8, !dbg !5734
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !5735
  %17 = load i32, i32* %flags, align 8, !dbg !5736
  %and = and i32 %17, -2, !dbg !5736
  store i32 %and, i32* %flags, align 8, !dbg !5736
  %18 = load %struct.edge_def*, %struct.edge_def** %e_true, align 8, !dbg !5737
  %flags9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !5738
  %19 = load i32, i32* %flags9, align 8, !dbg !5739
  %or = or i32 %19, 1024, !dbg !5739
  store i32 %or, i32* %flags9, align 8, !dbg !5739
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5740
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 1, !dbg !5740
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5740
  %tobool10 = icmp ne %struct.VEC_edge_gc* %21, null, !dbg !5740
  br i1 %tobool10, label %cond.true11, label %cond.false14, !dbg !5740

cond.true11:                                      ; preds = %cond.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5740
  %succs12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !5740
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs12, align 8, !dbg !5740
  %base13 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %23, i32 0, i32 0, !dbg !5740
  br label %cond.end15, !dbg !5740

cond.false14:                                     ; preds = %cond.end
  br label %cond.end15, !dbg !5740

cond.end15:                                       ; preds = %cond.false14, %cond.true11
  %cond16 = phi %struct.VEC_edge_base* [ %base13, %cond.true11 ], [ null, %cond.false14 ], !dbg !5740
  %call17 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond16, i32 0), !dbg !5740
  store %struct.edge_def* %call17, %struct.edge_def** %e_fallthru, align 8, !dbg !5741
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5742
  %25 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !5742
  %26 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !5742
  %common = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !5742
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5742
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5742
  %28 = load i32, i32* %th.addr, align 4, !dbg !5742
  %conv = zext i32 %28 to i64, !dbg !5742
  %call18 = call %union.tree_node* @build_int_cst(%union.tree_node* %27, i64 %conv), !dbg !5742
  %call19 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %24, %union.tree_node* %25, %union.tree_node* %call18), !dbg !5742
  store %union.tree_node* %call19, %union.tree_node** %cost_pre_condition, align 8, !dbg !5743
  %29 = load %union.tree_node*, %union.tree_node** %cost_pre_condition, align 8, !dbg !5744
  %call20 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %29, %struct.gimple_seq_d** %gimplify_stmt_list, i8 zeroext 1, %union.tree_node* null), !dbg !5745
  store %union.tree_node* %call20, %union.tree_node** %cost_pre_condition, align 8, !dbg !5746
  %30 = load %union.tree_node*, %union.tree_node** %cost_pre_condition, align 8, !dbg !5747
  %31 = load %union.tree_node*, %union.tree_node** %cost_pre_condition, align 8, !dbg !5748
  %common21 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !5748
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !5748
  %32 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !5748
  %call23 = call %union.tree_node* @build_int_cst(%union.tree_node* %32, i64 0), !dbg !5749
  %call24 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %30, %union.tree_node* %call23, %union.tree_node* null, %union.tree_node* null), !dbg !5750
  store %union.gimple_statement_d* %call24, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5751
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5752
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %33), !dbg !5753
  %34 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5753
  %35 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5753
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 24, i1 false), !dbg !5753
  %36 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5754
  %tobool25 = icmp ne %struct.gimple_seq_d* %36, null, !dbg !5754
  br i1 %tobool25, label %if.then, label %if.end, !dbg !5756

if.then:                                          ; preds = %cond.end15
  %37 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5757
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %gsi, %struct.gimple_seq_d* %37, i32 0), !dbg !5758
  br label %if.end, !dbg !5758

if.end:                                           ; preds = %if.then, %cond.end15
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5759
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp26, %struct.basic_block_def* %38), !dbg !5760
  %39 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5760
  %40 = bitcast %struct.gimple_stmt_iterator* %tmp26 to i8*, !dbg !5760
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 24, i1 false), !dbg !5760
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5761
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %41, i32 0), !dbg !5762
  %42 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !5763
  %common27 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !5763
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !5763
  %43 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !5763
  %call29 = call %union.tree_node* @create_tmp_var(%union.tree_node* %43, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.21, i64 0, i64 0)), !dbg !5764
  store %union.tree_node* %call29, %union.tree_node** %var, align 8, !dbg !5765
  %44 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5766
  %call30 = call zeroext i8 @add_referenced_var(%union.tree_node* %44), !dbg !5767
  %45 = load %union.tree_node*, %union.tree_node** %scalar_loop_iters, align 8, !dbg !5768
  %46 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5769
  %call31 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %45, %struct.gimple_seq_d** %stmts, i8 zeroext 0, %union.tree_node* %46), !dbg !5770
  store %union.tree_node* %call31, %union.tree_node** %prologue_after_cost_adjust_name, align 8, !dbg !5771
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5772
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp32, %struct.basic_block_def* %47), !dbg !5773
  %48 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5773
  %49 = bitcast %struct.gimple_stmt_iterator* %tmp32 to i8*, !dbg !5773
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 24, i1 false), !dbg !5773
  %50 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5774
  %tobool33 = icmp ne %struct.gimple_seq_d* %50, null, !dbg !5774
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !5776

if.then34:                                        ; preds = %if.end
  %51 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !5777
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %gsi, %struct.gimple_seq_d* %51, i32 0), !dbg !5778
  br label %if.end35, !dbg !5778

if.end35:                                         ; preds = %if.then34, %if.end
  %52 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5779
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_before_first_loop.addr, align 8, !dbg !5780
  %call36 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %52, %struct.basic_block_def* %53), !dbg !5781
  store %union.gimple_statement_d* %call36, %union.gimple_statement_d** %newphi, align 8, !dbg !5782
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newphi, align 8, !dbg !5783
  %55 = load %union.tree_node*, %union.tree_node** %prologue_after_cost_adjust_name, align 8, !dbg !5784
  %56 = load %struct.edge_def*, %struct.edge_def** %e_fallthru, align 8, !dbg !5785
  call void @add_phi_arg(%union.gimple_statement_d* %54, %union.tree_node* %55, %struct.edge_def* %56, i32 0), !dbg !5786
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newphi, align 8, !dbg !5787
  %58 = load %union.tree_node*, %union.tree_node** %first_niters.addr, align 8, !dbg !5788
  %59 = load %struct.edge_def*, %struct.edge_def** %e_false, align 8, !dbg !5789
  call void @add_phi_arg(%union.gimple_statement_d* %57, %union.tree_node* %58, %struct.edge_def* %59, i32 0), !dbg !5790
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %newphi, align 8, !dbg !5791
  %call37 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %60), !dbg !5791
  %call38 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call37), !dbg !5791
  store %union.tree_node* %call38, %union.tree_node** %first_niters.addr, align 8, !dbg !5792
  ret void, !dbg !5793
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @slpeel_add_loop_guard(%struct.basic_block_def* %guard_bb, %union.tree_node* %cond, %struct.gimple_seq_d* %cond_expr_stmt_list, %struct.basic_block_def* %exit_bb, %struct.basic_block_def* %dom_bb) #0 !dbg !5794 {
entry:
  %guard_bb.addr = alloca %struct.basic_block_def*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  %cond_expr_stmt_list.addr = alloca %struct.gimple_seq_d*, align 8
  %exit_bb.addr = alloca %struct.basic_block_def*, align 8
  %dom_bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %new_e = alloca %struct.edge_def*, align 8
  %enter_e = alloca %struct.edge_def*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %gimplify_stmt_list = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp11 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.basic_block_def* %guard_bb, %struct.basic_block_def** %guard_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %guard_bb.addr, metadata !5797, metadata !DIExpression()), !dbg !5798
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !5799, metadata !DIExpression()), !dbg !5800
  store %struct.gimple_seq_d* %cond_expr_stmt_list, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %cond_expr_stmt_list.addr, metadata !5801, metadata !DIExpression()), !dbg !5802
  store %struct.basic_block_def* %exit_bb, %struct.basic_block_def** %exit_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %exit_bb.addr, metadata !5803, metadata !DIExpression()), !dbg !5804
  store %struct.basic_block_def* %dom_bb, %struct.basic_block_def** %dom_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom_bb.addr, metadata !5805, metadata !DIExpression()), !dbg !5806
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5807, metadata !DIExpression()), !dbg !5808
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_e, metadata !5809, metadata !DIExpression()), !dbg !5810
  call void @llvm.dbg.declare(metadata %struct.edge_def** %enter_e, metadata !5811, metadata !DIExpression()), !dbg !5812
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !5813, metadata !DIExpression()), !dbg !5814
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %gimplify_stmt_list, metadata !5815, metadata !DIExpression()), !dbg !5816
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5816
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %guard_bb.addr, align 8, !dbg !5817
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5817
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5817
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5817
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5817

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %guard_bb.addr, align 8, !dbg !5817
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5817
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !5817
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5817
  br label %cond.end, !dbg !5817

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5817

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5817
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond2, i32 0), !dbg !5817
  store %struct.edge_def* %call, %struct.edge_def** %enter_e, align 8, !dbg !5818
  %4 = load %struct.edge_def*, %struct.edge_def** %enter_e, align 8, !dbg !5819
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %4, i32 0, i32 7, !dbg !5820
  %5 = load i32, i32* %flags, align 8, !dbg !5821
  %and = and i32 %5, -2, !dbg !5821
  store i32 %and, i32* %flags, align 8, !dbg !5821
  %6 = load %struct.edge_def*, %struct.edge_def** %enter_e, align 8, !dbg !5822
  %flags3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 7, !dbg !5823
  %7 = load i32, i32* %flags3, align 8, !dbg !5824
  %or = or i32 %7, 2048, !dbg !5824
  store i32 %or, i32* %flags3, align 8, !dbg !5824
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %guard_bb.addr, align 8, !dbg !5825
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !5826
  %9 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5826
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5826
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !5826
  %11 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !5827
  %call4 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %11, %struct.gimple_seq_d** %gimplify_stmt_list, i8 zeroext 1, %union.tree_node* null), !dbg !5828
  store %union.tree_node* %call4, %union.tree_node** %cond.addr, align 8, !dbg !5829
  %12 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5830
  %tobool5 = icmp ne %struct.gimple_seq_d* %12, null, !dbg !5830
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5832

if.then:                                          ; preds = %cond.end
  %13 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimplify_stmt_list, align 8, !dbg !5833
  call void @gimple_seq_add_seq(%struct.gimple_seq_d** %cond_expr_stmt_list.addr, %struct.gimple_seq_d* %13), !dbg !5834
  br label %if.end, !dbg !5834

if.end:                                           ; preds = %if.then, %cond.end
  %14 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !5835
  %15 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !5836
  %common = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !5836
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5836
  %16 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5836
  %call6 = call %union.tree_node* @build_int_cst(%union.tree_node* %16, i64 0), !dbg !5837
  %call7 = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %14, %union.tree_node* %call6, %union.tree_node* null, %union.tree_node* null), !dbg !5838
  store %union.gimple_statement_d* %call7, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5839
  %17 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !5840
  %tobool8 = icmp ne %struct.gimple_seq_d* %17, null, !dbg !5840
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !5842

if.then9:                                         ; preds = %if.end
  %18 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %cond_expr_stmt_list.addr, align 8, !dbg !5843
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* %gsi, %struct.gimple_seq_d* %18, i32 0), !dbg !5844
  br label %if.end10, !dbg !5844

if.end10:                                         ; preds = %if.then9, %if.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %guard_bb.addr, align 8, !dbg !5845
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp11, %struct.basic_block_def* %19), !dbg !5846
  %20 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5846
  %21 = bitcast %struct.gimple_stmt_iterator* %tmp11 to i8*, !dbg !5846
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 24, i1 false), !dbg !5846
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !5847
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %22, i32 0), !dbg !5848
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %guard_bb.addr, align 8, !dbg !5849
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !5850
  %call12 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %23, %struct.basic_block_def* %24, i32 1024), !dbg !5851
  store %struct.edge_def* %call12, %struct.edge_def** %new_e, align 8, !dbg !5852
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %exit_bb.addr, align 8, !dbg !5853
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dom_bb.addr, align 8, !dbg !5854
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %25, %struct.basic_block_def* %26), !dbg !5855
  %27 = load %struct.edge_def*, %struct.edge_def** %new_e, align 8, !dbg !5856
  ret %struct.edge_def* %27, !dbg !5857
}

; Function Attrs: noinline nounwind uwtable
define internal void @slpeel_update_phi_nodes_for_guard1(%struct.edge_def* %guard_edge, %struct.loop* %loop, i8 zeroext %is_new_loop, %struct.basic_block_def** %new_exit_bb, %struct.bitmap_head_def** %defs) #0 !dbg !5858 {
entry:
  %guard_edge.addr = alloca %struct.edge_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %is_new_loop.addr = alloca i8, align 1
  %new_exit_bb.addr = alloca %struct.basic_block_def**, align 8
  %defs.addr = alloca %struct.bitmap_head_def**, align 8
  %orig_phi = alloca %union.gimple_statement_d*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %update_phi = alloca %union.gimple_statement_d*, align 8
  %update_phi2 = alloca %union.gimple_statement_d*, align 8
  %guard_arg = alloca %union.tree_node*, align 8
  %loop_arg = alloca %union.tree_node*, align 8
  %new_merge_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %update_bb = alloca %struct.basic_block_def*, align 8
  %orig_bb = alloca %struct.basic_block_def*, align 8
  %new_exit_e = alloca %struct.edge_def*, align 8
  %current_new_name = alloca %union.tree_node*, align 8
  %gsi_orig = alloca %struct.gimple_stmt_iterator, align 8
  %gsi_update = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp14 = alloca %struct.gimple_stmt_iterator, align 8
  %loop_locus = alloca i32, align 4
  %guard_locus = alloca i32, align 4
  store %struct.edge_def* %guard_edge, %struct.edge_def** %guard_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %guard_edge.addr, metadata !5862, metadata !DIExpression()), !dbg !5863
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5864, metadata !DIExpression()), !dbg !5865
  store i8 %is_new_loop, i8* %is_new_loop.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_new_loop.addr, metadata !5866, metadata !DIExpression()), !dbg !5867
  store %struct.basic_block_def** %new_exit_bb, %struct.basic_block_def*** %new_exit_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %new_exit_bb.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  store %struct.bitmap_head_def** %defs, %struct.bitmap_head_def*** %defs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def*** %defs.addr, metadata !5870, metadata !DIExpression()), !dbg !5871
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_phi, metadata !5872, metadata !DIExpression()), !dbg !5873
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !5874, metadata !DIExpression()), !dbg !5875
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %update_phi, metadata !5876, metadata !DIExpression()), !dbg !5877
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %update_phi2, metadata !5878, metadata !DIExpression()), !dbg !5879
  call void @llvm.dbg.declare(metadata %union.tree_node** %guard_arg, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_arg, metadata !5882, metadata !DIExpression()), !dbg !5883
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_merge_bb, metadata !5884, metadata !DIExpression()), !dbg !5885
  %0 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !5886
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !5887
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5887
  store %struct.basic_block_def* %1, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !5885
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5888, metadata !DIExpression()), !dbg !5889
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !5890
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5890
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5890
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !5890
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5890

cond.true:                                        ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !5890
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !5890
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !5890
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !5890
  br label %cond.end, !dbg !5890

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5890
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !5890
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !5889
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %update_bb, metadata !5891, metadata !DIExpression()), !dbg !5892
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5893
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !5894
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !5894
  store %struct.basic_block_def* %7, %struct.basic_block_def** %update_bb, align 8, !dbg !5892
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %orig_bb, metadata !5895, metadata !DIExpression()), !dbg !5896
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5897
  %header = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 2, !dbg !5898
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5898
  store %struct.basic_block_def* %9, %struct.basic_block_def** %orig_bb, align 8, !dbg !5896
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_exit_e, metadata !5899, metadata !DIExpression()), !dbg !5900
  call void @llvm.dbg.declare(metadata %union.tree_node** %current_new_name, metadata !5901, metadata !DIExpression()), !dbg !5902
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_orig, metadata !5903, metadata !DIExpression()), !dbg !5904
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi_update, metadata !5905, metadata !DIExpression()), !dbg !5906
  %10 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5907
  %call3 = call %struct.edge_def* @single_exit(%struct.loop* %10), !dbg !5908
  %call4 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call3), !dbg !5909
  %11 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !5910
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %11, align 8, !dbg !5911
  %12 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !5912
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %12, align 8, !dbg !5912
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !5912
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !5912
  %tobool6 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !5912
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !5912

cond.true7:                                       ; preds = %cond.end
  %15 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !5912
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %15, align 8, !dbg !5912
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !5912
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs8, align 8, !dbg !5912
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %17, i32 0, i32 0, !dbg !5912
  br label %cond.end11, !dbg !5912

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !5912

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !5912
  %call13 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond12, i32 0), !dbg !5912
  store %struct.edge_def* %call13, %struct.edge_def** %new_exit_e, align 8, !dbg !5913
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %orig_bb, align 8, !dbg !5914
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %18), !dbg !5916
  %19 = bitcast %struct.gimple_stmt_iterator* %gsi_orig to i8*, !dbg !5916
  %20 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5916
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 24, i1 false), !dbg !5916
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %update_bb, align 8, !dbg !5917
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp14, %struct.basic_block_def* %21), !dbg !5918
  %22 = bitcast %struct.gimple_stmt_iterator* %gsi_update to i8*, !dbg !5918
  %23 = bitcast %struct.gimple_stmt_iterator* %tmp14 to i8*, !dbg !5918
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 24, i1 false), !dbg !5918
  br label %for.cond, !dbg !5919

for.cond:                                         ; preds = %for.inc, %cond.end11
  %call15 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_orig), !dbg !5920
  %tobool16 = icmp ne i8 %call15, 0, !dbg !5920
  br i1 %tobool16, label %land.end, label %land.rhs, !dbg !5922

land.rhs:                                         ; preds = %for.cond
  %call17 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_update), !dbg !5923
  %tobool18 = icmp ne i8 %call17, 0, !dbg !5924
  %lnot = xor i1 %tobool18, true, !dbg !5924
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %24 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !5925
  br i1 %24, label %for.body, label %for.end, !dbg !5926

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata i32* %loop_locus, metadata !5927, metadata !DIExpression()), !dbg !5929
  call void @llvm.dbg.declare(metadata i32* %guard_locus, metadata !5930, metadata !DIExpression()), !dbg !5931
  %call19 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_orig), !dbg !5932
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5933
  %call20 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi_update), !dbg !5934
  store %union.gimple_statement_d* %call20, %union.gimple_statement_d** %update_phi, align 8, !dbg !5935
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5936
  %call21 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %25), !dbg !5936
  %call22 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call21), !dbg !5936
  %ssa_name = bitcast %union.tree_node* %call22 to %struct.tree_ssa_name*, !dbg !5936
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !5936
  %26 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !5936
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !5937
  %call23 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %26, %struct.basic_block_def* %27), !dbg !5938
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %new_phi, align 8, !dbg !5939
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5940
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5940
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 3, !dbg !5940
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5940
  %succs24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 1, !dbg !5940
  %31 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs24, align 8, !dbg !5940
  %tobool25 = icmp ne %struct.VEC_edge_gc* %31, null, !dbg !5940
  br i1 %tobool25, label %cond.true26, label %cond.false30, !dbg !5940

cond.true26:                                      ; preds = %for.body
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5940
  %latch27 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 3, !dbg !5940
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %latch27, align 8, !dbg !5940
  %succs28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 1, !dbg !5940
  %34 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs28, align 8, !dbg !5940
  %base29 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %34, i32 0, i32 0, !dbg !5940
  br label %cond.end31, !dbg !5940

cond.false30:                                     ; preds = %for.body
  br label %cond.end31, !dbg !5940

cond.end31:                                       ; preds = %cond.false30, %cond.true26
  %cond32 = phi %struct.VEC_edge_base* [ %base29, %cond.true26 ], [ null, %cond.false30 ], !dbg !5940
  %call33 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond32, i32 0), !dbg !5940
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call33, i32 0, i32 6, !dbg !5940
  %35 = load i32, i32* %dest_idx, align 4, !dbg !5940
  %call34 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %28, i32 %35), !dbg !5940
  %call35 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call34), !dbg !5940
  store %union.tree_node* %call35, %union.tree_node** %loop_arg, align 8, !dbg !5941
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5942
  %37 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5943
  %latch36 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 3, !dbg !5943
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %latch36, align 8, !dbg !5943
  %succs37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 1, !dbg !5943
  %39 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs37, align 8, !dbg !5943
  %tobool38 = icmp ne %struct.VEC_edge_gc* %39, null, !dbg !5943
  br i1 %tobool38, label %cond.true39, label %cond.false43, !dbg !5943

cond.true39:                                      ; preds = %cond.end31
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5943
  %latch40 = getelementptr inbounds %struct.loop, %struct.loop* %40, i32 0, i32 3, !dbg !5943
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %latch40, align 8, !dbg !5943
  %succs41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 1, !dbg !5943
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs41, align 8, !dbg !5943
  %base42 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %42, i32 0, i32 0, !dbg !5943
  br label %cond.end44, !dbg !5943

cond.false43:                                     ; preds = %cond.end31
  br label %cond.end44, !dbg !5943

cond.end44:                                       ; preds = %cond.false43, %cond.true39
  %cond45 = phi %struct.VEC_edge_base* [ %base42, %cond.true39 ], [ null, %cond.false43 ], !dbg !5943
  %call46 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond45, i32 0), !dbg !5943
  %call47 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %36, %struct.edge_def* %call46), !dbg !5944
  store i32 %call47, i32* %loop_locus, align 4, !dbg !5945
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5946
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5946
  %call48 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %44), !dbg !5946
  %dest_idx49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call48, i32 0, i32 6, !dbg !5946
  %45 = load i32, i32* %dest_idx49, align 4, !dbg !5946
  %call50 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %43, i32 %45), !dbg !5946
  %call51 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call50), !dbg !5946
  store %union.tree_node* %call51, %union.tree_node** %guard_arg, align 8, !dbg !5947
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5948
  %47 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5949
  %call52 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %47), !dbg !5950
  %call53 = call i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %46, %struct.edge_def* %call52), !dbg !5951
  store i32 %call53, i32* %guard_locus, align 4, !dbg !5952
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5953
  %49 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5954
  %50 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !5955
  %51 = load i32, i32* %loop_locus, align 4, !dbg !5956
  call void @add_phi_arg(%union.gimple_statement_d* %48, %union.tree_node* %49, %struct.edge_def* %50, i32 %51), !dbg !5957
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5958
  %53 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !5959
  %54 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !5960
  %55 = load i32, i32* %guard_locus, align 4, !dbg !5961
  call void @add_phi_arg(%union.gimple_statement_d* %52, %union.tree_node* %53, %struct.edge_def* %54, i32 %55), !dbg !5962
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !5963
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5963
  %dest_idx54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 6, !dbg !5963
  %58 = load i32, i32* %dest_idx54, align 4, !dbg !5963
  %call55 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %56, i32 %58), !dbg !5963
  %call56 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call55), !dbg !5963
  %59 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5963
  %cmp = icmp eq %union.tree_node* %call56, %59, !dbg !5963
  br i1 %cmp, label %cond.false62, label %lor.lhs.false, !dbg !5963

lor.lhs.false:                                    ; preds = %cond.end44
  %60 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !5963
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5963
  %dest_idx57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 6, !dbg !5963
  %62 = load i32, i32* %dest_idx57, align 4, !dbg !5963
  %call58 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %60, i32 %62), !dbg !5963
  %call59 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call58), !dbg !5963
  %63 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !5963
  %cmp60 = icmp eq %union.tree_node* %call59, %63, !dbg !5963
  br i1 %cmp60, label %cond.false62, label %cond.true61, !dbg !5963

cond.true61:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 542, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5963
  br label %cond.end63, !dbg !5963

cond.false62:                                     ; preds = %lor.lhs.false, %cond.end44
  br label %cond.end63, !dbg !5963

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond64 = phi i32 [ 0, %cond.true61 ], [ 0, %cond.false62 ], !dbg !5963
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !5964
  %65 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5965
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5966
  %call65 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %66), !dbg !5966
  %call66 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call65), !dbg !5966
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %64, %struct.edge_def* %65, %union.tree_node* %call66), !dbg !5967
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5968
  store %union.gimple_statement_d* %67, %union.gimple_statement_d** %update_phi2, align 8, !dbg !5969
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5970
  %call67 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %68), !dbg !5970
  %call68 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call67), !dbg !5970
  %call69 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call68), !dbg !5972
  %tobool70 = icmp ne i8 %call69, 0, !dbg !5972
  br i1 %tobool70, label %if.end, label %if.then, !dbg !5973

if.then:                                          ; preds = %cond.end63
  br label %for.inc, !dbg !5974

if.end:                                           ; preds = %cond.end63
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !5975
  %call71 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %69), !dbg !5975
  %call72 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call71), !dbg !5975
  %ssa_name73 = bitcast %union.tree_node* %call72 to %struct.tree_ssa_name*, !dbg !5975
  %var74 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name73, i32 0, i32 1, !dbg !5975
  %70 = load %union.tree_node*, %union.tree_node** %var74, align 8, !dbg !5975
  %71 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !5976
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %71, align 8, !dbg !5977
  %call75 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %70, %struct.basic_block_def* %72), !dbg !5978
  store %union.gimple_statement_d* %call75, %union.gimple_statement_d** %new_phi, align 8, !dbg !5979
  %73 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5980
  %74 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5981
  %75 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5982
  %call76 = call %struct.edge_def* @single_exit(%struct.loop* %75), !dbg !5983
  %76 = load i32, i32* %loop_locus, align 4, !dbg !5984
  call void @add_phi_arg(%union.gimple_statement_d* %73, %union.tree_node* %74, %struct.edge_def* %call76, i32 %76), !dbg !5985
  %77 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !5986
  %78 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !5986
  %dest_idx77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 6, !dbg !5986
  %79 = load i32, i32* %dest_idx77, align 4, !dbg !5986
  %call78 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %77, i32 %79), !dbg !5986
  %call79 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call78), !dbg !5986
  %80 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5986
  %cmp80 = icmp eq %union.tree_node* %call79, %80, !dbg !5986
  br i1 %cmp80, label %cond.false82, label %cond.true81, !dbg !5986

cond.true81:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 560, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5986
  br label %cond.end83, !dbg !5986

cond.false82:                                     ; preds = %if.end
  br label %cond.end83, !dbg !5986

cond.end83:                                       ; preds = %cond.false82, %cond.true81
  %cond84 = phi i32 [ 0, %cond.true81 ], [ 0, %cond.false82 ], !dbg !5986
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !5987
  %82 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !5988
  %83 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !5989
  %call85 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %83), !dbg !5989
  %call86 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call85), !dbg !5989
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %81, %struct.edge_def* %82, %union.tree_node* %call86), !dbg !5990
  %84 = load i8, i8* %is_new_loop.addr, align 1, !dbg !5991
  %tobool87 = icmp ne i8 %84, 0, !dbg !5991
  br i1 %tobool87, label %if.then88, label %if.else, !dbg !5993

if.then88:                                        ; preds = %cond.end83
  %85 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5994
  store %union.tree_node* %85, %union.tree_node** %current_new_name, align 8, !dbg !5995
  br label %if.end93, !dbg !5996

if.else:                                          ; preds = %cond.end83
  %86 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !5997
  %call89 = call %union.tree_node* @get_current_def(%union.tree_node* %86), !dbg !5999
  store %union.tree_node* %call89, %union.tree_node** %current_new_name, align 8, !dbg !6000
  %87 = load %union.tree_node*, %union.tree_node** %current_new_name, align 8, !dbg !6001
  %tobool90 = icmp ne %union.tree_node* %87, null, !dbg !6001
  br i1 %tobool90, label %if.end92, label %if.then91, !dbg !6003

if.then91:                                        ; preds = %if.else
  br label %for.inc, !dbg !6004

if.end92:                                         ; preds = %if.else
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %if.then88
  %88 = load %union.tree_node*, %union.tree_node** %current_new_name, align 8, !dbg !6005
  %call94 = call %union.tree_node* @get_current_def(%union.tree_node* %88), !dbg !6005
  %cmp95 = icmp eq %union.tree_node* %call94, null, !dbg !6005
  br i1 %cmp95, label %cond.false97, label %cond.true96, !dbg !6005

cond.true96:                                      ; preds = %if.end93
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 586, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6005
  br label %cond.end98, !dbg !6005

cond.false97:                                     ; preds = %if.end93
  br label %cond.end98, !dbg !6005

cond.end98:                                       ; preds = %cond.false97, %cond.true96
  %cond99 = phi i32 [ 0, %cond.true96 ], [ 0, %cond.false97 ], !dbg !6005
  %89 = load %union.tree_node*, %union.tree_node** %current_new_name, align 8, !dbg !6006
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6007
  %call100 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %90), !dbg !6007
  %call101 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call100), !dbg !6007
  call void @set_current_def(%union.tree_node* %89, %union.tree_node* %call101), !dbg !6008
  %91 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** %defs.addr, align 8, !dbg !6009
  %92 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %91, align 8, !dbg !6010
  %93 = load %union.tree_node*, %union.tree_node** %current_new_name, align 8, !dbg !6011
  %ssa_name102 = bitcast %union.tree_node* %93 to %struct.tree_ssa_name*, !dbg !6011
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name102, i32 0, i32 3, !dbg !6011
  %94 = load i32, i32* %version, align 8, !dbg !6011
  %call103 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %92, i32 %94), !dbg !6012
  br label %for.inc, !dbg !6013

for.inc:                                          ; preds = %cond.end98, %if.then91, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi_orig), !dbg !6014
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi_update), !dbg !6015
  br label %for.cond, !dbg !6016, !llvm.loop !6017

for.end:                                          ; preds = %land.end
  ret void, !dbg !6019
}

; Function Attrs: noinline nounwind uwtable
define internal void @slpeel_update_phi_nodes_for_guard2(%struct.edge_def* %guard_edge, %struct.loop* %loop, i8 zeroext %is_new_loop, %struct.basic_block_def** %new_exit_bb) #0 !dbg !6020 {
entry:
  %guard_edge.addr = alloca %struct.edge_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %is_new_loop.addr = alloca i8, align 1
  %new_exit_bb.addr = alloca %struct.basic_block_def**, align 8
  %orig_phi = alloca %union.gimple_statement_d*, align 8
  %new_phi = alloca %union.gimple_statement_d*, align 8
  %update_phi = alloca %union.gimple_statement_d*, align 8
  %update_phi2 = alloca %union.gimple_statement_d*, align 8
  %guard_arg = alloca %union.tree_node*, align 8
  %loop_arg = alloca %union.tree_node*, align 8
  %new_merge_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %update_bb = alloca %struct.basic_block_def*, align 8
  %new_exit_e = alloca %struct.edge_def*, align 8
  %orig_def = alloca %union.tree_node*, align 8
  %orig_def_new_name = alloca %union.tree_node*, align 8
  %new_name = alloca %union.tree_node*, align 8
  %new_name2 = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %guard_edge, %struct.edge_def** %guard_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %guard_edge.addr, metadata !6023, metadata !DIExpression()), !dbg !6024
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !6025, metadata !DIExpression()), !dbg !6026
  store i8 %is_new_loop, i8* %is_new_loop.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %is_new_loop.addr, metadata !6027, metadata !DIExpression()), !dbg !6028
  store %struct.basic_block_def** %new_exit_bb, %struct.basic_block_def*** %new_exit_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %new_exit_bb.addr, metadata !6029, metadata !DIExpression()), !dbg !6030
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %orig_phi, metadata !6031, metadata !DIExpression()), !dbg !6032
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_phi, metadata !6033, metadata !DIExpression()), !dbg !6034
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %update_phi, metadata !6035, metadata !DIExpression()), !dbg !6036
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %update_phi2, metadata !6037, metadata !DIExpression()), !dbg !6038
  call void @llvm.dbg.declare(metadata %union.tree_node** %guard_arg, metadata !6039, metadata !DIExpression()), !dbg !6040
  call void @llvm.dbg.declare(metadata %union.tree_node** %loop_arg, metadata !6041, metadata !DIExpression()), !dbg !6042
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_merge_bb, metadata !6043, metadata !DIExpression()), !dbg !6044
  %0 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6045
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !6046
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6046
  store %struct.basic_block_def* %1, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !6044
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6047, metadata !DIExpression()), !dbg !6048
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !6049
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6049
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6049
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !6049
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6049

cond.true:                                        ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !6049
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !6049
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6049
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !6049
  br label %cond.end, !dbg !6049

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6049

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6049
  %call = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !6049
  store %struct.edge_def* %call, %struct.edge_def** %e, align 8, !dbg !6048
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %update_bb, metadata !6050, metadata !DIExpression()), !dbg !6051
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6052
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !6053
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !6053
  store %struct.basic_block_def* %7, %struct.basic_block_def** %update_bb, align 8, !dbg !6051
  call void @llvm.dbg.declare(metadata %struct.edge_def** %new_exit_e, metadata !6054, metadata !DIExpression()), !dbg !6055
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_def, metadata !6056, metadata !DIExpression()), !dbg !6057
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_def_new_name, metadata !6058, metadata !DIExpression()), !dbg !6059
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name, metadata !6060, metadata !DIExpression()), !dbg !6061
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_name2, metadata !6062, metadata !DIExpression()), !dbg !6063
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !6064, metadata !DIExpression()), !dbg !6065
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !6066, metadata !DIExpression()), !dbg !6067
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6068
  %call3 = call %struct.edge_def* @single_exit(%struct.loop* %8), !dbg !6069
  %call4 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call3), !dbg !6070
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !6071
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %9, align 8, !dbg !6072
  %10 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !6073
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %10, align 8, !dbg !6073
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !6073
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !6073
  %tobool6 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !6073
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !6073

cond.true7:                                       ; preds = %cond.end
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !6073
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %13, align 8, !dbg !6073
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !6073
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs8, align 8, !dbg !6073
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !6073
  br label %cond.end11, !dbg !6073

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !6073

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !6073
  %call13 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond12, i32 0), !dbg !6073
  store %struct.edge_def* %call13, %struct.edge_def** %new_exit_e, align 8, !dbg !6074
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %update_bb, align 8, !dbg !6075
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %16), !dbg !6077
  %17 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !6077
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6077
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !6077
  br label %for.cond, !dbg !6078

for.cond:                                         ; preds = %for.inc, %cond.end11
  %call14 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6079
  %tobool15 = icmp ne i8 %call14, 0, !dbg !6081
  %lnot = xor i1 %tobool15, true, !dbg !6081
  br i1 %lnot, label %for.body, label %for.end, !dbg !6082

for.body:                                         ; preds = %for.cond
  %call16 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !6083
  store %union.gimple_statement_d* %call16, %union.gimple_statement_d** %update_phi, align 8, !dbg !6085
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !6086
  store %union.gimple_statement_d* %19, %union.gimple_statement_d** %orig_phi, align 8, !dbg !6087
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !6088
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6088
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 6, !dbg !6088
  %22 = load i32, i32* %dest_idx, align 4, !dbg !6088
  %call17 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %20, i32 %22), !dbg !6088
  %call18 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call17), !dbg !6088
  store %union.tree_node* %call18, %union.tree_node** %orig_def, align 8, !dbg !6089
  %23 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6090
  %base19 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6090
  %24 = bitcast %struct.tree_base* %base19 to i64*, !dbg !6090
  %bf.load = load i64, i64* %24, align 8, !dbg !6090
  %bf.clear = and i64 %bf.load, 65535, !dbg !6090
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6090
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6092
  br i1 %cmp, label %if.then, label %if.end, !dbg !6093

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6094

if.end:                                           ; preds = %for.body
  %25 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6095
  %call20 = call %union.tree_node* @get_current_def(%union.tree_node* %25), !dbg !6096
  store %union.tree_node* %call20, %union.tree_node** %orig_def_new_name, align 8, !dbg !6097
  store %union.tree_node* null, %union.tree_node** %arg, align 8, !dbg !6098
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !6099
  %call21 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %26), !dbg !6099
  %call22 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call21), !dbg !6099
  %ssa_name = bitcast %union.tree_node* %call22 to %struct.tree_ssa_name*, !dbg !6099
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6099
  %27 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6099
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %new_merge_bb, align 8, !dbg !6100
  %call23 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %27, %struct.basic_block_def* %28), !dbg !6101
  store %union.gimple_statement_d* %call23, %union.gimple_statement_d** %new_phi, align 8, !dbg !6102
  %29 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6103
  store %union.tree_node* %29, %union.tree_node** %new_name, align 8, !dbg !6104
  store %union.tree_node* null, %union.tree_node** %new_name2, align 8, !dbg !6105
  %30 = load %union.tree_node*, %union.tree_node** %orig_def_new_name, align 8, !dbg !6106
  %tobool24 = icmp ne %union.tree_node* %30, null, !dbg !6106
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !6108

if.then25:                                        ; preds = %if.end
  %31 = load %union.tree_node*, %union.tree_node** %orig_def_new_name, align 8, !dbg !6109
  store %union.tree_node* %31, %union.tree_node** %new_name, align 8, !dbg !6111
  %32 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6112
  %call26 = call %union.tree_node* @get_current_def(%union.tree_node* %32), !dbg !6113
  store %union.tree_node* %call26, %union.tree_node** %new_name2, align 8, !dbg !6114
  br label %if.end27, !dbg !6115

if.end27:                                         ; preds = %if.then25, %if.end
  %33 = load i8, i8* %is_new_loop.addr, align 1, !dbg !6116
  %tobool28 = icmp ne i8 %33, 0, !dbg !6116
  br i1 %tobool28, label %if.then29, label %if.else, !dbg !6118

if.then29:                                        ; preds = %if.end27
  %34 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6119
  store %union.tree_node* %34, %union.tree_node** %guard_arg, align 8, !dbg !6121
  %35 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6122
  store %union.tree_node* %35, %union.tree_node** %loop_arg, align 8, !dbg !6123
  br label %if.end30, !dbg !6124

if.else:                                          ; preds = %if.end27
  %36 = load %union.tree_node*, %union.tree_node** %new_name, align 8, !dbg !6125
  store %union.tree_node* %36, %union.tree_node** %guard_arg, align 8, !dbg !6127
  %37 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6128
  store %union.tree_node* %37, %union.tree_node** %loop_arg, align 8, !dbg !6129
  br label %if.end30

if.end30:                                         ; preds = %if.else, %if.then29
  %38 = load %union.tree_node*, %union.tree_node** %new_name2, align 8, !dbg !6130
  %tobool31 = icmp ne %union.tree_node* %38, null, !dbg !6130
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !6132

if.then32:                                        ; preds = %if.end30
  %39 = load %union.tree_node*, %union.tree_node** %new_name2, align 8, !dbg !6133
  store %union.tree_node* %39, %union.tree_node** %guard_arg, align 8, !dbg !6134
  br label %if.end33, !dbg !6135

if.end33:                                         ; preds = %if.then32, %if.end30
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6136
  %41 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !6137
  %42 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !6138
  call void @add_phi_arg(%union.gimple_statement_d* %40, %union.tree_node* %41, %struct.edge_def* %42, i32 0), !dbg !6139
  %43 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6140
  %44 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !6141
  %45 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6142
  call void @add_phi_arg(%union.gimple_statement_d* %43, %union.tree_node* %44, %struct.edge_def* %45, i32 0), !dbg !6143
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !6144
  %47 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6144
  %dest_idx34 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 6, !dbg !6144
  %48 = load i32, i32* %dest_idx34, align 4, !dbg !6144
  %call35 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %46, i32 %48), !dbg !6144
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call35), !dbg !6144
  %49 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6144
  %cmp37 = icmp eq %union.tree_node* %call36, %49, !dbg !6144
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !6144

cond.true38:                                      ; preds = %if.end33
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6144
  br label %cond.end40, !dbg !6144

cond.false39:                                     ; preds = %if.end33
  br label %cond.end40, !dbg !6144

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !6144
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi, align 8, !dbg !6145
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6146
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6147
  %call42 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %52), !dbg !6147
  %call43 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call42), !dbg !6147
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %50, %struct.edge_def* %51, %union.tree_node* %call43), !dbg !6148
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6149
  store %union.gimple_statement_d* %53, %union.gimple_statement_d** %update_phi2, align 8, !dbg !6150
  %54 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !6151
  %call44 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %54), !dbg !6151
  %call45 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call44), !dbg !6151
  %ssa_name46 = bitcast %union.tree_node* %call45 to %struct.tree_ssa_name*, !dbg !6151
  %var47 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name46, i32 0, i32 1, !dbg !6151
  %55 = load %union.tree_node*, %union.tree_node** %var47, align 8, !dbg !6151
  %56 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_exit_bb.addr, align 8, !dbg !6152
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %56, align 8, !dbg !6153
  %call48 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %55, %struct.basic_block_def* %57), !dbg !6154
  store %union.gimple_statement_d* %call48, %union.gimple_statement_d** %new_phi, align 8, !dbg !6155
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6156
  %59 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !6157
  %60 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !6158
  %call49 = call %struct.edge_def* @single_exit(%struct.loop* %60), !dbg !6159
  call void @add_phi_arg(%union.gimple_statement_d* %58, %union.tree_node* %59, %struct.edge_def* %call49, i32 0), !dbg !6160
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !6161
  %62 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !6161
  %dest_idx50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 6, !dbg !6161
  %63 = load i32, i32* %dest_idx50, align 4, !dbg !6161
  %call51 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %61, i32 %63), !dbg !6161
  %call52 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call51), !dbg !6161
  %64 = load %union.tree_node*, %union.tree_node** %loop_arg, align 8, !dbg !6161
  %cmp53 = icmp eq %union.tree_node* %call52, %64, !dbg !6161
  br i1 %cmp53, label %cond.false55, label %cond.true54, !dbg !6161

cond.true54:                                      ; preds = %cond.end40
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 705, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6161
  br label %cond.end56, !dbg !6161

cond.false55:                                     ; preds = %cond.end40
  br label %cond.end56, !dbg !6161

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi i32 [ 0, %cond.true54 ], [ 0, %cond.false55 ], !dbg !6161
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !6162
  %66 = load %struct.edge_def*, %struct.edge_def** %new_exit_e, align 8, !dbg !6163
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6164
  %call58 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %67), !dbg !6164
  %call59 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call58), !dbg !6164
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %65, %struct.edge_def* %66, %union.tree_node* %call59), !dbg !6165
  %68 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !6166
  %69 = load %union.tree_node*, %union.tree_node** %new_name2, align 8, !dbg !6168
  %cmp60 = icmp eq %union.tree_node* %68, %69, !dbg !6169
  br i1 %cmp60, label %if.then61, label %if.end62, !dbg !6170

if.then61:                                        ; preds = %cond.end56
  br label %for.inc, !dbg !6171

if.end62:                                         ; preds = %cond.end56
  %70 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !6172
  store %union.tree_node* %70, %union.tree_node** %arg, align 8, !dbg !6173
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %orig_phi, align 8, !dbg !6174
  %call63 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %71), !dbg !6174
  %call64 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call63), !dbg !6174
  %ssa_name65 = bitcast %union.tree_node* %call64 to %struct.tree_ssa_name*, !dbg !6174
  %var66 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name65, i32 0, i32 1, !dbg !6174
  %72 = load %union.tree_node*, %union.tree_node** %var66, align 8, !dbg !6174
  %73 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6175
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !6176
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6176
  %call67 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %72, %struct.basic_block_def* %74), !dbg !6177
  store %union.gimple_statement_d* %call67, %union.gimple_statement_d** %new_phi, align 8, !dbg !6178
  %75 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6179
  %src68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 0, !dbg !6179
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %src68, align 8, !dbg !6179
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 0, !dbg !6179
  %77 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6179
  %tobool69 = icmp ne %struct.VEC_edge_gc* %77, null, !dbg !6179
  br i1 %tobool69, label %cond.true70, label %cond.false74, !dbg !6179

cond.true70:                                      ; preds = %if.end62
  %78 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6179
  %src71 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 0, !dbg !6179
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %src71, align 8, !dbg !6179
  %preds72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 0, !dbg !6179
  %80 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds72, align 8, !dbg !6179
  %base73 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %80, i32 0, i32 0, !dbg !6179
  br label %cond.end75, !dbg !6179

cond.false74:                                     ; preds = %if.end62
  br label %cond.end75, !dbg !6179

cond.end75:                                       ; preds = %cond.false74, %cond.true70
  %cond76 = phi %struct.VEC_edge_base* [ %base73, %cond.true70 ], [ null, %cond.false74 ], !dbg !6179
  %call77 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond76), !dbg !6179
  %cmp78 = icmp eq i32 %call77, 1, !dbg !6179
  br i1 %cmp78, label %cond.false80, label %cond.true79, !dbg !6179

cond.true79:                                      ; preds = %cond.end75
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 737, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6179
  br label %cond.end81, !dbg !6179

cond.false80:                                     ; preds = %cond.end75
  br label %cond.end81, !dbg !6179

cond.end81:                                       ; preds = %cond.false80, %cond.true79
  %cond82 = phi i32 [ 0, %cond.true79 ], [ 0, %cond.false80 ], !dbg !6179
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6180
  %82 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !6181
  %83 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6182
  %src83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %83, i32 0, i32 0, !dbg !6182
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %src83, align 8, !dbg !6182
  %preds84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 0, !dbg !6182
  %85 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds84, align 8, !dbg !6182
  %tobool85 = icmp ne %struct.VEC_edge_gc* %85, null, !dbg !6182
  br i1 %tobool85, label %cond.true86, label %cond.false90, !dbg !6182

cond.true86:                                      ; preds = %cond.end81
  %86 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6182
  %src87 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %86, i32 0, i32 0, !dbg !6182
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %src87, align 8, !dbg !6182
  %preds88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 0, !dbg !6182
  %88 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds88, align 8, !dbg !6182
  %base89 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %88, i32 0, i32 0, !dbg !6182
  br label %cond.end91, !dbg !6182

cond.false90:                                     ; preds = %cond.end81
  br label %cond.end91, !dbg !6182

cond.end91:                                       ; preds = %cond.false90, %cond.true86
  %cond92 = phi %struct.VEC_edge_base* [ %base89, %cond.true86 ], [ null, %cond.false90 ], !dbg !6182
  %call93 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond92, i32 0), !dbg !6182
  call void @add_phi_arg(%union.gimple_statement_d* %81, %union.tree_node* %82, %struct.edge_def* %call93, i32 0), !dbg !6183
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !6184
  %90 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6184
  %dest_idx94 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %90, i32 0, i32 6, !dbg !6184
  %91 = load i32, i32* %dest_idx94, align 4, !dbg !6184
  %call95 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %89, i32 %91), !dbg !6184
  %call96 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call95), !dbg !6184
  %92 = load %union.tree_node*, %union.tree_node** %guard_arg, align 8, !dbg !6184
  %cmp97 = icmp eq %union.tree_node* %call96, %92, !dbg !6184
  br i1 %cmp97, label %cond.false99, label %cond.true98, !dbg !6184

cond.true98:                                      ; preds = %cond.end91
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 743, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6184
  br label %cond.end100, !dbg !6184

cond.false99:                                     ; preds = %cond.end91
  br label %cond.end100, !dbg !6184

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !6184
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %update_phi2, align 8, !dbg !6185
  %94 = load %struct.edge_def*, %struct.edge_def** %guard_edge.addr, align 8, !dbg !6186
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_phi, align 8, !dbg !6187
  %call102 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %95), !dbg !6187
  %call103 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call102), !dbg !6187
  call void @adjust_phi_and_debug_stmts(%union.gimple_statement_d* %93, %struct.edge_def* %94, %union.tree_node* %call103), !dbg !6188
  br label %for.inc, !dbg !6189

for.inc:                                          ; preds = %cond.end100, %if.then61, %if.then
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !6190
  br label %for.cond, !dbg !6191, !llvm.loop !6192

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6194
}

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_vec_debug_stmts() #0 !dbg !6195 {
entry:
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6198
  %tobool = icmp ne i32 %0, 0, !dbg !6198
  br i1 %tobool, label %if.end, label %if.then, !dbg !6200

if.then:                                          ; preds = %entry
  br label %return, !dbg !6201

if.end:                                           ; preds = %entry
  %1 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6202
  %tobool1 = icmp ne %struct.VEC_adjust_info_stack* %1, null, !dbg !6202
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6202

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6202
  br label %cond.end, !dbg !6202

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !6202

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6202
  br label %while.cond, !dbg !6203

while.cond:                                       ; preds = %cond.end18, %cond.end
  %2 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6204
  %tobool2 = icmp ne %struct.VEC_adjust_info_stack* %2, null, !dbg !6204
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !6204

cond.true3:                                       ; preds = %while.cond
  %3 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6204
  %base = getelementptr inbounds %struct.VEC_adjust_info_stack, %struct.VEC_adjust_info_stack* %3, i32 0, i32 0, !dbg !6204
  br label %cond.end5, !dbg !6204

cond.false4:                                      ; preds = %while.cond
  br label %cond.end5, !dbg !6204

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_adjust_info_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !6204
  %call = call i32 @VEC_adjust_info_base_length(%struct.VEC_adjust_info_base* %cond6), !dbg !6204
  %cmp = icmp eq i32 %call, 0, !dbg !6204
  %lnot = xor i1 %cmp, true, !dbg !6205
  br i1 %lnot, label %while.body, label %while.end, !dbg !6203

while.body:                                       ; preds = %cond.end5
  %4 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6206
  %tobool7 = icmp ne %struct.VEC_adjust_info_stack* %4, null, !dbg !6206
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !6206

cond.true8:                                       ; preds = %while.body
  %5 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6206
  %base9 = getelementptr inbounds %struct.VEC_adjust_info_stack, %struct.VEC_adjust_info_stack* %5, i32 0, i32 0, !dbg !6206
  br label %cond.end11, !dbg !6206

cond.false10:                                     ; preds = %while.body
  br label %cond.end11, !dbg !6206

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_adjust_info_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !6206
  %call13 = call %struct.adjust_info* @VEC_adjust_info_base_last(%struct.VEC_adjust_info_base* %cond12), !dbg !6206
  call void @adjust_debug_stmts_now(%struct.adjust_info* %call13), !dbg !6208
  %6 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6209
  %tobool14 = icmp ne %struct.VEC_adjust_info_stack* %6, null, !dbg !6209
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !6209

cond.true15:                                      ; preds = %cond.end11
  %7 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6209
  %base16 = getelementptr inbounds %struct.VEC_adjust_info_stack, %struct.VEC_adjust_info_stack* %7, i32 0, i32 0, !dbg !6209
  br label %cond.end18, !dbg !6209

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !6209

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_adjust_info_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !6209
  call void @VEC_adjust_info_base_pop(%struct.VEC_adjust_info_base* %cond19), !dbg !6209
  br label %while.cond, !dbg !6203, !llvm.loop !6210

while.end:                                        ; preds = %cond.end5
  call void @VEC_adjust_info_stack_free(%struct.VEC_adjust_info_stack** @adjust_vec), !dbg !6212
  br label %return, !dbg !6213

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !6213
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #3

declare dso_local void @delete_update_ssa() #3

declare dso_local i8* @vec_stack_p_reserve_exact_1(i32, i8*) #3

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #3

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_debug_stmts(%union.tree_node* %from, %union.tree_node* %to, %struct.basic_block_def* %bb) #0 !dbg !6214 {
entry:
  %from.addr = alloca %union.tree_node*, align 8
  %to.addr = alloca %union.tree_node*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %ai = alloca %struct.adjust_info, align 8
  store %union.tree_node* %from, %union.tree_node** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %from.addr, metadata !6217, metadata !DIExpression()), !dbg !6218
  store %union.tree_node* %to, %union.tree_node** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %to.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata %struct.adjust_info* %ai, metadata !6223, metadata !DIExpression()), !dbg !6224
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6225
  %tobool = icmp ne i32 %0, 0, !dbg !6225
  br i1 %tobool, label %land.lhs.true, label %if.end9, !dbg !6227

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !6228
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6228
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6228
  %bf.load = load i64, i64* %2, align 8, !dbg !6228
  %bf.clear = and i64 %bf.load, 65535, !dbg !6228
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6228
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6229
  br i1 %cmp, label %land.lhs.true1, label %if.end9, !dbg !6230

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !6231
  %ssa_name = bitcast %union.tree_node* %3 to %struct.tree_ssa_name*, !dbg !6231
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !6231
  %4 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6231
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6232
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6232
  %call = call %union.tree_node* @gimple_vop(%struct.function* %add.ptr), !dbg !6233
  %cmp2 = icmp ne %union.tree_node* %4, %call, !dbg !6234
  br i1 %cmp2, label %if.then, label %if.end9, !dbg !6235

if.then:                                          ; preds = %land.lhs.true1
  %6 = load %union.tree_node*, %union.tree_node** %from.addr, align 8, !dbg !6236
  %from3 = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %ai, i32 0, i32 0, !dbg !6238
  store %union.tree_node* %6, %union.tree_node** %from3, align 8, !dbg !6239
  %7 = load %union.tree_node*, %union.tree_node** %to.addr, align 8, !dbg !6240
  %to4 = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %ai, i32 0, i32 1, !dbg !6241
  store %union.tree_node* %7, %union.tree_node** %to4, align 8, !dbg !6242
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6243
  %bb5 = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %ai, i32 0, i32 2, !dbg !6244
  store %struct.basic_block_def* %8, %struct.basic_block_def** %bb5, align 8, !dbg !6245
  %9 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** @adjust_vec, align 8, !dbg !6246
  %tobool6 = icmp ne %struct.VEC_adjust_info_stack* %9, null, !dbg !6246
  br i1 %tobool6, label %if.then7, label %if.else, !dbg !6248

if.then7:                                         ; preds = %if.then
  %call8 = call %struct.adjust_info* @VEC_adjust_info_stack_safe_push(%struct.VEC_adjust_info_stack** @adjust_vec, %struct.adjust_info* %ai), !dbg !6249
  br label %if.end, !dbg !6249

if.else:                                          ; preds = %if.then
  call void @adjust_debug_stmts_now(%struct.adjust_info* %ai), !dbg !6250
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end9, !dbg !6251

if.end9:                                          ; preds = %if.end, %land.lhs.true1, %land.lhs.true, %entry
  ret void, !dbg !6252
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vop(%struct.function* %fun) #0 !dbg !6253 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !6258, metadata !DIExpression()), !dbg !6259
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6260
  %tobool = icmp ne %struct.function* %0, null, !dbg !6260
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6260

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6260
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %1, i32 0, i32 3, !dbg !6260
  %2 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6260
  %tobool1 = icmp ne %struct.gimple_df* %2, null, !dbg !6260
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6260

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6260
  br label %cond.end, !dbg !6260

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6260

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6260
  %3 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !6261
  %gimple_df2 = getelementptr inbounds %struct.function, %struct.function* %3, i32 0, i32 3, !dbg !6262
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2, align 8, !dbg !6262
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i32 0, i32 3, !dbg !6263
  %5 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !6263
  ret %union.tree_node* %5, !dbg !6264
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.adjust_info* @VEC_adjust_info_stack_safe_push(%struct.VEC_adjust_info_stack** %vec_, %struct.adjust_info* %obj_) #0 !dbg !6265 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_stack**, align 8
  %obj_.addr = alloca %struct.adjust_info*, align 8
  store %struct.VEC_adjust_info_stack** %vec_, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_stack*** %vec_.addr, metadata !6272, metadata !DIExpression()), !dbg !6273
  store %struct.adjust_info* %obj_, %struct.adjust_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.adjust_info** %obj_.addr, metadata !6274, metadata !DIExpression()), !dbg !6273
  %0 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6273
  %call = call i32 @VEC_adjust_info_stack_reserve(%struct.VEC_adjust_info_stack** %0, i32 1), !dbg !6273
  %1 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6273
  %2 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %1, align 8, !dbg !6273
  %tobool = icmp ne %struct.VEC_adjust_info_stack* %2, null, !dbg !6273
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6273

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6273
  %4 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %3, align 8, !dbg !6273
  %base = getelementptr inbounds %struct.VEC_adjust_info_stack, %struct.VEC_adjust_info_stack* %4, i32 0, i32 0, !dbg !6273
  br label %cond.end, !dbg !6273

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6273

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_adjust_info_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6273
  %5 = load %struct.adjust_info*, %struct.adjust_info** %obj_.addr, align 8, !dbg !6273
  %call1 = call %struct.adjust_info* @VEC_adjust_info_base_quick_push(%struct.VEC_adjust_info_base* %cond, %struct.adjust_info* %5), !dbg !6273
  ret %struct.adjust_info* %call1, !dbg !6273
}

; Function Attrs: noinline nounwind uwtable
define internal void @adjust_debug_stmts_now(%struct.adjust_info* %ai) #0 !dbg !6275 {
entry:
  %ai.addr = alloca %struct.adjust_info*, align 8
  %bbphi = alloca %struct.basic_block_def*, align 8
  %orig_def = alloca %union.tree_node*, align 8
  %new_def = alloca %union.tree_node*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %bbdef = alloca %struct.basic_block_def*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %bbuse = alloca %struct.basic_block_def*, align 8
  store %struct.adjust_info* %ai, %struct.adjust_info** %ai.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.adjust_info** %ai.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bbphi, metadata !6280, metadata !DIExpression()), !dbg !6281
  %0 = load %struct.adjust_info*, %struct.adjust_info** %ai.addr, align 8, !dbg !6282
  %bb = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %0, i32 0, i32 2, !dbg !6283
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6283
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bbphi, align 8, !dbg !6281
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_def, metadata !6284, metadata !DIExpression()), !dbg !6285
  %2 = load %struct.adjust_info*, %struct.adjust_info** %ai.addr, align 8, !dbg !6286
  %from = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %2, i32 0, i32 0, !dbg !6287
  %3 = load %union.tree_node*, %union.tree_node** %from, align 8, !dbg !6287
  store %union.tree_node* %3, %union.tree_node** %orig_def, align 8, !dbg !6285
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_def, metadata !6288, metadata !DIExpression()), !dbg !6289
  %4 = load %struct.adjust_info*, %struct.adjust_info** %ai.addr, align 8, !dbg !6290
  %to = getelementptr inbounds %struct.adjust_info, %struct.adjust_info* %4, i32 0, i32 1, !dbg !6291
  %5 = load %union.tree_node*, %union.tree_node** %to, align 8, !dbg !6291
  store %union.tree_node* %5, %union.tree_node** %new_def, align 8, !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !6292, metadata !DIExpression()), !dbg !6300
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6301, metadata !DIExpression()), !dbg !6302
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bbdef, metadata !6303, metadata !DIExpression()), !dbg !6304
  %6 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6305
  %ssa_name = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !6305
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6305
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6305
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %7), !dbg !6306
  store %struct.basic_block_def* %call, %struct.basic_block_def** %bbdef, align 8, !dbg !6304
  %call1 = call zeroext i8 @dom_info_available_p(i32 1), !dbg !6307
  %tobool = icmp ne i8 %call1, 0, !dbg !6307
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6307

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6307
  br label %cond.end, !dbg !6307

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6307

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6307
  %8 = load %union.tree_node*, %union.tree_node** %orig_def, align 8, !dbg !6308
  %call2 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter, %union.tree_node* %8), !dbg !6308
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %stmt, align 8, !dbg !6308
  br label %for.cond, !dbg !6308

for.cond:                                         ; preds = %for.inc34, %cond.end
  %call3 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !6310
  %tobool4 = icmp ne i8 %call3, 0, !dbg !6310
  %lnot = xor i1 %tobool4, true, !dbg !6310
  br i1 %lnot, label %for.body, label %for.end36, !dbg !6308

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6312, metadata !DIExpression()), !dbg !6314
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bbuse, metadata !6315, metadata !DIExpression()), !dbg !6316
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6317
  %call5 = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %9), !dbg !6319
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6319
  br i1 %tobool6, label %if.end, label %if.then, !dbg !6320

if.then:                                          ; preds = %for.body
  br label %for.inc34, !dbg !6321

if.end:                                           ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6322
  %call7 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %10), !dbg !6322
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6322
  br i1 %tobool8, label %cond.false10, label %cond.true9, !dbg !6322

cond.true9:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i32 160, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6322
  br label %cond.end11, !dbg !6322

cond.false10:                                     ; preds = %if.end
  br label %cond.end11, !dbg !6322

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !6322
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6323
  %call13 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %11), !dbg !6324
  store %struct.basic_block_def* %call13, %struct.basic_block_def** %bbuse, align 8, !dbg !6325
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bbuse, align 8, !dbg !6326
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bbphi, align 8, !dbg !6328
  %cmp = icmp eq %struct.basic_block_def* %12, %13, !dbg !6329
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6330

lor.lhs.false:                                    ; preds = %cond.end11
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bbuse, align 8, !dbg !6331
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bbphi, align 8, !dbg !6332
  %call14 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !6333
  %conv = zext i8 %call14 to i32, !dbg !6333
  %tobool15 = icmp ne i32 %conv, 0, !dbg !6333
  br i1 %tobool15, label %land.lhs.true, label %if.end33, !dbg !6334

land.lhs.true:                                    ; preds = %lor.lhs.false, %cond.end11
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bbuse, align 8, !dbg !6335
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bbdef, align 8, !dbg !6336
  %cmp16 = icmp eq %struct.basic_block_def* %16, %17, !dbg !6337
  br i1 %cmp16, label %if.end33, label %lor.lhs.false18, !dbg !6338

lor.lhs.false18:                                  ; preds = %land.lhs.true
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bbuse, align 8, !dbg !6339
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bbdef, align 8, !dbg !6340
  %call19 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %18, %struct.basic_block_def* %19), !dbg !6341
  %conv20 = zext i8 %call19 to i32, !dbg !6341
  %tobool21 = icmp ne i32 %conv20, 0, !dbg !6341
  br i1 %tobool21, label %if.end33, label %if.then22, !dbg !6342

if.then22:                                        ; preds = %lor.lhs.false18
  %20 = load %union.tree_node*, %union.tree_node** %new_def, align 8, !dbg !6343
  %tobool23 = icmp ne %union.tree_node* %20, null, !dbg !6343
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !6346

if.then24:                                        ; preds = %if.then22
  %call25 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !6347
  store %struct.ssa_use_operand_d* %call25, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6347
  br label %for.cond26, !dbg !6347

for.cond26:                                       ; preds = %for.inc, %if.then24
  %call27 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm_iter), !dbg !6349
  %tobool28 = icmp ne i8 %call27, 0, !dbg !6349
  %lnot29 = xor i1 %tobool28, true, !dbg !6349
  br i1 %lnot29, label %for.body30, label %for.end, !dbg !6347

for.body30:                                       ; preds = %for.cond26
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6351
  %22 = load %union.tree_node*, %union.tree_node** %new_def, align 8, !dbg !6351
  call void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %21, %union.tree_node* %22), !dbg !6351
  br label %for.inc, !dbg !6351

for.inc:                                          ; preds = %for.body30
  %call31 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !6349
  store %struct.ssa_use_operand_d* %call31, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6349
  br label %for.cond26, !dbg !6349, !llvm.loop !6352

for.end:                                          ; preds = %for.cond26
  br label %if.end32, !dbg !6353

if.else:                                          ; preds = %if.then22
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6354
  call void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %23), !dbg !6356
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6357
  call void @update_stmt(%union.gimple_statement_d* %24), !dbg !6358
  br label %if.end32

if.end32:                                         ; preds = %if.else, %for.end
  br label %if.end33, !dbg !6359

if.end33:                                         ; preds = %if.end32, %lor.lhs.false18, %land.lhs.true, %lor.lhs.false
  br label %for.inc34, !dbg !6360

for.inc34:                                        ; preds = %if.end33, %if.then
  %call35 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm_iter), !dbg !6310
  store %union.gimple_statement_d* %call35, %union.gimple_statement_d** %stmt, align 8, !dbg !6310
  br label %for.cond, !dbg !6310, !llvm.loop !6361

for.end36:                                        ; preds = %for.cond
  ret void, !dbg !6363
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_adjust_info_stack_reserve(%struct.VEC_adjust_info_stack** %vec_, i32 %alloc_) #0 !dbg !6364 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_stack**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_adjust_info_stack** %vec_, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_stack*** %vec_.addr, metadata !6367, metadata !DIExpression()), !dbg !6368
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6369, metadata !DIExpression()), !dbg !6368
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6370, metadata !DIExpression()), !dbg !6368
  %0 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6368
  %1 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %0, align 8, !dbg !6368
  %tobool = icmp ne %struct.VEC_adjust_info_stack* %1, null, !dbg !6368
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6368

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6368
  %3 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %2, align 8, !dbg !6368
  %base = getelementptr inbounds %struct.VEC_adjust_info_stack, %struct.VEC_adjust_info_stack* %3, i32 0, i32 0, !dbg !6368
  br label %cond.end, !dbg !6368

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6368

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_adjust_info_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6368
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6368
  %call = call i32 @VEC_adjust_info_base_space(%struct.VEC_adjust_info_base* %cond, i32 %4), !dbg !6368
  %tobool1 = icmp ne i32 %call, 0, !dbg !6368
  %lnot = xor i1 %tobool1, true, !dbg !6368
  %lnot.ext = zext i1 %lnot to i32, !dbg !6368
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6368
  %5 = load i32, i32* %extend, align 4, !dbg !6371
  %tobool2 = icmp ne i32 %5, 0, !dbg !6371
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6368

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6371
  %7 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %6, align 8, !dbg !6371
  %8 = bitcast %struct.VEC_adjust_info_stack* %7 to i8*, !dbg !6371
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6371
  %call3 = call i8* @vec_stack_o_reserve(i8* %8, i32 %9, i64 8, i64 24), !dbg !6371
  %10 = bitcast i8* %call3 to %struct.VEC_adjust_info_stack*, !dbg !6371
  %11 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6371
  store %struct.VEC_adjust_info_stack* %10, %struct.VEC_adjust_info_stack** %11, align 8, !dbg !6371
  br label %if.end, !dbg !6371

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6368
  ret i32 %12, !dbg !6368
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.adjust_info* @VEC_adjust_info_base_quick_push(%struct.VEC_adjust_info_base* %vec_, %struct.adjust_info* %obj_) #0 !dbg !6373 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_base*, align 8
  %obj_.addr = alloca %struct.adjust_info*, align 8
  %slot_ = alloca %struct.adjust_info*, align 8
  store %struct.VEC_adjust_info_base* %vec_, %struct.VEC_adjust_info_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_base** %vec_.addr, metadata !6377, metadata !DIExpression()), !dbg !6378
  store %struct.adjust_info* %obj_, %struct.adjust_info** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.adjust_info** %obj_.addr, metadata !6379, metadata !DIExpression()), !dbg !6378
  call void @llvm.dbg.declare(metadata %struct.adjust_info** %slot_, metadata !6380, metadata !DIExpression()), !dbg !6378
  %0 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6378
  %num = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %0, i32 0, i32 0, !dbg !6378
  %1 = load i32, i32* %num, align 8, !dbg !6378
  %2 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6378
  %alloc = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %2, i32 0, i32 1, !dbg !6378
  %3 = load i32, i32* %alloc, align 4, !dbg !6378
  %cmp = icmp ult i32 %1, %3, !dbg !6378
  %conv = zext i1 %cmp to i32, !dbg !6378
  %4 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6378
  %vec = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %4, i32 0, i32 2, !dbg !6378
  %5 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6378
  %num1 = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %5, i32 0, i32 0, !dbg !6378
  %6 = load i32, i32* %num1, align 8, !dbg !6378
  %inc = add i32 %6, 1, !dbg !6378
  store i32 %inc, i32* %num1, align 8, !dbg !6378
  %idxprom = zext i32 %6 to i64, !dbg !6378
  %arrayidx = getelementptr inbounds [1 x %struct.adjust_info], [1 x %struct.adjust_info]* %vec, i64 0, i64 %idxprom, !dbg !6378
  store %struct.adjust_info* %arrayidx, %struct.adjust_info** %slot_, align 8, !dbg !6378
  %7 = load %struct.adjust_info*, %struct.adjust_info** %obj_.addr, align 8, !dbg !6381
  %tobool = icmp ne %struct.adjust_info* %7, null, !dbg !6381
  br i1 %tobool, label %if.then, label %if.end, !dbg !6378

if.then:                                          ; preds = %entry
  %8 = load %struct.adjust_info*, %struct.adjust_info** %slot_, align 8, !dbg !6381
  %9 = load %struct.adjust_info*, %struct.adjust_info** %obj_.addr, align 8, !dbg !6381
  %10 = bitcast %struct.adjust_info* %8 to i8*, !dbg !6381
  %11 = bitcast %struct.adjust_info* %9 to i8*, !dbg !6381
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 24, i1 false), !dbg !6381
  br label %if.end, !dbg !6381

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.adjust_info*, %struct.adjust_info** %slot_, align 8, !dbg !6378
  ret %struct.adjust_info* %12, !dbg !6378
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_adjust_info_base_space(%struct.VEC_adjust_info_base* %vec_, i32 %alloc_) #0 !dbg !6383 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_adjust_info_base* %vec_, %struct.VEC_adjust_info_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_base** %vec_.addr, metadata !6386, metadata !DIExpression()), !dbg !6387
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6388, metadata !DIExpression()), !dbg !6387
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6387
  %cmp = icmp sge i32 %0, 0, !dbg !6387
  %conv = zext i1 %cmp to i32, !dbg !6387
  %1 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6387
  %tobool = icmp ne %struct.VEC_adjust_info_base* %1, null, !dbg !6387
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6387

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6387
  %alloc = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %2, i32 0, i32 1, !dbg !6387
  %3 = load i32, i32* %alloc, align 4, !dbg !6387
  %4 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6387
  %num = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %4, i32 0, i32 0, !dbg !6387
  %5 = load i32, i32* %num, align 8, !dbg !6387
  %sub = sub i32 %3, %5, !dbg !6387
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6387
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6387
  %conv2 = zext i1 %cmp1 to i32, !dbg !6387
  br label %cond.end, !dbg !6387

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6387
  %tobool3 = icmp ne i32 %7, 0, !dbg !6387
  %lnot = xor i1 %tobool3, true, !dbg !6387
  %lnot.ext = zext i1 %lnot to i32, !dbg !6387
  br label %cond.end, !dbg !6387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6387
  ret i32 %cond, !dbg !6387
}

declare dso_local i8* @vec_stack_o_reserve(i8*, i32, i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6389 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6392, metadata !DIExpression()), !dbg !6393
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6394
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6395
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6396
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6396
  ret %struct.basic_block_def* %1, !dbg !6397
}

declare dso_local zeroext i8 @dom_info_available_p(i32) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !6398 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6402, metadata !DIExpression()), !dbg !6403
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6404, metadata !DIExpression()), !dbg !6405
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !6406
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !6406
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !6406
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6407
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !6408
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6409
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6410
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6411
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !6411
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !6412
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6412
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6413
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !6414
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6415
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6416
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !6417
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6418
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6419
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !6420
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6421
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6422
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6423
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !6424
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !6425
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !6426
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6427
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !6428
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !6429
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6430
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !6431
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6432
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !6433
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !6434
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !6435
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6436
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !6438
  %tobool = icmp ne i8 %call, 0, !dbg !6438
  br i1 %tobool, label %if.then, label %if.end, !dbg !6439

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6440
  br label %return, !dbg !6440

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6441
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !6442
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6442
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6443
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !6444
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6445
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !6445
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !6445
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !6445
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !6445
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !6445
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !6446
  br label %return, !dbg !6446

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6447
  ret %union.gimple_statement_d* %18, !dbg !6447
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6448 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6453, metadata !DIExpression()), !dbg !6454
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6455
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6456
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6456
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6457
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !6458
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !6458
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !6459
  %conv = zext i1 %cmp to i32, !dbg !6459
  %conv1 = trunc i32 %conv to i8, !dbg !6460
  ret i8 %conv1, !dbg !6461
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !6462 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6463, metadata !DIExpression()), !dbg !6464
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6465
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6466
  %cmp = icmp eq i32 %call, 2, !dbg !6467
  %conv = zext i1 %cmp to i32, !dbg !6467
  %conv1 = trunc i32 %conv to i8, !dbg !6466
  ret i8 %conv1, !dbg !6468
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !6469 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6470, metadata !DIExpression()), !dbg !6471
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6472
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !6474
  %tobool = icmp ne i8 %call, 0, !dbg !6474
  br i1 %tobool, label %if.then, label %if.end, !dbg !6475

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6476
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6477
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6478
  %bf.load = load i32, i32* %2, align 8, !dbg !6478
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6478
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !6479
  %conv = zext i1 %cmp to i32, !dbg !6479
  %conv1 = trunc i32 %conv to i8, !dbg !6476
  store i8 %conv1, i8* %retval, align 1, !dbg !6480
  br label %return, !dbg !6480

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6481
  br label %return, !dbg !6481

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6482
  ret i8 %3, !dbg !6482
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6483 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6486, metadata !DIExpression()), !dbg !6487
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6488
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6489
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6489
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !6490
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6490
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6491
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !6492
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6493
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6494
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6495
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6495
  ret %struct.ssa_use_operand_d* %5, !dbg !6496
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6497 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6498, metadata !DIExpression()), !dbg !6499
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6500
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !6501
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6501
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6502
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !6503
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !6504
  %conv = zext i1 %cmp to i32, !dbg !6504
  %conv1 = trunc i32 %conv to i8, !dbg !6505
  ret i8 %conv1, !dbg !6506
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6507 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6508, metadata !DIExpression()), !dbg !6509
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6510
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !6511
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !6511
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6512
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6513
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6514
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6515
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6517
  %tobool = icmp ne i8 %call, 0, !dbg !6517
  br i1 %tobool, label %if.then, label %if.else, !dbg !6518

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6519
  br label %return, !dbg !6519

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6520
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !6522
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !6522
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !6523
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6523
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6524
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !6525
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !6526
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6527
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !6528
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !6528
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6529
  br label %return, !dbg !6529

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6530
  ret %struct.ssa_use_operand_d* %10, !dbg !6530
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) #0 !dbg !6531 {
entry:
  %dbg.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %dbg, %union.gimple_statement_d** %dbg.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dbg.addr, metadata !6534, metadata !DIExpression()), !dbg !6535
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dbg.addr, align 8, !dbg !6536
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* null), !dbg !6537
  ret void, !dbg !6538
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !6539 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6540, metadata !DIExpression()), !dbg !6541
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6542
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6544
  %tobool = icmp ne i8 %call, 0, !dbg !6544
  br i1 %tobool, label %if.then, label %if.end, !dbg !6545

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6546
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !6548
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6549
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !6550
  br label %if.end, !dbg !6551

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6552
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !6553 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6556, metadata !DIExpression()), !dbg !6557
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6558
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !6559
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !6560
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6560
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6561
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !6562
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !6563
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6564
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !6566
  %tobool = icmp ne i8 %call, 0, !dbg !6566
  br i1 %tobool, label %if.then, label %if.end4, !dbg !6567

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6568
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !6571
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !6572
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6572
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !6573
  br i1 %cmp, label %if.then2, label %if.end, !dbg !6574

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6575
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !6576
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !6577
  br label %if.end, !dbg !6577

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !6578
  br label %return, !dbg !6578

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6579
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !6580
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !6580
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6581
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !6582
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6583
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !6583
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !6583
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !6583
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6583
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6583
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !6584
  br label %return, !dbg !6584

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !6585
  ret %union.gimple_statement_d* %13, !dbg !6585
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !6586 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6589, metadata !DIExpression()), !dbg !6590
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !6591, metadata !DIExpression()), !dbg !6592
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6593, metadata !DIExpression()), !dbg !6594
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !6595, metadata !DIExpression()), !dbg !6596
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6597
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6596
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !6598, metadata !DIExpression()), !dbg !6599
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6600
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !6600
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !6600
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6600
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6599
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !6601, metadata !DIExpression()), !dbg !6602
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6603
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !6603
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !6602
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !6604, metadata !DIExpression()), !dbg !6605
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !6606, metadata !DIExpression()), !dbg !6607
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6608
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6609
  %conv = zext i8 %call1 to i32, !dbg !6609
  %tobool = icmp ne i32 %conv, 0, !dbg !6609
  %5 = zext i1 %tobool to i64, !dbg !6609
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !6609
  store i32 %cond, i32* %flag, align 4, !dbg !6610
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6611
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !6613
  %cmp = icmp eq i32 %call2, 16, !dbg !6614
  br i1 %cmp, label %if.then, label %if.else, !dbg !6615

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6616
  %8 = load i32, i32* %flag, align 4, !dbg !6616
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !6616
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6616
  br label %for.cond, !dbg !6616

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6619
  %tobool6 = icmp ne i8 %call5, 0, !dbg !6619
  %lnot = xor i1 %tobool6, true, !dbg !6619
  br i1 %lnot, label %for.body, label %for.end, !dbg !6616

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6621
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !6621
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6623
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !6624
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !6625

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6626
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6627
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6628
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !6629
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6630
  br label %if.end, !dbg !6631

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !6623

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6619
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6619
  br label %for.cond, !dbg !6619, !llvm.loop !6632

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !6634

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !6635
  %cmp13 = icmp eq i32 %14, 1, !dbg !6638
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !6639

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6640
  %16 = load i32, i32* %flag, align 4, !dbg !6640
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !6640
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6640
  br label %for.cond17, !dbg !6640

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6643
  %tobool19 = icmp ne i8 %call18, 0, !dbg !6643
  %lnot20 = xor i1 %tobool19, true, !dbg !6643
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !6640

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6645
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !6645
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6647
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !6648
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !6649

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6650
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6651
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6652
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !6653
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6654
  br label %if.end27, !dbg !6655

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !6647

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !6643
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6643
  br label %for.cond17, !dbg !6643, !llvm.loop !6656

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !6658

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !6659
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !6661
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6662
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !6663
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !6664

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6665
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !6665
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !6668
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !6669
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !6670

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6671
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6672
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6673
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !6674
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6675
  br label %if.end41, !dbg !6676

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !6677

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6678
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !6680
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !6681
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !6681
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !6682
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !6683

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6684
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !6685
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !6686
  br label %if.end49, !dbg !6686

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !6687
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !6688
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !6689
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !6690
  ret void, !dbg !6691
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !6692 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6693, metadata !DIExpression()), !dbg !6694
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !6695, metadata !DIExpression()), !dbg !6696
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6697, metadata !DIExpression()), !dbg !6698
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !6699, metadata !DIExpression()), !dbg !6700
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6701
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !6702
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !6700
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !6703, metadata !DIExpression()), !dbg !6704
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6705
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !6706
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6707
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !6708
  store i8 0, i8* %done, align 8, !dbg !6709
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6710
  %and = and i32 %3, 5, !dbg !6710
  %cmp = icmp ne i32 %and, 0, !dbg !6710
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6710

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6710
  br label %cond.end, !dbg !6710

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6710

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6710
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !6711
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !6712
  %conv = zext i8 %call1 to i32, !dbg !6712
  %tobool = icmp ne i32 %conv, 0, !dbg !6712
  %5 = zext i1 %tobool to i64, !dbg !6712
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !6712
  store i32 %cond2, i32* %comp, align 4, !dbg !6713
  %6 = load i32, i32* %flags.addr, align 4, !dbg !6714
  %7 = load i32, i32* %comp, align 4, !dbg !6716
  %and3 = and i32 %6, %7, !dbg !6717
  %cmp4 = icmp eq i32 %and3, 0, !dbg !6718
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6719

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6720
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !6722
  store i8 1, i8* %done6, align 8, !dbg !6723
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6724
  br label %return, !dbg !6724

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6725
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6726
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !6727
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6728
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !6729
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !6730
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6731
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !6732
  store i32 %call7, i32* %num_phi, align 4, !dbg !6733
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6734
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !6735
  store i32 2, i32* %iter_type, align 4, !dbg !6736
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6737
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !6738
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6739
  br label %return, !dbg !6739

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6740
  ret %struct.ssa_use_operand_d* %15, !dbg !6740
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !6741 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !6744, metadata !DIExpression()), !dbg !6745
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !6746, metadata !DIExpression()), !dbg !6747
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !6748, metadata !DIExpression()), !dbg !6749
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6750
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !6752
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !6753
  br i1 %cmp, label %if.then, label %if.end3, !dbg !6754

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6755
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !6758
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !6758
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6759
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !6760
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !6761

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6762
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6763
  br label %if.end, !dbg !6764

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6765
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !6767
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6768
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6769
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !6770
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !6771
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6772
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !6773

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !6774
  ret %struct.ssa_use_operand_d* %10, !dbg !6775
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !6776 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6779, metadata !DIExpression()), !dbg !6780
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !6781, metadata !DIExpression()), !dbg !6782
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6783
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6785
  %tobool = icmp ne i8 %call, 0, !dbg !6785
  br i1 %tobool, label %if.end, label %if.then, !dbg !6786

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6787
  br label %return, !dbg !6787

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6788
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !6789
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !6790
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !6791
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !6791
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !6792
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6793
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !6793
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !6795

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6796
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !6796
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !6797
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !6797
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6798
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !6799
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !6800
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !6801
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !6802

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !6803
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !6803
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6804
  br label %return, !dbg !6804

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6805
  br label %return, !dbg !6805

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6806
  ret %struct.ssa_use_operand_d* %8, !dbg !6806
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !6807 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6808, metadata !DIExpression()), !dbg !6809
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6810
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6811
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !6812
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6812
  ret %union.tree_node* %1, !dbg !6813
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6814 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6817, metadata !DIExpression()), !dbg !6818
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6819
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !6820
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6821
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6822
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !6823
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !6824
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6825
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !6826
  store i32 0, i32* %iter_type, align 4, !dbg !6827
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6828
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !6829
  store i32 0, i32* %phi_i, align 8, !dbg !6830
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6831
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !6832
  store i32 0, i32* %num_phi, align 4, !dbg !6833
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6834
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !6835
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6836
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6837
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !6838
  store i8 1, i8* %done, align 8, !dbg !6839
  ret void, !dbg !6840
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6841 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6844
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6845
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6846
  %1 = load i32, i32* %nargs, align 4, !dbg !6846
  ret i32 %1, !dbg !6847
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6848 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6851, metadata !DIExpression()), !dbg !6852
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6853, metadata !DIExpression()), !dbg !6854
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6855, metadata !DIExpression()), !dbg !6856
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6857
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6857
  %conv = zext i8 %call to i32, !dbg !6857
  %tobool = icmp ne i32 %conv, 0, !dbg !6857
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6857

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6857
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6857
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6857
  %cmp = icmp ult i32 %1, %call1, !dbg !6857
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6857

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6857
  br label %cond.end, !dbg !6857

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6857

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6857
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6858
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6859
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6860
  %5 = load i32, i32* %i.addr, align 4, !dbg !6861
  %idxprom = zext i32 %5 to i64, !dbg !6860
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6860
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6862
  ret void, !dbg !6863
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6864 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6865, metadata !DIExpression()), !dbg !6866
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6867
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6868
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6869
  %1 = load i32, i32* %num_ops, align 4, !dbg !6869
  ret i32 %1, !dbg !6870
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6871 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6872, metadata !DIExpression()), !dbg !6873
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6874, metadata !DIExpression()), !dbg !6875
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6876
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6877
  %idxprom = zext i32 %call to i64, !dbg !6878
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6878
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6878
  store i64 %1, i64* %off, align 8, !dbg !6879
  %2 = load i64, i64* %off, align 8, !dbg !6880
  %cmp = icmp ne i64 %2, 0, !dbg !6880
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6880

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6880
  br label %cond.end, !dbg !6880

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6880

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6880
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6881
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6882
  %5 = load i64, i64* %off, align 8, !dbg !6883
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6884
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6885
  ret %union.tree_node** %6, !dbg !6886
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6887 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6892
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6893
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6894
  ret i32 %call1, !dbg !6895
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6896 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6899, metadata !DIExpression()), !dbg !6900
  %0 = load i32, i32* %code.addr, align 4, !dbg !6901
  %idxprom = zext i32 %0 to i64, !dbg !6902
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6902
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6902
  ret i32 %1, !dbg !6903
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #3

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !6904 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6907, metadata !DIExpression()), !dbg !6908
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6909
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !6909
  %tobool = icmp ne i8 %call, 0, !dbg !6909
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6909

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6909
  br label %cond.end, !dbg !6909

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6909

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6909
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6910
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !6910
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6910
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6910
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6910

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6910
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !6910
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !6910
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6910
  br label %cond.end5, !dbg !6910

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6910

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6910
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6910
  ret %struct.edge_def* %call7, !dbg !6911
}

declare dso_local %struct.edge_def* @make_single_succ_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #3

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) #3

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !6912 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6915, metadata !DIExpression()), !dbg !6916
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6917
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !6917
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6917
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6917
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6917

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6917
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6917
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !6917
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6917
  br label %cond.end, !dbg !6917

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6917

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6917
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6917
  %cmp = icmp eq i32 %call, 1, !dbg !6918
  %conv = zext i1 %cmp to i32, !dbg !6918
  %conv2 = trunc i32 %conv to i8, !dbg !6917
  ret i8 %conv2, !dbg !6919
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #3

declare dso_local void @set_current_def(%union.tree_node*, %union.tree_node*) #3

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_adjust_info_base_length(%struct.VEC_adjust_info_base* %vec_) #0 !dbg !6920 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_base*, align 8
  store %struct.VEC_adjust_info_base* %vec_, %struct.VEC_adjust_info_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_base** %vec_.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  %0 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6926
  %tobool = icmp ne %struct.VEC_adjust_info_base* %0, null, !dbg !6926
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6926

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6926
  %num = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %1, i32 0, i32 0, !dbg !6926
  %2 = load i32, i32* %num, align 8, !dbg !6926
  br label %cond.end, !dbg !6926

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6926

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6926
  ret i32 %cond, !dbg !6926
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.adjust_info* @VEC_adjust_info_base_last(%struct.VEC_adjust_info_base* %vec_) #0 !dbg !6927 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_base*, align 8
  store %struct.VEC_adjust_info_base* %vec_, %struct.VEC_adjust_info_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_base** %vec_.addr, metadata !6930, metadata !DIExpression()), !dbg !6931
  %0 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6931
  %tobool = icmp ne %struct.VEC_adjust_info_base* %0, null, !dbg !6931
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6931

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6931
  %num = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %1, i32 0, i32 0, !dbg !6931
  %2 = load i32, i32* %num, align 8, !dbg !6931
  %tobool1 = icmp ne i32 %2, 0, !dbg !6931
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !6932
  %land.ext = zext i1 %3 to i32, !dbg !6931
  %4 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6931
  %vec = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %4, i32 0, i32 2, !dbg !6931
  %5 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6931
  %num2 = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %5, i32 0, i32 0, !dbg !6931
  %6 = load i32, i32* %num2, align 8, !dbg !6931
  %sub = sub i32 %6, 1, !dbg !6931
  %idxprom = zext i32 %sub to i64, !dbg !6931
  %arrayidx = getelementptr inbounds [1 x %struct.adjust_info], [1 x %struct.adjust_info]* %vec, i64 0, i64 %idxprom, !dbg !6931
  ret %struct.adjust_info* %arrayidx, !dbg !6931
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_adjust_info_base_pop(%struct.VEC_adjust_info_base* %vec_) #0 !dbg !6933 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_base*, align 8
  store %struct.VEC_adjust_info_base* %vec_, %struct.VEC_adjust_info_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_base** %vec_.addr, metadata !6936, metadata !DIExpression()), !dbg !6937
  %0 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6937
  %num = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %0, i32 0, i32 0, !dbg !6937
  %1 = load i32, i32* %num, align 8, !dbg !6937
  %2 = load %struct.VEC_adjust_info_base*, %struct.VEC_adjust_info_base** %vec_.addr, align 8, !dbg !6937
  %num1 = getelementptr inbounds %struct.VEC_adjust_info_base, %struct.VEC_adjust_info_base* %2, i32 0, i32 0, !dbg !6937
  %3 = load i32, i32* %num1, align 8, !dbg !6937
  %dec = add i32 %3, -1, !dbg !6937
  store i32 %dec, i32* %num1, align 8, !dbg !6937
  ret void, !dbg !6937
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_adjust_info_stack_free(%struct.VEC_adjust_info_stack** %vec_) #0 !dbg !6938 {
entry:
  %vec_.addr = alloca %struct.VEC_adjust_info_stack**, align 8
  store %struct.VEC_adjust_info_stack** %vec_, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_adjust_info_stack*** %vec_.addr, metadata !6941, metadata !DIExpression()), !dbg !6942
  %0 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6943
  %1 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %0, align 8, !dbg !6943
  %tobool = icmp ne %struct.VEC_adjust_info_stack* %1, null, !dbg !6943
  br i1 %tobool, label %if.then, label %if.end, !dbg !6942

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6943
  %3 = load %struct.VEC_adjust_info_stack*, %struct.VEC_adjust_info_stack** %2, align 8, !dbg !6943
  %4 = bitcast %struct.VEC_adjust_info_stack* %3 to i8*, !dbg !6943
  call void @vec_stack_free(i8* %4), !dbg !6943
  br label %if.end, !dbg !6943

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_adjust_info_stack**, %struct.VEC_adjust_info_stack*** %vec_.addr, align 8, !dbg !6942
  store %struct.VEC_adjust_info_stack* null, %struct.VEC_adjust_info_stack** %5, align 8, !dbg !6942
  ret void, !dbg !6942
}

declare dso_local void @vec_stack_free(i8*) #3

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) #3

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) #3

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #3

declare dso_local i32 @vector_type_mode(%union.tree_node*) #3

declare dso_local %union.tree_node* @vect_create_addr_base_for_vector_ref(%union.gimple_statement_d*, %struct.gimple_seq_d**, %union.tree_node*, %struct.loop*) #3

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #3

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_data_reference_p_base_iterate(%struct.VEC_data_reference_p_base* %vec_, i32 %ix_, %struct.data_reference** %ptr) #0 !dbg !6945 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_data_reference_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_reference**, align 8
  store %struct.VEC_data_reference_p_base* %vec_, %struct.VEC_data_reference_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_data_reference_p_base** %vec_.addr, metadata !6951, metadata !DIExpression()), !dbg !6952
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6953, metadata !DIExpression()), !dbg !6952
  store %struct.data_reference** %ptr, %struct.data_reference*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference*** %ptr.addr, metadata !6954, metadata !DIExpression()), !dbg !6952
  %0 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6955
  %tobool = icmp ne %struct.VEC_data_reference_p_base* %0, null, !dbg !6955
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6955

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6955
  %2 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6955
  %num = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %2, i32 0, i32 0, !dbg !6955
  %3 = load i32, i32* %num, align 8, !dbg !6955
  %cmp = icmp ult i32 %1, %3, !dbg !6955
  br i1 %cmp, label %if.then, label %if.else, !dbg !6952

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_data_reference_p_base*, %struct.VEC_data_reference_p_base** %vec_.addr, align 8, !dbg !6957
  %vec = getelementptr inbounds %struct.VEC_data_reference_p_base, %struct.VEC_data_reference_p_base* %4, i32 0, i32 2, !dbg !6957
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6957
  %idxprom = zext i32 %5 to i64, !dbg !6957
  %arrayidx = getelementptr inbounds [1 x %struct.data_reference*], [1 x %struct.data_reference*]* %vec, i64 0, i64 %idxprom, !dbg !6957
  %6 = load %struct.data_reference*, %struct.data_reference** %arrayidx, align 8, !dbg !6957
  %7 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !6957
  store %struct.data_reference* %6, %struct.data_reference** %7, align 8, !dbg !6957
  store i32 1, i32* %retval, align 4, !dbg !6957
  br label %return, !dbg !6957

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_reference**, %struct.data_reference*** %ptr.addr, align 8, !dbg !6959
  store %struct.data_reference* null, %struct.data_reference** %8, align 8, !dbg !6959
  store i32 0, i32* %retval, align 4, !dbg !6959
  br label %return, !dbg !6959

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6952
  ret i32 %9, !dbg !6952
}

; Function Attrs: noinline nounwind uwtable
define internal void @vect_update_init_of_dr(%struct.data_reference* %dr, %union.tree_node* %niters) #0 !dbg !6961 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  %niters.addr = alloca %union.tree_node*, align 8
  %offset = alloca %union.tree_node*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !6964, metadata !DIExpression()), !dbg !6965
  store %union.tree_node* %niters, %union.tree_node** %niters.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niters.addr, metadata !6966, metadata !DIExpression()), !dbg !6967
  call void @llvm.dbg.declare(metadata %union.tree_node** %offset, metadata !6968, metadata !DIExpression()), !dbg !6969
  %0 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !6970
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %0, i32 0, i32 4, !dbg !6970
  %offset1 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 1, !dbg !6970
  %1 = load %union.tree_node*, %union.tree_node** %offset1, align 8, !dbg !6970
  store %union.tree_node* %1, %union.tree_node** %offset, align 8, !dbg !6969
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6971
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6971
  %4 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !6971
  %call = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %3, %union.tree_node* %4), !dbg !6971
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6971
  %6 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !6971
  %innermost2 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %6, i32 0, i32 4, !dbg !6971
  %step = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost2, i32 0, i32 3, !dbg !6971
  %7 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !6971
  %call3 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %5, %union.tree_node* %7), !dbg !6971
  %call4 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %2, %union.tree_node* %call, %union.tree_node* %call3), !dbg !6971
  store %union.tree_node* %call4, %union.tree_node** %niters.addr, align 8, !dbg !6972
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6973
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !6973
  %10 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6973
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %9, %union.tree_node* %10), !dbg !6973
  %11 = load %union.tree_node*, %union.tree_node** %niters.addr, align 8, !dbg !6973
  %call6 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %8, %union.tree_node* %call5, %union.tree_node* %11), !dbg !6973
  store %union.tree_node* %call6, %union.tree_node** %offset, align 8, !dbg !6974
  %12 = load %union.tree_node*, %union.tree_node** %offset, align 8, !dbg !6975
  %13 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !6976
  %innermost7 = getelementptr inbounds %struct.data_reference, %struct.data_reference* %13, i32 0, i32 4, !dbg !6976
  %offset8 = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost7, i32 0, i32 1, !dbg !6976
  store %union.tree_node* %12, %union.tree_node** %offset8, align 8, !dbg !6977
  ret void, !dbg !6978
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) #0 !dbg !6979 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_gimple_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %union.gimple_statement_d**, align 8
  store %struct.VEC_gimple_base* %vec_, %struct.VEC_gimple_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_gimple_base** %vec_.addr, metadata !6983, metadata !DIExpression()), !dbg !6984
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6985, metadata !DIExpression()), !dbg !6984
  store %union.gimple_statement_d** %ptr, %union.gimple_statement_d*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d*** %ptr.addr, metadata !6986, metadata !DIExpression()), !dbg !6984
  %0 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6987
  %tobool = icmp ne %struct.VEC_gimple_base* %0, null, !dbg !6987
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6987

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6987
  %2 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6987
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %2, i32 0, i32 0, !dbg !6987
  %3 = load i32, i32* %num, align 8, !dbg !6987
  %cmp = icmp ult i32 %1, %3, !dbg !6987
  br i1 %cmp, label %if.then, label %if.else, !dbg !6984

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_gimple_base*, %struct.VEC_gimple_base** %vec_.addr, align 8, !dbg !6989
  %vec = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %4, i32 0, i32 2, !dbg !6989
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6989
  %idxprom = zext i32 %5 to i64, !dbg !6989
  %arrayidx = getelementptr inbounds [1 x %union.gimple_statement_d*], [1 x %union.gimple_statement_d*]* %vec, i64 0, i64 %idxprom, !dbg !6989
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !6989
  %7 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !6989
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %7, align 8, !dbg !6989
  store i32 1, i32* %retval, align 4, !dbg !6989
  br label %return, !dbg !6989

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %union.gimple_statement_d**, %union.gimple_statement_d*** %ptr.addr, align 8, !dbg !6991
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %8, align 8, !dbg !6991
  store i32 0, i32* %retval, align 4, !dbg !6991
  br label %return, !dbg !6991

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6984
  ret i32 %9, !dbg !6984
}

declare dso_local i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) #0 !dbg !6993 {
entry:
  %var.addr = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6998, metadata !DIExpression()), !dbg !6999
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7000
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7000
  %1 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !7001
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7002
  %call = call %union.tree_node* @make_ssa_name_fn(%struct.function* %add.ptr, %union.tree_node* %1, %union.gimple_statement_d* %2), !dbg !7003
  ret %union.tree_node* %call, !dbg !7004
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #3

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) #3

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_ddr_p_base_iterate(%struct.VEC_ddr_p_base* %vec_, i32 %ix_, %struct.data_dependence_relation** %ptr) #0 !dbg !7005 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_ddr_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.data_dependence_relation**, align 8
  store %struct.VEC_ddr_p_base* %vec_, %struct.VEC_ddr_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_ddr_p_base** %vec_.addr, metadata !7009, metadata !DIExpression()), !dbg !7010
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7011, metadata !DIExpression()), !dbg !7010
  store %struct.data_dependence_relation** %ptr, %struct.data_dependence_relation*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_dependence_relation*** %ptr.addr, metadata !7012, metadata !DIExpression()), !dbg !7010
  %0 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7013
  %tobool = icmp ne %struct.VEC_ddr_p_base* %0, null, !dbg !7013
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7013

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7013
  %2 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7013
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %2, i32 0, i32 0, !dbg !7013
  %3 = load i32, i32* %num, align 8, !dbg !7013
  %cmp = icmp ult i32 %1, %3, !dbg !7013
  br i1 %cmp, label %if.then, label %if.else, !dbg !7010

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_ddr_p_base*, %struct.VEC_ddr_p_base** %vec_.addr, align 8, !dbg !7015
  %vec = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %4, i32 0, i32 2, !dbg !7015
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7015
  %idxprom = zext i32 %5 to i64, !dbg !7015
  %arrayidx = getelementptr inbounds [1 x %struct.data_dependence_relation*], [1 x %struct.data_dependence_relation*]* %vec, i64 0, i64 %idxprom, !dbg !7015
  %6 = load %struct.data_dependence_relation*, %struct.data_dependence_relation** %arrayidx, align 8, !dbg !7015
  %7 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !7015
  store %struct.data_dependence_relation* %6, %struct.data_dependence_relation** %7, align 8, !dbg !7015
  store i32 1, i32* %retval, align 4, !dbg !7015
  br label %return, !dbg !7015

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.data_dependence_relation**, %struct.data_dependence_relation*** %ptr.addr, align 8, !dbg !7017
  store %struct.data_dependence_relation* null, %struct.data_dependence_relation** %8, align 8, !dbg !7017
  store i32 0, i32* %retval, align 4, !dbg !7017
  br label %return, !dbg !7017

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7010
  ret i32 %9, !dbg !7010
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @vect_vfa_segment_size(%struct.data_reference* %dr, %union.tree_node* %vect_factor) #0 !dbg !7019 {
entry:
  %dr.addr = alloca %struct.data_reference*, align 8
  %vect_factor.addr = alloca %union.tree_node*, align 8
  %segment_length = alloca %union.tree_node*, align 8
  %vector_size = alloca %union.tree_node*, align 8
  store %struct.data_reference* %dr, %struct.data_reference** %dr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.data_reference** %dr.addr, metadata !7022, metadata !DIExpression()), !dbg !7023
  store %union.tree_node* %vect_factor, %union.tree_node** %vect_factor.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vect_factor.addr, metadata !7024, metadata !DIExpression()), !dbg !7025
  call void @llvm.dbg.declare(metadata %union.tree_node** %segment_length, metadata !7026, metadata !DIExpression()), !dbg !7027
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7028
  %1 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !7028
  %innermost = getelementptr inbounds %struct.data_reference, %struct.data_reference* %1, i32 0, i32 4, !dbg !7028
  %step = getelementptr inbounds %struct.innermost_loop_behavior, %struct.innermost_loop_behavior* %innermost, i32 0, i32 3, !dbg !7028
  %2 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !7028
  %3 = load %union.tree_node*, %union.tree_node** %vect_factor.addr, align 8, !dbg !7028
  %call = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %0, %union.tree_node* %2, %union.tree_node* %3), !dbg !7028
  store %union.tree_node* %call, %union.tree_node** %segment_length, align 8, !dbg !7027
  %4 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !7029
  %call1 = call i32 @vect_supportable_dr_alignment(%struct.data_reference* %4), !dbg !7031
  %cmp = icmp eq i32 %call1, 3, !dbg !7032
  br i1 %cmp, label %if.then, label %if.end, !dbg !7033

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.tree_node** %vector_size, metadata !7034, metadata !DIExpression()), !dbg !7036
  %5 = load %struct.data_reference*, %struct.data_reference** %dr.addr, align 8, !dbg !7037
  %stmt = getelementptr inbounds %struct.data_reference, %struct.data_reference* %5, i32 0, i32 0, !dbg !7037
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7037
  %call2 = call %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %6), !dbg !7037
  %vectype = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call2, i32 0, i32 5, !dbg !7037
  %7 = load %union.tree_node*, %union.tree_node** %vectype, align 8, !dbg !7037
  %type = bitcast %union.tree_node* %7 to %struct.tree_type*, !dbg !7037
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i32 0, i32 3, !dbg !7037
  %8 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !7037
  store %union.tree_node* %8, %union.tree_node** %vector_size, align 8, !dbg !7036
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !7038
  %10 = load %union.tree_node*, %union.tree_node** %segment_length, align 8, !dbg !7038
  %11 = load %union.tree_node*, %union.tree_node** %vector_size, align 8, !dbg !7038
  %call3 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %9, %union.tree_node* %10, %union.tree_node* %11), !dbg !7038
  store %union.tree_node* %call3, %union.tree_node** %segment_length, align 8, !dbg !7039
  br label %if.end, !dbg !7040

if.end:                                           ; preds = %if.then, %entry
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7041
  %13 = load %union.tree_node*, %union.tree_node** %segment_length, align 8, !dbg !7041
  %call4 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %12, %union.tree_node* %13), !dbg !7041
  ret %union.tree_node* %call4, !dbg !7042
}

declare dso_local i32 @vect_supportable_dr_alignment(%struct.data_reference*) #3

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2494, !2495, !2496}
!llvm.ident = !{!2497}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "adjust_vec", scope: !2, file: !3, line: 132, type: !2472, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !825, globals: !2493, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-vect-loop-manip.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !140, !145, !154, !158, !163, !182, !189, !196, !390, !397, !403, !407, !421, !432, !566, !580, !618, !633, !640, !645, !768, !771, !797, !804, !818}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !135, line: 363, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139}
!137 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!140 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !135, line: 355, baseType: !7, size: 32, elements: !141)
!141 = !{!142, !143, !144}
!142 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!143 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!144 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!145 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !146, line: 31, baseType: !7, size: 32, elements: !147)
!146 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!147 = !{!148, !149, !150, !151, !152, !153}
!148 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!150 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!151 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!152 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!153 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !146, line: 91, baseType: !7, size: 32, elements: !155)
!155 = !{!156, !157}
!156 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!157 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!158 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !159, line: 474, baseType: !7, size: 32, elements: !160)
!159 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!160 = !{!161, !162}
!161 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!162 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !164, line: 280, baseType: !7, size: 32, elements: !165)
!164 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!165 = !{!166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181}
!166 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!167 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!168 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!169 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!170 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!171 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!172 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!173 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!182 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !164, line: 1817, baseType: !7, size: 32, elements: !183)
!183 = !{!184, !185, !186, !187, !188}
!184 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !164, line: 1805, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !164, line: 39, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389}
!198 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!203 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!204 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!205 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!206 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!207 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!208 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!209 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!210 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!211 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!212 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!213 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!214 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!215 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!216 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!217 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!218 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!219 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!220 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!221 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!222 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!223 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!224 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!225 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!226 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!227 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!228 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!229 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!230 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!231 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!232 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!233 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!234 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!235 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!236 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!237 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!238 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!239 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!240 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!241 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!242 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!243 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!244 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!245 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!246 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!247 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!248 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!249 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!250 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!251 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!252 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!253 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!254 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!256 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!257 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!258 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!259 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!260 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!261 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!262 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!263 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!264 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!265 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!266 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!267 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!268 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!269 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!270 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!271 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!272 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!273 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!274 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!275 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!276 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!277 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!278 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!280 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!281 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!282 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!283 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!284 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!285 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!286 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!287 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!288 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!289 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!290 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!291 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!292 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!293 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!294 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!295 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!296 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!297 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!298 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!299 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!300 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!301 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!302 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!303 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!304 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!305 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!306 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!307 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!308 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!309 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!310 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!311 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!312 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!313 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!314 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!315 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!316 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!317 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!318 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!320 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!321 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!322 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!323 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!324 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!325 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!326 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!327 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!328 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!329 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!330 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!331 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!332 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!333 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!334 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!335 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!336 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!337 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!338 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!339 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!340 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!341 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!342 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!343 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!344 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!345 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!346 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!347 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!348 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!349 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!350 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!351 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!352 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!353 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!354 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!362 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!363 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!364 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!365 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!366 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!367 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!368 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!369 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!370 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!371 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!372 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!373 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!374 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!383 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!384 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!385 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!386 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!387 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!388 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!389 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !391, line: 119, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !398, line: 4603, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402}
!400 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !135, line: 912, baseType: !7, size: 32, elements: !404)
!404 = !{!405, !406}
!405 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!406 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "verbosity_levels", file: !408, line: 74, baseType: !7, size: 32, elements: !409)
!408 = !DIFile(filename: "./tree-vectorizer.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!409 = !{!410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420}
!410 = !DIEnumerator(name: "REPORT_NONE", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "REPORT_VECTORIZED_LOCATIONS", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "REPORT_UNVECTORIZED_LOCATIONS", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "REPORT_COST", value: 3, isUnsigned: true)
!414 = !DIEnumerator(name: "REPORT_ALIGNMENT", value: 4, isUnsigned: true)
!415 = !DIEnumerator(name: "REPORT_DR_DETAILS", value: 5, isUnsigned: true)
!416 = !DIEnumerator(name: "REPORT_BAD_FORM_LOOPS", value: 6, isUnsigned: true)
!417 = !DIEnumerator(name: "REPORT_OUTER_LOOPS", value: 7, isUnsigned: true)
!418 = !DIEnumerator(name: "REPORT_SLP", value: 8, isUnsigned: true)
!419 = !DIEnumerator(name: "REPORT_DETAILS", value: 9, isUnsigned: true)
!420 = !DIEnumerator(name: "MAX_VERBOSITY_LEVEL", value: 10, isUnsigned: true)
!421 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_def_type", file: !408, line: 57, baseType: !7, size: 32, elements: !422)
!422 = !{!423, !424, !425, !426, !427, !428, !429, !430, !431}
!423 = !DIEnumerator(name: "vect_uninitialized_def", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "vect_constant_def", value: 1, isUnsigned: true)
!425 = !DIEnumerator(name: "vect_external_def", value: 2, isUnsigned: true)
!426 = !DIEnumerator(name: "vect_internal_def", value: 3, isUnsigned: true)
!427 = !DIEnumerator(name: "vect_induction_def", value: 4, isUnsigned: true)
!428 = !DIEnumerator(name: "vect_reduction_def", value: 5, isUnsigned: true)
!429 = !DIEnumerator(name: "vect_double_reduction_def", value: 6, isUnsigned: true)
!430 = !DIEnumerator(name: "vect_nested_cycle", value: 7, isUnsigned: true)
!431 = !DIEnumerator(name: "vect_unknown_def_type", value: 8, isUnsigned: true)
!432 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !164, line: 3410, baseType: !7, size: 32, elements: !433)
!433 = !{!434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565}
!434 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!435 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!436 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!437 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!438 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!439 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!440 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!441 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!442 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!443 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!444 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!445 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!446 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!447 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!448 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!449 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!450 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!451 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!452 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!453 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!454 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!455 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!456 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!457 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!458 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!459 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!460 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!461 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!462 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!463 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!464 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!465 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!466 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!467 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!468 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!469 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!470 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!471 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!472 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!473 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!474 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!475 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!476 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!477 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!478 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!479 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!480 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!481 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!482 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!483 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!484 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!485 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!486 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!487 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!488 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!489 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!490 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!491 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!492 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!493 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!494 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!495 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!496 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!497 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!498 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!499 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!500 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!501 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!502 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!503 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!504 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!505 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!506 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!507 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!508 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!509 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!510 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!511 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!512 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!513 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!514 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!515 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!516 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!517 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!518 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!519 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!520 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!521 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!522 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!523 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!524 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!525 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!526 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!527 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!528 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!529 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!530 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!531 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!532 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!533 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!534 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!535 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!536 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!537 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!538 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!539 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!540 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!541 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!542 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!543 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!544 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!545 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!546 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!547 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!548 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!549 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!550 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!551 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!552 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!553 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!554 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!555 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!556 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!557 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!558 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!559 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!560 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!561 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!562 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!563 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!564 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!565 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!566 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !135, line: 295, baseType: !7, size: 32, elements: !567)
!567 = !{!568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579}
!568 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!569 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!570 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!571 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!572 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!573 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!574 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!575 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!576 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!577 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!578 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!579 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !398, line: 51, baseType: !7, size: 32, elements: !581)
!581 = !{!582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617}
!582 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!583 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!617 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!618 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stmt_vec_info_type", file: !408, line: 336, baseType: !7, size: 32, elements: !619)
!619 = !{!620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632}
!620 = !DIEnumerator(name: "undef_vec_info_type", value: 0, isUnsigned: true)
!621 = !DIEnumerator(name: "load_vec_info_type", value: 1, isUnsigned: true)
!622 = !DIEnumerator(name: "store_vec_info_type", value: 2, isUnsigned: true)
!623 = !DIEnumerator(name: "op_vec_info_type", value: 3, isUnsigned: true)
!624 = !DIEnumerator(name: "call_vec_info_type", value: 4, isUnsigned: true)
!625 = !DIEnumerator(name: "assignment_vec_info_type", value: 5, isUnsigned: true)
!626 = !DIEnumerator(name: "condition_vec_info_type", value: 6, isUnsigned: true)
!627 = !DIEnumerator(name: "reduc_vec_info_type", value: 7, isUnsigned: true)
!628 = !DIEnumerator(name: "induc_vec_info_type", value: 8, isUnsigned: true)
!629 = !DIEnumerator(name: "type_promotion_vec_info_type", value: 9, isUnsigned: true)
!630 = !DIEnumerator(name: "type_demotion_vec_info_type", value: 10, isUnsigned: true)
!631 = !DIEnumerator(name: "type_conversion_vec_info_type", value: 11, isUnsigned: true)
!632 = !DIEnumerator(name: "loop_exit_ctrl_vec_info_type", value: 12, isUnsigned: true)
!633 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_relevant", file: !408, line: 354, baseType: !7, size: 32, elements: !634)
!634 = !{!635, !636, !637, !638, !639}
!635 = !DIEnumerator(name: "vect_unused_in_scope", value: 0, isUnsigned: true)
!636 = !DIEnumerator(name: "vect_used_in_outer_by_reduction", value: 1, isUnsigned: true)
!637 = !DIEnumerator(name: "vect_used_in_outer", value: 2, isUnsigned: true)
!638 = !DIEnumerator(name: "vect_used_by_reduction", value: 3, isUnsigned: true)
!639 = !DIEnumerator(name: "vect_used_in_scope", value: 4, isUnsigned: true)
!640 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "slp_vect_type", file: !408, line: 390, baseType: !7, size: 32, elements: !641)
!641 = !{!642, !643, !644}
!642 = !DIEnumerator(name: "loop_vect", value: 0, isUnsigned: true)
!643 = !DIEnumerator(name: "pure_slp", value: 1, isUnsigned: true)
!644 = !DIEnumerator(name: "hybrid", value: 2, isUnsigned: true)
!645 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !646, line: 82, baseType: !7, size: 32, elements: !647)
!646 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!647 = !{!648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767}
!648 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!690 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!691 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!695 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!696 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!697 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!698 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!699 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!700 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!720 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!722 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!723 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!725 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!726 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!727 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!728 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!729 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!730 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!731 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!732 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!733 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!734 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!735 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!736 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!737 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!738 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!739 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!740 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!741 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!742 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!743 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!744 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!745 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!746 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!747 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!748 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!749 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!750 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!751 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!752 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!753 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!754 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!755 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!756 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!757 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!758 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!759 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!760 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!761 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!762 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!763 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!764 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!765 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!766 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!767 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!768 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !398, line: 124, baseType: !7, size: 32, elements: !769)
!769 = !{!770}
!770 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!771 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !398, line: 727, baseType: !7, size: 32, elements: !772)
!772 = !{!773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796}
!773 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!774 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!775 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!776 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!777 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!778 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!779 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!780 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!781 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!782 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!783 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!784 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!785 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!786 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!787 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!788 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!789 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!790 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!791 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!792 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!793 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!794 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!795 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!796 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!797 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !164, line: 4288, baseType: !7, size: 32, elements: !798)
!798 = !{!799, !800, !801, !802, !803}
!799 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!800 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!801 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!802 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!803 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!804 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !164, line: 3745, baseType: !7, size: 32, elements: !805)
!805 = !{!806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817}
!806 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!807 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!808 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!809 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!810 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!811 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!812 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!813 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!814 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!815 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!816 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!817 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!818 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dr_alignment_support", file: !408, line: 48, baseType: !7, size: 32, elements: !819)
!819 = !{!820, !821, !822, !823, !824}
!820 = !DIEnumerator(name: "dr_unaligned_unsupported", value: 0, isUnsigned: true)
!821 = !DIEnumerator(name: "dr_unaligned_supported", value: 1, isUnsigned: true)
!822 = !DIEnumerator(name: "dr_explicit_realign", value: 2, isUnsigned: true)
!823 = !DIEnumerator(name: "dr_explicit_realign_optimized", value: 3, isUnsigned: true)
!824 = !DIEnumerator(name: "dr_aligned", value: 4, isUnsigned: true)
!825 = !{!826, !1110, !956, !2185, !196, !2186, !2189, !923, !7, !2472, !1727, !1191, !1095, !2196, !828, !2490, !2492, !880, !2282, !1157, !2296}
!826 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !827, line: 56, baseType: !828)
!827 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !164, line: 3371, size: 1792, elements: !830)
!830 = !{!831, !864, !870, !883, !902, !913, !918, !929, !935, !949, !961, !999, !1513, !1541, !1558, !1559, !1564, !1573, !1579, !1584, !1588, !1592, !1836, !1883, !1889, !1895, !1902, !1915, !1929, !1946, !1958, !1980, !1995, !2167}
!831 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !829, file: !164, line: 3372, baseType: !832, size: 64)
!832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !164, line: 360, size: 64, elements: !833)
!833 = !{!834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863}
!834 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !832, file: !164, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !832, file: !164, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !832, file: !164, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !832, file: !164, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !832, file: !164, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !832, file: !164, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !832, file: !164, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !832, file: !164, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !832, file: !164, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !832, file: !164, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !832, file: !164, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !832, file: !164, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !832, file: !164, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !832, file: !164, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !832, file: !164, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !832, file: !164, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !832, file: !164, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !832, file: !164, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !832, file: !164, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !832, file: !164, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !832, file: !164, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !832, file: !164, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !832, file: !164, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !832, file: !164, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !832, file: !164, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !832, file: !164, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !832, file: !164, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !832, file: !164, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !832, file: !164, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !832, file: !164, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !829, file: !164, line: 3373, baseType: !865, size: 192)
!865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !164, line: 402, size: 192, elements: !866)
!866 = !{!867, !868, !869}
!867 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !865, file: !164, line: 403, baseType: !832, size: 64)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !865, file: !164, line: 404, baseType: !826, size: 64, offset: 64)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !865, file: !164, line: 405, baseType: !826, size: 64, offset: 128)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !829, file: !164, line: 3374, baseType: !871, size: 320)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !164, line: 1384, size: 320, elements: !872)
!872 = !{!873, !874}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !871, file: !164, line: 1385, baseType: !865, size: 192)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !871, file: !164, line: 1386, baseType: !875, size: 128, offset: 192)
!875 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !876, line: 58, baseType: !877)
!876 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!877 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !876, line: 54, size: 128, elements: !878)
!878 = !{!879, !881}
!879 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !877, file: !876, line: 56, baseType: !880, size: 64)
!880 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !877, file: !876, line: 57, baseType: !882, size: 64, offset: 64)
!882 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !829, file: !164, line: 3375, baseType: !884, size: 256)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !164, line: 1397, size: 256, elements: !885)
!885 = !{!886, !887}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !884, file: !164, line: 1398, baseType: !865, size: 192)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !884, file: !164, line: 1399, baseType: !888, size: 64, offset: 192)
!888 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !889, size: 64)
!889 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !890, line: 52, size: 256, elements: !891)
!890 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!891 = !{!892, !893, !894, !895, !896, !897, !898}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !889, file: !890, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !889, file: !890, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !889, file: !890, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !889, file: !890, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !889, file: !890, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !889, file: !890, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !889, file: !890, line: 62, baseType: !899, size: 192, offset: 64)
!899 = !DICompositeType(tag: DW_TAG_array_type, baseType: !880, size: 192, elements: !900)
!900 = !{!901}
!901 = !DISubrange(count: 3)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !829, file: !164, line: 3376, baseType: !903, size: 256)
!903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !164, line: 1408, size: 256, elements: !904)
!904 = !{!905, !906}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !903, file: !164, line: 1409, baseType: !865, size: 192)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !903, file: !164, line: 1410, baseType: !907, size: 64, offset: 192)
!907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !908, size: 64)
!908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !909, line: 27, size: 192, elements: !910)
!909 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !908, file: !909, line: 29, baseType: !875, size: 128)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !908, file: !909, line: 30, baseType: !5, size: 32, offset: 128)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !829, file: !164, line: 3377, baseType: !914, size: 256)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !164, line: 1437, size: 256, elements: !915)
!915 = !{!916, !917}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !914, file: !164, line: 1438, baseType: !865, size: 192)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !914, file: !164, line: 1439, baseType: !826, size: 64, offset: 192)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !829, file: !164, line: 3378, baseType: !919, size: 256)
!919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !164, line: 1418, size: 256, elements: !920)
!920 = !{!921, !922, !924}
!921 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !919, file: !164, line: 1419, baseType: !865, size: 192)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !919, file: !164, line: 1420, baseType: !923, size: 32, offset: 192)
!923 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !919, file: !164, line: 1421, baseType: !925, size: 8, offset: 224)
!925 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 8, elements: !927)
!926 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!927 = !{!928}
!928 = !DISubrange(count: 1)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !829, file: !164, line: 3379, baseType: !930, size: 320)
!930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !164, line: 1428, size: 320, elements: !931)
!931 = !{!932, !933, !934}
!932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !930, file: !164, line: 1429, baseType: !865, size: 192)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !930, file: !164, line: 1430, baseType: !826, size: 64, offset: 192)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !930, file: !164, line: 1431, baseType: !826, size: 64, offset: 256)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !829, file: !164, line: 3380, baseType: !936, size: 320)
!936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !164, line: 1460, size: 320, elements: !937)
!937 = !{!938, !939}
!938 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !936, file: !164, line: 1461, baseType: !865, size: 192)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !936, file: !164, line: 1462, baseType: !940, size: 128, offset: 192)
!940 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !941, line: 31, size: 128, elements: !942)
!941 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!942 = !{!943, !947, !948}
!943 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !940, file: !941, line: 32, baseType: !944, size: 64)
!944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !946)
!946 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !940, file: !941, line: 33, baseType: !7, size: 32, offset: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !940, file: !941, line: 34, baseType: !7, size: 32, offset: 96)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !829, file: !164, line: 3381, baseType: !950, size: 384)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !164, line: 2507, size: 384, elements: !951)
!951 = !{!952, !953, !958, !959, !960}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !950, file: !164, line: 2508, baseType: !865, size: 192)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !950, file: !164, line: 2509, baseType: !954, size: 32, offset: 192)
!954 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !955, line: 58, baseType: !956)
!955 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!956 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !957, line: 44, baseType: !7)
!957 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!958 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !950, file: !164, line: 2510, baseType: !7, size: 32, offset: 224)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !950, file: !164, line: 2511, baseType: !826, size: 64, offset: 256)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !950, file: !164, line: 2512, baseType: !826, size: 64, offset: 320)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !829, file: !164, line: 3382, baseType: !962, size: 896)
!962 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !164, line: 2652, size: 896, elements: !963)
!963 = !{!964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996}
!964 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !962, file: !164, line: 2653, baseType: !950, size: 384)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !962, file: !164, line: 2654, baseType: !826, size: 64, offset: 384)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !962, file: !164, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !962, file: !164, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !962, file: !164, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !962, file: !164, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !962, file: !164, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !962, file: !164, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !962, file: !164, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !962, file: !164, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !962, file: !164, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !962, file: !164, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !962, file: !164, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !962, file: !164, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !962, file: !164, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !962, file: !164, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !962, file: !164, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !962, file: !164, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !962, file: !164, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !962, file: !164, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !962, file: !164, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !962, file: !164, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !962, file: !164, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !962, file: !164, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !962, file: !164, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !962, file: !164, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !962, file: !164, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !962, file: !164, line: 2703, baseType: !7, size: 32, offset: 512)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !962, file: !164, line: 2705, baseType: !826, size: 64, offset: 576)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !962, file: !164, line: 2706, baseType: !826, size: 64, offset: 640)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !962, file: !164, line: 2707, baseType: !826, size: 64, offset: 704)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !962, file: !164, line: 2708, baseType: !826, size: 64, offset: 768)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !962, file: !164, line: 2711, baseType: !997, size: 64, offset: 832)
!997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !998, size: 64)
!998 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !164, line: 2711, flags: DIFlagFwdDecl)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !829, file: !164, line: 3383, baseType: !1000, size: 960)
!1000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !164, line: 2756, size: 960, elements: !1001)
!1001 = !{!1002, !1003}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1000, file: !164, line: 2757, baseType: !962, size: 896)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1000, file: !164, line: 2758, baseType: !1004, size: 64, offset: 896)
!1004 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !827, line: 50, baseType: !1005)
!1005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1006, size: 64)
!1006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1007, line: 240, size: 384, elements: !1008)
!1007 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1008 = !{!1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1006, file: !1007, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1006, file: !1007, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1006, file: !1007, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1006, file: !1007, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1006, file: !1007, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1006, file: !1007, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1006, file: !1007, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1006, file: !1007, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1006, file: !1007, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1006, file: !1007, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1006, file: !1007, line: 321, baseType: !1020, size: 320, offset: 64)
!1020 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1007, line: 315, size: 320, elements: !1021)
!1021 = !{!1022, !1480, !1482, !1511, !1512}
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1020, file: !1007, line: 316, baseType: !1023, size: 64)
!1023 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1024, size: 64, elements: !927)
!1024 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1007, line: 183, baseType: !1025)
!1025 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1007, line: 166, size: 64, elements: !1026)
!1026 = !{!1027, !1028, !1029, !1032, !1033, !1041, !1042, !1054, !1057, !1119, !1120, !1457, !1470, !1477}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1025, file: !1007, line: 168, baseType: !923, size: 32)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1025, file: !1007, line: 169, baseType: !7, size: 32)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1025, file: !1007, line: 170, baseType: !1030, size: 64)
!1030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !926)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1025, file: !1007, line: 171, baseType: !1004, size: 64)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1025, file: !1007, line: 172, baseType: !1034, size: 64)
!1034 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !827, line: 53, baseType: !1035)
!1035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1036, size: 64)
!1036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1007, line: 359, size: 128, elements: !1037)
!1037 = !{!1038, !1039}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1036, file: !1007, line: 360, baseType: !923, size: 32)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1036, file: !1007, line: 361, baseType: !1040, size: 64, offset: 64)
!1040 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1004, size: 64, elements: !927)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1025, file: !1007, line: 173, baseType: !5, size: 32)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1025, file: !1007, line: 174, baseType: !1043, size: 32)
!1043 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1007, line: 133, baseType: !1044)
!1044 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1007, line: 115, size: 32, elements: !1045)
!1045 = !{!1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1044, file: !1007, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1044, file: !1007, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1044, file: !1007, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1044, file: !1007, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1044, file: !1007, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1044, file: !1007, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1044, file: !1007, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1044, file: !1007, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1025, file: !1007, line: 175, baseType: !1055, size: 64)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1056 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1007, line: 175, flags: DIFlagFwdDecl)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1025, file: !1007, line: 176, baseType: !1058, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1060, line: 75, size: 256, elements: !1061)
!1060 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1061 = !{!1062, !1076, !1077, !1078}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1059, file: !1060, line: 76, baseType: !1063, size: 64)
!1063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1064, size: 64)
!1064 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1060, line: 68, baseType: !1065)
!1065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1060, line: 63, size: 320, elements: !1066)
!1066 = !{!1067, !1069, !1070, !1071}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1065, file: !1060, line: 64, baseType: !1068, size: 64)
!1068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1065, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1065, file: !1060, line: 65, baseType: !1068, size: 64, offset: 64)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1065, file: !1060, line: 66, baseType: !7, size: 32, offset: 128)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1065, file: !1060, line: 67, baseType: !1072, size: 128, offset: 192)
!1072 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1073, size: 128, elements: !1074)
!1073 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1060, line: 29, baseType: !880)
!1074 = !{!1075}
!1075 = !DISubrange(count: 2)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1059, file: !1060, line: 77, baseType: !1063, size: 64, offset: 64)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1059, file: !1060, line: 78, baseType: !7, size: 32, offset: 128)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1059, file: !1060, line: 79, baseType: !1079, size: 64, offset: 192)
!1079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1080, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1060, line: 49, baseType: !1081)
!1081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1060, line: 45, size: 832, elements: !1082)
!1082 = !{!1083, !1084, !1085}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1081, file: !1060, line: 46, baseType: !1068, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1081, file: !1060, line: 47, baseType: !1058, size: 64, offset: 64)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1081, file: !1060, line: 48, baseType: !1086, size: 704, offset: 128)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1087, line: 164, size: 704, elements: !1088)
!1087 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1088 = !{!1089, !1090, !1101, !1102, !1103, !1104, !1105, !1106, !1111, !1115, !1116, !1117, !1118}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1086, file: !1087, line: 166, baseType: !882, size: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1086, file: !1087, line: 167, baseType: !1091, size: 64, offset: 64)
!1091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1092, size: 64)
!1092 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1087, line: 157, size: 192, elements: !1093)
!1093 = !{!1094, !1096, !1097}
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1092, file: !1087, line: 159, baseType: !1095, size: 64)
!1095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1092, file: !1087, line: 160, baseType: !1091, size: 64, offset: 64)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1092, file: !1087, line: 161, baseType: !1098, size: 32, offset: 128)
!1098 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 32, elements: !1099)
!1099 = !{!1100}
!1100 = !DISubrange(count: 4)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1086, file: !1087, line: 168, baseType: !1095, size: 64, offset: 128)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1086, file: !1087, line: 169, baseType: !1095, size: 64, offset: 192)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1086, file: !1087, line: 170, baseType: !1095, size: 64, offset: 256)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1086, file: !1087, line: 171, baseType: !882, size: 64, offset: 320)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1086, file: !1087, line: 172, baseType: !923, size: 32, offset: 384)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1086, file: !1087, line: 176, baseType: !1107, size: 64, offset: 448)
!1107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1108, size: 64)
!1108 = !DISubroutineType(types: !1109)
!1109 = !{!1091, !1110, !882}
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1086, file: !1087, line: 177, baseType: !1112, size: 64, offset: 512)
!1112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1113, size: 64)
!1113 = !DISubroutineType(types: !1114)
!1114 = !{null, !1110, !1091}
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1086, file: !1087, line: 178, baseType: !1110, size: 64, offset: 576)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1086, file: !1087, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1086, file: !1087, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1086, file: !1087, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1025, file: !1007, line: 177, baseType: !826, size: 64)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1025, file: !1007, line: 178, baseType: !1121, size: 64)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !135, line: 217, size: 832, elements: !1123)
!1123 = !{!1124, !1369, !1370, !1371, !1427, !1431, !1432, !1433, !1451, !1452, !1453, !1454, !1455, !1456}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1122, file: !135, line: 219, baseType: !1125, size: 64)
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1126, size: 64)
!1126 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !135, line: 151, baseType: !1127)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !135, line: 151, size: 128, elements: !1128)
!1128 = !{!1129}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1127, file: !135, line: 151, baseType: !1130, size: 128)
!1130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !135, line: 150, baseType: !1131)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !135, line: 150, size: 128, elements: !1132)
!1132 = !{!1133, !1134, !1135}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1131, file: !135, line: 150, baseType: !7, size: 32)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1131, file: !135, line: 150, baseType: !7, size: 32, offset: 32)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1131, file: !135, line: 150, baseType: !1136, size: 64, offset: 64)
!1136 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1137, size: 64, elements: !927)
!1137 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !827, line: 108, baseType: !1138)
!1138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1139, size: 64)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !135, line: 122, size: 512, elements: !1140)
!1140 = !{!1141, !1142, !1143, !1361, !1362, !1363, !1364, !1365, !1366, !1367}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1139, file: !135, line: 124, baseType: !1121, size: 64)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1139, file: !135, line: 125, baseType: !1121, size: 64, offset: 64)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1139, file: !135, line: 131, baseType: !1144, size: 64, offset: 128)
!1144 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !135, line: 128, size: 64, elements: !1145)
!1145 = !{!1146, !1360}
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1144, file: !135, line: 129, baseType: !1147, size: 64)
!1147 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !827, line: 66, baseType: !1148)
!1148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1149, size: 64)
!1149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !398, line: 143, size: 192, elements: !1150)
!1150 = !{!1151, !1358, !1359}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1149, file: !398, line: 145, baseType: !1152, size: 64)
!1152 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !827, line: 69, baseType: !1153)
!1153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1154, size: 64)
!1154 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !398, line: 136, size: 192, elements: !1155)
!1155 = !{!1156, !1356, !1357}
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1154, file: !398, line: 137, baseType: !1157, size: 64)
!1157 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !827, line: 58, baseType: !1158)
!1158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1159, size: 64)
!1159 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !398, line: 737, size: 768, elements: !1160)
!1160 = !{!1161, !1178, !1211, !1217, !1222, !1227, !1234, !1240, !1246, !1251, !1265, !1270, !1276, !1281, !1291, !1296, !1314, !1321, !1328, !1334, !1339, !1345, !1351}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1159, file: !398, line: 738, baseType: !1162, size: 256)
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !398, line: 271, size: 256, elements: !1163)
!1163 = !{!1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1162, file: !398, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1162, file: !398, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1162, file: !398, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1162, file: !398, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1162, file: !398, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1162, file: !398, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1162, file: !398, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1162, file: !398, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1162, file: !398, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1162, file: !398, line: 312, baseType: !7, size: 32, offset: 32)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1162, file: !398, line: 316, baseType: !954, size: 32, offset: 64)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1162, file: !398, line: 319, baseType: !7, size: 32, offset: 96)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1162, file: !398, line: 323, baseType: !1121, size: 64, offset: 128)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1162, file: !398, line: 327, baseType: !826, size: 64, offset: 192)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1159, file: !398, line: 739, baseType: !1179, size: 448)
!1179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !398, line: 350, size: 448, elements: !1180)
!1180 = !{!1181, !1209}
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1179, file: !398, line: 353, baseType: !1182, size: 384)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !398, line: 333, size: 384, elements: !1183)
!1183 = !{!1184, !1185, !1192}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1182, file: !398, line: 336, baseType: !1162, size: 256)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1182, file: !398, line: 343, baseType: !1186, size: 64, offset: 256)
!1186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1187, size: 64)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !391, line: 37, size: 128, elements: !1188)
!1188 = !{!1189, !1190}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1187, file: !391, line: 39, baseType: !1186, size: 64)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1187, file: !391, line: 40, baseType: !1191, size: 64, offset: 64)
!1191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !826, size: 64)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1182, file: !398, line: 344, baseType: !1193, size: 64, offset: 320)
!1193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1194, size: 64)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !391, line: 45, size: 320, elements: !1195)
!1195 = !{!1196, !1197}
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1194, file: !391, line: 47, baseType: !1193, size: 64)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1194, file: !391, line: 48, baseType: !1198, size: 256, offset: 64)
!1198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !164, line: 1883, size: 256, elements: !1199)
!1199 = !{!1200, !1202, !1203, !1208}
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1198, file: !164, line: 1884, baseType: !1201, size: 64)
!1201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1198, size: 64)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1198, file: !164, line: 1885, baseType: !1201, size: 64, offset: 64)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1198, file: !164, line: 1891, baseType: !1204, size: 64, offset: 128)
!1204 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1198, file: !164, line: 1891, size: 64, elements: !1205)
!1205 = !{!1206, !1207}
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1204, file: !164, line: 1891, baseType: !1157, size: 64)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1204, file: !164, line: 1891, baseType: !826, size: 64)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1198, file: !164, line: 1892, baseType: !1191, size: 64, offset: 192)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1179, file: !398, line: 359, baseType: !1210, size: 64, offset: 384)
!1210 = !DICompositeType(tag: DW_TAG_array_type, baseType: !826, size: 64, elements: !927)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1159, file: !398, line: 740, baseType: !1212, size: 512)
!1212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !398, line: 365, size: 512, elements: !1213)
!1213 = !{!1214, !1215, !1216}
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1212, file: !398, line: 368, baseType: !1182, size: 384)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1212, file: !398, line: 373, baseType: !826, size: 64, offset: 384)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1212, file: !398, line: 374, baseType: !826, size: 64, offset: 448)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1159, file: !398, line: 741, baseType: !1218, size: 576)
!1218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !398, line: 380, size: 576, elements: !1219)
!1219 = !{!1220, !1221}
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1218, file: !398, line: 383, baseType: !1212, size: 512)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1218, file: !398, line: 389, baseType: !1210, size: 64, offset: 512)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1159, file: !398, line: 742, baseType: !1223, size: 320)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !398, line: 395, size: 320, elements: !1224)
!1224 = !{!1225, !1226}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1223, file: !398, line: 397, baseType: !1162, size: 256)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1223, file: !398, line: 400, baseType: !1147, size: 64, offset: 256)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1159, file: !398, line: 743, baseType: !1228, size: 448)
!1228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !398, line: 406, size: 448, elements: !1229)
!1229 = !{!1230, !1231, !1232, !1233}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1228, file: !398, line: 408, baseType: !1162, size: 256)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1228, file: !398, line: 412, baseType: !826, size: 64, offset: 256)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1228, file: !398, line: 420, baseType: !826, size: 64, offset: 320)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1228, file: !398, line: 423, baseType: !1147, size: 64, offset: 384)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1159, file: !398, line: 744, baseType: !1235, size: 384)
!1235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !398, line: 429, size: 384, elements: !1236)
!1236 = !{!1237, !1238, !1239}
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1235, file: !398, line: 431, baseType: !1162, size: 256)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1235, file: !398, line: 434, baseType: !826, size: 64, offset: 256)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1235, file: !398, line: 437, baseType: !1147, size: 64, offset: 320)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1159, file: !398, line: 745, baseType: !1241, size: 384)
!1241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !398, line: 443, size: 384, elements: !1242)
!1242 = !{!1243, !1244, !1245}
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1241, file: !398, line: 445, baseType: !1162, size: 256)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1241, file: !398, line: 449, baseType: !826, size: 64, offset: 256)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1241, file: !398, line: 453, baseType: !1147, size: 64, offset: 320)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1159, file: !398, line: 746, baseType: !1247, size: 320)
!1247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !398, line: 459, size: 320, elements: !1248)
!1248 = !{!1249, !1250}
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1247, file: !398, line: 461, baseType: !1162, size: 256)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1247, file: !398, line: 464, baseType: !826, size: 64, offset: 256)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1159, file: !398, line: 747, baseType: !1252, size: 768)
!1252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !398, line: 469, size: 768, elements: !1253)
!1253 = !{!1254, !1255, !1256, !1257, !1258}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1252, file: !398, line: 471, baseType: !1162, size: 256)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1252, file: !398, line: 474, baseType: !7, size: 32, offset: 256)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1252, file: !398, line: 475, baseType: !7, size: 32, offset: 288)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1252, file: !398, line: 478, baseType: !826, size: 64, offset: 320)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1252, file: !398, line: 481, baseType: !1259, size: 384, offset: 384)
!1259 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1260, size: 384, elements: !927)
!1260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !164, line: 1917, size: 384, elements: !1261)
!1261 = !{!1262, !1263, !1264}
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1260, file: !164, line: 1920, baseType: !1198, size: 256)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1260, file: !164, line: 1921, baseType: !826, size: 64, offset: 256)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1260, file: !164, line: 1922, baseType: !954, size: 32, offset: 320)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1159, file: !398, line: 748, baseType: !1266, size: 320)
!1266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !398, line: 487, size: 320, elements: !1267)
!1267 = !{!1268, !1269}
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1266, file: !398, line: 490, baseType: !1162, size: 256)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1266, file: !398, line: 494, baseType: !923, size: 32, offset: 256)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1159, file: !398, line: 749, baseType: !1271, size: 384)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !398, line: 500, size: 384, elements: !1272)
!1272 = !{!1273, !1274, !1275}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1271, file: !398, line: 502, baseType: !1162, size: 256)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1271, file: !398, line: 506, baseType: !1147, size: 64, offset: 256)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1271, file: !398, line: 510, baseType: !1147, size: 64, offset: 320)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1159, file: !398, line: 750, baseType: !1277, size: 320)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !398, line: 529, size: 320, elements: !1278)
!1278 = !{!1279, !1280}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1277, file: !398, line: 531, baseType: !1162, size: 256)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1277, file: !398, line: 540, baseType: !1147, size: 64, offset: 256)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1159, file: !398, line: 751, baseType: !1282, size: 704)
!1282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !398, line: 546, size: 704, elements: !1283)
!1283 = !{!1284, !1285, !1286, !1287, !1288, !1289, !1290}
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1282, file: !398, line: 549, baseType: !1212, size: 512)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1282, file: !398, line: 553, baseType: !1030, size: 64, offset: 512)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1282, file: !398, line: 557, baseType: !946, size: 8, offset: 576)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1282, file: !398, line: 558, baseType: !946, size: 8, offset: 584)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1282, file: !398, line: 559, baseType: !946, size: 8, offset: 592)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1282, file: !398, line: 560, baseType: !946, size: 8, offset: 600)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1282, file: !398, line: 566, baseType: !1210, size: 64, offset: 640)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1159, file: !398, line: 752, baseType: !1292, size: 384)
!1292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !398, line: 571, size: 384, elements: !1293)
!1293 = !{!1294, !1295}
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1292, file: !398, line: 573, baseType: !1223, size: 320)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1292, file: !398, line: 577, baseType: !826, size: 64, offset: 320)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1159, file: !398, line: 753, baseType: !1297, size: 576)
!1297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !398, line: 600, size: 576, elements: !1298)
!1298 = !{!1299, !1300, !1301, !1304, !1313}
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1297, file: !398, line: 602, baseType: !1223, size: 320)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1297, file: !398, line: 605, baseType: !826, size: 64, offset: 320)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1297, file: !398, line: 609, baseType: !1302, size: 64, offset: 384)
!1302 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1303, line: 46, baseType: !880)
!1303 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1297, file: !398, line: 612, baseType: !1305, size: 64, offset: 448)
!1305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !398, line: 581, size: 320, elements: !1307)
!1307 = !{!1308, !1309, !1310, !1311, !1312}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1306, file: !398, line: 583, baseType: !196, size: 32)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1306, file: !398, line: 586, baseType: !826, size: 64, offset: 64)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1306, file: !398, line: 589, baseType: !826, size: 64, offset: 128)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1306, file: !398, line: 592, baseType: !826, size: 64, offset: 192)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1306, file: !398, line: 595, baseType: !826, size: 64, offset: 256)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1297, file: !398, line: 616, baseType: !1147, size: 64, offset: 512)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1159, file: !398, line: 754, baseType: !1315, size: 512)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !398, line: 622, size: 512, elements: !1316)
!1316 = !{!1317, !1318, !1319, !1320}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1315, file: !398, line: 624, baseType: !1223, size: 320)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1315, file: !398, line: 628, baseType: !826, size: 64, offset: 320)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1315, file: !398, line: 632, baseType: !826, size: 64, offset: 384)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1315, file: !398, line: 636, baseType: !826, size: 64, offset: 448)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1159, file: !398, line: 755, baseType: !1322, size: 704)
!1322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !398, line: 642, size: 704, elements: !1323)
!1323 = !{!1324, !1325, !1326, !1327}
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1322, file: !398, line: 644, baseType: !1315, size: 512)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1322, file: !398, line: 648, baseType: !826, size: 64, offset: 512)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1322, file: !398, line: 652, baseType: !826, size: 64, offset: 576)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1322, file: !398, line: 653, baseType: !826, size: 64, offset: 640)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1159, file: !398, line: 756, baseType: !1329, size: 448)
!1329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !398, line: 663, size: 448, elements: !1330)
!1330 = !{!1331, !1332, !1333}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1329, file: !398, line: 665, baseType: !1223, size: 320)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1329, file: !398, line: 668, baseType: !826, size: 64, offset: 320)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1329, file: !398, line: 673, baseType: !826, size: 64, offset: 384)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1159, file: !398, line: 757, baseType: !1335, size: 384)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !398, line: 694, size: 384, elements: !1336)
!1336 = !{!1337, !1338}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1335, file: !398, line: 696, baseType: !1223, size: 320)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1335, file: !398, line: 699, baseType: !826, size: 64, offset: 320)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1159, file: !398, line: 758, baseType: !1340, size: 384)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !398, line: 681, size: 384, elements: !1341)
!1341 = !{!1342, !1343, !1344}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1340, file: !398, line: 683, baseType: !1162, size: 256)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1340, file: !398, line: 686, baseType: !826, size: 64, offset: 256)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1340, file: !398, line: 689, baseType: !826, size: 64, offset: 320)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1159, file: !398, line: 759, baseType: !1346, size: 384)
!1346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !398, line: 707, size: 384, elements: !1347)
!1347 = !{!1348, !1349, !1350}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1346, file: !398, line: 709, baseType: !1162, size: 256)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1346, file: !398, line: 712, baseType: !826, size: 64, offset: 256)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1346, file: !398, line: 712, baseType: !826, size: 64, offset: 320)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1159, file: !398, line: 760, baseType: !1352, size: 320)
!1352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !398, line: 718, size: 320, elements: !1353)
!1353 = !{!1354, !1355}
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1352, file: !398, line: 720, baseType: !1162, size: 256)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1352, file: !398, line: 723, baseType: !826, size: 64, offset: 256)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1154, file: !398, line: 138, baseType: !1153, size: 64, offset: 64)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1154, file: !398, line: 139, baseType: !1153, size: 64, offset: 128)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1149, file: !398, line: 146, baseType: !1152, size: 64, offset: 64)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1149, file: !398, line: 152, baseType: !1147, size: 64, offset: 128)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1144, file: !135, line: 130, baseType: !1004, size: 64)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1139, file: !135, line: 134, baseType: !1110, size: 64, offset: 192)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1139, file: !135, line: 137, baseType: !826, size: 64, offset: 256)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1139, file: !135, line: 138, baseType: !954, size: 32, offset: 320)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1139, file: !135, line: 142, baseType: !7, size: 32, offset: 352)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1139, file: !135, line: 144, baseType: !923, size: 32, offset: 384)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1139, file: !135, line: 145, baseType: !923, size: 32, offset: 416)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1139, file: !135, line: 146, baseType: !1368, size: 64, offset: 448)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !135, line: 119, baseType: !882)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1122, file: !135, line: 220, baseType: !1125, size: 64, offset: 64)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1122, file: !135, line: 223, baseType: !1110, size: 64, offset: 128)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1122, file: !135, line: 226, baseType: !1372, size: 64, offset: 192)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !146, line: 100, size: 1216, elements: !1374)
!1374 = !{!1375, !1376, !1377, !1378, !1379, !1384, !1385, !1386, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1417, !1425, !1426}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1373, file: !146, line: 102, baseType: !923, size: 32)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1373, file: !146, line: 105, baseType: !7, size: 32, offset: 32)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1373, file: !146, line: 108, baseType: !1121, size: 64, offset: 64)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1373, file: !146, line: 111, baseType: !1121, size: 64, offset: 128)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1373, file: !146, line: 114, baseType: !1380, size: 64, offset: 192)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !146, line: 41, size: 64, elements: !1381)
!1381 = !{!1382, !1383}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1380, file: !146, line: 42, baseType: !145, size: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1380, file: !146, line: 43, baseType: !7, size: 32, offset: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1373, file: !146, line: 117, baseType: !7, size: 32, offset: 256)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1373, file: !146, line: 120, baseType: !7, size: 32, offset: 288)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1373, file: !146, line: 123, baseType: !1387, size: 64, offset: 320)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !146, line: 87, baseType: !1389)
!1389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !146, line: 87, size: 128, elements: !1390)
!1390 = !{!1391}
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1389, file: !146, line: 87, baseType: !1392, size: 128)
!1392 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !146, line: 85, baseType: !1393)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !146, line: 85, size: 128, elements: !1394)
!1394 = !{!1395, !1396, !1397}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1393, file: !146, line: 85, baseType: !7, size: 32)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1393, file: !146, line: 85, baseType: !7, size: 32, offset: 32)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1393, file: !146, line: 85, baseType: !1398, size: 64, offset: 64)
!1398 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1399, size: 64, elements: !927)
!1399 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !146, line: 84, baseType: !1372)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1373, file: !146, line: 126, baseType: !1372, size: 64, offset: 384)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1373, file: !146, line: 129, baseType: !1372, size: 64, offset: 448)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1373, file: !146, line: 132, baseType: !1110, size: 64, offset: 512)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1373, file: !146, line: 139, baseType: !826, size: 64, offset: 576)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1373, file: !146, line: 143, baseType: !875, size: 128, offset: 640)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1373, file: !146, line: 146, baseType: !875, size: 128, offset: 768)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1373, file: !146, line: 148, baseType: !946, size: 8, offset: 896)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1373, file: !146, line: 149, baseType: !946, size: 8, offset: 904)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1373, file: !146, line: 153, baseType: !154, size: 32, offset: 928)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1373, file: !146, line: 156, baseType: !1410, size: 64, offset: 960)
!1410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1411, size: 64)
!1411 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !146, line: 48, size: 320, elements: !1412)
!1412 = !{!1413, !1414, !1415, !1416}
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1411, file: !146, line: 50, baseType: !1157, size: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1411, file: !146, line: 59, baseType: !875, size: 128, offset: 64)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1411, file: !146, line: 64, baseType: !946, size: 8, offset: 192)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1411, file: !146, line: 67, baseType: !1410, size: 64, offset: 256)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1373, file: !146, line: 159, baseType: !1418, size: 64, offset: 1024)
!1418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1419, size: 64)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !146, line: 72, size: 256, elements: !1420)
!1420 = !{!1421, !1422, !1423, !1424}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1419, file: !146, line: 74, baseType: !1138, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1419, file: !146, line: 77, baseType: !1418, size: 64, offset: 64)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1419, file: !146, line: 78, baseType: !1418, size: 64, offset: 128)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1419, file: !146, line: 81, baseType: !1418, size: 64, offset: 192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1373, file: !146, line: 162, baseType: !946, size: 8, offset: 1088)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1373, file: !146, line: 166, baseType: !826, size: 64, offset: 1152)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1122, file: !135, line: 229, baseType: !1428, size: 128, offset: 256)
!1428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1429, size: 128, elements: !1074)
!1429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1430, size: 64)
!1430 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !135, line: 229, flags: DIFlagFwdDecl)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1122, file: !135, line: 232, baseType: !1121, size: 64, offset: 384)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1122, file: !135, line: 233, baseType: !1121, size: 64, offset: 448)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1122, file: !135, line: 238, baseType: !1434, size: 64, offset: 512)
!1434 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !135, line: 235, size: 64, elements: !1435)
!1435 = !{!1436, !1442}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1434, file: !135, line: 236, baseType: !1437, size: 64)
!1437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1438, size: 64)
!1438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !135, line: 273, size: 128, elements: !1439)
!1439 = !{!1440, !1441}
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1438, file: !135, line: 275, baseType: !1147, size: 64)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1438, file: !135, line: 278, baseType: !1147, size: 64, offset: 64)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1434, file: !135, line: 237, baseType: !1443, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1444, size: 64)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !135, line: 259, size: 320, elements: !1445)
!1445 = !{!1446, !1447, !1448, !1449, !1450}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1444, file: !135, line: 261, baseType: !1004, size: 64)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1444, file: !135, line: 262, baseType: !1004, size: 64, offset: 64)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1444, file: !135, line: 266, baseType: !1004, size: 64, offset: 128)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1444, file: !135, line: 267, baseType: !1004, size: 64, offset: 192)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1444, file: !135, line: 270, baseType: !923, size: 32, offset: 256)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1122, file: !135, line: 241, baseType: !1368, size: 64, offset: 576)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1122, file: !135, line: 244, baseType: !923, size: 32, offset: 640)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1122, file: !135, line: 247, baseType: !923, size: 32, offset: 672)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1122, file: !135, line: 250, baseType: !923, size: 32, offset: 704)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1122, file: !135, line: 253, baseType: !923, size: 32, offset: 736)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1122, file: !135, line: 256, baseType: !923, size: 32, offset: 768)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1025, file: !1007, line: 179, baseType: !1458, size: 64)
!1458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1459, size: 64)
!1459 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1007, line: 150, baseType: !1460)
!1460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1007, line: 142, size: 320, elements: !1461)
!1461 = !{!1462, !1463, !1464, !1465, !1468, !1469}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1460, file: !1007, line: 144, baseType: !826, size: 64)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1460, file: !1007, line: 145, baseType: !1004, size: 64, offset: 64)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1460, file: !1007, line: 146, baseType: !1004, size: 64, offset: 128)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1460, file: !1007, line: 147, baseType: !1466, size: 32, offset: 192)
!1466 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1467, line: 31, baseType: !923)
!1467 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1460, file: !1007, line: 148, baseType: !7, size: 32, offset: 224)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1460, file: !1007, line: 149, baseType: !946, size: 8, offset: 256)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1025, file: !1007, line: 180, baseType: !1471, size: 64)
!1471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1472, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1007, line: 162, baseType: !1473)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1007, line: 159, size: 128, elements: !1474)
!1474 = !{!1475, !1476}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1473, file: !1007, line: 160, baseType: !826, size: 64)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1473, file: !1007, line: 161, baseType: !882, size: 64, offset: 64)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1025, file: !1007, line: 181, baseType: !1478, size: 64)
!1478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1479, size: 64)
!1479 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1007, line: 181, flags: DIFlagFwdDecl)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1020, file: !1007, line: 317, baseType: !1481, size: 64)
!1481 = !DICompositeType(tag: DW_TAG_array_type, baseType: !882, size: 64, elements: !927)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1020, file: !1007, line: 318, baseType: !1483, size: 320)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1007, line: 188, size: 320, elements: !1484)
!1484 = !{!1485, !1487, !1510}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1483, file: !1007, line: 190, baseType: !1486, size: 192)
!1486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1024, size: 192, elements: !900)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1483, file: !1007, line: 193, baseType: !1488, size: 64, offset: 192)
!1488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1489, size: 64)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1007, line: 206, size: 320, elements: !1490)
!1490 = !{!1491, !1495, !1496, !1497, !1509}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1489, file: !1007, line: 208, baseType: !1492, size: 64)
!1492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1493, size: 64)
!1493 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !827, line: 62, baseType: !1494)
!1494 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !827, line: 61, flags: DIFlagFwdDecl)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1489, file: !1007, line: 211, baseType: !7, size: 32, offset: 64)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1489, file: !1007, line: 214, baseType: !882, size: 64, offset: 128)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1489, file: !1007, line: 224, baseType: !1498, size: 64, offset: 192)
!1498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1499, size: 64)
!1499 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1007, line: 202, baseType: !1500)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1007, line: 202, size: 128, elements: !1501)
!1501 = !{!1502}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1500, file: !1007, line: 202, baseType: !1503, size: 128)
!1503 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1007, line: 200, baseType: !1504)
!1504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1007, line: 200, size: 128, elements: !1505)
!1505 = !{!1506, !1507, !1508}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1504, file: !1007, line: 200, baseType: !7, size: 32)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1504, file: !1007, line: 200, baseType: !7, size: 32, offset: 32)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1504, file: !1007, line: 200, baseType: !1040, size: 64, offset: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1489, file: !1007, line: 234, baseType: !1498, size: 64, offset: 256)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1483, file: !1007, line: 197, baseType: !882, size: 64, offset: 256)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1020, file: !1007, line: 319, baseType: !889, size: 256)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1020, file: !1007, line: 320, baseType: !908, size: 192)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !829, file: !164, line: 3384, baseType: !1514, size: 1472)
!1514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !164, line: 3114, size: 1472, elements: !1515)
!1515 = !{!1516, !1537, !1538, !1539, !1540}
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1514, file: !164, line: 3115, baseType: !1517, size: 1216)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !164, line: 2984, size: 1216, elements: !1518)
!1518 = !{!1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1517, file: !164, line: 2985, baseType: !1000, size: 960)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1517, file: !164, line: 2986, baseType: !826, size: 64, offset: 960)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1517, file: !164, line: 2987, baseType: !826, size: 64, offset: 1024)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1517, file: !164, line: 2988, baseType: !826, size: 64, offset: 1088)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1517, file: !164, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1517, file: !164, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1517, file: !164, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1517, file: !164, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1517, file: !164, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1517, file: !164, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1517, file: !164, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1517, file: !164, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1517, file: !164, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1517, file: !164, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1517, file: !164, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1517, file: !164, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1517, file: !164, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1517, file: !164, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1514, file: !164, line: 3117, baseType: !826, size: 64, offset: 1216)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1514, file: !164, line: 3119, baseType: !826, size: 64, offset: 1280)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1514, file: !164, line: 3121, baseType: !826, size: 64, offset: 1344)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1514, file: !164, line: 3123, baseType: !826, size: 64, offset: 1408)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !829, file: !164, line: 3385, baseType: !1542, size: 1088)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !164, line: 2874, size: 1088, elements: !1543)
!1543 = !{!1544, !1545, !1546}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1542, file: !164, line: 2875, baseType: !1000, size: 960)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1542, file: !164, line: 2876, baseType: !1004, size: 64, offset: 960)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1542, file: !164, line: 2877, baseType: !1547, size: 64, offset: 1024)
!1547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1548, size: 64)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1549, line: 172, size: 128, elements: !1550)
!1549 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1550 = !{!1551, !1552, !1553, !1554, !1555, !1556, !1557}
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1548, file: !1549, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1548, file: !1549, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1548, file: !1549, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1548, file: !1549, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1548, file: !1549, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1548, file: !1549, line: 195, baseType: !7, size: 32, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1548, file: !1549, line: 199, baseType: !826, size: 64, offset: 64)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !829, file: !164, line: 3386, baseType: !1517, size: 1216)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !829, file: !164, line: 3387, baseType: !1560, size: 1280)
!1560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !164, line: 3093, size: 1280, elements: !1561)
!1561 = !{!1562, !1563}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1560, file: !164, line: 3094, baseType: !1517, size: 1216)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1560, file: !164, line: 3095, baseType: !1547, size: 64, offset: 1216)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !829, file: !164, line: 3388, baseType: !1565, size: 1216)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !164, line: 2824, size: 1216, elements: !1566)
!1566 = !{!1567, !1568, !1569, !1570, !1571, !1572}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1565, file: !164, line: 2825, baseType: !962, size: 896)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1565, file: !164, line: 2827, baseType: !826, size: 64, offset: 896)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1565, file: !164, line: 2828, baseType: !826, size: 64, offset: 960)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1565, file: !164, line: 2829, baseType: !826, size: 64, offset: 1024)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1565, file: !164, line: 2830, baseType: !826, size: 64, offset: 1088)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1565, file: !164, line: 2831, baseType: !826, size: 64, offset: 1152)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !829, file: !164, line: 3389, baseType: !1574, size: 1024)
!1574 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !164, line: 2850, size: 1024, elements: !1575)
!1575 = !{!1576, !1577, !1578}
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1574, file: !164, line: 2851, baseType: !1000, size: 960)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1574, file: !164, line: 2852, baseType: !923, size: 32, offset: 960)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1574, file: !164, line: 2853, baseType: !923, size: 32, offset: 992)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !829, file: !164, line: 3390, baseType: !1580, size: 1024)
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !164, line: 2857, size: 1024, elements: !1581)
!1581 = !{!1582, !1583}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1580, file: !164, line: 2858, baseType: !1000, size: 960)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1580, file: !164, line: 2859, baseType: !1547, size: 64, offset: 960)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !829, file: !164, line: 3391, baseType: !1585, size: 960)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !164, line: 2862, size: 960, elements: !1586)
!1586 = !{!1587}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1585, file: !164, line: 2863, baseType: !1000, size: 960)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !829, file: !164, line: 3392, baseType: !1589, size: 1472)
!1589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !164, line: 3304, size: 1472, elements: !1590)
!1590 = !{!1591}
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1589, file: !164, line: 3305, baseType: !1514, size: 1472)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !829, file: !164, line: 3393, baseType: !1593, size: 1792)
!1593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !164, line: 3248, size: 1792, elements: !1594)
!1594 = !{!1595, !1596, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1593, file: !164, line: 3249, baseType: !1514, size: 1472)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1593, file: !164, line: 3251, baseType: !1597, size: 64, offset: 1472)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1599, line: 463, size: 1152, elements: !1600)
!1599 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1600 = !{!1601, !1604, !1635, !1636, !1751, !1759, !1760, !1761, !1762, !1763, !1764, !1788, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1598, file: !1599, line: 464, baseType: !1602, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1603, size: 64)
!1603 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1599, line: 464, flags: DIFlagFwdDecl)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1598, file: !1599, line: 467, baseType: !1605, size: 64, offset: 64)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !135, line: 374, size: 640, elements: !1607)
!1607 = !{!1608, !1610, !1611, !1624, !1625, !1626, !1627, !1628, !1629, !1631, !1633, !1634}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1606, file: !135, line: 377, baseType: !1609, size: 64)
!1609 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !827, line: 111, baseType: !1121)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1606, file: !135, line: 378, baseType: !1609, size: 64, offset: 64)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1606, file: !135, line: 381, baseType: !1612, size: 64, offset: 128)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !135, line: 282, baseType: !1614)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !135, line: 282, size: 128, elements: !1615)
!1615 = !{!1616}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1614, file: !135, line: 282, baseType: !1617, size: 128)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !135, line: 281, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !135, line: 281, size: 128, elements: !1619)
!1619 = !{!1620, !1621, !1622}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1618, file: !135, line: 281, baseType: !7, size: 32)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1618, file: !135, line: 281, baseType: !7, size: 32, offset: 32)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1618, file: !135, line: 281, baseType: !1623, size: 64, offset: 64)
!1623 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1609, size: 64, elements: !927)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1606, file: !135, line: 384, baseType: !923, size: 32, offset: 192)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1606, file: !135, line: 387, baseType: !923, size: 32, offset: 224)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1606, file: !135, line: 390, baseType: !923, size: 32, offset: 256)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1606, file: !135, line: 394, baseType: !1612, size: 64, offset: 320)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1606, file: !135, line: 396, baseType: !134, size: 32, offset: 384)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1606, file: !135, line: 399, baseType: !1630, size: 64, offset: 416)
!1630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !140, size: 64, elements: !1074)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1606, file: !135, line: 402, baseType: !1632, size: 64, offset: 480)
!1632 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1074)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1606, file: !135, line: 406, baseType: !923, size: 32, offset: 544)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1606, file: !135, line: 409, baseType: !923, size: 32, offset: 576)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1598, file: !1599, line: 470, baseType: !1148, size: 64, offset: 128)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1598, file: !1599, line: 473, baseType: !1637, size: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1638, size: 64)
!1638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1549, line: 39, size: 1152, elements: !1639)
!1639 = !{!1640, !1690, !1703, !1715, !1716, !1728, !1729, !1733, !1734, !1735, !1736, !1737}
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1638, file: !1549, line: 41, baseType: !1641, size: 64)
!1641 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1642, line: 144, baseType: !1643)
!1642 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1644, size: 64)
!1644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1642, line: 100, size: 896, elements: !1645)
!1645 = !{!1646, !1654, !1659, !1664, !1666, !1667, !1668, !1669, !1670, !1671, !1676, !1678, !1679, !1684, !1689}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1644, file: !1642, line: 102, baseType: !1647, size: 64)
!1647 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1642, line: 52, baseType: !1648)
!1648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1649, size: 64)
!1649 = !DISubroutineType(types: !1650)
!1650 = !{!1651, !1652}
!1651 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1642, line: 47, baseType: !7)
!1652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!1653 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1644, file: !1642, line: 105, baseType: !1655, size: 64, offset: 64)
!1655 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1642, line: 59, baseType: !1656)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = !DISubroutineType(types: !1658)
!1658 = !{!923, !1652, !1652}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1644, file: !1642, line: 108, baseType: !1660, size: 64, offset: 128)
!1660 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1642, line: 63, baseType: !1661)
!1661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1662, size: 64)
!1662 = !DISubroutineType(types: !1663)
!1663 = !{null, !1110}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1644, file: !1642, line: 111, baseType: !1665, size: 64, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1644, file: !1642, line: 114, baseType: !1302, size: 64, offset: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1644, file: !1642, line: 117, baseType: !1302, size: 64, offset: 320)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1644, file: !1642, line: 120, baseType: !1302, size: 64, offset: 384)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1644, file: !1642, line: 124, baseType: !7, size: 32, offset: 448)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1644, file: !1642, line: 128, baseType: !7, size: 32, offset: 480)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1644, file: !1642, line: 131, baseType: !1672, size: 64, offset: 512)
!1672 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1642, line: 75, baseType: !1673)
!1673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1674, size: 64)
!1674 = !DISubroutineType(types: !1675)
!1675 = !{!1110, !1302, !1302}
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1644, file: !1642, line: 132, baseType: !1677, size: 64, offset: 576)
!1677 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1642, line: 78, baseType: !1661)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1644, file: !1642, line: 135, baseType: !1110, size: 64, offset: 640)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1644, file: !1642, line: 136, baseType: !1680, size: 64, offset: 704)
!1680 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1642, line: 82, baseType: !1681)
!1681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1682, size: 64)
!1682 = !DISubroutineType(types: !1683)
!1683 = !{!1110, !1110, !1302, !1302}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1644, file: !1642, line: 137, baseType: !1685, size: 64, offset: 768)
!1685 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1642, line: 83, baseType: !1686)
!1686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1687, size: 64)
!1687 = !DISubroutineType(types: !1688)
!1688 = !{null, !1110, !1110}
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1644, file: !1642, line: 141, baseType: !7, size: 32, offset: 832)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1638, file: !1549, line: 48, baseType: !1691, size: 64, offset: 64)
!1691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1692, size: 64)
!1692 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !398, line: 35, baseType: !1693)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !398, line: 35, size: 128, elements: !1694)
!1694 = !{!1695}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1693, file: !398, line: 35, baseType: !1696, size: 128)
!1696 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !398, line: 33, baseType: !1697)
!1697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !398, line: 33, size: 128, elements: !1698)
!1698 = !{!1699, !1700, !1701}
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1697, file: !398, line: 33, baseType: !7, size: 32)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1697, file: !398, line: 33, baseType: !7, size: 32, offset: 32)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1697, file: !398, line: 33, baseType: !1702, size: 64, offset: 64)
!1702 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1157, size: 64, elements: !927)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1638, file: !1549, line: 51, baseType: !1704, size: 64, offset: 128)
!1704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1705, size: 64)
!1705 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !164, line: 183, baseType: !1706)
!1706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !164, line: 183, size: 128, elements: !1707)
!1707 = !{!1708}
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1706, file: !164, line: 183, baseType: !1709, size: 128)
!1709 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !164, line: 182, baseType: !1710)
!1710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !164, line: 182, size: 128, elements: !1711)
!1711 = !{!1712, !1713, !1714}
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1710, file: !164, line: 182, baseType: !7, size: 32)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1710, file: !164, line: 182, baseType: !7, size: 32, offset: 32)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1710, file: !164, line: 182, baseType: !1210, size: 64, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1638, file: !1549, line: 54, baseType: !826, size: 64, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1638, file: !1549, line: 57, baseType: !1717, size: 128, offset: 256)
!1717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1718, line: 31, size: 128, elements: !1719)
!1718 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1719 = !{!1720, !1721, !1722, !1723, !1724, !1725, !1726}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1717, file: !1718, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1717, file: !1718, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1717, file: !1718, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1717, file: !1718, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1717, file: !1718, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1717, file: !1718, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1717, file: !1718, line: 56, baseType: !1727, size: 64, offset: 64)
!1727 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !827, line: 47, baseType: !1058)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1638, file: !1549, line: 60, baseType: !1717, size: 128, offset: 384)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1638, file: !1549, line: 64, baseType: !1730, size: 64, offset: 512)
!1730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!1731 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1732, line: 33, flags: DIFlagFwdDecl)
!1732 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1638, file: !1549, line: 67, baseType: !826, size: 64, offset: 576)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1638, file: !1549, line: 73, baseType: !1641, size: 64, offset: 640)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1638, file: !1549, line: 77, baseType: !1727, size: 64, offset: 704)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1638, file: !1549, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1638, file: !1549, line: 82, baseType: !1738, size: 320, offset: 832)
!1738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !391, line: 62, size: 320, elements: !1739)
!1739 = !{!1740, !1746, !1747, !1748, !1749, !1750}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1738, file: !391, line: 63, baseType: !1741, size: 64)
!1741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1742, size: 64)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !391, line: 56, size: 128, elements: !1743)
!1743 = !{!1744, !1745}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1742, file: !391, line: 57, baseType: !1741, size: 64)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1742, file: !391, line: 58, baseType: !925, size: 8, offset: 64)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1738, file: !391, line: 64, baseType: !7, size: 32, offset: 64)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1738, file: !391, line: 66, baseType: !7, size: 32, offset: 96)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1738, file: !391, line: 68, baseType: !946, size: 8, offset: 128)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1738, file: !391, line: 70, baseType: !1186, size: 64, offset: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1738, file: !391, line: 71, baseType: !1193, size: 64, offset: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1598, file: !1599, line: 476, baseType: !1752, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1753, size: 64)
!1753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !146, line: 187, size: 256, elements: !1754)
!1754 = !{!1755, !1756, !1757, !1758}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1753, file: !146, line: 189, baseType: !923, size: 32)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1753, file: !146, line: 192, baseType: !1387, size: 64, offset: 64)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1753, file: !146, line: 197, baseType: !1641, size: 64, offset: 128)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1753, file: !146, line: 200, baseType: !1372, size: 64, offset: 192)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1598, file: !1599, line: 479, baseType: !1641, size: 64, offset: 320)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1598, file: !1599, line: 484, baseType: !826, size: 64, offset: 384)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1598, file: !1599, line: 488, baseType: !826, size: 64, offset: 448)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1598, file: !1599, line: 493, baseType: !826, size: 64, offset: 512)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1598, file: !1599, line: 496, baseType: !826, size: 64, offset: 576)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1598, file: !1599, line: 501, baseType: !1765, size: 64, offset: 640)
!1765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1766, size: 64)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !159, line: 2355, size: 576, elements: !1767)
!1767 = !{!1768, !1771, !1772, !1773, !1774, !1776, !1777, !1782, !1783, !1784, !1785, !1786, !1787}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1766, file: !159, line: 2356, baseType: !1769, size: 64)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !159, line: 2356, flags: DIFlagFwdDecl)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1766, file: !159, line: 2357, baseType: !1030, size: 64, offset: 64)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1766, file: !159, line: 2358, baseType: !923, size: 32, offset: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1766, file: !159, line: 2359, baseType: !923, size: 32, offset: 160)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1766, file: !159, line: 2360, baseType: !1775, size: 128, offset: 192)
!1775 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 128, elements: !1099)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1766, file: !159, line: 2364, baseType: !923, size: 32, offset: 320)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1766, file: !159, line: 2367, baseType: !1778, size: 128, offset: 384)
!1778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !159, line: 2349, size: 128, elements: !1779)
!1779 = !{!1780, !1781}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1778, file: !159, line: 2351, baseType: !1004, size: 64)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1778, file: !159, line: 2352, baseType: !882, size: 64, offset: 64)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1766, file: !159, line: 2371, baseType: !158, size: 32, offset: 512)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1766, file: !159, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1766, file: !159, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1766, file: !159, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1766, file: !159, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1766, file: !159, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1598, file: !1599, line: 504, baseType: !1789, size: 64, offset: 704)
!1789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1790, size: 64)
!1790 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1599, line: 504, flags: DIFlagFwdDecl)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1598, file: !1599, line: 507, baseType: !1641, size: 64, offset: 768)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1598, file: !1599, line: 510, baseType: !923, size: 32, offset: 832)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1598, file: !1599, line: 513, baseType: !923, size: 32, offset: 864)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1598, file: !1599, line: 516, baseType: !954, size: 32, offset: 896)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1598, file: !1599, line: 519, baseType: !954, size: 32, offset: 928)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1598, file: !1599, line: 522, baseType: !7, size: 32, offset: 960)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1598, file: !1599, line: 523, baseType: !7, size: 32, offset: 992)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1598, file: !1599, line: 528, baseType: !1030, size: 64, offset: 1024)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1598, file: !1599, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1598, file: !1599, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1598, file: !1599, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1598, file: !1599, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1598, file: !1599, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1598, file: !1599, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1598, file: !1599, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1598, file: !1599, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1598, file: !1599, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1598, file: !1599, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1598, file: !1599, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1598, file: !1599, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1598, file: !1599, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1598, file: !1599, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1598, file: !1599, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1598, file: !1599, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1593, file: !164, line: 3254, baseType: !826, size: 64, offset: 1536)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1593, file: !164, line: 3257, baseType: !826, size: 64, offset: 1600)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1593, file: !164, line: 3258, baseType: !826, size: 64, offset: 1664)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1593, file: !164, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1593, file: !164, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1593, file: !164, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1593, file: !164, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1593, file: !164, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1593, file: !164, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1593, file: !164, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1593, file: !164, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1593, file: !164, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1593, file: !164, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1593, file: !164, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1593, file: !164, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1593, file: !164, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1593, file: !164, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1593, file: !164, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1593, file: !164, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1593, file: !164, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1593, file: !164, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !829, file: !164, line: 3394, baseType: !1837, size: 1344)
!1837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !164, line: 2279, size: 1344, elements: !1838)
!1838 = !{!1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1837, file: !164, line: 2280, baseType: !865, size: 192)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1837, file: !164, line: 2281, baseType: !826, size: 64, offset: 192)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1837, file: !164, line: 2282, baseType: !826, size: 64, offset: 256)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1837, file: !164, line: 2283, baseType: !826, size: 64, offset: 320)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1837, file: !164, line: 2284, baseType: !826, size: 64, offset: 384)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1837, file: !164, line: 2285, baseType: !7, size: 32, offset: 448)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1837, file: !164, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1837, file: !164, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1837, file: !164, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1837, file: !164, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1837, file: !164, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1837, file: !164, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1837, file: !164, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1837, file: !164, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1837, file: !164, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1837, file: !164, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1837, file: !164, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1837, file: !164, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1837, file: !164, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1837, file: !164, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1837, file: !164, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1837, file: !164, line: 2305, baseType: !7, size: 32, offset: 512)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1837, file: !164, line: 2306, baseType: !1466, size: 32, offset: 544)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1837, file: !164, line: 2307, baseType: !826, size: 64, offset: 576)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1837, file: !164, line: 2308, baseType: !826, size: 64, offset: 640)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1837, file: !164, line: 2314, baseType: !1865, size: 64, offset: 704)
!1865 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !164, line: 2309, size: 64, elements: !1866)
!1866 = !{!1867, !1868, !1869}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1865, file: !164, line: 2310, baseType: !923, size: 32)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1865, file: !164, line: 2311, baseType: !1030, size: 64)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1865, file: !164, line: 2312, baseType: !1870, size: 64)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1871, size: 64)
!1871 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !164, line: 2277, flags: DIFlagFwdDecl)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1837, file: !164, line: 2315, baseType: !826, size: 64, offset: 768)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1837, file: !164, line: 2316, baseType: !826, size: 64, offset: 832)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1837, file: !164, line: 2317, baseType: !826, size: 64, offset: 896)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1837, file: !164, line: 2318, baseType: !826, size: 64, offset: 960)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1837, file: !164, line: 2319, baseType: !826, size: 64, offset: 1024)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1837, file: !164, line: 2320, baseType: !826, size: 64, offset: 1088)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1837, file: !164, line: 2321, baseType: !826, size: 64, offset: 1152)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1837, file: !164, line: 2322, baseType: !826, size: 64, offset: 1216)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1837, file: !164, line: 2324, baseType: !1881, size: 64, offset: 1280)
!1881 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1882, size: 64)
!1882 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !164, line: 2324, flags: DIFlagFwdDecl)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !829, file: !164, line: 3395, baseType: !1884, size: 320)
!1884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !164, line: 1469, size: 320, elements: !1885)
!1885 = !{!1886, !1887, !1888}
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1884, file: !164, line: 1470, baseType: !865, size: 192)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1884, file: !164, line: 1471, baseType: !826, size: 64, offset: 192)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1884, file: !164, line: 1472, baseType: !826, size: 64, offset: 256)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !829, file: !164, line: 3396, baseType: !1890, size: 320)
!1890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !164, line: 1482, size: 320, elements: !1891)
!1891 = !{!1892, !1893, !1894}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1890, file: !164, line: 1483, baseType: !865, size: 192)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1890, file: !164, line: 1484, baseType: !923, size: 32, offset: 192)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1890, file: !164, line: 1485, baseType: !1210, size: 64, offset: 256)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !829, file: !164, line: 3397, baseType: !1896, size: 384)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !164, line: 1829, size: 384, elements: !1897)
!1897 = !{!1898, !1899, !1900, !1901}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1896, file: !164, line: 1830, baseType: !865, size: 192)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1896, file: !164, line: 1831, baseType: !954, size: 32, offset: 192)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1896, file: !164, line: 1832, baseType: !826, size: 64, offset: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1896, file: !164, line: 1835, baseType: !1210, size: 64, offset: 320)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !829, file: !164, line: 3398, baseType: !1903, size: 704)
!1903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !164, line: 1898, size: 704, elements: !1904)
!1904 = !{!1905, !1906, !1907, !1908, !1909, !1914}
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1903, file: !164, line: 1899, baseType: !865, size: 192)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1903, file: !164, line: 1902, baseType: !826, size: 64, offset: 192)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1903, file: !164, line: 1905, baseType: !1157, size: 64, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1903, file: !164, line: 1908, baseType: !7, size: 32, offset: 320)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1903, file: !164, line: 1911, baseType: !1910, size: 64, offset: 384)
!1910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1911, size: 64)
!1911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1549, line: 117, size: 128, elements: !1912)
!1912 = !{!1913}
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1911, file: !1549, line: 120, baseType: !1717, size: 128)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1903, file: !164, line: 1914, baseType: !1198, size: 256, offset: 448)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !829, file: !164, line: 3399, baseType: !1916, size: 704)
!1916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !164, line: 2008, size: 704, elements: !1917)
!1917 = !{!1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928}
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1916, file: !164, line: 2009, baseType: !865, size: 192)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1916, file: !164, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1916, file: !164, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1916, file: !164, line: 2014, baseType: !954, size: 32, offset: 224)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1916, file: !164, line: 2016, baseType: !826, size: 64, offset: 256)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1916, file: !164, line: 2017, baseType: !1704, size: 64, offset: 320)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1916, file: !164, line: 2019, baseType: !826, size: 64, offset: 384)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1916, file: !164, line: 2020, baseType: !826, size: 64, offset: 448)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1916, file: !164, line: 2021, baseType: !826, size: 64, offset: 512)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1916, file: !164, line: 2022, baseType: !826, size: 64, offset: 576)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1916, file: !164, line: 2023, baseType: !826, size: 64, offset: 640)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !829, file: !164, line: 3400, baseType: !1930, size: 832)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !164, line: 2430, size: 832, elements: !1931)
!1931 = !{!1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1930, file: !164, line: 2431, baseType: !865, size: 192)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1930, file: !164, line: 2433, baseType: !826, size: 64, offset: 192)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1930, file: !164, line: 2434, baseType: !826, size: 64, offset: 256)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1930, file: !164, line: 2435, baseType: !826, size: 64, offset: 320)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1930, file: !164, line: 2436, baseType: !826, size: 64, offset: 384)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1930, file: !164, line: 2437, baseType: !1704, size: 64, offset: 448)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1930, file: !164, line: 2438, baseType: !826, size: 64, offset: 512)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1930, file: !164, line: 2440, baseType: !826, size: 64, offset: 576)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1930, file: !164, line: 2441, baseType: !826, size: 64, offset: 640)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1930, file: !164, line: 2443, baseType: !1942, size: 128, offset: 704)
!1942 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !164, line: 182, baseType: !1943)
!1943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !164, line: 182, size: 128, elements: !1944)
!1944 = !{!1945}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1943, file: !164, line: 182, baseType: !1709, size: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !829, file: !164, line: 3401, baseType: !1947, size: 320)
!1947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !164, line: 3327, size: 320, elements: !1948)
!1948 = !{!1949, !1950, !1957}
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1947, file: !164, line: 3329, baseType: !865, size: 192)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1947, file: !164, line: 3330, baseType: !1951, size: 64, offset: 192)
!1951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1952, size: 64)
!1952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !164, line: 3320, size: 192, elements: !1953)
!1953 = !{!1954, !1955, !1956}
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1952, file: !164, line: 3322, baseType: !1951, size: 64)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1952, file: !164, line: 3323, baseType: !1951, size: 64, offset: 64)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1952, file: !164, line: 3324, baseType: !826, size: 64, offset: 128)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1947, file: !164, line: 3331, baseType: !1951, size: 64, offset: 256)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !829, file: !164, line: 3402, baseType: !1959, size: 256)
!1959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !164, line: 1540, size: 256, elements: !1960)
!1960 = !{!1961, !1962}
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1959, file: !164, line: 1541, baseType: !865, size: 192)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1959, file: !164, line: 1542, baseType: !1963, size: 64, offset: 192)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !164, line: 1538, baseType: !1965)
!1965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !164, line: 1538, size: 192, elements: !1966)
!1966 = !{!1967}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1965, file: !164, line: 1538, baseType: !1968, size: 192)
!1968 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !164, line: 1537, baseType: !1969)
!1969 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !164, line: 1537, size: 192, elements: !1970)
!1970 = !{!1971, !1972, !1973}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1969, file: !164, line: 1537, baseType: !7, size: 32)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1969, file: !164, line: 1537, baseType: !7, size: 32, offset: 32)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1969, file: !164, line: 1537, baseType: !1974, size: 128, offset: 64)
!1974 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1975, size: 128, elements: !927)
!1975 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !164, line: 1535, baseType: !1976)
!1976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !164, line: 1532, size: 128, elements: !1977)
!1977 = !{!1978, !1979}
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1976, file: !164, line: 1533, baseType: !826, size: 64)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1976, file: !164, line: 1534, baseType: !826, size: 64, offset: 64)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !829, file: !164, line: 3403, baseType: !1981, size: 512)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !164, line: 1938, size: 512, elements: !1982)
!1982 = !{!1983, !1984, !1985, !1986, !1992, !1993, !1994}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1981, file: !164, line: 1939, baseType: !865, size: 192)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1981, file: !164, line: 1940, baseType: !954, size: 32, offset: 192)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1981, file: !164, line: 1941, baseType: !163, size: 32, offset: 224)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1981, file: !164, line: 1946, baseType: !1987, size: 32, offset: 256)
!1987 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !164, line: 1942, size: 32, elements: !1988)
!1988 = !{!1989, !1990, !1991}
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1987, file: !164, line: 1943, baseType: !182, size: 32)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1987, file: !164, line: 1944, baseType: !189, size: 32)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1987, file: !164, line: 1945, baseType: !196, size: 32)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1981, file: !164, line: 1950, baseType: !1147, size: 64, offset: 320)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1981, file: !164, line: 1951, baseType: !1147, size: 64, offset: 384)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1981, file: !164, line: 1953, baseType: !1210, size: 64, offset: 448)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !829, file: !164, line: 3404, baseType: !1996, size: 1664)
!1996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !164, line: 3337, size: 1664, elements: !1997)
!1997 = !{!1998, !1999}
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1996, file: !164, line: 3338, baseType: !865, size: 192)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1996, file: !164, line: 3341, baseType: !2000, size: 1472, offset: 192)
!2000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2001, line: 410, size: 1472, elements: !2002)
!2001 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2002 = !{!2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166}
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2000, file: !2001, line: 412, baseType: !923, size: 32)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2000, file: !2001, line: 413, baseType: !923, size: 32, offset: 32)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2000, file: !2001, line: 414, baseType: !923, size: 32, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2000, file: !2001, line: 415, baseType: !923, size: 32, offset: 96)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2000, file: !2001, line: 416, baseType: !923, size: 32, offset: 128)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2000, file: !2001, line: 417, baseType: !923, size: 32, offset: 160)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2000, file: !2001, line: 418, baseType: !946, size: 8, offset: 192)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2000, file: !2001, line: 419, baseType: !946, size: 8, offset: 200)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2000, file: !2001, line: 420, baseType: !2012, size: 8, offset: 208)
!2012 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2000, file: !2001, line: 421, baseType: !2012, size: 8, offset: 216)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2000, file: !2001, line: 422, baseType: !2012, size: 8, offset: 224)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2000, file: !2001, line: 423, baseType: !2012, size: 8, offset: 232)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2000, file: !2001, line: 424, baseType: !2012, size: 8, offset: 240)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2000, file: !2001, line: 425, baseType: !2012, size: 8, offset: 248)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2000, file: !2001, line: 426, baseType: !2012, size: 8, offset: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2000, file: !2001, line: 427, baseType: !2012, size: 8, offset: 264)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2000, file: !2001, line: 428, baseType: !2012, size: 8, offset: 272)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2000, file: !2001, line: 429, baseType: !2012, size: 8, offset: 280)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2000, file: !2001, line: 430, baseType: !2012, size: 8, offset: 288)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2000, file: !2001, line: 431, baseType: !2012, size: 8, offset: 296)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2000, file: !2001, line: 432, baseType: !2012, size: 8, offset: 304)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2000, file: !2001, line: 433, baseType: !2012, size: 8, offset: 312)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2000, file: !2001, line: 434, baseType: !2012, size: 8, offset: 320)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2000, file: !2001, line: 435, baseType: !2012, size: 8, offset: 328)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2000, file: !2001, line: 436, baseType: !2012, size: 8, offset: 336)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2000, file: !2001, line: 437, baseType: !2012, size: 8, offset: 344)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2000, file: !2001, line: 438, baseType: !2012, size: 8, offset: 352)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2000, file: !2001, line: 439, baseType: !2012, size: 8, offset: 360)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2000, file: !2001, line: 440, baseType: !2012, size: 8, offset: 368)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2000, file: !2001, line: 441, baseType: !2012, size: 8, offset: 376)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2000, file: !2001, line: 442, baseType: !2012, size: 8, offset: 384)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2000, file: !2001, line: 443, baseType: !2012, size: 8, offset: 392)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2000, file: !2001, line: 444, baseType: !2012, size: 8, offset: 400)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2000, file: !2001, line: 445, baseType: !2012, size: 8, offset: 408)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2000, file: !2001, line: 446, baseType: !2012, size: 8, offset: 416)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2000, file: !2001, line: 447, baseType: !2012, size: 8, offset: 424)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2000, file: !2001, line: 448, baseType: !2012, size: 8, offset: 432)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2000, file: !2001, line: 449, baseType: !2012, size: 8, offset: 440)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2000, file: !2001, line: 450, baseType: !2012, size: 8, offset: 448)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2000, file: !2001, line: 451, baseType: !2012, size: 8, offset: 456)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2000, file: !2001, line: 452, baseType: !2012, size: 8, offset: 464)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2000, file: !2001, line: 453, baseType: !2012, size: 8, offset: 472)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2000, file: !2001, line: 454, baseType: !2012, size: 8, offset: 480)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2000, file: !2001, line: 455, baseType: !2012, size: 8, offset: 488)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2000, file: !2001, line: 456, baseType: !2012, size: 8, offset: 496)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2000, file: !2001, line: 457, baseType: !2012, size: 8, offset: 504)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2000, file: !2001, line: 458, baseType: !2012, size: 8, offset: 512)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2000, file: !2001, line: 459, baseType: !2012, size: 8, offset: 520)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2000, file: !2001, line: 460, baseType: !2012, size: 8, offset: 528)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2000, file: !2001, line: 461, baseType: !2012, size: 8, offset: 536)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2000, file: !2001, line: 462, baseType: !2012, size: 8, offset: 544)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2000, file: !2001, line: 463, baseType: !2012, size: 8, offset: 552)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2000, file: !2001, line: 464, baseType: !2012, size: 8, offset: 560)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2000, file: !2001, line: 465, baseType: !2012, size: 8, offset: 568)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2000, file: !2001, line: 466, baseType: !2012, size: 8, offset: 576)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2000, file: !2001, line: 467, baseType: !2012, size: 8, offset: 584)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2000, file: !2001, line: 468, baseType: !2012, size: 8, offset: 592)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2000, file: !2001, line: 469, baseType: !2012, size: 8, offset: 600)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2000, file: !2001, line: 470, baseType: !2012, size: 8, offset: 608)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2000, file: !2001, line: 471, baseType: !2012, size: 8, offset: 616)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2000, file: !2001, line: 472, baseType: !2012, size: 8, offset: 624)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2000, file: !2001, line: 473, baseType: !2012, size: 8, offset: 632)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2000, file: !2001, line: 474, baseType: !2012, size: 8, offset: 640)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2000, file: !2001, line: 475, baseType: !2012, size: 8, offset: 648)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2000, file: !2001, line: 476, baseType: !2012, size: 8, offset: 656)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2000, file: !2001, line: 477, baseType: !2012, size: 8, offset: 664)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2000, file: !2001, line: 478, baseType: !2012, size: 8, offset: 672)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2000, file: !2001, line: 479, baseType: !2012, size: 8, offset: 680)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2000, file: !2001, line: 480, baseType: !2012, size: 8, offset: 688)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2000, file: !2001, line: 481, baseType: !2012, size: 8, offset: 696)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2000, file: !2001, line: 482, baseType: !2012, size: 8, offset: 704)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2000, file: !2001, line: 483, baseType: !2012, size: 8, offset: 712)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2000, file: !2001, line: 484, baseType: !2012, size: 8, offset: 720)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2000, file: !2001, line: 485, baseType: !2012, size: 8, offset: 728)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2000, file: !2001, line: 486, baseType: !2012, size: 8, offset: 736)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2000, file: !2001, line: 487, baseType: !2012, size: 8, offset: 744)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2000, file: !2001, line: 488, baseType: !2012, size: 8, offset: 752)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2000, file: !2001, line: 489, baseType: !2012, size: 8, offset: 760)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2000, file: !2001, line: 490, baseType: !2012, size: 8, offset: 768)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2000, file: !2001, line: 491, baseType: !2012, size: 8, offset: 776)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2000, file: !2001, line: 492, baseType: !2012, size: 8, offset: 784)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2000, file: !2001, line: 493, baseType: !2012, size: 8, offset: 792)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2000, file: !2001, line: 494, baseType: !2012, size: 8, offset: 800)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2000, file: !2001, line: 495, baseType: !2012, size: 8, offset: 808)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2000, file: !2001, line: 496, baseType: !2012, size: 8, offset: 816)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2000, file: !2001, line: 497, baseType: !2012, size: 8, offset: 824)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2000, file: !2001, line: 498, baseType: !2012, size: 8, offset: 832)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2000, file: !2001, line: 499, baseType: !2012, size: 8, offset: 840)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2000, file: !2001, line: 500, baseType: !2012, size: 8, offset: 848)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2000, file: !2001, line: 501, baseType: !2012, size: 8, offset: 856)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2000, file: !2001, line: 502, baseType: !2012, size: 8, offset: 864)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2000, file: !2001, line: 503, baseType: !2012, size: 8, offset: 872)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2000, file: !2001, line: 504, baseType: !2012, size: 8, offset: 880)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2000, file: !2001, line: 505, baseType: !2012, size: 8, offset: 888)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2000, file: !2001, line: 506, baseType: !2012, size: 8, offset: 896)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2000, file: !2001, line: 507, baseType: !2012, size: 8, offset: 904)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2000, file: !2001, line: 508, baseType: !2012, size: 8, offset: 912)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2000, file: !2001, line: 509, baseType: !2012, size: 8, offset: 920)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2000, file: !2001, line: 510, baseType: !2012, size: 8, offset: 928)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2000, file: !2001, line: 511, baseType: !2012, size: 8, offset: 936)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2000, file: !2001, line: 512, baseType: !2012, size: 8, offset: 944)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2000, file: !2001, line: 513, baseType: !2012, size: 8, offset: 952)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2000, file: !2001, line: 514, baseType: !2012, size: 8, offset: 960)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2000, file: !2001, line: 515, baseType: !2012, size: 8, offset: 968)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2000, file: !2001, line: 516, baseType: !2012, size: 8, offset: 976)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2000, file: !2001, line: 517, baseType: !2012, size: 8, offset: 984)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2000, file: !2001, line: 518, baseType: !2012, size: 8, offset: 992)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2000, file: !2001, line: 519, baseType: !2012, size: 8, offset: 1000)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2000, file: !2001, line: 520, baseType: !2012, size: 8, offset: 1008)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2000, file: !2001, line: 521, baseType: !2012, size: 8, offset: 1016)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2000, file: !2001, line: 522, baseType: !2012, size: 8, offset: 1024)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2000, file: !2001, line: 523, baseType: !2012, size: 8, offset: 1032)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2000, file: !2001, line: 524, baseType: !2012, size: 8, offset: 1040)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2000, file: !2001, line: 525, baseType: !2012, size: 8, offset: 1048)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2000, file: !2001, line: 526, baseType: !2012, size: 8, offset: 1056)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2000, file: !2001, line: 527, baseType: !2012, size: 8, offset: 1064)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2000, file: !2001, line: 528, baseType: !2012, size: 8, offset: 1072)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2000, file: !2001, line: 529, baseType: !2012, size: 8, offset: 1080)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2000, file: !2001, line: 530, baseType: !2012, size: 8, offset: 1088)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2000, file: !2001, line: 531, baseType: !2012, size: 8, offset: 1096)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2000, file: !2001, line: 532, baseType: !2012, size: 8, offset: 1104)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2000, file: !2001, line: 533, baseType: !2012, size: 8, offset: 1112)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2000, file: !2001, line: 534, baseType: !2012, size: 8, offset: 1120)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2000, file: !2001, line: 535, baseType: !2012, size: 8, offset: 1128)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2000, file: !2001, line: 536, baseType: !2012, size: 8, offset: 1136)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2000, file: !2001, line: 537, baseType: !2012, size: 8, offset: 1144)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2000, file: !2001, line: 538, baseType: !2012, size: 8, offset: 1152)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2000, file: !2001, line: 539, baseType: !2012, size: 8, offset: 1160)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2000, file: !2001, line: 540, baseType: !2012, size: 8, offset: 1168)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2000, file: !2001, line: 541, baseType: !2012, size: 8, offset: 1176)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2000, file: !2001, line: 542, baseType: !2012, size: 8, offset: 1184)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2000, file: !2001, line: 543, baseType: !2012, size: 8, offset: 1192)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2000, file: !2001, line: 544, baseType: !2012, size: 8, offset: 1200)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2000, file: !2001, line: 545, baseType: !2012, size: 8, offset: 1208)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2000, file: !2001, line: 546, baseType: !2012, size: 8, offset: 1216)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2000, file: !2001, line: 547, baseType: !2012, size: 8, offset: 1224)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2000, file: !2001, line: 548, baseType: !2012, size: 8, offset: 1232)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2000, file: !2001, line: 549, baseType: !2012, size: 8, offset: 1240)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2000, file: !2001, line: 550, baseType: !2012, size: 8, offset: 1248)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2000, file: !2001, line: 551, baseType: !2012, size: 8, offset: 1256)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2000, file: !2001, line: 552, baseType: !2012, size: 8, offset: 1264)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2000, file: !2001, line: 553, baseType: !2012, size: 8, offset: 1272)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2000, file: !2001, line: 554, baseType: !2012, size: 8, offset: 1280)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2000, file: !2001, line: 555, baseType: !2012, size: 8, offset: 1288)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2000, file: !2001, line: 556, baseType: !2012, size: 8, offset: 1296)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2000, file: !2001, line: 557, baseType: !2012, size: 8, offset: 1304)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2000, file: !2001, line: 558, baseType: !2012, size: 8, offset: 1312)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2000, file: !2001, line: 559, baseType: !2012, size: 8, offset: 1320)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2000, file: !2001, line: 560, baseType: !2012, size: 8, offset: 1328)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2000, file: !2001, line: 561, baseType: !2012, size: 8, offset: 1336)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2000, file: !2001, line: 562, baseType: !2012, size: 8, offset: 1344)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2000, file: !2001, line: 563, baseType: !2012, size: 8, offset: 1352)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2000, file: !2001, line: 564, baseType: !2012, size: 8, offset: 1360)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2000, file: !2001, line: 565, baseType: !2012, size: 8, offset: 1368)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2000, file: !2001, line: 566, baseType: !2012, size: 8, offset: 1376)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2000, file: !2001, line: 567, baseType: !2012, size: 8, offset: 1384)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2000, file: !2001, line: 568, baseType: !2012, size: 8, offset: 1392)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2000, file: !2001, line: 569, baseType: !2012, size: 8, offset: 1400)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2000, file: !2001, line: 570, baseType: !2012, size: 8, offset: 1408)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2000, file: !2001, line: 571, baseType: !2012, size: 8, offset: 1416)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2000, file: !2001, line: 572, baseType: !2012, size: 8, offset: 1424)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2000, file: !2001, line: 573, baseType: !2012, size: 8, offset: 1432)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2000, file: !2001, line: 574, baseType: !2012, size: 8, offset: 1440)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !829, file: !164, line: 3405, baseType: !2168, size: 384)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !164, line: 3352, size: 384, elements: !2169)
!2169 = !{!2170, !2171}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2168, file: !164, line: 3353, baseType: !865, size: 192)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2168, file: !164, line: 3356, baseType: !2172, size: 192, offset: 192)
!2172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2001, line: 578, size: 192, elements: !2173)
!2173 = !{!2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2172, file: !2001, line: 580, baseType: !923, size: 32)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2172, file: !2001, line: 581, baseType: !923, size: 32, offset: 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2172, file: !2001, line: 582, baseType: !923, size: 32, offset: 64)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2172, file: !2001, line: 583, baseType: !923, size: 32, offset: 96)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2172, file: !2001, line: 584, baseType: !946, size: 8, offset: 128)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2172, file: !2001, line: 585, baseType: !946, size: 8, offset: 136)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2172, file: !2001, line: 586, baseType: !946, size: 8, offset: 144)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2172, file: !2001, line: 587, baseType: !946, size: 8, offset: 152)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2172, file: !2001, line: 588, baseType: !946, size: 8, offset: 160)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2172, file: !2001, line: 589, baseType: !946, size: 8, offset: 168)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2172, file: !2001, line: 590, baseType: !946, size: 8, offset: 176)
!2185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1609, size: 64)
!2186 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !391, line: 30, baseType: !2187)
!2187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2188, size: 64)
!2188 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !164, line: 1893, baseType: !1198)
!2189 = !DIDerivedType(tag: DW_TAG_typedef, name: "stmt_vec_info", file: !408, line: 496, baseType: !2190)
!2190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_stmt_vec_info", file: !408, line: 401, size: 1536, elements: !2192)
!2192 = !{!2193, !2194, !2195, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2461, !2462}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2191, file: !408, line: 403, baseType: !618, size: 32)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2191, file: !408, line: 406, baseType: !1157, size: 64, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "loop_vinfo", scope: !2191, file: !408, line: 409, baseType: !2196, size: 64, offset: 128)
!2196 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_vec_info", file: !408, line: 245, baseType: !2197)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2198, size: 64)
!2198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_loop_vec_info", file: !408, line: 176, size: 1024, elements: !2199)
!2199 = !{!2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2267, !2268, !2269, !2283, !2344, !2345, !2351, !2353, !2354, !2421}
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !2198, file: !408, line: 179, baseType: !1372, size: 64)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "bbs", scope: !2198, file: !408, line: 182, baseType: !2185, size: 64, offset: 64)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters", scope: !2198, file: !408, line: 185, baseType: !826, size: 64, offset: 128)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters_unchanged", scope: !2198, file: !408, line: 186, baseType: !826, size: 64, offset: 192)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "min_profitable_iters", scope: !2198, file: !408, line: 193, baseType: !923, size: 32, offset: 256)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "vectorizable", scope: !2198, file: !408, line: 196, baseType: !946, size: 8, offset: 288)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "vectorization_factor", scope: !2198, file: !408, line: 199, baseType: !923, size: 32, offset: 320)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "unaligned_dr", scope: !2198, file: !408, line: 202, baseType: !2208, size: 64, offset: 384)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !2210, line: 165, size: 896, elements: !2211)
!2210 = !DIFile(filename: "./tree-data-ref.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2211 = !{!2212, !2213, !2214, !2215, !2216, !2224, !2234, !2239}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2209, file: !2210, line: 168, baseType: !1157, size: 64)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2209, file: !2210, line: 171, baseType: !826, size: 64, offset: 64)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2209, file: !2210, line: 174, baseType: !1110, size: 64, offset: 128)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !2209, file: !2210, line: 177, baseType: !946, size: 8, offset: 192)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !2209, file: !2210, line: 180, baseType: !2217, size: 320, offset: 256)
!2217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !2210, line: 51, size: 320, elements: !2218)
!2218 = !{!2219, !2220, !2221, !2222, !2223}
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !2217, file: !2210, line: 53, baseType: !826, size: 64)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2217, file: !2210, line: 54, baseType: !826, size: 64, offset: 64)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !2217, file: !2210, line: 55, baseType: !826, size: 64, offset: 128)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2217, file: !2210, line: 56, baseType: !826, size: 64, offset: 192)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !2217, file: !2210, line: 60, baseType: !826, size: 64, offset: 256)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !2209, file: !2210, line: 183, baseType: !2225, size: 128, offset: 576)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !2210, line: 78, size: 128, elements: !2226)
!2226 = !{!2227, !2228}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !2225, file: !2210, line: 81, baseType: !826, size: 64)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !2225, file: !2210, line: 84, baseType: !2229, size: 64, offset: 64)
!2229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2230, size: 64)
!2230 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !164, line: 184, baseType: !2231)
!2231 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !164, line: 184, size: 128, elements: !2232)
!2232 = !{!2233}
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2231, file: !164, line: 184, baseType: !1709, size: 128)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2209, file: !2210, line: 186, baseType: !2235, size: 128, offset: 704)
!2235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !2210, line: 87, size: 128, elements: !2236)
!2236 = !{!2237, !2238}
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2235, file: !2210, line: 91, baseType: !1910, size: 64)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !2235, file: !2210, line: 96, baseType: !1727, size: 64, offset: 64)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !2209, file: !2210, line: 189, baseType: !2240, size: 64, offset: 832)
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2241, size: 64)
!2241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !2210, line: 127, size: 256, elements: !2242)
!2242 = !{!2243, !2249, !2250, !2251}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2241, file: !2210, line: 129, baseType: !2244, size: 64)
!2244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2245, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !146, line: 86, baseType: !2246)
!2246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !146, line: 86, size: 128, elements: !2247)
!2247 = !{!2248}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2246, file: !146, line: 86, baseType: !1392, size: 128)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !2241, file: !2210, line: 130, baseType: !923, size: 32, offset: 64)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !2241, file: !2210, line: 131, baseType: !2229, size: 64, offset: 128)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !2241, file: !2210, line: 132, baseType: !2252, size: 64, offset: 192)
!2252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2253, size: 64)
!2253 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !2254, line: 34, baseType: !2255)
!2254 = !DIFile(filename: "./lambda.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !2254, line: 34, size: 128, elements: !2256)
!2256 = !{!2257}
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2255, file: !2254, line: 34, baseType: !2258, size: 128)
!2258 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !2254, line: 32, baseType: !2259)
!2259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !2254, line: 32, size: 128, elements: !2260)
!2260 = !{!2261, !2262, !2263}
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2259, file: !2254, line: 32, baseType: !7, size: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2259, file: !2254, line: 32, baseType: !7, size: 32, offset: 32)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2259, file: !2254, line: 32, baseType: !2264, size: 64, offset: 64)
!2264 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2265, size: 64, elements: !927)
!2265 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !2254, line: 31, baseType: !2266)
!2266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "peeling_for_alignment", scope: !2198, file: !408, line: 212, baseType: !923, size: 32, offset: 448)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_mask", scope: !2198, file: !408, line: 215, baseType: !923, size: 32, offset: 480)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !2198, file: !408, line: 218, baseType: !2270, size: 64, offset: 512)
!2270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2271, size: 64)
!2271 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !2210, line: 209, baseType: !2272)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !2210, line: 209, size: 128, elements: !2273)
!2273 = !{!2274}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2272, file: !2210, line: 209, baseType: !2275, size: 128)
!2275 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !2210, line: 208, baseType: !2276)
!2276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !2210, line: 208, size: 128, elements: !2277)
!2277 = !{!2278, !2279, !2280}
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2276, file: !2210, line: 208, baseType: !7, size: 32)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2276, file: !2210, line: 208, baseType: !7, size: 32, offset: 32)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2276, file: !2210, line: 208, baseType: !2281, size: 64, offset: 64)
!2281 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2282, size: 64, elements: !927)
!2282 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !2210, line: 207, baseType: !2208)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !2198, file: !408, line: 221, baseType: !2284, size: 64, offset: 576)
!2284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2285, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !2210, line: 333, baseType: !2286)
!2286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !2210, line: 333, size: 128, elements: !2287)
!2287 = !{!2288}
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2286, file: !2210, line: 333, baseType: !2289, size: 128)
!2289 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !2210, line: 332, baseType: !2290)
!2290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !2210, line: 332, size: 128, elements: !2291)
!2291 = !{!2292, !2293, !2294}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2290, file: !2210, line: 332, baseType: !7, size: 32)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2290, file: !2210, line: 332, baseType: !7, size: 32, offset: 32)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2290, file: !2210, line: 332, baseType: !2295, size: 64, offset: 64)
!2295 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2296, size: 64, elements: !927)
!2296 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !2210, line: 331, baseType: !2297)
!2297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2298, size: 64)
!2298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !2210, line: 282, size: 512, elements: !2299)
!2299 = !{!2300, !2301, !2302, !2303, !2332, !2333, !2339, !2340, !2341, !2342, !2343}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2298, file: !2210, line: 285, baseType: !2208, size: 64)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2298, file: !2210, line: 286, baseType: !2208, size: 64, offset: 64)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !2298, file: !2210, line: 299, baseType: !826, size: 64, offset: 128)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !2298, file: !2210, line: 304, baseType: !2304, size: 64, offset: 192)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !2210, line: 272, baseType: !2306)
!2306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !2210, line: 272, size: 128, elements: !2307)
!2307 = !{!2308}
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2306, file: !2210, line: 272, baseType: !2309, size: 128)
!2309 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !2210, line: 271, baseType: !2310)
!2310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !2210, line: 271, size: 128, elements: !2311)
!2311 = !{!2312, !2313, !2314}
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2310, file: !2210, line: 271, baseType: !7, size: 32)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2310, file: !2210, line: 271, baseType: !7, size: 32, offset: 32)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2310, file: !2210, line: 271, baseType: !2315, size: 64, offset: 64)
!2315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2316, size: 64, elements: !927)
!2316 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !2210, line: 270, baseType: !2317)
!2317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2318, size: 64)
!2318 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !2210, line: 252, size: 256, elements: !2319)
!2319 = !{!2320, !2329, !2330, !2331}
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !2318, file: !2210, line: 256, baseType: !2321, size: 64)
!2321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2322, size: 64)
!2322 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !2210, line: 243, baseType: !2323)
!2323 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2210, line: 239, size: 192, elements: !2324)
!2324 = !{!2325, !2326}
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2323, file: !2210, line: 241, baseType: !7, size: 32)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !2323, file: !2210, line: 242, baseType: !2327, size: 128, offset: 64)
!2327 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2328, size: 128, elements: !1074)
!2328 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !2210, line: 237, baseType: !2229)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !2318, file: !2210, line: 257, baseType: !2321, size: 64, offset: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !2318, file: !2210, line: 261, baseType: !826, size: 64, offset: 128)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !2318, file: !2210, line: 267, baseType: !826, size: 64, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2298, file: !2210, line: 307, baseType: !2244, size: 64, offset: 256)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !2298, file: !2210, line: 310, baseType: !2334, size: 64, offset: 320)
!2334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2335, size: 64)
!2335 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !2254, line: 33, baseType: !2336)
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !2254, line: 33, size: 128, elements: !2337)
!2337 = !{!2338}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2336, file: !2254, line: 33, baseType: !2258, size: 128)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !2298, file: !2210, line: 313, baseType: !2334, size: 64, offset: 384)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !2298, file: !2210, line: 317, baseType: !7, size: 32, offset: 448)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !2298, file: !2210, line: 320, baseType: !946, size: 8, offset: 480)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !2298, file: !2210, line: 324, baseType: !946, size: 8, offset: 488)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !2298, file: !2210, line: 328, baseType: !946, size: 8, offset: 496)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "may_alias_ddrs", scope: !2198, file: !408, line: 225, baseType: !2284, size: 64, offset: 640)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "may_misalign_stmts", scope: !2198, file: !408, line: 229, baseType: !2346, size: 64, offset: 704)
!2346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2347, size: 64)
!2347 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !398, line: 34, baseType: !2348)
!2348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !398, line: 34, size: 128, elements: !2349)
!2349 = !{!2350}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2348, file: !398, line: 34, baseType: !1696, size: 128)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "loop_line_number", scope: !2198, file: !408, line: 232, baseType: !2352, size: 32, offset: 768)
!2352 = !DIDerivedType(tag: DW_TAG_typedef, name: "LOC", file: !408, line: 27, baseType: !956)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !2198, file: !408, line: 236, baseType: !2346, size: 64, offset: 832)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !2198, file: !408, line: 240, baseType: !2355, size: 64, offset: 896)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_heap", file: !408, line: 153, baseType: !2357)
!2357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_heap", file: !408, line: 153, size: 128, elements: !2358)
!2358 = !{!2359}
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2357, file: !408, line: 153, baseType: !2360, size: 128)
!2360 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_base", file: !408, line: 152, baseType: !2361)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_base", file: !408, line: 152, size: 128, elements: !2362)
!2362 = !{!2363, !2364, !2365}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2361, file: !408, line: 152, baseType: !7, size: 32)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2361, file: !408, line: 152, baseType: !7, size: 32, offset: 32)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2361, file: !408, line: 152, baseType: !2366, size: 64, offset: 64)
!2366 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2367, size: 64, elements: !927)
!2367 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_instance", file: !408, line: 150, baseType: !2368)
!2368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2369, size: 64)
!2369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_instance", file: !408, line: 123, size: 384, elements: !2370)
!2370 = !{!2371, !2386, !2387, !2388, !2393, !2407, !2420}
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !2369, file: !408, line: 125, baseType: !2372, size: 64)
!2372 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_tree", file: !408, line: 116, baseType: !2373)
!2373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2374, size: 64)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_tree", file: !408, line: 95, size: 384, elements: !2375)
!2375 = !{!2376, !2377, !2378, !2379, !2380, !2381}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !2374, file: !408, line: 99, baseType: !2373, size: 64)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !2374, file: !408, line: 100, baseType: !2373, size: 64, offset: 64)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "stmts", scope: !2374, file: !408, line: 102, baseType: !2346, size: 64, offset: 128)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts", scope: !2374, file: !408, line: 104, baseType: !2346, size: 64, offset: 192)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts_size", scope: !2374, file: !408, line: 109, baseType: !7, size: 32, offset: 256)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2374, file: !408, line: 115, baseType: !2382, size: 64, offset: 288)
!2382 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2374, file: !408, line: 111, size: 64, elements: !2383)
!2383 = !{!2384, !2385}
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !2382, file: !408, line: 113, baseType: !923, size: 32)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !2382, file: !408, line: 114, baseType: !923, size: 32, offset: 32)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "group_size", scope: !2369, file: !408, line: 128, baseType: !7, size: 32, offset: 64)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "unrolling_factor", scope: !2369, file: !408, line: 131, baseType: !7, size: 32, offset: 96)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2369, file: !408, line: 138, baseType: !2389, size: 64, offset: 128)
!2389 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2369, file: !408, line: 134, size: 64, elements: !2390)
!2390 = !{!2391, !2392}
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !2389, file: !408, line: 136, baseType: !923, size: 32)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !2389, file: !408, line: 137, baseType: !923, size: 32, offset: 32)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "load_permutation", scope: !2369, file: !408, line: 142, baseType: !2394, size: 64, offset: 192)
!2394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2395, size: 64)
!2395 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2396, line: 32, baseType: !2397)
!2396 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2396, line: 32, size: 96, elements: !2398)
!2398 = !{!2399}
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2397, file: !2396, line: 32, baseType: !2400, size: 96)
!2400 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2396, line: 31, baseType: !2401)
!2401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2396, line: 31, size: 96, elements: !2402)
!2402 = !{!2403, !2404, !2405}
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2401, file: !2396, line: 31, baseType: !7, size: 32)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2401, file: !2396, line: 31, baseType: !7, size: 32, offset: 32)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2401, file: !2396, line: 31, baseType: !2406, size: 32, offset: 64)
!2406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 32, elements: !927)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !2369, file: !408, line: 145, baseType: !2408, size: 64, offset: 256)
!2408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2409, size: 64)
!2409 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_heap", file: !408, line: 119, baseType: !2410)
!2410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_heap", file: !408, line: 119, size: 128, elements: !2411)
!2411 = !{!2412}
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2410, file: !408, line: 119, baseType: !2413, size: 128)
!2413 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_base", file: !408, line: 118, baseType: !2414)
!2414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_base", file: !408, line: 118, size: 128, elements: !2415)
!2415 = !{!2416, !2417, !2418}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2414, file: !408, line: 118, baseType: !7, size: 32)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2414, file: !408, line: 118, baseType: !7, size: 32, offset: 32)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2414, file: !408, line: 118, baseType: !2419, size: 64, offset: 64)
!2419 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2372, size: 64, elements: !927)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "first_load", scope: !2369, file: !408, line: 149, baseType: !1157, size: 64, offset: 320)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "slp_unrolling_factor", scope: !2198, file: !408, line: 244, baseType: !7, size: 32, offset: 960)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "relevant", scope: !2191, file: !408, line: 414, baseType: !633, size: 32, offset: 192)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !2191, file: !408, line: 418, baseType: !946, size: 8, offset: 224)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "vectype", scope: !2191, file: !408, line: 421, baseType: !826, size: 64, offset: 256)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "vectorized_stmt", scope: !2191, file: !408, line: 424, baseType: !1157, size: 64, offset: 320)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "data_ref_info", scope: !2191, file: !408, line: 433, baseType: !2208, size: 64, offset: 384)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "dr_base_address", scope: !2191, file: !408, line: 437, baseType: !826, size: 64, offset: 448)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "dr_init", scope: !2191, file: !408, line: 438, baseType: !826, size: 64, offset: 512)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "dr_offset", scope: !2191, file: !408, line: 439, baseType: !826, size: 64, offset: 576)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "dr_step", scope: !2191, file: !408, line: 440, baseType: !826, size: 64, offset: 640)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "dr_aligned_to", scope: !2191, file: !408, line: 441, baseType: !826, size: 64, offset: 704)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "in_pattern_p", scope: !2191, file: !408, line: 444, baseType: !946, size: 8, offset: 768)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "related_stmt", scope: !2191, file: !408, line: 455, baseType: !1157, size: 64, offset: 832)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "same_align_refs", scope: !2191, file: !408, line: 459, baseType: !2435, size: 64, offset: 896)
!2435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2436, size: 64)
!2436 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_heap", file: !408, line: 399, baseType: !2437)
!2437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_heap", file: !408, line: 399, size: 128, elements: !2438)
!2438 = !{!2439}
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2437, file: !408, line: 399, baseType: !2440, size: 128)
!2440 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_base", file: !408, line: 398, baseType: !2441)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_base", file: !408, line: 398, size: 128, elements: !2442)
!2442 = !{!2443, !2444, !2445}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2441, file: !408, line: 398, baseType: !7, size: 32)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2441, file: !408, line: 398, baseType: !7, size: 32, offset: 32)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2441, file: !408, line: 398, baseType: !2446, size: 64, offset: 64)
!2446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2447, size: 64, elements: !927)
!2447 = !DIDerivedType(tag: DW_TAG_typedef, name: "dr_p", file: !408, line: 397, baseType: !2208)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "def_type", scope: !2191, file: !408, line: 462, baseType: !421, size: 32, offset: 960)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "first_dr", scope: !2191, file: !408, line: 466, baseType: !1157, size: 64, offset: 1024)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "next_dr", scope: !2191, file: !408, line: 468, baseType: !1157, size: 64, offset: 1088)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2191, file: !408, line: 470, baseType: !7, size: 32, offset: 1152)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "store_count", scope: !2191, file: !408, line: 473, baseType: !7, size: 32, offset: 1184)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "gap", scope: !2191, file: !408, line: 476, baseType: !7, size: 32, offset: 1216)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "same_dr_stmt", scope: !2191, file: !408, line: 479, baseType: !1157, size: 64, offset: 1280)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "read_write_dep", scope: !2191, file: !408, line: 482, baseType: !946, size: 8, offset: 1344)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2191, file: !408, line: 489, baseType: !2457, size: 64, offset: 1376)
!2457 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2191, file: !408, line: 485, size: 64, elements: !2458)
!2458 = !{!2459, !2460}
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !2457, file: !408, line: 487, baseType: !923, size: 32)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !2457, file: !408, line: 488, baseType: !923, size: 32, offset: 32)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "slp_type", scope: !2191, file: !408, line: 492, baseType: !640, size: 32, offset: 1440)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "bb_vinfo", scope: !2191, file: !408, line: 495, baseType: !2463, size: 64, offset: 1472)
!2463 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_vec_info", file: !408, line: 319, baseType: !2464)
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_bb_vec_info", file: !408, line: 303, size: 320, elements: !2466)
!2466 = !{!2467, !2468, !2469, !2470, !2471}
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2465, file: !408, line: 305, baseType: !1609, size: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !2465, file: !408, line: 308, baseType: !2346, size: 64, offset: 64)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !2465, file: !408, line: 312, baseType: !2355, size: 64, offset: 128)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !2465, file: !408, line: 315, baseType: !2270, size: 64, offset: 192)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !2465, file: !408, line: 318, baseType: !2284, size: 64, offset: 256)
!2472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2473, size: 64)
!2473 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_adjust_info_stack", file: !3, line: 123, baseType: !2474)
!2474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_adjust_info_stack", file: !3, line: 123, size: 256, elements: !2475)
!2475 = !{!2476}
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2474, file: !3, line: 123, baseType: !2477, size: 256)
!2477 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_adjust_info_base", file: !3, line: 122, baseType: !2478)
!2478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_adjust_info_base", file: !3, line: 122, size: 256, elements: !2479)
!2479 = !{!2480, !2481, !2482}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2478, file: !3, line: 122, baseType: !7, size: 32)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2478, file: !3, line: 122, baseType: !7, size: 32, offset: 32)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2478, file: !3, line: 122, baseType: !2483, size: 192, offset: 64)
!2483 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2484, size: 192, elements: !927)
!2484 = !DIDerivedType(tag: DW_TAG_typedef, name: "adjust_info", file: !3, line: 120, baseType: !2485)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 116, size: 192, elements: !2486)
!2486 = !{!2487, !2488, !2489}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "from", scope: !2485, file: !3, line: 118, baseType: !826, size: 64)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2485, file: !3, line: 118, baseType: !826, size: 64, offset: 64)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2485, file: !3, line: 119, baseType: !1609, size: 64, offset: 128)
!2490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2491, size: 64)
!2491 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !829)
!2492 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2493 = !{!0}
!2494 = !{i32 7, !"Dwarf Version", i32 4}
!2495 = !{i32 2, !"Debug Info Version", i32 3}
!2496 = !{i32 1, !"wchar_size", i32 4}
!2497 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2498 = distinct !DISubprogram(name: "rename_variables_in_bb", scope: !3, file: !3, line: 73, type: !2499, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2499 = !DISubroutineType(types: !2500)
!2500 = !{null, !1609}
!2501 = !{}
!2502 = !DILocalVariable(name: "bb", arg: 1, scope: !2498, file: !3, line: 73, type: !1609)
!2503 = !DILocation(line: 73, column: 37, scope: !2498)
!2504 = !DILocalVariable(name: "gsi", scope: !2498, file: !3, line: 75, type: !2505)
!2505 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !398, line: 265, baseType: !2506)
!2506 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !398, line: 254, size: 192, elements: !2507)
!2507 = !{!2508, !2509, !2510}
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2506, file: !398, line: 257, baseType: !1152, size: 64)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2506, file: !398, line: 263, baseType: !1147, size: 64, offset: 64)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2506, file: !398, line: 264, baseType: !1609, size: 64, offset: 128)
!2511 = !DILocation(line: 75, column: 24, scope: !2498)
!2512 = !DILocalVariable(name: "stmt", scope: !2498, file: !3, line: 76, type: !1157)
!2513 = !DILocation(line: 76, column: 10, scope: !2498)
!2514 = !DILocalVariable(name: "use_p", scope: !2498, file: !3, line: 77, type: !2186)
!2515 = !DILocation(line: 77, column: 17, scope: !2498)
!2516 = !DILocalVariable(name: "iter", scope: !2498, file: !3, line: 78, type: !2517)
!2517 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !391, line: 140, baseType: !2518)
!2518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !391, line: 131, size: 320, elements: !2519)
!2519 = !{!2520, !2521, !2522, !2524, !2526, !2527, !2528}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !2518, file: !391, line: 133, baseType: !946, size: 8)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !2518, file: !391, line: 134, baseType: !390, size: 32, offset: 32)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !2518, file: !391, line: 135, baseType: !2523, size: 64, offset: 64)
!2523 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !391, line: 42, baseType: !1186)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2518, file: !391, line: 136, baseType: !2525, size: 64, offset: 128)
!2525 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !391, line: 50, baseType: !1193)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !2518, file: !391, line: 137, baseType: !923, size: 32, offset: 192)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !2518, file: !391, line: 138, baseType: !923, size: 32, offset: 224)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !2518, file: !391, line: 139, baseType: !1157, size: 64, offset: 256)
!2529 = !DILocation(line: 78, column: 15, scope: !2498)
!2530 = !DILocalVariable(name: "e", scope: !2498, file: !3, line: 79, type: !1137)
!2531 = !DILocation(line: 79, column: 8, scope: !2498)
!2532 = !DILocalVariable(name: "ei", scope: !2498, file: !3, line: 80, type: !2533)
!2533 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !135, line: 682, baseType: !2534)
!2534 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !135, line: 679, size: 128, elements: !2535)
!2535 = !{!2536, !2537}
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2534, file: !135, line: 680, baseType: !7, size: 32)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2534, file: !135, line: 681, baseType: !2538, size: 64, offset: 64)
!2538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1125, size: 64)
!2539 = !DILocation(line: 80, column: 17, scope: !2498)
!2540 = !DILocalVariable(name: "loop", scope: !2498, file: !3, line: 81, type: !1372)
!2541 = !DILocation(line: 81, column: 16, scope: !2498)
!2542 = !DILocation(line: 81, column: 23, scope: !2498)
!2543 = !DILocation(line: 81, column: 27, scope: !2498)
!2544 = !DILocation(line: 83, column: 28, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 83, column: 3)
!2546 = !DILocation(line: 83, column: 14, scope: !2545)
!2547 = !DILocation(line: 83, column: 8, scope: !2545)
!2548 = !DILocation(line: 83, column: 34, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2545, file: !3, line: 83, column: 3)
!2550 = !DILocation(line: 83, column: 33, scope: !2549)
!2551 = !DILocation(line: 83, column: 3, scope: !2545)
!2552 = !DILocation(line: 85, column: 14, scope: !2553)
!2553 = distinct !DILexicalBlock(scope: !2549, file: !3, line: 84, column: 5)
!2554 = !DILocation(line: 85, column: 12, scope: !2553)
!2555 = !DILocation(line: 86, column: 7, scope: !2556)
!2556 = distinct !DILexicalBlock(scope: !2553, file: !3, line: 86, column: 7)
!2557 = !DILocation(line: 86, column: 7, scope: !2558)
!2558 = distinct !DILexicalBlock(scope: !2556, file: !3, line: 86, column: 7)
!2559 = !DILocation(line: 87, column: 17, scope: !2558)
!2560 = !DILocation(line: 87, column: 2, scope: !2558)
!2561 = distinct !{!2561, !2555, !2562}
!2562 = !DILocation(line: 87, column: 22, scope: !2556)
!2563 = !DILocation(line: 88, column: 5, scope: !2553)
!2564 = !DILocation(line: 83, column: 51, scope: !2549)
!2565 = !DILocation(line: 83, column: 3, scope: !2549)
!2566 = distinct !{!2566, !2551, !2567}
!2567 = !DILocation(line: 88, column: 5, scope: !2545)
!2568 = !DILocation(line: 90, column: 3, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2498, file: !3, line: 90, column: 3)
!2570 = !DILocation(line: 90, column: 3, scope: !2571)
!2571 = distinct !DILexicalBlock(scope: !2569, file: !3, line: 90, column: 3)
!2572 = !DILocation(line: 92, column: 35, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2574, file: !3, line: 92, column: 11)
!2574 = distinct !DILexicalBlock(scope: !2571, file: !3, line: 91, column: 5)
!2575 = !DILocation(line: 92, column: 41, scope: !2573)
!2576 = !DILocation(line: 92, column: 44, scope: !2573)
!2577 = !DILocation(line: 92, column: 12, scope: !2573)
!2578 = !DILocation(line: 92, column: 11, scope: !2574)
!2579 = !DILocation(line: 93, column: 2, scope: !2573)
!2580 = !DILocation(line: 94, column: 34, scope: !2581)
!2581 = distinct !DILexicalBlock(scope: !2574, file: !3, line: 94, column: 7)
!2582 = !DILocation(line: 94, column: 37, scope: !2581)
!2583 = !DILocation(line: 94, column: 18, scope: !2581)
!2584 = !DILocation(line: 94, column: 12, scope: !2581)
!2585 = !DILocation(line: 94, column: 45, scope: !2586)
!2586 = distinct !DILexicalBlock(scope: !2581, file: !3, line: 94, column: 7)
!2587 = !DILocation(line: 94, column: 44, scope: !2586)
!2588 = !DILocation(line: 94, column: 7, scope: !2581)
!2589 = !DILocation(line: 95, column: 24, scope: !2586)
!2590 = !DILocation(line: 95, column: 9, scope: !2586)
!2591 = !DILocation(line: 94, column: 62, scope: !2586)
!2592 = !DILocation(line: 94, column: 7, scope: !2586)
!2593 = distinct !{!2593, !2588, !2594}
!2594 = !DILocation(line: 95, column: 69, scope: !2581)
!2595 = !DILocation(line: 96, column: 5, scope: !2574)
!2596 = distinct !{!2596, !2568, !2597}
!2597 = !DILocation(line: 96, column: 5, scope: !2569)
!2598 = !DILocation(line: 97, column: 1, scope: !2498)
!2599 = distinct !DISubprogram(name: "gsi_start_bb", scope: !398, file: !398, line: 4418, type: !2600, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{!2505, !1609}
!2602 = !DILocalVariable(name: "bb", arg: 1, scope: !2599, file: !398, line: 4418, type: !1609)
!2603 = !DILocation(line: 4418, column: 27, scope: !2599)
!2604 = !DILocalVariable(name: "i", scope: !2599, file: !398, line: 4420, type: !2505)
!2605 = !DILocation(line: 4420, column: 24, scope: !2599)
!2606 = !DILocalVariable(name: "seq", scope: !2599, file: !398, line: 4421, type: !1147)
!2607 = !DILocation(line: 4421, column: 14, scope: !2599)
!2608 = !DILocation(line: 4423, column: 17, scope: !2599)
!2609 = !DILocation(line: 4423, column: 9, scope: !2599)
!2610 = !DILocation(line: 4423, column: 7, scope: !2599)
!2611 = !DILocation(line: 4424, column: 29, scope: !2599)
!2612 = !DILocation(line: 4424, column: 11, scope: !2599)
!2613 = !DILocation(line: 4424, column: 5, scope: !2599)
!2614 = !DILocation(line: 4424, column: 9, scope: !2599)
!2615 = !DILocation(line: 4425, column: 11, scope: !2599)
!2616 = !DILocation(line: 4425, column: 5, scope: !2599)
!2617 = !DILocation(line: 4425, column: 9, scope: !2599)
!2618 = !DILocation(line: 4426, column: 10, scope: !2599)
!2619 = !DILocation(line: 4426, column: 5, scope: !2599)
!2620 = !DILocation(line: 4426, column: 8, scope: !2599)
!2621 = !DILocation(line: 4428, column: 3, scope: !2599)
!2622 = distinct !DISubprogram(name: "gsi_end_p", scope: !398, file: !398, line: 4467, type: !2623, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2623 = !DISubroutineType(types: !2624)
!2624 = !{!946, !2505}
!2625 = !DILocalVariable(name: "i", arg: 1, scope: !2622, file: !398, line: 4467, type: !2505)
!2626 = !DILocation(line: 4467, column: 33, scope: !2622)
!2627 = !DILocation(line: 4469, column: 12, scope: !2622)
!2628 = !DILocation(line: 4469, column: 16, scope: !2622)
!2629 = !DILocation(line: 4469, column: 10, scope: !2622)
!2630 = !DILocation(line: 4469, column: 3, scope: !2622)
!2631 = distinct !DISubprogram(name: "gsi_stmt", scope: !398, file: !398, line: 4501, type: !2632, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2632 = !DISubroutineType(types: !2633)
!2633 = !{!1157, !2505}
!2634 = !DILocalVariable(name: "i", arg: 1, scope: !2631, file: !398, line: 4501, type: !2505)
!2635 = !DILocation(line: 4501, column: 32, scope: !2631)
!2636 = !DILocation(line: 4503, column: 12, scope: !2631)
!2637 = !DILocation(line: 4503, column: 17, scope: !2631)
!2638 = !DILocation(line: 4503, column: 3, scope: !2631)
!2639 = distinct !DISubprogram(name: "op_iter_init_use", scope: !2640, file: !2640, line: 768, type: !2641, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2640 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2641 = !DISubroutineType(types: !2642)
!2642 = !{!2186, !2643, !1157, !923}
!2643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2517, size: 64)
!2644 = !DILocalVariable(name: "ptr", arg: 1, scope: !2639, file: !2640, line: 768, type: !2643)
!2645 = !DILocation(line: 768, column: 32, scope: !2639)
!2646 = !DILocalVariable(name: "stmt", arg: 2, scope: !2639, file: !2640, line: 768, type: !1157)
!2647 = !DILocation(line: 768, column: 44, scope: !2639)
!2648 = !DILocalVariable(name: "flags", arg: 3, scope: !2639, file: !2640, line: 768, type: !923)
!2649 = !DILocation(line: 768, column: 54, scope: !2639)
!2650 = !DILocation(line: 770, column: 3, scope: !2639)
!2651 = !DILocation(line: 772, column: 17, scope: !2639)
!2652 = !DILocation(line: 772, column: 22, scope: !2639)
!2653 = !DILocation(line: 772, column: 28, scope: !2639)
!2654 = !DILocation(line: 772, column: 3, scope: !2639)
!2655 = !DILocation(line: 773, column: 3, scope: !2639)
!2656 = !DILocation(line: 773, column: 8, scope: !2639)
!2657 = !DILocation(line: 773, column: 18, scope: !2639)
!2658 = !DILocation(line: 774, column: 28, scope: !2639)
!2659 = !DILocation(line: 774, column: 10, scope: !2639)
!2660 = !DILocation(line: 774, column: 3, scope: !2639)
!2661 = distinct !DISubprogram(name: "op_iter_done", scope: !2640, file: !2640, line: 652, type: !2662, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{!946, !2664}
!2664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2665, size: 64)
!2665 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2517)
!2666 = !DILocalVariable(name: "ptr", arg: 1, scope: !2661, file: !2640, line: 652, type: !2664)
!2667 = !DILocation(line: 652, column: 34, scope: !2661)
!2668 = !DILocation(line: 654, column: 10, scope: !2661)
!2669 = !DILocation(line: 654, column: 15, scope: !2661)
!2670 = !DILocation(line: 654, column: 3, scope: !2661)
!2671 = distinct !DISubprogram(name: "rename_use_op", scope: !3, file: !3, line: 51, type: !2672, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2672 = !DISubroutineType(types: !2673)
!2673 = !{null, !2186}
!2674 = !DILocalVariable(name: "op_p", arg: 1, scope: !2671, file: !3, line: 51, type: !2186)
!2675 = !DILocation(line: 51, column: 30, scope: !2671)
!2676 = !DILocalVariable(name: "new_name", scope: !2671, file: !3, line: 53, type: !826)
!2677 = !DILocation(line: 53, column: 8, scope: !2671)
!2678 = !DILocation(line: 55, column: 7, scope: !2679)
!2679 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 55, column: 7)
!2680 = !DILocation(line: 55, column: 39, scope: !2679)
!2681 = !DILocation(line: 55, column: 7, scope: !2671)
!2682 = !DILocation(line: 56, column: 5, scope: !2679)
!2683 = !DILocation(line: 58, column: 31, scope: !2671)
!2684 = !DILocation(line: 58, column: 14, scope: !2671)
!2685 = !DILocation(line: 58, column: 12, scope: !2671)
!2686 = !DILocation(line: 61, column: 8, scope: !2687)
!2687 = distinct !DILexicalBlock(scope: !2671, file: !3, line: 61, column: 7)
!2688 = !DILocation(line: 61, column: 7, scope: !2671)
!2689 = !DILocation(line: 62, column: 5, scope: !2687)
!2690 = !DILocation(line: 66, column: 3, scope: !2671)
!2691 = !DILocation(line: 67, column: 1, scope: !2671)
!2692 = distinct !DISubprogram(name: "op_iter_next_use", scope: !2640, file: !2640, line: 659, type: !2693, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2693 = !DISubroutineType(types: !2694)
!2694 = !{!2186, !2643}
!2695 = !DILocalVariable(name: "ptr", arg: 1, scope: !2692, file: !2640, line: 659, type: !2643)
!2696 = !DILocation(line: 659, column: 32, scope: !2692)
!2697 = !DILocalVariable(name: "use_p", scope: !2692, file: !2640, line: 661, type: !2186)
!2698 = !DILocation(line: 661, column: 17, scope: !2692)
!2699 = !DILocation(line: 665, column: 7, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2692, file: !2640, line: 665, column: 7)
!2701 = !DILocation(line: 665, column: 12, scope: !2700)
!2702 = !DILocation(line: 665, column: 7, scope: !2692)
!2703 = !DILocation(line: 667, column: 15, scope: !2704)
!2704 = distinct !DILexicalBlock(scope: !2700, file: !2640, line: 666, column: 5)
!2705 = !DILocation(line: 667, column: 13, scope: !2704)
!2706 = !DILocation(line: 668, column: 19, scope: !2704)
!2707 = !DILocation(line: 668, column: 24, scope: !2704)
!2708 = !DILocation(line: 668, column: 30, scope: !2704)
!2709 = !DILocation(line: 668, column: 7, scope: !2704)
!2710 = !DILocation(line: 668, column: 12, scope: !2704)
!2711 = !DILocation(line: 668, column: 17, scope: !2704)
!2712 = !DILocation(line: 669, column: 14, scope: !2704)
!2713 = !DILocation(line: 669, column: 7, scope: !2704)
!2714 = !DILocation(line: 671, column: 7, scope: !2715)
!2715 = distinct !DILexicalBlock(scope: !2692, file: !2640, line: 671, column: 7)
!2716 = !DILocation(line: 671, column: 12, scope: !2715)
!2717 = !DILocation(line: 671, column: 20, scope: !2715)
!2718 = !DILocation(line: 671, column: 25, scope: !2715)
!2719 = !DILocation(line: 671, column: 18, scope: !2715)
!2720 = !DILocation(line: 671, column: 7, scope: !2692)
!2721 = !DILocation(line: 673, column: 14, scope: !2722)
!2722 = distinct !DILexicalBlock(scope: !2715, file: !2640, line: 672, column: 5)
!2723 = !DILocation(line: 673, column: 7, scope: !2722)
!2724 = !DILocation(line: 675, column: 3, scope: !2692)
!2725 = !DILocation(line: 675, column: 8, scope: !2692)
!2726 = !DILocation(line: 675, column: 13, scope: !2692)
!2727 = !DILocation(line: 676, column: 3, scope: !2692)
!2728 = !DILocation(line: 677, column: 1, scope: !2692)
!2729 = distinct !DISubprogram(name: "gsi_next", scope: !398, file: !398, line: 4485, type: !2730, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2730 = !DISubroutineType(types: !2731)
!2731 = !{null, !2732}
!2732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2505, size: 64)
!2733 = !DILocalVariable(name: "i", arg: 1, scope: !2729, file: !398, line: 4485, type: !2732)
!2734 = !DILocation(line: 4485, column: 33, scope: !2729)
!2735 = !DILocation(line: 4487, column: 12, scope: !2729)
!2736 = !DILocation(line: 4487, column: 15, scope: !2729)
!2737 = !DILocation(line: 4487, column: 20, scope: !2729)
!2738 = !DILocation(line: 4487, column: 3, scope: !2729)
!2739 = !DILocation(line: 4487, column: 6, scope: !2729)
!2740 = !DILocation(line: 4487, column: 10, scope: !2729)
!2741 = !DILocation(line: 4488, column: 1, scope: !2729)
!2742 = distinct !DISubprogram(name: "ei_start_1", scope: !135, file: !135, line: 696, type: !2743, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2743 = !DISubroutineType(types: !2744)
!2744 = !{!2533, !2538}
!2745 = !DILocalVariable(name: "ev", arg: 1, scope: !2742, file: !135, line: 696, type: !2538)
!2746 = !DILocation(line: 696, column: 28, scope: !2742)
!2747 = !DILocalVariable(name: "i", scope: !2742, file: !135, line: 698, type: !2533)
!2748 = !DILocation(line: 698, column: 17, scope: !2742)
!2749 = !DILocation(line: 700, column: 5, scope: !2742)
!2750 = !DILocation(line: 700, column: 11, scope: !2742)
!2751 = !DILocation(line: 701, column: 17, scope: !2742)
!2752 = !DILocation(line: 701, column: 5, scope: !2742)
!2753 = !DILocation(line: 701, column: 15, scope: !2742)
!2754 = !DILocation(line: 703, column: 3, scope: !2742)
!2755 = distinct !DISubprogram(name: "ei_cond", scope: !135, file: !135, line: 771, type: !2756, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2756 = !DISubroutineType(types: !2757)
!2757 = !{!946, !2533, !2758}
!2758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1137, size: 64)
!2759 = !DILocalVariable(name: "ei", arg: 1, scope: !2755, file: !135, line: 771, type: !2533)
!2760 = !DILocation(line: 771, column: 24, scope: !2755)
!2761 = !DILocalVariable(name: "p", arg: 2, scope: !2755, file: !135, line: 771, type: !2758)
!2762 = !DILocation(line: 771, column: 34, scope: !2755)
!2763 = !DILocation(line: 773, column: 8, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2755, file: !135, line: 773, column: 7)
!2765 = !DILocation(line: 773, column: 7, scope: !2755)
!2766 = !DILocation(line: 775, column: 12, scope: !2767)
!2767 = distinct !DILexicalBlock(scope: !2764, file: !135, line: 774, column: 5)
!2768 = !DILocation(line: 775, column: 8, scope: !2767)
!2769 = !DILocation(line: 775, column: 10, scope: !2767)
!2770 = !DILocation(line: 776, column: 7, scope: !2767)
!2771 = !DILocation(line: 780, column: 8, scope: !2772)
!2772 = distinct !DILexicalBlock(scope: !2764, file: !135, line: 779, column: 5)
!2773 = !DILocation(line: 780, column: 10, scope: !2772)
!2774 = !DILocation(line: 781, column: 7, scope: !2772)
!2775 = !DILocation(line: 783, column: 1, scope: !2755)
!2776 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2640, file: !2640, line: 442, type: !2777, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2777 = !DISubroutineType(types: !2778)
!2778 = !{!2186, !1157, !923}
!2779 = !DILocalVariable(name: "gs", arg: 1, scope: !2776, file: !2640, line: 442, type: !1157)
!2780 = !DILocation(line: 442, column: 36, scope: !2776)
!2781 = !DILocalVariable(name: "i", arg: 2, scope: !2776, file: !2640, line: 442, type: !923)
!2782 = !DILocation(line: 442, column: 44, scope: !2776)
!2783 = !DILocation(line: 444, column: 27, scope: !2776)
!2784 = !DILocation(line: 444, column: 31, scope: !2776)
!2785 = !DILocation(line: 444, column: 11, scope: !2776)
!2786 = !DILocation(line: 444, column: 35, scope: !2776)
!2787 = !DILocation(line: 444, column: 3, scope: !2776)
!2788 = distinct !DISubprogram(name: "ei_next", scope: !135, file: !135, line: 736, type: !2789, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2789 = !DISubroutineType(types: !2790)
!2790 = !{null, !2791}
!2791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2533, size: 64)
!2792 = !DILocalVariable(name: "i", arg: 1, scope: !2788, file: !135, line: 736, type: !2791)
!2793 = !DILocation(line: 736, column: 25, scope: !2788)
!2794 = !DILocation(line: 738, column: 3, scope: !2788)
!2795 = !DILocation(line: 739, column: 3, scope: !2788)
!2796 = !DILocation(line: 739, column: 6, scope: !2788)
!2797 = !DILocation(line: 739, column: 11, scope: !2788)
!2798 = !DILocation(line: 740, column: 1, scope: !2788)
!2799 = distinct !DISubprogram(name: "rename_variables_in_loop", scope: !3, file: !3, line: 103, type: !2800, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2800 = !DISubroutineType(types: !2801)
!2801 = !{null, !1372}
!2802 = !DILocalVariable(name: "loop", arg: 1, scope: !2799, file: !3, line: 103, type: !1372)
!2803 = !DILocation(line: 103, column: 40, scope: !2799)
!2804 = !DILocalVariable(name: "i", scope: !2799, file: !3, line: 105, type: !7)
!2805 = !DILocation(line: 105, column: 12, scope: !2799)
!2806 = !DILocalVariable(name: "bbs", scope: !2799, file: !3, line: 106, type: !2185)
!2807 = !DILocation(line: 106, column: 16, scope: !2799)
!2808 = !DILocation(line: 108, column: 24, scope: !2799)
!2809 = !DILocation(line: 108, column: 9, scope: !2799)
!2810 = !DILocation(line: 108, column: 7, scope: !2799)
!2811 = !DILocation(line: 110, column: 10, scope: !2812)
!2812 = distinct !DILexicalBlock(scope: !2799, file: !3, line: 110, column: 3)
!2813 = !DILocation(line: 110, column: 8, scope: !2812)
!2814 = !DILocation(line: 110, column: 15, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2812, file: !3, line: 110, column: 3)
!2816 = !DILocation(line: 110, column: 19, scope: !2815)
!2817 = !DILocation(line: 110, column: 25, scope: !2815)
!2818 = !DILocation(line: 110, column: 17, scope: !2815)
!2819 = !DILocation(line: 110, column: 3, scope: !2812)
!2820 = !DILocation(line: 111, column: 29, scope: !2815)
!2821 = !DILocation(line: 111, column: 33, scope: !2815)
!2822 = !DILocation(line: 111, column: 5, scope: !2815)
!2823 = !DILocation(line: 110, column: 37, scope: !2815)
!2824 = !DILocation(line: 110, column: 3, scope: !2815)
!2825 = distinct !{!2825, !2819, !2826}
!2826 = !DILocation(line: 111, column: 35, scope: !2812)
!2827 = !DILocation(line: 113, column: 9, scope: !2799)
!2828 = !DILocation(line: 113, column: 3, scope: !2799)
!2829 = !DILocation(line: 114, column: 1, scope: !2799)
!2830 = distinct !DISubprogram(name: "slpeel_make_loop_iterate_ntimes", scope: !3, file: !3, line: 756, type: !2831, scopeLine: 757, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2831 = !DISubroutineType(types: !2832)
!2832 = !{null, !1372, !826}
!2833 = !DILocalVariable(name: "loop", arg: 1, scope: !2830, file: !3, line: 756, type: !1372)
!2834 = !DILocation(line: 756, column: 47, scope: !2830)
!2835 = !DILocalVariable(name: "niters", arg: 2, scope: !2830, file: !3, line: 756, type: !826)
!2836 = !DILocation(line: 756, column: 58, scope: !2830)
!2837 = !DILocalVariable(name: "indx_before_incr", scope: !2830, file: !3, line: 758, type: !826)
!2838 = !DILocation(line: 758, column: 8, scope: !2830)
!2839 = !DILocalVariable(name: "indx_after_incr", scope: !2830, file: !3, line: 758, type: !826)
!2840 = !DILocation(line: 758, column: 26, scope: !2830)
!2841 = !DILocalVariable(name: "cond_stmt", scope: !2830, file: !3, line: 759, type: !1157)
!2842 = !DILocation(line: 759, column: 10, scope: !2830)
!2843 = !DILocalVariable(name: "orig_cond", scope: !2830, file: !3, line: 760, type: !1157)
!2844 = !DILocation(line: 760, column: 10, scope: !2830)
!2845 = !DILocalVariable(name: "exit_edge", scope: !2830, file: !3, line: 761, type: !1137)
!2846 = !DILocation(line: 761, column: 8, scope: !2830)
!2847 = !DILocation(line: 761, column: 33, scope: !2830)
!2848 = !DILocation(line: 761, column: 20, scope: !2830)
!2849 = !DILocalVariable(name: "loop_cond_gsi", scope: !2830, file: !3, line: 762, type: !2505)
!2850 = !DILocation(line: 762, column: 24, scope: !2830)
!2851 = !DILocalVariable(name: "incr_gsi", scope: !2830, file: !3, line: 763, type: !2505)
!2852 = !DILocation(line: 763, column: 24, scope: !2830)
!2853 = !DILocalVariable(name: "insert_after", scope: !2830, file: !3, line: 764, type: !946)
!2854 = !DILocation(line: 764, column: 8, scope: !2830)
!2855 = !DILocalVariable(name: "init", scope: !2830, file: !3, line: 765, type: !826)
!2856 = !DILocation(line: 765, column: 8, scope: !2830)
!2857 = !DILocation(line: 765, column: 30, scope: !2830)
!2858 = !DILocation(line: 765, column: 15, scope: !2830)
!2859 = !DILocalVariable(name: "step", scope: !2830, file: !3, line: 766, type: !826)
!2860 = !DILocation(line: 766, column: 8, scope: !2830)
!2861 = !DILocation(line: 766, column: 30, scope: !2830)
!2862 = !DILocation(line: 766, column: 15, scope: !2830)
!2863 = !DILocalVariable(name: "loop_loc", scope: !2830, file: !3, line: 767, type: !2352)
!2864 = !DILocation(line: 767, column: 7, scope: !2830)
!2865 = !DILocalVariable(name: "code", scope: !2830, file: !3, line: 768, type: !196)
!2866 = !DILocation(line: 768, column: 18, scope: !2830)
!2867 = !DILocation(line: 770, column: 40, scope: !2830)
!2868 = !DILocation(line: 770, column: 15, scope: !2830)
!2869 = !DILocation(line: 770, column: 13, scope: !2830)
!2870 = !DILocation(line: 771, column: 3, scope: !2830)
!2871 = !DILocation(line: 772, column: 33, scope: !2830)
!2872 = !DILocation(line: 772, column: 19, scope: !2830)
!2873 = !DILocation(line: 774, column: 35, scope: !2830)
!2874 = !DILocation(line: 774, column: 3, scope: !2830)
!2875 = !DILocation(line: 775, column: 14, scope: !2830)
!2876 = !DILocation(line: 775, column: 20, scope: !2830)
!2877 = !DILocation(line: 775, column: 37, scope: !2830)
!2878 = !DILocation(line: 776, column: 25, scope: !2830)
!2879 = !DILocation(line: 775, column: 3, scope: !2830)
!2880 = !DILocation(line: 778, column: 63, scope: !2830)
!2881 = !DILocation(line: 778, column: 21, scope: !2830)
!2882 = !DILocation(line: 778, column: 19, scope: !2830)
!2883 = !DILocation(line: 781, column: 54, scope: !2830)
!2884 = !DILocation(line: 781, column: 12, scope: !2830)
!2885 = !DILocation(line: 781, column: 10, scope: !2830)
!2886 = !DILocation(line: 784, column: 11, scope: !2830)
!2887 = !DILocation(line: 784, column: 22, scope: !2830)
!2888 = !DILocation(line: 784, column: 28, scope: !2830)
!2889 = !DILocation(line: 784, column: 10, scope: !2830)
!2890 = !DILocation(line: 784, column: 8, scope: !2830)
!2891 = !DILocation(line: 785, column: 34, scope: !2830)
!2892 = !DILocation(line: 785, column: 40, scope: !2830)
!2893 = !DILocation(line: 785, column: 57, scope: !2830)
!2894 = !DILocation(line: 785, column: 15, scope: !2830)
!2895 = !DILocation(line: 785, column: 13, scope: !2830)
!2896 = !DILocation(line: 788, column: 38, scope: !2830)
!2897 = !DILocation(line: 788, column: 3, scope: !2830)
!2898 = !DILocation(line: 791, column: 3, scope: !2830)
!2899 = !DILocation(line: 793, column: 34, scope: !2830)
!2900 = !DILocation(line: 793, column: 14, scope: !2830)
!2901 = !DILocation(line: 793, column: 12, scope: !2830)
!2902 = !DILocation(line: 794, column: 7, scope: !2903)
!2903 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 794, column: 7)
!2904 = !DILocation(line: 794, column: 17, scope: !2903)
!2905 = !DILocation(line: 794, column: 21, scope: !2903)
!2906 = !DILocation(line: 794, column: 32, scope: !2903)
!2907 = !DILocation(line: 794, column: 7, scope: !2830)
!2908 = !DILocation(line: 796, column: 11, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2910, file: !3, line: 796, column: 11)
!2910 = distinct !DILexicalBlock(scope: !2903, file: !3, line: 795, column: 5)
!2911 = !DILocation(line: 796, column: 20, scope: !2909)
!2912 = !DILocation(line: 796, column: 11, scope: !2910)
!2913 = !DILocation(line: 797, column: 18, scope: !2909)
!2914 = !DILocation(line: 798, column: 18, scope: !2909)
!2915 = !DILocation(line: 798, column: 39, scope: !2909)
!2916 = !DILocation(line: 797, column: 9, scope: !2909)
!2917 = !DILocation(line: 799, column: 26, scope: !2910)
!2918 = !DILocation(line: 799, column: 37, scope: !2910)
!2919 = !DILocation(line: 799, column: 7, scope: !2910)
!2920 = !DILocation(line: 800, column: 5, scope: !2910)
!2921 = !DILocation(line: 802, column: 25, scope: !2830)
!2922 = !DILocation(line: 802, column: 3, scope: !2830)
!2923 = !DILocation(line: 802, column: 9, scope: !2830)
!2924 = !DILocation(line: 802, column: 23, scope: !2830)
!2925 = !DILocation(line: 803, column: 1, scope: !2830)
!2926 = distinct !DISubprogram(name: "find_loop_location", scope: !3, file: !3, line: 1433, type: !2927, scopeLine: 1434, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2927 = !DISubroutineType(types: !2928)
!2928 = !{!2352, !1372}
!2929 = !DILocalVariable(name: "loop", arg: 1, scope: !2926, file: !3, line: 1433, type: !1372)
!2930 = !DILocation(line: 1433, column: 34, scope: !2926)
!2931 = !DILocalVariable(name: "stmt", scope: !2926, file: !3, line: 1435, type: !1157)
!2932 = !DILocation(line: 1435, column: 10, scope: !2926)
!2933 = !DILocalVariable(name: "bb", scope: !2926, file: !3, line: 1436, type: !1609)
!2934 = !DILocation(line: 1436, column: 15, scope: !2926)
!2935 = !DILocalVariable(name: "si", scope: !2926, file: !3, line: 1437, type: !2505)
!2936 = !DILocation(line: 1437, column: 24, scope: !2926)
!2937 = !DILocation(line: 1439, column: 8, scope: !2938)
!2938 = distinct !DILexicalBlock(scope: !2926, file: !3, line: 1439, column: 7)
!2939 = !DILocation(line: 1439, column: 7, scope: !2926)
!2940 = !DILocation(line: 1440, column: 5, scope: !2938)
!2941 = !DILocation(line: 1442, column: 35, scope: !2926)
!2942 = !DILocation(line: 1442, column: 10, scope: !2926)
!2943 = !DILocation(line: 1442, column: 8, scope: !2926)
!2944 = !DILocation(line: 1444, column: 7, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2926, file: !3, line: 1444, column: 7)
!2946 = !DILocation(line: 1444, column: 12, scope: !2945)
!2947 = !DILocation(line: 1444, column: 32, scope: !2945)
!2948 = !DILocation(line: 1444, column: 15, scope: !2945)
!2949 = !DILocation(line: 1444, column: 38, scope: !2945)
!2950 = !DILocation(line: 1444, column: 7, scope: !2926)
!2951 = !DILocation(line: 1445, column: 29, scope: !2945)
!2952 = !DILocation(line: 1445, column: 12, scope: !2945)
!2953 = !DILocation(line: 1445, column: 5, scope: !2945)
!2954 = !DILocation(line: 1450, column: 8, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2926, file: !3, line: 1450, column: 7)
!2956 = !DILocation(line: 1450, column: 14, scope: !2955)
!2957 = !DILocation(line: 1450, column: 7, scope: !2926)
!2958 = !DILocation(line: 1451, column: 5, scope: !2955)
!2959 = !DILocation(line: 1453, column: 8, scope: !2926)
!2960 = !DILocation(line: 1453, column: 14, scope: !2926)
!2961 = !DILocation(line: 1453, column: 6, scope: !2926)
!2962 = !DILocation(line: 1455, column: 27, scope: !2963)
!2963 = distinct !DILexicalBlock(scope: !2926, file: !3, line: 1455, column: 3)
!2964 = !DILocation(line: 1455, column: 13, scope: !2963)
!2965 = !DILocation(line: 1455, column: 8, scope: !2963)
!2966 = !DILocation(line: 1455, column: 33, scope: !2967)
!2967 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 1455, column: 3)
!2968 = !DILocation(line: 1455, column: 32, scope: !2967)
!2969 = !DILocation(line: 1455, column: 3, scope: !2963)
!2970 = !DILocation(line: 1457, column: 14, scope: !2971)
!2971 = distinct !DILexicalBlock(scope: !2967, file: !3, line: 1456, column: 5)
!2972 = !DILocation(line: 1457, column: 12, scope: !2971)
!2973 = !DILocation(line: 1458, column: 28, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2971, file: !3, line: 1458, column: 11)
!2975 = !DILocation(line: 1458, column: 11, scope: !2974)
!2976 = !DILocation(line: 1458, column: 34, scope: !2974)
!2977 = !DILocation(line: 1458, column: 11, scope: !2971)
!2978 = !DILocation(line: 1459, column: 33, scope: !2974)
!2979 = !DILocation(line: 1459, column: 16, scope: !2974)
!2980 = !DILocation(line: 1459, column: 9, scope: !2974)
!2981 = !DILocation(line: 1460, column: 5, scope: !2971)
!2982 = !DILocation(line: 1455, column: 49, scope: !2967)
!2983 = !DILocation(line: 1455, column: 3, scope: !2967)
!2984 = distinct !{!2984, !2969, !2985}
!2985 = !DILocation(line: 1460, column: 5, scope: !2963)
!2986 = !DILocation(line: 1462, column: 3, scope: !2926)
!2987 = !DILocation(line: 1463, column: 1, scope: !2926)
!2988 = distinct !DISubprogram(name: "slpeel_tree_duplicate_loop_to_edge_cfg", scope: !3, file: !3, line: 810, type: !2989, scopeLine: 811, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!2989 = !DISubroutineType(types: !2990)
!2990 = !{!1372, !1372, !1137}
!2991 = !DILocalVariable(name: "loop", arg: 1, scope: !2988, file: !3, line: 810, type: !1372)
!2992 = !DILocation(line: 810, column: 54, scope: !2988)
!2993 = !DILocalVariable(name: "e", arg: 2, scope: !2988, file: !3, line: 810, type: !1137)
!2994 = !DILocation(line: 810, column: 65, scope: !2988)
!2995 = !DILocalVariable(name: "new_loop", scope: !2988, file: !3, line: 812, type: !1372)
!2996 = !DILocation(line: 812, column: 16, scope: !2988)
!2997 = !DILocalVariable(name: "new_bbs", scope: !2988, file: !3, line: 813, type: !2185)
!2998 = !DILocation(line: 813, column: 16, scope: !2988)
!2999 = !DILocalVariable(name: "bbs", scope: !2988, file: !3, line: 813, type: !2185)
!3000 = !DILocation(line: 813, column: 26, scope: !2988)
!3001 = !DILocalVariable(name: "at_exit", scope: !2988, file: !3, line: 814, type: !946)
!3002 = !DILocation(line: 814, column: 8, scope: !2988)
!3003 = !DILocalVariable(name: "was_imm_dom", scope: !2988, file: !3, line: 815, type: !946)
!3004 = !DILocation(line: 815, column: 8, scope: !2988)
!3005 = !DILocalVariable(name: "exit_dest", scope: !2988, file: !3, line: 816, type: !1609)
!3006 = !DILocation(line: 816, column: 15, scope: !2988)
!3007 = !DILocalVariable(name: "phi", scope: !2988, file: !3, line: 817, type: !1157)
!3008 = !DILocation(line: 817, column: 10, scope: !2988)
!3009 = !DILocalVariable(name: "phi_arg", scope: !2988, file: !3, line: 818, type: !826)
!3010 = !DILocation(line: 818, column: 8, scope: !2988)
!3011 = !DILocalVariable(name: "exit", scope: !2988, file: !3, line: 819, type: !1137)
!3012 = !DILocation(line: 819, column: 8, scope: !2988)
!3013 = !DILocalVariable(name: "new_exit", scope: !2988, file: !3, line: 819, type: !1137)
!3014 = !DILocation(line: 819, column: 14, scope: !2988)
!3015 = !DILocalVariable(name: "gsi", scope: !2988, file: !3, line: 820, type: !2505)
!3016 = !DILocation(line: 820, column: 24, scope: !2988)
!3017 = !DILocation(line: 822, column: 14, scope: !2988)
!3018 = !DILocation(line: 822, column: 32, scope: !2988)
!3019 = !DILocation(line: 822, column: 19, scope: !2988)
!3020 = !DILocation(line: 822, column: 16, scope: !2988)
!3021 = !DILocation(line: 822, column: 13, scope: !2988)
!3022 = !DILocation(line: 822, column: 11, scope: !2988)
!3023 = !DILocation(line: 823, column: 8, scope: !3024)
!3024 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 823, column: 7)
!3025 = !DILocation(line: 823, column: 16, scope: !3024)
!3026 = !DILocation(line: 823, column: 19, scope: !3024)
!3027 = !DILocation(line: 823, column: 45, scope: !3024)
!3028 = !DILocation(line: 823, column: 24, scope: !3024)
!3029 = !DILocation(line: 823, column: 21, scope: !3024)
!3030 = !DILocation(line: 823, column: 7, scope: !2988)
!3031 = !DILocation(line: 824, column: 5, scope: !3024)
!3032 = !DILocation(line: 826, column: 24, scope: !2988)
!3033 = !DILocation(line: 826, column: 9, scope: !2988)
!3034 = !DILocation(line: 826, column: 7, scope: !2988)
!3035 = !DILocation(line: 829, column: 24, scope: !3036)
!3036 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 829, column: 7)
!3037 = !DILocation(line: 829, column: 29, scope: !3036)
!3038 = !DILocation(line: 829, column: 35, scope: !3036)
!3039 = !DILocation(line: 829, column: 8, scope: !3036)
!3040 = !DILocation(line: 829, column: 7, scope: !2988)
!3041 = !DILocation(line: 831, column: 13, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 830, column: 5)
!3043 = !DILocation(line: 831, column: 7, scope: !3042)
!3044 = !DILocation(line: 832, column: 7, scope: !3042)
!3045 = !DILocation(line: 836, column: 30, scope: !2988)
!3046 = !DILocation(line: 836, column: 48, scope: !2988)
!3047 = !DILocation(line: 836, column: 36, scope: !2988)
!3048 = !DILocation(line: 836, column: 14, scope: !2988)
!3049 = !DILocation(line: 836, column: 12, scope: !2988)
!3050 = !DILocation(line: 837, column: 8, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 837, column: 7)
!3052 = !DILocation(line: 837, column: 7, scope: !2988)
!3053 = !DILocation(line: 839, column: 13, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3051, file: !3, line: 838, column: 5)
!3055 = !DILocation(line: 839, column: 7, scope: !3054)
!3056 = !DILocation(line: 840, column: 7, scope: !3054)
!3057 = !DILocation(line: 843, column: 28, scope: !2988)
!3058 = !DILocation(line: 843, column: 15, scope: !2988)
!3059 = !DILocation(line: 843, column: 35, scope: !2988)
!3060 = !DILocation(line: 843, column: 13, scope: !2988)
!3061 = !DILocation(line: 845, column: 8, scope: !2988)
!3062 = !DILocation(line: 844, column: 18, scope: !2988)
!3063 = !DILocation(line: 845, column: 22, scope: !2988)
!3064 = !DILocation(line: 845, column: 28, scope: !2988)
!3065 = !DILocation(line: 845, column: 19, scope: !2988)
!3066 = !DILocation(line: 844, column: 17, scope: !2988)
!3067 = !DILocation(line: 844, column: 15, scope: !2988)
!3068 = !DILocation(line: 848, column: 13, scope: !2988)
!3069 = !DILocation(line: 848, column: 11, scope: !2988)
!3070 = !DILocation(line: 850, column: 23, scope: !2988)
!3071 = !DILocation(line: 850, column: 10, scope: !2988)
!3072 = !DILocation(line: 850, column: 8, scope: !2988)
!3073 = !DILocation(line: 851, column: 13, scope: !2988)
!3074 = !DILocation(line: 851, column: 18, scope: !2988)
!3075 = !DILocation(line: 851, column: 24, scope: !2988)
!3076 = !DILocation(line: 851, column: 35, scope: !2988)
!3077 = !DILocation(line: 853, column: 6, scope: !2988)
!3078 = !DILocation(line: 853, column: 9, scope: !2988)
!3079 = !DILocation(line: 851, column: 3, scope: !2988)
!3080 = !DILocation(line: 857, column: 30, scope: !3081)
!3081 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 857, column: 3)
!3082 = !DILocation(line: 857, column: 14, scope: !3081)
!3083 = !DILocation(line: 857, column: 8, scope: !3081)
!3084 = !DILocation(line: 857, column: 43, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3081, file: !3, line: 857, column: 3)
!3086 = !DILocation(line: 857, column: 42, scope: !3085)
!3087 = !DILocation(line: 857, column: 3, scope: !3081)
!3088 = !DILocation(line: 859, column: 13, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3085, file: !3, line: 858, column: 5)
!3090 = !DILocation(line: 859, column: 11, scope: !3089)
!3091 = !DILocation(line: 860, column: 17, scope: !3089)
!3092 = !DILocation(line: 860, column: 15, scope: !3089)
!3093 = !DILocation(line: 861, column: 11, scope: !3094)
!3094 = distinct !DILexicalBlock(scope: !3089, file: !3, line: 861, column: 11)
!3095 = !DILocation(line: 861, column: 11, scope: !3089)
!3096 = !DILocalVariable(name: "new_loop_exit_edge", scope: !3097, file: !3, line: 863, type: !1137)
!3097 = distinct !DILexicalBlock(scope: !3094, file: !3, line: 862, column: 2)
!3098 = !DILocation(line: 863, column: 9, scope: !3097)
!3099 = !DILocalVariable(name: "locus", scope: !3097, file: !3, line: 864, type: !956)
!3100 = !DILocation(line: 864, column: 20, scope: !3097)
!3101 = !DILocation(line: 866, column: 47, scope: !3097)
!3102 = !DILocation(line: 866, column: 65, scope: !3097)
!3103 = !DILocation(line: 866, column: 52, scope: !3097)
!3104 = !DILocation(line: 866, column: 12, scope: !3097)
!3105 = !DILocation(line: 866, column: 10, scope: !3097)
!3106 = !DILocation(line: 867, column: 8, scope: !3107)
!3107 = distinct !DILexicalBlock(scope: !3097, file: !3, line: 867, column: 8)
!3108 = !DILocation(line: 867, column: 41, scope: !3107)
!3109 = !DILocation(line: 867, column: 49, scope: !3107)
!3110 = !DILocation(line: 867, column: 59, scope: !3107)
!3111 = !DILocation(line: 867, column: 46, scope: !3107)
!3112 = !DILocation(line: 867, column: 8, scope: !3097)
!3113 = !DILocation(line: 868, column: 27, scope: !3107)
!3114 = !DILocation(line: 868, column: 25, scope: !3107)
!3115 = !DILocation(line: 868, column: 6, scope: !3107)
!3116 = !DILocation(line: 870, column: 27, scope: !3107)
!3117 = !DILocation(line: 870, column: 25, scope: !3107)
!3118 = !DILocation(line: 872, column: 17, scope: !3097)
!3119 = !DILocation(line: 872, column: 22, scope: !3097)
!3120 = !DILocation(line: 872, column: 31, scope: !3097)
!3121 = !DILocation(line: 872, column: 51, scope: !3097)
!3122 = !DILocation(line: 872, column: 4, scope: !3097)
!3123 = !DILocation(line: 873, column: 2, scope: !3097)
!3124 = !DILocation(line: 874, column: 5, scope: !3089)
!3125 = !DILocation(line: 857, column: 60, scope: !3085)
!3126 = !DILocation(line: 857, column: 3, scope: !3085)
!3127 = distinct !{!3127, !3087, !3128}
!3128 = !DILocation(line: 874, column: 5, scope: !3081)
!3129 = !DILocation(line: 876, column: 7, scope: !3130)
!3130 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 876, column: 7)
!3131 = !DILocation(line: 876, column: 7, scope: !2988)
!3132 = !DILocation(line: 878, column: 39, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 877, column: 5)
!3134 = !DILocation(line: 878, column: 42, scope: !3133)
!3135 = !DILocation(line: 878, column: 52, scope: !3133)
!3136 = !DILocation(line: 878, column: 7, scope: !3133)
!3137 = !DILocation(line: 879, column: 7, scope: !3133)
!3138 = !DILocation(line: 879, column: 24, scope: !3133)
!3139 = !DILocation(line: 880, column: 48, scope: !3133)
!3140 = !DILocation(line: 880, column: 58, scope: !3133)
!3141 = !DILocation(line: 880, column: 66, scope: !3133)
!3142 = !DILocation(line: 880, column: 69, scope: !3133)
!3143 = !DILocation(line: 880, column: 7, scope: !3133)
!3144 = !DILocation(line: 881, column: 11, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3133, file: !3, line: 881, column: 11)
!3146 = !DILocation(line: 881, column: 11, scope: !3133)
!3147 = !DILocation(line: 882, column: 43, scope: !3145)
!3148 = !DILocation(line: 882, column: 54, scope: !3145)
!3149 = !DILocation(line: 882, column: 64, scope: !3145)
!3150 = !DILocation(line: 882, column: 2, scope: !3145)
!3151 = !DILocation(line: 883, column: 5, scope: !3133)
!3152 = !DILocalVariable(name: "new_exit_e", scope: !3153, file: !3, line: 886, type: !1137)
!3153 = distinct !DILexicalBlock(scope: !3130, file: !3, line: 885, column: 5)
!3154 = !DILocation(line: 886, column: 12, scope: !3153)
!3155 = !DILocalVariable(name: "entry_e", scope: !3153, file: !3, line: 887, type: !1137)
!3156 = !DILocation(line: 887, column: 12, scope: !3153)
!3157 = !DILocation(line: 887, column: 43, scope: !3153)
!3158 = !DILocation(line: 887, column: 22, scope: !3153)
!3159 = !DILocalVariable(name: "preheader", scope: !3153, file: !3, line: 888, type: !1609)
!3160 = !DILocation(line: 888, column: 19, scope: !3153)
!3161 = !DILocation(line: 888, column: 31, scope: !3153)
!3162 = !DILocation(line: 888, column: 40, scope: !3153)
!3163 = !DILocation(line: 890, column: 35, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 890, column: 11)
!3165 = !DILocation(line: 891, column: 7, scope: !3164)
!3166 = !DILocation(line: 891, column: 40, scope: !3164)
!3167 = !DILocation(line: 890, column: 12, scope: !3164)
!3168 = !DILocation(line: 890, column: 11, scope: !3153)
!3169 = !DILocation(line: 892, column: 22, scope: !3164)
!3170 = !DILocation(line: 892, column: 20, scope: !3164)
!3171 = !DILocation(line: 892, column: 9, scope: !3164)
!3172 = !DILocation(line: 894, column: 15, scope: !3164)
!3173 = !DILocation(line: 894, column: 13, scope: !3164)
!3174 = !DILocation(line: 896, column: 39, scope: !3153)
!3175 = !DILocation(line: 896, column: 51, scope: !3153)
!3176 = !DILocation(line: 896, column: 57, scope: !3153)
!3177 = !DILocation(line: 896, column: 7, scope: !3153)
!3178 = !DILocation(line: 897, column: 7, scope: !3153)
!3179 = !DILocation(line: 897, column: 33, scope: !3153)
!3180 = !DILocation(line: 898, column: 48, scope: !3153)
!3181 = !DILocation(line: 898, column: 54, scope: !3153)
!3182 = !DILocation(line: 899, column: 11, scope: !3153)
!3183 = !DILocation(line: 899, column: 23, scope: !3153)
!3184 = !DILocation(line: 898, column: 7, scope: !3153)
!3185 = !DILocation(line: 903, column: 34, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3153, file: !3, line: 903, column: 7)
!3187 = !DILocation(line: 903, column: 40, scope: !3186)
!3188 = !DILocation(line: 903, column: 18, scope: !3186)
!3189 = !DILocation(line: 903, column: 12, scope: !3186)
!3190 = !DILocation(line: 904, column: 13, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3186, file: !3, line: 903, column: 7)
!3192 = !DILocation(line: 904, column: 12, scope: !3191)
!3193 = !DILocation(line: 903, column: 7, scope: !3186)
!3194 = !DILocation(line: 907, column: 10, scope: !3195)
!3195 = distinct !DILexicalBlock(scope: !3191, file: !3, line: 906, column: 2)
!3196 = !DILocation(line: 907, column: 8, scope: !3195)
!3197 = !DILocation(line: 908, column: 14, scope: !3195)
!3198 = !DILocation(line: 908, column: 12, scope: !3195)
!3199 = !DILocation(line: 909, column: 8, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 909, column: 8)
!3201 = !DILocation(line: 909, column: 8, scope: !3195)
!3202 = !DILocation(line: 910, column: 19, scope: !3200)
!3203 = !DILocation(line: 910, column: 24, scope: !3200)
!3204 = !DILocation(line: 910, column: 33, scope: !3200)
!3205 = !DILocation(line: 911, column: 40, scope: !3200)
!3206 = !DILocation(line: 911, column: 45, scope: !3200)
!3207 = !DILocation(line: 911, column: 5, scope: !3200)
!3208 = !DILocation(line: 910, column: 6, scope: !3200)
!3209 = !DILocation(line: 912, column: 2, scope: !3195)
!3210 = !DILocation(line: 905, column: 12, scope: !3191)
!3211 = !DILocation(line: 903, column: 7, scope: !3191)
!3212 = distinct !{!3212, !3193, !3213}
!3213 = !DILocation(line: 912, column: 2, scope: !3186)
!3214 = !DILocation(line: 914, column: 39, scope: !3153)
!3215 = !DILocation(line: 914, column: 48, scope: !3153)
!3216 = !DILocation(line: 914, column: 58, scope: !3153)
!3217 = !DILocation(line: 914, column: 7, scope: !3153)
!3218 = !DILocation(line: 915, column: 7, scope: !3153)
!3219 = !DILocation(line: 915, column: 30, scope: !3153)
!3220 = !DILocation(line: 916, column: 48, scope: !3153)
!3221 = !DILocation(line: 916, column: 58, scope: !3153)
!3222 = !DILocation(line: 916, column: 66, scope: !3153)
!3223 = !DILocation(line: 916, column: 7, scope: !3153)
!3224 = !DILocation(line: 919, column: 9, scope: !2988)
!3225 = !DILocation(line: 919, column: 3, scope: !2988)
!3226 = !DILocation(line: 920, column: 9, scope: !2988)
!3227 = !DILocation(line: 920, column: 3, scope: !2988)
!3228 = !DILocation(line: 922, column: 10, scope: !2988)
!3229 = !DILocation(line: 922, column: 3, scope: !2988)
!3230 = !DILocation(line: 923, column: 1, scope: !2988)
!3231 = distinct !DISubprogram(name: "loop_outer", scope: !146, file: !146, line: 434, type: !3232, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3232 = !DISubroutineType(types: !3233)
!3233 = !{!1372, !3234}
!3234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3235, size: 64)
!3235 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1373)
!3236 = !DILocalVariable(name: "loop", arg: 1, scope: !3231, file: !146, line: 434, type: !3234)
!3237 = !DILocation(line: 434, column: 32, scope: !3231)
!3238 = !DILocalVariable(name: "n", scope: !3231, file: !146, line: 436, type: !7)
!3239 = !DILocation(line: 436, column: 12, scope: !3231)
!3240 = !DILocation(line: 436, column: 16, scope: !3231)
!3241 = !DILocation(line: 438, column: 7, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3231, file: !146, line: 438, column: 7)
!3243 = !DILocation(line: 438, column: 9, scope: !3242)
!3244 = !DILocation(line: 438, column: 7, scope: !3231)
!3245 = !DILocation(line: 439, column: 5, scope: !3242)
!3246 = !DILocation(line: 441, column: 10, scope: !3231)
!3247 = !DILocation(line: 441, column: 3, scope: !3231)
!3248 = !DILocation(line: 442, column: 1, scope: !3231)
!3249 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2640, file: !2640, line: 427, type: !3250, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3250 = !DISubroutineType(types: !3251)
!3251 = !{!826, !2186}
!3252 = !DILocalVariable(name: "use", arg: 1, scope: !3249, file: !2640, line: 427, type: !2186)
!3253 = !DILocation(line: 427, column: 33, scope: !3249)
!3254 = !DILocation(line: 429, column: 12, scope: !3249)
!3255 = !DILocation(line: 429, column: 17, scope: !3249)
!3256 = !DILocation(line: 429, column: 10, scope: !3249)
!3257 = !DILocation(line: 429, column: 3, scope: !3249)
!3258 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !2640, file: !2640, line: 483, type: !3259, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3259 = !DISubroutineType(types: !3260)
!3260 = !{!956, !1157, !1137}
!3261 = !DILocalVariable(name: "gs", arg: 1, scope: !3258, file: !2640, line: 483, type: !1157)
!3262 = !DILocation(line: 483, column: 43, scope: !3258)
!3263 = !DILocalVariable(name: "e", arg: 2, scope: !3258, file: !2640, line: 483, type: !1137)
!3264 = !DILocation(line: 483, column: 52, scope: !3258)
!3265 = !DILocation(line: 485, column: 26, scope: !3258)
!3266 = !DILocation(line: 485, column: 30, scope: !3258)
!3267 = !DILocation(line: 485, column: 33, scope: !3258)
!3268 = !DILocation(line: 485, column: 10, scope: !3258)
!3269 = !DILocation(line: 485, column: 44, scope: !3258)
!3270 = !DILocation(line: 485, column: 3, scope: !3258)
!3271 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !135, file: !135, line: 150, type: !3272, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3272 = !DISubroutineType(types: !3273)
!3273 = !{!1137, !3274, !7}
!3274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3275, size: 64)
!3275 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1130)
!3276 = !DILocalVariable(name: "vec_", arg: 1, scope: !3271, file: !135, line: 150, type: !3274)
!3277 = !DILocation(line: 150, column: 1, scope: !3271)
!3278 = !DILocalVariable(name: "ix_", arg: 2, scope: !3271, file: !135, line: 150, type: !7)
!3279 = !DILocation(line: 0, scope: !3271)
!3280 = distinct !DISubprogram(name: "slpeel_can_duplicate_loop_p", scope: !3, file: !3, line: 974, type: !3281, scopeLine: 975, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3281 = !DISubroutineType(types: !3282)
!3282 = !{!946, !3234, !3283}
!3283 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !827, line: 109, baseType: !3284)
!3284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3285, size: 64)
!3285 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1139)
!3286 = !DILocalVariable(name: "loop", arg: 1, scope: !3280, file: !3, line: 974, type: !3234)
!3287 = !DILocation(line: 974, column: 49, scope: !3280)
!3288 = !DILocalVariable(name: "e", arg: 2, scope: !3280, file: !3, line: 974, type: !3283)
!3289 = !DILocation(line: 974, column: 66, scope: !3280)
!3290 = !DILocalVariable(name: "exit_e", scope: !3280, file: !3, line: 976, type: !1137)
!3291 = !DILocation(line: 976, column: 8, scope: !3280)
!3292 = !DILocation(line: 976, column: 30, scope: !3280)
!3293 = !DILocation(line: 976, column: 17, scope: !3280)
!3294 = !DILocalVariable(name: "entry_e", scope: !3280, file: !3, line: 977, type: !1137)
!3295 = !DILocation(line: 977, column: 8, scope: !3280)
!3296 = !DILocation(line: 977, column: 39, scope: !3280)
!3297 = !DILocation(line: 977, column: 18, scope: !3280)
!3298 = !DILocalVariable(name: "orig_cond", scope: !3280, file: !3, line: 978, type: !1157)
!3299 = !DILocation(line: 978, column: 10, scope: !3280)
!3300 = !DILocation(line: 978, column: 47, scope: !3280)
!3301 = !DILocation(line: 978, column: 22, scope: !3280)
!3302 = !DILocalVariable(name: "loop_exit_gsi", scope: !3280, file: !3, line: 979, type: !2505)
!3303 = !DILocation(line: 979, column: 24, scope: !3280)
!3304 = !DILocation(line: 979, column: 53, scope: !3280)
!3305 = !DILocation(line: 979, column: 61, scope: !3280)
!3306 = !DILocation(line: 979, column: 40, scope: !3280)
!3307 = !DILocation(line: 981, column: 26, scope: !3308)
!3308 = distinct !DILexicalBlock(scope: !3280, file: !3, line: 981, column: 7)
!3309 = !DILocation(line: 981, column: 7, scope: !3308)
!3310 = !DILocation(line: 981, column: 7, scope: !3280)
!3311 = !DILocation(line: 982, column: 5, scope: !3308)
!3312 = !DILocation(line: 984, column: 7, scope: !3313)
!3313 = distinct !DILexicalBlock(scope: !3280, file: !3, line: 984, column: 7)
!3314 = !DILocation(line: 984, column: 13, scope: !3313)
!3315 = !DILocation(line: 987, column: 7, scope: !3313)
!3316 = !DILocation(line: 987, column: 23, scope: !3313)
!3317 = !DILocation(line: 987, column: 11, scope: !3313)
!3318 = !DILocation(line: 988, column: 7, scope: !3313)
!3319 = !DILocation(line: 988, column: 10, scope: !3313)
!3320 = !DILocation(line: 988, column: 16, scope: !3313)
!3321 = !DILocation(line: 988, column: 26, scope: !3313)
!3322 = !DILocation(line: 989, column: 7, scope: !3313)
!3323 = !DILocation(line: 989, column: 26, scope: !3313)
!3324 = !DILocation(line: 989, column: 32, scope: !3313)
!3325 = !DILocation(line: 989, column: 11, scope: !3313)
!3326 = !DILocation(line: 990, column: 7, scope: !3313)
!3327 = !DILocation(line: 990, column: 24, scope: !3313)
!3328 = !DILocation(line: 990, column: 11, scope: !3313)
!3329 = !DILocation(line: 992, column: 7, scope: !3313)
!3330 = !DILocation(line: 992, column: 12, scope: !3313)
!3331 = !DILocation(line: 992, column: 22, scope: !3313)
!3332 = !DILocation(line: 992, column: 25, scope: !3313)
!3333 = !DILocation(line: 992, column: 38, scope: !3313)
!3334 = !DILocation(line: 992, column: 35, scope: !3313)
!3335 = !DILocation(line: 993, column: 7, scope: !3313)
!3336 = !DILocation(line: 993, column: 11, scope: !3313)
!3337 = !DILocation(line: 993, column: 16, scope: !3313)
!3338 = !DILocation(line: 993, column: 13, scope: !3313)
!3339 = !DILocation(line: 993, column: 23, scope: !3313)
!3340 = !DILocation(line: 993, column: 26, scope: !3313)
!3341 = !DILocation(line: 993, column: 31, scope: !3313)
!3342 = !DILocation(line: 993, column: 28, scope: !3313)
!3343 = !DILocation(line: 984, column: 7, scope: !3280)
!3344 = !DILocation(line: 994, column: 5, scope: !3313)
!3345 = !DILocation(line: 996, column: 3, scope: !3280)
!3346 = !DILocation(line: 997, column: 1, scope: !3280)
!3347 = distinct !DISubprogram(name: "gsi_last_bb", scope: !398, file: !398, line: 4450, type: !2600, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3348 = !DILocalVariable(name: "bb", arg: 1, scope: !3347, file: !398, line: 4450, type: !1609)
!3349 = !DILocation(line: 4450, column: 26, scope: !3347)
!3350 = !DILocalVariable(name: "i", scope: !3347, file: !398, line: 4452, type: !2505)
!3351 = !DILocation(line: 4452, column: 24, scope: !3347)
!3352 = !DILocalVariable(name: "seq", scope: !3347, file: !398, line: 4453, type: !1147)
!3353 = !DILocation(line: 4453, column: 14, scope: !3347)
!3354 = !DILocation(line: 4455, column: 17, scope: !3347)
!3355 = !DILocation(line: 4455, column: 9, scope: !3347)
!3356 = !DILocation(line: 4455, column: 7, scope: !3347)
!3357 = !DILocation(line: 4456, column: 28, scope: !3347)
!3358 = !DILocation(line: 4456, column: 11, scope: !3347)
!3359 = !DILocation(line: 4456, column: 5, scope: !3347)
!3360 = !DILocation(line: 4456, column: 9, scope: !3347)
!3361 = !DILocation(line: 4457, column: 11, scope: !3347)
!3362 = !DILocation(line: 4457, column: 5, scope: !3347)
!3363 = !DILocation(line: 4457, column: 9, scope: !3347)
!3364 = !DILocation(line: 4458, column: 10, scope: !3347)
!3365 = !DILocation(line: 4458, column: 5, scope: !3347)
!3366 = !DILocation(line: 4458, column: 8, scope: !3347)
!3367 = !DILocation(line: 4460, column: 3, scope: !3347)
!3368 = distinct !DISubprogram(name: "gimple_location", scope: !398, file: !398, line: 1139, type: !3369, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3369 = !DISubroutineType(types: !3370)
!3370 = !{!954, !3371}
!3371 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !827, line: 60, baseType: !3372)
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3373, size: 64)
!3373 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1159)
!3374 = !DILocalVariable(name: "g", arg: 1, scope: !3368, file: !398, line: 1139, type: !3371)
!3375 = !DILocation(line: 1139, column: 31, scope: !3368)
!3376 = !DILocation(line: 1141, column: 10, scope: !3368)
!3377 = !DILocation(line: 1141, column: 13, scope: !3368)
!3378 = !DILocation(line: 1141, column: 20, scope: !3368)
!3379 = !DILocation(line: 1141, column: 3, scope: !3368)
!3380 = distinct !DISubprogram(name: "vect_can_advance_ivs_p", scope: !3, file: !3, line: 1595, type: !3381, scopeLine: 1596, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3381 = !DISubroutineType(types: !3382)
!3382 = !{!946, !2196}
!3383 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !3380, file: !3, line: 1595, type: !2196)
!3384 = !DILocation(line: 1595, column: 39, scope: !3380)
!3385 = !DILocalVariable(name: "loop", scope: !3380, file: !3, line: 1597, type: !1372)
!3386 = !DILocation(line: 1597, column: 16, scope: !3380)
!3387 = !DILocation(line: 1597, column: 23, scope: !3380)
!3388 = !DILocalVariable(name: "bb", scope: !3380, file: !3, line: 1598, type: !1609)
!3389 = !DILocation(line: 1598, column: 15, scope: !3380)
!3390 = !DILocation(line: 1598, column: 20, scope: !3380)
!3391 = !DILocation(line: 1598, column: 26, scope: !3380)
!3392 = !DILocalVariable(name: "phi", scope: !3380, file: !3, line: 1599, type: !1157)
!3393 = !DILocation(line: 1599, column: 10, scope: !3380)
!3394 = !DILocalVariable(name: "gsi", scope: !3380, file: !3, line: 1600, type: !2505)
!3395 = !DILocation(line: 1600, column: 24, scope: !3380)
!3396 = !DILocation(line: 1604, column: 7, scope: !3397)
!3397 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1604, column: 7)
!3398 = !DILocation(line: 1604, column: 7, scope: !3380)
!3399 = !DILocation(line: 1605, column: 14, scope: !3397)
!3400 = !DILocation(line: 1605, column: 5, scope: !3397)
!3401 = !DILocation(line: 1607, column: 30, scope: !3402)
!3402 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1607, column: 3)
!3403 = !DILocation(line: 1607, column: 14, scope: !3402)
!3404 = !DILocation(line: 1607, column: 8, scope: !3402)
!3405 = !DILocation(line: 1607, column: 36, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3402, file: !3, line: 1607, column: 3)
!3407 = !DILocation(line: 1607, column: 35, scope: !3406)
!3408 = !DILocation(line: 1607, column: 3, scope: !3402)
!3409 = !DILocalVariable(name: "access_fn", scope: !3410, file: !3, line: 1609, type: !826)
!3410 = distinct !DILexicalBlock(scope: !3406, file: !3, line: 1608, column: 5)
!3411 = !DILocation(line: 1609, column: 12, scope: !3410)
!3412 = !DILocalVariable(name: "evolution_part", scope: !3410, file: !3, line: 1610, type: !826)
!3413 = !DILocation(line: 1610, column: 12, scope: !3410)
!3414 = !DILocation(line: 1612, column: 13, scope: !3410)
!3415 = !DILocation(line: 1612, column: 11, scope: !3410)
!3416 = !DILocation(line: 1613, column: 11, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1613, column: 11)
!3418 = !DILocation(line: 1613, column: 11, scope: !3410)
!3419 = !DILocation(line: 1615, column: 20, scope: !3420)
!3420 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 1614, column: 2)
!3421 = !DILocation(line: 1615, column: 11, scope: !3420)
!3422 = !DILocation(line: 1616, column: 30, scope: !3420)
!3423 = !DILocation(line: 1616, column: 41, scope: !3420)
!3424 = !DILocation(line: 1616, column: 11, scope: !3420)
!3425 = !DILocation(line: 1617, column: 2, scope: !3420)
!3426 = !DILocation(line: 1622, column: 27, scope: !3427)
!3427 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1622, column: 11)
!3428 = !DILocation(line: 1622, column: 12, scope: !3427)
!3429 = !DILocation(line: 1622, column: 11, scope: !3410)
!3430 = !DILocation(line: 1624, column: 8, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3432, file: !3, line: 1624, column: 8)
!3432 = distinct !DILexicalBlock(scope: !3427, file: !3, line: 1623, column: 2)
!3433 = !DILocation(line: 1624, column: 8, scope: !3432)
!3434 = !DILocation(line: 1625, column: 15, scope: !3431)
!3435 = !DILocation(line: 1625, column: 6, scope: !3431)
!3436 = !DILocation(line: 1626, column: 4, scope: !3432)
!3437 = !DILocation(line: 1631, column: 11, scope: !3438)
!3438 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1631, column: 11)
!3439 = !DILocation(line: 1631, column: 54, scope: !3438)
!3440 = !DILocation(line: 1631, column: 11, scope: !3410)
!3441 = !DILocation(line: 1633, column: 15, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3443, file: !3, line: 1633, column: 15)
!3443 = distinct !DILexicalBlock(scope: !3438, file: !3, line: 1632, column: 9)
!3444 = !DILocation(line: 1633, column: 15, scope: !3443)
!3445 = !DILocation(line: 1634, column: 22, scope: !3442)
!3446 = !DILocation(line: 1634, column: 13, scope: !3442)
!3447 = !DILocation(line: 1635, column: 11, scope: !3443)
!3448 = !DILocation(line: 1641, column: 3, scope: !3410)
!3449 = !DILocation(line: 1641, column: 35, scope: !3410)
!3450 = !DILocation(line: 1641, column: 41, scope: !3410)
!3451 = !DILocation(line: 1641, column: 9, scope: !3410)
!3452 = !DILocation(line: 1640, column: 19, scope: !3410)
!3453 = !DILocation(line: 1640, column: 17, scope: !3410)
!3454 = !DILocation(line: 1643, column: 12, scope: !3455)
!3455 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1643, column: 11)
!3456 = !DILocation(line: 1643, column: 11, scope: !3410)
!3457 = !DILocation(line: 1645, column: 8, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3459, file: !3, line: 1645, column: 8)
!3459 = distinct !DILexicalBlock(scope: !3455, file: !3, line: 1644, column: 2)
!3460 = !DILocation(line: 1645, column: 8, scope: !3459)
!3461 = !DILocation(line: 1646, column: 15, scope: !3458)
!3462 = !DILocation(line: 1646, column: 6, scope: !3458)
!3463 = !DILocation(line: 1647, column: 4, scope: !3459)
!3464 = !DILocation(line: 1650, column: 11, scope: !3465)
!3465 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1650, column: 11)
!3466 = !DILocation(line: 1650, column: 11, scope: !3410)
!3467 = !DILocation(line: 1652, column: 13, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3465, file: !3, line: 1651, column: 9)
!3469 = !DILocation(line: 1652, column: 4, scope: !3468)
!3470 = !DILocation(line: 1653, column: 24, scope: !3468)
!3471 = !DILocation(line: 1653, column: 35, scope: !3468)
!3472 = !DILocation(line: 1653, column: 4, scope: !3468)
!3473 = !DILocation(line: 1654, column: 9, scope: !3468)
!3474 = !DILocation(line: 1656, column: 52, scope: !3410)
!3475 = !DILocation(line: 1656, column: 63, scope: !3410)
!3476 = !DILocation(line: 1656, column: 69, scope: !3410)
!3477 = !DILocation(line: 1656, column: 24, scope: !3410)
!3478 = !DILocation(line: 1656, column: 22, scope: !3410)
!3479 = !DILocation(line: 1658, column: 11, scope: !3480)
!3480 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1658, column: 11)
!3481 = !DILocation(line: 1658, column: 26, scope: !3480)
!3482 = !DILocation(line: 1658, column: 11, scope: !3410)
!3483 = !DILocation(line: 1660, column: 8, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !3485, file: !3, line: 1660, column: 8)
!3485 = distinct !DILexicalBlock(scope: !3480, file: !3, line: 1659, column: 9)
!3486 = !DILocation(line: 1660, column: 8, scope: !3485)
!3487 = !DILocation(line: 1661, column: 15, scope: !3484)
!3488 = !DILocation(line: 1661, column: 6, scope: !3484)
!3489 = !DILocation(line: 1662, column: 4, scope: !3485)
!3490 = !DILocation(line: 1668, column: 26, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3410, file: !3, line: 1668, column: 11)
!3492 = !DILocation(line: 1668, column: 11, scope: !3491)
!3493 = !DILocation(line: 1668, column: 11, scope: !3410)
!3494 = !DILocation(line: 1669, column: 2, scope: !3491)
!3495 = !DILocation(line: 1670, column: 5, scope: !3410)
!3496 = !DILocation(line: 1607, column: 53, scope: !3406)
!3497 = !DILocation(line: 1607, column: 3, scope: !3406)
!3498 = distinct !{!3498, !3408, !3499}
!3499 = !DILocation(line: 1670, column: 5, scope: !3402)
!3500 = !DILocation(line: 1672, column: 3, scope: !3380)
!3501 = !DILocation(line: 1673, column: 1, scope: !3380)
!3502 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2640, file: !2640, line: 434, type: !3503, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3503 = !DISubroutineType(types: !3504)
!3504 = !{!826, !3505}
!3505 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !391, line: 27, baseType: !1191)
!3506 = !DILocalVariable(name: "def", arg: 1, scope: !3502, file: !2640, line: 434, type: !3505)
!3507 = !DILocation(line: 434, column: 33, scope: !3502)
!3508 = !DILocation(line: 436, column: 11, scope: !3502)
!3509 = !DILocation(line: 436, column: 10, scope: !3502)
!3510 = !DILocation(line: 436, column: 3, scope: !3502)
!3511 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !398, file: !398, line: 3080, type: !3512, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3512 = !DISubroutineType(types: !3513)
!3513 = !{!1191, !1157}
!3514 = !DILocalVariable(name: "gs", arg: 1, scope: !3511, file: !398, line: 3080, type: !1157)
!3515 = !DILocation(line: 3080, column: 31, scope: !3511)
!3516 = !DILocation(line: 3083, column: 11, scope: !3511)
!3517 = !DILocation(line: 3083, column: 15, scope: !3511)
!3518 = !DILocation(line: 3083, column: 26, scope: !3511)
!3519 = !DILocation(line: 3083, column: 3, scope: !3511)
!3520 = distinct !DISubprogram(name: "vinfo_for_stmt", scope: !408, file: !408, line: 623, type: !3521, scopeLine: 624, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3521 = !DISubroutineType(types: !3522)
!3522 = !{!2189, !1157}
!3523 = !DILocalVariable(name: "stmt", arg: 1, scope: !3520, file: !408, line: 623, type: !1157)
!3524 = !DILocation(line: 623, column: 24, scope: !3520)
!3525 = !DILocalVariable(name: "uid", scope: !3520, file: !408, line: 625, type: !7)
!3526 = !DILocation(line: 625, column: 16, scope: !3520)
!3527 = !DILocation(line: 625, column: 34, scope: !3520)
!3528 = !DILocation(line: 625, column: 22, scope: !3520)
!3529 = !DILocation(line: 626, column: 7, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3520, file: !408, line: 626, column: 7)
!3531 = !DILocation(line: 626, column: 11, scope: !3530)
!3532 = !DILocation(line: 626, column: 7, scope: !3520)
!3533 = !DILocation(line: 627, column: 5, scope: !3530)
!3534 = !DILocation(line: 629, column: 3, scope: !3520)
!3535 = !DILocation(line: 630, column: 26, scope: !3520)
!3536 = !DILocation(line: 630, column: 10, scope: !3520)
!3537 = !DILocation(line: 630, column: 3, scope: !3520)
!3538 = !DILocation(line: 631, column: 1, scope: !3520)
!3539 = distinct !DISubprogram(name: "instantiate_parameters", scope: !3540, file: !3540, line: 57, type: !3541, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3540 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3541 = !DISubroutineType(types: !3542)
!3542 = !{!826, !1372, !826}
!3543 = !DILocalVariable(name: "loop", arg: 1, scope: !3539, file: !3540, line: 57, type: !1372)
!3544 = !DILocation(line: 57, column: 38, scope: !3539)
!3545 = !DILocalVariable(name: "chrec", arg: 2, scope: !3539, file: !3540, line: 57, type: !826)
!3546 = !DILocation(line: 57, column: 49, scope: !3539)
!3547 = !DILocation(line: 59, column: 47, scope: !3539)
!3548 = !DILocation(line: 59, column: 28, scope: !3539)
!3549 = !DILocation(line: 59, column: 54, scope: !3539)
!3550 = !DILocation(line: 59, column: 60, scope: !3539)
!3551 = !DILocation(line: 59, column: 10, scope: !3539)
!3552 = !DILocation(line: 59, column: 3, scope: !3539)
!3553 = distinct !DISubprogram(name: "tree_is_chrec", scope: !3554, file: !3554, line: 46, type: !3555, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3554 = !DIFile(filename: "./tree-chrec.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3555 = !DISubroutineType(types: !3556)
!3556 = !{!946, !3557}
!3557 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !827, line: 59, baseType: !2490)
!3558 = !DILocalVariable(name: "expr", arg: 1, scope: !3553, file: !3554, line: 46, type: !3557)
!3559 = !DILocation(line: 46, column: 27, scope: !3553)
!3560 = !DILocation(line: 48, column: 7, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3553, file: !3554, line: 48, column: 7)
!3562 = !DILocation(line: 48, column: 24, scope: !3561)
!3563 = !DILocation(line: 49, column: 7, scope: !3561)
!3564 = !DILocation(line: 49, column: 43, scope: !3561)
!3565 = !DILocation(line: 49, column: 10, scope: !3561)
!3566 = !DILocation(line: 48, column: 7, scope: !3553)
!3567 = !DILocation(line: 50, column: 5, scope: !3561)
!3568 = !DILocation(line: 52, column: 5, scope: !3561)
!3569 = !DILocation(line: 53, column: 1, scope: !3553)
!3570 = distinct !DISubprogram(name: "vect_do_peeling_for_loop_bound", scope: !3, file: !3, line: 1855, type: !3571, scopeLine: 1857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3571 = !DISubroutineType(types: !3572)
!3572 = !{null, !2196, !1191, !826, !1147}
!3573 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !3570, file: !3, line: 1855, type: !2196)
!3574 = !DILocation(line: 1855, column: 47, scope: !3570)
!3575 = !DILocalVariable(name: "ratio", arg: 2, scope: !3570, file: !3, line: 1855, type: !1191)
!3576 = !DILocation(line: 1855, column: 65, scope: !3570)
!3577 = !DILocalVariable(name: "cond_expr", arg: 3, scope: !3570, file: !3, line: 1856, type: !826)
!3578 = !DILocation(line: 1856, column: 10, scope: !3570)
!3579 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 4, scope: !3570, file: !3, line: 1856, type: !1147)
!3580 = !DILocation(line: 1856, column: 32, scope: !3570)
!3581 = !DILocalVariable(name: "ni_name", scope: !3570, file: !3, line: 1858, type: !826)
!3582 = !DILocation(line: 1858, column: 8, scope: !3570)
!3583 = !DILocalVariable(name: "ratio_mult_vf_name", scope: !3570, file: !3, line: 1858, type: !826)
!3584 = !DILocation(line: 1858, column: 17, scope: !3570)
!3585 = !DILocalVariable(name: "loop", scope: !3570, file: !3, line: 1859, type: !1372)
!3586 = !DILocation(line: 1859, column: 16, scope: !3570)
!3587 = !DILocation(line: 1859, column: 23, scope: !3570)
!3588 = !DILocalVariable(name: "new_loop", scope: !3570, file: !3, line: 1860, type: !1372)
!3589 = !DILocation(line: 1860, column: 16, scope: !3570)
!3590 = !DILocalVariable(name: "update_e", scope: !3570, file: !3, line: 1861, type: !1137)
!3591 = !DILocation(line: 1861, column: 8, scope: !3570)
!3592 = !DILocalVariable(name: "preheader", scope: !3570, file: !3, line: 1862, type: !1609)
!3593 = !DILocation(line: 1862, column: 15, scope: !3570)
!3594 = !DILocalVariable(name: "loop_num", scope: !3570, file: !3, line: 1863, type: !923)
!3595 = !DILocation(line: 1863, column: 7, scope: !3570)
!3596 = !DILocalVariable(name: "check_profitability", scope: !3570, file: !3, line: 1864, type: !946)
!3597 = !DILocation(line: 1864, column: 8, scope: !3570)
!3598 = !DILocalVariable(name: "th", scope: !3570, file: !3, line: 1865, type: !7)
!3599 = !DILocation(line: 1865, column: 16, scope: !3570)
!3600 = !DILocalVariable(name: "min_profitable_iters", scope: !3570, file: !3, line: 1866, type: !923)
!3601 = !DILocation(line: 1866, column: 7, scope: !3570)
!3602 = !DILocation(line: 1868, column: 7, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 1868, column: 7)
!3604 = !DILocation(line: 1868, column: 7, scope: !3570)
!3605 = !DILocation(line: 1869, column: 14, scope: !3603)
!3606 = !DILocation(line: 1869, column: 5, scope: !3603)
!3607 = !DILocation(line: 1871, column: 3, scope: !3570)
!3608 = !DILocation(line: 1878, column: 36, scope: !3570)
!3609 = !DILocation(line: 1879, column: 29, scope: !3570)
!3610 = !DILocation(line: 1880, column: 8, scope: !3570)
!3611 = !DILocation(line: 1878, column: 3, scope: !3570)
!3612 = !DILocation(line: 1882, column: 15, scope: !3570)
!3613 = !DILocation(line: 1882, column: 21, scope: !3570)
!3614 = !DILocation(line: 1882, column: 13, scope: !3570)
!3615 = !DILocation(line: 1886, column: 8, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 1886, column: 7)
!3617 = !DILocation(line: 1887, column: 7, scope: !3616)
!3618 = !DILocation(line: 1887, column: 11, scope: !3616)
!3619 = !DILocation(line: 1888, column: 7, scope: !3616)
!3620 = !DILocation(line: 1888, column: 11, scope: !3616)
!3621 = !DILocation(line: 1889, column: 7, scope: !3616)
!3622 = !DILocation(line: 1889, column: 11, scope: !3616)
!3623 = !DILocation(line: 1886, column: 7, scope: !3570)
!3624 = !DILocation(line: 1891, column: 27, scope: !3625)
!3625 = distinct !DILexicalBlock(scope: !3616, file: !3, line: 1890, column: 5)
!3626 = !DILocation(line: 1894, column: 30, scope: !3625)
!3627 = !DILocation(line: 1894, column: 28, scope: !3625)
!3628 = !DILocation(line: 1896, column: 41, scope: !3625)
!3629 = !DILocation(line: 1897, column: 6, scope: !3625)
!3630 = !DILocation(line: 1896, column: 12, scope: !3625)
!3631 = !DILocation(line: 1896, column: 10, scope: !3625)
!3632 = !DILocation(line: 1898, column: 5, scope: !3625)
!3633 = !DILocation(line: 1900, column: 45, scope: !3570)
!3634 = !DILocation(line: 1900, column: 64, scope: !3570)
!3635 = !DILocation(line: 1900, column: 51, scope: !3570)
!3636 = !DILocation(line: 1901, column: 45, scope: !3570)
!3637 = !DILocation(line: 1901, column: 65, scope: !3570)
!3638 = !DILocation(line: 1902, column: 45, scope: !3570)
!3639 = !DILocation(line: 1902, column: 49, scope: !3570)
!3640 = !DILocation(line: 1903, column: 10, scope: !3570)
!3641 = !DILocation(line: 1903, column: 21, scope: !3570)
!3642 = !DILocation(line: 1900, column: 14, scope: !3570)
!3643 = !DILocation(line: 1900, column: 12, scope: !3570)
!3644 = !DILocation(line: 1904, column: 3, scope: !3570)
!3645 = !DILocation(line: 1905, column: 3, scope: !3570)
!3646 = !DILocation(line: 1916, column: 36, scope: !3570)
!3647 = !DILocation(line: 1916, column: 15, scope: !3570)
!3648 = !DILocation(line: 1916, column: 47, scope: !3570)
!3649 = !DILocation(line: 1916, column: 13, scope: !3570)
!3650 = !DILocation(line: 1917, column: 7, scope: !3651)
!3651 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 1917, column: 7)
!3652 = !DILocation(line: 1917, column: 33, scope: !3651)
!3653 = !DILocation(line: 1917, column: 53, scope: !3651)
!3654 = !DILocation(line: 1917, column: 40, scope: !3651)
!3655 = !DILocation(line: 1917, column: 60, scope: !3651)
!3656 = !DILocation(line: 1917, column: 37, scope: !3651)
!3657 = !DILocation(line: 1917, column: 7, scope: !3570)
!3658 = !DILocation(line: 1918, column: 16, scope: !3651)
!3659 = !DILocation(line: 1918, column: 14, scope: !3651)
!3660 = !DILocation(line: 1918, column: 5, scope: !3651)
!3661 = !DILocation(line: 1920, column: 16, scope: !3651)
!3662 = !DILocation(line: 1920, column: 14, scope: !3651)
!3663 = !DILocation(line: 1924, column: 37, scope: !3570)
!3664 = !DILocation(line: 1924, column: 49, scope: !3570)
!3665 = !DILocation(line: 1924, column: 69, scope: !3570)
!3666 = !DILocation(line: 1924, column: 3, scope: !3570)
!3667 = !DILocation(line: 1927, column: 3, scope: !3570)
!3668 = !DILocation(line: 1929, column: 3, scope: !3570)
!3669 = !DILocation(line: 1930, column: 1, scope: !3570)
!3670 = distinct !DISubprogram(name: "vect_generate_tmps_on_preheader", scope: !3, file: !3, line: 1509, type: !3671, scopeLine: 1514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3671 = !DISubroutineType(types: !3672)
!3672 = !{null, !2196, !1191, !1191, !1191, !1147}
!3673 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !3670, file: !3, line: 1509, type: !2196)
!3674 = !DILocation(line: 1509, column: 48, scope: !3670)
!3675 = !DILocalVariable(name: "ni_name_ptr", arg: 2, scope: !3670, file: !3, line: 1510, type: !1191)
!3676 = !DILocation(line: 1510, column: 12, scope: !3670)
!3677 = !DILocalVariable(name: "ratio_mult_vf_name_ptr", arg: 3, scope: !3670, file: !3, line: 1511, type: !1191)
!3678 = !DILocation(line: 1511, column: 12, scope: !3670)
!3679 = !DILocalVariable(name: "ratio_name_ptr", arg: 4, scope: !3670, file: !3, line: 1512, type: !1191)
!3680 = !DILocation(line: 1512, column: 12, scope: !3670)
!3681 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 5, scope: !3670, file: !3, line: 1513, type: !1147)
!3682 = !DILocation(line: 1513, column: 17, scope: !3670)
!3683 = !DILocalVariable(name: "pe", scope: !3670, file: !3, line: 1516, type: !1137)
!3684 = !DILocation(line: 1516, column: 8, scope: !3670)
!3685 = !DILocalVariable(name: "new_bb", scope: !3670, file: !3, line: 1517, type: !1609)
!3686 = !DILocation(line: 1517, column: 15, scope: !3670)
!3687 = !DILocalVariable(name: "stmts", scope: !3670, file: !3, line: 1518, type: !1147)
!3688 = !DILocation(line: 1518, column: 14, scope: !3670)
!3689 = !DILocalVariable(name: "ni_name", scope: !3670, file: !3, line: 1519, type: !826)
!3690 = !DILocation(line: 1519, column: 8, scope: !3670)
!3691 = !DILocalVariable(name: "var", scope: !3670, file: !3, line: 1520, type: !826)
!3692 = !DILocation(line: 1520, column: 8, scope: !3670)
!3693 = !DILocalVariable(name: "ratio_name", scope: !3670, file: !3, line: 1521, type: !826)
!3694 = !DILocation(line: 1521, column: 8, scope: !3670)
!3695 = !DILocalVariable(name: "ratio_mult_vf_name", scope: !3670, file: !3, line: 1522, type: !826)
!3696 = !DILocation(line: 1522, column: 8, scope: !3670)
!3697 = !DILocalVariable(name: "loop", scope: !3670, file: !3, line: 1523, type: !1372)
!3698 = !DILocation(line: 1523, column: 16, scope: !3670)
!3699 = !DILocation(line: 1523, column: 23, scope: !3670)
!3700 = !DILocalVariable(name: "ni", scope: !3670, file: !3, line: 1524, type: !826)
!3701 = !DILocation(line: 1524, column: 8, scope: !3670)
!3702 = !DILocation(line: 1524, column: 13, scope: !3670)
!3703 = !DILocalVariable(name: "vf", scope: !3670, file: !3, line: 1525, type: !923)
!3704 = !DILocation(line: 1525, column: 7, scope: !3670)
!3705 = !DILocation(line: 1525, column: 12, scope: !3670)
!3706 = !DILocalVariable(name: "log_vf", scope: !3670, file: !3, line: 1526, type: !826)
!3707 = !DILocation(line: 1526, column: 8, scope: !3670)
!3708 = !DILocation(line: 1528, column: 29, scope: !3670)
!3709 = !DILocation(line: 1528, column: 8, scope: !3670)
!3710 = !DILocation(line: 1528, column: 6, scope: !3670)
!3711 = !DILocation(line: 1533, column: 37, scope: !3670)
!3712 = !DILocation(line: 1533, column: 49, scope: !3670)
!3713 = !DILocation(line: 1533, column: 13, scope: !3670)
!3714 = !DILocation(line: 1533, column: 11, scope: !3670)
!3715 = !DILocation(line: 1534, column: 27, scope: !3670)
!3716 = !DILocation(line: 1534, column: 55, scope: !3670)
!3717 = !DILocation(line: 1534, column: 43, scope: !3670)
!3718 = !DILocation(line: 1534, column: 12, scope: !3670)
!3719 = !DILocation(line: 1534, column: 10, scope: !3670)
!3720 = !DILocation(line: 1538, column: 16, scope: !3670)
!3721 = !DILocation(line: 1538, column: 14, scope: !3670)
!3722 = !DILocation(line: 1539, column: 23, scope: !3723)
!3723 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 1539, column: 7)
!3724 = !DILocation(line: 1539, column: 8, scope: !3723)
!3725 = !DILocation(line: 1539, column: 7, scope: !3670)
!3726 = !DILocation(line: 1541, column: 29, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3723, file: !3, line: 1540, column: 5)
!3728 = !DILocation(line: 1541, column: 13, scope: !3727)
!3729 = !DILocation(line: 1541, column: 11, scope: !3727)
!3730 = !DILocation(line: 1542, column: 27, scope: !3727)
!3731 = !DILocation(line: 1542, column: 7, scope: !3727)
!3732 = !DILocation(line: 1544, column: 13, scope: !3727)
!3733 = !DILocation(line: 1545, column: 42, scope: !3727)
!3734 = !DILocation(line: 1545, column: 68, scope: !3727)
!3735 = !DILocation(line: 1545, column: 20, scope: !3727)
!3736 = !DILocation(line: 1545, column: 18, scope: !3727)
!3737 = !DILocation(line: 1546, column: 11, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1546, column: 11)
!3739 = !DILocation(line: 1546, column: 11, scope: !3727)
!3740 = !DILocation(line: 1547, column: 44, scope: !3738)
!3741 = !DILocation(line: 1547, column: 2, scope: !3738)
!3742 = !DILocation(line: 1550, column: 30, scope: !3743)
!3743 = distinct !DILexicalBlock(scope: !3738, file: !3, line: 1549, column: 2)
!3744 = !DILocation(line: 1550, column: 9, scope: !3743)
!3745 = !DILocation(line: 1550, column: 7, scope: !3743)
!3746 = !DILocation(line: 1551, column: 47, scope: !3743)
!3747 = !DILocation(line: 1551, column: 51, scope: !3743)
!3748 = !DILocation(line: 1551, column: 13, scope: !3743)
!3749 = !DILocation(line: 1551, column: 11, scope: !3743)
!3750 = !DILocation(line: 1552, column: 4, scope: !3743)
!3751 = !DILocation(line: 1554, column: 5, scope: !3727)
!3752 = !DILocation(line: 1558, column: 24, scope: !3670)
!3753 = !DILocation(line: 1558, column: 22, scope: !3670)
!3754 = !DILocation(line: 1560, column: 23, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 1560, column: 7)
!3756 = !DILocation(line: 1560, column: 8, scope: !3755)
!3757 = !DILocation(line: 1560, column: 7, scope: !3670)
!3758 = !DILocation(line: 1562, column: 29, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 1561, column: 5)
!3760 = !DILocation(line: 1562, column: 13, scope: !3759)
!3761 = !DILocation(line: 1562, column: 11, scope: !3759)
!3762 = !DILocation(line: 1563, column: 27, scope: !3759)
!3763 = !DILocation(line: 1563, column: 7, scope: !3759)
!3764 = !DILocation(line: 1565, column: 13, scope: !3759)
!3765 = !DILocation(line: 1566, column: 50, scope: !3759)
!3766 = !DILocation(line: 1567, column: 14, scope: !3759)
!3767 = !DILocation(line: 1566, column: 28, scope: !3759)
!3768 = !DILocation(line: 1566, column: 26, scope: !3759)
!3769 = !DILocation(line: 1568, column: 11, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3759, file: !3, line: 1568, column: 11)
!3771 = !DILocation(line: 1568, column: 11, scope: !3759)
!3772 = !DILocation(line: 1569, column: 44, scope: !3770)
!3773 = !DILocation(line: 1569, column: 2, scope: !3770)
!3774 = !DILocation(line: 1572, column: 30, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 1571, column: 2)
!3776 = !DILocation(line: 1572, column: 9, scope: !3775)
!3777 = !DILocation(line: 1572, column: 7, scope: !3775)
!3778 = !DILocation(line: 1573, column: 47, scope: !3775)
!3779 = !DILocation(line: 1573, column: 51, scope: !3775)
!3780 = !DILocation(line: 1573, column: 13, scope: !3775)
!3781 = !DILocation(line: 1573, column: 11, scope: !3775)
!3782 = !DILocation(line: 1574, column: 4, scope: !3775)
!3783 = !DILocation(line: 1576, column: 5, scope: !3759)
!3784 = !DILocation(line: 1578, column: 18, scope: !3670)
!3785 = !DILocation(line: 1578, column: 4, scope: !3670)
!3786 = !DILocation(line: 1578, column: 16, scope: !3670)
!3787 = !DILocation(line: 1579, column: 29, scope: !3670)
!3788 = !DILocation(line: 1579, column: 4, scope: !3670)
!3789 = !DILocation(line: 1579, column: 27, scope: !3670)
!3790 = !DILocation(line: 1580, column: 21, scope: !3670)
!3791 = !DILocation(line: 1580, column: 4, scope: !3670)
!3792 = !DILocation(line: 1580, column: 19, scope: !3670)
!3793 = !DILocation(line: 1582, column: 3, scope: !3670)
!3794 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !398, file: !398, line: 33, type: !3795, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3795 = !DISubroutineType(types: !3796)
!3796 = !{!7, !3797}
!3797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3798, size: 64)
!3798 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1696)
!3799 = !DILocalVariable(name: "vec_", arg: 1, scope: !3794, file: !398, line: 33, type: !3797)
!3800 = !DILocation(line: 33, column: 1, scope: !3794)
!3801 = distinct !DISubprogram(name: "VEC_ddr_p_base_length", scope: !2210, file: !2210, line: 332, type: !3802, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3802 = !DISubroutineType(types: !3803)
!3803 = !{!7, !3804}
!3804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3805, size: 64)
!3805 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2289)
!3806 = !DILocalVariable(name: "vec_", arg: 1, scope: !3801, file: !2210, line: 332, type: !3804)
!3807 = !DILocation(line: 332, column: 1, scope: !3801)
!3808 = distinct !DISubprogram(name: "conservative_cost_threshold", scope: !3, file: !3, line: 1818, type: !3809, scopeLine: 1820, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3809 = !DISubroutineType(types: !3810)
!3810 = !{!7, !2196, !923}
!3811 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !3808, file: !3, line: 1818, type: !2196)
!3812 = !DILocation(line: 1818, column: 44, scope: !3808)
!3813 = !DILocalVariable(name: "min_profitable_iters", arg: 2, scope: !3808, file: !3, line: 1819, type: !923)
!3814 = !DILocation(line: 1819, column: 13, scope: !3808)
!3815 = !DILocalVariable(name: "th", scope: !3808, file: !3, line: 1821, type: !7)
!3816 = !DILocation(line: 1821, column: 16, scope: !3808)
!3817 = !DILocalVariable(name: "min_scalar_loop_bound", scope: !3808, file: !3, line: 1822, type: !923)
!3818 = !DILocation(line: 1822, column: 7, scope: !3808)
!3819 = !DILocation(line: 1824, column: 29, scope: !3808)
!3820 = !DILocation(line: 1825, column: 10, scope: !3808)
!3821 = !DILocation(line: 1825, column: 8, scope: !3808)
!3822 = !DILocation(line: 1825, column: 47, scope: !3808)
!3823 = !DILocation(line: 1824, column: 25, scope: !3808)
!3824 = !DILocation(line: 1829, column: 19, scope: !3808)
!3825 = !DILocation(line: 1829, column: 6, scope: !3808)
!3826 = !DILocation(line: 1830, column: 7, scope: !3827)
!3827 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1830, column: 7)
!3828 = !DILocation(line: 1831, column: 7, scope: !3827)
!3829 = !DILocation(line: 1831, column: 12, scope: !3827)
!3830 = !DILocation(line: 1832, column: 11, scope: !3827)
!3831 = !DILocation(line: 1832, column: 14, scope: !3827)
!3832 = !DILocation(line: 1832, column: 37, scope: !3827)
!3833 = !DILocation(line: 1832, column: 35, scope: !3827)
!3834 = !DILocation(line: 1830, column: 7, scope: !3808)
!3835 = !DILocation(line: 1833, column: 21, scope: !3827)
!3836 = !DILocation(line: 1833, column: 8, scope: !3827)
!3837 = !DILocation(line: 1833, column: 5, scope: !3827)
!3838 = !DILocation(line: 1835, column: 7, scope: !3839)
!3839 = distinct !DILexicalBlock(scope: !3808, file: !3, line: 1835, column: 7)
!3840 = !DILocation(line: 1835, column: 10, scope: !3839)
!3841 = !DILocation(line: 1835, column: 13, scope: !3839)
!3842 = !DILocation(line: 1835, column: 7, scope: !3808)
!3843 = !DILocation(line: 1836, column: 14, scope: !3839)
!3844 = !DILocation(line: 1836, column: 75, scope: !3839)
!3845 = !DILocation(line: 1836, column: 5, scope: !3839)
!3846 = !DILocation(line: 1838, column: 10, scope: !3808)
!3847 = !DILocation(line: 1838, column: 3, scope: !3808)
!3848 = distinct !DISubprogram(name: "slpeel_tree_peel_loop_to_edge", scope: !3, file: !3, line: 1161, type: !3849, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!3849 = !DISubroutineType(types: !3850)
!3850 = !{!1372, !1372, !1137, !826, !826, !946, !7, !946, !826, !1147}
!3851 = !DILocalVariable(name: "loop", arg: 1, scope: !3848, file: !3, line: 1161, type: !1372)
!3852 = !DILocation(line: 1161, column: 45, scope: !3848)
!3853 = !DILocalVariable(name: "e", arg: 2, scope: !3848, file: !3, line: 1162, type: !1137)
!3854 = !DILocation(line: 1162, column: 16, scope: !3848)
!3855 = !DILocalVariable(name: "first_niters", arg: 3, scope: !3848, file: !3, line: 1162, type: !826)
!3856 = !DILocation(line: 1162, column: 24, scope: !3848)
!3857 = !DILocalVariable(name: "niters", arg: 4, scope: !3848, file: !3, line: 1163, type: !826)
!3858 = !DILocation(line: 1163, column: 16, scope: !3848)
!3859 = !DILocalVariable(name: "update_first_loop_count", arg: 5, scope: !3848, file: !3, line: 1163, type: !946)
!3860 = !DILocation(line: 1163, column: 29, scope: !3848)
!3861 = !DILocalVariable(name: "th", arg: 6, scope: !3848, file: !3, line: 1164, type: !7)
!3862 = !DILocation(line: 1164, column: 24, scope: !3848)
!3863 = !DILocalVariable(name: "check_profitability", arg: 7, scope: !3848, file: !3, line: 1164, type: !946)
!3864 = !DILocation(line: 1164, column: 33, scope: !3848)
!3865 = !DILocalVariable(name: "cond_expr", arg: 8, scope: !3848, file: !3, line: 1165, type: !826)
!3866 = !DILocation(line: 1165, column: 16, scope: !3848)
!3867 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 9, scope: !3848, file: !3, line: 1165, type: !1147)
!3868 = !DILocation(line: 1165, column: 38, scope: !3848)
!3869 = !DILocalVariable(name: "new_loop", scope: !3848, file: !3, line: 1167, type: !1372)
!3870 = !DILocation(line: 1167, column: 16, scope: !3848)
!3871 = !DILocalVariable(name: "first_loop", scope: !3848, file: !3, line: 1167, type: !1372)
!3872 = !DILocation(line: 1167, column: 34, scope: !3848)
!3873 = !DILocalVariable(name: "second_loop", scope: !3848, file: !3, line: 1167, type: !1372)
!3874 = !DILocation(line: 1167, column: 47, scope: !3848)
!3875 = !DILocalVariable(name: "skip_e", scope: !3848, file: !3, line: 1168, type: !1137)
!3876 = !DILocation(line: 1168, column: 8, scope: !3848)
!3877 = !DILocalVariable(name: "pre_condition", scope: !3848, file: !3, line: 1169, type: !826)
!3878 = !DILocation(line: 1169, column: 8, scope: !3848)
!3879 = !DILocalVariable(name: "definitions", scope: !3848, file: !3, line: 1170, type: !1727)
!3880 = !DILocation(line: 1170, column: 10, scope: !3848)
!3881 = !DILocalVariable(name: "bb_before_second_loop", scope: !3848, file: !3, line: 1171, type: !1609)
!3882 = !DILocation(line: 1171, column: 15, scope: !3848)
!3883 = !DILocalVariable(name: "bb_after_second_loop", scope: !3848, file: !3, line: 1171, type: !1609)
!3884 = !DILocation(line: 1171, column: 38, scope: !3848)
!3885 = !DILocalVariable(name: "bb_before_first_loop", scope: !3848, file: !3, line: 1172, type: !1609)
!3886 = !DILocation(line: 1172, column: 15, scope: !3848)
!3887 = !DILocalVariable(name: "bb_between_loops", scope: !3848, file: !3, line: 1173, type: !1609)
!3888 = !DILocation(line: 1173, column: 15, scope: !3848)
!3889 = !DILocalVariable(name: "new_exit_bb", scope: !3848, file: !3, line: 1174, type: !1609)
!3890 = !DILocation(line: 1174, column: 15, scope: !3848)
!3891 = !DILocalVariable(name: "exit_e", scope: !3848, file: !3, line: 1175, type: !1137)
!3892 = !DILocation(line: 1175, column: 8, scope: !3848)
!3893 = !DILocation(line: 1175, column: 30, scope: !3848)
!3894 = !DILocation(line: 1175, column: 17, scope: !3848)
!3895 = !DILocalVariable(name: "loop_loc", scope: !3848, file: !3, line: 1176, type: !2352)
!3896 = !DILocation(line: 1176, column: 7, scope: !3848)
!3897 = !DILocalVariable(name: "cost_pre_condition", scope: !3848, file: !3, line: 1177, type: !826)
!3898 = !DILocation(line: 1177, column: 8, scope: !3848)
!3899 = !DILocation(line: 1179, column: 37, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1179, column: 7)
!3901 = !DILocation(line: 1179, column: 43, scope: !3900)
!3902 = !DILocation(line: 1179, column: 8, scope: !3900)
!3903 = !DILocation(line: 1179, column: 7, scope: !3848)
!3904 = !DILocation(line: 1180, column: 5, scope: !3900)
!3905 = !DILocation(line: 1186, column: 3, scope: !3848)
!3906 = !DILocation(line: 1203, column: 60, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1203, column: 7)
!3908 = !DILocation(line: 1203, column: 66, scope: !3907)
!3909 = !DILocation(line: 1203, column: 20, scope: !3907)
!3910 = !DILocation(line: 1203, column: 18, scope: !3907)
!3911 = !DILocation(line: 1203, column: 7, scope: !3848)
!3912 = !DILocation(line: 1205, column: 38, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 1204, column: 5)
!3914 = !DILocation(line: 1205, column: 18, scope: !3913)
!3915 = !DILocation(line: 1205, column: 16, scope: !3913)
!3916 = !DILocation(line: 1206, column: 11, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3913, file: !3, line: 1206, column: 11)
!3918 = !DILocation(line: 1206, column: 21, scope: !3917)
!3919 = !DILocation(line: 1206, column: 25, scope: !3917)
!3920 = !DILocation(line: 1206, column: 36, scope: !3917)
!3921 = !DILocation(line: 1206, column: 11, scope: !3913)
!3922 = !DILocation(line: 1208, column: 15, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 1208, column: 15)
!3924 = distinct !DILexicalBlock(scope: !3917, file: !3, line: 1207, column: 9)
!3925 = !DILocation(line: 1208, column: 24, scope: !3923)
!3926 = !DILocation(line: 1208, column: 15, scope: !3924)
!3927 = !DILocation(line: 1209, column: 22, scope: !3923)
!3928 = !DILocation(line: 1210, column: 22, scope: !3923)
!3929 = !DILocation(line: 1210, column: 43, scope: !3923)
!3930 = !DILocation(line: 1209, column: 13, scope: !3923)
!3931 = !DILocation(line: 1211, column: 20, scope: !3924)
!3932 = !DILocation(line: 1211, column: 11, scope: !3924)
!3933 = !DILocation(line: 1212, column: 9, scope: !3924)
!3934 = !DILocation(line: 1213, column: 7, scope: !3913)
!3935 = !DILocation(line: 1216, column: 7, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1216, column: 7)
!3937 = !DILocation(line: 1216, column: 7, scope: !3848)
!3938 = !DILocation(line: 1218, column: 7, scope: !3939)
!3939 = distinct !DILexicalBlock(scope: !3936, file: !3, line: 1217, column: 5)
!3940 = !DILocation(line: 1219, column: 20, scope: !3939)
!3941 = !DILocation(line: 1219, column: 18, scope: !3939)
!3942 = !DILocation(line: 1220, column: 5, scope: !3939)
!3943 = !DILocation(line: 1222, column: 7, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1222, column: 7)
!3945 = !DILocation(line: 1222, column: 12, scope: !3944)
!3946 = !DILocation(line: 1222, column: 9, scope: !3944)
!3947 = !DILocation(line: 1222, column: 7, scope: !3848)
!3948 = !DILocation(line: 1225, column: 20, scope: !3949)
!3949 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 1223, column: 5)
!3950 = !DILocation(line: 1225, column: 18, scope: !3949)
!3951 = !DILocation(line: 1226, column: 21, scope: !3949)
!3952 = !DILocation(line: 1226, column: 19, scope: !3949)
!3953 = !DILocation(line: 1227, column: 5, scope: !3949)
!3954 = !DILocation(line: 1231, column: 20, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3944, file: !3, line: 1229, column: 5)
!3956 = !DILocation(line: 1231, column: 18, scope: !3955)
!3957 = !DILocation(line: 1232, column: 21, scope: !3955)
!3958 = !DILocation(line: 1232, column: 19, scope: !3955)
!3959 = !DILocation(line: 1235, column: 17, scope: !3848)
!3960 = !DILocation(line: 1235, column: 15, scope: !3848)
!3961 = !DILocation(line: 1236, column: 42, scope: !3848)
!3962 = !DILocation(line: 1236, column: 48, scope: !3848)
!3963 = !DILocation(line: 1236, column: 58, scope: !3848)
!3964 = !DILocation(line: 1236, column: 63, scope: !3848)
!3965 = !DILocation(line: 1236, column: 60, scope: !3848)
!3966 = !DILocation(line: 1236, column: 3, scope: !3848)
!3967 = !DILocation(line: 1237, column: 29, scope: !3848)
!3968 = !DILocation(line: 1237, column: 3, scope: !3848)
!3969 = !DILocation(line: 1325, column: 59, scope: !3848)
!3970 = !DILocation(line: 1325, column: 38, scope: !3848)
!3971 = !DILocation(line: 1325, column: 26, scope: !3848)
!3972 = !DILocation(line: 1325, column: 24, scope: !3848)
!3973 = !DILocation(line: 1326, column: 52, scope: !3848)
!3974 = !DILocation(line: 1326, column: 39, scope: !3848)
!3975 = !DILocation(line: 1326, column: 27, scope: !3848)
!3976 = !DILocation(line: 1326, column: 25, scope: !3848)
!3977 = !DILocation(line: 1329, column: 8, scope: !3978)
!3978 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1329, column: 7)
!3979 = !DILocation(line: 1329, column: 7, scope: !3848)
!3980 = !DILocation(line: 1332, column: 2, scope: !3981)
!3981 = distinct !DILexicalBlock(scope: !3978, file: !3, line: 1330, column: 5)
!3982 = !DILocation(line: 1331, column: 21, scope: !3981)
!3983 = !DILocation(line: 1334, column: 11, scope: !3984)
!3984 = distinct !DILexicalBlock(scope: !3981, file: !3, line: 1334, column: 11)
!3985 = !DILocation(line: 1334, column: 11, scope: !3981)
!3986 = !DILocalVariable(name: "scalar_loop_iters", scope: !3987, file: !3, line: 1336, type: !826)
!3987 = distinct !DILexicalBlock(scope: !3984, file: !3, line: 1335, column: 2)
!3988 = !DILocation(line: 1336, column: 9, scope: !3987)
!3989 = !DILocation(line: 1337, column: 22, scope: !3987)
!3990 = !DILocation(line: 1337, column: 8, scope: !3987)
!3991 = !DILocation(line: 1340, column: 6, scope: !3987)
!3992 = !DILocation(line: 1339, column: 23, scope: !3987)
!3993 = !DILocation(line: 1343, column: 20, scope: !3987)
!3994 = !DILocation(line: 1343, column: 18, scope: !3987)
!3995 = !DILocation(line: 1345, column: 2, scope: !3987)
!3996 = !DILocation(line: 1346, column: 11, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3981, file: !3, line: 1346, column: 11)
!3998 = !DILocation(line: 1346, column: 11, scope: !3981)
!3999 = !DILocation(line: 1349, column: 6, scope: !4000)
!4000 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 1347, column: 2)
!4001 = !DILocation(line: 1348, column: 18, scope: !4000)
!4002 = !DILocation(line: 1353, column: 2, scope: !4000)
!4003 = !DILocation(line: 1354, column: 5, scope: !3981)
!4004 = !DILocation(line: 1359, column: 11, scope: !4005)
!4005 = distinct !DILexicalBlock(scope: !4006, file: !3, line: 1359, column: 11)
!4006 = distinct !DILexicalBlock(scope: !3978, file: !3, line: 1358, column: 5)
!4007 = !DILocation(line: 1359, column: 11, scope: !4006)
!4008 = !DILocation(line: 1360, column: 27, scope: !4005)
!4009 = !DILocation(line: 1360, column: 49, scope: !4005)
!4010 = !DILocation(line: 1361, column: 6, scope: !4005)
!4011 = !DILocation(line: 1361, column: 12, scope: !4005)
!4012 = !DILocation(line: 1360, column: 2, scope: !4005)
!4013 = !DILocation(line: 1364, column: 2, scope: !4006)
!4014 = !DILocation(line: 1363, column: 21, scope: !4006)
!4015 = !DILocation(line: 1368, column: 35, scope: !3848)
!4016 = !DILocation(line: 1368, column: 57, scope: !3848)
!4017 = !DILocation(line: 1369, column: 7, scope: !3848)
!4018 = !DILocation(line: 1370, column: 35, scope: !3848)
!4019 = !DILocation(line: 1370, column: 58, scope: !3848)
!4020 = !DILocation(line: 1368, column: 12, scope: !3848)
!4021 = !DILocation(line: 1368, column: 10, scope: !3848)
!4022 = !DILocation(line: 1371, column: 39, scope: !3848)
!4023 = !DILocation(line: 1371, column: 47, scope: !3848)
!4024 = !DILocation(line: 1372, column: 11, scope: !3848)
!4025 = !DILocation(line: 1372, column: 25, scope: !3848)
!4026 = !DILocation(line: 1372, column: 22, scope: !3848)
!4027 = !DILocation(line: 1371, column: 3, scope: !3848)
!4028 = !DILocation(line: 1402, column: 22, scope: !3848)
!4029 = !DILocation(line: 1402, column: 20, scope: !3848)
!4030 = !DILocation(line: 1403, column: 51, scope: !3848)
!4031 = !DILocation(line: 1403, column: 38, scope: !3848)
!4032 = !DILocation(line: 1403, column: 26, scope: !3848)
!4033 = !DILocation(line: 1403, column: 24, scope: !3848)
!4034 = !DILocation(line: 1406, column: 2, scope: !3848)
!4035 = !DILocation(line: 1405, column: 17, scope: !3848)
!4036 = !DILocation(line: 1407, column: 35, scope: !3848)
!4037 = !DILocation(line: 1407, column: 53, scope: !3848)
!4038 = !DILocation(line: 1408, column: 35, scope: !3848)
!4039 = !DILocation(line: 1408, column: 57, scope: !3848)
!4040 = !DILocation(line: 1407, column: 12, scope: !3848)
!4041 = !DILocation(line: 1407, column: 10, scope: !3848)
!4042 = !DILocation(line: 1409, column: 39, scope: !3848)
!4043 = !DILocation(line: 1409, column: 47, scope: !3848)
!4044 = !DILocation(line: 1410, column: 38, scope: !3848)
!4045 = !DILocation(line: 1410, column: 53, scope: !3848)
!4046 = !DILocation(line: 1410, column: 50, scope: !3848)
!4047 = !DILocation(line: 1409, column: 3, scope: !3848)
!4048 = !DILocation(line: 1414, column: 7, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 1414, column: 7)
!4050 = !DILocation(line: 1414, column: 7, scope: !3848)
!4051 = !DILocation(line: 1415, column: 38, scope: !4049)
!4052 = !DILocation(line: 1415, column: 50, scope: !4049)
!4053 = !DILocation(line: 1415, column: 5, scope: !4049)
!4054 = !DILocation(line: 1417, column: 3, scope: !3848)
!4055 = !DILocation(line: 1419, column: 3, scope: !3848)
!4056 = !DILocation(line: 1420, column: 3, scope: !3848)
!4057 = !DILocation(line: 1422, column: 10, scope: !3848)
!4058 = !DILocation(line: 1422, column: 3, scope: !3848)
!4059 = !DILocation(line: 1423, column: 1, scope: !3848)
!4060 = distinct !DISubprogram(name: "vect_update_ivs_after_vectorizer", scope: !3, file: !3, line: 1718, type: !4061, scopeLine: 1720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4061 = !DISubroutineType(types: !4062)
!4062 = !{null, !2196, !826, !1137}
!4063 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4060, file: !3, line: 1718, type: !2196)
!4064 = !DILocation(line: 1718, column: 49, scope: !4060)
!4065 = !DILocalVariable(name: "niters", arg: 2, scope: !4060, file: !3, line: 1718, type: !826)
!4066 = !DILocation(line: 1718, column: 66, scope: !4060)
!4067 = !DILocalVariable(name: "update_e", arg: 3, scope: !4060, file: !3, line: 1719, type: !1137)
!4068 = !DILocation(line: 1719, column: 12, scope: !4060)
!4069 = !DILocalVariable(name: "loop", scope: !4060, file: !3, line: 1721, type: !1372)
!4070 = !DILocation(line: 1721, column: 16, scope: !4060)
!4071 = !DILocation(line: 1721, column: 23, scope: !4060)
!4072 = !DILocalVariable(name: "exit_bb", scope: !4060, file: !3, line: 1722, type: !1609)
!4073 = !DILocation(line: 1722, column: 15, scope: !4060)
!4074 = !DILocation(line: 1722, column: 38, scope: !4060)
!4075 = !DILocation(line: 1722, column: 25, scope: !4060)
!4076 = !DILocation(line: 1722, column: 45, scope: !4060)
!4077 = !DILocalVariable(name: "phi", scope: !4060, file: !3, line: 1723, type: !1157)
!4078 = !DILocation(line: 1723, column: 10, scope: !4060)
!4079 = !DILocalVariable(name: "phi1", scope: !4060, file: !3, line: 1723, type: !1157)
!4080 = !DILocation(line: 1723, column: 15, scope: !4060)
!4081 = !DILocalVariable(name: "gsi", scope: !4060, file: !3, line: 1724, type: !2505)
!4082 = !DILocation(line: 1724, column: 24, scope: !4060)
!4083 = !DILocalVariable(name: "gsi1", scope: !4060, file: !3, line: 1724, type: !2505)
!4084 = !DILocation(line: 1724, column: 29, scope: !4060)
!4085 = !DILocalVariable(name: "update_bb", scope: !4060, file: !3, line: 1725, type: !1609)
!4086 = !DILocation(line: 1725, column: 15, scope: !4060)
!4087 = !DILocation(line: 1725, column: 27, scope: !4060)
!4088 = !DILocation(line: 1725, column: 37, scope: !4060)
!4089 = !DILocation(line: 1730, column: 3, scope: !4060)
!4090 = !DILocation(line: 1732, column: 30, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1732, column: 3)
!4092 = !DILocation(line: 1732, column: 36, scope: !4091)
!4093 = !DILocation(line: 1732, column: 14, scope: !4091)
!4094 = !DILocation(line: 1732, column: 68, scope: !4091)
!4095 = !DILocation(line: 1732, column: 52, scope: !4091)
!4096 = !DILocation(line: 1732, column: 8, scope: !4091)
!4097 = !DILocation(line: 1733, column: 9, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4091, file: !3, line: 1732, column: 3)
!4099 = !DILocation(line: 1733, column: 25, scope: !4098)
!4100 = !DILocation(line: 1733, column: 29, scope: !4098)
!4101 = !DILocation(line: 1733, column: 28, scope: !4098)
!4102 = !DILocation(line: 0, scope: !4098)
!4103 = !DILocation(line: 1732, column: 3, scope: !4091)
!4104 = !DILocalVariable(name: "access_fn", scope: !4105, file: !3, line: 1736, type: !826)
!4105 = distinct !DILexicalBlock(scope: !4098, file: !3, line: 1735, column: 5)
!4106 = !DILocation(line: 1736, column: 12, scope: !4105)
!4107 = !DILocalVariable(name: "evolution_part", scope: !4105, file: !3, line: 1737, type: !826)
!4108 = !DILocation(line: 1737, column: 12, scope: !4105)
!4109 = !DILocalVariable(name: "init_expr", scope: !4105, file: !3, line: 1738, type: !826)
!4110 = !DILocation(line: 1738, column: 12, scope: !4105)
!4111 = !DILocalVariable(name: "step_expr", scope: !4105, file: !3, line: 1739, type: !826)
!4112 = !DILocation(line: 1739, column: 12, scope: !4105)
!4113 = !DILocalVariable(name: "off", scope: !4105, file: !3, line: 1739, type: !826)
!4114 = !DILocation(line: 1739, column: 23, scope: !4105)
!4115 = !DILocalVariable(name: "type", scope: !4105, file: !3, line: 1740, type: !826)
!4116 = !DILocation(line: 1740, column: 12, scope: !4105)
!4117 = !DILocalVariable(name: "var", scope: !4105, file: !3, line: 1741, type: !826)
!4118 = !DILocation(line: 1741, column: 12, scope: !4105)
!4119 = !DILocalVariable(name: "ni", scope: !4105, file: !3, line: 1741, type: !826)
!4120 = !DILocation(line: 1741, column: 17, scope: !4105)
!4121 = !DILocalVariable(name: "ni_name", scope: !4105, file: !3, line: 1741, type: !826)
!4122 = !DILocation(line: 1741, column: 21, scope: !4105)
!4123 = !DILocalVariable(name: "last_gsi", scope: !4105, file: !3, line: 1742, type: !2505)
!4124 = !DILocation(line: 1742, column: 28, scope: !4105)
!4125 = !DILocation(line: 1744, column: 13, scope: !4105)
!4126 = !DILocation(line: 1744, column: 11, scope: !4105)
!4127 = !DILocation(line: 1745, column: 14, scope: !4105)
!4128 = !DILocation(line: 1745, column: 12, scope: !4105)
!4129 = !DILocation(line: 1746, column: 11, scope: !4130)
!4130 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 1746, column: 11)
!4131 = !DILocation(line: 1746, column: 11, scope: !4105)
!4132 = !DILocation(line: 1748, column: 20, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4130, file: !3, line: 1747, column: 9)
!4134 = !DILocation(line: 1748, column: 11, scope: !4133)
!4135 = !DILocation(line: 1749, column: 23, scope: !4133)
!4136 = !DILocation(line: 1749, column: 34, scope: !4133)
!4137 = !DILocation(line: 1749, column: 4, scope: !4133)
!4138 = !DILocation(line: 1750, column: 9, scope: !4133)
!4139 = !DILocation(line: 1753, column: 27, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 1753, column: 11)
!4141 = !DILocation(line: 1753, column: 12, scope: !4140)
!4142 = !DILocation(line: 1753, column: 11, scope: !4105)
!4143 = !DILocation(line: 1755, column: 8, scope: !4144)
!4144 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 1755, column: 8)
!4145 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 1754, column: 2)
!4146 = !DILocation(line: 1755, column: 8, scope: !4145)
!4147 = !DILocation(line: 1756, column: 15, scope: !4144)
!4148 = !DILocation(line: 1756, column: 6, scope: !4144)
!4149 = !DILocation(line: 1757, column: 4, scope: !4145)
!4150 = !DILocation(line: 1761, column: 11, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 1761, column: 11)
!4152 = !DILocation(line: 1761, column: 54, scope: !4151)
!4153 = !DILocation(line: 1761, column: 11, scope: !4105)
!4154 = !DILocation(line: 1763, column: 15, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4156, file: !3, line: 1763, column: 15)
!4156 = distinct !DILexicalBlock(scope: !4151, file: !3, line: 1762, column: 9)
!4157 = !DILocation(line: 1763, column: 15, scope: !4156)
!4158 = !DILocation(line: 1764, column: 22, scope: !4155)
!4159 = !DILocation(line: 1764, column: 13, scope: !4155)
!4160 = !DILocation(line: 1765, column: 11, scope: !4156)
!4161 = !DILocation(line: 1768, column: 45, scope: !4105)
!4162 = !DILocation(line: 1768, column: 51, scope: !4105)
!4163 = !DILocation(line: 1768, column: 19, scope: !4105)
!4164 = !DILocation(line: 1768, column: 17, scope: !4105)
!4165 = !DILocation(line: 1769, column: 7, scope: !4105)
!4166 = !DILocation(line: 1774, column: 14, scope: !4105)
!4167 = !DILocation(line: 1774, column: 12, scope: !4105)
!4168 = !DILocation(line: 1775, column: 7, scope: !4105)
!4169 = !DILocation(line: 1777, column: 45, scope: !4105)
!4170 = !DILocation(line: 1777, column: 56, scope: !4105)
!4171 = !DILocation(line: 1777, column: 62, scope: !4105)
!4172 = !DILocation(line: 1777, column: 17, scope: !4105)
!4173 = !DILocation(line: 1777, column: 3, scope: !4105)
!4174 = !DILocation(line: 1776, column: 22, scope: !4105)
!4175 = !DILocation(line: 1778, column: 7, scope: !4105)
!4176 = !DILocation(line: 1782, column: 7, scope: !4105)
!4177 = !DILocation(line: 1784, column: 19, scope: !4105)
!4178 = !DILocation(line: 1784, column: 17, scope: !4105)
!4179 = !DILocation(line: 1785, column: 64, scope: !4105)
!4180 = !DILocation(line: 1786, column: 15, scope: !4105)
!4181 = !DILocation(line: 1786, column: 21, scope: !4105)
!4182 = !DILocation(line: 1785, column: 33, scope: !4105)
!4183 = !DILocation(line: 1785, column: 19, scope: !4105)
!4184 = !DILocation(line: 1785, column: 17, scope: !4105)
!4185 = !DILocation(line: 1787, column: 19, scope: !4105)
!4186 = !DILocation(line: 1787, column: 17, scope: !4105)
!4187 = !DILocation(line: 1789, column: 13, scope: !4105)
!4188 = !DILocation(line: 1789, column: 11, scope: !4105)
!4189 = !DILocation(line: 1792, column: 11, scope: !4190)
!4190 = distinct !DILexicalBlock(scope: !4105, file: !3, line: 1792, column: 11)
!4191 = !DILocation(line: 1792, column: 11, scope: !4105)
!4192 = !DILocation(line: 1793, column: 7, scope: !4190)
!4193 = !DILocation(line: 1793, column: 5, scope: !4190)
!4194 = !DILocation(line: 1793, column: 2, scope: !4190)
!4195 = !DILocation(line: 1797, column: 7, scope: !4190)
!4196 = !DILocation(line: 1797, column: 5, scope: !4190)
!4197 = !DILocation(line: 1801, column: 29, scope: !4105)
!4198 = !DILocation(line: 1801, column: 13, scope: !4105)
!4199 = !DILocation(line: 1801, column: 11, scope: !4105)
!4200 = !DILocation(line: 1802, column: 27, scope: !4105)
!4201 = !DILocation(line: 1802, column: 7, scope: !4105)
!4202 = !DILocation(line: 1804, column: 31, scope: !4105)
!4203 = !DILocation(line: 1804, column: 18, scope: !4105)
!4204 = !DILocation(line: 1805, column: 54, scope: !4105)
!4205 = !DILocation(line: 1805, column: 65, scope: !4105)
!4206 = !DILocation(line: 1805, column: 17, scope: !4105)
!4207 = !DILocation(line: 1805, column: 15, scope: !4105)
!4208 = !DILocation(line: 1809, column: 35, scope: !4105)
!4209 = !DILocation(line: 1809, column: 41, scope: !4105)
!4210 = !DILocation(line: 1809, column: 51, scope: !4105)
!4211 = !DILocation(line: 1809, column: 7, scope: !4105)
!4212 = !DILocation(line: 1810, column: 5, scope: !4105)
!4213 = !DILocation(line: 1734, column: 8, scope: !4098)
!4214 = !DILocation(line: 1734, column: 25, scope: !4098)
!4215 = !DILocation(line: 1732, column: 3, scope: !4098)
!4216 = distinct !{!4216, !4103, !4217}
!4217 = !DILocation(line: 1810, column: 5, scope: !4091)
!4218 = !DILocation(line: 1811, column: 1, scope: !4060)
!4219 = distinct !DISubprogram(name: "vect_do_peeling_for_alignment", scope: !3, file: !3, line: 2127, type: !4220, scopeLine: 2128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4220 = !DISubroutineType(types: !4221)
!4221 = !{null, !2196}
!4222 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4219, file: !3, line: 2127, type: !2196)
!4223 = !DILocation(line: 2127, column: 46, scope: !4219)
!4224 = !DILocalVariable(name: "loop", scope: !4219, file: !3, line: 2129, type: !1372)
!4225 = !DILocation(line: 2129, column: 16, scope: !4219)
!4226 = !DILocation(line: 2129, column: 23, scope: !4219)
!4227 = !DILocalVariable(name: "niters_of_prolog_loop", scope: !4219, file: !3, line: 2130, type: !826)
!4228 = !DILocation(line: 2130, column: 8, scope: !4219)
!4229 = !DILocalVariable(name: "ni_name", scope: !4219, file: !3, line: 2130, type: !826)
!4230 = !DILocation(line: 2130, column: 31, scope: !4219)
!4231 = !DILocalVariable(name: "n_iters", scope: !4219, file: !3, line: 2131, type: !826)
!4232 = !DILocation(line: 2131, column: 8, scope: !4219)
!4233 = !DILocalVariable(name: "wide_prolog_niters", scope: !4219, file: !3, line: 2132, type: !826)
!4234 = !DILocation(line: 2132, column: 8, scope: !4219)
!4235 = !DILocalVariable(name: "new_loop", scope: !4219, file: !3, line: 2133, type: !1372)
!4236 = !DILocation(line: 2133, column: 16, scope: !4219)
!4237 = !DILocalVariable(name: "th", scope: !4219, file: !3, line: 2134, type: !7)
!4238 = !DILocation(line: 2134, column: 16, scope: !4219)
!4239 = !DILocalVariable(name: "min_profitable_iters", scope: !4219, file: !3, line: 2135, type: !923)
!4240 = !DILocation(line: 2135, column: 7, scope: !4219)
!4241 = !DILocation(line: 2137, column: 7, scope: !4242)
!4242 = distinct !DILexicalBlock(scope: !4219, file: !3, line: 2137, column: 7)
!4243 = !DILocation(line: 2137, column: 7, scope: !4219)
!4244 = !DILocation(line: 2138, column: 14, scope: !4242)
!4245 = !DILocation(line: 2138, column: 5, scope: !4242)
!4246 = !DILocation(line: 2140, column: 3, scope: !4219)
!4247 = !DILocation(line: 2142, column: 37, scope: !4219)
!4248 = !DILocation(line: 2142, column: 13, scope: !4219)
!4249 = !DILocation(line: 2142, column: 11, scope: !4219)
!4250 = !DILocation(line: 2143, column: 60, scope: !4219)
!4251 = !DILocation(line: 2143, column: 72, scope: !4219)
!4252 = !DILocation(line: 2143, column: 27, scope: !4219)
!4253 = !DILocation(line: 2143, column: 25, scope: !4219)
!4254 = !DILocation(line: 2148, column: 26, scope: !4219)
!4255 = !DILocation(line: 2148, column: 24, scope: !4219)
!4256 = !DILocation(line: 2149, column: 37, scope: !4219)
!4257 = !DILocation(line: 2150, column: 9, scope: !4219)
!4258 = !DILocation(line: 2149, column: 8, scope: !4219)
!4259 = !DILocation(line: 2149, column: 6, scope: !4219)
!4260 = !DILocation(line: 2154, column: 36, scope: !4219)
!4261 = !DILocation(line: 2154, column: 63, scope: !4219)
!4262 = !DILocation(line: 2154, column: 42, scope: !4219)
!4263 = !DILocation(line: 2155, column: 8, scope: !4219)
!4264 = !DILocation(line: 2155, column: 31, scope: !4219)
!4265 = !DILocation(line: 2156, column: 8, scope: !4219)
!4266 = !DILocation(line: 2154, column: 5, scope: !4219)
!4267 = !DILocation(line: 2153, column: 12, scope: !4219)
!4268 = !DILocation(line: 2158, column: 3, scope: !4219)
!4269 = !DILocation(line: 2164, column: 13, scope: !4219)
!4270 = !DILocation(line: 2164, column: 11, scope: !4219)
!4271 = !DILocation(line: 2165, column: 36, scope: !4219)
!4272 = !DILocation(line: 2165, column: 3, scope: !4219)
!4273 = !DILocation(line: 2165, column: 34, scope: !4219)
!4274 = !DILocation(line: 2169, column: 29, scope: !4219)
!4275 = !DILocation(line: 2169, column: 41, scope: !4219)
!4276 = !DILocation(line: 2169, column: 3, scope: !4219)
!4277 = !DILocation(line: 2172, column: 3, scope: !4219)
!4278 = !DILocation(line: 2174, column: 3, scope: !4219)
!4279 = !DILocation(line: 2175, column: 1, scope: !4219)
!4280 = distinct !DISubprogram(name: "vect_build_loop_niters", scope: !3, file: !3, line: 1471, type: !4281, scopeLine: 1472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4281 = !DISubroutineType(types: !4282)
!4282 = !{!826, !2196, !1147}
!4283 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4280, file: !3, line: 1471, type: !2196)
!4284 = !DILocation(line: 1471, column: 39, scope: !4280)
!4285 = !DILocalVariable(name: "seq", arg: 2, scope: !4280, file: !3, line: 1471, type: !1147)
!4286 = !DILocation(line: 1471, column: 62, scope: !4280)
!4287 = !DILocalVariable(name: "ni_name", scope: !4280, file: !3, line: 1473, type: !826)
!4288 = !DILocation(line: 1473, column: 8, scope: !4280)
!4289 = !DILocalVariable(name: "var", scope: !4280, file: !3, line: 1473, type: !826)
!4290 = !DILocation(line: 1473, column: 17, scope: !4280)
!4291 = !DILocalVariable(name: "stmts", scope: !4280, file: !3, line: 1474, type: !1147)
!4292 = !DILocation(line: 1474, column: 14, scope: !4280)
!4293 = !DILocalVariable(name: "pe", scope: !4280, file: !3, line: 1475, type: !1137)
!4294 = !DILocation(line: 1475, column: 8, scope: !4280)
!4295 = !DILocalVariable(name: "loop", scope: !4280, file: !3, line: 1476, type: !1372)
!4296 = !DILocation(line: 1476, column: 16, scope: !4280)
!4297 = !DILocation(line: 1476, column: 23, scope: !4280)
!4298 = !DILocalVariable(name: "ni", scope: !4280, file: !3, line: 1477, type: !826)
!4299 = !DILocation(line: 1477, column: 8, scope: !4280)
!4300 = !DILocation(line: 1477, column: 27, scope: !4280)
!4301 = !DILocation(line: 1477, column: 13, scope: !4280)
!4302 = !DILocation(line: 1479, column: 25, scope: !4280)
!4303 = !DILocation(line: 1479, column: 9, scope: !4280)
!4304 = !DILocation(line: 1479, column: 7, scope: !4280)
!4305 = !DILocation(line: 1480, column: 23, scope: !4280)
!4306 = !DILocation(line: 1480, column: 3, scope: !4280)
!4307 = !DILocation(line: 1481, column: 35, scope: !4280)
!4308 = !DILocation(line: 1481, column: 54, scope: !4280)
!4309 = !DILocation(line: 1481, column: 13, scope: !4280)
!4310 = !DILocation(line: 1481, column: 11, scope: !4280)
!4311 = !DILocation(line: 1483, column: 29, scope: !4280)
!4312 = !DILocation(line: 1483, column: 8, scope: !4280)
!4313 = !DILocation(line: 1483, column: 6, scope: !4280)
!4314 = !DILocation(line: 1484, column: 7, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 1484, column: 7)
!4316 = !DILocation(line: 1484, column: 7, scope: !4280)
!4317 = !DILocation(line: 1486, column: 11, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4319, file: !3, line: 1486, column: 11)
!4319 = distinct !DILexicalBlock(scope: !4315, file: !3, line: 1485, column: 5)
!4320 = !DILocation(line: 1486, column: 11, scope: !4319)
!4321 = !DILocation(line: 1487, column: 28, scope: !4318)
!4322 = !DILocation(line: 1487, column: 2, scope: !4318)
!4323 = !DILocalVariable(name: "new_bb", scope: !4324, file: !3, line: 1490, type: !1609)
!4324 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 1489, column: 2)
!4325 = !DILocation(line: 1490, column: 16, scope: !4324)
!4326 = !DILocation(line: 1490, column: 59, scope: !4324)
!4327 = !DILocation(line: 1490, column: 63, scope: !4324)
!4328 = !DILocation(line: 1490, column: 25, scope: !4324)
!4329 = !DILocation(line: 1491, column: 4, scope: !4324)
!4330 = !DILocation(line: 1493, column: 5, scope: !4319)
!4331 = !DILocation(line: 1495, column: 10, scope: !4280)
!4332 = !DILocation(line: 1495, column: 3, scope: !4280)
!4333 = distinct !DISubprogram(name: "vect_gen_niters_for_prolog_loop", scope: !3, file: !3, line: 1964, type: !4334, scopeLine: 1966, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4334 = !DISubroutineType(types: !4335)
!4335 = !{!826, !2196, !826, !1191}
!4336 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4333, file: !3, line: 1964, type: !2196)
!4337 = !DILocation(line: 1964, column: 48, scope: !4333)
!4338 = !DILocalVariable(name: "loop_niters", arg: 2, scope: !4333, file: !3, line: 1964, type: !826)
!4339 = !DILocation(line: 1964, column: 65, scope: !4333)
!4340 = !DILocalVariable(name: "wide_prolog_niters", arg: 3, scope: !4333, file: !3, line: 1965, type: !1191)
!4341 = !DILocation(line: 1965, column: 12, scope: !4333)
!4342 = !DILocalVariable(name: "dr", scope: !4333, file: !3, line: 1967, type: !2208)
!4343 = !DILocation(line: 1967, column: 26, scope: !4333)
!4344 = !DILocation(line: 1967, column: 31, scope: !4333)
!4345 = !DILocalVariable(name: "loop", scope: !4333, file: !3, line: 1968, type: !1372)
!4346 = !DILocation(line: 1968, column: 16, scope: !4333)
!4347 = !DILocation(line: 1968, column: 23, scope: !4333)
!4348 = !DILocalVariable(name: "var", scope: !4333, file: !3, line: 1969, type: !826)
!4349 = !DILocation(line: 1969, column: 8, scope: !4333)
!4350 = !DILocalVariable(name: "stmts", scope: !4333, file: !3, line: 1970, type: !1147)
!4351 = !DILocation(line: 1970, column: 14, scope: !4333)
!4352 = !DILocalVariable(name: "iters", scope: !4333, file: !3, line: 1971, type: !826)
!4353 = !DILocation(line: 1971, column: 8, scope: !4333)
!4354 = !DILocalVariable(name: "iters_name", scope: !4333, file: !3, line: 1971, type: !826)
!4355 = !DILocation(line: 1971, column: 15, scope: !4333)
!4356 = !DILocalVariable(name: "pe", scope: !4333, file: !3, line: 1972, type: !1137)
!4357 = !DILocation(line: 1972, column: 8, scope: !4333)
!4358 = !DILocalVariable(name: "new_bb", scope: !4333, file: !3, line: 1973, type: !1609)
!4359 = !DILocation(line: 1973, column: 15, scope: !4333)
!4360 = !DILocalVariable(name: "dr_stmt", scope: !4333, file: !3, line: 1974, type: !1157)
!4361 = !DILocation(line: 1974, column: 10, scope: !4333)
!4362 = !DILocation(line: 1974, column: 20, scope: !4333)
!4363 = !DILocalVariable(name: "stmt_info", scope: !4333, file: !3, line: 1975, type: !2189)
!4364 = !DILocation(line: 1975, column: 17, scope: !4333)
!4365 = !DILocation(line: 1975, column: 45, scope: !4333)
!4366 = !DILocation(line: 1975, column: 29, scope: !4333)
!4367 = !DILocalVariable(name: "vectype", scope: !4333, file: !3, line: 1976, type: !826)
!4368 = !DILocation(line: 1976, column: 8, scope: !4333)
!4369 = !DILocation(line: 1976, column: 18, scope: !4333)
!4370 = !DILocalVariable(name: "vectype_align", scope: !4333, file: !3, line: 1977, type: !923)
!4371 = !DILocation(line: 1977, column: 7, scope: !4333)
!4372 = !DILocation(line: 1977, column: 23, scope: !4333)
!4373 = !DILocation(line: 1977, column: 44, scope: !4333)
!4374 = !DILocalVariable(name: "niters_type", scope: !4333, file: !3, line: 1978, type: !826)
!4375 = !DILocation(line: 1978, column: 8, scope: !4333)
!4376 = !DILocation(line: 1978, column: 22, scope: !4333)
!4377 = !DILocalVariable(name: "step", scope: !4333, file: !3, line: 1979, type: !923)
!4378 = !DILocation(line: 1979, column: 7, scope: !4333)
!4379 = !DILocalVariable(name: "element_size", scope: !4333, file: !3, line: 1980, type: !923)
!4380 = !DILocation(line: 1980, column: 7, scope: !4333)
!4381 = !DILocation(line: 1980, column: 22, scope: !4333)
!4382 = !DILocalVariable(name: "nelements", scope: !4333, file: !3, line: 1981, type: !923)
!4383 = !DILocation(line: 1981, column: 7, scope: !4333)
!4384 = !DILocation(line: 1981, column: 19, scope: !4333)
!4385 = !DILocation(line: 1983, column: 7, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 1983, column: 7)
!4387 = !DILocation(line: 1983, column: 7, scope: !4333)
!4388 = !DILocation(line: 1984, column: 12, scope: !4386)
!4389 = !DILocation(line: 1984, column: 10, scope: !4386)
!4390 = !DILocation(line: 1984, column: 5, scope: !4386)
!4391 = !DILocation(line: 1986, column: 29, scope: !4333)
!4392 = !DILocation(line: 1986, column: 8, scope: !4333)
!4393 = !DILocation(line: 1986, column: 6, scope: !4333)
!4394 = !DILocation(line: 1988, column: 7, scope: !4395)
!4395 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 1988, column: 7)
!4396 = !DILocation(line: 1988, column: 47, scope: !4395)
!4397 = !DILocation(line: 1988, column: 7, scope: !4333)
!4398 = !DILocalVariable(name: "byte_misalign", scope: !4399, file: !3, line: 1990, type: !923)
!4399 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 1989, column: 5)
!4400 = !DILocation(line: 1990, column: 11, scope: !4399)
!4401 = !DILocation(line: 1990, column: 27, scope: !4399)
!4402 = !DILocalVariable(name: "elem_misalign", scope: !4399, file: !3, line: 1991, type: !923)
!4403 = !DILocation(line: 1991, column: 11, scope: !4399)
!4404 = !DILocation(line: 1991, column: 27, scope: !4399)
!4405 = !DILocation(line: 1991, column: 43, scope: !4399)
!4406 = !DILocation(line: 1991, column: 41, scope: !4399)
!4407 = !DILocation(line: 1993, column: 11, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4399, file: !3, line: 1993, column: 11)
!4409 = !DILocation(line: 1993, column: 11, scope: !4399)
!4410 = !DILocation(line: 1994, column: 18, scope: !4408)
!4411 = !DILocation(line: 1994, column: 54, scope: !4408)
!4412 = !DILocation(line: 1994, column: 9, scope: !4408)
!4413 = !DILocation(line: 1996, column: 30, scope: !4399)
!4414 = !DILocation(line: 1997, column: 25, scope: !4399)
!4415 = !DILocation(line: 1997, column: 37, scope: !4399)
!4416 = !DILocation(line: 1997, column: 35, scope: !4399)
!4417 = !DILocation(line: 1997, column: 55, scope: !4399)
!4418 = !DILocation(line: 1997, column: 65, scope: !4399)
!4419 = !DILocation(line: 1997, column: 52, scope: !4399)
!4420 = !DILocation(line: 1997, column: 73, scope: !4399)
!4421 = !DILocation(line: 1997, column: 71, scope: !4399)
!4422 = !DILocation(line: 1997, column: 22, scope: !4399)
!4423 = !DILocation(line: 1996, column: 15, scope: !4399)
!4424 = !DILocation(line: 1996, column: 13, scope: !4399)
!4425 = !DILocation(line: 1998, column: 5, scope: !4399)
!4426 = !DILocalVariable(name: "new_stmts", scope: !4427, file: !3, line: 2001, type: !1147)
!4427 = distinct !DILexicalBlock(scope: !4395, file: !3, line: 2000, column: 5)
!4428 = !DILocation(line: 2001, column: 18, scope: !4427)
!4429 = !DILocalVariable(name: "start_addr", scope: !4427, file: !3, line: 2002, type: !826)
!4430 = !DILocation(line: 2002, column: 12, scope: !4427)
!4431 = !DILocation(line: 2002, column: 63, scope: !4427)
!4432 = !DILocation(line: 2003, column: 30, scope: !4427)
!4433 = !DILocation(line: 2002, column: 25, scope: !4427)
!4434 = !DILocalVariable(name: "ptr_type", scope: !4427, file: !3, line: 2004, type: !826)
!4435 = !DILocation(line: 2004, column: 12, scope: !4427)
!4436 = !DILocation(line: 2004, column: 23, scope: !4427)
!4437 = !DILocalVariable(name: "size", scope: !4427, file: !3, line: 2005, type: !826)
!4438 = !DILocation(line: 2005, column: 12, scope: !4427)
!4439 = !DILocation(line: 2005, column: 19, scope: !4427)
!4440 = !DILocalVariable(name: "type", scope: !4427, file: !3, line: 2006, type: !826)
!4441 = !DILocation(line: 2006, column: 12, scope: !4427)
!4442 = !DILocation(line: 2006, column: 36, scope: !4427)
!4443 = !DILocation(line: 2006, column: 65, scope: !4427)
!4444 = !DILocation(line: 2006, column: 51, scope: !4427)
!4445 = !DILocation(line: 2006, column: 19, scope: !4427)
!4446 = !DILocalVariable(name: "vectype_size_minus_1", scope: !4427, file: !3, line: 2007, type: !826)
!4447 = !DILocation(line: 2007, column: 12, scope: !4427)
!4448 = !DILocation(line: 2007, column: 50, scope: !4427)
!4449 = !DILocation(line: 2007, column: 56, scope: !4427)
!4450 = !DILocation(line: 2007, column: 70, scope: !4427)
!4451 = !DILocation(line: 2007, column: 35, scope: !4427)
!4452 = !DILocalVariable(name: "elem_size_log", scope: !4427, file: !3, line: 2008, type: !826)
!4453 = !DILocation(line: 2008, column: 12, scope: !4427)
!4454 = !DILocation(line: 2009, column: 24, scope: !4427)
!4455 = !DILocation(line: 2009, column: 42, scope: !4427)
!4456 = !DILocation(line: 2009, column: 56, scope: !4427)
!4457 = !DILocation(line: 2009, column: 55, scope: !4427)
!4458 = !DILocation(line: 2009, column: 30, scope: !4427)
!4459 = !DILocation(line: 2009, column: 9, scope: !4427)
!4460 = !DILocalVariable(name: "nelements_minus_1", scope: !4427, file: !3, line: 2010, type: !826)
!4461 = !DILocation(line: 2010, column: 12, scope: !4427)
!4462 = !DILocation(line: 2010, column: 47, scope: !4427)
!4463 = !DILocation(line: 2010, column: 53, scope: !4427)
!4464 = !DILocation(line: 2010, column: 63, scope: !4427)
!4465 = !DILocation(line: 2010, column: 32, scope: !4427)
!4466 = !DILocalVariable(name: "nelements_tree", scope: !4427, file: !3, line: 2011, type: !826)
!4467 = !DILocation(line: 2011, column: 12, scope: !4427)
!4468 = !DILocation(line: 2011, column: 44, scope: !4427)
!4469 = !DILocation(line: 2011, column: 50, scope: !4427)
!4470 = !DILocation(line: 2011, column: 29, scope: !4427)
!4471 = !DILocalVariable(name: "byte_misalign", scope: !4427, file: !3, line: 2012, type: !826)
!4472 = !DILocation(line: 2012, column: 12, scope: !4427)
!4473 = !DILocalVariable(name: "elem_misalign", scope: !4427, file: !3, line: 2013, type: !826)
!4474 = !DILocation(line: 2013, column: 12, scope: !4427)
!4475 = !DILocation(line: 2015, column: 50, scope: !4427)
!4476 = !DILocation(line: 2015, column: 54, scope: !4427)
!4477 = !DILocation(line: 2015, column: 16, scope: !4427)
!4478 = !DILocation(line: 2015, column: 14, scope: !4427)
!4479 = !DILocation(line: 2016, column: 7, scope: !4427)
!4480 = !DILocation(line: 2020, column: 9, scope: !4427)
!4481 = !DILocation(line: 2019, column: 21, scope: !4427)
!4482 = !DILocation(line: 2024, column: 9, scope: !4427)
!4483 = !DILocation(line: 2023, column: 21, scope: !4427)
!4484 = !DILocation(line: 2027, column: 15, scope: !4427)
!4485 = !DILocation(line: 2027, column: 13, scope: !4427)
!4486 = !DILocation(line: 2028, column: 15, scope: !4427)
!4487 = !DILocation(line: 2028, column: 13, scope: !4427)
!4488 = !DILocation(line: 2029, column: 15, scope: !4427)
!4489 = !DILocation(line: 2029, column: 13, scope: !4427)
!4490 = !DILocation(line: 2036, column: 7, scope: !4491)
!4491 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 2036, column: 7)
!4492 = !DILocation(line: 2036, column: 31, scope: !4491)
!4493 = !DILocation(line: 2036, column: 7, scope: !4333)
!4494 = !DILocation(line: 2037, column: 13, scope: !4491)
!4495 = !DILocation(line: 2037, column: 11, scope: !4491)
!4496 = !DILocation(line: 2037, column: 5, scope: !4491)
!4497 = !DILocation(line: 2039, column: 7, scope: !4498)
!4498 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 2039, column: 7)
!4499 = !DILocation(line: 2039, column: 7, scope: !4333)
!4500 = !DILocation(line: 2041, column: 16, scope: !4501)
!4501 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 2040, column: 5)
!4502 = !DILocation(line: 2041, column: 7, scope: !4501)
!4503 = !DILocation(line: 2042, column: 27, scope: !4501)
!4504 = !DILocation(line: 2042, column: 38, scope: !4501)
!4505 = !DILocation(line: 2042, column: 7, scope: !4501)
!4506 = !DILocation(line: 2043, column: 5, scope: !4501)
!4507 = !DILocation(line: 2045, column: 25, scope: !4333)
!4508 = !DILocation(line: 2045, column: 9, scope: !4333)
!4509 = !DILocation(line: 2045, column: 7, scope: !4333)
!4510 = !DILocation(line: 2046, column: 23, scope: !4333)
!4511 = !DILocation(line: 2046, column: 3, scope: !4333)
!4512 = !DILocation(line: 2047, column: 9, scope: !4333)
!4513 = !DILocation(line: 2048, column: 38, scope: !4333)
!4514 = !DILocation(line: 2048, column: 60, scope: !4333)
!4515 = !DILocation(line: 2048, column: 16, scope: !4333)
!4516 = !DILocation(line: 2048, column: 14, scope: !4333)
!4517 = !DILocation(line: 2049, column: 27, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 2049, column: 7)
!4519 = !DILocation(line: 2049, column: 37, scope: !4518)
!4520 = !DILocation(line: 2049, column: 7, scope: !4518)
!4521 = !DILocation(line: 2049, column: 7, scope: !4333)
!4522 = !DILocation(line: 2050, column: 27, scope: !4518)
!4523 = !DILocation(line: 2050, column: 6, scope: !4518)
!4524 = !DILocation(line: 2050, column: 25, scope: !4518)
!4525 = !DILocation(line: 2050, column: 5, scope: !4518)
!4526 = !DILocalVariable(name: "seq", scope: !4527, file: !3, line: 2053, type: !1147)
!4527 = distinct !DILexicalBlock(scope: !4518, file: !3, line: 2052, column: 5)
!4528 = !DILocation(line: 2053, column: 18, scope: !4527)
!4529 = !DILocalVariable(name: "wide_iters", scope: !4527, file: !3, line: 2054, type: !826)
!4530 = !DILocation(line: 2054, column: 12, scope: !4527)
!4531 = !DILocation(line: 2054, column: 25, scope: !4527)
!4532 = !DILocation(line: 2055, column: 29, scope: !4527)
!4533 = !DILocation(line: 2055, column: 13, scope: !4527)
!4534 = !DILocation(line: 2055, column: 11, scope: !4527)
!4535 = !DILocation(line: 2056, column: 27, scope: !4527)
!4536 = !DILocation(line: 2056, column: 7, scope: !4527)
!4537 = !DILocation(line: 2057, column: 51, scope: !4527)
!4538 = !DILocation(line: 2058, column: 9, scope: !4527)
!4539 = !DILocation(line: 2057, column: 29, scope: !4527)
!4540 = !DILocation(line: 2057, column: 8, scope: !4527)
!4541 = !DILocation(line: 2057, column: 27, scope: !4527)
!4542 = !DILocation(line: 2059, column: 11, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4527, file: !3, line: 2059, column: 11)
!4544 = !DILocation(line: 2059, column: 11, scope: !4527)
!4545 = !DILocation(line: 2060, column: 30, scope: !4543)
!4546 = !DILocation(line: 2060, column: 2, scope: !4543)
!4547 = !DILocation(line: 2064, column: 7, scope: !4548)
!4548 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 2064, column: 7)
!4549 = !DILocation(line: 2064, column: 7, scope: !4333)
!4550 = !DILocalVariable(name: "new_bb", scope: !4551, file: !3, line: 2066, type: !1609)
!4551 = distinct !DILexicalBlock(scope: !4548, file: !3, line: 2065, column: 5)
!4552 = !DILocation(line: 2066, column: 19, scope: !4551)
!4553 = !DILocation(line: 2066, column: 62, scope: !4551)
!4554 = !DILocation(line: 2066, column: 66, scope: !4551)
!4555 = !DILocation(line: 2066, column: 28, scope: !4551)
!4556 = !DILocation(line: 2067, column: 7, scope: !4551)
!4557 = !DILocation(line: 2068, column: 5, scope: !4551)
!4558 = !DILocation(line: 2070, column: 10, scope: !4333)
!4559 = !DILocation(line: 2070, column: 3, scope: !4333)
!4560 = distinct !DISubprogram(name: "vect_update_inits_of_drs", scope: !3, file: !3, line: 2104, type: !4561, scopeLine: 2105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4561 = !DISubroutineType(types: !4562)
!4562 = !{null, !2196, !826}
!4563 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4560, file: !3, line: 2104, type: !2196)
!4564 = !DILocation(line: 2104, column: 41, scope: !4560)
!4565 = !DILocalVariable(name: "niters", arg: 2, scope: !4560, file: !3, line: 2104, type: !826)
!4566 = !DILocation(line: 2104, column: 58, scope: !4560)
!4567 = !DILocalVariable(name: "i", scope: !4560, file: !3, line: 2106, type: !7)
!4568 = !DILocation(line: 2106, column: 16, scope: !4560)
!4569 = !DILocalVariable(name: "datarefs", scope: !4560, file: !3, line: 2107, type: !2270)
!4570 = !DILocation(line: 2107, column: 33, scope: !4560)
!4571 = !DILocation(line: 2107, column: 44, scope: !4560)
!4572 = !DILocalVariable(name: "dr", scope: !4560, file: !3, line: 2108, type: !2208)
!4573 = !DILocation(line: 2108, column: 26, scope: !4560)
!4574 = !DILocation(line: 2110, column: 7, scope: !4575)
!4575 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 2110, column: 7)
!4576 = !DILocation(line: 2110, column: 7, scope: !4560)
!4577 = !DILocation(line: 2111, column: 14, scope: !4575)
!4578 = !DILocation(line: 2111, column: 5, scope: !4575)
!4579 = !DILocation(line: 2113, column: 10, scope: !4580)
!4580 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 2113, column: 3)
!4581 = !DILocation(line: 2113, column: 8, scope: !4580)
!4582 = !DILocation(line: 2113, column: 15, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4580, file: !3, line: 2113, column: 3)
!4584 = !DILocation(line: 2113, column: 3, scope: !4580)
!4585 = !DILocation(line: 2114, column: 29, scope: !4583)
!4586 = !DILocation(line: 2114, column: 33, scope: !4583)
!4587 = !DILocation(line: 2114, column: 5, scope: !4583)
!4588 = !DILocation(line: 2113, column: 65, scope: !4583)
!4589 = !DILocation(line: 2113, column: 3, scope: !4583)
!4590 = distinct !{!4590, !4584, !4591}
!4591 = !DILocation(line: 2114, column: 39, scope: !4580)
!4592 = !DILocation(line: 2115, column: 1, scope: !4560)
!4593 = distinct !DISubprogram(name: "vect_loop_versioning", scope: !3, file: !3, line: 2480, type: !4594, scopeLine: 2482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4594 = !DISubroutineType(types: !4595)
!4595 = !{null, !2196, !946, !1191, !4596}
!4596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!4597 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4593, file: !3, line: 2480, type: !2196)
!4598 = !DILocation(line: 2480, column: 37, scope: !4593)
!4599 = !DILocalVariable(name: "do_versioning", arg: 2, scope: !4593, file: !3, line: 2480, type: !946)
!4600 = !DILocation(line: 2480, column: 54, scope: !4593)
!4601 = !DILocalVariable(name: "cond_expr", arg: 3, scope: !4593, file: !3, line: 2481, type: !1191)
!4602 = !DILocation(line: 2481, column: 15, scope: !4593)
!4603 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 4, scope: !4593, file: !3, line: 2481, type: !4596)
!4604 = !DILocation(line: 2481, column: 38, scope: !4593)
!4605 = !DILocalVariable(name: "loop", scope: !4593, file: !3, line: 2483, type: !1372)
!4606 = !DILocation(line: 2483, column: 16, scope: !4593)
!4607 = !DILocation(line: 2483, column: 23, scope: !4593)
!4608 = !DILocalVariable(name: "condition_bb", scope: !4593, file: !3, line: 2484, type: !1609)
!4609 = !DILocation(line: 2484, column: 15, scope: !4593)
!4610 = !DILocalVariable(name: "gsi", scope: !4593, file: !3, line: 2485, type: !2505)
!4611 = !DILocation(line: 2485, column: 24, scope: !4593)
!4612 = !DILocalVariable(name: "cond_exp_gsi", scope: !4593, file: !3, line: 2485, type: !2505)
!4613 = !DILocation(line: 2485, column: 29, scope: !4593)
!4614 = !DILocalVariable(name: "merge_bb", scope: !4593, file: !3, line: 2486, type: !1609)
!4615 = !DILocation(line: 2486, column: 15, scope: !4593)
!4616 = !DILocalVariable(name: "new_exit_bb", scope: !4593, file: !3, line: 2487, type: !1609)
!4617 = !DILocation(line: 2487, column: 15, scope: !4593)
!4618 = !DILocalVariable(name: "new_exit_e", scope: !4593, file: !3, line: 2488, type: !1137)
!4619 = !DILocation(line: 2488, column: 8, scope: !4593)
!4620 = !DILocalVariable(name: "e", scope: !4593, file: !3, line: 2488, type: !1137)
!4621 = !DILocation(line: 2488, column: 20, scope: !4593)
!4622 = !DILocalVariable(name: "orig_phi", scope: !4593, file: !3, line: 2489, type: !1157)
!4623 = !DILocation(line: 2489, column: 10, scope: !4593)
!4624 = !DILocalVariable(name: "new_phi", scope: !4593, file: !3, line: 2489, type: !1157)
!4625 = !DILocation(line: 2489, column: 20, scope: !4593)
!4626 = !DILocalVariable(name: "arg", scope: !4593, file: !3, line: 2490, type: !826)
!4627 = !DILocation(line: 2490, column: 8, scope: !4593)
!4628 = !DILocalVariable(name: "prob", scope: !4593, file: !3, line: 2491, type: !7)
!4629 = !DILocation(line: 2491, column: 12, scope: !4593)
!4630 = !DILocalVariable(name: "gimplify_stmt_list", scope: !4593, file: !3, line: 2492, type: !1147)
!4631 = !DILocation(line: 2492, column: 14, scope: !4593)
!4632 = !DILocalVariable(name: "scalar_loop_iters", scope: !4593, file: !3, line: 2493, type: !826)
!4633 = !DILocation(line: 2493, column: 8, scope: !4593)
!4634 = !DILocation(line: 2493, column: 28, scope: !4593)
!4635 = !DILocalVariable(name: "min_profitable_iters", scope: !4593, file: !3, line: 2494, type: !923)
!4636 = !DILocation(line: 2494, column: 7, scope: !4593)
!4637 = !DILocalVariable(name: "th", scope: !4593, file: !3, line: 2495, type: !7)
!4638 = !DILocation(line: 2495, column: 16, scope: !4593)
!4639 = !DILocation(line: 2498, column: 26, scope: !4593)
!4640 = !DILocation(line: 2498, column: 24, scope: !4593)
!4641 = !DILocation(line: 2500, column: 37, scope: !4593)
!4642 = !DILocation(line: 2501, column: 9, scope: !4593)
!4643 = !DILocation(line: 2500, column: 8, scope: !4593)
!4644 = !DILocation(line: 2500, column: 6, scope: !4593)
!4645 = !DILocation(line: 2504, column: 5, scope: !4593)
!4646 = !DILocation(line: 2503, column: 4, scope: !4593)
!4647 = !DILocation(line: 2503, column: 14, scope: !4593)
!4648 = !DILocation(line: 2507, column: 39, scope: !4593)
!4649 = !DILocation(line: 2507, column: 38, scope: !4593)
!4650 = !DILocation(line: 2507, column: 50, scope: !4593)
!4651 = !DILocation(line: 2507, column: 16, scope: !4593)
!4652 = !DILocation(line: 2507, column: 4, scope: !4593)
!4653 = !DILocation(line: 2507, column: 14, scope: !4593)
!4654 = !DILocation(line: 2510, column: 7, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 2510, column: 7)
!4656 = !DILocation(line: 2510, column: 7, scope: !4593)
!4657 = !DILocation(line: 2511, column: 42, scope: !4655)
!4658 = !DILocation(line: 2511, column: 54, scope: !4655)
!4659 = !DILocation(line: 2512, column: 7, scope: !4655)
!4660 = !DILocation(line: 2511, column: 7, scope: !4655)
!4661 = !DILocation(line: 2514, column: 7, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 2514, column: 7)
!4663 = !DILocation(line: 2514, column: 7, scope: !4593)
!4664 = !DILocation(line: 2515, column: 40, scope: !4662)
!4665 = !DILocation(line: 2515, column: 52, scope: !4662)
!4666 = !DILocation(line: 2516, column: 12, scope: !4662)
!4667 = !DILocation(line: 2515, column: 5, scope: !4662)
!4668 = !DILocation(line: 2519, column: 5, scope: !4593)
!4669 = !DILocation(line: 2518, column: 4, scope: !4593)
!4670 = !DILocation(line: 2518, column: 14, scope: !4593)
!4671 = !DILocation(line: 2521, column: 28, scope: !4593)
!4672 = !DILocation(line: 2521, column: 27, scope: !4593)
!4673 = !DILocation(line: 2521, column: 5, scope: !4593)
!4674 = !DILocation(line: 2520, column: 4, scope: !4593)
!4675 = !DILocation(line: 2520, column: 14, scope: !4593)
!4676 = !DILocation(line: 2522, column: 23, scope: !4593)
!4677 = !DILocation(line: 2522, column: 44, scope: !4593)
!4678 = !DILocation(line: 2522, column: 3, scope: !4593)
!4679 = !DILocation(line: 2526, column: 8, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 2526, column: 7)
!4681 = !DILocation(line: 2526, column: 7, scope: !4593)
!4682 = !DILocation(line: 2527, column: 5, scope: !4680)
!4683 = !DILocation(line: 2529, column: 3, scope: !4593)
!4684 = !DILocation(line: 2530, column: 17, scope: !4593)
!4685 = !DILocation(line: 2530, column: 24, scope: !4593)
!4686 = !DILocation(line: 2530, column: 23, scope: !4593)
!4687 = !DILocation(line: 2531, column: 3, scope: !4593)
!4688 = !DILocation(line: 2531, column: 9, scope: !4593)
!4689 = !DILocation(line: 2531, column: 34, scope: !4593)
!4690 = !DILocation(line: 2531, column: 32, scope: !4593)
!4691 = !DILocation(line: 2530, column: 3, scope: !4593)
!4692 = !DILocation(line: 2532, column: 3, scope: !4593)
!4693 = !DILocation(line: 2542, column: 27, scope: !4593)
!4694 = !DILocation(line: 2542, column: 14, scope: !4593)
!4695 = !DILocation(line: 2542, column: 34, scope: !4593)
!4696 = !DILocation(line: 2542, column: 12, scope: !4593)
!4697 = !DILocation(line: 2543, column: 3, scope: !4593)
!4698 = !DILocation(line: 2544, column: 42, scope: !4593)
!4699 = !DILocation(line: 2544, column: 29, scope: !4593)
!4700 = !DILocation(line: 2544, column: 17, scope: !4593)
!4701 = !DILocation(line: 2544, column: 15, scope: !4593)
!4702 = !DILocation(line: 2545, column: 29, scope: !4593)
!4703 = !DILocation(line: 2545, column: 16, scope: !4593)
!4704 = !DILocation(line: 2545, column: 14, scope: !4593)
!4705 = !DILocation(line: 2546, column: 7, scope: !4593)
!4706 = !DILocation(line: 2546, column: 5, scope: !4593)
!4707 = !DILocation(line: 2548, column: 30, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 2548, column: 3)
!4709 = !DILocation(line: 2548, column: 14, scope: !4708)
!4710 = !DILocation(line: 2548, column: 8, scope: !4708)
!4711 = !DILocation(line: 2548, column: 42, scope: !4712)
!4712 = distinct !DILexicalBlock(scope: !4708, file: !3, line: 2548, column: 3)
!4713 = !DILocation(line: 2548, column: 41, scope: !4712)
!4714 = !DILocation(line: 2548, column: 3, scope: !4708)
!4715 = !DILocation(line: 2550, column: 18, scope: !4716)
!4716 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 2549, column: 5)
!4717 = !DILocation(line: 2550, column: 16, scope: !4716)
!4718 = !DILocation(line: 2551, column: 34, scope: !4716)
!4719 = !DILocation(line: 2552, column: 7, scope: !4716)
!4720 = !DILocation(line: 2551, column: 17, scope: !4716)
!4721 = !DILocation(line: 2551, column: 15, scope: !4716)
!4722 = !DILocation(line: 2553, column: 13, scope: !4716)
!4723 = !DILocation(line: 2553, column: 11, scope: !4716)
!4724 = !DILocation(line: 2554, column: 20, scope: !4716)
!4725 = !DILocation(line: 2554, column: 29, scope: !4716)
!4726 = !DILocation(line: 2554, column: 34, scope: !4716)
!4727 = !DILocation(line: 2555, column: 41, scope: !4716)
!4728 = !DILocation(line: 2555, column: 51, scope: !4716)
!4729 = !DILocation(line: 2555, column: 6, scope: !4716)
!4730 = !DILocation(line: 2554, column: 7, scope: !4716)
!4731 = !DILocation(line: 2556, column: 35, scope: !4716)
!4732 = !DILocation(line: 2556, column: 45, scope: !4716)
!4733 = !DILocation(line: 2556, column: 48, scope: !4716)
!4734 = !DILocation(line: 2556, column: 7, scope: !4716)
!4735 = !DILocation(line: 2557, column: 5, scope: !4716)
!4736 = !DILocation(line: 2548, column: 59, scope: !4712)
!4737 = !DILocation(line: 2548, column: 3, scope: !4712)
!4738 = distinct !{!4738, !4714, !4739}
!4739 = !DILocation(line: 2557, column: 5, scope: !4708)
!4740 = !DILocation(line: 2561, column: 3, scope: !4593)
!4741 = !DILocation(line: 2562, column: 8, scope: !4742)
!4742 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 2562, column: 7)
!4743 = !DILocation(line: 2562, column: 7, scope: !4742)
!4744 = !DILocation(line: 2562, column: 7, scope: !4593)
!4745 = !DILocation(line: 2564, column: 35, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4742, file: !3, line: 2563, column: 5)
!4747 = !DILocation(line: 2564, column: 22, scope: !4746)
!4748 = !DILocation(line: 2565, column: 46, scope: !4746)
!4749 = !DILocation(line: 2565, column: 45, scope: !4746)
!4750 = !DILocation(line: 2565, column: 7, scope: !4746)
!4751 = !DILocation(line: 2567, column: 8, scope: !4746)
!4752 = !DILocation(line: 2567, column: 28, scope: !4746)
!4753 = !DILocation(line: 2568, column: 5, scope: !4746)
!4754 = !DILocation(line: 2569, column: 4, scope: !4593)
!4755 = !DILocation(line: 2569, column: 14, scope: !4593)
!4756 = !DILocation(line: 2570, column: 1, scope: !4593)
!4757 = distinct !DISubprogram(name: "vect_create_cond_for_align_checks", scope: !3, file: !3, line: 2204, type: !4758, scopeLine: 2207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4758 = !DISubroutineType(types: !4759)
!4759 = !{null, !2196, !1191, !4596}
!4760 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4757, file: !3, line: 2204, type: !2196)
!4761 = !DILocation(line: 2204, column: 50, scope: !4757)
!4762 = !DILocalVariable(name: "cond_expr", arg: 2, scope: !4757, file: !3, line: 2205, type: !1191)
!4763 = !DILocation(line: 2205, column: 42, scope: !4757)
!4764 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 3, scope: !4757, file: !3, line: 2206, type: !4596)
!4765 = !DILocation(line: 2206, column: 20, scope: !4757)
!4766 = !DILocalVariable(name: "loop", scope: !4757, file: !3, line: 2208, type: !1372)
!4767 = !DILocation(line: 2208, column: 16, scope: !4757)
!4768 = !DILocation(line: 2208, column: 23, scope: !4757)
!4769 = !DILocalVariable(name: "may_misalign_stmts", scope: !4757, file: !3, line: 2209, type: !2346)
!4770 = !DILocation(line: 2209, column: 21, scope: !4757)
!4771 = !DILocation(line: 2210, column: 7, scope: !4757)
!4772 = !DILocalVariable(name: "ref_stmt", scope: !4757, file: !3, line: 2211, type: !1157)
!4773 = !DILocation(line: 2211, column: 10, scope: !4757)
!4774 = !DILocalVariable(name: "mask", scope: !4757, file: !3, line: 2212, type: !923)
!4775 = !DILocation(line: 2212, column: 7, scope: !4757)
!4776 = !DILocation(line: 2212, column: 14, scope: !4757)
!4777 = !DILocalVariable(name: "mask_cst", scope: !4757, file: !3, line: 2213, type: !826)
!4778 = !DILocation(line: 2213, column: 8, scope: !4757)
!4779 = !DILocalVariable(name: "i", scope: !4757, file: !3, line: 2214, type: !7)
!4780 = !DILocation(line: 2214, column: 16, scope: !4757)
!4781 = !DILocalVariable(name: "psize", scope: !4757, file: !3, line: 2215, type: !826)
!4782 = !DILocation(line: 2215, column: 8, scope: !4757)
!4783 = !DILocalVariable(name: "int_ptrsize_type", scope: !4757, file: !3, line: 2216, type: !826)
!4784 = !DILocation(line: 2216, column: 8, scope: !4757)
!4785 = !DILocalVariable(name: "tmp_name", scope: !4757, file: !3, line: 2217, type: !4786)
!4786 = !DICompositeType(tag: DW_TAG_array_type, baseType: !926, size: 160, elements: !4787)
!4787 = !{!4788}
!4788 = !DISubrange(count: 20)
!4789 = !DILocation(line: 2217, column: 8, scope: !4757)
!4790 = !DILocalVariable(name: "or_tmp_name", scope: !4757, file: !3, line: 2218, type: !826)
!4791 = !DILocation(line: 2218, column: 8, scope: !4757)
!4792 = !DILocalVariable(name: "and_tmp", scope: !4757, file: !3, line: 2219, type: !826)
!4793 = !DILocation(line: 2219, column: 8, scope: !4757)
!4794 = !DILocalVariable(name: "and_tmp_name", scope: !4757, file: !3, line: 2219, type: !826)
!4795 = !DILocation(line: 2219, column: 17, scope: !4757)
!4796 = !DILocalVariable(name: "and_stmt", scope: !4757, file: !3, line: 2220, type: !1157)
!4797 = !DILocation(line: 2220, column: 10, scope: !4757)
!4798 = !DILocalVariable(name: "ptrsize_zero", scope: !4757, file: !3, line: 2221, type: !826)
!4799 = !DILocation(line: 2221, column: 8, scope: !4757)
!4800 = !DILocalVariable(name: "part_cond_expr", scope: !4757, file: !3, line: 2222, type: !826)
!4801 = !DILocation(line: 2222, column: 8, scope: !4757)
!4802 = !DILocation(line: 2226, column: 3, scope: !4757)
!4803 = !DILocation(line: 2230, column: 11, scope: !4757)
!4804 = !DILocation(line: 2230, column: 9, scope: !4757)
!4805 = !DILocation(line: 2232, column: 24, scope: !4757)
!4806 = !DILocation(line: 2232, column: 53, scope: !4757)
!4807 = !DILocation(line: 2232, column: 39, scope: !4757)
!4808 = !DILocation(line: 2232, column: 7, scope: !4757)
!4809 = !DILocation(line: 2232, column: 5, scope: !4757)
!4810 = !DILocation(line: 2237, column: 10, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 2237, column: 3)
!4812 = !DILocation(line: 2237, column: 8, scope: !4811)
!4813 = !DILocation(line: 2237, column: 15, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 2237, column: 3)
!4815 = !DILocation(line: 2237, column: 3, scope: !4811)
!4816 = !DILocalVariable(name: "new_stmt_list", scope: !4817, file: !3, line: 2239, type: !1147)
!4817 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 2238, column: 5)
!4818 = !DILocation(line: 2239, column: 18, scope: !4817)
!4819 = !DILocalVariable(name: "addr_base", scope: !4817, file: !3, line: 2240, type: !826)
!4820 = !DILocation(line: 2240, column: 12, scope: !4817)
!4821 = !DILocalVariable(name: "addr_tmp", scope: !4817, file: !3, line: 2241, type: !826)
!4822 = !DILocation(line: 2241, column: 12, scope: !4817)
!4823 = !DILocalVariable(name: "addr_tmp_name", scope: !4817, file: !3, line: 2241, type: !826)
!4824 = !DILocation(line: 2241, column: 22, scope: !4817)
!4825 = !DILocalVariable(name: "or_tmp", scope: !4817, file: !3, line: 2242, type: !826)
!4826 = !DILocation(line: 2242, column: 12, scope: !4817)
!4827 = !DILocalVariable(name: "new_or_tmp_name", scope: !4817, file: !3, line: 2242, type: !826)
!4828 = !DILocation(line: 2242, column: 20, scope: !4817)
!4829 = !DILocalVariable(name: "addr_stmt", scope: !4817, file: !3, line: 2243, type: !1157)
!4830 = !DILocation(line: 2243, column: 14, scope: !4817)
!4831 = !DILocalVariable(name: "or_stmt", scope: !4817, file: !3, line: 2243, type: !1157)
!4832 = !DILocation(line: 2243, column: 25, scope: !4817)
!4833 = !DILocation(line: 2247, column: 40, scope: !4817)
!4834 = !DILocation(line: 2248, column: 23, scope: !4817)
!4835 = !DILocation(line: 2247, column: 2, scope: !4817)
!4836 = !DILocation(line: 2246, column: 17, scope: !4817)
!4837 = !DILocation(line: 2249, column: 11, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 2249, column: 11)
!4839 = !DILocation(line: 2249, column: 25, scope: !4838)
!4840 = !DILocation(line: 2249, column: 11, scope: !4817)
!4841 = !DILocation(line: 2250, column: 22, scope: !4838)
!4842 = !DILocation(line: 2250, column: 43, scope: !4838)
!4843 = !DILocation(line: 2250, column: 2, scope: !4838)
!4844 = !DILocation(line: 2252, column: 16, scope: !4817)
!4845 = !DILocation(line: 2252, column: 46, scope: !4817)
!4846 = !DILocation(line: 2252, column: 7, scope: !4817)
!4847 = !DILocation(line: 2253, column: 34, scope: !4817)
!4848 = !DILocation(line: 2253, column: 52, scope: !4817)
!4849 = !DILocation(line: 2253, column: 18, scope: !4817)
!4850 = !DILocation(line: 2253, column: 16, scope: !4817)
!4851 = !DILocation(line: 2254, column: 27, scope: !4817)
!4852 = !DILocation(line: 2254, column: 7, scope: !4817)
!4853 = !DILocation(line: 2255, column: 38, scope: !4817)
!4854 = !DILocation(line: 2255, column: 23, scope: !4817)
!4855 = !DILocation(line: 2255, column: 21, scope: !4817)
!4856 = !DILocation(line: 2256, column: 19, scope: !4817)
!4857 = !DILocation(line: 2256, column: 17, scope: !4817)
!4858 = !DILocation(line: 2258, column: 43, scope: !4817)
!4859 = !DILocation(line: 2258, column: 7, scope: !4817)
!4860 = !DILocation(line: 2258, column: 41, scope: !4817)
!4861 = !DILocation(line: 2259, column: 28, scope: !4817)
!4862 = !DILocation(line: 2259, column: 49, scope: !4817)
!4863 = !DILocation(line: 2259, column: 7, scope: !4817)
!4864 = !DILocation(line: 2263, column: 11, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 2263, column: 11)
!4866 = !DILocation(line: 2263, column: 23, scope: !4865)
!4867 = !DILocation(line: 2263, column: 11, scope: !4817)
!4868 = !DILocation(line: 2266, column: 20, scope: !4869)
!4869 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 2264, column: 9)
!4870 = !DILocation(line: 2266, column: 48, scope: !4869)
!4871 = !DILocation(line: 2266, column: 11, scope: !4869)
!4872 = !DILocation(line: 2267, column: 36, scope: !4869)
!4873 = !DILocation(line: 2267, column: 54, scope: !4869)
!4874 = !DILocation(line: 2267, column: 20, scope: !4869)
!4875 = !DILocation(line: 2267, column: 18, scope: !4869)
!4876 = !DILocation(line: 2268, column: 31, scope: !4869)
!4877 = !DILocation(line: 2268, column: 11, scope: !4869)
!4878 = !DILocation(line: 2269, column: 37, scope: !4869)
!4879 = !DILocation(line: 2269, column: 22, scope: !4869)
!4880 = !DILocation(line: 2269, column: 20, scope: !4869)
!4881 = !DILocation(line: 2270, column: 14, scope: !4869)
!4882 = !DILocation(line: 2270, column: 12, scope: !4869)
!4883 = !DILocation(line: 2273, column: 49, scope: !4869)
!4884 = !DILocation(line: 2273, column: 11, scope: !4869)
!4885 = !DILocation(line: 2273, column: 47, scope: !4869)
!4886 = !DILocation(line: 2274, column: 25, scope: !4869)
!4887 = !DILocation(line: 2274, column: 46, scope: !4869)
!4888 = !DILocation(line: 2274, column: 4, scope: !4869)
!4889 = !DILocation(line: 2275, column: 25, scope: !4869)
!4890 = !DILocation(line: 2275, column: 23, scope: !4869)
!4891 = !DILocation(line: 2276, column: 9, scope: !4869)
!4892 = !DILocation(line: 2278, column: 23, scope: !4865)
!4893 = !DILocation(line: 2278, column: 21, scope: !4865)
!4894 = !DILocation(line: 2280, column: 5, scope: !4817)
!4895 = !DILocation(line: 2237, column: 71, scope: !4814)
!4896 = !DILocation(line: 2237, column: 3, scope: !4814)
!4897 = distinct !{!4897, !4815, !4898}
!4898 = !DILocation(line: 2280, column: 5, scope: !4811)
!4899 = !DILocation(line: 2282, column: 29, scope: !4757)
!4900 = !DILocation(line: 2282, column: 47, scope: !4757)
!4901 = !DILocation(line: 2282, column: 14, scope: !4757)
!4902 = !DILocation(line: 2282, column: 12, scope: !4757)
!4903 = !DILocation(line: 2285, column: 29, scope: !4757)
!4904 = !DILocation(line: 2285, column: 13, scope: !4757)
!4905 = !DILocation(line: 2285, column: 11, scope: !4757)
!4906 = !DILocation(line: 2286, column: 23, scope: !4757)
!4907 = !DILocation(line: 2286, column: 3, scope: !4757)
!4908 = !DILocation(line: 2287, column: 33, scope: !4757)
!4909 = !DILocation(line: 2287, column: 18, scope: !4757)
!4910 = !DILocation(line: 2287, column: 16, scope: !4757)
!4911 = !DILocation(line: 2289, column: 14, scope: !4757)
!4912 = !DILocation(line: 2289, column: 12, scope: !4757)
!4913 = !DILocation(line: 2291, column: 38, scope: !4757)
!4914 = !DILocation(line: 2291, column: 3, scope: !4757)
!4915 = !DILocation(line: 2291, column: 36, scope: !4757)
!4916 = !DILocation(line: 2292, column: 24, scope: !4757)
!4917 = !DILocation(line: 2292, column: 45, scope: !4757)
!4918 = !DILocation(line: 2292, column: 3, scope: !4757)
!4919 = !DILocation(line: 2296, column: 33, scope: !4757)
!4920 = !DILocation(line: 2296, column: 18, scope: !4757)
!4921 = !DILocation(line: 2296, column: 16, scope: !4757)
!4922 = !DILocation(line: 2297, column: 20, scope: !4757)
!4923 = !DILocation(line: 2297, column: 18, scope: !4757)
!4924 = !DILocation(line: 2299, column: 8, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4757, file: !3, line: 2299, column: 7)
!4926 = !DILocation(line: 2299, column: 7, scope: !4925)
!4927 = !DILocation(line: 2299, column: 7, scope: !4757)
!4928 = !DILocation(line: 2300, column: 18, scope: !4925)
!4929 = !DILocation(line: 2300, column: 6, scope: !4925)
!4930 = !DILocation(line: 2300, column: 16, scope: !4925)
!4931 = !DILocation(line: 2300, column: 5, scope: !4925)
!4932 = !DILocation(line: 2303, column: 18, scope: !4925)
!4933 = !DILocation(line: 2303, column: 6, scope: !4925)
!4934 = !DILocation(line: 2303, column: 16, scope: !4925)
!4935 = !DILocation(line: 2304, column: 1, scope: !4757)
!4936 = distinct !DISubprogram(name: "vect_create_cond_for_alias_checks", scope: !3, file: !3, line: 2361, type: !4758, scopeLine: 2364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!4937 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4936, file: !3, line: 2361, type: !2196)
!4938 = !DILocation(line: 2361, column: 50, scope: !4936)
!4939 = !DILocalVariable(name: "cond_expr", arg: 2, scope: !4936, file: !3, line: 2362, type: !1191)
!4940 = !DILocation(line: 2362, column: 15, scope: !4936)
!4941 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 3, scope: !4936, file: !3, line: 2363, type: !4596)
!4942 = !DILocation(line: 2363, column: 21, scope: !4936)
!4943 = !DILocalVariable(name: "loop", scope: !4936, file: !3, line: 2365, type: !1372)
!4944 = !DILocation(line: 2365, column: 16, scope: !4936)
!4945 = !DILocation(line: 2365, column: 23, scope: !4936)
!4946 = !DILocalVariable(name: "may_alias_ddrs", scope: !4936, file: !3, line: 2366, type: !2284)
!4947 = !DILocation(line: 2366, column: 23, scope: !4936)
!4948 = !DILocation(line: 2367, column: 5, scope: !4936)
!4949 = !DILocalVariable(name: "vect_factor", scope: !4936, file: !3, line: 2368, type: !826)
!4950 = !DILocation(line: 2368, column: 8, scope: !4936)
!4951 = !DILocation(line: 2369, column: 20, scope: !4936)
!4952 = !DILocation(line: 2369, column: 39, scope: !4936)
!4953 = !DILocation(line: 2369, column: 5, scope: !4936)
!4954 = !DILocalVariable(name: "ddr", scope: !4936, file: !3, line: 2371, type: !2296)
!4955 = !DILocation(line: 2371, column: 9, scope: !4936)
!4956 = !DILocalVariable(name: "i", scope: !4936, file: !3, line: 2372, type: !7)
!4957 = !DILocation(line: 2372, column: 16, scope: !4936)
!4958 = !DILocalVariable(name: "part_cond_expr", scope: !4936, file: !3, line: 2373, type: !826)
!4959 = !DILocation(line: 2373, column: 8, scope: !4936)
!4960 = !DILocation(line: 2384, column: 7, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 2384, column: 7)
!4962 = !DILocation(line: 2384, column: 7, scope: !4936)
!4963 = !DILocation(line: 2385, column: 5, scope: !4961)
!4964 = !DILocation(line: 2387, column: 10, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 2387, column: 3)
!4966 = !DILocation(line: 2387, column: 8, scope: !4965)
!4967 = !DILocation(line: 2387, column: 15, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4965, file: !3, line: 2387, column: 3)
!4969 = !DILocation(line: 2387, column: 3, scope: !4965)
!4970 = !DILocalVariable(name: "dr_a", scope: !4971, file: !3, line: 2389, type: !2208)
!4971 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 2388, column: 5)
!4972 = !DILocation(line: 2389, column: 30, scope: !4971)
!4973 = !DILocalVariable(name: "dr_b", scope: !4971, file: !3, line: 2389, type: !2208)
!4974 = !DILocation(line: 2389, column: 37, scope: !4971)
!4975 = !DILocalVariable(name: "dr_group_first_a", scope: !4971, file: !3, line: 2390, type: !1157)
!4976 = !DILocation(line: 2390, column: 14, scope: !4971)
!4977 = !DILocalVariable(name: "dr_group_first_b", scope: !4971, file: !3, line: 2390, type: !1157)
!4978 = !DILocation(line: 2390, column: 32, scope: !4971)
!4979 = !DILocalVariable(name: "addr_base_a", scope: !4971, file: !3, line: 2391, type: !826)
!4980 = !DILocation(line: 2391, column: 12, scope: !4971)
!4981 = !DILocalVariable(name: "addr_base_b", scope: !4971, file: !3, line: 2391, type: !826)
!4982 = !DILocation(line: 2391, column: 25, scope: !4971)
!4983 = !DILocalVariable(name: "segment_length_a", scope: !4971, file: !3, line: 2392, type: !826)
!4984 = !DILocation(line: 2392, column: 12, scope: !4971)
!4985 = !DILocalVariable(name: "segment_length_b", scope: !4971, file: !3, line: 2392, type: !826)
!4986 = !DILocation(line: 2392, column: 30, scope: !4971)
!4987 = !DILocalVariable(name: "stmt_a", scope: !4971, file: !3, line: 2393, type: !1157)
!4988 = !DILocation(line: 2393, column: 14, scope: !4971)
!4989 = !DILocalVariable(name: "stmt_b", scope: !4971, file: !3, line: 2393, type: !1157)
!4990 = !DILocation(line: 2393, column: 22, scope: !4971)
!4991 = !DILocation(line: 2395, column: 14, scope: !4971)
!4992 = !DILocation(line: 2395, column: 12, scope: !4971)
!4993 = !DILocation(line: 2396, column: 16, scope: !4971)
!4994 = !DILocation(line: 2396, column: 14, scope: !4971)
!4995 = !DILocation(line: 2397, column: 26, scope: !4971)
!4996 = !DILocation(line: 2397, column: 24, scope: !4971)
!4997 = !DILocation(line: 2398, column: 11, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2398, column: 11)
!4999 = !DILocation(line: 2398, column: 11, scope: !4971)
!5000 = !DILocation(line: 2400, column: 13, scope: !5001)
!5001 = distinct !DILexicalBlock(scope: !4998, file: !3, line: 2399, column: 9)
!5002 = !DILocation(line: 2400, column: 11, scope: !5001)
!5003 = !DILocation(line: 2401, column: 11, scope: !5001)
!5004 = !DILocation(line: 2401, column: 9, scope: !5001)
!5005 = !DILocation(line: 2402, column: 2, scope: !5001)
!5006 = !DILocation(line: 2404, column: 14, scope: !4971)
!5007 = !DILocation(line: 2404, column: 12, scope: !4971)
!5008 = !DILocation(line: 2405, column: 16, scope: !4971)
!5009 = !DILocation(line: 2405, column: 14, scope: !4971)
!5010 = !DILocation(line: 2406, column: 26, scope: !4971)
!5011 = !DILocation(line: 2406, column: 24, scope: !4971)
!5012 = !DILocation(line: 2407, column: 11, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2407, column: 11)
!5014 = !DILocation(line: 2407, column: 11, scope: !4971)
!5015 = !DILocation(line: 2409, column: 13, scope: !5016)
!5016 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 2408, column: 9)
!5017 = !DILocation(line: 2409, column: 11, scope: !5016)
!5018 = !DILocation(line: 2410, column: 11, scope: !5016)
!5019 = !DILocation(line: 2410, column: 9, scope: !5016)
!5020 = !DILocation(line: 2411, column: 2, scope: !5016)
!5021 = !DILocation(line: 2414, column: 47, scope: !4971)
!5022 = !DILocation(line: 2414, column: 55, scope: !4971)
!5023 = !DILocation(line: 2415, column: 23, scope: !4971)
!5024 = !DILocation(line: 2414, column: 9, scope: !4971)
!5025 = !DILocation(line: 2413, column: 19, scope: !4971)
!5026 = !DILocation(line: 2417, column: 47, scope: !4971)
!5027 = !DILocation(line: 2417, column: 55, scope: !4971)
!5028 = !DILocation(line: 2418, column: 23, scope: !4971)
!5029 = !DILocation(line: 2417, column: 9, scope: !4971)
!5030 = !DILocation(line: 2416, column: 19, scope: !4971)
!5031 = !DILocation(line: 2420, column: 49, scope: !4971)
!5032 = !DILocation(line: 2420, column: 55, scope: !4971)
!5033 = !DILocation(line: 2420, column: 26, scope: !4971)
!5034 = !DILocation(line: 2420, column: 24, scope: !4971)
!5035 = !DILocation(line: 2421, column: 49, scope: !4971)
!5036 = !DILocation(line: 2421, column: 55, scope: !4971)
!5037 = !DILocation(line: 2421, column: 26, scope: !4971)
!5038 = !DILocation(line: 2421, column: 24, scope: !4971)
!5039 = !DILocation(line: 2423, column: 11, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2423, column: 11)
!5041 = !DILocation(line: 2423, column: 11, scope: !4971)
!5042 = !DILocation(line: 2425, column: 13, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 2424, column: 2)
!5044 = !DILocation(line: 2425, column: 4, scope: !5043)
!5045 = !DILocation(line: 2427, column: 24, scope: !5043)
!5046 = !DILocation(line: 2427, column: 35, scope: !5043)
!5047 = !DILocation(line: 2427, column: 4, scope: !5043)
!5048 = !DILocation(line: 2428, column: 13, scope: !5043)
!5049 = !DILocation(line: 2428, column: 4, scope: !5043)
!5050 = !DILocation(line: 2429, column: 24, scope: !5043)
!5051 = !DILocation(line: 2429, column: 35, scope: !5043)
!5052 = !DILocation(line: 2429, column: 4, scope: !5043)
!5053 = !DILocation(line: 2430, column: 2, scope: !5043)
!5054 = !DILocation(line: 2434, column: 8, scope: !4971)
!5055 = !DILocation(line: 2433, column: 22, scope: !4971)
!5056 = !DILocation(line: 2446, column: 12, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 2446, column: 11)
!5058 = !DILocation(line: 2446, column: 11, scope: !5057)
!5059 = !DILocation(line: 2446, column: 11, scope: !4971)
!5060 = !DILocation(line: 2447, column: 15, scope: !5057)
!5061 = !DILocation(line: 2447, column: 3, scope: !5057)
!5062 = !DILocation(line: 2447, column: 13, scope: !5057)
!5063 = !DILocation(line: 2447, column: 2, scope: !5057)
!5064 = !DILocation(line: 2450, column: 15, scope: !5057)
!5065 = !DILocation(line: 2450, column: 3, scope: !5057)
!5066 = !DILocation(line: 2450, column: 13, scope: !5057)
!5067 = !DILocation(line: 2451, column: 5, scope: !4971)
!5068 = !DILocation(line: 2387, column: 61, scope: !4968)
!5069 = !DILocation(line: 2387, column: 3, scope: !4968)
!5070 = distinct !{!5070, !4969, !5071}
!5071 = !DILocation(line: 2451, column: 5, scope: !4965)
!5072 = !DILocation(line: 2453, column: 7, scope: !5073)
!5073 = distinct !DILexicalBlock(scope: !4936, file: !3, line: 2453, column: 7)
!5074 = !DILocation(line: 2453, column: 7, scope: !4936)
!5075 = !DILocation(line: 2454, column: 14, scope: !5073)
!5076 = !DILocation(line: 2455, column: 14, scope: !5073)
!5077 = !DILocation(line: 2454, column: 5, scope: !5073)
!5078 = !DILocation(line: 2456, column: 1, scope: !4936)
!5079 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !135, file: !135, line: 150, type: !5080, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5080 = !DISubroutineType(types: !5081)
!5081 = !{!7, !3274}
!5082 = !DILocalVariable(name: "vec_", arg: 1, scope: !5079, file: !135, line: 150, type: !3274)
!5083 = !DILocation(line: 150, column: 1, scope: !5079)
!5084 = distinct !DISubprogram(name: "adjust_phi_and_debug_stmts", scope: !3, file: !3, line: 230, type: !5085, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5085 = !DISubroutineType(types: !5086)
!5086 = !{null, !1157, !1137, !826}
!5087 = !DILocalVariable(name: "update_phi", arg: 1, scope: !5084, file: !3, line: 230, type: !1157)
!5088 = !DILocation(line: 230, column: 36, scope: !5084)
!5089 = !DILocalVariable(name: "e", arg: 2, scope: !5084, file: !3, line: 230, type: !1137)
!5090 = !DILocation(line: 230, column: 53, scope: !5084)
!5091 = !DILocalVariable(name: "new_def", arg: 3, scope: !5084, file: !3, line: 230, type: !826)
!5092 = !DILocation(line: 230, column: 61, scope: !5084)
!5093 = !DILocalVariable(name: "orig_def", scope: !5084, file: !3, line: 232, type: !826)
!5094 = !DILocation(line: 232, column: 8, scope: !5084)
!5095 = !DILocation(line: 232, column: 19, scope: !5084)
!5096 = !DILocation(line: 234, column: 3, scope: !5084)
!5097 = !DILocation(line: 236, column: 7, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5084, file: !3, line: 236, column: 7)
!5099 = !DILocation(line: 236, column: 7, scope: !5084)
!5100 = !DILocation(line: 237, column: 25, scope: !5098)
!5101 = !DILocation(line: 237, column: 35, scope: !5098)
!5102 = !DILocation(line: 238, column: 15, scope: !5098)
!5103 = !DILocation(line: 238, column: 4, scope: !5098)
!5104 = !DILocation(line: 237, column: 5, scope: !5098)
!5105 = !DILocation(line: 239, column: 1, scope: !5084)
!5106 = distinct !DISubprogram(name: "bb_seq", scope: !398, file: !398, line: 237, type: !5107, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5107 = !DISubroutineType(types: !5108)
!5108 = !{!1147, !5109}
!5109 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !827, line: 112, baseType: !5110)
!5110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5111, size: 64)
!5111 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1122)
!5112 = !DILocalVariable(name: "bb", arg: 1, scope: !5106, file: !398, line: 237, type: !5109)
!5113 = !DILocation(line: 237, column: 27, scope: !5106)
!5114 = !DILocation(line: 239, column: 13, scope: !5106)
!5115 = !DILocation(line: 239, column: 17, scope: !5106)
!5116 = !DILocation(line: 239, column: 23, scope: !5106)
!5117 = !DILocation(line: 239, column: 33, scope: !5106)
!5118 = !DILocation(line: 239, column: 36, scope: !5106)
!5119 = !DILocation(line: 239, column: 40, scope: !5106)
!5120 = !DILocation(line: 239, column: 43, scope: !5106)
!5121 = !DILocation(line: 239, column: 10, scope: !5106)
!5122 = !DILocation(line: 239, column: 53, scope: !5106)
!5123 = !DILocation(line: 239, column: 57, scope: !5106)
!5124 = !DILocation(line: 239, column: 60, scope: !5106)
!5125 = !DILocation(line: 239, column: 68, scope: !5106)
!5126 = !DILocation(line: 239, column: 3, scope: !5106)
!5127 = distinct !DISubprogram(name: "gimple_seq_first", scope: !398, file: !398, line: 159, type: !5128, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5128 = !DISubroutineType(types: !5129)
!5129 = !{!1152, !5130}
!5130 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !827, line: 67, baseType: !5131)
!5131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5132, size: 64)
!5132 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1149)
!5133 = !DILocalVariable(name: "s", arg: 1, scope: !5127, file: !398, line: 159, type: !5130)
!5134 = !DILocation(line: 159, column: 36, scope: !5127)
!5135 = !DILocation(line: 161, column: 10, scope: !5127)
!5136 = !DILocation(line: 161, column: 14, scope: !5127)
!5137 = !DILocation(line: 161, column: 17, scope: !5127)
!5138 = !DILocation(line: 161, column: 3, scope: !5127)
!5139 = distinct !DISubprogram(name: "op_iter_init", scope: !2640, file: !2640, line: 742, type: !5140, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5140 = !DISubroutineType(types: !5141)
!5141 = !{null, !2643, !1157, !923}
!5142 = !DILocalVariable(name: "ptr", arg: 1, scope: !5139, file: !2640, line: 742, type: !2643)
!5143 = !DILocation(line: 742, column: 28, scope: !5139)
!5144 = !DILocalVariable(name: "stmt", arg: 2, scope: !5139, file: !2640, line: 742, type: !1157)
!5145 = !DILocation(line: 742, column: 40, scope: !5139)
!5146 = !DILocalVariable(name: "flags", arg: 3, scope: !5139, file: !2640, line: 742, type: !923)
!5147 = !DILocation(line: 742, column: 50, scope: !5139)
!5148 = !DILocation(line: 746, column: 3, scope: !5139)
!5149 = !DILocation(line: 748, column: 16, scope: !5139)
!5150 = !DILocation(line: 748, column: 22, scope: !5139)
!5151 = !DILocation(line: 748, column: 15, scope: !5139)
!5152 = !DILocation(line: 748, column: 68, scope: !5139)
!5153 = !DILocation(line: 748, column: 52, scope: !5139)
!5154 = !DILocation(line: 748, column: 3, scope: !5139)
!5155 = !DILocation(line: 748, column: 8, scope: !5139)
!5156 = !DILocation(line: 748, column: 13, scope: !5139)
!5157 = !DILocation(line: 749, column: 9, scope: !5158)
!5158 = distinct !DILexicalBlock(scope: !5139, file: !2640, line: 749, column: 7)
!5159 = !DILocation(line: 749, column: 15, scope: !5158)
!5160 = !DILocation(line: 750, column: 7, scope: !5158)
!5161 = !DILocation(line: 750, column: 10, scope: !5158)
!5162 = !DILocation(line: 750, column: 15, scope: !5158)
!5163 = !DILocation(line: 751, column: 7, scope: !5158)
!5164 = !DILocation(line: 751, column: 23, scope: !5158)
!5165 = !DILocation(line: 751, column: 10, scope: !5158)
!5166 = !DILocation(line: 751, column: 29, scope: !5158)
!5167 = !DILocation(line: 749, column: 7, scope: !5139)
!5168 = !DILocation(line: 752, column: 17, scope: !5158)
!5169 = !DILocation(line: 752, column: 22, scope: !5158)
!5170 = !DILocation(line: 752, column: 28, scope: !5158)
!5171 = !DILocation(line: 752, column: 5, scope: !5158)
!5172 = !DILocation(line: 752, column: 10, scope: !5158)
!5173 = !DILocation(line: 752, column: 15, scope: !5158)
!5174 = !DILocation(line: 753, column: 16, scope: !5139)
!5175 = !DILocation(line: 753, column: 22, scope: !5139)
!5176 = !DILocation(line: 753, column: 15, scope: !5139)
!5177 = !DILocation(line: 753, column: 68, scope: !5139)
!5178 = !DILocation(line: 753, column: 52, scope: !5139)
!5179 = !DILocation(line: 753, column: 3, scope: !5139)
!5180 = !DILocation(line: 753, column: 8, scope: !5139)
!5181 = !DILocation(line: 753, column: 13, scope: !5139)
!5182 = !DILocation(line: 754, column: 9, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5139, file: !2640, line: 754, column: 7)
!5184 = !DILocation(line: 754, column: 15, scope: !5183)
!5185 = !DILocation(line: 755, column: 7, scope: !5183)
!5186 = !DILocation(line: 755, column: 10, scope: !5183)
!5187 = !DILocation(line: 755, column: 15, scope: !5183)
!5188 = !DILocation(line: 756, column: 7, scope: !5183)
!5189 = !DILocation(line: 756, column: 23, scope: !5183)
!5190 = !DILocation(line: 756, column: 10, scope: !5183)
!5191 = !DILocation(line: 756, column: 29, scope: !5183)
!5192 = !DILocation(line: 754, column: 7, scope: !5139)
!5193 = !DILocation(line: 757, column: 17, scope: !5183)
!5194 = !DILocation(line: 757, column: 22, scope: !5183)
!5195 = !DILocation(line: 757, column: 28, scope: !5183)
!5196 = !DILocation(line: 757, column: 5, scope: !5183)
!5197 = !DILocation(line: 757, column: 10, scope: !5183)
!5198 = !DILocation(line: 757, column: 15, scope: !5183)
!5199 = !DILocation(line: 758, column: 3, scope: !5139)
!5200 = !DILocation(line: 758, column: 8, scope: !5139)
!5201 = !DILocation(line: 758, column: 13, scope: !5139)
!5202 = !DILocation(line: 760, column: 3, scope: !5139)
!5203 = !DILocation(line: 760, column: 8, scope: !5139)
!5204 = !DILocation(line: 760, column: 14, scope: !5139)
!5205 = !DILocation(line: 761, column: 3, scope: !5139)
!5206 = !DILocation(line: 761, column: 8, scope: !5139)
!5207 = !DILocation(line: 761, column: 16, scope: !5139)
!5208 = !DILocation(line: 762, column: 3, scope: !5139)
!5209 = !DILocation(line: 762, column: 8, scope: !5139)
!5210 = !DILocation(line: 762, column: 17, scope: !5139)
!5211 = !DILocation(line: 763, column: 1, scope: !5139)
!5212 = distinct !DISubprogram(name: "gimple_def_ops", scope: !398, file: !398, line: 1292, type: !5213, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5213 = !DISubroutineType(types: !5214)
!5214 = !{!1186, !3371}
!5215 = !DILocalVariable(name: "g", arg: 1, scope: !5212, file: !398, line: 1292, type: !3371)
!5216 = !DILocation(line: 1292, column: 30, scope: !5212)
!5217 = !DILocation(line: 1294, column: 24, scope: !5218)
!5218 = distinct !DILexicalBlock(scope: !5212, file: !398, line: 1294, column: 7)
!5219 = !DILocation(line: 1294, column: 8, scope: !5218)
!5220 = !DILocation(line: 1294, column: 7, scope: !5212)
!5221 = !DILocation(line: 1295, column: 5, scope: !5218)
!5222 = !DILocation(line: 1296, column: 10, scope: !5212)
!5223 = !DILocation(line: 1296, column: 13, scope: !5212)
!5224 = !DILocation(line: 1296, column: 19, scope: !5212)
!5225 = !DILocation(line: 1296, column: 26, scope: !5212)
!5226 = !DILocation(line: 1296, column: 3, scope: !5212)
!5227 = !DILocation(line: 1297, column: 1, scope: !5212)
!5228 = distinct !DISubprogram(name: "gimple_vdef", scope: !398, file: !398, line: 1375, type: !5229, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5229 = !DISubroutineType(types: !5230)
!5230 = !{!826, !3371}
!5231 = !DILocalVariable(name: "g", arg: 1, scope: !5228, file: !398, line: 1375, type: !3371)
!5232 = !DILocation(line: 1375, column: 27, scope: !5228)
!5233 = !DILocation(line: 1377, column: 28, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !5228, file: !398, line: 1377, column: 7)
!5235 = !DILocation(line: 1377, column: 8, scope: !5234)
!5236 = !DILocation(line: 1377, column: 7, scope: !5228)
!5237 = !DILocation(line: 1378, column: 5, scope: !5234)
!5238 = !DILocation(line: 1379, column: 10, scope: !5228)
!5239 = !DILocation(line: 1379, column: 13, scope: !5228)
!5240 = !DILocation(line: 1379, column: 23, scope: !5228)
!5241 = !DILocation(line: 1379, column: 3, scope: !5228)
!5242 = !DILocation(line: 1380, column: 1, scope: !5228)
!5243 = distinct !DISubprogram(name: "gimple_use_ops", scope: !398, file: !398, line: 1313, type: !5244, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5244 = !DISubroutineType(types: !5245)
!5245 = !{!1193, !3371}
!5246 = !DILocalVariable(name: "g", arg: 1, scope: !5243, file: !398, line: 1313, type: !3371)
!5247 = !DILocation(line: 1313, column: 30, scope: !5243)
!5248 = !DILocation(line: 1315, column: 24, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5243, file: !398, line: 1315, column: 7)
!5250 = !DILocation(line: 1315, column: 8, scope: !5249)
!5251 = !DILocation(line: 1315, column: 7, scope: !5243)
!5252 = !DILocation(line: 1316, column: 5, scope: !5249)
!5253 = !DILocation(line: 1317, column: 10, scope: !5243)
!5254 = !DILocation(line: 1317, column: 13, scope: !5243)
!5255 = !DILocation(line: 1317, column: 19, scope: !5243)
!5256 = !DILocation(line: 1317, column: 26, scope: !5243)
!5257 = !DILocation(line: 1317, column: 3, scope: !5243)
!5258 = !DILocation(line: 1318, column: 1, scope: !5243)
!5259 = distinct !DISubprogram(name: "gimple_vuse", scope: !398, file: !398, line: 1365, type: !5229, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5260 = !DILocalVariable(name: "g", arg: 1, scope: !5259, file: !398, line: 1365, type: !3371)
!5261 = !DILocation(line: 1365, column: 27, scope: !5259)
!5262 = !DILocation(line: 1367, column: 28, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !5259, file: !398, line: 1367, column: 7)
!5264 = !DILocation(line: 1367, column: 8, scope: !5263)
!5265 = !DILocation(line: 1367, column: 7, scope: !5259)
!5266 = !DILocation(line: 1368, column: 5, scope: !5263)
!5267 = !DILocation(line: 1369, column: 10, scope: !5259)
!5268 = !DILocation(line: 1369, column: 13, scope: !5259)
!5269 = !DILocation(line: 1369, column: 23, scope: !5259)
!5270 = !DILocation(line: 1369, column: 3, scope: !5259)
!5271 = !DILocation(line: 1370, column: 1, scope: !5259)
!5272 = distinct !DISubprogram(name: "gimple_has_ops", scope: !398, file: !398, line: 1274, type: !5273, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5273 = !DISubroutineType(types: !5274)
!5274 = !{!946, !3371}
!5275 = !DILocalVariable(name: "g", arg: 1, scope: !5272, file: !398, line: 1274, type: !3371)
!5276 = !DILocation(line: 1274, column: 30, scope: !5272)
!5277 = !DILocation(line: 1276, column: 23, scope: !5272)
!5278 = !DILocation(line: 1276, column: 10, scope: !5272)
!5279 = !DILocation(line: 1276, column: 26, scope: !5272)
!5280 = !DILocation(line: 1276, column: 41, scope: !5272)
!5281 = !DILocation(line: 1276, column: 57, scope: !5272)
!5282 = !DILocation(line: 1276, column: 44, scope: !5272)
!5283 = !DILocation(line: 1276, column: 60, scope: !5272)
!5284 = !DILocation(line: 0, scope: !5272)
!5285 = !DILocation(line: 1276, column: 3, scope: !5272)
!5286 = distinct !DISubprogram(name: "gimple_code", scope: !398, file: !398, line: 1052, type: !5287, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5287 = !DISubroutineType(types: !5288)
!5288 = !{!580, !3371}
!5289 = !DILocalVariable(name: "g", arg: 1, scope: !5286, file: !398, line: 1052, type: !3371)
!5290 = !DILocation(line: 1052, column: 27, scope: !5286)
!5291 = !DILocation(line: 1054, column: 10, scope: !5286)
!5292 = !DILocation(line: 1054, column: 13, scope: !5286)
!5293 = !DILocation(line: 1054, column: 20, scope: !5286)
!5294 = !DILocation(line: 1054, column: 3, scope: !5286)
!5295 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !398, file: !398, line: 1283, type: !5273, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5296 = !DILocalVariable(name: "g", arg: 1, scope: !5295, file: !398, line: 1283, type: !3371)
!5297 = !DILocation(line: 1283, column: 34, scope: !5295)
!5298 = !DILocation(line: 1285, column: 23, scope: !5295)
!5299 = !DILocation(line: 1285, column: 10, scope: !5295)
!5300 = !DILocation(line: 1285, column: 26, scope: !5295)
!5301 = !DILocation(line: 1285, column: 43, scope: !5295)
!5302 = !DILocation(line: 1285, column: 59, scope: !5295)
!5303 = !DILocation(line: 1285, column: 46, scope: !5295)
!5304 = !DILocation(line: 1285, column: 62, scope: !5295)
!5305 = !DILocation(line: 0, scope: !5295)
!5306 = !DILocation(line: 1285, column: 3, scope: !5295)
!5307 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !2640, file: !2640, line: 233, type: !5308, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5308 = !DISubroutineType(types: !5309)
!5309 = !{null, !2186, !826}
!5310 = !DILocalVariable(name: "use", arg: 1, scope: !5307, file: !2640, line: 233, type: !2186)
!5311 = !DILocation(line: 233, column: 37, scope: !5307)
!5312 = !DILocalVariable(name: "val", arg: 2, scope: !5307, file: !2640, line: 233, type: !826)
!5313 = !DILocation(line: 233, column: 47, scope: !5307)
!5314 = !DILocation(line: 235, column: 19, scope: !5307)
!5315 = !DILocation(line: 235, column: 3, scope: !5307)
!5316 = !DILocation(line: 236, column: 17, scope: !5307)
!5317 = !DILocation(line: 236, column: 5, scope: !5307)
!5318 = !DILocation(line: 236, column: 10, scope: !5307)
!5319 = !DILocation(line: 236, column: 15, scope: !5307)
!5320 = !DILocation(line: 237, column: 17, scope: !5307)
!5321 = !DILocation(line: 237, column: 22, scope: !5307)
!5322 = !DILocation(line: 237, column: 3, scope: !5307)
!5323 = !DILocation(line: 238, column: 1, scope: !5307)
!5324 = distinct !DISubprogram(name: "delink_imm_use", scope: !2640, file: !2640, line: 188, type: !5325, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5325 = !DISubroutineType(types: !5326)
!5326 = !{null, !2187}
!5327 = !DILocalVariable(name: "linknode", arg: 1, scope: !5324, file: !2640, line: 188, type: !2187)
!5328 = !DILocation(line: 188, column: 36, scope: !5324)
!5329 = !DILocation(line: 191, column: 7, scope: !5330)
!5330 = distinct !DILexicalBlock(scope: !5324, file: !2640, line: 191, column: 7)
!5331 = !DILocation(line: 191, column: 17, scope: !5330)
!5332 = !DILocation(line: 191, column: 22, scope: !5330)
!5333 = !DILocation(line: 191, column: 7, scope: !5324)
!5334 = !DILocation(line: 192, column: 5, scope: !5330)
!5335 = !DILocation(line: 194, column: 26, scope: !5324)
!5336 = !DILocation(line: 194, column: 36, scope: !5324)
!5337 = !DILocation(line: 194, column: 3, scope: !5324)
!5338 = !DILocation(line: 194, column: 13, scope: !5324)
!5339 = !DILocation(line: 194, column: 19, scope: !5324)
!5340 = !DILocation(line: 194, column: 24, scope: !5324)
!5341 = !DILocation(line: 195, column: 26, scope: !5324)
!5342 = !DILocation(line: 195, column: 36, scope: !5324)
!5343 = !DILocation(line: 195, column: 3, scope: !5324)
!5344 = !DILocation(line: 195, column: 13, scope: !5324)
!5345 = !DILocation(line: 195, column: 19, scope: !5324)
!5346 = !DILocation(line: 195, column: 24, scope: !5324)
!5347 = !DILocation(line: 196, column: 3, scope: !5324)
!5348 = !DILocation(line: 196, column: 13, scope: !5324)
!5349 = !DILocation(line: 196, column: 18, scope: !5324)
!5350 = !DILocation(line: 197, column: 3, scope: !5324)
!5351 = !DILocation(line: 197, column: 13, scope: !5324)
!5352 = !DILocation(line: 197, column: 18, scope: !5324)
!5353 = !DILocation(line: 198, column: 1, scope: !5324)
!5354 = distinct !DISubprogram(name: "link_imm_use", scope: !2640, file: !2640, line: 214, type: !5355, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5355 = !DISubroutineType(types: !5356)
!5356 = !{null, !2187, !826}
!5357 = !DILocalVariable(name: "linknode", arg: 1, scope: !5354, file: !2640, line: 214, type: !2187)
!5358 = !DILocation(line: 214, column: 34, scope: !5354)
!5359 = !DILocalVariable(name: "def", arg: 2, scope: !5354, file: !2640, line: 214, type: !826)
!5360 = !DILocation(line: 214, column: 49, scope: !5354)
!5361 = !DILocalVariable(name: "root", scope: !5354, file: !2640, line: 216, type: !2187)
!5362 = !DILocation(line: 216, column: 22, scope: !5354)
!5363 = !DILocation(line: 218, column: 8, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5354, file: !2640, line: 218, column: 7)
!5365 = !DILocation(line: 218, column: 12, scope: !5364)
!5366 = !DILocation(line: 218, column: 15, scope: !5364)
!5367 = !DILocation(line: 218, column: 31, scope: !5364)
!5368 = !DILocation(line: 218, column: 7, scope: !5354)
!5369 = !DILocation(line: 219, column: 5, scope: !5364)
!5370 = !DILocation(line: 219, column: 15, scope: !5364)
!5371 = !DILocation(line: 219, column: 20, scope: !5364)
!5372 = !DILocation(line: 222, column: 16, scope: !5373)
!5373 = distinct !DILexicalBlock(scope: !5364, file: !2640, line: 221, column: 5)
!5374 = !DILocation(line: 222, column: 12, scope: !5373)
!5375 = !DILocation(line: 227, column: 29, scope: !5373)
!5376 = !DILocation(line: 227, column: 39, scope: !5373)
!5377 = !DILocation(line: 227, column: 7, scope: !5373)
!5378 = !DILocation(line: 229, column: 1, scope: !5354)
!5379 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !2640, file: !2640, line: 202, type: !5380, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5380 = !DISubroutineType(types: !5381)
!5381 = !{null, !2187, !2187}
!5382 = !DILocalVariable(name: "linknode", arg: 1, scope: !5379, file: !2640, line: 202, type: !2187)
!5383 = !DILocation(line: 202, column: 42, scope: !5379)
!5384 = !DILocalVariable(name: "list", arg: 2, scope: !5379, file: !2640, line: 202, type: !2187)
!5385 = !DILocation(line: 202, column: 71, scope: !5379)
!5386 = !DILocation(line: 206, column: 20, scope: !5379)
!5387 = !DILocation(line: 206, column: 3, scope: !5379)
!5388 = !DILocation(line: 206, column: 13, scope: !5379)
!5389 = !DILocation(line: 206, column: 18, scope: !5379)
!5390 = !DILocation(line: 207, column: 20, scope: !5379)
!5391 = !DILocation(line: 207, column: 26, scope: !5379)
!5392 = !DILocation(line: 207, column: 3, scope: !5379)
!5393 = !DILocation(line: 207, column: 13, scope: !5379)
!5394 = !DILocation(line: 207, column: 18, scope: !5379)
!5395 = !DILocation(line: 208, column: 22, scope: !5379)
!5396 = !DILocation(line: 208, column: 3, scope: !5379)
!5397 = !DILocation(line: 208, column: 9, scope: !5379)
!5398 = !DILocation(line: 208, column: 15, scope: !5379)
!5399 = !DILocation(line: 208, column: 20, scope: !5379)
!5400 = !DILocation(line: 209, column: 16, scope: !5379)
!5401 = !DILocation(line: 209, column: 3, scope: !5379)
!5402 = !DILocation(line: 209, column: 9, scope: !5379)
!5403 = !DILocation(line: 209, column: 14, scope: !5379)
!5404 = !DILocation(line: 210, column: 1, scope: !5379)
!5405 = distinct !DISubprogram(name: "ei_end_p", scope: !135, file: !135, line: 721, type: !5406, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5406 = !DISubroutineType(types: !5407)
!5407 = !{!946, !2533}
!5408 = !DILocalVariable(name: "i", arg: 1, scope: !5405, file: !135, line: 721, type: !2533)
!5409 = !DILocation(line: 721, column: 25, scope: !5405)
!5410 = !DILocation(line: 723, column: 13, scope: !5405)
!5411 = !DILocation(line: 723, column: 22, scope: !5405)
!5412 = !DILocation(line: 723, column: 19, scope: !5405)
!5413 = !DILocation(line: 723, column: 10, scope: !5405)
!5414 = !DILocation(line: 723, column: 3, scope: !5405)
!5415 = distinct !DISubprogram(name: "ei_edge", scope: !135, file: !135, line: 752, type: !5416, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5416 = !DISubroutineType(types: !5417)
!5417 = !{!1137, !2533}
!5418 = !DILocalVariable(name: "i", arg: 1, scope: !5415, file: !135, line: 752, type: !2533)
!5419 = !DILocation(line: 752, column: 24, scope: !5415)
!5420 = !DILocation(line: 754, column: 10, scope: !5415)
!5421 = !DILocation(line: 754, column: 3, scope: !5415)
!5422 = distinct !DISubprogram(name: "ei_container", scope: !135, file: !135, line: 685, type: !5423, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5423 = !DISubroutineType(types: !5424)
!5424 = !{!1125, !2533}
!5425 = !DILocalVariable(name: "i", arg: 1, scope: !5422, file: !135, line: 685, type: !2533)
!5426 = !DILocation(line: 685, column: 29, scope: !5422)
!5427 = !DILocation(line: 687, column: 3, scope: !5422)
!5428 = !DILocation(line: 688, column: 13, scope: !5422)
!5429 = !DILocation(line: 688, column: 10, scope: !5422)
!5430 = !DILocation(line: 688, column: 3, scope: !5422)
!5431 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !398, file: !398, line: 3100, type: !5432, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5432 = !DISubroutineType(types: !5433)
!5433 = !{!5434, !1157, !7}
!5434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1260, size: 64)
!5435 = !DILocalVariable(name: "gs", arg: 1, scope: !5431, file: !398, line: 3100, type: !1157)
!5436 = !DILocation(line: 3100, column: 24, scope: !5431)
!5437 = !DILocalVariable(name: "index", arg: 2, scope: !5431, file: !398, line: 3100, type: !7)
!5438 = !DILocation(line: 3100, column: 37, scope: !5431)
!5439 = !DILocation(line: 3103, column: 3, scope: !5431)
!5440 = !DILocation(line: 3104, column: 12, scope: !5431)
!5441 = !DILocation(line: 3104, column: 16, scope: !5431)
!5442 = !DILocation(line: 3104, column: 27, scope: !5431)
!5443 = !DILocation(line: 3104, column: 32, scope: !5431)
!5444 = !DILocation(line: 3104, column: 3, scope: !5431)
!5445 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !146, file: !146, line: 85, type: !5446, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5446 = !DISubroutineType(types: !5447)
!5447 = !{!7, !5448}
!5448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5449, size: 64)
!5449 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1392)
!5450 = !DILocalVariable(name: "vec_", arg: 1, scope: !5445, file: !146, line: 85, type: !5448)
!5451 = !DILocation(line: 85, column: 1, scope: !5445)
!5452 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !146, file: !146, line: 85, type: !5453, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5453 = !DISubroutineType(types: !5454)
!5454 = !{!1399, !5448, !7}
!5455 = !DILocalVariable(name: "vec_", arg: 1, scope: !5452, file: !146, line: 85, type: !5448)
!5456 = !DILocation(line: 85, column: 1, scope: !5452)
!5457 = !DILocalVariable(name: "ix_", arg: 2, scope: !5452, file: !146, line: 85, type: !7)
!5458 = !DILocation(line: 0, scope: !5452)
!5459 = distinct !DISubprogram(name: "gimple_seq_last", scope: !398, file: !398, line: 178, type: !5128, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5460 = !DILocalVariable(name: "s", arg: 1, scope: !5459, file: !398, line: 178, type: !5130)
!5461 = !DILocation(line: 178, column: 35, scope: !5459)
!5462 = !DILocation(line: 180, column: 10, scope: !5459)
!5463 = !DILocation(line: 180, column: 14, scope: !5459)
!5464 = !DILocation(line: 180, column: 17, scope: !5459)
!5465 = !DILocation(line: 180, column: 3, scope: !5459)
!5466 = distinct !DISubprogram(name: "gimple_uid", scope: !398, file: !398, line: 1265, type: !5467, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5467 = !DISubroutineType(types: !5468)
!5468 = !{!7, !3371}
!5469 = !DILocalVariable(name: "g", arg: 1, scope: !5466, file: !398, line: 1265, type: !3371)
!5470 = !DILocation(line: 1265, column: 26, scope: !5466)
!5471 = !DILocation(line: 1267, column: 10, scope: !5466)
!5472 = !DILocation(line: 1267, column: 13, scope: !5466)
!5473 = !DILocation(line: 1267, column: 20, scope: !5466)
!5474 = !DILocation(line: 1267, column: 3, scope: !5466)
!5475 = distinct !DISubprogram(name: "VEC_vec_void_p_base_length", scope: !408, file: !408, line: 614, type: !5476, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5476 = !DISubroutineType(types: !5477)
!5477 = !{!7, !5478}
!5478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5479, size: 64)
!5479 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5480)
!5480 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vec_void_p_base", file: !408, line: 614, baseType: !5481)
!5481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vec_void_p_base", file: !408, line: 614, size: 128, elements: !5482)
!5482 = !{!5483, !5484, !5485}
!5483 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !5481, file: !408, line: 614, baseType: !7, size: 32)
!5484 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !5481, file: !408, line: 614, baseType: !7, size: 32, offset: 32)
!5485 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !5481, file: !408, line: 614, baseType: !5486, size: 64, offset: 64)
!5486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5487, size: 64, elements: !927)
!5487 = !DIDerivedType(tag: DW_TAG_typedef, name: "vec_void_p", file: !408, line: 613, baseType: !1110)
!5488 = !DILocalVariable(name: "vec_", arg: 1, scope: !5475, file: !408, line: 614, type: !5478)
!5489 = !DILocation(line: 614, column: 1, scope: !5475)
!5490 = distinct !DISubprogram(name: "VEC_vec_void_p_base_index", scope: !408, file: !408, line: 614, type: !5491, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!5487, !5478, !7}
!5493 = !DILocalVariable(name: "vec_", arg: 1, scope: !5490, file: !408, line: 614, type: !5478)
!5494 = !DILocation(line: 614, column: 1, scope: !5490)
!5495 = !DILocalVariable(name: "ix_", arg: 2, scope: !5490, file: !408, line: 614, type: !7)
!5496 = !DILocation(line: 0, scope: !5490)
!5497 = distinct !DISubprogram(name: "block_before_loop", scope: !3540, file: !3540, line: 46, type: !5498, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5498 = !DISubroutineType(types: !5499)
!5499 = !{!1609, !1399}
!5500 = !DILocalVariable(name: "loop", arg: 1, scope: !5497, file: !3540, line: 46, type: !1399)
!5501 = !DILocation(line: 46, column: 27, scope: !5497)
!5502 = !DILocalVariable(name: "preheader", scope: !5497, file: !3540, line: 48, type: !1137)
!5503 = !DILocation(line: 48, column: 8, scope: !5497)
!5504 = !DILocation(line: 48, column: 41, scope: !5497)
!5505 = !DILocation(line: 48, column: 20, scope: !5497)
!5506 = !DILocation(line: 49, column: 11, scope: !5497)
!5507 = !DILocation(line: 49, column: 23, scope: !5497)
!5508 = !DILocation(line: 49, column: 34, scope: !5497)
!5509 = !DILocation(line: 49, column: 40, scope: !5497)
!5510 = !DILocation(line: 49, column: 3, scope: !5497)
!5511 = distinct !DISubprogram(name: "automatically_generated_chrec_p", scope: !3554, file: !3554, line: 37, type: !3555, scopeLine: 38, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5512 = !DILocalVariable(name: "chrec", arg: 1, scope: !5511, file: !3554, line: 37, type: !3557)
!5513 = !DILocation(line: 37, column: 45, scope: !5511)
!5514 = !DILocation(line: 39, column: 11, scope: !5511)
!5515 = !DILocation(line: 39, column: 20, scope: !5511)
!5516 = !DILocation(line: 39, column: 17, scope: !5511)
!5517 = !DILocation(line: 40, column: 4, scope: !5511)
!5518 = !DILocation(line: 40, column: 7, scope: !5511)
!5519 = !DILocation(line: 40, column: 16, scope: !5511)
!5520 = !DILocation(line: 40, column: 13, scope: !5511)
!5521 = !DILocation(line: 39, column: 10, scope: !5511)
!5522 = !DILocation(line: 39, column: 3, scope: !5511)
!5523 = distinct !DISubprogram(name: "VEC_adjust_info_stack_alloc1", scope: !3, file: !3, line: 123, type: !5524, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5524 = !DISubroutineType(types: !5525)
!5525 = !{!2472, !923, !2472}
!5526 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5523, file: !3, line: 123, type: !923)
!5527 = !DILocation(line: 123, column: 1, scope: !5523)
!5528 = !DILocalVariable(name: "space", arg: 2, scope: !5523, file: !3, line: 123, type: !2472)
!5529 = distinct !DISubprogram(name: "VEC_adjust_info_base_embedded_size", scope: !3, file: !3, line: 122, type: !5530, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5530 = !DISubroutineType(types: !5531)
!5531 = !{!1302, !923}
!5532 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5529, file: !3, line: 122, type: !923)
!5533 = !DILocation(line: 122, column: 1, scope: !5529)
!5534 = distinct !DISubprogram(name: "slpeel_update_phis_for_duplicate_loop", scope: !3, file: !3, line: 250, type: !5535, scopeLine: 252, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5535 = !DISubroutineType(types: !5536)
!5536 = !{null, !1372, !1372, !946}
!5537 = !DILocalVariable(name: "orig_loop", arg: 1, scope: !5534, file: !3, line: 250, type: !1372)
!5538 = !DILocation(line: 250, column: 53, scope: !5534)
!5539 = !DILocalVariable(name: "new_loop", arg: 2, scope: !5534, file: !3, line: 251, type: !1372)
!5540 = !DILocation(line: 251, column: 25, scope: !5534)
!5541 = !DILocalVariable(name: "after", arg: 3, scope: !5534, file: !3, line: 251, type: !946)
!5542 = !DILocation(line: 251, column: 40, scope: !5534)
!5543 = !DILocalVariable(name: "new_ssa_name", scope: !5534, file: !3, line: 253, type: !826)
!5544 = !DILocation(line: 253, column: 8, scope: !5534)
!5545 = !DILocalVariable(name: "phi_new", scope: !5534, file: !3, line: 254, type: !1157)
!5546 = !DILocation(line: 254, column: 10, scope: !5534)
!5547 = !DILocalVariable(name: "phi_orig", scope: !5534, file: !3, line: 254, type: !1157)
!5548 = !DILocation(line: 254, column: 19, scope: !5534)
!5549 = !DILocalVariable(name: "def", scope: !5534, file: !3, line: 255, type: !826)
!5550 = !DILocation(line: 255, column: 8, scope: !5534)
!5551 = !DILocalVariable(name: "orig_loop_latch", scope: !5534, file: !3, line: 256, type: !1137)
!5552 = !DILocation(line: 256, column: 8, scope: !5534)
!5553 = !DILocation(line: 256, column: 43, scope: !5534)
!5554 = !DILocation(line: 256, column: 26, scope: !5534)
!5555 = !DILocalVariable(name: "orig_entry_e", scope: !5534, file: !3, line: 257, type: !1137)
!5556 = !DILocation(line: 257, column: 8, scope: !5534)
!5557 = !DILocation(line: 257, column: 44, scope: !5534)
!5558 = !DILocation(line: 257, column: 23, scope: !5534)
!5559 = !DILocalVariable(name: "new_loop_exit_e", scope: !5534, file: !3, line: 258, type: !1137)
!5560 = !DILocation(line: 258, column: 8, scope: !5534)
!5561 = !DILocation(line: 258, column: 39, scope: !5534)
!5562 = !DILocation(line: 258, column: 26, scope: !5534)
!5563 = !DILocalVariable(name: "new_loop_entry_e", scope: !5534, file: !3, line: 259, type: !1137)
!5564 = !DILocation(line: 259, column: 8, scope: !5534)
!5565 = !DILocation(line: 259, column: 48, scope: !5534)
!5566 = !DILocation(line: 259, column: 27, scope: !5534)
!5567 = !DILocalVariable(name: "entry_arg_e", scope: !5534, file: !3, line: 260, type: !1137)
!5568 = !DILocation(line: 260, column: 8, scope: !5534)
!5569 = !DILocation(line: 260, column: 23, scope: !5534)
!5570 = !DILocation(line: 260, column: 31, scope: !5534)
!5571 = !DILocation(line: 260, column: 49, scope: !5534)
!5572 = !DILocalVariable(name: "gsi_new", scope: !5534, file: !3, line: 261, type: !2505)
!5573 = !DILocation(line: 261, column: 24, scope: !5534)
!5574 = !DILocalVariable(name: "gsi_orig", scope: !5534, file: !3, line: 261, type: !2505)
!5575 = !DILocation(line: 261, column: 33, scope: !5534)
!5576 = !DILocation(line: 292, column: 34, scope: !5577)
!5577 = distinct !DILexicalBlock(scope: !5534, file: !3, line: 292, column: 3)
!5578 = !DILocation(line: 292, column: 44, scope: !5577)
!5579 = !DILocation(line: 292, column: 18, scope: !5577)
!5580 = !DILocation(line: 293, column: 35, scope: !5577)
!5581 = !DILocation(line: 293, column: 46, scope: !5577)
!5582 = !DILocation(line: 293, column: 19, scope: !5577)
!5583 = !DILocation(line: 292, column: 8, scope: !5577)
!5584 = !DILocation(line: 294, column: 9, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5577, file: !3, line: 292, column: 3)
!5586 = !DILocation(line: 294, column: 29, scope: !5585)
!5587 = !DILocation(line: 294, column: 33, scope: !5585)
!5588 = !DILocation(line: 294, column: 32, scope: !5585)
!5589 = !DILocation(line: 0, scope: !5585)
!5590 = !DILocation(line: 292, column: 3, scope: !5577)
!5591 = !DILocalVariable(name: "locus", scope: !5592, file: !3, line: 297, type: !956)
!5592 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 296, column: 5)
!5593 = !DILocation(line: 297, column: 23, scope: !5592)
!5594 = !DILocation(line: 298, column: 17, scope: !5592)
!5595 = !DILocation(line: 298, column: 15, scope: !5592)
!5596 = !DILocation(line: 299, column: 18, scope: !5592)
!5597 = !DILocation(line: 299, column: 16, scope: !5592)
!5598 = !DILocation(line: 302, column: 13, scope: !5592)
!5599 = !DILocation(line: 302, column: 11, scope: !5592)
!5600 = !DILocation(line: 303, column: 50, scope: !5592)
!5601 = !DILocation(line: 303, column: 60, scope: !5592)
!5602 = !DILocation(line: 303, column: 15, scope: !5592)
!5603 = !DILocation(line: 303, column: 13, scope: !5592)
!5604 = !DILocation(line: 304, column: 20, scope: !5592)
!5605 = !DILocation(line: 304, column: 29, scope: !5592)
!5606 = !DILocation(line: 304, column: 34, scope: !5592)
!5607 = !DILocation(line: 304, column: 52, scope: !5592)
!5608 = !DILocation(line: 304, column: 7, scope: !5592)
!5609 = !DILocation(line: 307, column: 13, scope: !5592)
!5610 = !DILocation(line: 307, column: 11, scope: !5592)
!5611 = !DILocation(line: 308, column: 50, scope: !5592)
!5612 = !DILocation(line: 308, column: 60, scope: !5592)
!5613 = !DILocation(line: 308, column: 15, scope: !5592)
!5614 = !DILocation(line: 308, column: 13, scope: !5592)
!5615 = !DILocation(line: 309, column: 11, scope: !5616)
!5616 = distinct !DILexicalBlock(scope: !5592, file: !3, line: 309, column: 11)
!5617 = !DILocation(line: 309, column: 27, scope: !5616)
!5618 = !DILocation(line: 309, column: 11, scope: !5592)
!5619 = !DILocation(line: 310, column: 9, scope: !5616)
!5620 = !DILocation(line: 312, column: 39, scope: !5592)
!5621 = !DILocation(line: 312, column: 22, scope: !5592)
!5622 = !DILocation(line: 312, column: 20, scope: !5592)
!5623 = !DILocation(line: 313, column: 12, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !5592, file: !3, line: 313, column: 11)
!5625 = !DILocation(line: 313, column: 11, scope: !5592)
!5626 = !DILocation(line: 317, column: 19, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 314, column: 2)
!5628 = !DILocation(line: 317, column: 17, scope: !5627)
!5629 = !DILocation(line: 318, column: 2, scope: !5627)
!5630 = !DILocation(line: 321, column: 20, scope: !5592)
!5631 = !DILocation(line: 321, column: 29, scope: !5592)
!5632 = !DILocation(line: 321, column: 60, scope: !5592)
!5633 = !DILocation(line: 321, column: 43, scope: !5592)
!5634 = !DILocation(line: 321, column: 71, scope: !5592)
!5635 = !DILocation(line: 321, column: 7, scope: !5592)
!5636 = !DILocation(line: 325, column: 27, scope: !5592)
!5637 = !DILocation(line: 325, column: 51, scope: !5592)
!5638 = !DILocation(line: 325, column: 38, scope: !5592)
!5639 = !DILocation(line: 325, column: 63, scope: !5592)
!5640 = !DILocation(line: 325, column: 7, scope: !5592)
!5641 = !DILocation(line: 328, column: 12, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5592, file: !3, line: 328, column: 11)
!5643 = !DILocation(line: 328, column: 11, scope: !5592)
!5644 = !DILocation(line: 330, column: 11, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 329, column: 9)
!5646 = !DILocation(line: 331, column: 32, scope: !5645)
!5647 = !DILocation(line: 331, column: 42, scope: !5645)
!5648 = !DILocation(line: 331, column: 59, scope: !5645)
!5649 = !DILocation(line: 331, column: 4, scope: !5645)
!5650 = !DILocation(line: 332, column: 9, scope: !5645)
!5651 = !DILocation(line: 333, column: 5, scope: !5592)
!5652 = !DILocation(line: 295, column: 8, scope: !5585)
!5653 = !DILocation(line: 295, column: 29, scope: !5585)
!5654 = !DILocation(line: 292, column: 3, scope: !5585)
!5655 = distinct !{!5655, !5590, !5656}
!5656 = !DILocation(line: 333, column: 5, scope: !5577)
!5657 = !DILocation(line: 334, column: 1, scope: !5534)
!5658 = distinct !DISubprogram(name: "loop_vec_info_for_loop", scope: !408, file: !408, line: 291, type: !5659, scopeLine: 292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5659 = !DISubroutineType(types: !5660)
!5660 = !{!2196, !1372}
!5661 = !DILocalVariable(name: "loop", arg: 1, scope: !5658, file: !408, line: 291, type: !1372)
!5662 = !DILocation(line: 291, column: 38, scope: !5658)
!5663 = !DILocation(line: 293, column: 26, scope: !5658)
!5664 = !DILocation(line: 293, column: 32, scope: !5658)
!5665 = !DILocation(line: 293, column: 10, scope: !5658)
!5666 = !DILocation(line: 293, column: 3, scope: !5658)
!5667 = distinct !DISubprogram(name: "set_prologue_iterations", scope: !3, file: !3, line: 1039, type: !5668, scopeLine: 1043, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5668 = !DISubroutineType(types: !5669)
!5669 = !{null, !1609, !826, !1372, !7}
!5670 = !DILocalVariable(name: "bb_before_first_loop", arg: 1, scope: !5667, file: !3, line: 1039, type: !1609)
!5671 = !DILocation(line: 1039, column: 38, scope: !5667)
!5672 = !DILocalVariable(name: "first_niters", arg: 2, scope: !5667, file: !3, line: 1040, type: !826)
!5673 = !DILocation(line: 1040, column: 10, scope: !5667)
!5674 = !DILocalVariable(name: "loop", arg: 3, scope: !5667, file: !3, line: 1041, type: !1372)
!5675 = !DILocation(line: 1041, column: 18, scope: !5667)
!5676 = !DILocalVariable(name: "th", arg: 4, scope: !5667, file: !3, line: 1042, type: !7)
!5677 = !DILocation(line: 1042, column: 18, scope: !5667)
!5678 = !DILocalVariable(name: "e", scope: !5667, file: !3, line: 1044, type: !1137)
!5679 = !DILocation(line: 1044, column: 8, scope: !5667)
!5680 = !DILocalVariable(name: "cond_bb", scope: !5667, file: !3, line: 1045, type: !1609)
!5681 = !DILocation(line: 1045, column: 15, scope: !5667)
!5682 = !DILocalVariable(name: "then_bb", scope: !5667, file: !3, line: 1045, type: !1609)
!5683 = !DILocation(line: 1045, column: 24, scope: !5667)
!5684 = !DILocalVariable(name: "var", scope: !5667, file: !3, line: 1046, type: !826)
!5685 = !DILocation(line: 1046, column: 8, scope: !5667)
!5686 = !DILocalVariable(name: "prologue_after_cost_adjust_name", scope: !5667, file: !3, line: 1046, type: !826)
!5687 = !DILocation(line: 1046, column: 13, scope: !5667)
!5688 = !DILocalVariable(name: "gsi", scope: !5667, file: !3, line: 1047, type: !2505)
!5689 = !DILocation(line: 1047, column: 24, scope: !5667)
!5690 = !DILocalVariable(name: "newphi", scope: !5667, file: !3, line: 1048, type: !1157)
!5691 = !DILocation(line: 1048, column: 10, scope: !5667)
!5692 = !DILocalVariable(name: "e_true", scope: !5667, file: !3, line: 1049, type: !1137)
!5693 = !DILocation(line: 1049, column: 8, scope: !5667)
!5694 = !DILocalVariable(name: "e_false", scope: !5667, file: !3, line: 1049, type: !1137)
!5695 = !DILocation(line: 1049, column: 16, scope: !5667)
!5696 = !DILocalVariable(name: "e_fallthru", scope: !5667, file: !3, line: 1049, type: !1137)
!5697 = !DILocation(line: 1049, column: 25, scope: !5667)
!5698 = !DILocalVariable(name: "cond_stmt", scope: !5667, file: !3, line: 1050, type: !1157)
!5699 = !DILocation(line: 1050, column: 10, scope: !5667)
!5700 = !DILocalVariable(name: "gimplify_stmt_list", scope: !5667, file: !3, line: 1051, type: !1147)
!5701 = !DILocation(line: 1051, column: 14, scope: !5667)
!5702 = !DILocalVariable(name: "stmts", scope: !5667, file: !3, line: 1051, type: !1147)
!5703 = !DILocation(line: 1051, column: 41, scope: !5667)
!5704 = !DILocalVariable(name: "cost_pre_condition", scope: !5667, file: !3, line: 1052, type: !826)
!5705 = !DILocation(line: 1052, column: 8, scope: !5667)
!5706 = !DILocalVariable(name: "scalar_loop_iters", scope: !5667, file: !3, line: 1053, type: !826)
!5707 = !DILocation(line: 1053, column: 8, scope: !5667)
!5708 = !DILocation(line: 1054, column: 19, scope: !5667)
!5709 = !DILocation(line: 1054, column: 5, scope: !5667)
!5710 = !DILocation(line: 1056, column: 25, scope: !5667)
!5711 = !DILocation(line: 1056, column: 7, scope: !5667)
!5712 = !DILocation(line: 1056, column: 5, scope: !5667)
!5713 = !DILocation(line: 1057, column: 24, scope: !5667)
!5714 = !DILocation(line: 1057, column: 13, scope: !5667)
!5715 = !DILocation(line: 1057, column: 11, scope: !5667)
!5716 = !DILocation(line: 1059, column: 25, scope: !5667)
!5717 = !DILocation(line: 1059, column: 7, scope: !5667)
!5718 = !DILocation(line: 1059, column: 5, scope: !5667)
!5719 = !DILocation(line: 1060, column: 24, scope: !5667)
!5720 = !DILocation(line: 1060, column: 13, scope: !5667)
!5721 = !DILocation(line: 1060, column: 11, scope: !5667)
!5722 = !DILocation(line: 1061, column: 44, scope: !5667)
!5723 = !DILocation(line: 1061, column: 53, scope: !5667)
!5724 = !DILocation(line: 1061, column: 3, scope: !5667)
!5725 = !DILocation(line: 1063, column: 36, scope: !5667)
!5726 = !DILocation(line: 1063, column: 45, scope: !5667)
!5727 = !DILocation(line: 1063, column: 13, scope: !5667)
!5728 = !DILocation(line: 1063, column: 11, scope: !5667)
!5729 = !DILocation(line: 1065, column: 44, scope: !5667)
!5730 = !DILocation(line: 1065, column: 66, scope: !5667)
!5731 = !DILocation(line: 1065, column: 3, scope: !5667)
!5732 = !DILocation(line: 1067, column: 12, scope: !5667)
!5733 = !DILocation(line: 1067, column: 10, scope: !5667)
!5734 = !DILocation(line: 1068, column: 3, scope: !5667)
!5735 = !DILocation(line: 1068, column: 11, scope: !5667)
!5736 = !DILocation(line: 1068, column: 17, scope: !5667)
!5737 = !DILocation(line: 1069, column: 3, scope: !5667)
!5738 = !DILocation(line: 1069, column: 11, scope: !5667)
!5739 = !DILocation(line: 1069, column: 17, scope: !5667)
!5740 = !DILocation(line: 1071, column: 16, scope: !5667)
!5741 = !DILocation(line: 1071, column: 14, scope: !5667)
!5742 = !DILocation(line: 1074, column: 5, scope: !5667)
!5743 = !DILocation(line: 1073, column: 22, scope: !5667)
!5744 = !DILocation(line: 1077, column: 27, scope: !5667)
!5745 = !DILocation(line: 1077, column: 5, scope: !5667)
!5746 = !DILocation(line: 1076, column: 22, scope: !5667)
!5747 = !DILocation(line: 1079, column: 43, scope: !5667)
!5748 = !DILocation(line: 1080, column: 21, scope: !5667)
!5749 = !DILocation(line: 1080, column: 6, scope: !5667)
!5750 = !DILocation(line: 1079, column: 15, scope: !5667)
!5751 = !DILocation(line: 1079, column: 13, scope: !5667)
!5752 = !DILocation(line: 1083, column: 22, scope: !5667)
!5753 = !DILocation(line: 1083, column: 9, scope: !5667)
!5754 = !DILocation(line: 1084, column: 7, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5667, file: !3, line: 1084, column: 7)
!5756 = !DILocation(line: 1084, column: 7, scope: !5667)
!5757 = !DILocation(line: 1085, column: 33, scope: !5755)
!5758 = !DILocation(line: 1085, column: 5, scope: !5755)
!5759 = !DILocation(line: 1087, column: 22, scope: !5667)
!5760 = !DILocation(line: 1087, column: 9, scope: !5667)
!5761 = !DILocation(line: 1088, column: 27, scope: !5667)
!5762 = !DILocation(line: 1088, column: 3, scope: !5667)
!5763 = !DILocation(line: 1090, column: 25, scope: !5667)
!5764 = !DILocation(line: 1090, column: 9, scope: !5667)
!5765 = !DILocation(line: 1090, column: 7, scope: !5667)
!5766 = !DILocation(line: 1092, column: 23, scope: !5667)
!5767 = !DILocation(line: 1092, column: 3, scope: !5667)
!5768 = !DILocation(line: 1094, column: 27, scope: !5667)
!5769 = !DILocation(line: 1094, column: 61, scope: !5667)
!5770 = !DILocation(line: 1094, column: 5, scope: !5667)
!5771 = !DILocation(line: 1093, column: 35, scope: !5667)
!5772 = !DILocation(line: 1096, column: 22, scope: !5667)
!5773 = !DILocation(line: 1096, column: 9, scope: !5667)
!5774 = !DILocation(line: 1097, column: 7, scope: !5775)
!5775 = distinct !DILexicalBlock(scope: !5667, file: !3, line: 1097, column: 7)
!5776 = !DILocation(line: 1097, column: 7, scope: !5667)
!5777 = !DILocation(line: 1098, column: 33, scope: !5775)
!5778 = !DILocation(line: 1098, column: 5, scope: !5775)
!5779 = !DILocation(line: 1100, column: 29, scope: !5667)
!5780 = !DILocation(line: 1100, column: 34, scope: !5667)
!5781 = !DILocation(line: 1100, column: 12, scope: !5667)
!5782 = !DILocation(line: 1100, column: 10, scope: !5667)
!5783 = !DILocation(line: 1101, column: 16, scope: !5667)
!5784 = !DILocation(line: 1101, column: 24, scope: !5667)
!5785 = !DILocation(line: 1101, column: 57, scope: !5667)
!5786 = !DILocation(line: 1101, column: 3, scope: !5667)
!5787 = !DILocation(line: 1103, column: 16, scope: !5667)
!5788 = !DILocation(line: 1103, column: 24, scope: !5667)
!5789 = !DILocation(line: 1103, column: 38, scope: !5667)
!5790 = !DILocation(line: 1103, column: 3, scope: !5667)
!5791 = !DILocation(line: 1105, column: 18, scope: !5667)
!5792 = !DILocation(line: 1105, column: 16, scope: !5667)
!5793 = !DILocation(line: 1106, column: 1, scope: !5667)
!5794 = distinct !DISubprogram(name: "slpeel_add_loop_guard", scope: !3, file: !3, line: 932, type: !5795, scopeLine: 935, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5795 = !DISubroutineType(types: !5796)
!5796 = !{!1137, !1609, !826, !1147, !1609, !1609}
!5797 = !DILocalVariable(name: "guard_bb", arg: 1, scope: !5794, file: !3, line: 932, type: !1609)
!5798 = !DILocation(line: 932, column: 36, scope: !5794)
!5799 = !DILocalVariable(name: "cond", arg: 2, scope: !5794, file: !3, line: 932, type: !826)
!5800 = !DILocation(line: 932, column: 51, scope: !5794)
!5801 = !DILocalVariable(name: "cond_expr_stmt_list", arg: 3, scope: !5794, file: !3, line: 933, type: !1147)
!5802 = !DILocation(line: 933, column: 21, scope: !5794)
!5803 = !DILocalVariable(name: "exit_bb", arg: 4, scope: !5794, file: !3, line: 934, type: !1609)
!5804 = !DILocation(line: 934, column: 22, scope: !5794)
!5805 = !DILocalVariable(name: "dom_bb", arg: 5, scope: !5794, file: !3, line: 934, type: !1609)
!5806 = !DILocation(line: 934, column: 43, scope: !5794)
!5807 = !DILocalVariable(name: "gsi", scope: !5794, file: !3, line: 936, type: !2505)
!5808 = !DILocation(line: 936, column: 24, scope: !5794)
!5809 = !DILocalVariable(name: "new_e", scope: !5794, file: !3, line: 937, type: !1137)
!5810 = !DILocation(line: 937, column: 8, scope: !5794)
!5811 = !DILocalVariable(name: "enter_e", scope: !5794, file: !3, line: 937, type: !1137)
!5812 = !DILocation(line: 937, column: 15, scope: !5794)
!5813 = !DILocalVariable(name: "cond_stmt", scope: !5794, file: !3, line: 938, type: !1157)
!5814 = !DILocation(line: 938, column: 10, scope: !5794)
!5815 = !DILocalVariable(name: "gimplify_stmt_list", scope: !5794, file: !3, line: 939, type: !1147)
!5816 = !DILocation(line: 939, column: 14, scope: !5794)
!5817 = !DILocation(line: 941, column: 13, scope: !5794)
!5818 = !DILocation(line: 941, column: 11, scope: !5794)
!5819 = !DILocation(line: 942, column: 3, scope: !5794)
!5820 = !DILocation(line: 942, column: 12, scope: !5794)
!5821 = !DILocation(line: 942, column: 18, scope: !5794)
!5822 = !DILocation(line: 943, column: 3, scope: !5794)
!5823 = !DILocation(line: 943, column: 12, scope: !5794)
!5824 = !DILocation(line: 943, column: 18, scope: !5794)
!5825 = !DILocation(line: 944, column: 22, scope: !5794)
!5826 = !DILocation(line: 944, column: 9, scope: !5794)
!5827 = !DILocation(line: 946, column: 32, scope: !5794)
!5828 = !DILocation(line: 946, column: 10, scope: !5794)
!5829 = !DILocation(line: 946, column: 8, scope: !5794)
!5830 = !DILocation(line: 947, column: 7, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5794, file: !3, line: 947, column: 7)
!5832 = !DILocation(line: 947, column: 7, scope: !5794)
!5833 = !DILocation(line: 948, column: 47, scope: !5831)
!5834 = !DILocation(line: 948, column: 5, scope: !5831)
!5835 = !DILocation(line: 950, column: 6, scope: !5794)
!5836 = !DILocation(line: 950, column: 27, scope: !5794)
!5837 = !DILocation(line: 950, column: 12, scope: !5794)
!5838 = !DILocation(line: 949, column: 15, scope: !5794)
!5839 = !DILocation(line: 949, column: 13, scope: !5794)
!5840 = !DILocation(line: 952, column: 7, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5794, file: !3, line: 952, column: 7)
!5842 = !DILocation(line: 952, column: 7, scope: !5794)
!5843 = !DILocation(line: 953, column: 33, scope: !5841)
!5844 = !DILocation(line: 953, column: 5, scope: !5841)
!5845 = !DILocation(line: 955, column: 22, scope: !5794)
!5846 = !DILocation(line: 955, column: 9, scope: !5794)
!5847 = !DILocation(line: 956, column: 27, scope: !5794)
!5848 = !DILocation(line: 956, column: 3, scope: !5794)
!5849 = !DILocation(line: 959, column: 22, scope: !5794)
!5850 = !DILocation(line: 959, column: 32, scope: !5794)
!5851 = !DILocation(line: 959, column: 11, scope: !5794)
!5852 = !DILocation(line: 959, column: 9, scope: !5794)
!5853 = !DILocation(line: 960, column: 44, scope: !5794)
!5854 = !DILocation(line: 960, column: 53, scope: !5794)
!5855 = !DILocation(line: 960, column: 3, scope: !5794)
!5856 = !DILocation(line: 961, column: 10, scope: !5794)
!5857 = !DILocation(line: 961, column: 3, scope: !5794)
!5858 = distinct !DISubprogram(name: "slpeel_update_phi_nodes_for_guard1", scope: !3, file: !3, line: 491, type: !5859, scopeLine: 494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!5859 = !DISubroutineType(types: !5860)
!5860 = !{null, !1137, !1372, !946, !2185, !5861}
!5861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!5862 = !DILocalVariable(name: "guard_edge", arg: 1, scope: !5858, file: !3, line: 491, type: !1137)
!5863 = !DILocation(line: 491, column: 42, scope: !5858)
!5864 = !DILocalVariable(name: "loop", arg: 2, scope: !5858, file: !3, line: 491, type: !1372)
!5865 = !DILocation(line: 491, column: 67, scope: !5858)
!5866 = !DILocalVariable(name: "is_new_loop", arg: 3, scope: !5858, file: !3, line: 492, type: !946)
!5867 = !DILocation(line: 492, column: 42, scope: !5858)
!5868 = !DILocalVariable(name: "new_exit_bb", arg: 4, scope: !5858, file: !3, line: 492, type: !2185)
!5869 = !DILocation(line: 492, column: 68, scope: !5858)
!5870 = !DILocalVariable(name: "defs", arg: 5, scope: !5858, file: !3, line: 493, type: !5861)
!5871 = !DILocation(line: 493, column: 45, scope: !5858)
!5872 = !DILocalVariable(name: "orig_phi", scope: !5858, file: !3, line: 495, type: !1157)
!5873 = !DILocation(line: 495, column: 10, scope: !5858)
!5874 = !DILocalVariable(name: "new_phi", scope: !5858, file: !3, line: 495, type: !1157)
!5875 = !DILocation(line: 495, column: 20, scope: !5858)
!5876 = !DILocalVariable(name: "update_phi", scope: !5858, file: !3, line: 496, type: !1157)
!5877 = !DILocation(line: 496, column: 10, scope: !5858)
!5878 = !DILocalVariable(name: "update_phi2", scope: !5858, file: !3, line: 496, type: !1157)
!5879 = !DILocation(line: 496, column: 22, scope: !5858)
!5880 = !DILocalVariable(name: "guard_arg", scope: !5858, file: !3, line: 497, type: !826)
!5881 = !DILocation(line: 497, column: 8, scope: !5858)
!5882 = !DILocalVariable(name: "loop_arg", scope: !5858, file: !3, line: 497, type: !826)
!5883 = !DILocation(line: 497, column: 19, scope: !5858)
!5884 = !DILocalVariable(name: "new_merge_bb", scope: !5858, file: !3, line: 498, type: !1609)
!5885 = !DILocation(line: 498, column: 15, scope: !5858)
!5886 = !DILocation(line: 498, column: 30, scope: !5858)
!5887 = !DILocation(line: 498, column: 42, scope: !5858)
!5888 = !DILocalVariable(name: "e", scope: !5858, file: !3, line: 499, type: !1137)
!5889 = !DILocation(line: 499, column: 8, scope: !5858)
!5890 = !DILocation(line: 499, column: 12, scope: !5858)
!5891 = !DILocalVariable(name: "update_bb", scope: !5858, file: !3, line: 500, type: !1609)
!5892 = !DILocation(line: 500, column: 15, scope: !5858)
!5893 = !DILocation(line: 500, column: 27, scope: !5858)
!5894 = !DILocation(line: 500, column: 30, scope: !5858)
!5895 = !DILocalVariable(name: "orig_bb", scope: !5858, file: !3, line: 501, type: !1609)
!5896 = !DILocation(line: 501, column: 15, scope: !5858)
!5897 = !DILocation(line: 501, column: 25, scope: !5858)
!5898 = !DILocation(line: 501, column: 31, scope: !5858)
!5899 = !DILocalVariable(name: "new_exit_e", scope: !5858, file: !3, line: 502, type: !1137)
!5900 = !DILocation(line: 502, column: 8, scope: !5858)
!5901 = !DILocalVariable(name: "current_new_name", scope: !5858, file: !3, line: 503, type: !826)
!5902 = !DILocation(line: 503, column: 8, scope: !5858)
!5903 = !DILocalVariable(name: "gsi_orig", scope: !5858, file: !3, line: 504, type: !2505)
!5904 = !DILocation(line: 504, column: 24, scope: !5858)
!5905 = !DILocalVariable(name: "gsi_update", scope: !5858, file: !3, line: 504, type: !2505)
!5906 = !DILocation(line: 504, column: 34, scope: !5858)
!5907 = !DILocation(line: 507, column: 43, scope: !5858)
!5908 = !DILocation(line: 507, column: 30, scope: !5858)
!5909 = !DILocation(line: 507, column: 18, scope: !5858)
!5910 = !DILocation(line: 507, column: 4, scope: !5858)
!5911 = !DILocation(line: 507, column: 16, scope: !5858)
!5912 = !DILocation(line: 509, column: 16, scope: !5858)
!5913 = !DILocation(line: 509, column: 14, scope: !5858)
!5914 = !DILocation(line: 511, column: 35, scope: !5915)
!5915 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 511, column: 3)
!5916 = !DILocation(line: 511, column: 19, scope: !5915)
!5917 = !DILocation(line: 512, column: 37, scope: !5915)
!5918 = !DILocation(line: 512, column: 21, scope: !5915)
!5919 = !DILocation(line: 511, column: 8, scope: !5915)
!5920 = !DILocation(line: 513, column: 9, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5915, file: !3, line: 511, column: 3)
!5922 = !DILocation(line: 513, column: 30, scope: !5921)
!5923 = !DILocation(line: 513, column: 34, scope: !5921)
!5924 = !DILocation(line: 513, column: 33, scope: !5921)
!5925 = !DILocation(line: 0, scope: !5921)
!5926 = !DILocation(line: 511, column: 3, scope: !5915)
!5927 = !DILocalVariable(name: "loop_locus", scope: !5928, file: !3, line: 516, type: !956)
!5928 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 515, column: 5)
!5929 = !DILocation(line: 516, column: 23, scope: !5928)
!5930 = !DILocalVariable(name: "guard_locus", scope: !5928, file: !3, line: 516, type: !956)
!5931 = !DILocation(line: 516, column: 35, scope: !5928)
!5932 = !DILocation(line: 517, column: 18, scope: !5928)
!5933 = !DILocation(line: 517, column: 16, scope: !5928)
!5934 = !DILocation(line: 518, column: 20, scope: !5928)
!5935 = !DILocation(line: 518, column: 18, scope: !5928)
!5936 = !DILocation(line: 523, column: 34, scope: !5928)
!5937 = !DILocation(line: 524, column: 34, scope: !5928)
!5938 = !DILocation(line: 523, column: 17, scope: !5928)
!5939 = !DILocation(line: 523, column: 15, scope: !5928)
!5940 = !DILocation(line: 528, column: 18, scope: !5928)
!5941 = !DILocation(line: 528, column: 16, scope: !5928)
!5942 = !DILocation(line: 529, column: 55, scope: !5928)
!5943 = !DILocation(line: 530, column: 13, scope: !5928)
!5944 = !DILocation(line: 529, column: 20, scope: !5928)
!5945 = !DILocation(line: 529, column: 18, scope: !5928)
!5946 = !DILocation(line: 532, column: 19, scope: !5928)
!5947 = !DILocation(line: 532, column: 17, scope: !5928)
!5948 = !DILocation(line: 534, column: 39, scope: !5928)
!5949 = !DILocation(line: 535, column: 32, scope: !5928)
!5950 = !DILocation(line: 535, column: 11, scope: !5928)
!5951 = !DILocation(line: 534, column: 4, scope: !5928)
!5952 = !DILocation(line: 534, column: 2, scope: !5928)
!5953 = !DILocation(line: 537, column: 20, scope: !5928)
!5954 = !DILocation(line: 537, column: 29, scope: !5928)
!5955 = !DILocation(line: 537, column: 39, scope: !5928)
!5956 = !DILocation(line: 537, column: 51, scope: !5928)
!5957 = !DILocation(line: 537, column: 7, scope: !5928)
!5958 = !DILocation(line: 538, column: 20, scope: !5928)
!5959 = !DILocation(line: 538, column: 29, scope: !5928)
!5960 = !DILocation(line: 538, column: 40, scope: !5928)
!5961 = !DILocation(line: 538, column: 52, scope: !5928)
!5962 = !DILocation(line: 538, column: 7, scope: !5928)
!5963 = !DILocation(line: 541, column: 7, scope: !5928)
!5964 = !DILocation(line: 543, column: 35, scope: !5928)
!5965 = !DILocation(line: 543, column: 47, scope: !5928)
!5966 = !DILocation(line: 543, column: 50, scope: !5928)
!5967 = !DILocation(line: 543, column: 7, scope: !5928)
!5968 = !DILocation(line: 544, column: 21, scope: !5928)
!5969 = !DILocation(line: 544, column: 19, scope: !5928)
!5970 = !DILocation(line: 549, column: 27, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 549, column: 11)
!5972 = !DILocation(line: 549, column: 12, scope: !5971)
!5973 = !DILocation(line: 549, column: 11, scope: !5928)
!5974 = !DILocation(line: 550, column: 2, scope: !5971)
!5975 = !DILocation(line: 553, column: 34, scope: !5928)
!5976 = !DILocation(line: 554, column: 35, scope: !5928)
!5977 = !DILocation(line: 554, column: 34, scope: !5928)
!5978 = !DILocation(line: 553, column: 17, scope: !5928)
!5979 = !DILocation(line: 553, column: 15, scope: !5928)
!5980 = !DILocation(line: 557, column: 20, scope: !5928)
!5981 = !DILocation(line: 557, column: 29, scope: !5928)
!5982 = !DILocation(line: 557, column: 52, scope: !5928)
!5983 = !DILocation(line: 557, column: 39, scope: !5928)
!5984 = !DILocation(line: 557, column: 59, scope: !5928)
!5985 = !DILocation(line: 557, column: 7, scope: !5928)
!5986 = !DILocation(line: 560, column: 7, scope: !5928)
!5987 = !DILocation(line: 561, column: 35, scope: !5928)
!5988 = !DILocation(line: 561, column: 48, scope: !5928)
!5989 = !DILocation(line: 562, column: 7, scope: !5928)
!5990 = !DILocation(line: 561, column: 7, scope: !5928)
!5991 = !DILocation(line: 574, column: 11, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 574, column: 11)
!5993 = !DILocation(line: 574, column: 11, scope: !5928)
!5994 = !DILocation(line: 575, column: 28, scope: !5992)
!5995 = !DILocation(line: 575, column: 26, scope: !5992)
!5996 = !DILocation(line: 575, column: 9, scope: !5992)
!5997 = !DILocation(line: 578, column: 47, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 577, column: 9)
!5999 = !DILocation(line: 578, column: 30, scope: !5998)
!6000 = !DILocation(line: 578, column: 28, scope: !5998)
!6001 = !DILocation(line: 583, column: 9, scope: !6002)
!6002 = distinct !DILexicalBlock(scope: !5998, file: !3, line: 583, column: 8)
!6003 = !DILocation(line: 583, column: 8, scope: !5998)
!6004 = !DILocation(line: 584, column: 6, scope: !6002)
!6005 = !DILocation(line: 586, column: 7, scope: !5928)
!6006 = !DILocation(line: 588, column: 24, scope: !5928)
!6007 = !DILocation(line: 588, column: 42, scope: !5928)
!6008 = !DILocation(line: 588, column: 7, scope: !5928)
!6009 = !DILocation(line: 589, column: 24, scope: !5928)
!6010 = !DILocation(line: 589, column: 23, scope: !5928)
!6011 = !DILocation(line: 589, column: 30, scope: !5928)
!6012 = !DILocation(line: 589, column: 7, scope: !5928)
!6013 = !DILocation(line: 590, column: 5, scope: !5928)
!6014 = !DILocation(line: 514, column: 8, scope: !5921)
!6015 = !DILocation(line: 514, column: 30, scope: !5921)
!6016 = !DILocation(line: 511, column: 3, scope: !5921)
!6017 = distinct !{!6017, !5926, !6018}
!6018 = !DILocation(line: 590, column: 5, scope: !5915)
!6019 = !DILocation(line: 591, column: 1, scope: !5858)
!6020 = distinct !DISubprogram(name: "slpeel_update_phi_nodes_for_guard2", scope: !3, file: !3, line: 621, type: !6021, scopeLine: 623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6021 = !DISubroutineType(types: !6022)
!6022 = !{null, !1137, !1372, !946, !2185}
!6023 = !DILocalVariable(name: "guard_edge", arg: 1, scope: !6020, file: !3, line: 621, type: !1137)
!6024 = !DILocation(line: 621, column: 42, scope: !6020)
!6025 = !DILocalVariable(name: "loop", arg: 2, scope: !6020, file: !3, line: 621, type: !1372)
!6026 = !DILocation(line: 621, column: 67, scope: !6020)
!6027 = !DILocalVariable(name: "is_new_loop", arg: 3, scope: !6020, file: !3, line: 622, type: !946)
!6028 = !DILocation(line: 622, column: 42, scope: !6020)
!6029 = !DILocalVariable(name: "new_exit_bb", arg: 4, scope: !6020, file: !3, line: 622, type: !2185)
!6030 = !DILocation(line: 622, column: 68, scope: !6020)
!6031 = !DILocalVariable(name: "orig_phi", scope: !6020, file: !3, line: 624, type: !1157)
!6032 = !DILocation(line: 624, column: 10, scope: !6020)
!6033 = !DILocalVariable(name: "new_phi", scope: !6020, file: !3, line: 624, type: !1157)
!6034 = !DILocation(line: 624, column: 20, scope: !6020)
!6035 = !DILocalVariable(name: "update_phi", scope: !6020, file: !3, line: 625, type: !1157)
!6036 = !DILocation(line: 625, column: 10, scope: !6020)
!6037 = !DILocalVariable(name: "update_phi2", scope: !6020, file: !3, line: 625, type: !1157)
!6038 = !DILocation(line: 625, column: 22, scope: !6020)
!6039 = !DILocalVariable(name: "guard_arg", scope: !6020, file: !3, line: 626, type: !826)
!6040 = !DILocation(line: 626, column: 8, scope: !6020)
!6041 = !DILocalVariable(name: "loop_arg", scope: !6020, file: !3, line: 626, type: !826)
!6042 = !DILocation(line: 626, column: 19, scope: !6020)
!6043 = !DILocalVariable(name: "new_merge_bb", scope: !6020, file: !3, line: 627, type: !1609)
!6044 = !DILocation(line: 627, column: 15, scope: !6020)
!6045 = !DILocation(line: 627, column: 30, scope: !6020)
!6046 = !DILocation(line: 627, column: 42, scope: !6020)
!6047 = !DILocalVariable(name: "e", scope: !6020, file: !3, line: 628, type: !1137)
!6048 = !DILocation(line: 628, column: 8, scope: !6020)
!6049 = !DILocation(line: 628, column: 12, scope: !6020)
!6050 = !DILocalVariable(name: "update_bb", scope: !6020, file: !3, line: 629, type: !1609)
!6051 = !DILocation(line: 629, column: 15, scope: !6020)
!6052 = !DILocation(line: 629, column: 27, scope: !6020)
!6053 = !DILocation(line: 629, column: 30, scope: !6020)
!6054 = !DILocalVariable(name: "new_exit_e", scope: !6020, file: !3, line: 630, type: !1137)
!6055 = !DILocation(line: 630, column: 8, scope: !6020)
!6056 = !DILocalVariable(name: "orig_def", scope: !6020, file: !3, line: 631, type: !826)
!6057 = !DILocation(line: 631, column: 8, scope: !6020)
!6058 = !DILocalVariable(name: "orig_def_new_name", scope: !6020, file: !3, line: 631, type: !826)
!6059 = !DILocation(line: 631, column: 18, scope: !6020)
!6060 = !DILocalVariable(name: "new_name", scope: !6020, file: !3, line: 632, type: !826)
!6061 = !DILocation(line: 632, column: 8, scope: !6020)
!6062 = !DILocalVariable(name: "new_name2", scope: !6020, file: !3, line: 632, type: !826)
!6063 = !DILocation(line: 632, column: 18, scope: !6020)
!6064 = !DILocalVariable(name: "arg", scope: !6020, file: !3, line: 633, type: !826)
!6065 = !DILocation(line: 633, column: 8, scope: !6020)
!6066 = !DILocalVariable(name: "gsi", scope: !6020, file: !3, line: 634, type: !2505)
!6067 = !DILocation(line: 634, column: 24, scope: !6020)
!6068 = !DILocation(line: 637, column: 43, scope: !6020)
!6069 = !DILocation(line: 637, column: 30, scope: !6020)
!6070 = !DILocation(line: 637, column: 18, scope: !6020)
!6071 = !DILocation(line: 637, column: 4, scope: !6020)
!6072 = !DILocation(line: 637, column: 16, scope: !6020)
!6073 = !DILocation(line: 639, column: 16, scope: !6020)
!6074 = !DILocation(line: 639, column: 14, scope: !6020)
!6075 = !DILocation(line: 641, column: 30, scope: !6076)
!6076 = distinct !DILexicalBlock(scope: !6020, file: !3, line: 641, column: 3)
!6077 = !DILocation(line: 641, column: 14, scope: !6076)
!6078 = !DILocation(line: 641, column: 8, scope: !6076)
!6079 = !DILocation(line: 641, column: 43, scope: !6080)
!6080 = distinct !DILexicalBlock(scope: !6076, file: !3, line: 641, column: 3)
!6081 = !DILocation(line: 641, column: 42, scope: !6080)
!6082 = !DILocation(line: 641, column: 3, scope: !6076)
!6083 = !DILocation(line: 643, column: 20, scope: !6084)
!6084 = distinct !DILexicalBlock(scope: !6080, file: !3, line: 642, column: 5)
!6085 = !DILocation(line: 643, column: 18, scope: !6084)
!6086 = !DILocation(line: 644, column: 18, scope: !6084)
!6087 = !DILocation(line: 644, column: 16, scope: !6084)
!6088 = !DILocation(line: 645, column: 18, scope: !6084)
!6089 = !DILocation(line: 645, column: 16, scope: !6084)
!6090 = !DILocation(line: 648, column: 11, scope: !6091)
!6091 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 648, column: 11)
!6092 = !DILocation(line: 648, column: 32, scope: !6091)
!6093 = !DILocation(line: 648, column: 11, scope: !6084)
!6094 = !DILocation(line: 649, column: 9, scope: !6091)
!6095 = !DILocation(line: 650, column: 44, scope: !6084)
!6096 = !DILocation(line: 650, column: 27, scope: !6084)
!6097 = !DILocation(line: 650, column: 25, scope: !6084)
!6098 = !DILocation(line: 651, column: 11, scope: !6084)
!6099 = !DILocation(line: 656, column: 34, scope: !6084)
!6100 = !DILocation(line: 657, column: 34, scope: !6084)
!6101 = !DILocation(line: 656, column: 17, scope: !6084)
!6102 = !DILocation(line: 656, column: 15, scope: !6084)
!6103 = !DILocation(line: 661, column: 18, scope: !6084)
!6104 = !DILocation(line: 661, column: 16, scope: !6084)
!6105 = !DILocation(line: 662, column: 17, scope: !6084)
!6106 = !DILocation(line: 663, column: 11, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 663, column: 11)
!6108 = !DILocation(line: 663, column: 11, scope: !6084)
!6109 = !DILocation(line: 665, column: 22, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6107, file: !3, line: 664, column: 9)
!6111 = !DILocation(line: 665, column: 20, scope: !6110)
!6112 = !DILocation(line: 670, column: 40, scope: !6110)
!6113 = !DILocation(line: 670, column: 23, scope: !6110)
!6114 = !DILocation(line: 670, column: 21, scope: !6110)
!6115 = !DILocation(line: 671, column: 9, scope: !6110)
!6116 = !DILocation(line: 673, column: 11, scope: !6117)
!6117 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 673, column: 11)
!6118 = !DILocation(line: 673, column: 11, scope: !6084)
!6119 = !DILocation(line: 675, column: 23, scope: !6120)
!6120 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 674, column: 9)
!6121 = !DILocation(line: 675, column: 21, scope: !6120)
!6122 = !DILocation(line: 676, column: 22, scope: !6120)
!6123 = !DILocation(line: 676, column: 20, scope: !6120)
!6124 = !DILocation(line: 677, column: 9, scope: !6120)
!6125 = !DILocation(line: 680, column: 23, scope: !6126)
!6126 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 679, column: 9)
!6127 = !DILocation(line: 680, column: 21, scope: !6126)
!6128 = !DILocation(line: 681, column: 22, scope: !6126)
!6129 = !DILocation(line: 681, column: 20, scope: !6126)
!6130 = !DILocation(line: 683, column: 11, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 683, column: 11)
!6132 = !DILocation(line: 683, column: 11, scope: !6084)
!6133 = !DILocation(line: 684, column: 21, scope: !6131)
!6134 = !DILocation(line: 684, column: 19, scope: !6131)
!6135 = !DILocation(line: 684, column: 9, scope: !6131)
!6136 = !DILocation(line: 686, column: 20, scope: !6084)
!6137 = !DILocation(line: 686, column: 29, scope: !6084)
!6138 = !DILocation(line: 686, column: 39, scope: !6084)
!6139 = !DILocation(line: 686, column: 7, scope: !6084)
!6140 = !DILocation(line: 687, column: 20, scope: !6084)
!6141 = !DILocation(line: 687, column: 29, scope: !6084)
!6142 = !DILocation(line: 687, column: 40, scope: !6084)
!6143 = !DILocation(line: 687, column: 7, scope: !6084)
!6144 = !DILocation(line: 690, column: 7, scope: !6084)
!6145 = !DILocation(line: 691, column: 35, scope: !6084)
!6146 = !DILocation(line: 691, column: 47, scope: !6084)
!6147 = !DILocation(line: 691, column: 50, scope: !6084)
!6148 = !DILocation(line: 691, column: 7, scope: !6084)
!6149 = !DILocation(line: 692, column: 21, scope: !6084)
!6150 = !DILocation(line: 692, column: 19, scope: !6084)
!6151 = !DILocation(line: 698, column: 34, scope: !6084)
!6152 = !DILocation(line: 699, column: 35, scope: !6084)
!6153 = !DILocation(line: 699, column: 34, scope: !6084)
!6154 = !DILocation(line: 698, column: 17, scope: !6084)
!6155 = !DILocation(line: 698, column: 15, scope: !6084)
!6156 = !DILocation(line: 702, column: 20, scope: !6084)
!6157 = !DILocation(line: 702, column: 29, scope: !6084)
!6158 = !DILocation(line: 702, column: 52, scope: !6084)
!6159 = !DILocation(line: 702, column: 39, scope: !6084)
!6160 = !DILocation(line: 702, column: 7, scope: !6084)
!6161 = !DILocation(line: 705, column: 7, scope: !6084)
!6162 = !DILocation(line: 706, column: 35, scope: !6084)
!6163 = !DILocation(line: 706, column: 48, scope: !6084)
!6164 = !DILocation(line: 707, column: 7, scope: !6084)
!6165 = !DILocation(line: 706, column: 7, scope: !6084)
!6166 = !DILocation(line: 728, column: 11, scope: !6167)
!6167 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 728, column: 11)
!6168 = !DILocation(line: 728, column: 24, scope: !6167)
!6169 = !DILocation(line: 728, column: 21, scope: !6167)
!6170 = !DILocation(line: 728, column: 11, scope: !6084)
!6171 = !DILocation(line: 729, column: 2, scope: !6167)
!6172 = !DILocation(line: 730, column: 13, scope: !6084)
!6173 = !DILocation(line: 730, column: 11, scope: !6084)
!6174 = !DILocation(line: 733, column: 34, scope: !6084)
!6175 = !DILocation(line: 734, column: 34, scope: !6084)
!6176 = !DILocation(line: 734, column: 46, scope: !6084)
!6177 = !DILocation(line: 733, column: 17, scope: !6084)
!6178 = !DILocation(line: 733, column: 15, scope: !6084)
!6179 = !DILocation(line: 737, column: 7, scope: !6084)
!6180 = !DILocation(line: 738, column: 20, scope: !6084)
!6181 = !DILocation(line: 738, column: 29, scope: !6084)
!6182 = !DILocation(line: 738, column: 34, scope: !6084)
!6183 = !DILocation(line: 738, column: 7, scope: !6084)
!6184 = !DILocation(line: 742, column: 7, scope: !6084)
!6185 = !DILocation(line: 744, column: 35, scope: !6084)
!6186 = !DILocation(line: 744, column: 48, scope: !6084)
!6187 = !DILocation(line: 745, column: 7, scope: !6084)
!6188 = !DILocation(line: 744, column: 7, scope: !6084)
!6189 = !DILocation(line: 746, column: 5, scope: !6084)
!6190 = !DILocation(line: 641, column: 60, scope: !6080)
!6191 = !DILocation(line: 641, column: 3, scope: !6080)
!6192 = distinct !{!6192, !6082, !6193}
!6193 = !DILocation(line: 746, column: 5, scope: !6076)
!6194 = !DILocation(line: 747, column: 1, scope: !6020)
!6195 = distinct !DISubprogram(name: "adjust_vec_debug_stmts", scope: !3, file: !3, line: 184, type: !6196, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6196 = !DISubroutineType(types: !6197)
!6197 = !{null}
!6198 = !DILocation(line: 186, column: 8, scope: !6199)
!6199 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 186, column: 7)
!6200 = !DILocation(line: 186, column: 7, scope: !6195)
!6201 = !DILocation(line: 187, column: 5, scope: !6199)
!6202 = !DILocation(line: 189, column: 3, scope: !6195)
!6203 = !DILocation(line: 191, column: 3, scope: !6195)
!6204 = !DILocation(line: 191, column: 11, scope: !6195)
!6205 = !DILocation(line: 191, column: 10, scope: !6195)
!6206 = !DILocation(line: 193, column: 31, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6195, file: !3, line: 192, column: 5)
!6208 = !DILocation(line: 193, column: 7, scope: !6207)
!6209 = !DILocation(line: 194, column: 7, scope: !6207)
!6210 = distinct !{!6210, !6203, !6211}
!6211 = !DILocation(line: 195, column: 5, scope: !6195)
!6212 = !DILocation(line: 197, column: 3, scope: !6195)
!6213 = !DILocation(line: 198, column: 1, scope: !6195)
!6214 = distinct !DISubprogram(name: "adjust_debug_stmts", scope: !3, file: !3, line: 206, type: !6215, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6215 = !DISubroutineType(types: !6216)
!6216 = !{null, !826, !826, !1609}
!6217 = !DILocalVariable(name: "from", arg: 1, scope: !6214, file: !3, line: 206, type: !826)
!6218 = !DILocation(line: 206, column: 26, scope: !6214)
!6219 = !DILocalVariable(name: "to", arg: 2, scope: !6214, file: !3, line: 206, type: !826)
!6220 = !DILocation(line: 206, column: 37, scope: !6214)
!6221 = !DILocalVariable(name: "bb", arg: 3, scope: !6214, file: !3, line: 206, type: !1609)
!6222 = !DILocation(line: 206, column: 53, scope: !6214)
!6223 = !DILocalVariable(name: "ai", scope: !6214, file: !3, line: 208, type: !2484)
!6224 = !DILocation(line: 208, column: 15, scope: !6214)
!6225 = !DILocation(line: 210, column: 7, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 210, column: 7)
!6227 = !DILocation(line: 210, column: 28, scope: !6226)
!6228 = !DILocation(line: 210, column: 31, scope: !6226)
!6229 = !DILocation(line: 210, column: 48, scope: !6226)
!6230 = !DILocation(line: 211, column: 7, scope: !6226)
!6231 = !DILocation(line: 211, column: 10, scope: !6226)
!6232 = !DILocation(line: 211, column: 45, scope: !6226)
!6233 = !DILocation(line: 211, column: 33, scope: !6226)
!6234 = !DILocation(line: 211, column: 30, scope: !6226)
!6235 = !DILocation(line: 210, column: 7, scope: !6214)
!6236 = !DILocation(line: 213, column: 17, scope: !6237)
!6237 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 212, column: 5)
!6238 = !DILocation(line: 213, column: 10, scope: !6237)
!6239 = !DILocation(line: 213, column: 15, scope: !6237)
!6240 = !DILocation(line: 214, column: 15, scope: !6237)
!6241 = !DILocation(line: 214, column: 10, scope: !6237)
!6242 = !DILocation(line: 214, column: 13, scope: !6237)
!6243 = !DILocation(line: 215, column: 15, scope: !6237)
!6244 = !DILocation(line: 215, column: 10, scope: !6237)
!6245 = !DILocation(line: 215, column: 13, scope: !6237)
!6246 = !DILocation(line: 217, column: 11, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6237, file: !3, line: 217, column: 11)
!6248 = !DILocation(line: 217, column: 11, scope: !6237)
!6249 = !DILocation(line: 218, column: 2, scope: !6247)
!6250 = !DILocation(line: 220, column: 2, scope: !6247)
!6251 = !DILocation(line: 221, column: 5, scope: !6237)
!6252 = !DILocation(line: 222, column: 1, scope: !6214)
!6253 = distinct !DISubprogram(name: "gimple_vop", scope: !2640, file: !2640, line: 49, type: !6254, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6254 = !DISubroutineType(types: !6255)
!6255 = !{!826, !6256}
!6256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6257, size: 64)
!6257 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1598)
!6258 = !DILocalVariable(name: "fun", arg: 1, scope: !6253, file: !2640, line: 49, type: !6256)
!6259 = !DILocation(line: 49, column: 36, scope: !6253)
!6260 = !DILocation(line: 51, column: 3, scope: !6253)
!6261 = !DILocation(line: 52, column: 10, scope: !6253)
!6262 = !DILocation(line: 52, column: 15, scope: !6253)
!6263 = !DILocation(line: 52, column: 26, scope: !6253)
!6264 = !DILocation(line: 52, column: 3, scope: !6253)
!6265 = distinct !DISubprogram(name: "VEC_adjust_info_stack_safe_push", scope: !3, file: !3, line: 123, type: !6266, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6266 = !DISubroutineType(types: !6267)
!6267 = !{!6268, !6269, !6270}
!6268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2484, size: 64)
!6269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!6270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6271, size: 64)
!6271 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2484)
!6272 = !DILocalVariable(name: "vec_", arg: 1, scope: !6265, file: !3, line: 123, type: !6269)
!6273 = !DILocation(line: 123, column: 1, scope: !6265)
!6274 = !DILocalVariable(name: "obj_", arg: 2, scope: !6265, file: !3, line: 123, type: !6270)
!6275 = distinct !DISubprogram(name: "adjust_debug_stmts_now", scope: !3, file: !3, line: 139, type: !6276, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6276 = !DISubroutineType(types: !6277)
!6277 = !{null, !6268}
!6278 = !DILocalVariable(name: "ai", arg: 1, scope: !6275, file: !3, line: 139, type: !6268)
!6279 = !DILocation(line: 139, column: 38, scope: !6275)
!6280 = !DILocalVariable(name: "bbphi", scope: !6275, file: !3, line: 141, type: !1609)
!6281 = !DILocation(line: 141, column: 15, scope: !6275)
!6282 = !DILocation(line: 141, column: 23, scope: !6275)
!6283 = !DILocation(line: 141, column: 27, scope: !6275)
!6284 = !DILocalVariable(name: "orig_def", scope: !6275, file: !3, line: 142, type: !826)
!6285 = !DILocation(line: 142, column: 8, scope: !6275)
!6286 = !DILocation(line: 142, column: 19, scope: !6275)
!6287 = !DILocation(line: 142, column: 23, scope: !6275)
!6288 = !DILocalVariable(name: "new_def", scope: !6275, file: !3, line: 143, type: !826)
!6289 = !DILocation(line: 143, column: 8, scope: !6275)
!6290 = !DILocation(line: 143, column: 18, scope: !6275)
!6291 = !DILocation(line: 143, column: 22, scope: !6275)
!6292 = !DILocalVariable(name: "imm_iter", scope: !6275, file: !3, line: 144, type: !6293)
!6293 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !1549, line: 249, baseType: !6294)
!6294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !1549, line: 238, size: 448, elements: !6295)
!6295 = !{!6296, !6297, !6298, !6299}
!6296 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !6294, file: !1549, line: 241, baseType: !2187, size: 64)
!6297 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !6294, file: !1549, line: 243, baseType: !2187, size: 64, offset: 64)
!6298 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !6294, file: !1549, line: 245, baseType: !2188, size: 256, offset: 128)
!6299 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !6294, file: !1549, line: 248, baseType: !2187, size: 64, offset: 384)
!6300 = !DILocation(line: 144, column: 20, scope: !6275)
!6301 = !DILocalVariable(name: "stmt", scope: !6275, file: !3, line: 145, type: !1157)
!6302 = !DILocation(line: 145, column: 10, scope: !6275)
!6303 = !DILocalVariable(name: "bbdef", scope: !6275, file: !3, line: 146, type: !1609)
!6304 = !DILocation(line: 146, column: 15, scope: !6275)
!6305 = !DILocation(line: 146, column: 34, scope: !6275)
!6306 = !DILocation(line: 146, column: 23, scope: !6275)
!6307 = !DILocation(line: 148, column: 3, scope: !6275)
!6308 = !DILocation(line: 152, column: 3, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 152, column: 3)
!6310 = !DILocation(line: 152, column: 3, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6309, file: !3, line: 152, column: 3)
!6312 = !DILocalVariable(name: "use_p", scope: !6313, file: !3, line: 154, type: !2186)
!6313 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 153, column: 5)
!6314 = !DILocation(line: 154, column: 21, scope: !6313)
!6315 = !DILocalVariable(name: "bbuse", scope: !6313, file: !3, line: 155, type: !1609)
!6316 = !DILocation(line: 155, column: 19, scope: !6313)
!6317 = !DILocation(line: 157, column: 29, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6313, file: !3, line: 157, column: 11)
!6319 = !DILocation(line: 157, column: 12, scope: !6318)
!6320 = !DILocation(line: 157, column: 11, scope: !6313)
!6321 = !DILocation(line: 158, column: 2, scope: !6318)
!6322 = !DILocation(line: 160, column: 7, scope: !6313)
!6323 = !DILocation(line: 162, column: 26, scope: !6313)
!6324 = !DILocation(line: 162, column: 15, scope: !6313)
!6325 = !DILocation(line: 162, column: 13, scope: !6313)
!6326 = !DILocation(line: 164, column: 12, scope: !6327)
!6327 = distinct !DILexicalBlock(scope: !6313, file: !3, line: 164, column: 11)
!6328 = !DILocation(line: 164, column: 21, scope: !6327)
!6329 = !DILocation(line: 164, column: 18, scope: !6327)
!6330 = !DILocation(line: 165, column: 5, scope: !6327)
!6331 = !DILocation(line: 165, column: 40, scope: !6327)
!6332 = !DILocation(line: 165, column: 47, scope: !6327)
!6333 = !DILocation(line: 165, column: 8, scope: !6327)
!6334 = !DILocation(line: 166, column: 4, scope: !6327)
!6335 = !DILocation(line: 166, column: 9, scope: !6327)
!6336 = !DILocation(line: 166, column: 18, scope: !6327)
!6337 = !DILocation(line: 166, column: 15, scope: !6327)
!6338 = !DILocation(line: 167, column: 9, scope: !6327)
!6339 = !DILocation(line: 167, column: 44, scope: !6327)
!6340 = !DILocation(line: 167, column: 51, scope: !6327)
!6341 = !DILocation(line: 167, column: 12, scope: !6327)
!6342 = !DILocation(line: 164, column: 11, scope: !6313)
!6343 = !DILocation(line: 169, column: 8, scope: !6344)
!6344 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 169, column: 8)
!6345 = distinct !DILexicalBlock(scope: !6327, file: !3, line: 168, column: 2)
!6346 = !DILocation(line: 169, column: 8, scope: !6345)
!6347 = !DILocation(line: 170, column: 6, scope: !6348)
!6348 = distinct !DILexicalBlock(scope: !6344, file: !3, line: 170, column: 6)
!6349 = !DILocation(line: 170, column: 6, scope: !6350)
!6350 = distinct !DILexicalBlock(scope: !6348, file: !3, line: 170, column: 6)
!6351 = !DILocation(line: 171, column: 8, scope: !6350)
!6352 = distinct !{!6352, !6347, !6353}
!6353 = !DILocation(line: 171, column: 8, scope: !6348)
!6354 = !DILocation(line: 174, column: 39, scope: !6355)
!6355 = distinct !DILexicalBlock(scope: !6344, file: !3, line: 173, column: 6)
!6356 = !DILocation(line: 174, column: 8, scope: !6355)
!6357 = !DILocation(line: 175, column: 21, scope: !6355)
!6358 = !DILocation(line: 175, column: 8, scope: !6355)
!6359 = !DILocation(line: 177, column: 2, scope: !6345)
!6360 = !DILocation(line: 178, column: 5, scope: !6313)
!6361 = distinct !{!6361, !6308, !6362}
!6362 = !DILocation(line: 178, column: 5, scope: !6309)
!6363 = !DILocation(line: 179, column: 1, scope: !6275)
!6364 = distinct !DISubprogram(name: "VEC_adjust_info_stack_reserve", scope: !3, file: !3, line: 123, type: !6365, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6365 = !DISubroutineType(types: !6366)
!6366 = !{!923, !6269, !923}
!6367 = !DILocalVariable(name: "vec_", arg: 1, scope: !6364, file: !3, line: 123, type: !6269)
!6368 = !DILocation(line: 123, column: 1, scope: !6364)
!6369 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6364, file: !3, line: 123, type: !923)
!6370 = !DILocalVariable(name: "extend", scope: !6364, file: !3, line: 123, type: !923)
!6371 = !DILocation(line: 123, column: 1, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 123, column: 1)
!6373 = distinct !DISubprogram(name: "VEC_adjust_info_base_quick_push", scope: !3, file: !3, line: 122, type: !6374, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6374 = !DISubroutineType(types: !6375)
!6375 = !{!6268, !6376, !6270}
!6376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2477, size: 64)
!6377 = !DILocalVariable(name: "vec_", arg: 1, scope: !6373, file: !3, line: 122, type: !6376)
!6378 = !DILocation(line: 122, column: 1, scope: !6373)
!6379 = !DILocalVariable(name: "obj_", arg: 2, scope: !6373, file: !3, line: 122, type: !6270)
!6380 = !DILocalVariable(name: "slot_", scope: !6373, file: !3, line: 122, type: !6268)
!6381 = !DILocation(line: 122, column: 1, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 122, column: 1)
!6383 = distinct !DISubprogram(name: "VEC_adjust_info_base_space", scope: !3, file: !3, line: 122, type: !6384, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6384 = !DISubroutineType(types: !6385)
!6385 = !{!923, !6376, !923}
!6386 = !DILocalVariable(name: "vec_", arg: 1, scope: !6383, file: !3, line: 122, type: !6376)
!6387 = !DILocation(line: 122, column: 1, scope: !6383)
!6388 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6383, file: !3, line: 122, type: !923)
!6389 = distinct !DISubprogram(name: "gimple_bb", scope: !398, file: !398, line: 1112, type: !6390, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6390 = !DISubroutineType(types: !6391)
!6391 = !{!1121, !3371}
!6392 = !DILocalVariable(name: "g", arg: 1, scope: !6389, file: !398, line: 1112, type: !3371)
!6393 = !DILocation(line: 1112, column: 25, scope: !6389)
!6394 = !DILocation(line: 1114, column: 10, scope: !6389)
!6395 = !DILocation(line: 1114, column: 13, scope: !6389)
!6396 = !DILocation(line: 1114, column: 20, scope: !6389)
!6397 = !DILocation(line: 1114, column: 3, scope: !6389)
!6398 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !2640, file: !2640, line: 1058, type: !6399, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6399 = !DISubroutineType(types: !6400)
!6400 = !{!1157, !6401, !826}
!6401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6293, size: 64)
!6402 = !DILocalVariable(name: "imm", arg: 1, scope: !6398, file: !2640, line: 1058, type: !6401)
!6403 = !DILocation(line: 1058, column: 39, scope: !6398)
!6404 = !DILocalVariable(name: "var", arg: 2, scope: !6398, file: !2640, line: 1058, type: !826)
!6405 = !DILocation(line: 1058, column: 49, scope: !6398)
!6406 = !DILocation(line: 1060, column: 18, scope: !6398)
!6407 = !DILocation(line: 1060, column: 3, scope: !6398)
!6408 = !DILocation(line: 1060, column: 8, scope: !6398)
!6409 = !DILocation(line: 1060, column: 14, scope: !6398)
!6410 = !DILocation(line: 1061, column: 18, scope: !6398)
!6411 = !DILocation(line: 1061, column: 23, scope: !6398)
!6412 = !DILocation(line: 1061, column: 30, scope: !6398)
!6413 = !DILocation(line: 1061, column: 3, scope: !6398)
!6414 = !DILocation(line: 1061, column: 8, scope: !6398)
!6415 = !DILocation(line: 1061, column: 16, scope: !6398)
!6416 = !DILocation(line: 1062, column: 3, scope: !6398)
!6417 = !DILocation(line: 1062, column: 8, scope: !6398)
!6418 = !DILocation(line: 1062, column: 22, scope: !6398)
!6419 = !DILocation(line: 1067, column: 3, scope: !6398)
!6420 = !DILocation(line: 1067, column: 8, scope: !6398)
!6421 = !DILocation(line: 1067, column: 18, scope: !6398)
!6422 = !DILocation(line: 1067, column: 23, scope: !6398)
!6423 = !DILocation(line: 1068, column: 3, scope: !6398)
!6424 = !DILocation(line: 1068, column: 8, scope: !6398)
!6425 = !DILocation(line: 1068, column: 18, scope: !6398)
!6426 = !DILocation(line: 1068, column: 23, scope: !6398)
!6427 = !DILocation(line: 1069, column: 3, scope: !6398)
!6428 = !DILocation(line: 1069, column: 8, scope: !6398)
!6429 = !DILocation(line: 1069, column: 18, scope: !6398)
!6430 = !DILocation(line: 1069, column: 22, scope: !6398)
!6431 = !DILocation(line: 1069, column: 27, scope: !6398)
!6432 = !DILocation(line: 1070, column: 3, scope: !6398)
!6433 = !DILocation(line: 1070, column: 8, scope: !6398)
!6434 = !DILocation(line: 1070, column: 18, scope: !6398)
!6435 = !DILocation(line: 1070, column: 22, scope: !6398)
!6436 = !DILocation(line: 1072, column: 27, scope: !6437)
!6437 = distinct !DILexicalBlock(scope: !6398, file: !2640, line: 1072, column: 7)
!6438 = !DILocation(line: 1072, column: 7, scope: !6437)
!6439 = !DILocation(line: 1072, column: 7, scope: !6398)
!6440 = !DILocation(line: 1073, column: 5, scope: !6437)
!6441 = !DILocation(line: 1075, column: 25, scope: !6398)
!6442 = !DILocation(line: 1075, column: 30, scope: !6398)
!6443 = !DILocation(line: 1075, column: 39, scope: !6398)
!6444 = !DILocation(line: 1075, column: 3, scope: !6398)
!6445 = !DILocation(line: 1077, column: 10, scope: !6398)
!6446 = !DILocation(line: 1077, column: 3, scope: !6398)
!6447 = !DILocation(line: 1078, column: 1, scope: !6398)
!6448 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !2640, file: !2640, line: 969, type: !6449, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6449 = !DISubroutineType(types: !6450)
!6450 = !{!946, !6451}
!6451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6452, size: 64)
!6452 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6293)
!6453 = !DILocalVariable(name: "imm", arg: 1, scope: !6448, file: !2640, line: 969, type: !6451)
!6454 = !DILocation(line: 969, column: 45, scope: !6448)
!6455 = !DILocation(line: 971, column: 11, scope: !6448)
!6456 = !DILocation(line: 971, column: 16, scope: !6448)
!6457 = !DILocation(line: 971, column: 27, scope: !6448)
!6458 = !DILocation(line: 971, column: 32, scope: !6448)
!6459 = !DILocation(line: 971, column: 24, scope: !6448)
!6460 = !DILocation(line: 971, column: 10, scope: !6448)
!6461 = !DILocation(line: 971, column: 3, scope: !6448)
!6462 = distinct !DISubprogram(name: "is_gimple_debug", scope: !398, file: !398, line: 3249, type: !5273, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6463 = !DILocalVariable(name: "gs", arg: 1, scope: !6462, file: !398, line: 3249, type: !3371)
!6464 = !DILocation(line: 3249, column: 31, scope: !6462)
!6465 = !DILocation(line: 3251, column: 23, scope: !6462)
!6466 = !DILocation(line: 3251, column: 10, scope: !6462)
!6467 = !DILocation(line: 3251, column: 27, scope: !6462)
!6468 = !DILocation(line: 3251, column: 3, scope: !6462)
!6469 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !398, file: !398, line: 3257, type: !5273, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6470 = !DILocalVariable(name: "s", arg: 1, scope: !6469, file: !398, line: 3257, type: !3371)
!6471 = !DILocation(line: 3257, column: 35, scope: !6469)
!6472 = !DILocation(line: 3259, column: 24, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6469, file: !398, line: 3259, column: 7)
!6474 = !DILocation(line: 3259, column: 7, scope: !6473)
!6475 = !DILocation(line: 3259, column: 7, scope: !6469)
!6476 = !DILocation(line: 3260, column: 12, scope: !6473)
!6477 = !DILocation(line: 3260, column: 15, scope: !6473)
!6478 = !DILocation(line: 3260, column: 22, scope: !6473)
!6479 = !DILocation(line: 3260, column: 30, scope: !6473)
!6480 = !DILocation(line: 3260, column: 5, scope: !6473)
!6481 = !DILocation(line: 3262, column: 3, scope: !6469)
!6482 = !DILocation(line: 3263, column: 1, scope: !6469)
!6483 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !2640, file: !2640, line: 1101, type: !6484, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6484 = !DISubroutineType(types: !6485)
!6485 = !{!2186, !6401}
!6486 = !DILocalVariable(name: "imm", arg: 1, scope: !6483, file: !2640, line: 1101, type: !6401)
!6487 = !DILocation(line: 1101, column: 42, scope: !6483)
!6488 = !DILocation(line: 1103, column: 24, scope: !6483)
!6489 = !DILocation(line: 1103, column: 29, scope: !6483)
!6490 = !DILocation(line: 1103, column: 38, scope: !6483)
!6491 = !DILocation(line: 1103, column: 3, scope: !6483)
!6492 = !DILocation(line: 1103, column: 8, scope: !6483)
!6493 = !DILocation(line: 1103, column: 22, scope: !6483)
!6494 = !DILocation(line: 1104, column: 10, scope: !6483)
!6495 = !DILocation(line: 1104, column: 15, scope: !6483)
!6496 = !DILocation(line: 1104, column: 3, scope: !6483)
!6497 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !2640, file: !2640, line: 1110, type: !6449, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6498 = !DILocalVariable(name: "imm", arg: 1, scope: !6497, file: !2640, line: 1110, type: !6451)
!6499 = !DILocation(line: 1110, column: 48, scope: !6497)
!6500 = !DILocation(line: 1112, column: 11, scope: !6497)
!6501 = !DILocation(line: 1112, column: 16, scope: !6497)
!6502 = !DILocation(line: 1112, column: 29, scope: !6497)
!6503 = !DILocation(line: 1112, column: 34, scope: !6497)
!6504 = !DILocation(line: 1112, column: 24, scope: !6497)
!6505 = !DILocation(line: 1112, column: 10, scope: !6497)
!6506 = !DILocation(line: 1112, column: 3, scope: !6497)
!6507 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !2640, file: !2640, line: 1118, type: !6484, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6508 = !DILocalVariable(name: "imm", arg: 1, scope: !6507, file: !2640, line: 1118, type: !6401)
!6509 = !DILocation(line: 1118, column: 41, scope: !6507)
!6510 = !DILocation(line: 1120, column: 18, scope: !6507)
!6511 = !DILocation(line: 1120, column: 23, scope: !6507)
!6512 = !DILocation(line: 1120, column: 3, scope: !6507)
!6513 = !DILocation(line: 1120, column: 8, scope: !6507)
!6514 = !DILocation(line: 1120, column: 16, scope: !6507)
!6515 = !DILocation(line: 1121, column: 30, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6507, file: !2640, line: 1121, column: 7)
!6517 = !DILocation(line: 1121, column: 7, scope: !6516)
!6518 = !DILocation(line: 1121, column: 7, scope: !6507)
!6519 = !DILocation(line: 1122, column: 5, scope: !6516)
!6520 = !DILocation(line: 1125, column: 28, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6516, file: !2640, line: 1124, column: 5)
!6522 = !DILocation(line: 1125, column: 33, scope: !6521)
!6523 = !DILocation(line: 1125, column: 42, scope: !6521)
!6524 = !DILocation(line: 1125, column: 7, scope: !6521)
!6525 = !DILocation(line: 1125, column: 12, scope: !6521)
!6526 = !DILocation(line: 1125, column: 26, scope: !6521)
!6527 = !DILocation(line: 1126, column: 14, scope: !6521)
!6528 = !DILocation(line: 1126, column: 19, scope: !6521)
!6529 = !DILocation(line: 1126, column: 7, scope: !6521)
!6530 = !DILocation(line: 1128, column: 1, scope: !6507)
!6531 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !398, file: !398, line: 3336, type: !6532, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6532 = !DISubroutineType(types: !6533)
!6533 = !{null, !1157}
!6534 = !DILocalVariable(name: "dbg", arg: 1, scope: !6531, file: !398, line: 3336, type: !1157)
!6535 = !DILocation(line: 3336, column: 39, scope: !6531)
!6536 = !DILocation(line: 3342, column: 18, scope: !6531)
!6537 = !DILocation(line: 3342, column: 3, scope: !6531)
!6538 = !DILocation(line: 3343, column: 1, scope: !6531)
!6539 = distinct !DISubprogram(name: "update_stmt", scope: !398, file: !398, line: 1456, type: !6532, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6540 = !DILocalVariable(name: "s", arg: 1, scope: !6539, file: !398, line: 1456, type: !1157)
!6541 = !DILocation(line: 1456, column: 21, scope: !6539)
!6542 = !DILocation(line: 1458, column: 23, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6539, file: !398, line: 1458, column: 7)
!6544 = !DILocation(line: 1458, column: 7, scope: !6543)
!6545 = !DILocation(line: 1458, column: 7, scope: !6539)
!6546 = !DILocation(line: 1460, column: 28, scope: !6547)
!6547 = distinct !DILexicalBlock(scope: !6543, file: !398, line: 1459, column: 5)
!6548 = !DILocation(line: 1460, column: 7, scope: !6547)
!6549 = !DILocation(line: 1461, column: 29, scope: !6547)
!6550 = !DILocation(line: 1461, column: 7, scope: !6547)
!6551 = !DILocation(line: 1462, column: 5, scope: !6547)
!6552 = !DILocation(line: 1463, column: 1, scope: !6539)
!6553 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !2640, file: !2640, line: 1083, type: !6554, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6554 = !DISubroutineType(types: !6555)
!6555 = !{!1157, !6401}
!6556 = !DILocalVariable(name: "imm", arg: 1, scope: !6553, file: !2640, line: 1083, type: !6401)
!6557 = !DILocation(line: 1083, column: 38, scope: !6553)
!6558 = !DILocation(line: 1085, column: 18, scope: !6553)
!6559 = !DILocation(line: 1085, column: 23, scope: !6553)
!6560 = !DILocation(line: 1085, column: 33, scope: !6553)
!6561 = !DILocation(line: 1085, column: 3, scope: !6553)
!6562 = !DILocation(line: 1085, column: 8, scope: !6553)
!6563 = !DILocation(line: 1085, column: 16, scope: !6553)
!6564 = !DILocation(line: 1086, column: 27, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6553, file: !2640, line: 1086, column: 7)
!6566 = !DILocation(line: 1086, column: 7, scope: !6565)
!6567 = !DILocation(line: 1086, column: 7, scope: !6553)
!6568 = !DILocation(line: 1088, column: 11, scope: !6569)
!6569 = distinct !DILexicalBlock(scope: !6570, file: !2640, line: 1088, column: 11)
!6570 = distinct !DILexicalBlock(scope: !6565, file: !2640, line: 1087, column: 5)
!6571 = !DILocation(line: 1088, column: 16, scope: !6569)
!6572 = !DILocation(line: 1088, column: 26, scope: !6569)
!6573 = !DILocation(line: 1088, column: 31, scope: !6569)
!6574 = !DILocation(line: 1088, column: 11, scope: !6570)
!6575 = !DILocation(line: 1089, column: 19, scope: !6569)
!6576 = !DILocation(line: 1089, column: 24, scope: !6569)
!6577 = !DILocation(line: 1089, column: 2, scope: !6569)
!6578 = !DILocation(line: 1090, column: 7, scope: !6570)
!6579 = !DILocation(line: 1093, column: 25, scope: !6553)
!6580 = !DILocation(line: 1093, column: 30, scope: !6553)
!6581 = !DILocation(line: 1093, column: 39, scope: !6553)
!6582 = !DILocation(line: 1093, column: 3, scope: !6553)
!6583 = !DILocation(line: 1094, column: 10, scope: !6553)
!6584 = !DILocation(line: 1094, column: 3, scope: !6553)
!6585 = !DILocation(line: 1095, column: 1, scope: !6553)
!6586 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !2640, file: !2640, line: 1018, type: !6587, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6587 = !DISubroutineType(types: !6588)
!6588 = !{null, !2186, !6401}
!6589 = !DILocalVariable(name: "head", arg: 1, scope: !6586, file: !2640, line: 1018, type: !2186)
!6590 = !DILocation(line: 1018, column: 37, scope: !6586)
!6591 = !DILocalVariable(name: "imm", arg: 2, scope: !6586, file: !2640, line: 1018, type: !6401)
!6592 = !DILocation(line: 1018, column: 61, scope: !6586)
!6593 = !DILocalVariable(name: "use_p", scope: !6586, file: !2640, line: 1020, type: !2186)
!6594 = !DILocation(line: 1020, column: 17, scope: !6586)
!6595 = !DILocalVariable(name: "last_p", scope: !6586, file: !2640, line: 1021, type: !2186)
!6596 = !DILocation(line: 1021, column: 17, scope: !6586)
!6597 = !DILocation(line: 1021, column: 26, scope: !6586)
!6598 = !DILocalVariable(name: "head_stmt", scope: !6586, file: !2640, line: 1022, type: !1157)
!6599 = !DILocation(line: 1022, column: 10, scope: !6586)
!6600 = !DILocation(line: 1022, column: 22, scope: !6586)
!6601 = !DILocalVariable(name: "use", scope: !6586, file: !2640, line: 1023, type: !826)
!6602 = !DILocation(line: 1023, column: 8, scope: !6586)
!6603 = !DILocation(line: 1023, column: 14, scope: !6586)
!6604 = !DILocalVariable(name: "op_iter", scope: !6586, file: !2640, line: 1024, type: !2517)
!6605 = !DILocation(line: 1024, column: 15, scope: !6586)
!6606 = !DILocalVariable(name: "flag", scope: !6586, file: !2640, line: 1025, type: !923)
!6607 = !DILocation(line: 1025, column: 7, scope: !6586)
!6608 = !DILocation(line: 1028, column: 26, scope: !6586)
!6609 = !DILocation(line: 1028, column: 11, scope: !6586)
!6610 = !DILocation(line: 1028, column: 8, scope: !6586)
!6611 = !DILocation(line: 1030, column: 20, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6586, file: !2640, line: 1030, column: 7)
!6613 = !DILocation(line: 1030, column: 7, scope: !6612)
!6614 = !DILocation(line: 1030, column: 31, scope: !6612)
!6615 = !DILocation(line: 1030, column: 7, scope: !6586)
!6616 = !DILocation(line: 1032, column: 7, scope: !6617)
!6617 = distinct !DILexicalBlock(scope: !6618, file: !2640, line: 1032, column: 7)
!6618 = distinct !DILexicalBlock(scope: !6612, file: !2640, line: 1031, column: 5)
!6619 = !DILocation(line: 1032, column: 7, scope: !6620)
!6620 = distinct !DILexicalBlock(scope: !6617, file: !2640, line: 1032, column: 7)
!6621 = !DILocation(line: 1033, column: 6, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6620, file: !2640, line: 1033, column: 6)
!6623 = !DILocation(line: 1033, column: 30, scope: !6622)
!6624 = !DILocation(line: 1033, column: 27, scope: !6622)
!6625 = !DILocation(line: 1033, column: 6, scope: !6620)
!6626 = !DILocation(line: 1034, column: 34, scope: !6622)
!6627 = !DILocation(line: 1034, column: 41, scope: !6622)
!6628 = !DILocation(line: 1034, column: 47, scope: !6622)
!6629 = !DILocation(line: 1034, column: 13, scope: !6622)
!6630 = !DILocation(line: 1034, column: 11, scope: !6622)
!6631 = !DILocation(line: 1034, column: 4, scope: !6622)
!6632 = distinct !{!6632, !6616, !6633}
!6633 = !DILocation(line: 1034, column: 53, scope: !6617)
!6634 = !DILocation(line: 1035, column: 5, scope: !6618)
!6635 = !DILocation(line: 1038, column: 11, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6637, file: !2640, line: 1038, column: 11)
!6637 = distinct !DILexicalBlock(scope: !6612, file: !2640, line: 1037, column: 5)
!6638 = !DILocation(line: 1038, column: 16, scope: !6636)
!6639 = !DILocation(line: 1038, column: 11, scope: !6637)
!6640 = !DILocation(line: 1040, column: 4, scope: !6641)
!6641 = distinct !DILexicalBlock(scope: !6642, file: !2640, line: 1040, column: 4)
!6642 = distinct !DILexicalBlock(scope: !6636, file: !2640, line: 1039, column: 2)
!6643 = !DILocation(line: 1040, column: 4, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6641, file: !2640, line: 1040, column: 4)
!6645 = !DILocation(line: 1041, column: 10, scope: !6646)
!6646 = distinct !DILexicalBlock(scope: !6644, file: !2640, line: 1041, column: 10)
!6647 = !DILocation(line: 1041, column: 34, scope: !6646)
!6648 = !DILocation(line: 1041, column: 31, scope: !6646)
!6649 = !DILocation(line: 1041, column: 10, scope: !6644)
!6650 = !DILocation(line: 1042, column: 38, scope: !6646)
!6651 = !DILocation(line: 1042, column: 45, scope: !6646)
!6652 = !DILocation(line: 1042, column: 51, scope: !6646)
!6653 = !DILocation(line: 1042, column: 17, scope: !6646)
!6654 = !DILocation(line: 1042, column: 15, scope: !6646)
!6655 = !DILocation(line: 1042, column: 8, scope: !6646)
!6656 = distinct !{!6656, !6640, !6657}
!6657 = !DILocation(line: 1042, column: 57, scope: !6641)
!6658 = !DILocation(line: 1043, column: 2, scope: !6642)
!6659 = !DILocation(line: 1044, column: 41, scope: !6660)
!6660 = distinct !DILexicalBlock(scope: !6636, file: !2640, line: 1044, column: 16)
!6661 = !DILocation(line: 1044, column: 25, scope: !6660)
!6662 = !DILocation(line: 1044, column: 23, scope: !6660)
!6663 = !DILocation(line: 1044, column: 53, scope: !6660)
!6664 = !DILocation(line: 1044, column: 16, scope: !6636)
!6665 = !DILocation(line: 1046, column: 8, scope: !6666)
!6666 = distinct !DILexicalBlock(scope: !6667, file: !2640, line: 1046, column: 8)
!6667 = distinct !DILexicalBlock(scope: !6660, file: !2640, line: 1045, column: 2)
!6668 = !DILocation(line: 1046, column: 32, scope: !6666)
!6669 = !DILocation(line: 1046, column: 29, scope: !6666)
!6670 = !DILocation(line: 1046, column: 8, scope: !6667)
!6671 = !DILocation(line: 1047, column: 36, scope: !6666)
!6672 = !DILocation(line: 1047, column: 43, scope: !6666)
!6673 = !DILocation(line: 1047, column: 49, scope: !6666)
!6674 = !DILocation(line: 1047, column: 15, scope: !6666)
!6675 = !DILocation(line: 1047, column: 13, scope: !6666)
!6676 = !DILocation(line: 1047, column: 6, scope: !6666)
!6677 = !DILocation(line: 1048, column: 2, scope: !6667)
!6678 = !DILocation(line: 1051, column: 7, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6586, file: !2640, line: 1051, column: 7)
!6680 = !DILocation(line: 1051, column: 12, scope: !6679)
!6681 = !DILocation(line: 1051, column: 22, scope: !6679)
!6682 = !DILocation(line: 1051, column: 27, scope: !6679)
!6683 = !DILocation(line: 1051, column: 7, scope: !6586)
!6684 = !DILocation(line: 1052, column: 22, scope: !6679)
!6685 = !DILocation(line: 1052, column: 27, scope: !6679)
!6686 = !DILocation(line: 1052, column: 5, scope: !6679)
!6687 = !DILocation(line: 1053, column: 27, scope: !6586)
!6688 = !DILocation(line: 1053, column: 32, scope: !6586)
!6689 = !DILocation(line: 1053, column: 44, scope: !6586)
!6690 = !DILocation(line: 1053, column: 3, scope: !6586)
!6691 = !DILocation(line: 1054, column: 1, scope: !6586)
!6692 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !2640, file: !2640, line: 910, type: !2641, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6693 = !DILocalVariable(name: "ptr", arg: 1, scope: !6692, file: !2640, line: 910, type: !2643)
!6694 = !DILocation(line: 910, column: 35, scope: !6692)
!6695 = !DILocalVariable(name: "phi", arg: 2, scope: !6692, file: !2640, line: 910, type: !1157)
!6696 = !DILocation(line: 910, column: 47, scope: !6692)
!6697 = !DILocalVariable(name: "flags", arg: 3, scope: !6692, file: !2640, line: 910, type: !923)
!6698 = !DILocation(line: 910, column: 56, scope: !6692)
!6699 = !DILocalVariable(name: "phi_def", scope: !6692, file: !2640, line: 912, type: !826)
!6700 = !DILocation(line: 912, column: 8, scope: !6692)
!6701 = !DILocation(line: 912, column: 37, scope: !6692)
!6702 = !DILocation(line: 912, column: 18, scope: !6692)
!6703 = !DILocalVariable(name: "comp", scope: !6692, file: !2640, line: 913, type: !923)
!6704 = !DILocation(line: 913, column: 7, scope: !6692)
!6705 = !DILocation(line: 915, column: 28, scope: !6692)
!6706 = !DILocation(line: 915, column: 3, scope: !6692)
!6707 = !DILocation(line: 916, column: 3, scope: !6692)
!6708 = !DILocation(line: 916, column: 8, scope: !6692)
!6709 = !DILocation(line: 916, column: 13, scope: !6692)
!6710 = !DILocation(line: 918, column: 3, scope: !6692)
!6711 = !DILocation(line: 920, column: 26, scope: !6692)
!6712 = !DILocation(line: 920, column: 11, scope: !6692)
!6713 = !DILocation(line: 920, column: 8, scope: !6692)
!6714 = !DILocation(line: 923, column: 8, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6692, file: !2640, line: 923, column: 7)
!6716 = !DILocation(line: 923, column: 16, scope: !6715)
!6717 = !DILocation(line: 923, column: 14, scope: !6715)
!6718 = !DILocation(line: 923, column: 22, scope: !6715)
!6719 = !DILocation(line: 923, column: 7, scope: !6692)
!6720 = !DILocation(line: 925, column: 7, scope: !6721)
!6721 = distinct !DILexicalBlock(scope: !6715, file: !2640, line: 924, column: 5)
!6722 = !DILocation(line: 925, column: 12, scope: !6721)
!6723 = !DILocation(line: 925, column: 17, scope: !6721)
!6724 = !DILocation(line: 926, column: 7, scope: !6721)
!6725 = !DILocation(line: 929, column: 19, scope: !6692)
!6726 = !DILocation(line: 929, column: 3, scope: !6692)
!6727 = !DILocation(line: 929, column: 8, scope: !6692)
!6728 = !DILocation(line: 929, column: 17, scope: !6692)
!6729 = !DILocation(line: 930, column: 39, scope: !6692)
!6730 = !DILocation(line: 930, column: 18, scope: !6692)
!6731 = !DILocation(line: 930, column: 3, scope: !6692)
!6732 = !DILocation(line: 930, column: 8, scope: !6692)
!6733 = !DILocation(line: 930, column: 16, scope: !6692)
!6734 = !DILocation(line: 931, column: 3, scope: !6692)
!6735 = !DILocation(line: 931, column: 8, scope: !6692)
!6736 = !DILocation(line: 931, column: 18, scope: !6692)
!6737 = !DILocation(line: 932, column: 28, scope: !6692)
!6738 = !DILocation(line: 932, column: 10, scope: !6692)
!6739 = !DILocation(line: 932, column: 3, scope: !6692)
!6740 = !DILocation(line: 933, column: 1, scope: !6692)
!6741 = distinct !DISubprogram(name: "move_use_after_head", scope: !2640, file: !2640, line: 990, type: !6742, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6742 = !DISubroutineType(types: !6743)
!6743 = !{!2186, !2186, !2186, !2186}
!6744 = !DILocalVariable(name: "use_p", arg: 1, scope: !6741, file: !2640, line: 990, type: !2186)
!6745 = !DILocation(line: 990, column: 36, scope: !6741)
!6746 = !DILocalVariable(name: "head", arg: 2, scope: !6741, file: !2640, line: 990, type: !2186)
!6747 = !DILocation(line: 990, column: 57, scope: !6741)
!6748 = !DILocalVariable(name: "last_p", arg: 3, scope: !6741, file: !2640, line: 991, type: !2186)
!6749 = !DILocation(line: 991, column: 23, scope: !6741)
!6750 = !DILocation(line: 997, column: 7, scope: !6751)
!6751 = distinct !DILexicalBlock(scope: !6741, file: !2640, line: 997, column: 7)
!6752 = !DILocation(line: 997, column: 16, scope: !6751)
!6753 = !DILocation(line: 997, column: 13, scope: !6751)
!6754 = !DILocation(line: 997, column: 7, scope: !6741)
!6755 = !DILocation(line: 1000, column: 11, scope: !6756)
!6756 = distinct !DILexicalBlock(scope: !6757, file: !2640, line: 1000, column: 11)
!6757 = distinct !DILexicalBlock(scope: !6751, file: !2640, line: 998, column: 5)
!6758 = !DILocation(line: 1000, column: 19, scope: !6756)
!6759 = !DILocation(line: 1000, column: 27, scope: !6756)
!6760 = !DILocation(line: 1000, column: 24, scope: !6756)
!6761 = !DILocation(line: 1000, column: 11, scope: !6757)
!6762 = !DILocation(line: 1001, column: 11, scope: !6756)
!6763 = !DILocation(line: 1001, column: 9, scope: !6756)
!6764 = !DILocation(line: 1001, column: 2, scope: !6756)
!6765 = !DILocation(line: 1005, column: 20, scope: !6766)
!6766 = distinct !DILexicalBlock(scope: !6756, file: !2640, line: 1003, column: 2)
!6767 = !DILocation(line: 1005, column: 4, scope: !6766)
!6768 = !DILocation(line: 1006, column: 26, scope: !6766)
!6769 = !DILocation(line: 1006, column: 33, scope: !6766)
!6770 = !DILocation(line: 1006, column: 4, scope: !6766)
!6771 = !DILocation(line: 1007, column: 13, scope: !6766)
!6772 = !DILocation(line: 1007, column: 11, scope: !6766)
!6773 = !DILocation(line: 1009, column: 5, scope: !6757)
!6774 = !DILocation(line: 1010, column: 10, scope: !6741)
!6775 = !DILocation(line: 1010, column: 3, scope: !6741)
!6776 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !398, file: !398, line: 1334, type: !6777, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6777 = !DISubroutineType(types: !6778)
!6778 = !{!2186, !3371}
!6779 = !DILocalVariable(name: "g", arg: 1, scope: !6776, file: !398, line: 1334, type: !3371)
!6780 = !DILocation(line: 1334, column: 30, scope: !6776)
!6781 = !DILocalVariable(name: "ops", scope: !6776, file: !398, line: 1336, type: !1193)
!6782 = !DILocation(line: 1336, column: 24, scope: !6776)
!6783 = !DILocation(line: 1337, column: 28, scope: !6784)
!6784 = distinct !DILexicalBlock(scope: !6776, file: !398, line: 1337, column: 7)
!6785 = !DILocation(line: 1337, column: 8, scope: !6784)
!6786 = !DILocation(line: 1337, column: 7, scope: !6776)
!6787 = !DILocation(line: 1338, column: 5, scope: !6784)
!6788 = !DILocation(line: 1339, column: 9, scope: !6776)
!6789 = !DILocation(line: 1339, column: 12, scope: !6776)
!6790 = !DILocation(line: 1339, column: 18, scope: !6776)
!6791 = !DILocation(line: 1339, column: 25, scope: !6776)
!6792 = !DILocation(line: 1339, column: 7, scope: !6776)
!6793 = !DILocation(line: 1340, column: 7, scope: !6794)
!6794 = distinct !DILexicalBlock(scope: !6776, file: !398, line: 1340, column: 7)
!6795 = !DILocation(line: 1341, column: 7, scope: !6794)
!6796 = !DILocation(line: 1341, column: 10, scope: !6794)
!6797 = !DILocation(line: 1341, column: 28, scope: !6794)
!6798 = !DILocation(line: 1341, column: 36, scope: !6794)
!6799 = !DILocation(line: 1341, column: 39, scope: !6794)
!6800 = !DILocation(line: 1341, column: 49, scope: !6794)
!6801 = !DILocation(line: 1341, column: 32, scope: !6794)
!6802 = !DILocation(line: 1340, column: 7, scope: !6776)
!6803 = !DILocation(line: 1342, column: 12, scope: !6794)
!6804 = !DILocation(line: 1342, column: 5, scope: !6794)
!6805 = !DILocation(line: 1343, column: 3, scope: !6776)
!6806 = !DILocation(line: 1344, column: 1, scope: !6776)
!6807 = distinct !DISubprogram(name: "gimple_phi_result", scope: !398, file: !398, line: 3071, type: !5229, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6808 = !DILocalVariable(name: "gs", arg: 1, scope: !6807, file: !398, line: 3071, type: !3371)
!6809 = !DILocation(line: 3071, column: 33, scope: !6807)
!6810 = !DILocation(line: 3074, column: 10, scope: !6807)
!6811 = !DILocation(line: 3074, column: 14, scope: !6807)
!6812 = !DILocation(line: 3074, column: 25, scope: !6807)
!6813 = !DILocation(line: 3074, column: 3, scope: !6807)
!6814 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !2640, file: !2640, line: 729, type: !6815, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6815 = !DISubroutineType(types: !6816)
!6816 = !{null, !2643}
!6817 = !DILocalVariable(name: "ptr", arg: 1, scope: !6814, file: !2640, line: 729, type: !2643)
!6818 = !DILocation(line: 729, column: 39, scope: !6814)
!6819 = !DILocation(line: 731, column: 3, scope: !6814)
!6820 = !DILocation(line: 731, column: 8, scope: !6814)
!6821 = !DILocation(line: 731, column: 13, scope: !6814)
!6822 = !DILocation(line: 732, column: 3, scope: !6814)
!6823 = !DILocation(line: 732, column: 8, scope: !6814)
!6824 = !DILocation(line: 732, column: 13, scope: !6814)
!6825 = !DILocation(line: 733, column: 3, scope: !6814)
!6826 = !DILocation(line: 733, column: 8, scope: !6814)
!6827 = !DILocation(line: 733, column: 18, scope: !6814)
!6828 = !DILocation(line: 734, column: 3, scope: !6814)
!6829 = !DILocation(line: 734, column: 8, scope: !6814)
!6830 = !DILocation(line: 734, column: 14, scope: !6814)
!6831 = !DILocation(line: 735, column: 3, scope: !6814)
!6832 = !DILocation(line: 735, column: 8, scope: !6814)
!6833 = !DILocation(line: 735, column: 16, scope: !6814)
!6834 = !DILocation(line: 736, column: 3, scope: !6814)
!6835 = !DILocation(line: 736, column: 8, scope: !6814)
!6836 = !DILocation(line: 736, column: 17, scope: !6814)
!6837 = !DILocation(line: 737, column: 3, scope: !6814)
!6838 = !DILocation(line: 737, column: 8, scope: !6814)
!6839 = !DILocation(line: 737, column: 13, scope: !6814)
!6840 = !DILocation(line: 738, column: 1, scope: !6814)
!6841 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !398, file: !398, line: 3061, type: !5467, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6842 = !DILocalVariable(name: "gs", arg: 1, scope: !6841, file: !398, line: 3061, type: !3371)
!6843 = !DILocation(line: 3061, column: 35, scope: !6841)
!6844 = !DILocation(line: 3064, column: 10, scope: !6841)
!6845 = !DILocation(line: 3064, column: 14, scope: !6841)
!6846 = !DILocation(line: 3064, column: 25, scope: !6841)
!6847 = !DILocation(line: 3064, column: 3, scope: !6841)
!6848 = distinct !DISubprogram(name: "gimple_set_op", scope: !398, file: !398, line: 1663, type: !6849, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6849 = !DISubroutineType(types: !6850)
!6850 = !{null, !1157, !7, !826}
!6851 = !DILocalVariable(name: "gs", arg: 1, scope: !6848, file: !398, line: 1663, type: !1157)
!6852 = !DILocation(line: 1663, column: 23, scope: !6848)
!6853 = !DILocalVariable(name: "i", arg: 2, scope: !6848, file: !398, line: 1663, type: !7)
!6854 = !DILocation(line: 1663, column: 36, scope: !6848)
!6855 = !DILocalVariable(name: "op", arg: 3, scope: !6848, file: !398, line: 1663, type: !826)
!6856 = !DILocation(line: 1663, column: 44, scope: !6848)
!6857 = !DILocation(line: 1665, column: 3, scope: !6848)
!6858 = !DILocation(line: 1671, column: 24, scope: !6848)
!6859 = !DILocation(line: 1671, column: 15, scope: !6848)
!6860 = !DILocation(line: 1671, column: 3, scope: !6848)
!6861 = !DILocation(line: 1671, column: 19, scope: !6848)
!6862 = !DILocation(line: 1671, column: 22, scope: !6848)
!6863 = !DILocation(line: 1672, column: 1, scope: !6848)
!6864 = distinct !DISubprogram(name: "gimple_num_ops", scope: !398, file: !398, line: 1596, type: !5467, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6865 = !DILocalVariable(name: "gs", arg: 1, scope: !6864, file: !398, line: 1596, type: !3371)
!6866 = !DILocation(line: 1596, column: 30, scope: !6864)
!6867 = !DILocation(line: 1598, column: 10, scope: !6864)
!6868 = !DILocation(line: 1598, column: 14, scope: !6864)
!6869 = !DILocation(line: 1598, column: 21, scope: !6864)
!6870 = !DILocation(line: 1598, column: 3, scope: !6864)
!6871 = distinct !DISubprogram(name: "gimple_ops", scope: !398, file: !398, line: 1614, type: !3512, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6872 = !DILocalVariable(name: "gs", arg: 1, scope: !6871, file: !398, line: 1614, type: !1157)
!6873 = !DILocation(line: 1614, column: 20, scope: !6871)
!6874 = !DILocalVariable(name: "off", scope: !6871, file: !398, line: 1616, type: !1302)
!6875 = !DILocation(line: 1616, column: 10, scope: !6871)
!6876 = !DILocation(line: 1621, column: 56, scope: !6871)
!6877 = !DILocation(line: 1621, column: 28, scope: !6871)
!6878 = !DILocation(line: 1621, column: 9, scope: !6871)
!6879 = !DILocation(line: 1621, column: 7, scope: !6871)
!6880 = !DILocation(line: 1622, column: 3, scope: !6871)
!6881 = !DILocation(line: 1624, column: 29, scope: !6871)
!6882 = !DILocation(line: 1624, column: 20, scope: !6871)
!6883 = !DILocation(line: 1624, column: 34, scope: !6871)
!6884 = !DILocation(line: 1624, column: 32, scope: !6871)
!6885 = !DILocation(line: 1624, column: 10, scope: !6871)
!6886 = !DILocation(line: 1624, column: 3, scope: !6871)
!6887 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !398, file: !398, line: 1073, type: !6888, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6888 = !DISubroutineType(types: !6889)
!6889 = !{!771, !1157}
!6890 = !DILocalVariable(name: "gs", arg: 1, scope: !6887, file: !398, line: 1073, type: !1157)
!6891 = !DILocation(line: 1073, column: 36, scope: !6887)
!6892 = !DILocation(line: 1075, column: 37, scope: !6887)
!6893 = !DILocation(line: 1075, column: 24, scope: !6887)
!6894 = !DILocation(line: 1075, column: 10, scope: !6887)
!6895 = !DILocation(line: 1075, column: 3, scope: !6887)
!6896 = distinct !DISubprogram(name: "gss_for_code", scope: !398, file: !398, line: 1061, type: !6897, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6897 = !DISubroutineType(types: !6898)
!6898 = !{!771, !580}
!6899 = !DILocalVariable(name: "code", arg: 1, scope: !6896, file: !398, line: 1061, type: !580)
!6900 = !DILocation(line: 1061, column: 32, scope: !6896)
!6901 = !DILocation(line: 1066, column: 24, scope: !6896)
!6902 = !DILocation(line: 1066, column: 10, scope: !6896)
!6903 = !DILocation(line: 1066, column: 3, scope: !6896)
!6904 = distinct !DISubprogram(name: "single_pred_edge", scope: !135, file: !135, line: 653, type: !6905, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6905 = !DISubroutineType(types: !6906)
!6906 = !{!1137, !5109}
!6907 = !DILocalVariable(name: "bb", arg: 1, scope: !6904, file: !135, line: 653, type: !5109)
!6908 = !DILocation(line: 653, column: 37, scope: !6904)
!6909 = !DILocation(line: 655, column: 3, scope: !6904)
!6910 = !DILocation(line: 656, column: 10, scope: !6904)
!6911 = !DILocation(line: 656, column: 3, scope: !6904)
!6912 = distinct !DISubprogram(name: "single_pred_p", scope: !135, file: !135, line: 634, type: !6913, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6913 = !DISubroutineType(types: !6914)
!6914 = !{!946, !5109}
!6915 = !DILocalVariable(name: "bb", arg: 1, scope: !6912, file: !135, line: 634, type: !5109)
!6916 = !DILocation(line: 634, column: 34, scope: !6912)
!6917 = !DILocation(line: 636, column: 10, scope: !6912)
!6918 = !DILocation(line: 636, column: 33, scope: !6912)
!6919 = !DILocation(line: 636, column: 3, scope: !6912)
!6920 = distinct !DISubprogram(name: "VEC_adjust_info_base_length", scope: !3, file: !3, line: 122, type: !6921, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6921 = !DISubroutineType(types: !6922)
!6922 = !{!7, !6923}
!6923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6924, size: 64)
!6924 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2477)
!6925 = !DILocalVariable(name: "vec_", arg: 1, scope: !6920, file: !3, line: 122, type: !6923)
!6926 = !DILocation(line: 122, column: 1, scope: !6920)
!6927 = distinct !DISubprogram(name: "VEC_adjust_info_base_last", scope: !3, file: !3, line: 122, type: !6928, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6928 = !DISubroutineType(types: !6929)
!6929 = !{!6268, !6376}
!6930 = !DILocalVariable(name: "vec_", arg: 1, scope: !6927, file: !3, line: 122, type: !6376)
!6931 = !DILocation(line: 122, column: 1, scope: !6927)
!6932 = !DILocation(line: 0, scope: !6927)
!6933 = distinct !DISubprogram(name: "VEC_adjust_info_base_pop", scope: !3, file: !3, line: 122, type: !6934, scopeLine: 122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6934 = !DISubroutineType(types: !6935)
!6935 = !{null, !6376}
!6936 = !DILocalVariable(name: "vec_", arg: 1, scope: !6933, file: !3, line: 122, type: !6376)
!6937 = !DILocation(line: 122, column: 1, scope: !6933)
!6938 = distinct !DISubprogram(name: "VEC_adjust_info_stack_free", scope: !3, file: !3, line: 123, type: !6939, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6939 = !DISubroutineType(types: !6940)
!6940 = !{null, !6269}
!6941 = !DILocalVariable(name: "vec_", arg: 1, scope: !6938, file: !3, line: 123, type: !6269)
!6942 = !DILocation(line: 123, column: 1, scope: !6938)
!6943 = !DILocation(line: 123, column: 1, scope: !6944)
!6944 = distinct !DILexicalBlock(scope: !6938, file: !3, line: 123, column: 1)
!6945 = distinct !DISubprogram(name: "VEC_data_reference_p_base_iterate", scope: !2210, file: !2210, line: 208, type: !6946, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6946 = !DISubroutineType(types: !6947)
!6947 = !{!923, !6948, !7, !6950}
!6948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6949, size: 64)
!6949 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2275)
!6950 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!6951 = !DILocalVariable(name: "vec_", arg: 1, scope: !6945, file: !2210, line: 208, type: !6948)
!6952 = !DILocation(line: 208, column: 1, scope: !6945)
!6953 = !DILocalVariable(name: "ix_", arg: 2, scope: !6945, file: !2210, line: 208, type: !7)
!6954 = !DILocalVariable(name: "ptr", arg: 3, scope: !6945, file: !2210, line: 208, type: !6950)
!6955 = !DILocation(line: 208, column: 1, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6945, file: !2210, line: 208, column: 1)
!6957 = !DILocation(line: 208, column: 1, scope: !6958)
!6958 = distinct !DILexicalBlock(scope: !6956, file: !2210, line: 208, column: 1)
!6959 = !DILocation(line: 208, column: 1, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6956, file: !2210, line: 208, column: 1)
!6961 = distinct !DISubprogram(name: "vect_update_init_of_dr", scope: !3, file: !3, line: 2082, type: !6962, scopeLine: 2083, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6962 = !DISubroutineType(types: !6963)
!6963 = !{null, !2208, !826}
!6964 = !DILocalVariable(name: "dr", arg: 1, scope: !6961, file: !3, line: 2082, type: !2208)
!6965 = !DILocation(line: 2082, column: 48, scope: !6961)
!6966 = !DILocalVariable(name: "niters", arg: 2, scope: !6961, file: !3, line: 2082, type: !826)
!6967 = !DILocation(line: 2082, column: 57, scope: !6961)
!6968 = !DILocalVariable(name: "offset", scope: !6961, file: !3, line: 2084, type: !826)
!6969 = !DILocation(line: 2084, column: 8, scope: !6961)
!6970 = !DILocation(line: 2084, column: 17, scope: !6961)
!6971 = !DILocation(line: 2086, column: 12, scope: !6961)
!6972 = !DILocation(line: 2086, column: 10, scope: !6961)
!6973 = !DILocation(line: 2089, column: 12, scope: !6961)
!6974 = !DILocation(line: 2089, column: 10, scope: !6961)
!6975 = !DILocation(line: 2091, column: 20, scope: !6961)
!6976 = !DILocation(line: 2091, column: 3, scope: !6961)
!6977 = !DILocation(line: 2091, column: 18, scope: !6961)
!6978 = !DILocation(line: 2092, column: 1, scope: !6961)
!6979 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !398, file: !398, line: 33, type: !6980, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6980 = !DISubroutineType(types: !6981)
!6981 = !{!923, !3797, !7, !6982}
!6982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1157, size: 64)
!6983 = !DILocalVariable(name: "vec_", arg: 1, scope: !6979, file: !398, line: 33, type: !3797)
!6984 = !DILocation(line: 33, column: 1, scope: !6979)
!6985 = !DILocalVariable(name: "ix_", arg: 2, scope: !6979, file: !398, line: 33, type: !7)
!6986 = !DILocalVariable(name: "ptr", arg: 3, scope: !6979, file: !398, line: 33, type: !6982)
!6987 = !DILocation(line: 33, column: 1, scope: !6988)
!6988 = distinct !DILexicalBlock(scope: !6979, file: !398, line: 33, column: 1)
!6989 = !DILocation(line: 33, column: 1, scope: !6990)
!6990 = distinct !DILexicalBlock(scope: !6988, file: !398, line: 33, column: 1)
!6991 = !DILocation(line: 33, column: 1, scope: !6992)
!6992 = distinct !DILexicalBlock(scope: !6988, file: !398, line: 33, column: 1)
!6993 = distinct !DISubprogram(name: "make_ssa_name", scope: !2640, file: !2640, line: 1245, type: !6994, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!6994 = !DISubroutineType(types: !6995)
!6995 = !{!826, !826, !1157}
!6996 = !DILocalVariable(name: "var", arg: 1, scope: !6993, file: !2640, line: 1245, type: !826)
!6997 = !DILocation(line: 1245, column: 21, scope: !6993)
!6998 = !DILocalVariable(name: "stmt", arg: 2, scope: !6993, file: !2640, line: 1245, type: !1157)
!6999 = !DILocation(line: 1245, column: 33, scope: !6993)
!7000 = !DILocation(line: 1247, column: 28, scope: !6993)
!7001 = !DILocation(line: 1247, column: 34, scope: !6993)
!7002 = !DILocation(line: 1247, column: 39, scope: !6993)
!7003 = !DILocation(line: 1247, column: 10, scope: !6993)
!7004 = !DILocation(line: 1247, column: 3, scope: !6993)
!7005 = distinct !DISubprogram(name: "VEC_ddr_p_base_iterate", scope: !2210, file: !2210, line: 332, type: !7006, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!7006 = !DISubroutineType(types: !7007)
!7007 = !{!923, !3804, !7, !7008}
!7008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!7009 = !DILocalVariable(name: "vec_", arg: 1, scope: !7005, file: !2210, line: 332, type: !3804)
!7010 = !DILocation(line: 332, column: 1, scope: !7005)
!7011 = !DILocalVariable(name: "ix_", arg: 2, scope: !7005, file: !2210, line: 332, type: !7)
!7012 = !DILocalVariable(name: "ptr", arg: 3, scope: !7005, file: !2210, line: 332, type: !7008)
!7013 = !DILocation(line: 332, column: 1, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !7005, file: !2210, line: 332, column: 1)
!7015 = !DILocation(line: 332, column: 1, scope: !7016)
!7016 = distinct !DILexicalBlock(scope: !7014, file: !2210, line: 332, column: 1)
!7017 = !DILocation(line: 332, column: 1, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !7014, file: !2210, line: 332, column: 1)
!7019 = distinct !DISubprogram(name: "vect_vfa_segment_size", scope: !3, file: !3, line: 2321, type: !7020, scopeLine: 2322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2501)
!7020 = !DISubroutineType(types: !7021)
!7021 = !{!826, !2208, !826}
!7022 = !DILocalVariable(name: "dr", arg: 1, scope: !7019, file: !3, line: 2321, type: !2208)
!7023 = !DILocation(line: 2321, column: 47, scope: !7019)
!7024 = !DILocalVariable(name: "vect_factor", arg: 2, scope: !7019, file: !3, line: 2321, type: !826)
!7025 = !DILocation(line: 2321, column: 56, scope: !7019)
!7026 = !DILocalVariable(name: "segment_length", scope: !7019, file: !3, line: 2323, type: !826)
!7027 = !DILocation(line: 2323, column: 8, scope: !7019)
!7028 = !DILocation(line: 2323, column: 25, scope: !7019)
!7029 = !DILocation(line: 2326, column: 38, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !7019, file: !3, line: 2326, column: 7)
!7031 = !DILocation(line: 2326, column: 7, scope: !7030)
!7032 = !DILocation(line: 2326, column: 42, scope: !7030)
!7033 = !DILocation(line: 2326, column: 7, scope: !7019)
!7034 = !DILocalVariable(name: "vector_size", scope: !7035, file: !3, line: 2328, type: !826)
!7035 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 2327, column: 5)
!7036 = !DILocation(line: 2328, column: 12, scope: !7035)
!7037 = !DILocation(line: 2328, column: 26, scope: !7035)
!7038 = !DILocation(line: 2331, column: 24, scope: !7035)
!7039 = !DILocation(line: 2331, column: 22, scope: !7035)
!7040 = !DILocation(line: 2333, column: 5, scope: !7035)
!7041 = !DILocation(line: 2334, column: 10, scope: !7019)
!7042 = !DILocation(line: 2334, column: 3, scope: !7019)
