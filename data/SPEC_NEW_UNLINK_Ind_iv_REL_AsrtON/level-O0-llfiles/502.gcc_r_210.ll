; ModuleID = 'predict.c'
source_filename = "predict.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gcov_ctr_summary = type { i32, i32, i64, i64, i64 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.predictor_info = type { i8*, i32, i32 }
%struct.sreal = type { i64, i32 }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.edge_prediction = type { %struct.edge_prediction*, %struct.edge_def*, i32, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.edge_info_def = type { %struct.sreal, i8 }
%struct.block_info_def = type { %struct.sreal, %struct.basic_block_def*, i32 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@cfun = external dso_local global %struct.function*, align 8
@profile_info = external dso_local global %struct.gcov_ctr_summary*, align 8
@flag_branch_probabilities = external dso_local global i32, align 4
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str = private unnamed_addr constant [5 x i8] c"cold\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"hot\00", align 1
@flag_guess_branch_prob = external dso_local global i32, align 4
@optimize_size = external dso_local global i32, align 4
@x_rtl = external dso_local global %struct.rtl_data, align 8
@bb_predictions = internal global %struct.pointer_map_t* null, align 8, !dbg !0
@.str.2 = private unnamed_addr constant [10 x i8] c"predict.c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@predictor_info = internal constant [29 x %struct.predictor_info] [%struct.predictor_info { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0), i32 10000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i32 0, i32 0), i32 10000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i32 10000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i32 10000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10, i32 0, i32 0), i32 10000, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11, i32 0, i32 0), i32 10000, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i32 9996, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.13, i32 0, i32 0), i32 10000, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0), i32 5000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0), i32 9996, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0), i32 9996, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i32 8600, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i32 0, i32 0), i32 9100, i32 1 }, %struct.predictor_info { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i32 0, i32 0), i32 8500, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i32 0, i32 0), i32 8500, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0), i32 7900, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i32 0, i32 0), i32 7100, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i32 9000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.24, i32 0, i32 0), i32 7300, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.25, i32 0, i32 0), i32 7200, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0), i32 9000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i32 7100, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.28, i32 0, i32 0), i32 6100, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0), i32 7000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i32 0, i32 0), i32 6700, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.31, i32 0, i32 0), i32 9600, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.32, i32 0, i32 0), i32 9000, i32 0 }, %struct.predictor_info { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.33, i32 0, i32 0), i32 9996, i32 0 }, %struct.predictor_info zeroinitializer], align 16, !dbg !3534
@optimize = external dso_local global i32, align 4
@estimate_bb_frequencies.real_values_initialized = internal global i32 0, align 4, !dbg !3484
@real_zero = internal global %struct.sreal zeroinitializer, align 8, !dbg !3520
@real_one = internal global %struct.sreal zeroinitializer, align 8, !dbg !3522
@real_br_prob_base = internal global %struct.sreal zeroinitializer, align 8, !dbg !3526
@real_bb_freq_max = internal global %struct.sreal zeroinitializer, align 8, !dbg !3532
@real_one_half = internal global %struct.sreal zeroinitializer, align 8, !dbg !3530
@real_inv_br_prob_base = internal global %struct.sreal zeroinitializer, align 8, !dbg !3528
@real_almost_one = internal global %struct.sreal zeroinitializer, align 8, !dbg !3524
@flag_reorder_functions = external dso_local global i32, align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.4 = private unnamed_addr constant [8 x i8] c"profile\00", align 1
@pass_profile = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i8 ()* @gate_estimate_probability, i32 ()* @tree_estimate_probability_driver, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 138, i32 8, i32 0, i32 0, i32 0, i32 6 } }, align 8, !dbg !3490
@.str.5 = private unnamed_addr constant [21 x i8] c"*strip_predict_hints\00", align 1
@pass_strip_predict_hints = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i32 0, i32 0), i8 ()* null, i32 ()* @strip_predict_hints, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 138, i32 8, i32 0, i32 0, i32 0, i32 6 } }, align 8, !dbg !3518
@.str.6 = private unnamed_addr constant [9 x i8] c"combined\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"DS theory\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"first match\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"no prediction\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"unconditional jump\00", align 1
@.str.11 = private unnamed_addr constant [16 x i8] c"loop iterations\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"__builtin_expect\00", align 1
@.str.13 = private unnamed_addr constant [24 x i8] c"guessed loop iterations\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"continue\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"noreturn call\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"cold function call\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"loop branch\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"loop exit\00", align 1
@.str.19 = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"pointer (on trees)\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"opcode values positive\00", align 1
@.str.22 = private unnamed_addr constant [23 x i8] c"opcode values nonequal\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"fp_opcode\00", align 1
@.str.24 = private unnamed_addr constant [34 x i8] c"opcode values positive (on trees)\00", align 1
@.str.25 = private unnamed_addr constant [34 x i8] c"opcode values nonequal (on trees)\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"fp_opcode (on trees)\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"call\00", align 1
@.str.28 = private unnamed_addr constant [24 x i8] c"early return (on trees)\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"goto\00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c"const return\00", align 1
@.str.31 = private unnamed_addr constant [16 x i8] c"negative return\00", align 1
@.str.32 = private unnamed_addr constant [12 x i8] c"null return\00", align 1
@.str.33 = private unnamed_addr constant [14 x i8] c"mudflap check\00", align 1
@rtx_class = external dso_local constant [139 x i32], align 16
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@mode_class = external dso_local constant [87 x i8], align 16
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.34 = private unnamed_addr constant [31 x i8] c"Predictions for insn %i bb %i\0A\00", align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"  %s heuristics%s: %.1f%%\00", align 1
@.str.36 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.37 = private unnamed_addr constant [11 x i8] c" (ignored)\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"  exec \00", align 1
@.str.39 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.40 = private unnamed_addr constant [6 x i8] c" hit \00", align 1
@.str.41 = private unnamed_addr constant [10 x i8] c" (%.1f%%)\00", align 1
@.str.42 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.43 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.44 = private unnamed_addr constant [51 x i8] c"%i edges in bb %i predicted to even probabilities\0A\00", align 1
@.str.45 = private unnamed_addr constant [23 x i8] c"Predictions for bb %i\0A\00", align 1
@.str.46 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.47 = private unnamed_addr constant [49 x i8] c"Irreducible region hit, ignoring edge to %i->%i\0A\00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@targetm = external dso_local global %struct.gcc_target, align 8
@flag_reorder_blocks_and_partition = external dso_local global i32, align 4
@.str.48 = private unnamed_addr constant [10 x i8] c".text.hot\00", align 1
@.str.49 = private unnamed_addr constant [15 x i8] c".text.unlikely\00", align 1
@dump_flags = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_hot_bb_p(%struct.basic_block_def* %bb) #0 !dbg !3551 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3557, metadata !DIExpression()), !dbg !3558
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3559
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3559
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3559
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3559
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !3559
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !3559
  %cmp = icmp eq i32 %2, 2, !dbg !3561
  br i1 %cmp, label %if.then, label %if.end, !dbg !3562

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3563
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 8, !dbg !3564
  %4 = load i64, i64* %count, align 8, !dbg !3564
  %call = call zeroext i8 @maybe_hot_count_p(i64 %4), !dbg !3565
  store i8 %call, i8* %retval, align 1, !dbg !3566
  br label %return, !dbg !3566

if.end:                                           ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3567
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 11, !dbg !3568
  %6 = load i32, i32* %frequency, align 8, !dbg !3568
  %call1 = call zeroext i8 @maybe_hot_frequency_p(i32 %6), !dbg !3569
  store i8 %call1, i8* %retval, align 1, !dbg !3570
  br label %return, !dbg !3570

return:                                           ; preds = %if.end, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !3571
  ret i8 %7, !dbg !3571
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @maybe_hot_count_p(i64 %count) #0 !dbg !3572 {
entry:
  %retval = alloca i8, align 1
  %count.addr = alloca i64, align 8
  store i64 %count, i64* %count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %count.addr, metadata !3575, metadata !DIExpression()), !dbg !3576
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3577
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3577
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3577
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3577
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !3577
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !3577
  %cmp = icmp ne i32 %2, 2, !dbg !3579
  br i1 %cmp, label %if.then, label %if.end, !dbg !3580

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !3581
  br label %return, !dbg !3581

if.end:                                           ; preds = %entry
  %3 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3582
  %runs = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %3, i32 0, i32 1, !dbg !3584
  %4 = load i32, i32* %runs, align 4, !dbg !3584
  %conv = zext i32 %4 to i64, !dbg !3582
  %5 = load i64, i64* %count.addr, align 8, !dbg !3585
  %cmp1 = icmp sge i64 %conv, %5, !dbg !3586
  br i1 %cmp1, label %if.then3, label %if.end4, !dbg !3587

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !3588
  br label %return, !dbg !3588

if.end4:                                          ; preds = %if.end
  %6 = load i64, i64* %count.addr, align 8, !dbg !3589
  %7 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3590
  %sum_max = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %7, i32 0, i32 4, !dbg !3591
  %8 = load i64, i64* %sum_max, align 8, !dbg !3591
  %9 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3592
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %9, i64 42, !dbg !3592
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3592
  %10 = load i32, i32* %value, align 8, !dbg !3592
  %conv5 = sext i32 %10 to i64, !dbg !3592
  %div = sdiv i64 %8, %conv5, !dbg !3593
  %cmp6 = icmp sgt i64 %6, %div, !dbg !3594
  %conv7 = zext i1 %cmp6 to i32, !dbg !3594
  %conv8 = trunc i32 %conv7 to i8, !dbg !3595
  store i8 %conv8, i8* %retval, align 1, !dbg !3596
  br label %return, !dbg !3596

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !3597
  ret i8 %11, !dbg !3597
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @maybe_hot_frequency_p(i32 %freq) #0 !dbg !3598 {
entry:
  %retval = alloca i8, align 1
  %freq.addr = alloca i32, align 4
  store i32 %freq, i32* %freq.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %freq.addr, metadata !3601, metadata !DIExpression()), !dbg !3602
  %0 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3603
  %tobool = icmp ne %struct.gcov_ctr_summary* %0, null, !dbg !3603
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !3605

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3606
  %tobool1 = icmp ne i32 %1, 0, !dbg !3606
  br i1 %tobool1, label %if.end11, label %if.then, !dbg !3607

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3608
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !3608
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3611
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !3611
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3611
  %bf.clear = and i32 %bf.lshr, 3, !dbg !3611
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !3612
  br i1 %cmp, label %if.then2, label %if.end, !dbg !3613

if.then2:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !3614
  br label %return, !dbg !3614

if.end:                                           ; preds = %if.then
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3615
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !3615
  %function_frequency4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 20, !dbg !3617
  %bf.load5 = load i32, i32* %function_frequency4, align 8, !dbg !3617
  %bf.lshr6 = lshr i32 %bf.load5, 16, !dbg !3617
  %bf.clear7 = and i32 %bf.lshr6, 3, !dbg !3617
  %cmp8 = icmp eq i32 %bf.clear7, 2, !dbg !3618
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !3619

if.then9:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !3620
  br label %return, !dbg !3620

if.end10:                                         ; preds = %if.end
  br label %if.end11, !dbg !3621

if.end11:                                         ; preds = %if.end10, %lor.lhs.false
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3622
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3622
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !3622
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3622
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 7, !dbg !3622
  %6 = load i32, i32* %x_profile_status, align 8, !dbg !3622
  %cmp13 = icmp eq i32 %6, 0, !dbg !3624
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !3625

if.then14:                                        ; preds = %if.end11
  store i8 1, i8* %retval, align 1, !dbg !3626
  br label %return, !dbg !3626

if.end15:                                         ; preds = %if.end11
  %7 = load i32, i32* %freq.addr, align 4, !dbg !3627
  %8 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3629
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %8, i64 43, !dbg !3629
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3629
  %9 = load i32, i32* %value, align 8, !dbg !3629
  %div = sdiv i32 10000, %9, !dbg !3630
  %cmp16 = icmp slt i32 %7, %div, !dbg !3631
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !3632

if.then17:                                        ; preds = %if.end15
  store i8 0, i8* %retval, align 1, !dbg !3633
  br label %return, !dbg !3633

if.end18:                                         ; preds = %if.end15
  store i8 1, i8* %retval, align 1, !dbg !3634
  br label %return, !dbg !3634

return:                                           ; preds = %if.end18, %if.then17, %if.then14, %if.then9, %if.then2
  %10 = load i8, i8* %retval, align 1, !dbg !3635
  ret i8 %10, !dbg !3635
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @cgraph_maybe_hot_edge_p(%struct.cgraph_edge* %edge) #0 !dbg !3636 {
entry:
  %retval = alloca i8, align 1
  %edge.addr = alloca %struct.cgraph_edge*, align 8
  store %struct.cgraph_edge* %edge, %struct.cgraph_edge** %edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cgraph_edge** %edge.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  %0 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3845
  %tobool = icmp ne %struct.gcov_ctr_summary* %0, null, !dbg !3845
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3847

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3848
  %tobool1 = icmp ne i32 %1, 0, !dbg !3848
  br i1 %tobool1, label %land.lhs.true2, label %if.end, !dbg !3849

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3850
  %count = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %2, i32 0, i32 0, !dbg !3851
  %3 = load i64, i64* %count, align 8, !dbg !3851
  %4 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3852
  %sum_max = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %4, i32 0, i32 4, !dbg !3853
  %5 = load i64, i64* %sum_max, align 8, !dbg !3853
  %6 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3854
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %6, i64 42, !dbg !3854
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !3854
  %7 = load i32, i32* %value, align 8, !dbg !3854
  %conv = sext i32 %7 to i64, !dbg !3854
  %div = sdiv i64 %5, %conv, !dbg !3855
  %cmp = icmp sle i64 %3, %div, !dbg !3856
  br i1 %cmp, label %if.then, label %if.end, !dbg !3857

if.then:                                          ; preds = %land.lhs.true2
  store i8 0, i8* %retval, align 1, !dbg !3858
  br label %return, !dbg !3858

if.end:                                           ; preds = %land.lhs.true2, %land.lhs.true, %entry
  %8 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3859
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %8, i32 0, i32 2, !dbg !3859
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !3859
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i32 0, i32 0, !dbg !3859
  %10 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3859
  %decl_common = bitcast %union.tree_node* %10 to %struct.tree_decl_common*, !dbg !3859
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !3859
  %11 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !3859
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %union.tree_node* %11), !dbg !3861
  %tobool4 = icmp ne %union.tree_node* %call, null, !dbg !3861
  br i1 %tobool4, label %if.then10, label %lor.lhs.false, !dbg !3862

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3863
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %12, i32 0, i32 1, !dbg !3863
  %13 = load %struct.cgraph_node*, %struct.cgraph_node** %caller, align 8, !dbg !3863
  %decl5 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %13, i32 0, i32 0, !dbg !3863
  %14 = load %union.tree_node*, %union.tree_node** %decl5, align 8, !dbg !3863
  %decl_common6 = bitcast %union.tree_node* %14 to %struct.tree_decl_common*, !dbg !3863
  %attributes7 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common6, i32 0, i32 6, !dbg !3863
  %15 = load %union.tree_node*, %union.tree_node** %attributes7, align 8, !dbg !3863
  %call8 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %union.tree_node* %15), !dbg !3864
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !3864
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3865

if.then10:                                        ; preds = %lor.lhs.false, %if.end
  store i8 0, i8* %retval, align 1, !dbg !3866
  br label %return, !dbg !3866

if.end11:                                         ; preds = %lor.lhs.false
  %16 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3867
  %caller12 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %16, i32 0, i32 1, !dbg !3867
  %17 = load %struct.cgraph_node*, %struct.cgraph_node** %caller12, align 8, !dbg !3867
  %decl13 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %17, i32 0, i32 0, !dbg !3867
  %18 = load %union.tree_node*, %union.tree_node** %decl13, align 8, !dbg !3867
  %decl_common14 = bitcast %union.tree_node* %18 to %struct.tree_decl_common*, !dbg !3867
  %attributes15 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common14, i32 0, i32 6, !dbg !3867
  %19 = load %union.tree_node*, %union.tree_node** %attributes15, align 8, !dbg !3867
  %call16 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), %union.tree_node* %19), !dbg !3869
  %tobool17 = icmp ne %union.tree_node* %call16, null, !dbg !3869
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !3870

if.then18:                                        ; preds = %if.end11
  store i8 1, i8* %retval, align 1, !dbg !3871
  br label %return, !dbg !3871

if.end19:                                         ; preds = %if.end11
  %20 = load i32, i32* @flag_guess_branch_prob, align 4, !dbg !3872
  %tobool20 = icmp ne i32 %20, 0, !dbg !3872
  br i1 %tobool20, label %land.lhs.true21, label %if.end28, !dbg !3874

land.lhs.true21:                                  ; preds = %if.end19
  %21 = load %struct.cgraph_edge*, %struct.cgraph_edge** %edge.addr, align 8, !dbg !3875
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %21, i32 0, i32 11, !dbg !3876
  %22 = load i32, i32* %frequency, align 8, !dbg !3876
  %23 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3877
  %arrayidx22 = getelementptr inbounds %struct.param_info, %struct.param_info* %23, i64 43, !dbg !3877
  %value23 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx22, i32 0, i32 1, !dbg !3877
  %24 = load i32, i32* %value23, align 8, !dbg !3877
  %div24 = sdiv i32 1000, %24, !dbg !3878
  %cmp25 = icmp sle i32 %22, %div24, !dbg !3879
  br i1 %cmp25, label %if.then27, label %if.end28, !dbg !3880

if.then27:                                        ; preds = %land.lhs.true21
  store i8 0, i8* %retval, align 1, !dbg !3881
  br label %return, !dbg !3881

if.end28:                                         ; preds = %land.lhs.true21, %if.end19
  store i8 1, i8* %retval, align 1, !dbg !3882
  br label %return, !dbg !3882

return:                                           ; preds = %if.end28, %if.then27, %if.then18, %if.then10, %if.then
  %25 = load i8, i8* %retval, align 1, !dbg !3883
  ret i8 %25, !dbg !3883
}

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @maybe_hot_edge_p(%struct.edge_def* %e) #0 !dbg !3884 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3887, metadata !DIExpression()), !dbg !3888
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3889
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3889
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3889
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3889
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !3889
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !3889
  %cmp = icmp eq i32 %2, 2, !dbg !3891
  br i1 %cmp, label %if.then, label %if.end, !dbg !3892

if.then:                                          ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3893
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 9, !dbg !3894
  %4 = load i64, i64* %count, align 8, !dbg !3894
  %call = call zeroext i8 @maybe_hot_count_p(i64 %4), !dbg !3895
  store i8 %call, i8* %retval, align 1, !dbg !3896
  br label %return, !dbg !3896

if.end:                                           ; preds = %entry
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3897
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !3897
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3897
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 11, !dbg !3897
  %7 = load i32, i32* %frequency, align 8, !dbg !3897
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3897
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 8, !dbg !3897
  %9 = load i32, i32* %probability, align 4, !dbg !3897
  %mul = mul nsw i32 %7, %9, !dbg !3897
  %add = add nsw i32 %mul, 5000, !dbg !3897
  %div = sdiv i32 %add, 10000, !dbg !3897
  %call1 = call zeroext i8 @maybe_hot_frequency_p(i32 %div), !dbg !3898
  store i8 %call1, i8* %retval, align 1, !dbg !3899
  br label %return, !dbg !3899

return:                                           ; preds = %if.end, %if.then
  %10 = load i8, i8* %retval, align 1, !dbg !3900
  ret i8 %10, !dbg !3900
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @probably_never_executed_bb_p(%struct.basic_block_def* %bb) #0 !dbg !3901 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3902, metadata !DIExpression()), !dbg !3903
  %0 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3904
  %tobool = icmp ne %struct.gcov_ctr_summary* %0, null, !dbg !3904
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3906

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3907
  %tobool1 = icmp ne i32 %1, 0, !dbg !3907
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3908

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3909
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 8, !dbg !3910
  %3 = load i64, i64* %count, align 8, !dbg !3910
  %4 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3911
  %runs = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %4, i32 0, i32 1, !dbg !3912
  %5 = load i32, i32* %runs, align 4, !dbg !3912
  %div = udiv i32 %5, 2, !dbg !3913
  %conv = zext i32 %div to i64, !dbg !3911
  %add = add nsw i64 %3, %conv, !dbg !3914
  %6 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3915
  %runs2 = getelementptr inbounds %struct.gcov_ctr_summary, %struct.gcov_ctr_summary* %6, i32 0, i32 1, !dbg !3916
  %7 = load i32, i32* %runs2, align 4, !dbg !3916
  %conv3 = zext i32 %7 to i64, !dbg !3915
  %div4 = sdiv i64 %add, %conv3, !dbg !3917
  %cmp = icmp eq i64 %div4, 0, !dbg !3918
  %conv5 = zext i1 %cmp to i32, !dbg !3918
  %conv6 = trunc i32 %conv5 to i8, !dbg !3919
  store i8 %conv6, i8* %retval, align 1, !dbg !3920
  br label %return, !dbg !3920

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !3921
  %tobool7 = icmp ne %struct.gcov_ctr_summary* %8, null, !dbg !3921
  br i1 %tobool7, label %lor.lhs.false, label %land.lhs.true9, !dbg !3923

lor.lhs.false:                                    ; preds = %if.end
  %9 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !3924
  %tobool8 = icmp ne i32 %9, 0, !dbg !3924
  br i1 %tobool8, label %if.end13, label %land.lhs.true9, !dbg !3925

land.lhs.true9:                                   ; preds = %lor.lhs.false, %if.end
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3926
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !3926
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !3927
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !3927
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3927
  %bf.clear = and i32 %bf.lshr, 3, !dbg !3927
  %cmp10 = icmp eq i32 %bf.clear, 0, !dbg !3928
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !3929

if.then12:                                        ; preds = %land.lhs.true9
  store i8 1, i8* %retval, align 1, !dbg !3930
  br label %return, !dbg !3930

if.end13:                                         ; preds = %land.lhs.true9, %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !3931
  br label %return, !dbg !3931

return:                                           ; preds = %if.end13, %if.then12, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !3932
  ret i8 %11, !dbg !3932
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_function_for_size_p(%struct.function* %fun) #0 !dbg !3933 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  %0 = load i32, i32* @optimize_size, align 4, !dbg !3938
  %tobool = icmp ne i32 %0, 0, !dbg !3938
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3939

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3940
  %tobool1 = icmp ne %struct.function* %1, null, !dbg !3940
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !3941

land.rhs:                                         ; preds = %lor.rhs
  %2 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3942
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %2, i32 0, i32 20, !dbg !3943
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !3943
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3943
  %bf.clear = and i32 %bf.lshr, 3, !dbg !3943
  %cmp = icmp eq i32 %bf.clear, 0, !dbg !3944
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %3 = phi i1 [ false, %lor.rhs ], [ %cmp, %land.rhs ], !dbg !3945
  br label %lor.end, !dbg !3939

lor.end:                                          ; preds = %land.end, %entry
  %4 = phi i1 [ true, %entry ], [ %3, %land.end ]
  %lor.ext = zext i1 %4 to i32, !dbg !3939
  %conv = trunc i32 %lor.ext to i8, !dbg !3946
  ret i8 %conv, !dbg !3947
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function* %fun) #0 !dbg !3948 {
entry:
  %fun.addr = alloca %struct.function*, align 8
  store %struct.function* %fun, %struct.function** %fun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.function** %fun.addr, metadata !3949, metadata !DIExpression()), !dbg !3950
  %0 = load %struct.function*, %struct.function** %fun.addr, align 8, !dbg !3951
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %0), !dbg !3952
  %tobool = icmp ne i8 %call, 0, !dbg !3953
  %lnot = xor i1 %tobool, true, !dbg !3953
  %lnot.ext = zext i1 %lnot to i32, !dbg !3953
  %conv = trunc i32 %lnot.ext to i8, !dbg !3953
  ret i8 %conv, !dbg !3954
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %bb) #0 !dbg !3955 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3956, metadata !DIExpression()), !dbg !3957
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3958
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3958
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !3959
  %conv = zext i8 %call to i32, !dbg !3959
  %tobool = icmp ne i32 %conv, 0, !dbg !3959
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3960

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3961
  %call1 = call zeroext i8 @maybe_hot_bb_p(%struct.basic_block_def* %1), !dbg !3962
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3963
  %lnot = xor i1 %tobool2, true, !dbg !3963
  br label %lor.end, !dbg !3960

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !3960
  %conv3 = trunc i32 %lor.ext to i8, !dbg !3959
  ret i8 %conv3, !dbg !3964
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %bb) #0 !dbg !3965 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3966, metadata !DIExpression()), !dbg !3967
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3968
  %call = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %0), !dbg !3969
  %tobool = icmp ne i8 %call, 0, !dbg !3970
  %lnot = xor i1 %tobool, true, !dbg !3970
  %lnot.ext = zext i1 %lnot to i32, !dbg !3970
  %conv = trunc i32 %lnot.ext to i8, !dbg !3970
  ret i8 %conv, !dbg !3971
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_edge_for_size_p(%struct.edge_def* %e) #0 !dbg !3972 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3973, metadata !DIExpression()), !dbg !3974
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3975
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3975
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !3976
  %conv = zext i8 %call to i32, !dbg !3976
  %tobool = icmp ne i32 %conv, 0, !dbg !3976
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3977

lor.rhs:                                          ; preds = %entry
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3978
  %call1 = call zeroext i8 @maybe_hot_edge_p(%struct.edge_def* %1), !dbg !3979
  %tobool2 = icmp ne i8 %call1, 0, !dbg !3980
  %lnot = xor i1 %tobool2, true, !dbg !3980
  br label %lor.end, !dbg !3977

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !3977
  %conv3 = trunc i32 %lor.ext to i8, !dbg !3976
  ret i8 %conv3, !dbg !3981
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_edge_for_speed_p(%struct.edge_def* %e) #0 !dbg !3982 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3983, metadata !DIExpression()), !dbg !3984
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3985
  %call = call zeroext i8 @optimize_edge_for_size_p(%struct.edge_def* %0), !dbg !3986
  %tobool = icmp ne i8 %call, 0, !dbg !3987
  %lnot = xor i1 %tobool, true, !dbg !3987
  %lnot.ext = zext i1 %lnot to i32, !dbg !3987
  %conv = trunc i32 %lnot.ext to i8, !dbg !3987
  ret i8 %conv, !dbg !3988
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_insn_for_size_p() #0 !dbg !3989 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3990
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3990
  %call = call zeroext i8 @optimize_function_for_size_p(%struct.function* %add.ptr), !dbg !3991
  %conv = zext i8 %call to i32, !dbg !3991
  %tobool = icmp ne i32 %conv, 0, !dbg !3991
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !3992

lor.rhs:                                          ; preds = %entry
  %1 = load i8, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !3993
  %tobool1 = icmp ne i8 %1, 0, !dbg !3994
  %lnot = xor i1 %tobool1, true, !dbg !3994
  br label %lor.end, !dbg !3992

lor.end:                                          ; preds = %lor.rhs, %entry
  %2 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %2 to i32, !dbg !3992
  %conv2 = trunc i32 %lor.ext to i8, !dbg !3991
  ret i8 %conv2, !dbg !3995
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_insn_for_speed_p() #0 !dbg !3996 {
entry:
  %call = call zeroext i8 @optimize_insn_for_size_p(), !dbg !3997
  %tobool = icmp ne i8 %call, 0, !dbg !3998
  %lnot = xor i1 %tobool, true, !dbg !3998
  %lnot.ext = zext i1 %lnot to i32, !dbg !3998
  %conv = trunc i32 %lnot.ext to i8, !dbg !3998
  ret i8 %conv, !dbg !3999
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_loop_for_size_p(%struct.loop* %loop) #0 !dbg !4000 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4003, metadata !DIExpression()), !dbg !4004
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4005
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !4006
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4006
  %call = call zeroext i8 @optimize_bb_for_size_p(%struct.basic_block_def* %1), !dbg !4007
  ret i8 %call, !dbg !4008
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %loop) #0 !dbg !4009 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4010, metadata !DIExpression()), !dbg !4011
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4012
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !4013
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4013
  %call = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %1), !dbg !4014
  ret i8 %call, !dbg !4015
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_loop_nest_for_speed_p(%struct.loop* %loop) #0 !dbg !4016 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %l = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %struct.loop** %l, metadata !4019, metadata !DIExpression()), !dbg !4020
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4021
  store %struct.loop* %0, %struct.loop** %l, align 8, !dbg !4020
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4022
  %call = call zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %1), !dbg !4024
  %tobool = icmp ne i8 %call, 0, !dbg !4024
  br i1 %tobool, label %if.then, label %if.end, !dbg !4025

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !4026
  br label %return, !dbg !4026

if.end:                                           ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4027
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !4028
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4028
  store %struct.loop* %3, %struct.loop** %l, align 8, !dbg !4029
  br label %while.cond, !dbg !4030

while.cond:                                       ; preds = %if.end27, %if.end
  %4 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4031
  %tobool1 = icmp ne %struct.loop* %4, null, !dbg !4031
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !4032

land.rhs:                                         ; preds = %while.cond
  %5 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4033
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4034
  %cmp = icmp ne %struct.loop* %5, %6, !dbg !4035
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %7 = phi i1 [ false, %while.cond ], [ %cmp, %land.rhs ], !dbg !4036
  br i1 %7, label %while.body, label %while.end28, !dbg !4030

while.body:                                       ; preds = %land.end
  %8 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4037
  %call2 = call zeroext i8 @optimize_loop_for_speed_p(%struct.loop* %8), !dbg !4040
  %tobool3 = icmp ne i8 %call2, 0, !dbg !4040
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !4041

if.then4:                                         ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !4042
  br label %return, !dbg !4042

if.end5:                                          ; preds = %while.body
  %9 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4043
  %inner6 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 8, !dbg !4045
  %10 = load %struct.loop*, %struct.loop** %inner6, align 8, !dbg !4045
  %tobool7 = icmp ne %struct.loop* %10, null, !dbg !4043
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !4046

if.then8:                                         ; preds = %if.end5
  %11 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4047
  %inner9 = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 8, !dbg !4048
  %12 = load %struct.loop*, %struct.loop** %inner9, align 8, !dbg !4048
  store %struct.loop* %12, %struct.loop** %l, align 8, !dbg !4049
  br label %if.end27, !dbg !4050

if.else:                                          ; preds = %if.end5
  %13 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4051
  %next = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 9, !dbg !4053
  %14 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !4053
  %tobool10 = icmp ne %struct.loop* %14, null, !dbg !4051
  br i1 %tobool10, label %if.then11, label %if.else13, !dbg !4054

if.then11:                                        ; preds = %if.else
  %15 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4055
  %next12 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 9, !dbg !4056
  %16 = load %struct.loop*, %struct.loop** %next12, align 8, !dbg !4056
  store %struct.loop* %16, %struct.loop** %l, align 8, !dbg !4057
  br label %if.end26, !dbg !4058

if.else13:                                        ; preds = %if.else
  br label %while.cond14, !dbg !4059

while.cond14:                                     ; preds = %while.body20, %if.else13
  %17 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4061
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4062
  %cmp15 = icmp ne %struct.loop* %17, %18, !dbg !4063
  br i1 %cmp15, label %land.rhs16, label %land.end19, !dbg !4064

land.rhs16:                                       ; preds = %while.cond14
  %19 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4065
  %next17 = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 9, !dbg !4066
  %20 = load %struct.loop*, %struct.loop** %next17, align 8, !dbg !4066
  %tobool18 = icmp ne %struct.loop* %20, null, !dbg !4067
  %lnot = xor i1 %tobool18, true, !dbg !4067
  br label %land.end19

land.end19:                                       ; preds = %land.rhs16, %while.cond14
  %21 = phi i1 [ false, %while.cond14 ], [ %lnot, %land.rhs16 ], !dbg !4068
  br i1 %21, label %while.body20, label %while.end, !dbg !4059

while.body20:                                     ; preds = %land.end19
  %22 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4069
  %call21 = call %struct.loop* @loop_outer(%struct.loop* %22), !dbg !4070
  store %struct.loop* %call21, %struct.loop** %l, align 8, !dbg !4071
  br label %while.cond14, !dbg !4059, !llvm.loop !4072

while.end:                                        ; preds = %land.end19
  %23 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4074
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4076
  %cmp22 = icmp ne %struct.loop* %23, %24, !dbg !4077
  br i1 %cmp22, label %if.then23, label %if.end25, !dbg !4078

if.then23:                                        ; preds = %while.end
  %25 = load %struct.loop*, %struct.loop** %l, align 8, !dbg !4079
  %next24 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 9, !dbg !4080
  %26 = load %struct.loop*, %struct.loop** %next24, align 8, !dbg !4080
  store %struct.loop* %26, %struct.loop** %l, align 8, !dbg !4081
  br label %if.end25, !dbg !4082

if.end25:                                         ; preds = %if.then23, %while.end
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.then11
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then8
  br label %while.cond, !dbg !4030, !llvm.loop !4083

while.end28:                                      ; preds = %land.end
  store i8 0, i8* %retval, align 1, !dbg !4085
  br label %return, !dbg !4085

return:                                           ; preds = %while.end28, %if.then4, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !4086
  ret i8 %27, !dbg !4086
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !4087 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4092, metadata !DIExpression()), !dbg !4093
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4094, metadata !DIExpression()), !dbg !4095
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4096
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !4096
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !4096
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !4096
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4096

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4096
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !4096
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !4096
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !4096
  br label %cond.end, !dbg !4096

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4096

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4096
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !4096
  store i32 %call, i32* %n, align 4, !dbg !4095
  %4 = load i32, i32* %n, align 4, !dbg !4097
  %cmp = icmp eq i32 %4, 0, !dbg !4099
  br i1 %cmp, label %if.then, label %if.end, !dbg !4100

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !4101
  br label %return, !dbg !4101

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4102
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !4102
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !4102
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !4102
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4102

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4102
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !4102
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !4102
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !4102
  br label %cond.end8, !dbg !4102

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !4102

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4102
  %9 = load i32, i32* %n, align 4, !dbg !4102
  %sub = sub i32 %9, 1, !dbg !4102
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !4102
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !4103
  br label %return, !dbg !4103

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !4104
  ret %struct.loop* %10, !dbg !4104
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @optimize_loop_nest_for_size_p(%struct.loop* %loop) #0 !dbg !4105 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4106, metadata !DIExpression()), !dbg !4107
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4108
  %call = call zeroext i8 @optimize_loop_nest_for_speed_p(%struct.loop* %0), !dbg !4109
  %tobool = icmp ne i8 %call, 0, !dbg !4110
  %lnot = xor i1 %tobool, true, !dbg !4110
  %lnot.ext = zext i1 %lnot to i32, !dbg !4110
  %conv = trunc i32 %lnot.ext to i8, !dbg !4110
  ret i8 %conv, !dbg !4111
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @predictable_edge_p(%struct.edge_def* %e) #0 !dbg !4112 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4113, metadata !DIExpression()), !dbg !4114
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4115
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4115
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4115
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4115
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !4115
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !4115
  %cmp = icmp eq i32 %2, 0, !dbg !4117
  br i1 %cmp, label %if.then, label %if.end, !dbg !4118

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4119
  br label %return, !dbg !4119

if.end:                                           ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4120
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 8, !dbg !4122
  %4 = load i32, i32* %probability, align 4, !dbg !4122
  %5 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4123
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %5, i64 1, !dbg !4123
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !4123
  %6 = load i32, i32* %value, align 8, !dbg !4123
  %mul = mul nsw i32 %6, 10000, !dbg !4124
  %div = sdiv i32 %mul, 100, !dbg !4125
  %cmp1 = icmp sle i32 %4, %div, !dbg !4126
  br i1 %cmp1, label %if.then8, label %lor.lhs.false, !dbg !4127

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4128
  %probability2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 8, !dbg !4129
  %8 = load i32, i32* %probability2, align 4, !dbg !4129
  %sub = sub nsw i32 10000, %8, !dbg !4130
  %9 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4131
  %arrayidx3 = getelementptr inbounds %struct.param_info, %struct.param_info* %9, i64 1, !dbg !4131
  %value4 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx3, i32 0, i32 1, !dbg !4131
  %10 = load i32, i32* %value4, align 8, !dbg !4131
  %mul5 = mul nsw i32 %10, 10000, !dbg !4132
  %div6 = sdiv i32 %mul5, 100, !dbg !4133
  %cmp7 = icmp sle i32 %sub, %div6, !dbg !4134
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !4135

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  store i8 1, i8* %retval, align 1, !dbg !4136
  br label %return, !dbg !4136

if.end9:                                          ; preds = %lor.lhs.false
  store i8 0, i8* %retval, align 1, !dbg !4137
  br label %return, !dbg !4137

return:                                           ; preds = %if.end9, %if.then8, %if.then
  %11 = load i8, i8* %retval, align 1, !dbg !4138
  ret i8 %11, !dbg !4138
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rtl_profile_for_bb(%struct.basic_block_def* %bb) #0 !dbg !4139 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4142, metadata !DIExpression()), !dbg !4143
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4144
  %call = call zeroext i8 @maybe_hot_bb_p(%struct.basic_block_def* %0), !dbg !4145
  store i8 %call, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !4146
  ret void, !dbg !4147
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rtl_profile_for_edge(%struct.edge_def* %e) #0 !dbg !4148 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4151, metadata !DIExpression()), !dbg !4152
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4153
  %call = call zeroext i8 @maybe_hot_edge_p(%struct.edge_def* %0), !dbg !4154
  store i8 %call, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !4155
  ret void, !dbg !4156
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @default_rtl_profile() #0 !dbg !4157 {
entry:
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 42), align 2, !dbg !4158
  ret void, !dbg !4159
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @rtl_predicted_by_p(%struct.basic_block_def* %bb, i32 %predictor) #0 !dbg !4160 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %predictor.addr = alloca i32, align 4
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4163, metadata !DIExpression()), !dbg !4164
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4167, metadata !DIExpression()), !dbg !4168
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4169
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4169
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4169
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4169
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !4169
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4169
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4169
  %bf.load = load i32, i32* %3, align 8, !dbg !4169
  %bf.clear = and i32 %bf.load, 65535, !dbg !4169
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4169
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !4169

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4169
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !4169
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !4169
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !4169
  %end_3 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !4169
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_3, align 8, !dbg !4169
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4169
  %bf.load4 = load i32, i32* %7, align 8, !dbg !4169
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !4169
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !4169
  br i1 %cmp6, label %if.end, label %lor.lhs.false7, !dbg !4169

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4169
  %il8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !4169
  %rtl9 = bitcast %union.basic_block_il_dependent* %il8 to %struct.rtl_bb_info**, !dbg !4169
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl9, align 8, !dbg !4169
  %end_10 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 1, !dbg !4169
  %10 = load %struct.rtx_def*, %struct.rtx_def** %end_10, align 8, !dbg !4169
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4169
  %bf.load11 = load i32, i32* %11, align 8, !dbg !4169
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !4169
  %cmp13 = icmp eq i32 %bf.clear12, 9, !dbg !4169
  br i1 %cmp13, label %if.end, label %lor.lhs.false14, !dbg !4169

lor.lhs.false14:                                  ; preds = %lor.lhs.false7
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4169
  %il15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 7, !dbg !4169
  %rtl16 = bitcast %union.basic_block_il_dependent* %il15 to %struct.rtl_bb_info**, !dbg !4169
  %13 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl16, align 8, !dbg !4169
  %end_17 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %13, i32 0, i32 1, !dbg !4169
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end_17, align 8, !dbg !4169
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !4169
  %bf.load18 = load i32, i32* %15, align 8, !dbg !4169
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !4169
  %cmp20 = icmp eq i32 %bf.clear19, 10, !dbg !4169
  br i1 %cmp20, label %if.end, label %if.then, !dbg !4171

if.then:                                          ; preds = %lor.lhs.false14
  store i8 0, i8* %retval, align 1, !dbg !4172
  br label %return, !dbg !4172

if.end:                                           ; preds = %lor.lhs.false14, %lor.lhs.false7, %lor.lhs.false, %entry
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4173
  %il21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !4173
  %rtl22 = bitcast %union.basic_block_il_dependent* %il21 to %struct.rtl_bb_info**, !dbg !4173
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl22, align 8, !dbg !4173
  %end_23 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 1, !dbg !4173
  %18 = load %struct.rtx_def*, %struct.rtx_def** %end_23, align 8, !dbg !4173
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4173
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4173
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !4173
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4173
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4173
  store %struct.rtx_def* %19, %struct.rtx_def** %note, align 8, !dbg !4175
  br label %for.cond, !dbg !4176

for.cond:                                         ; preds = %for.inc, %if.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4177
  %tobool = icmp ne %struct.rtx_def* %20, null, !dbg !4179
  br i1 %tobool, label %for.body, label %for.end, !dbg !4179

for.body:                                         ; preds = %for.cond
  %21 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4180
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4180
  %bf.load24 = load i32, i32* %22, align 8, !dbg !4180
  %bf.lshr = lshr i32 %bf.load24, 16, !dbg !4180
  %bf.clear25 = and i32 %bf.lshr, 255, !dbg !4180
  %cmp26 = icmp eq i32 %bf.clear25, 16, !dbg !4182
  br i1 %cmp26, label %land.lhs.true, label %if.end40, !dbg !4183

land.lhs.true:                                    ; preds = %for.body
  %23 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4184
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4184
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !4184
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !4184
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !4184
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !4184
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !4184
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4184
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !4184
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4184
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4184
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4184
  %hwint = bitcast %union.u* %u35 to [1 x i64]*, !dbg !4184
  %arrayidx36 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4184
  %26 = load i64, i64* %arrayidx36, align 8, !dbg !4184
  %27 = load i32, i32* %predictor.addr, align 4, !dbg !4185
  %conv = sext i32 %27 to i64, !dbg !4186
  %cmp37 = icmp eq i64 %26, %conv, !dbg !4187
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !4188

if.then39:                                        ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !4189
  br label %return, !dbg !4189

if.end40:                                         ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !4185

for.inc:                                          ; preds = %if.end40
  %28 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4190
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !4190
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !4190
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !4190
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !4190
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !4190
  store %struct.rtx_def* %29, %struct.rtx_def** %note, align 8, !dbg !4191
  br label %for.cond, !dbg !4192, !llvm.loop !4193

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4195
  br label %return, !dbg !4195

return:                                           ; preds = %for.end, %if.then39, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !4196
  ret i8 %30, !dbg !4196
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_predicted_by_p(%struct.basic_block_def* %bb, i32 %predictor) #0 !dbg !4197 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %predictor.addr = alloca i32, align 4
  %i = alloca %struct.edge_prediction*, align 8
  %preds = alloca i8**, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4198, metadata !DIExpression()), !dbg !4199
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4200, metadata !DIExpression()), !dbg !4201
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %i, metadata !4202, metadata !DIExpression()), !dbg !4203
  call void @llvm.dbg.declare(metadata i8*** %preds, metadata !4204, metadata !DIExpression()), !dbg !4205
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4206
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4207
  %2 = bitcast %struct.basic_block_def* %1 to i8*, !dbg !4207
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !4208
  store i8** %call, i8*** %preds, align 8, !dbg !4205
  %3 = load i8**, i8*** %preds, align 8, !dbg !4209
  %tobool = icmp ne i8** %3, null, !dbg !4209
  br i1 %tobool, label %if.end, label %if.then, !dbg !4211

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4212
  br label %return, !dbg !4212

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %preds, align 8, !dbg !4213
  %5 = load i8*, i8** %4, align 8, !dbg !4215
  %6 = bitcast i8* %5 to %struct.edge_prediction*, !dbg !4216
  store %struct.edge_prediction* %6, %struct.edge_prediction** %i, align 8, !dbg !4217
  br label %for.cond, !dbg !4218

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4219
  %tobool1 = icmp ne %struct.edge_prediction* %7, null, !dbg !4221
  br i1 %tobool1, label %for.body, label %for.end, !dbg !4221

for.body:                                         ; preds = %for.cond
  %8 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4222
  %ep_predictor = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %8, i32 0, i32 2, !dbg !4224
  %9 = load i32, i32* %ep_predictor, align 8, !dbg !4224
  %10 = load i32, i32* %predictor.addr, align 4, !dbg !4225
  %cmp = icmp eq i32 %9, %10, !dbg !4226
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !4227

if.then2:                                         ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4228
  br label %return, !dbg !4228

if.end3:                                          ; preds = %for.body
  br label %for.inc, !dbg !4225

for.inc:                                          ; preds = %if.end3
  %11 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4229
  %ep_next = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %11, i32 0, i32 0, !dbg !4230
  %12 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next, align 8, !dbg !4230
  store %struct.edge_prediction* %12, %struct.edge_prediction** %i, align 8, !dbg !4231
  br label %for.cond, !dbg !4232, !llvm.loop !4233

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4235
  br label %return, !dbg !4235

return:                                           ; preds = %for.end, %if.then2, %if.then
  %13 = load i8, i8* %retval, align 1, !dbg !4236
  ret i8 %13, !dbg !4236
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @edge_probability_reliable_p(%struct.edge_def* %e) #0 !dbg !4237 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4243, metadata !DIExpression()), !dbg !4244
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4245
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 8, !dbg !4246
  %1 = load i32, i32* %probability, align 4, !dbg !4246
  %call = call zeroext i8 @probability_reliable_p(i32 %1), !dbg !4247
  ret i8 %call, !dbg !4248
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @probability_reliable_p(i32 %prob) #0 !dbg !4249 {
entry:
  %prob.addr = alloca i32, align 4
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !4250, metadata !DIExpression()), !dbg !4251
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4252
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4252
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4252
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4252
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !4252
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !4252
  %cmp = icmp eq i32 %2, 2, !dbg !4253
  br i1 %cmp, label %lor.end8, label %lor.rhs, !dbg !4254

lor.rhs:                                          ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4255
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !4255
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4255
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4255
  %x_profile_status3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 7, !dbg !4255
  %5 = load i32, i32* %x_profile_status3, align 8, !dbg !4255
  %cmp4 = icmp eq i32 %5, 1, !dbg !4256
  br i1 %cmp4, label %land.rhs, label %land.end, !dbg !4257

land.rhs:                                         ; preds = %lor.rhs
  %6 = load i32, i32* %prob.addr, align 4, !dbg !4258
  %cmp5 = icmp sle i32 %6, 100, !dbg !4259
  br i1 %cmp5, label %lor.end, label %lor.rhs6, !dbg !4260

lor.rhs6:                                         ; preds = %land.rhs
  %7 = load i32, i32* %prob.addr, align 4, !dbg !4261
  %cmp7 = icmp sge i32 %7, 9900, !dbg !4262
  br label %lor.end, !dbg !4260

lor.end:                                          ; preds = %lor.rhs6, %land.rhs
  %8 = phi i1 [ true, %land.rhs ], [ %cmp7, %lor.rhs6 ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %8, %lor.end ], !dbg !4263
  br label %lor.end8, !dbg !4254

lor.end8:                                         ; preds = %land.end, %entry
  %10 = phi i1 [ true, %entry ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32, !dbg !4254
  %conv = trunc i32 %lor.ext to i8, !dbg !4264
  ret i8 %conv, !dbg !4265
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @br_prob_note_reliable_p(%struct.rtx_def* %note) #0 !dbg !4266 {
entry:
  %note.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %note, %struct.rtx_def** %note.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note.addr, metadata !4272, metadata !DIExpression()), !dbg !4273
  %0 = load %struct.rtx_def*, %struct.rtx_def** %note.addr, align 8, !dbg !4274
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4274
  %bf.load = load i32, i32* %1, align 8, !dbg !4274
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4274
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4274
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !4274
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4274

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4274
  br label %cond.end, !dbg !4274

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4274

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4274
  %2 = load %struct.rtx_def*, %struct.rtx_def** %note.addr, align 8, !dbg !4275
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4275
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4275
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4275
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4275
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4275
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4275
  %hwint = bitcast %union.u* %u1 to [1 x i64]*, !dbg !4275
  %arrayidx2 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4275
  %4 = load i64, i64* %arrayidx2, align 8, !dbg !4275
  %conv = trunc i64 %4 to i32, !dbg !4275
  %call = call zeroext i8 @probability_reliable_p(i32 %conv), !dbg !4276
  ret i8 %call, !dbg !4277
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @predict_insn_def(%struct.rtx_def* %insn, i32 %predictor, i32 %taken) #0 !dbg !4278 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %predictor.addr = alloca i32, align 4
  %taken.addr = alloca i32, align 4
  %probability = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4281, metadata !DIExpression()), !dbg !4282
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4283, metadata !DIExpression()), !dbg !4284
  store i32 %taken, i32* %taken.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %taken.addr, metadata !4285, metadata !DIExpression()), !dbg !4286
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !4287, metadata !DIExpression()), !dbg !4288
  %0 = load i32, i32* %predictor.addr, align 4, !dbg !4289
  %idxprom = sext i32 %0 to i64, !dbg !4290
  %arrayidx = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !4290
  %hitrate = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx, i32 0, i32 1, !dbg !4291
  %1 = load i32, i32* %hitrate, align 8, !dbg !4291
  store i32 %1, i32* %probability, align 4, !dbg !4288
  %2 = load i32, i32* %taken.addr, align 4, !dbg !4292
  %cmp = icmp ne i32 %2, 1, !dbg !4294
  br i1 %cmp, label %if.then, label %if.end, !dbg !4295

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %probability, align 4, !dbg !4296
  %sub = sub nsw i32 10000, %3, !dbg !4297
  store i32 %sub, i32* %probability, align 4, !dbg !4298
  br label %if.end, !dbg !4299

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4300
  %5 = load i32, i32* %predictor.addr, align 4, !dbg !4301
  %6 = load i32, i32* %probability, align 4, !dbg !4302
  call void @predict_insn(%struct.rtx_def* %4, i32 %5, i32 %6), !dbg !4303
  ret void, !dbg !4304
}

; Function Attrs: noinline nounwind uwtable
define internal void @predict_insn(%struct.rtx_def* %insn, i32 %predictor, i32 %probability) #0 !dbg !4305 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %predictor.addr = alloca i32, align 4
  %probability.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4308, metadata !DIExpression()), !dbg !4309
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4310, metadata !DIExpression()), !dbg !4311
  store i32 %probability, i32* %probability.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %probability.addr, metadata !4312, metadata !DIExpression()), !dbg !4313
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4314
  %call = call i32 @any_condjump_p(%struct.rtx_def* %0), !dbg !4314
  %tobool = icmp ne i32 %call, 0, !dbg !4314
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4314

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 438, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4314
  br label %cond.end, !dbg !4314

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4314
  %1 = load i32, i32* @flag_guess_branch_prob, align 4, !dbg !4315
  %tobool1 = icmp ne i32 %1, 0, !dbg !4315
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4317

if.then:                                          ; preds = %cond.end
  br label %return, !dbg !4318

if.end:                                           ; preds = %cond.end
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4319
  %3 = load i32, i32* %predictor.addr, align 4, !dbg !4320
  %conv = sext i32 %3 to i64, !dbg !4320
  %call2 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv), !dbg !4320
  %4 = load i32, i32* %probability.addr, align 4, !dbg !4320
  %conv3 = sext i32 %4 to i64, !dbg !4320
  %call4 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv3), !dbg !4320
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 41, i32 0, %struct.rtx_def* %call2, %struct.rtx_def* %call4), !dbg !4320
  call void @add_reg_note(%struct.rtx_def* %2, i32 16, %struct.rtx_def* %call5), !dbg !4321
  br label %return, !dbg !4322

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !4322
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rtl_predict_edge(%struct.edge_def* %e, i32 %predictor, i32 %probability) #0 !dbg !4323 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %predictor.addr = alloca i32, align 4
  %probability.addr = alloca i32, align 4
  %last_insn = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4326, metadata !DIExpression()), !dbg !4327
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4328, metadata !DIExpression()), !dbg !4329
  store i32 %probability, i32* %probability.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %probability.addr, metadata !4330, metadata !DIExpression()), !dbg !4331
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_insn, metadata !4332, metadata !DIExpression()), !dbg !4333
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4334
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !4334
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4334
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !4334
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4334
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4334
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 1, !dbg !4334
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4334
  store %struct.rtx_def* %3, %struct.rtx_def** %last_insn, align 8, !dbg !4335
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4336
  %call = call i32 @any_condjump_p(%struct.rtx_def* %4), !dbg !4338
  %tobool = icmp ne i32 %call, 0, !dbg !4338
  br i1 %tobool, label %if.end, label %if.then, !dbg !4339

if.then:                                          ; preds = %entry
  br label %return, !dbg !4340

if.end:                                           ; preds = %entry
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4341
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 7, !dbg !4343
  %6 = load i32, i32* %flags, align 8, !dbg !4343
  %and = and i32 %6, 1, !dbg !4344
  %tobool1 = icmp ne i32 %and, 0, !dbg !4344
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !4345

if.then2:                                         ; preds = %if.end
  %7 = load i32, i32* %probability.addr, align 4, !dbg !4346
  %sub = sub nsw i32 10000, %7, !dbg !4347
  store i32 %sub, i32* %probability.addr, align 4, !dbg !4348
  br label %if.end3, !dbg !4349

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4350
  %9 = load i32, i32* %predictor.addr, align 4, !dbg !4351
  %10 = load i32, i32* %probability.addr, align 4, !dbg !4352
  call void @predict_insn(%struct.rtx_def* %8, i32 %9, i32 %10), !dbg !4353
  br label %return, !dbg !4354

return:                                           ; preds = %if.end3, %if.then
  ret void, !dbg !4354
}

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gimple_predict_edge(%struct.edge_def* %e, i32 %predictor, i32 %probability) #0 !dbg !4355 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %predictor.addr = alloca i32, align 4
  %probability.addr = alloca i32, align 4
  %i = alloca %struct.edge_prediction*, align 8
  %preds = alloca i8**, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4356, metadata !DIExpression()), !dbg !4357
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4358, metadata !DIExpression()), !dbg !4359
  store i32 %probability, i32* %probability.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %probability.addr, metadata !4360, metadata !DIExpression()), !dbg !4361
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4362
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4362
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4362
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4362
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !4362
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !4362
  %cmp = icmp ne i32 %2, 1, !dbg !4362
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4362

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !4362
  br label %cond.end, !dbg !4362

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4362

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4362
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4363
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !4365
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4365
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4366
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4366
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4366
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4366
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !4366
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4366
  %cmp3 = icmp ne %struct.basic_block_def* %4, %7, !dbg !4367
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !4368

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4369
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 0, !dbg !4369
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !4369
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !4369
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4369
  %tobool = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !4369
  br i1 %tobool, label %cond.true5, label %cond.false8, !dbg !4369

cond.true5:                                       ; preds = %land.lhs.true
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4369
  %src6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 0, !dbg !4369
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src6, align 8, !dbg !4369
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !4369
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !4369
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %13, i32 0, i32 0, !dbg !4369
  br label %cond.end9, !dbg !4369

cond.false8:                                      ; preds = %land.lhs.true
  br label %cond.end9, !dbg !4369

cond.end9:                                        ; preds = %cond.false8, %cond.true5
  %cond10 = phi %struct.VEC_edge_base* [ %base, %cond.true5 ], [ null, %cond.false8 ], !dbg !4369
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond10), !dbg !4369
  %cmp11 = icmp ugt i32 %call, 1, !dbg !4370
  br i1 %cmp11, label %land.lhs.true12, label %if.end, !dbg !4371

land.lhs.true12:                                  ; preds = %cond.end9
  %14 = load i32, i32* @flag_guess_branch_prob, align 4, !dbg !4372
  %tobool13 = icmp ne i32 %14, 0, !dbg !4372
  br i1 %tobool13, label %land.lhs.true14, label %if.end, !dbg !4373

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %15 = load i32, i32* @optimize, align 4, !dbg !4374
  %tobool15 = icmp ne i32 %15, 0, !dbg !4374
  br i1 %tobool15, label %if.then, label %if.end, !dbg !4375

if.then:                                          ; preds = %land.lhs.true14
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %i, metadata !4376, metadata !DIExpression()), !dbg !4378
  %call16 = call i8* @xmalloc(i64 24), !dbg !4379
  %16 = bitcast i8* %call16 to %struct.edge_prediction*, !dbg !4379
  store %struct.edge_prediction* %16, %struct.edge_prediction** %i, align 8, !dbg !4378
  call void @llvm.dbg.declare(metadata i8*** %preds, metadata !4380, metadata !DIExpression()), !dbg !4381
  %17 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4382
  %18 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4383
  %src17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 0, !dbg !4384
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src17, align 8, !dbg !4384
  %20 = bitcast %struct.basic_block_def* %19 to i8*, !dbg !4383
  %call18 = call i8** @pointer_map_insert(%struct.pointer_map_t* %17, i8* %20), !dbg !4385
  store i8** %call18, i8*** %preds, align 8, !dbg !4381
  %21 = load i8**, i8*** %preds, align 8, !dbg !4386
  %22 = load i8*, i8** %21, align 8, !dbg !4387
  %23 = bitcast i8* %22 to %struct.edge_prediction*, !dbg !4388
  %24 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4389
  %ep_next = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %24, i32 0, i32 0, !dbg !4390
  store %struct.edge_prediction* %23, %struct.edge_prediction** %ep_next, align 8, !dbg !4391
  %25 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4392
  %26 = bitcast %struct.edge_prediction* %25 to i8*, !dbg !4392
  %27 = load i8**, i8*** %preds, align 8, !dbg !4393
  store i8* %26, i8** %27, align 8, !dbg !4394
  %28 = load i32, i32* %probability.addr, align 4, !dbg !4395
  %29 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4396
  %ep_probability = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %29, i32 0, i32 3, !dbg !4397
  store i32 %28, i32* %ep_probability, align 4, !dbg !4398
  %30 = load i32, i32* %predictor.addr, align 4, !dbg !4399
  %31 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4400
  %ep_predictor = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %31, i32 0, i32 2, !dbg !4401
  store i32 %30, i32* %ep_predictor, align 8, !dbg !4402
  %32 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4403
  %33 = load %struct.edge_prediction*, %struct.edge_prediction** %i, align 8, !dbg !4404
  %ep_edge = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %33, i32 0, i32 1, !dbg !4405
  store %struct.edge_def* %32, %struct.edge_def** %ep_edge, align 8, !dbg !4406
  br label %if.end, !dbg !4407

if.end:                                           ; preds = %if.then, %land.lhs.true14, %land.lhs.true12, %cond.end9, %cond.end
  ret void, !dbg !4408
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4409 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4414, metadata !DIExpression()), !dbg !4415
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4415
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4415
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4415

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4415
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4415
  %2 = load i32, i32* %num, align 8, !dbg !4415
  br label %cond.end, !dbg !4415

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4415

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4415
  ret i32 %cond, !dbg !4415
}

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @remove_predictions_associated_with_edge(%struct.edge_def* %e) #0 !dbg !4416 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %preds = alloca i8**, align 8
  %prediction = alloca %struct.edge_prediction**, align 8
  %next = alloca %struct.edge_prediction*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4417, metadata !DIExpression()), !dbg !4418
  call void @llvm.dbg.declare(metadata i8*** %preds, metadata !4419, metadata !DIExpression()), !dbg !4420
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4421
  %tobool = icmp ne %struct.pointer_map_t* %0, null, !dbg !4421
  br i1 %tobool, label %if.end, label %if.then, !dbg !4423

if.then:                                          ; preds = %entry
  br label %if.end7, !dbg !4424

if.end:                                           ; preds = %entry
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4425
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4426
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !4427
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4427
  %4 = bitcast %struct.basic_block_def* %3 to i8*, !dbg !4426
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %4), !dbg !4428
  store i8** %call, i8*** %preds, align 8, !dbg !4429
  %5 = load i8**, i8*** %preds, align 8, !dbg !4430
  %tobool1 = icmp ne i8** %5, null, !dbg !4430
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !4432

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.edge_prediction*** %prediction, metadata !4433, metadata !DIExpression()), !dbg !4435
  %6 = load i8**, i8*** %preds, align 8, !dbg !4436
  %7 = bitcast i8** %6 to %struct.edge_prediction**, !dbg !4437
  store %struct.edge_prediction** %7, %struct.edge_prediction*** %prediction, align 8, !dbg !4435
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %next, metadata !4438, metadata !DIExpression()), !dbg !4439
  br label %while.cond, !dbg !4440

while.cond:                                       ; preds = %if.end6, %if.then2
  %8 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4441
  %9 = load %struct.edge_prediction*, %struct.edge_prediction** %8, align 8, !dbg !4442
  %tobool3 = icmp ne %struct.edge_prediction* %9, null, !dbg !4440
  br i1 %tobool3, label %while.body, label %while.end, !dbg !4440

while.body:                                       ; preds = %while.cond
  %10 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4443
  %11 = load %struct.edge_prediction*, %struct.edge_prediction** %10, align 8, !dbg !4446
  %ep_edge = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %11, i32 0, i32 1, !dbg !4447
  %12 = load %struct.edge_def*, %struct.edge_def** %ep_edge, align 8, !dbg !4447
  %13 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4448
  %cmp = icmp eq %struct.edge_def* %12, %13, !dbg !4449
  br i1 %cmp, label %if.then4, label %if.else, !dbg !4450

if.then4:                                         ; preds = %while.body
  %14 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4451
  %15 = load %struct.edge_prediction*, %struct.edge_prediction** %14, align 8, !dbg !4453
  %ep_next = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %15, i32 0, i32 0, !dbg !4454
  %16 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next, align 8, !dbg !4454
  store %struct.edge_prediction* %16, %struct.edge_prediction** %next, align 8, !dbg !4455
  %17 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4456
  %18 = load %struct.edge_prediction*, %struct.edge_prediction** %17, align 8, !dbg !4457
  %19 = bitcast %struct.edge_prediction* %18 to i8*, !dbg !4457
  call void @free(i8* %19), !dbg !4458
  %20 = load %struct.edge_prediction*, %struct.edge_prediction** %next, align 8, !dbg !4459
  %21 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4460
  store %struct.edge_prediction* %20, %struct.edge_prediction** %21, align 8, !dbg !4461
  br label %if.end6, !dbg !4462

if.else:                                          ; preds = %while.body
  %22 = load %struct.edge_prediction**, %struct.edge_prediction*** %prediction, align 8, !dbg !4463
  %23 = load %struct.edge_prediction*, %struct.edge_prediction** %22, align 8, !dbg !4464
  %ep_next5 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %23, i32 0, i32 0, !dbg !4465
  store %struct.edge_prediction** %ep_next5, %struct.edge_prediction*** %prediction, align 8, !dbg !4466
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then4
  br label %while.cond, !dbg !4440, !llvm.loop !4467

while.end:                                        ; preds = %while.cond
  br label %if.end7, !dbg !4469

if.end7:                                          ; preds = %if.then, %while.end, %if.end
  ret void, !dbg !4470
}

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @predict_edge_def(%struct.edge_def* %e, i32 %predictor, i32 %taken) #0 !dbg !4471 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %predictor.addr = alloca i32, align 4
  %taken.addr = alloca i32, align 4
  %probability = alloca i32, align 4
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4474, metadata !DIExpression()), !dbg !4475
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !4476, metadata !DIExpression()), !dbg !4477
  store i32 %taken, i32* %taken.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %taken.addr, metadata !4478, metadata !DIExpression()), !dbg !4479
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !4480, metadata !DIExpression()), !dbg !4481
  %0 = load i32, i32* %predictor.addr, align 4, !dbg !4482
  %idxprom = sext i32 %0 to i64, !dbg !4483
  %arrayidx = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !4483
  %hitrate = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx, i32 0, i32 1, !dbg !4484
  %1 = load i32, i32* %hitrate, align 8, !dbg !4484
  store i32 %1, i32* %probability, align 4, !dbg !4481
  %2 = load i32, i32* %taken.addr, align 4, !dbg !4485
  %cmp = icmp ne i32 %2, 1, !dbg !4487
  br i1 %cmp, label %if.then, label %if.end, !dbg !4488

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %probability, align 4, !dbg !4489
  %sub = sub nsw i32 10000, %3, !dbg !4490
  store i32 %sub, i32* %probability, align 4, !dbg !4491
  br label %if.end, !dbg !4492

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4493
  %5 = load i32, i32* %predictor.addr, align 4, !dbg !4494
  %6 = load i32, i32* %probability, align 4, !dbg !4495
  call void @predict_edge(%struct.edge_def* %4, i32 %5, i32 %6), !dbg !4496
  ret void, !dbg !4497
}

declare dso_local void @predict_edge(%struct.edge_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @invert_br_probabilities(%struct.rtx_def* %insn) #0 !dbg !4498 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4501, metadata !DIExpression()), !dbg !4502
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4503, metadata !DIExpression()), !dbg !4504
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4505
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4505
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4505
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !4505
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4505
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4505
  store %struct.rtx_def* %1, %struct.rtx_def** %note, align 8, !dbg !4507
  br label %for.cond, !dbg !4508

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4509
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !4511
  br i1 %tobool, label %for.body, label %for.end, !dbg !4511

for.body:                                         ; preds = %for.cond
  %3 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4512
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !4512
  %bf.load = load i32, i32* %4, align 8, !dbg !4512
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4512
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4512
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !4514
  br i1 %cmp, label %if.then, label %if.else, !dbg !4515

if.then:                                          ; preds = %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4516
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4516
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4516
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !4516
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4516
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !4516
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4516
  %hwint = bitcast %union.u* %u5 to [1 x i64]*, !dbg !4516
  %arrayidx6 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4516
  %7 = load i64, i64* %arrayidx6, align 8, !dbg !4516
  %sub = sub nsw i64 10000, %7, !dbg !4516
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !4516
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4517
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4517
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !4517
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 0, !dbg !4517
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !4517
  store %struct.rtx_def* %call, %struct.rtx_def** %rt_rtx10, align 8, !dbg !4518
  br label %if.end37, !dbg !4517

if.else:                                          ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4519
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !4519
  %bf.load11 = load i32, i32* %10, align 8, !dbg !4519
  %bf.lshr12 = lshr i32 %bf.load11, 16, !dbg !4519
  %bf.clear13 = and i32 %bf.lshr12, 255, !dbg !4519
  %cmp14 = icmp eq i32 %bf.clear13, 16, !dbg !4521
  br i1 %cmp14, label %if.then15, label %if.end, !dbg !4522

if.then15:                                        ; preds = %if.else
  %11 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4523
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4523
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !4523
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !4523
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !4523
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !4523
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4523
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4523
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !4523
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4523
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4523
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4523
  %hwint25 = bitcast %union.u* %u24 to [1 x i64]*, !dbg !4523
  %arrayidx26 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint25, i64 0, i64 0, !dbg !4523
  %14 = load i64, i64* %arrayidx26, align 8, !dbg !4523
  %sub27 = sub nsw i64 10000, %14, !dbg !4523
  %call28 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub27), !dbg !4523
  %15 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4524
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4524
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !4524
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !4524
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !4524
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !4524
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4524
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !4524
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !4524
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !4524
  store %struct.rtx_def* %call28, %struct.rtx_def** %rt_rtx36, align 8, !dbg !4525
  br label %if.end, !dbg !4524

if.end:                                           ; preds = %if.then15, %if.else
  br label %if.end37

if.end37:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !4526

for.inc:                                          ; preds = %if.end37
  %17 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4527
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4527
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !4527
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 1, !dbg !4527
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !4527
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !4527
  store %struct.rtx_def* %18, %struct.rtx_def** %note, align 8, !dbg !4528
  br label %for.cond, !dbg !4529, !llvm.loop !4530

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4532
}

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @guess_outgoing_edge_probabilities(%struct.basic_block_def* %bb) #0 !dbg !4533 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4534, metadata !DIExpression()), !dbg !4535
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4536
  call void @bb_estimate_probability_locally(%struct.basic_block_def* %0), !dbg !4537
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4538
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !4538
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4538
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4538
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 1, !dbg !4538
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4538
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4539
  call void @combine_predictions_for_insn(%struct.rtx_def* %3, %struct.basic_block_def* %4), !dbg !4540
  ret void, !dbg !4541
}

; Function Attrs: noinline nounwind uwtable
define internal void @bb_estimate_probability_locally(%struct.basic_block_def* %bb) #0 !dbg !4542 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4543, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_insn, metadata !4545, metadata !DIExpression()), !dbg !4546
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4547
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !4547
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4547
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4547
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !4547
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4547
  store %struct.rtx_def* %2, %struct.rtx_def** %last_insn, align 8, !dbg !4546
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !4548, metadata !DIExpression()), !dbg !4549
  %3 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4550
  %call = call zeroext i8 @can_predict_insn_p(%struct.rtx_def* %3), !dbg !4552
  %tobool = icmp ne i8 %call, 0, !dbg !4552
  br i1 %tobool, label %if.end, label %if.then, !dbg !4553

if.then:                                          ; preds = %entry
  br label %if.end238, !dbg !4554

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4555
  %call1 = call %struct.rtx_def* @get_condition(%struct.rtx_def* %4, %struct.rtx_def** null, i32 0, i32 0), !dbg !4556
  store %struct.rtx_def* %call1, %struct.rtx_def** %cond, align 8, !dbg !4557
  %5 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4558
  %tobool2 = icmp ne %struct.rtx_def* %5, null, !dbg !4558
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !4560

if.then3:                                         ; preds = %if.end
  br label %if.end238, !dbg !4561

if.end4:                                          ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4562
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4562
  %bf.load = load i32, i32* %7, align 8, !dbg !4562
  %bf.clear = and i32 %bf.load, 65535, !dbg !4562
  %idxprom = sext i32 %bf.clear to i64, !dbg !4562
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !4562
  %8 = load i32, i32* %arrayidx, align 4, !dbg !4562
  %and = and i32 %8, -2, !dbg !4562
  %cmp = icmp eq i32 %and, 0, !dbg !4562
  br i1 %cmp, label %land.lhs.true, label %if.else44, !dbg !4564

land.lhs.true:                                    ; preds = %if.end4
  %9 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4565
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4565
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4565
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4565
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !4565
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4565
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !4565
  %bf.load6 = load i32, i32* %11, align 8, !dbg !4565
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !4565
  %cmp8 = icmp eq i32 %bf.clear7, 37, !dbg !4565
  br i1 %cmp8, label %land.lhs.true9, label %lor.lhs.false, !dbg !4566

land.lhs.true9:                                   ; preds = %land.lhs.true
  %12 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4567
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !4567
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !4567
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !4567
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !4567
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !4567
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !4567
  %bf.load14 = load i32, i32* %14, align 8, !dbg !4567
  %bf.lshr = lshr i32 %bf.load14, 30, !dbg !4567
  %bf.clear15 = and i32 %bf.lshr, 1, !dbg !4567
  %tobool16 = icmp ne i32 %bf.clear15, 0, !dbg !4567
  br i1 %tobool16, label %if.then33, label %lor.lhs.false, !dbg !4568

lor.lhs.false:                                    ; preds = %land.lhs.true9, %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4569
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4569
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !4569
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !4569
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !4569
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !4569
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !4569
  %bf.load21 = load i32, i32* %17, align 8, !dbg !4569
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !4569
  %cmp23 = icmp eq i32 %bf.clear22, 37, !dbg !4569
  br i1 %cmp23, label %land.lhs.true24, label %if.else44, !dbg !4570

land.lhs.true24:                                  ; preds = %lor.lhs.false
  %18 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4571
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !4571
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !4571
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 1, !dbg !4571
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4571
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !4571
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !4571
  %bf.load29 = load i32, i32* %20, align 8, !dbg !4571
  %bf.lshr30 = lshr i32 %bf.load29, 30, !dbg !4571
  %bf.clear31 = and i32 %bf.lshr30, 1, !dbg !4571
  %tobool32 = icmp ne i32 %bf.clear31, 0, !dbg !4571
  br i1 %tobool32, label %if.then33, label %if.else44, !dbg !4572

if.then33:                                        ; preds = %land.lhs.true24, %land.lhs.true9
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4573
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !4573
  %bf.load34 = load i32, i32* %22, align 8, !dbg !4573
  %bf.clear35 = and i32 %bf.load34, 65535, !dbg !4573
  %cmp36 = icmp eq i32 %bf.clear35, 81, !dbg !4576
  br i1 %cmp36, label %if.then37, label %if.else, !dbg !4577

if.then37:                                        ; preds = %if.then33
  %23 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4578
  call void @predict_insn_def(%struct.rtx_def* %23, i32 13, i32 0), !dbg !4579
  br label %if.end43, !dbg !4579

if.else:                                          ; preds = %if.then33
  %24 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4580
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !4580
  %bf.load38 = load i32, i32* %25, align 8, !dbg !4580
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !4580
  %cmp40 = icmp eq i32 %bf.clear39, 80, !dbg !4582
  br i1 %cmp40, label %if.then41, label %if.end42, !dbg !4583

if.then41:                                        ; preds = %if.else
  %26 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4584
  call void @predict_insn_def(%struct.rtx_def* %26, i32 13, i32 1), !dbg !4585
  br label %if.end42, !dbg !4585

if.end42:                                         ; preds = %if.then41, %if.else
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then37
  br label %if.end238, !dbg !4586

if.else44:                                        ; preds = %land.lhs.true24, %lor.lhs.false, %if.end4
  %27 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4587
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !4587
  %bf.load45 = load i32, i32* %28, align 8, !dbg !4587
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !4587
  switch i32 %bf.clear46, label %sw.default [
    i32 30, label %sw.bb
    i32 81, label %sw.bb49
    i32 92, label %sw.bb49
    i32 80, label %sw.bb119
    i32 97, label %sw.bb119
    i32 91, label %sw.bb190
    i32 90, label %sw.bb191
    i32 84, label %sw.bb192
    i32 85, label %sw.bb192
    i32 82, label %sw.bb215
    i32 83, label %sw.bb215
  ], !dbg !4588

sw.bb:                                            ; preds = %if.else44
  %29 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4589
  %30 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4591
  %31 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4592
  %cmp47 = icmp eq %struct.rtx_def* %30, %31, !dbg !4593
  %32 = zext i1 %cmp47 to i64, !dbg !4591
  %cond48 = select i1 %cmp47, i32 0, i32 1, !dbg !4591
  call void @predict_insn_def(%struct.rtx_def* %29, i32 4, i32 %cond48), !dbg !4594
  br label %sw.epilog, !dbg !4595

sw.bb49:                                          ; preds = %if.else44, %if.else44
  %33 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4596
  %u50 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4596
  %fld51 = bitcast %union.u* %u50 to [1 x %union.rtunion_def]*, !dbg !4596
  %arrayidx52 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld51, i64 0, i64 0, !dbg !4596
  %rt_rtx53 = bitcast %union.rtunion_def* %arrayidx52 to %struct.rtx_def**, !dbg !4596
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx53, align 8, !dbg !4596
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !4596
  %bf.load54 = load i32, i32* %35, align 8, !dbg !4596
  %bf.lshr55 = lshr i32 %bf.load54, 16, !dbg !4596
  %bf.clear56 = and i32 %bf.lshr55, 255, !dbg !4596
  %idxprom57 = zext i32 %bf.clear56 to i64, !dbg !4596
  %arrayidx58 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom57, !dbg !4596
  %36 = load i8, i8* %arrayidx58, align 1, !dbg !4596
  %conv = zext i8 %36 to i32, !dbg !4596
  %cmp59 = icmp eq i32 %conv, 8, !dbg !4596
  br i1 %cmp59, label %if.then100, label %lor.lhs.false61, !dbg !4596

lor.lhs.false61:                                  ; preds = %sw.bb49
  %37 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4596
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4596
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !4596
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 0, !dbg !4596
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !4596
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !4596
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !4596
  %bf.load66 = load i32, i32* %39, align 8, !dbg !4596
  %bf.lshr67 = lshr i32 %bf.load66, 16, !dbg !4596
  %bf.clear68 = and i32 %bf.lshr67, 255, !dbg !4596
  %idxprom69 = zext i32 %bf.clear68 to i64, !dbg !4596
  %arrayidx70 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom69, !dbg !4596
  %40 = load i8, i8* %arrayidx70, align 1, !dbg !4596
  %conv71 = zext i8 %40 to i32, !dbg !4596
  %cmp72 = icmp eq i32 %conv71, 9, !dbg !4596
  br i1 %cmp72, label %if.then100, label %lor.lhs.false74, !dbg !4596

lor.lhs.false74:                                  ; preds = %lor.lhs.false61
  %41 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4596
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !4596
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !4596
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 0, !dbg !4596
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !4596
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !4596
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !4596
  %bf.load79 = load i32, i32* %43, align 8, !dbg !4596
  %bf.lshr80 = lshr i32 %bf.load79, 16, !dbg !4596
  %bf.clear81 = and i32 %bf.lshr80, 255, !dbg !4596
  %idxprom82 = zext i32 %bf.clear81 to i64, !dbg !4596
  %arrayidx83 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom82, !dbg !4596
  %44 = load i8, i8* %arrayidx83, align 1, !dbg !4596
  %conv84 = zext i8 %44 to i32, !dbg !4596
  %cmp85 = icmp eq i32 %conv84, 11, !dbg !4596
  br i1 %cmp85, label %if.then100, label %lor.lhs.false87, !dbg !4596

lor.lhs.false87:                                  ; preds = %lor.lhs.false74
  %45 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4596
  %u88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !4596
  %fld89 = bitcast %union.u* %u88 to [1 x %union.rtunion_def]*, !dbg !4596
  %arrayidx90 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld89, i64 0, i64 0, !dbg !4596
  %rt_rtx91 = bitcast %union.rtunion_def* %arrayidx90 to %struct.rtx_def**, !dbg !4596
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx91, align 8, !dbg !4596
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !4596
  %bf.load92 = load i32, i32* %47, align 8, !dbg !4596
  %bf.lshr93 = lshr i32 %bf.load92, 16, !dbg !4596
  %bf.clear94 = and i32 %bf.lshr93, 255, !dbg !4596
  %idxprom95 = zext i32 %bf.clear94 to i64, !dbg !4596
  %arrayidx96 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom95, !dbg !4596
  %48 = load i8, i8* %arrayidx96, align 1, !dbg !4596
  %conv97 = zext i8 %48 to i32, !dbg !4596
  %cmp98 = icmp eq i32 %conv97, 17, !dbg !4596
  br i1 %cmp98, label %if.then100, label %if.else101, !dbg !4598

if.then100:                                       ; preds = %lor.lhs.false87, %lor.lhs.false74, %lor.lhs.false61, %sw.bb49
  br label %if.end118, !dbg !4598

if.else101:                                       ; preds = %lor.lhs.false87
  %49 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4599
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !4599
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !4599
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 1, !dbg !4599
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !4599
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !4599
  %51 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4601
  %cmp106 = icmp eq %struct.rtx_def* %50, %51, !dbg !4602
  br i1 %cmp106, label %if.then115, label %lor.lhs.false108, !dbg !4603

lor.lhs.false108:                                 ; preds = %if.else101
  %52 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4604
  %u109 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !4604
  %fld110 = bitcast %union.u* %u109 to [1 x %union.rtunion_def]*, !dbg !4604
  %arrayidx111 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld110, i64 0, i64 0, !dbg !4604
  %rt_rtx112 = bitcast %union.rtunion_def* %arrayidx111 to %struct.rtx_def**, !dbg !4604
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx112, align 8, !dbg !4604
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4605
  %cmp113 = icmp eq %struct.rtx_def* %53, %54, !dbg !4606
  br i1 %cmp113, label %if.then115, label %if.else116, !dbg !4607

if.then115:                                       ; preds = %lor.lhs.false108, %if.else101
  br label %if.end117, !dbg !4607

if.else116:                                       ; preds = %lor.lhs.false108
  %55 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4608
  call void @predict_insn_def(%struct.rtx_def* %55, i32 16, i32 0), !dbg !4609
  br label %if.end117

if.end117:                                        ; preds = %if.else116, %if.then115
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.then100
  br label %sw.epilog, !dbg !4610

sw.bb119:                                         ; preds = %if.else44, %if.else44
  %56 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4611
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !4611
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 0, !dbg !4611
  %rt_rtx123 = bitcast %union.rtunion_def* %arrayidx122 to %struct.rtx_def**, !dbg !4611
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx123, align 8, !dbg !4611
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !4611
  %bf.load124 = load i32, i32* %58, align 8, !dbg !4611
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !4611
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !4611
  %idxprom127 = zext i32 %bf.clear126 to i64, !dbg !4611
  %arrayidx128 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom127, !dbg !4611
  %59 = load i8, i8* %arrayidx128, align 1, !dbg !4611
  %conv129 = zext i8 %59 to i32, !dbg !4611
  %cmp130 = icmp eq i32 %conv129, 8, !dbg !4611
  br i1 %cmp130, label %if.then171, label %lor.lhs.false132, !dbg !4611

lor.lhs.false132:                                 ; preds = %sw.bb119
  %60 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4611
  %u133 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4611
  %fld134 = bitcast %union.u* %u133 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx135 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld134, i64 0, i64 0, !dbg !4611
  %rt_rtx136 = bitcast %union.rtunion_def* %arrayidx135 to %struct.rtx_def**, !dbg !4611
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx136, align 8, !dbg !4611
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !4611
  %bf.load137 = load i32, i32* %62, align 8, !dbg !4611
  %bf.lshr138 = lshr i32 %bf.load137, 16, !dbg !4611
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !4611
  %idxprom140 = zext i32 %bf.clear139 to i64, !dbg !4611
  %arrayidx141 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom140, !dbg !4611
  %63 = load i8, i8* %arrayidx141, align 1, !dbg !4611
  %conv142 = zext i8 %63 to i32, !dbg !4611
  %cmp143 = icmp eq i32 %conv142, 9, !dbg !4611
  br i1 %cmp143, label %if.then171, label %lor.lhs.false145, !dbg !4611

lor.lhs.false145:                                 ; preds = %lor.lhs.false132
  %64 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4611
  %u146 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !4611
  %fld147 = bitcast %union.u* %u146 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx148 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld147, i64 0, i64 0, !dbg !4611
  %rt_rtx149 = bitcast %union.rtunion_def* %arrayidx148 to %struct.rtx_def**, !dbg !4611
  %65 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx149, align 8, !dbg !4611
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !4611
  %bf.load150 = load i32, i32* %66, align 8, !dbg !4611
  %bf.lshr151 = lshr i32 %bf.load150, 16, !dbg !4611
  %bf.clear152 = and i32 %bf.lshr151, 255, !dbg !4611
  %idxprom153 = zext i32 %bf.clear152 to i64, !dbg !4611
  %arrayidx154 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom153, !dbg !4611
  %67 = load i8, i8* %arrayidx154, align 1, !dbg !4611
  %conv155 = zext i8 %67 to i32, !dbg !4611
  %cmp156 = icmp eq i32 %conv155, 11, !dbg !4611
  br i1 %cmp156, label %if.then171, label %lor.lhs.false158, !dbg !4611

lor.lhs.false158:                                 ; preds = %lor.lhs.false145
  %68 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4611
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !4611
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !4611
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 0, !dbg !4611
  %rt_rtx162 = bitcast %union.rtunion_def* %arrayidx161 to %struct.rtx_def**, !dbg !4611
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx162, align 8, !dbg !4611
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !4611
  %bf.load163 = load i32, i32* %70, align 8, !dbg !4611
  %bf.lshr164 = lshr i32 %bf.load163, 16, !dbg !4611
  %bf.clear165 = and i32 %bf.lshr164, 255, !dbg !4611
  %idxprom166 = zext i32 %bf.clear165 to i64, !dbg !4611
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom166, !dbg !4611
  %71 = load i8, i8* %arrayidx167, align 1, !dbg !4611
  %conv168 = zext i8 %71 to i32, !dbg !4611
  %cmp169 = icmp eq i32 %conv168, 17, !dbg !4611
  br i1 %cmp169, label %if.then171, label %if.else172, !dbg !4613

if.then171:                                       ; preds = %lor.lhs.false158, %lor.lhs.false145, %lor.lhs.false132, %sw.bb119
  br label %if.end189, !dbg !4613

if.else172:                                       ; preds = %lor.lhs.false158
  %72 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4614
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !4614
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !4614
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 1, !dbg !4614
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !4614
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !4614
  %74 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4616
  %cmp177 = icmp eq %struct.rtx_def* %73, %74, !dbg !4617
  br i1 %cmp177, label %if.then186, label %lor.lhs.false179, !dbg !4618

lor.lhs.false179:                                 ; preds = %if.else172
  %75 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4619
  %u180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !4619
  %fld181 = bitcast %union.u* %u180 to [1 x %union.rtunion_def]*, !dbg !4619
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i64 0, i64 0, !dbg !4619
  %rt_rtx183 = bitcast %union.rtunion_def* %arrayidx182 to %struct.rtx_def**, !dbg !4619
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx183, align 8, !dbg !4619
  %77 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4620
  %cmp184 = icmp eq %struct.rtx_def* %76, %77, !dbg !4621
  br i1 %cmp184, label %if.then186, label %if.else187, !dbg !4622

if.then186:                                       ; preds = %lor.lhs.false179, %if.else172
  br label %if.end188, !dbg !4622

if.else187:                                       ; preds = %lor.lhs.false179
  %78 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4623
  call void @predict_insn_def(%struct.rtx_def* %78, i32 16, i32 1), !dbg !4624
  br label %if.end188

if.end188:                                        ; preds = %if.else187, %if.then186
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.then171
  br label %sw.epilog, !dbg !4625

sw.bb190:                                         ; preds = %if.else44
  %79 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4626
  call void @predict_insn_def(%struct.rtx_def* %79, i32 17, i32 1), !dbg !4627
  br label %sw.epilog, !dbg !4628

sw.bb191:                                         ; preds = %if.else44
  %80 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4629
  call void @predict_insn_def(%struct.rtx_def* %80, i32 17, i32 0), !dbg !4630
  br label %sw.epilog, !dbg !4631

sw.bb192:                                         ; preds = %if.else44, %if.else44
  %81 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4632
  %u193 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !4632
  %fld194 = bitcast %union.u* %u193 to [1 x %union.rtunion_def]*, !dbg !4632
  %arrayidx195 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld194, i64 0, i64 1, !dbg !4632
  %rt_rtx196 = bitcast %union.rtunion_def* %arrayidx195 to %struct.rtx_def**, !dbg !4632
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx196, align 8, !dbg !4632
  %83 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4634
  %cmp197 = icmp eq %struct.rtx_def* %82, %83, !dbg !4635
  br i1 %cmp197, label %if.then213, label %lor.lhs.false199, !dbg !4636

lor.lhs.false199:                                 ; preds = %sw.bb192
  %84 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4637
  %u200 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !4637
  %fld201 = bitcast %union.u* %u200 to [1 x %union.rtunion_def]*, !dbg !4637
  %arrayidx202 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld201, i64 0, i64 1, !dbg !4637
  %rt_rtx203 = bitcast %union.rtunion_def* %arrayidx202 to %struct.rtx_def**, !dbg !4637
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx203, align 8, !dbg !4637
  %86 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !4638
  %cmp204 = icmp eq %struct.rtx_def* %85, %86, !dbg !4639
  br i1 %cmp204, label %if.then213, label %lor.lhs.false206, !dbg !4640

lor.lhs.false206:                                 ; preds = %lor.lhs.false199
  %87 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4641
  %u207 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %87, i32 0, i32 1, !dbg !4641
  %fld208 = bitcast %union.u* %u207 to [1 x %union.rtunion_def]*, !dbg !4641
  %arrayidx209 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld208, i64 0, i64 1, !dbg !4641
  %rt_rtx210 = bitcast %union.rtunion_def* %arrayidx209 to %struct.rtx_def**, !dbg !4641
  %88 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx210, align 8, !dbg !4641
  %89 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !4642
  %cmp211 = icmp eq %struct.rtx_def* %88, %89, !dbg !4643
  br i1 %cmp211, label %if.then213, label %if.end214, !dbg !4644

if.then213:                                       ; preds = %lor.lhs.false206, %lor.lhs.false199, %sw.bb192
  %90 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4645
  call void @predict_insn_def(%struct.rtx_def* %90, i32 15, i32 0), !dbg !4646
  br label %if.end214, !dbg !4646

if.end214:                                        ; preds = %if.then213, %lor.lhs.false206
  br label %sw.epilog, !dbg !4647

sw.bb215:                                         ; preds = %if.else44, %if.else44
  %91 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4648
  %u216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !4648
  %fld217 = bitcast %union.u* %u216 to [1 x %union.rtunion_def]*, !dbg !4648
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i64 0, i64 1, !dbg !4648
  %rt_rtx219 = bitcast %union.rtunion_def* %arrayidx218 to %struct.rtx_def**, !dbg !4648
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx219, align 8, !dbg !4648
  %93 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4650
  %cmp220 = icmp eq %struct.rtx_def* %92, %93, !dbg !4651
  br i1 %cmp220, label %if.then236, label %lor.lhs.false222, !dbg !4652

lor.lhs.false222:                                 ; preds = %sw.bb215
  %94 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4653
  %u223 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !4653
  %fld224 = bitcast %union.u* %u223 to [1 x %union.rtunion_def]*, !dbg !4653
  %arrayidx225 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld224, i64 0, i64 1, !dbg !4653
  %rt_rtx226 = bitcast %union.rtunion_def* %arrayidx225 to %struct.rtx_def**, !dbg !4653
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx226, align 8, !dbg !4653
  %96 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !4654
  %cmp227 = icmp eq %struct.rtx_def* %95, %96, !dbg !4655
  br i1 %cmp227, label %if.then236, label %lor.lhs.false229, !dbg !4656

lor.lhs.false229:                                 ; preds = %lor.lhs.false222
  %97 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4657
  %u230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !4657
  %fld231 = bitcast %union.u* %u230 to [1 x %union.rtunion_def]*, !dbg !4657
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i64 0, i64 1, !dbg !4657
  %rt_rtx233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.rtx_def**, !dbg !4657
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx233, align 8, !dbg !4657
  %99 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !4658
  %cmp234 = icmp eq %struct.rtx_def* %98, %99, !dbg !4659
  br i1 %cmp234, label %if.then236, label %if.end237, !dbg !4660

if.then236:                                       ; preds = %lor.lhs.false229, %lor.lhs.false222, %sw.bb215
  %100 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4661
  call void @predict_insn_def(%struct.rtx_def* %100, i32 15, i32 1), !dbg !4662
  br label %if.end237, !dbg !4662

if.end237:                                        ; preds = %if.then236, %lor.lhs.false229
  br label %sw.epilog, !dbg !4663

sw.default:                                       ; preds = %if.else44
  br label %sw.epilog, !dbg !4664

sw.epilog:                                        ; preds = %sw.default, %if.end237, %if.end214, %sw.bb191, %sw.bb190, %if.end189, %if.end118, %sw.bb
  br label %if.end238

if.end238:                                        ; preds = %if.then, %if.then3, %sw.epilog, %if.end43
  ret void, !dbg !4665
}

; Function Attrs: noinline nounwind uwtable
define internal void @combine_predictions_for_insn(%struct.rtx_def* %insn, %struct.basic_block_def* %bb) #0 !dbg !4666 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %prob_note = alloca %struct.rtx_def*, align 8
  %pnote = alloca %struct.rtx_def**, align 8
  %note = alloca %struct.rtx_def*, align 8
  %best_probability = alloca i32, align 4
  %best_predictor = alloca i32, align 4
  %combined_probability = alloca i32, align 4
  %d = alloca i32, align 4
  %first_match = alloca i8, align 1
  %found = alloca i8, align 1
  %predictor = alloca i32, align 4
  %probability = alloca i32, align 4
  %predictor79 = alloca i32, align 4
  %probability92 = alloca i32, align 4
  %prob = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prob_note, metadata !4673, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %pnote, metadata !4675, metadata !DIExpression()), !dbg !4677
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !4678, metadata !DIExpression()), !dbg !4679
  call void @llvm.dbg.declare(metadata i32* %best_probability, metadata !4680, metadata !DIExpression()), !dbg !4681
  store i32 5000, i32* %best_probability, align 4, !dbg !4681
  call void @llvm.dbg.declare(metadata i32* %best_predictor, metadata !4682, metadata !DIExpression()), !dbg !4683
  store i32 28, i32* %best_predictor, align 4, !dbg !4683
  call void @llvm.dbg.declare(metadata i32* %combined_probability, metadata !4684, metadata !DIExpression()), !dbg !4685
  store i32 5000, i32* %combined_probability, align 4, !dbg !4685
  call void @llvm.dbg.declare(metadata i32* %d, metadata !4686, metadata !DIExpression()), !dbg !4687
  call void @llvm.dbg.declare(metadata i8* %first_match, metadata !4688, metadata !DIExpression()), !dbg !4689
  store i8 0, i8* %first_match, align 1, !dbg !4689
  call void @llvm.dbg.declare(metadata i8* %found, metadata !4690, metadata !DIExpression()), !dbg !4691
  store i8 0, i8* %found, align 1, !dbg !4691
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4692
  %call = call zeroext i8 @can_predict_insn_p(%struct.rtx_def* %0), !dbg !4694
  %tobool = icmp ne i8 %call, 0, !dbg !4694
  br i1 %tobool, label %if.end, label %if.then, !dbg !4695

if.then:                                          ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4696
  call void @set_even_probabilities(%struct.basic_block_def* %1), !dbg !4698
  br label %if.end278, !dbg !4699

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4700
  %call1 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %2, i32 13, %struct.rtx_def* null), !dbg !4701
  store %struct.rtx_def* %call1, %struct.rtx_def** %prob_note, align 8, !dbg !4702
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4703
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4703
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4703
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 7, !dbg !4703
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4703
  store %struct.rtx_def** %rt_rtx, %struct.rtx_def*** %pnote, align 8, !dbg !4704
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4705
  %tobool2 = icmp ne %struct._IO_FILE* %4, null, !dbg !4705
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !4707

if.then3:                                         ; preds = %if.end
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4708
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4709
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4709
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !4709
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !4709
  %rt_int = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !4709
  %7 = load i32, i32* %rt_int, align 8, !dbg !4709
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4710
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !4711
  %9 = load i32, i32* %index, align 8, !dbg !4711
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.34, i64 0, i64 0), i32 %7, i32 %9), !dbg !4712
  br label %if.end8, !dbg !4712

if.end8:                                          ; preds = %if.then3, %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4713
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4713
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !4713
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 7, !dbg !4713
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !4713
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !4713
  store %struct.rtx_def* %11, %struct.rtx_def** %note, align 8, !dbg !4715
  br label %for.cond, !dbg !4716

for.cond:                                         ; preds = %for.inc, %if.end8
  %12 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4717
  %tobool13 = icmp ne %struct.rtx_def* %12, null, !dbg !4719
  br i1 %tobool13, label %for.body, label %for.end, !dbg !4719

for.body:                                         ; preds = %for.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4720
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !4720
  %bf.load = load i32, i32* %14, align 8, !dbg !4720
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4720
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4720
  %cmp = icmp eq i32 %bf.clear, 16, !dbg !4722
  br i1 %cmp, label %if.then14, label %if.end54, !dbg !4723

if.then14:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %predictor, metadata !4724, metadata !DIExpression()), !dbg !4726
  %15 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4727
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4727
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !4727
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !4727
  %rt_rtx18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !4727
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx18, align 8, !dbg !4727
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !4727
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !4727
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !4727
  %rt_rtx22 = bitcast %union.rtunion_def* %arrayidx21 to %struct.rtx_def**, !dbg !4727
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx22, align 8, !dbg !4727
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4727
  %hwint = bitcast %union.u* %u23 to [1 x i64]*, !dbg !4727
  %arrayidx24 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !4727
  %18 = load i64, i64* %arrayidx24, align 8, !dbg !4727
  %conv = trunc i64 %18 to i32, !dbg !4728
  store i32 %conv, i32* %predictor, align 4, !dbg !4726
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !4729, metadata !DIExpression()), !dbg !4730
  %19 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4731
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4731
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !4731
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !4731
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !4731
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !4731
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4731
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !4731
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 1, !dbg !4731
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !4731
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !4731
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4731
  %hwint34 = bitcast %union.u* %u33 to [1 x i64]*, !dbg !4731
  %arrayidx35 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint34, i64 0, i64 0, !dbg !4731
  %22 = load i64, i64* %arrayidx35, align 8, !dbg !4731
  %conv36 = trunc i64 %22 to i32, !dbg !4731
  store i32 %conv36, i32* %probability, align 4, !dbg !4730
  store i8 1, i8* %found, align 1, !dbg !4732
  %23 = load i32, i32* %best_predictor, align 4, !dbg !4733
  %24 = load i32, i32* %predictor, align 4, !dbg !4735
  %cmp37 = icmp ugt i32 %23, %24, !dbg !4736
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !4737

if.then39:                                        ; preds = %if.then14
  %25 = load i32, i32* %probability, align 4, !dbg !4738
  store i32 %25, i32* %best_probability, align 4, !dbg !4739
  %26 = load i32, i32* %predictor, align 4, !dbg !4740
  store i32 %26, i32* %best_predictor, align 4, !dbg !4741
  br label %if.end40, !dbg !4742

if.end40:                                         ; preds = %if.then39, %if.then14
  %27 = load i32, i32* %combined_probability, align 4, !dbg !4743
  %28 = load i32, i32* %probability, align 4, !dbg !4744
  %mul = mul nsw i32 %27, %28, !dbg !4745
  %29 = load i32, i32* %combined_probability, align 4, !dbg !4746
  %sub = sub nsw i32 10000, %29, !dbg !4747
  %30 = load i32, i32* %probability, align 4, !dbg !4748
  %sub41 = sub nsw i32 10000, %30, !dbg !4749
  %mul42 = mul nsw i32 %sub, %sub41, !dbg !4750
  %add = add nsw i32 %mul, %mul42, !dbg !4751
  store i32 %add, i32* %d, align 4, !dbg !4752
  %31 = load i32, i32* %d, align 4, !dbg !4753
  %cmp43 = icmp eq i32 %31, 0, !dbg !4755
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !4756

if.then45:                                        ; preds = %if.end40
  store i32 5000, i32* %combined_probability, align 4, !dbg !4757
  br label %if.end53, !dbg !4758

if.else:                                          ; preds = %if.end40
  %32 = load i32, i32* %combined_probability, align 4, !dbg !4759
  %conv46 = sitofp i32 %32 to double, !dbg !4760
  %33 = load i32, i32* %probability, align 4, !dbg !4761
  %conv47 = sitofp i32 %33 to double, !dbg !4761
  %mul48 = fmul double %conv46, %conv47, !dbg !4762
  %mul49 = fmul double %mul48, 1.000000e+04, !dbg !4763
  %34 = load i32, i32* %d, align 4, !dbg !4764
  %conv50 = sitofp i32 %34 to double, !dbg !4764
  %div = fdiv double %mul49, %conv50, !dbg !4765
  %add51 = fadd double %div, 5.000000e-01, !dbg !4766
  %conv52 = fptosi double %add51 to i32, !dbg !4767
  store i32 %conv52, i32* %combined_probability, align 4, !dbg !4768
  br label %if.end53

if.end53:                                         ; preds = %if.else, %if.then45
  br label %if.end54, !dbg !4769

if.end54:                                         ; preds = %if.end53, %for.body
  br label %for.inc, !dbg !4770

for.inc:                                          ; preds = %if.end54
  %35 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !4771
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4771
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !4771
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 1, !dbg !4771
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !4771
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !4771
  store %struct.rtx_def* %36, %struct.rtx_def** %note, align 8, !dbg !4772
  br label %for.cond, !dbg !4773, !llvm.loop !4774

for.end:                                          ; preds = %for.cond
  %37 = load i32, i32* %best_predictor, align 4, !dbg !4776
  %idxprom = zext i32 %37 to i64, !dbg !4778
  %arrayidx59 = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !4778
  %flags = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx59, i32 0, i32 2, !dbg !4779
  %38 = load i32, i32* %flags, align 4, !dbg !4779
  %and = and i32 %38, 1, !dbg !4780
  %tobool60 = icmp ne i32 %and, 0, !dbg !4780
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !4781

if.then61:                                        ; preds = %for.end
  store i8 1, i8* %first_match, align 1, !dbg !4782
  br label %if.end62, !dbg !4783

if.end62:                                         ; preds = %if.then61, %for.end
  %39 = load i8, i8* %found, align 1, !dbg !4784
  %tobool63 = icmp ne i8 %39, 0, !dbg !4784
  br i1 %tobool63, label %if.else65, label %if.then64, !dbg !4786

if.then64:                                        ; preds = %if.end62
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4787
  %41 = load i32, i32* %combined_probability, align 4, !dbg !4788
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4789
  call void @dump_prediction(%struct._IO_FILE* %40, i32 3, i32 %41, %struct.basic_block_def* %42, i32 1), !dbg !4790
  br label %if.end68, !dbg !4790

if.else65:                                        ; preds = %if.end62
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4791
  %44 = load i32, i32* %combined_probability, align 4, !dbg !4793
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4794
  %46 = load i8, i8* %first_match, align 1, !dbg !4795
  %tobool66 = icmp ne i8 %46, 0, !dbg !4796
  %lnot = xor i1 %tobool66, true, !dbg !4796
  %lnot.ext = zext i1 %lnot to i32, !dbg !4796
  call void @dump_prediction(%struct._IO_FILE* %43, i32 1, i32 %44, %struct.basic_block_def* %45, i32 %lnot.ext), !dbg !4797
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4798
  %48 = load i32, i32* %best_probability, align 4, !dbg !4799
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4800
  %50 = load i8, i8* %first_match, align 1, !dbg !4801
  %conv67 = zext i8 %50 to i32, !dbg !4801
  call void @dump_prediction(%struct._IO_FILE* %47, i32 2, i32 %48, %struct.basic_block_def* %49, i32 %conv67), !dbg !4802
  br label %if.end68

if.end68:                                         ; preds = %if.else65, %if.then64
  %51 = load i8, i8* %first_match, align 1, !dbg !4803
  %tobool69 = icmp ne i8 %51, 0, !dbg !4803
  br i1 %tobool69, label %if.then70, label %if.end71, !dbg !4805

if.then70:                                        ; preds = %if.end68
  %52 = load i32, i32* %best_probability, align 4, !dbg !4806
  store i32 %52, i32* %combined_probability, align 4, !dbg !4807
  br label %if.end71, !dbg !4808

if.end71:                                         ; preds = %if.then70, %if.end68
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4809
  %54 = load i32, i32* %combined_probability, align 4, !dbg !4810
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4811
  call void @dump_prediction(%struct._IO_FILE* %53, i32 0, i32 %54, %struct.basic_block_def* %55, i32 1), !dbg !4812
  br label %while.cond, !dbg !4813

while.cond:                                       ; preds = %if.end117, %if.end71
  %56 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4814
  %57 = load %struct.rtx_def*, %struct.rtx_def** %56, align 8, !dbg !4815
  %tobool72 = icmp ne %struct.rtx_def* %57, null, !dbg !4813
  br i1 %tobool72, label %while.body, label %while.end, !dbg !4813

while.body:                                       ; preds = %while.cond
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4816
  %59 = load %struct.rtx_def*, %struct.rtx_def** %58, align 8, !dbg !4816
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !4816
  %bf.load73 = load i32, i32* %60, align 8, !dbg !4816
  %bf.lshr74 = lshr i32 %bf.load73, 16, !dbg !4816
  %bf.clear75 = and i32 %bf.lshr74, 255, !dbg !4816
  %cmp76 = icmp eq i32 %bf.clear75, 16, !dbg !4819
  br i1 %cmp76, label %if.then78, label %if.else112, !dbg !4820

if.then78:                                        ; preds = %while.body
  call void @llvm.dbg.declare(metadata i32* %predictor79, metadata !4821, metadata !DIExpression()), !dbg !4823
  %61 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4824
  %62 = load %struct.rtx_def*, %struct.rtx_def** %61, align 8, !dbg !4824
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !4824
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !4824
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !4824
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !4824
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !4824
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !4824
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 0, !dbg !4824
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !4824
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx87, align 8, !dbg !4824
  %u88 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !4824
  %hwint89 = bitcast %union.u* %u88 to [1 x i64]*, !dbg !4824
  %arrayidx90 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint89, i64 0, i64 0, !dbg !4824
  %65 = load i64, i64* %arrayidx90, align 8, !dbg !4824
  %conv91 = trunc i64 %65 to i32, !dbg !4825
  store i32 %conv91, i32* %predictor79, align 4, !dbg !4823
  call void @llvm.dbg.declare(metadata i32* %probability92, metadata !4826, metadata !DIExpression()), !dbg !4827
  %66 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4828
  %67 = load %struct.rtx_def*, %struct.rtx_def** %66, align 8, !dbg !4828
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !4828
  %fld94 = bitcast %union.u* %u93 to [1 x %union.rtunion_def]*, !dbg !4828
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i64 0, i64 0, !dbg !4828
  %rt_rtx96 = bitcast %union.rtunion_def* %arrayidx95 to %struct.rtx_def**, !dbg !4828
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx96, align 8, !dbg !4828
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !4828
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !4828
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 1, !dbg !4828
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !4828
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !4828
  %u101 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !4828
  %hwint102 = bitcast %union.u* %u101 to [1 x i64]*, !dbg !4828
  %arrayidx103 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint102, i64 0, i64 0, !dbg !4828
  %70 = load i64, i64* %arrayidx103, align 8, !dbg !4828
  %conv104 = trunc i64 %70 to i32, !dbg !4828
  store i32 %conv104, i32* %probability92, align 4, !dbg !4827
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4829
  %72 = load i32, i32* %predictor79, align 4, !dbg !4830
  %73 = load i32, i32* %probability92, align 4, !dbg !4831
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4832
  %75 = load i8, i8* %first_match, align 1, !dbg !4833
  %tobool105 = icmp ne i8 %75, 0, !dbg !4833
  br i1 %tobool105, label %lor.rhs, label %lor.end, !dbg !4834

lor.rhs:                                          ; preds = %if.then78
  %76 = load i32, i32* %best_predictor, align 4, !dbg !4835
  %77 = load i32, i32* %predictor79, align 4, !dbg !4836
  %cmp106 = icmp eq i32 %76, %77, !dbg !4837
  br label %lor.end, !dbg !4834

lor.end:                                          ; preds = %lor.rhs, %if.then78
  %78 = phi i1 [ true, %if.then78 ], [ %cmp106, %lor.rhs ]
  %lor.ext = zext i1 %78 to i32, !dbg !4834
  call void @dump_prediction(%struct._IO_FILE* %71, i32 %72, i32 %73, %struct.basic_block_def* %74, i32 %lor.ext), !dbg !4838
  %79 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4839
  %80 = load %struct.rtx_def*, %struct.rtx_def** %79, align 8, !dbg !4839
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !4839
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !4839
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 1, !dbg !4839
  %rt_rtx111 = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**, !dbg !4839
  %81 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx111, align 8, !dbg !4839
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4840
  store %struct.rtx_def* %81, %struct.rtx_def** %82, align 8, !dbg !4841
  br label %if.end117, !dbg !4842

if.else112:                                       ; preds = %while.body
  %83 = load %struct.rtx_def**, %struct.rtx_def*** %pnote, align 8, !dbg !4843
  %84 = load %struct.rtx_def*, %struct.rtx_def** %83, align 8, !dbg !4843
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !4843
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !4843
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 1, !dbg !4843
  %rt_rtx116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.rtx_def**, !dbg !4843
  store %struct.rtx_def** %rt_rtx116, %struct.rtx_def*** %pnote, align 8, !dbg !4844
  br label %if.end117

if.end117:                                        ; preds = %if.else112, %lor.end
  br label %while.cond, !dbg !4813, !llvm.loop !4845

while.end:                                        ; preds = %while.cond
  %85 = load %struct.rtx_def*, %struct.rtx_def** %prob_note, align 8, !dbg !4847
  %tobool118 = icmp ne %struct.rtx_def* %85, null, !dbg !4847
  br i1 %tobool118, label %if.else191, label %if.then119, !dbg !4849

if.then119:                                       ; preds = %while.end
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4850
  %87 = load i32, i32* %combined_probability, align 4, !dbg !4852
  %conv120 = sext i32 %87 to i64, !dbg !4852
  %call121 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv120), !dbg !4852
  call void @add_reg_note(%struct.rtx_def* %86, i32 13, %struct.rtx_def* %call121), !dbg !4853
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4854
  %call122 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %88), !dbg !4856
  %tobool123 = icmp ne i8 %call122, 0, !dbg !4856
  br i1 %tobool123, label %if.end190, label %if.then124, !dbg !4857

if.then124:                                       ; preds = %if.then119
  %89 = load i32, i32* %combined_probability, align 4, !dbg !4858
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 1, !dbg !4860
  %91 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4860
  %tobool125 = icmp ne %struct.VEC_edge_gc* %91, null, !dbg !4860
  br i1 %tobool125, label %cond.true, label %cond.false, !dbg !4860

cond.true:                                        ; preds = %if.then124
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 1, !dbg !4860
  %93 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs126, align 8, !dbg !4860
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %93, i32 0, i32 0, !dbg !4860
  br label %cond.end, !dbg !4860

cond.false:                                       ; preds = %if.then124
  br label %cond.end, !dbg !4860

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4860
  %call127 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !4860
  %flags128 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call127, i32 0, i32 7, !dbg !4860
  %94 = load i32, i32* %flags128, align 8, !dbg !4860
  %and129 = and i32 %94, 1, !dbg !4860
  %tobool130 = icmp ne i32 %and129, 0, !dbg !4860
  br i1 %tobool130, label %cond.true131, label %cond.false141, !dbg !4860

cond.true131:                                     ; preds = %cond.end
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 1, !dbg !4860
  %96 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs132, align 8, !dbg !4860
  %tobool133 = icmp ne %struct.VEC_edge_gc* %96, null, !dbg !4860
  br i1 %tobool133, label %cond.true134, label %cond.false137, !dbg !4860

cond.true134:                                     ; preds = %cond.true131
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs135 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 1, !dbg !4860
  %98 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs135, align 8, !dbg !4860
  %base136 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %98, i32 0, i32 0, !dbg !4860
  br label %cond.end138, !dbg !4860

cond.false137:                                    ; preds = %cond.true131
  br label %cond.end138, !dbg !4860

cond.end138:                                      ; preds = %cond.false137, %cond.true134
  %cond139 = phi %struct.VEC_edge_base* [ %base136, %cond.true134 ], [ null, %cond.false137 ], !dbg !4860
  %call140 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond139, i32 1), !dbg !4860
  br label %cond.end151, !dbg !4860

cond.false141:                                    ; preds = %cond.end
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 1, !dbg !4860
  %100 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs142, align 8, !dbg !4860
  %tobool143 = icmp ne %struct.VEC_edge_gc* %100, null, !dbg !4860
  br i1 %tobool143, label %cond.true144, label %cond.false147, !dbg !4860

cond.true144:                                     ; preds = %cond.false141
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4860
  %succs145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 1, !dbg !4860
  %102 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs145, align 8, !dbg !4860
  %base146 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %102, i32 0, i32 0, !dbg !4860
  br label %cond.end148, !dbg !4860

cond.false147:                                    ; preds = %cond.false141
  br label %cond.end148, !dbg !4860

cond.end148:                                      ; preds = %cond.false147, %cond.true144
  %cond149 = phi %struct.VEC_edge_base* [ %base146, %cond.true144 ], [ null, %cond.false147 ], !dbg !4860
  %call150 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond149, i32 0), !dbg !4860
  br label %cond.end151, !dbg !4860

cond.end151:                                      ; preds = %cond.end148, %cond.end138
  %cond152 = phi %struct.edge_def* [ %call140, %cond.end138 ], [ %call150, %cond.end148 ], !dbg !4860
  %probability153 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond152, i32 0, i32 8, !dbg !4861
  store i32 %89, i32* %probability153, align 4, !dbg !4862
  %103 = load i32, i32* %combined_probability, align 4, !dbg !4863
  %sub154 = sub nsw i32 10000, %103, !dbg !4864
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 1, !dbg !4865
  %105 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs155, align 8, !dbg !4865
  %tobool156 = icmp ne %struct.VEC_edge_gc* %105, null, !dbg !4865
  br i1 %tobool156, label %cond.true157, label %cond.false160, !dbg !4865

cond.true157:                                     ; preds = %cond.end151
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs158 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 1, !dbg !4865
  %107 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs158, align 8, !dbg !4865
  %base159 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %107, i32 0, i32 0, !dbg !4865
  br label %cond.end161, !dbg !4865

cond.false160:                                    ; preds = %cond.end151
  br label %cond.end161, !dbg !4865

cond.end161:                                      ; preds = %cond.false160, %cond.true157
  %cond162 = phi %struct.VEC_edge_base* [ %base159, %cond.true157 ], [ null, %cond.false160 ], !dbg !4865
  %call163 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond162, i32 0), !dbg !4865
  %flags164 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call163, i32 0, i32 7, !dbg !4865
  %108 = load i32, i32* %flags164, align 8, !dbg !4865
  %and165 = and i32 %108, 1, !dbg !4865
  %tobool166 = icmp ne i32 %and165, 0, !dbg !4865
  br i1 %tobool166, label %cond.true167, label %cond.false177, !dbg !4865

cond.true167:                                     ; preds = %cond.end161
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 1, !dbg !4865
  %110 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs168, align 8, !dbg !4865
  %tobool169 = icmp ne %struct.VEC_edge_gc* %110, null, !dbg !4865
  br i1 %tobool169, label %cond.true170, label %cond.false173, !dbg !4865

cond.true170:                                     ; preds = %cond.true167
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 1, !dbg !4865
  %112 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs171, align 8, !dbg !4865
  %base172 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %112, i32 0, i32 0, !dbg !4865
  br label %cond.end174, !dbg !4865

cond.false173:                                    ; preds = %cond.true167
  br label %cond.end174, !dbg !4865

cond.end174:                                      ; preds = %cond.false173, %cond.true170
  %cond175 = phi %struct.VEC_edge_base* [ %base172, %cond.true170 ], [ null, %cond.false173 ], !dbg !4865
  %call176 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond175, i32 0), !dbg !4865
  br label %cond.end187, !dbg !4865

cond.false177:                                    ; preds = %cond.end161
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs178 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 1, !dbg !4865
  %114 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs178, align 8, !dbg !4865
  %tobool179 = icmp ne %struct.VEC_edge_gc* %114, null, !dbg !4865
  br i1 %tobool179, label %cond.true180, label %cond.false183, !dbg !4865

cond.true180:                                     ; preds = %cond.false177
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4865
  %succs181 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 1, !dbg !4865
  %116 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs181, align 8, !dbg !4865
  %base182 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %116, i32 0, i32 0, !dbg !4865
  br label %cond.end184, !dbg !4865

cond.false183:                                    ; preds = %cond.false177
  br label %cond.end184, !dbg !4865

cond.end184:                                      ; preds = %cond.false183, %cond.true180
  %cond185 = phi %struct.VEC_edge_base* [ %base182, %cond.true180 ], [ null, %cond.false183 ], !dbg !4865
  %call186 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond185, i32 1), !dbg !4865
  br label %cond.end187, !dbg !4865

cond.end187:                                      ; preds = %cond.end184, %cond.end174
  %cond188 = phi %struct.edge_def* [ %call176, %cond.end174 ], [ %call186, %cond.end184 ], !dbg !4865
  %probability189 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond188, i32 0, i32 8, !dbg !4866
  store i32 %sub154, i32* %probability189, align 4, !dbg !4867
  br label %if.end190, !dbg !4868

if.end190:                                        ; preds = %cond.end187, %if.then119
  br label %if.end278, !dbg !4869

if.else191:                                       ; preds = %while.end
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4870
  %call192 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %117), !dbg !4872
  %tobool193 = icmp ne i8 %call192, 0, !dbg !4872
  br i1 %tobool193, label %if.else274, label %if.then194, !dbg !4873

if.then194:                                       ; preds = %if.else191
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !4874, metadata !DIExpression()), !dbg !4876
  %118 = load %struct.rtx_def*, %struct.rtx_def** %prob_note, align 8, !dbg !4877
  %u195 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %118, i32 0, i32 1, !dbg !4877
  %fld196 = bitcast %union.u* %u195 to [1 x %union.rtunion_def]*, !dbg !4877
  %arrayidx197 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld196, i64 0, i64 0, !dbg !4877
  %rt_rtx198 = bitcast %union.rtunion_def* %arrayidx197 to %struct.rtx_def**, !dbg !4877
  %119 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx198, align 8, !dbg !4877
  %u199 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %119, i32 0, i32 1, !dbg !4877
  %hwint200 = bitcast %union.u* %u199 to [1 x i64]*, !dbg !4877
  %arrayidx201 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint200, i64 0, i64 0, !dbg !4877
  %120 = load i64, i64* %arrayidx201, align 8, !dbg !4877
  %conv202 = trunc i64 %120 to i32, !dbg !4877
  store i32 %conv202, i32* %prob, align 4, !dbg !4876
  %121 = load i32, i32* %prob, align 4, !dbg !4878
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs203 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 1, !dbg !4879
  %123 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs203, align 8, !dbg !4879
  %tobool204 = icmp ne %struct.VEC_edge_gc* %123, null, !dbg !4879
  br i1 %tobool204, label %cond.true205, label %cond.false208, !dbg !4879

cond.true205:                                     ; preds = %if.then194
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs206 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 1, !dbg !4879
  %125 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs206, align 8, !dbg !4879
  %base207 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %125, i32 0, i32 0, !dbg !4879
  br label %cond.end209, !dbg !4879

cond.false208:                                    ; preds = %if.then194
  br label %cond.end209, !dbg !4879

cond.end209:                                      ; preds = %cond.false208, %cond.true205
  %cond210 = phi %struct.VEC_edge_base* [ %base207, %cond.true205 ], [ null, %cond.false208 ], !dbg !4879
  %call211 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond210, i32 0), !dbg !4879
  %flags212 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call211, i32 0, i32 7, !dbg !4879
  %126 = load i32, i32* %flags212, align 8, !dbg !4879
  %and213 = and i32 %126, 1, !dbg !4879
  %tobool214 = icmp ne i32 %and213, 0, !dbg !4879
  br i1 %tobool214, label %cond.true215, label %cond.false225, !dbg !4879

cond.true215:                                     ; preds = %cond.end209
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs216 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 1, !dbg !4879
  %128 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs216, align 8, !dbg !4879
  %tobool217 = icmp ne %struct.VEC_edge_gc* %128, null, !dbg !4879
  br i1 %tobool217, label %cond.true218, label %cond.false221, !dbg !4879

cond.true218:                                     ; preds = %cond.true215
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs219 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %129, i32 0, i32 1, !dbg !4879
  %130 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs219, align 8, !dbg !4879
  %base220 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %130, i32 0, i32 0, !dbg !4879
  br label %cond.end222, !dbg !4879

cond.false221:                                    ; preds = %cond.true215
  br label %cond.end222, !dbg !4879

cond.end222:                                      ; preds = %cond.false221, %cond.true218
  %cond223 = phi %struct.VEC_edge_base* [ %base220, %cond.true218 ], [ null, %cond.false221 ], !dbg !4879
  %call224 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond223, i32 1), !dbg !4879
  br label %cond.end235, !dbg !4879

cond.false225:                                    ; preds = %cond.end209
  %131 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs226 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %131, i32 0, i32 1, !dbg !4879
  %132 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs226, align 8, !dbg !4879
  %tobool227 = icmp ne %struct.VEC_edge_gc* %132, null, !dbg !4879
  br i1 %tobool227, label %cond.true228, label %cond.false231, !dbg !4879

cond.true228:                                     ; preds = %cond.false225
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4879
  %succs229 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 1, !dbg !4879
  %134 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs229, align 8, !dbg !4879
  %base230 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %134, i32 0, i32 0, !dbg !4879
  br label %cond.end232, !dbg !4879

cond.false231:                                    ; preds = %cond.false225
  br label %cond.end232, !dbg !4879

cond.end232:                                      ; preds = %cond.false231, %cond.true228
  %cond233 = phi %struct.VEC_edge_base* [ %base230, %cond.true228 ], [ null, %cond.false231 ], !dbg !4879
  %call234 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond233, i32 0), !dbg !4879
  br label %cond.end235, !dbg !4879

cond.end235:                                      ; preds = %cond.end232, %cond.end222
  %cond236 = phi %struct.edge_def* [ %call224, %cond.end222 ], [ %call234, %cond.end232 ], !dbg !4879
  %probability237 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond236, i32 0, i32 8, !dbg !4880
  store i32 %121, i32* %probability237, align 4, !dbg !4881
  %135 = load i32, i32* %prob, align 4, !dbg !4882
  %sub238 = sub nsw i32 10000, %135, !dbg !4883
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs239 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %136, i32 0, i32 1, !dbg !4884
  %137 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs239, align 8, !dbg !4884
  %tobool240 = icmp ne %struct.VEC_edge_gc* %137, null, !dbg !4884
  br i1 %tobool240, label %cond.true241, label %cond.false244, !dbg !4884

cond.true241:                                     ; preds = %cond.end235
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs242 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %138, i32 0, i32 1, !dbg !4884
  %139 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs242, align 8, !dbg !4884
  %base243 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %139, i32 0, i32 0, !dbg !4884
  br label %cond.end245, !dbg !4884

cond.false244:                                    ; preds = %cond.end235
  br label %cond.end245, !dbg !4884

cond.end245:                                      ; preds = %cond.false244, %cond.true241
  %cond246 = phi %struct.VEC_edge_base* [ %base243, %cond.true241 ], [ null, %cond.false244 ], !dbg !4884
  %call247 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond246, i32 0), !dbg !4884
  %flags248 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call247, i32 0, i32 7, !dbg !4884
  %140 = load i32, i32* %flags248, align 8, !dbg !4884
  %and249 = and i32 %140, 1, !dbg !4884
  %tobool250 = icmp ne i32 %and249, 0, !dbg !4884
  br i1 %tobool250, label %cond.true251, label %cond.false261, !dbg !4884

cond.true251:                                     ; preds = %cond.end245
  %141 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs252 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %141, i32 0, i32 1, !dbg !4884
  %142 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs252, align 8, !dbg !4884
  %tobool253 = icmp ne %struct.VEC_edge_gc* %142, null, !dbg !4884
  br i1 %tobool253, label %cond.true254, label %cond.false257, !dbg !4884

cond.true254:                                     ; preds = %cond.true251
  %143 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs255 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %143, i32 0, i32 1, !dbg !4884
  %144 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs255, align 8, !dbg !4884
  %base256 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %144, i32 0, i32 0, !dbg !4884
  br label %cond.end258, !dbg !4884

cond.false257:                                    ; preds = %cond.true251
  br label %cond.end258, !dbg !4884

cond.end258:                                      ; preds = %cond.false257, %cond.true254
  %cond259 = phi %struct.VEC_edge_base* [ %base256, %cond.true254 ], [ null, %cond.false257 ], !dbg !4884
  %call260 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond259, i32 0), !dbg !4884
  br label %cond.end271, !dbg !4884

cond.false261:                                    ; preds = %cond.end245
  %145 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs262 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %145, i32 0, i32 1, !dbg !4884
  %146 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs262, align 8, !dbg !4884
  %tobool263 = icmp ne %struct.VEC_edge_gc* %146, null, !dbg !4884
  br i1 %tobool263, label %cond.true264, label %cond.false267, !dbg !4884

cond.true264:                                     ; preds = %cond.false261
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4884
  %succs265 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %147, i32 0, i32 1, !dbg !4884
  %148 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs265, align 8, !dbg !4884
  %base266 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %148, i32 0, i32 0, !dbg !4884
  br label %cond.end268, !dbg !4884

cond.false267:                                    ; preds = %cond.false261
  br label %cond.end268, !dbg !4884

cond.end268:                                      ; preds = %cond.false267, %cond.true264
  %cond269 = phi %struct.VEC_edge_base* [ %base266, %cond.true264 ], [ null, %cond.false267 ], !dbg !4884
  %call270 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond269, i32 1), !dbg !4884
  br label %cond.end271, !dbg !4884

cond.end271:                                      ; preds = %cond.end268, %cond.end258
  %cond272 = phi %struct.edge_def* [ %call260, %cond.end258 ], [ %call270, %cond.end268 ], !dbg !4884
  %probability273 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond272, i32 0, i32 8, !dbg !4885
  store i32 %sub238, i32* %probability273, align 4, !dbg !4886
  br label %if.end277, !dbg !4887

if.else274:                                       ; preds = %if.else191
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4888
  %call275 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %149), !dbg !4889
  %probability276 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call275, i32 0, i32 8, !dbg !4890
  store i32 10000, i32* %probability276, align 4, !dbg !4891
  br label %if.end277

if.end277:                                        ; preds = %if.else274, %cond.end271
  br label %if.end278

if.end278:                                        ; preds = %if.then, %if.end277, %if.end190
  ret void, !dbg !4892
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_estimate_probability() #0 !dbg !4893 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4894, metadata !DIExpression()), !dbg !4895
  call void @add_noreturn_fake_exit_edges(), !dbg !4896
  call void @connect_infinite_loops_to_exit(), !dbg !4897
  call void @create_preheaders(i32 1), !dbg !4898
  call void @calculate_dominance_info(i32 2), !dbg !4899
  %call = call %struct.pointer_map_t* @pointer_map_create(), !dbg !4900
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4901
  call void @tree_bb_level_predictions(), !dbg !4902
  call void @record_loop_exits(), !dbg !4903
  %call1 = call i32 @number_of_loops(), !dbg !4904
  %cmp = icmp ugt i32 %call1, 1, !dbg !4906
  br i1 %cmp, label %if.then, label %if.end, !dbg !4907

if.then:                                          ; preds = %entry
  call void @predict_loops(), !dbg !4908
  br label %if.end, !dbg !4908

if.end:                                           ; preds = %if.then, %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4909
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4909
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4909
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4909
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4909
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4909
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4909
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4909
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4909
  br label %for.cond, !dbg !4909

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4911
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4911
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4911
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !4911
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !4911
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4911
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4911
  %cmp4 = icmp ne %struct.basic_block_def* %4, %7, !dbg !4911
  br i1 %cmp4, label %for.body, label %for.end, !dbg !4909

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4913
  call void @tree_estimate_probability_bb(%struct.basic_block_def* %8), !dbg !4914
  br label %for.inc, !dbg !4914

for.inc:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4911
  %next_bb5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !4911
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb5, align 8, !dbg !4911
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !4911
  br label %for.cond, !dbg !4911, !llvm.loop !4915

for.end:                                          ; preds = %for.cond
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4917
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !4917
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !4917
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4917
  %x_entry_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 0, !dbg !4917
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr8, align 8, !dbg !4917
  %next_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 6, !dbg !4917
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb9, align 8, !dbg !4917
  store %struct.basic_block_def* %14, %struct.basic_block_def** %bb, align 8, !dbg !4917
  br label %for.cond10, !dbg !4917

for.cond10:                                       ; preds = %for.inc16, %for.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4919
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4919
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !4919
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !4919
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !4919
  %x_exit_block_ptr13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 1, !dbg !4919
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr13, align 8, !dbg !4919
  %cmp14 = icmp ne %struct.basic_block_def* %15, %18, !dbg !4919
  br i1 %cmp14, label %for.body15, label %for.end18, !dbg !4917

for.body15:                                       ; preds = %for.cond10
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4921
  call void @combine_predictions_for_bb(%struct.basic_block_def* %19), !dbg !4922
  br label %for.inc16, !dbg !4922

for.inc16:                                        ; preds = %for.body15
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4919
  %next_bb17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 6, !dbg !4919
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb17, align 8, !dbg !4919
  store %struct.basic_block_def* %21, %struct.basic_block_def** %bb, align 8, !dbg !4919
  br label %for.cond10, !dbg !4919, !llvm.loop !4923

for.end18:                                        ; preds = %for.cond10
  %22 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4925
  call void @pointer_map_destroy(%struct.pointer_map_t* %22), !dbg !4926
  store %struct.pointer_map_t* null, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !4927
  call void @estimate_bb_frequencies(), !dbg !4928
  call void @free_dominance_info(i32 2), !dbg !4929
  call void @remove_fake_exit_edges(), !dbg !4930
  ret void, !dbg !4931
}

declare dso_local void @add_noreturn_fake_exit_edges() #2

declare dso_local void @connect_infinite_loops_to_exit() #2

declare dso_local void @create_preheaders(i32) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() #2

; Function Attrs: noinline nounwind uwtable
define internal void @tree_bb_level_predictions() #0 !dbg !4932 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %has_return_edges = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %decl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4933, metadata !DIExpression()), !dbg !4934
  call void @llvm.dbg.declare(metadata i8* %has_return_edges, metadata !4935, metadata !DIExpression()), !dbg !4936
  store i8 0, i8* %has_return_edges, align 1, !dbg !4936
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4937, metadata !DIExpression()), !dbg !4938
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4939, metadata !DIExpression()), !dbg !4946
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4947
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4947
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4947
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4947
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !4947
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4947
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !4947
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4947
  %3 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4947
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !4947
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4947
  store i32 %5, i32* %4, align 8, !dbg !4947
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !4947
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4947
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !4947
  %8 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4947
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4947
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !4947
  br label %for.cond, !dbg !4947

for.cond:                                         ; preds = %for.inc, %entry
  %10 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4949
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !4949
  %12 = load i32, i32* %11, align 8, !dbg !4949
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !4949
  %14 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !4949
  %call1 = call zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %14, %struct.edge_def** %e), !dbg !4949
  %tobool = icmp ne i8 %call1, 0, !dbg !4947
  br i1 %tobool, label %for.body, label %for.end, !dbg !4947

for.body:                                         ; preds = %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4951
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 7, !dbg !4953
  %16 = load i32, i32* %flags, align 8, !dbg !4953
  %and = and i32 %16, 26, !dbg !4954
  %tobool2 = icmp ne i32 %and, 0, !dbg !4954
  br i1 %tobool2, label %if.end, label %if.then, !dbg !4955

if.then:                                          ; preds = %for.body
  store i8 1, i8* %has_return_edges, align 1, !dbg !4956
  br label %for.end, !dbg !4958

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4959

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4949
  br label %for.cond, !dbg !4949, !llvm.loop !4960

for.end:                                          ; preds = %if.then, %for.cond
  call void @apply_return_prediction(), !dbg !4962
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4963
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !4963
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !4963
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !4963
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 0, !dbg !4963
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4963
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !4963
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4963
  store %struct.basic_block_def* %20, %struct.basic_block_def** %bb, align 8, !dbg !4963
  br label %for.cond5, !dbg !4963

for.cond5:                                        ; preds = %for.inc42, %for.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4965
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4965
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !4965
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !4965
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !4965
  %x_exit_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 1, !dbg !4965
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr8, align 8, !dbg !4965
  %cmp = icmp ne %struct.basic_block_def* %21, %24, !dbg !4965
  br i1 %cmp, label %for.body9, label %for.end44, !dbg !4963

for.body9:                                        ; preds = %for.cond5
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4967, metadata !DIExpression()), !dbg !4975
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4976
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp10, %struct.basic_block_def* %25), !dbg !4978
  %26 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4978
  %27 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !4978
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 24, i1 false), !dbg !4978
  br label %for.cond11, !dbg !4979

for.cond11:                                       ; preds = %for.inc40, %for.body9
  %call12 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4980
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4982
  %lnot = xor i1 %tobool13, true, !dbg !4982
  br i1 %lnot, label %for.body14, label %for.end41, !dbg !4983

for.body14:                                       ; preds = %for.cond11
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4984, metadata !DIExpression()), !dbg !4986
  %call15 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4987
  store %union.gimple_statement_d* %call15, %union.gimple_statement_d** %stmt, align 8, !dbg !4986
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !4988, metadata !DIExpression()), !dbg !4989
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4990
  %call16 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %28), !dbg !4992
  %tobool17 = icmp ne i8 %call16, 0, !dbg !4992
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !4993

if.then18:                                        ; preds = %for.body14
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4994
  %call19 = call i32 @gimple_call_flags(%union.gimple_statement_d* %29), !dbg !4997
  %and20 = and i32 %call19, 8, !dbg !4998
  %tobool21 = icmp ne i32 %and20, 0, !dbg !4998
  br i1 %tobool21, label %land.lhs.true, label %if.end24, !dbg !4999

land.lhs.true:                                    ; preds = %if.then18
  %30 = load i8, i8* %has_return_edges, align 1, !dbg !5000
  %conv = zext i8 %30 to i32, !dbg !5000
  %tobool22 = icmp ne i32 %conv, 0, !dbg !5000
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !5001

if.then23:                                        ; preds = %land.lhs.true
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5002
  call void @predict_paths_leading_to(%struct.basic_block_def* %31, i32 9, i32 0), !dbg !5003
  br label %if.end24, !dbg !5003

if.end24:                                         ; preds = %if.then23, %land.lhs.true, %if.then18
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5004
  %call25 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %32), !dbg !5005
  store %union.tree_node* %call25, %union.tree_node** %decl, align 8, !dbg !5006
  %33 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5007
  %tobool26 = icmp ne %union.tree_node* %33, null, !dbg !5007
  br i1 %tobool26, label %land.lhs.true27, label %if.end31, !dbg !5009

land.lhs.true27:                                  ; preds = %if.end24
  %34 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5010
  %decl_common = bitcast %union.tree_node* %34 to %struct.tree_decl_common*, !dbg !5010
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !5010
  %35 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !5010
  %call28 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %union.tree_node* %35), !dbg !5011
  %tobool29 = icmp ne %union.tree_node* %call28, null, !dbg !5011
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !5012

if.then30:                                        ; preds = %land.lhs.true27
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5013
  call void @predict_paths_leading_to(%struct.basic_block_def* %36, i32 10, i32 0), !dbg !5014
  br label %if.end31, !dbg !5014

if.end31:                                         ; preds = %if.then30, %land.lhs.true27, %if.end24
  br label %if.end39, !dbg !5015

if.else:                                          ; preds = %for.body14
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5016
  %call32 = call i32 @gimple_code(%union.gimple_statement_d* %37), !dbg !5018
  %cmp33 = icmp eq i32 %call32, 33, !dbg !5019
  br i1 %cmp33, label %if.then35, label %if.end38, !dbg !5020

if.then35:                                        ; preds = %if.else
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5021
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5023
  %call36 = call i32 @gimple_predict_predictor(%union.gimple_statement_d* %39), !dbg !5024
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5025
  %call37 = call i32 @gimple_predict_outcome(%union.gimple_statement_d* %40), !dbg !5026
  call void @predict_paths_leading_to(%struct.basic_block_def* %38, i32 %call36, i32 %call37), !dbg !5027
  br label %if.end38, !dbg !5028

if.end38:                                         ; preds = %if.then35, %if.else
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end31
  br label %for.inc40, !dbg !5029

for.inc40:                                        ; preds = %if.end39
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5030
  br label %for.cond11, !dbg !5031, !llvm.loop !5032

for.end41:                                        ; preds = %for.cond11
  br label %for.inc42, !dbg !5034

for.inc42:                                        ; preds = %for.end41
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4965
  %next_bb43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 6, !dbg !4965
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb43, align 8, !dbg !4965
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !4965
  br label %for.cond5, !dbg !4965, !llvm.loop !5035

for.end44:                                        ; preds = %for.cond5
  ret void, !dbg !5037
}

declare dso_local void @record_loop_exits() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !5038 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5039
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5039
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5039
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5039
  %tobool = icmp ne %struct.loops* %1, null, !dbg !5039
  br i1 %tobool, label %if.end, label %if.then, !dbg !5041

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5042
  br label %return, !dbg !5042

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5043
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5043
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5043
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5043
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !5043
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5043
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !5043
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5043

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5043
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5043
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !5043
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !5043
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !5043
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !5043
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !5043
  br label %cond.end, !dbg !5043

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5043

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5043
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5043
  store i32 %call, i32* %retval, align 4, !dbg !5044
  br label %return, !dbg !5044

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5045
  ret i32 %8, !dbg !5045
}

; Function Attrs: noinline nounwind uwtable
define internal void @predict_loops() #0 !dbg !5046 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %j = alloca i32, align 4
  %n_exits = alloca i32, align 4
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %niter_desc = alloca %struct.tree_niter_desc, align 8
  %ex = alloca %struct.edge_def*, align 8
  %niter = alloca %union.tree_node*, align 8
  %nitercst = alloca i64, align 8
  %max = alloca i32, align 4
  %probability = alloca i32, align 4
  %predictor = alloca i32, align 4
  %header_found = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %probability85 = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5047, metadata !DIExpression()), !dbg !5053
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5054, metadata !DIExpression()), !dbg !5055
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5056
  br label %for.cond, !dbg !5056

for.cond:                                         ; preds = %for.inc111, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5058
  %tobool = icmp ne %struct.loop* %0, null, !dbg !5056
  br i1 %tobool, label %for.body, label %for.end112, !dbg !5056

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5060, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !5063, metadata !DIExpression()), !dbg !5065
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5066, metadata !DIExpression()), !dbg !5067
  call void @llvm.dbg.declare(metadata i32* %n_exits, metadata !5068, metadata !DIExpression()), !dbg !5069
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !5070, metadata !DIExpression()), !dbg !5076
  call void @llvm.dbg.declare(metadata %struct.tree_niter_desc* %niter_desc, metadata !5077, metadata !DIExpression()), !dbg !5093
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ex, metadata !5094, metadata !DIExpression()), !dbg !5095
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5096
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %1), !dbg !5097
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !5098
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5099
  %tobool1 = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !5099
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5099

cond.true:                                        ; preds = %for.body
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5099
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !5099
  br label %cond.end, !dbg !5099

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !5099

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5099
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5099
  store i32 %call2, i32* %n_exits, align 4, !dbg !5100
  store i32 0, i32* %j, align 4, !dbg !5101
  br label %for.cond3, !dbg !5103

for.cond3:                                        ; preds = %for.inc, %cond.end
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5104
  %tobool4 = icmp ne %struct.VEC_edge_heap* %4, null, !dbg !5104
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5104

cond.true5:                                       ; preds = %for.cond3
  %5 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5104
  %base6 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %5, i32 0, i32 0, !dbg !5104
  br label %cond.end8, !dbg !5104

cond.false7:                                      ; preds = %for.cond3
  br label %cond.end8, !dbg !5104

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_edge_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5104
  %6 = load i32, i32* %j, align 4, !dbg !5104
  %call10 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond9, i32 %6, %struct.edge_def** %ex), !dbg !5104
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5106
  br i1 %tobool11, label %for.body12, label %for.end, !dbg !5106

for.body12:                                       ; preds = %cond.end8
  call void @llvm.dbg.declare(metadata %union.tree_node** %niter, metadata !5107, metadata !DIExpression()), !dbg !5109
  store %union.tree_node* null, %union.tree_node** %niter, align 8, !dbg !5109
  call void @llvm.dbg.declare(metadata i64* %nitercst, metadata !5110, metadata !DIExpression()), !dbg !5111
  call void @llvm.dbg.declare(metadata i32* %max, metadata !5112, metadata !DIExpression()), !dbg !5113
  %7 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !5114
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %7, i64 46, !dbg !5114
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !5114
  %8 = load i32, i32* %value, align 8, !dbg !5114
  store i32 %8, i32* %max, align 4, !dbg !5113
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !5115, metadata !DIExpression()), !dbg !5116
  call void @llvm.dbg.declare(metadata i32* %predictor, metadata !5117, metadata !DIExpression()), !dbg !5118
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5119
  %10 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !5121
  %call13 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %9, %struct.edge_def* %10, %struct.tree_niter_desc* %niter_desc, i8 zeroext 0), !dbg !5122
  %tobool14 = icmp ne i8 %call13, 0, !dbg !5122
  br i1 %tobool14, label %if.then, label %if.end, !dbg !5123

if.then:                                          ; preds = %for.body12
  %niter15 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 2, !dbg !5124
  %11 = load %union.tree_node*, %union.tree_node** %niter15, align 8, !dbg !5124
  store %union.tree_node* %11, %union.tree_node** %niter, align 8, !dbg !5125
  br label %if.end, !dbg !5126

if.end:                                           ; preds = %if.then, %for.body12
  %12 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5127
  %tobool16 = icmp ne %union.tree_node* %12, null, !dbg !5127
  br i1 %tobool16, label %lor.lhs.false, label %if.then19, !dbg !5129

lor.lhs.false:                                    ; preds = %if.end
  %niter17 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i32 0, i32 2, !dbg !5130
  %13 = load %union.tree_node*, %union.tree_node** %niter17, align 8, !dbg !5130
  %base18 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !5130
  %14 = bitcast %struct.tree_base* %base18 to i64*, !dbg !5130
  %bf.load = load i64, i64* %14, align 8, !dbg !5130
  %bf.clear = and i64 %bf.load, 65535, !dbg !5130
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5130
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !5131
  br i1 %cmp, label %if.then19, label %if.end21, !dbg !5132

if.then19:                                        ; preds = %lor.lhs.false, %if.end
  %15 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5133
  %16 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !5134
  %call20 = call %union.tree_node* @loop_niter_by_eval(%struct.loop* %15, %struct.edge_def* %16), !dbg !5135
  store %union.tree_node* %call20, %union.tree_node** %niter, align 8, !dbg !5136
  br label %if.end21, !dbg !5137

if.end21:                                         ; preds = %if.then19, %lor.lhs.false
  %17 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5138
  %base22 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !5138
  %18 = bitcast %struct.tree_base* %base22 to i64*, !dbg !5138
  %bf.load23 = load i64, i64* %18, align 8, !dbg !5138
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !5138
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !5138
  %cmp26 = icmp eq i32 %bf.cast25, 23, !dbg !5140
  br i1 %cmp26, label %if.then27, label %if.else37, !dbg !5141

if.then27:                                        ; preds = %if.end21
  %19 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5142
  %call28 = call i32 @host_integerp(%union.tree_node* %19, i32 1), !dbg !5145
  %tobool29 = icmp ne i32 %call28, 0, !dbg !5145
  br i1 %tobool29, label %land.lhs.true, label %if.else, !dbg !5146

land.lhs.true:                                    ; preds = %if.then27
  %20 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5147
  %21 = load i32, i32* %max, align 4, !dbg !5148
  %sub = sub nsw i32 %21, 1, !dbg !5149
  %conv = sext i32 %sub to i64, !dbg !5148
  %call30 = call i32 @compare_tree_int(%union.tree_node* %20, i64 %conv), !dbg !5150
  %cmp31 = icmp eq i32 %call30, -1, !dbg !5151
  br i1 %cmp31, label %if.then33, label %if.else, !dbg !5152

if.then33:                                        ; preds = %land.lhs.true
  %22 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !5153
  %call34 = call i64 @tree_low_cst(%union.tree_node* %22, i32 1), !dbg !5154
  %add = add nsw i64 %call34, 1, !dbg !5155
  store i64 %add, i64* %nitercst, align 8, !dbg !5156
  br label %if.end36, !dbg !5157

if.else:                                          ; preds = %land.lhs.true, %if.then27
  %23 = load i32, i32* %max, align 4, !dbg !5158
  %conv35 = sext i32 %23 to i64, !dbg !5158
  store i64 %conv35, i64* %nitercst, align 8, !dbg !5159
  br label %if.end36

if.end36:                                         ; preds = %if.else, %if.then33
  store i32 5, i32* %predictor, align 4, !dbg !5160
  br label %if.end54, !dbg !5161

if.else37:                                        ; preds = %if.end21
  %24 = load i32, i32* %n_exits, align 4, !dbg !5162
  %cmp38 = icmp eq i32 %24, 1, !dbg !5164
  br i1 %cmp38, label %if.then40, label %if.else52, !dbg !5165

if.then40:                                        ; preds = %if.else37
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5166
  %call41 = call i64 @estimated_loop_iterations_int(%struct.loop* %25, i8 zeroext 0), !dbg !5168
  store i64 %call41, i64* %nitercst, align 8, !dbg !5169
  %26 = load i64, i64* %nitercst, align 8, !dbg !5170
  %cmp42 = icmp slt i64 %26, 0, !dbg !5172
  br i1 %cmp42, label %if.then44, label %if.end45, !dbg !5173

if.then44:                                        ; preds = %if.then40
  br label %for.inc, !dbg !5174

if.end45:                                         ; preds = %if.then40
  %27 = load i64, i64* %nitercst, align 8, !dbg !5175
  %28 = load i32, i32* %max, align 4, !dbg !5177
  %conv46 = sext i32 %28 to i64, !dbg !5177
  %cmp47 = icmp sgt i64 %27, %conv46, !dbg !5178
  br i1 %cmp47, label %if.then49, label %if.end51, !dbg !5179

if.then49:                                        ; preds = %if.end45
  %29 = load i32, i32* %max, align 4, !dbg !5180
  %conv50 = sext i32 %29 to i64, !dbg !5180
  store i64 %conv50, i64* %nitercst, align 8, !dbg !5181
  br label %if.end51, !dbg !5182

if.end51:                                         ; preds = %if.then49, %if.end45
  store i32 7, i32* %predictor, align 4, !dbg !5183
  br label %if.end53, !dbg !5184

if.else52:                                        ; preds = %if.else37
  br label %for.inc, !dbg !5185

if.end53:                                         ; preds = %if.end51
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.end36
  %30 = load i64, i64* %nitercst, align 8, !dbg !5186
  %div = sdiv i64 %30, 2, !dbg !5187
  %add55 = add nsw i64 10000, %div, !dbg !5188
  %31 = load i64, i64* %nitercst, align 8, !dbg !5189
  %div56 = sdiv i64 %add55, %31, !dbg !5190
  %conv57 = trunc i64 %div56 to i32, !dbg !5191
  store i32 %conv57, i32* %probability, align 4, !dbg !5192
  %32 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !5193
  %33 = load i32, i32* %predictor, align 4, !dbg !5194
  %34 = load i32, i32* %probability, align 4, !dbg !5195
  call void @predict_edge(%struct.edge_def* %32, i32 %33, i32 %34), !dbg !5196
  br label %for.inc, !dbg !5197

for.inc:                                          ; preds = %if.end54, %if.else52, %if.then44
  %35 = load i32, i32* %j, align 4, !dbg !5198
  %inc = add i32 %35, 1, !dbg !5198
  store i32 %inc, i32* %j, align 4, !dbg !5198
  br label %for.cond3, !dbg !5199, !llvm.loop !5200

for.end:                                          ; preds = %cond.end8
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !5202
  %36 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5203
  %call58 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %36), !dbg !5204
  store %struct.basic_block_def** %call58, %struct.basic_block_def*** %bbs, align 8, !dbg !5205
  store i32 0, i32* %j, align 4, !dbg !5206
  br label %for.cond59, !dbg !5208

for.cond59:                                       ; preds = %for.inc108, %for.end
  %37 = load i32, i32* %j, align 4, !dbg !5209
  %38 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5211
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 6, !dbg !5212
  %39 = load i32, i32* %num_nodes, align 4, !dbg !5212
  %cmp60 = icmp ult i32 %37, %39, !dbg !5213
  br i1 %cmp60, label %for.body62, label %for.end110, !dbg !5214

for.body62:                                       ; preds = %for.cond59
  call void @llvm.dbg.declare(metadata i32* %header_found, metadata !5215, metadata !DIExpression()), !dbg !5217
  store i32 0, i32* %header_found, align 4, !dbg !5217
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5218, metadata !DIExpression()), !dbg !5219
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5220, metadata !DIExpression()), !dbg !5221
  %40 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5222
  %41 = load i32, i32* %j, align 4, !dbg !5223
  %idxprom = zext i32 %41 to i64, !dbg !5222
  %arrayidx63 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %40, i64 %idxprom, !dbg !5222
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx63, align 8, !dbg !5222
  store %struct.basic_block_def* %42, %struct.basic_block_def** %bb, align 8, !dbg !5224
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5225
  %call64 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %43, i32 8), !dbg !5227
  %tobool65 = icmp ne i8 %call64, 0, !dbg !5227
  br i1 %tobool65, label %if.then66, label %if.end67, !dbg !5228

if.then66:                                        ; preds = %for.body62
  br label %for.inc108, !dbg !5229

if.end67:                                         ; preds = %for.body62
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5230
  %45 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5232
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %45, i32 0, i32 3, !dbg !5233
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5233
  %cmp68 = icmp eq %struct.basic_block_def* %44, %46, !dbg !5234
  br i1 %cmp68, label %if.then70, label %if.end76, !dbg !5235

if.then70:                                        ; preds = %if.end67
  %47 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5236
  %latch71 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 3, !dbg !5238
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %latch71, align 8, !dbg !5238
  %49 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5239
  %header = getelementptr inbounds %struct.loop, %struct.loop* %49, i32 0, i32 2, !dbg !5240
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5240
  %call72 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %48, %struct.basic_block_def* %50), !dbg !5241
  store %struct.edge_def* %call72, %struct.edge_def** %e, align 8, !dbg !5242
  %51 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5243
  %tobool73 = icmp ne %struct.edge_def* %51, null, !dbg !5243
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !5245

if.then74:                                        ; preds = %if.then70
  store i32 1, i32* %header_found, align 4, !dbg !5246
  %52 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5248
  call void @predict_edge_def(%struct.edge_def* %52, i32 11, i32 1), !dbg !5249
  br label %if.end75, !dbg !5250

if.end75:                                         ; preds = %if.then74, %if.then70
  br label %if.end76, !dbg !5251

if.end76:                                         ; preds = %if.end75, %if.end67
  %53 = load i32, i32* %header_found, align 4, !dbg !5252
  %tobool77 = icmp ne i32 %53, 0, !dbg !5252
  br i1 %tobool77, label %if.end107, label %land.lhs.true78, !dbg !5254

land.lhs.true78:                                  ; preds = %if.end76
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5255
  %call79 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %54, i32 7), !dbg !5256
  %tobool80 = icmp ne i8 %call79, 0, !dbg !5256
  br i1 %tobool80, label %if.end107, label %land.lhs.true81, !dbg !5257

land.lhs.true81:                                  ; preds = %land.lhs.true78
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5258
  %call82 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %55, i32 5), !dbg !5259
  %tobool83 = icmp ne i8 %call82, 0, !dbg !5259
  br i1 %tobool83, label %if.end107, label %if.then84, !dbg !5260

if.then84:                                        ; preds = %land.lhs.true81
  call void @llvm.dbg.declare(metadata i32* %probability85, metadata !5261, metadata !DIExpression()), !dbg !5263
  %56 = load i32, i32* getelementptr inbounds ([29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 12, i32 1), align 8, !dbg !5264
  %sub86 = sub nsw i32 10000, %56, !dbg !5265
  %57 = load i32, i32* %n_exits, align 4, !dbg !5266
  %div87 = udiv i32 %sub86, %57, !dbg !5267
  store i32 %div87, i32* %probability85, align 4, !dbg !5263
  %58 = load i32, i32* %probability85, align 4, !dbg !5268
  %cmp88 = icmp slt i32 %58, 200, !dbg !5270
  br i1 %cmp88, label %if.then90, label %if.end91, !dbg !5271

if.then90:                                        ; preds = %if.then84
  store i32 200, i32* %probability85, align 4, !dbg !5272
  br label %if.end91, !dbg !5273

if.end91:                                         ; preds = %if.then90, %if.then84
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5274
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 1, !dbg !5274
  %call92 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5274
  %60 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5274
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 0, !dbg !5274
  %62 = extractvalue { i32, %struct.VEC_edge_gc** } %call92, 0, !dbg !5274
  store i32 %62, i32* %61, align 8, !dbg !5274
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 1, !dbg !5274
  %64 = extractvalue { i32, %struct.VEC_edge_gc** } %call92, 1, !dbg !5274
  store %struct.VEC_edge_gc** %64, %struct.VEC_edge_gc*** %63, align 8, !dbg !5274
  %65 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5274
  %66 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5274
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false), !dbg !5274
  br label %for.cond93, !dbg !5274

for.cond93:                                       ; preds = %for.inc105, %if.end91
  %67 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5276
  %68 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 0, !dbg !5276
  %69 = load i32, i32* %68, align 8, !dbg !5276
  %70 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 1, !dbg !5276
  %71 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %70, align 8, !dbg !5276
  %call94 = call zeroext i8 @ei_cond(i32 %69, %struct.VEC_edge_gc** %71, %struct.edge_def** %e), !dbg !5276
  %tobool95 = icmp ne i8 %call94, 0, !dbg !5274
  br i1 %tobool95, label %for.body96, label %for.end106, !dbg !5274

for.body96:                                       ; preds = %for.cond93
  %72 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5278
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 1, !dbg !5280
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5280
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 9, !dbg !5281
  %74 = load i32, i32* %index, align 8, !dbg !5281
  %cmp97 = icmp slt i32 %74, 2, !dbg !5282
  br i1 %cmp97, label %if.then103, label %lor.lhs.false99, !dbg !5283

lor.lhs.false99:                                  ; preds = %for.body96
  %75 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5284
  %76 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5285
  %dest100 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 1, !dbg !5286
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %dest100, align 8, !dbg !5286
  %call101 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %75, %struct.basic_block_def* %77), !dbg !5287
  %tobool102 = icmp ne i8 %call101, 0, !dbg !5287
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !5288

if.then103:                                       ; preds = %lor.lhs.false99, %for.body96
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5289
  %79 = load i32, i32* %probability85, align 4, !dbg !5290
  call void @predict_edge(%struct.edge_def* %78, i32 12, i32 %79), !dbg !5291
  br label %if.end104, !dbg !5291

if.end104:                                        ; preds = %if.then103, %lor.lhs.false99
  br label %for.inc105, !dbg !5292

for.inc105:                                       ; preds = %if.end104
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5276
  br label %for.cond93, !dbg !5276, !llvm.loop !5293

for.end106:                                       ; preds = %for.cond93
  br label %if.end107, !dbg !5295

if.end107:                                        ; preds = %for.end106, %land.lhs.true81, %land.lhs.true78, %if.end76
  br label %for.inc108, !dbg !5296

for.inc108:                                       ; preds = %if.end107, %if.then66
  %80 = load i32, i32* %j, align 4, !dbg !5297
  %inc109 = add i32 %80, 1, !dbg !5297
  store i32 %inc109, i32* %j, align 4, !dbg !5297
  br label %for.cond59, !dbg !5298, !llvm.loop !5299

for.end110:                                       ; preds = %for.cond59
  %81 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5301
  %82 = bitcast %struct.basic_block_def** %81 to i8*, !dbg !5301
  call void @free(i8* %82), !dbg !5302
  br label %for.inc111, !dbg !5303

for.inc111:                                       ; preds = %for.end110
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5058
  br label %for.cond, !dbg !5058, !llvm.loop !5304

for.end112:                                       ; preds = %for.cond
  ret void, !dbg !5306
}

; Function Attrs: noinline nounwind uwtable
define internal void @tree_estimate_probability_bb(%struct.basic_block_def* %bb) #0 !dbg !5307 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %e1 = alloca %struct.edge_def*, align 8
  %ei1 = alloca %struct.edge_iterator, align 8
  %tmp29 = alloca %struct.edge_iterator, align 8
  %bi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp83 = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5312, metadata !DIExpression()), !dbg !5313
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !5314, metadata !DIExpression()), !dbg !5315
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5316
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5316
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5316
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5316
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !5316
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5316
  store i32 %3, i32* %2, align 8, !dbg !5316
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !5316
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5316
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !5316
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5316
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5316
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5316
  br label %for.cond, !dbg !5316

for.cond:                                         ; preds = %for.inc102, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5318
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5318
  %10 = load i32, i32* %9, align 8, !dbg !5318
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5318
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5318
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !5318
  %tobool = icmp ne i8 %call1, 0, !dbg !5316
  br i1 %tobool, label %for.body, label %for.end103, !dbg !5316

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5320
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !5323
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5323
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5324
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 6, !dbg !5325
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5325
  %cmp = icmp ne %struct.basic_block_def* %14, %16, !dbg !5326
  br i1 %cmp, label %land.lhs.true, label %if.end60, !dbg !5327

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5328
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 1, !dbg !5329
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !5329
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5330
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !5330
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5330
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5330
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 1, !dbg !5330
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5330
  %cmp3 = icmp ne %struct.basic_block_def* %18, %21, !dbg !5331
  br i1 %cmp3, label %land.lhs.true4, label %if.end60, !dbg !5332

land.lhs.true4:                                   ; preds = %land.lhs.true
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5333
  %dest5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !5334
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest5, align 8, !dbg !5334
  %call6 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %23), !dbg !5335
  %conv = zext i8 %call6 to i32, !dbg !5335
  %tobool7 = icmp ne i32 %conv, 0, !dbg !5335
  br i1 %tobool7, label %land.lhs.true8, label %if.end60, !dbg !5336

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5337
  %dest9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !5338
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest9, align 8, !dbg !5338
  %call10 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %25), !dbg !5339
  %dest11 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call10, i32 0, i32 1, !dbg !5340
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %dest11, align 8, !dbg !5340
  %27 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5341
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %27, i64 0, !dbg !5341
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !5341
  %28 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !5341
  %x_exit_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %28, i32 0, i32 1, !dbg !5341
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr14, align 8, !dbg !5341
  %cmp15 = icmp eq %struct.basic_block_def* %26, %29, !dbg !5342
  br i1 %cmp15, label %land.lhs.true17, label %if.end60, !dbg !5343

land.lhs.true17:                                  ; preds = %land.lhs.true8
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5344
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 1, !dbg !5345
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !5345
  %call19 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %31), !dbg !5346
  store %union.gimple_statement_d* %call19, %union.gimple_statement_d** %last, align 8, !dbg !5347
  %cmp20 = icmp ne %union.gimple_statement_d* %call19, null, !dbg !5348
  br i1 %cmp20, label %land.lhs.true22, label %if.end60, !dbg !5349

land.lhs.true22:                                  ; preds = %land.lhs.true17
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !5350
  %call23 = call i32 @gimple_code(%union.gimple_statement_d* %32), !dbg !5351
  %cmp24 = icmp eq i32 %call23, 9, !dbg !5352
  br i1 %cmp24, label %if.then, label %if.end60, !dbg !5353

if.then:                                          ; preds = %land.lhs.true22
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1, metadata !5354, metadata !DIExpression()), !dbg !5356
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei1, metadata !5357, metadata !DIExpression()), !dbg !5358
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5359
  %call26 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %33), !dbg !5361
  %tobool27 = icmp ne i8 %call26, 0, !dbg !5361
  br i1 %tobool27, label %if.then28, label %if.else, !dbg !5362

if.then28:                                        ; preds = %if.then
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5363
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 0, !dbg !5363
  %call30 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5363
  %35 = bitcast %struct.edge_iterator* %tmp29 to { i32, %struct.VEC_edge_gc** }*, !dbg !5363
  %36 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 0, !dbg !5363
  %37 = extractvalue { i32, %struct.VEC_edge_gc** } %call30, 0, !dbg !5363
  store i32 %37, i32* %36, align 8, !dbg !5363
  %38 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %35, i32 0, i32 1, !dbg !5363
  %39 = extractvalue { i32, %struct.VEC_edge_gc** } %call30, 1, !dbg !5363
  store %struct.VEC_edge_gc** %39, %struct.VEC_edge_gc*** %38, align 8, !dbg !5363
  %40 = bitcast %struct.edge_iterator* %ei1 to i8*, !dbg !5363
  %41 = bitcast %struct.edge_iterator* %tmp29 to i8*, !dbg !5363
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false), !dbg !5363
  br label %for.cond31, !dbg !5363

for.cond31:                                       ; preds = %for.inc, %if.then28
  %42 = bitcast %struct.edge_iterator* %ei1 to { i32, %struct.VEC_edge_gc** }*, !dbg !5366
  %43 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 0, !dbg !5366
  %44 = load i32, i32* %43, align 8, !dbg !5366
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %42, i32 0, i32 1, !dbg !5366
  %46 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %45, align 8, !dbg !5366
  %call32 = call zeroext i8 @ei_cond(i32 %44, %struct.VEC_edge_gc** %46, %struct.edge_def** %e1), !dbg !5366
  %tobool33 = icmp ne i8 %call32, 0, !dbg !5363
  br i1 %tobool33, label %for.body34, label %for.end, !dbg !5363

for.body34:                                       ; preds = %for.cond31
  %47 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5368
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !5370
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5370
  %call35 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %48, i32 26), !dbg !5371
  %tobool36 = icmp ne i8 %call35, 0, !dbg !5371
  br i1 %tobool36, label %if.end, label %land.lhs.true37, !dbg !5372

land.lhs.true37:                                  ; preds = %for.body34
  %49 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5373
  %src38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 0, !dbg !5374
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %src38, align 8, !dbg !5374
  %call39 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %50, i32 24), !dbg !5375
  %tobool40 = icmp ne i8 %call39, 0, !dbg !5375
  br i1 %tobool40, label %if.end, label %land.lhs.true41, !dbg !5376

land.lhs.true41:                                  ; preds = %land.lhs.true37
  %51 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5377
  %src42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 0, !dbg !5378
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %src42, align 8, !dbg !5378
  %call43 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %52, i32 25), !dbg !5379
  %tobool44 = icmp ne i8 %call43, 0, !dbg !5379
  br i1 %tobool44, label %if.end, label %if.then45, !dbg !5380

if.then45:                                        ; preds = %land.lhs.true41
  %53 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5381
  call void @predict_edge_def(%struct.edge_def* %53, i32 22, i32 0), !dbg !5382
  br label %if.end, !dbg !5382

if.end:                                           ; preds = %if.then45, %land.lhs.true41, %land.lhs.true37, %for.body34
  br label %for.inc, !dbg !5383

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei1), !dbg !5366
  br label %for.cond31, !dbg !5366, !llvm.loop !5384

for.end:                                          ; preds = %for.cond31
  br label %if.end59, !dbg !5386

if.else:                                          ; preds = %if.then
  %54 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5387
  %src46 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 0, !dbg !5389
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src46, align 8, !dbg !5389
  %call47 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %55, i32 26), !dbg !5390
  %tobool48 = icmp ne i8 %call47, 0, !dbg !5390
  br i1 %tobool48, label %if.end58, label %land.lhs.true49, !dbg !5391

land.lhs.true49:                                  ; preds = %if.else
  %56 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5392
  %src50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 0, !dbg !5393
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %src50, align 8, !dbg !5393
  %call51 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %57, i32 24), !dbg !5394
  %tobool52 = icmp ne i8 %call51, 0, !dbg !5394
  br i1 %tobool52, label %if.end58, label %land.lhs.true53, !dbg !5395

land.lhs.true53:                                  ; preds = %land.lhs.true49
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5396
  %src54 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 0, !dbg !5397
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %src54, align 8, !dbg !5397
  %call55 = call zeroext i8 @predicted_by_p(%struct.basic_block_def* %59, i32 25), !dbg !5398
  %tobool56 = icmp ne i8 %call55, 0, !dbg !5398
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !5399

if.then57:                                        ; preds = %land.lhs.true53
  %60 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5400
  call void @predict_edge_def(%struct.edge_def* %60, i32 22, i32 0), !dbg !5401
  br label %if.end58, !dbg !5401

if.end58:                                         ; preds = %if.then57, %land.lhs.true53, %land.lhs.true49, %if.else
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %for.end
  br label %if.end60, !dbg !5402

if.end60:                                         ; preds = %if.end59, %land.lhs.true22, %land.lhs.true17, %land.lhs.true8, %land.lhs.true4, %land.lhs.true, %for.body
  %61 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5403
  %dest61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 1, !dbg !5405
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %dest61, align 8, !dbg !5405
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5406
  %add.ptr62 = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, !dbg !5406
  %cfg63 = getelementptr inbounds %struct.function, %struct.function* %add.ptr62, i32 0, i32 1, !dbg !5406
  %64 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg63, align 8, !dbg !5406
  %x_exit_block_ptr64 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %64, i32 0, i32 1, !dbg !5406
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr64, align 8, !dbg !5406
  %cmp65 = icmp ne %struct.basic_block_def* %62, %65, !dbg !5407
  br i1 %cmp65, label %land.lhs.true67, label %if.end101, !dbg !5408

land.lhs.true67:                                  ; preds = %if.end60
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5409
  %dest68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 1, !dbg !5410
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %dest68, align 8, !dbg !5410
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5411
  %cmp69 = icmp ne %struct.basic_block_def* %67, %68, !dbg !5412
  br i1 %cmp69, label %land.lhs.true71, label %if.end101, !dbg !5413

land.lhs.true71:                                  ; preds = %land.lhs.true67
  %69 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5414
  %dest72 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 1, !dbg !5415
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %dest72, align 8, !dbg !5415
  %71 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5416
  %src73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 0, !dbg !5417
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %src73, align 8, !dbg !5417
  %call74 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %70, %struct.basic_block_def* %72), !dbg !5418
  %conv75 = zext i8 %call74 to i32, !dbg !5418
  %tobool76 = icmp ne i32 %conv75, 0, !dbg !5418
  br i1 %tobool76, label %land.lhs.true77, label %if.end101, !dbg !5419

land.lhs.true77:                                  ; preds = %land.lhs.true71
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5420
  %src78 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !5421
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src78, align 8, !dbg !5421
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5422
  %dest79 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 1, !dbg !5423
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %dest79, align 8, !dbg !5423
  %call80 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %74, %struct.basic_block_def* %76), !dbg !5424
  %tobool81 = icmp ne i8 %call80, 0, !dbg !5424
  br i1 %tobool81, label %if.end101, label %if.then82, !dbg !5425

if.then82:                                        ; preds = %land.lhs.true77
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bi, metadata !5426, metadata !DIExpression()), !dbg !5428
  %77 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5429
  %dest84 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 1, !dbg !5431
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %dest84, align 8, !dbg !5431
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp83, %struct.basic_block_def* %78), !dbg !5432
  %79 = bitcast %struct.gimple_stmt_iterator* %bi to i8*, !dbg !5432
  %80 = bitcast %struct.gimple_stmt_iterator* %tmp83 to i8*, !dbg !5432
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 24, i1 false), !dbg !5432
  br label %for.cond85, !dbg !5433

for.cond85:                                       ; preds = %for.inc99, %if.then82
  %call86 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bi), !dbg !5434
  %tobool87 = icmp ne i8 %call86, 0, !dbg !5436
  %lnot = xor i1 %tobool87, true, !dbg !5436
  br i1 %lnot, label %for.body88, label %for.end100, !dbg !5437

for.body88:                                       ; preds = %for.cond85
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5438, metadata !DIExpression()), !dbg !5440
  %call89 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bi), !dbg !5441
  store %union.gimple_statement_d* %call89, %union.gimple_statement_d** %stmt, align 8, !dbg !5440
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5442
  %call90 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %81), !dbg !5444
  %conv91 = zext i8 %call90 to i32, !dbg !5444
  %tobool92 = icmp ne i32 %conv91, 0, !dbg !5444
  br i1 %tobool92, label %land.lhs.true93, label %if.end98, !dbg !5445

land.lhs.true93:                                  ; preds = %for.body88
  %82 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5446
  %call94 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %82), !dbg !5447
  %conv95 = zext i8 %call94 to i32, !dbg !5447
  %tobool96 = icmp ne i32 %conv95, 0, !dbg !5447
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !5448

if.then97:                                        ; preds = %land.lhs.true93
  %83 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5449
  call void @predict_edge_def(%struct.edge_def* %83, i32 21, i32 0), !dbg !5451
  br label %for.end100, !dbg !5452

if.end98:                                         ; preds = %land.lhs.true93, %for.body88
  br label %for.inc99, !dbg !5453

for.inc99:                                        ; preds = %if.end98
  call void @gsi_next(%struct.gimple_stmt_iterator* %bi), !dbg !5454
  br label %for.cond85, !dbg !5455, !llvm.loop !5456

for.end100:                                       ; preds = %if.then97, %for.cond85
  br label %if.end101, !dbg !5458

if.end101:                                        ; preds = %for.end100, %land.lhs.true77, %land.lhs.true71, %land.lhs.true67, %if.end60
  br label %for.inc102, !dbg !5459

for.inc102:                                       ; preds = %if.end101
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5318
  br label %for.cond, !dbg !5318, !llvm.loop !5460

for.end103:                                       ; preds = %for.cond
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5462
  call void @tree_predict_by_opcode(%struct.basic_block_def* %84), !dbg !5463
  ret void, !dbg !5464
}

; Function Attrs: noinline nounwind uwtable
define internal void @combine_predictions_for_bb(%struct.basic_block_def* %bb) #0 !dbg !5465 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %best_probability = alloca i32, align 4
  %best_predictor = alloca i32, align 4
  %combined_probability = alloca i32, align 4
  %d = alloca i32, align 4
  %first_match = alloca i8, align 1
  %found = alloca i8, align 1
  %pred = alloca %struct.edge_prediction*, align 8
  %nedges = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %first = alloca %struct.edge_def*, align 8
  %second = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %preds = alloca i8**, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %predictor = alloca i32, align 4
  %probability = alloca i32, align 4
  %pred2 = alloca %struct.edge_prediction*, align 8
  %prob = alloca i32, align 4
  %probability2 = alloca i32, align 4
  %predictor113 = alloca i32, align 4
  %probability115 = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5466, metadata !DIExpression()), !dbg !5467
  call void @llvm.dbg.declare(metadata i32* %best_probability, metadata !5468, metadata !DIExpression()), !dbg !5469
  store i32 5000, i32* %best_probability, align 4, !dbg !5469
  call void @llvm.dbg.declare(metadata i32* %best_predictor, metadata !5470, metadata !DIExpression()), !dbg !5471
  store i32 28, i32* %best_predictor, align 4, !dbg !5471
  call void @llvm.dbg.declare(metadata i32* %combined_probability, metadata !5472, metadata !DIExpression()), !dbg !5473
  store i32 5000, i32* %combined_probability, align 4, !dbg !5473
  call void @llvm.dbg.declare(metadata i32* %d, metadata !5474, metadata !DIExpression()), !dbg !5475
  call void @llvm.dbg.declare(metadata i8* %first_match, metadata !5476, metadata !DIExpression()), !dbg !5477
  store i8 0, i8* %first_match, align 1, !dbg !5477
  call void @llvm.dbg.declare(metadata i8* %found, metadata !5478, metadata !DIExpression()), !dbg !5479
  store i8 0, i8* %found, align 1, !dbg !5479
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %pred, metadata !5480, metadata !DIExpression()), !dbg !5481
  call void @llvm.dbg.declare(metadata i32* %nedges, metadata !5482, metadata !DIExpression()), !dbg !5483
  store i32 0, i32* %nedges, align 4, !dbg !5483
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5484, metadata !DIExpression()), !dbg !5485
  call void @llvm.dbg.declare(metadata %struct.edge_def** %first, metadata !5486, metadata !DIExpression()), !dbg !5487
  store %struct.edge_def* null, %struct.edge_def** %first, align 8, !dbg !5487
  call void @llvm.dbg.declare(metadata %struct.edge_def** %second, metadata !5488, metadata !DIExpression()), !dbg !5489
  store %struct.edge_def* null, %struct.edge_def** %second, align 8, !dbg !5489
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5490, metadata !DIExpression()), !dbg !5491
  call void @llvm.dbg.declare(metadata i8*** %preds, metadata !5492, metadata !DIExpression()), !dbg !5493
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5494
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5494
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5494
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5494
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !5494
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5494
  store i32 %3, i32* %2, align 8, !dbg !5494
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !5494
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5494
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !5494
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5494
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5494
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5494
  br label %for.cond, !dbg !5494

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5496
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5496
  %10 = load i32, i32* %9, align 8, !dbg !5496
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5496
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5496
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !5496
  %tobool = icmp ne i8 %call1, 0, !dbg !5494
  br i1 %tobool, label %for.body, label %for.end, !dbg !5494

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5498
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !5500
  %14 = load i32, i32* %flags, align 8, !dbg !5500
  %and = and i32 %14, 24, !dbg !5501
  %tobool2 = icmp ne i32 %and, 0, !dbg !5501
  br i1 %tobool2, label %if.end9, label %if.then, !dbg !5502

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %nedges, align 4, !dbg !5503
  %inc = add nsw i32 %15, 1, !dbg !5503
  store i32 %inc, i32* %nedges, align 4, !dbg !5503
  %16 = load %struct.edge_def*, %struct.edge_def** %first, align 8, !dbg !5505
  %tobool3 = icmp ne %struct.edge_def* %16, null, !dbg !5505
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !5507

land.lhs.true:                                    ; preds = %if.then
  %17 = load %struct.edge_def*, %struct.edge_def** %second, align 8, !dbg !5508
  %tobool4 = icmp ne %struct.edge_def* %17, null, !dbg !5508
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !5509

if.then5:                                         ; preds = %land.lhs.true
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5510
  store %struct.edge_def* %18, %struct.edge_def** %second, align 8, !dbg !5511
  br label %if.end, !dbg !5512

if.end:                                           ; preds = %if.then5, %land.lhs.true, %if.then
  %19 = load %struct.edge_def*, %struct.edge_def** %first, align 8, !dbg !5513
  %tobool6 = icmp ne %struct.edge_def* %19, null, !dbg !5513
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !5515

if.then7:                                         ; preds = %if.end
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5516
  store %struct.edge_def* %20, %struct.edge_def** %first, align 8, !dbg !5517
  br label %if.end8, !dbg !5518

if.end8:                                          ; preds = %if.then7, %if.end
  br label %if.end9, !dbg !5519

if.end9:                                          ; preds = %if.end8, %for.body
  br label %for.inc, !dbg !5520

for.inc:                                          ; preds = %if.end9
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5496
  br label %for.cond, !dbg !5496, !llvm.loop !5521

for.end:                                          ; preds = %for.cond
  %21 = load i32, i32* %nedges, align 4, !dbg !5523
  %cmp = icmp ne i32 %21, 2, !dbg !5525
  br i1 %cmp, label %if.then10, label %if.end18, !dbg !5526

if.then10:                                        ; preds = %for.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5527
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 8, !dbg !5530
  %23 = load i64, i64* %count, align 8, !dbg !5530
  %tobool11 = icmp ne i64 %23, 0, !dbg !5527
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !5531

if.then12:                                        ; preds = %if.then10
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5532
  call void @set_even_probabilities(%struct.basic_block_def* %24), !dbg !5533
  br label %if.end13, !dbg !5533

if.end13:                                         ; preds = %if.then12, %if.then10
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5534
  call void @clear_bb_predictions(%struct.basic_block_def* %25), !dbg !5535
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5536
  %tobool14 = icmp ne %struct._IO_FILE* %26, null, !dbg !5536
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5538

if.then15:                                        ; preds = %if.end13
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5539
  %28 = load i32, i32* %nedges, align 4, !dbg !5540
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5541
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 9, !dbg !5542
  %30 = load i32, i32* %index, align 8, !dbg !5542
  %call16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.44, i64 0, i64 0), i32 %28, i32 %30), !dbg !5543
  br label %if.end17, !dbg !5543

if.end17:                                         ; preds = %if.then15, %if.end13
  br label %if.end140, !dbg !5544

if.end18:                                         ; preds = %for.end
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5545
  %tobool19 = icmp ne %struct._IO_FILE* %31, null, !dbg !5545
  br i1 %tobool19, label %if.then20, label %if.end23, !dbg !5547

if.then20:                                        ; preds = %if.end18
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5548
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5549
  %index21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 9, !dbg !5550
  %34 = load i32, i32* %index21, align 8, !dbg !5550
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.45, i64 0, i64 0), i32 %34), !dbg !5551
  br label %if.end23, !dbg !5551

if.end23:                                         ; preds = %if.then20, %if.end18
  %35 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !5552
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5553
  %37 = bitcast %struct.basic_block_def* %36 to i8*, !dbg !5553
  %call24 = call i8** @pointer_map_contains(%struct.pointer_map_t* %35, i8* %37), !dbg !5554
  store i8** %call24, i8*** %preds, align 8, !dbg !5555
  %38 = load i8**, i8*** %preds, align 8, !dbg !5556
  %tobool25 = icmp ne i8** %38, null, !dbg !5556
  br i1 %tobool25, label %if.then26, label %if.end93, !dbg !5558

if.then26:                                        ; preds = %if.end23
  %39 = load i8**, i8*** %preds, align 8, !dbg !5559
  %40 = load i8*, i8** %39, align 8, !dbg !5562
  %41 = bitcast i8* %40 to %struct.edge_prediction*, !dbg !5563
  store %struct.edge_prediction* %41, %struct.edge_prediction** %pred, align 8, !dbg !5564
  br label %for.cond27, !dbg !5565

for.cond27:                                       ; preds = %for.inc90, %if.then26
  %42 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5566
  %tobool28 = icmp ne %struct.edge_prediction* %42, null, !dbg !5568
  br i1 %tobool28, label %for.body29, label %for.end92, !dbg !5568

for.body29:                                       ; preds = %for.cond27
  call void @llvm.dbg.declare(metadata i32* %predictor, metadata !5569, metadata !DIExpression()), !dbg !5571
  %43 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5572
  %ep_predictor = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %43, i32 0, i32 2, !dbg !5573
  %44 = load i32, i32* %ep_predictor, align 8, !dbg !5573
  store i32 %44, i32* %predictor, align 4, !dbg !5571
  call void @llvm.dbg.declare(metadata i32* %probability, metadata !5574, metadata !DIExpression()), !dbg !5575
  %45 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5576
  %ep_probability = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %45, i32 0, i32 3, !dbg !5577
  %46 = load i32, i32* %ep_probability, align 4, !dbg !5577
  store i32 %46, i32* %probability, align 4, !dbg !5575
  %47 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5578
  %ep_edge = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %47, i32 0, i32 1, !dbg !5580
  %48 = load %struct.edge_def*, %struct.edge_def** %ep_edge, align 8, !dbg !5580
  %49 = load %struct.edge_def*, %struct.edge_def** %first, align 8, !dbg !5581
  %cmp30 = icmp ne %struct.edge_def* %48, %49, !dbg !5582
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !5583

if.then31:                                        ; preds = %for.body29
  %50 = load i32, i32* %probability, align 4, !dbg !5584
  %sub = sub nsw i32 10000, %50, !dbg !5585
  store i32 %sub, i32* %probability, align 4, !dbg !5586
  br label %if.end32, !dbg !5587

if.end32:                                         ; preds = %if.then31, %for.body29
  store i8 1, i8* %found, align 1, !dbg !5588
  %51 = load i32, i32* %best_predictor, align 4, !dbg !5589
  %52 = load i32, i32* %predictor, align 4, !dbg !5591
  %cmp33 = icmp ugt i32 %51, %52, !dbg !5592
  br i1 %cmp33, label %if.then34, label %if.end75, !dbg !5593

if.then34:                                        ; preds = %if.end32
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %pred2, metadata !5594, metadata !DIExpression()), !dbg !5596
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !5597, metadata !DIExpression()), !dbg !5598
  %53 = load i32, i32* %probability, align 4, !dbg !5599
  store i32 %53, i32* %prob, align 4, !dbg !5598
  %54 = load i8**, i8*** %preds, align 8, !dbg !5600
  %55 = load i8*, i8** %54, align 8, !dbg !5602
  %56 = bitcast i8* %55 to %struct.edge_prediction*, !dbg !5603
  store %struct.edge_prediction* %56, %struct.edge_prediction** %pred2, align 8, !dbg !5604
  br label %for.cond35, !dbg !5605

for.cond35:                                       ; preds = %for.inc70, %if.then34
  %57 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5606
  %tobool36 = icmp ne %struct.edge_prediction* %57, null, !dbg !5608
  br i1 %tobool36, label %for.body37, label %for.end71, !dbg !5608

for.body37:                                       ; preds = %for.cond35
  %58 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5609
  %59 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5611
  %cmp38 = icmp ne %struct.edge_prediction* %58, %59, !dbg !5612
  br i1 %cmp38, label %land.lhs.true39, label %if.end69, !dbg !5613

land.lhs.true39:                                  ; preds = %for.body37
  %60 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5614
  %ep_predictor40 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %60, i32 0, i32 2, !dbg !5615
  %61 = load i32, i32* %ep_predictor40, align 8, !dbg !5615
  %62 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5616
  %ep_predictor41 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %62, i32 0, i32 2, !dbg !5617
  %63 = load i32, i32* %ep_predictor41, align 8, !dbg !5617
  %cmp42 = icmp eq i32 %61, %63, !dbg !5618
  br i1 %cmp42, label %if.then43, label %if.end69, !dbg !5619

if.then43:                                        ; preds = %land.lhs.true39
  call void @llvm.dbg.declare(metadata i32* %probability2, metadata !5620, metadata !DIExpression()), !dbg !5622
  %64 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5623
  %ep_probability44 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %64, i32 0, i32 3, !dbg !5624
  %65 = load i32, i32* %ep_probability44, align 4, !dbg !5624
  store i32 %65, i32* %probability2, align 4, !dbg !5622
  %66 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5625
  %ep_edge45 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %66, i32 0, i32 1, !dbg !5627
  %67 = load %struct.edge_def*, %struct.edge_def** %ep_edge45, align 8, !dbg !5627
  %68 = load %struct.edge_def*, %struct.edge_def** %first, align 8, !dbg !5628
  %cmp46 = icmp ne %struct.edge_def* %67, %68, !dbg !5629
  br i1 %cmp46, label %if.then47, label %if.end49, !dbg !5630

if.then47:                                        ; preds = %if.then43
  %69 = load i32, i32* %probability2, align 4, !dbg !5631
  %sub48 = sub nsw i32 10000, %69, !dbg !5632
  store i32 %sub48, i32* %probability2, align 4, !dbg !5633
  br label %if.end49, !dbg !5634

if.end49:                                         ; preds = %if.then47, %if.then43
  %70 = load i32, i32* %probability, align 4, !dbg !5635
  %cmp50 = icmp slt i32 %70, 5000, !dbg !5637
  %conv = zext i1 %cmp50 to i32, !dbg !5637
  %71 = load i32, i32* %probability2, align 4, !dbg !5638
  %cmp51 = icmp slt i32 %71, 5000, !dbg !5639
  %conv52 = zext i1 %cmp51 to i32, !dbg !5639
  %cmp53 = icmp ne i32 %conv, %conv52, !dbg !5640
  br i1 %cmp53, label %if.then55, label %if.end56, !dbg !5641

if.then55:                                        ; preds = %if.end49
  br label %for.end71, !dbg !5642

if.end56:                                         ; preds = %if.end49
  %72 = load i32, i32* %probability, align 4, !dbg !5643
  %cmp57 = icmp sge i32 %72, 5000, !dbg !5645
  br i1 %cmp57, label %land.lhs.true59, label %lor.lhs.false, !dbg !5646

land.lhs.true59:                                  ; preds = %if.end56
  %73 = load i32, i32* %probability2, align 4, !dbg !5647
  %74 = load i32, i32* %probability, align 4, !dbg !5648
  %cmp60 = icmp sgt i32 %73, %74, !dbg !5649
  br i1 %cmp60, label %if.then67, label %lor.lhs.false, !dbg !5650

lor.lhs.false:                                    ; preds = %land.lhs.true59, %if.end56
  %75 = load i32, i32* %probability, align 4, !dbg !5651
  %cmp62 = icmp sle i32 %75, 5000, !dbg !5652
  br i1 %cmp62, label %land.lhs.true64, label %if.end68, !dbg !5653

land.lhs.true64:                                  ; preds = %lor.lhs.false
  %76 = load i32, i32* %probability2, align 4, !dbg !5654
  %77 = load i32, i32* %probability, align 4, !dbg !5655
  %cmp65 = icmp slt i32 %76, %77, !dbg !5656
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !5657

if.then67:                                        ; preds = %land.lhs.true64, %land.lhs.true59
  %78 = load i32, i32* %probability2, align 4, !dbg !5658
  store i32 %78, i32* %prob, align 4, !dbg !5659
  br label %if.end68, !dbg !5660

if.end68:                                         ; preds = %if.then67, %land.lhs.true64, %lor.lhs.false
  br label %if.end69, !dbg !5661

if.end69:                                         ; preds = %if.end68, %land.lhs.true39, %for.body37
  br label %for.inc70, !dbg !5617

for.inc70:                                        ; preds = %if.end69
  %79 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5662
  %ep_next = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %79, i32 0, i32 0, !dbg !5663
  %80 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next, align 8, !dbg !5663
  store %struct.edge_prediction* %80, %struct.edge_prediction** %pred2, align 8, !dbg !5664
  br label %for.cond35, !dbg !5665, !llvm.loop !5666

for.end71:                                        ; preds = %if.then55, %for.cond35
  %81 = load %struct.edge_prediction*, %struct.edge_prediction** %pred2, align 8, !dbg !5668
  %tobool72 = icmp ne %struct.edge_prediction* %81, null, !dbg !5668
  br i1 %tobool72, label %if.end74, label %if.then73, !dbg !5670

if.then73:                                        ; preds = %for.end71
  %82 = load i32, i32* %prob, align 4, !dbg !5671
  store i32 %82, i32* %best_probability, align 4, !dbg !5672
  %83 = load i32, i32* %predictor, align 4, !dbg !5673
  store i32 %83, i32* %best_predictor, align 4, !dbg !5674
  br label %if.end74, !dbg !5675

if.end74:                                         ; preds = %if.then73, %for.end71
  br label %if.end75, !dbg !5676

if.end75:                                         ; preds = %if.end74, %if.end32
  %84 = load i32, i32* %combined_probability, align 4, !dbg !5677
  %85 = load i32, i32* %probability, align 4, !dbg !5678
  %mul = mul nsw i32 %84, %85, !dbg !5679
  %86 = load i32, i32* %combined_probability, align 4, !dbg !5680
  %sub76 = sub nsw i32 10000, %86, !dbg !5681
  %87 = load i32, i32* %probability, align 4, !dbg !5682
  %sub77 = sub nsw i32 10000, %87, !dbg !5683
  %mul78 = mul nsw i32 %sub76, %sub77, !dbg !5684
  %add = add nsw i32 %mul, %mul78, !dbg !5685
  store i32 %add, i32* %d, align 4, !dbg !5686
  %88 = load i32, i32* %d, align 4, !dbg !5687
  %cmp79 = icmp eq i32 %88, 0, !dbg !5689
  br i1 %cmp79, label %if.then81, label %if.else, !dbg !5690

if.then81:                                        ; preds = %if.end75
  store i32 5000, i32* %combined_probability, align 4, !dbg !5691
  br label %if.end89, !dbg !5692

if.else:                                          ; preds = %if.end75
  %89 = load i32, i32* %combined_probability, align 4, !dbg !5693
  %conv82 = sitofp i32 %89 to double, !dbg !5694
  %90 = load i32, i32* %probability, align 4, !dbg !5695
  %conv83 = sitofp i32 %90 to double, !dbg !5695
  %mul84 = fmul double %conv82, %conv83, !dbg !5696
  %mul85 = fmul double %mul84, 1.000000e+04, !dbg !5697
  %91 = load i32, i32* %d, align 4, !dbg !5698
  %conv86 = sitofp i32 %91 to double, !dbg !5698
  %div = fdiv double %mul85, %conv86, !dbg !5699
  %add87 = fadd double %div, 5.000000e-01, !dbg !5700
  %conv88 = fptosi double %add87 to i32, !dbg !5701
  store i32 %conv88, i32* %combined_probability, align 4, !dbg !5702
  br label %if.end89

if.end89:                                         ; preds = %if.else, %if.then81
  br label %for.inc90, !dbg !5703

for.inc90:                                        ; preds = %if.end89
  %92 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5704
  %ep_next91 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %92, i32 0, i32 0, !dbg !5705
  %93 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next91, align 8, !dbg !5705
  store %struct.edge_prediction* %93, %struct.edge_prediction** %pred, align 8, !dbg !5706
  br label %for.cond27, !dbg !5707, !llvm.loop !5708

for.end92:                                        ; preds = %for.cond27
  br label %if.end93, !dbg !5710

if.end93:                                         ; preds = %for.end92, %if.end23
  %94 = load i32, i32* %best_predictor, align 4, !dbg !5711
  %idxprom = zext i32 %94 to i64, !dbg !5713
  %arrayidx = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !5713
  %flags94 = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx, i32 0, i32 2, !dbg !5714
  %95 = load i32, i32* %flags94, align 4, !dbg !5714
  %and95 = and i32 %95, 1, !dbg !5715
  %tobool96 = icmp ne i32 %and95, 0, !dbg !5715
  br i1 %tobool96, label %if.then97, label %if.end98, !dbg !5716

if.then97:                                        ; preds = %if.end93
  store i8 1, i8* %first_match, align 1, !dbg !5717
  br label %if.end98, !dbg !5718

if.end98:                                         ; preds = %if.then97, %if.end93
  %96 = load i8, i8* %found, align 1, !dbg !5719
  %tobool99 = icmp ne i8 %96, 0, !dbg !5719
  br i1 %tobool99, label %if.else101, label %if.then100, !dbg !5721

if.then100:                                       ; preds = %if.end98
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5722
  %98 = load i32, i32* %combined_probability, align 4, !dbg !5723
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5724
  call void @dump_prediction(%struct._IO_FILE* %97, i32 3, i32 %98, %struct.basic_block_def* %99, i32 1), !dbg !5725
  br label %if.end104, !dbg !5725

if.else101:                                       ; preds = %if.end98
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5726
  %101 = load i32, i32* %combined_probability, align 4, !dbg !5728
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5729
  %103 = load i8, i8* %first_match, align 1, !dbg !5730
  %tobool102 = icmp ne i8 %103, 0, !dbg !5731
  %lnot = xor i1 %tobool102, true, !dbg !5731
  %lnot.ext = zext i1 %lnot to i32, !dbg !5731
  call void @dump_prediction(%struct._IO_FILE* %100, i32 1, i32 %101, %struct.basic_block_def* %102, i32 %lnot.ext), !dbg !5732
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5733
  %105 = load i32, i32* %best_probability, align 4, !dbg !5734
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5735
  %107 = load i8, i8* %first_match, align 1, !dbg !5736
  %conv103 = zext i8 %107 to i32, !dbg !5736
  call void @dump_prediction(%struct._IO_FILE* %104, i32 2, i32 %105, %struct.basic_block_def* %106, i32 %conv103), !dbg !5737
  br label %if.end104

if.end104:                                        ; preds = %if.else101, %if.then100
  %108 = load i8, i8* %first_match, align 1, !dbg !5738
  %tobool105 = icmp ne i8 %108, 0, !dbg !5738
  br i1 %tobool105, label %if.then106, label %if.end107, !dbg !5740

if.then106:                                       ; preds = %if.end104
  %109 = load i32, i32* %best_probability, align 4, !dbg !5741
  store i32 %109, i32* %combined_probability, align 4, !dbg !5742
  br label %if.end107, !dbg !5743

if.end107:                                        ; preds = %if.then106, %if.end104
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5744
  %111 = load i32, i32* %combined_probability, align 4, !dbg !5745
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5746
  call void @dump_prediction(%struct._IO_FILE* %110, i32 0, i32 %111, %struct.basic_block_def* %112, i32 1), !dbg !5747
  %113 = load i8**, i8*** %preds, align 8, !dbg !5748
  %tobool108 = icmp ne i8** %113, null, !dbg !5748
  br i1 %tobool108, label %if.then109, label %if.end133, !dbg !5750

if.then109:                                       ; preds = %if.end107
  %114 = load i8**, i8*** %preds, align 8, !dbg !5751
  %115 = load i8*, i8** %114, align 8, !dbg !5754
  %116 = bitcast i8* %115 to %struct.edge_prediction*, !dbg !5755
  store %struct.edge_prediction* %116, %struct.edge_prediction** %pred, align 8, !dbg !5756
  br label %for.cond110, !dbg !5757

for.cond110:                                      ; preds = %for.inc130, %if.then109
  %117 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5758
  %tobool111 = icmp ne %struct.edge_prediction* %117, null, !dbg !5760
  br i1 %tobool111, label %for.body112, label %for.end132, !dbg !5760

for.body112:                                      ; preds = %for.cond110
  call void @llvm.dbg.declare(metadata i32* %predictor113, metadata !5761, metadata !DIExpression()), !dbg !5763
  %118 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5764
  %ep_predictor114 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %118, i32 0, i32 2, !dbg !5765
  %119 = load i32, i32* %ep_predictor114, align 8, !dbg !5765
  store i32 %119, i32* %predictor113, align 4, !dbg !5763
  call void @llvm.dbg.declare(metadata i32* %probability115, metadata !5766, metadata !DIExpression()), !dbg !5767
  %120 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5768
  %ep_probability116 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %120, i32 0, i32 3, !dbg !5769
  %121 = load i32, i32* %ep_probability116, align 4, !dbg !5769
  store i32 %121, i32* %probability115, align 4, !dbg !5767
  %122 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5770
  %ep_edge117 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %122, i32 0, i32 1, !dbg !5772
  %123 = load %struct.edge_def*, %struct.edge_def** %ep_edge117, align 8, !dbg !5772
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5773
  %succs118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 1, !dbg !5773
  %125 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs118, align 8, !dbg !5773
  %tobool119 = icmp ne %struct.VEC_edge_gc* %125, null, !dbg !5773
  br i1 %tobool119, label %cond.true, label %cond.false, !dbg !5773

cond.true:                                        ; preds = %for.body112
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5773
  %succs120 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %126, i32 0, i32 1, !dbg !5773
  %127 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs120, align 8, !dbg !5773
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %127, i32 0, i32 0, !dbg !5773
  br label %cond.end, !dbg !5773

cond.false:                                       ; preds = %for.body112
  br label %cond.end, !dbg !5773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5773
  %call121 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !5773
  %cmp122 = icmp ne %struct.edge_def* %123, %call121, !dbg !5774
  br i1 %cmp122, label %if.then124, label %if.end126, !dbg !5775

if.then124:                                       ; preds = %cond.end
  %128 = load i32, i32* %probability115, align 4, !dbg !5776
  %sub125 = sub nsw i32 10000, %128, !dbg !5777
  store i32 %sub125, i32* %probability115, align 4, !dbg !5778
  br label %if.end126, !dbg !5779

if.end126:                                        ; preds = %if.then124, %cond.end
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5780
  %130 = load i32, i32* %predictor113, align 4, !dbg !5781
  %131 = load i32, i32* %probability115, align 4, !dbg !5782
  %132 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5783
  %133 = load i8, i8* %first_match, align 1, !dbg !5784
  %tobool127 = icmp ne i8 %133, 0, !dbg !5784
  br i1 %tobool127, label %lor.rhs, label %lor.end, !dbg !5785

lor.rhs:                                          ; preds = %if.end126
  %134 = load i32, i32* %best_predictor, align 4, !dbg !5786
  %135 = load i32, i32* %predictor113, align 4, !dbg !5787
  %cmp128 = icmp eq i32 %134, %135, !dbg !5788
  br label %lor.end, !dbg !5785

lor.end:                                          ; preds = %lor.rhs, %if.end126
  %136 = phi i1 [ true, %if.end126 ], [ %cmp128, %lor.rhs ]
  %lor.ext = zext i1 %136 to i32, !dbg !5785
  call void @dump_prediction(%struct._IO_FILE* %129, i32 %130, i32 %131, %struct.basic_block_def* %132, i32 %lor.ext), !dbg !5789
  br label %for.inc130, !dbg !5790

for.inc130:                                       ; preds = %lor.end
  %137 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !5791
  %ep_next131 = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %137, i32 0, i32 0, !dbg !5792
  %138 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next131, align 8, !dbg !5792
  store %struct.edge_prediction* %138, %struct.edge_prediction** %pred, align 8, !dbg !5793
  br label %for.cond110, !dbg !5794, !llvm.loop !5795

for.end132:                                       ; preds = %for.cond110
  br label %if.end133, !dbg !5797

if.end133:                                        ; preds = %for.end132, %if.end107
  %139 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5798
  call void @clear_bb_predictions(%struct.basic_block_def* %139), !dbg !5799
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5800
  %count134 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %140, i32 0, i32 8, !dbg !5802
  %141 = load i64, i64* %count134, align 8, !dbg !5802
  %tobool135 = icmp ne i64 %141, 0, !dbg !5800
  br i1 %tobool135, label %if.end140, label %if.then136, !dbg !5803

if.then136:                                       ; preds = %if.end133
  %142 = load i32, i32* %combined_probability, align 4, !dbg !5804
  %143 = load %struct.edge_def*, %struct.edge_def** %first, align 8, !dbg !5806
  %probability137 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %143, i32 0, i32 8, !dbg !5807
  store i32 %142, i32* %probability137, align 4, !dbg !5808
  %144 = load i32, i32* %combined_probability, align 4, !dbg !5809
  %sub138 = sub nsw i32 10000, %144, !dbg !5810
  %145 = load %struct.edge_def*, %struct.edge_def** %second, align 8, !dbg !5811
  %probability139 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %145, i32 0, i32 8, !dbg !5812
  store i32 %sub138, i32* %probability139, align 4, !dbg !5813
  br label %if.end140, !dbg !5814

if.end140:                                        ; preds = %if.end17, %if.then136, %if.end133
  ret void, !dbg !5815
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @estimate_bb_frequencies() #0 !dbg !3486 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %freq_max = alloca %struct.sreal, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp61 = alloca %struct.sreal, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5816, metadata !DIExpression()), !dbg !5817
  call void @llvm.dbg.declare(metadata %struct.sreal* %freq_max, metadata !5818, metadata !DIExpression()), !dbg !5819
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5820
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5820
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5820
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5820
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 7, !dbg !5820
  %2 = load i32, i32* %x_profile_status, align 8, !dbg !5820
  %cmp = icmp ne i32 %2, 2, !dbg !5822
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5823

lor.lhs.false:                                    ; preds = %entry
  %call = call i32 @counts_to_freqs(), !dbg !5824
  %tobool = icmp ne i32 %call, 0, !dbg !5824
  br i1 %tobool, label %if.end72, label %if.then, !dbg !5825

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* @estimate_bb_frequencies.real_values_initialized, align 4, !dbg !5826
  %tobool1 = icmp ne i32 %3, 0, !dbg !5826
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !5829

if.then2:                                         ; preds = %if.then
  store i32 1, i32* @estimate_bb_frequencies.real_values_initialized, align 4, !dbg !5830
  %call3 = call %struct.sreal* @sreal_init(%struct.sreal* @real_zero, i64 0, i32 0), !dbg !5832
  %call4 = call %struct.sreal* @sreal_init(%struct.sreal* @real_one, i64 1, i32 0), !dbg !5833
  %call5 = call %struct.sreal* @sreal_init(%struct.sreal* @real_br_prob_base, i64 10000, i32 0), !dbg !5834
  %call6 = call %struct.sreal* @sreal_init(%struct.sreal* @real_bb_freq_max, i64 10000, i32 0), !dbg !5835
  %call7 = call %struct.sreal* @sreal_init(%struct.sreal* @real_one_half, i64 1, i32 -1), !dbg !5836
  %call8 = call %struct.sreal* @sreal_div(%struct.sreal* @real_inv_br_prob_base, %struct.sreal* @real_one, %struct.sreal* @real_br_prob_base), !dbg !5837
  %call9 = call %struct.sreal* @sreal_sub(%struct.sreal* @real_almost_one, %struct.sreal* @real_one, %struct.sreal* @real_inv_br_prob_base), !dbg !5838
  br label %if.end, !dbg !5839

if.end:                                           ; preds = %if.then2, %if.then
  %call10 = call zeroext i8 @mark_dfs_back_edges(), !dbg !5840
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5841
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !5841
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !5841
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5841
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !5841
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5841
  %call13 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %6), !dbg !5842
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call13, i32 0, i32 8, !dbg !5843
  store i32 10000, i32* %probability, align 4, !dbg !5844
  call void @alloc_aux_for_blocks(i32 32), !dbg !5845
  call void @alloc_aux_for_edges(i32 24), !dbg !5846
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5847
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5847
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !5847
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !5847
  %x_entry_block_ptr16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 0, !dbg !5847
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr16, align 8, !dbg !5847
  store %struct.basic_block_def* %9, %struct.basic_block_def** %bb, align 8, !dbg !5847
  br label %for.cond, !dbg !5847

for.cond:                                         ; preds = %for.inc30, %if.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5849
  %cmp17 = icmp ne %struct.basic_block_def* %10, null, !dbg !5849
  br i1 %cmp17, label %for.body, label %for.end31, !dbg !5847

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5851, metadata !DIExpression()), !dbg !5853
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5854, metadata !DIExpression()), !dbg !5855
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5856
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 1, !dbg !5856
  %call18 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5856
  %12 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5856
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !5856
  %14 = extractvalue { i32, %struct.VEC_edge_gc** } %call18, 0, !dbg !5856
  store i32 %14, i32* %13, align 8, !dbg !5856
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !5856
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call18, 1, !dbg !5856
  store %struct.VEC_edge_gc** %16, %struct.VEC_edge_gc*** %15, align 8, !dbg !5856
  %17 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5856
  %18 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 16, i1 false), !dbg !5856
  br label %for.cond19, !dbg !5856

for.cond19:                                       ; preds = %for.inc, %for.body
  %19 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5858
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 0, !dbg !5858
  %21 = load i32, i32* %20, align 8, !dbg !5858
  %22 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %19, i32 0, i32 1, !dbg !5858
  %23 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %22, align 8, !dbg !5858
  %call20 = call zeroext i8 @ei_cond(i32 %21, %struct.VEC_edge_gc** %23, %struct.edge_def** %e), !dbg !5858
  %tobool21 = icmp ne i8 %call20, 0, !dbg !5856
  br i1 %tobool21, label %for.body22, label %for.end, !dbg !5856

for.body22:                                       ; preds = %for.cond19
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5860
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 3, !dbg !5860
  %25 = load i8*, i8** %aux, align 8, !dbg !5860
  %26 = bitcast i8* %25 to %struct.edge_info_def*, !dbg !5860
  %back_edge_prob = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %26, i32 0, i32 0, !dbg !5862
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5863
  %probability23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 8, !dbg !5864
  %28 = load i32, i32* %probability23, align 4, !dbg !5864
  %conv = sext i32 %28 to i64, !dbg !5863
  %call24 = call %struct.sreal* @sreal_init(%struct.sreal* %back_edge_prob, i64 %conv, i32 0), !dbg !5865
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5866
  %aux25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 3, !dbg !5866
  %30 = load i8*, i8** %aux25, align 8, !dbg !5866
  %31 = bitcast i8* %30 to %struct.edge_info_def*, !dbg !5866
  %back_edge_prob26 = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %31, i32 0, i32 0, !dbg !5867
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5868
  %aux27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 3, !dbg !5868
  %33 = load i8*, i8** %aux27, align 8, !dbg !5868
  %34 = bitcast i8* %33 to %struct.edge_info_def*, !dbg !5868
  %back_edge_prob28 = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %34, i32 0, i32 0, !dbg !5869
  %call29 = call %struct.sreal* @sreal_mul(%struct.sreal* %back_edge_prob26, %struct.sreal* %back_edge_prob28, %struct.sreal* @real_inv_br_prob_base), !dbg !5870
  br label %for.inc, !dbg !5871

for.inc:                                          ; preds = %for.body22
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5858
  br label %for.cond19, !dbg !5858, !llvm.loop !5872

for.end:                                          ; preds = %for.cond19
  br label %for.inc30, !dbg !5874

for.inc30:                                        ; preds = %for.end
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5849
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 6, !dbg !5849
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5849
  store %struct.basic_block_def* %36, %struct.basic_block_def** %bb, align 8, !dbg !5849
  br label %for.cond, !dbg !5849, !llvm.loop !5875

for.end31:                                        ; preds = %for.cond
  call void @estimate_loops(), !dbg !5877
  %37 = bitcast %struct.sreal* %freq_max to i8*, !dbg !5878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 bitcast (%struct.sreal* @real_zero to i8*), i64 16, i1 false), !dbg !5878
  %38 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5879
  %add.ptr32 = getelementptr inbounds %struct.function, %struct.function* %38, i64 0, !dbg !5879
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %add.ptr32, i32 0, i32 1, !dbg !5879
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !5879
  %x_entry_block_ptr34 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i32 0, i32 0, !dbg !5879
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr34, align 8, !dbg !5879
  %next_bb35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 6, !dbg !5879
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb35, align 8, !dbg !5879
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb, align 8, !dbg !5879
  br label %for.cond36, !dbg !5879

for.cond36:                                       ; preds = %for.inc50, %for.end31
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5881
  %43 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5881
  %add.ptr37 = getelementptr inbounds %struct.function, %struct.function* %43, i64 0, !dbg !5881
  %cfg38 = getelementptr inbounds %struct.function, %struct.function* %add.ptr37, i32 0, i32 1, !dbg !5881
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg38, align 8, !dbg !5881
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i32 0, i32 1, !dbg !5881
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5881
  %cmp39 = icmp ne %struct.basic_block_def* %42, %45, !dbg !5881
  br i1 %cmp39, label %for.body41, label %for.end52, !dbg !5879

for.body41:                                       ; preds = %for.cond36
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5883
  %aux42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 2, !dbg !5883
  %47 = load i8*, i8** %aux42, align 8, !dbg !5883
  %48 = bitcast i8* %47 to %struct.block_info_def*, !dbg !5883
  %frequency = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %48, i32 0, i32 0, !dbg !5885
  %call43 = call i32 @sreal_compare(%struct.sreal* %freq_max, %struct.sreal* %frequency), !dbg !5886
  %cmp44 = icmp slt i32 %call43, 0, !dbg !5887
  br i1 %cmp44, label %if.then46, label %if.end49, !dbg !5888

if.then46:                                        ; preds = %for.body41
  %49 = bitcast %struct.sreal* %freq_max to i8*, !dbg !5889
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5890
  %aux47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 2, !dbg !5890
  %51 = load i8*, i8** %aux47, align 8, !dbg !5890
  %52 = bitcast i8* %51 to %struct.block_info_def*, !dbg !5890
  %frequency48 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %52, i32 0, i32 0, !dbg !5891
  %53 = bitcast %struct.sreal* %frequency48 to i8*, !dbg !5889
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %53, i64 16, i1 false), !dbg !5889
  br label %if.end49, !dbg !5889

if.end49:                                         ; preds = %if.then46, %for.body41
  br label %for.inc50, !dbg !5892

for.inc50:                                        ; preds = %if.end49
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5881
  %next_bb51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 6, !dbg !5881
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb51, align 8, !dbg !5881
  store %struct.basic_block_def* %55, %struct.basic_block_def** %bb, align 8, !dbg !5881
  br label %for.cond36, !dbg !5881, !llvm.loop !5893

for.end52:                                        ; preds = %for.cond36
  %call53 = call %struct.sreal* @sreal_div(%struct.sreal* %freq_max, %struct.sreal* @real_bb_freq_max, %struct.sreal* %freq_max), !dbg !5895
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5896
  %add.ptr54 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !5896
  %cfg55 = getelementptr inbounds %struct.function, %struct.function* %add.ptr54, i32 0, i32 1, !dbg !5896
  %57 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg55, align 8, !dbg !5896
  %x_entry_block_ptr56 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %57, i32 0, i32 0, !dbg !5896
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr56, align 8, !dbg !5896
  store %struct.basic_block_def* %58, %struct.basic_block_def** %bb, align 8, !dbg !5896
  br label %for.cond57, !dbg !5896

for.cond57:                                       ; preds = %for.inc69, %for.end52
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5898
  %cmp58 = icmp ne %struct.basic_block_def* %59, null, !dbg !5898
  br i1 %cmp58, label %for.body60, label %for.end71, !dbg !5896

for.body60:                                       ; preds = %for.cond57
  call void @llvm.dbg.declare(metadata %struct.sreal* %tmp61, metadata !5900, metadata !DIExpression()), !dbg !5902
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5903
  %aux62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 2, !dbg !5903
  %61 = load i8*, i8** %aux62, align 8, !dbg !5903
  %62 = bitcast i8* %61 to %struct.block_info_def*, !dbg !5903
  %frequency63 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %62, i32 0, i32 0, !dbg !5904
  %call64 = call %struct.sreal* @sreal_mul(%struct.sreal* %tmp61, %struct.sreal* %frequency63, %struct.sreal* %freq_max), !dbg !5905
  %call65 = call %struct.sreal* @sreal_add(%struct.sreal* %tmp61, %struct.sreal* %tmp61, %struct.sreal* @real_one_half), !dbg !5906
  %call66 = call i64 @sreal_to_int(%struct.sreal* %tmp61), !dbg !5907
  %conv67 = trunc i64 %call66 to i32, !dbg !5907
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5908
  %frequency68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 11, !dbg !5909
  store i32 %conv67, i32* %frequency68, align 8, !dbg !5910
  br label %for.inc69, !dbg !5911

for.inc69:                                        ; preds = %for.body60
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5898
  %next_bb70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 6, !dbg !5898
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb70, align 8, !dbg !5898
  store %struct.basic_block_def* %65, %struct.basic_block_def** %bb, align 8, !dbg !5898
  br label %for.cond57, !dbg !5898, !llvm.loop !5912

for.end71:                                        ; preds = %for.cond57
  call void @free_aux_for_blocks(), !dbg !5914
  call void @free_aux_for_edges(), !dbg !5915
  br label %if.end72, !dbg !5916

if.end72:                                         ; preds = %for.end71, %lor.lhs.false
  call void @compute_function_frequency(), !dbg !5917
  %66 = load i32, i32* @flag_reorder_functions, align 4, !dbg !5918
  %tobool73 = icmp ne i32 %66, 0, !dbg !5918
  br i1 %tobool73, label %if.then74, label %if.end75, !dbg !5920

if.then74:                                        ; preds = %if.end72
  call void @choose_function_section(), !dbg !5921
  br label %if.end75, !dbg !5921

if.end75:                                         ; preds = %if.then74, %if.end72
  ret void, !dbg !5922
}

declare dso_local void @free_dominance_info(i32) #2

declare dso_local void @remove_fake_exit_edges() #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @counts_to_freqs() #0 !dbg !5923 {
entry:
  %count_max = alloca i64, align 8
  %true_count_max = alloca i64, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i64* %count_max, metadata !5926, metadata !DIExpression()), !dbg !5927
  call void @llvm.dbg.declare(metadata i64* %true_count_max, metadata !5928, metadata !DIExpression()), !dbg !5929
  store i64 0, i64* %true_count_max, align 8, !dbg !5929
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5930, metadata !DIExpression()), !dbg !5931
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5932
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5932
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5932
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5932
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !5932
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5932
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb, align 8, !dbg !5932
  br label %for.cond, !dbg !5932

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5934
  %cmp = icmp ne %struct.basic_block_def* %3, null, !dbg !5934
  br i1 %cmp, label %for.body, label %for.end, !dbg !5932

for.body:                                         ; preds = %for.cond
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5936
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 8, !dbg !5936
  %5 = load i64, i64* %count, align 8, !dbg !5936
  %6 = load i64, i64* %true_count_max, align 8, !dbg !5936
  %cmp1 = icmp sgt i64 %5, %6, !dbg !5936
  br i1 %cmp1, label %cond.true, label %cond.false, !dbg !5936

cond.true:                                        ; preds = %for.body
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5936
  %count2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 8, !dbg !5936
  %8 = load i64, i64* %count2, align 8, !dbg !5936
  br label %cond.end, !dbg !5936

cond.false:                                       ; preds = %for.body
  %9 = load i64, i64* %true_count_max, align 8, !dbg !5936
  br label %cond.end, !dbg !5936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %9, %cond.false ], !dbg !5936
  store i64 %cond, i64* %true_count_max, align 8, !dbg !5937
  br label %for.inc, !dbg !5938

for.inc:                                          ; preds = %cond.end
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5934
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 6, !dbg !5934
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5934
  store %struct.basic_block_def* %11, %struct.basic_block_def** %bb, align 8, !dbg !5934
  br label %for.cond, !dbg !5934, !llvm.loop !5939

for.end:                                          ; preds = %for.cond
  %12 = load i64, i64* %true_count_max, align 8, !dbg !5941
  %cmp3 = icmp sgt i64 %12, 1, !dbg !5941
  br i1 %cmp3, label %cond.true4, label %cond.false5, !dbg !5941

cond.true4:                                       ; preds = %for.end
  %13 = load i64, i64* %true_count_max, align 8, !dbg !5941
  br label %cond.end6, !dbg !5941

cond.false5:                                      ; preds = %for.end
  br label %cond.end6, !dbg !5941

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i64 [ %13, %cond.true4 ], [ 1, %cond.false5 ], !dbg !5941
  store i64 %cond7, i64* %count_max, align 8, !dbg !5942
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5943
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5943
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !5943
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !5943
  %x_entry_block_ptr10 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 0, !dbg !5943
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr10, align 8, !dbg !5943
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !5943
  br label %for.cond11, !dbg !5943

for.cond11:                                       ; preds = %for.inc16, %cond.end6
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5945
  %cmp12 = icmp ne %struct.basic_block_def* %17, null, !dbg !5945
  br i1 %cmp12, label %for.body13, label %for.end18, !dbg !5943

for.body13:                                       ; preds = %for.cond11
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5947
  %count14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 8, !dbg !5948
  %19 = load i64, i64* %count14, align 8, !dbg !5948
  %mul = mul nsw i64 %19, 10000, !dbg !5949
  %20 = load i64, i64* %count_max, align 8, !dbg !5950
  %div = sdiv i64 %20, 2, !dbg !5951
  %add = add nsw i64 %mul, %div, !dbg !5952
  %21 = load i64, i64* %count_max, align 8, !dbg !5953
  %div15 = sdiv i64 %add, %21, !dbg !5954
  %conv = trunc i64 %div15 to i32, !dbg !5955
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5956
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 11, !dbg !5957
  store i32 %conv, i32* %frequency, align 8, !dbg !5958
  br label %for.inc16, !dbg !5956

for.inc16:                                        ; preds = %for.body13
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5945
  %next_bb17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 6, !dbg !5945
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb17, align 8, !dbg !5945
  store %struct.basic_block_def* %24, %struct.basic_block_def** %bb, align 8, !dbg !5945
  br label %for.cond11, !dbg !5945, !llvm.loop !5959

for.end18:                                        ; preds = %for.cond11
  %25 = load i64, i64* %true_count_max, align 8, !dbg !5961
  %conv19 = trunc i64 %25 to i32, !dbg !5961
  ret i32 %conv19, !dbg !5962
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @expensive_function_p(i32 %threshold) #0 !dbg !5963 {
entry:
  %retval = alloca i8, align 1
  %threshold.addr = alloca i32, align 4
  %sum = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %limit = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store i32 %threshold, i32* %threshold.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %threshold.addr, metadata !5964, metadata !DIExpression()), !dbg !5965
  call void @llvm.dbg.declare(metadata i32* %sum, metadata !5966, metadata !DIExpression()), !dbg !5967
  store i32 0, i32* %sum, align 4, !dbg !5967
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5968, metadata !DIExpression()), !dbg !5969
  call void @llvm.dbg.declare(metadata i32* %limit, metadata !5970, metadata !DIExpression()), !dbg !5971
  %0 = load i32, i32* %threshold.addr, align 4, !dbg !5972
  %cmp = icmp sle i32 %0, 10000, !dbg !5972
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5972

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 2047, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !5972
  br label %cond.end, !dbg !5972

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5972

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5972
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5973
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5973
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5973
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5973
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !5973
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5973
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 11, !dbg !5975
  %4 = load i32, i32* %frequency, align 8, !dbg !5975
  %cmp1 = icmp eq i32 %4, 0, !dbg !5976
  br i1 %cmp1, label %if.then, label %if.end, !dbg !5977

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !5978
  br label %return, !dbg !5978

if.end:                                           ; preds = %cond.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5979
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5979
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !5979
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !5979
  %x_entry_block_ptr4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 0, !dbg !5979
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr4, align 8, !dbg !5979
  %frequency5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 11, !dbg !5980
  %8 = load i32, i32* %frequency5, align 8, !dbg !5980
  %9 = load i32, i32* %threshold.addr, align 4, !dbg !5981
  %mul = mul nsw i32 %8, %9, !dbg !5982
  store i32 %mul, i32* %limit, align 4, !dbg !5983
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5984
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !5984
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !5984
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !5984
  %x_entry_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 0, !dbg !5984
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr8, align 8, !dbg !5984
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 6, !dbg !5984
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5984
  store %struct.basic_block_def* %13, %struct.basic_block_def** %bb, align 8, !dbg !5984
  br label %for.cond, !dbg !5984

for.cond:                                         ; preds = %for.inc27, %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5986
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5986
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !5986
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !5986
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !5986
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 1, !dbg !5986
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5986
  %cmp11 = icmp ne %struct.basic_block_def* %14, %17, !dbg !5986
  br i1 %cmp11, label %for.body, label %for.end29, !dbg !5984

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !5988, metadata !DIExpression()), !dbg !5990
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5991
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !5991
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5991
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5991
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 0, !dbg !5991
  %20 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !5991
  store %struct.rtx_def* %20, %struct.rtx_def** %insn, align 8, !dbg !5993
  br label %for.cond12, !dbg !5994

for.cond12:                                       ; preds = %for.inc, %for.body
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !5995
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5997
  %il13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !5997
  %rtl14 = bitcast %union.basic_block_il_dependent* %il13 to %struct.rtl_bb_info**, !dbg !5997
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl14, align 8, !dbg !5997
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !5997
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5997
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5997
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5997
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !5997
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5997
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5997
  %cmp15 = icmp ne %struct.rtx_def* %21, %25, !dbg !5998
  br i1 %cmp15, label %for.body16, label %for.end, !dbg !5999

for.body16:                                       ; preds = %for.cond12
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6000
  %call = call i32 @active_insn_p(%struct.rtx_def* %26), !dbg !6002
  %tobool = icmp ne i32 %call, 0, !dbg !6002
  br i1 %tobool, label %if.then17, label %if.end22, !dbg !6003

if.then17:                                        ; preds = %for.body16
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6004
  %frequency18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 11, !dbg !6006
  %28 = load i32, i32* %frequency18, align 8, !dbg !6006
  %29 = load i32, i32* %sum, align 4, !dbg !6007
  %add = add i32 %29, %28, !dbg !6007
  store i32 %add, i32* %sum, align 4, !dbg !6007
  %30 = load i32, i32* %sum, align 4, !dbg !6008
  %31 = load i32, i32* %limit, align 4, !dbg !6010
  %cmp19 = icmp ugt i32 %30, %31, !dbg !6011
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !6012

if.then20:                                        ; preds = %if.then17
  store i8 1, i8* %retval, align 1, !dbg !6013
  br label %return, !dbg !6013

if.end21:                                         ; preds = %if.then17
  br label %if.end22, !dbg !6014

if.end22:                                         ; preds = %if.end21, %for.body16
  br label %for.inc, !dbg !6015

for.inc:                                          ; preds = %if.end22
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6016
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6016
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !6016
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 2, !dbg !6016
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !6016
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !6016
  store %struct.rtx_def* %33, %struct.rtx_def** %insn, align 8, !dbg !6017
  br label %for.cond12, !dbg !6018, !llvm.loop !6019

for.end:                                          ; preds = %for.cond12
  br label %for.inc27, !dbg !6021

for.inc27:                                        ; preds = %for.end
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5986
  %next_bb28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 6, !dbg !5986
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb28, align 8, !dbg !5986
  store %struct.basic_block_def* %35, %struct.basic_block_def** %bb, align 8, !dbg !5986
  br label %for.cond, !dbg !5986, !llvm.loop !6022

for.end29:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6024
  br label %return, !dbg !6024

return:                                           ; preds = %for.end29, %if.then20, %if.then
  %36 = load i8, i8* %retval, align 1, !dbg !6025
  ret i8 %36, !dbg !6025
}

declare dso_local i32 @active_insn_p(%struct.rtx_def*) #2

declare dso_local %struct.sreal* @sreal_init(%struct.sreal*, i64, i32) #2

declare dso_local %struct.sreal* @sreal_div(%struct.sreal*, %struct.sreal*, %struct.sreal*) #2

declare dso_local %struct.sreal* @sreal_sub(%struct.sreal*, %struct.sreal*, %struct.sreal*) #2

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !6026 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6029, metadata !DIExpression()), !dbg !6030
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6031
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !6031
  %tobool = icmp ne i8 %call, 0, !dbg !6031
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6031

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.46, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6031
  br label %cond.end, !dbg !6031

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6031
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6032
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6032
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6032
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !6032
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6032

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6032
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !6032
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !6032
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !6032
  br label %cond.end5, !dbg !6032

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6032

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !6032
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !6032
  ret %struct.edge_def* %call7, !dbg !6033
}

declare dso_local void @alloc_aux_for_blocks(i32) #2

declare dso_local void @alloc_aux_for_edges(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !6034 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !6037, metadata !DIExpression()), !dbg !6038
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !6039, metadata !DIExpression()), !dbg !6040
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !6041
  store i32 0, i32* %index, align 8, !dbg !6042
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !6043
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !6044
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !6045
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6046
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !6046
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !6046
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !6047 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6051, metadata !DIExpression()), !dbg !6052
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !6053, metadata !DIExpression()), !dbg !6054
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6055
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6055
  %5 = load i32, i32* %4, align 8, !dbg !6055
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6055
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6055
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6055
  %tobool = icmp ne i8 %call, 0, !dbg !6055
  br i1 %tobool, label %if.else, label %if.then, !dbg !6057

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6058
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6058
  %10 = load i32, i32* %9, align 8, !dbg !6058
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6058
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6058
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !6058
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6060
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !6061
  store i8 1, i8* %retval, align 1, !dbg !6062
  br label %return, !dbg !6062

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !6063
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !6065
  store i8 0, i8* %retval, align 1, !dbg !6066
  br label %return, !dbg !6066

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !6067
  ret i8 %15, !dbg !6067
}

declare dso_local %struct.sreal* @sreal_mul(%struct.sreal*, %struct.sreal*, %struct.sreal*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !6068 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !6072, metadata !DIExpression()), !dbg !6073
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6074
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !6074
  %1 = load i32, i32* %index, align 8, !dbg !6074
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6074
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !6074
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6074
  %5 = load i32, i32* %4, align 8, !dbg !6074
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6074
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !6074
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !6074
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !6074
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6074

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6074
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !6074
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6074
  %11 = load i32, i32* %10, align 8, !dbg !6074
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6074
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6074
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !6074
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !6074
  br label %cond.end, !dbg !6074

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6074

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6074
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6074
  %cmp = icmp ult i32 %1, %call2, !dbg !6074
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !6074

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.46, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6074
  br label %cond.end5, !dbg !6074

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6074

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !6074
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !6075
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !6076
  %15 = load i32, i32* %index7, align 8, !dbg !6077
  %inc = add i32 %15, 1, !dbg !6077
  store i32 %inc, i32* %index7, align 8, !dbg !6077
  ret void, !dbg !6078
}

; Function Attrs: noinline nounwind uwtable
define internal void @estimate_loops() #0 !dbg !6079 {
entry:
  %tovisit = alloca %struct.bitmap_head_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tovisit, metadata !6080, metadata !DIExpression()), !dbg !6081
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !6082
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %tovisit, align 8, !dbg !6081
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6083, metadata !DIExpression()), !dbg !6084
  %call1 = call i32 @number_of_loops(), !dbg !6085
  %cmp = icmp ugt i32 %call1, 1, !dbg !6087
  br i1 %cmp, label %if.then, label %if.end, !dbg !6088

if.then:                                          ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6089
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6089
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !6089
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6089
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 3, !dbg !6090
  %2 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !6090
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !6091
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !6091
  call void @estimate_loops_at_level(%struct.loop* %3), !dbg !6092
  br label %if.end, !dbg !6092

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6093
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6093
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !6093
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6093
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !6093
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6093
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !6093
  br label %for.cond, !dbg !6093

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6095
  %tobool = icmp ne %struct.basic_block_def* %7, null, !dbg !6093
  br i1 %tobool, label %for.body, label %for.end, !dbg !6093

for.body:                                         ; preds = %for.cond
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !6097
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6099
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !6100
  %10 = load i32, i32* %index, align 8, !dbg !6100
  %call3 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %8, i32 %10), !dbg !6101
  br label %for.inc, !dbg !6102

for.inc:                                          ; preds = %for.body
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6095
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !6095
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6095
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !6095
  br label %for.cond, !dbg !6095, !llvm.loop !6103

for.end:                                          ; preds = %for.cond
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6105
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !6105
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !6105
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !6105
  %x_entry_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 0, !dbg !6105
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr6, align 8, !dbg !6105
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !6106
  call void @propagate_freq(%struct.basic_block_def* %15, %struct.bitmap_head_def* %16), !dbg !6107
  %17 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !6108
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %17), !dbg !6108
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %tovisit, align 8, !dbg !6108
  ret void, !dbg !6109
}

declare dso_local i32 @sreal_compare(%struct.sreal*, %struct.sreal*) #2

declare dso_local %struct.sreal* @sreal_add(%struct.sreal*, %struct.sreal*, %struct.sreal*) #2

declare dso_local i64 @sreal_to_int(%struct.sreal*) #2

declare dso_local void @free_aux_for_blocks() #2

declare dso_local void @free_aux_for_edges() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @compute_function_frequency() #0 !dbg !6110 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6111, metadata !DIExpression()), !dbg !6112
  %0 = load %struct.gcov_ctr_summary*, %struct.gcov_ctr_summary** @profile_info, align 8, !dbg !6113
  %tobool = icmp ne %struct.gcov_ctr_summary* %0, null, !dbg !6113
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6115

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @flag_branch_probabilities, align 4, !dbg !6116
  %tobool1 = icmp ne i32 %1, 0, !dbg !6116
  br i1 %tobool1, label %if.end13, label %if.then, !dbg !6117

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6118
  %decl_common = bitcast %union.tree_node* %2 to %struct.tree_decl_common*, !dbg !6118
  %attributes = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 6, !dbg !6118
  %3 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !6118
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), %union.tree_node* %3), !dbg !6121
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !6122
  br i1 %cmp, label %if.then2, label %if.else, !dbg !6123

if.then2:                                         ; preds = %if.then
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6124
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !6124
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6125
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !6126
  %bf.clear = and i32 %bf.load, -196609, !dbg !6126
  store i32 %bf.clear, i32* %function_frequency, align 8, !dbg !6126
  br label %if.end12, !dbg !6124

if.else:                                          ; preds = %if.then
  %5 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6127
  %decl_common3 = bitcast %union.tree_node* %5 to %struct.tree_decl_common*, !dbg !6127
  %attributes4 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common3, i32 0, i32 6, !dbg !6127
  %6 = load %union.tree_node*, %union.tree_node** %attributes4, align 8, !dbg !6127
  %call5 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), %union.tree_node* %6), !dbg !6129
  %cmp6 = icmp ne %union.tree_node* %call5, null, !dbg !6130
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !6131

if.then7:                                         ; preds = %if.else
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6132
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !6132
  %function_frequency9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 20, !dbg !6133
  %bf.load10 = load i32, i32* %function_frequency9, align 8, !dbg !6134
  %bf.clear11 = and i32 %bf.load10, -196609, !dbg !6134
  %bf.set = or i32 %bf.clear11, 131072, !dbg !6134
  store i32 %bf.set, i32* %function_frequency9, align 8, !dbg !6134
  br label %if.end, !dbg !6132

if.end:                                           ; preds = %if.then7, %if.else
  br label %if.end12

if.end12:                                         ; preds = %if.end, %if.then2
  br label %for.end, !dbg !6135

if.end13:                                         ; preds = %lor.lhs.false
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6136
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6136
  %function_frequency15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 20, !dbg !6137
  %bf.load16 = load i32, i32* %function_frequency15, align 8, !dbg !6138
  %bf.clear17 = and i32 %bf.load16, -196609, !dbg !6138
  store i32 %bf.clear17, i32* %function_frequency15, align 8, !dbg !6138
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6139
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6139
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 1, !dbg !6139
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6139
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 0, !dbg !6139
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6139
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 6, !dbg !6139
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6139
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !6139
  br label %for.cond, !dbg !6139

for.cond:                                         ; preds = %for.inc, %if.end13
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6141
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6141
  %add.ptr19 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !6141
  %cfg20 = getelementptr inbounds %struct.function, %struct.function* %add.ptr19, i32 0, i32 1, !dbg !6141
  %15 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg20, align 8, !dbg !6141
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %15, i32 0, i32 1, !dbg !6141
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6141
  %cmp21 = icmp ne %struct.basic_block_def* %13, %16, !dbg !6141
  br i1 %cmp21, label %for.body, label %for.end, !dbg !6139

for.body:                                         ; preds = %for.cond
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6143
  %call22 = call zeroext i8 @maybe_hot_bb_p(%struct.basic_block_def* %17), !dbg !6146
  %tobool23 = icmp ne i8 %call22, 0, !dbg !6146
  br i1 %tobool23, label %if.then24, label %if.end30, !dbg !6147

if.then24:                                        ; preds = %for.body
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6148
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !6148
  %function_frequency26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 20, !dbg !6150
  %bf.load27 = load i32, i32* %function_frequency26, align 8, !dbg !6151
  %bf.clear28 = and i32 %bf.load27, -196609, !dbg !6151
  %bf.set29 = or i32 %bf.clear28, 131072, !dbg !6151
  store i32 %bf.set29, i32* %function_frequency26, align 8, !dbg !6151
  br label %for.end, !dbg !6152

if.end30:                                         ; preds = %for.body
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6153
  %call31 = call zeroext i8 @probably_never_executed_bb_p(%struct.basic_block_def* %19), !dbg !6155
  %tobool32 = icmp ne i8 %call31, 0, !dbg !6155
  br i1 %tobool32, label %if.end39, label %if.then33, !dbg !6156

if.then33:                                        ; preds = %if.end30
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6157
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !6157
  %function_frequency35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 20, !dbg !6158
  %bf.load36 = load i32, i32* %function_frequency35, align 8, !dbg !6159
  %bf.clear37 = and i32 %bf.load36, -196609, !dbg !6159
  %bf.set38 = or i32 %bf.clear37, 65536, !dbg !6159
  store i32 %bf.set38, i32* %function_frequency35, align 8, !dbg !6159
  br label %if.end39, !dbg !6157

if.end39:                                         ; preds = %if.then33, %if.end30
  br label %for.inc, !dbg !6160

for.inc:                                          ; preds = %if.end39
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6141
  %next_bb40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !6141
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb40, align 8, !dbg !6141
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !6141
  br label %for.cond, !dbg !6141, !llvm.loop !6161

for.end:                                          ; preds = %if.end12, %if.then24, %for.cond
  ret void, !dbg !6163
}

; Function Attrs: noinline nounwind uwtable
define internal void @choose_function_section() #0 !dbg !6164 {
entry:
  %0 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6165
  %decl_with_vis = bitcast %union.tree_node* %0 to %struct.tree_decl_with_vis*, !dbg !6165
  %section_name = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis, i32 0, i32 2, !dbg !6165
  %1 = load %union.tree_node*, %union.tree_node** %section_name, align 8, !dbg !6165
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !6165
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !6167

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 110), align 1, !dbg !6168
  %tobool1 = icmp ne i8 %2, 0, !dbg !6169
  br i1 %tobool1, label %lor.lhs.false2, label %if.then, !dbg !6170

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6171
  %decl_with_vis3 = bitcast %union.tree_node* %3 to %struct.tree_decl_with_vis*, !dbg !6171
  %comdat_group = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis3, i32 0, i32 3, !dbg !6171
  %4 = load %union.tree_node*, %union.tree_node** %comdat_group, align 8, !dbg !6171
  %cmp = icmp ne %union.tree_node* %4, null, !dbg !6171
  br i1 %cmp, label %if.then, label %if.end, !dbg !6172

if.then:                                          ; preds = %lor.lhs.false2, %lor.lhs.false, %entry
  br label %if.end22, !dbg !6173

if.end:                                           ; preds = %lor.lhs.false2
  %5 = load i32, i32* @flag_reorder_blocks_and_partition, align 4, !dbg !6174
  %tobool4 = icmp ne i32 %5, 0, !dbg !6174
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !6176

if.then5:                                         ; preds = %if.end
  br label %if.end22, !dbg !6177

if.end6:                                          ; preds = %if.end
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6178
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !6178
  %function_frequency = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !6180
  %bf.load = load i32, i32* %function_frequency, align 8, !dbg !6180
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6180
  %bf.clear = and i32 %bf.lshr, 3, !dbg !6180
  %cmp7 = icmp eq i32 %bf.clear, 2, !dbg !6181
  br i1 %cmp7, label %if.then8, label %if.end11, !dbg !6182

if.then8:                                         ; preds = %if.end6
  %call = call %union.tree_node* @build_string(i32 9, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.48, i64 0, i64 0)), !dbg !6183
  %7 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6184
  %decl_with_vis9 = bitcast %union.tree_node* %7 to %struct.tree_decl_with_vis*, !dbg !6184
  %section_name10 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis9, i32 0, i32 2, !dbg !6184
  store %union.tree_node* %call, %union.tree_node** %section_name10, align 8, !dbg !6185
  br label %if.end11, !dbg !6184

if.end11:                                         ; preds = %if.then8, %if.end6
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6186
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !6186
  %function_frequency13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 20, !dbg !6188
  %bf.load14 = load i32, i32* %function_frequency13, align 8, !dbg !6188
  %bf.lshr15 = lshr i32 %bf.load14, 16, !dbg !6188
  %bf.clear16 = and i32 %bf.lshr15, 3, !dbg !6188
  %cmp17 = icmp eq i32 %bf.clear16, 0, !dbg !6189
  br i1 %cmp17, label %if.then18, label %if.end22, !dbg !6190

if.then18:                                        ; preds = %if.end11
  %call19 = call %union.tree_node* @build_string(i32 14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49, i64 0, i64 0)), !dbg !6191
  %9 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6192
  %decl_with_vis20 = bitcast %union.tree_node* %9 to %struct.tree_decl_with_vis*, !dbg !6192
  %section_name21 = getelementptr inbounds %struct.tree_decl_with_vis, %struct.tree_decl_with_vis* %decl_with_vis20, i32 0, i32 2, !dbg !6192
  store %union.tree_node* %call19, %union.tree_node** %section_name21, align 8, !dbg !6193
  br label %if.end22, !dbg !6192

if.end22:                                         ; preds = %if.then, %if.then5, %if.then18, %if.end11
  ret void, !dbg !6194
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @build_predict_expr(i32 %predictor, i32 %taken) #0 !dbg !6195 {
entry:
  %predictor.addr = alloca i32, align 4
  %taken.addr = alloca i32, align 4
  %t = alloca %union.tree_node*, align 8
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  store i32 %taken, i32* %taken.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %taken.addr, metadata !6200, metadata !DIExpression()), !dbg !6201
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !6202, metadata !DIExpression()), !dbg !6203
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6204
  %1 = load i32, i32* %predictor.addr, align 4, !dbg !6204
  %conv = zext i32 %1 to i64, !dbg !6204
  %call = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv), !dbg !6204
  %call1 = call %union.tree_node* @build1_stat(i32 185, %union.tree_node* %0, %union.tree_node* %call), !dbg !6204
  store %union.tree_node* %call1, %union.tree_node** %t, align 8, !dbg !6203
  %2 = load i32, i32* %taken.addr, align 4, !dbg !6205
  %3 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6205
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6205
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6205
  %5 = zext i32 %2 to i64, !dbg !6205
  %bf.load = load i64, i64* %4, align 8, !dbg !6205
  %bf.value = and i64 %5, 1, !dbg !6205
  %bf.shl = shl i64 %bf.value, 18, !dbg !6205
  %bf.clear = and i64 %bf.load, -262145, !dbg !6205
  %bf.set = or i64 %bf.clear, %bf.shl, !dbg !6205
  store i64 %bf.set, i64* %4, align 8, !dbg !6205
  %bf.result.cast = trunc i64 %bf.value to i32, !dbg !6205
  %6 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !6206
  ret %union.tree_node* %6, !dbg !6207
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @predictor_name(i32 %predictor) #0 !dbg !6208 {
entry:
  %predictor.addr = alloca i32, align 4
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  %0 = load i32, i32* %predictor.addr, align 4, !dbg !6213
  %idxprom = zext i32 %0 to i64, !dbg !6214
  %arrayidx = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !6214
  %name = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx, i32 0, i32 0, !dbg !6215
  %1 = load i8*, i8** %name, align 16, !dbg !6215
  ret i8* %1, !dbg !6216
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_estimate_probability() #0 !dbg !6217 {
entry:
  %0 = load i32, i32* @flag_guess_branch_prob, align 4, !dbg !6218
  %conv = trunc i32 %0 to i8, !dbg !6218
  ret i8 %conv, !dbg !6219
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_estimate_probability_driver() #0 !dbg !6220 {
entry:
  %nb_loops = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %nb_loops, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @loop_optimizer_init(i32 0), !dbg !6223
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6224
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !6224
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6226

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !6227
  %and = and i32 %1, 8, !dbg !6228
  %tobool1 = icmp ne i32 %and, 0, !dbg !6228
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6229

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6230
  call void @flow_loops_dump(%struct._IO_FILE* %2, void (%struct.loop*, %struct._IO_FILE*, i32)* null, i32 0), !dbg !6231
  br label %if.end, !dbg !6231

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call = call zeroext i8 @mark_irreducible_loops(), !dbg !6232
  %call2 = call i32 @number_of_loops(), !dbg !6233
  store i32 %call2, i32* %nb_loops, align 4, !dbg !6234
  %3 = load i32, i32* %nb_loops, align 4, !dbg !6235
  %cmp = icmp ugt i32 %3, 1, !dbg !6237
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6238

if.then3:                                         ; preds = %if.end
  call void @scev_initialize(), !dbg !6239
  br label %if.end4, !dbg !6239

if.end4:                                          ; preds = %if.then3, %if.end
  call void @tree_estimate_probability(), !dbg !6240
  %4 = load i32, i32* %nb_loops, align 4, !dbg !6241
  %cmp5 = icmp ugt i32 %4, 1, !dbg !6243
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6244

if.then6:                                         ; preds = %if.end4
  call void @scev_finalize(), !dbg !6245
  br label %if.end7, !dbg !6245

if.end7:                                          ; preds = %if.then6, %if.end4
  call void @loop_optimizer_finalize(), !dbg !6246
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6247
  %tobool8 = icmp ne %struct._IO_FILE* %5, null, !dbg !6247
  br i1 %tobool8, label %land.lhs.true9, label %if.end13, !dbg !6249

land.lhs.true9:                                   ; preds = %if.end7
  %6 = load i32, i32* @dump_flags, align 4, !dbg !6250
  %and10 = and i32 %6, 8, !dbg !6251
  %tobool11 = icmp ne i32 %and10, 0, !dbg !6251
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !6252

if.then12:                                        ; preds = %land.lhs.true9
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6253
  %8 = load i32, i32* @dump_flags, align 4, !dbg !6254
  call void @gimple_dump_cfg(%struct._IO_FILE* %7, i32 %8), !dbg !6255
  br label %if.end13, !dbg !6255

if.end13:                                         ; preds = %if.then12, %land.lhs.true9, %if.end7
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6256
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !6256
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6256
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6256
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 7, !dbg !6256
  %11 = load i32, i32* %x_profile_status, align 8, !dbg !6256
  %cmp14 = icmp eq i32 %11, 0, !dbg !6258
  br i1 %cmp14, label %if.then15, label %if.end19, !dbg !6259

if.then15:                                        ; preds = %if.end13
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6260
  %add.ptr16 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !6260
  %cfg17 = getelementptr inbounds %struct.function, %struct.function* %add.ptr16, i32 0, i32 1, !dbg !6260
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg17, align 8, !dbg !6260
  %x_profile_status18 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 7, !dbg !6260
  store i32 1, i32* %x_profile_status18, align 8, !dbg !6261
  br label %if.end19, !dbg !6260

if.end19:                                         ; preds = %if.then15, %if.end13
  ret i32 0, !dbg !6262
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @strip_predict_hints() #0 !dbg !6263 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %ass_stmt = alloca %union.gimple_statement_d*, align 8
  %var = alloca %union.tree_node*, align 8
  %bi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !6264, metadata !DIExpression()), !dbg !6265
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %ass_stmt, metadata !6266, metadata !DIExpression()), !dbg !6267
  call void @llvm.dbg.declare(metadata %union.tree_node** %var, metadata !6268, metadata !DIExpression()), !dbg !6269
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6270
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6270
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6270
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6270
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !6270
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6270
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !6270
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !6270
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !6270
  br label %for.cond, !dbg !6270

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6272
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6272
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !6272
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !6272
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !6272
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !6272
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6272
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !6272
  br i1 %cmp, label %for.body, label %for.end29, !dbg !6270

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bi, metadata !6274, metadata !DIExpression()), !dbg !6276
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6277
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %8), !dbg !6279
  %9 = bitcast %struct.gimple_stmt_iterator* %bi to i8*, !dbg !6279
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6279
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 24, i1 false), !dbg !6279
  br label %for.cond3, !dbg !6280

for.cond3:                                        ; preds = %if.end27, %if.then, %for.body
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bi), !dbg !6281
  %tobool = icmp ne i8 %call, 0, !dbg !6283
  %lnot = xor i1 %tobool, true, !dbg !6283
  br i1 %lnot, label %for.body4, label %for.end, !dbg !6284

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6285, metadata !DIExpression()), !dbg !6287
  %call5 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bi), !dbg !6288
  store %union.gimple_statement_d* %call5, %union.gimple_statement_d** %stmt, align 8, !dbg !6287
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6289
  %call6 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !6291
  %cmp7 = icmp eq i32 %call6, 33, !dbg !6292
  br i1 %cmp7, label %if.then, label %if.else, !dbg !6293

if.then:                                          ; preds = %for.body4
  call void @gsi_remove(%struct.gimple_stmt_iterator* %bi, i8 zeroext 1), !dbg !6294
  br label %for.cond3, !dbg !6296, !llvm.loop !6297

if.else:                                          ; preds = %for.body4
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6299
  %call8 = call i32 @gimple_code(%union.gimple_statement_d* %12), !dbg !6301
  %cmp9 = icmp eq i32 %call8, 8, !dbg !6302
  br i1 %cmp9, label %if.then10, label %if.end26, !dbg !6303

if.then10:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !6304, metadata !DIExpression()), !dbg !6306
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6307
  %call11 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %13), !dbg !6308
  store %union.tree_node* %call11, %union.tree_node** %fndecl, align 8, !dbg !6306
  %14 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6309
  %tobool12 = icmp ne %union.tree_node* %14, null, !dbg !6309
  br i1 %tobool12, label %land.lhs.true, label %if.end, !dbg !6311

land.lhs.true:                                    ; preds = %if.then10
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6312
  %function_decl = bitcast %union.tree_node* %15 to %struct.tree_function_decl*, !dbg !6312
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !6312
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !6312
  %bf.lshr = lshr i32 %bf.load, 11, !dbg !6312
  %bf.clear = and i32 %bf.lshr, 3, !dbg !6312
  %cmp13 = icmp eq i32 %bf.clear, 3, !dbg !6313
  br i1 %cmp13, label %land.lhs.true14, label %if.end, !dbg !6314

land.lhs.true14:                                  ; preds = %land.lhs.true
  %16 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !6315
  %function_decl15 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !6315
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl15, i32 0, i32 5, !dbg !6315
  %bf.load16 = load i32, i32* %function_code, align 8, !dbg !6315
  %bf.clear17 = and i32 %bf.load16, 2047, !dbg !6315
  %cmp18 = icmp eq i32 %bf.clear17, 446, !dbg !6316
  br i1 %cmp18, label %land.lhs.true19, label %if.end, !dbg !6317

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6318
  %call20 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %17), !dbg !6319
  %cmp21 = icmp eq i32 %call20, 2, !dbg !6320
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !6321

if.then22:                                        ; preds = %land.lhs.true19
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6322
  %call23 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %18), !dbg !6324
  store %union.tree_node* %call23, %union.tree_node** %var, align 8, !dbg !6325
  %19 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6326
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6326
  %call24 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %20, i32 0), !dbg !6326
  %call25 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %19, %union.tree_node* %call24), !dbg !6326
  store %union.gimple_statement_d* %call25, %union.gimple_statement_d** %ass_stmt, align 8, !dbg !6327
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %ass_stmt, align 8, !dbg !6328
  call void @gsi_replace(%struct.gimple_stmt_iterator* %bi, %union.gimple_statement_d* %21, i8 zeroext 1), !dbg !6329
  br label %if.end, !dbg !6330

if.end:                                           ; preds = %if.then22, %land.lhs.true19, %land.lhs.true14, %land.lhs.true, %if.then10
  br label %if.end26, !dbg !6331

if.end26:                                         ; preds = %if.end, %if.else
  br label %if.end27

if.end27:                                         ; preds = %if.end26
  call void @gsi_next(%struct.gimple_stmt_iterator* %bi), !dbg !6332
  br label %for.cond3, !dbg !6333, !llvm.loop !6297

for.end:                                          ; preds = %for.cond3
  br label %for.inc, !dbg !6334

for.inc:                                          ; preds = %for.end
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6272
  %next_bb28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 6, !dbg !6272
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb28, align 8, !dbg !6272
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb, align 8, !dbg !6272
  br label %for.cond, !dbg !6272, !llvm.loop !6335

for.end29:                                        ; preds = %for.cond
  ret i32 0, !dbg !6337
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !6338 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6343, metadata !DIExpression()), !dbg !6344
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6344
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6344
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6344

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6344
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !6344
  %2 = load i32, i32* %num, align 8, !dbg !6344
  br label %cond.end, !dbg !6344

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6344

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !6344
  ret i32 %cond, !dbg !6344
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !6345 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6350, metadata !DIExpression()), !dbg !6349
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6349
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6349
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6349

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6349
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6349
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !6349
  %3 = load i32, i32* %num, align 8, !dbg !6349
  %cmp = icmp ult i32 %1, %3, !dbg !6349
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6351
  %land.ext = zext i1 %4 to i32, !dbg !6349
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6349
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !6349
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6349
  %idxprom = zext i32 %6 to i64, !dbg !6349
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6349
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6349
  ret %struct.loop* %7, !dbg !6349
}

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @can_predict_insn_p(%struct.rtx_def* %insn) #0 !dbg !6352 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6355
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6355
  %bf.load = load i32, i32* %1, align 8, !dbg !6355
  %bf.clear = and i32 %bf.load, 65535, !dbg !6355
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !6355
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6356

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6357
  %call = call i32 @any_condjump_p(%struct.rtx_def* %2), !dbg !6358
  %tobool = icmp ne i32 %call, 0, !dbg !6358
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6359

land.rhs:                                         ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6360
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !6360
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6360
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !6360
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !6360
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6360
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !6360
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6360
  %tobool1 = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !6360
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6360

cond.true:                                        ; preds = %land.rhs
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6360
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6360
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6360
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !6360
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !6360
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !6360
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !6360
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs6, align 8, !dbg !6360
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %8, i32 0, i32 0, !dbg !6360
  br label %cond.end, !dbg !6360

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !6360

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6360
  %call7 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6360
  %cmp8 = icmp uge i32 %call7, 2, !dbg !6361
  br label %land.end

land.end:                                         ; preds = %cond.end, %land.lhs.true, %entry
  %9 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp8, %cond.end ], !dbg !6362
  %land.ext = zext i1 %9 to i32, !dbg !6359
  %conv = trunc i32 %land.ext to i8, !dbg !6363
  ret i8 %conv, !dbg !6364
}

declare dso_local %struct.rtx_def* @get_condition(%struct.rtx_def*, %struct.rtx_def**, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_even_probabilities(%struct.basic_block_def* %bb) #0 !dbg !6365 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %nedges = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp3 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6366, metadata !DIExpression()), !dbg !6367
  call void @llvm.dbg.declare(metadata i32* %nedges, metadata !6368, metadata !DIExpression()), !dbg !6369
  store i32 0, i32* %nedges, align 4, !dbg !6369
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6370, metadata !DIExpression()), !dbg !6371
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6372, metadata !DIExpression()), !dbg !6373
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6374
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6374
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6374
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6374
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !6374
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !6374
  store i32 %3, i32* %2, align 8, !dbg !6374
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !6374
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !6374
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !6374
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6374
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6374
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !6374
  br label %for.cond, !dbg !6374

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6376
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !6376
  %10 = load i32, i32* %9, align 8, !dbg !6376
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !6376
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !6376
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !6376
  %tobool = icmp ne i8 %call1, 0, !dbg !6374
  br i1 %tobool, label %for.body, label %for.end, !dbg !6374

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6378
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !6380
  %14 = load i32, i32* %flags, align 8, !dbg !6380
  %and = and i32 %14, 24, !dbg !6381
  %tobool2 = icmp ne i32 %and, 0, !dbg !6381
  br i1 %tobool2, label %if.end, label %if.then, !dbg !6382

if.then:                                          ; preds = %for.body
  %15 = load i32, i32* %nedges, align 4, !dbg !6383
  %inc = add nsw i32 %15, 1, !dbg !6383
  store i32 %inc, i32* %nedges, align 4, !dbg !6383
  br label %if.end, !dbg !6384

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6385

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6376
  br label %for.cond, !dbg !6376, !llvm.loop !6386

for.end:                                          ; preds = %for.cond
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6388
  %succs4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !6388
  %call5 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs4), !dbg !6388
  %17 = bitcast %struct.edge_iterator* %tmp3 to { i32, %struct.VEC_edge_gc** }*, !dbg !6388
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 0, !dbg !6388
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 0, !dbg !6388
  store i32 %19, i32* %18, align 8, !dbg !6388
  %20 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %17, i32 0, i32 1, !dbg !6388
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call5, 1, !dbg !6388
  store %struct.VEC_edge_gc** %21, %struct.VEC_edge_gc*** %20, align 8, !dbg !6388
  %22 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6388
  %23 = bitcast %struct.edge_iterator* %tmp3 to i8*, !dbg !6388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 8 %23, i64 16, i1 false), !dbg !6388
  br label %for.cond6, !dbg !6388

for.cond6:                                        ; preds = %for.inc17, %for.end
  %24 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6390
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 0, !dbg !6390
  %26 = load i32, i32* %25, align 8, !dbg !6390
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %24, i32 0, i32 1, !dbg !6390
  %28 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %27, align 8, !dbg !6390
  %call7 = call zeroext i8 @ei_cond(i32 %26, %struct.VEC_edge_gc** %28, %struct.edge_def** %e), !dbg !6390
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6388
  br i1 %tobool8, label %for.body9, label %for.end18, !dbg !6388

for.body9:                                        ; preds = %for.cond6
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6392
  %flags10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 7, !dbg !6394
  %30 = load i32, i32* %flags10, align 8, !dbg !6394
  %and11 = and i32 %30, 24, !dbg !6395
  %tobool12 = icmp ne i32 %and11, 0, !dbg !6395
  br i1 %tobool12, label %if.else, label %if.then13, !dbg !6396

if.then13:                                        ; preds = %for.body9
  %31 = load i32, i32* %nedges, align 4, !dbg !6397
  %div = sdiv i32 %31, 2, !dbg !6398
  %add = add nsw i32 10000, %div, !dbg !6399
  %32 = load i32, i32* %nedges, align 4, !dbg !6400
  %div14 = sdiv i32 %add, %32, !dbg !6401
  %33 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6402
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 8, !dbg !6403
  store i32 %div14, i32* %probability, align 4, !dbg !6404
  br label %if.end16, !dbg !6402

if.else:                                          ; preds = %for.body9
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6405
  %probability15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 8, !dbg !6406
  store i32 0, i32* %probability15, align 4, !dbg !6407
  br label %if.end16

if.end16:                                         ; preds = %if.else, %if.then13
  br label %for.inc17, !dbg !6408

for.inc17:                                        ; preds = %if.end16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6390
  br label %for.cond6, !dbg !6390, !llvm.loop !6409

for.end18:                                        ; preds = %for.cond6
  ret void, !dbg !6411
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dump_prediction(%struct._IO_FILE* %file, i32 %predictor, i32 %probability, %struct.basic_block_def* %bb, i32 %used) #0 !dbg !6412 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %predictor.addr = alloca i32, align 4
  %probability.addr = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %used.addr = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !6465, metadata !DIExpression()), !dbg !6466
  store i32 %predictor, i32* %predictor.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %predictor.addr, metadata !6467, metadata !DIExpression()), !dbg !6468
  store i32 %probability, i32* %probability.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %probability.addr, metadata !6469, metadata !DIExpression()), !dbg !6470
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  store i32 %used, i32* %used.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %used.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6475, metadata !DIExpression()), !dbg !6476
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6477, metadata !DIExpression()), !dbg !6478
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6479
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !6479
  br i1 %tobool, label %if.end, label %if.then, !dbg !6481

if.then:                                          ; preds = %entry
  br label %return, !dbg !6482

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6483
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !6483
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !6483
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6483
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !6483
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !6483
  store i32 %4, i32* %3, align 8, !dbg !6483
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !6483
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !6483
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !6483
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6483
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6483
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !6483
  br label %for.cond, !dbg !6483

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6485
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !6485
  %11 = load i32, i32* %10, align 8, !dbg !6485
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !6485
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !6485
  %call1 = call zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %13, %struct.edge_def** %e), !dbg !6485
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6483
  br i1 %tobool2, label %for.body, label %for.end, !dbg !6483

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6487
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 7, !dbg !6489
  %15 = load i32, i32* %flags, align 8, !dbg !6489
  %and = and i32 %15, 1, !dbg !6490
  %tobool3 = icmp ne i32 %and, 0, !dbg !6490
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !6491

if.then4:                                         ; preds = %for.body
  br label %for.end, !dbg !6492

if.end5:                                          ; preds = %for.body
  br label %for.inc, !dbg !6493

for.inc:                                          ; preds = %if.end5
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6485
  br label %for.cond, !dbg !6485, !llvm.loop !6494

for.end:                                          ; preds = %if.then4, %for.cond
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6496
  %17 = load i32, i32* %predictor.addr, align 4, !dbg !6497
  %idxprom = zext i32 %17 to i64, !dbg !6498
  %arrayidx = getelementptr inbounds [29 x %struct.predictor_info], [29 x %struct.predictor_info]* @predictor_info, i64 0, i64 %idxprom, !dbg !6498
  %name = getelementptr inbounds %struct.predictor_info, %struct.predictor_info* %arrayidx, i32 0, i32 0, !dbg !6499
  %18 = load i8*, i8** %name, align 16, !dbg !6499
  %19 = load i32, i32* %used.addr, align 4, !dbg !6500
  %tobool6 = icmp ne i32 %19, 0, !dbg !6500
  %20 = zext i1 %tobool6 to i64, !dbg !6500
  %cond = select i1 %tobool6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.37, i64 0, i64 0), !dbg !6500
  %21 = load i32, i32* %probability.addr, align 4, !dbg !6501
  %conv = sitofp i32 %21 to double, !dbg !6501
  %mul = fmul double %conv, 1.000000e+02, !dbg !6502
  %div = fdiv double %mul, 1.000000e+04, !dbg !6503
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i64 0, i64 0), i8* %18, i8* %cond, double %div), !dbg !6504
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6505
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 8, !dbg !6507
  %23 = load i64, i64* %count, align 8, !dbg !6507
  %tobool8 = icmp ne i64 %23, 0, !dbg !6505
  br i1 %tobool8, label %if.then9, label %if.end26, !dbg !6508

if.then9:                                         ; preds = %for.end
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6509
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i64 0, i64 0)), !dbg !6511
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6512
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6513
  %count11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 8, !dbg !6514
  %27 = load i64, i64* %count11, align 8, !dbg !6514
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i64 %27), !dbg !6515
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6516
  %tobool13 = icmp ne %struct.edge_def* %28, null, !dbg !6516
  br i1 %tobool13, label %if.then14, label %if.end25, !dbg !6518

if.then14:                                        ; preds = %if.then9
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6519
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)), !dbg !6521
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6522
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6523
  %count16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 9, !dbg !6524
  %32 = load i64, i64* %count16, align 8, !dbg !6524
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.39, i64 0, i64 0), i64 %32), !dbg !6525
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6526
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6527
  %count18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 9, !dbg !6528
  %35 = load i64, i64* %count18, align 8, !dbg !6528
  %conv19 = sitofp i64 %35 to double, !dbg !6527
  %mul20 = fmul double %conv19, 1.000000e+02, !dbg !6529
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6530
  %count21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 8, !dbg !6531
  %37 = load i64, i64* %count21, align 8, !dbg !6531
  %conv22 = sitofp i64 %37 to double, !dbg !6530
  %div23 = fdiv double %mul20, %conv22, !dbg !6532
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.41, i64 0, i64 0), double %div23), !dbg !6533
  br label %if.end25, !dbg !6534

if.end25:                                         ; preds = %if.then14, %if.then9
  br label %if.end26, !dbg !6535

if.end26:                                         ; preds = %if.end25, %for.end
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !6536
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.42, i64 0, i64 0)), !dbg !6537
  br label %return, !dbg !6538

return:                                           ; preds = %if.end26, %if.then
  ret void, !dbg !6538
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !6539 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6540, metadata !DIExpression()), !dbg !6541
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6542
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !6542
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6542
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6542
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6542

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6542
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !6542
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !6542
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6542
  br label %cond.end, !dbg !6542

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6542

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6542
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !6542
  %cmp = icmp eq i32 %call, 1, !dbg !6543
  %conv = zext i1 %cmp to i32, !dbg !6543
  %conv2 = trunc i32 %conv to i8, !dbg !6542
  ret i8 %conv2, !dbg !6544
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !6545 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6548, metadata !DIExpression()), !dbg !6549
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6550, metadata !DIExpression()), !dbg !6549
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6549
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6549
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6549

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6549
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6549
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6549
  %3 = load i32, i32* %num, align 8, !dbg !6549
  %cmp = icmp ult i32 %1, %3, !dbg !6549
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !6551
  %land.ext = zext i1 %4 to i32, !dbg !6549
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6549
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !6549
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !6549
  %idxprom = zext i32 %6 to i64, !dbg !6549
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6549
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6549
  ret %struct.edge_def* %7, !dbg !6549
}

; Function Attrs: noinline nounwind uwtable
define internal void @apply_return_prediction() #0 !dbg !6552 {
entry:
  %return_stmt = alloca %union.gimple_statement_d*, align 8
  %return_val = alloca %union.tree_node*, align 8
  %e = alloca %struct.edge_def*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %phi_num_args = alloca i32, align 4
  %i = alloca i32, align 4
  %pred = alloca i32, align 4
  %direction = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %return_stmt, metadata !6553, metadata !DIExpression()), !dbg !6554
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %return_stmt, align 8, !dbg !6554
  call void @llvm.dbg.declare(metadata %union.tree_node** %return_val, metadata !6555, metadata !DIExpression()), !dbg !6556
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !6557, metadata !DIExpression()), !dbg !6558
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !6559, metadata !DIExpression()), !dbg !6560
  call void @llvm.dbg.declare(metadata i32* %phi_num_args, metadata !6561, metadata !DIExpression()), !dbg !6562
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6563, metadata !DIExpression()), !dbg !6564
  call void @llvm.dbg.declare(metadata i32* %pred, metadata !6565, metadata !DIExpression()), !dbg !6566
  call void @llvm.dbg.declare(metadata i32* %direction, metadata !6567, metadata !DIExpression()), !dbg !6568
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !6569, metadata !DIExpression()), !dbg !6570
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6571
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6571
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !6571
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6571
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !6571
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6571
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !6571
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !6571
  %3 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !6571
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !6571
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !6571
  store i32 %5, i32* %4, align 8, !dbg !6571
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !6571
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !6571
  store %struct.VEC_edge_gc** %7, %struct.VEC_edge_gc*** %6, align 8, !dbg !6571
  %8 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6571
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false), !dbg !6571
  br label %for.cond, !dbg !6571

for.cond:                                         ; preds = %for.inc, %entry
  %10 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !6573
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 0, !dbg !6573
  %12 = load i32, i32* %11, align 8, !dbg !6573
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %10, i32 0, i32 1, !dbg !6573
  %14 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !6573
  %call1 = call zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %14, %struct.edge_def** %e), !dbg !6573
  %tobool = icmp ne i8 %call1, 0, !dbg !6571
  br i1 %tobool, label %for.body, label %for.end, !dbg !6571

for.body:                                         ; preds = %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6575
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 0, !dbg !6577
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !6577
  %call2 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %16), !dbg !6578
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %return_stmt, align 8, !dbg !6579
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %return_stmt, align 8, !dbg !6580
  %tobool3 = icmp ne %union.gimple_statement_d* %17, null, !dbg !6580
  br i1 %tobool3, label %land.lhs.true, label %if.end, !dbg !6582

land.lhs.true:                                    ; preds = %for.body
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %return_stmt, align 8, !dbg !6583
  %call4 = call i32 @gimple_code(%union.gimple_statement_d* %18), !dbg !6584
  %cmp = icmp eq i32 %call4, 9, !dbg !6585
  br i1 %cmp, label %if.then, label %if.end, !dbg !6586

if.then:                                          ; preds = %land.lhs.true
  br label %for.end, !dbg !6587

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !6588

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !6573
  br label %for.cond, !dbg !6573, !llvm.loop !6589

for.end:                                          ; preds = %if.then, %for.cond
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6591
  %tobool5 = icmp ne %struct.edge_def* %19, null, !dbg !6591
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !6593

if.then6:                                         ; preds = %for.end
  br label %if.end54, !dbg !6594

if.end7:                                          ; preds = %for.end
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %return_stmt, align 8, !dbg !6595
  %call8 = call %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %20), !dbg !6596
  store %union.tree_node* %call8, %union.tree_node** %return_val, align 8, !dbg !6597
  %21 = load %union.tree_node*, %union.tree_node** %return_val, align 8, !dbg !6598
  %tobool9 = icmp ne %union.tree_node* %21, null, !dbg !6598
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !6600

if.then10:                                        ; preds = %if.end7
  br label %if.end54, !dbg !6601

if.end11:                                         ; preds = %if.end7
  %22 = load %union.tree_node*, %union.tree_node** %return_val, align 8, !dbg !6602
  %base = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6602
  %23 = bitcast %struct.tree_base* %base to i64*, !dbg !6602
  %bf.load = load i64, i64* %23, align 8, !dbg !6602
  %bf.clear = and i64 %bf.load, 65535, !dbg !6602
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6602
  %cmp12 = icmp ne i32 %bf.cast, 141, !dbg !6604
  br i1 %cmp12, label %if.then19, label %lor.lhs.false, !dbg !6605

lor.lhs.false:                                    ; preds = %if.end11
  %24 = load %union.tree_node*, %union.tree_node** %return_val, align 8, !dbg !6606
  %ssa_name = bitcast %union.tree_node* %24 to %struct.tree_ssa_name*, !dbg !6606
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6606
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6606
  %tobool13 = icmp ne %union.gimple_statement_d* %25, null, !dbg !6606
  br i1 %tobool13, label %lor.lhs.false14, label %if.then19, !dbg !6607

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %26 = load %union.tree_node*, %union.tree_node** %return_val, align 8, !dbg !6608
  %ssa_name15 = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !6608
  %def_stmt16 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name15, i32 0, i32 2, !dbg !6608
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt16, align 8, !dbg !6608
  %call17 = call i32 @gimple_code(%union.gimple_statement_d* %27), !dbg !6609
  %cmp18 = icmp ne i32 %call17, 16, !dbg !6610
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !6611

if.then19:                                        ; preds = %lor.lhs.false14, %lor.lhs.false, %if.end11
  br label %if.end54, !dbg !6612

if.end20:                                         ; preds = %lor.lhs.false14
  %28 = load %union.tree_node*, %union.tree_node** %return_val, align 8, !dbg !6613
  %ssa_name21 = bitcast %union.tree_node* %28 to %struct.tree_ssa_name*, !dbg !6613
  %def_stmt22 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name21, i32 0, i32 2, !dbg !6613
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt22, align 8, !dbg !6613
  store %union.gimple_statement_d* %29, %union.gimple_statement_d** %phi, align 8, !dbg !6614
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6615
  %call23 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %30), !dbg !6616
  store i32 %call23, i32* %phi_num_args, align 4, !dbg !6617
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6618
  %call24 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %31, i32 0), !dbg !6618
  %call25 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call24), !dbg !6618
  %call26 = call i32 @return_prediction(%union.tree_node* %call25, i32* %direction), !dbg !6619
  store i32 %call26, i32* %pred, align 4, !dbg !6620
  store i32 1, i32* %i, align 4, !dbg !6621
  br label %for.cond27, !dbg !6623

for.cond27:                                       ; preds = %for.inc36, %if.end20
  %32 = load i32, i32* %i, align 4, !dbg !6624
  %33 = load i32, i32* %phi_num_args, align 4, !dbg !6626
  %cmp28 = icmp slt i32 %32, %33, !dbg !6627
  br i1 %cmp28, label %for.body29, label %for.end37, !dbg !6628

for.body29:                                       ; preds = %for.cond27
  %34 = load i32, i32* %pred, align 4, !dbg !6629
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6631
  %36 = load i32, i32* %i, align 4, !dbg !6631
  %call30 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %35, i32 %36), !dbg !6631
  %call31 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call30), !dbg !6631
  %call32 = call i32 @return_prediction(%union.tree_node* %call31, i32* %direction), !dbg !6632
  %cmp33 = icmp ne i32 %34, %call32, !dbg !6633
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !6634

if.then34:                                        ; preds = %for.body29
  br label %for.end37, !dbg !6635

if.end35:                                         ; preds = %for.body29
  br label %for.inc36, !dbg !6636

for.inc36:                                        ; preds = %if.end35
  %37 = load i32, i32* %i, align 4, !dbg !6637
  %inc = add nsw i32 %37, 1, !dbg !6637
  store i32 %inc, i32* %i, align 4, !dbg !6637
  br label %for.cond27, !dbg !6638, !llvm.loop !6639

for.end37:                                        ; preds = %if.then34, %for.cond27
  %38 = load i32, i32* %i, align 4, !dbg !6641
  %39 = load i32, i32* %phi_num_args, align 4, !dbg !6643
  %cmp38 = icmp ne i32 %38, %39, !dbg !6644
  br i1 %cmp38, label %if.then39, label %if.end54, !dbg !6645

if.then39:                                        ; preds = %for.end37
  store i32 0, i32* %i, align 4, !dbg !6646
  br label %for.cond40, !dbg !6648

for.cond40:                                       ; preds = %for.inc51, %if.then39
  %40 = load i32, i32* %i, align 4, !dbg !6649
  %41 = load i32, i32* %phi_num_args, align 4, !dbg !6651
  %cmp41 = icmp slt i32 %40, %41, !dbg !6652
  br i1 %cmp41, label %for.body42, label %for.end53, !dbg !6653

for.body42:                                       ; preds = %for.cond40
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6654
  %43 = load i32, i32* %i, align 4, !dbg !6654
  %call43 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %42, i32 %43), !dbg !6654
  %call44 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call43), !dbg !6654
  %call45 = call i32 @return_prediction(%union.tree_node* %call44, i32* %direction), !dbg !6656
  store i32 %call45, i32* %pred, align 4, !dbg !6657
  %44 = load i32, i32* %pred, align 4, !dbg !6658
  %cmp46 = icmp ne i32 %44, 3, !dbg !6660
  br i1 %cmp46, label %if.then47, label %if.end50, !dbg !6661

if.then47:                                        ; preds = %for.body42
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !6662
  %46 = load i32, i32* %i, align 4, !dbg !6663
  %conv = sext i32 %46 to i64, !dbg !6663
  %call48 = call %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %45, i64 %conv), !dbg !6664
  %src49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call48, i32 0, i32 0, !dbg !6665
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %src49, align 8, !dbg !6665
  %48 = load i32, i32* %pred, align 4, !dbg !6666
  %49 = load i32, i32* %direction, align 4, !dbg !6667
  call void @predict_paths_leading_to(%struct.basic_block_def* %47, i32 %48, i32 %49), !dbg !6668
  br label %if.end50, !dbg !6668

if.end50:                                         ; preds = %if.then47, %for.body42
  br label %for.inc51, !dbg !6669

for.inc51:                                        ; preds = %if.end50
  %50 = load i32, i32* %i, align 4, !dbg !6670
  %inc52 = add nsw i32 %50, 1, !dbg !6670
  store i32 %inc52, i32* %i, align 4, !dbg !6670
  br label %for.cond40, !dbg !6671, !llvm.loop !6672

for.end53:                                        ; preds = %for.cond40
  br label %if.end54, !dbg !6673

if.end54:                                         ; preds = %if.then6, %if.then10, %if.then19, %for.end53, %for.end37
  ret void, !dbg !6674
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !6675 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6678, metadata !DIExpression()), !dbg !6679
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !6680, metadata !DIExpression()), !dbg !6681
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !6682, metadata !DIExpression()), !dbg !6683
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6684
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !6685
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !6686
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6687
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !6688
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !6689
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6690
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6691
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !6692
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !6693
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6694
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !6695
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !6696
  ret void, !dbg !6697
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6698 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6701, metadata !DIExpression()), !dbg !6702
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6703
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6703
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !6704
  %conv = zext i1 %cmp to i32, !dbg !6704
  %conv1 = trunc i32 %conv to i8, !dbg !6705
  ret i8 %conv1, !dbg !6706
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !6707 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !6710, metadata !DIExpression()), !dbg !6711
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !6712
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6712
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !6713
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6713
  ret %union.gimple_statement_d* %1, !dbg !6714
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6715 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6719, metadata !DIExpression()), !dbg !6720
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6721
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6722
  %cmp = icmp eq i32 %call, 8, !dbg !6723
  %conv = zext i1 %cmp to i32, !dbg !6723
  %conv1 = trunc i32 %conv to i8, !dbg !6722
  ret i8 %conv1, !dbg !6724
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @predict_paths_leading_to(%struct.basic_block_def* %bb, i32 %pred, i32 %taken) #0 !dbg !6725 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %pred.addr = alloca i32, align 4
  %taken.addr = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6728, metadata !DIExpression()), !dbg !6729
  store i32 %pred, i32* %pred.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pred.addr, metadata !6730, metadata !DIExpression()), !dbg !6731
  store i32 %taken, i32* %taken.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %taken.addr, metadata !6732, metadata !DIExpression()), !dbg !6733
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6734
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6735
  %2 = load i32, i32* %pred.addr, align 4, !dbg !6736
  %3 = load i32, i32* %taken.addr, align 4, !dbg !6737
  call void @predict_paths_for_bb(%struct.basic_block_def* %0, %struct.basic_block_def* %1, i32 %2, i32 %3), !dbg !6738
  ret void, !dbg !6739
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6740 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6743, metadata !DIExpression()), !dbg !6744
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6745, metadata !DIExpression()), !dbg !6746
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6747
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6748
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6746
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6749
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6749
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6749
  %bf.load = load i64, i64* %2, align 8, !dbg !6749
  %bf.clear = and i64 %bf.load, 65535, !dbg !6749
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6749
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6751
  br i1 %cmp, label %if.then, label %if.end, !dbg !6752

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6753
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6753
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6753
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6753
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6753
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6754
  br label %return, !dbg !6754

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6755
  br label %return, !dbg !6755

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6756
  ret %union.tree_node* %5, !dbg !6756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6757 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6760, metadata !DIExpression()), !dbg !6761
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6762
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6763
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6764
  %bf.load = load i32, i32* %1, align 8, !dbg !6764
  %bf.clear = and i32 %bf.load, 255, !dbg !6764
  ret i32 %bf.clear, !dbg !6765
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_predict_predictor(%union.gimple_statement_d* %gs) #0 !dbg !6766 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6769, metadata !DIExpression()), !dbg !6770
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6771
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6772
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6773
  %bf.load = load i32, i32* %1, align 8, !dbg !6773
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6773
  %and = and i32 %bf.lshr, -32769, !dbg !6774
  ret i32 %and, !dbg !6775
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_predict_outcome(%union.gimple_statement_d* %gs) #0 !dbg !6776 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6779, metadata !DIExpression()), !dbg !6780
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6781
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6782
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6783
  %bf.load = load i32, i32* %1, align 8, !dbg !6783
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6783
  %and = and i32 %bf.lshr, 32768, !dbg !6784
  %tobool = icmp ne i32 %and, 0, !dbg !6785
  %2 = zext i1 %tobool to i64, !dbg !6785
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !6785
  ret i32 %cond, !dbg !6786
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !6787 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !6791, metadata !DIExpression()), !dbg !6792
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6793
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !6794
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !6794
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !6795
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !6795
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !6796
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !6797
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !6798
  ret void, !dbg !6799
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) #0 !dbg !6800 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6801, metadata !DIExpression()), !dbg !6802
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6803
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6804
  ret %union.tree_node* %call, !dbg !6805
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !6806 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6809, metadata !DIExpression()), !dbg !6810
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6811
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !6812
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !6813
  %1 = load i32, i32* %nargs, align 4, !dbg !6813
  ret i32 %1, !dbg !6814
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @return_prediction(%union.tree_node* %val, i32* %prediction) #0 !dbg !6815 {
entry:
  %retval = alloca i32, align 4
  %val.addr = alloca %union.tree_node*, align 8
  %prediction.addr = alloca i32*, align 8
  store %union.tree_node* %val, %union.tree_node** %val.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %val.addr, metadata !6819, metadata !DIExpression()), !dbg !6820
  store i32* %prediction, i32** %prediction.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %prediction.addr, metadata !6821, metadata !DIExpression()), !dbg !6822
  %0 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6823
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6823
  br i1 %tobool, label %if.end, label %if.then, !dbg !6825

if.then:                                          ; preds = %entry
  store i32 3, i32* %retval, align 4, !dbg !6826
  br label %return, !dbg !6826

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6827
  %common = bitcast %union.tree_node* %1 to %struct.tree_common*, !dbg !6827
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6827
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6827
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6827
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6827
  %bf.load = load i64, i64* %3, align 8, !dbg !6827
  %bf.clear = and i64 %bf.load, 65535, !dbg !6827
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6827
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !6827
  br i1 %cmp, label %if.then8, label %lor.lhs.false, !dbg !6827

lor.lhs.false:                                    ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6827
  %common1 = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !6827
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common1, i32 0, i32 2, !dbg !6827
  %5 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !6827
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6827
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6827
  %bf.load4 = load i64, i64* %6, align 8, !dbg !6827
  %bf.clear5 = and i64 %bf.load4, 65535, !dbg !6827
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6827
  %cmp7 = icmp eq i32 %bf.cast6, 12, !dbg !6827
  br i1 %cmp7, label %if.then8, label %if.else, !dbg !6829

if.then8:                                         ; preds = %lor.lhs.false, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6830
  %call = call i32 @integer_zerop(%union.tree_node* %7), !dbg !6833
  %tobool9 = icmp ne i32 %call, 0, !dbg !6833
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !6834

if.then10:                                        ; preds = %if.then8
  %8 = load i32*, i32** %prediction.addr, align 8, !dbg !6835
  store i32 0, i32* %8, align 4, !dbg !6837
  store i32 26, i32* %retval, align 4, !dbg !6838
  br label %return, !dbg !6838

if.end11:                                         ; preds = %if.then8
  br label %if.end59, !dbg !6839

if.else:                                          ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6840
  %common12 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6840
  %type13 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common12, i32 0, i32 2, !dbg !6840
  %10 = load %union.tree_node*, %union.tree_node** %type13, align 8, !dbg !6840
  %base14 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !6840
  %11 = bitcast %struct.tree_base* %base14 to i64*, !dbg !6840
  %bf.load15 = load i64, i64* %11, align 8, !dbg !6840
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !6840
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !6840
  %cmp18 = icmp eq i32 %bf.cast17, 6, !dbg !6840
  br i1 %cmp18, label %if.then35, label %lor.lhs.false19, !dbg !6840

lor.lhs.false19:                                  ; preds = %if.else
  %12 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6840
  %common20 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !6840
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !6840
  %13 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !6840
  %base22 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6840
  %14 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6840
  %bf.load23 = load i64, i64* %14, align 8, !dbg !6840
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6840
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6840
  %cmp26 = icmp eq i32 %bf.cast25, 7, !dbg !6840
  br i1 %cmp26, label %if.then35, label %lor.lhs.false27, !dbg !6840

lor.lhs.false27:                                  ; preds = %lor.lhs.false19
  %15 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6840
  %common28 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !6840
  %type29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 2, !dbg !6840
  %16 = load %union.tree_node*, %union.tree_node** %type29, align 8, !dbg !6840
  %base30 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !6840
  %17 = bitcast %struct.tree_base* %base30 to i64*, !dbg !6840
  %bf.load31 = load i64, i64* %17, align 8, !dbg !6840
  %bf.clear32 = and i64 %bf.load31, 65535, !dbg !6840
  %bf.cast33 = trunc i64 %bf.clear32 to i32, !dbg !6840
  %cmp34 = icmp eq i32 %bf.cast33, 8, !dbg !6840
  br i1 %cmp34, label %if.then35, label %if.end58, !dbg !6842

if.then35:                                        ; preds = %lor.lhs.false27, %lor.lhs.false19, %if.else
  %18 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6843
  %base36 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6843
  %19 = bitcast %struct.tree_base* %base36 to i64*, !dbg !6843
  %bf.load37 = load i64, i64* %19, align 8, !dbg !6843
  %bf.clear38 = and i64 %bf.load37, 65535, !dbg !6843
  %bf.cast39 = trunc i64 %bf.clear38 to i32, !dbg !6843
  %cmp40 = icmp eq i32 %bf.cast39, 23, !dbg !6846
  br i1 %cmp40, label %land.lhs.true, label %if.end44, !dbg !6847

land.lhs.true:                                    ; preds = %if.then35
  %20 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6848
  %call41 = call i32 @tree_int_cst_sgn(%union.tree_node* %20), !dbg !6849
  %cmp42 = icmp slt i32 %call41, 0, !dbg !6850
  br i1 %cmp42, label %if.then43, label %if.end44, !dbg !6851

if.then43:                                        ; preds = %land.lhs.true
  %21 = load i32*, i32** %prediction.addr, align 8, !dbg !6852
  store i32 0, i32* %21, align 4, !dbg !6854
  store i32 25, i32* %retval, align 4, !dbg !6855
  br label %return, !dbg !6855

if.end44:                                         ; preds = %land.lhs.true, %if.then35
  %22 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6856
  %base45 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !6856
  %23 = bitcast %struct.tree_base* %base45 to i64*, !dbg !6856
  %bf.load46 = load i64, i64* %23, align 8, !dbg !6856
  %bf.lshr = lshr i64 %bf.load46, 17, !dbg !6856
  %bf.clear47 = and i64 %bf.lshr, 1, !dbg !6856
  %bf.cast48 = trunc i64 %bf.clear47 to i32, !dbg !6856
  %tobool49 = icmp ne i32 %bf.cast48, 0, !dbg !6856
  br i1 %tobool49, label %land.lhs.true50, label %if.end57, !dbg !6858

land.lhs.true50:                                  ; preds = %if.end44
  %24 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6859
  %call51 = call i32 @integer_zerop(%union.tree_node* %24), !dbg !6860
  %tobool52 = icmp ne i32 %call51, 0, !dbg !6860
  br i1 %tobool52, label %if.end57, label %land.lhs.true53, !dbg !6861

land.lhs.true53:                                  ; preds = %land.lhs.true50
  %25 = load %union.tree_node*, %union.tree_node** %val.addr, align 8, !dbg !6862
  %call54 = call i32 @integer_onep(%union.tree_node* %25), !dbg !6863
  %tobool55 = icmp ne i32 %call54, 0, !dbg !6863
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !6864

if.then56:                                        ; preds = %land.lhs.true53
  %26 = load i32*, i32** %prediction.addr, align 8, !dbg !6865
  store i32 1, i32* %26, align 4, !dbg !6867
  store i32 24, i32* %retval, align 4, !dbg !6868
  br label %return, !dbg !6868

if.end57:                                         ; preds = %land.lhs.true53, %land.lhs.true50, %if.end44
  br label %if.end58, !dbg !6869

if.end58:                                         ; preds = %if.end57, %lor.lhs.false27
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end11
  store i32 3, i32* %retval, align 4, !dbg !6870
  br label %return, !dbg !6870

return:                                           ; preds = %if.end59, %if.then56, %if.then43, %if.then10, %if.then
  %27 = load i32, i32* %retval, align 4, !dbg !6871
  ret i32 %27, !dbg !6871
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6872 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6879, metadata !DIExpression()), !dbg !6880
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6881
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6882
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6882
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6883
  ret %union.tree_node* %2, !dbg !6884
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6885 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6888, metadata !DIExpression()), !dbg !6889
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6890, metadata !DIExpression()), !dbg !6891
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6892
  %1 = load i32, i32* %i.addr, align 4, !dbg !6893
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !6894
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !6895
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6896
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) #0 !dbg !6897 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6900, metadata !DIExpression()), !dbg !6901
  store i64 %i, i64* %i.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %i.addr, metadata !6902, metadata !DIExpression()), !dbg !6903
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6904
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %0), !dbg !6904
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i32 0, i32 0, !dbg !6904
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !6904
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !6904
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6904

cond.true:                                        ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6904
  %call1 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %2), !dbg !6904
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i32 0, i32 0, !dbg !6904
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !6904
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !6904
  br label %cond.end, !dbg !6904

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6904

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6904
  %4 = load i64, i64* %i.addr, align 8, !dbg !6904
  %conv = trunc i64 %4 to i32, !dbg !6904
  %call3 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv), !dbg !6904
  ret %struct.edge_def* %call3, !dbg !6905
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6906 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6909, metadata !DIExpression()), !dbg !6910
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6911, metadata !DIExpression()), !dbg !6912
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6913
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6915
  %tobool = icmp ne i8 %call, 0, !dbg !6915
  br i1 %tobool, label %if.then, label %if.else, !dbg !6916

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6917
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6919
  %2 = load i32, i32* %i.addr, align 4, !dbg !6920
  %idxprom = zext i32 %2 to i64, !dbg !6919
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6919
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6919
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6921
  br label %return, !dbg !6921

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6922
  br label %return, !dbg !6922

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6923
  ret %union.tree_node* %4, !dbg !6923
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6924 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6925, metadata !DIExpression()), !dbg !6926
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6927
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6928
  %cmp = icmp uge i32 %call, 1, !dbg !6929
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6930

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6931
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6932
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6933
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6934
  %land.ext = zext i1 %2 to i32, !dbg !6930
  %conv = trunc i32 %land.ext to i8, !dbg !6928
  ret i8 %conv, !dbg !6935
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6936 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6939, metadata !DIExpression()), !dbg !6940
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6941, metadata !DIExpression()), !dbg !6942
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6943
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6944
  %idxprom = zext i32 %call to i64, !dbg !6945
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6945
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6945
  store i64 %1, i64* %off, align 8, !dbg !6946
  %2 = load i64, i64* %off, align 8, !dbg !6947
  %cmp = icmp ne i64 %2, 0, !dbg !6947
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6947

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6947
  br label %cond.end, !dbg !6947

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6947

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6947
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6948
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6949
  %5 = load i64, i64* %off, align 8, !dbg !6950
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6951
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6952
  ret %union.tree_node** %6, !dbg !6953
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6954 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6957, metadata !DIExpression()), !dbg !6958
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6959
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6960
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6961
  ret i32 %call1, !dbg !6962
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6963 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6966, metadata !DIExpression()), !dbg !6967
  %0 = load i32, i32* %code.addr, align 4, !dbg !6968
  %idxprom = zext i32 %0 to i64, !dbg !6969
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6969
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6969
  ret i32 %1, !dbg !6970
}

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) #2

declare dso_local i32 @integer_onep(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !6971 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6975, metadata !DIExpression()), !dbg !6976
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !6977, metadata !DIExpression()), !dbg !6978
  %0 = load i32, i32* %index.addr, align 4, !dbg !6979
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6979
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !6979
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !6979
  %2 = load i32, i32* %capacity, align 8, !dbg !6979
  %cmp = icmp ule i32 %0, %2, !dbg !6979
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6979

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !6979
  br label %cond.end, !dbg !6979

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6979
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6980
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !6981
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !6982
  %4 = load i32, i32* %index.addr, align 4, !dbg !6983
  %idxprom = zext i32 %4 to i64, !dbg !6980
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !6980
  ret %struct.phi_arg_d* %arrayidx, !dbg !6984
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !6985 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6988, metadata !DIExpression()), !dbg !6989
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6990
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6991
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !6992
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6992
  ret %struct.basic_block_def* %1, !dbg !6993
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6994 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6997, metadata !DIExpression()), !dbg !6998
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6999
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7000
  %1 = load i32, i32* %flags, align 8, !dbg !7000
  %and = and i32 %1, 512, !dbg !7001
  %tobool = icmp ne i32 %and, 0, !dbg !7001
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !7002

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7003
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !7004
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !7005
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7005
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !7003
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7006

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7007
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7008
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !7009
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !7009
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !7010
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7010
  br label %cond.end, !dbg !7006

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !7006

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !7006
  ret %struct.gimple_seq_d* %cond, !dbg !7011
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !7012 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !7018, metadata !DIExpression()), !dbg !7019
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7020
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !7020
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7020

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !7021
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !7022
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7022
  br label %cond.end, !dbg !7020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !7020
  ret %struct.gimple_seq_node_d* %cond, !dbg !7023
}

; Function Attrs: noinline nounwind uwtable
define internal void @predict_paths_for_bb(%struct.basic_block_def* %cur, %struct.basic_block_def* %bb, i32 %pred, i32 %taken) #0 !dbg !7024 {
entry:
  %cur.addr = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %pred.addr = alloca i32, align 4
  %taken.addr = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %cur, %struct.basic_block_def** %cur.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cur.addr, metadata !7027, metadata !DIExpression()), !dbg !7028
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7029, metadata !DIExpression()), !dbg !7030
  store i32 %pred, i32* %pred.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pred.addr, metadata !7031, metadata !DIExpression()), !dbg !7032
  store i32 %taken, i32* %taken.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %taken.addr, metadata !7033, metadata !DIExpression()), !dbg !7034
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7035, metadata !DIExpression()), !dbg !7036
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7037, metadata !DIExpression()), !dbg !7038
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !7039, metadata !DIExpression()), !dbg !7040
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %cur.addr, align 8, !dbg !7041
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !7041
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !7041
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7041
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !7041
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !7041
  store i32 %3, i32* %2, align 8, !dbg !7041
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !7041
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !7041
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !7041
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7041
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7041
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !7041
  br label %for.cond, !dbg !7041

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7043
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !7043
  %10 = load i32, i32* %9, align 8, !dbg !7043
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !7043
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !7043
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !7043
  %tobool = icmp ne i8 %call1, 0, !dbg !7041
  br i1 %tobool, label %for.body, label %for.end, !dbg !7041

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7045
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !7047
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7047
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !7048
  %15 = load i32, i32* %index, align 8, !dbg !7048
  %cmp = icmp sge i32 %15, 2, !dbg !7049
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7050

land.lhs.true:                                    ; preds = %for.body
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7051
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !7052
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !7052
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7053
  %call3 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %17, %struct.basic_block_def* %18), !dbg !7054
  %tobool4 = icmp ne i8 %call3, 0, !dbg !7054
  br i1 %tobool4, label %if.end, label %if.then, !dbg !7055

if.then:                                          ; preds = %land.lhs.true
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7056
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %cur.addr, align 8, !dbg !7056
  %cmp5 = icmp eq %struct.basic_block_def* %19, %20, !dbg !7056
  br i1 %cmp5, label %cond.false, label %lor.lhs.false, !dbg !7056

lor.lhs.false:                                    ; preds = %if.then
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %cur.addr, align 8, !dbg !7056
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7056
  %call6 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %21, %struct.basic_block_def* %22), !dbg !7056
  %conv = zext i8 %call6 to i32, !dbg !7056
  %tobool7 = icmp ne i32 %conv, 0, !dbg !7056
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !7056

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 1776, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7056
  br label %cond.end, !dbg !7056

cond.false:                                       ; preds = %lor.lhs.false, %if.then
  br label %cond.end, !dbg !7056

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7056
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7058
  %24 = load i32, i32* %pred.addr, align 4, !dbg !7059
  %25 = load i32, i32* %taken.addr, align 4, !dbg !7060
  call void @predict_edge_def(%struct.edge_def* %23, i32 %24, i32 %25), !dbg !7061
  br label %if.end, !dbg !7062

if.end:                                           ; preds = %cond.end, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7063

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7043
  br label %for.cond, !dbg !7043, !llvm.loop !7064

for.end:                                          ; preds = %for.cond
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %cur.addr, align 8, !dbg !7066
  %call8 = call %struct.basic_block_def* @first_dom_son(i32 2, %struct.basic_block_def* %26), !dbg !7068
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %son, align 8, !dbg !7069
  br label %for.cond9, !dbg !7070

for.cond9:                                        ; preds = %for.inc12, %for.end
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !7071
  %tobool10 = icmp ne %struct.basic_block_def* %27, null, !dbg !7073
  br i1 %tobool10, label %for.body11, label %for.end14, !dbg !7073

for.body11:                                       ; preds = %for.cond9
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !7074
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7075
  %30 = load i32, i32* %pred.addr, align 4, !dbg !7076
  %31 = load i32, i32* %taken.addr, align 4, !dbg !7077
  call void @predict_paths_for_bb(%struct.basic_block_def* %28, %struct.basic_block_def* %29, i32 %30, i32 %31), !dbg !7078
  br label %for.inc12, !dbg !7078

for.inc12:                                        ; preds = %for.body11
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !7079
  %call13 = call %struct.basic_block_def* @next_dom_son(i32 2, %struct.basic_block_def* %32), !dbg !7080
  store %struct.basic_block_def* %call13, %struct.basic_block_def** %son, align 8, !dbg !7081
  br label %for.cond9, !dbg !7082, !llvm.loop !7083

for.end14:                                        ; preds = %for.cond9
  ret void, !dbg !7085
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7086 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7087, metadata !DIExpression()), !dbg !7088
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7089
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7090
  ret %union.tree_node* %call, !dbg !7091
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !7092 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !7097, metadata !DIExpression()), !dbg !7098
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !7099, metadata !DIExpression()), !dbg !7100
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7101, metadata !DIExpression()), !dbg !7102
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !7103, metadata !DIExpression()), !dbg !7104
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7105, metadata !DIExpression()), !dbg !7106
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !7107, metadata !DIExpression()), !dbg !7108
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7109
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !7110
  store i32 0, i32* %idx, align 8, !dbg !7111
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7112
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !7112
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !7112
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !7112
  %tobool = icmp ne %struct.loops* %2, null, !dbg !7112
  br i1 %tobool, label %if.end, label %if.then, !dbg !7114

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7115
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !7117
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !7118
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !7119
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !7120
  br label %return, !dbg !7121

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !7122
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !7122
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7123
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !7124
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !7125
  %6 = load i32, i32* %flags.addr, align 4, !dbg !7126
  %and = and i32 %6, 1, !dbg !7127
  %tobool3 = icmp ne i32 %and, 0, !dbg !7128
  %7 = zext i1 %tobool3 to i64, !dbg !7128
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !7128
  store i32 %cond, i32* %mn, align 4, !dbg !7129
  %8 = load i32, i32* %flags.addr, align 4, !dbg !7130
  %and4 = and i32 %8, 4, !dbg !7132
  %tobool5 = icmp ne i32 %and4, 0, !dbg !7132
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !7133

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !7134
  br label %for.cond, !dbg !7137

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7138
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !7138
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !7138
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !7138
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !7138
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !7138
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !7138
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !7138

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7138
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !7138
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !7138
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !7138
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !7138
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !7138
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !7138
  br label %cond.end, !dbg !7138

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7138

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7138
  %15 = load i32, i32* %i, align 4, !dbg !7138
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !7138
  %tobool15 = icmp ne i32 %call14, 0, !dbg !7140
  br i1 %tobool15, label %for.body, label %for.end, !dbg !7140

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7141
  %cmp = icmp ne %struct.loop* %16, null, !dbg !7143
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !7144

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7145
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !7146
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !7146
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !7147
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !7148

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7149
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !7150
  %20 = load i32, i32* %num, align 8, !dbg !7150
  %21 = load i32, i32* %mn, align 4, !dbg !7151
  %cmp18 = icmp sge i32 %20, %21, !dbg !7152
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !7153

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7154
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !7154
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !7154
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !7154
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !7154

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7154
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !7154
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !7154
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !7154
  br label %cond.end26, !dbg !7154

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !7154

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !7154
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7154
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !7154
  %27 = load i32, i32* %num28, align 8, !dbg !7154
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !7154
  br label %if.end30, !dbg !7154

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7151

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !7155
  %inc = add i32 %28, 1, !dbg !7155
  store i32 %inc, i32* %i, align 4, !dbg !7155
  br label %for.cond, !dbg !7156, !llvm.loop !7157

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !7159

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !7160
  %and31 = and i32 %29, 2, !dbg !7162
  %tobool32 = icmp ne i32 %and31, 0, !dbg !7162
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !7163

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7164
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !7164
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !7164
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !7164
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !7167
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !7167
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !7168
  br label %for.cond36, !dbg !7169

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7170
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !7172
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !7172
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !7173
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !7174

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !7175

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7176
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !7177
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !7177
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !7178
  br label %for.cond36, !dbg !7179, !llvm.loop !7180

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !7182

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7183
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !7186
  %38 = load i32, i32* %num43, align 8, !dbg !7186
  %39 = load i32, i32* %mn, align 4, !dbg !7187
  %cmp44 = icmp sge i32 %38, %39, !dbg !7188
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !7189

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7190
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !7190
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !7190
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !7190
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !7190

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7190
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !7190
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !7190
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !7190
  br label %cond.end52, !dbg !7190

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !7190

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !7190
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7190
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !7190
  %45 = load i32, i32* %num54, align 8, !dbg !7190
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !7190
  br label %if.end56, !dbg !7190

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7191
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !7193
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !7193
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !7191
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !7194

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7195
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !7198
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !7198
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !7199
  br label %for.cond60, !dbg !7200

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7201
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !7203
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !7203
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !7204
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !7205

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !7206

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7207
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !7208
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !7208
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !7209
  br label %for.cond60, !dbg !7210, !llvm.loop !7211

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !7213

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7214
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !7216
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !7216
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !7217

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !7218

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7219
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !7220
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !7221
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !7182, !llvm.loop !7222

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !7224

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7225
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !7225
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !7225
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !7225
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !7227
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !7227
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !7228
  br label %while.body79, !dbg !7229

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7230
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !7233
  %60 = load i32, i32* %num80, align 8, !dbg !7233
  %61 = load i32, i32* %mn, align 4, !dbg !7234
  %cmp81 = icmp sge i32 %60, %61, !dbg !7235
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !7236

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7237
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !7237
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !7237
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !7237
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !7237

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7237
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !7237
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !7237
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !7237
  br label %cond.end89, !dbg !7237

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !7237

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !7237
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7237
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !7237
  %67 = load i32, i32* %num91, align 8, !dbg !7237
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !7237
  br label %if.end93, !dbg !7237

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7238
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !7240
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !7240
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !7241
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !7242

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7243
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !7244
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !7244
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !7245
  br label %if.end110, !dbg !7246

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !7247

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7249
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !7250
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !7251

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7252
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !7253
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !7253
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !7254
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !7255
  br i1 %75, label %while.body103, label %while.end105, !dbg !7247

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7256
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !7257
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !7258
  br label %while.cond99, !dbg !7247, !llvm.loop !7259

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7261
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !7263
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !7264

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !7265

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !7266
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !7267
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !7267
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !7268
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !7229, !llvm.loop !7269

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7271
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !7272
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !7273
  br label %return, !dbg !7274

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !7274
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !7275 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7278, metadata !DIExpression()), !dbg !7279
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7280, metadata !DIExpression()), !dbg !7279
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !7281, metadata !DIExpression()), !dbg !7279
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7282
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7282
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7282

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7282
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7282
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7282
  %3 = load i32, i32* %num, align 8, !dbg !7282
  %cmp = icmp ult i32 %1, %3, !dbg !7282
  br i1 %cmp, label %if.then, label %if.else, !dbg !7279

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7284
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !7284
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7284
  %idxprom = zext i32 %5 to i64, !dbg !7284
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7284
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7284
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !7284
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !7284
  store i32 1, i32* %retval, align 4, !dbg !7284
  br label %return, !dbg !7284

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !7286
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !7286
  store i32 0, i32* %retval, align 4, !dbg !7286
  br label %return, !dbg !7286

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7279
  ret i32 %9, !dbg !7279
}

declare dso_local zeroext i8 @number_of_iterations_exit(%struct.loop*, %struct.edge_def*, %struct.tree_niter_desc*, i8 zeroext) #2

declare dso_local %union.tree_node* @loop_niter_by_eval(%struct.loop*, %struct.edge_def*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local i64 @estimated_loop_iterations_int(%struct.loop*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !7288 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !7292, metadata !DIExpression()), !dbg !7293
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !7294
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !7294
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !7294
  br i1 %tobool, label %if.then, label %if.end, !dbg !7293

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !7294
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !7294
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !7294
  call void @free(i8* %4), !dbg !7294
  br label %if.end, !dbg !7294

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !7293
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !7293
  ret void, !dbg !7293
}

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

declare dso_local zeroext i8 @predicted_by_p(%struct.basic_block_def*, i32) #2

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !7296 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !7299, metadata !DIExpression()), !dbg !7300
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !7301, metadata !DIExpression()), !dbg !7302
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !7303, metadata !DIExpression()), !dbg !7304
  br label %while.cond, !dbg !7305

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7306
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !7306
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !7306
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !7306
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7306

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7306
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !7306
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !7306
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7306
  br label %cond.end, !dbg !7306

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !7306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7306
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7306
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !7306
  %5 = load i32, i32* %idx, align 8, !dbg !7306
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !7306
  %tobool2 = icmp ne i32 %call, 0, !dbg !7305
  br i1 %tobool2, label %while.body, label %while.end, !dbg !7305

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7307
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !7309
  %7 = load i32, i32* %idx3, align 8, !dbg !7310
  %inc = add i32 %7, 1, !dbg !7310
  store i32 %inc, i32* %idx3, align 8, !dbg !7310
  %8 = load i32, i32* %anum, align 4, !dbg !7311
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !7312
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !7313
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !7314
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !7315
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !7317
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !7317
  br i1 %tobool5, label %if.then, label %if.end, !dbg !7318

if.then:                                          ; preds = %while.body
  br label %return, !dbg !7319

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !7305, !llvm.loop !7320

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !7322
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !7322
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !7322
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !7323
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !7324
  br label %return, !dbg !7325

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !7325
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !7326 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7329, metadata !DIExpression()), !dbg !7330
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7330
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !7330
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !7330
  ret %struct.VEC_int_heap* %1, !dbg !7330
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !7331 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !7334, metadata !DIExpression()), !dbg !7335
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7336, metadata !DIExpression()), !dbg !7335
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !7337, metadata !DIExpression()), !dbg !7335
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7338
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !7338
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7338

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7338
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7338
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !7338
  %3 = load i32, i32* %num, align 8, !dbg !7338
  %cmp = icmp ult i32 %1, %3, !dbg !7338
  br i1 %cmp, label %if.then, label %if.else, !dbg !7335

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !7340
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !7340
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7340
  %idxprom = zext i32 %5 to i64, !dbg !7340
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !7340
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !7340
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !7340
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !7340
  store i32 1, i32* %retval, align 4, !dbg !7340
  br label %return, !dbg !7340

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !7342
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !7342
  store i32 0, i32* %retval, align 4, !dbg !7342
  br label %return, !dbg !7342

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7335
  ret i32 %9, !dbg !7335
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !7344 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !7351, metadata !DIExpression()), !dbg !7350
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !7352, metadata !DIExpression()), !dbg !7350
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7350
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !7350
  %1 = load i32, i32* %num, align 4, !dbg !7350
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7350
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !7350
  %3 = load i32, i32* %alloc, align 4, !dbg !7350
  %cmp = icmp ult i32 %1, %3, !dbg !7350
  %conv = zext i1 %cmp to i32, !dbg !7350
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7350
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !7350
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7350
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !7350
  %6 = load i32, i32* %num1, align 4, !dbg !7350
  %inc = add i32 %6, 1, !dbg !7350
  store i32 %inc, i32* %num1, align 4, !dbg !7350
  %idxprom = zext i32 %6 to i64, !dbg !7350
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !7350
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !7350
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !7350
  %8 = load i32*, i32** %slot_, align 8, !dbg !7350
  store i32 %7, i32* %8, align 4, !dbg !7350
  %9 = load i32*, i32** %slot_, align 8, !dbg !7350
  ret i32* %9, !dbg !7350
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !7353 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !7358, metadata !DIExpression()), !dbg !7359
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7360, metadata !DIExpression()), !dbg !7359
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !7361, metadata !DIExpression()), !dbg !7359
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7362
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !7362
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7362

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7362
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7362
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !7362
  %3 = load i32, i32* %num, align 4, !dbg !7362
  %cmp = icmp ult i32 %1, %3, !dbg !7362
  br i1 %cmp, label %if.then, label %if.else, !dbg !7359

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !7364
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !7364
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !7364
  %idxprom = zext i32 %5 to i64, !dbg !7364
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !7364
  %6 = load i32, i32* %arrayidx, align 4, !dbg !7364
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !7364
  store i32 %6, i32* %7, align 4, !dbg !7364
  store i32 1, i32* %retval, align 4, !dbg !7364
  br label %return, !dbg !7364

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !7366
  store i32 0, i32* %8, align 4, !dbg !7366
  store i32 0, i32* %retval, align 4, !dbg !7366
  br label %return, !dbg !7366

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !7359
  ret i32 %9, !dbg !7359
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !7368 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !7371, metadata !DIExpression()), !dbg !7372
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7373
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7373
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !7373
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !7373
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !7373
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !7373
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !7373
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7373

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7373
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7373
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !7373
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !7373
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !7373
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !7373
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !7373
  br label %cond.end, !dbg !7373

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7373

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7373
  %6 = load i32, i32* %num.addr, align 4, !dbg !7373
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !7373
  ret %struct.loop* %call, !dbg !7374
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !7375 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !7379, metadata !DIExpression()), !dbg !7380
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7381
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !7381
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !7381
  br i1 %tobool, label %if.then, label %if.end, !dbg !7380

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7381
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !7381
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !7381
  call void @free(i8* %4), !dbg !7381
  br label %if.end, !dbg !7381

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !7380
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !7380
  ret void, !dbg !7380
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @tree_predict_by_opcode(%struct.basic_block_def* %bb) #0 !dbg !7383 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %then_edge = alloca %struct.edge_def*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %cmp = alloca i32, align 4
  %visited = alloca %struct.bitmap_head_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7384, metadata !DIExpression()), !dbg !7385
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !7386, metadata !DIExpression()), !dbg !7387
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7388
  %call = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %0), !dbg !7389
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !7387
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge, metadata !7390, metadata !DIExpression()), !dbg !7391
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7392, metadata !DIExpression()), !dbg !7393
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7394, metadata !DIExpression()), !dbg !7395
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !7396, metadata !DIExpression()), !dbg !7397
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7398, metadata !DIExpression()), !dbg !7399
  call void @llvm.dbg.declare(metadata i32* %cmp, metadata !7400, metadata !DIExpression()), !dbg !7401
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited, metadata !7402, metadata !DIExpression()), !dbg !7403
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7404, metadata !DIExpression()), !dbg !7405
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7406
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !7406
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7408

lor.lhs.false:                                    ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7409
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !7410
  %cmp2 = icmp ne i32 %call1, 1, !dbg !7411
  br i1 %cmp2, label %if.then, label %if.end, !dbg !7412

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %if.end152, !dbg !7413

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7414
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !7414
  %call3 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !7414
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7414
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !7414
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 0, !dbg !7414
  store i32 %6, i32* %5, align 8, !dbg !7414
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !7414
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call3, 1, !dbg !7414
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !7414
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7414
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7414
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !7414
  br label %for.cond, !dbg !7414

for.cond:                                         ; preds = %for.inc, %if.end
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7416
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !7416
  %13 = load i32, i32* %12, align 8, !dbg !7416
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !7416
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !7416
  %call4 = call zeroext i8 @ei_cond(i32 %13, %struct.VEC_edge_gc** %15, %struct.edge_def** %then_edge), !dbg !7416
  %tobool5 = icmp ne i8 %call4, 0, !dbg !7414
  br i1 %tobool5, label %for.body, label %for.end, !dbg !7414

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7418
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !7420
  %17 = load i32, i32* %flags, align 8, !dbg !7420
  %and = and i32 %17, 1024, !dbg !7421
  %tobool6 = icmp ne i32 %and, 0, !dbg !7421
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7422

if.then7:                                         ; preds = %for.body
  br label %for.end, !dbg !7423

if.end8:                                          ; preds = %for.body
  br label %for.inc, !dbg !7424

for.inc:                                          ; preds = %if.end8
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7416
  br label %for.cond, !dbg !7416, !llvm.loop !7425

for.end:                                          ; preds = %if.then7, %for.cond
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7427
  %call9 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %18), !dbg !7428
  store %union.tree_node* %call9, %union.tree_node** %op0, align 8, !dbg !7429
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7430
  %call10 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %19), !dbg !7431
  store %union.tree_node* %call10, %union.tree_node** %op1, align 8, !dbg !7432
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7433
  %call11 = call i32 @gimple_cond_code(%union.gimple_statement_d* %20), !dbg !7434
  store i32 %call11, i32* %cmp, align 4, !dbg !7435
  %21 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7436
  %common = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !7436
  %type12 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7436
  %22 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !7436
  store %union.tree_node* %22, %union.tree_node** %type, align 8, !dbg !7437
  %call13 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !7438
  store %struct.bitmap_head_def* %call13, %struct.bitmap_head_def** %visited, align 8, !dbg !7439
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7440
  %24 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7441
  %25 = load i32, i32* %cmp, align 4, !dbg !7442
  %26 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7443
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !7444
  %call14 = call %union.tree_node* @expr_expected_value_1(%union.tree_node* %23, %union.tree_node* %24, i32 %25, %union.tree_node* %26, %struct.bitmap_head_def* %27), !dbg !7445
  store %union.tree_node* %call14, %union.tree_node** %val, align 8, !dbg !7446
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited, align 8, !dbg !7447
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %28), !dbg !7447
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %visited, align 8, !dbg !7447
  %29 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7448
  %tobool15 = icmp ne %union.tree_node* %29, null, !dbg !7448
  br i1 %tobool15, label %if.then16, label %if.end21, !dbg !7450

if.then16:                                        ; preds = %for.end
  %30 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7451
  %call17 = call i32 @integer_zerop(%union.tree_node* %30), !dbg !7454
  %tobool18 = icmp ne i32 %call17, 0, !dbg !7454
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !7455

if.then19:                                        ; preds = %if.then16
  %31 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7456
  call void @predict_edge_def(%struct.edge_def* %31, i32 6, i32 0), !dbg !7457
  br label %if.end20, !dbg !7457

if.else:                                          ; preds = %if.then16
  %32 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7458
  call void @predict_edge_def(%struct.edge_def* %32, i32 6, i32 1), !dbg !7459
  br label %if.end20

if.end20:                                         ; preds = %if.else, %if.then19
  br label %if.end152, !dbg !7460

if.end21:                                         ; preds = %for.end
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7461
  %base = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !7461
  %34 = bitcast %struct.tree_base* %base to i64*, !dbg !7461
  %bf.load = load i64, i64* %34, align 8, !dbg !7461
  %bf.clear = and i64 %bf.load, 65535, !dbg !7461
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7461
  %cmp22 = icmp eq i32 %bf.cast, 10, !dbg !7461
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !7461

lor.lhs.false23:                                  ; preds = %if.end21
  %35 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7461
  %base24 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !7461
  %36 = bitcast %struct.tree_base* %base24 to i64*, !dbg !7461
  %bf.load25 = load i64, i64* %36, align 8, !dbg !7461
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !7461
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7461
  %cmp28 = icmp eq i32 %bf.cast27, 12, !dbg !7461
  br i1 %cmp28, label %if.then29, label %if.else37, !dbg !7463

if.then29:                                        ; preds = %lor.lhs.false23, %if.end21
  %37 = load i32, i32* %cmp, align 4, !dbg !7464
  %cmp30 = icmp eq i32 %37, 101, !dbg !7467
  br i1 %cmp30, label %if.then31, label %if.else32, !dbg !7468

if.then31:                                        ; preds = %if.then29
  %38 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7469
  call void @predict_edge_def(%struct.edge_def* %38, i32 14, i32 0), !dbg !7470
  br label %if.end36, !dbg !7470

if.else32:                                        ; preds = %if.then29
  %39 = load i32, i32* %cmp, align 4, !dbg !7471
  %cmp33 = icmp eq i32 %39, 102, !dbg !7473
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !7474

if.then34:                                        ; preds = %if.else32
  %40 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7475
  call void @predict_edge_def(%struct.edge_def* %40, i32 14, i32 1), !dbg !7476
  br label %if.end35, !dbg !7476

if.end35:                                         ; preds = %if.then34, %if.else32
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then31
  br label %if.end152, !dbg !7477

if.else37:                                        ; preds = %lor.lhs.false23
  %41 = load i32, i32* %cmp, align 4, !dbg !7478
  switch i32 %41, label %sw.default [
    i32 101, label %sw.bb
    i32 109, label %sw.bb
    i32 102, label %sw.bb73
    i32 110, label %sw.bb73
    i32 104, label %sw.bb110
    i32 103, label %sw.bb111
    i32 98, label %sw.bb112
    i32 97, label %sw.bb112
    i32 100, label %sw.bb132
    i32 99, label %sw.bb132
  ], !dbg !7479

sw.bb:                                            ; preds = %if.else37, %if.else37
  %42 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7480
  %base38 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !7480
  %43 = bitcast %struct.tree_base* %base38 to i64*, !dbg !7480
  %bf.load39 = load i64, i64* %43, align 8, !dbg !7480
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !7480
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !7480
  %cmp42 = icmp eq i32 %bf.cast41, 9, !dbg !7480
  br i1 %cmp42, label %if.then62, label %lor.lhs.false43, !dbg !7480

lor.lhs.false43:                                  ; preds = %sw.bb
  %44 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7480
  %base44 = bitcast %union.tree_node* %44 to %struct.tree_base*, !dbg !7480
  %45 = bitcast %struct.tree_base* %base44 to i64*, !dbg !7480
  %bf.load45 = load i64, i64* %45, align 8, !dbg !7480
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !7480
  %bf.cast47 = trunc i64 %bf.clear46 to i32, !dbg !7480
  %cmp48 = icmp eq i32 %bf.cast47, 13, !dbg !7480
  br i1 %cmp48, label %land.lhs.true, label %lor.lhs.false49, !dbg !7480

lor.lhs.false49:                                  ; preds = %lor.lhs.false43
  %46 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7480
  %base50 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !7480
  %47 = bitcast %struct.tree_base* %base50 to i64*, !dbg !7480
  %bf.load51 = load i64, i64* %47, align 8, !dbg !7480
  %bf.clear52 = and i64 %bf.load51, 65535, !dbg !7480
  %bf.cast53 = trunc i64 %bf.clear52 to i32, !dbg !7480
  %cmp54 = icmp eq i32 %bf.cast53, 14, !dbg !7480
  br i1 %cmp54, label %land.lhs.true, label %if.else63, !dbg !7480

land.lhs.true:                                    ; preds = %lor.lhs.false49, %lor.lhs.false43
  %48 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7480
  %common55 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !7480
  %type56 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common55, i32 0, i32 2, !dbg !7480
  %49 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !7480
  %base57 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !7480
  %50 = bitcast %struct.tree_base* %base57 to i64*, !dbg !7480
  %bf.load58 = load i64, i64* %50, align 8, !dbg !7480
  %bf.clear59 = and i64 %bf.load58, 65535, !dbg !7480
  %bf.cast60 = trunc i64 %bf.clear59 to i32, !dbg !7480
  %cmp61 = icmp eq i32 %bf.cast60, 9, !dbg !7480
  br i1 %cmp61, label %if.then62, label %if.else63, !dbg !7483

if.then62:                                        ; preds = %land.lhs.true, %sw.bb
  br label %if.end72, !dbg !7483

if.else63:                                        ; preds = %land.lhs.true, %lor.lhs.false49
  %51 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7484
  %call64 = call i32 @integer_zerop(%union.tree_node* %51), !dbg !7486
  %tobool65 = icmp ne i32 %call64, 0, !dbg !7486
  br i1 %tobool65, label %if.then69, label %lor.lhs.false66, !dbg !7487

lor.lhs.false66:                                  ; preds = %if.else63
  %52 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7488
  %call67 = call i32 @integer_zerop(%union.tree_node* %52), !dbg !7489
  %tobool68 = icmp ne i32 %call67, 0, !dbg !7489
  br i1 %tobool68, label %if.then69, label %if.else70, !dbg !7490

if.then69:                                        ; preds = %lor.lhs.false66, %if.else63
  br label %if.end71, !dbg !7490

if.else70:                                        ; preds = %lor.lhs.false66
  %53 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7491
  call void @predict_edge_def(%struct.edge_def* %53, i32 19, i32 0), !dbg !7492
  br label %if.end71

if.end71:                                         ; preds = %if.else70, %if.then69
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then62
  br label %sw.epilog, !dbg !7493

sw.bb73:                                          ; preds = %if.else37, %if.else37
  %54 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7494
  %base74 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !7494
  %55 = bitcast %struct.tree_base* %base74 to i64*, !dbg !7494
  %bf.load75 = load i64, i64* %55, align 8, !dbg !7494
  %bf.clear76 = and i64 %bf.load75, 65535, !dbg !7494
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !7494
  %cmp78 = icmp eq i32 %bf.cast77, 9, !dbg !7494
  br i1 %cmp78, label %if.then99, label %lor.lhs.false79, !dbg !7494

lor.lhs.false79:                                  ; preds = %sw.bb73
  %56 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7494
  %base80 = bitcast %union.tree_node* %56 to %struct.tree_base*, !dbg !7494
  %57 = bitcast %struct.tree_base* %base80 to i64*, !dbg !7494
  %bf.load81 = load i64, i64* %57, align 8, !dbg !7494
  %bf.clear82 = and i64 %bf.load81, 65535, !dbg !7494
  %bf.cast83 = trunc i64 %bf.clear82 to i32, !dbg !7494
  %cmp84 = icmp eq i32 %bf.cast83, 13, !dbg !7494
  br i1 %cmp84, label %land.lhs.true91, label %lor.lhs.false85, !dbg !7494

lor.lhs.false85:                                  ; preds = %lor.lhs.false79
  %58 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7494
  %base86 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !7494
  %59 = bitcast %struct.tree_base* %base86 to i64*, !dbg !7494
  %bf.load87 = load i64, i64* %59, align 8, !dbg !7494
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !7494
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !7494
  %cmp90 = icmp eq i32 %bf.cast89, 14, !dbg !7494
  br i1 %cmp90, label %land.lhs.true91, label %if.else100, !dbg !7494

land.lhs.true91:                                  ; preds = %lor.lhs.false85, %lor.lhs.false79
  %60 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7494
  %common92 = bitcast %union.tree_node* %60 to %struct.tree_common*, !dbg !7494
  %type93 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common92, i32 0, i32 2, !dbg !7494
  %61 = load %union.tree_node*, %union.tree_node** %type93, align 8, !dbg !7494
  %base94 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !7494
  %62 = bitcast %struct.tree_base* %base94 to i64*, !dbg !7494
  %bf.load95 = load i64, i64* %62, align 8, !dbg !7494
  %bf.clear96 = and i64 %bf.load95, 65535, !dbg !7494
  %bf.cast97 = trunc i64 %bf.clear96 to i32, !dbg !7494
  %cmp98 = icmp eq i32 %bf.cast97, 9, !dbg !7494
  br i1 %cmp98, label %if.then99, label %if.else100, !dbg !7496

if.then99:                                        ; preds = %land.lhs.true91, %sw.bb73
  br label %if.end109, !dbg !7496

if.else100:                                       ; preds = %land.lhs.true91, %lor.lhs.false85
  %63 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7497
  %call101 = call i32 @integer_zerop(%union.tree_node* %63), !dbg !7499
  %tobool102 = icmp ne i32 %call101, 0, !dbg !7499
  br i1 %tobool102, label %if.then106, label %lor.lhs.false103, !dbg !7500

lor.lhs.false103:                                 ; preds = %if.else100
  %64 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7501
  %call104 = call i32 @integer_zerop(%union.tree_node* %64), !dbg !7502
  %tobool105 = icmp ne i32 %call104, 0, !dbg !7502
  br i1 %tobool105, label %if.then106, label %if.else107, !dbg !7503

if.then106:                                       ; preds = %lor.lhs.false103, %if.else100
  br label %if.end108, !dbg !7503

if.else107:                                       ; preds = %lor.lhs.false103
  %65 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7504
  call void @predict_edge_def(%struct.edge_def* %65, i32 19, i32 1), !dbg !7505
  br label %if.end108

if.end108:                                        ; preds = %if.else107, %if.then106
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then99
  br label %sw.epilog, !dbg !7506

sw.bb110:                                         ; preds = %if.else37
  %66 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7507
  call void @predict_edge_def(%struct.edge_def* %66, i32 20, i32 1), !dbg !7508
  br label %sw.epilog, !dbg !7509

sw.bb111:                                         ; preds = %if.else37
  %67 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7510
  call void @predict_edge_def(%struct.edge_def* %67, i32 20, i32 0), !dbg !7511
  br label %sw.epilog, !dbg !7512

sw.bb112:                                         ; preds = %if.else37, %if.else37
  %68 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7513
  %call113 = call i32 @integer_zerop(%union.tree_node* %68), !dbg !7515
  %tobool114 = icmp ne i32 %call113, 0, !dbg !7515
  br i1 %tobool114, label %if.then130, label %lor.lhs.false115, !dbg !7516

lor.lhs.false115:                                 ; preds = %sw.bb112
  %69 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7517
  %call116 = call i32 @integer_onep(%union.tree_node* %69), !dbg !7518
  %tobool117 = icmp ne i32 %call116, 0, !dbg !7518
  br i1 %tobool117, label %if.then130, label %lor.lhs.false118, !dbg !7519

lor.lhs.false118:                                 ; preds = %lor.lhs.false115
  %70 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7520
  %call119 = call i32 @integer_all_onesp(%union.tree_node* %70), !dbg !7521
  %tobool120 = icmp ne i32 %call119, 0, !dbg !7521
  br i1 %tobool120, label %if.then130, label %lor.lhs.false121, !dbg !7522

lor.lhs.false121:                                 ; preds = %lor.lhs.false118
  %71 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7523
  %call122 = call i32 @real_zerop(%union.tree_node* %71), !dbg !7524
  %tobool123 = icmp ne i32 %call122, 0, !dbg !7524
  br i1 %tobool123, label %if.then130, label %lor.lhs.false124, !dbg !7525

lor.lhs.false124:                                 ; preds = %lor.lhs.false121
  %72 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7526
  %call125 = call i32 @real_onep(%union.tree_node* %72), !dbg !7527
  %tobool126 = icmp ne i32 %call125, 0, !dbg !7527
  br i1 %tobool126, label %if.then130, label %lor.lhs.false127, !dbg !7528

lor.lhs.false127:                                 ; preds = %lor.lhs.false124
  %73 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7529
  %call128 = call i32 @real_minus_onep(%union.tree_node* %73), !dbg !7530
  %tobool129 = icmp ne i32 %call128, 0, !dbg !7530
  br i1 %tobool129, label %if.then130, label %if.end131, !dbg !7531

if.then130:                                       ; preds = %lor.lhs.false127, %lor.lhs.false124, %lor.lhs.false121, %lor.lhs.false118, %lor.lhs.false115, %sw.bb112
  %74 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7532
  call void @predict_edge_def(%struct.edge_def* %74, i32 18, i32 0), !dbg !7533
  br label %if.end131, !dbg !7533

if.end131:                                        ; preds = %if.then130, %lor.lhs.false127
  br label %sw.epilog, !dbg !7534

sw.bb132:                                         ; preds = %if.else37, %if.else37
  %75 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7535
  %call133 = call i32 @integer_zerop(%union.tree_node* %75), !dbg !7537
  %tobool134 = icmp ne i32 %call133, 0, !dbg !7537
  br i1 %tobool134, label %if.then150, label %lor.lhs.false135, !dbg !7538

lor.lhs.false135:                                 ; preds = %sw.bb132
  %76 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7539
  %call136 = call i32 @integer_onep(%union.tree_node* %76), !dbg !7540
  %tobool137 = icmp ne i32 %call136, 0, !dbg !7540
  br i1 %tobool137, label %if.then150, label %lor.lhs.false138, !dbg !7541

lor.lhs.false138:                                 ; preds = %lor.lhs.false135
  %77 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7542
  %call139 = call i32 @integer_all_onesp(%union.tree_node* %77), !dbg !7543
  %tobool140 = icmp ne i32 %call139, 0, !dbg !7543
  br i1 %tobool140, label %if.then150, label %lor.lhs.false141, !dbg !7544

lor.lhs.false141:                                 ; preds = %lor.lhs.false138
  %78 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7545
  %call142 = call i32 @real_zerop(%union.tree_node* %78), !dbg !7546
  %tobool143 = icmp ne i32 %call142, 0, !dbg !7546
  br i1 %tobool143, label %if.then150, label %lor.lhs.false144, !dbg !7547

lor.lhs.false144:                                 ; preds = %lor.lhs.false141
  %79 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7548
  %call145 = call i32 @real_onep(%union.tree_node* %79), !dbg !7549
  %tobool146 = icmp ne i32 %call145, 0, !dbg !7549
  br i1 %tobool146, label %if.then150, label %lor.lhs.false147, !dbg !7550

lor.lhs.false147:                                 ; preds = %lor.lhs.false144
  %80 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7551
  %call148 = call i32 @real_minus_onep(%union.tree_node* %80), !dbg !7552
  %tobool149 = icmp ne i32 %call148, 0, !dbg !7552
  br i1 %tobool149, label %if.then150, label %if.end151, !dbg !7553

if.then150:                                       ; preds = %lor.lhs.false147, %lor.lhs.false144, %lor.lhs.false141, %lor.lhs.false138, %lor.lhs.false135, %sw.bb132
  %81 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !7554
  call void @predict_edge_def(%struct.edge_def* %81, i32 18, i32 1), !dbg !7555
  br label %if.end151, !dbg !7555

if.end151:                                        ; preds = %if.then150, %lor.lhs.false147
  br label %sw.epilog, !dbg !7556

sw.default:                                       ; preds = %if.else37
  br label %sw.epilog, !dbg !7557

sw.epilog:                                        ; preds = %sw.default, %if.end151, %if.end131, %sw.bb111, %sw.bb110, %if.end109, %if.end72
  br label %if.end152

if.end152:                                        ; preds = %if.then, %if.end20, %sw.epilog, %if.end36
  ret void, !dbg !7558
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7559 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7560, metadata !DIExpression()), !dbg !7561
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7562
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7563
  ret %union.tree_node* %call, !dbg !7564
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !7565 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7566, metadata !DIExpression()), !dbg !7567
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7568
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7569
  ret %union.tree_node* %call, !dbg !7570
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !7571 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7574, metadata !DIExpression()), !dbg !7575
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7576
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7577
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7578
  %bf.load = load i32, i32* %1, align 8, !dbg !7578
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7578
  ret i32 %bf.lshr, !dbg !7579
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @expr_expected_value_1(%union.tree_node* %type, %union.tree_node* %op0, i32 %code, %union.tree_node* %op1, %struct.bitmap_head_def* %visited) #0 !dbg !7580 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %type.addr = alloca %union.tree_node*, align 8
  %op0.addr = alloca %union.tree_node*, align 8
  %code.addr = alloca i32, align 4
  %op1.addr = alloca %union.tree_node*, align 8
  %visited.addr = alloca %struct.bitmap_head_def*, align 8
  %def = alloca %union.gimple_statement_d*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %val = alloca %union.tree_node*, align 8
  %new_val = alloca %union.tree_node*, align 8
  %arg = alloca %union.tree_node*, align 8
  %decl = alloca %union.tree_node*, align 8
  %val67 = alloca %union.tree_node*, align 8
  %res = alloca %union.tree_node*, align 8
  %res109 = alloca %union.tree_node*, align 8
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !7583, metadata !DIExpression()), !dbg !7584
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !7585, metadata !DIExpression()), !dbg !7586
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7587, metadata !DIExpression()), !dbg !7588
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !7589, metadata !DIExpression()), !dbg !7590
  store %struct.bitmap_head_def* %visited, %struct.bitmap_head_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited.addr, metadata !7591, metadata !DIExpression()), !dbg !7592
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %def, metadata !7593, metadata !DIExpression()), !dbg !7594
  %0 = load i32, i32* %code.addr, align 4, !dbg !7595
  %call = call i32 @get_gimple_rhs_class(i32 %0), !dbg !7597
  %cmp = icmp eq i32 %call, 3, !dbg !7598
  br i1 %cmp, label %if.then, label %if.end84, !dbg !7599

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7600
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !7600
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !7600
  %bf.load = load i64, i64* %2, align 8, !dbg !7600
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !7600
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7600
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7600
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7600
  br i1 %tobool, label %if.then1, label %if.end, !dbg !7603

if.then1:                                         ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7604
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7605
  br label %return, !dbg !7605

if.end:                                           ; preds = %if.then
  %4 = load i32, i32* %code.addr, align 4, !dbg !7606
  %cmp2 = icmp ne i32 %4, 141, !dbg !7608
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !7609

if.then3:                                         ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7610
  br label %return, !dbg !7610

if.end4:                                          ; preds = %if.end
  %5 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7611
  %ssa_name = bitcast %union.tree_node* %5 to %struct.tree_ssa_name*, !dbg !7611
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7611
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7611
  store %union.gimple_statement_d* %6, %union.gimple_statement_d** %def, align 8, !dbg !7612
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7613
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7615
  %ssa_name5 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !7615
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name5, i32 0, i32 3, !dbg !7615
  %9 = load i32, i32* %version, align 8, !dbg !7615
  %call6 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %9), !dbg !7616
  %tobool7 = icmp ne i32 %call6, 0, !dbg !7616
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !7617

if.then8:                                         ; preds = %if.end4
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7618
  br label %return, !dbg !7618

if.end9:                                          ; preds = %if.end4
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7619
  %11 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7620
  %ssa_name10 = bitcast %union.tree_node* %11 to %struct.tree_ssa_name*, !dbg !7620
  %version11 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 3, !dbg !7620
  %12 = load i32, i32* %version11, align 8, !dbg !7620
  %call12 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %10, i32 %12), !dbg !7621
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7622
  %call13 = call i32 @gimple_code(%union.gimple_statement_d* %13), !dbg !7624
  %cmp14 = icmp eq i32 %call13, 16, !dbg !7625
  br i1 %cmp14, label %if.then15, label %if.end36, !dbg !7626

if.then15:                                        ; preds = %if.end9
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7627, metadata !DIExpression()), !dbg !7629
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7630, metadata !DIExpression()), !dbg !7631
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7632
  %call16 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %14), !dbg !7633
  store i32 %call16, i32* %n, align 4, !dbg !7631
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !7634, metadata !DIExpression()), !dbg !7635
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !7635
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_val, metadata !7636, metadata !DIExpression()), !dbg !7637
  store i32 0, i32* %i, align 4, !dbg !7638
  br label %for.cond, !dbg !7640

for.cond:                                         ; preds = %for.inc, %if.then15
  %15 = load i32, i32* %i, align 4, !dbg !7641
  %16 = load i32, i32* %n, align 4, !dbg !7643
  %cmp17 = icmp slt i32 %15, %16, !dbg !7644
  br i1 %cmp17, label %for.body, label %for.end, !dbg !7645

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !7646, metadata !DIExpression()), !dbg !7648
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7649
  %18 = load i32, i32* %i, align 4, !dbg !7649
  %call18 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %17, i32 %18), !dbg !7649
  %call19 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call18), !dbg !7649
  store %union.tree_node* %call19, %union.tree_node** %arg, align 8, !dbg !7648
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7650
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7652
  %call20 = call %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %20), !dbg !7652
  %call21 = call %union.tree_node* @get_def_from_ptr(%union.tree_node** %call20), !dbg !7652
  %cmp22 = icmp eq %union.tree_node* %19, %call21, !dbg !7653
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !7654

if.then23:                                        ; preds = %for.body
  br label %for.inc, !dbg !7655

if.end24:                                         ; preds = %for.body
  %21 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !7656
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7657
  %call25 = call %union.tree_node* @expr_expected_value(%union.tree_node* %21, %struct.bitmap_head_def* %22), !dbg !7658
  store %union.tree_node* %call25, %union.tree_node** %new_val, align 8, !dbg !7659
  %23 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !7660
  %tobool26 = icmp ne %union.tree_node* %23, null, !dbg !7660
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !7662

if.then27:                                        ; preds = %if.end24
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7663
  br label %return, !dbg !7663

if.end28:                                         ; preds = %if.end24
  %24 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7664
  %tobool29 = icmp ne %union.tree_node* %24, null, !dbg !7664
  br i1 %tobool29, label %if.else, label %if.then30, !dbg !7666

if.then30:                                        ; preds = %if.end28
  %25 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !7667
  store %union.tree_node* %25, %union.tree_node** %val, align 8, !dbg !7668
  br label %if.end35, !dbg !7669

if.else:                                          ; preds = %if.end28
  %26 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7670
  %27 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !7672
  %call31 = call i32 @operand_equal_p(%union.tree_node* %26, %union.tree_node* %27, i32 0), !dbg !7673
  %tobool32 = icmp ne i32 %call31, 0, !dbg !7673
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !7674

if.then33:                                        ; preds = %if.else
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7675
  br label %return, !dbg !7675

if.end34:                                         ; preds = %if.else
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then30
  br label %for.inc, !dbg !7676

for.inc:                                          ; preds = %if.end35, %if.then23
  %28 = load i32, i32* %i, align 4, !dbg !7677
  %inc = add nsw i32 %28, 1, !dbg !7677
  store i32 %inc, i32* %i, align 4, !dbg !7677
  br label %for.cond, !dbg !7678, !llvm.loop !7679

for.end:                                          ; preds = %for.cond
  %29 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !7681
  store %union.tree_node* %29, %union.tree_node** %retval, align 8, !dbg !7682
  br label %return, !dbg !7682

if.end36:                                         ; preds = %if.end9
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7683
  %call37 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %30), !dbg !7685
  %tobool38 = icmp ne i8 %call37, 0, !dbg !7685
  br i1 %tobool38, label %if.then39, label %if.end50, !dbg !7686

if.then39:                                        ; preds = %if.end36
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7687
  %call40 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %31), !dbg !7690
  %32 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7691
  %cmp41 = icmp ne %union.tree_node* %call40, %32, !dbg !7692
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !7693

if.then42:                                        ; preds = %if.then39
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7694
  br label %return, !dbg !7694

if.end43:                                         ; preds = %if.then39
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7695
  %call44 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %33), !dbg !7695
  %common = bitcast %union.tree_node* %call44 to %struct.tree_common*, !dbg !7695
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7695
  %34 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !7695
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7696
  %call46 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %35), !dbg !7697
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7698
  %call47 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %36), !dbg !7699
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7700
  %call48 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %37), !dbg !7701
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7702
  %call49 = call %union.tree_node* @expr_expected_value_1(%union.tree_node* %34, %union.tree_node* %call46, i32 %call47, %union.tree_node* %call48, %struct.bitmap_head_def* %38), !dbg !7703
  store %union.tree_node* %call49, %union.tree_node** %retval, align 8, !dbg !7704
  br label %return, !dbg !7704

if.end50:                                         ; preds = %if.end36
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7705
  %call51 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %39), !dbg !7707
  %tobool52 = icmp ne i8 %call51, 0, !dbg !7707
  br i1 %tobool52, label %if.then53, label %if.end83, !dbg !7708

if.then53:                                        ; preds = %if.end50
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !7709, metadata !DIExpression()), !dbg !7711
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7712
  %call54 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %40), !dbg !7713
  store %union.tree_node* %call54, %union.tree_node** %decl, align 8, !dbg !7711
  %41 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7714
  %tobool55 = icmp ne %union.tree_node* %41, null, !dbg !7714
  br i1 %tobool55, label %if.end57, label %if.then56, !dbg !7716

if.then56:                                        ; preds = %if.then53
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7717
  br label %return, !dbg !7717

if.end57:                                         ; preds = %if.then53
  %42 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7718
  %function_decl = bitcast %union.tree_node* %42 to %struct.tree_function_decl*, !dbg !7718
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !7718
  %bf.load58 = load i32, i32* %built_in_class, align 8, !dbg !7718
  %bf.lshr59 = lshr i32 %bf.load58, 11, !dbg !7718
  %bf.clear60 = and i32 %bf.lshr59, 3, !dbg !7718
  %cmp61 = icmp eq i32 %bf.clear60, 3, !dbg !7720
  br i1 %cmp61, label %land.lhs.true, label %if.end82, !dbg !7721

land.lhs.true:                                    ; preds = %if.end57
  %43 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7722
  %function_decl62 = bitcast %union.tree_node* %43 to %struct.tree_function_decl*, !dbg !7722
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl62, i32 0, i32 5, !dbg !7722
  %bf.load63 = load i32, i32* %function_code, align 8, !dbg !7722
  %bf.clear64 = and i32 %bf.load63, 2047, !dbg !7722
  %cmp65 = icmp eq i32 %bf.clear64, 446, !dbg !7723
  br i1 %cmp65, label %if.then66, label %if.end82, !dbg !7724

if.then66:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %val67, metadata !7725, metadata !DIExpression()), !dbg !7727
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7728
  %call68 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %44), !dbg !7730
  %cmp69 = icmp ne i32 %call68, 2, !dbg !7731
  br i1 %cmp69, label %if.then70, label %if.end71, !dbg !7732

if.then70:                                        ; preds = %if.then66
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7733
  br label %return, !dbg !7733

if.end71:                                         ; preds = %if.then66
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7734
  %call72 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %45, i32 0), !dbg !7735
  store %union.tree_node* %call72, %union.tree_node** %val67, align 8, !dbg !7736
  %46 = load %union.tree_node*, %union.tree_node** %val67, align 8, !dbg !7737
  %base73 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !7737
  %47 = bitcast %struct.tree_base* %base73 to i64*, !dbg !7737
  %bf.load74 = load i64, i64* %47, align 8, !dbg !7737
  %bf.lshr75 = lshr i64 %bf.load74, 17, !dbg !7737
  %bf.clear76 = and i64 %bf.lshr75, 1, !dbg !7737
  %bf.cast77 = trunc i64 %bf.clear76 to i32, !dbg !7737
  %tobool78 = icmp ne i32 %bf.cast77, 0, !dbg !7737
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !7739

if.then79:                                        ; preds = %if.end71
  %48 = load %union.tree_node*, %union.tree_node** %val67, align 8, !dbg !7740
  store %union.tree_node* %48, %union.tree_node** %retval, align 8, !dbg !7741
  br label %return, !dbg !7741

if.end80:                                         ; preds = %if.end71
  %49 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def, align 8, !dbg !7742
  %call81 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %49, i32 1), !dbg !7743
  store %union.tree_node* %call81, %union.tree_node** %retval, align 8, !dbg !7744
  br label %return, !dbg !7744

if.end82:                                         ; preds = %land.lhs.true, %if.end57
  br label %if.end83, !dbg !7745

if.end83:                                         ; preds = %if.end82, %if.end50
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7746
  br label %return, !dbg !7746

if.end84:                                         ; preds = %entry
  %50 = load i32, i32* %code.addr, align 4, !dbg !7747
  %call85 = call i32 @get_gimple_rhs_class(i32 %50), !dbg !7749
  %cmp86 = icmp eq i32 %call85, 1, !dbg !7750
  br i1 %cmp86, label %if.then87, label %if.end105, !dbg !7751

if.then87:                                        ; preds = %if.end84
  call void @llvm.dbg.declare(metadata %union.tree_node** %res, metadata !7752, metadata !DIExpression()), !dbg !7754
  %51 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7755
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7756
  %call88 = call %union.tree_node* @expr_expected_value(%union.tree_node* %51, %struct.bitmap_head_def* %52), !dbg !7757
  store %union.tree_node* %call88, %union.tree_node** %op0.addr, align 8, !dbg !7758
  %53 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7759
  %tobool89 = icmp ne %union.tree_node* %53, null, !dbg !7759
  br i1 %tobool89, label %if.end91, label %if.then90, !dbg !7761

if.then90:                                        ; preds = %if.then87
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7762
  br label %return, !dbg !7762

if.end91:                                         ; preds = %if.then87
  %54 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !7763
  %55 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7764
  %call92 = call %union.tree_node* @expr_expected_value(%union.tree_node* %54, %struct.bitmap_head_def* %55), !dbg !7765
  store %union.tree_node* %call92, %union.tree_node** %op1.addr, align 8, !dbg !7766
  %56 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !7767
  %tobool93 = icmp ne %union.tree_node* %56, null, !dbg !7767
  br i1 %tobool93, label %if.end95, label %if.then94, !dbg !7769

if.then94:                                        ; preds = %if.end91
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7770
  br label %return, !dbg !7770

if.end95:                                         ; preds = %if.end91
  %57 = load i32, i32* %code.addr, align 4, !dbg !7771
  %58 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7771
  %59 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7771
  %60 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !7771
  %call96 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %57, %union.tree_node* %58, %union.tree_node* %59, %union.tree_node* %60), !dbg !7771
  store %union.tree_node* %call96, %union.tree_node** %res, align 8, !dbg !7772
  %61 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7773
  %base97 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !7773
  %62 = bitcast %struct.tree_base* %base97 to i64*, !dbg !7773
  %bf.load98 = load i64, i64* %62, align 8, !dbg !7773
  %bf.lshr99 = lshr i64 %bf.load98, 17, !dbg !7773
  %bf.clear100 = and i64 %bf.lshr99, 1, !dbg !7773
  %bf.cast101 = trunc i64 %bf.clear100 to i32, !dbg !7773
  %tobool102 = icmp ne i32 %bf.cast101, 0, !dbg !7773
  br i1 %tobool102, label %if.then103, label %if.end104, !dbg !7775

if.then103:                                       ; preds = %if.end95
  %63 = load %union.tree_node*, %union.tree_node** %res, align 8, !dbg !7776
  store %union.tree_node* %63, %union.tree_node** %retval, align 8, !dbg !7777
  br label %return, !dbg !7777

if.end104:                                        ; preds = %if.end95
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7778
  br label %return, !dbg !7778

if.end105:                                        ; preds = %if.end84
  %64 = load i32, i32* %code.addr, align 4, !dbg !7779
  %call106 = call i32 @get_gimple_rhs_class(i32 %64), !dbg !7781
  %cmp107 = icmp eq i32 %call106, 2, !dbg !7782
  br i1 %cmp107, label %if.then108, label %if.end123, !dbg !7783

if.then108:                                       ; preds = %if.end105
  call void @llvm.dbg.declare(metadata %union.tree_node** %res109, metadata !7784, metadata !DIExpression()), !dbg !7786
  %65 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7787
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7788
  %call110 = call %union.tree_node* @expr_expected_value(%union.tree_node* %65, %struct.bitmap_head_def* %66), !dbg !7789
  store %union.tree_node* %call110, %union.tree_node** %op0.addr, align 8, !dbg !7790
  %67 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7791
  %tobool111 = icmp ne %union.tree_node* %67, null, !dbg !7791
  br i1 %tobool111, label %if.end113, label %if.then112, !dbg !7793

if.then112:                                       ; preds = %if.then108
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7794
  br label %return, !dbg !7794

if.end113:                                        ; preds = %if.then108
  %68 = load i32, i32* %code.addr, align 4, !dbg !7795
  %69 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !7795
  %70 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !7795
  %call114 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %68, %union.tree_node* %69, %union.tree_node* %70), !dbg !7795
  store %union.tree_node* %call114, %union.tree_node** %res109, align 8, !dbg !7796
  %71 = load %union.tree_node*, %union.tree_node** %res109, align 8, !dbg !7797
  %base115 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !7797
  %72 = bitcast %struct.tree_base* %base115 to i64*, !dbg !7797
  %bf.load116 = load i64, i64* %72, align 8, !dbg !7797
  %bf.lshr117 = lshr i64 %bf.load116, 17, !dbg !7797
  %bf.clear118 = and i64 %bf.lshr117, 1, !dbg !7797
  %bf.cast119 = trunc i64 %bf.clear118 to i32, !dbg !7797
  %tobool120 = icmp ne i32 %bf.cast119, 0, !dbg !7797
  br i1 %tobool120, label %if.then121, label %if.end122, !dbg !7799

if.then121:                                       ; preds = %if.end113
  %73 = load %union.tree_node*, %union.tree_node** %res109, align 8, !dbg !7800
  store %union.tree_node* %73, %union.tree_node** %retval, align 8, !dbg !7801
  br label %return, !dbg !7801

if.end122:                                        ; preds = %if.end113
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7802
  br label %return, !dbg !7802

if.end123:                                        ; preds = %if.end105
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7803
  br label %return, !dbg !7803

return:                                           ; preds = %if.end123, %if.end122, %if.then121, %if.then112, %if.end104, %if.then103, %if.then94, %if.then90, %if.end83, %if.end80, %if.then79, %if.then70, %if.then56, %if.end43, %if.then42, %for.end, %if.then33, %if.then27, %if.then8, %if.then3, %if.then1
  %74 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7804
  ret %union.tree_node* %74, !dbg !7804
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local i32 @integer_all_onesp(%union.tree_node*) #2

declare dso_local i32 @real_zerop(%union.tree_node*) #2

declare dso_local i32 @real_onep(%union.tree_node*) #2

declare dso_local i32 @real_minus_onep(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !7805 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7808, metadata !DIExpression()), !dbg !7809
  %0 = load i32, i32* %code.addr, align 4, !dbg !7810
  %idxprom = sext i32 %0 to i64, !dbg !7811
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !7811
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7811
  %conv = zext i8 %1 to i32, !dbg !7812
  ret i32 %conv, !dbg !7813
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) #0 !dbg !7814 {
entry:
  %def.addr = alloca %union.tree_node**, align 8
  store %union.tree_node** %def, %union.tree_node*** %def.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %def.addr, metadata !7818, metadata !DIExpression()), !dbg !7819
  %0 = load %union.tree_node**, %union.tree_node*** %def.addr, align 8, !dbg !7820
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7821
  ret %union.tree_node* %1, !dbg !7822
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) #0 !dbg !7823 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7824, metadata !DIExpression()), !dbg !7825
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7826
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !7827
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !7828
  ret %union.tree_node** %result, !dbg !7829
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @expr_expected_value(%union.tree_node* %expr, %struct.bitmap_head_def* %visited) #0 !dbg !7830 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %expr.addr = alloca %union.tree_node*, align 8
  %visited.addr = alloca %struct.bitmap_head_def*, align 8
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr.addr, metadata !7833, metadata !DIExpression()), !dbg !7834
  store %struct.bitmap_head_def* %visited, %struct.bitmap_head_def** %visited.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %visited.addr, metadata !7835, metadata !DIExpression()), !dbg !7836
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7837, metadata !DIExpression()), !dbg !7838
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7839, metadata !DIExpression()), !dbg !7840
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7841, metadata !DIExpression()), !dbg !7842
  %0 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7843
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7843
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7843
  %bf.load = load i64, i64* %1, align 8, !dbg !7843
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !7843
  %bf.clear = and i64 %bf.lshr, 1, !dbg !7843
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7843
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7843
  br i1 %tobool, label %if.then, label %if.end, !dbg !7845

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7846
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7847
  br label %return, !dbg !7847

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7848
  call void @extract_ops_from_tree(%union.tree_node* %3, i32* %code, %union.tree_node** %op0, %union.tree_node** %op1), !dbg !7849
  %4 = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !7850
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !7850
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7850
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7850
  %6 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7851
  %7 = load i32, i32* %code, align 4, !dbg !7852
  %8 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7853
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %visited.addr, align 8, !dbg !7854
  %call = call %union.tree_node* @expr_expected_value_1(%union.tree_node* %5, %union.tree_node* %6, i32 %7, %union.tree_node* %8, %struct.bitmap_head_def* %9), !dbg !7855
  store %union.tree_node* %call, %union.tree_node** %retval, align 8, !dbg !7856
  br label %return, !dbg !7856

return:                                           ; preds = %if.end, %if.then
  %10 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7857
  ret %union.tree_node* %10, !dbg !7857
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !7858 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7859, metadata !DIExpression()), !dbg !7860
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7861
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7862
  %cmp = icmp eq i32 %call, 6, !dbg !7863
  %conv = zext i1 %cmp to i32, !dbg !7863
  %conv1 = trunc i32 %conv to i8, !dbg !7862
  ret i8 %conv1, !dbg !7864
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7865 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7866, metadata !DIExpression()), !dbg !7867
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7868
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7869
  ret %union.tree_node* %call, !dbg !7870
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !7871 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7872, metadata !DIExpression()), !dbg !7873
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7874
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7875
  ret %union.tree_node* %call, !dbg !7876
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !7877 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7880, metadata !DIExpression()), !dbg !7881
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7882
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !7883
  store i32 %call, i32* %code, align 4, !dbg !7884
  %1 = load i32, i32* %code, align 4, !dbg !7885
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !7887
  %cmp = icmp eq i32 %call1, 3, !dbg !7888
  br i1 %cmp, label %if.then, label %if.end, !dbg !7889

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7890
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7890
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !7890
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7890
  %bf.load = load i64, i64* %3, align 8, !dbg !7890
  %bf.clear = and i64 %bf.load, 65535, !dbg !7890
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7890
  store i32 %bf.cast, i32* %code, align 4, !dbg !7891
  br label %if.end, !dbg !7892

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !7893
  ret i32 %4, !dbg !7894
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7895 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7896, metadata !DIExpression()), !dbg !7897
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7898
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7900
  %cmp = icmp uge i32 %call, 3, !dbg !7901
  br i1 %cmp, label %if.then, label %if.else, !dbg !7902

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7903
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7904
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7905
  br label %return, !dbg !7905

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7906
  br label %return, !dbg !7906

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7907
  ret %union.tree_node* %2, !dbg !7907
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7908 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7909, metadata !DIExpression()), !dbg !7910
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !7911, metadata !DIExpression()), !dbg !7912
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7913
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7914
  store i32 %call, i32* %num_ops, align 4, !dbg !7915
  %1 = load i32, i32* %num_ops, align 4, !dbg !7916
  %sub = sub i32 %1, 3, !dbg !7917
  ret i32 %sub, !dbg !7918
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7919 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7920, metadata !DIExpression()), !dbg !7921
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7922, metadata !DIExpression()), !dbg !7923
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7924
  %1 = load i32, i32* %index.addr, align 4, !dbg !7925
  %add = add i32 %1, 3, !dbg !7926
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !7927
  ret %union.tree_node* %call, !dbg !7928
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @extract_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !7929 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7930, metadata !DIExpression()), !dbg !7931
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7932, metadata !DIExpression()), !dbg !7933
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7934
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7935
  store i32 %call, i32* %code, align 4, !dbg !7933
  %1 = load i32, i32* %code, align 4, !dbg !7936
  %cmp = icmp eq i32 %1, 6, !dbg !7938
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7939

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7940
  %cmp1 = icmp eq i32 %2, 1, !dbg !7941
  br i1 %cmp1, label %if.then, label %if.else, !dbg !7942

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7943
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7944
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7945
  %bf.load = load i32, i32* %4, align 8, !dbg !7945
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7945
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !7946
  br label %return, !dbg !7946

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !7947
  %cmp2 = icmp eq i32 %5, 8, !dbg !7949
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7950

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !7951
  br label %return, !dbg !7951

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !7952
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7953
  br label %return, !dbg !7953

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7954
  ret i32 %6, !dbg !7954
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !7955 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7956, metadata !DIExpression()), !dbg !7957
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7958
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !7959
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !7960
  %1 = load i32, i32* %num_ops, align 4, !dbg !7960
  ret i32 %1, !dbg !7961
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_bb_predictions(%struct.basic_block_def* %bb) #0 !dbg !7962 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %preds = alloca i8**, align 8
  %pred = alloca %struct.edge_prediction*, align 8
  %next = alloca %struct.edge_prediction*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7963, metadata !DIExpression()), !dbg !7964
  call void @llvm.dbg.declare(metadata i8*** %preds, metadata !7965, metadata !DIExpression()), !dbg !7966
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @bb_predictions, align 8, !dbg !7967
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7968
  %2 = bitcast %struct.basic_block_def* %1 to i8*, !dbg !7968
  %call = call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2), !dbg !7969
  store i8** %call, i8*** %preds, align 8, !dbg !7966
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %pred, metadata !7970, metadata !DIExpression()), !dbg !7971
  call void @llvm.dbg.declare(metadata %struct.edge_prediction** %next, metadata !7972, metadata !DIExpression()), !dbg !7973
  %3 = load i8**, i8*** %preds, align 8, !dbg !7974
  %tobool = icmp ne i8** %3, null, !dbg !7974
  br i1 %tobool, label %if.end, label %if.then, !dbg !7976

if.then:                                          ; preds = %entry
  br label %return, !dbg !7977

if.end:                                           ; preds = %entry
  %4 = load i8**, i8*** %preds, align 8, !dbg !7978
  %5 = load i8*, i8** %4, align 8, !dbg !7980
  %6 = bitcast i8* %5 to %struct.edge_prediction*, !dbg !7981
  store %struct.edge_prediction* %6, %struct.edge_prediction** %pred, align 8, !dbg !7982
  br label %for.cond, !dbg !7983

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !7984
  %tobool1 = icmp ne %struct.edge_prediction* %7, null, !dbg !7986
  br i1 %tobool1, label %for.body, label %for.end, !dbg !7986

for.body:                                         ; preds = %for.cond
  %8 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !7987
  %ep_next = getelementptr inbounds %struct.edge_prediction, %struct.edge_prediction* %8, i32 0, i32 0, !dbg !7989
  %9 = load %struct.edge_prediction*, %struct.edge_prediction** %ep_next, align 8, !dbg !7989
  store %struct.edge_prediction* %9, %struct.edge_prediction** %next, align 8, !dbg !7990
  %10 = load %struct.edge_prediction*, %struct.edge_prediction** %pred, align 8, !dbg !7991
  %11 = bitcast %struct.edge_prediction* %10 to i8*, !dbg !7991
  call void @free(i8* %11), !dbg !7992
  br label %for.inc, !dbg !7993

for.inc:                                          ; preds = %for.body
  %12 = load %struct.edge_prediction*, %struct.edge_prediction** %next, align 8, !dbg !7994
  store %struct.edge_prediction* %12, %struct.edge_prediction** %pred, align 8, !dbg !7995
  br label %for.cond, !dbg !7996, !llvm.loop !7997

for.end:                                          ; preds = %for.cond
  %13 = load i8**, i8*** %preds, align 8, !dbg !7999
  store i8* null, i8** %13, align 8, !dbg !8000
  br label %return, !dbg !8001

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !8001
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8002 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8005, metadata !DIExpression()), !dbg !8006
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8007
  %3 = load i32, i32* %index, align 8, !dbg !8007
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8008
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !8008
  %6 = load i32, i32* %5, align 8, !dbg !8008
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !8008
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !8008
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !8008
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8008
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8008

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8008
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8008
  %11 = load i32, i32* %10, align 8, !dbg !8008
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8008
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !8008
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !8008
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8008
  br label %cond.end, !dbg !8008

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8008

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8008
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8008
  %cmp = icmp eq i32 %3, %call2, !dbg !8009
  %conv = zext i1 %cmp to i32, !dbg !8009
  %conv3 = trunc i32 %conv to i8, !dbg !8010
  ret i8 %conv3, !dbg !8011
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8012 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8015, metadata !DIExpression()), !dbg !8016
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8017
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8017
  %5 = load i32, i32* %4, align 8, !dbg !8017
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8017
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8017
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8017
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !8017
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8017

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !8017
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !8017
  %10 = load i32, i32* %9, align 8, !dbg !8017
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !8017
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !8017
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !8017
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !8017
  br label %cond.end, !dbg !8017

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8017

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8017
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !8017
  %13 = load i32, i32* %index, align 8, !dbg !8017
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !8017
  ret %struct.edge_def* %call2, !dbg !8018
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !8019 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !8022, metadata !DIExpression()), !dbg !8023
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8024
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !8024
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !8024
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8024

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.46, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0)), !dbg !8024
  br label %cond.end, !dbg !8024

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8024

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8024
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !8025
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !8025
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !8026
  ret %struct.VEC_edge_gc* %5, !dbg !8027
}

; Function Attrs: noinline nounwind uwtable
define internal void @estimate_loops_at_level(%struct.loop* %first_loop) #0 !dbg !8028 {
entry:
  %first_loop.addr = alloca %struct.loop*, align 8
  %loop = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %tovisit = alloca %struct.bitmap_head_def*, align 8
  store %struct.loop* %first_loop, %struct.loop** %first_loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %first_loop.addr, metadata !8031, metadata !DIExpression()), !dbg !8032
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct.loop*, %struct.loop** %first_loop.addr, align 8, !dbg !8035
  store %struct.loop* %0, %struct.loop** %loop, align 8, !dbg !8037
  br label %for.cond, !dbg !8038

for.cond:                                         ; preds = %for.inc6, %entry
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8039
  %tobool = icmp ne %struct.loop* %1, null, !dbg !8041
  br i1 %tobool, label %for.body, label %for.end7, !dbg !8041

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8042, metadata !DIExpression()), !dbg !8044
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !8045, metadata !DIExpression()), !dbg !8046
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8047, metadata !DIExpression()), !dbg !8048
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tovisit, metadata !8049, metadata !DIExpression()), !dbg !8050
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !8051
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %tovisit, align 8, !dbg !8050
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8052
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 8, !dbg !8053
  %3 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !8053
  call void @estimate_loops_at_level(%struct.loop* %3), !dbg !8054
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8055
  %call1 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %4), !dbg !8056
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !8057
  %5 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8058
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 3, !dbg !8058
  %6 = load i8*, i8** %aux, align 8, !dbg !8058
  %7 = bitcast i8* %6 to %struct.edge_info_def*, !dbg !8058
  %back_edge = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %7, i32 0, i32 1, !dbg !8059
  %bf.load = load i8, i8* %back_edge, align 8, !dbg !8060
  %bf.clear = and i8 %bf.load, -2, !dbg !8060
  %bf.set = or i8 %bf.clear, 1, !dbg !8060
  store i8 %bf.set, i8* %back_edge, align 8, !dbg !8060
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8061
  %call2 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %8), !dbg !8062
  store %struct.basic_block_def** %call2, %struct.basic_block_def*** %bbs, align 8, !dbg !8063
  store i32 0, i32* %i, align 4, !dbg !8064
  br label %for.cond3, !dbg !8066

for.cond3:                                        ; preds = %for.inc, %for.body
  %9 = load i32, i32* %i, align 4, !dbg !8067
  %10 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8069
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 6, !dbg !8070
  %11 = load i32, i32* %num_nodes, align 4, !dbg !8070
  %cmp = icmp ult i32 %9, %11, !dbg !8071
  br i1 %cmp, label %for.body4, label %for.end, !dbg !8072

for.body4:                                        ; preds = %for.cond3
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !8073
  %13 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !8074
  %14 = load i32, i32* %i, align 4, !dbg !8075
  %idxprom = zext i32 %14 to i64, !dbg !8074
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %13, i64 %idxprom, !dbg !8074
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8074
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !8076
  %16 = load i32, i32* %index, align 8, !dbg !8076
  %call5 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %12, i32 %16), !dbg !8077
  br label %for.inc, !dbg !8077

for.inc:                                          ; preds = %for.body4
  %17 = load i32, i32* %i, align 4, !dbg !8078
  %inc = add i32 %17, 1, !dbg !8078
  store i32 %inc, i32* %i, align 4, !dbg !8078
  br label %for.cond3, !dbg !8079, !llvm.loop !8080

for.end:                                          ; preds = %for.cond3
  %18 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !8082
  %19 = bitcast %struct.basic_block_def** %18 to i8*, !dbg !8082
  call void @free(i8* %19), !dbg !8083
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8084
  %header = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 2, !dbg !8085
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8085
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !8086
  call void @propagate_freq(%struct.basic_block_def* %21, %struct.bitmap_head_def* %22), !dbg !8087
  %23 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit, align 8, !dbg !8088
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %23), !dbg !8088
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %tovisit, align 8, !dbg !8088
  br label %for.inc6, !dbg !8089

for.inc6:                                         ; preds = %for.end
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !8090
  %next = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 9, !dbg !8091
  %25 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !8091
  store %struct.loop* %25, %struct.loop** %loop, align 8, !dbg !8092
  br label %for.cond, !dbg !8093, !llvm.loop !8094

for.end7:                                         ; preds = %for.cond
  ret void, !dbg !8096
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_freq(%struct.basic_block_def* %head, %struct.bitmap_head_def* %tovisit) #0 !dbg !8097 {
entry:
  %head.addr = alloca %struct.basic_block_def*, align 8
  %tovisit.addr = alloca %struct.bitmap_head_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %nextbb = alloca %struct.basic_block_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %count = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %visit = alloca i8, align 1
  %ei34 = alloca %struct.edge_iterator, align 8
  %cyclic_probability = alloca %struct.sreal, align 8
  %frequency35 = alloca %struct.sreal, align 8
  %tmp41 = alloca %struct.edge_iterator, align 8
  %tmp62 = alloca %struct.sreal, align 8
  %tmp98 = alloca %struct.sreal, align 8
  %tmp109 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %head, %struct.basic_block_def** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %head.addr, metadata !8100, metadata !DIExpression()), !dbg !8101
  store %struct.bitmap_head_def* %tovisit, %struct.bitmap_head_def** %tovisit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tovisit.addr, metadata !8102, metadata !DIExpression()), !dbg !8103
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8104, metadata !DIExpression()), !dbg !8105
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !8106, metadata !DIExpression()), !dbg !8107
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8108, metadata !DIExpression()), !dbg !8109
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8110, metadata !DIExpression()), !dbg !8111
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %nextbb, metadata !8112, metadata !DIExpression()), !dbg !8113
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !8114, metadata !DIExpression()), !dbg !8122
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit.addr, align 8, !dbg !8123
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %0, i32 0, i32* %i), !dbg !8123
  br label %for.cond, !dbg !8123

for.cond:                                         ; preds = %for.inc28, %entry
  %call = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8125
  %tobool = icmp ne i8 %call, 0, !dbg !8123
  br i1 %tobool, label %for.body, label %for.end29, !dbg !8123

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8127, metadata !DIExpression()), !dbg !8129
  call void @llvm.dbg.declare(metadata i32* %count, metadata !8130, metadata !DIExpression()), !dbg !8131
  store i32 0, i32* %count, align 4, !dbg !8131
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8132
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !8132
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8132
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8132
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 2, !dbg !8132
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8132
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %3, null, !dbg !8132
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8132

cond.true:                                        ; preds = %for.body
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8132
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !8132
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !8132
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !8132
  %x_basic_block_info4 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 2, !dbg !8132
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info4, align 8, !dbg !8132
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %6, i32 0, i32 0, !dbg !8132
  br label %cond.end, !dbg !8132

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8132

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8132
  %7 = load i32, i32* %i, align 4, !dbg !8132
  %call5 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %7), !dbg !8132
  store %struct.basic_block_def* %call5, %struct.basic_block_def** %bb, align 8, !dbg !8133
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8134
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !8134
  %call6 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !8134
  %9 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8134
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !8134
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 0, !dbg !8134
  store i32 %11, i32* %10, align 8, !dbg !8134
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !8134
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call6, 1, !dbg !8134
  store %struct.VEC_edge_gc** %13, %struct.VEC_edge_gc*** %12, align 8, !dbg !8134
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8134
  %15 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8134
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false), !dbg !8134
  br label %for.cond7, !dbg !8134

for.cond7:                                        ; preds = %for.inc, %cond.end
  %16 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8136
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !8136
  %18 = load i32, i32* %17, align 8, !dbg !8136
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !8136
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %19, align 8, !dbg !8136
  %call8 = call zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %20, %struct.edge_def** %e), !dbg !8136
  %tobool9 = icmp ne i8 %call8, 0, !dbg !8134
  br i1 %tobool9, label %for.body10, label %for.end, !dbg !8134

for.body10:                                       ; preds = %for.cond7
  call void @llvm.dbg.declare(metadata i8* %visit, metadata !8138, metadata !DIExpression()), !dbg !8140
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit.addr, align 8, !dbg !8141
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8142
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 0, !dbg !8143
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8143
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !8144
  %24 = load i32, i32* %index, align 8, !dbg !8144
  %call11 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %21, i32 %24), !dbg !8145
  %conv = trunc i32 %call11 to i8, !dbg !8145
  store i8 %conv, i8* %visit, align 1, !dbg !8140
  %25 = load i8, i8* %visit, align 1, !dbg !8146
  %conv12 = zext i8 %25 to i32, !dbg !8146
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !8146
  br i1 %tobool13, label %land.lhs.true, label %if.else, !dbg !8148

land.lhs.true:                                    ; preds = %for.body10
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8149
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 7, !dbg !8150
  %27 = load i32, i32* %flags, align 8, !dbg !8150
  %and = and i32 %27, 32, !dbg !8151
  %tobool14 = icmp ne i32 %and, 0, !dbg !8151
  br i1 %tobool14, label %if.else, label %if.then, !dbg !8152

if.then:                                          ; preds = %land.lhs.true
  %28 = load i32, i32* %count, align 4, !dbg !8153
  %inc = add nsw i32 %28, 1, !dbg !8153
  store i32 %inc, i32* %count, align 4, !dbg !8153
  br label %if.end26, !dbg !8154

if.else:                                          ; preds = %land.lhs.true, %for.body10
  %29 = load i8, i8* %visit, align 1, !dbg !8155
  %conv15 = zext i8 %29 to i32, !dbg !8155
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !8155
  br i1 %tobool16, label %land.lhs.true17, label %if.end, !dbg !8157

land.lhs.true17:                                  ; preds = %if.else
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8158
  %tobool18 = icmp ne %struct._IO_FILE* %30, null, !dbg !8158
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8159

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8160
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 3, !dbg !8160
  %32 = load i8*, i8** %aux, align 8, !dbg !8160
  %33 = bitcast i8* %32 to %struct.edge_info_def*, !dbg !8160
  %back_edge = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %33, i32 0, i32 1, !dbg !8161
  %bf.load = load i8, i8* %back_edge, align 8, !dbg !8161
  %bf.clear = and i8 %bf.load, 1, !dbg !8161
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8161
  %tobool20 = icmp ne i32 %bf.cast, 0, !dbg !8160
  br i1 %tobool20, label %if.end, label %if.then21, !dbg !8162

if.then21:                                        ; preds = %land.lhs.true19
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8163
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8164
  %src22 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 0, !dbg !8165
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %src22, align 8, !dbg !8165
  %index23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !8166
  %37 = load i32, i32* %index23, align 8, !dbg !8166
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8167
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !8168
  %39 = load i32, i32* %index24, align 8, !dbg !8168
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.47, i64 0, i64 0), i32 %37, i32 %39), !dbg !8169
  br label %if.end, !dbg !8169

if.end:                                           ; preds = %if.then21, %land.lhs.true19, %land.lhs.true17, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !8170

for.inc:                                          ; preds = %if.end26
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8136
  br label %for.cond7, !dbg !8136, !llvm.loop !8171

for.end:                                          ; preds = %for.cond7
  %40 = load i32, i32* %count, align 4, !dbg !8173
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8174
  %aux27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 2, !dbg !8174
  %42 = load i8*, i8** %aux27, align 8, !dbg !8174
  %43 = bitcast i8* %42 to %struct.block_info_def*, !dbg !8174
  %npredecessors = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %43, i32 0, i32 2, !dbg !8175
  store i32 %40, i32* %npredecessors, align 8, !dbg !8176
  br label %for.inc28, !dbg !8177

for.inc28:                                        ; preds = %for.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !8125
  br label %for.cond, !dbg !8125, !llvm.loop !8178

for.end29:                                        ; preds = %for.cond
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %head.addr, align 8, !dbg !8180
  %aux30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 2, !dbg !8180
  %45 = load i8*, i8** %aux30, align 8, !dbg !8180
  %46 = bitcast i8* %45 to %struct.block_info_def*, !dbg !8180
  %frequency = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %46, i32 0, i32 0, !dbg !8181
  %47 = bitcast %struct.sreal* %frequency to i8*, !dbg !8182
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 bitcast (%struct.sreal* @real_one to i8*), i64 16, i1 false), !dbg !8182
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %head.addr, align 8, !dbg !8183
  store %struct.basic_block_def* %48, %struct.basic_block_def** %last, align 8, !dbg !8184
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %head.addr, align 8, !dbg !8185
  store %struct.basic_block_def* %49, %struct.basic_block_def** %bb, align 8, !dbg !8187
  br label %for.cond31, !dbg !8188

for.cond31:                                       ; preds = %for.inc144, %for.end29
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8189
  %tobool32 = icmp ne %struct.basic_block_def* %50, null, !dbg !8191
  br i1 %tobool32, label %for.body33, label %for.end145, !dbg !8191

for.body33:                                       ; preds = %for.cond31
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei34, metadata !8192, metadata !DIExpression()), !dbg !8194
  call void @llvm.dbg.declare(metadata %struct.sreal* %cyclic_probability, metadata !8195, metadata !DIExpression()), !dbg !8196
  call void @llvm.dbg.declare(metadata %struct.sreal* %frequency35, metadata !8197, metadata !DIExpression()), !dbg !8198
  %51 = bitcast %struct.sreal* %cyclic_probability to i8*, !dbg !8199
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 bitcast (%struct.sreal* @real_zero to i8*), i64 16, i1 false), !dbg !8199
  %52 = bitcast %struct.sreal* %frequency35 to i8*, !dbg !8200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 bitcast (%struct.sreal* @real_zero to i8*), i64 16, i1 false), !dbg !8200
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8201
  %aux36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 2, !dbg !8201
  %54 = load i8*, i8** %aux36, align 8, !dbg !8201
  %55 = bitcast i8* %54 to %struct.block_info_def*, !dbg !8201
  %next = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %55, i32 0, i32 1, !dbg !8202
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !8202
  store %struct.basic_block_def* %56, %struct.basic_block_def** %nextbb, align 8, !dbg !8203
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8204
  %aux37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 2, !dbg !8204
  %58 = load i8*, i8** %aux37, align 8, !dbg !8204
  %59 = bitcast i8* %58 to %struct.block_info_def*, !dbg !8204
  %next38 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %59, i32 0, i32 1, !dbg !8205
  store %struct.basic_block_def* null, %struct.basic_block_def** %next38, align 8, !dbg !8206
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8207
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %head.addr, align 8, !dbg !8209
  %cmp = icmp ne %struct.basic_block_def* %60, %61, !dbg !8210
  br i1 %cmp, label %if.then40, label %if.end92, !dbg !8211

if.then40:                                        ; preds = %for.body33
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8212
  %preds42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 0, !dbg !8212
  %call43 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds42), !dbg !8212
  %63 = bitcast %struct.edge_iterator* %tmp41 to { i32, %struct.VEC_edge_gc** }*, !dbg !8212
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 0, !dbg !8212
  %65 = extractvalue { i32, %struct.VEC_edge_gc** } %call43, 0, !dbg !8212
  store i32 %65, i32* %64, align 8, !dbg !8212
  %66 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 1, !dbg !8212
  %67 = extractvalue { i32, %struct.VEC_edge_gc** } %call43, 1, !dbg !8212
  store %struct.VEC_edge_gc** %67, %struct.VEC_edge_gc*** %66, align 8, !dbg !8212
  %68 = bitcast %struct.edge_iterator* %ei34 to i8*, !dbg !8212
  %69 = bitcast %struct.edge_iterator* %tmp41 to i8*, !dbg !8212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false), !dbg !8212
  br label %for.cond44, !dbg !8212

for.cond44:                                       ; preds = %for.inc73, %if.then40
  %70 = bitcast %struct.edge_iterator* %ei34 to { i32, %struct.VEC_edge_gc** }*, !dbg !8215
  %71 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 0, !dbg !8215
  %72 = load i32, i32* %71, align 8, !dbg !8215
  %73 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %70, i32 0, i32 1, !dbg !8215
  %74 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %73, align 8, !dbg !8215
  %call45 = call zeroext i8 @ei_cond(i32 %72, %struct.VEC_edge_gc** %74, %struct.edge_def** %e), !dbg !8215
  %tobool46 = icmp ne i8 %call45, 0, !dbg !8212
  br i1 %tobool46, label %for.body47, label %for.end74, !dbg !8212

for.body47:                                       ; preds = %for.cond44
  %75 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8217
  %aux48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %75, i32 0, i32 3, !dbg !8217
  %76 = load i8*, i8** %aux48, align 8, !dbg !8217
  %77 = bitcast i8* %76 to %struct.edge_info_def*, !dbg !8217
  %back_edge49 = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %77, i32 0, i32 1, !dbg !8219
  %bf.load50 = load i8, i8* %back_edge49, align 8, !dbg !8219
  %bf.clear51 = and i8 %bf.load50, 1, !dbg !8219
  %bf.cast52 = zext i8 %bf.clear51 to i32, !dbg !8219
  %tobool53 = icmp ne i32 %bf.cast52, 0, !dbg !8217
  br i1 %tobool53, label %if.then54, label %if.else57, !dbg !8220

if.then54:                                        ; preds = %for.body47
  %78 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8221
  %aux55 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %78, i32 0, i32 3, !dbg !8221
  %79 = load i8*, i8** %aux55, align 8, !dbg !8221
  %80 = bitcast i8* %79 to %struct.edge_info_def*, !dbg !8221
  %back_edge_prob = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %80, i32 0, i32 0, !dbg !8223
  %call56 = call %struct.sreal* @sreal_add(%struct.sreal* %cyclic_probability, %struct.sreal* %cyclic_probability, %struct.sreal* %back_edge_prob), !dbg !8224
  br label %if.end72, !dbg !8225

if.else57:                                        ; preds = %for.body47
  %81 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8226
  %flags58 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %81, i32 0, i32 7, !dbg !8228
  %82 = load i32, i32* %flags58, align 8, !dbg !8228
  %and59 = and i32 %82, 32, !dbg !8229
  %tobool60 = icmp ne i32 %and59, 0, !dbg !8229
  br i1 %tobool60, label %if.end71, label %if.then61, !dbg !8230

if.then61:                                        ; preds = %if.else57
  call void @llvm.dbg.declare(metadata %struct.sreal* %tmp62, metadata !8231, metadata !DIExpression()), !dbg !8233
  %83 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8234
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %83, i32 0, i32 8, !dbg !8235
  %84 = load i32, i32* %probability, align 4, !dbg !8235
  %conv63 = sext i32 %84 to i64, !dbg !8234
  %call64 = call %struct.sreal* @sreal_init(%struct.sreal* %tmp62, i64 %conv63, i32 0), !dbg !8236
  %85 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8237
  %src65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i32 0, i32 0, !dbg !8237
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %src65, align 8, !dbg !8237
  %aux66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i32 0, i32 2, !dbg !8237
  %87 = load i8*, i8** %aux66, align 8, !dbg !8237
  %88 = bitcast i8* %87 to %struct.block_info_def*, !dbg !8237
  %frequency67 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %88, i32 0, i32 0, !dbg !8238
  %call68 = call %struct.sreal* @sreal_mul(%struct.sreal* %tmp62, %struct.sreal* %tmp62, %struct.sreal* %frequency67), !dbg !8239
  %call69 = call %struct.sreal* @sreal_mul(%struct.sreal* %tmp62, %struct.sreal* %tmp62, %struct.sreal* @real_inv_br_prob_base), !dbg !8240
  %call70 = call %struct.sreal* @sreal_add(%struct.sreal* %frequency35, %struct.sreal* %frequency35, %struct.sreal* %tmp62), !dbg !8241
  br label %if.end71, !dbg !8242

if.end71:                                         ; preds = %if.then61, %if.else57
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then54
  br label %for.inc73, !dbg !8219

for.inc73:                                        ; preds = %if.end72
  call void @ei_next(%struct.edge_iterator* %ei34), !dbg !8215
  br label %for.cond44, !dbg !8215, !llvm.loop !8243

for.end74:                                        ; preds = %for.cond44
  %call75 = call i32 @sreal_compare(%struct.sreal* %cyclic_probability, %struct.sreal* @real_zero), !dbg !8245
  %cmp76 = icmp eq i32 %call75, 0, !dbg !8247
  br i1 %cmp76, label %if.then78, label %if.else81, !dbg !8248

if.then78:                                        ; preds = %for.end74
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8249
  %aux79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 2, !dbg !8249
  %90 = load i8*, i8** %aux79, align 8, !dbg !8249
  %91 = bitcast i8* %90 to %struct.block_info_def*, !dbg !8249
  %frequency80 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %91, i32 0, i32 0, !dbg !8251
  %92 = bitcast %struct.sreal* %frequency80 to i8*, !dbg !8252
  %93 = bitcast %struct.sreal* %frequency35 to i8*, !dbg !8252
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false), !dbg !8252
  br label %if.end91, !dbg !8253

if.else81:                                        ; preds = %for.end74
  %call82 = call i32 @sreal_compare(%struct.sreal* %cyclic_probability, %struct.sreal* @real_almost_one), !dbg !8254
  %cmp83 = icmp sgt i32 %call82, 0, !dbg !8257
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !8258

if.then85:                                        ; preds = %if.else81
  %94 = bitcast %struct.sreal* %cyclic_probability to i8*, !dbg !8259
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 bitcast (%struct.sreal* @real_almost_one to i8*), i64 16, i1 false), !dbg !8259
  br label %if.end86, !dbg !8261

if.end86:                                         ; preds = %if.then85, %if.else81
  %call87 = call %struct.sreal* @sreal_sub(%struct.sreal* %cyclic_probability, %struct.sreal* @real_one, %struct.sreal* %cyclic_probability), !dbg !8262
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8263
  %aux88 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 2, !dbg !8263
  %96 = load i8*, i8** %aux88, align 8, !dbg !8263
  %97 = bitcast i8* %96 to %struct.block_info_def*, !dbg !8263
  %frequency89 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %97, i32 0, i32 0, !dbg !8264
  %call90 = call %struct.sreal* @sreal_div(%struct.sreal* %frequency89, %struct.sreal* %frequency35, %struct.sreal* %cyclic_probability), !dbg !8265
  br label %if.end91

if.end91:                                         ; preds = %if.end86, %if.then78
  br label %if.end92, !dbg !8266

if.end92:                                         ; preds = %if.end91, %for.body33
  %98 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tovisit.addr, align 8, !dbg !8267
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8268
  %index93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 9, !dbg !8269
  %100 = load i32, i32* %index93, align 8, !dbg !8269
  %call94 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %98, i32 %100), !dbg !8270
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8271
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %head.addr, align 8, !dbg !8272
  %call95 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %101, %struct.basic_block_def* %102), !dbg !8273
  store %struct.edge_def* %call95, %struct.edge_def** %e, align 8, !dbg !8274
  %103 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8275
  %tobool96 = icmp ne %struct.edge_def* %103, null, !dbg !8275
  br i1 %tobool96, label %if.then97, label %if.end108, !dbg !8277

if.then97:                                        ; preds = %if.end92
  call void @llvm.dbg.declare(metadata %struct.sreal* %tmp98, metadata !8278, metadata !DIExpression()), !dbg !8280
  %104 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8281
  %probability99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %104, i32 0, i32 8, !dbg !8282
  %105 = load i32, i32* %probability99, align 4, !dbg !8282
  %conv100 = sext i32 %105 to i64, !dbg !8281
  %call101 = call %struct.sreal* @sreal_init(%struct.sreal* %tmp98, i64 %conv100, i32 0), !dbg !8283
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8284
  %aux102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 2, !dbg !8284
  %107 = load i8*, i8** %aux102, align 8, !dbg !8284
  %108 = bitcast i8* %107 to %struct.block_info_def*, !dbg !8284
  %frequency103 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %108, i32 0, i32 0, !dbg !8285
  %call104 = call %struct.sreal* @sreal_mul(%struct.sreal* %tmp98, %struct.sreal* %tmp98, %struct.sreal* %frequency103), !dbg !8286
  %109 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8287
  %aux105 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %109, i32 0, i32 3, !dbg !8287
  %110 = load i8*, i8** %aux105, align 8, !dbg !8287
  %111 = bitcast i8* %110 to %struct.edge_info_def*, !dbg !8287
  %back_edge_prob106 = getelementptr inbounds %struct.edge_info_def, %struct.edge_info_def* %111, i32 0, i32 0, !dbg !8288
  %call107 = call %struct.sreal* @sreal_mul(%struct.sreal* %back_edge_prob106, %struct.sreal* %tmp98, %struct.sreal* @real_inv_br_prob_base), !dbg !8289
  br label %if.end108, !dbg !8290

if.end108:                                        ; preds = %if.then97, %if.end92
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8291
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 1, !dbg !8291
  %call110 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8291
  %113 = bitcast %struct.edge_iterator* %tmp109 to { i32, %struct.VEC_edge_gc** }*, !dbg !8291
  %114 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %113, i32 0, i32 0, !dbg !8291
  %115 = extractvalue { i32, %struct.VEC_edge_gc** } %call110, 0, !dbg !8291
  store i32 %115, i32* %114, align 8, !dbg !8291
  %116 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %113, i32 0, i32 1, !dbg !8291
  %117 = extractvalue { i32, %struct.VEC_edge_gc** } %call110, 1, !dbg !8291
  store %struct.VEC_edge_gc** %117, %struct.VEC_edge_gc*** %116, align 8, !dbg !8291
  %118 = bitcast %struct.edge_iterator* %ei34 to i8*, !dbg !8291
  %119 = bitcast %struct.edge_iterator* %tmp109 to i8*, !dbg !8291
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %118, i8* align 8 %119, i64 16, i1 false), !dbg !8291
  br label %for.cond111, !dbg !8291

for.cond111:                                      ; preds = %for.inc142, %if.end108
  %120 = bitcast %struct.edge_iterator* %ei34 to { i32, %struct.VEC_edge_gc** }*, !dbg !8293
  %121 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %120, i32 0, i32 0, !dbg !8293
  %122 = load i32, i32* %121, align 8, !dbg !8293
  %123 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %120, i32 0, i32 1, !dbg !8293
  %124 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %123, align 8, !dbg !8293
  %call112 = call zeroext i8 @ei_cond(i32 %122, %struct.VEC_edge_gc** %124, %struct.edge_def** %e), !dbg !8293
  %tobool113 = icmp ne i8 %call112, 0, !dbg !8291
  br i1 %tobool113, label %for.body114, label %for.end143, !dbg !8291

for.body114:                                      ; preds = %for.cond111
  %125 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8295
  %flags115 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %125, i32 0, i32 7, !dbg !8297
  %126 = load i32, i32* %flags115, align 8, !dbg !8297
  %and116 = and i32 %126, 32, !dbg !8298
  %tobool117 = icmp ne i32 %and116, 0, !dbg !8298
  br i1 %tobool117, label %if.end141, label %land.lhs.true118, !dbg !8299

land.lhs.true118:                                 ; preds = %for.body114
  %127 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8300
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %127, i32 0, i32 1, !dbg !8300
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8300
  %aux119 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %128, i32 0, i32 2, !dbg !8300
  %129 = load i8*, i8** %aux119, align 8, !dbg !8300
  %130 = bitcast i8* %129 to %struct.block_info_def*, !dbg !8300
  %npredecessors120 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %130, i32 0, i32 2, !dbg !8301
  %131 = load i32, i32* %npredecessors120, align 8, !dbg !8301
  %tobool121 = icmp ne i32 %131, 0, !dbg !8300
  br i1 %tobool121, label %if.then122, label %if.end141, !dbg !8302

if.then122:                                       ; preds = %land.lhs.true118
  %132 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8303
  %dest123 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 1, !dbg !8303
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %dest123, align 8, !dbg !8303
  %aux124 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 2, !dbg !8303
  %134 = load i8*, i8** %aux124, align 8, !dbg !8303
  %135 = bitcast i8* %134 to %struct.block_info_def*, !dbg !8303
  %npredecessors125 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %135, i32 0, i32 2, !dbg !8305
  %136 = load i32, i32* %npredecessors125, align 8, !dbg !8306
  %dec = add nsw i32 %136, -1, !dbg !8306
  store i32 %dec, i32* %npredecessors125, align 8, !dbg !8306
  %137 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8307
  %dest126 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %137, i32 0, i32 1, !dbg !8307
  %138 = load %struct.basic_block_def*, %struct.basic_block_def** %dest126, align 8, !dbg !8307
  %aux127 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %138, i32 0, i32 2, !dbg !8307
  %139 = load i8*, i8** %aux127, align 8, !dbg !8307
  %140 = bitcast i8* %139 to %struct.block_info_def*, !dbg !8307
  %npredecessors128 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %140, i32 0, i32 2, !dbg !8309
  %141 = load i32, i32* %npredecessors128, align 8, !dbg !8309
  %tobool129 = icmp ne i32 %141, 0, !dbg !8307
  br i1 %tobool129, label %if.end140, label %if.then130, !dbg !8310

if.then130:                                       ; preds = %if.then122
  %142 = load %struct.basic_block_def*, %struct.basic_block_def** %nextbb, align 8, !dbg !8311
  %tobool131 = icmp ne %struct.basic_block_def* %142, null, !dbg !8311
  br i1 %tobool131, label %if.else134, label %if.then132, !dbg !8314

if.then132:                                       ; preds = %if.then130
  %143 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8315
  %dest133 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %143, i32 0, i32 1, !dbg !8316
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %dest133, align 8, !dbg !8316
  store %struct.basic_block_def* %144, %struct.basic_block_def** %nextbb, align 8, !dbg !8317
  br label %if.end138, !dbg !8318

if.else134:                                       ; preds = %if.then130
  %145 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8319
  %dest135 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %145, i32 0, i32 1, !dbg !8320
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %dest135, align 8, !dbg !8320
  %147 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8321
  %aux136 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %147, i32 0, i32 2, !dbg !8321
  %148 = load i8*, i8** %aux136, align 8, !dbg !8321
  %149 = bitcast i8* %148 to %struct.block_info_def*, !dbg !8321
  %next137 = getelementptr inbounds %struct.block_info_def, %struct.block_info_def* %149, i32 0, i32 1, !dbg !8322
  store %struct.basic_block_def* %146, %struct.basic_block_def** %next137, align 8, !dbg !8323
  br label %if.end138

if.end138:                                        ; preds = %if.else134, %if.then132
  %150 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8324
  %dest139 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %150, i32 0, i32 1, !dbg !8325
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %dest139, align 8, !dbg !8325
  store %struct.basic_block_def* %151, %struct.basic_block_def** %last, align 8, !dbg !8326
  br label %if.end140, !dbg !8327

if.end140:                                        ; preds = %if.end138, %if.then122
  br label %if.end141, !dbg !8328

if.end141:                                        ; preds = %if.end140, %land.lhs.true118, %for.body114
  br label %for.inc142, !dbg !8301

for.inc142:                                       ; preds = %if.end141
  call void @ei_next(%struct.edge_iterator* %ei34), !dbg !8293
  br label %for.cond111, !dbg !8293, !llvm.loop !8329

for.end143:                                       ; preds = %for.cond111
  br label %for.inc144, !dbg !8331

for.inc144:                                       ; preds = %for.end143
  %152 = load %struct.basic_block_def*, %struct.basic_block_def** %nextbb, align 8, !dbg !8332
  store %struct.basic_block_def* %152, %struct.basic_block_def** %bb, align 8, !dbg !8333
  br label %for.cond31, !dbg !8334, !llvm.loop !8335

for.end145:                                       ; preds = %for.cond31
  ret void, !dbg !8337
}

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !8338 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !8346, metadata !DIExpression()), !dbg !8347
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !8348, metadata !DIExpression()), !dbg !8349
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !8350, metadata !DIExpression()), !dbg !8351
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !8352, metadata !DIExpression()), !dbg !8353
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !8354
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !8355
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !8355
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8356
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !8357
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !8358
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8359
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !8360
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !8361
  br label %while.body, !dbg !8362

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8363
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !8366
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !8366
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !8363
  br i1 %tobool, label %if.end, label %if.then, !dbg !8367

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8368
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !8370
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !8371
  br label %while.end, !dbg !8372

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8373
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !8375
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !8375
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !8376
  %9 = load i32, i32* %indx, align 8, !dbg !8376
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !8377
  %div = udiv i32 %10, 128, !dbg !8378
  %cmp = icmp uge i32 %9, %div, !dbg !8379
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !8380

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !8381

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8382
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !8383
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !8383
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !8384
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !8384
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8385
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !8386
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !8387
  br label %while.body, !dbg !8362, !llvm.loop !8388

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8390
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !8392
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !8392
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !8393
  %17 = load i32, i32* %indx9, align 8, !dbg !8393
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !8394
  %div10 = udiv i32 %18, 128, !dbg !8395
  %cmp11 = icmp ne i32 %17, %div10, !dbg !8396
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !8397

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8398
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !8399
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !8399
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !8400
  %21 = load i32, i32* %indx14, align 8, !dbg !8400
  %mul = mul i32 %21, 128, !dbg !8401
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !8402
  br label %if.end15, !dbg !8403

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !8404
  %div16 = udiv i32 %22, 64, !dbg !8405
  %rem = urem i32 %div16, 2, !dbg !8406
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8407
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !8408
  store i32 %rem, i32* %word_no, align 8, !dbg !8409
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8410
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !8411
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !8411
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !8412
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8413
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !8414
  %27 = load i32, i32* %word_no18, align 8, !dbg !8414
  %idxprom = zext i32 %27 to i64, !dbg !8410
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !8410
  %28 = load i64, i64* %arrayidx, align 8, !dbg !8410
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8415
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !8416
  store i64 %28, i64* %bits19, align 8, !dbg !8417
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !8418
  %rem20 = urem i32 %30, 64, !dbg !8419
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8420
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !8421
  %32 = load i64, i64* %bits21, align 8, !dbg !8422
  %sh_prom = zext i32 %rem20 to i64, !dbg !8422
  %shr = lshr i64 %32, %sh_prom, !dbg !8422
  store i64 %shr, i64* %bits21, align 8, !dbg !8422
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8423
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !8424
  %34 = load i64, i64* %bits22, align 8, !dbg !8424
  %tobool23 = icmp ne i64 %34, 0, !dbg !8425
  %lnot = xor i1 %tobool23, true, !dbg !8425
  %lnot.ext = zext i1 %lnot to i32, !dbg !8425
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !8426
  %add = add i32 %35, %lnot.ext, !dbg !8426
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !8426
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !8427
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !8428
  store i32 %36, i32* %37, align 4, !dbg !8429
  ret void, !dbg !8430
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !8431 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !8434, metadata !DIExpression()), !dbg !8435
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !8436, metadata !DIExpression()), !dbg !8437
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8438
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !8440
  %1 = load i64, i64* %bits, align 8, !dbg !8440
  %tobool = icmp ne i64 %1, 0, !dbg !8438
  br i1 %tobool, label %if.then, label %if.end, !dbg !8441

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !8442

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !8443), !dbg !8445
  br label %while.cond, !dbg !8446

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8447
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !8448
  %3 = load i64, i64* %bits1, align 8, !dbg !8448
  %and = and i64 %3, 1, !dbg !8449
  %tobool2 = icmp ne i64 %and, 0, !dbg !8450
  %lnot = xor i1 %tobool2, true, !dbg !8450
  br i1 %lnot, label %while.body, label %while.end, !dbg !8446

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8451
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !8453
  %5 = load i64, i64* %bits3, align 8, !dbg !8454
  %shr = lshr i64 %5, 1, !dbg !8454
  store i64 %shr, i64* %bits3, align 8, !dbg !8454
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !8455
  %7 = load i32, i32* %6, align 4, !dbg !8456
  %add = add i32 %7, 1, !dbg !8456
  store i32 %add, i32* %6, align 4, !dbg !8456
  br label %while.cond, !dbg !8446, !llvm.loop !8457

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !8459
  br label %return, !dbg !8459

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !8460
  %9 = load i32, i32* %8, align 4, !dbg !8461
  %add4 = add i32 %9, 64, !dbg !8462
  %sub = sub i32 %add4, 1, !dbg !8463
  %div = udiv i32 %sub, 64, !dbg !8464
  %mul = mul i32 %div, 64, !dbg !8465
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !8466
  store i32 %mul, i32* %10, align 4, !dbg !8467
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8468
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !8469
  %12 = load i32, i32* %word_no, align 8, !dbg !8470
  %inc = add i32 %12, 1, !dbg !8470
  store i32 %inc, i32* %word_no, align 8, !dbg !8470
  br label %while.body6, !dbg !8471

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !8472

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8474
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !8475
  %14 = load i32, i32* %word_no8, align 8, !dbg !8475
  %cmp = icmp ne i32 %14, 2, !dbg !8476
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !8472

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8477
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !8479
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !8479
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !8480
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8481
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !8482
  %18 = load i32, i32* %word_no11, align 8, !dbg !8482
  %idxprom = zext i32 %18 to i64, !dbg !8477
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !8477
  %19 = load i64, i64* %arrayidx, align 8, !dbg !8477
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8483
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !8484
  store i64 %19, i64* %bits12, align 8, !dbg !8485
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8486
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !8488
  %22 = load i64, i64* %bits13, align 8, !dbg !8488
  %tobool14 = icmp ne i64 %22, 0, !dbg !8486
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !8489

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !8490

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !8491
  %24 = load i32, i32* %23, align 4, !dbg !8492
  %add17 = add i32 %24, 64, !dbg !8492
  store i32 %add17, i32* %23, align 4, !dbg !8492
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8493
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !8494
  %26 = load i32, i32* %word_no18, align 8, !dbg !8495
  %inc19 = add i32 %26, 1, !dbg !8495
  store i32 %inc19, i32* %word_no18, align 8, !dbg !8495
  br label %while.cond7, !dbg !8472, !llvm.loop !8496

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8498
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !8499
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !8499
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !8500
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !8500
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8501
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !8502
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !8503
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8504
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !8506
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !8506
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !8504
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !8507

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !8508
  br label %return, !dbg !8508

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8509
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !8510
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !8510
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !8511
  %35 = load i32, i32* %indx, align 8, !dbg !8511
  %mul28 = mul i32 %35, 128, !dbg !8512
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !8513
  store i32 %mul28, i32* %36, align 4, !dbg !8514
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8515
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !8516
  store i32 0, i32* %word_no29, align 8, !dbg !8517
  br label %while.body6, !dbg !8471, !llvm.loop !8518

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !8520
  ret i8 %38, !dbg !8520
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !8521 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !8526, metadata !DIExpression()), !dbg !8527
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8528, metadata !DIExpression()), !dbg !8527
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8527
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !8527
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8527

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8527
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8527
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !8527
  %3 = load i32, i32* %num, align 8, !dbg !8527
  %cmp = icmp ult i32 %1, %3, !dbg !8527
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8529
  %land.ext = zext i1 %4 to i32, !dbg !8527
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !8527
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !8527
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8527
  %idxprom = zext i32 %6 to i64, !dbg !8527
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !8527
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8527
  ret %struct.basic_block_def* %7, !dbg !8527
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !8530 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !8533, metadata !DIExpression()), !dbg !8534
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !8535, metadata !DIExpression()), !dbg !8536
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !8537
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !8538
  %1 = load i64, i64* %bits, align 8, !dbg !8539
  %shr = lshr i64 %1, 1, !dbg !8539
  store i64 %shr, i64* %bits, align 8, !dbg !8539
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !8540
  %3 = load i32, i32* %2, align 4, !dbg !8541
  %add = add i32 %3, 1, !dbg !8541
  store i32 %add, i32* %2, align 4, !dbg !8541
  ret void, !dbg !8542
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %union.tree_node* @build_string(i32, i8*) #2

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local void @flow_loops_dump(%struct._IO_FILE*, void (%struct.loop*, %struct._IO_FILE*, i32)*, i32) #2

declare dso_local zeroext i8 @mark_irreducible_loops() #2

declare dso_local void @scev_initialize() #2

declare dso_local void @scev_finalize() #2

declare dso_local void @loop_optimizer_finalize() #2

declare dso_local void @gimple_dump_cfg(%struct._IO_FILE*, i32) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !8543 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !8544, metadata !DIExpression()), !dbg !8545
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !8546
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !8547
  ret %union.tree_node* %call, !dbg !8548
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3547, !3548, !3549}
!llvm.ident = !{!3550}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "bb_predictions", scope: !2, file: !3, line: 376, type: !2925, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1953, globals: !3483, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "predict.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !147, !152, !161, !165, !170, !189, !196, !203, !397, !404, !580, !603, !726, !732, !764, !907, !941, !945, !949, !953, !1087, !1102, !1124, !1163, !1189, !1203, !1216, !1221, !1227, !1233}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !142, line: 363, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146}
!144 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!147 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !142, line: 355, baseType: !7, size: 32, elements: !148)
!148 = !{!149, !150, !151}
!149 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!150 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!151 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!152 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !153, line: 31, baseType: !7, size: 32, elements: !154)
!153 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!154 = !{!155, !156, !157, !158, !159, !160}
!155 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!156 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!157 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!158 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!159 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!160 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!161 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !153, line: 91, baseType: !7, size: 32, elements: !162)
!162 = !{!163, !164}
!163 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!164 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !398, line: 104, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402, !403}
!400 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !405, line: 74, baseType: !7, size: 32, elements: !406)
!405 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!406 = !{!407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579}
!407 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!579 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !581, line: 309, baseType: !7, size: 32, elements: !582)
!581 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!582 = !{!583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602}
!583 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!584 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!587 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!588 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!589 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!590 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!591 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!592 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!593 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!594 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!595 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!596 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!597 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!598 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!599 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!600 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!601 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!602 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!603 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !604, line: 82, baseType: !7, size: 32, elements: !605)
!604 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!605 = !{!606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725}
!606 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!613 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!614 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!618 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!619 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!620 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!621 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!622 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!623 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!628 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!629 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!630 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!640 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!641 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!645 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!646 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!648 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!649 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!653 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!654 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!655 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!656 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!657 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!658 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!680 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!681 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!690 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!691 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!692 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!693 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!694 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!695 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!696 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!697 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!698 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!699 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!700 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!701 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!702 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!703 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!704 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!705 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!706 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!707 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!708 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!709 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!710 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!711 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!712 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!713 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!714 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!715 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!716 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!717 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!718 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!719 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!720 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!721 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!722 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!723 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!724 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!725 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!726 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "function_frequency", file: !727, line: 179, baseType: !7, size: 32, elements: !728)
!727 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!728 = !{!729, !730, !731}
!729 = !DIEnumerator(name: "FUNCTION_FREQUENCY_UNLIKELY_EXECUTED", value: 0, isUnsigned: true)
!730 = !DIEnumerator(name: "FUNCTION_FREQUENCY_NORMAL", value: 1, isUnsigned: true)
!731 = !DIEnumerator(name: "FUNCTION_FREQUENCY_HOT", value: 2, isUnsigned: true)
!732 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !733, line: 24, baseType: !7, size: 32, elements: !734)
!733 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!734 = !{!735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763}
!735 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!736 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!737 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!738 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!739 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!740 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!741 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!742 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!743 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!744 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!745 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!746 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!747 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!748 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!749 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!750 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!751 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!752 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!753 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!754 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!755 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!756 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!757 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!758 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!759 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!760 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!761 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!762 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!763 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!764 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !765, line: 45, baseType: !7, size: 32, elements: !766)
!765 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!766 = !{!767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906}
!767 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!768 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!769 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!770 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!771 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!772 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!773 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!774 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!775 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!776 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!777 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!778 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!779 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!780 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!781 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!782 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!783 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!784 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!785 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!786 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!787 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!788 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!789 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!790 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!791 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!792 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!793 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!794 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!795 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!796 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!797 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!798 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!799 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!800 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!801 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!802 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!803 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!804 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!805 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!806 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!807 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!808 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!809 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!810 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!811 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!812 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!813 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!814 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!815 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!816 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!817 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!818 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!819 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!820 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!821 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!822 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!823 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!824 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!825 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!826 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!827 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!828 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!829 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!830 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!831 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!832 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!833 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!834 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!835 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!836 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!837 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!838 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!839 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!840 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!841 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!842 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!843 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!844 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!845 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!846 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!847 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!848 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!849 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!850 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!851 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!852 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!853 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!854 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!855 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!856 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!857 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!858 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!859 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!860 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!861 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!862 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!863 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!864 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!865 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!866 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!867 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!868 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!869 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!870 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!871 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!872 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!873 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!874 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!875 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!876 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!877 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!878 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!879 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!880 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!881 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!882 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!883 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!884 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!885 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!886 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!887 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!888 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!889 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!890 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!891 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!892 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!893 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!894 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!895 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!896 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!897 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!898 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!899 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!900 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!901 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!902 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!903 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!904 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!905 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!906 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!907 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !765, line: 836, baseType: !7, size: 32, elements: !908)
!908 = !{!909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940}
!909 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!910 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!911 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!912 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!913 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!914 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!915 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!916 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!917 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!918 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!919 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!920 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!921 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!922 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!923 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!924 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!925 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!926 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!927 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!928 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!929 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!930 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!931 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!932 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!933 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!934 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!935 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!936 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!937 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!938 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!939 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!940 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!941 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !733, line: 32, baseType: !7, size: 32, elements: !942)
!942 = !{!943, !944}
!943 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!944 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!945 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !153, line: 259, baseType: !7, size: 32, elements: !946)
!946 = !{!947, !948}
!947 = !DIEnumerator(name: "CP_SIMPLE_PREHEADERS", value: 1, isUnsigned: true)
!948 = !DIEnumerator(name: "CP_FALLTHRU_PREHEADERS", value: 2, isUnsigned: true)
!949 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !142, line: 912, baseType: !7, size: 32, elements: !950)
!950 = !{!951, !952}
!951 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!952 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!953 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !171, line: 3410, baseType: !7, size: 32, elements: !954)
!954 = !{!955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086}
!955 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!956 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!957 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!958 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!959 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!960 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!961 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!962 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!963 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!964 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!965 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!966 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!967 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!968 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!969 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!970 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!971 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!972 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!973 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!974 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!975 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!976 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!977 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!978 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!979 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!980 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!981 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!982 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!983 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!984 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!985 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!986 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!987 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!988 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!989 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!990 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!991 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!992 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!993 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!994 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!995 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!996 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!997 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!998 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!999 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1000 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1001 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1002 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1003 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1004 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1005 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1006 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1007 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1008 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1009 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1010 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1011 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1012 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1013 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1014 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1015 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1016 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1017 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1018 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1019 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1020 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1021 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1022 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1023 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1024 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1025 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1026 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1027 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1028 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1029 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1030 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1031 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1032 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1033 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1034 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1035 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1036 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1037 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1038 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1039 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1040 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1041 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1042 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1043 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1044 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1045 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1046 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1047 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1048 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1049 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1050 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1051 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1052 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1053 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1054 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1055 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1056 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1057 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1058 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1059 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1060 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1061 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1062 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1063 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1064 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1065 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1066 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1067 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1068 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1069 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1070 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1071 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1072 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1073 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1074 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1075 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1076 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1077 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1078 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1079 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1080 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1081 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1082 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1083 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1084 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1085 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1086 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1087 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !765, line: 60, baseType: !7, size: 32, elements: !1088)
!1088 = !{!1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101}
!1089 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!1090 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!1091 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!1092 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!1093 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!1094 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!1095 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!1096 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!1097 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!1098 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!1099 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!1100 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!1101 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!1102 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !1103, line: 36, baseType: !7, size: 32, elements: !1104)
!1103 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1104 = !{!1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123}
!1105 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!1106 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!1107 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!1108 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!1109 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!1110 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!1111 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!1112 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!1113 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!1114 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!1115 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!1116 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!1117 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!1118 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!1119 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!1120 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!1121 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!1122 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!1123 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!1124 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !1125, line: 51, baseType: !7, size: 32, elements: !1126)
!1125 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1126 = !{!1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162}
!1127 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!1128 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!1129 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!1130 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!1131 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!1132 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!1133 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!1134 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!1135 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!1136 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!1137 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!1138 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!1139 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!1140 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!1141 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!1142 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!1143 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!1144 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!1145 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!1146 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!1147 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!1148 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!1149 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!1150 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!1151 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!1152 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!1153 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!1154 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!1155 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!1156 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!1157 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!1158 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!1159 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!1160 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!1161 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!1162 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!1163 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !1125, line: 727, baseType: !7, size: 32, elements: !1164)
!1164 = !{!1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188}
!1165 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1166 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1167 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1168 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1169 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1170 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1171 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1172 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1173 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1174 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1175 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1176 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1177 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1178 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1179 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1180 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1181 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1182 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1183 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1184 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1185 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1186 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1187 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1188 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !142, line: 295, baseType: !7, size: 32, elements: !1190)
!1190 = !{!1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202}
!1191 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1192 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1193 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1194 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1195 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1196 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1197 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1198 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1199 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1200 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1201 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1202 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gf_mask", file: !1125, line: 100, baseType: !7, size: 32, elements: !1204)
!1204 = !{!1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215}
!1205 = !DIEnumerator(name: "GF_ASM_INPUT", value: 1, isUnsigned: true)
!1206 = !DIEnumerator(name: "GF_ASM_VOLATILE", value: 2, isUnsigned: true)
!1207 = !DIEnumerator(name: "GF_CALL_CANNOT_INLINE", value: 1, isUnsigned: true)
!1208 = !DIEnumerator(name: "GF_CALL_FROM_THUNK", value: 2, isUnsigned: true)
!1209 = !DIEnumerator(name: "GF_CALL_RETURN_SLOT_OPT", value: 4, isUnsigned: true)
!1210 = !DIEnumerator(name: "GF_CALL_TAILCALL", value: 8, isUnsigned: true)
!1211 = !DIEnumerator(name: "GF_CALL_VA_ARG_PACK", value: 16, isUnsigned: true)
!1212 = !DIEnumerator(name: "GF_OMP_PARALLEL_COMBINED", value: 1, isUnsigned: true)
!1213 = !DIEnumerator(name: "GF_OMP_RETURN_NOWAIT", value: 1, isUnsigned: true)
!1214 = !DIEnumerator(name: "GF_OMP_SECTION_LAST", value: 1, isUnsigned: true)
!1215 = !DIEnumerator(name: "GF_PREDICT_TAKEN", value: 32768, isUnsigned: true)
!1216 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !153, line: 498, baseType: !7, size: 32, elements: !1217)
!1217 = !{!1218, !1219, !1220}
!1218 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!1219 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!1220 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!1221 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !1125, line: 80, baseType: !7, size: 32, elements: !1222)
!1222 = !{!1223, !1224, !1225, !1226}
!1223 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1224 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1225 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1226 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1227 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !171, line: 205, baseType: !7, size: 32, elements: !1228)
!1228 = !{!1229, !1230, !1231, !1232}
!1229 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!1233 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !171, line: 220, baseType: !7, size: 32, elements: !1234)
!1234 = !{!1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952}
!1235 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!1384 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!1385 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!1386 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!1387 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!1388 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!1389 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!1390 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!1391 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!1392 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!1393 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!1394 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!1395 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!1396 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!1397 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!1398 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!1399 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!1400 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!1401 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!1402 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!1403 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!1404 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!1405 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!1406 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!1407 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!1408 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!1409 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!1410 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!1411 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!1412 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!1413 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!1414 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!1415 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!1416 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!1417 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!1418 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!1419 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!1420 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!1421 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!1422 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!1423 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!1424 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!1425 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!1426 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!1427 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!1428 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!1429 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!1430 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!1431 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!1432 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!1433 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!1434 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!1435 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!1436 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!1437 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!1438 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!1439 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!1440 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!1441 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!1442 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!1443 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!1444 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!1445 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!1446 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!1447 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!1448 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!1449 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!1450 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!1451 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!1452 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!1453 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!1454 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!1455 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!1456 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!1457 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!1458 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!1459 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!1460 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!1461 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!1462 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!1463 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!1464 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!1465 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!1466 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!1467 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!1468 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!1469 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!1470 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!1471 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!1472 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!1473 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!1474 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!1475 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!1476 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!1477 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!1478 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!1479 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!1480 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!1481 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!1482 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!1483 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!1484 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!1485 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!1486 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!1487 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!1488 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!1489 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!1490 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!1491 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!1492 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!1493 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!1494 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!1495 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!1496 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!1497 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!1498 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!1499 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!1500 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!1501 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!1502 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!1503 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!1504 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!1505 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!1506 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!1507 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!1508 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!1509 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!1510 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!1511 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!1512 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!1513 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!1514 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!1515 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!1516 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!1517 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!1518 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!1519 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!1520 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!1521 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!1522 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!1523 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!1524 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!1525 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!1526 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!1527 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!1528 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!1529 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!1530 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!1531 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!1532 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!1533 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!1534 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!1535 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!1536 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!1537 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!1538 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!1539 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!1540 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!1541 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!1542 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!1543 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!1544 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!1545 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!1546 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!1547 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!1548 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!1549 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!1550 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!1551 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!1552 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!1553 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!1554 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!1555 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!1556 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!1557 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!1558 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!1559 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!1560 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!1561 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!1562 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!1563 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!1564 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!1565 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!1566 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!1567 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1568 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1569 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1570 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1571 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1572 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1573 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1574 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1575 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1576 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1577 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1578 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1579 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1580 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1581 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1582 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1583 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1584 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1585 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1586 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1587 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1588 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1589 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1590 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1591 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1592 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1593 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1594 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1595 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1596 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1597 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1598 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1599 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1600 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1601 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1602 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1603 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1604 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1605 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1606 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1607 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1608 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1609 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1610 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1611 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1612 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1613 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1614 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1615 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1616 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1617 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1618 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1619 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1620 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1621 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1622 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1623 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1624 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1625 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1626 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1627 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1628 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1629 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1630 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1631 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1632 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1633 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1634 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1635 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1636 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1637 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1638 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1639 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1640 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1641 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1642 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1643 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1644 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1645 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1646 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1647 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1648 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1649 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1650 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1651 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1652 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1653 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1654 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1655 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1656 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1657 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1658 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1659 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1660 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1661 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1662 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1663 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1664 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1665 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1666 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1667 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1668 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1669 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1670 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1671 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1672 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1673 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1674 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1675 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1676 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1677 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1678 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1679 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1680 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1681 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1682 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1683 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1684 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1685 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1686 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1687 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1688 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1689 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1690 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1691 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1692 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1693 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1694 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1695 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1696 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1697 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1698 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1699 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1700 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1701 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1702 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1703 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1704 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1705 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1706 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1707 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1708 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1709 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1710 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1711 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1712 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1713 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1714 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1715 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1716 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1717 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1718 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1719 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1720 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1721 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1722 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1723 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1724 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1725 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1726 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1727 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1728 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1729 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1730 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1731 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1732 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1733 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1734 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1735 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1736 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1737 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1738 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1739 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1740 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1741 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1742 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1743 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1744 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1745 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1746 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1747 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1748 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1749 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1750 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1751 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1752 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1753 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1754 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1755 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1756 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1757 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1758 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1759 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1760 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1761 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1762 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1763 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1764 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1765 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1766 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1767 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1768 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1769 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1770 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1771 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1772 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1773 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1774 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1775 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1776 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1777 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1778 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1779 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1780 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1781 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1782 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1783 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1784 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1785 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1786 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1787 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1788 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1789 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1790 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1791 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1792 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1793 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1794 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1795 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1796 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1797 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1798 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1799 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1800 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1801 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1802 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1803 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1804 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1805 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1806 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1807 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1808 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1809 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1810 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1811 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1812 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1813 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1814 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1815 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1816 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1817 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1818 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1819 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1820 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1821 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1822 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1823 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1824 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1825 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1826 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1827 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1828 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1829 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1830 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1831 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1832 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1833 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1834 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1835 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1836 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1837 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1838 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1839 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1840 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1841 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1842 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1843 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1844 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1845 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1846 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1847 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1848 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1849 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1850 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1851 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1852 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1853 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1854 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1855 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1856 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1857 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1858 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1859 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1860 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1861 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1862 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1863 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1864 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1865 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1866 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1867 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1868 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1869 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1870 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1871 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1872 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1873 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1874 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1875 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1876 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1877 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1878 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1879 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1880 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1881 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1882 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1883 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1884 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1885 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1886 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1887 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1888 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1889 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1890 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1891 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1892 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1893 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1894 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1895 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1896 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1897 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1898 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1899 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1900 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1901 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1902 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1903 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1904 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1905 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1906 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1907 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1908 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1909 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1910 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1911 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1912 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1913 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1914 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1915 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1916 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1917 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1918 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1919 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1920 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1921 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1922 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1923 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1924 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1925 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1926 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1927 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1928 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1929 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1930 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1931 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1932 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1933 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1934 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1935 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1936 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1937 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1938 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1939 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1940 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1941 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1942 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1943 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1944 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1945 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1946 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1947 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1948 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1949 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1950 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1951 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1952 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1953 = !{!1954, !764, !907, !5, !1955, !3448, !1987, !3449, !3461, !1102, !732, !3468, !203, !2690, !3469, !2021, !2724, !2285, !3471, !2016, !1961, !2922, !2147, !1221}
!1954 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_prediction", file: !1957, line: 307, size: 192, elements: !1958)
!1957 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1958 = !{!1959, !1960, !3446, !3447}
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "ep_next", scope: !1956, file: !1957, line: 308, baseType: !1955, size: 64)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "ep_edge", scope: !1956, file: !1957, line: 309, baseType: !1961, size: 64, offset: 64)
!1961 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1962, line: 108, baseType: !1963)
!1962 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !142, line: 122, size: 512, elements: !1965)
!1965 = !{!1966, !3433, !3434, !3439, !3440, !3441, !3442, !3443, !3444, !3445}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1964, file: !142, line: 124, baseType: !1967, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1968, size: 64)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !142, line: 217, size: 832, elements: !1969)
!1969 = !{!1970, !1985, !1986, !1988, !3402, !3406, !3407, !3408, !3426, !3428, !3429, !3430, !3431, !3432}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1968, file: !142, line: 219, baseType: !1971, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1972, size: 64)
!1972 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !142, line: 151, baseType: !1973)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !142, line: 151, size: 128, elements: !1974)
!1974 = !{!1975}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1973, file: !142, line: 151, baseType: !1976, size: 128)
!1976 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !142, line: 150, baseType: !1977)
!1977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !142, line: 150, size: 128, elements: !1978)
!1978 = !{!1979, !1980, !1981}
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1977, file: !142, line: 150, baseType: !7, size: 32)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1977, file: !142, line: 150, baseType: !7, size: 32, offset: 32)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1977, file: !142, line: 150, baseType: !1982, size: 64, offset: 64)
!1982 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1961, size: 64, elements: !1983)
!1983 = !{!1984}
!1984 = !DISubrange(count: 1)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1968, file: !142, line: 220, baseType: !1971, size: 64, offset: 64)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1968, file: !142, line: 223, baseType: !1987, size: 64, offset: 128)
!1987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1968, file: !142, line: 226, baseType: !1989, size: 64, offset: 192)
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1990, size: 64)
!1990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !153, line: 100, size: 1216, elements: !1991)
!1991 = !{!1992, !1993, !1994, !1995, !1996, !2001, !2002, !2003, !2017, !2018, !2019, !2020, !3379, !3380, !3381, !3382, !3383, !3384, !3392, !3400, !3401}
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1990, file: !153, line: 102, baseType: !1954, size: 32)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1990, file: !153, line: 105, baseType: !7, size: 32, offset: 32)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1990, file: !153, line: 108, baseType: !1967, size: 64, offset: 64)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1990, file: !153, line: 111, baseType: !1967, size: 64, offset: 128)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1990, file: !153, line: 114, baseType: !1997, size: 64, offset: 192)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !153, line: 41, size: 64, elements: !1998)
!1998 = !{!1999, !2000}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1997, file: !153, line: 42, baseType: !152, size: 32)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1997, file: !153, line: 43, baseType: !7, size: 32, offset: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1990, file: !153, line: 117, baseType: !7, size: 32, offset: 256)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1990, file: !153, line: 120, baseType: !7, size: 32, offset: 288)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1990, file: !153, line: 123, baseType: !2004, size: 64, offset: 320)
!2004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2005, size: 64)
!2005 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !153, line: 87, baseType: !2006)
!2006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !153, line: 87, size: 128, elements: !2007)
!2007 = !{!2008}
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2006, file: !153, line: 87, baseType: !2009, size: 128)
!2009 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !153, line: 85, baseType: !2010)
!2010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !153, line: 85, size: 128, elements: !2011)
!2011 = !{!2012, !2013, !2014}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2010, file: !153, line: 85, baseType: !7, size: 32)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2010, file: !153, line: 85, baseType: !7, size: 32, offset: 32)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2010, file: !153, line: 85, baseType: !2015, size: 64, offset: 64)
!2015 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2016, size: 64, elements: !1983)
!2016 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !153, line: 84, baseType: !1989)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1990, file: !153, line: 126, baseType: !1989, size: 64, offset: 384)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1990, file: !153, line: 129, baseType: !1989, size: 64, offset: 448)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1990, file: !153, line: 132, baseType: !1987, size: 64, offset: 512)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1990, file: !153, line: 139, baseType: !2021, size: 64, offset: 576)
!2021 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1962, line: 56, baseType: !2022)
!2022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2023, size: 64)
!2023 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !2024)
!2024 = !{!2025, !2058, !2064, !2077, !2096, !2107, !2112, !2120, !2126, !2140, !2152, !2190, !2400, !2428, !2444, !2445, !2450, !2459, !2465, !2470, !2474, !2478, !3030, !3077, !3083, !3089, !3096, !3109, !3123, !3140, !3152, !3174, !3189, !3361}
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2023, file: !171, line: 3372, baseType: !2026, size: 64)
!2026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !2027)
!2027 = !{!2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057}
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2026, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2026, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2026, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2026, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2026, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2026, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2026, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2026, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2026, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2026, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2026, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2026, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2026, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2026, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2026, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2026, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2026, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2026, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2026, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2026, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2026, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2026, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2026, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2026, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2026, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2026, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2026, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2026, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2026, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2026, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2023, file: !171, line: 3373, baseType: !2059, size: 192)
!2059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !2060)
!2060 = !{!2061, !2062, !2063}
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2059, file: !171, line: 403, baseType: !2026, size: 64)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2059, file: !171, line: 404, baseType: !2021, size: 64, offset: 64)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2059, file: !171, line: 405, baseType: !2021, size: 64, offset: 128)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2023, file: !171, line: 3374, baseType: !2065, size: 320)
!2065 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !2066)
!2066 = !{!2067, !2068}
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2065, file: !171, line: 1385, baseType: !2059, size: 192)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2065, file: !171, line: 1386, baseType: !2069, size: 128, offset: 192)
!2069 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2070, line: 58, baseType: !2071)
!2070 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2071 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2070, line: 54, size: 128, elements: !2072)
!2072 = !{!2073, !2075}
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2071, file: !2070, line: 56, baseType: !2074, size: 64)
!2074 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2071, file: !2070, line: 57, baseType: !2076, size: 64, offset: 64)
!2076 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2023, file: !171, line: 3375, baseType: !2078, size: 256)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !2079)
!2079 = !{!2080, !2081}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2078, file: !171, line: 1398, baseType: !2059, size: 192)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2078, file: !171, line: 1399, baseType: !2082, size: 64, offset: 192)
!2082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2083, size: 64)
!2083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2084, line: 52, size: 256, elements: !2085)
!2084 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2085 = !{!2086, !2087, !2088, !2089, !2090, !2091, !2092}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2083, file: !2084, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2083, file: !2084, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2083, file: !2084, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2083, file: !2084, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2083, file: !2084, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2083, file: !2084, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2083, file: !2084, line: 62, baseType: !2093, size: 192, offset: 64)
!2093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2074, size: 192, elements: !2094)
!2094 = !{!2095}
!2095 = !DISubrange(count: 3)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2023, file: !171, line: 3376, baseType: !2097, size: 256)
!2097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !2098)
!2098 = !{!2099, !2100}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2097, file: !171, line: 1409, baseType: !2059, size: 192)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2097, file: !171, line: 1410, baseType: !2101, size: 64, offset: 192)
!2101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2102, size: 64)
!2102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2103, line: 27, size: 192, elements: !2104)
!2103 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2104 = !{!2105, !2106}
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2102, file: !2103, line: 29, baseType: !2069, size: 128)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2102, file: !2103, line: 30, baseType: !5, size: 32, offset: 128)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2023, file: !171, line: 3377, baseType: !2108, size: 256)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !2109)
!2109 = !{!2110, !2111}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2108, file: !171, line: 1438, baseType: !2059, size: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2108, file: !171, line: 1439, baseType: !2021, size: 64, offset: 192)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2023, file: !171, line: 3378, baseType: !2113, size: 256)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !2114)
!2114 = !{!2115, !2116, !2117}
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2113, file: !171, line: 1419, baseType: !2059, size: 192)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2113, file: !171, line: 1420, baseType: !1954, size: 32, offset: 192)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2113, file: !171, line: 1421, baseType: !2118, size: 8, offset: 224)
!2118 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2119, size: 8, elements: !1983)
!2119 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2023, file: !171, line: 3379, baseType: !2121, size: 320)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !2122)
!2122 = !{!2123, !2124, !2125}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2121, file: !171, line: 1429, baseType: !2059, size: 192)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2121, file: !171, line: 1430, baseType: !2021, size: 64, offset: 192)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2121, file: !171, line: 1431, baseType: !2021, size: 64, offset: 256)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2023, file: !171, line: 3380, baseType: !2127, size: 320)
!2127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !2128)
!2128 = !{!2129, !2130}
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2127, file: !171, line: 1461, baseType: !2059, size: 192)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2127, file: !171, line: 1462, baseType: !2131, size: 128, offset: 192)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2132, line: 31, size: 128, elements: !2133)
!2132 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2133 = !{!2134, !2138, !2139}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2131, file: !2132, line: 32, baseType: !2135, size: 64)
!2135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2136, size: 64)
!2136 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2137)
!2137 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2131, file: !2132, line: 33, baseType: !7, size: 32, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2131, file: !2132, line: 34, baseType: !7, size: 32, offset: 96)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2023, file: !171, line: 3381, baseType: !2141, size: 384)
!2141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !2142)
!2142 = !{!2143, !2144, !2149, !2150, !2151}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2141, file: !171, line: 2508, baseType: !2059, size: 192)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2141, file: !171, line: 2509, baseType: !2145, size: 32, offset: 192)
!2145 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2146, line: 58, baseType: !2147)
!2146 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2148, line: 44, baseType: !7)
!2148 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2141, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2141, file: !171, line: 2511, baseType: !2021, size: 64, offset: 256)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2141, file: !171, line: 2512, baseType: !2021, size: 64, offset: 320)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2023, file: !171, line: 3382, baseType: !2153, size: 896)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !2154)
!2154 = !{!2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2153, file: !171, line: 2653, baseType: !2141, size: 384)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2153, file: !171, line: 2654, baseType: !2021, size: 64, offset: 384)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2153, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2153, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2153, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2153, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2153, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2153, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2153, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2153, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2153, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2153, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2153, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2153, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2153, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2153, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2153, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2153, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2153, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2153, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2153, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2153, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2153, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2153, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2153, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2153, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2153, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2153, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2153, file: !171, line: 2705, baseType: !2021, size: 64, offset: 576)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2153, file: !171, line: 2706, baseType: !2021, size: 64, offset: 640)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2153, file: !171, line: 2707, baseType: !2021, size: 64, offset: 704)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2153, file: !171, line: 2708, baseType: !2021, size: 64, offset: 768)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2153, file: !171, line: 2711, baseType: !2188, size: 64, offset: 832)
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2023, file: !171, line: 3383, baseType: !2191, size: 960)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !2192)
!2192 = !{!2193, !2194}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2191, file: !171, line: 2757, baseType: !2153, size: 896)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2191, file: !171, line: 2758, baseType: !2195, size: 64, offset: 896)
!2195 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1962, line: 50, baseType: !2196)
!2196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2197, size: 64)
!2197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !765, line: 240, size: 384, elements: !2198)
!2198 = !{!2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209}
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2197, file: !765, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2197, file: !765, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2197, file: !765, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2197, file: !765, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2197, file: !765, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2197, file: !765, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2197, file: !765, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2197, file: !765, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2197, file: !765, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2197, file: !765, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2197, file: !765, line: 321, baseType: !2210, size: 320, offset: 64)
!2210 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !765, line: 315, size: 320, elements: !2211)
!2211 = !{!2212, !2333, !2335, !2398, !2399}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2210, file: !765, line: 316, baseType: !2213, size: 64)
!2213 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2214, size: 64, elements: !1983)
!2214 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !765, line: 183, baseType: !2215)
!2215 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !765, line: 166, size: 64, elements: !2216)
!2216 = !{!2217, !2218, !2219, !2222, !2223, !2231, !2232, !2244, !2247, !2308, !2309, !2310, !2323, !2330}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2215, file: !765, line: 168, baseType: !1954, size: 32)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2215, file: !765, line: 169, baseType: !7, size: 32)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2215, file: !765, line: 170, baseType: !2220, size: 64)
!2220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2221, size: 64)
!2221 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2119)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2215, file: !765, line: 171, baseType: !2195, size: 64)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2215, file: !765, line: 172, baseType: !2224, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1962, line: 53, baseType: !2225)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !765, line: 359, size: 128, elements: !2227)
!2227 = !{!2228, !2229}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2226, file: !765, line: 360, baseType: !1954, size: 32)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2226, file: !765, line: 361, baseType: !2230, size: 64, offset: 64)
!2230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2195, size: 64, elements: !1983)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2215, file: !765, line: 173, baseType: !5, size: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2215, file: !765, line: 174, baseType: !2233, size: 32)
!2233 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !765, line: 133, baseType: !2234)
!2234 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !765, line: 115, size: 32, elements: !2235)
!2235 = !{!2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243}
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2234, file: !765, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2234, file: !765, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2234, file: !765, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2234, file: !765, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2234, file: !765, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2234, file: !765, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2234, file: !765, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2234, file: !765, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2215, file: !765, line: 175, baseType: !2245, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2246, size: 64)
!2246 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !765, line: 175, flags: DIFlagFwdDecl)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2215, file: !765, line: 176, baseType: !2248, size: 64)
!2248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2249, size: 64)
!2249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2250, line: 75, size: 256, elements: !2251)
!2250 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2251 = !{!2252, !2266, !2267, !2268}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2249, file: !2250, line: 76, baseType: !2253, size: 64)
!2253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2254, size: 64)
!2254 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2250, line: 68, baseType: !2255)
!2255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2250, line: 63, size: 320, elements: !2256)
!2256 = !{!2257, !2259, !2260, !2261}
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2255, file: !2250, line: 64, baseType: !2258, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2255, file: !2250, line: 65, baseType: !2258, size: 64, offset: 64)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2255, file: !2250, line: 66, baseType: !7, size: 32, offset: 128)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2255, file: !2250, line: 67, baseType: !2262, size: 128, offset: 192)
!2262 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2263, size: 128, elements: !2264)
!2263 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2250, line: 29, baseType: !2074)
!2264 = !{!2265}
!2265 = !DISubrange(count: 2)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2249, file: !2250, line: 77, baseType: !2253, size: 64, offset: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2249, file: !2250, line: 78, baseType: !7, size: 32, offset: 128)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2249, file: !2250, line: 79, baseType: !2269, size: 64, offset: 192)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2250, line: 49, baseType: !2271)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2250, line: 45, size: 832, elements: !2272)
!2272 = !{!2273, !2274, !2275}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2271, file: !2250, line: 46, baseType: !2258, size: 64)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2271, file: !2250, line: 47, baseType: !2248, size: 64, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2271, file: !2250, line: 48, baseType: !2276, size: 704, offset: 128)
!2276 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2277, line: 164, size: 704, elements: !2278)
!2277 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2278 = !{!2279, !2280, !2291, !2292, !2293, !2294, !2295, !2296, !2300, !2304, !2305, !2306, !2307}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2276, file: !2277, line: 166, baseType: !2076, size: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2276, file: !2277, line: 167, baseType: !2281, size: 64, offset: 64)
!2281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2282, size: 64)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2277, line: 157, size: 192, elements: !2283)
!2283 = !{!2284, !2286, !2287}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2282, file: !2277, line: 159, baseType: !2285, size: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2119, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2282, file: !2277, line: 160, baseType: !2281, size: 64, offset: 64)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2282, file: !2277, line: 161, baseType: !2288, size: 32, offset: 128)
!2288 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2119, size: 32, elements: !2289)
!2289 = !{!2290}
!2290 = !DISubrange(count: 4)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2276, file: !2277, line: 168, baseType: !2285, size: 64, offset: 128)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2276, file: !2277, line: 169, baseType: !2285, size: 64, offset: 192)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2276, file: !2277, line: 170, baseType: !2285, size: 64, offset: 256)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2276, file: !2277, line: 171, baseType: !2076, size: 64, offset: 320)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2276, file: !2277, line: 172, baseType: !1954, size: 32, offset: 384)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2276, file: !2277, line: 176, baseType: !2297, size: 64, offset: 448)
!2297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2298, size: 64)
!2298 = !DISubroutineType(types: !2299)
!2299 = !{!2281, !1987, !2076}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2276, file: !2277, line: 177, baseType: !2301, size: 64, offset: 512)
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2302, size: 64)
!2302 = !DISubroutineType(types: !2303)
!2303 = !{null, !1987, !2281}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2276, file: !2277, line: 178, baseType: !1987, size: 64, offset: 576)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2276, file: !2277, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2276, file: !2277, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2276, file: !2277, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2215, file: !765, line: 177, baseType: !2021, size: 64)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2215, file: !765, line: 178, baseType: !1967, size: 64)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2215, file: !765, line: 179, baseType: !2311, size: 64)
!2311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2312, size: 64)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !765, line: 150, baseType: !2313)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !765, line: 142, size: 320, elements: !2314)
!2314 = !{!2315, !2316, !2317, !2318, !2321, !2322}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2313, file: !765, line: 144, baseType: !2021, size: 64)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2313, file: !765, line: 145, baseType: !2195, size: 64, offset: 64)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2313, file: !765, line: 146, baseType: !2195, size: 64, offset: 128)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2313, file: !765, line: 147, baseType: !2319, size: 32, offset: 192)
!2319 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2320, line: 31, baseType: !1954)
!2320 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2313, file: !765, line: 148, baseType: !7, size: 32, offset: 224)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2313, file: !765, line: 149, baseType: !2137, size: 8, offset: 256)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2215, file: !765, line: 180, baseType: !2324, size: 64)
!2324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!2325 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !765, line: 162, baseType: !2326)
!2326 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !765, line: 159, size: 128, elements: !2327)
!2327 = !{!2328, !2329}
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2326, file: !765, line: 160, baseType: !2021, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2326, file: !765, line: 161, baseType: !2076, size: 64, offset: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2215, file: !765, line: 181, baseType: !2331, size: 64)
!2331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2332, size: 64)
!2332 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !765, line: 181, flags: DIFlagFwdDecl)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2210, file: !765, line: 317, baseType: !2334, size: 64)
!2334 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2076, size: 64, elements: !1983)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2210, file: !765, line: 318, baseType: !2336, size: 320)
!2336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !765, line: 188, size: 320, elements: !2337)
!2337 = !{!2338, !2340, !2397}
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2336, file: !765, line: 190, baseType: !2339, size: 192)
!2339 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2214, size: 192, elements: !2094)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2336, file: !765, line: 193, baseType: !2341, size: 64, offset: 192)
!2341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2342, size: 64)
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !765, line: 206, size: 320, elements: !2343)
!2343 = !{!2344, !2382, !2383, !2384, !2396}
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2342, file: !765, line: 208, baseType: !2345, size: 64)
!2345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2346, size: 64)
!2346 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1962, line: 62, baseType: !2347)
!2347 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2348, line: 538, size: 256, elements: !2349)
!2348 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2349 = !{!2350, !2354, !2360, !2373}
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2347, file: !2348, line: 539, baseType: !2351, size: 32)
!2351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2348, line: 482, size: 32, elements: !2352)
!2352 = !{!2353}
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2351, file: !2348, line: 484, baseType: !7, size: 32)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2347, file: !2348, line: 540, baseType: !2355, size: 192)
!2355 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2348, line: 488, size: 192, elements: !2356)
!2356 = !{!2357, !2358, !2359}
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2355, file: !2348, line: 489, baseType: !2351, size: 32)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2355, file: !2348, line: 492, baseType: !2220, size: 64, offset: 64)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2355, file: !2348, line: 496, baseType: !2021, size: 64, offset: 128)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2347, file: !2348, line: 541, baseType: !2361, size: 256)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2348, line: 504, size: 256, elements: !2362)
!2362 = !{!2363, !2364, !2371, !2372}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2361, file: !2348, line: 505, baseType: !2351, size: 32)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2361, file: !2348, line: 509, baseType: !2365, size: 64, offset: 64)
!2365 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2348, line: 501, baseType: !2366)
!2366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2367, size: 64)
!2367 = !DISubroutineType(types: !2368)
!2368 = !{null, !2369}
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2361, file: !2348, line: 510, baseType: !2369, size: 64, offset: 128)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2361, file: !2348, line: 513, baseType: !2345, size: 64, offset: 192)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2347, file: !2348, line: 542, baseType: !2374, size: 128)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2348, line: 530, size: 128, elements: !2375)
!2375 = !{!2376, !2377}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2374, file: !2348, line: 531, baseType: !2351, size: 32)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2374, file: !2348, line: 534, baseType: !2378, size: 64, offset: 64)
!2378 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2348, line: 525, baseType: !2379)
!2379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2380, size: 64)
!2380 = !DISubroutineType(types: !2381)
!2381 = !{!2137, !2021, !2220, !2074, !2074}
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2342, file: !765, line: 211, baseType: !7, size: 32, offset: 64)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2342, file: !765, line: 214, baseType: !2076, size: 64, offset: 128)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2342, file: !765, line: 224, baseType: !2385, size: 64, offset: 192)
!2385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!2386 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !765, line: 202, baseType: !2387)
!2387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !765, line: 202, size: 128, elements: !2388)
!2388 = !{!2389}
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2387, file: !765, line: 202, baseType: !2390, size: 128)
!2390 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !765, line: 200, baseType: !2391)
!2391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !765, line: 200, size: 128, elements: !2392)
!2392 = !{!2393, !2394, !2395}
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2391, file: !765, line: 200, baseType: !7, size: 32)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2391, file: !765, line: 200, baseType: !7, size: 32, offset: 32)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2391, file: !765, line: 200, baseType: !2230, size: 64, offset: 64)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2342, file: !765, line: 234, baseType: !2385, size: 64, offset: 256)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2336, file: !765, line: 197, baseType: !2076, size: 64, offset: 256)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2210, file: !765, line: 319, baseType: !2083, size: 256)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2210, file: !765, line: 320, baseType: !2102, size: 192)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2023, file: !171, line: 3384, baseType: !2401, size: 1472)
!2401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !2402)
!2402 = !{!2403, !2424, !2425, !2426, !2427}
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2401, file: !171, line: 3115, baseType: !2404, size: 1216)
!2404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !2405)
!2405 = !{!2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423}
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2404, file: !171, line: 2985, baseType: !2191, size: 960)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2404, file: !171, line: 2986, baseType: !2021, size: 64, offset: 960)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2404, file: !171, line: 2987, baseType: !2021, size: 64, offset: 1024)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2404, file: !171, line: 2988, baseType: !2021, size: 64, offset: 1088)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2404, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2404, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2404, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2404, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2404, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2404, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2404, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2404, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2404, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2404, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2404, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2404, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2404, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2404, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2401, file: !171, line: 3117, baseType: !2021, size: 64, offset: 1216)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2401, file: !171, line: 3119, baseType: !2021, size: 64, offset: 1280)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2401, file: !171, line: 3121, baseType: !2021, size: 64, offset: 1344)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2401, file: !171, line: 3123, baseType: !2021, size: 64, offset: 1408)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2023, file: !171, line: 3385, baseType: !2429, size: 1088)
!2429 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !2430)
!2430 = !{!2431, !2432, !2433}
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2429, file: !171, line: 2875, baseType: !2191, size: 960)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2429, file: !171, line: 2876, baseType: !2195, size: 64, offset: 960)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2429, file: !171, line: 2877, baseType: !2434, size: 64, offset: 1024)
!2434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2435, size: 64)
!2435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1957, line: 172, size: 128, elements: !2436)
!2436 = !{!2437, !2438, !2439, !2440, !2441, !2442, !2443}
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2435, file: !1957, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2435, file: !1957, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2435, file: !1957, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2435, file: !1957, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2435, file: !1957, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2435, file: !1957, line: 195, baseType: !7, size: 32, offset: 32)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2435, file: !1957, line: 199, baseType: !2021, size: 64, offset: 64)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2023, file: !171, line: 3386, baseType: !2404, size: 1216)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2023, file: !171, line: 3387, baseType: !2446, size: 1280)
!2446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !2447)
!2447 = !{!2448, !2449}
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2446, file: !171, line: 3094, baseType: !2404, size: 1216)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2446, file: !171, line: 3095, baseType: !2434, size: 64, offset: 1216)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2023, file: !171, line: 3388, baseType: !2451, size: 1216)
!2451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !2452)
!2452 = !{!2453, !2454, !2455, !2456, !2457, !2458}
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2451, file: !171, line: 2825, baseType: !2153, size: 896)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2451, file: !171, line: 2827, baseType: !2021, size: 64, offset: 896)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2451, file: !171, line: 2828, baseType: !2021, size: 64, offset: 960)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2451, file: !171, line: 2829, baseType: !2021, size: 64, offset: 1024)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2451, file: !171, line: 2830, baseType: !2021, size: 64, offset: 1088)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2451, file: !171, line: 2831, baseType: !2021, size: 64, offset: 1152)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2023, file: !171, line: 3389, baseType: !2460, size: 1024)
!2460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !2461)
!2461 = !{!2462, !2463, !2464}
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2460, file: !171, line: 2851, baseType: !2191, size: 960)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2460, file: !171, line: 2852, baseType: !1954, size: 32, offset: 960)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2460, file: !171, line: 2853, baseType: !1954, size: 32, offset: 992)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2023, file: !171, line: 3390, baseType: !2466, size: 1024)
!2466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !2467)
!2467 = !{!2468, !2469}
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2466, file: !171, line: 2858, baseType: !2191, size: 960)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2466, file: !171, line: 2859, baseType: !2434, size: 64, offset: 960)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2023, file: !171, line: 3391, baseType: !2471, size: 960)
!2471 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !2472)
!2472 = !{!2473}
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2471, file: !171, line: 2863, baseType: !2191, size: 960)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2023, file: !171, line: 3392, baseType: !2475, size: 1472)
!2475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !2476)
!2476 = !{!2477}
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2475, file: !171, line: 3305, baseType: !2401, size: 1472)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2023, file: !171, line: 3393, baseType: !2479, size: 1792)
!2479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !2480)
!2480 = !{!2481, !2482, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029}
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2479, file: !171, line: 3249, baseType: !2401, size: 1472)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2479, file: !171, line: 3251, baseType: !2483, size: 64, offset: 1472)
!2483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2484, size: 64)
!2484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !727, line: 463, size: 1152, elements: !2485)
!2485 = !{!2486, !2648, !2679, !2891, !2945, !2953, !2954, !2955, !2956, !2957, !2958, !2982, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008}
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2484, file: !727, line: 464, baseType: !2487, size: 64)
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !2489)
!2489 = !{!2490, !2539, !2552, !2566, !2616, !2629}
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2488, file: !135, line: 197, baseType: !2491, size: 64)
!2491 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !2492)
!2492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2493, size: 64)
!2493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !2494)
!2494 = !{!2495, !2496, !2497, !2498, !2499, !2500, !2527, !2536, !2537, !2538}
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2493, file: !135, line: 119, baseType: !2492, size: 64)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2493, file: !135, line: 122, baseType: !2492, size: 64, offset: 64)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2493, file: !135, line: 123, baseType: !2492, size: 64, offset: 128)
!2498 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2493, file: !135, line: 126, baseType: !1954, size: 32, offset: 192)
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2493, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2493, file: !135, line: 165, baseType: !2501, size: 192, offset: 256)
!2501 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !2502)
!2502 = !{!2503, !2516, !2522}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2501, file: !135, line: 137, baseType: !2504, size: 128)
!2504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !2505)
!2505 = !{!2506, !2515}
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2504, file: !135, line: 135, baseType: !2507, size: 64)
!2507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2508, size: 64)
!2508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !2509)
!2509 = !{!2510, !2511, !2512, !2513, !2514}
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2508, file: !135, line: 96, baseType: !2507, size: 64)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2508, file: !135, line: 97, baseType: !2507, size: 64, offset: 64)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2508, file: !135, line: 101, baseType: !2021, size: 64, offset: 128)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2508, file: !135, line: 106, baseType: !2021, size: 64, offset: 192)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2508, file: !135, line: 111, baseType: !2021, size: 64, offset: 256)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2504, file: !135, line: 136, baseType: !2507, size: 64, offset: 64)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2501, file: !135, line: 151, baseType: !2517, size: 192)
!2517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !2518)
!2518 = !{!2519, !2520, !2521}
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2517, file: !135, line: 141, baseType: !2021, size: 64)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2517, file: !135, line: 145, baseType: !2021, size: 64, offset: 64)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2517, file: !135, line: 150, baseType: !1954, size: 32, offset: 128)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2501, file: !135, line: 164, baseType: !2523, size: 128)
!2523 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !2524)
!2524 = !{!2525, !2526}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2523, file: !135, line: 161, baseType: !2021, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2523, file: !135, line: 163, baseType: !2145, size: 32, offset: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2493, file: !135, line: 168, baseType: !2528, size: 64, offset: 448)
!2528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2529, size: 64)
!2529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !2530)
!2530 = !{!2531, !2532, !2533, !2534, !2535}
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2529, file: !135, line: 70, baseType: !2528, size: 64)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2529, file: !135, line: 73, baseType: !2492, size: 64, offset: 64)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2529, file: !135, line: 78, baseType: !2021, size: 64, offset: 128)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2529, file: !135, line: 85, baseType: !2195, size: 64, offset: 192)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2529, file: !135, line: 88, baseType: !1954, size: 32, offset: 256)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2493, file: !135, line: 173, baseType: !2195, size: 64, offset: 512)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2493, file: !135, line: 173, baseType: !2195, size: 64, offset: 576)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2493, file: !135, line: 177, baseType: !2137, size: 8, offset: 640)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2488, file: !135, line: 200, baseType: !2540, size: 64, offset: 64)
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2541, size: 64)
!2541 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !2542)
!2542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !2543)
!2543 = !{!2544}
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2542, file: !135, line: 185, baseType: !2545, size: 128)
!2545 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !2546)
!2546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !2547)
!2547 = !{!2548, !2549, !2550}
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2546, file: !135, line: 184, baseType: !7, size: 32)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2546, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2546, file: !135, line: 184, baseType: !2551, size: 64, offset: 64)
!2551 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2491, size: 64, elements: !1983)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2488, file: !135, line: 203, baseType: !2553, size: 64, offset: 128)
!2553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2554, size: 64)
!2554 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !2555)
!2555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !2556)
!2556 = !{!2557}
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2555, file: !135, line: 189, baseType: !2558, size: 128)
!2558 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !2559)
!2559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !2560)
!2560 = !{!2561, !2562, !2563}
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2559, file: !135, line: 188, baseType: !7, size: 32)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2559, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2559, file: !135, line: 188, baseType: !2564, size: 64, offset: 64)
!2564 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2565, size: 64, elements: !1983)
!2565 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !2528)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2488, file: !135, line: 207, baseType: !2567, size: 64, offset: 192)
!2567 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !2568, line: 144, baseType: !2569)
!2568 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2569 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2570, size: 64)
!2570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !2568, line: 100, size: 896, elements: !2571)
!2571 = !{!2572, !2578, !2583, !2588, !2590, !2593, !2594, !2595, !2596, !2597, !2602, !2604, !2605, !2610, !2615}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2570, file: !2568, line: 102, baseType: !2573, size: 64)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !2568, line: 52, baseType: !2574)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = !DISubroutineType(types: !2576)
!2576 = !{!2577, !2369}
!2577 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !2568, line: 47, baseType: !7)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2570, file: !2568, line: 105, baseType: !2579, size: 64, offset: 64)
!2579 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !2568, line: 59, baseType: !2580)
!2580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2581, size: 64)
!2581 = !DISubroutineType(types: !2582)
!2582 = !{!1954, !2369, !2369}
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2570, file: !2568, line: 108, baseType: !2584, size: 64, offset: 128)
!2584 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !2568, line: 63, baseType: !2585)
!2585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2586, size: 64)
!2586 = !DISubroutineType(types: !2587)
!2587 = !{null, !1987}
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2570, file: !2568, line: 111, baseType: !2589, size: 64, offset: 192)
!2589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1987, size: 64)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2570, file: !2568, line: 114, baseType: !2591, size: 64, offset: 256)
!2591 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2592, line: 46, baseType: !2074)
!2592 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2570, file: !2568, line: 117, baseType: !2591, size: 64, offset: 320)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2570, file: !2568, line: 120, baseType: !2591, size: 64, offset: 384)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2570, file: !2568, line: 124, baseType: !7, size: 32, offset: 448)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2570, file: !2568, line: 128, baseType: !7, size: 32, offset: 480)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2570, file: !2568, line: 131, baseType: !2598, size: 64, offset: 512)
!2598 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !2568, line: 75, baseType: !2599)
!2599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2600, size: 64)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{!1987, !2591, !2591}
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2570, file: !2568, line: 132, baseType: !2603, size: 64, offset: 576)
!2603 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !2568, line: 78, baseType: !2585)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2570, file: !2568, line: 135, baseType: !1987, size: 64, offset: 640)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2570, file: !2568, line: 136, baseType: !2606, size: 64, offset: 704)
!2606 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !2568, line: 82, baseType: !2607)
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2608, size: 64)
!2608 = !DISubroutineType(types: !2609)
!2609 = !{!1987, !1987, !2591, !2591}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2570, file: !2568, line: 137, baseType: !2611, size: 64, offset: 768)
!2611 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !2568, line: 83, baseType: !2612)
!2612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2613, size: 64)
!2613 = !DISubroutineType(types: !2614)
!2614 = !{null, !1987, !1987}
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2570, file: !2568, line: 141, baseType: !7, size: 32, offset: 832)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2488, file: !135, line: 211, baseType: !2617, size: 64, offset: 256)
!2617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2618, size: 64)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !2619)
!2619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !2620)
!2620 = !{!2621}
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2619, file: !171, line: 183, baseType: !2622, size: 128)
!2622 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !2623)
!2623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !2624)
!2624 = !{!2625, !2626, !2627}
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2623, file: !171, line: 182, baseType: !7, size: 32)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2623, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2623, file: !171, line: 182, baseType: !2628, size: 64, offset: 64)
!2628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2021, size: 64, elements: !1983)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2488, file: !135, line: 220, baseType: !2630, size: 64, offset: 320)
!2630 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !2631)
!2631 = !{!2632, !2633}
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !2630, file: !135, line: 218, baseType: !2617, size: 64)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !2630, file: !135, line: 219, baseType: !2634, size: 64)
!2634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2635, size: 64)
!2635 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !2636, line: 29, baseType: !2637)
!2636 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !2636, line: 29, size: 96, elements: !2638)
!2638 = !{!2639}
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2637, file: !2636, line: 29, baseType: !2640, size: 96)
!2640 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !2636, line: 27, baseType: !2641)
!2641 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !2636, line: 27, size: 96, elements: !2642)
!2642 = !{!2643, !2644, !2645}
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2641, file: !2636, line: 27, baseType: !7, size: 32)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2641, file: !2636, line: 27, baseType: !7, size: 32, offset: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2641, file: !2636, line: 27, baseType: !2646, size: 8, offset: 64)
!2646 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2647, size: 8, elements: !1983)
!2647 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !2636, line: 26, baseType: !2137)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2484, file: !727, line: 467, baseType: !2649, size: 64, offset: 64)
!2649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2650, size: 64)
!2650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !142, line: 374, size: 640, elements: !2651)
!2651 = !{!2652, !2654, !2655, !2668, !2669, !2670, !2671, !2672, !2673, !2675, !2677, !2678}
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2650, file: !142, line: 377, baseType: !2653, size: 64)
!2653 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1962, line: 111, baseType: !1967)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2650, file: !142, line: 378, baseType: !2653, size: 64, offset: 64)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2650, file: !142, line: 381, baseType: !2656, size: 64, offset: 128)
!2656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2657, size: 64)
!2657 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !142, line: 282, baseType: !2658)
!2658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !142, line: 282, size: 128, elements: !2659)
!2659 = !{!2660}
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2658, file: !142, line: 282, baseType: !2661, size: 128)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !142, line: 281, baseType: !2662)
!2662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !142, line: 281, size: 128, elements: !2663)
!2663 = !{!2664, !2665, !2666}
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2662, file: !142, line: 281, baseType: !7, size: 32)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2662, file: !142, line: 281, baseType: !7, size: 32, offset: 32)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2662, file: !142, line: 281, baseType: !2667, size: 64, offset: 64)
!2667 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2653, size: 64, elements: !1983)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2650, file: !142, line: 384, baseType: !1954, size: 32, offset: 192)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2650, file: !142, line: 387, baseType: !1954, size: 32, offset: 224)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2650, file: !142, line: 390, baseType: !1954, size: 32, offset: 256)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2650, file: !142, line: 394, baseType: !2656, size: 64, offset: 320)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2650, file: !142, line: 396, baseType: !141, size: 32, offset: 384)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2650, file: !142, line: 399, baseType: !2674, size: 64, offset: 416)
!2674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 64, elements: !2264)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2650, file: !142, line: 402, baseType: !2676, size: 64, offset: 480)
!2676 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2264)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2650, file: !142, line: 406, baseType: !1954, size: 32, offset: 544)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2650, file: !142, line: 409, baseType: !1954, size: 32, offset: 576)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2484, file: !727, line: 470, baseType: !2680, size: 64, offset: 128)
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2681, size: 64)
!2681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !1125, line: 143, size: 192, elements: !2682)
!2682 = !{!2683, !2889, !2890}
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2681, file: !1125, line: 145, baseType: !2684, size: 64)
!2684 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1962, line: 69, baseType: !2685)
!2685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!2686 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !1125, line: 136, size: 192, elements: !2687)
!2687 = !{!2688, !2887, !2888}
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2686, file: !1125, line: 137, baseType: !2689, size: 64)
!2689 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1962, line: 58, baseType: !2690)
!2690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2691, size: 64)
!2691 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !1125, line: 737, size: 768, elements: !2692)
!2692 = !{!2693, !2710, !2743, !2749, !2754, !2760, !2767, !2773, !2779, !2784, !2798, !2803, !2809, !2814, !2824, !2829, !2845, !2852, !2859, !2865, !2870, !2876, !2882}
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2691, file: !1125, line: 738, baseType: !2694, size: 256)
!2694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !1125, line: 271, size: 256, elements: !2695)
!2695 = !{!2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709}
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2694, file: !1125, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !2694, file: !1125, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2694, file: !1125, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !2694, file: !1125, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !2694, file: !1125, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !2694, file: !1125, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !2694, file: !1125, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !2694, file: !1125, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2694, file: !1125, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2694, file: !1125, line: 312, baseType: !7, size: 32, offset: 32)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !2694, file: !1125, line: 316, baseType: !2145, size: 32, offset: 64)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !2694, file: !1125, line: 319, baseType: !7, size: 32, offset: 96)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2694, file: !1125, line: 323, baseType: !1967, size: 64, offset: 128)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2694, file: !1125, line: 327, baseType: !2021, size: 64, offset: 192)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !2691, file: !1125, line: 739, baseType: !2711, size: 448)
!2711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !1125, line: 350, size: 448, elements: !2712)
!2712 = !{!2713, !2742}
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2711, file: !1125, line: 353, baseType: !2714, size: 384)
!2714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !1125, line: 333, size: 384, elements: !2715)
!2715 = !{!2716, !2717, !2725}
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2714, file: !1125, line: 336, baseType: !2694, size: 256)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !2714, file: !1125, line: 343, baseType: !2718, size: 64, offset: 256)
!2718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2719, size: 64)
!2719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !2720, line: 37, size: 128, elements: !2721)
!2720 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2721 = !{!2722, !2723}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2719, file: !2720, line: 39, baseType: !2718, size: 64)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !2719, file: !2720, line: 40, baseType: !2724, size: 64, offset: 64)
!2724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2021, size: 64)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !2714, file: !1125, line: 344, baseType: !2726, size: 64, offset: 320)
!2726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2727, size: 64)
!2727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !2720, line: 45, size: 320, elements: !2728)
!2728 = !{!2729, !2730}
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2727, file: !2720, line: 47, baseType: !2726, size: 64)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !2727, file: !2720, line: 48, baseType: !2731, size: 256, offset: 64)
!2731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !2732)
!2732 = !{!2733, !2735, !2736, !2741}
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2731, file: !171, line: 1884, baseType: !2734, size: 64)
!2734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2731, size: 64)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2731, file: !171, line: 1885, baseType: !2734, size: 64, offset: 64)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !2731, file: !171, line: 1891, baseType: !2737, size: 64, offset: 128)
!2737 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2731, file: !171, line: 1891, size: 64, elements: !2738)
!2738 = !{!2739, !2740}
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2737, file: !171, line: 1891, baseType: !2689, size: 64)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2737, file: !171, line: 1891, baseType: !2021, size: 64)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2731, file: !171, line: 1892, baseType: !2724, size: 64, offset: 192)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2711, file: !1125, line: 359, baseType: !2628, size: 64, offset: 384)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !2691, file: !1125, line: 740, baseType: !2744, size: 512)
!2744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !1125, line: 365, size: 512, elements: !2745)
!2745 = !{!2746, !2747, !2748}
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !2744, file: !1125, line: 368, baseType: !2714, size: 384)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !2744, file: !1125, line: 373, baseType: !2021, size: 64, offset: 384)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !2744, file: !1125, line: 374, baseType: !2021, size: 64, offset: 448)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !2691, file: !1125, line: 741, baseType: !2750, size: 576)
!2750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !1125, line: 380, size: 576, elements: !2751)
!2751 = !{!2752, !2753}
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2750, file: !1125, line: 383, baseType: !2744, size: 512)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2750, file: !1125, line: 389, baseType: !2628, size: 64, offset: 512)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2691, file: !1125, line: 742, baseType: !2755, size: 320)
!2755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !1125, line: 395, size: 320, elements: !2756)
!2756 = !{!2757, !2758}
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2755, file: !1125, line: 397, baseType: !2694, size: 256)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2755, file: !1125, line: 400, baseType: !2759, size: 64, offset: 256)
!2759 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1962, line: 66, baseType: !2680)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !2691, file: !1125, line: 743, baseType: !2761, size: 448)
!2761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !1125, line: 406, size: 448, elements: !2762)
!2762 = !{!2763, !2764, !2765, !2766}
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2761, file: !1125, line: 408, baseType: !2694, size: 256)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2761, file: !1125, line: 412, baseType: !2021, size: 64, offset: 256)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2761, file: !1125, line: 420, baseType: !2021, size: 64, offset: 320)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !2761, file: !1125, line: 423, baseType: !2759, size: 64, offset: 384)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !2691, file: !1125, line: 744, baseType: !2768, size: 384)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !1125, line: 429, size: 384, elements: !2769)
!2769 = !{!2770, !2771, !2772}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2768, file: !1125, line: 431, baseType: !2694, size: 256)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2768, file: !1125, line: 434, baseType: !2021, size: 64, offset: 256)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2768, file: !1125, line: 437, baseType: !2759, size: 64, offset: 320)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !2691, file: !1125, line: 745, baseType: !2774, size: 384)
!2774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !1125, line: 443, size: 384, elements: !2775)
!2775 = !{!2776, !2777, !2778}
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2774, file: !1125, line: 445, baseType: !2694, size: 256)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2774, file: !1125, line: 449, baseType: !2021, size: 64, offset: 256)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2774, file: !1125, line: 453, baseType: !2759, size: 64, offset: 320)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !2691, file: !1125, line: 746, baseType: !2780, size: 320)
!2780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !1125, line: 459, size: 320, elements: !2781)
!2781 = !{!2782, !2783}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2780, file: !1125, line: 461, baseType: !2694, size: 256)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2780, file: !1125, line: 464, baseType: !2021, size: 64, offset: 256)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !2691, file: !1125, line: 747, baseType: !2785, size: 768)
!2785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !1125, line: 469, size: 768, elements: !2786)
!2786 = !{!2787, !2788, !2789, !2790, !2791}
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2785, file: !1125, line: 471, baseType: !2694, size: 256)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2785, file: !1125, line: 474, baseType: !7, size: 32, offset: 256)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2785, file: !1125, line: 475, baseType: !7, size: 32, offset: 288)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2785, file: !1125, line: 478, baseType: !2021, size: 64, offset: 320)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2785, file: !1125, line: 481, baseType: !2792, size: 384, offset: 384)
!2792 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2793, size: 384, elements: !1983)
!2793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !171, line: 1917, size: 384, elements: !2794)
!2794 = !{!2795, !2796, !2797}
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2793, file: !171, line: 1920, baseType: !2731, size: 256)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2793, file: !171, line: 1921, baseType: !2021, size: 64, offset: 256)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2793, file: !171, line: 1922, baseType: !2145, size: 32, offset: 320)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !2691, file: !1125, line: 748, baseType: !2799, size: 320)
!2799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !1125, line: 487, size: 320, elements: !2800)
!2800 = !{!2801, !2802}
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2799, file: !1125, line: 490, baseType: !2694, size: 256)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2799, file: !1125, line: 494, baseType: !1954, size: 32, offset: 256)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !2691, file: !1125, line: 749, baseType: !2804, size: 384)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !1125, line: 500, size: 384, elements: !2805)
!2805 = !{!2806, !2807, !2808}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2804, file: !1125, line: 502, baseType: !2694, size: 256)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2804, file: !1125, line: 506, baseType: !2759, size: 64, offset: 256)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2804, file: !1125, line: 510, baseType: !2759, size: 64, offset: 320)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !2691, file: !1125, line: 750, baseType: !2810, size: 320)
!2810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !1125, line: 529, size: 320, elements: !2811)
!2811 = !{!2812, !2813}
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2810, file: !1125, line: 531, baseType: !2694, size: 256)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2810, file: !1125, line: 540, baseType: !2759, size: 64, offset: 256)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !2691, file: !1125, line: 751, baseType: !2815, size: 704)
!2815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !1125, line: 546, size: 704, elements: !2816)
!2816 = !{!2817, !2818, !2819, !2820, !2821, !2822, !2823}
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2815, file: !1125, line: 549, baseType: !2744, size: 512)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2815, file: !1125, line: 553, baseType: !2220, size: 64, offset: 512)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2815, file: !1125, line: 557, baseType: !2137, size: 8, offset: 576)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2815, file: !1125, line: 558, baseType: !2137, size: 8, offset: 584)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2815, file: !1125, line: 559, baseType: !2137, size: 8, offset: 592)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2815, file: !1125, line: 560, baseType: !2137, size: 8, offset: 600)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2815, file: !1125, line: 566, baseType: !2628, size: 64, offset: 640)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !2691, file: !1125, line: 752, baseType: !2825, size: 384)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !1125, line: 571, size: 384, elements: !2826)
!2826 = !{!2827, !2828}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2825, file: !1125, line: 573, baseType: !2755, size: 320)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2825, file: !1125, line: 577, baseType: !2021, size: 64, offset: 320)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !2691, file: !1125, line: 753, baseType: !2830, size: 576)
!2830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !1125, line: 600, size: 576, elements: !2831)
!2831 = !{!2832, !2833, !2834, !2835, !2844}
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2830, file: !1125, line: 602, baseType: !2755, size: 320)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2830, file: !1125, line: 605, baseType: !2021, size: 64, offset: 320)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2830, file: !1125, line: 609, baseType: !2591, size: 64, offset: 384)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2830, file: !1125, line: 612, baseType: !2836, size: 64, offset: 448)
!2836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2837, size: 64)
!2837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !1125, line: 581, size: 320, elements: !2838)
!2838 = !{!2839, !2840, !2841, !2842, !2843}
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2837, file: !1125, line: 583, baseType: !203, size: 32)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2837, file: !1125, line: 586, baseType: !2021, size: 64, offset: 64)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2837, file: !1125, line: 589, baseType: !2021, size: 64, offset: 128)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2837, file: !1125, line: 592, baseType: !2021, size: 64, offset: 192)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2837, file: !1125, line: 595, baseType: !2021, size: 64, offset: 256)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2830, file: !1125, line: 616, baseType: !2759, size: 64, offset: 512)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !2691, file: !1125, line: 754, baseType: !2846, size: 512)
!2846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !1125, line: 622, size: 512, elements: !2847)
!2847 = !{!2848, !2849, !2850, !2851}
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2846, file: !1125, line: 624, baseType: !2755, size: 320)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2846, file: !1125, line: 628, baseType: !2021, size: 64, offset: 320)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2846, file: !1125, line: 632, baseType: !2021, size: 64, offset: 384)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2846, file: !1125, line: 636, baseType: !2021, size: 64, offset: 448)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !2691, file: !1125, line: 755, baseType: !2853, size: 704)
!2853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !1125, line: 642, size: 704, elements: !2854)
!2854 = !{!2855, !2856, !2857, !2858}
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2853, file: !1125, line: 644, baseType: !2846, size: 512)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2853, file: !1125, line: 648, baseType: !2021, size: 64, offset: 512)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2853, file: !1125, line: 652, baseType: !2021, size: 64, offset: 576)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2853, file: !1125, line: 653, baseType: !2021, size: 64, offset: 640)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !2691, file: !1125, line: 756, baseType: !2860, size: 448)
!2860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !1125, line: 663, size: 448, elements: !2861)
!2861 = !{!2862, !2863, !2864}
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2860, file: !1125, line: 665, baseType: !2755, size: 320)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2860, file: !1125, line: 668, baseType: !2021, size: 64, offset: 320)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2860, file: !1125, line: 673, baseType: !2021, size: 64, offset: 384)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !2691, file: !1125, line: 757, baseType: !2866, size: 384)
!2866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !1125, line: 694, size: 384, elements: !2867)
!2867 = !{!2868, !2869}
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2866, file: !1125, line: 696, baseType: !2755, size: 320)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2866, file: !1125, line: 699, baseType: !2021, size: 64, offset: 320)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !2691, file: !1125, line: 758, baseType: !2871, size: 384)
!2871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !1125, line: 681, size: 384, elements: !2872)
!2872 = !{!2873, !2874, !2875}
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2871, file: !1125, line: 683, baseType: !2694, size: 256)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2871, file: !1125, line: 686, baseType: !2021, size: 64, offset: 256)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2871, file: !1125, line: 689, baseType: !2021, size: 64, offset: 320)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !2691, file: !1125, line: 759, baseType: !2877, size: 384)
!2877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !1125, line: 707, size: 384, elements: !2878)
!2878 = !{!2879, !2880, !2881}
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2877, file: !1125, line: 709, baseType: !2694, size: 256)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2877, file: !1125, line: 712, baseType: !2021, size: 64, offset: 256)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2877, file: !1125, line: 712, baseType: !2021, size: 64, offset: 320)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !2691, file: !1125, line: 760, baseType: !2883, size: 320)
!2883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !1125, line: 718, size: 320, elements: !2884)
!2884 = !{!2885, !2886}
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2883, file: !1125, line: 720, baseType: !2694, size: 256)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2883, file: !1125, line: 723, baseType: !2021, size: 64, offset: 256)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2686, file: !1125, line: 138, baseType: !2685, size: 64, offset: 64)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2686, file: !1125, line: 139, baseType: !2685, size: 64, offset: 128)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !2681, file: !1125, line: 146, baseType: !2684, size: 64, offset: 64)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2681, file: !1125, line: 152, baseType: !2759, size: 64, offset: 128)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2484, file: !727, line: 473, baseType: !2892, size: 64, offset: 192)
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1957, line: 39, size: 1152, elements: !2894)
!2894 = !{!2895, !2896, !2909, !2910, !2911, !2923, !2924, !2927, !2928, !2929, !2930, !2931}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2893, file: !1957, line: 41, baseType: !2567, size: 64)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2893, file: !1957, line: 48, baseType: !2897, size: 64, offset: 64)
!2897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2898, size: 64)
!2898 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !1125, line: 35, baseType: !2899)
!2899 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !1125, line: 35, size: 128, elements: !2900)
!2900 = !{!2901}
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2899, file: !1125, line: 35, baseType: !2902, size: 128)
!2902 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !1125, line: 33, baseType: !2903)
!2903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !1125, line: 33, size: 128, elements: !2904)
!2904 = !{!2905, !2906, !2907}
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2903, file: !1125, line: 33, baseType: !7, size: 32)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2903, file: !1125, line: 33, baseType: !7, size: 32, offset: 32)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2903, file: !1125, line: 33, baseType: !2908, size: 64, offset: 64)
!2908 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2689, size: 64, elements: !1983)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2893, file: !1957, line: 51, baseType: !2617, size: 64, offset: 128)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2893, file: !1957, line: 54, baseType: !2021, size: 64, offset: 192)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2893, file: !1957, line: 57, baseType: !2912, size: 128, offset: 256)
!2912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2913, line: 31, size: 128, elements: !2914)
!2913 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2914 = !{!2915, !2916, !2917, !2918, !2919, !2920, !2921}
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2912, file: !2913, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2912, file: !2913, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2912, file: !2913, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2912, file: !2913, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2912, file: !2913, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2912, file: !2913, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2912, file: !2913, line: 56, baseType: !2922, size: 64, offset: 64)
!2922 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1962, line: 47, baseType: !2248)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2893, file: !1957, line: 60, baseType: !2912, size: 128, offset: 384)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2893, file: !1957, line: 64, baseType: !2925, size: 64, offset: 512)
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2926 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !135, line: 27, flags: DIFlagFwdDecl)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2893, file: !1957, line: 67, baseType: !2021, size: 64, offset: 576)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2893, file: !1957, line: 73, baseType: !2567, size: 64, offset: 640)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2893, file: !1957, line: 77, baseType: !2922, size: 64, offset: 704)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2893, file: !1957, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2893, file: !1957, line: 82, baseType: !2932, size: 320, offset: 832)
!2932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !2720, line: 62, size: 320, elements: !2933)
!2933 = !{!2934, !2940, !2941, !2942, !2943, !2944}
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2932, file: !2720, line: 63, baseType: !2935, size: 64)
!2935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2936, size: 64)
!2936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !2720, line: 56, size: 128, elements: !2937)
!2937 = !{!2938, !2939}
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2936, file: !2720, line: 57, baseType: !2935, size: 64)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2936, file: !2720, line: 58, baseType: !2118, size: 8, offset: 64)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2932, file: !2720, line: 64, baseType: !7, size: 32, offset: 64)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2932, file: !2720, line: 66, baseType: !7, size: 32, offset: 96)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2932, file: !2720, line: 68, baseType: !2137, size: 8, offset: 128)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2932, file: !2720, line: 70, baseType: !2718, size: 64, offset: 192)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2932, file: !2720, line: 71, baseType: !2726, size: 64, offset: 256)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2484, file: !727, line: 476, baseType: !2946, size: 64, offset: 256)
!2946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2947, size: 64)
!2947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !153, line: 187, size: 256, elements: !2948)
!2948 = !{!2949, !2950, !2951, !2952}
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2947, file: !153, line: 189, baseType: !1954, size: 32)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2947, file: !153, line: 192, baseType: !2004, size: 64, offset: 64)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2947, file: !153, line: 197, baseType: !2567, size: 64, offset: 128)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2947, file: !153, line: 200, baseType: !1989, size: 64, offset: 192)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2484, file: !727, line: 479, baseType: !2567, size: 64, offset: 320)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2484, file: !727, line: 484, baseType: !2021, size: 64, offset: 384)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2484, file: !727, line: 488, baseType: !2021, size: 64, offset: 448)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2484, file: !727, line: 493, baseType: !2021, size: 64, offset: 512)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2484, file: !727, line: 496, baseType: !2021, size: 64, offset: 576)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2484, file: !727, line: 501, baseType: !2959, size: 64, offset: 640)
!2959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2960, size: 64)
!2960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !2961)
!2961 = !{!2962, !2965, !2966, !2967, !2968, !2970, !2971, !2976, !2977, !2978, !2979, !2980, !2981}
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2960, file: !166, line: 2356, baseType: !2963, size: 64)
!2963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2964, size: 64)
!2964 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2960, file: !166, line: 2357, baseType: !2220, size: 64, offset: 64)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2960, file: !166, line: 2358, baseType: !1954, size: 32, offset: 128)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2960, file: !166, line: 2359, baseType: !1954, size: 32, offset: 160)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2960, file: !166, line: 2360, baseType: !2969, size: 128, offset: 192)
!2969 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1954, size: 128, elements: !2289)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2960, file: !166, line: 2364, baseType: !1954, size: 32, offset: 320)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2960, file: !166, line: 2367, baseType: !2972, size: 128, offset: 384)
!2972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !2973)
!2973 = !{!2974, !2975}
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2972, file: !166, line: 2351, baseType: !2195, size: 64)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2972, file: !166, line: 2352, baseType: !2076, size: 64, offset: 64)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2960, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2960, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2960, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2960, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2960, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2960, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2484, file: !727, line: 504, baseType: !2983, size: 64, offset: 704)
!2983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2984, size: 64)
!2984 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !727, line: 504, flags: DIFlagFwdDecl)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2484, file: !727, line: 507, baseType: !2567, size: 64, offset: 768)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2484, file: !727, line: 510, baseType: !1954, size: 32, offset: 832)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2484, file: !727, line: 513, baseType: !1954, size: 32, offset: 864)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2484, file: !727, line: 516, baseType: !2145, size: 32, offset: 896)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2484, file: !727, line: 519, baseType: !2145, size: 32, offset: 928)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2484, file: !727, line: 522, baseType: !7, size: 32, offset: 960)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2484, file: !727, line: 523, baseType: !7, size: 32, offset: 992)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2484, file: !727, line: 528, baseType: !2220, size: 64, offset: 1024)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2484, file: !727, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2484, file: !727, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2484, file: !727, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2484, file: !727, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2484, file: !727, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2484, file: !727, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2484, file: !727, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2484, file: !727, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2484, file: !727, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2484, file: !727, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2484, file: !727, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2484, file: !727, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2484, file: !727, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2484, file: !727, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2484, file: !727, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2484, file: !727, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2479, file: !171, line: 3254, baseType: !2021, size: 64, offset: 1536)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2479, file: !171, line: 3257, baseType: !2021, size: 64, offset: 1600)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2479, file: !171, line: 3258, baseType: !2021, size: 64, offset: 1664)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2479, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2479, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2479, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2479, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2479, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2479, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2479, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2479, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2479, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2479, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2479, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2479, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2479, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2479, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2479, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2479, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2479, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2479, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2023, file: !171, line: 3394, baseType: !3031, size: 1344)
!3031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !3032)
!3032 = !{!3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3031, file: !171, line: 2280, baseType: !2059, size: 192)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3031, file: !171, line: 2281, baseType: !2021, size: 64, offset: 192)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3031, file: !171, line: 2282, baseType: !2021, size: 64, offset: 256)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3031, file: !171, line: 2283, baseType: !2021, size: 64, offset: 320)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3031, file: !171, line: 2284, baseType: !2021, size: 64, offset: 384)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3031, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3031, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3031, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3031, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3031, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3031, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3031, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3031, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3031, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3031, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3031, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3031, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3031, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3031, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3031, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3031, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3031, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3031, file: !171, line: 2306, baseType: !2319, size: 32, offset: 544)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3031, file: !171, line: 2307, baseType: !2021, size: 64, offset: 576)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3031, file: !171, line: 2308, baseType: !2021, size: 64, offset: 640)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3031, file: !171, line: 2314, baseType: !3059, size: 64, offset: 704)
!3059 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !3060)
!3060 = !{!3061, !3062, !3063}
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3059, file: !171, line: 2310, baseType: !1954, size: 32)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3059, file: !171, line: 2311, baseType: !2220, size: 64)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3059, file: !171, line: 2312, baseType: !3064, size: 64)
!3064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3065, size: 64)
!3065 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3031, file: !171, line: 2315, baseType: !2021, size: 64, offset: 768)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3031, file: !171, line: 2316, baseType: !2021, size: 64, offset: 832)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3031, file: !171, line: 2317, baseType: !2021, size: 64, offset: 896)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3031, file: !171, line: 2318, baseType: !2021, size: 64, offset: 960)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3031, file: !171, line: 2319, baseType: !2021, size: 64, offset: 1024)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3031, file: !171, line: 2320, baseType: !2021, size: 64, offset: 1088)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3031, file: !171, line: 2321, baseType: !2021, size: 64, offset: 1152)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3031, file: !171, line: 2322, baseType: !2021, size: 64, offset: 1216)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3031, file: !171, line: 2324, baseType: !3075, size: 64, offset: 1280)
!3075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3076, size: 64)
!3076 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2023, file: !171, line: 3395, baseType: !3078, size: 320)
!3078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !3079)
!3079 = !{!3080, !3081, !3082}
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3078, file: !171, line: 1470, baseType: !2059, size: 192)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3078, file: !171, line: 1471, baseType: !2021, size: 64, offset: 192)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3078, file: !171, line: 1472, baseType: !2021, size: 64, offset: 256)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2023, file: !171, line: 3396, baseType: !3084, size: 320)
!3084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !3085)
!3085 = !{!3086, !3087, !3088}
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3084, file: !171, line: 1483, baseType: !2059, size: 192)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3084, file: !171, line: 1484, baseType: !1954, size: 32, offset: 192)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3084, file: !171, line: 1485, baseType: !2628, size: 64, offset: 256)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2023, file: !171, line: 3397, baseType: !3090, size: 384)
!3090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !3091)
!3091 = !{!3092, !3093, !3094, !3095}
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3090, file: !171, line: 1830, baseType: !2059, size: 192)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3090, file: !171, line: 1831, baseType: !2145, size: 32, offset: 192)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3090, file: !171, line: 1832, baseType: !2021, size: 64, offset: 256)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3090, file: !171, line: 1835, baseType: !2628, size: 64, offset: 320)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2023, file: !171, line: 3398, baseType: !3097, size: 704)
!3097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !3098)
!3098 = !{!3099, !3100, !3101, !3102, !3103, !3108}
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3097, file: !171, line: 1899, baseType: !2059, size: 192)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3097, file: !171, line: 1902, baseType: !2021, size: 64, offset: 192)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3097, file: !171, line: 1905, baseType: !2689, size: 64, offset: 256)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3097, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3097, file: !171, line: 1911, baseType: !3104, size: 64, offset: 384)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!3105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1957, line: 117, size: 128, elements: !3106)
!3106 = !{!3107}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !3105, file: !1957, line: 120, baseType: !2912, size: 128)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3097, file: !171, line: 1914, baseType: !2731, size: 256, offset: 448)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2023, file: !171, line: 3399, baseType: !3110, size: 704)
!3110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !3111)
!3111 = !{!3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122}
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3110, file: !171, line: 2009, baseType: !2059, size: 192)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3110, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3110, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3110, file: !171, line: 2014, baseType: !2145, size: 32, offset: 224)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3110, file: !171, line: 2016, baseType: !2021, size: 64, offset: 256)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3110, file: !171, line: 2017, baseType: !2617, size: 64, offset: 320)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3110, file: !171, line: 2019, baseType: !2021, size: 64, offset: 384)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3110, file: !171, line: 2020, baseType: !2021, size: 64, offset: 448)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3110, file: !171, line: 2021, baseType: !2021, size: 64, offset: 512)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3110, file: !171, line: 2022, baseType: !2021, size: 64, offset: 576)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3110, file: !171, line: 2023, baseType: !2021, size: 64, offset: 640)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2023, file: !171, line: 3400, baseType: !3124, size: 832)
!3124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !3125)
!3125 = !{!3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135}
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3124, file: !171, line: 2431, baseType: !2059, size: 192)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3124, file: !171, line: 2433, baseType: !2021, size: 64, offset: 192)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3124, file: !171, line: 2434, baseType: !2021, size: 64, offset: 256)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3124, file: !171, line: 2435, baseType: !2021, size: 64, offset: 320)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3124, file: !171, line: 2436, baseType: !2021, size: 64, offset: 384)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3124, file: !171, line: 2437, baseType: !2617, size: 64, offset: 448)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3124, file: !171, line: 2438, baseType: !2021, size: 64, offset: 512)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3124, file: !171, line: 2440, baseType: !2021, size: 64, offset: 576)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3124, file: !171, line: 2441, baseType: !2021, size: 64, offset: 640)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3124, file: !171, line: 2443, baseType: !3136, size: 128, offset: 704)
!3136 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !3137)
!3137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !3138)
!3138 = !{!3139}
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3137, file: !171, line: 182, baseType: !2622, size: 128)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2023, file: !171, line: 3401, baseType: !3141, size: 320)
!3141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !3142)
!3142 = !{!3143, !3144, !3151}
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3141, file: !171, line: 3329, baseType: !2059, size: 192)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3141, file: !171, line: 3330, baseType: !3145, size: 64, offset: 192)
!3145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3146, size: 64)
!3146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !3147)
!3147 = !{!3148, !3149, !3150}
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3146, file: !171, line: 3322, baseType: !3145, size: 64)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3146, file: !171, line: 3323, baseType: !3145, size: 64, offset: 64)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3146, file: !171, line: 3324, baseType: !2021, size: 64, offset: 128)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3141, file: !171, line: 3331, baseType: !3145, size: 64, offset: 256)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2023, file: !171, line: 3402, baseType: !3153, size: 256)
!3153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !3154)
!3154 = !{!3155, !3156}
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3153, file: !171, line: 1541, baseType: !2059, size: 192)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3153, file: !171, line: 1542, baseType: !3157, size: 64, offset: 192)
!3157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3158, size: 64)
!3158 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !3159)
!3159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !3160)
!3160 = !{!3161}
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3159, file: !171, line: 1538, baseType: !3162, size: 192)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !3163)
!3163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !3164)
!3164 = !{!3165, !3166, !3167}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3163, file: !171, line: 1537, baseType: !7, size: 32)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3163, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3163, file: !171, line: 1537, baseType: !3168, size: 128, offset: 64)
!3168 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3169, size: 128, elements: !1983)
!3169 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !3170)
!3170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !3171)
!3171 = !{!3172, !3173}
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3170, file: !171, line: 1533, baseType: !2021, size: 64)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3170, file: !171, line: 1534, baseType: !2021, size: 64, offset: 64)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2023, file: !171, line: 3403, baseType: !3175, size: 512)
!3175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !3176)
!3176 = !{!3177, !3178, !3179, !3180, !3186, !3187, !3188}
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3175, file: !171, line: 1939, baseType: !2059, size: 192)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3175, file: !171, line: 1940, baseType: !2145, size: 32, offset: 192)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3175, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3175, file: !171, line: 1946, baseType: !3181, size: 32, offset: 256)
!3181 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !3182)
!3182 = !{!3183, !3184, !3185}
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3181, file: !171, line: 1943, baseType: !189, size: 32)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3181, file: !171, line: 1944, baseType: !196, size: 32)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3181, file: !171, line: 1945, baseType: !203, size: 32)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3175, file: !171, line: 1950, baseType: !2759, size: 64, offset: 320)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3175, file: !171, line: 1951, baseType: !2759, size: 64, offset: 384)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3175, file: !171, line: 1953, baseType: !2628, size: 64, offset: 448)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2023, file: !171, line: 3404, baseType: !3190, size: 1664)
!3190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !3191)
!3191 = !{!3192, !3193}
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3190, file: !171, line: 3338, baseType: !2059, size: 192)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3190, file: !171, line: 3341, baseType: !3194, size: 1472, offset: 192)
!3194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !3195, line: 410, size: 1472, elements: !3196)
!3195 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3196 = !{!3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3338, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360}
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3194, file: !3195, line: 412, baseType: !1954, size: 32)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3194, file: !3195, line: 413, baseType: !1954, size: 32, offset: 32)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3194, file: !3195, line: 414, baseType: !1954, size: 32, offset: 64)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3194, file: !3195, line: 415, baseType: !1954, size: 32, offset: 96)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3194, file: !3195, line: 416, baseType: !1954, size: 32, offset: 128)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3194, file: !3195, line: 417, baseType: !1954, size: 32, offset: 160)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3194, file: !3195, line: 418, baseType: !2137, size: 8, offset: 192)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3194, file: !3195, line: 419, baseType: !2137, size: 8, offset: 200)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3194, file: !3195, line: 420, baseType: !3206, size: 8, offset: 208)
!3206 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3194, file: !3195, line: 421, baseType: !3206, size: 8, offset: 216)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3194, file: !3195, line: 422, baseType: !3206, size: 8, offset: 224)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3194, file: !3195, line: 423, baseType: !3206, size: 8, offset: 232)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3194, file: !3195, line: 424, baseType: !3206, size: 8, offset: 240)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3194, file: !3195, line: 425, baseType: !3206, size: 8, offset: 248)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3194, file: !3195, line: 426, baseType: !3206, size: 8, offset: 256)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3194, file: !3195, line: 427, baseType: !3206, size: 8, offset: 264)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3194, file: !3195, line: 428, baseType: !3206, size: 8, offset: 272)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3194, file: !3195, line: 429, baseType: !3206, size: 8, offset: 280)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3194, file: !3195, line: 430, baseType: !3206, size: 8, offset: 288)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3194, file: !3195, line: 431, baseType: !3206, size: 8, offset: 296)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3194, file: !3195, line: 432, baseType: !3206, size: 8, offset: 304)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3194, file: !3195, line: 433, baseType: !3206, size: 8, offset: 312)
!3220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3194, file: !3195, line: 434, baseType: !3206, size: 8, offset: 320)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3194, file: !3195, line: 435, baseType: !3206, size: 8, offset: 328)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3194, file: !3195, line: 436, baseType: !3206, size: 8, offset: 336)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3194, file: !3195, line: 437, baseType: !3206, size: 8, offset: 344)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3194, file: !3195, line: 438, baseType: !3206, size: 8, offset: 352)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3194, file: !3195, line: 439, baseType: !3206, size: 8, offset: 360)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3194, file: !3195, line: 440, baseType: !3206, size: 8, offset: 368)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3194, file: !3195, line: 441, baseType: !3206, size: 8, offset: 376)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3194, file: !3195, line: 442, baseType: !3206, size: 8, offset: 384)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3194, file: !3195, line: 443, baseType: !3206, size: 8, offset: 392)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3194, file: !3195, line: 444, baseType: !3206, size: 8, offset: 400)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3194, file: !3195, line: 445, baseType: !3206, size: 8, offset: 408)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3194, file: !3195, line: 446, baseType: !3206, size: 8, offset: 416)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3194, file: !3195, line: 447, baseType: !3206, size: 8, offset: 424)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3194, file: !3195, line: 448, baseType: !3206, size: 8, offset: 432)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3194, file: !3195, line: 449, baseType: !3206, size: 8, offset: 440)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3194, file: !3195, line: 450, baseType: !3206, size: 8, offset: 448)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3194, file: !3195, line: 451, baseType: !3206, size: 8, offset: 456)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3194, file: !3195, line: 452, baseType: !3206, size: 8, offset: 464)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3194, file: !3195, line: 453, baseType: !3206, size: 8, offset: 472)
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3194, file: !3195, line: 454, baseType: !3206, size: 8, offset: 480)
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3194, file: !3195, line: 455, baseType: !3206, size: 8, offset: 488)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3194, file: !3195, line: 456, baseType: !3206, size: 8, offset: 496)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3194, file: !3195, line: 457, baseType: !3206, size: 8, offset: 504)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3194, file: !3195, line: 458, baseType: !3206, size: 8, offset: 512)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3194, file: !3195, line: 459, baseType: !3206, size: 8, offset: 520)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3194, file: !3195, line: 460, baseType: !3206, size: 8, offset: 528)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3194, file: !3195, line: 461, baseType: !3206, size: 8, offset: 536)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3194, file: !3195, line: 462, baseType: !3206, size: 8, offset: 544)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3194, file: !3195, line: 463, baseType: !3206, size: 8, offset: 552)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3194, file: !3195, line: 464, baseType: !3206, size: 8, offset: 560)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3194, file: !3195, line: 465, baseType: !3206, size: 8, offset: 568)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3194, file: !3195, line: 466, baseType: !3206, size: 8, offset: 576)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3194, file: !3195, line: 467, baseType: !3206, size: 8, offset: 584)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3194, file: !3195, line: 468, baseType: !3206, size: 8, offset: 592)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3194, file: !3195, line: 469, baseType: !3206, size: 8, offset: 600)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3194, file: !3195, line: 470, baseType: !3206, size: 8, offset: 608)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3194, file: !3195, line: 471, baseType: !3206, size: 8, offset: 616)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3194, file: !3195, line: 472, baseType: !3206, size: 8, offset: 624)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3194, file: !3195, line: 473, baseType: !3206, size: 8, offset: 632)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3194, file: !3195, line: 474, baseType: !3206, size: 8, offset: 640)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3194, file: !3195, line: 475, baseType: !3206, size: 8, offset: 648)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3194, file: !3195, line: 476, baseType: !3206, size: 8, offset: 656)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3194, file: !3195, line: 477, baseType: !3206, size: 8, offset: 664)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3194, file: !3195, line: 478, baseType: !3206, size: 8, offset: 672)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3194, file: !3195, line: 479, baseType: !3206, size: 8, offset: 680)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3194, file: !3195, line: 480, baseType: !3206, size: 8, offset: 688)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3194, file: !3195, line: 481, baseType: !3206, size: 8, offset: 696)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3194, file: !3195, line: 482, baseType: !3206, size: 8, offset: 704)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3194, file: !3195, line: 483, baseType: !3206, size: 8, offset: 712)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3194, file: !3195, line: 484, baseType: !3206, size: 8, offset: 720)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3194, file: !3195, line: 485, baseType: !3206, size: 8, offset: 728)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3194, file: !3195, line: 486, baseType: !3206, size: 8, offset: 736)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3194, file: !3195, line: 487, baseType: !3206, size: 8, offset: 744)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3194, file: !3195, line: 488, baseType: !3206, size: 8, offset: 752)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3194, file: !3195, line: 489, baseType: !3206, size: 8, offset: 760)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3194, file: !3195, line: 490, baseType: !3206, size: 8, offset: 768)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3194, file: !3195, line: 491, baseType: !3206, size: 8, offset: 776)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3194, file: !3195, line: 492, baseType: !3206, size: 8, offset: 784)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3194, file: !3195, line: 493, baseType: !3206, size: 8, offset: 792)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3194, file: !3195, line: 494, baseType: !3206, size: 8, offset: 800)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3194, file: !3195, line: 495, baseType: !3206, size: 8, offset: 808)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3194, file: !3195, line: 496, baseType: !3206, size: 8, offset: 816)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3194, file: !3195, line: 497, baseType: !3206, size: 8, offset: 824)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3194, file: !3195, line: 498, baseType: !3206, size: 8, offset: 832)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3194, file: !3195, line: 499, baseType: !3206, size: 8, offset: 840)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3194, file: !3195, line: 500, baseType: !3206, size: 8, offset: 848)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3194, file: !3195, line: 501, baseType: !3206, size: 8, offset: 856)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3194, file: !3195, line: 502, baseType: !3206, size: 8, offset: 864)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3194, file: !3195, line: 503, baseType: !3206, size: 8, offset: 872)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3194, file: !3195, line: 504, baseType: !3206, size: 8, offset: 880)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3194, file: !3195, line: 505, baseType: !3206, size: 8, offset: 888)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3194, file: !3195, line: 506, baseType: !3206, size: 8, offset: 896)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3194, file: !3195, line: 507, baseType: !3206, size: 8, offset: 904)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3194, file: !3195, line: 508, baseType: !3206, size: 8, offset: 912)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3194, file: !3195, line: 509, baseType: !3206, size: 8, offset: 920)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3194, file: !3195, line: 510, baseType: !3206, size: 8, offset: 928)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3194, file: !3195, line: 511, baseType: !3206, size: 8, offset: 936)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3194, file: !3195, line: 512, baseType: !3206, size: 8, offset: 944)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3194, file: !3195, line: 513, baseType: !3206, size: 8, offset: 952)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3194, file: !3195, line: 514, baseType: !3206, size: 8, offset: 960)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3194, file: !3195, line: 515, baseType: !3206, size: 8, offset: 968)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3194, file: !3195, line: 516, baseType: !3206, size: 8, offset: 976)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3194, file: !3195, line: 517, baseType: !3206, size: 8, offset: 984)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3194, file: !3195, line: 518, baseType: !3206, size: 8, offset: 992)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3194, file: !3195, line: 519, baseType: !3206, size: 8, offset: 1000)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3194, file: !3195, line: 520, baseType: !3206, size: 8, offset: 1008)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3194, file: !3195, line: 521, baseType: !3206, size: 8, offset: 1016)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3194, file: !3195, line: 522, baseType: !3206, size: 8, offset: 1024)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3194, file: !3195, line: 523, baseType: !3206, size: 8, offset: 1032)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3194, file: !3195, line: 524, baseType: !3206, size: 8, offset: 1040)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3194, file: !3195, line: 525, baseType: !3206, size: 8, offset: 1048)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3194, file: !3195, line: 526, baseType: !3206, size: 8, offset: 1056)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3194, file: !3195, line: 527, baseType: !3206, size: 8, offset: 1064)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3194, file: !3195, line: 528, baseType: !3206, size: 8, offset: 1072)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3194, file: !3195, line: 529, baseType: !3206, size: 8, offset: 1080)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3194, file: !3195, line: 530, baseType: !3206, size: 8, offset: 1088)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3194, file: !3195, line: 531, baseType: !3206, size: 8, offset: 1096)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3194, file: !3195, line: 532, baseType: !3206, size: 8, offset: 1104)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3194, file: !3195, line: 533, baseType: !3206, size: 8, offset: 1112)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3194, file: !3195, line: 534, baseType: !3206, size: 8, offset: 1120)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3194, file: !3195, line: 535, baseType: !3206, size: 8, offset: 1128)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3194, file: !3195, line: 536, baseType: !3206, size: 8, offset: 1136)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3194, file: !3195, line: 537, baseType: !3206, size: 8, offset: 1144)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3194, file: !3195, line: 538, baseType: !3206, size: 8, offset: 1152)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3194, file: !3195, line: 539, baseType: !3206, size: 8, offset: 1160)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3194, file: !3195, line: 540, baseType: !3206, size: 8, offset: 1168)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3194, file: !3195, line: 541, baseType: !3206, size: 8, offset: 1176)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3194, file: !3195, line: 542, baseType: !3206, size: 8, offset: 1184)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3194, file: !3195, line: 543, baseType: !3206, size: 8, offset: 1192)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3194, file: !3195, line: 544, baseType: !3206, size: 8, offset: 1200)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3194, file: !3195, line: 545, baseType: !3206, size: 8, offset: 1208)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3194, file: !3195, line: 546, baseType: !3206, size: 8, offset: 1216)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3194, file: !3195, line: 547, baseType: !3206, size: 8, offset: 1224)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3194, file: !3195, line: 548, baseType: !3206, size: 8, offset: 1232)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3194, file: !3195, line: 549, baseType: !3206, size: 8, offset: 1240)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3194, file: !3195, line: 550, baseType: !3206, size: 8, offset: 1248)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3194, file: !3195, line: 551, baseType: !3206, size: 8, offset: 1256)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3194, file: !3195, line: 552, baseType: !3206, size: 8, offset: 1264)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3194, file: !3195, line: 553, baseType: !3206, size: 8, offset: 1272)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3194, file: !3195, line: 554, baseType: !3206, size: 8, offset: 1280)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3194, file: !3195, line: 555, baseType: !3206, size: 8, offset: 1288)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3194, file: !3195, line: 556, baseType: !3206, size: 8, offset: 1296)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3194, file: !3195, line: 557, baseType: !3206, size: 8, offset: 1304)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3194, file: !3195, line: 558, baseType: !3206, size: 8, offset: 1312)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3194, file: !3195, line: 559, baseType: !3206, size: 8, offset: 1320)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3194, file: !3195, line: 560, baseType: !3206, size: 8, offset: 1328)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3194, file: !3195, line: 561, baseType: !3206, size: 8, offset: 1336)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3194, file: !3195, line: 562, baseType: !3206, size: 8, offset: 1344)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3194, file: !3195, line: 563, baseType: !3206, size: 8, offset: 1352)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3194, file: !3195, line: 564, baseType: !3206, size: 8, offset: 1360)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3194, file: !3195, line: 565, baseType: !3206, size: 8, offset: 1368)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3194, file: !3195, line: 566, baseType: !3206, size: 8, offset: 1376)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3194, file: !3195, line: 567, baseType: !3206, size: 8, offset: 1384)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3194, file: !3195, line: 568, baseType: !3206, size: 8, offset: 1392)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3194, file: !3195, line: 569, baseType: !3206, size: 8, offset: 1400)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3194, file: !3195, line: 570, baseType: !3206, size: 8, offset: 1408)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3194, file: !3195, line: 571, baseType: !3206, size: 8, offset: 1416)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3194, file: !3195, line: 572, baseType: !3206, size: 8, offset: 1424)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3194, file: !3195, line: 573, baseType: !3206, size: 8, offset: 1432)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3194, file: !3195, line: 574, baseType: !3206, size: 8, offset: 1440)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2023, file: !171, line: 3405, baseType: !3362, size: 384)
!3362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !3363)
!3363 = !{!3364, !3365}
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3362, file: !171, line: 3353, baseType: !2059, size: 192)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3362, file: !171, line: 3356, baseType: !3366, size: 192, offset: 192)
!3366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !3195, line: 578, size: 192, elements: !3367)
!3367 = !{!3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378}
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3366, file: !3195, line: 580, baseType: !1954, size: 32)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3366, file: !3195, line: 581, baseType: !1954, size: 32, offset: 32)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3366, file: !3195, line: 582, baseType: !1954, size: 32, offset: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3366, file: !3195, line: 583, baseType: !1954, size: 32, offset: 96)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3366, file: !3195, line: 584, baseType: !2137, size: 8, offset: 128)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3366, file: !3195, line: 585, baseType: !2137, size: 8, offset: 136)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3366, file: !3195, line: 586, baseType: !2137, size: 8, offset: 144)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3366, file: !3195, line: 587, baseType: !2137, size: 8, offset: 152)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3366, file: !3195, line: 588, baseType: !2137, size: 8, offset: 160)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3366, file: !3195, line: 589, baseType: !2137, size: 8, offset: 168)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3366, file: !3195, line: 590, baseType: !2137, size: 8, offset: 176)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1990, file: !153, line: 143, baseType: !2069, size: 128, offset: 640)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1990, file: !153, line: 146, baseType: !2069, size: 128, offset: 768)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1990, file: !153, line: 148, baseType: !2137, size: 8, offset: 896)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1990, file: !153, line: 149, baseType: !2137, size: 8, offset: 904)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1990, file: !153, line: 153, baseType: !161, size: 32, offset: 928)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1990, file: !153, line: 156, baseType: !3385, size: 64, offset: 960)
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !153, line: 48, size: 320, elements: !3387)
!3387 = !{!3388, !3389, !3390, !3391}
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3386, file: !153, line: 50, baseType: !2689, size: 64)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !3386, file: !153, line: 59, baseType: !2069, size: 128, offset: 64)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !3386, file: !153, line: 64, baseType: !2137, size: 8, offset: 192)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3386, file: !153, line: 67, baseType: !3385, size: 64, offset: 256)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1990, file: !153, line: 159, baseType: !3393, size: 64, offset: 1024)
!3393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3394, size: 64)
!3394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !153, line: 72, size: 256, elements: !3395)
!3395 = !{!3396, !3397, !3398, !3399}
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !3394, file: !153, line: 74, baseType: !1963, size: 64)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3394, file: !153, line: 77, baseType: !3393, size: 64, offset: 64)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3394, file: !153, line: 78, baseType: !3393, size: 64, offset: 128)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !3394, file: !153, line: 81, baseType: !3393, size: 64, offset: 192)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1990, file: !153, line: 162, baseType: !2137, size: 8, offset: 1088)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1990, file: !153, line: 166, baseType: !2021, size: 64, offset: 1152)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1968, file: !142, line: 229, baseType: !3403, size: 128, offset: 256)
!3403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3404, size: 128, elements: !2264)
!3404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3405, size: 64)
!3405 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !142, line: 229, flags: DIFlagFwdDecl)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1968, file: !142, line: 232, baseType: !1967, size: 64, offset: 384)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1968, file: !142, line: 233, baseType: !1967, size: 64, offset: 448)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1968, file: !142, line: 238, baseType: !3409, size: 64, offset: 512)
!3409 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !142, line: 235, size: 64, elements: !3410)
!3410 = !{!3411, !3417}
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3409, file: !142, line: 236, baseType: !3412, size: 64)
!3412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3413, size: 64)
!3413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !142, line: 273, size: 128, elements: !3414)
!3414 = !{!3415, !3416}
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3413, file: !142, line: 275, baseType: !2759, size: 64)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3413, file: !142, line: 278, baseType: !2759, size: 64, offset: 64)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3409, file: !142, line: 237, baseType: !3418, size: 64)
!3418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3419, size: 64)
!3419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !142, line: 259, size: 320, elements: !3420)
!3420 = !{!3421, !3422, !3423, !3424, !3425}
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3419, file: !142, line: 261, baseType: !2195, size: 64)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3419, file: !142, line: 262, baseType: !2195, size: 64, offset: 64)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3419, file: !142, line: 266, baseType: !2195, size: 64, offset: 128)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3419, file: !142, line: 267, baseType: !2195, size: 64, offset: 192)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3419, file: !142, line: 270, baseType: !1954, size: 32, offset: 256)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1968, file: !142, line: 241, baseType: !3427, size: 64, offset: 576)
!3427 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !142, line: 119, baseType: !2076)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1968, file: !142, line: 244, baseType: !1954, size: 32, offset: 640)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1968, file: !142, line: 247, baseType: !1954, size: 32, offset: 672)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1968, file: !142, line: 250, baseType: !1954, size: 32, offset: 704)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1968, file: !142, line: 253, baseType: !1954, size: 32, offset: 736)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1968, file: !142, line: 256, baseType: !1954, size: 32, offset: 768)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1964, file: !142, line: 125, baseType: !1967, size: 64, offset: 64)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1964, file: !142, line: 131, baseType: !3435, size: 64, offset: 128)
!3435 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !142, line: 128, size: 64, elements: !3436)
!3436 = !{!3437, !3438}
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !3435, file: !142, line: 129, baseType: !2759, size: 64)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !3435, file: !142, line: 130, baseType: !2195, size: 64)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1964, file: !142, line: 134, baseType: !1987, size: 64, offset: 192)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1964, file: !142, line: 137, baseType: !2021, size: 64, offset: 256)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1964, file: !142, line: 138, baseType: !2145, size: 32, offset: 320)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1964, file: !142, line: 142, baseType: !7, size: 32, offset: 352)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1964, file: !142, line: 144, baseType: !1954, size: 32, offset: 384)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1964, file: !142, line: 145, baseType: !1954, size: 32, offset: 416)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1964, file: !142, line: 146, baseType: !3427, size: 64, offset: 448)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "ep_predictor", scope: !1956, file: !1957, line: 310, baseType: !732, size: 32, offset: 128)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "ep_probability", scope: !1956, file: !1957, line: 311, baseType: !1954, size: 32, offset: 160)
!3448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1955, size: 64)
!3449 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_info", file: !3, line: 1819, baseType: !3450)
!3450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3451, size: 64)
!3451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_info_def", file: !3, line: 1811, size: 192, elements: !3452)
!3452 = !{!3453, !3460}
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "back_edge_prob", scope: !3451, file: !3, line: 1816, baseType: !3454, size: 128)
!3454 = !DIDerivedType(tag: DW_TAG_typedef, name: "sreal", file: !3455, line: 53, baseType: !3456)
!3455 = !DIFile(filename: "./sreal.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sreal", file: !3455, line: 44, size: 128, elements: !3457)
!3457 = !{!3458, !3459}
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !3456, file: !3455, line: 50, baseType: !2074, size: 64)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !3456, file: !3455, line: 52, baseType: !1954, size: 32, offset: 64)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "back_edge", scope: !3451, file: !3, line: 1818, baseType: !7, size: 1, offset: 128, flags: DIFlagBitField, extraData: i64 128)
!3461 = !DIDerivedType(tag: DW_TAG_typedef, name: "block_info", file: !3, line: 1808, baseType: !3462)
!3462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3463, size: 64)
!3463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_info_def", file: !3, line: 1798, size: 256, elements: !3464)
!3464 = !{!3465, !3466, !3467}
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3463, file: !3, line: 1801, baseType: !3454, size: 128)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3463, file: !3, line: 1804, baseType: !2653, size: 64, offset: 128)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "npredecessors", scope: !3463, file: !3, line: 1807, baseType: !1954, size: 32, offset: 192)
!3468 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!3469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3470, size: 64)
!3470 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2691)
!3471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3472, size: 64)
!3472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2636, line: 32, baseType: !3473)
!3473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2636, line: 32, size: 96, elements: !3474)
!3474 = !{!3475}
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3473, file: !2636, line: 32, baseType: !3476, size: 96)
!3476 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2636, line: 31, baseType: !3477)
!3477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2636, line: 31, size: 96, elements: !3478)
!3478 = !{!3479, !3480, !3481}
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3477, file: !2636, line: 31, baseType: !7, size: 32)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3477, file: !2636, line: 31, baseType: !7, size: 32, offset: 32)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3477, file: !2636, line: 31, baseType: !3482, size: 32, offset: 64)
!3482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1954, size: 32, elements: !1983)
!3483 = !{!3484, !3490, !3518, !3520, !3522, !3524, !3526, !3528, !3530, !3532, !0, !3534}
!3484 = !DIGlobalVariableExpression(var: !3485, expr: !DIExpression())
!3485 = distinct !DIGlobalVariable(name: "real_values_initialized", scope: !3486, file: !3, line: 2084, type: !1954, isLocal: true, isDefinition: true)
!3486 = distinct !DISubprogram(name: "estimate_bb_frequencies", scope: !3, file: !3, line: 2077, type: !3487, scopeLine: 2078, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3487 = !DISubroutineType(types: !3488)
!3488 = !{null}
!3489 = !{}
!3490 = !DIGlobalVariableExpression(var: !3491, expr: !DIExpression())
!3491 = distinct !DIGlobalVariable(name: "pass_profile", scope: !2, file: !3, line: 2225, type: !3492, isLocal: false, isDefinition: true)
!3492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !398, line: 156, size: 640, elements: !3493)
!3493 = !{!3494}
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3492, file: !398, line: 158, baseType: !3495, size: 640)
!3495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !398, line: 114, size: 640, elements: !3496)
!3496 = !{!3497, !3498, !3499, !3503, !3507, !3509, !3510, !3511, !3513, !3514, !3515, !3516, !3517}
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3495, file: !398, line: 117, baseType: !397, size: 32)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3495, file: !398, line: 121, baseType: !2220, size: 64, offset: 64)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3495, file: !398, line: 125, baseType: !3500, size: 64, offset: 128)
!3500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3501, size: 64)
!3501 = !DISubroutineType(types: !3502)
!3502 = !{!2137}
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3495, file: !398, line: 130, baseType: !3504, size: 64, offset: 192)
!3504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3505, size: 64)
!3505 = !DISubroutineType(types: !3506)
!3506 = !{!7}
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3495, file: !398, line: 133, baseType: !3508, size: 64, offset: 256)
!3508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3495, size: 64)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3495, file: !398, line: 136, baseType: !3508, size: 64, offset: 320)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3495, file: !398, line: 139, baseType: !1954, size: 32, offset: 384)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3495, file: !398, line: 143, baseType: !3512, size: 32, offset: 416)
!3512 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !405, line: 80, baseType: !404)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3495, file: !398, line: 146, baseType: !7, size: 32, offset: 448)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3495, file: !398, line: 147, baseType: !7, size: 32, offset: 480)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3495, file: !398, line: 148, baseType: !7, size: 32, offset: 512)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3495, file: !398, line: 151, baseType: !7, size: 32, offset: 544)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3495, file: !398, line: 152, baseType: !7, size: 32, offset: 576)
!3518 = !DIGlobalVariableExpression(var: !3519, expr: !DIExpression())
!3519 = distinct !DIGlobalVariable(name: "pass_strip_predict_hints", scope: !2, file: !3, line: 2244, type: !3492, isLocal: false, isDefinition: true)
!3520 = !DIGlobalVariableExpression(var: !3521, expr: !DIExpression())
!3521 = distinct !DIGlobalVariable(name: "real_zero", scope: !2, file: !3, line: 66, type: !3454, isLocal: true, isDefinition: true)
!3522 = !DIGlobalVariableExpression(var: !3523, expr: !DIExpression())
!3523 = distinct !DIGlobalVariable(name: "real_one", scope: !2, file: !3, line: 66, type: !3454, isLocal: true, isDefinition: true)
!3524 = !DIGlobalVariableExpression(var: !3525, expr: !DIExpression())
!3525 = distinct !DIGlobalVariable(name: "real_almost_one", scope: !2, file: !3, line: 66, type: !3454, isLocal: true, isDefinition: true)
!3526 = !DIGlobalVariableExpression(var: !3527, expr: !DIExpression())
!3527 = distinct !DIGlobalVariable(name: "real_br_prob_base", scope: !2, file: !3, line: 66, type: !3454, isLocal: true, isDefinition: true)
!3528 = !DIGlobalVariableExpression(var: !3529, expr: !DIExpression())
!3529 = distinct !DIGlobalVariable(name: "real_inv_br_prob_base", scope: !2, file: !3, line: 67, type: !3454, isLocal: true, isDefinition: true)
!3530 = !DIGlobalVariableExpression(var: !3531, expr: !DIExpression())
!3531 = distinct !DIGlobalVariable(name: "real_one_half", scope: !2, file: !3, line: 67, type: !3454, isLocal: true, isDefinition: true)
!3532 = !DIGlobalVariableExpression(var: !3533, expr: !DIExpression())
!3533 = distinct !DIGlobalVariable(name: "real_bb_freq_max", scope: !2, file: !3, line: 67, type: !3454, isLocal: true, isDefinition: true)
!3534 = !DIGlobalVariableExpression(var: !3535, expr: !DIExpression())
!3535 = distinct !DIGlobalVariable(name: "predictor_info", scope: !2, file: !3, line: 103, type: !3536, isLocal: true, isDefinition: true)
!3536 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3537, size: 3712, elements: !3545)
!3537 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3538)
!3538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "predictor_info", file: !3, line: 86, size: 128, elements: !3539)
!3539 = !{!3540, !3542, !3544}
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3538, file: !3, line: 88, baseType: !3541, size: 64)
!3541 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2220)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "hitrate", scope: !3538, file: !3, line: 89, baseType: !3543, size: 32, offset: 64)
!3543 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1954)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3538, file: !3, line: 91, baseType: !3543, size: 32, offset: 96)
!3545 = !{!3546}
!3546 = !DISubrange(count: 29)
!3547 = !{i32 7, !"Dwarf Version", i32 4}
!3548 = !{i32 2, !"Debug Info Version", i32 3}
!3549 = !{i32 1, !"wchar_size", i32 4}
!3550 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3551 = distinct !DISubprogram(name: "maybe_hot_bb_p", scope: !3, file: !3, line: 148, type: !3552, scopeLine: 149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3552 = !DISubroutineType(types: !3553)
!3553 = !{!2137, !3554}
!3554 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1962, line: 112, baseType: !3555)
!3555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3556, size: 64)
!3556 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1968)
!3557 = !DILocalVariable(name: "bb", arg: 1, scope: !3551, file: !3, line: 148, type: !3554)
!3558 = !DILocation(line: 148, column: 35, scope: !3551)
!3559 = !DILocation(line: 150, column: 7, scope: !3560)
!3560 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 150, column: 7)
!3561 = !DILocation(line: 150, column: 22, scope: !3560)
!3562 = !DILocation(line: 150, column: 7, scope: !3551)
!3563 = !DILocation(line: 151, column: 31, scope: !3560)
!3564 = !DILocation(line: 151, column: 35, scope: !3560)
!3565 = !DILocation(line: 151, column: 12, scope: !3560)
!3566 = !DILocation(line: 151, column: 5, scope: !3560)
!3567 = !DILocation(line: 152, column: 33, scope: !3551)
!3568 = !DILocation(line: 152, column: 37, scope: !3551)
!3569 = !DILocation(line: 152, column: 10, scope: !3551)
!3570 = !DILocation(line: 152, column: 3, scope: !3551)
!3571 = !DILocation(line: 153, column: 1, scope: !3551)
!3572 = distinct !DISubprogram(name: "maybe_hot_count_p", scope: !3, file: !3, line: 133, type: !3573, scopeLine: 134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3573 = !DISubroutineType(types: !3574)
!3574 = !{!2137, !3427}
!3575 = !DILocalVariable(name: "count", arg: 1, scope: !3572, file: !3, line: 133, type: !3427)
!3576 = !DILocation(line: 133, column: 30, scope: !3572)
!3577 = !DILocation(line: 135, column: 7, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 135, column: 7)
!3579 = !DILocation(line: 135, column: 22, scope: !3578)
!3580 = !DILocation(line: 135, column: 7, scope: !3572)
!3581 = !DILocation(line: 136, column: 5, scope: !3578)
!3582 = !DILocation(line: 138, column: 7, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3572, file: !3, line: 138, column: 7)
!3584 = !DILocation(line: 138, column: 21, scope: !3583)
!3585 = !DILocation(line: 138, column: 29, scope: !3583)
!3586 = !DILocation(line: 138, column: 26, scope: !3583)
!3587 = !DILocation(line: 138, column: 7, scope: !3572)
!3588 = !DILocation(line: 139, column: 5, scope: !3583)
!3589 = !DILocation(line: 140, column: 11, scope: !3572)
!3590 = !DILocation(line: 141, column: 6, scope: !3572)
!3591 = !DILocation(line: 141, column: 20, scope: !3572)
!3592 = !DILocation(line: 141, column: 30, scope: !3572)
!3593 = !DILocation(line: 141, column: 28, scope: !3572)
!3594 = !DILocation(line: 141, column: 4, scope: !3572)
!3595 = !DILocation(line: 140, column: 10, scope: !3572)
!3596 = !DILocation(line: 140, column: 3, scope: !3572)
!3597 = !DILocation(line: 142, column: 1, scope: !3572)
!3598 = distinct !DISubprogram(name: "maybe_hot_frequency_p", scope: !3, file: !3, line: 114, type: !3599, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3599 = !DISubroutineType(types: !3600)
!3600 = !{!2137, !1954}
!3601 = !DILocalVariable(name: "freq", arg: 1, scope: !3598, file: !3, line: 114, type: !1954)
!3602 = !DILocation(line: 114, column: 28, scope: !3598)
!3603 = !DILocation(line: 116, column: 8, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3598, file: !3, line: 116, column: 7)
!3605 = !DILocation(line: 116, column: 21, scope: !3604)
!3606 = !DILocation(line: 116, column: 25, scope: !3604)
!3607 = !DILocation(line: 116, column: 7, scope: !3598)
!3608 = !DILocation(line: 118, column: 11, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 118, column: 11)
!3610 = distinct !DILexicalBlock(scope: !3604, file: !3, line: 117, column: 5)
!3611 = !DILocation(line: 118, column: 17, scope: !3609)
!3612 = !DILocation(line: 118, column: 36, scope: !3609)
!3613 = !DILocation(line: 118, column: 11, scope: !3610)
!3614 = !DILocation(line: 119, column: 9, scope: !3609)
!3615 = !DILocation(line: 120, column: 11, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3610, file: !3, line: 120, column: 11)
!3617 = !DILocation(line: 120, column: 17, scope: !3616)
!3618 = !DILocation(line: 120, column: 36, scope: !3616)
!3619 = !DILocation(line: 120, column: 11, scope: !3610)
!3620 = !DILocation(line: 121, column: 9, scope: !3616)
!3621 = !DILocation(line: 122, column: 5, scope: !3610)
!3622 = !DILocation(line: 123, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3598, file: !3, line: 123, column: 7)
!3624 = !DILocation(line: 123, column: 22, scope: !3623)
!3625 = !DILocation(line: 123, column: 7, scope: !3598)
!3626 = !DILocation(line: 124, column: 5, scope: !3623)
!3627 = !DILocation(line: 125, column: 7, scope: !3628)
!3628 = distinct !DILexicalBlock(scope: !3598, file: !3, line: 125, column: 7)
!3629 = !DILocation(line: 125, column: 28, scope: !3628)
!3630 = !DILocation(line: 125, column: 26, scope: !3628)
!3631 = !DILocation(line: 125, column: 12, scope: !3628)
!3632 = !DILocation(line: 125, column: 7, scope: !3598)
!3633 = !DILocation(line: 126, column: 5, scope: !3628)
!3634 = !DILocation(line: 127, column: 3, scope: !3598)
!3635 = !DILocation(line: 128, column: 1, scope: !3598)
!3636 = distinct !DISubprogram(name: "cgraph_maybe_hot_edge_p", scope: !3, file: !3, line: 158, type: !3637, scopeLine: 159, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3637 = !DISubroutineType(types: !3638)
!3638 = !{!2137, !3639}
!3639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3640, size: 64)
!3640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !581, line: 314, size: 768, elements: !3641)
!3641 = !{!3642, !3643, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3833, !3835, !3836, !3837, !3838, !3840, !3841, !3842}
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3640, file: !581, line: 316, baseType: !3427, size: 64)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !3640, file: !581, line: 317, baseType: !3644, size: 64, offset: 64)
!3644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3645, size: 64)
!3645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !581, line: 181, size: 2496, elements: !3646)
!3646 = !{!3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3661, !3662, !3663, !3664, !3741, !3763, !3773, !3777, !3803, !3812, !3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825}
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3645, file: !581, line: 182, baseType: !2021, size: 64)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !3645, file: !581, line: 183, baseType: !3639, size: 64, offset: 64)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !3645, file: !581, line: 184, baseType: !3639, size: 64, offset: 128)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3645, file: !581, line: 185, baseType: !3644, size: 64, offset: 192)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !3645, file: !581, line: 186, baseType: !3644, size: 64, offset: 256)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !3645, file: !581, line: 188, baseType: !3644, size: 64, offset: 320)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !3645, file: !581, line: 190, baseType: !3644, size: 64, offset: 384)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !3645, file: !581, line: 192, baseType: !3644, size: 64, offset: 448)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3645, file: !581, line: 194, baseType: !3644, size: 64, offset: 512)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !3645, file: !581, line: 196, baseType: !3644, size: 64, offset: 576)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !3645, file: !581, line: 197, baseType: !3644, size: 64, offset: 640)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !3645, file: !581, line: 198, baseType: !3644, size: 64, offset: 704)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !3645, file: !581, line: 199, baseType: !3644, size: 64, offset: 768)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !3645, file: !581, line: 202, baseType: !3644, size: 64, offset: 832)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !3645, file: !581, line: 204, baseType: !3644, size: 64, offset: 896)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !3645, file: !581, line: 207, baseType: !2567, size: 64, offset: 960)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3645, file: !581, line: 209, baseType: !1987, size: 64, offset: 1024)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !3645, file: !581, line: 214, baseType: !3665, size: 64, offset: 1088)
!3665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3666, size: 64)
!3666 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !727, line: 177, baseType: !3667)
!3667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !727, line: 177, size: 128, elements: !3668)
!3668 = !{!3669}
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3667, file: !727, line: 177, baseType: !3670, size: 128)
!3670 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !727, line: 176, baseType: !3671)
!3671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !727, line: 176, size: 128, elements: !3672)
!3672 = !{!3673, !3674, !3675}
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3671, file: !727, line: 176, baseType: !7, size: 32)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3671, file: !727, line: 176, baseType: !7, size: 32, offset: 32)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3671, file: !727, line: 176, baseType: !3676, size: 64, offset: 64)
!3676 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3677, size: 64, elements: !1983)
!3677 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !727, line: 174, baseType: !3678)
!3678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3679, size: 64)
!3679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !398, line: 173, size: 1152, elements: !3680)
!3680 = !{!3681, !3682, !3684, !3707, !3708, !3712, !3717, !3718, !3722}
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3679, file: !398, line: 175, baseType: !3495, size: 640)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !3679, file: !398, line: 179, baseType: !3683, size: 64, offset: 640)
!3683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3487, size: 64)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !3679, file: !398, line: 182, baseType: !3685, size: 64, offset: 704)
!3685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3686, size: 64)
!3686 = !DISubroutineType(types: !3687)
!3687 = !{null, !3688}
!3688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3689, size: 64)
!3689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !581, line: 276, size: 192, elements: !3690)
!3690 = !{!3691, !3692, !3706}
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !3689, file: !581, line: 278, baseType: !2567, size: 64)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !3689, file: !581, line: 279, baseType: !3693, size: 64, offset: 64)
!3693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3694, size: 64)
!3694 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !581, line: 272, baseType: !3695)
!3695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !581, line: 272, size: 128, elements: !3696)
!3696 = !{!3697}
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3695, file: !581, line: 272, baseType: !3698, size: 128)
!3698 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !581, line: 270, baseType: !3699)
!3699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !581, line: 270, size: 128, elements: !3700)
!3700 = !{!3701, !3702, !3703}
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3699, file: !581, line: 270, baseType: !7, size: 32)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3699, file: !581, line: 270, baseType: !7, size: 32, offset: 32)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3699, file: !581, line: 270, baseType: !3704, size: 64, offset: 64)
!3704 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3705, size: 64, elements: !1983)
!3705 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !581, line: 268, baseType: !3644)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3689, file: !581, line: 280, baseType: !1987, size: 64, offset: 128)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !3679, file: !398, line: 187, baseType: !3683, size: 64, offset: 768)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !3679, file: !398, line: 188, baseType: !3709, size: 64, offset: 832)
!3709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3710, size: 64)
!3710 = !DISubroutineType(types: !3711)
!3711 = !{null, !3644}
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !3679, file: !398, line: 191, baseType: !3713, size: 64, offset: 896)
!3713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3714, size: 64)
!3714 = !DISubroutineType(types: !3715)
!3715 = !{null, !3644, !3716}
!3716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2689, size: 64)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !3679, file: !398, line: 195, baseType: !7, size: 32, offset: 960)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !3679, file: !398, line: 196, baseType: !3719, size: 64, offset: 1024)
!3719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3720, size: 64)
!3720 = !DISubroutineType(types: !3721)
!3721 = !{!7, !3644}
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !3679, file: !398, line: 197, baseType: !3723, size: 64, offset: 1088)
!3723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3724, size: 64)
!3724 = !DISubroutineType(types: !3725)
!3725 = !{null, !3726}
!3726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3727, size: 64)
!3727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !581, line: 358, size: 320, elements: !3728)
!3728 = !{!3729, !3730, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740}
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3727, file: !581, line: 359, baseType: !2021, size: 64)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3727, file: !581, line: 361, baseType: !3726, size: 64, offset: 64)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !3727, file: !581, line: 363, baseType: !3726, size: 64, offset: 128)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !3727, file: !581, line: 366, baseType: !3726, size: 64, offset: 192)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3727, file: !581, line: 368, baseType: !1954, size: 32, offset: 256)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3727, file: !581, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !3727, file: !581, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3727, file: !581, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3727, file: !581, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !3727, file: !581, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3727, file: !581, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3727, file: !581, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3645, file: !581, line: 216, baseType: !3742, size: 320, offset: 1152)
!3742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !581, line: 88, size: 320, elements: !3743)
!3743 = !{!3744, !3747, !3755, !3756, !3757, !3758, !3759, !3760, !3761, !3762}
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !3742, file: !581, line: 90, baseType: !3745, size: 64)
!3745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3746, size: 64)
!3746 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !581, line: 51, flags: DIFlagFwdDecl)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !3742, file: !581, line: 92, baseType: !3748, size: 192, offset: 64)
!3748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !581, line: 57, size: 192, elements: !3749)
!3749 = !{!3750, !3751, !3752, !3753, !3754}
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !3748, file: !581, line: 60, baseType: !2076, size: 64)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !3748, file: !581, line: 63, baseType: !1954, size: 32, offset: 64)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !3748, file: !581, line: 65, baseType: !1954, size: 32, offset: 96)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !3748, file: !581, line: 67, baseType: !1954, size: 32, offset: 128)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !3748, file: !581, line: 69, baseType: !1954, size: 32, offset: 160)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !3742, file: !581, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !3742, file: !581, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !3742, file: !581, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !3742, file: !581, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !3742, file: !581, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !3742, file: !581, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !3742, file: !581, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !3742, file: !581, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !3645, file: !581, line: 217, baseType: !3764, size: 320, offset: 1472)
!3764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !581, line: 126, size: 320, elements: !3765)
!3765 = !{!3766, !3767, !3768, !3769, !3770, !3771, !3772}
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !3764, file: !581, line: 128, baseType: !2076, size: 64)
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !3764, file: !581, line: 130, baseType: !2076, size: 64, offset: 64)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !3764, file: !581, line: 134, baseType: !3644, size: 64, offset: 128)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !3764, file: !581, line: 137, baseType: !1954, size: 32, offset: 192)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3764, file: !581, line: 138, baseType: !1954, size: 32, offset: 224)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !3764, file: !581, line: 141, baseType: !1954, size: 32, offset: 256)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !3764, file: !581, line: 144, baseType: !2137, size: 8, offset: 288)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3645, file: !581, line: 218, baseType: !3774, size: 32, offset: 1792)
!3774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !581, line: 150, size: 32, elements: !3775)
!3775 = !{!3776}
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !3774, file: !581, line: 151, baseType: !7, size: 32)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !3645, file: !581, line: 219, baseType: !3778, size: 192, offset: 1856)
!3778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !581, line: 171, size: 192, elements: !3779)
!3779 = !{!3780, !3801, !3802}
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !3778, file: !581, line: 173, baseType: !3781, size: 64)
!3781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3782, size: 64)
!3782 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !581, line: 169, baseType: !3783)
!3783 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !581, line: 169, size: 128, elements: !3784)
!3784 = !{!3785}
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3783, file: !581, line: 169, baseType: !3786, size: 128)
!3786 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !581, line: 168, baseType: !3787)
!3787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !581, line: 168, size: 128, elements: !3788)
!3788 = !{!3789, !3790, !3791}
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3787, file: !581, line: 168, baseType: !7, size: 32)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3787, file: !581, line: 168, baseType: !7, size: 32, offset: 32)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3787, file: !581, line: 168, baseType: !3792, size: 64, offset: 64)
!3792 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3793, size: 64, elements: !1983)
!3793 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !581, line: 167, baseType: !3794)
!3794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3795, size: 64)
!3795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !581, line: 156, size: 192, elements: !3796)
!3796 = !{!3797, !3798, !3799, !3800}
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !3795, file: !581, line: 159, baseType: !2021, size: 64)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !3795, file: !581, line: 161, baseType: !2021, size: 64, offset: 64)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !3795, file: !581, line: 163, baseType: !2137, size: 8, offset: 128)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !3795, file: !581, line: 165, baseType: !2137, size: 8, offset: 136)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !3778, file: !581, line: 174, baseType: !2922, size: 64, offset: 64)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !3778, file: !581, line: 175, baseType: !2922, size: 64, offset: 128)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !3645, file: !581, line: 220, baseType: !3804, size: 256, offset: 2048)
!3804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !581, line: 74, size: 256, elements: !3805)
!3805 = !{!3806, !3807, !3808, !3809, !3810, !3811}
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !3804, file: !581, line: 76, baseType: !2076, size: 64)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !3804, file: !581, line: 77, baseType: !2076, size: 64, offset: 64)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3804, file: !581, line: 78, baseType: !2021, size: 64, offset: 128)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !3804, file: !581, line: 79, baseType: !2137, size: 8, offset: 192)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !3804, file: !581, line: 80, baseType: !2137, size: 8, offset: 200)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !3804, file: !581, line: 82, baseType: !2137, size: 8, offset: 208)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3645, file: !581, line: 223, baseType: !3427, size: 64, offset: 2304)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3645, file: !581, line: 225, baseType: !1954, size: 32, offset: 2368)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !3645, file: !581, line: 227, baseType: !1954, size: 32, offset: 2400)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3645, file: !581, line: 231, baseType: !1954, size: 32, offset: 2432)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !3645, file: !581, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !3645, file: !581, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !3645, file: !581, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !3645, file: !581, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !3645, file: !581, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !3645, file: !581, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !3645, file: !581, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3645, file: !581, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !3645, file: !581, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !3645, file: !581, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !3640, file: !581, line: 318, baseType: !3644, size: 64, offset: 128)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !3640, file: !581, line: 319, baseType: !3639, size: 64, offset: 192)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !3640, file: !581, line: 320, baseType: !3639, size: 64, offset: 256)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !3640, file: !581, line: 321, baseType: !3639, size: 64, offset: 320)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !3640, file: !581, line: 322, baseType: !3639, size: 64, offset: 384)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !3640, file: !581, line: 323, baseType: !2689, size: 64, offset: 448)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3640, file: !581, line: 324, baseType: !1987, size: 64, offset: 512)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !3640, file: !581, line: 327, baseType: !3834, size: 32, offset: 576)
!3834 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !581, line: 312, baseType: !580)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !3640, file: !581, line: 330, baseType: !7, size: 32, offset: 608)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !3640, file: !581, line: 334, baseType: !1954, size: 32, offset: 640)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3640, file: !581, line: 336, baseType: !1954, size: 32, offset: 672)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3640, file: !581, line: 338, baseType: !3839, size: 16, offset: 704)
!3839 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !3640, file: !581, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !3640, file: !581, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !3640, file: !581, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!3843 = !DILocalVariable(name: "edge", arg: 1, scope: !3636, file: !3, line: 158, type: !3639)
!3844 = !DILocation(line: 158, column: 46, scope: !3636)
!3845 = !DILocation(line: 160, column: 7, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 160, column: 7)
!3847 = !DILocation(line: 160, column: 20, scope: !3846)
!3848 = !DILocation(line: 160, column: 23, scope: !3846)
!3849 = !DILocation(line: 161, column: 7, scope: !3846)
!3850 = !DILocation(line: 161, column: 11, scope: !3846)
!3851 = !DILocation(line: 161, column: 17, scope: !3846)
!3852 = !DILocation(line: 162, column: 7, scope: !3846)
!3853 = !DILocation(line: 162, column: 21, scope: !3846)
!3854 = !DILocation(line: 162, column: 31, scope: !3846)
!3855 = !DILocation(line: 162, column: 29, scope: !3846)
!3856 = !DILocation(line: 162, column: 4, scope: !3846)
!3857 = !DILocation(line: 160, column: 7, scope: !3636)
!3858 = !DILocation(line: 163, column: 5, scope: !3846)
!3859 = !DILocation(line: 164, column: 33, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 164, column: 7)
!3861 = !DILocation(line: 164, column: 7, scope: !3860)
!3862 = !DILocation(line: 165, column: 7, scope: !3860)
!3863 = !DILocation(line: 165, column: 36, scope: !3860)
!3864 = !DILocation(line: 165, column: 10, scope: !3860)
!3865 = !DILocation(line: 164, column: 7, scope: !3636)
!3866 = !DILocation(line: 166, column: 5, scope: !3860)
!3867 = !DILocation(line: 167, column: 32, scope: !3868)
!3868 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 167, column: 7)
!3869 = !DILocation(line: 167, column: 7, scope: !3868)
!3870 = !DILocation(line: 167, column: 7, scope: !3636)
!3871 = !DILocation(line: 168, column: 5, scope: !3868)
!3872 = !DILocation(line: 169, column: 7, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 169, column: 7)
!3874 = !DILocation(line: 170, column: 7, scope: !3873)
!3875 = !DILocation(line: 170, column: 10, scope: !3873)
!3876 = !DILocation(line: 170, column: 16, scope: !3873)
!3877 = !DILocation(line: 171, column: 17, scope: !3873)
!3878 = !DILocation(line: 171, column: 15, scope: !3873)
!3879 = !DILocation(line: 170, column: 26, scope: !3873)
!3880 = !DILocation(line: 169, column: 7, scope: !3636)
!3881 = !DILocation(line: 172, column: 5, scope: !3873)
!3882 = !DILocation(line: 173, column: 3, scope: !3636)
!3883 = !DILocation(line: 174, column: 1, scope: !3636)
!3884 = distinct !DISubprogram(name: "maybe_hot_edge_p", scope: !3, file: !3, line: 180, type: !3885, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3885 = !DISubroutineType(types: !3886)
!3886 = !{!2137, !1961}
!3887 = !DILocalVariable(name: "e", arg: 1, scope: !3884, file: !3, line: 180, type: !1961)
!3888 = !DILocation(line: 180, column: 24, scope: !3884)
!3889 = !DILocation(line: 182, column: 7, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3884, file: !3, line: 182, column: 7)
!3891 = !DILocation(line: 182, column: 22, scope: !3890)
!3892 = !DILocation(line: 182, column: 7, scope: !3884)
!3893 = !DILocation(line: 183, column: 31, scope: !3890)
!3894 = !DILocation(line: 183, column: 34, scope: !3890)
!3895 = !DILocation(line: 183, column: 12, scope: !3890)
!3896 = !DILocation(line: 183, column: 5, scope: !3890)
!3897 = !DILocation(line: 184, column: 33, scope: !3884)
!3898 = !DILocation(line: 184, column: 10, scope: !3884)
!3899 = !DILocation(line: 184, column: 3, scope: !3884)
!3900 = !DILocation(line: 185, column: 1, scope: !3884)
!3901 = distinct !DISubprogram(name: "probably_never_executed_bb_p", scope: !3, file: !3, line: 189, type: !3552, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3902 = !DILocalVariable(name: "bb", arg: 1, scope: !3901, file: !3, line: 189, type: !3554)
!3903 = !DILocation(line: 189, column: 49, scope: !3901)
!3904 = !DILocation(line: 191, column: 7, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 191, column: 7)
!3906 = !DILocation(line: 191, column: 20, scope: !3905)
!3907 = !DILocation(line: 191, column: 23, scope: !3905)
!3908 = !DILocation(line: 191, column: 7, scope: !3901)
!3909 = !DILocation(line: 192, column: 14, scope: !3905)
!3910 = !DILocation(line: 192, column: 18, scope: !3905)
!3911 = !DILocation(line: 192, column: 26, scope: !3905)
!3912 = !DILocation(line: 192, column: 40, scope: !3905)
!3913 = !DILocation(line: 192, column: 45, scope: !3905)
!3914 = !DILocation(line: 192, column: 24, scope: !3905)
!3915 = !DILocation(line: 192, column: 52, scope: !3905)
!3916 = !DILocation(line: 192, column: 66, scope: !3905)
!3917 = !DILocation(line: 192, column: 50, scope: !3905)
!3918 = !DILocation(line: 192, column: 72, scope: !3905)
!3919 = !DILocation(line: 192, column: 12, scope: !3905)
!3920 = !DILocation(line: 192, column: 5, scope: !3905)
!3921 = !DILocation(line: 193, column: 9, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 193, column: 7)
!3923 = !DILocation(line: 193, column: 22, scope: !3922)
!3924 = !DILocation(line: 193, column: 26, scope: !3922)
!3925 = !DILocation(line: 194, column: 7, scope: !3922)
!3926 = !DILocation(line: 194, column: 10, scope: !3922)
!3927 = !DILocation(line: 194, column: 16, scope: !3922)
!3928 = !DILocation(line: 194, column: 35, scope: !3922)
!3929 = !DILocation(line: 193, column: 7, scope: !3901)
!3930 = !DILocation(line: 195, column: 5, scope: !3922)
!3931 = !DILocation(line: 196, column: 3, scope: !3901)
!3932 = !DILocation(line: 197, column: 1, scope: !3901)
!3933 = distinct !DISubprogram(name: "optimize_function_for_size_p", scope: !3, file: !3, line: 202, type: !3934, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3934 = !DISubroutineType(types: !3935)
!3935 = !{!2137, !2483}
!3936 = !DILocalVariable(name: "fun", arg: 1, scope: !3933, file: !3, line: 202, type: !2483)
!3937 = !DILocation(line: 202, column: 48, scope: !3933)
!3938 = !DILocation(line: 204, column: 11, scope: !3933)
!3939 = !DILocation(line: 205, column: 4, scope: !3933)
!3940 = !DILocation(line: 205, column: 8, scope: !3933)
!3941 = !DILocation(line: 205, column: 12, scope: !3933)
!3942 = !DILocation(line: 205, column: 16, scope: !3933)
!3943 = !DILocation(line: 205, column: 21, scope: !3933)
!3944 = !DILocation(line: 206, column: 9, scope: !3933)
!3945 = !DILocation(line: 0, scope: !3933)
!3946 = !DILocation(line: 204, column: 10, scope: !3933)
!3947 = !DILocation(line: 204, column: 3, scope: !3933)
!3948 = distinct !DISubprogram(name: "optimize_function_for_speed_p", scope: !3, file: !3, line: 212, type: !3934, scopeLine: 213, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3949 = !DILocalVariable(name: "fun", arg: 1, scope: !3948, file: !3, line: 212, type: !2483)
!3950 = !DILocation(line: 212, column: 49, scope: !3948)
!3951 = !DILocation(line: 214, column: 41, scope: !3948)
!3952 = !DILocation(line: 214, column: 11, scope: !3948)
!3953 = !DILocation(line: 214, column: 10, scope: !3948)
!3954 = !DILocation(line: 214, column: 3, scope: !3948)
!3955 = distinct !DISubprogram(name: "optimize_bb_for_size_p", scope: !3, file: !3, line: 220, type: !3552, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3956 = !DILocalVariable(name: "bb", arg: 1, scope: !3955, file: !3, line: 220, type: !3554)
!3957 = !DILocation(line: 220, column: 43, scope: !3955)
!3958 = !DILocation(line: 222, column: 40, scope: !3955)
!3959 = !DILocation(line: 222, column: 10, scope: !3955)
!3960 = !DILocation(line: 222, column: 46, scope: !3955)
!3961 = !DILocation(line: 222, column: 66, scope: !3955)
!3962 = !DILocation(line: 222, column: 50, scope: !3955)
!3963 = !DILocation(line: 222, column: 49, scope: !3955)
!3964 = !DILocation(line: 222, column: 3, scope: !3955)
!3965 = distinct !DISubprogram(name: "optimize_bb_for_speed_p", scope: !3, file: !3, line: 228, type: !3552, scopeLine: 229, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3966 = !DILocalVariable(name: "bb", arg: 1, scope: !3965, file: !3, line: 228, type: !3554)
!3967 = !DILocation(line: 228, column: 44, scope: !3965)
!3968 = !DILocation(line: 230, column: 35, scope: !3965)
!3969 = !DILocation(line: 230, column: 11, scope: !3965)
!3970 = !DILocation(line: 230, column: 10, scope: !3965)
!3971 = !DILocation(line: 230, column: 3, scope: !3965)
!3972 = distinct !DISubprogram(name: "optimize_edge_for_size_p", scope: !3, file: !3, line: 236, type: !3885, scopeLine: 237, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3973 = !DILocalVariable(name: "e", arg: 1, scope: !3972, file: !3, line: 236, type: !1961)
!3974 = !DILocation(line: 236, column: 32, scope: !3972)
!3975 = !DILocation(line: 238, column: 40, scope: !3972)
!3976 = !DILocation(line: 238, column: 10, scope: !3972)
!3977 = !DILocation(line: 238, column: 46, scope: !3972)
!3978 = !DILocation(line: 238, column: 68, scope: !3972)
!3979 = !DILocation(line: 238, column: 50, scope: !3972)
!3980 = !DILocation(line: 238, column: 49, scope: !3972)
!3981 = !DILocation(line: 238, column: 3, scope: !3972)
!3982 = distinct !DISubprogram(name: "optimize_edge_for_speed_p", scope: !3, file: !3, line: 244, type: !3885, scopeLine: 245, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3983 = !DILocalVariable(name: "e", arg: 1, scope: !3982, file: !3, line: 244, type: !1961)
!3984 = !DILocation(line: 244, column: 33, scope: !3982)
!3985 = !DILocation(line: 246, column: 37, scope: !3982)
!3986 = !DILocation(line: 246, column: 11, scope: !3982)
!3987 = !DILocation(line: 246, column: 10, scope: !3982)
!3988 = !DILocation(line: 246, column: 3, scope: !3982)
!3989 = distinct !DISubprogram(name: "optimize_insn_for_size_p", scope: !3, file: !3, line: 252, type: !3501, scopeLine: 253, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3990 = !DILocation(line: 254, column: 40, scope: !3989)
!3991 = !DILocation(line: 254, column: 10, scope: !3989)
!3992 = !DILocation(line: 254, column: 46, scope: !3989)
!3993 = !DILocation(line: 254, column: 56, scope: !3989)
!3994 = !DILocation(line: 254, column: 49, scope: !3989)
!3995 = !DILocation(line: 254, column: 3, scope: !3989)
!3996 = distinct !DISubprogram(name: "optimize_insn_for_speed_p", scope: !3, file: !3, line: 260, type: !3501, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!3997 = !DILocation(line: 262, column: 11, scope: !3996)
!3998 = !DILocation(line: 262, column: 10, scope: !3996)
!3999 = !DILocation(line: 262, column: 3, scope: !3996)
!4000 = distinct !DISubprogram(name: "optimize_loop_for_size_p", scope: !3, file: !3, line: 268, type: !4001, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4001 = !DISubroutineType(types: !4002)
!4002 = !{!2137, !1989}
!4003 = !DILocalVariable(name: "loop", arg: 1, scope: !4000, file: !3, line: 268, type: !1989)
!4004 = !DILocation(line: 268, column: 40, scope: !4000)
!4005 = !DILocation(line: 270, column: 34, scope: !4000)
!4006 = !DILocation(line: 270, column: 40, scope: !4000)
!4007 = !DILocation(line: 270, column: 10, scope: !4000)
!4008 = !DILocation(line: 270, column: 3, scope: !4000)
!4009 = distinct !DISubprogram(name: "optimize_loop_for_speed_p", scope: !3, file: !3, line: 276, type: !4001, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4010 = !DILocalVariable(name: "loop", arg: 1, scope: !4009, file: !3, line: 276, type: !1989)
!4011 = !DILocation(line: 276, column: 41, scope: !4009)
!4012 = !DILocation(line: 278, column: 35, scope: !4009)
!4013 = !DILocation(line: 278, column: 41, scope: !4009)
!4014 = !DILocation(line: 278, column: 10, scope: !4009)
!4015 = !DILocation(line: 278, column: 3, scope: !4009)
!4016 = distinct !DISubprogram(name: "optimize_loop_nest_for_speed_p", scope: !3, file: !3, line: 284, type: !4001, scopeLine: 285, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4017 = !DILocalVariable(name: "loop", arg: 1, scope: !4016, file: !3, line: 284, type: !1989)
!4018 = !DILocation(line: 284, column: 46, scope: !4016)
!4019 = !DILocalVariable(name: "l", scope: !4016, file: !3, line: 286, type: !1989)
!4020 = !DILocation(line: 286, column: 16, scope: !4016)
!4021 = !DILocation(line: 286, column: 20, scope: !4016)
!4022 = !DILocation(line: 287, column: 34, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 287, column: 7)
!4024 = !DILocation(line: 287, column: 7, scope: !4023)
!4025 = !DILocation(line: 287, column: 7, scope: !4016)
!4026 = !DILocation(line: 288, column: 5, scope: !4023)
!4027 = !DILocation(line: 289, column: 7, scope: !4016)
!4028 = !DILocation(line: 289, column: 13, scope: !4016)
!4029 = !DILocation(line: 289, column: 5, scope: !4016)
!4030 = !DILocation(line: 290, column: 3, scope: !4016)
!4031 = !DILocation(line: 290, column: 10, scope: !4016)
!4032 = !DILocation(line: 290, column: 12, scope: !4016)
!4033 = !DILocation(line: 290, column: 15, scope: !4016)
!4034 = !DILocation(line: 290, column: 20, scope: !4016)
!4035 = !DILocation(line: 290, column: 17, scope: !4016)
!4036 = !DILocation(line: 0, scope: !4016)
!4037 = !DILocation(line: 292, column: 38, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 292, column: 11)
!4039 = distinct !DILexicalBlock(scope: !4016, file: !3, line: 291, column: 5)
!4040 = !DILocation(line: 292, column: 11, scope: !4038)
!4041 = !DILocation(line: 292, column: 11, scope: !4039)
!4042 = !DILocation(line: 293, column: 9, scope: !4038)
!4043 = !DILocation(line: 294, column: 11, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 294, column: 11)
!4045 = !DILocation(line: 294, column: 14, scope: !4044)
!4046 = !DILocation(line: 294, column: 11, scope: !4039)
!4047 = !DILocation(line: 295, column: 13, scope: !4044)
!4048 = !DILocation(line: 295, column: 16, scope: !4044)
!4049 = !DILocation(line: 295, column: 11, scope: !4044)
!4050 = !DILocation(line: 295, column: 9, scope: !4044)
!4051 = !DILocation(line: 296, column: 16, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4044, file: !3, line: 296, column: 16)
!4053 = !DILocation(line: 296, column: 19, scope: !4052)
!4054 = !DILocation(line: 296, column: 16, scope: !4044)
!4055 = !DILocation(line: 297, column: 13, scope: !4052)
!4056 = !DILocation(line: 297, column: 16, scope: !4052)
!4057 = !DILocation(line: 297, column: 11, scope: !4052)
!4058 = !DILocation(line: 297, column: 9, scope: !4052)
!4059 = !DILocation(line: 300, column: 4, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4052, file: !3, line: 299, column: 9)
!4061 = !DILocation(line: 300, column: 11, scope: !4060)
!4062 = !DILocation(line: 300, column: 16, scope: !4060)
!4063 = !DILocation(line: 300, column: 13, scope: !4060)
!4064 = !DILocation(line: 300, column: 21, scope: !4060)
!4065 = !DILocation(line: 300, column: 25, scope: !4060)
!4066 = !DILocation(line: 300, column: 28, scope: !4060)
!4067 = !DILocation(line: 300, column: 24, scope: !4060)
!4068 = !DILocation(line: 0, scope: !4060)
!4069 = !DILocation(line: 301, column: 22, scope: !4060)
!4070 = !DILocation(line: 301, column: 10, scope: !4060)
!4071 = !DILocation(line: 301, column: 8, scope: !4060)
!4072 = distinct !{!4072, !4059, !4073}
!4073 = !DILocation(line: 301, column: 23, scope: !4060)
!4074 = !DILocation(line: 302, column: 8, scope: !4075)
!4075 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 302, column: 8)
!4076 = !DILocation(line: 302, column: 13, scope: !4075)
!4077 = !DILocation(line: 302, column: 10, scope: !4075)
!4078 = !DILocation(line: 302, column: 8, scope: !4060)
!4079 = !DILocation(line: 303, column: 10, scope: !4075)
!4080 = !DILocation(line: 303, column: 13, scope: !4075)
!4081 = !DILocation(line: 303, column: 8, scope: !4075)
!4082 = !DILocation(line: 303, column: 6, scope: !4075)
!4083 = distinct !{!4083, !4030, !4084}
!4084 = !DILocation(line: 305, column: 5, scope: !4016)
!4085 = !DILocation(line: 306, column: 3, scope: !4016)
!4086 = !DILocation(line: 307, column: 1, scope: !4016)
!4087 = distinct !DISubprogram(name: "loop_outer", scope: !153, file: !153, line: 434, type: !4088, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4088 = !DISubroutineType(types: !4089)
!4089 = !{!1989, !4090}
!4090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4091, size: 64)
!4091 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1990)
!4092 = !DILocalVariable(name: "loop", arg: 1, scope: !4087, file: !153, line: 434, type: !4090)
!4093 = !DILocation(line: 434, column: 32, scope: !4087)
!4094 = !DILocalVariable(name: "n", scope: !4087, file: !153, line: 436, type: !7)
!4095 = !DILocation(line: 436, column: 12, scope: !4087)
!4096 = !DILocation(line: 436, column: 16, scope: !4087)
!4097 = !DILocation(line: 438, column: 7, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4087, file: !153, line: 438, column: 7)
!4099 = !DILocation(line: 438, column: 9, scope: !4098)
!4100 = !DILocation(line: 438, column: 7, scope: !4087)
!4101 = !DILocation(line: 439, column: 5, scope: !4098)
!4102 = !DILocation(line: 441, column: 10, scope: !4087)
!4103 = !DILocation(line: 441, column: 3, scope: !4087)
!4104 = !DILocation(line: 442, column: 1, scope: !4087)
!4105 = distinct !DISubprogram(name: "optimize_loop_nest_for_size_p", scope: !3, file: !3, line: 312, type: !4001, scopeLine: 313, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4106 = !DILocalVariable(name: "loop", arg: 1, scope: !4105, file: !3, line: 312, type: !1989)
!4107 = !DILocation(line: 312, column: 45, scope: !4105)
!4108 = !DILocation(line: 314, column: 43, scope: !4105)
!4109 = !DILocation(line: 314, column: 11, scope: !4105)
!4110 = !DILocation(line: 314, column: 10, scope: !4105)
!4111 = !DILocation(line: 314, column: 3, scope: !4105)
!4112 = distinct !DISubprogram(name: "predictable_edge_p", scope: !3, file: !3, line: 321, type: !3885, scopeLine: 322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4113 = !DILocalVariable(name: "e", arg: 1, scope: !4112, file: !3, line: 321, type: !1961)
!4114 = !DILocation(line: 321, column: 26, scope: !4112)
!4115 = !DILocation(line: 323, column: 7, scope: !4116)
!4116 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 323, column: 7)
!4117 = !DILocation(line: 323, column: 22, scope: !4116)
!4118 = !DILocation(line: 323, column: 7, scope: !4112)
!4119 = !DILocation(line: 324, column: 5, scope: !4116)
!4120 = !DILocation(line: 325, column: 8, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4112, file: !3, line: 325, column: 7)
!4122 = !DILocation(line: 325, column: 11, scope: !4121)
!4123 = !DILocation(line: 326, column: 11, scope: !4121)
!4124 = !DILocation(line: 326, column: 58, scope: !4121)
!4125 = !DILocation(line: 326, column: 77, scope: !4121)
!4126 = !DILocation(line: 326, column: 8, scope: !4121)
!4127 = !DILocation(line: 327, column: 7, scope: !4121)
!4128 = !DILocation(line: 327, column: 30, scope: !4121)
!4129 = !DILocation(line: 327, column: 33, scope: !4121)
!4130 = !DILocation(line: 327, column: 28, scope: !4121)
!4131 = !DILocation(line: 328, column: 14, scope: !4121)
!4132 = !DILocation(line: 328, column: 61, scope: !4121)
!4133 = !DILocation(line: 328, column: 80, scope: !4121)
!4134 = !DILocation(line: 328, column: 11, scope: !4121)
!4135 = !DILocation(line: 325, column: 7, scope: !4112)
!4136 = !DILocation(line: 329, column: 5, scope: !4121)
!4137 = !DILocation(line: 330, column: 3, scope: !4112)
!4138 = !DILocation(line: 331, column: 1, scope: !4112)
!4139 = distinct !DISubprogram(name: "rtl_profile_for_bb", scope: !3, file: !3, line: 337, type: !4140, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4140 = !DISubroutineType(types: !4141)
!4141 = !{null, !2653}
!4142 = !DILocalVariable(name: "bb", arg: 1, scope: !4139, file: !3, line: 337, type: !2653)
!4143 = !DILocation(line: 337, column: 33, scope: !4139)
!4144 = !DILocation(line: 339, column: 44, scope: !4139)
!4145 = !DILocation(line: 339, column: 28, scope: !4139)
!4146 = !DILocation(line: 339, column: 26, scope: !4139)
!4147 = !DILocation(line: 340, column: 1, scope: !4139)
!4148 = distinct !DISubprogram(name: "rtl_profile_for_edge", scope: !3, file: !3, line: 345, type: !4149, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4149 = !DISubroutineType(types: !4150)
!4150 = !{null, !1961}
!4151 = !DILocalVariable(name: "e", arg: 1, scope: !4148, file: !3, line: 345, type: !1961)
!4152 = !DILocation(line: 345, column: 28, scope: !4148)
!4153 = !DILocation(line: 347, column: 46, scope: !4148)
!4154 = !DILocation(line: 347, column: 28, scope: !4148)
!4155 = !DILocation(line: 347, column: 26, scope: !4148)
!4156 = !DILocation(line: 348, column: 1, scope: !4148)
!4157 = distinct !DISubprogram(name: "default_rtl_profile", scope: !3, file: !3, line: 352, type: !3487, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4158 = !DILocation(line: 354, column: 26, scope: !4157)
!4159 = !DILocation(line: 355, column: 1, scope: !4157)
!4160 = distinct !DISubprogram(name: "rtl_predicted_by_p", scope: !3, file: !3, line: 361, type: !4161, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4161 = !DISubroutineType(types: !4162)
!4162 = !{!2137, !3554, !732}
!4163 = !DILocalVariable(name: "bb", arg: 1, scope: !4160, file: !3, line: 361, type: !3554)
!4164 = !DILocation(line: 361, column: 39, scope: !4160)
!4165 = !DILocalVariable(name: "predictor", arg: 2, scope: !4160, file: !3, line: 361, type: !732)
!4166 = !DILocation(line: 361, column: 61, scope: !4160)
!4167 = !DILocalVariable(name: "note", scope: !4160, file: !3, line: 363, type: !2195)
!4168 = !DILocation(line: 363, column: 7, scope: !4160)
!4169 = !DILocation(line: 364, column: 8, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 364, column: 7)
!4171 = !DILocation(line: 364, column: 7, scope: !4160)
!4172 = !DILocation(line: 365, column: 5, scope: !4170)
!4173 = !DILocation(line: 366, column: 15, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4160, file: !3, line: 366, column: 3)
!4175 = !DILocation(line: 366, column: 13, scope: !4174)
!4176 = !DILocation(line: 366, column: 8, scope: !4174)
!4177 = !DILocation(line: 366, column: 40, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 366, column: 3)
!4179 = !DILocation(line: 366, column: 3, scope: !4174)
!4180 = !DILocation(line: 367, column: 9, scope: !4181)
!4181 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 367, column: 9)
!4182 = !DILocation(line: 367, column: 30, scope: !4181)
!4183 = !DILocation(line: 368, column: 2, scope: !4181)
!4184 = !DILocation(line: 368, column: 5, scope: !4181)
!4185 = !DILocation(line: 368, column: 47, scope: !4181)
!4186 = !DILocation(line: 368, column: 42, scope: !4181)
!4187 = !DILocation(line: 368, column: 39, scope: !4181)
!4188 = !DILocation(line: 367, column: 9, scope: !4178)
!4189 = !DILocation(line: 369, column: 7, scope: !4181)
!4190 = !DILocation(line: 366, column: 53, scope: !4178)
!4191 = !DILocation(line: 366, column: 51, scope: !4178)
!4192 = !DILocation(line: 366, column: 3, scope: !4178)
!4193 = distinct !{!4193, !4179, !4194}
!4194 = !DILocation(line: 369, column: 14, scope: !4174)
!4195 = !DILocation(line: 370, column: 3, scope: !4160)
!4196 = !DILocation(line: 371, column: 1, scope: !4160)
!4197 = distinct !DISubprogram(name: "gimple_predicted_by_p", scope: !3, file: !3, line: 382, type: !4161, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4198 = !DILocalVariable(name: "bb", arg: 1, scope: !4197, file: !3, line: 382, type: !3554)
!4199 = !DILocation(line: 382, column: 42, scope: !4197)
!4200 = !DILocalVariable(name: "predictor", arg: 2, scope: !4197, file: !3, line: 382, type: !732)
!4201 = !DILocation(line: 382, column: 64, scope: !4197)
!4202 = !DILocalVariable(name: "i", scope: !4197, file: !3, line: 384, type: !1955)
!4203 = !DILocation(line: 384, column: 27, scope: !4197)
!4204 = !DILocalVariable(name: "preds", scope: !4197, file: !3, line: 385, type: !2589)
!4205 = !DILocation(line: 385, column: 10, scope: !4197)
!4206 = !DILocation(line: 385, column: 40, scope: !4197)
!4207 = !DILocation(line: 385, column: 56, scope: !4197)
!4208 = !DILocation(line: 385, column: 18, scope: !4197)
!4209 = !DILocation(line: 387, column: 8, scope: !4210)
!4210 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 387, column: 7)
!4211 = !DILocation(line: 387, column: 7, scope: !4197)
!4212 = !DILocation(line: 388, column: 5, scope: !4210)
!4213 = !DILocation(line: 390, column: 40, scope: !4214)
!4214 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 390, column: 3)
!4215 = !DILocation(line: 390, column: 39, scope: !4214)
!4216 = !DILocation(line: 390, column: 12, scope: !4214)
!4217 = !DILocation(line: 390, column: 10, scope: !4214)
!4218 = !DILocation(line: 390, column: 8, scope: !4214)
!4219 = !DILocation(line: 390, column: 47, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4214, file: !3, line: 390, column: 3)
!4221 = !DILocation(line: 390, column: 3, scope: !4214)
!4222 = !DILocation(line: 391, column: 9, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 391, column: 9)
!4224 = !DILocation(line: 391, column: 12, scope: !4223)
!4225 = !DILocation(line: 391, column: 28, scope: !4223)
!4226 = !DILocation(line: 391, column: 25, scope: !4223)
!4227 = !DILocation(line: 391, column: 9, scope: !4220)
!4228 = !DILocation(line: 392, column: 7, scope: !4223)
!4229 = !DILocation(line: 390, column: 54, scope: !4220)
!4230 = !DILocation(line: 390, column: 57, scope: !4220)
!4231 = !DILocation(line: 390, column: 52, scope: !4220)
!4232 = !DILocation(line: 390, column: 3, scope: !4220)
!4233 = distinct !{!4233, !4221, !4234}
!4234 = !DILocation(line: 392, column: 14, scope: !4214)
!4235 = !DILocation(line: 393, column: 3, scope: !4197)
!4236 = !DILocation(line: 394, column: 1, scope: !4197)
!4237 = distinct !DISubprogram(name: "edge_probability_reliable_p", scope: !3, file: !3, line: 422, type: !4238, scopeLine: 423, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4238 = !DISubroutineType(types: !4239)
!4239 = !{!2137, !4240}
!4240 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !1962, line: 109, baseType: !4241)
!4241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4242, size: 64)
!4242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1964)
!4243 = !DILocalVariable(name: "e", arg: 1, scope: !4237, file: !3, line: 422, type: !4240)
!4244 = !DILocation(line: 422, column: 41, scope: !4237)
!4245 = !DILocation(line: 424, column: 34, scope: !4237)
!4246 = !DILocation(line: 424, column: 37, scope: !4237)
!4247 = !DILocation(line: 424, column: 10, scope: !4237)
!4248 = !DILocation(line: 424, column: 3, scope: !4237)
!4249 = distinct !DISubprogram(name: "probability_reliable_p", scope: !3, file: !3, line: 413, type: !3599, scopeLine: 414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4250 = !DILocalVariable(name: "prob", arg: 1, scope: !4249, file: !3, line: 413, type: !1954)
!4251 = !DILocation(line: 413, column: 29, scope: !4249)
!4252 = !DILocation(line: 415, column: 11, scope: !4249)
!4253 = !DILocation(line: 415, column: 26, scope: !4249)
!4254 = !DILocation(line: 416, column: 4, scope: !4249)
!4255 = !DILocation(line: 416, column: 8, scope: !4249)
!4256 = !DILocation(line: 416, column: 23, scope: !4249)
!4257 = !DILocation(line: 417, column: 8, scope: !4249)
!4258 = !DILocation(line: 417, column: 12, scope: !4249)
!4259 = !DILocation(line: 417, column: 17, scope: !4249)
!4260 = !DILocation(line: 417, column: 32, scope: !4249)
!4261 = !DILocation(line: 417, column: 35, scope: !4249)
!4262 = !DILocation(line: 417, column: 40, scope: !4249)
!4263 = !DILocation(line: 0, scope: !4249)
!4264 = !DILocation(line: 415, column: 10, scope: !4249)
!4265 = !DILocation(line: 415, column: 3, scope: !4249)
!4266 = distinct !DISubprogram(name: "br_prob_note_reliable_p", scope: !3, file: !3, line: 429, type: !4267, scopeLine: 430, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4267 = !DISubroutineType(types: !4268)
!4268 = !{!2137, !4269}
!4269 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !1962, line: 51, baseType: !4270)
!4270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4271, size: 64)
!4271 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2197)
!4272 = !DILocalVariable(name: "note", arg: 1, scope: !4266, file: !3, line: 429, type: !4269)
!4273 = !DILocation(line: 429, column: 36, scope: !4266)
!4274 = !DILocation(line: 431, column: 3, scope: !4266)
!4275 = !DILocation(line: 432, column: 34, scope: !4266)
!4276 = !DILocation(line: 432, column: 10, scope: !4266)
!4277 = !DILocation(line: 432, column: 3, scope: !4266)
!4278 = distinct !DISubprogram(name: "predict_insn_def", scope: !3, file: !3, line: 451, type: !4279, scopeLine: 453, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4279 = !DISubroutineType(types: !4280)
!4280 = !{null, !2195, !732, !941}
!4281 = !DILocalVariable(name: "insn", arg: 1, scope: !4278, file: !3, line: 451, type: !2195)
!4282 = !DILocation(line: 451, column: 23, scope: !4278)
!4283 = !DILocalVariable(name: "predictor", arg: 2, scope: !4278, file: !3, line: 451, type: !732)
!4284 = !DILocation(line: 451, column: 47, scope: !4278)
!4285 = !DILocalVariable(name: "taken", arg: 3, scope: !4278, file: !3, line: 452, type: !941)
!4286 = !DILocation(line: 452, column: 21, scope: !4278)
!4287 = !DILocalVariable(name: "probability", scope: !4278, file: !3, line: 454, type: !1954)
!4288 = !DILocation(line: 454, column: 8, scope: !4278)
!4289 = !DILocation(line: 454, column: 43, scope: !4278)
!4290 = !DILocation(line: 454, column: 22, scope: !4278)
!4291 = !DILocation(line: 454, column: 54, scope: !4278)
!4292 = !DILocation(line: 456, column: 8, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4278, file: !3, line: 456, column: 8)
!4294 = !DILocation(line: 456, column: 14, scope: !4293)
!4295 = !DILocation(line: 456, column: 8, scope: !4278)
!4296 = !DILocation(line: 457, column: 39, scope: !4293)
!4297 = !DILocation(line: 457, column: 37, scope: !4293)
!4298 = !DILocation(line: 457, column: 18, scope: !4293)
!4299 = !DILocation(line: 457, column: 6, scope: !4293)
!4300 = !DILocation(line: 459, column: 18, scope: !4278)
!4301 = !DILocation(line: 459, column: 24, scope: !4278)
!4302 = !DILocation(line: 459, column: 35, scope: !4278)
!4303 = !DILocation(line: 459, column: 4, scope: !4278)
!4304 = !DILocation(line: 460, column: 1, scope: !4278)
!4305 = distinct !DISubprogram(name: "predict_insn", scope: !3, file: !3, line: 436, type: !4306, scopeLine: 437, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4306 = !DISubroutineType(types: !4307)
!4307 = !{null, !2195, !732, !1954}
!4308 = !DILocalVariable(name: "insn", arg: 1, scope: !4305, file: !3, line: 436, type: !2195)
!4309 = !DILocation(line: 436, column: 19, scope: !4305)
!4310 = !DILocalVariable(name: "predictor", arg: 2, scope: !4305, file: !3, line: 436, type: !732)
!4311 = !DILocation(line: 436, column: 43, scope: !4305)
!4312 = !DILocalVariable(name: "probability", arg: 3, scope: !4305, file: !3, line: 436, type: !1954)
!4313 = !DILocation(line: 436, column: 58, scope: !4305)
!4314 = !DILocation(line: 438, column: 3, scope: !4305)
!4315 = !DILocation(line: 439, column: 8, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 439, column: 7)
!4317 = !DILocation(line: 439, column: 7, scope: !4305)
!4318 = !DILocation(line: 440, column: 5, scope: !4316)
!4319 = !DILocation(line: 442, column: 17, scope: !4305)
!4320 = !DILocation(line: 443, column: 3, scope: !4305)
!4321 = !DILocation(line: 442, column: 3, scope: !4305)
!4322 = !DILocation(line: 446, column: 1, scope: !4305)
!4323 = distinct !DISubprogram(name: "rtl_predict_edge", scope: !3, file: !3, line: 465, type: !4324, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4324 = !DISubroutineType(types: !4325)
!4325 = !{null, !1961, !732, !1954}
!4326 = !DILocalVariable(name: "e", arg: 1, scope: !4323, file: !3, line: 465, type: !1961)
!4327 = !DILocation(line: 465, column: 24, scope: !4323)
!4328 = !DILocalVariable(name: "predictor", arg: 2, scope: !4323, file: !3, line: 465, type: !732)
!4329 = !DILocation(line: 465, column: 45, scope: !4323)
!4330 = !DILocalVariable(name: "probability", arg: 3, scope: !4323, file: !3, line: 465, type: !1954)
!4331 = !DILocation(line: 465, column: 60, scope: !4323)
!4332 = !DILocalVariable(name: "last_insn", scope: !4323, file: !3, line: 467, type: !2195)
!4333 = !DILocation(line: 467, column: 7, scope: !4323)
!4334 = !DILocation(line: 468, column: 15, scope: !4323)
!4335 = !DILocation(line: 468, column: 13, scope: !4323)
!4336 = !DILocation(line: 472, column: 24, scope: !4337)
!4337 = distinct !DILexicalBlock(scope: !4323, file: !3, line: 472, column: 7)
!4338 = !DILocation(line: 472, column: 8, scope: !4337)
!4339 = !DILocation(line: 472, column: 7, scope: !4323)
!4340 = !DILocation(line: 473, column: 5, scope: !4337)
!4341 = !DILocation(line: 476, column: 7, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4323, file: !3, line: 476, column: 7)
!4343 = !DILocation(line: 476, column: 10, scope: !4342)
!4344 = !DILocation(line: 476, column: 16, scope: !4342)
!4345 = !DILocation(line: 476, column: 7, scope: !4323)
!4346 = !DILocation(line: 477, column: 38, scope: !4342)
!4347 = !DILocation(line: 477, column: 36, scope: !4342)
!4348 = !DILocation(line: 477, column: 17, scope: !4342)
!4349 = !DILocation(line: 477, column: 5, scope: !4342)
!4350 = !DILocation(line: 479, column: 17, scope: !4323)
!4351 = !DILocation(line: 479, column: 28, scope: !4323)
!4352 = !DILocation(line: 479, column: 39, scope: !4323)
!4353 = !DILocation(line: 479, column: 3, scope: !4323)
!4354 = !DILocation(line: 480, column: 1, scope: !4323)
!4355 = distinct !DISubprogram(name: "gimple_predict_edge", scope: !3, file: !3, line: 484, type: !4324, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4356 = !DILocalVariable(name: "e", arg: 1, scope: !4355, file: !3, line: 484, type: !1961)
!4357 = !DILocation(line: 484, column: 27, scope: !4355)
!4358 = !DILocalVariable(name: "predictor", arg: 2, scope: !4355, file: !3, line: 484, type: !732)
!4359 = !DILocation(line: 484, column: 48, scope: !4355)
!4360 = !DILocalVariable(name: "probability", arg: 3, scope: !4355, file: !3, line: 484, type: !1954)
!4361 = !DILocation(line: 484, column: 63, scope: !4355)
!4362 = !DILocation(line: 486, column: 3, scope: !4355)
!4363 = !DILocation(line: 487, column: 8, scope: !4364)
!4364 = distinct !DILexicalBlock(scope: !4355, file: !3, line: 487, column: 7)
!4365 = !DILocation(line: 487, column: 11, scope: !4364)
!4366 = !DILocation(line: 487, column: 18, scope: !4364)
!4367 = !DILocation(line: 487, column: 15, scope: !4364)
!4368 = !DILocation(line: 487, column: 34, scope: !4364)
!4369 = !DILocation(line: 487, column: 37, scope: !4364)
!4370 = !DILocation(line: 487, column: 64, scope: !4364)
!4371 = !DILocation(line: 488, column: 7, scope: !4364)
!4372 = !DILocation(line: 488, column: 10, scope: !4364)
!4373 = !DILocation(line: 488, column: 33, scope: !4364)
!4374 = !DILocation(line: 488, column: 36, scope: !4364)
!4375 = !DILocation(line: 487, column: 7, scope: !4355)
!4376 = !DILocalVariable(name: "i", scope: !4377, file: !3, line: 490, type: !1955)
!4377 = distinct !DILexicalBlock(scope: !4364, file: !3, line: 489, column: 5)
!4378 = !DILocation(line: 490, column: 31, scope: !4377)
!4379 = !DILocation(line: 490, column: 35, scope: !4377)
!4380 = !DILocalVariable(name: "preds", scope: !4377, file: !3, line: 491, type: !2589)
!4381 = !DILocation(line: 491, column: 14, scope: !4377)
!4382 = !DILocation(line: 491, column: 42, scope: !4377)
!4383 = !DILocation(line: 491, column: 58, scope: !4377)
!4384 = !DILocation(line: 491, column: 61, scope: !4377)
!4385 = !DILocation(line: 491, column: 22, scope: !4377)
!4386 = !DILocation(line: 493, column: 48, scope: !4377)
!4387 = !DILocation(line: 493, column: 47, scope: !4377)
!4388 = !DILocation(line: 493, column: 20, scope: !4377)
!4389 = !DILocation(line: 493, column: 7, scope: !4377)
!4390 = !DILocation(line: 493, column: 10, scope: !4377)
!4391 = !DILocation(line: 493, column: 18, scope: !4377)
!4392 = !DILocation(line: 494, column: 16, scope: !4377)
!4393 = !DILocation(line: 494, column: 8, scope: !4377)
!4394 = !DILocation(line: 494, column: 14, scope: !4377)
!4395 = !DILocation(line: 495, column: 27, scope: !4377)
!4396 = !DILocation(line: 495, column: 7, scope: !4377)
!4397 = !DILocation(line: 495, column: 10, scope: !4377)
!4398 = !DILocation(line: 495, column: 25, scope: !4377)
!4399 = !DILocation(line: 496, column: 25, scope: !4377)
!4400 = !DILocation(line: 496, column: 7, scope: !4377)
!4401 = !DILocation(line: 496, column: 10, scope: !4377)
!4402 = !DILocation(line: 496, column: 23, scope: !4377)
!4403 = !DILocation(line: 497, column: 20, scope: !4377)
!4404 = !DILocation(line: 497, column: 7, scope: !4377)
!4405 = !DILocation(line: 497, column: 10, scope: !4377)
!4406 = !DILocation(line: 497, column: 18, scope: !4377)
!4407 = !DILocation(line: 498, column: 5, scope: !4377)
!4408 = !DILocation(line: 499, column: 1, scope: !4355)
!4409 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !142, file: !142, line: 150, type: !4410, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4410 = !DISubroutineType(types: !4411)
!4411 = !{!7, !4412}
!4412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4413, size: 64)
!4413 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1976)
!4414 = !DILocalVariable(name: "vec_", arg: 1, scope: !4409, file: !142, line: 150, type: !4412)
!4415 = !DILocation(line: 150, column: 1, scope: !4409)
!4416 = distinct !DISubprogram(name: "remove_predictions_associated_with_edge", scope: !3, file: !3, line: 504, type: !4149, scopeLine: 505, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4417 = !DILocalVariable(name: "e", arg: 1, scope: !4416, file: !3, line: 504, type: !1961)
!4418 = !DILocation(line: 504, column: 47, scope: !4416)
!4419 = !DILocalVariable(name: "preds", scope: !4416, file: !3, line: 506, type: !2589)
!4420 = !DILocation(line: 506, column: 10, scope: !4416)
!4421 = !DILocation(line: 508, column: 8, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 508, column: 7)
!4423 = !DILocation(line: 508, column: 7, scope: !4416)
!4424 = !DILocation(line: 509, column: 5, scope: !4422)
!4425 = !DILocation(line: 511, column: 33, scope: !4416)
!4426 = !DILocation(line: 511, column: 49, scope: !4416)
!4427 = !DILocation(line: 511, column: 52, scope: !4416)
!4428 = !DILocation(line: 511, column: 11, scope: !4416)
!4429 = !DILocation(line: 511, column: 9, scope: !4416)
!4430 = !DILocation(line: 513, column: 7, scope: !4431)
!4431 = distinct !DILexicalBlock(scope: !4416, file: !3, line: 513, column: 7)
!4432 = !DILocation(line: 513, column: 7, scope: !4416)
!4433 = !DILocalVariable(name: "prediction", scope: !4434, file: !3, line: 515, type: !3448)
!4434 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 514, column: 5)
!4435 = !DILocation(line: 515, column: 32, scope: !4434)
!4436 = !DILocation(line: 515, column: 73, scope: !4434)
!4437 = !DILocation(line: 515, column: 45, scope: !4434)
!4438 = !DILocalVariable(name: "next", scope: !4434, file: !3, line: 516, type: !1955)
!4439 = !DILocation(line: 516, column: 31, scope: !4434)
!4440 = !DILocation(line: 518, column: 7, scope: !4434)
!4441 = !DILocation(line: 518, column: 15, scope: !4434)
!4442 = !DILocation(line: 518, column: 14, scope: !4434)
!4443 = !DILocation(line: 520, column: 10, scope: !4444)
!4444 = distinct !DILexicalBlock(scope: !4445, file: !3, line: 520, column: 8)
!4445 = distinct !DILexicalBlock(scope: !4434, file: !3, line: 519, column: 2)
!4446 = !DILocation(line: 520, column: 9, scope: !4444)
!4447 = !DILocation(line: 520, column: 23, scope: !4444)
!4448 = !DILocation(line: 520, column: 34, scope: !4444)
!4449 = !DILocation(line: 520, column: 31, scope: !4444)
!4450 = !DILocation(line: 520, column: 8, scope: !4445)
!4451 = !DILocation(line: 522, column: 17, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4444, file: !3, line: 521, column: 6)
!4453 = !DILocation(line: 522, column: 16, scope: !4452)
!4454 = !DILocation(line: 522, column: 30, scope: !4452)
!4455 = !DILocation(line: 522, column: 13, scope: !4452)
!4456 = !DILocation(line: 523, column: 15, scope: !4452)
!4457 = !DILocation(line: 523, column: 14, scope: !4452)
!4458 = !DILocation(line: 523, column: 8, scope: !4452)
!4459 = !DILocation(line: 524, column: 22, scope: !4452)
!4460 = !DILocation(line: 524, column: 9, scope: !4452)
!4461 = !DILocation(line: 524, column: 20, scope: !4452)
!4462 = !DILocation(line: 525, column: 6, scope: !4452)
!4463 = !DILocation(line: 527, column: 23, scope: !4444)
!4464 = !DILocation(line: 527, column: 22, scope: !4444)
!4465 = !DILocation(line: 527, column: 36, scope: !4444)
!4466 = !DILocation(line: 527, column: 17, scope: !4444)
!4467 = distinct !{!4467, !4440, !4468}
!4468 = !DILocation(line: 528, column: 2, scope: !4434)
!4469 = !DILocation(line: 529, column: 5, scope: !4434)
!4470 = !DILocation(line: 530, column: 1, scope: !4416)
!4471 = distinct !DISubprogram(name: "predict_edge_def", scope: !3, file: !3, line: 565, type: !4472, scopeLine: 567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4472 = !DISubroutineType(types: !4473)
!4473 = !{null, !1961, !732, !941}
!4474 = !DILocalVariable(name: "e", arg: 1, scope: !4471, file: !3, line: 565, type: !1961)
!4475 = !DILocation(line: 565, column: 24, scope: !4471)
!4476 = !DILocalVariable(name: "predictor", arg: 2, scope: !4471, file: !3, line: 565, type: !732)
!4477 = !DILocation(line: 565, column: 45, scope: !4471)
!4478 = !DILocalVariable(name: "taken", arg: 3, scope: !4471, file: !3, line: 566, type: !941)
!4479 = !DILocation(line: 566, column: 21, scope: !4471)
!4480 = !DILocalVariable(name: "probability", scope: !4471, file: !3, line: 568, type: !1954)
!4481 = !DILocation(line: 568, column: 8, scope: !4471)
!4482 = !DILocation(line: 568, column: 43, scope: !4471)
!4483 = !DILocation(line: 568, column: 22, scope: !4471)
!4484 = !DILocation(line: 568, column: 54, scope: !4471)
!4485 = !DILocation(line: 570, column: 8, scope: !4486)
!4486 = distinct !DILexicalBlock(scope: !4471, file: !3, line: 570, column: 8)
!4487 = !DILocation(line: 570, column: 14, scope: !4486)
!4488 = !DILocation(line: 570, column: 8, scope: !4471)
!4489 = !DILocation(line: 571, column: 39, scope: !4486)
!4490 = !DILocation(line: 571, column: 37, scope: !4486)
!4491 = !DILocation(line: 571, column: 18, scope: !4486)
!4492 = !DILocation(line: 571, column: 6, scope: !4486)
!4493 = !DILocation(line: 573, column: 18, scope: !4471)
!4494 = !DILocation(line: 573, column: 21, scope: !4471)
!4495 = !DILocation(line: 573, column: 32, scope: !4471)
!4496 = !DILocation(line: 573, column: 4, scope: !4471)
!4497 = !DILocation(line: 574, column: 1, scope: !4471)
!4498 = distinct !DISubprogram(name: "invert_br_probabilities", scope: !3, file: !3, line: 580, type: !4499, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4499 = !DISubroutineType(types: !4500)
!4500 = !{null, !2195}
!4501 = !DILocalVariable(name: "insn", arg: 1, scope: !4498, file: !3, line: 580, type: !2195)
!4502 = !DILocation(line: 580, column: 30, scope: !4498)
!4503 = !DILocalVariable(name: "note", scope: !4498, file: !3, line: 582, type: !2195)
!4504 = !DILocation(line: 582, column: 7, scope: !4498)
!4505 = !DILocation(line: 584, column: 15, scope: !4506)
!4506 = distinct !DILexicalBlock(scope: !4498, file: !3, line: 584, column: 3)
!4507 = !DILocation(line: 584, column: 13, scope: !4506)
!4508 = !DILocation(line: 584, column: 8, scope: !4506)
!4509 = !DILocation(line: 584, column: 33, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4506, file: !3, line: 584, column: 3)
!4511 = !DILocation(line: 584, column: 3, scope: !4506)
!4512 = !DILocation(line: 585, column: 9, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4510, file: !3, line: 585, column: 9)
!4514 = !DILocation(line: 585, column: 30, scope: !4513)
!4515 = !DILocation(line: 585, column: 9, scope: !4510)
!4516 = !DILocation(line: 586, column: 24, scope: !4513)
!4517 = !DILocation(line: 586, column: 7, scope: !4513)
!4518 = !DILocation(line: 586, column: 22, scope: !4513)
!4519 = !DILocation(line: 587, column: 14, scope: !4520)
!4520 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 587, column: 14)
!4521 = !DILocation(line: 587, column: 35, scope: !4520)
!4522 = !DILocation(line: 587, column: 14, scope: !4513)
!4523 = !DILocation(line: 589, column: 4, scope: !4520)
!4524 = !DILocation(line: 588, column: 7, scope: !4520)
!4525 = !DILocation(line: 589, column: 2, scope: !4520)
!4526 = !DILocation(line: 585, column: 33, scope: !4513)
!4527 = !DILocation(line: 584, column: 46, scope: !4510)
!4528 = !DILocation(line: 584, column: 44, scope: !4510)
!4529 = !DILocation(line: 584, column: 3, scope: !4510)
!4530 = distinct !{!4530, !4511, !4531}
!4531 = !DILocation(line: 589, column: 4, scope: !4506)
!4532 = !DILocation(line: 590, column: 1, scope: !4498)
!4533 = distinct !DISubprogram(name: "guess_outgoing_edge_probabilities", scope: !3, file: !3, line: 1143, type: !4140, scopeLine: 1144, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4534 = !DILocalVariable(name: "bb", arg: 1, scope: !4533, file: !3, line: 1143, type: !2653)
!4535 = !DILocation(line: 1143, column: 48, scope: !4533)
!4536 = !DILocation(line: 1145, column: 36, scope: !4533)
!4537 = !DILocation(line: 1145, column: 3, scope: !4533)
!4538 = !DILocation(line: 1146, column: 33, scope: !4533)
!4539 = !DILocation(line: 1146, column: 46, scope: !4533)
!4540 = !DILocation(line: 1146, column: 3, scope: !4533)
!4541 = !DILocation(line: 1147, column: 1, scope: !4533)
!4542 = distinct !DISubprogram(name: "bb_estimate_probability_locally", scope: !3, file: !3, line: 1045, type: !4140, scopeLine: 1046, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4543 = !DILocalVariable(name: "bb", arg: 1, scope: !4542, file: !3, line: 1045, type: !2653)
!4544 = !DILocation(line: 1045, column: 46, scope: !4542)
!4545 = !DILocalVariable(name: "last_insn", scope: !4542, file: !3, line: 1047, type: !2195)
!4546 = !DILocation(line: 1047, column: 7, scope: !4542)
!4547 = !DILocation(line: 1047, column: 19, scope: !4542)
!4548 = !DILocalVariable(name: "cond", scope: !4542, file: !3, line: 1048, type: !2195)
!4549 = !DILocation(line: 1048, column: 7, scope: !4542)
!4550 = !DILocation(line: 1050, column: 29, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1050, column: 7)
!4552 = !DILocation(line: 1050, column: 9, scope: !4551)
!4553 = !DILocation(line: 1050, column: 7, scope: !4542)
!4554 = !DILocation(line: 1051, column: 5, scope: !4551)
!4555 = !DILocation(line: 1052, column: 25, scope: !4542)
!4556 = !DILocation(line: 1052, column: 10, scope: !4542)
!4557 = !DILocation(line: 1052, column: 8, scope: !4542)
!4558 = !DILocation(line: 1053, column: 9, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1053, column: 7)
!4560 = !DILocation(line: 1053, column: 7, scope: !4542)
!4561 = !DILocation(line: 1054, column: 5, scope: !4559)
!4562 = !DILocation(line: 1059, column: 7, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4542, file: !3, line: 1059, column: 7)
!4564 = !DILocation(line: 1060, column: 7, scope: !4563)
!4565 = !DILocation(line: 1060, column: 12, scope: !4563)
!4566 = !DILocation(line: 1060, column: 35, scope: !4563)
!4567 = !DILocation(line: 1060, column: 38, scope: !4563)
!4568 = !DILocation(line: 1061, column: 4, scope: !4563)
!4569 = !DILocation(line: 1061, column: 8, scope: !4563)
!4570 = !DILocation(line: 1061, column: 31, scope: !4563)
!4571 = !DILocation(line: 1061, column: 34, scope: !4563)
!4572 = !DILocation(line: 1059, column: 7, scope: !4542)
!4573 = !DILocation(line: 1063, column: 11, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4575, file: !3, line: 1063, column: 11)
!4575 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1062, column: 5)
!4576 = !DILocation(line: 1063, column: 27, scope: !4574)
!4577 = !DILocation(line: 1063, column: 11, scope: !4575)
!4578 = !DILocation(line: 1064, column: 20, scope: !4574)
!4579 = !DILocation(line: 1064, column: 2, scope: !4574)
!4580 = !DILocation(line: 1065, column: 16, scope: !4581)
!4581 = distinct !DILexicalBlock(scope: !4574, file: !3, line: 1065, column: 16)
!4582 = !DILocation(line: 1065, column: 32, scope: !4581)
!4583 = !DILocation(line: 1065, column: 16, scope: !4574)
!4584 = !DILocation(line: 1066, column: 20, scope: !4581)
!4585 = !DILocation(line: 1066, column: 2, scope: !4581)
!4586 = !DILocation(line: 1067, column: 5, scope: !4575)
!4587 = !DILocation(line: 1074, column: 13, scope: !4563)
!4588 = !DILocation(line: 1074, column: 5, scope: !4563)
!4589 = !DILocation(line: 1078, column: 20, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1075, column: 7)
!4591 = !DILocation(line: 1079, column: 6, scope: !4590)
!4592 = !DILocation(line: 1079, column: 14, scope: !4590)
!4593 = !DILocation(line: 1079, column: 11, scope: !4590)
!4594 = !DILocation(line: 1078, column: 2, scope: !4590)
!4595 = !DILocation(line: 1080, column: 2, scope: !4590)
!4596 = !DILocation(line: 1087, column: 6, scope: !4597)
!4597 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 1087, column: 6)
!4598 = !DILocation(line: 1087, column: 6, scope: !4590)
!4599 = !DILocation(line: 1091, column: 11, scope: !4600)
!4600 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 1091, column: 11)
!4601 = !DILocation(line: 1091, column: 29, scope: !4600)
!4602 = !DILocation(line: 1091, column: 26, scope: !4600)
!4603 = !DILocation(line: 1092, column: 4, scope: !4600)
!4604 = !DILocation(line: 1092, column: 7, scope: !4600)
!4605 = !DILocation(line: 1092, column: 25, scope: !4600)
!4606 = !DILocation(line: 1092, column: 22, scope: !4600)
!4607 = !DILocation(line: 1091, column: 11, scope: !4597)
!4608 = !DILocation(line: 1095, column: 22, scope: !4600)
!4609 = !DILocation(line: 1095, column: 4, scope: !4600)
!4610 = !DILocation(line: 1096, column: 2, scope: !4590)
!4611 = !DILocation(line: 1103, column: 6, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 1103, column: 6)
!4613 = !DILocation(line: 1103, column: 6, scope: !4590)
!4614 = !DILocation(line: 1107, column: 11, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 1107, column: 11)
!4616 = !DILocation(line: 1107, column: 29, scope: !4615)
!4617 = !DILocation(line: 1107, column: 26, scope: !4615)
!4618 = !DILocation(line: 1108, column: 4, scope: !4615)
!4619 = !DILocation(line: 1108, column: 7, scope: !4615)
!4620 = !DILocation(line: 1108, column: 25, scope: !4615)
!4621 = !DILocation(line: 1108, column: 22, scope: !4615)
!4622 = !DILocation(line: 1107, column: 11, scope: !4612)
!4623 = !DILocation(line: 1111, column: 22, scope: !4615)
!4624 = !DILocation(line: 1111, column: 4, scope: !4615)
!4625 = !DILocation(line: 1112, column: 2, scope: !4590)
!4626 = !DILocation(line: 1115, column: 20, scope: !4590)
!4627 = !DILocation(line: 1115, column: 2, scope: !4590)
!4628 = !DILocation(line: 1116, column: 2, scope: !4590)
!4629 = !DILocation(line: 1119, column: 20, scope: !4590)
!4630 = !DILocation(line: 1119, column: 2, scope: !4590)
!4631 = !DILocation(line: 1120, column: 2, scope: !4590)
!4632 = !DILocation(line: 1124, column: 6, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 1124, column: 6)
!4634 = !DILocation(line: 1124, column: 24, scope: !4633)
!4635 = !DILocation(line: 1124, column: 21, scope: !4633)
!4636 = !DILocation(line: 1124, column: 35, scope: !4633)
!4637 = !DILocation(line: 1124, column: 38, scope: !4633)
!4638 = !DILocation(line: 1124, column: 56, scope: !4633)
!4639 = !DILocation(line: 1124, column: 53, scope: !4633)
!4640 = !DILocation(line: 1125, column: 6, scope: !4633)
!4641 = !DILocation(line: 1125, column: 9, scope: !4633)
!4642 = !DILocation(line: 1125, column: 27, scope: !4633)
!4643 = !DILocation(line: 1125, column: 24, scope: !4633)
!4644 = !DILocation(line: 1124, column: 6, scope: !4590)
!4645 = !DILocation(line: 1126, column: 22, scope: !4633)
!4646 = !DILocation(line: 1126, column: 4, scope: !4633)
!4647 = !DILocation(line: 1127, column: 2, scope: !4590)
!4648 = !DILocation(line: 1131, column: 6, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 1131, column: 6)
!4650 = !DILocation(line: 1131, column: 24, scope: !4649)
!4651 = !DILocation(line: 1131, column: 21, scope: !4649)
!4652 = !DILocation(line: 1131, column: 35, scope: !4649)
!4653 = !DILocation(line: 1131, column: 38, scope: !4649)
!4654 = !DILocation(line: 1131, column: 56, scope: !4649)
!4655 = !DILocation(line: 1131, column: 53, scope: !4649)
!4656 = !DILocation(line: 1132, column: 6, scope: !4649)
!4657 = !DILocation(line: 1132, column: 9, scope: !4649)
!4658 = !DILocation(line: 1132, column: 27, scope: !4649)
!4659 = !DILocation(line: 1132, column: 24, scope: !4649)
!4660 = !DILocation(line: 1131, column: 6, scope: !4590)
!4661 = !DILocation(line: 1133, column: 22, scope: !4649)
!4662 = !DILocation(line: 1133, column: 4, scope: !4649)
!4663 = !DILocation(line: 1134, column: 2, scope: !4590)
!4664 = !DILocation(line: 1137, column: 2, scope: !4590)
!4665 = !DILocation(line: 1139, column: 1, scope: !4542)
!4666 = distinct !DISubprogram(name: "combine_predictions_for_insn", scope: !3, file: !3, line: 650, type: !4667, scopeLine: 651, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{null, !2195, !2653}
!4669 = !DILocalVariable(name: "insn", arg: 1, scope: !4666, file: !3, line: 650, type: !2195)
!4670 = !DILocation(line: 650, column: 35, scope: !4666)
!4671 = !DILocalVariable(name: "bb", arg: 2, scope: !4666, file: !3, line: 650, type: !2653)
!4672 = !DILocation(line: 650, column: 53, scope: !4666)
!4673 = !DILocalVariable(name: "prob_note", scope: !4666, file: !3, line: 652, type: !2195)
!4674 = !DILocation(line: 652, column: 7, scope: !4666)
!4675 = !DILocalVariable(name: "pnote", scope: !4666, file: !3, line: 653, type: !4676)
!4676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!4677 = !DILocation(line: 653, column: 8, scope: !4666)
!4678 = !DILocalVariable(name: "note", scope: !4666, file: !3, line: 654, type: !2195)
!4679 = !DILocation(line: 654, column: 7, scope: !4666)
!4680 = !DILocalVariable(name: "best_probability", scope: !4666, file: !3, line: 655, type: !1954)
!4681 = !DILocation(line: 655, column: 7, scope: !4666)
!4682 = !DILocalVariable(name: "best_predictor", scope: !4666, file: !3, line: 656, type: !732)
!4683 = !DILocation(line: 656, column: 21, scope: !4666)
!4684 = !DILocalVariable(name: "combined_probability", scope: !4666, file: !3, line: 657, type: !1954)
!4685 = !DILocation(line: 657, column: 7, scope: !4666)
!4686 = !DILocalVariable(name: "d", scope: !4666, file: !3, line: 658, type: !1954)
!4687 = !DILocation(line: 658, column: 7, scope: !4666)
!4688 = !DILocalVariable(name: "first_match", scope: !4666, file: !3, line: 659, type: !2137)
!4689 = !DILocation(line: 659, column: 8, scope: !4666)
!4690 = !DILocalVariable(name: "found", scope: !4666, file: !3, line: 660, type: !2137)
!4691 = !DILocation(line: 660, column: 8, scope: !4666)
!4692 = !DILocation(line: 662, column: 28, scope: !4693)
!4693 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 662, column: 7)
!4694 = !DILocation(line: 662, column: 8, scope: !4693)
!4695 = !DILocation(line: 662, column: 7, scope: !4666)
!4696 = !DILocation(line: 664, column: 31, scope: !4697)
!4697 = distinct !DILexicalBlock(scope: !4693, file: !3, line: 663, column: 5)
!4698 = !DILocation(line: 664, column: 7, scope: !4697)
!4699 = !DILocation(line: 665, column: 7, scope: !4697)
!4700 = !DILocation(line: 668, column: 30, scope: !4666)
!4701 = !DILocation(line: 668, column: 15, scope: !4666)
!4702 = !DILocation(line: 668, column: 13, scope: !4666)
!4703 = !DILocation(line: 669, column: 12, scope: !4666)
!4704 = !DILocation(line: 669, column: 9, scope: !4666)
!4705 = !DILocation(line: 670, column: 7, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 670, column: 7)
!4707 = !DILocation(line: 670, column: 7, scope: !4666)
!4708 = !DILocation(line: 671, column: 14, scope: !4706)
!4709 = !DILocation(line: 671, column: 60, scope: !4706)
!4710 = !DILocation(line: 672, column: 7, scope: !4706)
!4711 = !DILocation(line: 672, column: 11, scope: !4706)
!4712 = !DILocation(line: 671, column: 5, scope: !4706)
!4713 = !DILocation(line: 676, column: 15, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 676, column: 3)
!4715 = !DILocation(line: 676, column: 13, scope: !4714)
!4716 = !DILocation(line: 676, column: 8, scope: !4714)
!4717 = !DILocation(line: 676, column: 33, scope: !4718)
!4718 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 676, column: 3)
!4719 = !DILocation(line: 676, column: 3, scope: !4714)
!4720 = !DILocation(line: 677, column: 9, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4718, file: !3, line: 677, column: 9)
!4722 = !DILocation(line: 677, column: 30, scope: !4721)
!4723 = !DILocation(line: 677, column: 9, scope: !4718)
!4724 = !DILocalVariable(name: "predictor", scope: !4725, file: !3, line: 679, type: !732)
!4725 = distinct !DILexicalBlock(scope: !4721, file: !3, line: 678, column: 7)
!4726 = !DILocation(line: 679, column: 20, scope: !4725)
!4727 = !DILocation(line: 680, column: 12, scope: !4725)
!4728 = !DILocation(line: 679, column: 33, scope: !4725)
!4729 = !DILocalVariable(name: "probability", scope: !4725, file: !3, line: 681, type: !1954)
!4730 = !DILocation(line: 681, column: 6, scope: !4725)
!4731 = !DILocation(line: 681, column: 20, scope: !4725)
!4732 = !DILocation(line: 683, column: 8, scope: !4725)
!4733 = !DILocation(line: 684, column: 6, scope: !4734)
!4734 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 684, column: 6)
!4735 = !DILocation(line: 684, column: 23, scope: !4734)
!4736 = !DILocation(line: 684, column: 21, scope: !4734)
!4737 = !DILocation(line: 684, column: 6, scope: !4725)
!4738 = !DILocation(line: 685, column: 23, scope: !4734)
!4739 = !DILocation(line: 685, column: 21, scope: !4734)
!4740 = !DILocation(line: 685, column: 53, scope: !4734)
!4741 = !DILocation(line: 685, column: 51, scope: !4734)
!4742 = !DILocation(line: 685, column: 4, scope: !4734)
!4743 = !DILocation(line: 687, column: 7, scope: !4725)
!4744 = !DILocation(line: 687, column: 30, scope: !4725)
!4745 = !DILocation(line: 687, column: 28, scope: !4725)
!4746 = !DILocation(line: 688, column: 29, scope: !4725)
!4747 = !DILocation(line: 688, column: 27, scope: !4725)
!4748 = !DILocation(line: 689, column: 29, scope: !4725)
!4749 = !DILocation(line: 689, column: 27, scope: !4725)
!4750 = !DILocation(line: 689, column: 7, scope: !4725)
!4751 = !DILocation(line: 688, column: 7, scope: !4725)
!4752 = !DILocation(line: 687, column: 4, scope: !4725)
!4753 = !DILocation(line: 692, column: 6, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 692, column: 6)
!4755 = !DILocation(line: 692, column: 8, scope: !4754)
!4756 = !DILocation(line: 692, column: 6, scope: !4725)
!4757 = !DILocation(line: 694, column: 25, scope: !4754)
!4758 = !DILocation(line: 694, column: 4, scope: !4754)
!4759 = !DILocation(line: 696, column: 38, scope: !4754)
!4760 = !DILocation(line: 696, column: 29, scope: !4754)
!4761 = !DILocation(line: 696, column: 62, scope: !4754)
!4762 = !DILocation(line: 696, column: 60, scope: !4754)
!4763 = !DILocation(line: 697, column: 7, scope: !4754)
!4764 = !DILocation(line: 697, column: 28, scope: !4754)
!4765 = !DILocation(line: 697, column: 26, scope: !4754)
!4766 = !DILocation(line: 697, column: 30, scope: !4754)
!4767 = !DILocation(line: 696, column: 27, scope: !4754)
!4768 = !DILocation(line: 696, column: 25, scope: !4754)
!4769 = !DILocation(line: 698, column: 7, scope: !4725)
!4770 = !DILocation(line: 677, column: 33, scope: !4721)
!4771 = !DILocation(line: 676, column: 46, scope: !4718)
!4772 = !DILocation(line: 676, column: 44, scope: !4718)
!4773 = !DILocation(line: 676, column: 3, scope: !4718)
!4774 = distinct !{!4774, !4719, !4775}
!4775 = !DILocation(line: 698, column: 7, scope: !4714)
!4776 = !DILocation(line: 704, column: 23, scope: !4777)
!4777 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 704, column: 7)
!4778 = !DILocation(line: 704, column: 7, scope: !4777)
!4779 = !DILocation(line: 704, column: 39, scope: !4777)
!4780 = !DILocation(line: 704, column: 45, scope: !4777)
!4781 = !DILocation(line: 704, column: 7, scope: !4666)
!4782 = !DILocation(line: 705, column: 17, scope: !4777)
!4783 = !DILocation(line: 705, column: 5, scope: !4777)
!4784 = !DILocation(line: 707, column: 8, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 707, column: 7)
!4786 = !DILocation(line: 707, column: 7, scope: !4666)
!4787 = !DILocation(line: 708, column: 22, scope: !4785)
!4788 = !DILocation(line: 709, column: 8, scope: !4785)
!4789 = !DILocation(line: 709, column: 30, scope: !4785)
!4790 = !DILocation(line: 708, column: 5, scope: !4785)
!4791 = !DILocation(line: 712, column: 24, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4785, file: !3, line: 711, column: 5)
!4793 = !DILocation(line: 712, column: 51, scope: !4792)
!4794 = !DILocation(line: 713, column: 10, scope: !4792)
!4795 = !DILocation(line: 713, column: 15, scope: !4792)
!4796 = !DILocation(line: 713, column: 14, scope: !4792)
!4797 = !DILocation(line: 712, column: 7, scope: !4792)
!4798 = !DILocation(line: 714, column: 24, scope: !4792)
!4799 = !DILocation(line: 714, column: 53, scope: !4792)
!4800 = !DILocation(line: 715, column: 10, scope: !4792)
!4801 = !DILocation(line: 715, column: 14, scope: !4792)
!4802 = !DILocation(line: 714, column: 7, scope: !4792)
!4803 = !DILocation(line: 718, column: 7, scope: !4804)
!4804 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 718, column: 7)
!4805 = !DILocation(line: 718, column: 7, scope: !4666)
!4806 = !DILocation(line: 719, column: 28, scope: !4804)
!4807 = !DILocation(line: 719, column: 26, scope: !4804)
!4808 = !DILocation(line: 719, column: 5, scope: !4804)
!4809 = !DILocation(line: 720, column: 20, scope: !4666)
!4810 = !DILocation(line: 720, column: 46, scope: !4666)
!4811 = !DILocation(line: 720, column: 68, scope: !4666)
!4812 = !DILocation(line: 720, column: 3, scope: !4666)
!4813 = !DILocation(line: 722, column: 3, scope: !4666)
!4814 = !DILocation(line: 722, column: 11, scope: !4666)
!4815 = !DILocation(line: 722, column: 10, scope: !4666)
!4816 = !DILocation(line: 724, column: 11, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 724, column: 11)
!4818 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 723, column: 5)
!4819 = !DILocation(line: 724, column: 34, scope: !4817)
!4820 = !DILocation(line: 724, column: 11, scope: !4818)
!4821 = !DILocalVariable(name: "predictor", scope: !4822, file: !3, line: 726, type: !732)
!4822 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 725, column: 2)
!4823 = !DILocation(line: 726, column: 22, scope: !4822)
!4824 = !DILocation(line: 727, column: 7, scope: !4822)
!4825 = !DILocation(line: 726, column: 35, scope: !4822)
!4826 = !DILocalVariable(name: "probability", scope: !4822, file: !3, line: 728, type: !1954)
!4827 = !DILocation(line: 728, column: 8, scope: !4822)
!4828 = !DILocation(line: 728, column: 22, scope: !4822)
!4829 = !DILocation(line: 730, column: 21, scope: !4822)
!4830 = !DILocation(line: 730, column: 32, scope: !4822)
!4831 = !DILocation(line: 730, column: 43, scope: !4822)
!4832 = !DILocation(line: 730, column: 56, scope: !4822)
!4833 = !DILocation(line: 731, column: 8, scope: !4822)
!4834 = !DILocation(line: 731, column: 20, scope: !4822)
!4835 = !DILocation(line: 731, column: 23, scope: !4822)
!4836 = !DILocation(line: 731, column: 41, scope: !4822)
!4837 = !DILocation(line: 731, column: 38, scope: !4822)
!4838 = !DILocation(line: 730, column: 4, scope: !4822)
!4839 = !DILocation(line: 732, column: 13, scope: !4822)
!4840 = !DILocation(line: 732, column: 5, scope: !4822)
!4841 = !DILocation(line: 732, column: 11, scope: !4822)
!4842 = !DILocation(line: 733, column: 2, scope: !4822)
!4843 = !DILocation(line: 735, column: 11, scope: !4817)
!4844 = !DILocation(line: 735, column: 8, scope: !4817)
!4845 = distinct !{!4845, !4813, !4846}
!4846 = !DILocation(line: 736, column: 5, scope: !4666)
!4847 = !DILocation(line: 738, column: 8, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4666, file: !3, line: 738, column: 7)
!4849 = !DILocation(line: 738, column: 7, scope: !4666)
!4850 = !DILocation(line: 740, column: 21, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 739, column: 5)
!4852 = !DILocation(line: 740, column: 40, scope: !4851)
!4853 = !DILocation(line: 740, column: 7, scope: !4851)
!4854 = !DILocation(line: 744, column: 27, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 744, column: 11)
!4856 = !DILocation(line: 744, column: 12, scope: !4855)
!4857 = !DILocation(line: 744, column: 11, scope: !4851)
!4858 = !DILocation(line: 746, column: 36, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4855, file: !3, line: 745, column: 2)
!4860 = !DILocation(line: 746, column: 4, scope: !4859)
!4861 = !DILocation(line: 746, column: 22, scope: !4859)
!4862 = !DILocation(line: 746, column: 34, scope: !4859)
!4863 = !DILocation(line: 748, column: 27, scope: !4859)
!4864 = !DILocation(line: 748, column: 25, scope: !4859)
!4865 = !DILocation(line: 747, column: 4, scope: !4859)
!4866 = !DILocation(line: 747, column: 24, scope: !4859)
!4867 = !DILocation(line: 748, column: 6, scope: !4859)
!4868 = !DILocation(line: 749, column: 2, scope: !4859)
!4869 = !DILocation(line: 750, column: 5, scope: !4851)
!4870 = !DILocation(line: 751, column: 28, scope: !4871)
!4871 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 751, column: 12)
!4872 = !DILocation(line: 751, column: 13, scope: !4871)
!4873 = !DILocation(line: 751, column: 12, scope: !4848)
!4874 = !DILocalVariable(name: "prob", scope: !4875, file: !3, line: 753, type: !1954)
!4875 = distinct !DILexicalBlock(scope: !4871, file: !3, line: 752, column: 5)
!4876 = !DILocation(line: 753, column: 11, scope: !4875)
!4877 = !DILocation(line: 753, column: 18, scope: !4875)
!4878 = !DILocation(line: 755, column: 39, scope: !4875)
!4879 = !DILocation(line: 755, column: 7, scope: !4875)
!4880 = !DILocation(line: 755, column: 25, scope: !4875)
!4881 = !DILocation(line: 755, column: 37, scope: !4875)
!4882 = !DILocation(line: 756, column: 60, scope: !4875)
!4883 = !DILocation(line: 756, column: 58, scope: !4875)
!4884 = !DILocation(line: 756, column: 7, scope: !4875)
!4885 = !DILocation(line: 756, column: 27, scope: !4875)
!4886 = !DILocation(line: 756, column: 39, scope: !4875)
!4887 = !DILocation(line: 757, column: 5, scope: !4875)
!4888 = !DILocation(line: 759, column: 23, scope: !4871)
!4889 = !DILocation(line: 759, column: 5, scope: !4871)
!4890 = !DILocation(line: 759, column: 28, scope: !4871)
!4891 = !DILocation(line: 759, column: 40, scope: !4871)
!4892 = !DILocation(line: 760, column: 1, scope: !4666)
!4893 = distinct !DISubprogram(name: "tree_estimate_probability", scope: !3, file: !3, line: 1692, type: !3487, scopeLine: 1693, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4894 = !DILocalVariable(name: "bb", scope: !4893, file: !3, line: 1694, type: !2653)
!4895 = !DILocation(line: 1694, column: 15, scope: !4893)
!4896 = !DILocation(line: 1696, column: 3, scope: !4893)
!4897 = !DILocation(line: 1697, column: 3, scope: !4893)
!4898 = !DILocation(line: 1700, column: 3, scope: !4893)
!4899 = !DILocation(line: 1701, column: 3, scope: !4893)
!4900 = !DILocation(line: 1703, column: 20, scope: !4893)
!4901 = !DILocation(line: 1703, column: 18, scope: !4893)
!4902 = !DILocation(line: 1704, column: 3, scope: !4893)
!4903 = !DILocation(line: 1705, column: 3, scope: !4893)
!4904 = !DILocation(line: 1707, column: 7, scope: !4905)
!4905 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 1707, column: 7)
!4906 = !DILocation(line: 1707, column: 26, scope: !4905)
!4907 = !DILocation(line: 1707, column: 7, scope: !4893)
!4908 = !DILocation(line: 1708, column: 5, scope: !4905)
!4909 = !DILocation(line: 1710, column: 3, scope: !4910)
!4910 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 1710, column: 3)
!4911 = !DILocation(line: 1710, column: 3, scope: !4912)
!4912 = distinct !DILexicalBlock(scope: !4910, file: !3, line: 1710, column: 3)
!4913 = !DILocation(line: 1711, column: 35, scope: !4912)
!4914 = !DILocation(line: 1711, column: 5, scope: !4912)
!4915 = distinct !{!4915, !4909, !4916}
!4916 = !DILocation(line: 1711, column: 37, scope: !4910)
!4917 = !DILocation(line: 1713, column: 3, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4893, file: !3, line: 1713, column: 3)
!4919 = !DILocation(line: 1713, column: 3, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 1713, column: 3)
!4921 = !DILocation(line: 1714, column: 33, scope: !4920)
!4922 = !DILocation(line: 1714, column: 5, scope: !4920)
!4923 = distinct !{!4923, !4917, !4924}
!4924 = !DILocation(line: 1714, column: 35, scope: !4918)
!4925 = !DILocation(line: 1719, column: 24, scope: !4893)
!4926 = !DILocation(line: 1719, column: 3, scope: !4893)
!4927 = !DILocation(line: 1720, column: 18, scope: !4893)
!4928 = !DILocation(line: 1722, column: 3, scope: !4893)
!4929 = !DILocation(line: 1723, column: 3, scope: !4893)
!4930 = !DILocation(line: 1724, column: 3, scope: !4893)
!4931 = !DILocation(line: 1725, column: 1, scope: !4893)
!4932 = distinct !DISubprogram(name: "tree_bb_level_predictions", scope: !3, file: !3, line: 1543, type: !3487, scopeLine: 1544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!4933 = !DILocalVariable(name: "bb", scope: !4932, file: !3, line: 1545, type: !2653)
!4934 = !DILocation(line: 1545, column: 15, scope: !4932)
!4935 = !DILocalVariable(name: "has_return_edges", scope: !4932, file: !3, line: 1546, type: !2137)
!4936 = !DILocation(line: 1546, column: 8, scope: !4932)
!4937 = !DILocalVariable(name: "e", scope: !4932, file: !3, line: 1547, type: !1961)
!4938 = !DILocation(line: 1547, column: 8, scope: !4932)
!4939 = !DILocalVariable(name: "ei", scope: !4932, file: !3, line: 1548, type: !4940)
!4940 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !142, line: 682, baseType: !4941)
!4941 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !142, line: 679, size: 128, elements: !4942)
!4942 = !{!4943, !4944}
!4943 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4941, file: !142, line: 680, baseType: !7, size: 32)
!4944 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4941, file: !142, line: 681, baseType: !4945, size: 64, offset: 64)
!4945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1971, size: 64)
!4946 = !DILocation(line: 1548, column: 17, scope: !4932)
!4947 = !DILocation(line: 1550, column: 3, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 1550, column: 3)
!4949 = !DILocation(line: 1550, column: 3, scope: !4950)
!4950 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 1550, column: 3)
!4951 = !DILocation(line: 1551, column: 11, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4950, file: !3, line: 1551, column: 9)
!4953 = !DILocation(line: 1551, column: 14, scope: !4952)
!4954 = !DILocation(line: 1551, column: 20, scope: !4952)
!4955 = !DILocation(line: 1551, column: 9, scope: !4950)
!4956 = !DILocation(line: 1553, column: 26, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4952, file: !3, line: 1552, column: 7)
!4958 = !DILocation(line: 1554, column: 2, scope: !4957)
!4959 = !DILocation(line: 1551, column: 59, scope: !4952)
!4960 = distinct !{!4960, !4947, !4961}
!4961 = !DILocation(line: 1555, column: 7, scope: !4948)
!4962 = !DILocation(line: 1557, column: 3, scope: !4932)
!4963 = !DILocation(line: 1559, column: 3, scope: !4964)
!4964 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 1559, column: 3)
!4965 = !DILocation(line: 1559, column: 3, scope: !4966)
!4966 = distinct !DILexicalBlock(scope: !4964, file: !3, line: 1559, column: 3)
!4967 = !DILocalVariable(name: "gsi", scope: !4968, file: !3, line: 1561, type: !4969)
!4968 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 1560, column: 5)
!4969 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !1125, line: 265, baseType: !4970)
!4970 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1125, line: 254, size: 192, elements: !4971)
!4971 = !{!4972, !4973, !4974}
!4972 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4970, file: !1125, line: 257, baseType: !2684, size: 64)
!4973 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4970, file: !1125, line: 263, baseType: !2759, size: 64, offset: 64)
!4974 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4970, file: !1125, line: 264, baseType: !2653, size: 64, offset: 128)
!4975 = !DILocation(line: 1561, column: 28, scope: !4968)
!4976 = !DILocation(line: 1563, column: 32, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4968, file: !3, line: 1563, column: 7)
!4978 = !DILocation(line: 1563, column: 18, scope: !4977)
!4979 = !DILocation(line: 1563, column: 12, scope: !4977)
!4980 = !DILocation(line: 1563, column: 38, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4977, file: !3, line: 1563, column: 7)
!4982 = !DILocation(line: 1563, column: 37, scope: !4981)
!4983 = !DILocation(line: 1563, column: 7, scope: !4977)
!4984 = !DILocalVariable(name: "stmt", scope: !4985, file: !3, line: 1565, type: !2689)
!4985 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 1564, column: 2)
!4986 = !DILocation(line: 1565, column: 11, scope: !4985)
!4987 = !DILocation(line: 1565, column: 18, scope: !4985)
!4988 = !DILocalVariable(name: "decl", scope: !4985, file: !3, line: 1566, type: !2021)
!4989 = !DILocation(line: 1566, column: 9, scope: !4985)
!4990 = !DILocation(line: 1568, column: 24, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4985, file: !3, line: 1568, column: 8)
!4992 = !DILocation(line: 1568, column: 8, scope: !4991)
!4993 = !DILocation(line: 1568, column: 8, scope: !4985)
!4994 = !DILocation(line: 1570, column: 32, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 1570, column: 12)
!4996 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 1569, column: 6)
!4997 = !DILocation(line: 1570, column: 13, scope: !4995)
!4998 = !DILocation(line: 1570, column: 38, scope: !4995)
!4999 = !DILocation(line: 1571, column: 12, scope: !4995)
!5000 = !DILocation(line: 1571, column: 15, scope: !4995)
!5001 = !DILocation(line: 1570, column: 12, scope: !4996)
!5002 = !DILocation(line: 1572, column: 29, scope: !4995)
!5003 = !DILocation(line: 1572, column: 3, scope: !4995)
!5004 = !DILocation(line: 1574, column: 35, scope: !4996)
!5005 = !DILocation(line: 1574, column: 15, scope: !4996)
!5006 = !DILocation(line: 1574, column: 13, scope: !4996)
!5007 = !DILocation(line: 1575, column: 12, scope: !5008)
!5008 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 1575, column: 12)
!5009 = !DILocation(line: 1576, column: 5, scope: !5008)
!5010 = !DILocation(line: 1577, column: 12, scope: !5008)
!5011 = !DILocation(line: 1576, column: 8, scope: !5008)
!5012 = !DILocation(line: 1575, column: 12, scope: !4996)
!5013 = !DILocation(line: 1578, column: 29, scope: !5008)
!5014 = !DILocation(line: 1578, column: 3, scope: !5008)
!5015 = !DILocation(line: 1580, column: 6, scope: !4996)
!5016 = !DILocation(line: 1581, column: 26, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 1581, column: 13)
!5018 = !DILocation(line: 1581, column: 13, scope: !5017)
!5019 = !DILocation(line: 1581, column: 32, scope: !5017)
!5020 = !DILocation(line: 1581, column: 13, scope: !4991)
!5021 = !DILocation(line: 1583, column: 34, scope: !5022)
!5022 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 1582, column: 6)
!5023 = !DILocation(line: 1583, column: 64, scope: !5022)
!5024 = !DILocation(line: 1583, column: 38, scope: !5022)
!5025 = !DILocation(line: 1584, column: 30, scope: !5022)
!5026 = !DILocation(line: 1584, column: 6, scope: !5022)
!5027 = !DILocation(line: 1583, column: 8, scope: !5022)
!5028 = !DILocation(line: 1587, column: 6, scope: !5022)
!5029 = !DILocation(line: 1588, column: 2, scope: !4985)
!5030 = !DILocation(line: 1563, column: 55, scope: !4981)
!5031 = !DILocation(line: 1563, column: 7, scope: !4981)
!5032 = distinct !{!5032, !4983, !5033}
!5033 = !DILocation(line: 1588, column: 2, scope: !4977)
!5034 = !DILocation(line: 1589, column: 5, scope: !4968)
!5035 = distinct !{!5035, !4963, !5036}
!5036 = !DILocation(line: 1589, column: 5, scope: !4964)
!5037 = !DILocation(line: 1590, column: 1, scope: !4932)
!5038 = distinct !DISubprogram(name: "number_of_loops", scope: !153, file: !153, line: 459, type: !3505, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5039 = !DILocation(line: 461, column: 8, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5038, file: !153, line: 461, column: 7)
!5041 = !DILocation(line: 461, column: 7, scope: !5038)
!5042 = !DILocation(line: 462, column: 5, scope: !5040)
!5043 = !DILocation(line: 464, column: 10, scope: !5038)
!5044 = !DILocation(line: 464, column: 3, scope: !5038)
!5045 = !DILocation(line: 465, column: 1, scope: !5038)
!5046 = distinct !DISubprogram(name: "predict_loops", scope: !3, file: !3, line: 913, type: !3487, scopeLine: 914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5047 = !DILocalVariable(name: "li", scope: !5046, file: !3, line: 915, type: !5048)
!5048 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !153, line: 515, baseType: !5049)
!5049 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !153, line: 508, size: 128, elements: !5050)
!5050 = !{!5051, !5052}
!5051 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !5049, file: !153, line: 511, baseType: !3471, size: 64)
!5052 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !5049, file: !153, line: 514, baseType: !7, size: 32, offset: 64)
!5053 = !DILocation(line: 915, column: 17, scope: !5046)
!5054 = !DILocalVariable(name: "loop", scope: !5046, file: !3, line: 916, type: !1989)
!5055 = !DILocation(line: 916, column: 16, scope: !5046)
!5056 = !DILocation(line: 920, column: 3, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5046, file: !3, line: 920, column: 3)
!5058 = !DILocation(line: 920, column: 3, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 920, column: 3)
!5060 = !DILocalVariable(name: "bb", scope: !5061, file: !3, line: 922, type: !2653)
!5061 = distinct !DILexicalBlock(scope: !5059, file: !3, line: 921, column: 5)
!5062 = !DILocation(line: 922, column: 19, scope: !5061)
!5063 = !DILocalVariable(name: "bbs", scope: !5061, file: !3, line: 922, type: !5064)
!5064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2653, size: 64)
!5065 = !DILocation(line: 922, column: 24, scope: !5061)
!5066 = !DILocalVariable(name: "j", scope: !5061, file: !3, line: 923, type: !7)
!5067 = !DILocation(line: 923, column: 16, scope: !5061)
!5068 = !DILocalVariable(name: "n_exits", scope: !5061, file: !3, line: 923, type: !7)
!5069 = !DILocation(line: 923, column: 19, scope: !5061)
!5070 = !DILocalVariable(name: "exits", scope: !5061, file: !3, line: 924, type: !5071)
!5071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5072, size: 64)
!5072 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !142, line: 152, baseType: !5073)
!5073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !142, line: 152, size: 128, elements: !5074)
!5074 = !{!5075}
!5075 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5073, file: !142, line: 152, baseType: !1976, size: 128)
!5076 = !DILocation(line: 924, column: 25, scope: !5061)
!5077 = !DILocalVariable(name: "niter_desc", scope: !5061, file: !3, line: 925, type: !5078)
!5078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1957, line: 657, size: 640, elements: !5079)
!5079 = !{!5080, !5081, !5082, !5083, !5084, !5091, !5092}
!5080 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !5078, file: !1957, line: 659, baseType: !2021, size: 64)
!5081 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !5078, file: !1957, line: 663, baseType: !2021, size: 64, offset: 64)
!5082 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !5078, file: !1957, line: 667, baseType: !2021, size: 64, offset: 128)
!5083 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !5078, file: !1957, line: 671, baseType: !2069, size: 128, offset: 192)
!5084 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !5078, file: !1957, line: 679, baseType: !5085, size: 192, offset: 320)
!5085 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1957, line: 651, baseType: !5086)
!5086 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1957, line: 644, size: 192, elements: !5087)
!5087 = !{!5088, !5089, !5090}
!5088 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !5086, file: !1957, line: 647, baseType: !2021, size: 64)
!5089 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !5086, file: !1957, line: 647, baseType: !2021, size: 64, offset: 64)
!5090 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !5086, file: !1957, line: 650, baseType: !2137, size: 8, offset: 128)
!5091 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !5078, file: !1957, line: 680, baseType: !2021, size: 64, offset: 512)
!5092 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !5078, file: !1957, line: 681, baseType: !203, size: 32, offset: 576)
!5093 = !DILocation(line: 925, column: 30, scope: !5061)
!5094 = !DILocalVariable(name: "ex", scope: !5061, file: !3, line: 926, type: !1961)
!5095 = !DILocation(line: 926, column: 12, scope: !5061)
!5096 = !DILocation(line: 928, column: 36, scope: !5061)
!5097 = !DILocation(line: 928, column: 15, scope: !5061)
!5098 = !DILocation(line: 928, column: 13, scope: !5061)
!5099 = !DILocation(line: 929, column: 17, scope: !5061)
!5100 = !DILocation(line: 929, column: 15, scope: !5061)
!5101 = !DILocation(line: 931, column: 14, scope: !5102)
!5102 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 931, column: 7)
!5103 = !DILocation(line: 931, column: 12, scope: !5102)
!5104 = !DILocation(line: 931, column: 19, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5102, file: !3, line: 931, column: 7)
!5106 = !DILocation(line: 931, column: 7, scope: !5102)
!5107 = !DILocalVariable(name: "niter", scope: !5108, file: !3, line: 933, type: !2021)
!5108 = distinct !DILexicalBlock(scope: !5105, file: !3, line: 932, column: 2)
!5109 = !DILocation(line: 933, column: 9, scope: !5108)
!5110 = !DILocalVariable(name: "nitercst", scope: !5108, file: !3, line: 934, type: !2076)
!5111 = !DILocation(line: 934, column: 18, scope: !5108)
!5112 = !DILocalVariable(name: "max", scope: !5108, file: !3, line: 935, type: !1954)
!5113 = !DILocation(line: 935, column: 8, scope: !5108)
!5114 = !DILocation(line: 935, column: 14, scope: !5108)
!5115 = !DILocalVariable(name: "probability", scope: !5108, file: !3, line: 936, type: !1954)
!5116 = !DILocation(line: 936, column: 8, scope: !5108)
!5117 = !DILocalVariable(name: "predictor", scope: !5108, file: !3, line: 937, type: !732)
!5118 = !DILocation(line: 937, column: 22, scope: !5108)
!5119 = !DILocation(line: 939, column: 35, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 939, column: 8)
!5121 = !DILocation(line: 939, column: 41, scope: !5120)
!5122 = !DILocation(line: 939, column: 8, scope: !5120)
!5123 = !DILocation(line: 939, column: 8, scope: !5108)
!5124 = !DILocation(line: 940, column: 25, scope: !5120)
!5125 = !DILocation(line: 940, column: 12, scope: !5120)
!5126 = !DILocation(line: 940, column: 6, scope: !5120)
!5127 = !DILocation(line: 941, column: 9, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 941, column: 8)
!5129 = !DILocation(line: 941, column: 15, scope: !5128)
!5130 = !DILocation(line: 941, column: 18, scope: !5128)
!5131 = !DILocation(line: 941, column: 47, scope: !5128)
!5132 = !DILocation(line: 941, column: 8, scope: !5108)
!5133 = !DILocation(line: 942, column: 34, scope: !5128)
!5134 = !DILocation(line: 942, column: 40, scope: !5128)
!5135 = !DILocation(line: 942, column: 14, scope: !5128)
!5136 = !DILocation(line: 942, column: 12, scope: !5128)
!5137 = !DILocation(line: 942, column: 6, scope: !5128)
!5138 = !DILocation(line: 944, column: 8, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 944, column: 8)
!5140 = !DILocation(line: 944, column: 26, scope: !5139)
!5141 = !DILocation(line: 944, column: 8, scope: !5108)
!5142 = !DILocation(line: 946, column: 27, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 946, column: 12)
!5144 = distinct !DILexicalBlock(scope: !5139, file: !3, line: 945, column: 6)
!5145 = !DILocation(line: 946, column: 12, scope: !5143)
!5146 = !DILocation(line: 947, column: 5, scope: !5143)
!5147 = !DILocation(line: 947, column: 26, scope: !5143)
!5148 = !DILocation(line: 947, column: 33, scope: !5143)
!5149 = !DILocation(line: 947, column: 36, scope: !5143)
!5150 = !DILocation(line: 947, column: 8, scope: !5143)
!5151 = !DILocation(line: 947, column: 40, scope: !5143)
!5152 = !DILocation(line: 946, column: 12, scope: !5144)
!5153 = !DILocation(line: 948, column: 28, scope: !5143)
!5154 = !DILocation(line: 948, column: 14, scope: !5143)
!5155 = !DILocation(line: 948, column: 38, scope: !5143)
!5156 = !DILocation(line: 948, column: 12, scope: !5143)
!5157 = !DILocation(line: 948, column: 3, scope: !5143)
!5158 = !DILocation(line: 950, column: 14, scope: !5143)
!5159 = !DILocation(line: 950, column: 12, scope: !5143)
!5160 = !DILocation(line: 951, column: 18, scope: !5144)
!5161 = !DILocation(line: 952, column: 6, scope: !5144)
!5162 = !DILocation(line: 956, column: 13, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5139, file: !3, line: 956, column: 13)
!5164 = !DILocation(line: 956, column: 21, scope: !5163)
!5165 = !DILocation(line: 956, column: 13, scope: !5139)
!5166 = !DILocation(line: 958, column: 50, scope: !5167)
!5167 = distinct !DILexicalBlock(scope: !5163, file: !3, line: 957, column: 6)
!5168 = !DILocation(line: 958, column: 19, scope: !5167)
!5169 = !DILocation(line: 958, column: 17, scope: !5167)
!5170 = !DILocation(line: 959, column: 12, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 959, column: 12)
!5172 = !DILocation(line: 959, column: 21, scope: !5171)
!5173 = !DILocation(line: 959, column: 12, scope: !5167)
!5174 = !DILocation(line: 960, column: 3, scope: !5171)
!5175 = !DILocation(line: 961, column: 12, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 961, column: 12)
!5177 = !DILocation(line: 961, column: 23, scope: !5176)
!5178 = !DILocation(line: 961, column: 21, scope: !5176)
!5179 = !DILocation(line: 961, column: 12, scope: !5167)
!5180 = !DILocation(line: 962, column: 14, scope: !5176)
!5181 = !DILocation(line: 962, column: 12, scope: !5176)
!5182 = !DILocation(line: 962, column: 3, scope: !5176)
!5183 = !DILocation(line: 964, column: 18, scope: !5167)
!5184 = !DILocation(line: 965, column: 6, scope: !5167)
!5185 = !DILocation(line: 967, column: 6, scope: !5163)
!5186 = !DILocation(line: 969, column: 39, scope: !5108)
!5187 = !DILocation(line: 969, column: 48, scope: !5108)
!5188 = !DILocation(line: 969, column: 37, scope: !5108)
!5189 = !DILocation(line: 969, column: 55, scope: !5108)
!5190 = !DILocation(line: 969, column: 53, scope: !5108)
!5191 = !DILocation(line: 969, column: 18, scope: !5108)
!5192 = !DILocation(line: 969, column: 16, scope: !5108)
!5193 = !DILocation(line: 970, column: 18, scope: !5108)
!5194 = !DILocation(line: 970, column: 22, scope: !5108)
!5195 = !DILocation(line: 970, column: 33, scope: !5108)
!5196 = !DILocation(line: 970, column: 4, scope: !5108)
!5197 = !DILocation(line: 971, column: 2, scope: !5108)
!5198 = !DILocation(line: 931, column: 54, scope: !5105)
!5199 = !DILocation(line: 931, column: 7, scope: !5105)
!5200 = distinct !{!5200, !5106, !5201}
!5201 = !DILocation(line: 971, column: 2, scope: !5102)
!5202 = !DILocation(line: 972, column: 7, scope: !5061)
!5203 = !DILocation(line: 974, column: 28, scope: !5061)
!5204 = !DILocation(line: 974, column: 13, scope: !5061)
!5205 = !DILocation(line: 974, column: 11, scope: !5061)
!5206 = !DILocation(line: 976, column: 14, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 976, column: 7)
!5208 = !DILocation(line: 976, column: 12, scope: !5207)
!5209 = !DILocation(line: 976, column: 19, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 976, column: 7)
!5211 = !DILocation(line: 976, column: 23, scope: !5210)
!5212 = !DILocation(line: 976, column: 29, scope: !5210)
!5213 = !DILocation(line: 976, column: 21, scope: !5210)
!5214 = !DILocation(line: 976, column: 7, scope: !5207)
!5215 = !DILocalVariable(name: "header_found", scope: !5216, file: !3, line: 978, type: !1954)
!5216 = distinct !DILexicalBlock(scope: !5210, file: !3, line: 977, column: 2)
!5217 = !DILocation(line: 978, column: 8, scope: !5216)
!5218 = !DILocalVariable(name: "e", scope: !5216, file: !3, line: 979, type: !1961)
!5219 = !DILocation(line: 979, column: 9, scope: !5216)
!5220 = !DILocalVariable(name: "ei", scope: !5216, file: !3, line: 980, type: !4940)
!5221 = !DILocation(line: 980, column: 18, scope: !5216)
!5222 = !DILocation(line: 982, column: 9, scope: !5216)
!5223 = !DILocation(line: 982, column: 13, scope: !5216)
!5224 = !DILocation(line: 982, column: 7, scope: !5216)
!5225 = !DILocation(line: 988, column: 24, scope: !5226)
!5226 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 988, column: 8)
!5227 = !DILocation(line: 988, column: 8, scope: !5226)
!5228 = !DILocation(line: 988, column: 8, scope: !5216)
!5229 = !DILocation(line: 989, column: 6, scope: !5226)
!5230 = !DILocation(line: 993, column: 8, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 993, column: 8)
!5232 = !DILocation(line: 993, column: 14, scope: !5231)
!5233 = !DILocation(line: 993, column: 20, scope: !5231)
!5234 = !DILocation(line: 993, column: 11, scope: !5231)
!5235 = !DILocation(line: 993, column: 8, scope: !5216)
!5236 = !DILocation(line: 995, column: 23, scope: !5237)
!5237 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 994, column: 6)
!5238 = !DILocation(line: 995, column: 29, scope: !5237)
!5239 = !DILocation(line: 995, column: 36, scope: !5237)
!5240 = !DILocation(line: 995, column: 42, scope: !5237)
!5241 = !DILocation(line: 995, column: 12, scope: !5237)
!5242 = !DILocation(line: 995, column: 10, scope: !5237)
!5243 = !DILocation(line: 996, column: 12, scope: !5244)
!5244 = distinct !DILexicalBlock(scope: !5237, file: !3, line: 996, column: 12)
!5245 = !DILocation(line: 996, column: 12, scope: !5237)
!5246 = !DILocation(line: 998, column: 18, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5244, file: !3, line: 997, column: 3)
!5248 = !DILocation(line: 999, column: 23, scope: !5247)
!5249 = !DILocation(line: 999, column: 5, scope: !5247)
!5250 = !DILocation(line: 1000, column: 3, scope: !5247)
!5251 = !DILocation(line: 1001, column: 6, scope: !5237)
!5252 = !DILocation(line: 1005, column: 9, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 1005, column: 8)
!5254 = !DILocation(line: 1008, column: 8, scope: !5253)
!5255 = !DILocation(line: 1008, column: 28, scope: !5253)
!5256 = !DILocation(line: 1008, column: 12, scope: !5253)
!5257 = !DILocation(line: 1009, column: 8, scope: !5253)
!5258 = !DILocation(line: 1009, column: 28, scope: !5253)
!5259 = !DILocation(line: 1009, column: 12, scope: !5253)
!5260 = !DILocation(line: 1005, column: 8, scope: !5216)
!5261 = !DILocalVariable(name: "probability", scope: !5262, file: !3, line: 1025, type: !1954)
!5262 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 1010, column: 6)
!5263 = !DILocation(line: 1025, column: 12, scope: !5262)
!5264 = !DILocation(line: 1026, column: 61, scope: !5262)
!5265 = !DILocation(line: 1026, column: 21, scope: !5262)
!5266 = !DILocation(line: 1027, column: 8, scope: !5262)
!5267 = !DILocation(line: 1027, column: 6, scope: !5262)
!5268 = !DILocation(line: 1028, column: 12, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1028, column: 12)
!5270 = !DILocation(line: 1028, column: 24, scope: !5269)
!5271 = !DILocation(line: 1028, column: 12, scope: !5262)
!5272 = !DILocation(line: 1029, column: 15, scope: !5269)
!5273 = !DILocation(line: 1029, column: 3, scope: !5269)
!5274 = !DILocation(line: 1030, column: 8, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1030, column: 8)
!5276 = !DILocation(line: 1030, column: 8, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 1030, column: 8)
!5278 = !DILocation(line: 1031, column: 7, scope: !5279)
!5279 = distinct !DILexicalBlock(scope: !5277, file: !3, line: 1031, column: 7)
!5280 = !DILocation(line: 1031, column: 10, scope: !5279)
!5281 = !DILocation(line: 1031, column: 16, scope: !5279)
!5282 = !DILocation(line: 1031, column: 22, scope: !5279)
!5283 = !DILocation(line: 1032, column: 7, scope: !5279)
!5284 = !DILocation(line: 1032, column: 34, scope: !5279)
!5285 = !DILocation(line: 1032, column: 40, scope: !5279)
!5286 = !DILocation(line: 1032, column: 43, scope: !5279)
!5287 = !DILocation(line: 1032, column: 11, scope: !5279)
!5288 = !DILocation(line: 1031, column: 7, scope: !5277)
!5289 = !DILocation(line: 1033, column: 19, scope: !5279)
!5290 = !DILocation(line: 1033, column: 38, scope: !5279)
!5291 = !DILocation(line: 1033, column: 5, scope: !5279)
!5292 = !DILocation(line: 1032, column: 47, scope: !5279)
!5293 = distinct !{!5293, !5274, !5294}
!5294 = !DILocation(line: 1033, column: 49, scope: !5275)
!5295 = !DILocation(line: 1034, column: 6, scope: !5262)
!5296 = !DILocation(line: 1035, column: 2, scope: !5216)
!5297 = !DILocation(line: 976, column: 41, scope: !5210)
!5298 = !DILocation(line: 976, column: 7, scope: !5210)
!5299 = distinct !{!5299, !5214, !5300}
!5300 = !DILocation(line: 1035, column: 2, scope: !5207)
!5301 = !DILocation(line: 1038, column: 13, scope: !5061)
!5302 = !DILocation(line: 1038, column: 7, scope: !5061)
!5303 = !DILocation(line: 1039, column: 5, scope: !5061)
!5304 = distinct !{!5304, !5056, !5305}
!5305 = !DILocation(line: 1039, column: 5, scope: !5057)
!5306 = !DILocation(line: 1040, column: 1, scope: !5046)
!5307 = distinct !DISubprogram(name: "tree_estimate_probability_bb", scope: !3, file: !3, line: 1609, type: !4140, scopeLine: 1610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5308 = !DILocalVariable(name: "bb", arg: 1, scope: !5307, file: !3, line: 1609, type: !2653)
!5309 = !DILocation(line: 1609, column: 43, scope: !5307)
!5310 = !DILocalVariable(name: "e", scope: !5307, file: !3, line: 1611, type: !1961)
!5311 = !DILocation(line: 1611, column: 8, scope: !5307)
!5312 = !DILocalVariable(name: "ei", scope: !5307, file: !3, line: 1612, type: !4940)
!5313 = !DILocation(line: 1612, column: 17, scope: !5307)
!5314 = !DILocalVariable(name: "last", scope: !5307, file: !3, line: 1613, type: !2689)
!5315 = !DILocation(line: 1613, column: 10, scope: !5307)
!5316 = !DILocation(line: 1615, column: 3, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 1615, column: 3)
!5318 = !DILocation(line: 1615, column: 3, scope: !5319)
!5319 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 1615, column: 3)
!5320 = !DILocation(line: 1632, column: 11, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1632, column: 11)
!5322 = distinct !DILexicalBlock(scope: !5319, file: !3, line: 1616, column: 5)
!5323 = !DILocation(line: 1632, column: 14, scope: !5321)
!5324 = !DILocation(line: 1632, column: 22, scope: !5321)
!5325 = !DILocation(line: 1632, column: 26, scope: !5321)
!5326 = !DILocation(line: 1632, column: 19, scope: !5321)
!5327 = !DILocation(line: 1633, column: 4, scope: !5321)
!5328 = !DILocation(line: 1633, column: 7, scope: !5321)
!5329 = !DILocation(line: 1633, column: 10, scope: !5321)
!5330 = !DILocation(line: 1633, column: 18, scope: !5321)
!5331 = !DILocation(line: 1633, column: 15, scope: !5321)
!5332 = !DILocation(line: 1634, column: 4, scope: !5321)
!5333 = !DILocation(line: 1634, column: 22, scope: !5321)
!5334 = !DILocation(line: 1634, column: 25, scope: !5321)
!5335 = !DILocation(line: 1634, column: 7, scope: !5321)
!5336 = !DILocation(line: 1635, column: 4, scope: !5321)
!5337 = !DILocation(line: 1635, column: 25, scope: !5321)
!5338 = !DILocation(line: 1635, column: 28, scope: !5321)
!5339 = !DILocation(line: 1635, column: 7, scope: !5321)
!5340 = !DILocation(line: 1635, column: 35, scope: !5321)
!5341 = !DILocation(line: 1635, column: 43, scope: !5321)
!5342 = !DILocation(line: 1635, column: 40, scope: !5321)
!5343 = !DILocation(line: 1636, column: 4, scope: !5321)
!5344 = !DILocation(line: 1636, column: 26, scope: !5321)
!5345 = !DILocation(line: 1636, column: 29, scope: !5321)
!5346 = !DILocation(line: 1636, column: 15, scope: !5321)
!5347 = !DILocation(line: 1636, column: 13, scope: !5321)
!5348 = !DILocation(line: 1636, column: 36, scope: !5321)
!5349 = !DILocation(line: 1637, column: 4, scope: !5321)
!5350 = !DILocation(line: 1637, column: 20, scope: !5321)
!5351 = !DILocation(line: 1637, column: 7, scope: !5321)
!5352 = !DILocation(line: 1637, column: 26, scope: !5321)
!5353 = !DILocation(line: 1632, column: 11, scope: !5322)
!5354 = !DILocalVariable(name: "e1", scope: !5355, file: !3, line: 1639, type: !1961)
!5355 = distinct !DILexicalBlock(scope: !5321, file: !3, line: 1638, column: 2)
!5356 = !DILocation(line: 1639, column: 9, scope: !5355)
!5357 = !DILocalVariable(name: "ei1", scope: !5355, file: !3, line: 1640, type: !4940)
!5358 = !DILocation(line: 1640, column: 18, scope: !5355)
!5359 = !DILocation(line: 1642, column: 23, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !5355, file: !3, line: 1642, column: 8)
!5361 = !DILocation(line: 1642, column: 8, scope: !5360)
!5362 = !DILocation(line: 1642, column: 8, scope: !5355)
!5363 = !DILocation(line: 1644, column: 8, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5365, file: !3, line: 1644, column: 8)
!5365 = distinct !DILexicalBlock(scope: !5360, file: !3, line: 1643, column: 6)
!5366 = !DILocation(line: 1644, column: 8, scope: !5367)
!5367 = distinct !DILexicalBlock(scope: !5364, file: !3, line: 1644, column: 8)
!5368 = !DILocation(line: 1645, column: 24, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5367, file: !3, line: 1645, column: 7)
!5370 = !DILocation(line: 1645, column: 28, scope: !5369)
!5371 = !DILocation(line: 1645, column: 8, scope: !5369)
!5372 = !DILocation(line: 1646, column: 7, scope: !5369)
!5373 = !DILocation(line: 1646, column: 27, scope: !5369)
!5374 = !DILocation(line: 1646, column: 31, scope: !5369)
!5375 = !DILocation(line: 1646, column: 11, scope: !5369)
!5376 = !DILocation(line: 1647, column: 7, scope: !5369)
!5377 = !DILocation(line: 1647, column: 27, scope: !5369)
!5378 = !DILocation(line: 1647, column: 31, scope: !5369)
!5379 = !DILocation(line: 1647, column: 11, scope: !5369)
!5380 = !DILocation(line: 1645, column: 7, scope: !5367)
!5381 = !DILocation(line: 1648, column: 23, scope: !5369)
!5382 = !DILocation(line: 1648, column: 5, scope: !5369)
!5383 = !DILocation(line: 1647, column: 56, scope: !5369)
!5384 = distinct !{!5384, !5363, !5385}
!5385 = !DILocation(line: 1648, column: 60, scope: !5364)
!5386 = !DILocation(line: 1649, column: 6, scope: !5365)
!5387 = !DILocation(line: 1651, column: 27, scope: !5388)
!5388 = distinct !DILexicalBlock(scope: !5360, file: !3, line: 1651, column: 10)
!5389 = !DILocation(line: 1651, column: 30, scope: !5388)
!5390 = !DILocation(line: 1651, column: 11, scope: !5388)
!5391 = !DILocation(line: 1652, column: 3, scope: !5388)
!5392 = !DILocation(line: 1652, column: 23, scope: !5388)
!5393 = !DILocation(line: 1652, column: 26, scope: !5388)
!5394 = !DILocation(line: 1652, column: 7, scope: !5388)
!5395 = !DILocation(line: 1653, column: 3, scope: !5388)
!5396 = !DILocation(line: 1653, column: 23, scope: !5388)
!5397 = !DILocation(line: 1653, column: 26, scope: !5388)
!5398 = !DILocation(line: 1653, column: 7, scope: !5388)
!5399 = !DILocation(line: 1651, column: 10, scope: !5360)
!5400 = !DILocation(line: 1654, column: 26, scope: !5388)
!5401 = !DILocation(line: 1654, column: 8, scope: !5388)
!5402 = !DILocation(line: 1655, column: 2, scope: !5355)
!5403 = !DILocation(line: 1659, column: 11, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1659, column: 11)
!5405 = !DILocation(line: 1659, column: 14, scope: !5404)
!5406 = !DILocation(line: 1659, column: 22, scope: !5404)
!5407 = !DILocation(line: 1659, column: 19, scope: !5404)
!5408 = !DILocation(line: 1659, column: 37, scope: !5404)
!5409 = !DILocation(line: 1659, column: 40, scope: !5404)
!5410 = !DILocation(line: 1659, column: 43, scope: !5404)
!5411 = !DILocation(line: 1659, column: 51, scope: !5404)
!5412 = !DILocation(line: 1659, column: 48, scope: !5404)
!5413 = !DILocation(line: 1660, column: 4, scope: !5404)
!5414 = !DILocation(line: 1660, column: 39, scope: !5404)
!5415 = !DILocation(line: 1660, column: 42, scope: !5404)
!5416 = !DILocation(line: 1660, column: 48, scope: !5404)
!5417 = !DILocation(line: 1660, column: 51, scope: !5404)
!5418 = !DILocation(line: 1660, column: 7, scope: !5404)
!5419 = !DILocation(line: 1661, column: 4, scope: !5404)
!5420 = !DILocation(line: 1661, column: 45, scope: !5404)
!5421 = !DILocation(line: 1661, column: 48, scope: !5404)
!5422 = !DILocation(line: 1661, column: 53, scope: !5404)
!5423 = !DILocation(line: 1661, column: 56, scope: !5404)
!5424 = !DILocation(line: 1661, column: 8, scope: !5404)
!5425 = !DILocation(line: 1659, column: 11, scope: !5322)
!5426 = !DILocalVariable(name: "bi", scope: !5427, file: !3, line: 1663, type: !4969)
!5427 = distinct !DILexicalBlock(scope: !5404, file: !3, line: 1662, column: 2)
!5428 = !DILocation(line: 1663, column: 25, scope: !5427)
!5429 = !DILocation(line: 1669, column: 28, scope: !5430)
!5430 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 1669, column: 4)
!5431 = !DILocation(line: 1669, column: 31, scope: !5430)
!5432 = !DILocation(line: 1669, column: 14, scope: !5430)
!5433 = !DILocation(line: 1669, column: 9, scope: !5430)
!5434 = !DILocation(line: 1669, column: 39, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 1669, column: 4)
!5436 = !DILocation(line: 1669, column: 38, scope: !5435)
!5437 = !DILocation(line: 1669, column: 4, scope: !5430)
!5438 = !DILocalVariable(name: "stmt", scope: !5439, file: !3, line: 1672, type: !2689)
!5439 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 1671, column: 6)
!5440 = !DILocation(line: 1672, column: 15, scope: !5439)
!5441 = !DILocation(line: 1672, column: 22, scope: !5439)
!5442 = !DILocation(line: 1673, column: 28, scope: !5443)
!5443 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 1673, column: 12)
!5444 = !DILocation(line: 1673, column: 12, scope: !5443)
!5445 = !DILocation(line: 1676, column: 5, scope: !5443)
!5446 = !DILocation(line: 1676, column: 33, scope: !5443)
!5447 = !DILocation(line: 1676, column: 8, scope: !5443)
!5448 = !DILocation(line: 1673, column: 12, scope: !5439)
!5449 = !DILocation(line: 1678, column: 23, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1677, column: 3)
!5451 = !DILocation(line: 1678, column: 5, scope: !5450)
!5452 = !DILocation(line: 1679, column: 5, scope: !5450)
!5453 = !DILocation(line: 1681, column: 6, scope: !5439)
!5454 = !DILocation(line: 1670, column: 9, scope: !5435)
!5455 = !DILocation(line: 1669, column: 4, scope: !5435)
!5456 = distinct !{!5456, !5437, !5457}
!5457 = !DILocation(line: 1681, column: 6, scope: !5430)
!5458 = !DILocation(line: 1682, column: 2, scope: !5427)
!5459 = !DILocation(line: 1683, column: 5, scope: !5322)
!5460 = distinct !{!5460, !5316, !5461}
!5461 = !DILocation(line: 1683, column: 5, scope: !5317)
!5462 = !DILocation(line: 1684, column: 27, scope: !5307)
!5463 = !DILocation(line: 1684, column: 3, scope: !5307)
!5464 = !DILocation(line: 1685, column: 1, scope: !5307)
!5465 = distinct !DISubprogram(name: "combine_predictions_for_bb", scope: !3, file: !3, line: 766, type: !4140, scopeLine: 767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5466 = !DILocalVariable(name: "bb", arg: 1, scope: !5465, file: !3, line: 766, type: !2653)
!5467 = !DILocation(line: 766, column: 41, scope: !5465)
!5468 = !DILocalVariable(name: "best_probability", scope: !5465, file: !3, line: 768, type: !1954)
!5469 = !DILocation(line: 768, column: 7, scope: !5465)
!5470 = !DILocalVariable(name: "best_predictor", scope: !5465, file: !3, line: 769, type: !732)
!5471 = !DILocation(line: 769, column: 21, scope: !5465)
!5472 = !DILocalVariable(name: "combined_probability", scope: !5465, file: !3, line: 770, type: !1954)
!5473 = !DILocation(line: 770, column: 7, scope: !5465)
!5474 = !DILocalVariable(name: "d", scope: !5465, file: !3, line: 771, type: !1954)
!5475 = !DILocation(line: 771, column: 7, scope: !5465)
!5476 = !DILocalVariable(name: "first_match", scope: !5465, file: !3, line: 772, type: !2137)
!5477 = !DILocation(line: 772, column: 8, scope: !5465)
!5478 = !DILocalVariable(name: "found", scope: !5465, file: !3, line: 773, type: !2137)
!5479 = !DILocation(line: 773, column: 8, scope: !5465)
!5480 = !DILocalVariable(name: "pred", scope: !5465, file: !3, line: 774, type: !1955)
!5481 = !DILocation(line: 774, column: 27, scope: !5465)
!5482 = !DILocalVariable(name: "nedges", scope: !5465, file: !3, line: 775, type: !1954)
!5483 = !DILocation(line: 775, column: 7, scope: !5465)
!5484 = !DILocalVariable(name: "e", scope: !5465, file: !3, line: 776, type: !1961)
!5485 = !DILocation(line: 776, column: 8, scope: !5465)
!5486 = !DILocalVariable(name: "first", scope: !5465, file: !3, line: 776, type: !1961)
!5487 = !DILocation(line: 776, column: 11, scope: !5465)
!5488 = !DILocalVariable(name: "second", scope: !5465, file: !3, line: 776, type: !1961)
!5489 = !DILocation(line: 776, column: 25, scope: !5465)
!5490 = !DILocalVariable(name: "ei", scope: !5465, file: !3, line: 777, type: !4940)
!5491 = !DILocation(line: 777, column: 17, scope: !5465)
!5492 = !DILocalVariable(name: "preds", scope: !5465, file: !3, line: 778, type: !2589)
!5493 = !DILocation(line: 778, column: 10, scope: !5465)
!5494 = !DILocation(line: 780, column: 3, scope: !5495)
!5495 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 780, column: 3)
!5496 = !DILocation(line: 780, column: 3, scope: !5497)
!5497 = distinct !DILexicalBlock(scope: !5495, file: !3, line: 780, column: 3)
!5498 = !DILocation(line: 781, column: 11, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5497, file: !3, line: 781, column: 9)
!5500 = !DILocation(line: 781, column: 14, scope: !5499)
!5501 = !DILocation(line: 781, column: 20, scope: !5499)
!5502 = !DILocation(line: 781, column: 9, scope: !5497)
!5503 = !DILocation(line: 783, column: 9, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 782, column: 7)
!5505 = !DILocation(line: 784, column: 6, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 784, column: 6)
!5507 = !DILocation(line: 784, column: 12, scope: !5506)
!5508 = !DILocation(line: 784, column: 16, scope: !5506)
!5509 = !DILocation(line: 784, column: 6, scope: !5504)
!5510 = !DILocation(line: 785, column: 13, scope: !5506)
!5511 = !DILocation(line: 785, column: 11, scope: !5506)
!5512 = !DILocation(line: 785, column: 4, scope: !5506)
!5513 = !DILocation(line: 786, column: 7, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5504, file: !3, line: 786, column: 6)
!5515 = !DILocation(line: 786, column: 6, scope: !5504)
!5516 = !DILocation(line: 787, column: 12, scope: !5514)
!5517 = !DILocation(line: 787, column: 10, scope: !5514)
!5518 = !DILocation(line: 787, column: 4, scope: !5514)
!5519 = !DILocation(line: 788, column: 7, scope: !5504)
!5520 = !DILocation(line: 781, column: 43, scope: !5499)
!5521 = distinct !{!5521, !5494, !5522}
!5522 = !DILocation(line: 788, column: 7, scope: !5495)
!5523 = !DILocation(line: 796, column: 7, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 796, column: 7)
!5525 = !DILocation(line: 796, column: 14, scope: !5524)
!5526 = !DILocation(line: 796, column: 7, scope: !5465)
!5527 = !DILocation(line: 798, column: 12, scope: !5528)
!5528 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 798, column: 11)
!5529 = distinct !DILexicalBlock(scope: !5524, file: !3, line: 797, column: 5)
!5530 = !DILocation(line: 798, column: 16, scope: !5528)
!5531 = !DILocation(line: 798, column: 11, scope: !5529)
!5532 = !DILocation(line: 799, column: 26, scope: !5528)
!5533 = !DILocation(line: 799, column: 2, scope: !5528)
!5534 = !DILocation(line: 800, column: 29, scope: !5529)
!5535 = !DILocation(line: 800, column: 7, scope: !5529)
!5536 = !DILocation(line: 801, column: 11, scope: !5537)
!5537 = distinct !DILexicalBlock(scope: !5529, file: !3, line: 801, column: 11)
!5538 = !DILocation(line: 801, column: 11, scope: !5529)
!5539 = !DILocation(line: 802, column: 11, scope: !5537)
!5540 = !DILocation(line: 803, column: 4, scope: !5537)
!5541 = !DILocation(line: 803, column: 12, scope: !5537)
!5542 = !DILocation(line: 803, column: 16, scope: !5537)
!5543 = !DILocation(line: 802, column: 2, scope: !5537)
!5544 = !DILocation(line: 804, column: 7, scope: !5529)
!5545 = !DILocation(line: 807, column: 7, scope: !5546)
!5546 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 807, column: 7)
!5547 = !DILocation(line: 807, column: 7, scope: !5465)
!5548 = !DILocation(line: 808, column: 14, scope: !5546)
!5549 = !DILocation(line: 808, column: 52, scope: !5546)
!5550 = !DILocation(line: 808, column: 56, scope: !5546)
!5551 = !DILocation(line: 808, column: 5, scope: !5546)
!5552 = !DILocation(line: 810, column: 33, scope: !5465)
!5553 = !DILocation(line: 810, column: 49, scope: !5465)
!5554 = !DILocation(line: 810, column: 11, scope: !5465)
!5555 = !DILocation(line: 810, column: 9, scope: !5465)
!5556 = !DILocation(line: 811, column: 7, scope: !5557)
!5557 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 811, column: 7)
!5558 = !DILocation(line: 811, column: 7, scope: !5465)
!5559 = !DILocation(line: 815, column: 47, scope: !5560)
!5560 = distinct !DILexicalBlock(scope: !5561, file: !3, line: 815, column: 7)
!5561 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 812, column: 5)
!5562 = !DILocation(line: 815, column: 46, scope: !5560)
!5563 = !DILocation(line: 815, column: 19, scope: !5560)
!5564 = !DILocation(line: 815, column: 17, scope: !5560)
!5565 = !DILocation(line: 815, column: 12, scope: !5560)
!5566 = !DILocation(line: 815, column: 54, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5560, file: !3, line: 815, column: 7)
!5568 = !DILocation(line: 815, column: 7, scope: !5560)
!5569 = !DILocalVariable(name: "predictor", scope: !5570, file: !3, line: 817, type: !732)
!5570 = distinct !DILexicalBlock(scope: !5567, file: !3, line: 816, column: 2)
!5571 = !DILocation(line: 817, column: 22, scope: !5570)
!5572 = !DILocation(line: 817, column: 34, scope: !5570)
!5573 = !DILocation(line: 817, column: 40, scope: !5570)
!5574 = !DILocalVariable(name: "probability", scope: !5570, file: !3, line: 818, type: !1954)
!5575 = !DILocation(line: 818, column: 8, scope: !5570)
!5576 = !DILocation(line: 818, column: 22, scope: !5570)
!5577 = !DILocation(line: 818, column: 28, scope: !5570)
!5578 = !DILocation(line: 820, column: 8, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5570, file: !3, line: 820, column: 8)
!5580 = !DILocation(line: 820, column: 14, scope: !5579)
!5581 = !DILocation(line: 820, column: 25, scope: !5579)
!5582 = !DILocation(line: 820, column: 22, scope: !5579)
!5583 = !DILocation(line: 820, column: 8, scope: !5570)
!5584 = !DILocation(line: 821, column: 39, scope: !5579)
!5585 = !DILocation(line: 821, column: 37, scope: !5579)
!5586 = !DILocation(line: 821, column: 18, scope: !5579)
!5587 = !DILocation(line: 821, column: 6, scope: !5579)
!5588 = !DILocation(line: 823, column: 10, scope: !5570)
!5589 = !DILocation(line: 826, column: 8, scope: !5590)
!5590 = distinct !DILexicalBlock(scope: !5570, file: !3, line: 826, column: 8)
!5591 = !DILocation(line: 826, column: 25, scope: !5590)
!5592 = !DILocation(line: 826, column: 23, scope: !5590)
!5593 = !DILocation(line: 826, column: 8, scope: !5570)
!5594 = !DILocalVariable(name: "pred2", scope: !5595, file: !3, line: 828, type: !1955)
!5595 = distinct !DILexicalBlock(scope: !5590, file: !3, line: 827, column: 6)
!5596 = !DILocation(line: 828, column: 39, scope: !5595)
!5597 = !DILocalVariable(name: "prob", scope: !5595, file: !3, line: 829, type: !1954)
!5598 = !DILocation(line: 829, column: 12, scope: !5595)
!5599 = !DILocation(line: 829, column: 19, scope: !5595)
!5600 = !DILocation(line: 831, column: 56, scope: !5601)
!5601 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 831, column: 15)
!5602 = !DILocation(line: 831, column: 55, scope: !5601)
!5603 = !DILocation(line: 831, column: 28, scope: !5601)
!5604 = !DILocation(line: 831, column: 26, scope: !5601)
!5605 = !DILocation(line: 831, column: 20, scope: !5601)
!5606 = !DILocation(line: 831, column: 63, scope: !5607)
!5607 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 831, column: 15)
!5608 = !DILocation(line: 831, column: 15, scope: !5601)
!5609 = !DILocation(line: 832, column: 13, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 832, column: 13)
!5611 = !DILocation(line: 832, column: 22, scope: !5610)
!5612 = !DILocation(line: 832, column: 19, scope: !5610)
!5613 = !DILocation(line: 832, column: 27, scope: !5610)
!5614 = !DILocation(line: 832, column: 30, scope: !5610)
!5615 = !DILocation(line: 832, column: 37, scope: !5610)
!5616 = !DILocation(line: 832, column: 53, scope: !5610)
!5617 = !DILocation(line: 832, column: 59, scope: !5610)
!5618 = !DILocation(line: 832, column: 50, scope: !5610)
!5619 = !DILocation(line: 832, column: 13, scope: !5607)
!5620 = !DILocalVariable(name: "probability2", scope: !5621, file: !3, line: 834, type: !1954)
!5621 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 833, column: 11)
!5622 = !DILocation(line: 834, column: 17, scope: !5621)
!5623 = !DILocation(line: 834, column: 32, scope: !5621)
!5624 = !DILocation(line: 834, column: 38, scope: !5621)
!5625 = !DILocation(line: 836, column: 10, scope: !5626)
!5626 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 836, column: 10)
!5627 = !DILocation(line: 836, column: 17, scope: !5626)
!5628 = !DILocation(line: 836, column: 28, scope: !5626)
!5629 = !DILocation(line: 836, column: 25, scope: !5626)
!5630 = !DILocation(line: 836, column: 10, scope: !5621)
!5631 = !DILocation(line: 837, column: 42, scope: !5626)
!5632 = !DILocation(line: 837, column: 40, scope: !5626)
!5633 = !DILocation(line: 837, column: 21, scope: !5626)
!5634 = !DILocation(line: 837, column: 8, scope: !5626)
!5635 = !DILocation(line: 839, column: 11, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 839, column: 10)
!5637 = !DILocation(line: 839, column: 23, scope: !5636)
!5638 = !DILocation(line: 840, column: 11, scope: !5636)
!5639 = !DILocation(line: 840, column: 24, scope: !5636)
!5640 = !DILocation(line: 839, column: 47, scope: !5636)
!5641 = !DILocation(line: 839, column: 10, scope: !5621)
!5642 = !DILocation(line: 841, column: 8, scope: !5636)
!5643 = !DILocation(line: 844, column: 11, scope: !5644)
!5644 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 844, column: 10)
!5645 = !DILocation(line: 844, column: 23, scope: !5644)
!5646 = !DILocation(line: 844, column: 47, scope: !5644)
!5647 = !DILocation(line: 844, column: 51, scope: !5644)
!5648 = !DILocation(line: 844, column: 66, scope: !5644)
!5649 = !DILocation(line: 844, column: 64, scope: !5644)
!5650 = !DILocation(line: 845, column: 10, scope: !5644)
!5651 = !DILocation(line: 845, column: 14, scope: !5644)
!5652 = !DILocation(line: 845, column: 26, scope: !5644)
!5653 = !DILocation(line: 845, column: 50, scope: !5644)
!5654 = !DILocation(line: 845, column: 54, scope: !5644)
!5655 = !DILocation(line: 845, column: 69, scope: !5644)
!5656 = !DILocation(line: 845, column: 67, scope: !5644)
!5657 = !DILocation(line: 844, column: 10, scope: !5621)
!5658 = !DILocation(line: 846, column: 15, scope: !5644)
!5659 = !DILocation(line: 846, column: 13, scope: !5644)
!5660 = !DILocation(line: 846, column: 8, scope: !5644)
!5661 = !DILocation(line: 847, column: 4, scope: !5621)
!5662 = !DILocation(line: 831, column: 78, scope: !5607)
!5663 = !DILocation(line: 831, column: 85, scope: !5607)
!5664 = !DILocation(line: 831, column: 76, scope: !5607)
!5665 = !DILocation(line: 831, column: 15, scope: !5607)
!5666 = distinct !{!5666, !5608, !5667}
!5667 = !DILocation(line: 847, column: 4, scope: !5601)
!5668 = !DILocation(line: 848, column: 13, scope: !5669)
!5669 = distinct !DILexicalBlock(scope: !5595, file: !3, line: 848, column: 12)
!5670 = !DILocation(line: 848, column: 12, scope: !5595)
!5671 = !DILocation(line: 849, column: 29, scope: !5669)
!5672 = !DILocation(line: 849, column: 27, scope: !5669)
!5673 = !DILocation(line: 849, column: 52, scope: !5669)
!5674 = !DILocation(line: 849, column: 50, scope: !5669)
!5675 = !DILocation(line: 849, column: 10, scope: !5669)
!5676 = !DILocation(line: 850, column: 6, scope: !5595)
!5677 = !DILocation(line: 852, column: 9, scope: !5570)
!5678 = !DILocation(line: 852, column: 32, scope: !5570)
!5679 = !DILocation(line: 852, column: 30, scope: !5570)
!5680 = !DILocation(line: 853, column: 31, scope: !5570)
!5681 = !DILocation(line: 853, column: 29, scope: !5570)
!5682 = !DILocation(line: 854, column: 31, scope: !5570)
!5683 = !DILocation(line: 854, column: 29, scope: !5570)
!5684 = !DILocation(line: 854, column: 9, scope: !5570)
!5685 = !DILocation(line: 853, column: 9, scope: !5570)
!5686 = !DILocation(line: 852, column: 6, scope: !5570)
!5687 = !DILocation(line: 857, column: 8, scope: !5688)
!5688 = distinct !DILexicalBlock(scope: !5570, file: !3, line: 857, column: 8)
!5689 = !DILocation(line: 857, column: 10, scope: !5688)
!5690 = !DILocation(line: 857, column: 8, scope: !5570)
!5691 = !DILocation(line: 859, column: 27, scope: !5688)
!5692 = !DILocation(line: 859, column: 6, scope: !5688)
!5693 = !DILocation(line: 861, column: 40, scope: !5688)
!5694 = !DILocation(line: 861, column: 31, scope: !5688)
!5695 = !DILocation(line: 862, column: 11, scope: !5688)
!5696 = !DILocation(line: 862, column: 9, scope: !5688)
!5697 = !DILocation(line: 863, column: 13, scope: !5688)
!5698 = !DILocation(line: 863, column: 34, scope: !5688)
!5699 = !DILocation(line: 863, column: 32, scope: !5688)
!5700 = !DILocation(line: 863, column: 36, scope: !5688)
!5701 = !DILocation(line: 861, column: 29, scope: !5688)
!5702 = !DILocation(line: 861, column: 27, scope: !5688)
!5703 = !DILocation(line: 864, column: 2, scope: !5570)
!5704 = !DILocation(line: 815, column: 67, scope: !5567)
!5705 = !DILocation(line: 815, column: 73, scope: !5567)
!5706 = !DILocation(line: 815, column: 65, scope: !5567)
!5707 = !DILocation(line: 815, column: 7, scope: !5567)
!5708 = distinct !{!5708, !5568, !5709}
!5709 = !DILocation(line: 864, column: 2, scope: !5560)
!5710 = !DILocation(line: 865, column: 5, scope: !5561)
!5711 = !DILocation(line: 871, column: 23, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 871, column: 7)
!5713 = !DILocation(line: 871, column: 7, scope: !5712)
!5714 = !DILocation(line: 871, column: 39, scope: !5712)
!5715 = !DILocation(line: 871, column: 45, scope: !5712)
!5716 = !DILocation(line: 871, column: 7, scope: !5465)
!5717 = !DILocation(line: 872, column: 17, scope: !5712)
!5718 = !DILocation(line: 872, column: 5, scope: !5712)
!5719 = !DILocation(line: 874, column: 8, scope: !5720)
!5720 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 874, column: 7)
!5721 = !DILocation(line: 874, column: 7, scope: !5465)
!5722 = !DILocation(line: 875, column: 22, scope: !5720)
!5723 = !DILocation(line: 875, column: 53, scope: !5720)
!5724 = !DILocation(line: 875, column: 75, scope: !5720)
!5725 = !DILocation(line: 875, column: 5, scope: !5720)
!5726 = !DILocation(line: 878, column: 24, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5720, file: !3, line: 877, column: 5)
!5728 = !DILocation(line: 878, column: 51, scope: !5727)
!5729 = !DILocation(line: 878, column: 73, scope: !5727)
!5730 = !DILocation(line: 879, column: 11, scope: !5727)
!5731 = !DILocation(line: 879, column: 10, scope: !5727)
!5732 = !DILocation(line: 878, column: 7, scope: !5727)
!5733 = !DILocation(line: 880, column: 24, scope: !5727)
!5734 = !DILocation(line: 880, column: 53, scope: !5727)
!5735 = !DILocation(line: 880, column: 71, scope: !5727)
!5736 = !DILocation(line: 881, column: 10, scope: !5727)
!5737 = !DILocation(line: 880, column: 7, scope: !5727)
!5738 = !DILocation(line: 884, column: 7, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 884, column: 7)
!5740 = !DILocation(line: 884, column: 7, scope: !5465)
!5741 = !DILocation(line: 885, column: 28, scope: !5739)
!5742 = !DILocation(line: 885, column: 26, scope: !5739)
!5743 = !DILocation(line: 885, column: 5, scope: !5739)
!5744 = !DILocation(line: 886, column: 20, scope: !5465)
!5745 = !DILocation(line: 886, column: 46, scope: !5465)
!5746 = !DILocation(line: 886, column: 68, scope: !5465)
!5747 = !DILocation(line: 886, column: 3, scope: !5465)
!5748 = !DILocation(line: 888, column: 7, scope: !5749)
!5749 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 888, column: 7)
!5750 = !DILocation(line: 888, column: 7, scope: !5465)
!5751 = !DILocation(line: 890, column: 47, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5753, file: !3, line: 890, column: 7)
!5753 = distinct !DILexicalBlock(scope: !5749, file: !3, line: 889, column: 5)
!5754 = !DILocation(line: 890, column: 46, scope: !5752)
!5755 = !DILocation(line: 890, column: 19, scope: !5752)
!5756 = !DILocation(line: 890, column: 17, scope: !5752)
!5757 = !DILocation(line: 890, column: 12, scope: !5752)
!5758 = !DILocation(line: 890, column: 54, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5752, file: !3, line: 890, column: 7)
!5760 = !DILocation(line: 890, column: 7, scope: !5752)
!5761 = !DILocalVariable(name: "predictor", scope: !5762, file: !3, line: 892, type: !732)
!5762 = distinct !DILexicalBlock(scope: !5759, file: !3, line: 891, column: 2)
!5763 = !DILocation(line: 892, column: 22, scope: !5762)
!5764 = !DILocation(line: 892, column: 34, scope: !5762)
!5765 = !DILocation(line: 892, column: 40, scope: !5762)
!5766 = !DILocalVariable(name: "probability", scope: !5762, file: !3, line: 893, type: !1954)
!5767 = !DILocation(line: 893, column: 8, scope: !5762)
!5768 = !DILocation(line: 893, column: 22, scope: !5762)
!5769 = !DILocation(line: 893, column: 28, scope: !5762)
!5770 = !DILocation(line: 895, column: 8, scope: !5771)
!5771 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 895, column: 8)
!5772 = !DILocation(line: 895, column: 14, scope: !5771)
!5773 = !DILocation(line: 895, column: 25, scope: !5771)
!5774 = !DILocation(line: 895, column: 22, scope: !5771)
!5775 = !DILocation(line: 895, column: 8, scope: !5762)
!5776 = !DILocation(line: 896, column: 39, scope: !5771)
!5777 = !DILocation(line: 896, column: 37, scope: !5771)
!5778 = !DILocation(line: 896, column: 18, scope: !5771)
!5779 = !DILocation(line: 896, column: 6, scope: !5771)
!5780 = !DILocation(line: 897, column: 21, scope: !5762)
!5781 = !DILocation(line: 897, column: 32, scope: !5762)
!5782 = !DILocation(line: 897, column: 43, scope: !5762)
!5783 = !DILocation(line: 897, column: 56, scope: !5762)
!5784 = !DILocation(line: 898, column: 8, scope: !5762)
!5785 = !DILocation(line: 898, column: 20, scope: !5762)
!5786 = !DILocation(line: 898, column: 23, scope: !5762)
!5787 = !DILocation(line: 898, column: 41, scope: !5762)
!5788 = !DILocation(line: 898, column: 38, scope: !5762)
!5789 = !DILocation(line: 897, column: 4, scope: !5762)
!5790 = !DILocation(line: 899, column: 2, scope: !5762)
!5791 = !DILocation(line: 890, column: 67, scope: !5759)
!5792 = !DILocation(line: 890, column: 73, scope: !5759)
!5793 = !DILocation(line: 890, column: 65, scope: !5759)
!5794 = !DILocation(line: 890, column: 7, scope: !5759)
!5795 = distinct !{!5795, !5760, !5796}
!5796 = !DILocation(line: 899, column: 2, scope: !5752)
!5797 = !DILocation(line: 900, column: 5, scope: !5753)
!5798 = !DILocation(line: 901, column: 25, scope: !5465)
!5799 = !DILocation(line: 901, column: 3, scope: !5465)
!5800 = !DILocation(line: 903, column: 8, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 903, column: 7)
!5802 = !DILocation(line: 903, column: 12, scope: !5801)
!5803 = !DILocation(line: 903, column: 7, scope: !5465)
!5804 = !DILocation(line: 905, column: 28, scope: !5805)
!5805 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 904, column: 5)
!5806 = !DILocation(line: 905, column: 7, scope: !5805)
!5807 = !DILocation(line: 905, column: 14, scope: !5805)
!5808 = !DILocation(line: 905, column: 26, scope: !5805)
!5809 = !DILocation(line: 906, column: 48, scope: !5805)
!5810 = !DILocation(line: 906, column: 46, scope: !5805)
!5811 = !DILocation(line: 906, column: 7, scope: !5805)
!5812 = !DILocation(line: 906, column: 15, scope: !5805)
!5813 = !DILocation(line: 906, column: 27, scope: !5805)
!5814 = !DILocation(line: 907, column: 5, scope: !5805)
!5815 = !DILocation(line: 908, column: 1, scope: !5465)
!5816 = !DILocalVariable(name: "bb", scope: !3486, file: !3, line: 2079, type: !2653)
!5817 = !DILocation(line: 2079, column: 15, scope: !3486)
!5818 = !DILocalVariable(name: "freq_max", scope: !3486, file: !3, line: 2080, type: !3454)
!5819 = !DILocation(line: 2080, column: 9, scope: !3486)
!5820 = !DILocation(line: 2082, column: 7, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 2082, column: 7)
!5822 = !DILocation(line: 2082, column: 22, scope: !5821)
!5823 = !DILocation(line: 2082, column: 38, scope: !5821)
!5824 = !DILocation(line: 2082, column: 42, scope: !5821)
!5825 = !DILocation(line: 2082, column: 7, scope: !3486)
!5826 = !DILocation(line: 2086, column: 12, scope: !5827)
!5827 = distinct !DILexicalBlock(scope: !5828, file: !3, line: 2086, column: 11)
!5828 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 2083, column: 5)
!5829 = !DILocation(line: 2086, column: 11, scope: !5828)
!5830 = !DILocation(line: 2088, column: 28, scope: !5831)
!5831 = distinct !DILexicalBlock(scope: !5827, file: !3, line: 2087, column: 9)
!5832 = !DILocation(line: 2089, column: 4, scope: !5831)
!5833 = !DILocation(line: 2090, column: 4, scope: !5831)
!5834 = !DILocation(line: 2091, column: 4, scope: !5831)
!5835 = !DILocation(line: 2092, column: 4, scope: !5831)
!5836 = !DILocation(line: 2093, column: 4, scope: !5831)
!5837 = !DILocation(line: 2094, column: 4, scope: !5831)
!5838 = !DILocation(line: 2095, column: 4, scope: !5831)
!5839 = !DILocation(line: 2096, column: 2, scope: !5831)
!5840 = !DILocation(line: 2098, column: 7, scope: !5828)
!5841 = !DILocation(line: 2100, column: 25, scope: !5828)
!5842 = !DILocation(line: 2100, column: 7, scope: !5828)
!5843 = !DILocation(line: 2100, column: 43, scope: !5828)
!5844 = !DILocation(line: 2100, column: 55, scope: !5828)
!5845 = !DILocation(line: 2103, column: 7, scope: !5828)
!5846 = !DILocation(line: 2104, column: 7, scope: !5828)
!5847 = !DILocation(line: 2105, column: 7, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5828, file: !3, line: 2105, column: 7)
!5849 = !DILocation(line: 2105, column: 7, scope: !5850)
!5850 = distinct !DILexicalBlock(scope: !5848, file: !3, line: 2105, column: 7)
!5851 = !DILocalVariable(name: "e", scope: !5852, file: !3, line: 2107, type: !1961)
!5852 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 2106, column: 2)
!5853 = !DILocation(line: 2107, column: 9, scope: !5852)
!5854 = !DILocalVariable(name: "ei", scope: !5852, file: !3, line: 2108, type: !4940)
!5855 = !DILocation(line: 2108, column: 18, scope: !5852)
!5856 = !DILocation(line: 2110, column: 4, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 2110, column: 4)
!5858 = !DILocation(line: 2110, column: 4, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5857, file: !3, line: 2110, column: 4)
!5860 = !DILocation(line: 2112, column: 21, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5859, file: !3, line: 2111, column: 6)
!5862 = !DILocation(line: 2112, column: 36, scope: !5861)
!5863 = !DILocation(line: 2112, column: 52, scope: !5861)
!5864 = !DILocation(line: 2112, column: 55, scope: !5861)
!5865 = !DILocation(line: 2112, column: 8, scope: !5861)
!5866 = !DILocation(line: 2113, column: 20, scope: !5861)
!5867 = !DILocation(line: 2113, column: 35, scope: !5861)
!5868 = !DILocation(line: 2114, column: 6, scope: !5861)
!5869 = !DILocation(line: 2114, column: 21, scope: !5861)
!5870 = !DILocation(line: 2113, column: 8, scope: !5861)
!5871 = !DILocation(line: 2116, column: 6, scope: !5861)
!5872 = distinct !{!5872, !5856, !5873}
!5873 = !DILocation(line: 2116, column: 6, scope: !5857)
!5874 = !DILocation(line: 2117, column: 2, scope: !5852)
!5875 = distinct !{!5875, !5847, !5876}
!5876 = !DILocation(line: 2117, column: 2, scope: !5848)
!5877 = !DILocation(line: 2121, column: 7, scope: !5828)
!5878 = !DILocation(line: 2123, column: 7, scope: !5828)
!5879 = !DILocation(line: 2124, column: 7, scope: !5880)
!5880 = distinct !DILexicalBlock(scope: !5828, file: !3, line: 2124, column: 7)
!5881 = !DILocation(line: 2124, column: 7, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5880, file: !3, line: 2124, column: 7)
!5883 = !DILocation(line: 2125, column: 33, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 2125, column: 6)
!5885 = !DILocation(line: 2125, column: 50, scope: !5884)
!5886 = !DILocation(line: 2125, column: 6, scope: !5884)
!5887 = !DILocation(line: 2125, column: 61, scope: !5884)
!5888 = !DILocation(line: 2125, column: 6, scope: !5882)
!5889 = !DILocation(line: 2126, column: 4, scope: !5884)
!5890 = !DILocation(line: 2126, column: 24, scope: !5884)
!5891 = !DILocation(line: 2126, column: 41, scope: !5884)
!5892 = !DILocation(line: 2125, column: 63, scope: !5884)
!5893 = distinct !{!5893, !5879, !5894}
!5894 = !DILocation(line: 2126, column: 69, scope: !5880)
!5895 = !DILocation(line: 2128, column: 7, scope: !5828)
!5896 = !DILocation(line: 2129, column: 7, scope: !5897)
!5897 = distinct !DILexicalBlock(scope: !5828, file: !3, line: 2129, column: 7)
!5898 = !DILocation(line: 2129, column: 7, scope: !5899)
!5899 = distinct !DILexicalBlock(scope: !5897, file: !3, line: 2129, column: 7)
!5900 = !DILocalVariable(name: "tmp", scope: !5901, file: !3, line: 2131, type: !3454)
!5901 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 2130, column: 2)
!5902 = !DILocation(line: 2131, column: 10, scope: !5901)
!5903 = !DILocation(line: 2133, column: 22, scope: !5901)
!5904 = !DILocation(line: 2133, column: 39, scope: !5901)
!5905 = !DILocation(line: 2133, column: 4, scope: !5901)
!5906 = !DILocation(line: 2134, column: 4, scope: !5901)
!5907 = !DILocation(line: 2135, column: 20, scope: !5901)
!5908 = !DILocation(line: 2135, column: 4, scope: !5901)
!5909 = !DILocation(line: 2135, column: 8, scope: !5901)
!5910 = !DILocation(line: 2135, column: 18, scope: !5901)
!5911 = !DILocation(line: 2136, column: 2, scope: !5901)
!5912 = distinct !{!5912, !5896, !5913}
!5913 = !DILocation(line: 2136, column: 2, scope: !5897)
!5914 = !DILocation(line: 2138, column: 7, scope: !5828)
!5915 = !DILocation(line: 2139, column: 7, scope: !5828)
!5916 = !DILocation(line: 2140, column: 5, scope: !5828)
!5917 = !DILocation(line: 2141, column: 3, scope: !3486)
!5918 = !DILocation(line: 2142, column: 7, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 2142, column: 7)
!5920 = !DILocation(line: 2142, column: 7, scope: !3486)
!5921 = !DILocation(line: 2143, column: 5, scope: !5919)
!5922 = !DILocation(line: 2144, column: 1, scope: !3486)
!5923 = distinct !DISubprogram(name: "counts_to_freqs", scope: !3, file: !3, line: 2018, type: !5924, scopeLine: 2019, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5924 = !DISubroutineType(types: !5925)
!5925 = !{!1954}
!5926 = !DILocalVariable(name: "count_max", scope: !5923, file: !3, line: 2020, type: !3427)
!5927 = !DILocation(line: 2020, column: 13, scope: !5923)
!5928 = !DILocalVariable(name: "true_count_max", scope: !5923, file: !3, line: 2020, type: !3427)
!5929 = !DILocation(line: 2020, column: 24, scope: !5923)
!5930 = !DILocalVariable(name: "bb", scope: !5923, file: !3, line: 2021, type: !2653)
!5931 = !DILocation(line: 2021, column: 15, scope: !5923)
!5932 = !DILocation(line: 2023, column: 3, scope: !5933)
!5933 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2023, column: 3)
!5934 = !DILocation(line: 2023, column: 3, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5933, file: !3, line: 2023, column: 3)
!5936 = !DILocation(line: 2024, column: 22, scope: !5935)
!5937 = !DILocation(line: 2024, column: 20, scope: !5935)
!5938 = !DILocation(line: 2024, column: 5, scope: !5935)
!5939 = distinct !{!5939, !5932, !5940}
!5940 = !DILocation(line: 2024, column: 22, scope: !5933)
!5941 = !DILocation(line: 2026, column: 15, scope: !5923)
!5942 = !DILocation(line: 2026, column: 13, scope: !5923)
!5943 = !DILocation(line: 2027, column: 3, scope: !5944)
!5944 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2027, column: 3)
!5945 = !DILocation(line: 2027, column: 3, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5944, file: !3, line: 2027, column: 3)
!5947 = !DILocation(line: 2028, column: 22, scope: !5946)
!5948 = !DILocation(line: 2028, column: 26, scope: !5946)
!5949 = !DILocation(line: 2028, column: 32, scope: !5946)
!5950 = !DILocation(line: 2028, column: 48, scope: !5946)
!5951 = !DILocation(line: 2028, column: 58, scope: !5946)
!5952 = !DILocation(line: 2028, column: 46, scope: !5946)
!5953 = !DILocation(line: 2028, column: 65, scope: !5946)
!5954 = !DILocation(line: 2028, column: 63, scope: !5946)
!5955 = !DILocation(line: 2028, column: 21, scope: !5946)
!5956 = !DILocation(line: 2028, column: 5, scope: !5946)
!5957 = !DILocation(line: 2028, column: 9, scope: !5946)
!5958 = !DILocation(line: 2028, column: 19, scope: !5946)
!5959 = distinct !{!5959, !5943, !5960}
!5960 = !DILocation(line: 2028, column: 65, scope: !5944)
!5961 = !DILocation(line: 2030, column: 10, scope: !5923)
!5962 = !DILocation(line: 2030, column: 3, scope: !5923)
!5963 = distinct !DISubprogram(name: "expensive_function_p", scope: !3, file: !3, line: 2039, type: !3599, scopeLine: 2040, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!5964 = !DILocalVariable(name: "threshold", arg: 1, scope: !5963, file: !3, line: 2039, type: !1954)
!5965 = !DILocation(line: 2039, column: 27, scope: !5963)
!5966 = !DILocalVariable(name: "sum", scope: !5963, file: !3, line: 2041, type: !7)
!5967 = !DILocation(line: 2041, column: 16, scope: !5963)
!5968 = !DILocalVariable(name: "bb", scope: !5963, file: !3, line: 2042, type: !2653)
!5969 = !DILocation(line: 2042, column: 15, scope: !5963)
!5970 = !DILocalVariable(name: "limit", scope: !5963, file: !3, line: 2043, type: !7)
!5971 = !DILocation(line: 2043, column: 16, scope: !5963)
!5972 = !DILocation(line: 2047, column: 3, scope: !5963)
!5973 = !DILocation(line: 2052, column: 7, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 2052, column: 7)
!5975 = !DILocation(line: 2052, column: 24, scope: !5974)
!5976 = !DILocation(line: 2052, column: 34, scope: !5974)
!5977 = !DILocation(line: 2052, column: 7, scope: !5963)
!5978 = !DILocation(line: 2053, column: 5, scope: !5974)
!5979 = !DILocation(line: 2056, column: 11, scope: !5963)
!5980 = !DILocation(line: 2056, column: 28, scope: !5963)
!5981 = !DILocation(line: 2056, column: 40, scope: !5963)
!5982 = !DILocation(line: 2056, column: 38, scope: !5963)
!5983 = !DILocation(line: 2056, column: 9, scope: !5963)
!5984 = !DILocation(line: 2057, column: 3, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5963, file: !3, line: 2057, column: 3)
!5986 = !DILocation(line: 2057, column: 3, scope: !5987)
!5987 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 2057, column: 3)
!5988 = !DILocalVariable(name: "insn", scope: !5989, file: !3, line: 2059, type: !2195)
!5989 = distinct !DILexicalBlock(scope: !5987, file: !3, line: 2058, column: 5)
!5990 = !DILocation(line: 2059, column: 11, scope: !5989)
!5991 = !DILocation(line: 2061, column: 19, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2061, column: 7)
!5993 = !DILocation(line: 2061, column: 17, scope: !5992)
!5994 = !DILocation(line: 2061, column: 12, scope: !5992)
!5995 = !DILocation(line: 2061, column: 33, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 2061, column: 7)
!5997 = !DILocation(line: 2061, column: 41, scope: !5996)
!5998 = !DILocation(line: 2061, column: 38, scope: !5996)
!5999 = !DILocation(line: 2061, column: 7, scope: !5992)
!6000 = !DILocation(line: 2063, column: 21, scope: !6001)
!6001 = distinct !DILexicalBlock(scope: !5996, file: !3, line: 2063, column: 6)
!6002 = !DILocation(line: 2063, column: 6, scope: !6001)
!6003 = !DILocation(line: 2063, column: 6, scope: !5996)
!6004 = !DILocation(line: 2065, column: 13, scope: !6005)
!6005 = distinct !DILexicalBlock(scope: !6001, file: !3, line: 2064, column: 4)
!6006 = !DILocation(line: 2065, column: 17, scope: !6005)
!6007 = !DILocation(line: 2065, column: 10, scope: !6005)
!6008 = !DILocation(line: 2066, column: 10, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !6005, file: !3, line: 2066, column: 10)
!6010 = !DILocation(line: 2066, column: 16, scope: !6009)
!6011 = !DILocation(line: 2066, column: 14, scope: !6009)
!6012 = !DILocation(line: 2066, column: 10, scope: !6005)
!6013 = !DILocation(line: 2067, column: 8, scope: !6009)
!6014 = !DILocation(line: 2068, column: 2, scope: !6005)
!6015 = !DILocation(line: 2063, column: 25, scope: !6001)
!6016 = !DILocation(line: 2062, column: 12, scope: !5996)
!6017 = !DILocation(line: 2062, column: 10, scope: !5996)
!6018 = !DILocation(line: 2061, column: 7, scope: !5996)
!6019 = distinct !{!6019, !5999, !6020}
!6020 = !DILocation(line: 2068, column: 2, scope: !5992)
!6021 = !DILocation(line: 2069, column: 5, scope: !5989)
!6022 = distinct !{!6022, !5984, !6023}
!6023 = !DILocation(line: 2069, column: 5, scope: !5985)
!6024 = !DILocation(line: 2071, column: 3, scope: !5963)
!6025 = !DILocation(line: 2072, column: 1, scope: !5963)
!6026 = distinct !DISubprogram(name: "single_succ_edge", scope: !142, file: !142, line: 643, type: !6027, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6027 = !DISubroutineType(types: !6028)
!6028 = !{!1961, !3554}
!6029 = !DILocalVariable(name: "bb", arg: 1, scope: !6026, file: !142, line: 643, type: !3554)
!6030 = !DILocation(line: 643, column: 37, scope: !6026)
!6031 = !DILocation(line: 645, column: 3, scope: !6026)
!6032 = !DILocation(line: 646, column: 10, scope: !6026)
!6033 = !DILocation(line: 646, column: 3, scope: !6026)
!6034 = distinct !DISubprogram(name: "ei_start_1", scope: !142, file: !142, line: 696, type: !6035, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6035 = !DISubroutineType(types: !6036)
!6036 = !{!4940, !4945}
!6037 = !DILocalVariable(name: "ev", arg: 1, scope: !6034, file: !142, line: 696, type: !4945)
!6038 = !DILocation(line: 696, column: 28, scope: !6034)
!6039 = !DILocalVariable(name: "i", scope: !6034, file: !142, line: 698, type: !4940)
!6040 = !DILocation(line: 698, column: 17, scope: !6034)
!6041 = !DILocation(line: 700, column: 5, scope: !6034)
!6042 = !DILocation(line: 700, column: 11, scope: !6034)
!6043 = !DILocation(line: 701, column: 17, scope: !6034)
!6044 = !DILocation(line: 701, column: 5, scope: !6034)
!6045 = !DILocation(line: 701, column: 15, scope: !6034)
!6046 = !DILocation(line: 703, column: 3, scope: !6034)
!6047 = distinct !DISubprogram(name: "ei_cond", scope: !142, file: !142, line: 771, type: !6048, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6048 = !DISubroutineType(types: !6049)
!6049 = !{!2137, !4940, !6050}
!6050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1961, size: 64)
!6051 = !DILocalVariable(name: "ei", arg: 1, scope: !6047, file: !142, line: 771, type: !4940)
!6052 = !DILocation(line: 771, column: 24, scope: !6047)
!6053 = !DILocalVariable(name: "p", arg: 2, scope: !6047, file: !142, line: 771, type: !6050)
!6054 = !DILocation(line: 771, column: 34, scope: !6047)
!6055 = !DILocation(line: 773, column: 8, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !6047, file: !142, line: 773, column: 7)
!6057 = !DILocation(line: 773, column: 7, scope: !6047)
!6058 = !DILocation(line: 775, column: 12, scope: !6059)
!6059 = distinct !DILexicalBlock(scope: !6056, file: !142, line: 774, column: 5)
!6060 = !DILocation(line: 775, column: 8, scope: !6059)
!6061 = !DILocation(line: 775, column: 10, scope: !6059)
!6062 = !DILocation(line: 776, column: 7, scope: !6059)
!6063 = !DILocation(line: 780, column: 8, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6056, file: !142, line: 779, column: 5)
!6065 = !DILocation(line: 780, column: 10, scope: !6064)
!6066 = !DILocation(line: 781, column: 7, scope: !6064)
!6067 = !DILocation(line: 783, column: 1, scope: !6047)
!6068 = distinct !DISubprogram(name: "ei_next", scope: !142, file: !142, line: 736, type: !6069, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6069 = !DISubroutineType(types: !6070)
!6070 = !{null, !6071}
!6071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4940, size: 64)
!6072 = !DILocalVariable(name: "i", arg: 1, scope: !6068, file: !142, line: 736, type: !6071)
!6073 = !DILocation(line: 736, column: 25, scope: !6068)
!6074 = !DILocation(line: 738, column: 3, scope: !6068)
!6075 = !DILocation(line: 739, column: 3, scope: !6068)
!6076 = !DILocation(line: 739, column: 6, scope: !6068)
!6077 = !DILocation(line: 739, column: 11, scope: !6068)
!6078 = !DILocation(line: 740, column: 1, scope: !6068)
!6079 = distinct !DISubprogram(name: "estimate_loops", scope: !3, file: !3, line: 1996, type: !3487, scopeLine: 1997, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6080 = !DILocalVariable(name: "tovisit", scope: !6079, file: !3, line: 1998, type: !2922)
!6081 = !DILocation(line: 1998, column: 10, scope: !6079)
!6082 = !DILocation(line: 1998, column: 20, scope: !6079)
!6083 = !DILocalVariable(name: "bb", scope: !6079, file: !3, line: 1999, type: !2653)
!6084 = !DILocation(line: 1999, column: 15, scope: !6079)
!6085 = !DILocation(line: 2002, column: 7, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2002, column: 7)
!6087 = !DILocation(line: 2002, column: 26, scope: !6086)
!6088 = !DILocation(line: 2002, column: 7, scope: !6079)
!6089 = !DILocation(line: 2003, column: 30, scope: !6086)
!6090 = !DILocation(line: 2003, column: 45, scope: !6086)
!6091 = !DILocation(line: 2003, column: 56, scope: !6086)
!6092 = !DILocation(line: 2003, column: 5, scope: !6086)
!6093 = !DILocation(line: 2006, column: 3, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6079, file: !3, line: 2006, column: 3)
!6095 = !DILocation(line: 2006, column: 3, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2006, column: 3)
!6097 = !DILocation(line: 2008, column: 23, scope: !6098)
!6098 = distinct !DILexicalBlock(scope: !6096, file: !3, line: 2007, column: 5)
!6099 = !DILocation(line: 2008, column: 32, scope: !6098)
!6100 = !DILocation(line: 2008, column: 36, scope: !6098)
!6101 = !DILocation(line: 2008, column: 7, scope: !6098)
!6102 = !DILocation(line: 2009, column: 5, scope: !6098)
!6103 = distinct !{!6103, !6093, !6104}
!6104 = !DILocation(line: 2009, column: 5, scope: !6094)
!6105 = !DILocation(line: 2010, column: 19, scope: !6079)
!6106 = !DILocation(line: 2010, column: 36, scope: !6079)
!6107 = !DILocation(line: 2010, column: 3, scope: !6079)
!6108 = !DILocation(line: 2011, column: 3, scope: !6079)
!6109 = !DILocation(line: 2012, column: 1, scope: !6079)
!6110 = distinct !DISubprogram(name: "compute_function_frequency", scope: !3, file: !3, line: 2148, type: !3487, scopeLine: 2149, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6111 = !DILocalVariable(name: "bb", scope: !6110, file: !3, line: 2150, type: !2653)
!6112 = !DILocation(line: 2150, column: 15, scope: !6110)
!6113 = !DILocation(line: 2152, column: 8, scope: !6114)
!6114 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 2152, column: 7)
!6115 = !DILocation(line: 2152, column: 21, scope: !6114)
!6116 = !DILocation(line: 2152, column: 25, scope: !6114)
!6117 = !DILocation(line: 2152, column: 7, scope: !6110)
!6118 = !DILocation(line: 2154, column: 37, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6120, file: !3, line: 2154, column: 11)
!6120 = distinct !DILexicalBlock(scope: !6114, file: !3, line: 2153, column: 5)
!6121 = !DILocation(line: 2154, column: 11, scope: !6119)
!6122 = !DILocation(line: 2155, column: 4, scope: !6119)
!6123 = !DILocation(line: 2154, column: 11, scope: !6120)
!6124 = !DILocation(line: 2156, column: 9, scope: !6119)
!6125 = !DILocation(line: 2156, column: 15, scope: !6119)
!6126 = !DILocation(line: 2156, column: 34, scope: !6119)
!6127 = !DILocation(line: 2157, column: 41, scope: !6128)
!6128 = distinct !DILexicalBlock(scope: !6119, file: !3, line: 2157, column: 16)
!6129 = !DILocation(line: 2157, column: 16, scope: !6128)
!6130 = !DILocation(line: 2158, column: 9, scope: !6128)
!6131 = !DILocation(line: 2157, column: 16, scope: !6119)
!6132 = !DILocation(line: 2159, column: 9, scope: !6128)
!6133 = !DILocation(line: 2159, column: 15, scope: !6128)
!6134 = !DILocation(line: 2159, column: 34, scope: !6128)
!6135 = !DILocation(line: 2160, column: 7, scope: !6120)
!6136 = !DILocation(line: 2162, column: 3, scope: !6110)
!6137 = !DILocation(line: 2162, column: 9, scope: !6110)
!6138 = !DILocation(line: 2162, column: 28, scope: !6110)
!6139 = !DILocation(line: 2163, column: 3, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6110, file: !3, line: 2163, column: 3)
!6141 = !DILocation(line: 2163, column: 3, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6140, file: !3, line: 2163, column: 3)
!6143 = !DILocation(line: 2165, column: 27, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6145, file: !3, line: 2165, column: 11)
!6145 = distinct !DILexicalBlock(scope: !6142, file: !3, line: 2164, column: 5)
!6146 = !DILocation(line: 2165, column: 11, scope: !6144)
!6147 = !DILocation(line: 2165, column: 11, scope: !6145)
!6148 = !DILocation(line: 2167, column: 4, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6144, file: !3, line: 2166, column: 2)
!6150 = !DILocation(line: 2167, column: 10, scope: !6149)
!6151 = !DILocation(line: 2167, column: 29, scope: !6149)
!6152 = !DILocation(line: 2168, column: 4, scope: !6149)
!6153 = !DILocation(line: 2170, column: 42, scope: !6154)
!6154 = distinct !DILexicalBlock(scope: !6145, file: !3, line: 2170, column: 11)
!6155 = !DILocation(line: 2170, column: 12, scope: !6154)
!6156 = !DILocation(line: 2170, column: 11, scope: !6145)
!6157 = !DILocation(line: 2171, column: 2, scope: !6154)
!6158 = !DILocation(line: 2171, column: 8, scope: !6154)
!6159 = !DILocation(line: 2171, column: 27, scope: !6154)
!6160 = !DILocation(line: 2172, column: 5, scope: !6145)
!6161 = distinct !{!6161, !6139, !6162}
!6162 = !DILocation(line: 2172, column: 5, scope: !6140)
!6163 = !DILocation(line: 2173, column: 1, scope: !6110)
!6164 = distinct !DISubprogram(name: "choose_function_section", scope: !3, file: !3, line: 2177, type: !3487, scopeLine: 2178, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6165 = !DILocation(line: 2179, column: 7, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 2179, column: 7)
!6167 = !DILocation(line: 2180, column: 7, scope: !6166)
!6168 = !DILocation(line: 2180, column: 19, scope: !6166)
!6169 = !DILocation(line: 2180, column: 11, scope: !6166)
!6170 = !DILocation(line: 2185, column: 7, scope: !6166)
!6171 = !DILocation(line: 2185, column: 10, scope: !6166)
!6172 = !DILocation(line: 2179, column: 7, scope: !6164)
!6173 = !DILocation(line: 2186, column: 5, scope: !6166)
!6174 = !DILocation(line: 2191, column: 7, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 2191, column: 7)
!6176 = !DILocation(line: 2191, column: 7, scope: !6164)
!6177 = !DILocation(line: 2192, column: 5, scope: !6175)
!6178 = !DILocation(line: 2194, column: 7, scope: !6179)
!6179 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 2194, column: 7)
!6180 = !DILocation(line: 2194, column: 13, scope: !6179)
!6181 = !DILocation(line: 2194, column: 32, scope: !6179)
!6182 = !DILocation(line: 2194, column: 7, scope: !6164)
!6183 = !DILocation(line: 2196, column: 7, scope: !6179)
!6184 = !DILocation(line: 2195, column: 5, scope: !6179)
!6185 = !DILocation(line: 2195, column: 47, scope: !6179)
!6186 = !DILocation(line: 2197, column: 7, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 2197, column: 7)
!6188 = !DILocation(line: 2197, column: 13, scope: !6187)
!6189 = !DILocation(line: 2197, column: 32, scope: !6187)
!6190 = !DILocation(line: 2197, column: 7, scope: !6164)
!6191 = !DILocation(line: 2199, column: 7, scope: !6187)
!6192 = !DILocation(line: 2198, column: 5, scope: !6187)
!6193 = !DILocation(line: 2198, column: 47, scope: !6187)
!6194 = !DILocation(line: 2201, column: 1, scope: !6164)
!6195 = distinct !DISubprogram(name: "build_predict_expr", scope: !3, file: !3, line: 2211, type: !6196, scopeLine: 2212, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6196 = !DISubroutineType(types: !6197)
!6197 = !{!2021, !732, !941}
!6198 = !DILocalVariable(name: "predictor", arg: 1, scope: !6195, file: !3, line: 2211, type: !732)
!6199 = !DILocation(line: 2211, column: 39, scope: !6195)
!6200 = !DILocalVariable(name: "taken", arg: 2, scope: !6195, file: !3, line: 2211, type: !941)
!6201 = !DILocation(line: 2211, column: 66, scope: !6195)
!6202 = !DILocalVariable(name: "t", scope: !6195, file: !3, line: 2213, type: !2021)
!6203 = !DILocation(line: 2213, column: 8, scope: !6195)
!6204 = !DILocation(line: 2213, column: 12, scope: !6195)
!6205 = !DILocation(line: 2215, column: 3, scope: !6195)
!6206 = !DILocation(line: 2216, column: 10, scope: !6195)
!6207 = !DILocation(line: 2216, column: 3, scope: !6195)
!6208 = distinct !DISubprogram(name: "predictor_name", scope: !3, file: !3, line: 2220, type: !6209, scopeLine: 2221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{!2220, !732}
!6211 = !DILocalVariable(name: "predictor", arg: 1, scope: !6208, file: !3, line: 2220, type: !732)
!6212 = !DILocation(line: 2220, column: 35, scope: !6208)
!6213 = !DILocation(line: 2222, column: 25, scope: !6208)
!6214 = !DILocation(line: 2222, column: 10, scope: !6208)
!6215 = !DILocation(line: 2222, column: 36, scope: !6208)
!6216 = !DILocation(line: 2222, column: 3, scope: !6208)
!6217 = distinct !DISubprogram(name: "gate_estimate_probability", scope: !3, file: !3, line: 2204, type: !3501, scopeLine: 2205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6218 = !DILocation(line: 2206, column: 10, scope: !6217)
!6219 = !DILocation(line: 2206, column: 3, scope: !6217)
!6220 = distinct !DISubprogram(name: "tree_estimate_probability_driver", scope: !3, file: !3, line: 1731, type: !3505, scopeLine: 1732, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6221 = !DILocalVariable(name: "nb_loops", scope: !6220, file: !3, line: 1733, type: !7)
!6222 = !DILocation(line: 1733, column: 12, scope: !6220)
!6223 = !DILocation(line: 1735, column: 3, scope: !6220)
!6224 = !DILocation(line: 1736, column: 7, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 1736, column: 7)
!6226 = !DILocation(line: 1736, column: 17, scope: !6225)
!6227 = !DILocation(line: 1736, column: 21, scope: !6225)
!6228 = !DILocation(line: 1736, column: 32, scope: !6225)
!6229 = !DILocation(line: 1736, column: 7, scope: !6220)
!6230 = !DILocation(line: 1737, column: 22, scope: !6225)
!6231 = !DILocation(line: 1737, column: 5, scope: !6225)
!6232 = !DILocation(line: 1739, column: 3, scope: !6220)
!6233 = !DILocation(line: 1741, column: 14, scope: !6220)
!6234 = !DILocation(line: 1741, column: 12, scope: !6220)
!6235 = !DILocation(line: 1742, column: 7, scope: !6236)
!6236 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 1742, column: 7)
!6237 = !DILocation(line: 1742, column: 16, scope: !6236)
!6238 = !DILocation(line: 1742, column: 7, scope: !6220)
!6239 = !DILocation(line: 1743, column: 5, scope: !6236)
!6240 = !DILocation(line: 1745, column: 3, scope: !6220)
!6241 = !DILocation(line: 1747, column: 7, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 1747, column: 7)
!6243 = !DILocation(line: 1747, column: 16, scope: !6242)
!6244 = !DILocation(line: 1747, column: 7, scope: !6220)
!6245 = !DILocation(line: 1748, column: 5, scope: !6242)
!6246 = !DILocation(line: 1750, column: 3, scope: !6220)
!6247 = !DILocation(line: 1751, column: 7, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 1751, column: 7)
!6249 = !DILocation(line: 1751, column: 17, scope: !6248)
!6250 = !DILocation(line: 1751, column: 21, scope: !6248)
!6251 = !DILocation(line: 1751, column: 32, scope: !6248)
!6252 = !DILocation(line: 1751, column: 7, scope: !6220)
!6253 = !DILocation(line: 1752, column: 22, scope: !6248)
!6254 = !DILocation(line: 1752, column: 33, scope: !6248)
!6255 = !DILocation(line: 1752, column: 5, scope: !6248)
!6256 = !DILocation(line: 1753, column: 7, scope: !6257)
!6257 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 1753, column: 7)
!6258 = !DILocation(line: 1753, column: 22, scope: !6257)
!6259 = !DILocation(line: 1753, column: 7, scope: !6220)
!6260 = !DILocation(line: 1754, column: 5, scope: !6257)
!6261 = !DILocation(line: 1754, column: 20, scope: !6257)
!6262 = !DILocation(line: 1755, column: 3, scope: !6220)
!6263 = distinct !DISubprogram(name: "strip_predict_hints", scope: !3, file: !3, line: 1291, type: !3505, scopeLine: 1292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6264 = !DILocalVariable(name: "bb", scope: !6263, file: !3, line: 1293, type: !2653)
!6265 = !DILocation(line: 1293, column: 15, scope: !6263)
!6266 = !DILocalVariable(name: "ass_stmt", scope: !6263, file: !3, line: 1294, type: !2689)
!6267 = !DILocation(line: 1294, column: 10, scope: !6263)
!6268 = !DILocalVariable(name: "var", scope: !6263, file: !3, line: 1295, type: !2021)
!6269 = !DILocation(line: 1295, column: 8, scope: !6263)
!6270 = !DILocation(line: 1297, column: 3, scope: !6271)
!6271 = distinct !DILexicalBlock(scope: !6263, file: !3, line: 1297, column: 3)
!6272 = !DILocation(line: 1297, column: 3, scope: !6273)
!6273 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 1297, column: 3)
!6274 = !DILocalVariable(name: "bi", scope: !6275, file: !3, line: 1299, type: !4969)
!6275 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 1298, column: 5)
!6276 = !DILocation(line: 1299, column: 28, scope: !6275)
!6277 = !DILocation(line: 1300, column: 31, scope: !6278)
!6278 = distinct !DILexicalBlock(scope: !6275, file: !3, line: 1300, column: 7)
!6279 = !DILocation(line: 1300, column: 17, scope: !6278)
!6280 = !DILocation(line: 1300, column: 12, scope: !6278)
!6281 = !DILocation(line: 1300, column: 37, scope: !6282)
!6282 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 1300, column: 7)
!6283 = !DILocation(line: 1300, column: 36, scope: !6282)
!6284 = !DILocation(line: 1300, column: 7, scope: !6278)
!6285 = !DILocalVariable(name: "stmt", scope: !6286, file: !3, line: 1302, type: !2689)
!6286 = distinct !DILexicalBlock(scope: !6282, file: !3, line: 1301, column: 2)
!6287 = !DILocation(line: 1302, column: 11, scope: !6286)
!6288 = !DILocation(line: 1302, column: 18, scope: !6286)
!6289 = !DILocation(line: 1304, column: 21, scope: !6290)
!6290 = distinct !DILexicalBlock(scope: !6286, file: !3, line: 1304, column: 8)
!6291 = !DILocation(line: 1304, column: 8, scope: !6290)
!6292 = !DILocation(line: 1304, column: 27, scope: !6290)
!6293 = !DILocation(line: 1304, column: 8, scope: !6286)
!6294 = !DILocation(line: 1306, column: 8, scope: !6295)
!6295 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 1305, column: 6)
!6296 = !DILocation(line: 1307, column: 8, scope: !6295)
!6297 = distinct !{!6297, !6284, !6298}
!6298 = !DILocation(line: 1325, column: 2, scope: !6278)
!6299 = !DILocation(line: 1309, column: 26, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !6290, file: !3, line: 1309, column: 13)
!6301 = !DILocation(line: 1309, column: 13, scope: !6300)
!6302 = !DILocation(line: 1309, column: 32, scope: !6300)
!6303 = !DILocation(line: 1309, column: 13, scope: !6290)
!6304 = !DILocalVariable(name: "fndecl", scope: !6305, file: !3, line: 1311, type: !2021)
!6305 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 1310, column: 6)
!6306 = !DILocation(line: 1311, column: 13, scope: !6305)
!6307 = !DILocation(line: 1311, column: 42, scope: !6305)
!6308 = !DILocation(line: 1311, column: 22, scope: !6305)
!6309 = !DILocation(line: 1313, column: 12, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6305, file: !3, line: 1313, column: 12)
!6311 = !DILocation(line: 1314, column: 5, scope: !6310)
!6312 = !DILocation(line: 1314, column: 8, scope: !6310)
!6313 = !DILocation(line: 1314, column: 37, scope: !6310)
!6314 = !DILocation(line: 1315, column: 5, scope: !6310)
!6315 = !DILocation(line: 1315, column: 8, scope: !6310)
!6316 = !DILocation(line: 1315, column: 36, scope: !6310)
!6317 = !DILocation(line: 1316, column: 5, scope: !6310)
!6318 = !DILocation(line: 1316, column: 30, scope: !6310)
!6319 = !DILocation(line: 1316, column: 8, scope: !6310)
!6320 = !DILocation(line: 1316, column: 36, scope: !6310)
!6321 = !DILocation(line: 1313, column: 12, scope: !6305)
!6322 = !DILocation(line: 1318, column: 28, scope: !6323)
!6323 = distinct !DILexicalBlock(scope: !6310, file: !3, line: 1317, column: 3)
!6324 = !DILocation(line: 1318, column: 11, scope: !6323)
!6325 = !DILocation(line: 1318, column: 9, scope: !6323)
!6326 = !DILocation(line: 1319, column: 16, scope: !6323)
!6327 = !DILocation(line: 1319, column: 14, scope: !6323)
!6328 = !DILocation(line: 1321, column: 23, scope: !6323)
!6329 = !DILocation(line: 1321, column: 5, scope: !6323)
!6330 = !DILocation(line: 1322, column: 3, scope: !6323)
!6331 = !DILocation(line: 1323, column: 6, scope: !6305)
!6332 = !DILocation(line: 1324, column: 4, scope: !6286)
!6333 = !DILocation(line: 1300, column: 7, scope: !6282)
!6334 = !DILocation(line: 1326, column: 5, scope: !6275)
!6335 = distinct !{!6335, !6270, !6336}
!6336 = !DILocation(line: 1326, column: 5, scope: !6271)
!6337 = !DILocation(line: 1327, column: 3, scope: !6263)
!6338 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !153, file: !153, line: 85, type: !6339, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6339 = !DISubroutineType(types: !6340)
!6340 = !{!7, !6341}
!6341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6342, size: 64)
!6342 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2009)
!6343 = !DILocalVariable(name: "vec_", arg: 1, scope: !6338, file: !153, line: 85, type: !6341)
!6344 = !DILocation(line: 85, column: 1, scope: !6338)
!6345 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !153, file: !153, line: 85, type: !6346, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6346 = !DISubroutineType(types: !6347)
!6347 = !{!2016, !6341, !7}
!6348 = !DILocalVariable(name: "vec_", arg: 1, scope: !6345, file: !153, line: 85, type: !6341)
!6349 = !DILocation(line: 85, column: 1, scope: !6345)
!6350 = !DILocalVariable(name: "ix_", arg: 2, scope: !6345, file: !153, line: 85, type: !7)
!6351 = !DILocation(line: 0, scope: !6345)
!6352 = distinct !DISubprogram(name: "can_predict_insn_p", scope: !3, file: !3, line: 555, type: !4267, scopeLine: 556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6353 = !DILocalVariable(name: "insn", arg: 1, scope: !6352, file: !3, line: 555, type: !4269)
!6354 = !DILocation(line: 555, column: 31, scope: !6352)
!6355 = !DILocation(line: 557, column: 11, scope: !6352)
!6356 = !DILocation(line: 558, column: 4, scope: !6352)
!6357 = !DILocation(line: 558, column: 23, scope: !6352)
!6358 = !DILocation(line: 558, column: 7, scope: !6352)
!6359 = !DILocation(line: 559, column: 4, scope: !6352)
!6360 = !DILocation(line: 559, column: 7, scope: !6352)
!6361 = !DILocation(line: 559, column: 49, scope: !6352)
!6362 = !DILocation(line: 0, scope: !6352)
!6363 = !DILocation(line: 557, column: 10, scope: !6352)
!6364 = !DILocation(line: 557, column: 3, scope: !6352)
!6365 = distinct !DISubprogram(name: "set_even_probabilities", scope: !3, file: !3, line: 630, type: !4140, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6366 = !DILocalVariable(name: "bb", arg: 1, scope: !6365, file: !3, line: 630, type: !2653)
!6367 = !DILocation(line: 630, column: 37, scope: !6365)
!6368 = !DILocalVariable(name: "nedges", scope: !6365, file: !3, line: 632, type: !1954)
!6369 = !DILocation(line: 632, column: 7, scope: !6365)
!6370 = !DILocalVariable(name: "e", scope: !6365, file: !3, line: 633, type: !1961)
!6371 = !DILocation(line: 633, column: 8, scope: !6365)
!6372 = !DILocalVariable(name: "ei", scope: !6365, file: !3, line: 634, type: !4940)
!6373 = !DILocation(line: 634, column: 17, scope: !6365)
!6374 = !DILocation(line: 636, column: 3, scope: !6375)
!6375 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 636, column: 3)
!6376 = !DILocation(line: 636, column: 3, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6375, file: !3, line: 636, column: 3)
!6378 = !DILocation(line: 637, column: 11, scope: !6379)
!6379 = distinct !DILexicalBlock(scope: !6377, file: !3, line: 637, column: 9)
!6380 = !DILocation(line: 637, column: 14, scope: !6379)
!6381 = !DILocation(line: 637, column: 20, scope: !6379)
!6382 = !DILocation(line: 637, column: 9, scope: !6377)
!6383 = !DILocation(line: 638, column: 14, scope: !6379)
!6384 = !DILocation(line: 638, column: 7, scope: !6379)
!6385 = !DILocation(line: 637, column: 43, scope: !6379)
!6386 = distinct !{!6386, !6374, !6387}
!6387 = !DILocation(line: 638, column: 14, scope: !6375)
!6388 = !DILocation(line: 639, column: 3, scope: !6389)
!6389 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 639, column: 3)
!6390 = !DILocation(line: 639, column: 3, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6389, file: !3, line: 639, column: 3)
!6392 = !DILocation(line: 640, column: 11, scope: !6393)
!6393 = distinct !DILexicalBlock(scope: !6391, file: !3, line: 640, column: 9)
!6394 = !DILocation(line: 640, column: 14, scope: !6393)
!6395 = !DILocation(line: 640, column: 20, scope: !6393)
!6396 = !DILocation(line: 640, column: 9, scope: !6391)
!6397 = !DILocation(line: 641, column: 44, scope: !6393)
!6398 = !DILocation(line: 641, column: 51, scope: !6393)
!6399 = !DILocation(line: 641, column: 42, scope: !6393)
!6400 = !DILocation(line: 641, column: 58, scope: !6393)
!6401 = !DILocation(line: 641, column: 56, scope: !6393)
!6402 = !DILocation(line: 641, column: 7, scope: !6393)
!6403 = !DILocation(line: 641, column: 10, scope: !6393)
!6404 = !DILocation(line: 641, column: 22, scope: !6393)
!6405 = !DILocation(line: 643, column: 7, scope: !6393)
!6406 = !DILocation(line: 643, column: 10, scope: !6393)
!6407 = !DILocation(line: 643, column: 22, scope: !6393)
!6408 = !DILocation(line: 640, column: 43, scope: !6393)
!6409 = distinct !{!6409, !6388, !6410}
!6410 = !DILocation(line: 643, column: 24, scope: !6389)
!6411 = !DILocation(line: 644, column: 1, scope: !6365)
!6412 = distinct !DISubprogram(name: "dump_prediction", scope: !3, file: !3, line: 595, type: !6413, scopeLine: 597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6413 = !DISubroutineType(types: !6414)
!6414 = !{null, !6415, !732, !1954, !2653, !1954}
!6415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6416, size: 64)
!6416 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !6417, line: 7, baseType: !6418)
!6417 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!6418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !6419, line: 49, size: 1728, elements: !6420)
!6419 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!6420 = !{!6421, !6422, !6423, !6424, !6425, !6426, !6427, !6428, !6429, !6430, !6431, !6432, !6433, !6436, !6438, !6439, !6440, !6443, !6444, !6445, !6446, !6449, !6451, !6454, !6457, !6458, !6459, !6460, !6461}
!6421 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6418, file: !6419, line: 51, baseType: !1954, size: 32)
!6422 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6418, file: !6419, line: 54, baseType: !2285, size: 64, offset: 64)
!6423 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6418, file: !6419, line: 55, baseType: !2285, size: 64, offset: 128)
!6424 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6418, file: !6419, line: 56, baseType: !2285, size: 64, offset: 192)
!6425 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6418, file: !6419, line: 57, baseType: !2285, size: 64, offset: 256)
!6426 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6418, file: !6419, line: 58, baseType: !2285, size: 64, offset: 320)
!6427 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6418, file: !6419, line: 59, baseType: !2285, size: 64, offset: 384)
!6428 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6418, file: !6419, line: 60, baseType: !2285, size: 64, offset: 448)
!6429 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6418, file: !6419, line: 61, baseType: !2285, size: 64, offset: 512)
!6430 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6418, file: !6419, line: 64, baseType: !2285, size: 64, offset: 576)
!6431 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6418, file: !6419, line: 65, baseType: !2285, size: 64, offset: 640)
!6432 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6418, file: !6419, line: 66, baseType: !2285, size: 64, offset: 704)
!6433 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6418, file: !6419, line: 68, baseType: !6434, size: 64, offset: 768)
!6434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6435, size: 64)
!6435 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !6419, line: 36, flags: DIFlagFwdDecl)
!6436 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6418, file: !6419, line: 70, baseType: !6437, size: 64, offset: 832)
!6437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6418, size: 64)
!6438 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6418, file: !6419, line: 72, baseType: !1954, size: 32, offset: 896)
!6439 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6418, file: !6419, line: 73, baseType: !1954, size: 32, offset: 928)
!6440 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6418, file: !6419, line: 74, baseType: !6441, size: 64, offset: 960)
!6441 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !6442, line: 152, baseType: !2076)
!6442 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!6443 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6418, file: !6419, line: 77, baseType: !3839, size: 16, offset: 1024)
!6444 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6418, file: !6419, line: 78, baseType: !3206, size: 8, offset: 1040)
!6445 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6418, file: !6419, line: 79, baseType: !2118, size: 8, offset: 1048)
!6446 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6418, file: !6419, line: 81, baseType: !6447, size: 64, offset: 1088)
!6447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6448, size: 64)
!6448 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !6419, line: 43, baseType: null)
!6449 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6418, file: !6419, line: 89, baseType: !6450, size: 64, offset: 1152)
!6450 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !6442, line: 153, baseType: !2076)
!6451 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6418, file: !6419, line: 91, baseType: !6452, size: 64, offset: 1216)
!6452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6453, size: 64)
!6453 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !6419, line: 37, flags: DIFlagFwdDecl)
!6454 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6418, file: !6419, line: 92, baseType: !6455, size: 64, offset: 1280)
!6455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6456, size: 64)
!6456 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !6419, line: 38, flags: DIFlagFwdDecl)
!6457 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6418, file: !6419, line: 93, baseType: !6437, size: 64, offset: 1344)
!6458 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6418, file: !6419, line: 94, baseType: !1987, size: 64, offset: 1408)
!6459 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6418, file: !6419, line: 95, baseType: !2591, size: 64, offset: 1472)
!6460 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6418, file: !6419, line: 96, baseType: !1954, size: 32, offset: 1536)
!6461 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6418, file: !6419, line: 98, baseType: !6462, size: 160, offset: 1568)
!6462 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2119, size: 160, elements: !6463)
!6463 = !{!6464}
!6464 = !DISubrange(count: 20)
!6465 = !DILocalVariable(name: "file", arg: 1, scope: !6412, file: !3, line: 595, type: !6415)
!6466 = !DILocation(line: 595, column: 24, scope: !6412)
!6467 = !DILocalVariable(name: "predictor", arg: 2, scope: !6412, file: !3, line: 595, type: !732)
!6468 = !DILocation(line: 595, column: 48, scope: !6412)
!6469 = !DILocalVariable(name: "probability", arg: 3, scope: !6412, file: !3, line: 595, type: !1954)
!6470 = !DILocation(line: 595, column: 63, scope: !6412)
!6471 = !DILocalVariable(name: "bb", arg: 4, scope: !6412, file: !3, line: 596, type: !2653)
!6472 = !DILocation(line: 596, column: 16, scope: !6412)
!6473 = !DILocalVariable(name: "used", arg: 5, scope: !6412, file: !3, line: 596, type: !1954)
!6474 = !DILocation(line: 596, column: 24, scope: !6412)
!6475 = !DILocalVariable(name: "e", scope: !6412, file: !3, line: 598, type: !1961)
!6476 = !DILocation(line: 598, column: 8, scope: !6412)
!6477 = !DILocalVariable(name: "ei", scope: !6412, file: !3, line: 599, type: !4940)
!6478 = !DILocation(line: 599, column: 17, scope: !6412)
!6479 = !DILocation(line: 601, column: 8, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6412, file: !3, line: 601, column: 7)
!6481 = !DILocation(line: 601, column: 7, scope: !6412)
!6482 = !DILocation(line: 602, column: 5, scope: !6480)
!6483 = !DILocation(line: 604, column: 3, scope: !6484)
!6484 = distinct !DILexicalBlock(scope: !6412, file: !3, line: 604, column: 3)
!6485 = !DILocation(line: 604, column: 3, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6484, file: !3, line: 604, column: 3)
!6487 = !DILocation(line: 605, column: 12, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 605, column: 9)
!6489 = !DILocation(line: 605, column: 15, scope: !6488)
!6490 = !DILocation(line: 605, column: 21, scope: !6488)
!6491 = !DILocation(line: 605, column: 9, scope: !6486)
!6492 = !DILocation(line: 606, column: 7, scope: !6488)
!6493 = !DILocation(line: 605, column: 36, scope: !6488)
!6494 = distinct !{!6494, !6483, !6495}
!6495 = !DILocation(line: 606, column: 7, scope: !6484)
!6496 = !DILocation(line: 608, column: 12, scope: !6412)
!6497 = !DILocation(line: 609, column: 20, scope: !6412)
!6498 = !DILocation(line: 609, column: 5, scope: !6412)
!6499 = !DILocation(line: 609, column: 31, scope: !6412)
!6500 = !DILocation(line: 610, column: 5, scope: !6412)
!6501 = !DILocation(line: 610, column: 31, scope: !6412)
!6502 = !DILocation(line: 610, column: 43, scope: !6412)
!6503 = !DILocation(line: 610, column: 51, scope: !6412)
!6504 = !DILocation(line: 608, column: 3, scope: !6412)
!6505 = !DILocation(line: 612, column: 7, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6412, file: !3, line: 612, column: 7)
!6507 = !DILocation(line: 612, column: 11, scope: !6506)
!6508 = !DILocation(line: 612, column: 7, scope: !6412)
!6509 = !DILocation(line: 614, column: 16, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 613, column: 5)
!6511 = !DILocation(line: 614, column: 7, scope: !6510)
!6512 = !DILocation(line: 615, column: 16, scope: !6510)
!6513 = !DILocation(line: 615, column: 49, scope: !6510)
!6514 = !DILocation(line: 615, column: 53, scope: !6510)
!6515 = !DILocation(line: 615, column: 7, scope: !6510)
!6516 = !DILocation(line: 616, column: 11, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 616, column: 11)
!6518 = !DILocation(line: 616, column: 11, scope: !6510)
!6519 = !DILocation(line: 618, column: 13, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6517, file: !3, line: 617, column: 2)
!6521 = !DILocation(line: 618, column: 4, scope: !6520)
!6522 = !DILocation(line: 619, column: 13, scope: !6520)
!6523 = !DILocation(line: 619, column: 46, scope: !6520)
!6524 = !DILocation(line: 619, column: 49, scope: !6520)
!6525 = !DILocation(line: 619, column: 4, scope: !6520)
!6526 = !DILocation(line: 620, column: 13, scope: !6520)
!6527 = !DILocation(line: 620, column: 32, scope: !6520)
!6528 = !DILocation(line: 620, column: 35, scope: !6520)
!6529 = !DILocation(line: 620, column: 41, scope: !6520)
!6530 = !DILocation(line: 620, column: 51, scope: !6520)
!6531 = !DILocation(line: 620, column: 55, scope: !6520)
!6532 = !DILocation(line: 620, column: 49, scope: !6520)
!6533 = !DILocation(line: 620, column: 4, scope: !6520)
!6534 = !DILocation(line: 621, column: 2, scope: !6520)
!6535 = !DILocation(line: 622, column: 5, scope: !6510)
!6536 = !DILocation(line: 624, column: 12, scope: !6412)
!6537 = !DILocation(line: 624, column: 3, scope: !6412)
!6538 = !DILocation(line: 625, column: 1, scope: !6412)
!6539 = distinct !DISubprogram(name: "single_succ_p", scope: !142, file: !142, line: 626, type: !3552, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6540 = !DILocalVariable(name: "bb", arg: 1, scope: !6539, file: !142, line: 626, type: !3554)
!6541 = !DILocation(line: 626, column: 34, scope: !6539)
!6542 = !DILocation(line: 628, column: 10, scope: !6539)
!6543 = !DILocation(line: 628, column: 33, scope: !6539)
!6544 = !DILocation(line: 628, column: 3, scope: !6539)
!6545 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !142, file: !142, line: 150, type: !6546, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6546 = !DISubroutineType(types: !6547)
!6547 = !{!1961, !4412, !7}
!6548 = !DILocalVariable(name: "vec_", arg: 1, scope: !6545, file: !142, line: 150, type: !4412)
!6549 = !DILocation(line: 150, column: 1, scope: !6545)
!6550 = !DILocalVariable(name: "ix_", arg: 2, scope: !6545, file: !142, line: 150, type: !7)
!6551 = !DILocation(line: 0, scope: !6545)
!6552 = distinct !DISubprogram(name: "apply_return_prediction", scope: !3, file: !3, line: 1491, type: !3487, scopeLine: 1492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6553 = !DILocalVariable(name: "return_stmt", scope: !6552, file: !3, line: 1493, type: !2689)
!6554 = !DILocation(line: 1493, column: 10, scope: !6552)
!6555 = !DILocalVariable(name: "return_val", scope: !6552, file: !3, line: 1494, type: !2021)
!6556 = !DILocation(line: 1494, column: 8, scope: !6552)
!6557 = !DILocalVariable(name: "e", scope: !6552, file: !3, line: 1495, type: !1961)
!6558 = !DILocation(line: 1495, column: 8, scope: !6552)
!6559 = !DILocalVariable(name: "phi", scope: !6552, file: !3, line: 1496, type: !2689)
!6560 = !DILocation(line: 1496, column: 10, scope: !6552)
!6561 = !DILocalVariable(name: "phi_num_args", scope: !6552, file: !3, line: 1497, type: !1954)
!6562 = !DILocation(line: 1497, column: 7, scope: !6552)
!6563 = !DILocalVariable(name: "i", scope: !6552, file: !3, line: 1497, type: !1954)
!6564 = !DILocation(line: 1497, column: 21, scope: !6552)
!6565 = !DILocalVariable(name: "pred", scope: !6552, file: !3, line: 1498, type: !732)
!6566 = !DILocation(line: 1498, column: 21, scope: !6552)
!6567 = !DILocalVariable(name: "direction", scope: !6552, file: !3, line: 1499, type: !941)
!6568 = !DILocation(line: 1499, column: 19, scope: !6552)
!6569 = !DILocalVariable(name: "ei", scope: !6552, file: !3, line: 1500, type: !4940)
!6570 = !DILocation(line: 1500, column: 17, scope: !6552)
!6571 = !DILocation(line: 1502, column: 3, scope: !6572)
!6572 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1502, column: 3)
!6573 = !DILocation(line: 1502, column: 3, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6572, file: !3, line: 1502, column: 3)
!6575 = !DILocation(line: 1504, column: 32, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 1503, column: 5)
!6577 = !DILocation(line: 1504, column: 35, scope: !6576)
!6578 = !DILocation(line: 1504, column: 21, scope: !6576)
!6579 = !DILocation(line: 1504, column: 19, scope: !6576)
!6580 = !DILocation(line: 1505, column: 11, scope: !6581)
!6581 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 1505, column: 11)
!6582 = !DILocation(line: 1506, column: 4, scope: !6581)
!6583 = !DILocation(line: 1506, column: 20, scope: !6581)
!6584 = !DILocation(line: 1506, column: 7, scope: !6581)
!6585 = !DILocation(line: 1506, column: 33, scope: !6581)
!6586 = !DILocation(line: 1505, column: 11, scope: !6576)
!6587 = !DILocation(line: 1507, column: 2, scope: !6581)
!6588 = !DILocation(line: 1508, column: 5, scope: !6576)
!6589 = distinct !{!6589, !6571, !6590}
!6590 = !DILocation(line: 1508, column: 5, scope: !6572)
!6591 = !DILocation(line: 1509, column: 8, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1509, column: 7)
!6593 = !DILocation(line: 1509, column: 7, scope: !6552)
!6594 = !DILocation(line: 1510, column: 5, scope: !6592)
!6595 = !DILocation(line: 1511, column: 38, scope: !6552)
!6596 = !DILocation(line: 1511, column: 16, scope: !6552)
!6597 = !DILocation(line: 1511, column: 14, scope: !6552)
!6598 = !DILocation(line: 1512, column: 8, scope: !6599)
!6599 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1512, column: 7)
!6600 = !DILocation(line: 1512, column: 7, scope: !6552)
!6601 = !DILocation(line: 1513, column: 5, scope: !6599)
!6602 = !DILocation(line: 1514, column: 7, scope: !6603)
!6603 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1514, column: 7)
!6604 = !DILocation(line: 1514, column: 30, scope: !6603)
!6605 = !DILocation(line: 1515, column: 7, scope: !6603)
!6606 = !DILocation(line: 1515, column: 11, scope: !6603)
!6607 = !DILocation(line: 1516, column: 7, scope: !6603)
!6608 = !DILocation(line: 1516, column: 23, scope: !6603)
!6609 = !DILocation(line: 1516, column: 10, scope: !6603)
!6610 = !DILocation(line: 1516, column: 55, scope: !6603)
!6611 = !DILocation(line: 1514, column: 7, scope: !6552)
!6612 = !DILocation(line: 1517, column: 5, scope: !6603)
!6613 = !DILocation(line: 1518, column: 9, scope: !6552)
!6614 = !DILocation(line: 1518, column: 7, scope: !6552)
!6615 = !DILocation(line: 1519, column: 39, scope: !6552)
!6616 = !DILocation(line: 1519, column: 18, scope: !6552)
!6617 = !DILocation(line: 1519, column: 16, scope: !6552)
!6618 = !DILocation(line: 1520, column: 29, scope: !6552)
!6619 = !DILocation(line: 1520, column: 10, scope: !6552)
!6620 = !DILocation(line: 1520, column: 8, scope: !6552)
!6621 = !DILocation(line: 1525, column: 10, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1525, column: 3)
!6623 = !DILocation(line: 1525, column: 8, scope: !6622)
!6624 = !DILocation(line: 1525, column: 15, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 1525, column: 3)
!6626 = !DILocation(line: 1525, column: 19, scope: !6625)
!6627 = !DILocation(line: 1525, column: 17, scope: !6625)
!6628 = !DILocation(line: 1525, column: 3, scope: !6622)
!6629 = !DILocation(line: 1526, column: 9, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6625, file: !3, line: 1526, column: 9)
!6631 = !DILocation(line: 1526, column: 36, scope: !6630)
!6632 = !DILocation(line: 1526, column: 17, scope: !6630)
!6633 = !DILocation(line: 1526, column: 14, scope: !6630)
!6634 = !DILocation(line: 1526, column: 9, scope: !6625)
!6635 = !DILocation(line: 1527, column: 7, scope: !6630)
!6636 = !DILocation(line: 1526, column: 68, scope: !6630)
!6637 = !DILocation(line: 1525, column: 34, scope: !6625)
!6638 = !DILocation(line: 1525, column: 3, scope: !6625)
!6639 = distinct !{!6639, !6628, !6640}
!6640 = !DILocation(line: 1527, column: 7, scope: !6622)
!6641 = !DILocation(line: 1528, column: 7, scope: !6642)
!6642 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 1528, column: 7)
!6643 = !DILocation(line: 1528, column: 12, scope: !6642)
!6644 = !DILocation(line: 1528, column: 9, scope: !6642)
!6645 = !DILocation(line: 1528, column: 7, scope: !6552)
!6646 = !DILocation(line: 1529, column: 12, scope: !6647)
!6647 = distinct !DILexicalBlock(scope: !6642, file: !3, line: 1529, column: 5)
!6648 = !DILocation(line: 1529, column: 10, scope: !6647)
!6649 = !DILocation(line: 1529, column: 17, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 1529, column: 5)
!6651 = !DILocation(line: 1529, column: 21, scope: !6650)
!6652 = !DILocation(line: 1529, column: 19, scope: !6650)
!6653 = !DILocation(line: 1529, column: 5, scope: !6647)
!6654 = !DILocation(line: 1531, column: 28, scope: !6655)
!6655 = distinct !DILexicalBlock(scope: !6650, file: !3, line: 1530, column: 7)
!6656 = !DILocation(line: 1531, column: 9, scope: !6655)
!6657 = !DILocation(line: 1531, column: 7, scope: !6655)
!6658 = !DILocation(line: 1532, column: 6, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6655, file: !3, line: 1532, column: 6)
!6660 = !DILocation(line: 1532, column: 11, scope: !6659)
!6661 = !DILocation(line: 1532, column: 6, scope: !6655)
!6662 = !DILocation(line: 1533, column: 51, scope: !6659)
!6663 = !DILocation(line: 1533, column: 56, scope: !6659)
!6664 = !DILocation(line: 1533, column: 30, scope: !6659)
!6665 = !DILocation(line: 1533, column: 60, scope: !6659)
!6666 = !DILocation(line: 1533, column: 65, scope: !6659)
!6667 = !DILocation(line: 1534, column: 9, scope: !6659)
!6668 = !DILocation(line: 1533, column: 4, scope: !6659)
!6669 = !DILocation(line: 1535, column: 7, scope: !6655)
!6670 = !DILocation(line: 1529, column: 36, scope: !6650)
!6671 = !DILocation(line: 1529, column: 5, scope: !6650)
!6672 = distinct !{!6672, !6653, !6673}
!6673 = !DILocation(line: 1535, column: 7, scope: !6647)
!6674 = !DILocation(line: 1536, column: 1, scope: !6552)
!6675 = distinct !DISubprogram(name: "gsi_start_bb", scope: !1125, file: !1125, line: 4418, type: !6676, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6676 = !DISubroutineType(types: !6677)
!6677 = !{!4969, !2653}
!6678 = !DILocalVariable(name: "bb", arg: 1, scope: !6675, file: !1125, line: 4418, type: !2653)
!6679 = !DILocation(line: 4418, column: 27, scope: !6675)
!6680 = !DILocalVariable(name: "i", scope: !6675, file: !1125, line: 4420, type: !4969)
!6681 = !DILocation(line: 4420, column: 24, scope: !6675)
!6682 = !DILocalVariable(name: "seq", scope: !6675, file: !1125, line: 4421, type: !2759)
!6683 = !DILocation(line: 4421, column: 14, scope: !6675)
!6684 = !DILocation(line: 4423, column: 17, scope: !6675)
!6685 = !DILocation(line: 4423, column: 9, scope: !6675)
!6686 = !DILocation(line: 4423, column: 7, scope: !6675)
!6687 = !DILocation(line: 4424, column: 29, scope: !6675)
!6688 = !DILocation(line: 4424, column: 11, scope: !6675)
!6689 = !DILocation(line: 4424, column: 5, scope: !6675)
!6690 = !DILocation(line: 4424, column: 9, scope: !6675)
!6691 = !DILocation(line: 4425, column: 11, scope: !6675)
!6692 = !DILocation(line: 4425, column: 5, scope: !6675)
!6693 = !DILocation(line: 4425, column: 9, scope: !6675)
!6694 = !DILocation(line: 4426, column: 10, scope: !6675)
!6695 = !DILocation(line: 4426, column: 5, scope: !6675)
!6696 = !DILocation(line: 4426, column: 8, scope: !6675)
!6697 = !DILocation(line: 4428, column: 3, scope: !6675)
!6698 = distinct !DISubprogram(name: "gsi_end_p", scope: !1125, file: !1125, line: 4467, type: !6699, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6699 = !DISubroutineType(types: !6700)
!6700 = !{!2137, !4969}
!6701 = !DILocalVariable(name: "i", arg: 1, scope: !6698, file: !1125, line: 4467, type: !4969)
!6702 = !DILocation(line: 4467, column: 33, scope: !6698)
!6703 = !DILocation(line: 4469, column: 12, scope: !6698)
!6704 = !DILocation(line: 4469, column: 16, scope: !6698)
!6705 = !DILocation(line: 4469, column: 10, scope: !6698)
!6706 = !DILocation(line: 4469, column: 3, scope: !6698)
!6707 = distinct !DISubprogram(name: "gsi_stmt", scope: !1125, file: !1125, line: 4501, type: !6708, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6708 = !DISubroutineType(types: !6709)
!6709 = !{!2689, !4969}
!6710 = !DILocalVariable(name: "i", arg: 1, scope: !6707, file: !1125, line: 4501, type: !4969)
!6711 = !DILocation(line: 4501, column: 32, scope: !6707)
!6712 = !DILocation(line: 4503, column: 12, scope: !6707)
!6713 = !DILocation(line: 4503, column: 17, scope: !6707)
!6714 = !DILocation(line: 4503, column: 3, scope: !6707)
!6715 = distinct !DISubprogram(name: "is_gimple_call", scope: !1125, file: !1125, line: 1870, type: !6716, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6716 = !DISubroutineType(types: !6717)
!6717 = !{!2137, !6718}
!6718 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1962, line: 60, baseType: !3469)
!6719 = !DILocalVariable(name: "gs", arg: 1, scope: !6715, file: !1125, line: 1870, type: !6718)
!6720 = !DILocation(line: 1870, column: 30, scope: !6715)
!6721 = !DILocation(line: 1872, column: 23, scope: !6715)
!6722 = !DILocation(line: 1872, column: 10, scope: !6715)
!6723 = !DILocation(line: 1872, column: 27, scope: !6715)
!6724 = !DILocation(line: 1872, column: 3, scope: !6715)
!6725 = distinct !DISubprogram(name: "predict_paths_leading_to", scope: !3, file: !3, line: 1789, type: !6726, scopeLine: 1791, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6726 = !DISubroutineType(types: !6727)
!6727 = !{null, !2653, !732, !941}
!6728 = !DILocalVariable(name: "bb", arg: 1, scope: !6725, file: !3, line: 1789, type: !2653)
!6729 = !DILocation(line: 1789, column: 39, scope: !6725)
!6730 = !DILocalVariable(name: "pred", arg: 2, scope: !6725, file: !3, line: 1789, type: !732)
!6731 = !DILocation(line: 1789, column: 61, scope: !6725)
!6732 = !DILocalVariable(name: "taken", arg: 3, scope: !6725, file: !3, line: 1790, type: !941)
!6733 = !DILocation(line: 1790, column: 22, scope: !6725)
!6734 = !DILocation(line: 1792, column: 25, scope: !6725)
!6735 = !DILocation(line: 1792, column: 29, scope: !6725)
!6736 = !DILocation(line: 1792, column: 33, scope: !6725)
!6737 = !DILocation(line: 1792, column: 39, scope: !6725)
!6738 = !DILocation(line: 1792, column: 3, scope: !6725)
!6739 = !DILocation(line: 1793, column: 1, scope: !6725)
!6740 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !1125, file: !1125, line: 1954, type: !6741, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6741 = !DISubroutineType(types: !6742)
!6742 = !{!2021, !6718}
!6743 = !DILocalVariable(name: "gs", arg: 1, scope: !6740, file: !1125, line: 1954, type: !6718)
!6744 = !DILocation(line: 1954, column: 34, scope: !6740)
!6745 = !DILocalVariable(name: "addr", scope: !6740, file: !1125, line: 1956, type: !2021)
!6746 = !DILocation(line: 1956, column: 8, scope: !6740)
!6747 = !DILocation(line: 1956, column: 31, scope: !6740)
!6748 = !DILocation(line: 1956, column: 15, scope: !6740)
!6749 = !DILocation(line: 1957, column: 7, scope: !6750)
!6750 = distinct !DILexicalBlock(scope: !6740, file: !1125, line: 1957, column: 7)
!6751 = !DILocation(line: 1957, column: 24, scope: !6750)
!6752 = !DILocation(line: 1957, column: 7, scope: !6740)
!6753 = !DILocation(line: 1958, column: 12, scope: !6750)
!6754 = !DILocation(line: 1958, column: 5, scope: !6750)
!6755 = !DILocation(line: 1959, column: 3, scope: !6740)
!6756 = !DILocation(line: 1960, column: 1, scope: !6740)
!6757 = distinct !DISubprogram(name: "gimple_code", scope: !1125, file: !1125, line: 1052, type: !6758, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6758 = !DISubroutineType(types: !6759)
!6759 = !{!1124, !6718}
!6760 = !DILocalVariable(name: "g", arg: 1, scope: !6757, file: !1125, line: 1052, type: !6718)
!6761 = !DILocation(line: 1052, column: 27, scope: !6757)
!6762 = !DILocation(line: 1054, column: 10, scope: !6757)
!6763 = !DILocation(line: 1054, column: 13, scope: !6757)
!6764 = !DILocation(line: 1054, column: 20, scope: !6757)
!6765 = !DILocation(line: 1054, column: 3, scope: !6757)
!6766 = distinct !DISubprogram(name: "gimple_predict_predictor", scope: !1125, file: !1125, line: 4321, type: !6767, scopeLine: 4322, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6767 = !DISubroutineType(types: !6768)
!6768 = !{!732, !2689}
!6769 = !DILocalVariable(name: "gs", arg: 1, scope: !6766, file: !1125, line: 4321, type: !2689)
!6770 = !DILocation(line: 4321, column: 34, scope: !6766)
!6771 = !DILocation(line: 4324, column: 31, scope: !6766)
!6772 = !DILocation(line: 4324, column: 35, scope: !6766)
!6773 = !DILocation(line: 4324, column: 42, scope: !6766)
!6774 = !DILocation(line: 4324, column: 50, scope: !6766)
!6775 = !DILocation(line: 4324, column: 3, scope: !6766)
!6776 = distinct !DISubprogram(name: "gimple_predict_outcome", scope: !1125, file: !1125, line: 4342, type: !6777, scopeLine: 4343, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6777 = !DISubroutineType(types: !6778)
!6778 = !{!941, !2689}
!6779 = !DILocalVariable(name: "gs", arg: 1, scope: !6776, file: !1125, line: 4342, type: !2689)
!6780 = !DILocation(line: 4342, column: 32, scope: !6776)
!6781 = !DILocation(line: 4345, column: 11, scope: !6776)
!6782 = !DILocation(line: 4345, column: 15, scope: !6776)
!6783 = !DILocation(line: 4345, column: 22, scope: !6776)
!6784 = !DILocation(line: 4345, column: 30, scope: !6776)
!6785 = !DILocation(line: 4345, column: 10, scope: !6776)
!6786 = !DILocation(line: 4345, column: 3, scope: !6776)
!6787 = distinct !DISubprogram(name: "gsi_next", scope: !1125, file: !1125, line: 4485, type: !6788, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6788 = !DISubroutineType(types: !6789)
!6789 = !{null, !6790}
!6790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4969, size: 64)
!6791 = !DILocalVariable(name: "i", arg: 1, scope: !6787, file: !1125, line: 4485, type: !6790)
!6792 = !DILocation(line: 4485, column: 33, scope: !6787)
!6793 = !DILocation(line: 4487, column: 12, scope: !6787)
!6794 = !DILocation(line: 4487, column: 15, scope: !6787)
!6795 = !DILocation(line: 4487, column: 20, scope: !6787)
!6796 = !DILocation(line: 4487, column: 3, scope: !6787)
!6797 = !DILocation(line: 4487, column: 6, scope: !6787)
!6798 = !DILocation(line: 4487, column: 10, scope: !6787)
!6799 = !DILocation(line: 4488, column: 1, scope: !6787)
!6800 = distinct !DISubprogram(name: "gimple_return_retval", scope: !1125, file: !1125, line: 4253, type: !6741, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6801 = !DILocalVariable(name: "gs", arg: 1, scope: !6800, file: !1125, line: 4253, type: !6718)
!6802 = !DILocation(line: 4253, column: 36, scope: !6800)
!6803 = !DILocation(line: 4256, column: 21, scope: !6800)
!6804 = !DILocation(line: 4256, column: 10, scope: !6800)
!6805 = !DILocation(line: 4256, column: 3, scope: !6800)
!6806 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !1125, file: !1125, line: 3061, type: !6807, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6807 = !DISubroutineType(types: !6808)
!6808 = !{!7, !6718}
!6809 = !DILocalVariable(name: "gs", arg: 1, scope: !6806, file: !1125, line: 3061, type: !6718)
!6810 = !DILocation(line: 3061, column: 35, scope: !6806)
!6811 = !DILocation(line: 3064, column: 10, scope: !6806)
!6812 = !DILocation(line: 3064, column: 14, scope: !6806)
!6813 = !DILocation(line: 3064, column: 25, scope: !6806)
!6814 = !DILocation(line: 3064, column: 3, scope: !6806)
!6815 = distinct !DISubprogram(name: "return_prediction", scope: !3, file: !3, line: 1450, type: !6816, scopeLine: 1451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6816 = !DISubroutineType(types: !6817)
!6817 = !{!732, !2021, !6818}
!6818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !941, size: 64)
!6819 = !DILocalVariable(name: "val", arg: 1, scope: !6815, file: !3, line: 1450, type: !2021)
!6820 = !DILocation(line: 1450, column: 25, scope: !6815)
!6821 = !DILocalVariable(name: "prediction", arg: 2, scope: !6815, file: !3, line: 1450, type: !6818)
!6822 = !DILocation(line: 1450, column: 47, scope: !6815)
!6823 = !DILocation(line: 1453, column: 8, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6815, file: !3, line: 1453, column: 7)
!6825 = !DILocation(line: 1453, column: 7, scope: !6815)
!6826 = !DILocation(line: 1454, column: 5, scope: !6824)
!6827 = !DILocation(line: 1456, column: 7, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6815, file: !3, line: 1456, column: 7)
!6829 = !DILocation(line: 1456, column: 7, scope: !6815)
!6830 = !DILocation(line: 1459, column: 26, scope: !6831)
!6831 = distinct !DILexicalBlock(scope: !6832, file: !3, line: 1459, column: 11)
!6832 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 1457, column: 5)
!6833 = !DILocation(line: 1459, column: 11, scope: !6831)
!6834 = !DILocation(line: 1459, column: 11, scope: !6832)
!6835 = !DILocation(line: 1461, column: 5, scope: !6836)
!6836 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 1460, column: 2)
!6837 = !DILocation(line: 1461, column: 16, scope: !6836)
!6838 = !DILocation(line: 1462, column: 4, scope: !6836)
!6839 = !DILocation(line: 1464, column: 5, scope: !6832)
!6840 = !DILocation(line: 1465, column: 12, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 1465, column: 12)
!6842 = !DILocation(line: 1465, column: 12, scope: !6828)
!6843 = !DILocation(line: 1469, column: 11, scope: !6844)
!6844 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 1469, column: 11)
!6845 = distinct !DILexicalBlock(scope: !6841, file: !3, line: 1466, column: 5)
!6846 = !DILocation(line: 1469, column: 27, scope: !6844)
!6847 = !DILocation(line: 1470, column: 4, scope: !6844)
!6848 = !DILocation(line: 1470, column: 25, scope: !6844)
!6849 = !DILocation(line: 1470, column: 7, scope: !6844)
!6850 = !DILocation(line: 1470, column: 30, scope: !6844)
!6851 = !DILocation(line: 1469, column: 11, scope: !6845)
!6852 = !DILocation(line: 1472, column: 5, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6844, file: !3, line: 1471, column: 2)
!6854 = !DILocation(line: 1472, column: 16, scope: !6853)
!6855 = !DILocation(line: 1473, column: 4, scope: !6853)
!6856 = !DILocation(line: 1478, column: 11, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6845, file: !3, line: 1478, column: 11)
!6858 = !DILocation(line: 1479, column: 4, scope: !6857)
!6859 = !DILocation(line: 1479, column: 24, scope: !6857)
!6860 = !DILocation(line: 1479, column: 9, scope: !6857)
!6861 = !DILocation(line: 1479, column: 29, scope: !6857)
!6862 = !DILocation(line: 1479, column: 47, scope: !6857)
!6863 = !DILocation(line: 1479, column: 33, scope: !6857)
!6864 = !DILocation(line: 1478, column: 11, scope: !6845)
!6865 = !DILocation(line: 1481, column: 5, scope: !6866)
!6866 = distinct !DILexicalBlock(scope: !6857, file: !3, line: 1480, column: 2)
!6867 = !DILocation(line: 1481, column: 16, scope: !6866)
!6868 = !DILocation(line: 1482, column: 4, scope: !6866)
!6869 = !DILocation(line: 1484, column: 5, scope: !6845)
!6870 = !DILocation(line: 1485, column: 3, scope: !6815)
!6871 = !DILocation(line: 1486, column: 1, scope: !6815)
!6872 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6873, file: !6873, line: 427, type: !6874, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6873 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!6874 = !DISubroutineType(types: !6875)
!6875 = !{!2021, !6876}
!6876 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !2720, line: 30, baseType: !6877)
!6877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6878, size: 64)
!6878 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !171, line: 1893, baseType: !2731)
!6879 = !DILocalVariable(name: "use", arg: 1, scope: !6872, file: !6873, line: 427, type: !6876)
!6880 = !DILocation(line: 427, column: 33, scope: !6872)
!6881 = !DILocation(line: 429, column: 12, scope: !6872)
!6882 = !DILocation(line: 429, column: 17, scope: !6872)
!6883 = !DILocation(line: 429, column: 10, scope: !6872)
!6884 = !DILocation(line: 429, column: 3, scope: !6872)
!6885 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6873, file: !6873, line: 442, type: !6886, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6886 = !DISubroutineType(types: !6887)
!6887 = !{!6876, !2689, !1954}
!6888 = !DILocalVariable(name: "gs", arg: 1, scope: !6885, file: !6873, line: 442, type: !2689)
!6889 = !DILocation(line: 442, column: 36, scope: !6885)
!6890 = !DILocalVariable(name: "i", arg: 2, scope: !6885, file: !6873, line: 442, type: !1954)
!6891 = !DILocation(line: 442, column: 44, scope: !6885)
!6892 = !DILocation(line: 444, column: 27, scope: !6885)
!6893 = !DILocation(line: 444, column: 31, scope: !6885)
!6894 = !DILocation(line: 444, column: 11, scope: !6885)
!6895 = !DILocation(line: 444, column: 35, scope: !6885)
!6896 = !DILocation(line: 444, column: 3, scope: !6885)
!6897 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !6873, file: !6873, line: 467, type: !6898, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6898 = !DISubroutineType(types: !6899)
!6899 = !{!1961, !2689, !2591}
!6900 = !DILocalVariable(name: "gs", arg: 1, scope: !6897, file: !6873, line: 467, type: !2689)
!6901 = !DILocation(line: 467, column: 29, scope: !6897)
!6902 = !DILocalVariable(name: "i", arg: 2, scope: !6897, file: !6873, line: 467, type: !2591)
!6903 = !DILocation(line: 467, column: 40, scope: !6897)
!6904 = !DILocation(line: 469, column: 10, scope: !6897)
!6905 = !DILocation(line: 469, column: 3, scope: !6897)
!6906 = distinct !DISubprogram(name: "gimple_op", scope: !1125, file: !1125, line: 1631, type: !6907, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6907 = !DISubroutineType(types: !6908)
!6908 = !{!2021, !6718, !7}
!6909 = !DILocalVariable(name: "gs", arg: 1, scope: !6906, file: !1125, line: 1631, type: !6718)
!6910 = !DILocation(line: 1631, column: 25, scope: !6906)
!6911 = !DILocalVariable(name: "i", arg: 2, scope: !6906, file: !1125, line: 1631, type: !7)
!6912 = !DILocation(line: 1631, column: 38, scope: !6906)
!6913 = !DILocation(line: 1633, column: 23, scope: !6914)
!6914 = distinct !DILexicalBlock(scope: !6906, file: !1125, line: 1633, column: 7)
!6915 = !DILocation(line: 1633, column: 7, scope: !6914)
!6916 = !DILocation(line: 1633, column: 7, scope: !6906)
!6917 = !DILocation(line: 1638, column: 26, scope: !6918)
!6918 = distinct !DILexicalBlock(scope: !6914, file: !1125, line: 1634, column: 5)
!6919 = !DILocation(line: 1638, column: 14, scope: !6918)
!6920 = !DILocation(line: 1638, column: 50, scope: !6918)
!6921 = !DILocation(line: 1638, column: 7, scope: !6918)
!6922 = !DILocation(line: 1641, column: 5, scope: !6914)
!6923 = !DILocation(line: 1642, column: 1, scope: !6906)
!6924 = distinct !DISubprogram(name: "gimple_has_ops", scope: !1125, file: !1125, line: 1274, type: !6716, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6925 = !DILocalVariable(name: "g", arg: 1, scope: !6924, file: !1125, line: 1274, type: !6718)
!6926 = !DILocation(line: 1274, column: 30, scope: !6924)
!6927 = !DILocation(line: 1276, column: 23, scope: !6924)
!6928 = !DILocation(line: 1276, column: 10, scope: !6924)
!6929 = !DILocation(line: 1276, column: 26, scope: !6924)
!6930 = !DILocation(line: 1276, column: 41, scope: !6924)
!6931 = !DILocation(line: 1276, column: 57, scope: !6924)
!6932 = !DILocation(line: 1276, column: 44, scope: !6924)
!6933 = !DILocation(line: 1276, column: 60, scope: !6924)
!6934 = !DILocation(line: 0, scope: !6924)
!6935 = !DILocation(line: 1276, column: 3, scope: !6924)
!6936 = distinct !DISubprogram(name: "gimple_ops", scope: !1125, file: !1125, line: 1614, type: !6937, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6937 = !DISubroutineType(types: !6938)
!6938 = !{!2724, !2689}
!6939 = !DILocalVariable(name: "gs", arg: 1, scope: !6936, file: !1125, line: 1614, type: !2689)
!6940 = !DILocation(line: 1614, column: 20, scope: !6936)
!6941 = !DILocalVariable(name: "off", scope: !6936, file: !1125, line: 1616, type: !2591)
!6942 = !DILocation(line: 1616, column: 10, scope: !6936)
!6943 = !DILocation(line: 1621, column: 56, scope: !6936)
!6944 = !DILocation(line: 1621, column: 28, scope: !6936)
!6945 = !DILocation(line: 1621, column: 9, scope: !6936)
!6946 = !DILocation(line: 1621, column: 7, scope: !6936)
!6947 = !DILocation(line: 1622, column: 3, scope: !6936)
!6948 = !DILocation(line: 1624, column: 29, scope: !6936)
!6949 = !DILocation(line: 1624, column: 20, scope: !6936)
!6950 = !DILocation(line: 1624, column: 34, scope: !6936)
!6951 = !DILocation(line: 1624, column: 32, scope: !6936)
!6952 = !DILocation(line: 1624, column: 10, scope: !6936)
!6953 = !DILocation(line: 1624, column: 3, scope: !6936)
!6954 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !1125, file: !1125, line: 1073, type: !6955, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6955 = !DISubroutineType(types: !6956)
!6956 = !{!1163, !2689}
!6957 = !DILocalVariable(name: "gs", arg: 1, scope: !6954, file: !1125, line: 1073, type: !2689)
!6958 = !DILocation(line: 1073, column: 36, scope: !6954)
!6959 = !DILocation(line: 1075, column: 37, scope: !6954)
!6960 = !DILocation(line: 1075, column: 24, scope: !6954)
!6961 = !DILocation(line: 1075, column: 10, scope: !6954)
!6962 = !DILocation(line: 1075, column: 3, scope: !6954)
!6963 = distinct !DISubprogram(name: "gss_for_code", scope: !1125, file: !1125, line: 1061, type: !6964, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6964 = !DISubroutineType(types: !6965)
!6965 = !{!1163, !1124}
!6966 = !DILocalVariable(name: "code", arg: 1, scope: !6963, file: !1125, line: 1061, type: !1124)
!6967 = !DILocation(line: 1061, column: 32, scope: !6963)
!6968 = !DILocation(line: 1066, column: 24, scope: !6963)
!6969 = !DILocation(line: 1066, column: 10, scope: !6963)
!6970 = !DILocation(line: 1066, column: 3, scope: !6963)
!6971 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !1125, file: !1125, line: 3100, type: !6972, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6972 = !DISubroutineType(types: !6973)
!6973 = !{!6974, !2689, !7}
!6974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2793, size: 64)
!6975 = !DILocalVariable(name: "gs", arg: 1, scope: !6971, file: !1125, line: 3100, type: !2689)
!6976 = !DILocation(line: 3100, column: 24, scope: !6971)
!6977 = !DILocalVariable(name: "index", arg: 2, scope: !6971, file: !1125, line: 3100, type: !7)
!6978 = !DILocation(line: 3100, column: 37, scope: !6971)
!6979 = !DILocation(line: 3103, column: 3, scope: !6971)
!6980 = !DILocation(line: 3104, column: 12, scope: !6971)
!6981 = !DILocation(line: 3104, column: 16, scope: !6971)
!6982 = !DILocation(line: 3104, column: 27, scope: !6971)
!6983 = !DILocation(line: 3104, column: 32, scope: !6971)
!6984 = !DILocation(line: 3104, column: 3, scope: !6971)
!6985 = distinct !DISubprogram(name: "gimple_bb", scope: !1125, file: !1125, line: 1112, type: !6986, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6986 = !DISubroutineType(types: !6987)
!6987 = !{!1967, !6718}
!6988 = !DILocalVariable(name: "g", arg: 1, scope: !6985, file: !1125, line: 1112, type: !6718)
!6989 = !DILocation(line: 1112, column: 25, scope: !6985)
!6990 = !DILocation(line: 1114, column: 10, scope: !6985)
!6991 = !DILocation(line: 1114, column: 13, scope: !6985)
!6992 = !DILocation(line: 1114, column: 20, scope: !6985)
!6993 = !DILocation(line: 1114, column: 3, scope: !6985)
!6994 = distinct !DISubprogram(name: "bb_seq", scope: !1125, file: !1125, line: 237, type: !6995, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!6995 = !DISubroutineType(types: !6996)
!6996 = !{!2759, !3554}
!6997 = !DILocalVariable(name: "bb", arg: 1, scope: !6994, file: !1125, line: 237, type: !3554)
!6998 = !DILocation(line: 237, column: 27, scope: !6994)
!6999 = !DILocation(line: 239, column: 13, scope: !6994)
!7000 = !DILocation(line: 239, column: 17, scope: !6994)
!7001 = !DILocation(line: 239, column: 23, scope: !6994)
!7002 = !DILocation(line: 239, column: 33, scope: !6994)
!7003 = !DILocation(line: 239, column: 36, scope: !6994)
!7004 = !DILocation(line: 239, column: 40, scope: !6994)
!7005 = !DILocation(line: 239, column: 43, scope: !6994)
!7006 = !DILocation(line: 239, column: 10, scope: !6994)
!7007 = !DILocation(line: 239, column: 53, scope: !6994)
!7008 = !DILocation(line: 239, column: 57, scope: !6994)
!7009 = !DILocation(line: 239, column: 60, scope: !6994)
!7010 = !DILocation(line: 239, column: 68, scope: !6994)
!7011 = !DILocation(line: 239, column: 3, scope: !6994)
!7012 = distinct !DISubprogram(name: "gimple_seq_first", scope: !1125, file: !1125, line: 159, type: !7013, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7013 = !DISubroutineType(types: !7014)
!7014 = !{!2684, !7015}
!7015 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1962, line: 67, baseType: !7016)
!7016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7017, size: 64)
!7017 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2681)
!7018 = !DILocalVariable(name: "s", arg: 1, scope: !7012, file: !1125, line: 159, type: !7015)
!7019 = !DILocation(line: 159, column: 36, scope: !7012)
!7020 = !DILocation(line: 161, column: 10, scope: !7012)
!7021 = !DILocation(line: 161, column: 14, scope: !7012)
!7022 = !DILocation(line: 161, column: 17, scope: !7012)
!7023 = !DILocation(line: 161, column: 3, scope: !7012)
!7024 = distinct !DISubprogram(name: "predict_paths_for_bb", scope: !3, file: !3, line: 1762, type: !7025, scopeLine: 1765, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7025 = !DISubroutineType(types: !7026)
!7026 = !{null, !2653, !2653, !732, !941}
!7027 = !DILocalVariable(name: "cur", arg: 1, scope: !7024, file: !3, line: 1762, type: !2653)
!7028 = !DILocation(line: 1762, column: 35, scope: !7024)
!7029 = !DILocalVariable(name: "bb", arg: 2, scope: !7024, file: !3, line: 1762, type: !2653)
!7030 = !DILocation(line: 1762, column: 52, scope: !7024)
!7031 = !DILocalVariable(name: "pred", arg: 3, scope: !7024, file: !3, line: 1763, type: !732)
!7032 = !DILocation(line: 1763, column: 27, scope: !7024)
!7033 = !DILocalVariable(name: "taken", arg: 4, scope: !7024, file: !3, line: 1764, type: !941)
!7034 = !DILocation(line: 1764, column: 25, scope: !7024)
!7035 = !DILocalVariable(name: "e", scope: !7024, file: !3, line: 1766, type: !1961)
!7036 = !DILocation(line: 1766, column: 8, scope: !7024)
!7037 = !DILocalVariable(name: "ei", scope: !7024, file: !3, line: 1767, type: !4940)
!7038 = !DILocation(line: 1767, column: 17, scope: !7024)
!7039 = !DILocalVariable(name: "son", scope: !7024, file: !3, line: 1768, type: !2653)
!7040 = !DILocation(line: 1768, column: 15, scope: !7024)
!7041 = !DILocation(line: 1772, column: 3, scope: !7042)
!7042 = distinct !DILexicalBlock(scope: !7024, file: !3, line: 1772, column: 3)
!7043 = !DILocation(line: 1772, column: 3, scope: !7044)
!7044 = distinct !DILexicalBlock(scope: !7042, file: !3, line: 1772, column: 3)
!7045 = !DILocation(line: 1773, column: 9, scope: !7046)
!7046 = distinct !DILexicalBlock(scope: !7044, file: !3, line: 1773, column: 9)
!7047 = !DILocation(line: 1773, column: 12, scope: !7046)
!7048 = !DILocation(line: 1773, column: 17, scope: !7046)
!7049 = !DILocation(line: 1773, column: 23, scope: !7046)
!7050 = !DILocation(line: 1774, column: 2, scope: !7046)
!7051 = !DILocation(line: 1774, column: 43, scope: !7046)
!7052 = !DILocation(line: 1774, column: 46, scope: !7046)
!7053 = !DILocation(line: 1774, column: 51, scope: !7046)
!7054 = !DILocation(line: 1774, column: 6, scope: !7046)
!7055 = !DILocation(line: 1773, column: 9, scope: !7044)
!7056 = !DILocation(line: 1776, column: 7, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !7046, file: !3, line: 1775, column: 5)
!7058 = !DILocation(line: 1777, column: 25, scope: !7057)
!7059 = !DILocation(line: 1777, column: 28, scope: !7057)
!7060 = !DILocation(line: 1777, column: 34, scope: !7057)
!7061 = !DILocation(line: 1777, column: 7, scope: !7057)
!7062 = !DILocation(line: 1778, column: 5, scope: !7057)
!7063 = !DILocation(line: 1774, column: 53, scope: !7046)
!7064 = distinct !{!7064, !7041, !7065}
!7065 = !DILocation(line: 1778, column: 5, scope: !7042)
!7066 = !DILocation(line: 1779, column: 50, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !7024, file: !3, line: 1779, column: 3)
!7068 = !DILocation(line: 1779, column: 14, scope: !7067)
!7069 = !DILocation(line: 1779, column: 12, scope: !7067)
!7070 = !DILocation(line: 1779, column: 8, scope: !7067)
!7071 = !DILocation(line: 1780, column: 8, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 1779, column: 3)
!7073 = !DILocation(line: 1779, column: 3, scope: !7067)
!7074 = !DILocation(line: 1782, column: 27, scope: !7072)
!7075 = !DILocation(line: 1782, column: 32, scope: !7072)
!7076 = !DILocation(line: 1782, column: 36, scope: !7072)
!7077 = !DILocation(line: 1782, column: 42, scope: !7072)
!7078 = !DILocation(line: 1782, column: 5, scope: !7072)
!7079 = !DILocation(line: 1781, column: 49, scope: !7072)
!7080 = !DILocation(line: 1781, column: 14, scope: !7072)
!7081 = !DILocation(line: 1781, column: 12, scope: !7072)
!7082 = !DILocation(line: 1779, column: 3, scope: !7072)
!7083 = distinct !{!7083, !7073, !7084}
!7084 = !DILocation(line: 1782, column: 47, scope: !7067)
!7085 = !DILocation(line: 1783, column: 1, scope: !7024)
!7086 = distinct !DISubprogram(name: "gimple_call_fn", scope: !1125, file: !1125, line: 1911, type: !6741, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7087 = !DILocalVariable(name: "gs", arg: 1, scope: !7086, file: !1125, line: 1911, type: !6718)
!7088 = !DILocation(line: 1911, column: 30, scope: !7086)
!7089 = !DILocation(line: 1914, column: 21, scope: !7086)
!7090 = !DILocation(line: 1914, column: 10, scope: !7086)
!7091 = !DILocation(line: 1914, column: 3, scope: !7086)
!7092 = distinct !DISubprogram(name: "fel_init", scope: !153, file: !153, line: 535, type: !7093, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7093 = !DISubroutineType(types: !7094)
!7094 = !{null, !7095, !7096, !7}
!7095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5048, size: 64)
!7096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!7097 = !DILocalVariable(name: "li", arg: 1, scope: !7092, file: !153, line: 535, type: !7095)
!7098 = !DILocation(line: 535, column: 26, scope: !7092)
!7099 = !DILocalVariable(name: "loop", arg: 2, scope: !7092, file: !153, line: 535, type: !7096)
!7100 = !DILocation(line: 535, column: 38, scope: !7092)
!7101 = !DILocalVariable(name: "flags", arg: 3, scope: !7092, file: !153, line: 535, type: !7)
!7102 = !DILocation(line: 535, column: 53, scope: !7092)
!7103 = !DILocalVariable(name: "aloop", scope: !7092, file: !153, line: 537, type: !1989)
!7104 = !DILocation(line: 537, column: 16, scope: !7092)
!7105 = !DILocalVariable(name: "i", scope: !7092, file: !153, line: 538, type: !7)
!7106 = !DILocation(line: 538, column: 12, scope: !7092)
!7107 = !DILocalVariable(name: "mn", scope: !7092, file: !153, line: 539, type: !1954)
!7108 = !DILocation(line: 539, column: 7, scope: !7092)
!7109 = !DILocation(line: 541, column: 3, scope: !7092)
!7110 = !DILocation(line: 541, column: 7, scope: !7092)
!7111 = !DILocation(line: 541, column: 11, scope: !7092)
!7112 = !DILocation(line: 542, column: 8, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7092, file: !153, line: 542, column: 7)
!7114 = !DILocation(line: 542, column: 7, scope: !7092)
!7115 = !DILocation(line: 544, column: 7, scope: !7116)
!7116 = distinct !DILexicalBlock(scope: !7113, file: !153, line: 543, column: 5)
!7117 = !DILocation(line: 544, column: 11, scope: !7116)
!7118 = !DILocation(line: 544, column: 20, scope: !7116)
!7119 = !DILocation(line: 545, column: 8, scope: !7116)
!7120 = !DILocation(line: 545, column: 13, scope: !7116)
!7121 = !DILocation(line: 546, column: 7, scope: !7116)
!7122 = !DILocation(line: 549, column: 18, scope: !7092)
!7123 = !DILocation(line: 549, column: 3, scope: !7092)
!7124 = !DILocation(line: 549, column: 7, scope: !7092)
!7125 = !DILocation(line: 549, column: 16, scope: !7092)
!7126 = !DILocation(line: 550, column: 9, scope: !7092)
!7127 = !DILocation(line: 550, column: 15, scope: !7092)
!7128 = !DILocation(line: 550, column: 8, scope: !7092)
!7129 = !DILocation(line: 550, column: 6, scope: !7092)
!7130 = !DILocation(line: 552, column: 7, scope: !7131)
!7131 = distinct !DILexicalBlock(scope: !7092, file: !153, line: 552, column: 7)
!7132 = !DILocation(line: 552, column: 13, scope: !7131)
!7133 = !DILocation(line: 552, column: 7, scope: !7092)
!7134 = !DILocation(line: 554, column: 14, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7136, file: !153, line: 554, column: 7)
!7136 = distinct !DILexicalBlock(scope: !7131, file: !153, line: 553, column: 5)
!7137 = !DILocation(line: 554, column: 12, scope: !7135)
!7138 = !DILocation(line: 554, column: 19, scope: !7139)
!7139 = distinct !DILexicalBlock(scope: !7135, file: !153, line: 554, column: 7)
!7140 = !DILocation(line: 554, column: 7, scope: !7135)
!7141 = !DILocation(line: 555, column: 6, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !7139, file: !153, line: 555, column: 6)
!7143 = !DILocation(line: 555, column: 12, scope: !7142)
!7144 = !DILocation(line: 556, column: 6, scope: !7142)
!7145 = !DILocation(line: 556, column: 9, scope: !7142)
!7146 = !DILocation(line: 556, column: 16, scope: !7142)
!7147 = !DILocation(line: 556, column: 22, scope: !7142)
!7148 = !DILocation(line: 557, column: 6, scope: !7142)
!7149 = !DILocation(line: 557, column: 9, scope: !7142)
!7150 = !DILocation(line: 557, column: 16, scope: !7142)
!7151 = !DILocation(line: 557, column: 23, scope: !7142)
!7152 = !DILocation(line: 557, column: 20, scope: !7142)
!7153 = !DILocation(line: 555, column: 6, scope: !7139)
!7154 = !DILocation(line: 558, column: 4, scope: !7142)
!7155 = !DILocation(line: 554, column: 75, scope: !7139)
!7156 = !DILocation(line: 554, column: 7, scope: !7139)
!7157 = distinct !{!7157, !7140, !7158}
!7158 = !DILocation(line: 558, column: 4, scope: !7135)
!7159 = !DILocation(line: 559, column: 5, scope: !7136)
!7160 = !DILocation(line: 560, column: 12, scope: !7161)
!7161 = distinct !DILexicalBlock(scope: !7131, file: !153, line: 560, column: 12)
!7162 = !DILocation(line: 560, column: 18, scope: !7161)
!7163 = !DILocation(line: 560, column: 12, scope: !7131)
!7164 = !DILocation(line: 563, column: 20, scope: !7165)
!7165 = distinct !DILexicalBlock(scope: !7166, file: !153, line: 563, column: 7)
!7166 = distinct !DILexicalBlock(scope: !7161, file: !153, line: 561, column: 5)
!7167 = !DILocation(line: 563, column: 35, scope: !7165)
!7168 = !DILocation(line: 563, column: 18, scope: !7165)
!7169 = !DILocation(line: 563, column: 12, scope: !7165)
!7170 = !DILocation(line: 564, column: 5, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7165, file: !153, line: 563, column: 7)
!7172 = !DILocation(line: 564, column: 12, scope: !7171)
!7173 = !DILocation(line: 564, column: 18, scope: !7171)
!7174 = !DILocation(line: 563, column: 7, scope: !7165)
!7175 = !DILocation(line: 566, column: 2, scope: !7171)
!7176 = !DILocation(line: 565, column: 13, scope: !7171)
!7177 = !DILocation(line: 565, column: 20, scope: !7171)
!7178 = !DILocation(line: 565, column: 11, scope: !7171)
!7179 = !DILocation(line: 563, column: 7, scope: !7171)
!7180 = distinct !{!7180, !7174, !7181}
!7181 = !DILocation(line: 566, column: 2, scope: !7165)
!7182 = !DILocation(line: 568, column: 7, scope: !7166)
!7183 = !DILocation(line: 570, column: 8, scope: !7184)
!7184 = distinct !DILexicalBlock(scope: !7185, file: !153, line: 570, column: 8)
!7185 = distinct !DILexicalBlock(scope: !7166, file: !153, line: 569, column: 2)
!7186 = !DILocation(line: 570, column: 15, scope: !7184)
!7187 = !DILocation(line: 570, column: 22, scope: !7184)
!7188 = !DILocation(line: 570, column: 19, scope: !7184)
!7189 = !DILocation(line: 570, column: 8, scope: !7185)
!7190 = !DILocation(line: 571, column: 6, scope: !7184)
!7191 = !DILocation(line: 573, column: 8, scope: !7192)
!7192 = distinct !DILexicalBlock(scope: !7185, file: !153, line: 573, column: 8)
!7193 = !DILocation(line: 573, column: 15, scope: !7192)
!7194 = !DILocation(line: 573, column: 8, scope: !7185)
!7195 = !DILocation(line: 575, column: 21, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7197, file: !153, line: 575, column: 8)
!7197 = distinct !DILexicalBlock(scope: !7192, file: !153, line: 574, column: 6)
!7198 = !DILocation(line: 575, column: 28, scope: !7196)
!7199 = !DILocation(line: 575, column: 19, scope: !7196)
!7200 = !DILocation(line: 575, column: 13, scope: !7196)
!7201 = !DILocation(line: 576, column: 6, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7196, file: !153, line: 575, column: 8)
!7203 = !DILocation(line: 576, column: 13, scope: !7202)
!7204 = !DILocation(line: 576, column: 19, scope: !7202)
!7205 = !DILocation(line: 575, column: 8, scope: !7196)
!7206 = !DILocation(line: 578, column: 3, scope: !7202)
!7207 = !DILocation(line: 577, column: 14, scope: !7202)
!7208 = !DILocation(line: 577, column: 21, scope: !7202)
!7209 = !DILocation(line: 577, column: 12, scope: !7202)
!7210 = !DILocation(line: 575, column: 8, scope: !7202)
!7211 = distinct !{!7211, !7205, !7212}
!7212 = !DILocation(line: 578, column: 3, scope: !7196)
!7213 = !DILocation(line: 579, column: 6, scope: !7197)
!7214 = !DILocation(line: 580, column: 26, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7192, file: !153, line: 580, column: 13)
!7216 = !DILocation(line: 580, column: 14, scope: !7215)
!7217 = !DILocation(line: 580, column: 13, scope: !7192)
!7218 = !DILocation(line: 581, column: 6, scope: !7215)
!7219 = !DILocation(line: 583, column: 26, scope: !7215)
!7220 = !DILocation(line: 583, column: 14, scope: !7215)
!7221 = !DILocation(line: 583, column: 12, scope: !7215)
!7222 = distinct !{!7222, !7182, !7223}
!7223 = !DILocation(line: 584, column: 2, scope: !7166)
!7224 = !DILocation(line: 585, column: 5, scope: !7166)
!7225 = !DILocation(line: 589, column: 15, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7161, file: !153, line: 587, column: 5)
!7227 = !DILocation(line: 589, column: 30, scope: !7226)
!7228 = !DILocation(line: 589, column: 13, scope: !7226)
!7229 = !DILocation(line: 590, column: 7, scope: !7226)
!7230 = !DILocation(line: 592, column: 8, scope: !7231)
!7231 = distinct !DILexicalBlock(scope: !7232, file: !153, line: 592, column: 8)
!7232 = distinct !DILexicalBlock(scope: !7226, file: !153, line: 591, column: 2)
!7233 = !DILocation(line: 592, column: 15, scope: !7231)
!7234 = !DILocation(line: 592, column: 22, scope: !7231)
!7235 = !DILocation(line: 592, column: 19, scope: !7231)
!7236 = !DILocation(line: 592, column: 8, scope: !7232)
!7237 = !DILocation(line: 593, column: 6, scope: !7231)
!7238 = !DILocation(line: 595, column: 8, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7232, file: !153, line: 595, column: 8)
!7240 = !DILocation(line: 595, column: 15, scope: !7239)
!7241 = !DILocation(line: 595, column: 21, scope: !7239)
!7242 = !DILocation(line: 595, column: 8, scope: !7232)
!7243 = !DILocation(line: 596, column: 14, scope: !7239)
!7244 = !DILocation(line: 596, column: 21, scope: !7239)
!7245 = !DILocation(line: 596, column: 12, scope: !7239)
!7246 = !DILocation(line: 596, column: 6, scope: !7239)
!7247 = !DILocation(line: 599, column: 8, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7239, file: !153, line: 598, column: 6)
!7249 = !DILocation(line: 599, column: 15, scope: !7248)
!7250 = !DILocation(line: 599, column: 21, scope: !7248)
!7251 = !DILocation(line: 599, column: 29, scope: !7248)
!7252 = !DILocation(line: 599, column: 32, scope: !7248)
!7253 = !DILocation(line: 599, column: 39, scope: !7248)
!7254 = !DILocation(line: 599, column: 44, scope: !7248)
!7255 = !DILocation(line: 0, scope: !7248)
!7256 = !DILocation(line: 600, column: 23, scope: !7248)
!7257 = !DILocation(line: 600, column: 11, scope: !7248)
!7258 = !DILocation(line: 600, column: 9, scope: !7248)
!7259 = distinct !{!7259, !7247, !7260}
!7260 = !DILocation(line: 600, column: 28, scope: !7248)
!7261 = !DILocation(line: 601, column: 12, scope: !7262)
!7262 = distinct !DILexicalBlock(scope: !7248, file: !153, line: 601, column: 12)
!7263 = !DILocation(line: 601, column: 18, scope: !7262)
!7264 = !DILocation(line: 601, column: 12, scope: !7248)
!7265 = !DILocation(line: 602, column: 3, scope: !7262)
!7266 = !DILocation(line: 603, column: 16, scope: !7248)
!7267 = !DILocation(line: 603, column: 23, scope: !7248)
!7268 = !DILocation(line: 603, column: 14, scope: !7248)
!7269 = distinct !{!7269, !7229, !7270}
!7270 = !DILocation(line: 605, column: 2, scope: !7226)
!7271 = !DILocation(line: 608, column: 13, scope: !7092)
!7272 = !DILocation(line: 608, column: 17, scope: !7092)
!7273 = !DILocation(line: 608, column: 3, scope: !7092)
!7274 = !DILocation(line: 609, column: 1, scope: !7092)
!7275 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !142, file: !142, line: 150, type: !7276, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7276 = !DISubroutineType(types: !7277)
!7277 = !{!1954, !4412, !7, !6050}
!7278 = !DILocalVariable(name: "vec_", arg: 1, scope: !7275, file: !142, line: 150, type: !4412)
!7279 = !DILocation(line: 150, column: 1, scope: !7275)
!7280 = !DILocalVariable(name: "ix_", arg: 2, scope: !7275, file: !142, line: 150, type: !7)
!7281 = !DILocalVariable(name: "ptr", arg: 3, scope: !7275, file: !142, line: 150, type: !6050)
!7282 = !DILocation(line: 150, column: 1, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7275, file: !142, line: 150, column: 1)
!7284 = !DILocation(line: 150, column: 1, scope: !7285)
!7285 = distinct !DILexicalBlock(scope: !7283, file: !142, line: 150, column: 1)
!7286 = !DILocation(line: 150, column: 1, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7283, file: !142, line: 150, column: 1)
!7288 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !142, file: !142, line: 152, type: !7289, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7289 = !DISubroutineType(types: !7290)
!7290 = !{null, !7291}
!7291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5071, size: 64)
!7292 = !DILocalVariable(name: "vec_", arg: 1, scope: !7288, file: !142, line: 152, type: !7291)
!7293 = !DILocation(line: 152, column: 1, scope: !7288)
!7294 = !DILocation(line: 152, column: 1, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7288, file: !142, line: 152, column: 1)
!7296 = distinct !DISubprogram(name: "fel_next", scope: !153, file: !153, line: 518, type: !7297, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7297 = !DISubroutineType(types: !7298)
!7298 = !{null, !7095, !7096}
!7299 = !DILocalVariable(name: "li", arg: 1, scope: !7296, file: !153, line: 518, type: !7095)
!7300 = !DILocation(line: 518, column: 26, scope: !7296)
!7301 = !DILocalVariable(name: "loop", arg: 2, scope: !7296, file: !153, line: 518, type: !7096)
!7302 = !DILocation(line: 518, column: 38, scope: !7296)
!7303 = !DILocalVariable(name: "anum", scope: !7296, file: !153, line: 520, type: !1954)
!7304 = !DILocation(line: 520, column: 7, scope: !7296)
!7305 = !DILocation(line: 522, column: 3, scope: !7296)
!7306 = !DILocation(line: 522, column: 10, scope: !7296)
!7307 = !DILocation(line: 524, column: 7, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7296, file: !153, line: 523, column: 5)
!7309 = !DILocation(line: 524, column: 11, scope: !7308)
!7310 = !DILocation(line: 524, column: 14, scope: !7308)
!7311 = !DILocation(line: 525, column: 25, scope: !7308)
!7312 = !DILocation(line: 525, column: 15, scope: !7308)
!7313 = !DILocation(line: 525, column: 8, scope: !7308)
!7314 = !DILocation(line: 525, column: 13, scope: !7308)
!7315 = !DILocation(line: 526, column: 12, scope: !7316)
!7316 = distinct !DILexicalBlock(scope: !7308, file: !153, line: 526, column: 11)
!7317 = !DILocation(line: 526, column: 11, scope: !7316)
!7318 = !DILocation(line: 526, column: 11, scope: !7308)
!7319 = !DILocation(line: 527, column: 2, scope: !7316)
!7320 = distinct !{!7320, !7305, !7321}
!7321 = !DILocation(line: 528, column: 5, scope: !7296)
!7322 = !DILocation(line: 530, column: 3, scope: !7296)
!7323 = !DILocation(line: 531, column: 4, scope: !7296)
!7324 = !DILocation(line: 531, column: 9, scope: !7296)
!7325 = !DILocation(line: 532, column: 1, scope: !7296)
!7326 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2636, file: !2636, line: 32, type: !7327, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7327 = !DISubroutineType(types: !7328)
!7328 = !{!3471, !1954}
!7329 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7326, file: !2636, line: 32, type: !1954)
!7330 = !DILocation(line: 32, column: 1, scope: !7326)
!7331 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !153, file: !153, line: 85, type: !7332, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7332 = !DISubroutineType(types: !7333)
!7333 = !{!1954, !6341, !7, !7096}
!7334 = !DILocalVariable(name: "vec_", arg: 1, scope: !7331, file: !153, line: 85, type: !6341)
!7335 = !DILocation(line: 85, column: 1, scope: !7331)
!7336 = !DILocalVariable(name: "ix_", arg: 2, scope: !7331, file: !153, line: 85, type: !7)
!7337 = !DILocalVariable(name: "ptr", arg: 3, scope: !7331, file: !153, line: 85, type: !7096)
!7338 = !DILocation(line: 85, column: 1, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7331, file: !153, line: 85, column: 1)
!7340 = !DILocation(line: 85, column: 1, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7339, file: !153, line: 85, column: 1)
!7342 = !DILocation(line: 85, column: 1, scope: !7343)
!7343 = distinct !DILexicalBlock(scope: !7339, file: !153, line: 85, column: 1)
!7344 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2636, file: !2636, line: 31, type: !7345, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7345 = !DISubroutineType(types: !7346)
!7346 = !{!7347, !7348, !1954}
!7347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1954, size: 64)
!7348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3476, size: 64)
!7349 = !DILocalVariable(name: "vec_", arg: 1, scope: !7344, file: !2636, line: 31, type: !7348)
!7350 = !DILocation(line: 31, column: 1, scope: !7344)
!7351 = !DILocalVariable(name: "obj_", arg: 2, scope: !7344, file: !2636, line: 31, type: !1954)
!7352 = !DILocalVariable(name: "slot_", scope: !7344, file: !2636, line: 31, type: !7347)
!7353 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2636, file: !2636, line: 31, type: !7354, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7354 = !DISubroutineType(types: !7355)
!7355 = !{!1954, !7356, !7, !7347}
!7356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7357, size: 64)
!7357 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3476)
!7358 = !DILocalVariable(name: "vec_", arg: 1, scope: !7353, file: !2636, line: 31, type: !7356)
!7359 = !DILocation(line: 31, column: 1, scope: !7353)
!7360 = !DILocalVariable(name: "ix_", arg: 2, scope: !7353, file: !2636, line: 31, type: !7)
!7361 = !DILocalVariable(name: "ptr", arg: 3, scope: !7353, file: !2636, line: 31, type: !7347)
!7362 = !DILocation(line: 31, column: 1, scope: !7363)
!7363 = distinct !DILexicalBlock(scope: !7353, file: !2636, line: 31, column: 1)
!7364 = !DILocation(line: 31, column: 1, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7363, file: !2636, line: 31, column: 1)
!7366 = !DILocation(line: 31, column: 1, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7363, file: !2636, line: 31, column: 1)
!7368 = distinct !DISubprogram(name: "get_loop", scope: !153, file: !153, line: 417, type: !7369, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7369 = !DISubroutineType(types: !7370)
!7370 = !{!1989, !7}
!7371 = !DILocalVariable(name: "num", arg: 1, scope: !7368, file: !153, line: 417, type: !7)
!7372 = !DILocation(line: 417, column: 20, scope: !7368)
!7373 = !DILocation(line: 419, column: 10, scope: !7368)
!7374 = !DILocation(line: 419, column: 3, scope: !7368)
!7375 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2636, file: !2636, line: 32, type: !7376, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7376 = !DISubroutineType(types: !7377)
!7377 = !{null, !7378}
!7378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3471, size: 64)
!7379 = !DILocalVariable(name: "vec_", arg: 1, scope: !7375, file: !2636, line: 32, type: !7378)
!7380 = !DILocation(line: 32, column: 1, scope: !7375)
!7381 = !DILocation(line: 32, column: 1, scope: !7382)
!7382 = distinct !DILexicalBlock(scope: !7375, file: !2636, line: 32, column: 1)
!7383 = distinct !DISubprogram(name: "tree_predict_by_opcode", scope: !3, file: !3, line: 1332, type: !4140, scopeLine: 1333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7384 = !DILocalVariable(name: "bb", arg: 1, scope: !7383, file: !3, line: 1332, type: !2653)
!7385 = !DILocation(line: 1332, column: 37, scope: !7383)
!7386 = !DILocalVariable(name: "stmt", scope: !7383, file: !3, line: 1334, type: !2689)
!7387 = !DILocation(line: 1334, column: 10, scope: !7383)
!7388 = !DILocation(line: 1334, column: 28, scope: !7383)
!7389 = !DILocation(line: 1334, column: 17, scope: !7383)
!7390 = !DILocalVariable(name: "then_edge", scope: !7383, file: !3, line: 1335, type: !1961)
!7391 = !DILocation(line: 1335, column: 8, scope: !7383)
!7392 = !DILocalVariable(name: "op0", scope: !7383, file: !3, line: 1336, type: !2021)
!7393 = !DILocation(line: 1336, column: 8, scope: !7383)
!7394 = !DILocalVariable(name: "op1", scope: !7383, file: !3, line: 1336, type: !2021)
!7395 = !DILocation(line: 1336, column: 13, scope: !7383)
!7396 = !DILocalVariable(name: "type", scope: !7383, file: !3, line: 1337, type: !2021)
!7397 = !DILocation(line: 1337, column: 8, scope: !7383)
!7398 = !DILocalVariable(name: "val", scope: !7383, file: !3, line: 1338, type: !2021)
!7399 = !DILocation(line: 1338, column: 8, scope: !7383)
!7400 = !DILocalVariable(name: "cmp", scope: !7383, file: !3, line: 1339, type: !203)
!7401 = !DILocation(line: 1339, column: 18, scope: !7383)
!7402 = !DILocalVariable(name: "visited", scope: !7383, file: !3, line: 1340, type: !2922)
!7403 = !DILocation(line: 1340, column: 10, scope: !7383)
!7404 = !DILocalVariable(name: "ei", scope: !7383, file: !3, line: 1341, type: !4940)
!7405 = !DILocation(line: 1341, column: 17, scope: !7383)
!7406 = !DILocation(line: 1343, column: 8, scope: !7407)
!7407 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1343, column: 7)
!7408 = !DILocation(line: 1343, column: 13, scope: !7407)
!7409 = !DILocation(line: 1343, column: 29, scope: !7407)
!7410 = !DILocation(line: 1343, column: 16, scope: !7407)
!7411 = !DILocation(line: 1343, column: 35, scope: !7407)
!7412 = !DILocation(line: 1343, column: 7, scope: !7383)
!7413 = !DILocation(line: 1344, column: 5, scope: !7407)
!7414 = !DILocation(line: 1345, column: 3, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1345, column: 3)
!7416 = !DILocation(line: 1345, column: 3, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 1345, column: 3)
!7418 = !DILocation(line: 1346, column: 9, scope: !7419)
!7419 = distinct !DILexicalBlock(scope: !7417, file: !3, line: 1346, column: 9)
!7420 = !DILocation(line: 1346, column: 20, scope: !7419)
!7421 = !DILocation(line: 1346, column: 26, scope: !7419)
!7422 = !DILocation(line: 1346, column: 9, scope: !7417)
!7423 = !DILocation(line: 1347, column: 7, scope: !7419)
!7424 = !DILocation(line: 1346, column: 28, scope: !7419)
!7425 = distinct !{!7425, !7414, !7426}
!7426 = !DILocation(line: 1347, column: 7, scope: !7415)
!7427 = !DILocation(line: 1348, column: 26, scope: !7383)
!7428 = !DILocation(line: 1348, column: 9, scope: !7383)
!7429 = !DILocation(line: 1348, column: 7, scope: !7383)
!7430 = !DILocation(line: 1349, column: 26, scope: !7383)
!7431 = !DILocation(line: 1349, column: 9, scope: !7383)
!7432 = !DILocation(line: 1349, column: 7, scope: !7383)
!7433 = !DILocation(line: 1350, column: 27, scope: !7383)
!7434 = !DILocation(line: 1350, column: 9, scope: !7383)
!7435 = !DILocation(line: 1350, column: 7, scope: !7383)
!7436 = !DILocation(line: 1351, column: 10, scope: !7383)
!7437 = !DILocation(line: 1351, column: 8, scope: !7383)
!7438 = !DILocation(line: 1352, column: 13, scope: !7383)
!7439 = !DILocation(line: 1352, column: 11, scope: !7383)
!7440 = !DILocation(line: 1353, column: 32, scope: !7383)
!7441 = !DILocation(line: 1353, column: 51, scope: !7383)
!7442 = !DILocation(line: 1353, column: 56, scope: !7383)
!7443 = !DILocation(line: 1353, column: 61, scope: !7383)
!7444 = !DILocation(line: 1353, column: 66, scope: !7383)
!7445 = !DILocation(line: 1353, column: 9, scope: !7383)
!7446 = !DILocation(line: 1353, column: 7, scope: !7383)
!7447 = !DILocation(line: 1354, column: 3, scope: !7383)
!7448 = !DILocation(line: 1355, column: 7, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1355, column: 7)
!7450 = !DILocation(line: 1355, column: 7, scope: !7383)
!7451 = !DILocation(line: 1357, column: 26, scope: !7452)
!7452 = distinct !DILexicalBlock(scope: !7453, file: !3, line: 1357, column: 11)
!7453 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 1356, column: 5)
!7454 = !DILocation(line: 1357, column: 11, scope: !7452)
!7455 = !DILocation(line: 1357, column: 11, scope: !7453)
!7456 = !DILocation(line: 1358, column: 20, scope: !7452)
!7457 = !DILocation(line: 1358, column: 2, scope: !7452)
!7458 = !DILocation(line: 1360, column: 20, scope: !7452)
!7459 = !DILocation(line: 1360, column: 2, scope: !7452)
!7460 = !DILocation(line: 1361, column: 7, scope: !7453)
!7461 = !DILocation(line: 1366, column: 7, scope: !7462)
!7462 = distinct !DILexicalBlock(scope: !7383, file: !3, line: 1366, column: 7)
!7463 = !DILocation(line: 1366, column: 7, scope: !7383)
!7464 = !DILocation(line: 1368, column: 11, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 1368, column: 11)
!7466 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 1367, column: 5)
!7467 = !DILocation(line: 1368, column: 15, scope: !7465)
!7468 = !DILocation(line: 1368, column: 11, scope: !7466)
!7469 = !DILocation(line: 1369, column: 20, scope: !7465)
!7470 = !DILocation(line: 1369, column: 2, scope: !7465)
!7471 = !DILocation(line: 1370, column: 16, scope: !7472)
!7472 = distinct !DILexicalBlock(scope: !7465, file: !3, line: 1370, column: 16)
!7473 = !DILocation(line: 1370, column: 20, scope: !7472)
!7474 = !DILocation(line: 1370, column: 16, scope: !7465)
!7475 = !DILocation(line: 1371, column: 20, scope: !7472)
!7476 = !DILocation(line: 1371, column: 2, scope: !7472)
!7477 = !DILocation(line: 1372, column: 5, scope: !7466)
!7478 = !DILocation(line: 1379, column: 13, scope: !7462)
!7479 = !DILocation(line: 1379, column: 5, scope: !7462)
!7480 = !DILocation(line: 1386, column: 6, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1386, column: 6)
!7482 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 1380, column: 7)
!7483 = !DILocation(line: 1386, column: 6, scope: !7482)
!7484 = !DILocation(line: 1390, column: 26, scope: !7485)
!7485 = distinct !DILexicalBlock(scope: !7481, file: !3, line: 1390, column: 11)
!7486 = !DILocation(line: 1390, column: 11, scope: !7485)
!7487 = !DILocation(line: 1390, column: 31, scope: !7485)
!7488 = !DILocation(line: 1390, column: 49, scope: !7485)
!7489 = !DILocation(line: 1390, column: 34, scope: !7485)
!7490 = !DILocation(line: 1390, column: 11, scope: !7481)
!7491 = !DILocation(line: 1393, column: 22, scope: !7485)
!7492 = !DILocation(line: 1393, column: 4, scope: !7485)
!7493 = !DILocation(line: 1394, column: 2, scope: !7482)
!7494 = !DILocation(line: 1401, column: 6, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1401, column: 6)
!7496 = !DILocation(line: 1401, column: 6, scope: !7482)
!7497 = !DILocation(line: 1405, column: 26, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7495, file: !3, line: 1405, column: 11)
!7499 = !DILocation(line: 1405, column: 11, scope: !7498)
!7500 = !DILocation(line: 1406, column: 4, scope: !7498)
!7501 = !DILocation(line: 1406, column: 22, scope: !7498)
!7502 = !DILocation(line: 1406, column: 7, scope: !7498)
!7503 = !DILocation(line: 1405, column: 11, scope: !7495)
!7504 = !DILocation(line: 1409, column: 22, scope: !7498)
!7505 = !DILocation(line: 1409, column: 4, scope: !7498)
!7506 = !DILocation(line: 1410, column: 2, scope: !7482)
!7507 = !DILocation(line: 1413, column: 20, scope: !7482)
!7508 = !DILocation(line: 1413, column: 2, scope: !7482)
!7509 = !DILocation(line: 1414, column: 2, scope: !7482)
!7510 = !DILocation(line: 1417, column: 20, scope: !7482)
!7511 = !DILocation(line: 1417, column: 2, scope: !7482)
!7512 = !DILocation(line: 1418, column: 2, scope: !7482)
!7513 = !DILocation(line: 1422, column: 21, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1422, column: 6)
!7515 = !DILocation(line: 1422, column: 6, scope: !7514)
!7516 = !DILocation(line: 1423, column: 6, scope: !7514)
!7517 = !DILocation(line: 1423, column: 23, scope: !7514)
!7518 = !DILocation(line: 1423, column: 9, scope: !7514)
!7519 = !DILocation(line: 1424, column: 6, scope: !7514)
!7520 = !DILocation(line: 1424, column: 28, scope: !7514)
!7521 = !DILocation(line: 1424, column: 9, scope: !7514)
!7522 = !DILocation(line: 1425, column: 6, scope: !7514)
!7523 = !DILocation(line: 1425, column: 21, scope: !7514)
!7524 = !DILocation(line: 1425, column: 9, scope: !7514)
!7525 = !DILocation(line: 1426, column: 6, scope: !7514)
!7526 = !DILocation(line: 1426, column: 20, scope: !7514)
!7527 = !DILocation(line: 1426, column: 9, scope: !7514)
!7528 = !DILocation(line: 1427, column: 6, scope: !7514)
!7529 = !DILocation(line: 1427, column: 26, scope: !7514)
!7530 = !DILocation(line: 1427, column: 9, scope: !7514)
!7531 = !DILocation(line: 1422, column: 6, scope: !7482)
!7532 = !DILocation(line: 1428, column: 22, scope: !7514)
!7533 = !DILocation(line: 1428, column: 4, scope: !7514)
!7534 = !DILocation(line: 1429, column: 2, scope: !7482)
!7535 = !DILocation(line: 1433, column: 21, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7482, file: !3, line: 1433, column: 6)
!7537 = !DILocation(line: 1433, column: 6, scope: !7536)
!7538 = !DILocation(line: 1434, column: 6, scope: !7536)
!7539 = !DILocation(line: 1434, column: 23, scope: !7536)
!7540 = !DILocation(line: 1434, column: 9, scope: !7536)
!7541 = !DILocation(line: 1435, column: 6, scope: !7536)
!7542 = !DILocation(line: 1435, column: 28, scope: !7536)
!7543 = !DILocation(line: 1435, column: 9, scope: !7536)
!7544 = !DILocation(line: 1436, column: 6, scope: !7536)
!7545 = !DILocation(line: 1436, column: 21, scope: !7536)
!7546 = !DILocation(line: 1436, column: 9, scope: !7536)
!7547 = !DILocation(line: 1437, column: 6, scope: !7536)
!7548 = !DILocation(line: 1437, column: 20, scope: !7536)
!7549 = !DILocation(line: 1437, column: 9, scope: !7536)
!7550 = !DILocation(line: 1438, column: 6, scope: !7536)
!7551 = !DILocation(line: 1438, column: 26, scope: !7536)
!7552 = !DILocation(line: 1438, column: 9, scope: !7536)
!7553 = !DILocation(line: 1433, column: 6, scope: !7482)
!7554 = !DILocation(line: 1439, column: 22, scope: !7536)
!7555 = !DILocation(line: 1439, column: 4, scope: !7536)
!7556 = !DILocation(line: 1440, column: 2, scope: !7482)
!7557 = !DILocation(line: 1443, column: 2, scope: !7482)
!7558 = !DILocation(line: 1445, column: 1, scope: !7383)
!7559 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !1125, file: !1125, line: 2241, type: !6741, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7560 = !DILocalVariable(name: "gs", arg: 1, scope: !7559, file: !1125, line: 2241, type: !6718)
!7561 = !DILocation(line: 2241, column: 31, scope: !7559)
!7562 = !DILocation(line: 2244, column: 21, scope: !7559)
!7563 = !DILocation(line: 2244, column: 10, scope: !7559)
!7564 = !DILocation(line: 2244, column: 3, scope: !7559)
!7565 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !1125, file: !1125, line: 2271, type: !6741, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7566 = !DILocalVariable(name: "gs", arg: 1, scope: !7565, file: !1125, line: 2271, type: !6718)
!7567 = !DILocation(line: 2271, column: 31, scope: !7565)
!7568 = !DILocation(line: 2274, column: 21, scope: !7565)
!7569 = !DILocation(line: 2274, column: 10, scope: !7565)
!7570 = !DILocation(line: 2274, column: 3, scope: !7565)
!7571 = distinct !DISubprogram(name: "gimple_cond_code", scope: !1125, file: !1125, line: 2221, type: !7572, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7572 = !DISubroutineType(types: !7573)
!7573 = !{!203, !6718}
!7574 = !DILocalVariable(name: "gs", arg: 1, scope: !7571, file: !1125, line: 2221, type: !6718)
!7575 = !DILocation(line: 2221, column: 32, scope: !7571)
!7576 = !DILocation(line: 2224, column: 27, scope: !7571)
!7577 = !DILocation(line: 2224, column: 31, scope: !7571)
!7578 = !DILocation(line: 2224, column: 38, scope: !7571)
!7579 = !DILocation(line: 2224, column: 3, scope: !7571)
!7580 = distinct !DISubprogram(name: "expr_expected_value_1", scope: !3, file: !3, line: 1154, type: !7581, scopeLine: 1155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7581 = !DISubroutineType(types: !7582)
!7582 = !{!2021, !2021, !2021, !203, !2021, !2922}
!7583 = !DILocalVariable(name: "type", arg: 1, scope: !7580, file: !3, line: 1154, type: !2021)
!7584 = !DILocation(line: 1154, column: 29, scope: !7580)
!7585 = !DILocalVariable(name: "op0", arg: 2, scope: !7580, file: !3, line: 1154, type: !2021)
!7586 = !DILocation(line: 1154, column: 40, scope: !7580)
!7587 = !DILocalVariable(name: "code", arg: 3, scope: !7580, file: !3, line: 1154, type: !203)
!7588 = !DILocation(line: 1154, column: 60, scope: !7580)
!7589 = !DILocalVariable(name: "op1", arg: 4, scope: !7580, file: !3, line: 1154, type: !2021)
!7590 = !DILocation(line: 1154, column: 71, scope: !7580)
!7591 = !DILocalVariable(name: "visited", arg: 5, scope: !7580, file: !3, line: 1154, type: !2922)
!7592 = !DILocation(line: 1154, column: 83, scope: !7580)
!7593 = !DILocalVariable(name: "def", scope: !7580, file: !3, line: 1156, type: !2689)
!7594 = !DILocation(line: 1156, column: 10, scope: !7580)
!7595 = !DILocation(line: 1158, column: 29, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 1158, column: 7)
!7597 = !DILocation(line: 1158, column: 7, scope: !7596)
!7598 = !DILocation(line: 1158, column: 35, scope: !7596)
!7599 = !DILocation(line: 1158, column: 7, scope: !7580)
!7600 = !DILocation(line: 1160, column: 11, scope: !7601)
!7601 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1160, column: 11)
!7602 = distinct !DILexicalBlock(scope: !7596, file: !3, line: 1159, column: 5)
!7603 = !DILocation(line: 1160, column: 11, scope: !7602)
!7604 = !DILocation(line: 1161, column: 9, scope: !7601)
!7605 = !DILocation(line: 1161, column: 2, scope: !7601)
!7606 = !DILocation(line: 1163, column: 11, scope: !7607)
!7607 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1163, column: 11)
!7608 = !DILocation(line: 1163, column: 16, scope: !7607)
!7609 = !DILocation(line: 1163, column: 11, scope: !7602)
!7610 = !DILocation(line: 1164, column: 2, scope: !7607)
!7611 = !DILocation(line: 1166, column: 13, scope: !7602)
!7612 = !DILocation(line: 1166, column: 11, scope: !7602)
!7613 = !DILocation(line: 1169, column: 25, scope: !7614)
!7614 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1169, column: 11)
!7615 = !DILocation(line: 1169, column: 34, scope: !7614)
!7616 = !DILocation(line: 1169, column: 11, scope: !7614)
!7617 = !DILocation(line: 1169, column: 11, scope: !7602)
!7618 = !DILocation(line: 1170, column: 2, scope: !7614)
!7619 = !DILocation(line: 1171, column: 23, scope: !7602)
!7620 = !DILocation(line: 1171, column: 32, scope: !7602)
!7621 = !DILocation(line: 1171, column: 7, scope: !7602)
!7622 = !DILocation(line: 1173, column: 24, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1173, column: 11)
!7624 = !DILocation(line: 1173, column: 11, scope: !7623)
!7625 = !DILocation(line: 1173, column: 29, scope: !7623)
!7626 = !DILocation(line: 1173, column: 11, scope: !7602)
!7627 = !DILocalVariable(name: "i", scope: !7628, file: !3, line: 1177, type: !1954)
!7628 = distinct !DILexicalBlock(scope: !7623, file: !3, line: 1174, column: 2)
!7629 = !DILocation(line: 1177, column: 8, scope: !7628)
!7630 = !DILocalVariable(name: "n", scope: !7628, file: !3, line: 1177, type: !1954)
!7631 = !DILocation(line: 1177, column: 11, scope: !7628)
!7632 = !DILocation(line: 1177, column: 36, scope: !7628)
!7633 = !DILocation(line: 1177, column: 15, scope: !7628)
!7634 = !DILocalVariable(name: "val", scope: !7628, file: !3, line: 1178, type: !2021)
!7635 = !DILocation(line: 1178, column: 9, scope: !7628)
!7636 = !DILocalVariable(name: "new_val", scope: !7628, file: !3, line: 1178, type: !2021)
!7637 = !DILocation(line: 1178, column: 21, scope: !7628)
!7638 = !DILocation(line: 1180, column: 11, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7628, file: !3, line: 1180, column: 4)
!7640 = !DILocation(line: 1180, column: 9, scope: !7639)
!7641 = !DILocation(line: 1180, column: 16, scope: !7642)
!7642 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 1180, column: 4)
!7643 = !DILocation(line: 1180, column: 20, scope: !7642)
!7644 = !DILocation(line: 1180, column: 18, scope: !7642)
!7645 = !DILocation(line: 1180, column: 4, scope: !7639)
!7646 = !DILocalVariable(name: "arg", scope: !7647, file: !3, line: 1182, type: !2021)
!7647 = distinct !DILexicalBlock(scope: !7642, file: !3, line: 1181, column: 6)
!7648 = !DILocation(line: 1182, column: 13, scope: !7647)
!7649 = !DILocation(line: 1182, column: 19, scope: !7647)
!7650 = !DILocation(line: 1190, column: 12, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 1190, column: 12)
!7652 = !DILocation(line: 1190, column: 19, scope: !7651)
!7653 = !DILocation(line: 1190, column: 16, scope: !7651)
!7654 = !DILocation(line: 1190, column: 12, scope: !7647)
!7655 = !DILocation(line: 1191, column: 3, scope: !7651)
!7656 = !DILocation(line: 1193, column: 39, scope: !7647)
!7657 = !DILocation(line: 1193, column: 44, scope: !7647)
!7658 = !DILocation(line: 1193, column: 18, scope: !7647)
!7659 = !DILocation(line: 1193, column: 16, scope: !7647)
!7660 = !DILocation(line: 1194, column: 13, scope: !7661)
!7661 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 1194, column: 12)
!7662 = !DILocation(line: 1194, column: 12, scope: !7647)
!7663 = !DILocation(line: 1195, column: 3, scope: !7661)
!7664 = !DILocation(line: 1196, column: 13, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7647, file: !3, line: 1196, column: 12)
!7666 = !DILocation(line: 1196, column: 12, scope: !7647)
!7667 = !DILocation(line: 1197, column: 9, scope: !7665)
!7668 = !DILocation(line: 1197, column: 7, scope: !7665)
!7669 = !DILocation(line: 1197, column: 3, scope: !7665)
!7670 = !DILocation(line: 1198, column: 35, scope: !7671)
!7671 = distinct !DILexicalBlock(scope: !7665, file: !3, line: 1198, column: 17)
!7672 = !DILocation(line: 1198, column: 40, scope: !7671)
!7673 = !DILocation(line: 1198, column: 18, scope: !7671)
!7674 = !DILocation(line: 1198, column: 17, scope: !7665)
!7675 = !DILocation(line: 1199, column: 3, scope: !7671)
!7676 = !DILocation(line: 1200, column: 6, scope: !7647)
!7677 = !DILocation(line: 1180, column: 24, scope: !7642)
!7678 = !DILocation(line: 1180, column: 4, scope: !7642)
!7679 = distinct !{!7679, !7645, !7680}
!7680 = !DILocation(line: 1200, column: 6, scope: !7639)
!7681 = !DILocation(line: 1201, column: 11, scope: !7628)
!7682 = !DILocation(line: 1201, column: 4, scope: !7628)
!7683 = !DILocation(line: 1203, column: 29, scope: !7684)
!7684 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1203, column: 11)
!7685 = !DILocation(line: 1203, column: 11, scope: !7684)
!7686 = !DILocation(line: 1203, column: 11, scope: !7602)
!7687 = !DILocation(line: 1205, column: 27, scope: !7688)
!7688 = distinct !DILexicalBlock(scope: !7689, file: !3, line: 1205, column: 8)
!7689 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 1204, column: 2)
!7690 = !DILocation(line: 1205, column: 8, scope: !7688)
!7691 = !DILocation(line: 1205, column: 35, scope: !7688)
!7692 = !DILocation(line: 1205, column: 32, scope: !7688)
!7693 = !DILocation(line: 1205, column: 8, scope: !7689)
!7694 = !DILocation(line: 1206, column: 6, scope: !7688)
!7695 = !DILocation(line: 1208, column: 34, scope: !7689)
!7696 = !DILocation(line: 1209, column: 26, scope: !7689)
!7697 = !DILocation(line: 1209, column: 6, scope: !7689)
!7698 = !DILocation(line: 1210, column: 30, scope: !7689)
!7699 = !DILocation(line: 1210, column: 6, scope: !7689)
!7700 = !DILocation(line: 1211, column: 26, scope: !7689)
!7701 = !DILocation(line: 1211, column: 6, scope: !7689)
!7702 = !DILocation(line: 1212, column: 6, scope: !7689)
!7703 = !DILocation(line: 1208, column: 11, scope: !7689)
!7704 = !DILocation(line: 1208, column: 4, scope: !7689)
!7705 = !DILocation(line: 1215, column: 27, scope: !7706)
!7706 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 1215, column: 11)
!7707 = !DILocation(line: 1215, column: 11, scope: !7706)
!7708 = !DILocation(line: 1215, column: 11, scope: !7602)
!7709 = !DILocalVariable(name: "decl", scope: !7710, file: !3, line: 1217, type: !2021)
!7710 = distinct !DILexicalBlock(scope: !7706, file: !3, line: 1216, column: 2)
!7711 = !DILocation(line: 1217, column: 9, scope: !7710)
!7712 = !DILocation(line: 1217, column: 36, scope: !7710)
!7713 = !DILocation(line: 1217, column: 16, scope: !7710)
!7714 = !DILocation(line: 1218, column: 9, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7710, file: !3, line: 1218, column: 8)
!7716 = !DILocation(line: 1218, column: 8, scope: !7710)
!7717 = !DILocation(line: 1219, column: 6, scope: !7715)
!7718 = !DILocation(line: 1220, column: 8, scope: !7719)
!7719 = distinct !DILexicalBlock(scope: !7710, file: !3, line: 1220, column: 8)
!7720 = !DILocation(line: 1220, column: 35, scope: !7719)
!7721 = !DILocation(line: 1221, column: 8, scope: !7719)
!7722 = !DILocation(line: 1221, column: 11, scope: !7719)
!7723 = !DILocation(line: 1221, column: 37, scope: !7719)
!7724 = !DILocation(line: 1220, column: 8, scope: !7710)
!7725 = !DILocalVariable(name: "val", scope: !7726, file: !3, line: 1223, type: !2021)
!7726 = distinct !DILexicalBlock(scope: !7719, file: !3, line: 1222, column: 6)
!7727 = !DILocation(line: 1223, column: 13, scope: !7726)
!7728 = !DILocation(line: 1225, column: 34, scope: !7729)
!7729 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 1225, column: 12)
!7730 = !DILocation(line: 1225, column: 12, scope: !7729)
!7731 = !DILocation(line: 1225, column: 39, scope: !7729)
!7732 = !DILocation(line: 1225, column: 12, scope: !7726)
!7733 = !DILocation(line: 1226, column: 3, scope: !7729)
!7734 = !DILocation(line: 1227, column: 31, scope: !7726)
!7735 = !DILocation(line: 1227, column: 14, scope: !7726)
!7736 = !DILocation(line: 1227, column: 12, scope: !7726)
!7737 = !DILocation(line: 1228, column: 12, scope: !7738)
!7738 = distinct !DILexicalBlock(scope: !7726, file: !3, line: 1228, column: 12)
!7739 = !DILocation(line: 1228, column: 12, scope: !7726)
!7740 = !DILocation(line: 1229, column: 10, scope: !7738)
!7741 = !DILocation(line: 1229, column: 3, scope: !7738)
!7742 = !DILocation(line: 1230, column: 32, scope: !7726)
!7743 = !DILocation(line: 1230, column: 15, scope: !7726)
!7744 = !DILocation(line: 1230, column: 8, scope: !7726)
!7745 = !DILocation(line: 1232, column: 2, scope: !7710)
!7746 = !DILocation(line: 1234, column: 7, scope: !7602)
!7747 = !DILocation(line: 1237, column: 29, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 1237, column: 7)
!7749 = !DILocation(line: 1237, column: 7, scope: !7748)
!7750 = !DILocation(line: 1237, column: 35, scope: !7748)
!7751 = !DILocation(line: 1237, column: 7, scope: !7580)
!7752 = !DILocalVariable(name: "res", scope: !7753, file: !3, line: 1239, type: !2021)
!7753 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 1238, column: 5)
!7754 = !DILocation(line: 1239, column: 12, scope: !7753)
!7755 = !DILocation(line: 1240, column: 34, scope: !7753)
!7756 = !DILocation(line: 1240, column: 39, scope: !7753)
!7757 = !DILocation(line: 1240, column: 13, scope: !7753)
!7758 = !DILocation(line: 1240, column: 11, scope: !7753)
!7759 = !DILocation(line: 1241, column: 12, scope: !7760)
!7760 = distinct !DILexicalBlock(scope: !7753, file: !3, line: 1241, column: 11)
!7761 = !DILocation(line: 1241, column: 11, scope: !7753)
!7762 = !DILocation(line: 1242, column: 2, scope: !7760)
!7763 = !DILocation(line: 1243, column: 34, scope: !7753)
!7764 = !DILocation(line: 1243, column: 39, scope: !7753)
!7765 = !DILocation(line: 1243, column: 13, scope: !7753)
!7766 = !DILocation(line: 1243, column: 11, scope: !7753)
!7767 = !DILocation(line: 1244, column: 12, scope: !7768)
!7768 = distinct !DILexicalBlock(scope: !7753, file: !3, line: 1244, column: 11)
!7769 = !DILocation(line: 1244, column: 11, scope: !7753)
!7770 = !DILocation(line: 1245, column: 2, scope: !7768)
!7771 = !DILocation(line: 1246, column: 13, scope: !7753)
!7772 = !DILocation(line: 1246, column: 11, scope: !7753)
!7773 = !DILocation(line: 1247, column: 11, scope: !7774)
!7774 = distinct !DILexicalBlock(scope: !7753, file: !3, line: 1247, column: 11)
!7775 = !DILocation(line: 1247, column: 11, scope: !7753)
!7776 = !DILocation(line: 1248, column: 9, scope: !7774)
!7777 = !DILocation(line: 1248, column: 2, scope: !7774)
!7778 = !DILocation(line: 1249, column: 7, scope: !7753)
!7779 = !DILocation(line: 1251, column: 29, scope: !7780)
!7780 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 1251, column: 7)
!7781 = !DILocation(line: 1251, column: 7, scope: !7780)
!7782 = !DILocation(line: 1251, column: 35, scope: !7780)
!7783 = !DILocation(line: 1251, column: 7, scope: !7580)
!7784 = !DILocalVariable(name: "res", scope: !7785, file: !3, line: 1253, type: !2021)
!7785 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 1252, column: 5)
!7786 = !DILocation(line: 1253, column: 12, scope: !7785)
!7787 = !DILocation(line: 1254, column: 34, scope: !7785)
!7788 = !DILocation(line: 1254, column: 39, scope: !7785)
!7789 = !DILocation(line: 1254, column: 13, scope: !7785)
!7790 = !DILocation(line: 1254, column: 11, scope: !7785)
!7791 = !DILocation(line: 1255, column: 12, scope: !7792)
!7792 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 1255, column: 11)
!7793 = !DILocation(line: 1255, column: 11, scope: !7785)
!7794 = !DILocation(line: 1256, column: 2, scope: !7792)
!7795 = !DILocation(line: 1257, column: 13, scope: !7785)
!7796 = !DILocation(line: 1257, column: 11, scope: !7785)
!7797 = !DILocation(line: 1258, column: 11, scope: !7798)
!7798 = distinct !DILexicalBlock(scope: !7785, file: !3, line: 1258, column: 11)
!7799 = !DILocation(line: 1258, column: 11, scope: !7785)
!7800 = !DILocation(line: 1259, column: 9, scope: !7798)
!7801 = !DILocation(line: 1259, column: 2, scope: !7798)
!7802 = !DILocation(line: 1260, column: 7, scope: !7785)
!7803 = !DILocation(line: 1262, column: 3, scope: !7580)
!7804 = !DILocation(line: 1263, column: 1, scope: !7580)
!7805 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !1125, file: !1125, line: 1686, type: !7806, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7806 = !DISubroutineType(types: !7807)
!7807 = !{!1221, !203}
!7808 = !DILocalVariable(name: "code", arg: 1, scope: !7805, file: !1125, line: 1686, type: !203)
!7809 = !DILocation(line: 1686, column: 38, scope: !7805)
!7810 = !DILocation(line: 1688, column: 63, scope: !7805)
!7811 = !DILocation(line: 1688, column: 34, scope: !7805)
!7812 = !DILocation(line: 1688, column: 10, scope: !7805)
!7813 = !DILocation(line: 1688, column: 3, scope: !7805)
!7814 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !6873, file: !6873, line: 434, type: !7815, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7815 = !DISubroutineType(types: !7816)
!7816 = !{!2021, !7817}
!7817 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !2720, line: 27, baseType: !2724)
!7818 = !DILocalVariable(name: "def", arg: 1, scope: !7814, file: !6873, line: 434, type: !7817)
!7819 = !DILocation(line: 434, column: 33, scope: !7814)
!7820 = !DILocation(line: 436, column: 11, scope: !7814)
!7821 = !DILocation(line: 436, column: 10, scope: !7814)
!7822 = !DILocation(line: 436, column: 3, scope: !7814)
!7823 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !1125, file: !1125, line: 3080, type: !6937, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7824 = !DILocalVariable(name: "gs", arg: 1, scope: !7823, file: !1125, line: 3080, type: !2689)
!7825 = !DILocation(line: 3080, column: 31, scope: !7823)
!7826 = !DILocation(line: 3083, column: 11, scope: !7823)
!7827 = !DILocation(line: 3083, column: 15, scope: !7823)
!7828 = !DILocation(line: 3083, column: 26, scope: !7823)
!7829 = !DILocation(line: 3083, column: 3, scope: !7823)
!7830 = distinct !DISubprogram(name: "expr_expected_value", scope: !3, file: !3, line: 1274, type: !7831, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7831 = !DISubroutineType(types: !7832)
!7832 = !{!2021, !2021, !2922}
!7833 = !DILocalVariable(name: "expr", arg: 1, scope: !7830, file: !3, line: 1274, type: !2021)
!7834 = !DILocation(line: 1274, column: 27, scope: !7830)
!7835 = !DILocalVariable(name: "visited", arg: 2, scope: !7830, file: !3, line: 1274, type: !2922)
!7836 = !DILocation(line: 1274, column: 40, scope: !7830)
!7837 = !DILocalVariable(name: "code", scope: !7830, file: !3, line: 1276, type: !203)
!7838 = !DILocation(line: 1276, column: 18, scope: !7830)
!7839 = !DILocalVariable(name: "op0", scope: !7830, file: !3, line: 1277, type: !2021)
!7840 = !DILocation(line: 1277, column: 8, scope: !7830)
!7841 = !DILocalVariable(name: "op1", scope: !7830, file: !3, line: 1277, type: !2021)
!7842 = !DILocation(line: 1277, column: 13, scope: !7830)
!7843 = !DILocation(line: 1279, column: 7, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7830, file: !3, line: 1279, column: 7)
!7845 = !DILocation(line: 1279, column: 7, scope: !7830)
!7846 = !DILocation(line: 1280, column: 12, scope: !7844)
!7847 = !DILocation(line: 1280, column: 5, scope: !7844)
!7848 = !DILocation(line: 1282, column: 26, scope: !7830)
!7849 = !DILocation(line: 1282, column: 3, scope: !7830)
!7850 = !DILocation(line: 1283, column: 33, scope: !7830)
!7851 = !DILocation(line: 1284, column: 5, scope: !7830)
!7852 = !DILocation(line: 1284, column: 10, scope: !7830)
!7853 = !DILocation(line: 1284, column: 16, scope: !7830)
!7854 = !DILocation(line: 1284, column: 21, scope: !7830)
!7855 = !DILocation(line: 1283, column: 10, scope: !7830)
!7856 = !DILocation(line: 1283, column: 3, scope: !7830)
!7857 = !DILocation(line: 1285, column: 1, scope: !7830)
!7858 = distinct !DISubprogram(name: "is_gimple_assign", scope: !1125, file: !1125, line: 1677, type: !6716, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7859 = !DILocalVariable(name: "gs", arg: 1, scope: !7858, file: !1125, line: 1677, type: !6718)
!7860 = !DILocation(line: 1677, column: 32, scope: !7858)
!7861 = !DILocation(line: 1679, column: 23, scope: !7858)
!7862 = !DILocation(line: 1679, column: 10, scope: !7858)
!7863 = !DILocation(line: 1679, column: 27, scope: !7858)
!7864 = !DILocation(line: 1679, column: 3, scope: !7858)
!7865 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !1125, file: !1125, line: 1694, type: !6741, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7866 = !DILocalVariable(name: "gs", arg: 1, scope: !7865, file: !1125, line: 1694, type: !6718)
!7867 = !DILocation(line: 1694, column: 33, scope: !7865)
!7868 = !DILocation(line: 1697, column: 21, scope: !7865)
!7869 = !DILocation(line: 1697, column: 10, scope: !7865)
!7870 = !DILocation(line: 1697, column: 3, scope: !7865)
!7871 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !1125, file: !1125, line: 1727, type: !6741, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7872 = !DILocalVariable(name: "gs", arg: 1, scope: !7871, file: !1125, line: 1727, type: !6718)
!7873 = !DILocation(line: 1727, column: 34, scope: !7871)
!7874 = !DILocation(line: 1730, column: 21, scope: !7871)
!7875 = !DILocation(line: 1730, column: 10, scope: !7871)
!7876 = !DILocation(line: 1730, column: 3, scope: !7871)
!7877 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !1125, file: !1125, line: 1815, type: !7572, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7878 = !DILocalVariable(name: "gs", arg: 1, scope: !7877, file: !1125, line: 1815, type: !6718)
!7879 = !DILocation(line: 1815, column: 38, scope: !7877)
!7880 = !DILocalVariable(name: "code", scope: !7877, file: !1125, line: 1817, type: !203)
!7881 = !DILocation(line: 1817, column: 18, scope: !7877)
!7882 = !DILocation(line: 1820, column: 28, scope: !7877)
!7883 = !DILocation(line: 1820, column: 10, scope: !7877)
!7884 = !DILocation(line: 1820, column: 8, scope: !7877)
!7885 = !DILocation(line: 1821, column: 29, scope: !7886)
!7886 = distinct !DILexicalBlock(scope: !7877, file: !1125, line: 1821, column: 7)
!7887 = !DILocation(line: 1821, column: 7, scope: !7886)
!7888 = !DILocation(line: 1821, column: 35, scope: !7886)
!7889 = !DILocation(line: 1821, column: 7, scope: !7877)
!7890 = !DILocation(line: 1822, column: 12, scope: !7886)
!7891 = !DILocation(line: 1822, column: 10, scope: !7886)
!7892 = !DILocation(line: 1822, column: 5, scope: !7886)
!7893 = !DILocation(line: 1824, column: 10, scope: !7877)
!7894 = !DILocation(line: 1824, column: 3, scope: !7877)
!7895 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !1125, file: !1125, line: 1759, type: !6741, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7896 = !DILocalVariable(name: "gs", arg: 1, scope: !7895, file: !1125, line: 1759, type: !6718)
!7897 = !DILocation(line: 1759, column: 34, scope: !7895)
!7898 = !DILocation(line: 1763, column: 23, scope: !7899)
!7899 = distinct !DILexicalBlock(scope: !7895, file: !1125, line: 1763, column: 7)
!7900 = !DILocation(line: 1763, column: 7, scope: !7899)
!7901 = !DILocation(line: 1763, column: 27, scope: !7899)
!7902 = !DILocation(line: 1763, column: 7, scope: !7895)
!7903 = !DILocation(line: 1764, column: 23, scope: !7899)
!7904 = !DILocation(line: 1764, column: 12, scope: !7899)
!7905 = !DILocation(line: 1764, column: 5, scope: !7899)
!7906 = !DILocation(line: 1766, column: 5, scope: !7899)
!7907 = !DILocation(line: 1767, column: 1, scope: !7895)
!7908 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !1125, file: !1125, line: 2013, type: !6807, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7909 = !DILocalVariable(name: "gs", arg: 1, scope: !7908, file: !1125, line: 2013, type: !6718)
!7910 = !DILocation(line: 2013, column: 36, scope: !7908)
!7911 = !DILocalVariable(name: "num_ops", scope: !7908, file: !1125, line: 2015, type: !7)
!7912 = !DILocation(line: 2015, column: 12, scope: !7908)
!7913 = !DILocation(line: 2017, column: 29, scope: !7908)
!7914 = !DILocation(line: 2017, column: 13, scope: !7908)
!7915 = !DILocation(line: 2017, column: 11, scope: !7908)
!7916 = !DILocation(line: 2018, column: 10, scope: !7908)
!7917 = !DILocation(line: 2018, column: 18, scope: !7908)
!7918 = !DILocation(line: 2018, column: 3, scope: !7908)
!7919 = distinct !DISubprogram(name: "gimple_call_arg", scope: !1125, file: !1125, line: 2025, type: !6907, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7920 = !DILocalVariable(name: "gs", arg: 1, scope: !7919, file: !1125, line: 2025, type: !6718)
!7921 = !DILocation(line: 2025, column: 31, scope: !7919)
!7922 = !DILocalVariable(name: "index", arg: 2, scope: !7919, file: !1125, line: 2025, type: !7)
!7923 = !DILocation(line: 2025, column: 44, scope: !7919)
!7924 = !DILocation(line: 2028, column: 21, scope: !7919)
!7925 = !DILocation(line: 2028, column: 25, scope: !7919)
!7926 = !DILocation(line: 2028, column: 31, scope: !7919)
!7927 = !DILocation(line: 2028, column: 10, scope: !7919)
!7928 = !DILocation(line: 2028, column: 3, scope: !7919)
!7929 = distinct !DISubprogram(name: "gimple_expr_code", scope: !1125, file: !1125, line: 1438, type: !7572, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7930 = !DILocalVariable(name: "stmt", arg: 1, scope: !7929, file: !1125, line: 1438, type: !6718)
!7931 = !DILocation(line: 1438, column: 32, scope: !7929)
!7932 = !DILocalVariable(name: "code", scope: !7929, file: !1125, line: 1440, type: !1124)
!7933 = !DILocation(line: 1440, column: 20, scope: !7929)
!7934 = !DILocation(line: 1440, column: 40, scope: !7929)
!7935 = !DILocation(line: 1440, column: 27, scope: !7929)
!7936 = !DILocation(line: 1441, column: 7, scope: !7937)
!7937 = distinct !DILexicalBlock(scope: !7929, file: !1125, line: 1441, column: 7)
!7938 = !DILocation(line: 1441, column: 12, scope: !7937)
!7939 = !DILocation(line: 1441, column: 29, scope: !7937)
!7940 = !DILocation(line: 1441, column: 32, scope: !7937)
!7941 = !DILocation(line: 1441, column: 37, scope: !7937)
!7942 = !DILocation(line: 1441, column: 7, scope: !7929)
!7943 = !DILocation(line: 1442, column: 29, scope: !7937)
!7944 = !DILocation(line: 1442, column: 35, scope: !7937)
!7945 = !DILocation(line: 1442, column: 42, scope: !7937)
!7946 = !DILocation(line: 1442, column: 5, scope: !7937)
!7947 = !DILocation(line: 1443, column: 12, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7937, file: !1125, line: 1443, column: 12)
!7949 = !DILocation(line: 1443, column: 17, scope: !7948)
!7950 = !DILocation(line: 1443, column: 12, scope: !7937)
!7951 = !DILocation(line: 1444, column: 5, scope: !7948)
!7952 = !DILocation(line: 1446, column: 5, scope: !7948)
!7953 = !DILocation(line: 1448, column: 5, scope: !7929)
!7954 = !DILocation(line: 1450, column: 1, scope: !7929)
!7955 = distinct !DISubprogram(name: "gimple_num_ops", scope: !1125, file: !1125, line: 1596, type: !6807, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7956 = !DILocalVariable(name: "gs", arg: 1, scope: !7955, file: !1125, line: 1596, type: !6718)
!7957 = !DILocation(line: 1596, column: 30, scope: !7955)
!7958 = !DILocation(line: 1598, column: 10, scope: !7955)
!7959 = !DILocation(line: 1598, column: 14, scope: !7955)
!7960 = !DILocation(line: 1598, column: 21, scope: !7955)
!7961 = !DILocation(line: 1598, column: 3, scope: !7955)
!7962 = distinct !DISubprogram(name: "clear_bb_predictions", scope: !3, file: !3, line: 535, type: !4140, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!7963 = !DILocalVariable(name: "bb", arg: 1, scope: !7962, file: !3, line: 535, type: !2653)
!7964 = !DILocation(line: 535, column: 35, scope: !7962)
!7965 = !DILocalVariable(name: "preds", scope: !7962, file: !3, line: 537, type: !2589)
!7966 = !DILocation(line: 537, column: 10, scope: !7962)
!7967 = !DILocation(line: 537, column: 40, scope: !7962)
!7968 = !DILocation(line: 537, column: 56, scope: !7962)
!7969 = !DILocation(line: 537, column: 18, scope: !7962)
!7970 = !DILocalVariable(name: "pred", scope: !7962, file: !3, line: 538, type: !1955)
!7971 = !DILocation(line: 538, column: 27, scope: !7962)
!7972 = !DILocalVariable(name: "next", scope: !7962, file: !3, line: 538, type: !1955)
!7973 = !DILocation(line: 538, column: 34, scope: !7962)
!7974 = !DILocation(line: 540, column: 8, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7962, file: !3, line: 540, column: 7)
!7976 = !DILocation(line: 540, column: 7, scope: !7962)
!7977 = !DILocation(line: 541, column: 5, scope: !7975)
!7978 = !DILocation(line: 543, column: 43, scope: !7979)
!7979 = distinct !DILexicalBlock(scope: !7962, file: !3, line: 543, column: 3)
!7980 = !DILocation(line: 543, column: 42, scope: !7979)
!7981 = !DILocation(line: 543, column: 15, scope: !7979)
!7982 = !DILocation(line: 543, column: 13, scope: !7979)
!7983 = !DILocation(line: 543, column: 8, scope: !7979)
!7984 = !DILocation(line: 543, column: 50, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 543, column: 3)
!7986 = !DILocation(line: 543, column: 3, scope: !7979)
!7987 = !DILocation(line: 545, column: 14, scope: !7988)
!7988 = distinct !DILexicalBlock(scope: !7985, file: !3, line: 544, column: 5)
!7989 = !DILocation(line: 545, column: 20, scope: !7988)
!7990 = !DILocation(line: 545, column: 12, scope: !7988)
!7991 = !DILocation(line: 546, column: 13, scope: !7988)
!7992 = !DILocation(line: 546, column: 7, scope: !7988)
!7993 = !DILocation(line: 547, column: 5, scope: !7988)
!7994 = !DILocation(line: 543, column: 63, scope: !7985)
!7995 = !DILocation(line: 543, column: 61, scope: !7985)
!7996 = !DILocation(line: 543, column: 3, scope: !7985)
!7997 = distinct !{!7997, !7986, !7998}
!7998 = !DILocation(line: 547, column: 5, scope: !7979)
!7999 = !DILocation(line: 548, column: 4, scope: !7962)
!8000 = !DILocation(line: 548, column: 10, scope: !7962)
!8001 = !DILocation(line: 549, column: 1, scope: !7962)
!8002 = distinct !DISubprogram(name: "ei_end_p", scope: !142, file: !142, line: 721, type: !8003, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8003 = !DISubroutineType(types: !8004)
!8004 = !{!2137, !4940}
!8005 = !DILocalVariable(name: "i", arg: 1, scope: !8002, file: !142, line: 721, type: !4940)
!8006 = !DILocation(line: 721, column: 25, scope: !8002)
!8007 = !DILocation(line: 723, column: 13, scope: !8002)
!8008 = !DILocation(line: 723, column: 22, scope: !8002)
!8009 = !DILocation(line: 723, column: 19, scope: !8002)
!8010 = !DILocation(line: 723, column: 10, scope: !8002)
!8011 = !DILocation(line: 723, column: 3, scope: !8002)
!8012 = distinct !DISubprogram(name: "ei_edge", scope: !142, file: !142, line: 752, type: !8013, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8013 = !DISubroutineType(types: !8014)
!8014 = !{!1961, !4940}
!8015 = !DILocalVariable(name: "i", arg: 1, scope: !8012, file: !142, line: 752, type: !4940)
!8016 = !DILocation(line: 752, column: 24, scope: !8012)
!8017 = !DILocation(line: 754, column: 10, scope: !8012)
!8018 = !DILocation(line: 754, column: 3, scope: !8012)
!8019 = distinct !DISubprogram(name: "ei_container", scope: !142, file: !142, line: 685, type: !8020, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8020 = !DISubroutineType(types: !8021)
!8021 = !{!1971, !4940}
!8022 = !DILocalVariable(name: "i", arg: 1, scope: !8019, file: !142, line: 685, type: !4940)
!8023 = !DILocation(line: 685, column: 29, scope: !8019)
!8024 = !DILocation(line: 687, column: 3, scope: !8019)
!8025 = !DILocation(line: 688, column: 13, scope: !8019)
!8026 = !DILocation(line: 688, column: 10, scope: !8019)
!8027 = !DILocation(line: 688, column: 3, scope: !8019)
!8028 = distinct !DISubprogram(name: "estimate_loops_at_level", scope: !3, file: !3, line: 1967, type: !8029, scopeLine: 1968, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8029 = !DISubroutineType(types: !8030)
!8030 = !{null, !1989}
!8031 = !DILocalVariable(name: "first_loop", arg: 1, scope: !8028, file: !3, line: 1967, type: !1989)
!8032 = !DILocation(line: 1967, column: 39, scope: !8028)
!8033 = !DILocalVariable(name: "loop", scope: !8028, file: !3, line: 1969, type: !1989)
!8034 = !DILocation(line: 1969, column: 16, scope: !8028)
!8035 = !DILocation(line: 1971, column: 15, scope: !8036)
!8036 = distinct !DILexicalBlock(scope: !8028, file: !3, line: 1971, column: 3)
!8037 = !DILocation(line: 1971, column: 13, scope: !8036)
!8038 = !DILocation(line: 1971, column: 8, scope: !8036)
!8039 = !DILocation(line: 1971, column: 27, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !8036, file: !3, line: 1971, column: 3)
!8041 = !DILocation(line: 1971, column: 3, scope: !8036)
!8042 = !DILocalVariable(name: "e", scope: !8043, file: !3, line: 1973, type: !1961)
!8043 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 1972, column: 5)
!8044 = !DILocation(line: 1973, column: 12, scope: !8043)
!8045 = !DILocalVariable(name: "bbs", scope: !8043, file: !3, line: 1974, type: !5064)
!8046 = !DILocation(line: 1974, column: 20, scope: !8043)
!8047 = !DILocalVariable(name: "i", scope: !8043, file: !3, line: 1975, type: !7)
!8048 = !DILocation(line: 1975, column: 16, scope: !8043)
!8049 = !DILocalVariable(name: "tovisit", scope: !8043, file: !3, line: 1976, type: !2922)
!8050 = !DILocation(line: 1976, column: 14, scope: !8043)
!8051 = !DILocation(line: 1976, column: 24, scope: !8043)
!8052 = !DILocation(line: 1978, column: 32, scope: !8043)
!8053 = !DILocation(line: 1978, column: 38, scope: !8043)
!8054 = !DILocation(line: 1978, column: 7, scope: !8043)
!8055 = !DILocation(line: 1981, column: 28, scope: !8043)
!8056 = !DILocation(line: 1981, column: 11, scope: !8043)
!8057 = !DILocation(line: 1981, column: 9, scope: !8043)
!8058 = !DILocation(line: 1982, column: 7, scope: !8043)
!8059 = !DILocation(line: 1982, column: 22, scope: !8043)
!8060 = !DILocation(line: 1982, column: 32, scope: !8043)
!8061 = !DILocation(line: 1984, column: 28, scope: !8043)
!8062 = !DILocation(line: 1984, column: 13, scope: !8043)
!8063 = !DILocation(line: 1984, column: 11, scope: !8043)
!8064 = !DILocation(line: 1985, column: 14, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1985, column: 7)
!8066 = !DILocation(line: 1985, column: 12, scope: !8065)
!8067 = !DILocation(line: 1985, column: 19, scope: !8068)
!8068 = distinct !DILexicalBlock(scope: !8065, file: !3, line: 1985, column: 7)
!8069 = !DILocation(line: 1985, column: 23, scope: !8068)
!8070 = !DILocation(line: 1985, column: 29, scope: !8068)
!8071 = !DILocation(line: 1985, column: 21, scope: !8068)
!8072 = !DILocation(line: 1985, column: 7, scope: !8065)
!8073 = !DILocation(line: 1986, column: 18, scope: !8068)
!8074 = !DILocation(line: 1986, column: 27, scope: !8068)
!8075 = !DILocation(line: 1986, column: 31, scope: !8068)
!8076 = !DILocation(line: 1986, column: 35, scope: !8068)
!8077 = !DILocation(line: 1986, column: 2, scope: !8068)
!8078 = !DILocation(line: 1985, column: 41, scope: !8068)
!8079 = !DILocation(line: 1985, column: 7, scope: !8068)
!8080 = distinct !{!8080, !8072, !8081}
!8081 = !DILocation(line: 1986, column: 40, scope: !8065)
!8082 = !DILocation(line: 1987, column: 13, scope: !8043)
!8083 = !DILocation(line: 1987, column: 7, scope: !8043)
!8084 = !DILocation(line: 1988, column: 23, scope: !8043)
!8085 = !DILocation(line: 1988, column: 29, scope: !8043)
!8086 = !DILocation(line: 1988, column: 37, scope: !8043)
!8087 = !DILocation(line: 1988, column: 7, scope: !8043)
!8088 = !DILocation(line: 1989, column: 7, scope: !8043)
!8089 = !DILocation(line: 1990, column: 5, scope: !8043)
!8090 = !DILocation(line: 1971, column: 40, scope: !8040)
!8091 = !DILocation(line: 1971, column: 46, scope: !8040)
!8092 = !DILocation(line: 1971, column: 38, scope: !8040)
!8093 = !DILocation(line: 1971, column: 3, scope: !8040)
!8094 = distinct !{!8094, !8041, !8095}
!8095 = !DILocation(line: 1990, column: 5, scope: !8036)
!8096 = !DILocation(line: 1991, column: 1, scope: !8028)
!8097 = distinct !DISubprogram(name: "propagate_freq", scope: !3, file: !3, line: 1829, type: !8098, scopeLine: 1830, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8098 = !DISubroutineType(types: !8099)
!8099 = !{null, !2653, !2922}
!8100 = !DILocalVariable(name: "head", arg: 1, scope: !8097, file: !3, line: 1829, type: !2653)
!8101 = !DILocation(line: 1829, column: 29, scope: !8097)
!8102 = !DILocalVariable(name: "tovisit", arg: 2, scope: !8097, file: !3, line: 1829, type: !2922)
!8103 = !DILocation(line: 1829, column: 42, scope: !8097)
!8104 = !DILocalVariable(name: "bb", scope: !8097, file: !3, line: 1831, type: !2653)
!8105 = !DILocation(line: 1831, column: 15, scope: !8097)
!8106 = !DILocalVariable(name: "last", scope: !8097, file: !3, line: 1832, type: !2653)
!8107 = !DILocation(line: 1832, column: 15, scope: !8097)
!8108 = !DILocalVariable(name: "i", scope: !8097, file: !3, line: 1833, type: !7)
!8109 = !DILocation(line: 1833, column: 12, scope: !8097)
!8110 = !DILocalVariable(name: "e", scope: !8097, file: !3, line: 1834, type: !1961)
!8111 = !DILocation(line: 1834, column: 8, scope: !8097)
!8112 = !DILocalVariable(name: "nextbb", scope: !8097, file: !3, line: 1835, type: !2653)
!8113 = !DILocation(line: 1835, column: 15, scope: !8097)
!8114 = !DILocalVariable(name: "bi", scope: !8097, file: !3, line: 1836, type: !8115)
!8115 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !2250, line: 218, baseType: !8116)
!8116 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2250, line: 203, size: 256, elements: !8117)
!8117 = !{!8118, !8119, !8120, !8121}
!8118 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !8116, file: !2250, line: 206, baseType: !2253, size: 64)
!8119 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !8116, file: !2250, line: 209, baseType: !2253, size: 64, offset: 64)
!8120 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !8116, file: !2250, line: 212, baseType: !7, size: 32, offset: 128)
!8121 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !8116, file: !2250, line: 217, baseType: !2263, size: 64, offset: 192)
!8122 = !DILocation(line: 1836, column: 19, scope: !8097)
!8123 = !DILocation(line: 1840, column: 3, scope: !8124)
!8124 = distinct !DILexicalBlock(scope: !8097, file: !3, line: 1840, column: 3)
!8125 = !DILocation(line: 1840, column: 3, scope: !8126)
!8126 = distinct !DILexicalBlock(scope: !8124, file: !3, line: 1840, column: 3)
!8127 = !DILocalVariable(name: "ei", scope: !8128, file: !3, line: 1842, type: !4940)
!8128 = distinct !DILexicalBlock(scope: !8126, file: !3, line: 1841, column: 5)
!8129 = !DILocation(line: 1842, column: 21, scope: !8128)
!8130 = !DILocalVariable(name: "count", scope: !8128, file: !3, line: 1843, type: !1954)
!8131 = !DILocation(line: 1843, column: 11, scope: !8128)
!8132 = !DILocation(line: 1848, column: 12, scope: !8128)
!8133 = !DILocation(line: 1848, column: 10, scope: !8128)
!8134 = !DILocation(line: 1850, column: 7, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8128, file: !3, line: 1850, column: 7)
!8136 = !DILocation(line: 1850, column: 7, scope: !8137)
!8137 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 1850, column: 7)
!8138 = !DILocalVariable(name: "visit", scope: !8139, file: !3, line: 1852, type: !2137)
!8139 = distinct !DILexicalBlock(scope: !8137, file: !3, line: 1851, column: 2)
!8140 = !DILocation(line: 1852, column: 9, scope: !8139)
!8141 = !DILocation(line: 1852, column: 31, scope: !8139)
!8142 = !DILocation(line: 1852, column: 40, scope: !8139)
!8143 = !DILocation(line: 1852, column: 43, scope: !8139)
!8144 = !DILocation(line: 1852, column: 48, scope: !8139)
!8145 = !DILocation(line: 1852, column: 17, scope: !8139)
!8146 = !DILocation(line: 1854, column: 8, scope: !8147)
!8147 = distinct !DILexicalBlock(scope: !8139, file: !3, line: 1854, column: 8)
!8148 = !DILocation(line: 1854, column: 14, scope: !8147)
!8149 = !DILocation(line: 1854, column: 19, scope: !8147)
!8150 = !DILocation(line: 1854, column: 22, scope: !8147)
!8151 = !DILocation(line: 1854, column: 28, scope: !8147)
!8152 = !DILocation(line: 1854, column: 8, scope: !8139)
!8153 = !DILocation(line: 1855, column: 11, scope: !8147)
!8154 = !DILocation(line: 1855, column: 6, scope: !8147)
!8155 = !DILocation(line: 1856, column: 13, scope: !8156)
!8156 = distinct !DILexicalBlock(scope: !8147, file: !3, line: 1856, column: 13)
!8157 = !DILocation(line: 1856, column: 19, scope: !8156)
!8158 = !DILocation(line: 1856, column: 22, scope: !8156)
!8159 = !DILocation(line: 1856, column: 32, scope: !8156)
!8160 = !DILocation(line: 1856, column: 36, scope: !8156)
!8161 = !DILocation(line: 1856, column: 51, scope: !8156)
!8162 = !DILocation(line: 1856, column: 13, scope: !8147)
!8163 = !DILocation(line: 1857, column: 15, scope: !8156)
!8164 = !DILocation(line: 1859, column: 8, scope: !8156)
!8165 = !DILocation(line: 1859, column: 11, scope: !8156)
!8166 = !DILocation(line: 1859, column: 16, scope: !8156)
!8167 = !DILocation(line: 1859, column: 23, scope: !8156)
!8168 = !DILocation(line: 1859, column: 27, scope: !8156)
!8169 = !DILocation(line: 1857, column: 6, scope: !8156)
!8170 = !DILocation(line: 1860, column: 2, scope: !8139)
!8171 = distinct !{!8171, !8134, !8172}
!8172 = !DILocation(line: 1860, column: 2, scope: !8135)
!8173 = !DILocation(line: 1861, column: 40, scope: !8128)
!8174 = !DILocation(line: 1861, column: 7, scope: !8128)
!8175 = !DILocation(line: 1861, column: 24, scope: !8128)
!8176 = !DILocation(line: 1861, column: 38, scope: !8128)
!8177 = !DILocation(line: 1862, column: 5, scope: !8128)
!8178 = distinct !{!8178, !8123, !8179}
!8179 = !DILocation(line: 1862, column: 5, scope: !8124)
!8180 = !DILocation(line: 1864, column: 12, scope: !8097)
!8181 = !DILocation(line: 1864, column: 31, scope: !8097)
!8182 = !DILocation(line: 1864, column: 3, scope: !8097)
!8183 = !DILocation(line: 1865, column: 10, scope: !8097)
!8184 = !DILocation(line: 1865, column: 8, scope: !8097)
!8185 = !DILocation(line: 1866, column: 13, scope: !8186)
!8186 = distinct !DILexicalBlock(scope: !8097, file: !3, line: 1866, column: 3)
!8187 = !DILocation(line: 1866, column: 11, scope: !8186)
!8188 = !DILocation(line: 1866, column: 8, scope: !8186)
!8189 = !DILocation(line: 1866, column: 19, scope: !8190)
!8190 = distinct !DILexicalBlock(scope: !8186, file: !3, line: 1866, column: 3)
!8191 = !DILocation(line: 1866, column: 3, scope: !8186)
!8192 = !DILocalVariable(name: "ei", scope: !8193, file: !3, line: 1868, type: !4940)
!8193 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 1867, column: 5)
!8194 = !DILocation(line: 1868, column: 21, scope: !8193)
!8195 = !DILocalVariable(name: "cyclic_probability", scope: !8193, file: !3, line: 1869, type: !3454)
!8196 = !DILocation(line: 1869, column: 13, scope: !8193)
!8197 = !DILocalVariable(name: "frequency", scope: !8193, file: !3, line: 1869, type: !3454)
!8198 = !DILocation(line: 1869, column: 33, scope: !8193)
!8199 = !DILocation(line: 1871, column: 7, scope: !8193)
!8200 = !DILocation(line: 1872, column: 7, scope: !8193)
!8201 = !DILocation(line: 1874, column: 16, scope: !8193)
!8202 = !DILocation(line: 1874, column: 33, scope: !8193)
!8203 = !DILocation(line: 1874, column: 14, scope: !8193)
!8204 = !DILocation(line: 1875, column: 7, scope: !8193)
!8205 = !DILocation(line: 1875, column: 24, scope: !8193)
!8206 = !DILocation(line: 1875, column: 29, scope: !8193)
!8207 = !DILocation(line: 1878, column: 11, scope: !8208)
!8208 = distinct !DILexicalBlock(scope: !8193, file: !3, line: 1878, column: 11)
!8209 = !DILocation(line: 1878, column: 17, scope: !8208)
!8210 = !DILocation(line: 1878, column: 14, scope: !8208)
!8211 = !DILocation(line: 1878, column: 11, scope: !8193)
!8212 = !DILocation(line: 1886, column: 4, scope: !8213)
!8213 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 1886, column: 4)
!8214 = distinct !DILexicalBlock(scope: !8208, file: !3, line: 1879, column: 2)
!8215 = !DILocation(line: 1886, column: 4, scope: !8216)
!8216 = distinct !DILexicalBlock(scope: !8213, file: !3, line: 1886, column: 4)
!8217 = !DILocation(line: 1887, column: 10, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8216, file: !3, line: 1887, column: 10)
!8219 = !DILocation(line: 1887, column: 25, scope: !8218)
!8220 = !DILocation(line: 1887, column: 10, scope: !8216)
!8221 = !DILocation(line: 1890, column: 8, scope: !8222)
!8222 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 1888, column: 8)
!8223 = !DILocation(line: 1890, column: 23, scope: !8222)
!8224 = !DILocation(line: 1889, column: 3, scope: !8222)
!8225 = !DILocation(line: 1891, column: 8, scope: !8222)
!8226 = !DILocation(line: 1892, column: 17, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 1892, column: 15)
!8228 = !DILocation(line: 1892, column: 20, scope: !8227)
!8229 = !DILocation(line: 1892, column: 26, scope: !8227)
!8230 = !DILocation(line: 1892, column: 15, scope: !8218)
!8231 = !DILocalVariable(name: "tmp", scope: !8232, file: !3, line: 1894, type: !3454)
!8232 = distinct !DILexicalBlock(scope: !8227, file: !3, line: 1893, column: 8)
!8233 = !DILocation(line: 1894, column: 9, scope: !8232)
!8234 = !DILocation(line: 1900, column: 21, scope: !8232)
!8235 = !DILocation(line: 1900, column: 24, scope: !8232)
!8236 = !DILocation(line: 1900, column: 3, scope: !8232)
!8237 = !DILocation(line: 1901, column: 27, scope: !8232)
!8238 = !DILocation(line: 1901, column: 48, scope: !8232)
!8239 = !DILocation(line: 1901, column: 3, scope: !8232)
!8240 = !DILocation(line: 1902, column: 3, scope: !8232)
!8241 = !DILocation(line: 1903, column: 3, scope: !8232)
!8242 = !DILocation(line: 1904, column: 8, scope: !8232)
!8243 = distinct !{!8243, !8212, !8244}
!8244 = !DILocation(line: 1904, column: 8, scope: !8213)
!8245 = !DILocation(line: 1906, column: 8, scope: !8246)
!8246 = distinct !DILexicalBlock(scope: !8214, file: !3, line: 1906, column: 8)
!8247 = !DILocation(line: 1906, column: 56, scope: !8246)
!8248 = !DILocation(line: 1906, column: 8, scope: !8214)
!8249 = !DILocation(line: 1908, column: 17, scope: !8250)
!8250 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 1907, column: 6)
!8251 = !DILocation(line: 1908, column: 34, scope: !8250)
!8252 = !DILocation(line: 1908, column: 8, scope: !8250)
!8253 = !DILocation(line: 1910, column: 6, scope: !8250)
!8254 = !DILocation(line: 1913, column: 12, scope: !8255)
!8255 = distinct !DILexicalBlock(scope: !8256, file: !3, line: 1913, column: 12)
!8256 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 1912, column: 6)
!8257 = !DILocation(line: 1913, column: 66, scope: !8255)
!8258 = !DILocation(line: 1913, column: 12, scope: !8256)
!8259 = !DILocation(line: 1915, column: 5, scope: !8260)
!8260 = distinct !DILexicalBlock(scope: !8255, file: !3, line: 1914, column: 3)
!8261 = !DILocation(line: 1917, column: 3, scope: !8260)
!8262 = !DILocation(line: 1922, column: 8, scope: !8256)
!8263 = !DILocation(line: 1923, column: 20, scope: !8256)
!8264 = !DILocation(line: 1923, column: 37, scope: !8256)
!8265 = !DILocation(line: 1923, column: 8, scope: !8256)
!8266 = !DILocation(line: 1926, column: 2, scope: !8214)
!8267 = !DILocation(line: 1928, column: 25, scope: !8193)
!8268 = !DILocation(line: 1928, column: 34, scope: !8193)
!8269 = !DILocation(line: 1928, column: 38, scope: !8193)
!8270 = !DILocation(line: 1928, column: 7, scope: !8193)
!8271 = !DILocation(line: 1930, column: 22, scope: !8193)
!8272 = !DILocation(line: 1930, column: 26, scope: !8193)
!8273 = !DILocation(line: 1930, column: 11, scope: !8193)
!8274 = !DILocation(line: 1930, column: 9, scope: !8193)
!8275 = !DILocation(line: 1931, column: 11, scope: !8276)
!8276 = distinct !DILexicalBlock(scope: !8193, file: !3, line: 1931, column: 11)
!8277 = !DILocation(line: 1931, column: 11, scope: !8193)
!8278 = !DILocalVariable(name: "tmp", scope: !8279, file: !3, line: 1933, type: !3454)
!8279 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 1932, column: 2)
!8280 = !DILocation(line: 1933, column: 10, scope: !8279)
!8281 = !DILocation(line: 1939, column: 22, scope: !8279)
!8282 = !DILocation(line: 1939, column: 25, scope: !8279)
!8283 = !DILocation(line: 1939, column: 4, scope: !8279)
!8284 = !DILocation(line: 1940, column: 28, scope: !8279)
!8285 = !DILocation(line: 1940, column: 45, scope: !8279)
!8286 = !DILocation(line: 1940, column: 4, scope: !8279)
!8287 = !DILocation(line: 1941, column: 16, scope: !8279)
!8288 = !DILocation(line: 1941, column: 31, scope: !8279)
!8289 = !DILocation(line: 1941, column: 4, scope: !8279)
!8290 = !DILocation(line: 1943, column: 2, scope: !8279)
!8291 = !DILocation(line: 1946, column: 7, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8193, file: !3, line: 1946, column: 7)
!8293 = !DILocation(line: 1946, column: 7, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8292, file: !3, line: 1946, column: 7)
!8295 = !DILocation(line: 1947, column: 8, scope: !8296)
!8296 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 1947, column: 6)
!8297 = !DILocation(line: 1947, column: 11, scope: !8296)
!8298 = !DILocation(line: 1947, column: 17, scope: !8296)
!8299 = !DILocation(line: 1948, column: 6, scope: !8296)
!8300 = !DILocation(line: 1948, column: 9, scope: !8296)
!8301 = !DILocation(line: 1948, column: 31, scope: !8296)
!8302 = !DILocation(line: 1947, column: 6, scope: !8294)
!8303 = !DILocation(line: 1950, column: 6, scope: !8304)
!8304 = distinct !DILexicalBlock(scope: !8296, file: !3, line: 1949, column: 4)
!8305 = !DILocation(line: 1950, column: 28, scope: !8304)
!8306 = !DILocation(line: 1950, column: 41, scope: !8304)
!8307 = !DILocation(line: 1951, column: 11, scope: !8308)
!8308 = distinct !DILexicalBlock(scope: !8304, file: !3, line: 1951, column: 10)
!8309 = !DILocation(line: 1951, column: 33, scope: !8308)
!8310 = !DILocation(line: 1951, column: 10, scope: !8304)
!8311 = !DILocation(line: 1953, column: 8, scope: !8312)
!8312 = distinct !DILexicalBlock(scope: !8313, file: !3, line: 1953, column: 7)
!8313 = distinct !DILexicalBlock(scope: !8308, file: !3, line: 1952, column: 8)
!8314 = !DILocation(line: 1953, column: 7, scope: !8313)
!8315 = !DILocation(line: 1954, column: 14, scope: !8312)
!8316 = !DILocation(line: 1954, column: 17, scope: !8312)
!8317 = !DILocation(line: 1954, column: 12, scope: !8312)
!8318 = !DILocation(line: 1954, column: 5, scope: !8312)
!8319 = !DILocation(line: 1956, column: 31, scope: !8312)
!8320 = !DILocation(line: 1956, column: 34, scope: !8312)
!8321 = !DILocation(line: 1956, column: 5, scope: !8312)
!8322 = !DILocation(line: 1956, column: 24, scope: !8312)
!8323 = !DILocation(line: 1956, column: 29, scope: !8312)
!8324 = !DILocation(line: 1958, column: 10, scope: !8313)
!8325 = !DILocation(line: 1958, column: 13, scope: !8313)
!8326 = !DILocation(line: 1958, column: 8, scope: !8313)
!8327 = !DILocation(line: 1959, column: 8, scope: !8313)
!8328 = !DILocation(line: 1960, column: 4, scope: !8304)
!8329 = distinct !{!8329, !8291, !8330}
!8330 = !DILocation(line: 1960, column: 4, scope: !8292)
!8331 = !DILocation(line: 1961, column: 5, scope: !8193)
!8332 = !DILocation(line: 1866, column: 28, scope: !8190)
!8333 = !DILocation(line: 1866, column: 26, scope: !8190)
!8334 = !DILocation(line: 1866, column: 3, scope: !8190)
!8335 = distinct !{!8335, !8191, !8336}
!8336 = !DILocation(line: 1961, column: 5, scope: !8186)
!8337 = !DILocation(line: 1962, column: 1, scope: !8097)
!8338 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !2250, file: !2250, line: 224, type: !8339, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8339 = !DISubroutineType(types: !8340)
!8340 = !{null, !8341, !8342, !7, !8345}
!8341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8115, size: 64)
!8342 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1962, line: 48, baseType: !8343)
!8343 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8344, size: 64)
!8344 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2249)
!8345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!8346 = !DILocalVariable(name: "bi", arg: 1, scope: !8338, file: !2250, line: 224, type: !8341)
!8347 = !DILocation(line: 224, column: 37, scope: !8338)
!8348 = !DILocalVariable(name: "map", arg: 2, scope: !8338, file: !2250, line: 224, type: !8342)
!8349 = !DILocation(line: 224, column: 54, scope: !8338)
!8350 = !DILocalVariable(name: "start_bit", arg: 3, scope: !8338, file: !2250, line: 225, type: !7)
!8351 = !DILocation(line: 225, column: 15, scope: !8338)
!8352 = !DILocalVariable(name: "bit_no", arg: 4, scope: !8338, file: !2250, line: 225, type: !8345)
!8353 = !DILocation(line: 225, column: 36, scope: !8338)
!8354 = !DILocation(line: 227, column: 14, scope: !8338)
!8355 = !DILocation(line: 227, column: 19, scope: !8338)
!8356 = !DILocation(line: 227, column: 3, scope: !8338)
!8357 = !DILocation(line: 227, column: 7, scope: !8338)
!8358 = !DILocation(line: 227, column: 12, scope: !8338)
!8359 = !DILocation(line: 228, column: 3, scope: !8338)
!8360 = !DILocation(line: 228, column: 7, scope: !8338)
!8361 = !DILocation(line: 228, column: 12, scope: !8338)
!8362 = !DILocation(line: 231, column: 3, scope: !8338)
!8363 = !DILocation(line: 233, column: 12, scope: !8364)
!8364 = distinct !DILexicalBlock(scope: !8365, file: !2250, line: 233, column: 11)
!8365 = distinct !DILexicalBlock(scope: !8338, file: !2250, line: 232, column: 5)
!8366 = !DILocation(line: 233, column: 16, scope: !8364)
!8367 = !DILocation(line: 233, column: 11, scope: !8365)
!8368 = !DILocation(line: 235, column: 4, scope: !8369)
!8369 = distinct !DILexicalBlock(scope: !8364, file: !2250, line: 234, column: 2)
!8370 = !DILocation(line: 235, column: 8, scope: !8369)
!8371 = !DILocation(line: 235, column: 13, scope: !8369)
!8372 = !DILocation(line: 236, column: 4, scope: !8369)
!8373 = !DILocation(line: 239, column: 11, scope: !8374)
!8374 = distinct !DILexicalBlock(scope: !8365, file: !2250, line: 239, column: 11)
!8375 = !DILocation(line: 239, column: 15, scope: !8374)
!8376 = !DILocation(line: 239, column: 21, scope: !8374)
!8377 = !DILocation(line: 239, column: 29, scope: !8374)
!8378 = !DILocation(line: 239, column: 39, scope: !8374)
!8379 = !DILocation(line: 239, column: 26, scope: !8374)
!8380 = !DILocation(line: 239, column: 11, scope: !8365)
!8381 = !DILocation(line: 240, column: 2, scope: !8374)
!8382 = !DILocation(line: 241, column: 18, scope: !8365)
!8383 = !DILocation(line: 241, column: 22, scope: !8365)
!8384 = !DILocation(line: 241, column: 28, scope: !8365)
!8385 = !DILocation(line: 241, column: 7, scope: !8365)
!8386 = !DILocation(line: 241, column: 11, scope: !8365)
!8387 = !DILocation(line: 241, column: 16, scope: !8365)
!8388 = distinct !{!8388, !8362, !8389}
!8389 = !DILocation(line: 242, column: 5, scope: !8338)
!8390 = !DILocation(line: 245, column: 7, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8338, file: !2250, line: 245, column: 7)
!8392 = !DILocation(line: 245, column: 11, scope: !8391)
!8393 = !DILocation(line: 245, column: 17, scope: !8391)
!8394 = !DILocation(line: 245, column: 25, scope: !8391)
!8395 = !DILocation(line: 245, column: 35, scope: !8391)
!8396 = !DILocation(line: 245, column: 22, scope: !8391)
!8397 = !DILocation(line: 245, column: 7, scope: !8338)
!8398 = !DILocation(line: 246, column: 17, scope: !8391)
!8399 = !DILocation(line: 246, column: 21, scope: !8391)
!8400 = !DILocation(line: 246, column: 27, scope: !8391)
!8401 = !DILocation(line: 246, column: 32, scope: !8391)
!8402 = !DILocation(line: 246, column: 15, scope: !8391)
!8403 = !DILocation(line: 246, column: 5, scope: !8391)
!8404 = !DILocation(line: 249, column: 17, scope: !8338)
!8405 = !DILocation(line: 249, column: 27, scope: !8338)
!8406 = !DILocation(line: 249, column: 46, scope: !8338)
!8407 = !DILocation(line: 249, column: 3, scope: !8338)
!8408 = !DILocation(line: 249, column: 7, scope: !8338)
!8409 = !DILocation(line: 249, column: 15, scope: !8338)
!8410 = !DILocation(line: 250, column: 14, scope: !8338)
!8411 = !DILocation(line: 250, column: 18, scope: !8338)
!8412 = !DILocation(line: 250, column: 24, scope: !8338)
!8413 = !DILocation(line: 250, column: 29, scope: !8338)
!8414 = !DILocation(line: 250, column: 33, scope: !8338)
!8415 = !DILocation(line: 250, column: 3, scope: !8338)
!8416 = !DILocation(line: 250, column: 7, scope: !8338)
!8417 = !DILocation(line: 250, column: 12, scope: !8338)
!8418 = !DILocation(line: 251, column: 16, scope: !8338)
!8419 = !DILocation(line: 251, column: 26, scope: !8338)
!8420 = !DILocation(line: 251, column: 3, scope: !8338)
!8421 = !DILocation(line: 251, column: 7, scope: !8338)
!8422 = !DILocation(line: 251, column: 12, scope: !8338)
!8423 = !DILocation(line: 257, column: 17, scope: !8338)
!8424 = !DILocation(line: 257, column: 21, scope: !8338)
!8425 = !DILocation(line: 257, column: 16, scope: !8338)
!8426 = !DILocation(line: 257, column: 13, scope: !8338)
!8427 = !DILocation(line: 259, column: 13, scope: !8338)
!8428 = !DILocation(line: 259, column: 4, scope: !8338)
!8429 = !DILocation(line: 259, column: 11, scope: !8338)
!8430 = !DILocation(line: 260, column: 1, scope: !8338)
!8431 = distinct !DISubprogram(name: "bmp_iter_set", scope: !2250, file: !2250, line: 393, type: !8432, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8432 = !DISubroutineType(types: !8433)
!8433 = !{!2137, !8341, !8345}
!8434 = !DILocalVariable(name: "bi", arg: 1, scope: !8431, file: !2250, line: 393, type: !8341)
!8435 = !DILocation(line: 393, column: 32, scope: !8431)
!8436 = !DILocalVariable(name: "bit_no", arg: 2, scope: !8431, file: !2250, line: 393, type: !8345)
!8437 = !DILocation(line: 393, column: 46, scope: !8431)
!8438 = !DILocation(line: 396, column: 7, scope: !8439)
!8439 = distinct !DILexicalBlock(scope: !8431, file: !2250, line: 396, column: 7)
!8440 = !DILocation(line: 396, column: 11, scope: !8439)
!8441 = !DILocation(line: 396, column: 7, scope: !8431)
!8442 = !DILocation(line: 397, column: 5, scope: !8439)
!8443 = !DILabel(scope: !8444, name: "next_bit", file: !2250, line: 398)
!8444 = distinct !DILexicalBlock(scope: !8439, file: !2250, line: 397, column: 5)
!8445 = !DILocation(line: 398, column: 5, scope: !8444)
!8446 = !DILocation(line: 399, column: 7, scope: !8444)
!8447 = !DILocation(line: 399, column: 16, scope: !8444)
!8448 = !DILocation(line: 399, column: 20, scope: !8444)
!8449 = !DILocation(line: 399, column: 25, scope: !8444)
!8450 = !DILocation(line: 399, column: 14, scope: !8444)
!8451 = !DILocation(line: 401, column: 4, scope: !8452)
!8452 = distinct !DILexicalBlock(scope: !8444, file: !2250, line: 400, column: 2)
!8453 = !DILocation(line: 401, column: 8, scope: !8452)
!8454 = !DILocation(line: 401, column: 13, scope: !8452)
!8455 = !DILocation(line: 402, column: 5, scope: !8452)
!8456 = !DILocation(line: 402, column: 12, scope: !8452)
!8457 = distinct !{!8457, !8446, !8458}
!8458 = !DILocation(line: 403, column: 2, scope: !8444)
!8459 = !DILocation(line: 404, column: 7, scope: !8444)
!8460 = !DILocation(line: 410, column: 16, scope: !8431)
!8461 = !DILocation(line: 410, column: 15, scope: !8431)
!8462 = !DILocation(line: 410, column: 23, scope: !8431)
!8463 = !DILocation(line: 410, column: 42, scope: !8431)
!8464 = !DILocation(line: 411, column: 7, scope: !8431)
!8465 = !DILocation(line: 411, column: 26, scope: !8431)
!8466 = !DILocation(line: 410, column: 4, scope: !8431)
!8467 = !DILocation(line: 410, column: 11, scope: !8431)
!8468 = !DILocation(line: 412, column: 3, scope: !8431)
!8469 = !DILocation(line: 412, column: 7, scope: !8431)
!8470 = !DILocation(line: 412, column: 14, scope: !8431)
!8471 = !DILocation(line: 414, column: 3, scope: !8431)
!8472 = !DILocation(line: 417, column: 7, scope: !8473)
!8473 = distinct !DILexicalBlock(scope: !8431, file: !2250, line: 415, column: 5)
!8474 = !DILocation(line: 417, column: 14, scope: !8473)
!8475 = !DILocation(line: 417, column: 18, scope: !8473)
!8476 = !DILocation(line: 417, column: 26, scope: !8473)
!8477 = !DILocation(line: 419, column: 15, scope: !8478)
!8478 = distinct !DILexicalBlock(scope: !8473, file: !2250, line: 418, column: 2)
!8479 = !DILocation(line: 419, column: 19, scope: !8478)
!8480 = !DILocation(line: 419, column: 25, scope: !8478)
!8481 = !DILocation(line: 419, column: 30, scope: !8478)
!8482 = !DILocation(line: 419, column: 34, scope: !8478)
!8483 = !DILocation(line: 419, column: 4, scope: !8478)
!8484 = !DILocation(line: 419, column: 8, scope: !8478)
!8485 = !DILocation(line: 419, column: 13, scope: !8478)
!8486 = !DILocation(line: 420, column: 8, scope: !8487)
!8487 = distinct !DILexicalBlock(scope: !8478, file: !2250, line: 420, column: 8)
!8488 = !DILocation(line: 420, column: 12, scope: !8487)
!8489 = !DILocation(line: 420, column: 8, scope: !8478)
!8490 = !DILocation(line: 421, column: 6, scope: !8487)
!8491 = !DILocation(line: 422, column: 5, scope: !8478)
!8492 = !DILocation(line: 422, column: 12, scope: !8478)
!8493 = !DILocation(line: 423, column: 4, scope: !8478)
!8494 = !DILocation(line: 423, column: 8, scope: !8478)
!8495 = !DILocation(line: 423, column: 15, scope: !8478)
!8496 = distinct !{!8496, !8472, !8497}
!8497 = !DILocation(line: 424, column: 2, scope: !8473)
!8498 = !DILocation(line: 427, column: 18, scope: !8473)
!8499 = !DILocation(line: 427, column: 22, scope: !8473)
!8500 = !DILocation(line: 427, column: 28, scope: !8473)
!8501 = !DILocation(line: 427, column: 7, scope: !8473)
!8502 = !DILocation(line: 427, column: 11, scope: !8473)
!8503 = !DILocation(line: 427, column: 16, scope: !8473)
!8504 = !DILocation(line: 428, column: 12, scope: !8505)
!8505 = distinct !DILexicalBlock(scope: !8473, file: !2250, line: 428, column: 11)
!8506 = !DILocation(line: 428, column: 16, scope: !8505)
!8507 = !DILocation(line: 428, column: 11, scope: !8473)
!8508 = !DILocation(line: 429, column: 2, scope: !8505)
!8509 = !DILocation(line: 430, column: 17, scope: !8473)
!8510 = !DILocation(line: 430, column: 21, scope: !8473)
!8511 = !DILocation(line: 430, column: 27, scope: !8473)
!8512 = !DILocation(line: 430, column: 32, scope: !8473)
!8513 = !DILocation(line: 430, column: 8, scope: !8473)
!8514 = !DILocation(line: 430, column: 15, scope: !8473)
!8515 = !DILocation(line: 431, column: 7, scope: !8473)
!8516 = !DILocation(line: 431, column: 11, scope: !8473)
!8517 = !DILocation(line: 431, column: 19, scope: !8473)
!8518 = distinct !{!8518, !8471, !8519}
!8519 = !DILocation(line: 432, column: 5, scope: !8431)
!8520 = !DILocation(line: 433, column: 1, scope: !8431)
!8521 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !142, file: !142, line: 281, type: !8522, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8522 = !DISubroutineType(types: !8523)
!8523 = !{!2653, !8524, !7}
!8524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8525, size: 64)
!8525 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2661)
!8526 = !DILocalVariable(name: "vec_", arg: 1, scope: !8521, file: !142, line: 281, type: !8524)
!8527 = !DILocation(line: 281, column: 1, scope: !8521)
!8528 = !DILocalVariable(name: "ix_", arg: 2, scope: !8521, file: !142, line: 281, type: !7)
!8529 = !DILocation(line: 0, scope: !8521)
!8530 = distinct !DISubprogram(name: "bmp_iter_next", scope: !2250, file: !2250, line: 382, type: !8531, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8531 = !DISubroutineType(types: !8532)
!8532 = !{null, !8341, !8345}
!8533 = !DILocalVariable(name: "bi", arg: 1, scope: !8530, file: !2250, line: 382, type: !8341)
!8534 = !DILocation(line: 382, column: 33, scope: !8530)
!8535 = !DILocalVariable(name: "bit_no", arg: 2, scope: !8530, file: !2250, line: 382, type: !8345)
!8536 = !DILocation(line: 382, column: 47, scope: !8530)
!8537 = !DILocation(line: 384, column: 3, scope: !8530)
!8538 = !DILocation(line: 384, column: 7, scope: !8530)
!8539 = !DILocation(line: 384, column: 12, scope: !8530)
!8540 = !DILocation(line: 385, column: 4, scope: !8530)
!8541 = !DILocation(line: 385, column: 11, scope: !8530)
!8542 = !DILocation(line: 386, column: 1, scope: !8530)
!8543 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !1125, file: !1125, line: 1878, type: !6741, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3489)
!8544 = !DILocalVariable(name: "gs", arg: 1, scope: !8543, file: !1125, line: 1878, type: !6718)
!8545 = !DILocation(line: 1878, column: 31, scope: !8543)
!8546 = !DILocation(line: 1881, column: 21, scope: !8543)
!8547 = !DILocation(line: 1881, column: 10, scope: !8543)
!8548 = !DILocation(line: 1881, column: 3, scope: !8543)
