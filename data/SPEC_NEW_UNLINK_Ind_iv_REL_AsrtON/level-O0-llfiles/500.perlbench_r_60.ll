; ModuleID = 'pp.c'
source_filename = "pp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sv = type { i8*, i32, i32, %union.anon }
%union.anon = type { i8* }
%struct.op = type { %struct.op*, %struct.op*, {}*, i64, i16, i8, i8 }
%struct.cop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, i32, %struct.hv*, %struct.gv*, i32, i32, i64*, %struct.refcounted_he* }
%struct.hv = type { %struct.xpvhv*, i32, i32, %union.anon.5 }
%struct.xpvhv = type { %struct.hv*, %union._xmgu, i64, i64 }
%union._xmgu = type { %struct.magic* }
%struct.magic = type { %struct.magic*, %struct.mgvtbl*, i16, i8, i8, i64, %struct.sv*, i8* }
%struct.mgvtbl = type { i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*)*, i32 (%struct.sv*, %struct.magic*, %struct.sv*, i8*, i32)*, i32 (%struct.magic*, %struct.clone_params*)*, i32 (%struct.sv*, %struct.magic*)* }
%struct.clone_params = type { %struct.av*, i64, %struct.interpreter*, %struct.interpreter*, %struct.av* }
%struct.interpreter = type { i8 }
%struct.av = type { %struct.xpvav*, i32, i32, %union.anon.0 }
%struct.xpvav = type { %struct.hv*, %union._xmgu, i64, i64, %struct.sv** }
%union.anon.0 = type { i8* }
%union.anon.5 = type { i8* }
%struct.gv = type { %struct.xpvgv*, i32, i32, %union.anon.4 }
%struct.xpvgv = type { %struct.hv*, %union._xmgu, i64, %union.anon.8, %union._xivu, %union._xnvu }
%union.anon.8 = type { i64 }
%union._xivu = type { i64 }
%union._xnvu = type { double }
%union.anon.4 = type { i8* }
%struct.refcounted_he = type { %struct.refcounted_he*, %struct.hek*, %union.anon.21, i32, [1 x i8] }
%struct.hek = type { i32, i32, [1 x i8] }
%union.anon.21 = type { i64 }
%struct.stackinfo = type { %struct.av*, %struct.context*, %struct.stackinfo*, %struct.stackinfo*, i32, i32, i32, i32 }
%struct.context = type { %union.anon.27 }
%union.anon.27 = type { %struct.subst }
%struct.subst = type { i8, i8, i16, i32, i64, i64, i8*, %struct.sv*, %struct.sv*, i8*, i8*, i8*, i8*, %struct.p5rx* }
%struct.p5rx = type { %struct.regexp*, i32, i32, %union.anon.7 }
%struct.regexp = type { %struct.hv*, %union._xmgu, i64, %union.anon.6, %struct.regexp_engine*, %struct.p5rx*, %struct.hv*, i32, i64, i64, i64, %struct.reg_substr_data*, i32, i32, i8*, i32, i32, %struct.regexp_paren_pair*, i8*, %struct.sv*, i64, i64, i64, i64, i16, %struct.cv* }
%union.anon.6 = type { i64 }
%struct.regexp_engine = type { %struct.p5rx* (%struct.sv*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i8* (%struct.p5rx*, %struct.sv*, i8*, i8*, i8*, i32, %struct.re_scream_pos_data_s*)*, %struct.sv* (%struct.p5rx*)*, void (%struct.p5rx*)*, void (%struct.p5rx*, i32, %struct.sv*)*, void (%struct.p5rx*, i32, %struct.sv*)*, i32 (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*, %struct.sv*, i32)*, %struct.sv* (%struct.p5rx*)*, %struct.p5rx* (%struct.sv**, i32, %struct.op*, %struct.regexp_engine*, %struct.p5rx*, i8*, i32, i32)* }
%struct.re_scream_pos_data_s = type { i8**, i64* }
%struct.reg_substr_data = type { i8, [3 x %struct.reg_substr_datum] }
%struct.reg_substr_datum = type { i64, i64, %struct.sv*, %struct.sv*, i64 }
%struct.regexp_paren_pair = type { i64, i64, i64 }
%struct.cv = type { %struct.xpvcv*, i32, i32, %union.anon.3 }
%struct.xpvcv = type { %struct.hv*, %union._xmgu, i64, %union.anon.9, %struct.hv*, %union.anon.10, %union.anon.11, %union.anon.12, i8*, %union.anon.13, %struct.cv*, i32, i32, i32 }
%union.anon.9 = type { i64 }
%union.anon.10 = type { %struct.op* }
%union.anon.11 = type { %struct.op* }
%union.anon.12 = type { %struct.gv* }
%union.anon.13 = type { %struct.padlist* }
%struct.padlist = type { i64, %struct.av**, i32, i32 }
%union.anon.3 = type { i8* }
%union.anon.7 = type { i8* }
%struct.xpvmg = type { %struct.hv*, %union._xmgu, i64, %union.anon.16, %union._xivu, %union._xnvu }
%union.anon.16 = type { i64 }
%struct.padnamelist = type { i64, %struct.padname**, i64, i64, i32 }
%struct.padname = type { i8*, %struct.hv*, %union.anon.17, i32, i32, i32, i32, i8, i8 }
%union.anon.17 = type { %struct.hv* }
%struct.io = type { %struct.xpvio*, i32, i32, %union.anon.2 }
%struct.xpvio = type { %struct.hv*, %union._xmgu, i64, %union.anon.14, %union._xivu, %struct._PerlIO**, %union.anon.15, i64, i64, i64, i8*, %struct.gv*, i8*, %struct.gv*, i8*, %struct.gv*, i8, i8 }
%union.anon.14 = type { i64 }
%struct._PerlIO = type opaque
%union.anon.15 = type { %struct.__dirstream* }
%struct.__dirstream = type opaque
%union.anon.2 = type { i8* }
%struct.gp = type { %struct.sv*, %struct.io*, %struct.cv*, i32, i32, %struct.hv*, %struct.av*, %struct.cv*, %struct.gv*, i32, %struct.hek* }
%struct.unop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op* }
%struct.he = type { %struct.he*, %struct.hek*, %union.anon.1 }
%union.anon.1 = type { %struct.sv* }
%struct.xpvhv_aux = type { %union._xhvnameu, %struct.av*, %struct.he*, i32, i32, %struct.mro_meta*, i32, i32, i32, i32 }
%union._xhvnameu = type { %struct.hek* }
%struct.mro_meta = type { %struct.hv*, %struct.sv*, %struct.hv*, i32, i32, %struct.mro_alg*, %struct.hv*, %struct.hv*, i32 }
%struct.mro_alg = type { %struct.av* (%struct.hv*, i32)*, i8*, i16, i16, i32 }
%struct.xpv = type { %struct.hv*, %union._xmgu, i64, %union.anon.18 }
%union.anon.18 = type { i64 }
%struct.xpvlv = type { %struct.hv*, %union._xmgu, i64, %union.anon.19, %union._xivu, %union._xnvu, %union.anon.20, i64, %struct.sv*, i8, i8 }
%union.anon.19 = type { i64 }
%union.anon.20 = type { i64 }
%struct.xpviv = type { %struct.hv*, %union._xmgu, i64, %union.anon.22, %union._xivu }
%union.anon.22 = type { i64 }
%struct.xpvuv = type { %struct.hv*, %union._xmgu, i64, %union.anon.23, %union._xivu }
%union.anon.23 = type { i64 }
%struct.xpvnv = type { %struct.hv*, %union._xmgu, i64, %union.anon.24, %union._xivu, %union._xnvu }
%union.anon.24 = type { i64 }
%struct.pmop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op*, %struct.p5rx*, i32, %union.anon.25, %union.anon.26, %struct.op* }
%union.anon.25 = type { %struct.op* }
%union.anon.26 = type { %struct.op* }
%struct.logop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.op*, %struct.op* }
%union.XOPRETANY = type { i8* }
%struct.svop = type { %struct.op*, %struct.op*, %struct.op* ()*, i64, i16, i8, i8, %struct.sv* }
%struct.block = type { i8, i8, i16, i32, %struct.cop*, i32, i32, %struct.pmop*, %union.anon.28 }
%union.anon.28 = type { %struct.block_sub }
%struct.block_sub = type { %struct.op*, %struct.cv*, %struct.av*, %struct.av*, i32, %struct.av* }

@PL_stack_sp = external dso_local global %struct.sv**, align 8
@PL_op = external dso_local global %struct.op*, align 8
@PL_stack_max = external dso_local global %struct.sv**, align 8
@PL_sv_undef = external dso_local global %struct.sv, align 8
@PL_curpad = external dso_local global %struct.sv**, align 8
@.str = private unnamed_addr constant [44 x i8] c"Can't return array to lvalue scalar context\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"Can't return hash to lvalue scalar context\00", align 1
@PL_sv_yes = external dso_local global %struct.sv, align 8
@PL_no_symref_sv = external dso_local constant [0 x i8], align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"...\00", align 1
@.str.3 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PL_no_usym = external dso_local constant [0 x i8], align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"Not a SCALAR reference\00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"a SCALAR\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@PL_no_localize_ref = external dso_local constant [0 x i8], align 1
@PL_curcop = external dso_local global %struct.cop*, align 8
@.str.7 = private unnamed_addr constant [7 x i8] c"CORE::\00", align 1
@.str.8 = private unnamed_addr constant [38 x i8] c"Can't find an opnumber for \22%d%lu%4p\22\00", align 1
@PL_stack_base = external dso_local global %struct.sv**, align 8
@PL_markstack_ptr = external dso_local global i32*, align 8
@PL_tmps_ix = external dso_local global i64, align 8
@PL_tmps_max = external dso_local global i64, align 8
@PL_sv_no = external dso_local global %struct.sv, align 8
@.str.9 = private unnamed_addr constant [38 x i8] c"Attempt to bless into a freed package\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"Attempt to bless into a reference\00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"Explicit blessing to '' (assuming package main)\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"RRAY\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"ODE\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"ILEHANDLE\00", align 1
@.str.15 = private unnamed_addr constant [39 x i8] c"Use of *glob{FILEHANDLE} is deprecated\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"ORMAT\00", align 1
@.str.17 = private unnamed_addr constant [4 x i8] c"LOB\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"ASH\00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"AME\00", align 1
@.str.20 = private unnamed_addr constant [7 x i8] c"ACKAGE\00", align 1
@.str.21 = private unnamed_addr constant [9 x i8] c"__ANON__\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"CALAR\00", align 1
@PL_defgv = external dso_local global %struct.gv*, align 8
@.str.23 = private unnamed_addr constant [34 x i8] c"Constant subroutine %-p undefined\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"(anonymous)\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"ISA\00", align 1
@.str.26 = private unnamed_addr constant [25 x i8] c"Illegal division by zero\00", align 1
@.str.27 = private unnamed_addr constant [21 x i8] c"Illegal modulus zero\00", align 1
@.str.28 = private unnamed_addr constant [37 x i8] c"Non-finite repeat count does nothing\00", align 1
@.str.29 = private unnamed_addr constant [35 x i8] c"Negative repeat count does nothing\00", align 1
@.str.30 = private unnamed_addr constant [33 x i8] c"Out of memory during list extend\00", align 1
@.str.31 = private unnamed_addr constant [35 x i8] c"Out of memory during string extend\00", align 1
@.str.32 = private unnamed_addr constant [4 x i8] c"log\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"sqrt\00", align 1
@.str.34 = private unnamed_addr constant [20 x i8] c"Can't take %s of %g\00", align 1
@PL_srand_called = external dso_local global i8, align 1
@.str.35 = private unnamed_addr constant [26 x i8] c"Integer overflow in srand\00", align 1
@.str.36 = private unnamed_addr constant [11 x i8] c"0 but true\00", align 1
@PL_charclass = external dso_local constant [0 x i32], align 4
@.str.37 = private unnamed_addr constant [45 x i8] c"Attempt to use reference as lvalue in substr\00", align 1
@PL_tainting = external dso_local global i8, align 1
@.str.38 = private unnamed_addr constant [25 x i8] c"substr outside of string\00", align 1
@PL_Sv = external dso_local global %struct.sv*, align 8
@PL_encoding = external dso_local global %struct.sv*, align 8
@PL_lex_encoding = external dso_local global %struct.sv*, align 8
@PL_tainted = external dso_local global i8, align 1
@PL_utf8skip = external dso_local constant [0 x i8], align 1
@.str.39 = private unnamed_addr constant [14 x i8] c"Cannot chr %g\00", align 1
@.str.40 = private unnamed_addr constant [37 x i8] c"Invalid negative number (%-p) in chr\00", align 1
@.str.41 = private unnamed_addr constant [65 x i8] c"The crypt() function is unimplemented due to excessive paranoia.\00", align 1
@PL_latin1_lc = external dso_local constant [0 x i8], align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"\CE\99\00", align 1
@PL_mod_latin1_uc = external dso_local constant [0 x i8], align 1
@.str.43 = private unnamed_addr constant [3 x i8] c"\CE\BC\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"EXISTS\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@PL_no_aelem = external dso_local constant [0 x i8], align 1
@.str.46 = private unnamed_addr constant [56 x i8] c"Can't modify index/value array slice in list assignment\00", align 1
@.str.47 = private unnamed_addr constant [61 x i8] c"Type of argument to %s must be unblessed hashref or arrayref\00", align 1
@PL_op_desc = external dso_local constant [0 x i8*], align 8
@.str.48 = private unnamed_addr constant [22 x i8] c"Can't modify %s in %s\00", align 1
@.str.49 = private unnamed_addr constant [21 x i8] c"Not a HASH reference\00", align 1
@.str.50 = private unnamed_addr constant [39 x i8] c"panic: avhv_delete no longer supported\00", align 1
@PL_no_helem_sv = external dso_local constant [0 x i8], align 1
@.str.51 = private unnamed_addr constant [53 x i8] c"Can't modify key/value hash slice in list assignment\00", align 1
@.str.52 = private unnamed_addr constant [41 x i8] c"Odd number of elements in anonymous hash\00", align 1
@PL_sv_consts = external dso_local global [35 x %struct.sv*], align 16
@.str.53 = private unnamed_addr constant [7 x i8] c"SPLICE\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"splice() offset past end of array\00", align 1
@PL_markstack_max = external dso_local global i32*, align 8
@.str.55 = private unnamed_addr constant [5 x i8] c"PUSH\00", align 1
@PL_delaymagic = external dso_local global i16, align 2
@.str.56 = private unnamed_addr constant [8 x i8] c"UNSHIFT\00", align 1
@PL_savestack_ix = external dso_local global i32, align 4
@.str.57 = private unnamed_addr constant [29 x i8] c"panic: pp_split, pm=%p, s=%p\00", align 1
@PL_curstack = external dso_local global %struct.av*, align 8
@PL_curstackinfo = external dso_local global %struct.stackinfo*, align 8
@.str.58 = private unnamed_addr constant [11 x i8] c"Split loop\00", align 1
@PL_lockhook = external dso_local global void (%struct.sv*)*, align 8
@.str.59 = private unnamed_addr constant [15 x i8] c"[out of range]\00", align 1
@PL_op_name = external dso_local constant [0 x i8*], align 8
@PL_no_sock_func = external dso_local constant [0 x i8], align 1
@.str.60 = private unnamed_addr constant [40 x i8] c"panic: unimplemented op %s (#%d) called\00", align 1
@PL_opargs = external dso_local constant [0 x i32], align 4
@.str.61 = private unnamed_addr constant [11 x i8] c"Not enough\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"Too many\00", align 1
@.str.63 = private unnamed_addr constant [20 x i8] c"%s arguments for %s\00", align 1
@.str.64 = private unnamed_addr constant [51 x i8] c"Type of arg %d to &CORE::%s must be hash reference\00", align 1
@.str.65 = private unnamed_addr constant [39 x i8] c"Type of arg %d to &CORE::%s must be %s\00", align 1
@.str.66 = private unnamed_addr constant [17 x i8] c"scalar reference\00", align 1
@.str.67 = private unnamed_addr constant [28 x i8] c"reference to one of [$@%&*]\00", align 1
@.str.68 = private unnamed_addr constant [27 x i8] c"reference to one of [$@%*]\00", align 1
@.str.69 = private unnamed_addr constant [24 x i8] c"panic: unknown OA_*: %x\00", align 1
@.str.70 = private unnamed_addr constant [34 x i8] c"Assigned value is not a reference\00", align 1
@.str.71 = private unnamed_addr constant [8 x i8] c" SCALAR\00", align 1
@.str.72 = private unnamed_addr constant [8 x i8] c"n ARRAY\00", align 1
@.str.73 = private unnamed_addr constant [6 x i8] c" HASH\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c" CODE\00", align 1
@.str.75 = private unnamed_addr constant [36 x i8] c"Assigned value is not a%s reference\00", align 1
@PL_magic_vtables = external dso_local constant [31 x %struct.mgvtbl], align 16
@.str.76 = private unnamed_addr constant [11 x i8] c"__ANONIO__\00", align 1
@.str.77 = private unnamed_addr constant [21 x i8] c"Not a GLOB reference\00", align 1
@.str.78 = private unnamed_addr constant [9 x i8] c"a symbol\00", align 1
@PL_rs = external dso_local global %struct.sv*, align 8
@.str.79 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.80 = private unnamed_addr constant [23 x i8] c"Not an ARRAY reference\00", align 1
@.str.81 = private unnamed_addr constant [33 x i8] c"Not an unblessed ARRAY reference\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_stub() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp eq i32 %cond, 2
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.then
  br label %do.body5

do.body5:                                         ; preds = %do.body
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp6 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp6, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %do.body5
  br i1 true, label %if.then10, label %if.end

cond.false9:                                      ; preds = %do.body5
  br i1 false, label %if.then10, label %if.end

if.then10:                                        ; preds = %cond.false9, %cond.true8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call11 = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call11, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then10, %cond.false9, %cond.true8
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  br label %do.end12

do.end12:                                         ; preds = %do.end
  br label %if.end13

if.end13:                                         ; preds = %do.end12, %cond.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %11, %struct.sv*** @PL_stack_sp, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 0
  %13 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %13
}

declare dso_local i32 @Perl_block_gimme() #1

declare dso_local %struct.sv** @Perl_stack_grow(%struct.sv**, %struct.sv**, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_padav() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %flags = alloca i32, align 4
  %maxarg = alloca i64, align 8
  %i = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %i100 = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %sv121 = alloca %struct.sv*, align 8
  %maxarg123 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end10

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end10

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private1 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private1, align 1
  %conv2 = zext i8 %8 to i32
  %and3 = and i32 %conv2, 64
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.false6, label %cond.true5

cond.true5:                                       ; preds = %if.then
  br i1 true, label %if.then7, label %if.end

cond.false6:                                      ; preds = %if.then
  br i1 false, label %if.then7, label %if.end

if.then7:                                         ; preds = %cond.false6, %cond.true5
  %9 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ8 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 3
  %11 = load i64, i64* %op_targ8, align 8
  %arrayidx9 = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 %11
  call void @Perl_save_clearsv(%struct.sv** %arrayidx9)
  br label %if.end

if.end:                                           ; preds = %if.then7, %cond.false6, %cond.true5
  br label %if.end10

if.end10:                                         ; preds = %if.end, %cond.false, %cond.true
  br label %do.body

do.body:                                          ; preds = %if.end10
  %12 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true12, label %cond.false13

cond.true12:                                      ; preds = %do.body
  br i1 true, label %if.then14, label %if.end15

cond.false13:                                     ; preds = %do.body
  br i1 false, label %if.then14, label %if.end15

if.then14:                                        ; preds = %cond.false13, %cond.true12
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %14, %struct.sv** %15, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.then14, %cond.false13, %cond.true12
  br label %do.end

do.end:                                           ; preds = %if.end15
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 5
  %18 = load i8, i8* %op_flags, align 2
  %conv16 = zext i8 %18 to i32
  %and17 = and i32 %conv16, 16
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %do.end
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %19, %struct.sv** %incdec.ptr, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %do.end
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private20 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private20, align 1
  %conv21 = zext i8 %25 to i32
  %and22 = and i32 %conv21, 8
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then24, label %if.end47

if.then24:                                        ; preds = %if.else
  %call25 = call i32 @Perl_is_lvalue_sub()
  store i32 %call25, i32* %flags, align 4
  %26 = load i32, i32* %flags, align 4
  %tobool26 = icmp ne i32 %26, 0
  br i1 %tobool26, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %if.then24
  %27 = load i32, i32* %flags, align 4
  %and27 = and i32 %27, 1
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.end46, label %if.then29

if.then29:                                        ; preds = %land.lhs.true
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags30 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 5
  %29 = load i8, i8* %op_flags30, align 2
  %conv31 = zext i8 %29 to i32
  %and32 = and i32 %conv31, 3
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false38

cond.true34:                                      ; preds = %if.then29
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags35 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 5
  %31 = load i8, i8* %op_flags35, align 2
  %conv36 = zext i8 %31 to i32
  %and37 = and i32 %conv36, 3
  br label %cond.end

cond.false38:                                     ; preds = %if.then29
  %call39 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false38, %cond.true34
  %cond = phi i32 [ %and37, %cond.true34 ], [ %call39, %cond.false38 ]
  %cmp40 = icmp eq i32 %cond, 2
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %cond.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  br label %if.end43

if.end43:                                         ; preds = %if.then42, %cond.end
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr44 = getelementptr inbounds %struct.sv*, %struct.sv** %33, i32 1
  store %struct.sv** %incdec.ptr44, %struct.sv*** %sp, align 8
  store %struct.sv* %32, %struct.sv** %incdec.ptr44, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next45 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next45, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

if.end46:                                         ; preds = %land.lhs.true, %if.then24
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags49 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 5
  %38 = load i8, i8* %op_flags49, align 2
  %conv50 = zext i8 %38 to i32
  %and51 = and i32 %conv50, 3
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true53, label %cond.false57

cond.true53:                                      ; preds = %if.end48
  %39 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags54 = getelementptr inbounds %struct.op, %struct.op* %39, i32 0, i32 5
  %40 = load i8, i8* %op_flags54, align 2
  %conv55 = zext i8 %40 to i32
  %and56 = and i32 %conv55, 3
  br label %cond.end59

cond.false57:                                     ; preds = %if.end48
  %call58 = call i32 @Perl_block_gimme()
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false57, %cond.true53
  %cond60 = phi i32 [ %and56, %cond.true53 ], [ %call58, %cond.false57 ]
  store i32 %cond60, i32* %gimme, align 4
  %41 = load i32, i32* %gimme, align 4
  %cmp61 = icmp eq i32 %41, 3
  br i1 %cmp61, label %if.then63, label %if.else117

if.then63:                                        ; preds = %cond.end59
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %43 = bitcast %struct.sv* %42 to i8*
  %44 = bitcast i8* %43 to %struct.av*
  %45 = bitcast %struct.av* %44 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags, align 4
  %and64 = and i32 %46, 8388608
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %cond.true66, label %cond.false69

cond.true66:                                      ; preds = %if.then63
  %47 = load %struct.sv*, %struct.sv** %targ, align 8
  %48 = bitcast %struct.sv* %47 to i8*
  %49 = bitcast i8* %48 to %struct.av*
  %50 = bitcast %struct.av* %49 to i8*
  %51 = bitcast i8* %50 to %struct.sv*
  %call67 = call i32 @Perl_mg_size(%struct.sv* %51)
  %conv68 = sext i32 %call67 to i64
  br label %cond.end70

cond.false69:                                     ; preds = %if.then63
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = bitcast %struct.sv* %52 to i8*
  %54 = bitcast i8* %53 to %struct.av*
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %54, i32 0, i32 0
  %55 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %55, i32 0, i32 2
  %56 = load i64, i64* %xav_fill, align 8
  br label %cond.end70

cond.end70:                                       ; preds = %cond.false69, %cond.true66
  %cond71 = phi i64 [ %conv68, %cond.true66 ], [ %56, %cond.false69 ]
  %add = add nsw i64 %cond71, 1
  store i64 %add, i64* %maxarg, align 8
  br label %do.body72

do.body72:                                        ; preds = %cond.end70
  %57 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast73 = ptrtoint %struct.sv** %57 to i64
  %sub.ptr.rhs.cast74 = ptrtoint %struct.sv** %58 to i64
  %sub.ptr.sub75 = sub i64 %sub.ptr.lhs.cast73, %sub.ptr.rhs.cast74
  %sub.ptr.div76 = sdiv exact i64 %sub.ptr.sub75, 8
  %59 = load i64, i64* %maxarg, align 8
  %cmp77 = icmp slt i64 %sub.ptr.div76, %59
  br i1 %cmp77, label %cond.true79, label %cond.false80

cond.true79:                                      ; preds = %do.body72
  br i1 true, label %if.then81, label %if.end83

cond.false80:                                     ; preds = %do.body72
  br i1 false, label %if.then81, label %if.end83

if.then81:                                        ; preds = %cond.false80, %cond.true79
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load i64, i64* %maxarg, align 8
  %call82 = call %struct.sv** @Perl_stack_grow(%struct.sv** %60, %struct.sv** %61, i64 %62)
  store %struct.sv** %call82, %struct.sv*** %sp, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %cond.false80, %cond.true79
  br label %do.end84

do.end84:                                         ; preds = %if.end83
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %65, 14680064
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %if.then88, label %if.else99

if.then88:                                        ; preds = %do.end84
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then88
  %66 = load i64, i64* %i, align 8
  %67 = load i64, i64* %maxarg, align 8
  %cmp89 = icmp ult i64 %66, %67
  br i1 %cmp89, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %69 = bitcast %struct.sv* %68 to i8*
  %70 = bitcast i8* %69 to %struct.av*
  %71 = load i64, i64* %i, align 8
  %call91 = call %struct.sv** @Perl_av_fetch(%struct.av* %70, i64 %71, i32 0)
  store %struct.sv** %call91, %struct.sv*** %svp, align 8
  %72 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool92 = icmp ne %struct.sv** %72, null
  br i1 %tobool92, label %cond.true93, label %cond.false94

cond.true93:                                      ; preds = %for.body
  %73 = load %struct.sv**, %struct.sv*** %svp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  br label %cond.end95

cond.false94:                                     ; preds = %for.body
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false94, %cond.true93
  %cond96 = phi %struct.sv* [ %74, %cond.true93 ], [ @PL_sv_undef, %cond.false94 ]
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  %76 = load i64, i64* %i, align 8
  %add97 = add i64 %76, 1
  %arrayidx98 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i64 %add97
  store %struct.sv* %cond96, %struct.sv** %arrayidx98, align 8
  br label %for.inc

for.inc:                                          ; preds = %cond.end95
  %77 = load i64, i64* %i, align 8
  %inc = add i64 %77, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end116

if.else99:                                        ; preds = %do.end84
  store i64 0, i64* %i100, align 8
  br label %for.cond101

for.cond101:                                      ; preds = %for.inc113, %if.else99
  %78 = load i64, i64* %i100, align 8
  %79 = load i64, i64* %maxarg, align 8
  %cmp102 = icmp ult i64 %78, %79
  br i1 %cmp102, label %for.body104, label %for.end115

for.body104:                                      ; preds = %for.cond101
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %81 = bitcast %struct.sv* %80 to %struct.av*
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %81, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u to %struct.sv***
  %82 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %83 = load i64, i64* %i100, align 8
  %arrayidx105 = getelementptr inbounds %struct.sv*, %struct.sv** %82, i64 %83
  %84 = load %struct.sv*, %struct.sv** %arrayidx105, align 8
  store %struct.sv* %84, %struct.sv** %sv, align 8
  %85 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool106 = icmp ne %struct.sv* %85, null
  br i1 %tobool106, label %cond.true107, label %cond.false108

cond.true107:                                     ; preds = %for.body104
  %86 = load %struct.sv*, %struct.sv** %sv, align 8
  br label %cond.end109

cond.false108:                                    ; preds = %for.body104
  br label %cond.end109

cond.end109:                                      ; preds = %cond.false108, %cond.true107
  %cond110 = phi %struct.sv* [ %86, %cond.true107 ], [ @PL_sv_undef, %cond.false108 ]
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %88 = load i64, i64* %i100, align 8
  %add111 = add i64 %88, 1
  %arrayidx112 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i64 %add111
  store %struct.sv* %cond110, %struct.sv** %arrayidx112, align 8
  br label %for.inc113

for.inc113:                                       ; preds = %cond.end109
  %89 = load i64, i64* %i100, align 8
  %inc114 = add i64 %89, 1
  store i64 %inc114, i64* %i100, align 8
  br label %for.cond101

for.end115:                                       ; preds = %for.cond101
  br label %if.end116

if.end116:                                        ; preds = %for.end115, %for.end
  %90 = load i64, i64* %maxarg, align 8
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %91, i64 %90
  store %struct.sv** %add.ptr, %struct.sv*** %sp, align 8
  br label %if.end138

if.else117:                                       ; preds = %cond.end59
  %92 = load i32, i32* %gimme, align 4
  %cmp118 = icmp eq i32 %92, 2
  br i1 %cmp118, label %if.then120, label %if.end137

if.then120:                                       ; preds = %if.else117
  %call122 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call122, %struct.sv** %sv121, align 8
  %93 = load %struct.sv*, %struct.sv** %targ, align 8
  %94 = bitcast %struct.sv* %93 to i8*
  %95 = bitcast i8* %94 to %struct.av*
  %96 = bitcast %struct.av* %95 to %struct.sv*
  %sv_flags124 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 2
  %97 = load i32, i32* %sv_flags124, align 4
  %and125 = and i32 %97, 8388608
  %tobool126 = icmp ne i32 %and125, 0
  br i1 %tobool126, label %cond.true127, label %cond.false130

cond.true127:                                     ; preds = %if.then120
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %99 = bitcast %struct.sv* %98 to i8*
  %100 = bitcast i8* %99 to %struct.av*
  %101 = bitcast %struct.av* %100 to i8*
  %102 = bitcast i8* %101 to %struct.sv*
  %call128 = call i32 @Perl_mg_size(%struct.sv* %102)
  %conv129 = sext i32 %call128 to i64
  br label %cond.end133

cond.false130:                                    ; preds = %if.then120
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %104 = bitcast %struct.sv* %103 to i8*
  %105 = bitcast i8* %104 to %struct.av*
  %sv_any131 = getelementptr inbounds %struct.av, %struct.av* %105, i32 0, i32 0
  %106 = load %struct.xpvav*, %struct.xpvav** %sv_any131, align 8
  %xav_fill132 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %106, i32 0, i32 2
  %107 = load i64, i64* %xav_fill132, align 8
  br label %cond.end133

cond.end133:                                      ; preds = %cond.false130, %cond.true127
  %cond134 = phi i64 [ %conv129, %cond.true127 ], [ %107, %cond.false130 ]
  %add135 = add nsw i64 %cond134, 1
  store i64 %add135, i64* %maxarg123, align 8
  %108 = load %struct.sv*, %struct.sv** %sv121, align 8
  %109 = load i64, i64* %maxarg123, align 8
  call void @Perl_sv_setiv(%struct.sv* %108, i64 %109)
  %110 = load %struct.sv*, %struct.sv** %sv121, align 8
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr136 = getelementptr inbounds %struct.sv*, %struct.sv** %111, i32 1
  store %struct.sv** %incdec.ptr136, %struct.sv*** %sp, align 8
  store %struct.sv* %110, %struct.sv** %incdec.ptr136, align 8
  br label %if.end137

if.end137:                                        ; preds = %cond.end133, %if.else117
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.end116
  %112 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %112, %struct.sv*** @PL_stack_sp, align 8
  %113 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next139 = getelementptr inbounds %struct.op, %struct.op* %113, i32 0, i32 0
  %114 = load %struct.op*, %struct.op** %op_next139, align 8
  store %struct.op* %114, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end138, %if.end43, %if.then19
  %115 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %115
}

declare dso_local void @Perl_save_clearsv(%struct.sv**) #1

declare dso_local i32 @Perl_is_lvalue_sub() #1

declare dso_local void @Perl_croak(i8*, ...) #1

declare dso_local i32 @Perl_mg_size(%struct.sv*) #1

declare dso_local %struct.sv** @Perl_av_fetch(%struct.av*, i64, i32) #1

declare dso_local %struct.sv* @Perl_sv_newmortal() #1

declare dso_local void @Perl_sv_setiv(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_padhv() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %gimme = alloca i32, align 4
  %flags = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %targ, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %10, %struct.sv** %incdec.ptr, align 8
  br label %do.end2

do.end2:                                          ; preds = %do.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv = zext i8 %13 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %do.end2
  br i1 true, label %if.then5, label %if.end16

cond.false4:                                      ; preds = %do.end2
  br i1 false, label %if.then5, label %if.end16

if.then5:                                         ; preds = %cond.false4, %cond.true3
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private6 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private6, align 1
  %conv7 = zext i8 %15 to i32
  %and8 = and i32 %conv7, 64
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.false11, label %cond.true10

cond.true10:                                      ; preds = %if.then5
  br i1 true, label %if.then12, label %if.end15

cond.false11:                                     ; preds = %if.then5
  br i1 false, label %if.then12, label %if.end15

if.then12:                                        ; preds = %cond.false11, %cond.true10
  %16 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ13 = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ13, align 8
  %arrayidx14 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 %18
  call void @Perl_save_clearsv(%struct.sv** %arrayidx14)
  br label %if.end15

if.end15:                                         ; preds = %if.then12, %cond.false11, %cond.true10
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %cond.false4, %cond.true3
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 5
  %20 = load i8, i8* %op_flags, align 2
  %conv17 = zext i8 %20 to i32
  %and18 = and i32 %conv17, 16
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.end16
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end16
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private21 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private21, align 1
  %conv22 = zext i8 %25 to i32
  %and23 = and i32 %conv22, 8
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.end47

if.then25:                                        ; preds = %if.else
  %call26 = call i32 @Perl_is_lvalue_sub()
  store i32 %call26, i32* %flags, align 4
  %26 = load i32, i32* %flags, align 4
  %tobool27 = icmp ne i32 %26, 0
  br i1 %tobool27, label %land.lhs.true, label %if.end46

land.lhs.true:                                    ; preds = %if.then25
  %27 = load i32, i32* %flags, align 4
  %and28 = and i32 %27, 1
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %if.end46, label %if.then30

if.then30:                                        ; preds = %land.lhs.true
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags31 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 5
  %29 = load i8, i8* %op_flags31, align 2
  %conv32 = zext i8 %29 to i32
  %and33 = and i32 %conv32, 3
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.true35, label %cond.false39

cond.true35:                                      ; preds = %if.then30
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags36 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 5
  %31 = load i8, i8* %op_flags36, align 2
  %conv37 = zext i8 %31 to i32
  %and38 = and i32 %conv37, 3
  br label %cond.end

cond.false39:                                     ; preds = %if.then30
  %call40 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false39, %cond.true35
  %cond = phi i32 [ %and38, %cond.true35 ], [ %call40, %cond.false39 ]
  %cmp41 = icmp eq i32 %cond, 2
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %cond.end
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %cond.end
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %32, %struct.sv*** @PL_stack_sp, align 8
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next45 = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 0
  %34 = load %struct.op*, %struct.op** %op_next45, align 8
  store %struct.op* %34, %struct.op** %retval, align 8
  br label %return

if.end46:                                         ; preds = %land.lhs.true, %if.then25
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.else
  br label %if.end48

if.end48:                                         ; preds = %if.end47
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags49 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 5
  %36 = load i8, i8* %op_flags49, align 2
  %conv50 = zext i8 %36 to i32
  %and51 = and i32 %conv50, 3
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true53, label %cond.false57

cond.true53:                                      ; preds = %if.end48
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags54 = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 5
  %38 = load i8, i8* %op_flags54, align 2
  %conv55 = zext i8 %38 to i32
  %and56 = and i32 %conv55, 3
  br label %cond.end59

cond.false57:                                     ; preds = %if.end48
  %call58 = call i32 @Perl_block_gimme()
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false57, %cond.true53
  %cond60 = phi i32 [ %and56, %cond.true53 ], [ %call58, %cond.false57 ]
  store i32 %cond60, i32* %gimme, align 4
  %39 = load i32, i32* %gimme, align 4
  %cmp61 = icmp eq i32 %39, 3
  br i1 %cmp61, label %if.then63, label %if.else65

if.then63:                                        ; preds = %cond.end59
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %40, %struct.sv*** @PL_stack_sp, align 8
  %call64 = call %struct.op* @Perl_do_kv()
  store %struct.op* %call64, %struct.op** %retval, align 8
  br label %return

if.else65:                                        ; preds = %cond.end59
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private66 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 6
  %42 = load i8, i8* %op_private66, align 1
  %conv67 = zext i8 %42 to i32
  %and68 = and i32 %conv67, 32
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %land.lhs.true78, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else65
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private70 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 6
  %44 = load i8, i8* %op_private70, align 1
  %conv71 = zext i8 %44 to i32
  %and72 = and i32 %conv71, 16
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %land.lhs.true74, label %if.else100

land.lhs.true74:                                  ; preds = %lor.lhs.false
  %call75 = call i32 @Perl_block_gimme()
  %cmp76 = icmp eq i32 %call75, 1
  br i1 %cmp76, label %land.lhs.true78, label %if.else100

land.lhs.true78:                                  ; preds = %land.lhs.true74, %if.else65
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags, align 4
  %and79 = and i32 %46, 8388608
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %lor.lhs.false81, label %if.then84

lor.lhs.false81:                                  ; preds = %land.lhs.true78
  %47 = load %struct.sv*, %struct.sv** %targ, align 8
  %call82 = call %struct.magic* @Perl_mg_find(%struct.sv* %47, i32 80)
  %tobool83 = icmp ne %struct.magic* %call82, null
  br i1 %tobool83, label %if.else100, label %if.then84

if.then84:                                        ; preds = %lor.lhs.false81, %land.lhs.true78
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any, align 8
  %50 = bitcast i8* %49 to %struct.xpvhv*
  %xhv_keys = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %50, i32 0, i32 2
  %51 = load i64, i64* %xhv_keys, align 8
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any85 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any85, align 8
  %54 = bitcast i8* %53 to %struct.xpvmg*
  %xmg_u = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %54, i32 0, i32 1
  %xmg_magic = bitcast %union._xmgu* %xmg_u to %struct.magic**
  %55 = load %struct.magic*, %struct.magic** %xmg_magic, align 8
  %tobool86 = icmp ne %struct.magic* %55, null
  br i1 %tobool86, label %cond.true87, label %cond.false89

cond.true87:                                      ; preds = %if.then84
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = bitcast %struct.sv* %56 to %struct.hv*
  %call88 = call i32 @Perl_hv_placeholders_get(%struct.hv* %57)
  br label %cond.end90

cond.false89:                                     ; preds = %if.then84
  br label %cond.end90

cond.end90:                                       ; preds = %cond.false89, %cond.true87
  %cond91 = phi i32 [ %call88, %cond.true87 ], [ 0, %cond.false89 ]
  %conv92 = sext i32 %cond91 to i64
  %sub = sub i64 %51, %conv92
  %tobool93 = icmp ne i64 %sub, 0
  br i1 %tobool93, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %cond.end90
  br label %cond.end98

cond.false95:                                     ; preds = %cond.end90
  %call96 = call %struct.sv* @Perl_newSViv(i64 0)
  %call97 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call96)
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false95, %cond.true94
  %cond99 = phi %struct.sv* [ @PL_sv_yes, %cond.true94 ], [ %call97, %cond.false95 ]
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond99, %struct.sv** %58, align 8
  br label %if.end106

if.else100:                                       ; preds = %lor.lhs.false81, %land.lhs.true74, %lor.lhs.false
  %59 = load i32, i32* %gimme, align 4
  %cmp101 = icmp eq i32 %59, 2
  br i1 %cmp101, label %if.then103, label %if.end105

if.then103:                                       ; preds = %if.else100
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %61 = bitcast %struct.sv* %60 to i8*
  %62 = bitcast i8* %61 to %struct.hv*
  %call104 = call %struct.sv* @Perl_hv_scalar(%struct.hv* %62)
  store %struct.sv* %call104, %struct.sv** %sv, align 8
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %63, %struct.sv** %64, align 8
  br label %if.end105

if.end105:                                        ; preds = %if.then103, %if.else100
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %cond.end98
  br label %if.end107

if.end107:                                        ; preds = %if.end106
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %65, %struct.sv*** @PL_stack_sp, align 8
  %66 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next108 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 0
  %67 = load %struct.op*, %struct.op** %op_next108, align 8
  store %struct.op* %67, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end107, %if.then63, %if.end44, %if.then20
  %68 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %68
}

declare dso_local %struct.op* @Perl_do_kv() #1

declare dso_local %struct.magic* @Perl_mg_find(%struct.sv*, i32) #1

declare dso_local i32 @Perl_hv_placeholders_get(%struct.hv*) #1

declare dso_local %struct.sv* @Perl_sv_2mortal(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_newSViv(i64) #1

declare dso_local %struct.sv* @Perl_hv_scalar(%struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_padcv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body1

do.body1:                                         ; preds = %do.body
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body1
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body1
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %targ, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %10, %struct.sv** %incdec.ptr, align 8
  br label %do.end2

do.end2:                                          ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %12, %struct.sv*** @PL_stack_sp, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 0
  %14 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %14
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_introcv() #0 {
entry:
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %2
  %3 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %3, %struct.sv** %targ, align 8
  %4 = load %struct.sv*, %struct.sv** %targ, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.sv*
  %call = call i32 @S_SvPADSTALE_off(%struct.sv* %6)
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %8
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @S_SvPADSTALE_off(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, -262145
  store i32 %and, i32* %sv_flags, align 4
  ret i32 %and
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_clonecv() #0 {
entry:
  %targ = alloca %struct.sv*, align 8
  %protocv = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %2
  %3 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %3, %struct.sv** %targ, align 8
  %call = call %struct.cv* @Perl_find_runcv(i32* null)
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %call, i32 0, i32 0
  %4 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %5 = bitcast %struct.xpvcv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.xpvcv*
  %xcv_padlist_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %6, i32 0, i32 9
  %xcv_padlist = bitcast %union.anon.13* %xcv_padlist_u to %struct.padlist**
  %7 = load %struct.padlist*, %struct.padlist** %xcv_padlist, align 8
  %xpadl_alloc = getelementptr inbounds %struct.padlist, %struct.padlist* %7, i32 0, i32 1
  %8 = load %struct.av**, %struct.av*** %xpadl_alloc, align 8
  %9 = load %struct.av*, %struct.av** %8, align 8
  %10 = bitcast %struct.av* %9 to %struct.padnamelist*
  %xpadnl_alloc = getelementptr inbounds %struct.padnamelist, %struct.padnamelist* %10, i32 0, i32 1
  %11 = load %struct.padname**, %struct.padname*** %xpadnl_alloc, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ1 = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 3
  %13 = load i64, i64* %op_targ1, align 8
  %arrayidx2 = getelementptr inbounds %struct.padname*, %struct.padname** %11, i64 %13
  %14 = load %struct.padname*, %struct.padname** %arrayidx2, align 8
  %xpadn_type_u = getelementptr inbounds %struct.padname, %struct.padname* %14, i32 0, i32 2
  %xpadn_protocv = bitcast %union.anon.17* %xpadn_type_u to %struct.cv**
  %15 = load %struct.cv*, %struct.cv** %xpadn_protocv, align 8
  store %struct.cv* %15, %struct.cv** %protocv, align 8
  %16 = load %struct.cv*, %struct.cv** %protocv, align 8
  %sv_any3 = getelementptr inbounds %struct.cv, %struct.cv* %16, i32 0, i32 0
  %17 = load %struct.xpvcv*, %struct.xpvcv** %sv_any3, align 8
  %18 = bitcast %struct.xpvcv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %19, i32 0, i32 12
  %20 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %20, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ4 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  %22 = load i64, i64* %op_targ4, align 8
  call void @Perl_save_padsv_and_mortalize(i64 %22)
  %23 = load %struct.cv*, %struct.cv** %protocv, align 8
  %sv_refcnt = getelementptr inbounds %struct.cv, %struct.cv* %23, i32 0, i32 1
  %24 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %24, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %25 = load %struct.cv*, %struct.cv** %protocv, align 8
  %26 = bitcast %struct.cv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.sv*
  %28 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ5 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 3
  %30 = load i64, i64* %op_targ5, align 8
  %arrayidx6 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i64 %30
  store %struct.sv* %27, %struct.sv** %arrayidx6, align 8
  br label %if.end13

if.else:                                          ; preds = %entry
  %31 = load %struct.cv*, %struct.cv** %protocv, align 8
  %sv_any7 = getelementptr inbounds %struct.cv, %struct.cv* %31, i32 0, i32 0
  %32 = load %struct.xpvcv*, %struct.xpvcv** %sv_any7, align 8
  %33 = bitcast %struct.xpvcv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.xpvcv*
  %xcv_root_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %34, i32 0, i32 6
  %xcv_root = bitcast %union.anon.11* %xcv_root_u to %struct.op**
  %35 = load %struct.op*, %struct.op** %xcv_root, align 8
  %tobool8 = icmp ne %struct.op* %35, null
  br i1 %tobool8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else
  %36 = load %struct.cv*, %struct.cv** %protocv, align 8
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = bitcast %struct.sv* %37 to %struct.cv*
  %call10 = call %struct.cv* @Perl_cv_clone_into(%struct.cv* %36, %struct.cv* %38)
  %39 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ11 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 3
  %41 = load i64, i64* %op_targ11, align 8
  %arrayidx12 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i64 %41
  call void @Perl_save_clearsv(%struct.sv** %arrayidx12)
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %43
}

declare dso_local %struct.cv* @Perl_find_runcv(i32*) #1

declare dso_local void @Perl_save_padsv_and_mortalize(i64) #1

declare dso_local %struct.cv* @Perl_cv_clone_into(%struct.cv*, %struct.cv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rv2gv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 6
  %5 = load i8, i8* %op_private, align 1
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 48
  %tobool = icmp ne i32 %and, 0
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private1 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_private1, align 1
  %conv2 = zext i8 %7 to i32
  %and3 = and i32 %conv2, 2
  %tobool4 = icmp ne i32 %and3, 0
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags, align 2
  %conv5 = zext i8 %9 to i32
  %and6 = and i32 %conv5, 128
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags8, align 2
  %conv9 = zext i8 %11 to i32
  %and10 = and i32 %conv9, 32
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.lhs.true, %entry
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 26
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %13 = phi i1 [ true, %land.lhs.true ], [ %cmp, %lor.rhs ]
  %call = call %struct.sv* @S_rv2gv(%struct.sv* %3, i1 zeroext %tobool, i1 zeroext %tobool4, i1 zeroext %13)
  store %struct.sv* %call, %struct.sv** %sv, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private13 = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private13, align 1
  %conv14 = zext i8 %15 to i32
  %and15 = and i32 %conv14, 128
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %17 = bitcast %struct.sv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.gv*
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags17 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 5
  %20 = load i8, i8* %op_flags17, align 2
  %conv18 = zext i8 %20 to i32
  %and19 = and i32 %conv18, 128
  %tobool20 = icmp ne i32 %and19, 0
  %lnot = xor i1 %tobool20, true
  %lnot.ext = zext i1 %lnot to i32
  call void @Perl_save_gp(%struct.gv* %18, i32 %lnot.ext)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.end
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %21, %struct.sv** %22, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %23, %struct.sv*** @PL_stack_sp, align 8
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 0
  %25 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %25
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_rv2gv(%struct.sv* %sv, i1 zeroext %vivify_sv, i1 zeroext %strict, i1 zeroext %noinit) #0 {
entry:
  %retval = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %vivify_sv.addr = alloca i8, align 1
  %strict.addr = alloca i8, align 1
  %noinit.addr = alloca i8, align 1
  %gv = alloca %struct.gv*, align 8
  %gv80 = alloca %struct.gv*, align 8
  %namesv = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %name = alloca i8*, align 8
  %zok = alloca i64, align 8
  %newsv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %frombool = zext i1 %vivify_sv to i8
  store i8 %frombool, i8* %vivify_sv.addr, align 1
  %frombool1 = zext i1 %strict to i8
  store i8 %frombool1, i8* %strict.addr, align 1
  %frombool2 = zext i1 %noinit to i8
  store i8 %frombool2, i8* %noinit.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 9
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %3, 16777216
  %tobool = icmp ne i32 %and4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %5, 2097152
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %6)
  %tobool8 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %7 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool8, %land.rhs ]
  %land.ext = zext i1 %7 to i32
  br label %if.end

if.end:                                           ; preds = %land.end, %lor.lhs.false
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %9, 2048
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else51

if.then12:                                        ; preds = %if.end
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %11, 2048
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true, label %if.end27

land.lhs.true:                                    ; preds = %if.then12
  %12 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %14, 1048576
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %land.lhs.true19, label %if.end27

land.lhs.true19:                                  ; preds = %land.lhs.true
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u20 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 3
  %svu_rv21 = bitcast %union.anon* %sv_u20 to %struct.sv**
  %16 = load %struct.sv*, %struct.sv** %svu_rv21, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %18, i32 0, i32 0
  %19 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags22 = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %20, 268435456
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %land.lhs.true19
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call26 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %21, i32 4)
  store %struct.sv* %call26, %struct.sv** %sv.addr, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %land.lhs.true19, %land.lhs.true, %if.then12
  br label %wasref

wasref:                                           ; preds = %do.end401, %if.end27
  %22 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u28 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv29 = bitcast %union.anon* %sv_u28 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv29, align 8
  store %struct.sv* %23, %struct.sv** %sv.addr, align 8
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %25, 255
  %cmp32 = icmp eq i32 %and31, 15
  br i1 %cmp32, label %if.then33, label %if.else

if.then33:                                        ; preds = %wasref
  %call34 = call %struct.sv* @Perl_sv_newmortal()
  %26 = bitcast %struct.sv* %call34 to i8*
  %27 = bitcast i8* %26 to %struct.gv*
  store %struct.gv* %27, %struct.gv** %gv, align 8
  %28 = load %struct.gv*, %struct.gv** %gv, align 8
  call void @Perl_gv_init_pvn(%struct.gv* %28, %struct.hv* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.76, i64 0, i64 0), i64 10, i32 0)
  %29 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %30 = bitcast %struct.sv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.io*
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u35 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u35 to %struct.gp**
  %33 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %33, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 1
  store %struct.io* %31, %struct.io** %gp_io, align 8
  %34 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %35 = bitcast %struct.sv* %34 to i8*
  %36 = bitcast i8* %35 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 1
  %37 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %37, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %38 = load %struct.gv*, %struct.gv** %gv, align 8
  %39 = bitcast %struct.gv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  store %struct.sv* %40, %struct.sv** %sv.addr, align 8
  br label %if.end50

if.else:                                          ; preds = %wasref
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %42, 49152
  %cmp38 = icmp eq i32 %and37, 32768
  br i1 %cmp38, label %land.lhs.true39, label %if.then47

land.lhs.true39:                                  ; preds = %if.else
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %44, 255
  %cmp42 = icmp eq i32 %and41, 9
  br i1 %cmp42, label %if.end49, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %land.lhs.true39
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %46, 255
  %cmp46 = icmp eq i32 %and45, 10
  br i1 %cmp46, label %if.end49, label %if.then47

if.then47:                                        ; preds = %lor.lhs.false43, %if.else
  %call48 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.77, i64 0, i64 0))
  br label %if.end49

if.end49:                                         ; preds = %if.then47, %lor.lhs.false43, %land.lhs.true39
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.then33
  br label %if.end449

if.else51:                                        ; preds = %if.end
  %47 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %48, 49152
  %cmp54 = icmp eq i32 %and53, 32768
  br i1 %cmp54, label %land.lhs.true55, label %if.then63

land.lhs.true55:                                  ; preds = %if.else51
  %49 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %50, 255
  %cmp58 = icmp eq i32 %and57, 9
  br i1 %cmp58, label %if.end448, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %land.lhs.true55
  %51 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %52, 255
  %cmp62 = icmp eq i32 %and61, 10
  br i1 %cmp62, label %if.end448, label %if.then63

if.then63:                                        ; preds = %lor.lhs.false59, %if.else51
  %53 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %54, 65280
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.end415, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %if.then63
  %55 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %56, 255
  %cmp70 = icmp eq i32 %and69, 8
  br i1 %cmp70, label %if.end415, label %lor.lhs.false71

lor.lhs.false71:                                  ; preds = %lor.lhs.false67
  %57 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags72 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags72, align 4
  %and73 = and i32 %58, 16826623
  %cmp74 = icmp eq i32 %and73, 16777226
  br i1 %cmp74, label %if.end415, label %if.then75

if.then75:                                        ; preds = %lor.lhs.false71
  %59 = load i8, i8* %vivify_sv.addr, align 1
  %tobool76 = trunc i8 %59 to i1
  br i1 %tobool76, label %land.lhs.true77, label %if.end402

land.lhs.true77:                                  ; preds = %if.then75
  %60 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp78 = icmp ne %struct.sv* %60, @PL_sv_undef
  br i1 %cmp78, label %if.then79, label %if.end402

if.then79:                                        ; preds = %land.lhs.true77
  %61 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %62, 134283264
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then84, label %if.end85

if.then84:                                        ; preds = %if.then79
  call void @Perl_croak_no_modify()
  br label %if.end85

if.end85:                                         ; preds = %if.then84, %if.then79
  %63 = load %struct.op*, %struct.op** @PL_op, align 8
  %64 = bitcast %struct.op* %63 to %struct.unop*
  %op_targ = getelementptr inbounds %struct.unop, %struct.unop* %64, i32 0, i32 3
  %65 = load i64, i64* %op_targ, align 8
  %tobool86 = icmp ne i64 %65, 0
  br i1 %tobool86, label %if.then87, label %if.else95

if.then87:                                        ; preds = %if.end85
  %66 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %68 = bitcast %struct.op* %67 to %struct.unop*
  %op_targ88 = getelementptr inbounds %struct.unop, %struct.unop* %68, i32 0, i32 3
  %69 = load i64, i64* %op_targ88, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %66, i64 %69
  %70 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %70, %struct.sv** %namesv, align 8
  %71 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %71, i32 0, i32 8
  %72 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  store %struct.hv* %72, %struct.hv** %stash, align 8
  %73 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags89 = getelementptr inbounds %struct.hv, %struct.hv* %73, i32 0, i32 2
  %74 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %74, 255
  %cmp91 = icmp ne i32 %and90, 12
  br i1 %cmp91, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.then87
  store %struct.hv* null, %struct.hv** %stash, align 8
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.then87
  %call94 = call %struct.sv* @Perl_newSV(i64 0)
  %75 = bitcast %struct.sv* %call94 to i8*
  %76 = bitcast i8* %75 to %struct.gv*
  store %struct.gv* %76, %struct.gv** %gv80, align 8
  %77 = load %struct.gv*, %struct.gv** %gv80, align 8
  %78 = load %struct.hv*, %struct.hv** %stash, align 8
  %79 = load %struct.sv*, %struct.sv** %namesv, align 8
  call void @Perl_gv_init_sv(%struct.gv* %77, %struct.hv* %78, %struct.sv* %79, i32 0)
  br label %if.end315

if.else95:                                        ; preds = %if.end85
  %80 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash96 = getelementptr inbounds %struct.cop, %struct.cop* %80, i32 0, i32 8
  %81 = load %struct.hv*, %struct.hv** %cop_stash96, align 8
  %tobool97 = icmp ne %struct.hv* %81, null
  br i1 %tobool97, label %cond.true98, label %cond.false179

cond.true98:                                      ; preds = %if.else95
  %82 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash99 = getelementptr inbounds %struct.cop, %struct.cop* %82, i32 0, i32 8
  %83 = load %struct.hv*, %struct.hv** %cop_stash99, align 8
  %sv_flags100 = getelementptr inbounds %struct.hv, %struct.hv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %84, 33554432
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %land.lhs.true103, label %cond.false176

land.lhs.true103:                                 ; preds = %cond.true98
  %85 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash104 = getelementptr inbounds %struct.cop, %struct.cop* %85, i32 0, i32 8
  %86 = load %struct.hv*, %struct.hv** %cop_stash104, align 8
  %sv_u105 = getelementptr inbounds %struct.hv, %struct.hv* %86, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u105 to %struct.he***
  %87 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %88 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash106 = getelementptr inbounds %struct.cop, %struct.cop* %88, i32 0, i32 8
  %89 = load %struct.hv*, %struct.hv** %cop_stash106, align 8
  %sv_any107 = getelementptr inbounds %struct.hv, %struct.hv* %89, i32 0, i32 0
  %90 = load %struct.xpvhv*, %struct.xpvhv** %sv_any107, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %90, i32 0, i32 3
  %91 = load i64, i64* %xhv_max, align 8
  %add = add i64 %91, 1
  %arrayidx108 = getelementptr inbounds %struct.he*, %struct.he** %87, i64 %add
  %92 = bitcast %struct.he** %arrayidx108 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %92, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %93 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool109 = icmp ne %struct.hek* %93, null
  br i1 %tobool109, label %land.lhs.true110, label %cond.false176

land.lhs.true110:                                 ; preds = %land.lhs.true103
  %94 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash111 = getelementptr inbounds %struct.cop, %struct.cop* %94, i32 0, i32 8
  %95 = load %struct.hv*, %struct.hv** %cop_stash111, align 8
  %sv_u112 = getelementptr inbounds %struct.hv, %struct.hv* %95, i32 0, i32 3
  %svu_hash113 = bitcast %union.anon.5* %sv_u112 to %struct.he***
  %96 = load %struct.he**, %struct.he*** %svu_hash113, align 8
  %97 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash114 = getelementptr inbounds %struct.cop, %struct.cop* %97, i32 0, i32 8
  %98 = load %struct.hv*, %struct.hv** %cop_stash114, align 8
  %sv_any115 = getelementptr inbounds %struct.hv, %struct.hv* %98, i32 0, i32 0
  %99 = load %struct.xpvhv*, %struct.xpvhv** %sv_any115, align 8
  %xhv_max116 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %99, i32 0, i32 3
  %100 = load i64, i64* %xhv_max116, align 8
  %add117 = add i64 %100, 1
  %arrayidx118 = getelementptr inbounds %struct.he*, %struct.he** %96, i64 %add117
  %101 = bitcast %struct.he** %arrayidx118 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %101, i32 0, i32 4
  %102 = load i32, i32* %xhv_name_count, align 4
  %tobool119 = icmp ne i32 %102, 0
  br i1 %tobool119, label %cond.true120, label %cond.false131

cond.true120:                                     ; preds = %land.lhs.true110
  %103 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash121 = getelementptr inbounds %struct.cop, %struct.cop* %103, i32 0, i32 8
  %104 = load %struct.hv*, %struct.hv** %cop_stash121, align 8
  %sv_u122 = getelementptr inbounds %struct.hv, %struct.hv* %104, i32 0, i32 3
  %svu_hash123 = bitcast %union.anon.5* %sv_u122 to %struct.he***
  %105 = load %struct.he**, %struct.he*** %svu_hash123, align 8
  %106 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash124 = getelementptr inbounds %struct.cop, %struct.cop* %106, i32 0, i32 8
  %107 = load %struct.hv*, %struct.hv** %cop_stash124, align 8
  %sv_any125 = getelementptr inbounds %struct.hv, %struct.hv* %107, i32 0, i32 0
  %108 = load %struct.xpvhv*, %struct.xpvhv** %sv_any125, align 8
  %xhv_max126 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %108, i32 0, i32 3
  %109 = load i64, i64* %xhv_max126, align 8
  %add127 = add i64 %109, 1
  %arrayidx128 = getelementptr inbounds %struct.he*, %struct.he** %105, i64 %add127
  %110 = bitcast %struct.he** %arrayidx128 to %struct.xpvhv_aux*
  %xhv_name_u129 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %110, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u129 to %struct.hek***
  %111 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %112 = load %struct.hek*, %struct.hek** %111, align 8
  %tobool130 = icmp ne %struct.hek* %112, null
  br i1 %tobool130, label %cond.true143, label %cond.false176

cond.false131:                                    ; preds = %land.lhs.true110
  %113 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash132 = getelementptr inbounds %struct.cop, %struct.cop* %113, i32 0, i32 8
  %114 = load %struct.hv*, %struct.hv** %cop_stash132, align 8
  %sv_u133 = getelementptr inbounds %struct.hv, %struct.hv* %114, i32 0, i32 3
  %svu_hash134 = bitcast %union.anon.5* %sv_u133 to %struct.he***
  %115 = load %struct.he**, %struct.he*** %svu_hash134, align 8
  %116 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash135 = getelementptr inbounds %struct.cop, %struct.cop* %116, i32 0, i32 8
  %117 = load %struct.hv*, %struct.hv** %cop_stash135, align 8
  %sv_any136 = getelementptr inbounds %struct.hv, %struct.hv* %117, i32 0, i32 0
  %118 = load %struct.xpvhv*, %struct.xpvhv** %sv_any136, align 8
  %xhv_max137 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %118, i32 0, i32 3
  %119 = load i64, i64* %xhv_max137, align 8
  %add138 = add i64 %119, 1
  %arrayidx139 = getelementptr inbounds %struct.he*, %struct.he** %115, i64 %add138
  %120 = bitcast %struct.he** %arrayidx139 to %struct.xpvhv_aux*
  %xhv_name_u140 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %120, i32 0, i32 0
  %xhvnameu_name141 = bitcast %union._xhvnameu* %xhv_name_u140 to %struct.hek**
  %121 = load %struct.hek*, %struct.hek** %xhvnameu_name141, align 8
  %tobool142 = icmp ne %struct.hek* %121, null
  br i1 %tobool142, label %cond.true143, label %cond.false176

cond.true143:                                     ; preds = %cond.false131, %cond.true120
  %122 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash144 = getelementptr inbounds %struct.cop, %struct.cop* %122, i32 0, i32 8
  %123 = load %struct.hv*, %struct.hv** %cop_stash144, align 8
  %sv_u145 = getelementptr inbounds %struct.hv, %struct.hv* %123, i32 0, i32 3
  %svu_hash146 = bitcast %union.anon.5* %sv_u145 to %struct.he***
  %124 = load %struct.he**, %struct.he*** %svu_hash146, align 8
  %125 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash147 = getelementptr inbounds %struct.cop, %struct.cop* %125, i32 0, i32 8
  %126 = load %struct.hv*, %struct.hv** %cop_stash147, align 8
  %sv_any148 = getelementptr inbounds %struct.hv, %struct.hv* %126, i32 0, i32 0
  %127 = load %struct.xpvhv*, %struct.xpvhv** %sv_any148, align 8
  %xhv_max149 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %127, i32 0, i32 3
  %128 = load i64, i64* %xhv_max149, align 8
  %add150 = add i64 %128, 1
  %arrayidx151 = getelementptr inbounds %struct.he*, %struct.he** %124, i64 %add150
  %129 = bitcast %struct.he** %arrayidx151 to %struct.xpvhv_aux*
  %xhv_name_count152 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %129, i32 0, i32 4
  %130 = load i32, i32* %xhv_name_count152, align 4
  %tobool153 = icmp ne i32 %130, 0
  br i1 %tobool153, label %cond.true154, label %cond.false165

cond.true154:                                     ; preds = %cond.true143
  %131 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash155 = getelementptr inbounds %struct.cop, %struct.cop* %131, i32 0, i32 8
  %132 = load %struct.hv*, %struct.hv** %cop_stash155, align 8
  %sv_u156 = getelementptr inbounds %struct.hv, %struct.hv* %132, i32 0, i32 3
  %svu_hash157 = bitcast %union.anon.5* %sv_u156 to %struct.he***
  %133 = load %struct.he**, %struct.he*** %svu_hash157, align 8
  %134 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash158 = getelementptr inbounds %struct.cop, %struct.cop* %134, i32 0, i32 8
  %135 = load %struct.hv*, %struct.hv** %cop_stash158, align 8
  %sv_any159 = getelementptr inbounds %struct.hv, %struct.hv* %135, i32 0, i32 0
  %136 = load %struct.xpvhv*, %struct.xpvhv** %sv_any159, align 8
  %xhv_max160 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %136, i32 0, i32 3
  %137 = load i64, i64* %xhv_max160, align 8
  %add161 = add i64 %137, 1
  %arrayidx162 = getelementptr inbounds %struct.he*, %struct.he** %133, i64 %add161
  %138 = bitcast %struct.he** %arrayidx162 to %struct.xpvhv_aux*
  %xhv_name_u163 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %138, i32 0, i32 0
  %xhvnameu_names164 = bitcast %union._xhvnameu* %xhv_name_u163 to %struct.hek***
  %139 = load %struct.hek**, %struct.hek*** %xhvnameu_names164, align 8
  %140 = load %struct.hek*, %struct.hek** %139, align 8
  br label %cond.end

cond.false165:                                    ; preds = %cond.true143
  %141 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash166 = getelementptr inbounds %struct.cop, %struct.cop* %141, i32 0, i32 8
  %142 = load %struct.hv*, %struct.hv** %cop_stash166, align 8
  %sv_u167 = getelementptr inbounds %struct.hv, %struct.hv* %142, i32 0, i32 3
  %svu_hash168 = bitcast %union.anon.5* %sv_u167 to %struct.he***
  %143 = load %struct.he**, %struct.he*** %svu_hash168, align 8
  %144 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash169 = getelementptr inbounds %struct.cop, %struct.cop* %144, i32 0, i32 8
  %145 = load %struct.hv*, %struct.hv** %cop_stash169, align 8
  %sv_any170 = getelementptr inbounds %struct.hv, %struct.hv* %145, i32 0, i32 0
  %146 = load %struct.xpvhv*, %struct.xpvhv** %sv_any170, align 8
  %xhv_max171 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %146, i32 0, i32 3
  %147 = load i64, i64* %xhv_max171, align 8
  %add172 = add i64 %147, 1
  %arrayidx173 = getelementptr inbounds %struct.he*, %struct.he** %143, i64 %add172
  %148 = bitcast %struct.he** %arrayidx173 to %struct.xpvhv_aux*
  %xhv_name_u174 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %148, i32 0, i32 0
  %xhvnameu_name175 = bitcast %union._xhvnameu* %xhv_name_u174 to %struct.hek**
  %149 = load %struct.hek*, %struct.hek** %xhvnameu_name175, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false165, %cond.true154
  %cond = phi %struct.hek* [ %140, %cond.true154 ], [ %149, %cond.false165 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  br label %cond.end177

cond.false176:                                    ; preds = %cond.false131, %cond.true120, %land.lhs.true103, %cond.true98
  br label %cond.end177

cond.end177:                                      ; preds = %cond.false176, %cond.end
  %cond178 = phi i8* [ %arraydecay, %cond.end ], [ null, %cond.false176 ]
  br label %cond.end180

cond.false179:                                    ; preds = %if.else95
  br label %cond.end180

cond.end180:                                      ; preds = %cond.false179, %cond.end177
  %cond181 = phi i8* [ %cond178, %cond.end177 ], [ null, %cond.false179 ]
  store i8* %cond181, i8** %name, align 8
  %150 = load i8*, i8** %name, align 8
  %151 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash182 = getelementptr inbounds %struct.cop, %struct.cop* %151, i32 0, i32 8
  %152 = load %struct.hv*, %struct.hv** %cop_stash182, align 8
  %sv_flags183 = getelementptr inbounds %struct.hv, %struct.hv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %153, 33554432
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %land.lhs.true186, label %cond.false307

land.lhs.true186:                                 ; preds = %cond.end180
  %154 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash187 = getelementptr inbounds %struct.cop, %struct.cop* %154, i32 0, i32 8
  %155 = load %struct.hv*, %struct.hv** %cop_stash187, align 8
  %sv_u188 = getelementptr inbounds %struct.hv, %struct.hv* %155, i32 0, i32 3
  %svu_hash189 = bitcast %union.anon.5* %sv_u188 to %struct.he***
  %156 = load %struct.he**, %struct.he*** %svu_hash189, align 8
  %157 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash190 = getelementptr inbounds %struct.cop, %struct.cop* %157, i32 0, i32 8
  %158 = load %struct.hv*, %struct.hv** %cop_stash190, align 8
  %sv_any191 = getelementptr inbounds %struct.hv, %struct.hv* %158, i32 0, i32 0
  %159 = load %struct.xpvhv*, %struct.xpvhv** %sv_any191, align 8
  %xhv_max192 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %159, i32 0, i32 3
  %160 = load i64, i64* %xhv_max192, align 8
  %add193 = add i64 %160, 1
  %arrayidx194 = getelementptr inbounds %struct.he*, %struct.he** %156, i64 %add193
  %161 = bitcast %struct.he** %arrayidx194 to %struct.xpvhv_aux*
  %xhv_name_u195 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %161, i32 0, i32 0
  %xhvnameu_name196 = bitcast %union._xhvnameu* %xhv_name_u195 to %struct.hek**
  %162 = load %struct.hek*, %struct.hek** %xhvnameu_name196, align 8
  %tobool197 = icmp ne %struct.hek* %162, null
  br i1 %tobool197, label %land.lhs.true198, label %cond.false307

land.lhs.true198:                                 ; preds = %land.lhs.true186
  %163 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash199 = getelementptr inbounds %struct.cop, %struct.cop* %163, i32 0, i32 8
  %164 = load %struct.hv*, %struct.hv** %cop_stash199, align 8
  %sv_u200 = getelementptr inbounds %struct.hv, %struct.hv* %164, i32 0, i32 3
  %svu_hash201 = bitcast %union.anon.5* %sv_u200 to %struct.he***
  %165 = load %struct.he**, %struct.he*** %svu_hash201, align 8
  %166 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash202 = getelementptr inbounds %struct.cop, %struct.cop* %166, i32 0, i32 8
  %167 = load %struct.hv*, %struct.hv** %cop_stash202, align 8
  %sv_any203 = getelementptr inbounds %struct.hv, %struct.hv* %167, i32 0, i32 0
  %168 = load %struct.xpvhv*, %struct.xpvhv** %sv_any203, align 8
  %xhv_max204 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %168, i32 0, i32 3
  %169 = load i64, i64* %xhv_max204, align 8
  %add205 = add i64 %169, 1
  %arrayidx206 = getelementptr inbounds %struct.he*, %struct.he** %165, i64 %add205
  %170 = bitcast %struct.he** %arrayidx206 to %struct.xpvhv_aux*
  %xhv_name_count207 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %170, i32 0, i32 4
  %171 = load i32, i32* %xhv_name_count207, align 4
  %tobool208 = icmp ne i32 %171, 0
  br i1 %tobool208, label %cond.true209, label %cond.false221

cond.true209:                                     ; preds = %land.lhs.true198
  %172 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash210 = getelementptr inbounds %struct.cop, %struct.cop* %172, i32 0, i32 8
  %173 = load %struct.hv*, %struct.hv** %cop_stash210, align 8
  %sv_u211 = getelementptr inbounds %struct.hv, %struct.hv* %173, i32 0, i32 3
  %svu_hash212 = bitcast %union.anon.5* %sv_u211 to %struct.he***
  %174 = load %struct.he**, %struct.he*** %svu_hash212, align 8
  %175 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash213 = getelementptr inbounds %struct.cop, %struct.cop* %175, i32 0, i32 8
  %176 = load %struct.hv*, %struct.hv** %cop_stash213, align 8
  %sv_any214 = getelementptr inbounds %struct.hv, %struct.hv* %176, i32 0, i32 0
  %177 = load %struct.xpvhv*, %struct.xpvhv** %sv_any214, align 8
  %xhv_max215 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %177, i32 0, i32 3
  %178 = load i64, i64* %xhv_max215, align 8
  %add216 = add i64 %178, 1
  %arrayidx217 = getelementptr inbounds %struct.he*, %struct.he** %174, i64 %add216
  %179 = bitcast %struct.he** %arrayidx217 to %struct.xpvhv_aux*
  %xhv_name_u218 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %179, i32 0, i32 0
  %xhvnameu_names219 = bitcast %union._xhvnameu* %xhv_name_u218 to %struct.hek***
  %180 = load %struct.hek**, %struct.hek*** %xhvnameu_names219, align 8
  %181 = load %struct.hek*, %struct.hek** %180, align 8
  %tobool220 = icmp ne %struct.hek* %181, null
  br i1 %tobool220, label %cond.true233, label %cond.false307

cond.false221:                                    ; preds = %land.lhs.true198
  %182 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash222 = getelementptr inbounds %struct.cop, %struct.cop* %182, i32 0, i32 8
  %183 = load %struct.hv*, %struct.hv** %cop_stash222, align 8
  %sv_u223 = getelementptr inbounds %struct.hv, %struct.hv* %183, i32 0, i32 3
  %svu_hash224 = bitcast %union.anon.5* %sv_u223 to %struct.he***
  %184 = load %struct.he**, %struct.he*** %svu_hash224, align 8
  %185 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash225 = getelementptr inbounds %struct.cop, %struct.cop* %185, i32 0, i32 8
  %186 = load %struct.hv*, %struct.hv** %cop_stash225, align 8
  %sv_any226 = getelementptr inbounds %struct.hv, %struct.hv* %186, i32 0, i32 0
  %187 = load %struct.xpvhv*, %struct.xpvhv** %sv_any226, align 8
  %xhv_max227 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %187, i32 0, i32 3
  %188 = load i64, i64* %xhv_max227, align 8
  %add228 = add i64 %188, 1
  %arrayidx229 = getelementptr inbounds %struct.he*, %struct.he** %184, i64 %add228
  %189 = bitcast %struct.he** %arrayidx229 to %struct.xpvhv_aux*
  %xhv_name_u230 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %189, i32 0, i32 0
  %xhvnameu_name231 = bitcast %union._xhvnameu* %xhv_name_u230 to %struct.hek**
  %190 = load %struct.hek*, %struct.hek** %xhvnameu_name231, align 8
  %tobool232 = icmp ne %struct.hek* %190, null
  br i1 %tobool232, label %cond.true233, label %cond.false307

cond.true233:                                     ; preds = %cond.false221, %cond.true209
  %191 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash234 = getelementptr inbounds %struct.cop, %struct.cop* %191, i32 0, i32 8
  %192 = load %struct.hv*, %struct.hv** %cop_stash234, align 8
  %sv_u235 = getelementptr inbounds %struct.hv, %struct.hv* %192, i32 0, i32 3
  %svu_hash236 = bitcast %union.anon.5* %sv_u235 to %struct.he***
  %193 = load %struct.he**, %struct.he*** %svu_hash236, align 8
  %194 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash237 = getelementptr inbounds %struct.cop, %struct.cop* %194, i32 0, i32 8
  %195 = load %struct.hv*, %struct.hv** %cop_stash237, align 8
  %sv_any238 = getelementptr inbounds %struct.hv, %struct.hv* %195, i32 0, i32 0
  %196 = load %struct.xpvhv*, %struct.xpvhv** %sv_any238, align 8
  %xhv_max239 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %196, i32 0, i32 3
  %197 = load i64, i64* %xhv_max239, align 8
  %add240 = add i64 %197, 1
  %arrayidx241 = getelementptr inbounds %struct.he*, %struct.he** %193, i64 %add240
  %198 = bitcast %struct.he** %arrayidx241 to %struct.xpvhv_aux*
  %xhv_name_count242 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %198, i32 0, i32 4
  %199 = load i32, i32* %xhv_name_count242, align 4
  %tobool243 = icmp ne i32 %199, 0
  br i1 %tobool243, label %cond.true244, label %cond.false255

cond.true244:                                     ; preds = %cond.true233
  %200 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash245 = getelementptr inbounds %struct.cop, %struct.cop* %200, i32 0, i32 8
  %201 = load %struct.hv*, %struct.hv** %cop_stash245, align 8
  %sv_u246 = getelementptr inbounds %struct.hv, %struct.hv* %201, i32 0, i32 3
  %svu_hash247 = bitcast %union.anon.5* %sv_u246 to %struct.he***
  %202 = load %struct.he**, %struct.he*** %svu_hash247, align 8
  %203 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash248 = getelementptr inbounds %struct.cop, %struct.cop* %203, i32 0, i32 8
  %204 = load %struct.hv*, %struct.hv** %cop_stash248, align 8
  %sv_any249 = getelementptr inbounds %struct.hv, %struct.hv* %204, i32 0, i32 0
  %205 = load %struct.xpvhv*, %struct.xpvhv** %sv_any249, align 8
  %xhv_max250 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %205, i32 0, i32 3
  %206 = load i64, i64* %xhv_max250, align 8
  %add251 = add i64 %206, 1
  %arrayidx252 = getelementptr inbounds %struct.he*, %struct.he** %202, i64 %add251
  %207 = bitcast %struct.he** %arrayidx252 to %struct.xpvhv_aux*
  %xhv_name_u253 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %207, i32 0, i32 0
  %xhvnameu_names254 = bitcast %union._xhvnameu* %xhv_name_u253 to %struct.hek***
  %208 = load %struct.hek**, %struct.hek*** %xhvnameu_names254, align 8
  %209 = load %struct.hek*, %struct.hek** %208, align 8
  br label %cond.end266

cond.false255:                                    ; preds = %cond.true233
  %210 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash256 = getelementptr inbounds %struct.cop, %struct.cop* %210, i32 0, i32 8
  %211 = load %struct.hv*, %struct.hv** %cop_stash256, align 8
  %sv_u257 = getelementptr inbounds %struct.hv, %struct.hv* %211, i32 0, i32 3
  %svu_hash258 = bitcast %union.anon.5* %sv_u257 to %struct.he***
  %212 = load %struct.he**, %struct.he*** %svu_hash258, align 8
  %213 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash259 = getelementptr inbounds %struct.cop, %struct.cop* %213, i32 0, i32 8
  %214 = load %struct.hv*, %struct.hv** %cop_stash259, align 8
  %sv_any260 = getelementptr inbounds %struct.hv, %struct.hv* %214, i32 0, i32 0
  %215 = load %struct.xpvhv*, %struct.xpvhv** %sv_any260, align 8
  %xhv_max261 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %215, i32 0, i32 3
  %216 = load i64, i64* %xhv_max261, align 8
  %add262 = add i64 %216, 1
  %arrayidx263 = getelementptr inbounds %struct.he*, %struct.he** %212, i64 %add262
  %217 = bitcast %struct.he** %arrayidx263 to %struct.xpvhv_aux*
  %xhv_name_u264 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %217, i32 0, i32 0
  %xhvnameu_name265 = bitcast %union._xhvnameu* %xhv_name_u264 to %struct.hek**
  %218 = load %struct.hek*, %struct.hek** %xhvnameu_name265, align 8
  br label %cond.end266

cond.end266:                                      ; preds = %cond.false255, %cond.true244
  %cond267 = phi %struct.hek* [ %209, %cond.true244 ], [ %218, %cond.false255 ]
  %hek_key268 = getelementptr inbounds %struct.hek, %struct.hek* %cond267, i32 0, i32 2
  %arraydecay269 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key268, i64 0, i64 0
  %219 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash270 = getelementptr inbounds %struct.cop, %struct.cop* %219, i32 0, i32 8
  %220 = load %struct.hv*, %struct.hv** %cop_stash270, align 8
  %sv_u271 = getelementptr inbounds %struct.hv, %struct.hv* %220, i32 0, i32 3
  %svu_hash272 = bitcast %union.anon.5* %sv_u271 to %struct.he***
  %221 = load %struct.he**, %struct.he*** %svu_hash272, align 8
  %222 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash273 = getelementptr inbounds %struct.cop, %struct.cop* %222, i32 0, i32 8
  %223 = load %struct.hv*, %struct.hv** %cop_stash273, align 8
  %sv_any274 = getelementptr inbounds %struct.hv, %struct.hv* %223, i32 0, i32 0
  %224 = load %struct.xpvhv*, %struct.xpvhv** %sv_any274, align 8
  %xhv_max275 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %224, i32 0, i32 3
  %225 = load i64, i64* %xhv_max275, align 8
  %add276 = add i64 %225, 1
  %arrayidx277 = getelementptr inbounds %struct.he*, %struct.he** %221, i64 %add276
  %226 = bitcast %struct.he** %arrayidx277 to %struct.xpvhv_aux*
  %xhv_name_count278 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %226, i32 0, i32 4
  %227 = load i32, i32* %xhv_name_count278, align 4
  %tobool279 = icmp ne i32 %227, 0
  br i1 %tobool279, label %cond.true280, label %cond.false291

cond.true280:                                     ; preds = %cond.end266
  %228 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash281 = getelementptr inbounds %struct.cop, %struct.cop* %228, i32 0, i32 8
  %229 = load %struct.hv*, %struct.hv** %cop_stash281, align 8
  %sv_u282 = getelementptr inbounds %struct.hv, %struct.hv* %229, i32 0, i32 3
  %svu_hash283 = bitcast %union.anon.5* %sv_u282 to %struct.he***
  %230 = load %struct.he**, %struct.he*** %svu_hash283, align 8
  %231 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash284 = getelementptr inbounds %struct.cop, %struct.cop* %231, i32 0, i32 8
  %232 = load %struct.hv*, %struct.hv** %cop_stash284, align 8
  %sv_any285 = getelementptr inbounds %struct.hv, %struct.hv* %232, i32 0, i32 0
  %233 = load %struct.xpvhv*, %struct.xpvhv** %sv_any285, align 8
  %xhv_max286 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %233, i32 0, i32 3
  %234 = load i64, i64* %xhv_max286, align 8
  %add287 = add i64 %234, 1
  %arrayidx288 = getelementptr inbounds %struct.he*, %struct.he** %230, i64 %add287
  %235 = bitcast %struct.he** %arrayidx288 to %struct.xpvhv_aux*
  %xhv_name_u289 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %235, i32 0, i32 0
  %xhvnameu_names290 = bitcast %union._xhvnameu* %xhv_name_u289 to %struct.hek***
  %236 = load %struct.hek**, %struct.hek*** %xhvnameu_names290, align 8
  %237 = load %struct.hek*, %struct.hek** %236, align 8
  br label %cond.end302

cond.false291:                                    ; preds = %cond.end266
  %238 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash292 = getelementptr inbounds %struct.cop, %struct.cop* %238, i32 0, i32 8
  %239 = load %struct.hv*, %struct.hv** %cop_stash292, align 8
  %sv_u293 = getelementptr inbounds %struct.hv, %struct.hv* %239, i32 0, i32 3
  %svu_hash294 = bitcast %union.anon.5* %sv_u293 to %struct.he***
  %240 = load %struct.he**, %struct.he*** %svu_hash294, align 8
  %241 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash295 = getelementptr inbounds %struct.cop, %struct.cop* %241, i32 0, i32 8
  %242 = load %struct.hv*, %struct.hv** %cop_stash295, align 8
  %sv_any296 = getelementptr inbounds %struct.hv, %struct.hv* %242, i32 0, i32 0
  %243 = load %struct.xpvhv*, %struct.xpvhv** %sv_any296, align 8
  %xhv_max297 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %243, i32 0, i32 3
  %244 = load i64, i64* %xhv_max297, align 8
  %add298 = add i64 %244, 1
  %arrayidx299 = getelementptr inbounds %struct.he*, %struct.he** %240, i64 %add298
  %245 = bitcast %struct.he** %arrayidx299 to %struct.xpvhv_aux*
  %xhv_name_u300 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %245, i32 0, i32 0
  %xhvnameu_name301 = bitcast %union._xhvnameu* %xhv_name_u300 to %struct.hek**
  %246 = load %struct.hek*, %struct.hek** %xhvnameu_name301, align 8
  br label %cond.end302

cond.end302:                                      ; preds = %cond.false291, %cond.true280
  %cond303 = phi %struct.hek* [ %237, %cond.true280 ], [ %246, %cond.false291 ]
  %hek_len = getelementptr inbounds %struct.hek, %struct.hek* %cond303, i32 0, i32 1
  %247 = load i32, i32* %hek_len, align 4
  %idx.ext = sext i32 %247 to i64
  %add.ptr304 = getelementptr inbounds i8, i8* %arraydecay269, i64 %idx.ext
  %add.ptr305 = getelementptr inbounds i8, i8* %add.ptr304, i64 1
  %248 = load i8, i8* %add.ptr305, align 1
  %conv = zext i8 %248 to i32
  %and306 = and i32 %conv, 1
  br label %cond.end308

cond.false307:                                    ; preds = %cond.false221, %cond.true209, %land.lhs.true186, %cond.end180
  br label %cond.end308

cond.end308:                                      ; preds = %cond.false307, %cond.end302
  %cond309 = phi i32 [ %and306, %cond.end302 ], [ 0, %cond.false307 ]
  %tobool310 = icmp ne i32 %cond309, 0
  %249 = zext i1 %tobool310 to i64
  %cond311 = select i1 %tobool310, i32 536870912, i32 0
  %call312 = call %struct.gv* @Perl_newGVgen_flags(i8* %150, i32 %cond311)
  store %struct.gv* %call312, %struct.gv** %gv80, align 8
  %250 = load %struct.gv*, %struct.gv** %gv80, align 8
  %251 = bitcast %struct.gv* %250 to i8*
  %252 = bitcast i8* %251 to %struct.sv*
  %sv_refcnt313 = getelementptr inbounds %struct.sv, %struct.sv* %252, i32 0, i32 1
  %253 = load i32, i32* %sv_refcnt313, align 8
  %inc314 = add i32 %253, 1
  store i32 %inc314, i32* %sv_refcnt313, align 8
  br label %if.end315

if.end315:                                        ; preds = %cond.end308, %if.end93
  br label %do.body

do.body:                                          ; preds = %if.end315
  %254 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags316 = getelementptr inbounds %struct.sv, %struct.sv* %254, i32 0, i32 2
  %255 = load i32, i32* %sv_flags316, align 4
  %and317 = and i32 %255, 255
  %cmp318 = icmp ult i32 %and317, 3
  br i1 %cmp318, label %land.lhs.true320, label %if.else326

land.lhs.true320:                                 ; preds = %do.body
  %256 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags321 = getelementptr inbounds %struct.sv, %struct.sv* %256, i32 0, i32 2
  %257 = load i32, i32* %sv_flags321, align 4
  %and322 = and i32 %257, 255
  %cmp323 = icmp ne i32 %and322, 1
  br i1 %cmp323, label %if.then325, label %if.else326

if.then325:                                       ; preds = %land.lhs.true320
  %258 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_upgrade(%struct.sv* %258, i32 1)
  br label %if.end385

if.else326:                                       ; preds = %land.lhs.true320, %do.body
  %259 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags327 = getelementptr inbounds %struct.sv, %struct.sv* %259, i32 0, i32 2
  %260 = load i32, i32* %sv_flags327, align 4
  %and328 = and i32 %260, 255
  %cmp329 = icmp uge i32 %and328, 3
  br i1 %cmp329, label %if.then331, label %if.end384

if.then331:                                       ; preds = %if.else326
  br label %do.body332

do.body332:                                       ; preds = %if.then331
  %261 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any333 = getelementptr inbounds %struct.sv, %struct.sv* %261, i32 0, i32 0
  %262 = load i8*, i8** %sv_any333, align 8
  %263 = bitcast i8* %262 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %263, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %264 = load i64, i64* %xpvlenu_len, align 8
  %tobool334 = icmp ne i64 %264, 0
  br i1 %tobool334, label %if.then335, label %if.end374

if.then335:                                       ; preds = %do.body332
  %265 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %265, i32 0, i32 2
  %266 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %266, 33554432
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %cond.true339, label %cond.false340

cond.true339:                                     ; preds = %if.then335
  br i1 true, label %if.then341, label %if.end371

cond.false340:                                    ; preds = %if.then335
  br i1 false, label %if.then341, label %if.end371

if.then341:                                       ; preds = %cond.false340, %cond.true339
  br label %do.body342

do.body342:                                       ; preds = %if.then341
  %267 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags343 = getelementptr inbounds %struct.sv, %struct.sv* %267, i32 0, i32 2
  %268 = load i32, i32* %sv_flags343, align 4
  %and344 = and i32 %268, 33554432
  %tobool345 = icmp ne i32 %and344, 0
  br i1 %tobool345, label %if.then346, label %if.else359

if.then346:                                       ; preds = %do.body342
  %269 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u347 = getelementptr inbounds %struct.sv, %struct.sv* %269, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u347 to i8**
  %270 = load i8*, i8** %svu_pv, align 8
  %add.ptr348 = getelementptr inbounds i8, i8* %270, i64 0
  %arrayidx349 = getelementptr inbounds i8, i8* %add.ptr348, i64 -1
  %271 = load i8, i8* %arrayidx349, align 1
  %conv350 = zext i8 %271 to i64
  store i64 %conv350, i64* %zok, align 8
  %272 = load i64, i64* %zok, align 8
  %tobool351 = icmp ne i64 %272, 0
  br i1 %tobool351, label %if.end358, label %if.then352

if.then352:                                       ; preds = %if.then346
  %273 = bitcast i64* %zok to i8*
  %274 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u353 = getelementptr inbounds %struct.sv, %struct.sv* %274, i32 0, i32 3
  %svu_pv354 = bitcast %union.anon* %sv_u353 to i8**
  %275 = load i8*, i8** %svu_pv354, align 8
  %add.ptr355 = getelementptr inbounds i8, i8* %275, i64 0
  %add.ptr356 = getelementptr inbounds i8, i8* %add.ptr355, i64 -1
  %add.ptr357 = getelementptr inbounds i8, i8* %add.ptr356, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %273, i8* align 1 %add.ptr357, i64 8, i1 false)
  br label %if.end358

if.end358:                                        ; preds = %if.then352, %if.then346
  br label %if.end360

if.else359:                                       ; preds = %do.body342
  store i64 0, i64* %zok, align 8
  br label %if.end360

if.end360:                                        ; preds = %if.else359, %if.end358
  br label %do.end

do.end:                                           ; preds = %if.end360
  br label %do.body361

do.body361:                                       ; preds = %do.end
  %276 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u362 = getelementptr inbounds %struct.sv, %struct.sv* %276, i32 0, i32 3
  %svu_pv363 = bitcast %union.anon* %sv_u362 to i8**
  %277 = load i8*, i8** %svu_pv363, align 8
  %add.ptr364 = getelementptr inbounds i8, i8* %277, i64 0
  %278 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %278
  %add.ptr365 = getelementptr inbounds i8, i8* %add.ptr364, i64 %idx.neg
  %279 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u366 = getelementptr inbounds %struct.sv, %struct.sv* %279, i32 0, i32 3
  %svu_pv367 = bitcast %union.anon* %sv_u366 to i8**
  store i8* %add.ptr365, i8** %svu_pv367, align 8
  br label %do.end368

do.end368:                                        ; preds = %do.body361
  %280 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags369 = getelementptr inbounds %struct.sv, %struct.sv* %280, i32 0, i32 2
  %281 = load i32, i32* %sv_flags369, align 4
  %and370 = and i32 %281, -33554433
  store i32 %and370, i32* %sv_flags369, align 4
  br label %if.end371

if.end371:                                        ; preds = %do.end368, %cond.false340, %cond.true339
  %282 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u372 = getelementptr inbounds %struct.sv, %struct.sv* %282, i32 0, i32 3
  %svu_pv373 = bitcast %union.anon* %sv_u372 to i8**
  %283 = load i8*, i8** %svu_pv373, align 8
  call void @Perl_safesysfree(i8* %283)
  br label %if.end374

if.end374:                                        ; preds = %if.end371, %do.body332
  br label %do.end375

do.end375:                                        ; preds = %if.end374
  br label %do.body376

do.body376:                                       ; preds = %do.end375
  %284 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any377 = getelementptr inbounds %struct.sv, %struct.sv* %284, i32 0, i32 0
  %285 = load i8*, i8** %sv_any377, align 8
  %286 = bitcast i8* %285 to %struct.xpv*
  %xpv_len_u378 = getelementptr inbounds %struct.xpv, %struct.xpv* %286, i32 0, i32 3
  %xpvlenu_len379 = bitcast %union.anon.18* %xpv_len_u378 to i64*
  store i64 0, i64* %xpvlenu_len379, align 8
  br label %do.end380

do.end380:                                        ; preds = %do.body376
  br label %do.body381

do.body381:                                       ; preds = %do.end380
  %287 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any382 = getelementptr inbounds %struct.sv, %struct.sv* %287, i32 0, i32 0
  %288 = load i8*, i8** %sv_any382, align 8
  %289 = bitcast i8* %288 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %289, i32 0, i32 2
  store i64 0, i64* %xpv_cur, align 8
  br label %do.end383

do.end383:                                        ; preds = %do.body381
  br label %if.end384

if.end384:                                        ; preds = %do.end383, %if.else326
  br label %if.end385

if.end385:                                        ; preds = %if.end384, %if.then325
  br label %do.end386

do.end386:                                        ; preds = %if.end385
  br label %do.body387

do.body387:                                       ; preds = %do.end386
  %290 = load %struct.gv*, %struct.gv** %gv80, align 8
  %291 = bitcast %struct.gv* %290 to i8*
  %292 = bitcast i8* %291 to %struct.sv*
  %293 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u388 = getelementptr inbounds %struct.sv, %struct.sv* %293, i32 0, i32 3
  %svu_rv389 = bitcast %union.anon* %sv_u388 to %struct.sv**
  store %struct.sv* %292, %struct.sv** %svu_rv389, align 8
  br label %do.end390

do.end390:                                        ; preds = %do.body387
  %294 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags391 = getelementptr inbounds %struct.sv, %struct.sv* %294, i32 0, i32 2
  %295 = load i32, i32* %sv_flags391, align 4
  %or = or i32 %295, 2048
  store i32 %or, i32* %sv_flags391, align 4
  br label %do.body392

do.body392:                                       ; preds = %do.end390
  %296 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags393 = getelementptr inbounds %struct.sv, %struct.sv* %296, i32 0, i32 2
  %297 = load i32, i32* %sv_flags393, align 4
  %and394 = and i32 %297, 4194304
  %tobool395 = icmp ne i32 %and394, 0
  br i1 %tobool395, label %cond.true396, label %cond.false397

cond.true396:                                     ; preds = %do.body392
  br i1 true, label %if.then398, label %if.end400

cond.false397:                                    ; preds = %do.body392
  br i1 false, label %if.then398, label %if.end400

if.then398:                                       ; preds = %cond.false397, %cond.true396
  %298 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call399 = call i32 @Perl_mg_set(%struct.sv* %298)
  br label %if.end400

if.end400:                                        ; preds = %if.then398, %cond.false397, %cond.true396
  br label %do.end401

do.end401:                                        ; preds = %if.end400
  br label %wasref

if.end402:                                        ; preds = %land.lhs.true77, %if.then75
  %299 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %299, i32 0, i32 5
  %300 = load i8, i8* %op_flags, align 2
  %conv403 = zext i8 %300 to i32
  %and404 = and i32 %conv403, 16
  %tobool405 = icmp ne i32 %and404, 0
  br i1 %tobool405, label %if.then409, label %lor.lhs.false406

lor.lhs.false406:                                 ; preds = %if.end402
  %301 = load i8, i8* %strict.addr, align 1
  %tobool407 = trunc i8 %301 to i1
  br i1 %tobool407, label %if.then409, label %if.end411

if.then409:                                       ; preds = %lor.lhs.false406, %if.end402
  %call410 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.78, i64 0, i64 0))
  br label %if.end411

if.end411:                                        ; preds = %if.then409, %lor.lhs.false406
  %call412 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call412, label %if.then413, label %if.end414

if.then413:                                       ; preds = %if.end411
  %302 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %302)
  br label %if.end414

if.end414:                                        ; preds = %if.then413, %if.end411
  store %struct.sv* @PL_sv_undef, %struct.sv** %retval, align 8
  br label %return

if.end415:                                        ; preds = %lor.lhs.false71, %lor.lhs.false67, %if.then63
  %303 = load i8, i8* %noinit.addr, align 1
  %tobool416 = trunc i8 %303 to i1
  br i1 %tobool416, label %if.then417, label %if.else422

if.then417:                                       ; preds = %if.end415
  %304 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call418 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %304, i32 3072, i32 9)
  %305 = bitcast %struct.gv* %call418 to i8*
  %306 = bitcast i8* %305 to %struct.sv*
  store %struct.sv* %306, %struct.sv** %sv.addr, align 8
  %tobool419 = icmp ne %struct.sv* %306, null
  br i1 %tobool419, label %if.end421, label %if.then420

if.then420:                                       ; preds = %if.then417
  store %struct.sv* @PL_sv_undef, %struct.sv** %retval, align 8
  br label %return

if.end421:                                        ; preds = %if.then417
  br label %if.end445

if.else422:                                       ; preds = %if.end415
  %307 = load i8, i8* %strict.addr, align 1
  %tobool423 = trunc i8 %307 to i1
  br i1 %tobool423, label %if.then424, label %if.end437

if.then424:                                       ; preds = %if.else422
  %308 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %309 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags425 = getelementptr inbounds %struct.sv, %struct.sv* %309, i32 0, i32 2
  %310 = load i32, i32* %sv_flags425, align 4
  %and426 = and i32 %310, 16384
  %tobool427 = icmp ne i32 %and426, 0
  br i1 %tobool427, label %land.rhs428, label %land.end433

land.rhs428:                                      ; preds = %if.then424
  %311 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any429 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 0
  %312 = load i8*, i8** %sv_any429, align 8
  %313 = bitcast i8* %312 to %struct.xpv*
  %xpv_cur430 = getelementptr inbounds %struct.xpv, %struct.xpv* %313, i32 0, i32 2
  %314 = load i64, i64* %xpv_cur430, align 8
  %cmp431 = icmp ugt i64 %314, 32
  br label %land.end433

land.end433:                                      ; preds = %land.rhs428, %if.then424
  %315 = phi i1 [ false, %if.then424 ], [ %cmp431, %land.rhs428 ]
  %316 = zext i1 %315 to i64
  %cond435 = select i1 %315, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)
  %call436 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref_sv, i64 0, i64 0), %struct.sv* %308, i8* %cond435, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.78, i64 0, i64 0))
  br label %if.end437

if.end437:                                        ; preds = %land.end433, %if.else422
  %317 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %317, i32 0, i32 6
  %318 = load i8, i8* %op_private, align 1
  %conv438 = zext i8 %318 to i32
  %and439 = and i32 %conv438, 132
  %cmp440 = icmp eq i32 %and439, 4
  br i1 %cmp440, label %if.then442, label %if.end443

if.then442:                                       ; preds = %if.end437
  %319 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %319, %struct.sv** %retval, align 8
  br label %return

if.end443:                                        ; preds = %if.end437
  %320 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call444 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %320, i32 2049, i32 9)
  %321 = bitcast %struct.gv* %call444 to i8*
  %322 = bitcast i8* %321 to %struct.sv*
  store %struct.sv* %322, %struct.sv** %sv.addr, align 8
  br label %if.end445

if.end445:                                        ; preds = %if.end443, %if.end421
  %323 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags446 = getelementptr inbounds %struct.sv, %struct.sv* %323, i32 0, i32 2
  %324 = load i32, i32* %sv_flags446, align 4
  %and447 = and i32 %324, -16777217
  store i32 %and447, i32* %sv_flags446, align 4
  br label %if.end448

if.end448:                                        ; preds = %if.end445, %lor.lhs.false59, %land.lhs.true55
  br label %if.end449

if.end449:                                        ; preds = %if.end448, %if.end50
  %325 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags450 = getelementptr inbounds %struct.sv, %struct.sv* %325, i32 0, i32 2
  %326 = load i32, i32* %sv_flags450, align 4
  %and451 = and i32 %326, 16777216
  %tobool452 = icmp ne i32 %and451, 0
  br i1 %tobool452, label %land.lhs.true453, label %if.end462

land.lhs.true453:                                 ; preds = %if.end449
  %327 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private454 = getelementptr inbounds %struct.op, %struct.op* %327, i32 0, i32 6
  %328 = load i8, i8* %op_private454, align 1
  %conv455 = zext i8 %328 to i32
  %and456 = and i32 %conv455, 64
  %tobool457 = icmp ne i32 %and456, 0
  br i1 %tobool457, label %if.end462, label %if.then458

if.then458:                                       ; preds = %land.lhs.true453
  %call459 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call459, %struct.sv** %newsv, align 8
  %329 = load %struct.sv*, %struct.sv** %newsv, align 8
  %330 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %329, %struct.sv* %330, i32 0)
  %331 = load %struct.sv*, %struct.sv** %newsv, align 8
  %sv_flags460 = getelementptr inbounds %struct.sv, %struct.sv* %331, i32 0, i32 2
  %332 = load i32, i32* %sv_flags460, align 4
  %and461 = and i32 %332, -16777217
  store i32 %and461, i32* %sv_flags460, align 4
  %333 = load %struct.sv*, %struct.sv** %newsv, align 8
  store %struct.sv* %333, %struct.sv** %sv.addr, align 8
  br label %if.end462

if.end462:                                        ; preds = %if.then458, %land.lhs.true453, %if.end449
  %334 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  store %struct.sv* %334, %struct.sv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end462, %if.then442, %if.then420, %if.end414
  %335 = load %struct.sv*, %struct.sv** %retval, align 8
  ret %struct.sv* %335
}

declare dso_local void @Perl_save_gp(%struct.gv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gv* @Perl_softref2xv(%struct.sv* %sv, i8* %what, i32 %type, %struct.sv*** %spp) #0 {
entry:
  %retval = alloca %struct.gv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %what.addr = alloca i8*, align 8
  %type.addr = alloca i32, align 4
  %spp.addr = alloca %struct.sv***, align 8
  %gv = alloca %struct.gv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %what, i8** %what.addr, align 8
  store i32 %type, i32* %type.addr, align 4
  store %struct.sv*** %spp, %struct.sv**** %spp.addr, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 6
  %1 = load i8, i8* %op_private, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %3, 65280
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %5, 255
  %cmp = icmp eq i32 %and4, 8
  br i1 %cmp, label %if.then11, label %lor.lhs.false6

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %7, 16826623
  %cmp9 = icmp eq i32 %and8, 16777226
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %lor.lhs.false6, %lor.lhs.false, %if.then
  %8 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %9 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %10, 16384
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.then11
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 2
  %14 = load i64, i64* %xpv_cur, align 8
  %cmp15 = icmp ugt i64 %14, 32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %15 = phi i1 [ false, %if.then11 ], [ %cmp15, %land.rhs ]
  %16 = zext i1 %15 to i64
  %cond = select i1 %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0)
  %17 = load i8*, i8** %what.addr, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_symref_sv, i64 0, i64 0), %struct.sv* %8, i8* %cond, i8* %17)
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false6
  %18 = load i8*, i8** %what.addr, align 8
  %call17 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* %18)
  br label %if.end

if.end:                                           ; preds = %if.else, %land.end
  br label %if.end18

if.end18:                                         ; preds = %if.end, %entry
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 65280
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.end57, label %lor.lhs.false22

lor.lhs.false22:                                  ; preds = %if.end18
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %22, 255
  %cmp25 = icmp eq i32 %and24, 8
  br i1 %cmp25, label %if.end57, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false22
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %24, 16826623
  %cmp30 = icmp eq i32 %and29, 16777226
  br i1 %cmp30, label %if.end57, label %if.then32

if.then32:                                        ; preds = %lor.lhs.false27
  %25 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %25, i32 0, i32 5
  %26 = load i8, i8* %op_flags, align 2
  %conv33 = zext i8 %26 to i32
  %and34 = and i32 %conv33, 16
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end38

if.then36:                                        ; preds = %if.then32
  %27 = load i8*, i8** %what.addr, align 8
  %call37 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_usym, i64 0, i64 0), i8* %27)
  br label %if.end38

if.end38:                                         ; preds = %if.then36, %if.then32
  %call39 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end38
  %28 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_report_uninit(%struct.sv* %28)
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %if.end38
  %29 = load i32, i32* %type.addr, align 4
  %cmp42 = icmp ne i32 %29, 3
  br i1 %cmp42, label %land.lhs.true, label %if.end56

land.lhs.true:                                    ; preds = %if.end41
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags44 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 5
  %31 = load i8, i8* %op_flags44, align 2
  %conv45 = zext i8 %31 to i32
  %and46 = and i32 %conv45, 3
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags48 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 5
  %33 = load i8, i8* %op_flags48, align 2
  %conv49 = zext i8 %33 to i32
  %and50 = and i32 %conv49, 3
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %call51 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond52 = phi i32 [ %and50, %cond.true ], [ %call51, %cond.false ]
  %cmp53 = icmp eq i32 %cond52, 3
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %cond.end
  %34 = load %struct.sv***, %struct.sv**** %spp.addr, align 8
  %35 = load %struct.sv**, %struct.sv*** %34, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %35, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %34, align 8
  store %struct.gv* null, %struct.gv** %retval, align 8
  br label %return

if.end56:                                         ; preds = %cond.end, %if.end41
  %36 = load %struct.sv***, %struct.sv**** %spp.addr, align 8
  %37 = load %struct.sv**, %struct.sv*** %36, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %37, align 8
  store %struct.gv* null, %struct.gv** %retval, align 8
  br label %return

if.end57:                                         ; preds = %lor.lhs.false27, %lor.lhs.false22, %if.end18
  %38 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags58 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 5
  %39 = load i8, i8* %op_flags58, align 2
  %conv59 = zext i8 %39 to i32
  %and60 = and i32 %conv59, 128
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %land.lhs.true62, label %if.else72

land.lhs.true62:                                  ; preds = %if.end57
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags63 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags63, align 2
  %conv64 = zext i8 %41 to i32
  %and65 = and i32 %conv64, 32
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.else72, label %if.then67

if.then67:                                        ; preds = %land.lhs.true62
  %42 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %43 = load i32, i32* %type.addr, align 4
  %call68 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %42, i32 3072, i32 %43)
  store %struct.gv* %call68, %struct.gv** %gv, align 8
  %tobool69 = icmp ne %struct.gv* %call68, null
  br i1 %tobool69, label %if.end71, label %if.then70

if.then70:                                        ; preds = %if.then67
  %44 = load %struct.sv***, %struct.sv**** %spp.addr, align 8
  %45 = load %struct.sv**, %struct.sv*** %44, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %45, align 8
  store %struct.gv* null, %struct.gv** %retval, align 8
  br label %return

if.end71:                                         ; preds = %if.then67
  br label %if.end74

if.else72:                                        ; preds = %land.lhs.true62, %if.end57
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %47 = load i32, i32* %type.addr, align 4
  %call73 = call %struct.gv* @Perl_gv_fetchsv(%struct.sv* %46, i32 2049, i32 %47)
  store %struct.gv* %call73, %struct.gv** %gv, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.else72, %if.end71
  %48 = load %struct.gv*, %struct.gv** %gv, align 8
  store %struct.gv* %48, %struct.gv** %retval, align 8
  br label %return

return:                                           ; preds = %if.end74, %if.then70, %if.end56, %if.then55
  %49 = load %struct.gv*, %struct.gv** %retval, align 8
  ret %struct.gv* %49
}

declare dso_local %struct.op* @Perl_die(i8*, ...) #1

declare dso_local zeroext i1 @Perl_ckwarn(i32) #1

declare dso_local void @Perl_report_uninit(%struct.sv*) #1

declare dso_local %struct.gv* @Perl_gv_fetchsv(%struct.sv*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rv2sv() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %gv = alloca %struct.gv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  store %struct.gv* null, %struct.gv** %gv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, 2048
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %10, 2048
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %13, 1048576
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true11, label %if.end

land.lhs.true11:                                  ; preds = %land.lhs.true
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u12 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 3
  %svu_rv13 = bitcast %union.anon* %sv_u12 to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %svu_rv13, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %17, i32 0, i32 0
  %18 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags14 = getelementptr inbounds %struct.hv, %struct.hv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %19, 268435456
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end

if.then17:                                        ; preds = %land.lhs.true11
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call18 = call %struct.sv* @Perl_amagic_deref_call(%struct.sv* %20, i32 1)
  store %struct.sv* %call18, %struct.sv** %sv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then17, %land.lhs.true11, %land.lhs.true, %if.then
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_rv20 = bitcast %union.anon* %sv_u19 to %struct.sv**
  %22 = load %struct.sv*, %struct.sv** %svu_rv20, align 8
  store %struct.sv* %22, %struct.sv** %sv, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %24, 255
  %cmp = icmp uge i32 %and22, 11
  br i1 %cmp, label %if.then23, label %if.end25

if.then23:                                        ; preds = %if.end
  %call24 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  store %struct.op* %call24, %struct.op** %retval, align 8
  br label %return

if.end25:                                         ; preds = %if.end
  br label %if.end55

if.else:                                          ; preds = %land.end
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %26 = bitcast %struct.sv* %25 to i8*
  %27 = bitcast i8* %26 to %struct.gv*
  store %struct.gv* %27, %struct.gv** %gv, align 8
  %28 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags26 = getelementptr inbounds %struct.gv, %struct.gv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %29, 49152
  %cmp28 = icmp eq i32 %and27, 32768
  br i1 %cmp28, label %land.lhs.true29, label %if.then36

land.lhs.true29:                                  ; preds = %if.else
  %30 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags30 = getelementptr inbounds %struct.gv, %struct.gv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %31, 255
  %cmp32 = icmp eq i32 %and31, 9
  br i1 %cmp32, label %if.end41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true29
  %32 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags33 = getelementptr inbounds %struct.gv, %struct.gv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %33, 255
  %cmp35 = icmp eq i32 %and34, 10
  br i1 %cmp35, label %if.end41, label %if.then36

if.then36:                                        ; preds = %lor.lhs.false, %if.else
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %call37 = call %struct.gv* @Perl_softref2xv(%struct.sv* %34, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i32 3, %struct.sv*** %sp)
  store %struct.gv* %call37, %struct.gv** %gv, align 8
  %35 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool38 = icmp ne %struct.gv* %35, null
  br i1 %tobool38, label %if.end40, label %if.then39

if.then39:                                        ; preds = %if.then36
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %36, %struct.sv*** @PL_stack_sp, align 8
  %37 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %37, i32 0, i32 0
  %38 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %38, %struct.op** %retval, align 8
  br label %return

if.end40:                                         ; preds = %if.then36
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %lor.lhs.false, %land.lhs.true29
  %39 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u42 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u42 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %41 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool43 = icmp ne %struct.sv* %41, null
  br i1 %tobool43, label %cond.true44, label %cond.false49

cond.true44:                                      ; preds = %if.end41
  %42 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u45 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 3
  %svu_gp46 = bitcast %union.anon.4* %sv_u45 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp46, align 8
  %add.ptr47 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_sv48 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr47, i32 0, i32 0
  br label %cond.end

cond.false49:                                     ; preds = %if.end41
  %44 = load %struct.gv*, %struct.gv** %gv, align 8
  %call50 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %44, i32 0)
  %sv_u51 = getelementptr inbounds %struct.gv, %struct.gv* %call50, i32 0, i32 3
  %svu_gp52 = bitcast %union.anon.4* %sv_u51 to %struct.gp**
  %45 = load %struct.gp*, %struct.gp** %svu_gp52, align 8
  %add.ptr53 = getelementptr inbounds %struct.gp, %struct.gp* %45, i64 0
  %gp_sv54 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr53, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false49, %cond.true44
  %cond = phi %struct.sv** [ %gp_sv48, %cond.true44 ], [ %gp_sv54, %cond.false49 ]
  %46 = load %struct.sv*, %struct.sv** %cond, align 8
  store %struct.sv* %46, %struct.sv** %sv, align 8
  br label %if.end55

if.end55:                                         ; preds = %cond.end, %if.end25
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 5
  %48 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %48 to i32
  %and56 = and i32 %conv, 32
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %if.then58, label %if.end86

if.then58:                                        ; preds = %if.end55
  %49 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %49, i32 0, i32 6
  %50 = load i8, i8* %op_private, align 1
  %conv59 = zext i8 %50 to i32
  %and60 = and i32 %conv59, 128
  %tobool61 = icmp ne i32 %and60, 0
  br i1 %tobool61, label %if.then62, label %if.else74

if.then62:                                        ; preds = %if.then58
  %51 = load %struct.op*, %struct.op** @PL_op, align 8
  %52 = bitcast %struct.op* %51 to %struct.unop*
  %op_first = getelementptr inbounds %struct.unop, %struct.unop* %52, i32 0, i32 7
  %53 = load %struct.op*, %struct.op** %op_first, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %53, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp63 = icmp eq i32 %bf.cast, 0
  br i1 %cmp63, label %if.then65, label %if.else67

if.then65:                                        ; preds = %if.then62
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %56 = bitcast %struct.sv* %55 to i8*
  %57 = bitcast i8* %56 to %struct.gv*
  %call66 = call %struct.sv* @Perl_save_scalar(%struct.gv* %57)
  store %struct.sv* %call66, %struct.sv** %sv, align 8
  br label %if.end73

if.else67:                                        ; preds = %if.then62
  %58 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool68 = icmp ne %struct.gv* %58, null
  br i1 %tobool68, label %if.then69, label %if.else71

if.then69:                                        ; preds = %if.else67
  %59 = load %struct.gv*, %struct.gv** %gv, align 8
  %call70 = call %struct.sv* @Perl_save_scalar(%struct.gv* %59)
  store %struct.sv* %call70, %struct.sv** %sv, align 8
  br label %if.end72

if.else71:                                        ; preds = %if.else67
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_localize_ref, i64 0, i64 0))
  br label %if.end72

if.end72:                                         ; preds = %if.else71, %if.then69
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then65
  br label %if.end85

if.else74:                                        ; preds = %if.then58
  %60 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private75 = getelementptr inbounds %struct.op, %struct.op* %60, i32 0, i32 6
  %61 = load i8, i8* %op_private75, align 1
  %conv76 = zext i8 %61 to i32
  %and77 = and i32 %conv76, 48
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then79, label %if.end84

if.then79:                                        ; preds = %if.else74
  %62 = load %struct.sv*, %struct.sv** %sv, align 8
  %63 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private80 = getelementptr inbounds %struct.op, %struct.op* %63, i32 0, i32 6
  %64 = load i8, i8* %op_private80, align 1
  %conv81 = zext i8 %64 to i32
  %and82 = and i32 %conv81, 48
  %call83 = call %struct.sv* @Perl_vivify_ref(%struct.sv* %62, i32 %and82)
  store %struct.sv* %call83, %struct.sv** %sv, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.then79, %if.else74
  br label %if.end85

if.end85:                                         ; preds = %if.end84, %if.end73
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %if.end55
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %65, %struct.sv** %66, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %67, %struct.sv*** @PL_stack_sp, align 8
  %68 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next87 = getelementptr inbounds %struct.op, %struct.op* %68, i32 0, i32 0
  %69 = load %struct.op*, %struct.op** %op_next87, align 8
  store %struct.op* %69, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end86, %if.then39, %if.then23
  %70 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %70
}

declare dso_local i32 @Perl_mg_get(%struct.sv*) #1

declare dso_local %struct.sv* @Perl_amagic_deref_call(%struct.sv*, i32) #1

declare dso_local %struct.gv* @Perl_gv_add_by_type(%struct.gv*, i32) #1

declare dso_local %struct.sv* @Perl_save_scalar(%struct.gv*) #1

declare dso_local %struct.sv* @Perl_vivify_ref(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_av2arylen() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %lvalue = alloca i32, align 4
  %svp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.av*
  store %struct.av* %4, %struct.av** %av, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %8 to i32
  %and2 = and i32 %conv1, 8
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool4 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %tobool4, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %10 = phi i1 [ true, %entry ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32
  store i32 %lor.ext, i32* %lvalue, align 4
  %11 = load i32, i32* %lvalue, align 4
  %tobool5 = icmp ne i32 %11, 0
  br i1 %tobool5, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %12 = load %struct.av*, %struct.av** %av, align 8
  %13 = bitcast %struct.av* %12 to i8*
  %14 = bitcast i8* %13 to %struct.av*
  %call6 = call %struct.sv** @Perl_av_arylen_p(%struct.av* %14)
  store %struct.sv** %call6, %struct.sv*** %svp, align 8
  %15 = load %struct.sv**, %struct.sv*** %svp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %tobool7 = icmp ne %struct.sv* %16, null
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then
  %call9 = call %struct.sv* @Perl_newSV_type(i32 7)
  %17 = load %struct.sv**, %struct.sv*** %svp, align 8
  store %struct.sv* %call9, %struct.sv** %17, align 8
  %18 = load %struct.sv**, %struct.sv*** %svp, align 8
  %19 = load %struct.sv*, %struct.sv** %18, align 8
  %20 = load %struct.av*, %struct.av** %av, align 8
  %21 = bitcast %struct.av* %20 to i8*
  %22 = bitcast i8* %21 to %struct.sv*
  call void @Perl_sv_magic(%struct.sv* %19, %struct.sv* %22, i32 35, i8* null, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then
  %23 = load %struct.sv**, %struct.sv*** %svp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %25, align 8
  br label %if.end16

if.else:                                          ; preds = %lor.end
  %26 = load %struct.av*, %struct.av** %av, align 8
  %27 = bitcast %struct.av* %26 to i8*
  %28 = bitcast i8* %27 to %struct.av*
  %29 = bitcast %struct.av* %28 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags, align 4
  %and10 = and i32 %30, 8388608
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %31 = load %struct.av*, %struct.av** %av, align 8
  %32 = bitcast %struct.av* %31 to i8*
  %33 = bitcast i8* %32 to %struct.av*
  %34 = bitcast %struct.av* %33 to i8*
  %35 = bitcast i8* %34 to %struct.sv*
  %call12 = call i32 @Perl_mg_size(%struct.sv* %35)
  %conv13 = sext i32 %call12 to i64
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %36 = load %struct.av*, %struct.av** %av, align 8
  %37 = bitcast %struct.av* %36 to i8*
  %38 = bitcast i8* %37 to %struct.av*
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %38, i32 0, i32 0
  %39 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %39, i32 0, i32 2
  %40 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv13, %cond.true ], [ %40, %cond.false ]
  %call14 = call %struct.sv* @Perl_newSViv(i64 %cond)
  %call15 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call14)
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call15, %struct.sv** %41, align 8
  br label %if.end16

if.end16:                                         ; preds = %cond.end, %if.end
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %42, %struct.sv*** @PL_stack_sp, align 8
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %44
}

declare dso_local %struct.sv** @Perl_av_arylen_p(%struct.av*) #1

declare dso_local %struct.sv* @Perl_newSV_type(i32) #1

declare dso_local void @Perl_sv_magic(%struct.sv*, %struct.sv*, i32, i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_pos() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %ret = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %targ = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %4 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %6 to i32
  %and2 = and i32 %conv1, 8
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool4 = icmp ne i32 %call, 0
  br i1 %tobool4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true, %entry
  %call5 = call %struct.sv* @Perl_newSV_type(i32 10)
  %call6 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call5)
  store %struct.sv* %call6, %struct.sv** %ret, align 8
  %7 = load %struct.sv*, %struct.sv** %ret, align 8
  call void @Perl_sv_magic(%struct.sv* %7, %struct.sv* null, i32 46, i8* null, i32 0)
  %8 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %10, i32 0, i32 9
  store i8 46, i8* %xlv_type, align 8
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.sv*
  %call7 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %13)
  %14 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any8 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any8, align 8
  %16 = bitcast i8* %15 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %16, i32 0, i32 8
  store %struct.sv* %call7, %struct.sv** %xlv_targ, align 8
  %17 = load %struct.sv*, %struct.sv** %ret, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %17, %struct.sv** %18, align 8
  br label %if.end37

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %call9 = call %struct.magic* @Perl_mg_find_mglob(%struct.sv* %19)
  store %struct.magic* %call9, %struct.magic** %mg, align 8
  %20 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool10 = icmp ne %struct.magic* %20, null
  br i1 %tobool10, label %land.lhs.true11, label %if.end36

land.lhs.true11:                                  ; preds = %if.else
  %21 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len = getelementptr inbounds %struct.magic, %struct.magic* %21, i32 0, i32 5
  %22 = load i64, i64* %mg_len, align 8
  %cmp = icmp ne i64 %22, -1
  br i1 %cmp, label %if.then13, label %if.end36

if.then13:                                        ; preds = %land.lhs.true11
  %23 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 3
  %25 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %25
  %26 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %26, %struct.sv** %targ, align 8
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_len14 = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 5
  %28 = load i64, i64* %mg_len14, align 8
  store i64 %28, i64* %i, align 8
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 4
  %30 = load i8, i8* %mg_flags, align 1
  %conv15 = zext i8 %30 to i32
  %and16 = and i32 %conv15, 64
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true18, label %if.end

land.lhs.true18:                                  ; preds = %if.then13
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags, align 4
  %and19 = and i32 %32, 536870912
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true21, label %if.end

land.lhs.true21:                                  ; preds = %land.lhs.true18
  %33 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %33, i32 0, i32 10
  %34 = load i32, i32* %cop_hints, align 8
  %add = add i32 %34, 0
  %and22 = and i32 %add, 8
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.end, label %if.then24

if.then24:                                        ; preds = %land.lhs.true21
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %36 = load i64, i64* %i, align 8
  %call25 = call i64 @Perl_sv_pos_b2u_flags(%struct.sv* %35, i64 %36, i32 34)
  store i64 %call25, i64* %i, align 8
  br label %if.end

if.end:                                           ; preds = %if.then24, %land.lhs.true21, %land.lhs.true18, %if.then13
  br label %do.body

do.body:                                          ; preds = %if.end
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load i64, i64* %i, align 8
  call void @Perl_sv_setuv(%struct.sv* %37, i64 %38)
  br label %do.body26

do.body26:                                        ; preds = %do.body
  br label %do.body27

do.body27:                                        ; preds = %do.body26
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %40, 4194304
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body27
  br i1 true, label %if.then31, label %if.end33

cond.false:                                       ; preds = %do.body27
  br i1 false, label %if.then31, label %if.end33

if.then31:                                        ; preds = %cond.false, %cond.true
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %call32 = call i32 @Perl_mg_set(%struct.sv* %41)
  br label %if.end33

if.end33:                                         ; preds = %if.then31, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end33
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %42, %struct.sv** %43, align 8
  br label %do.end34

do.end34:                                         ; preds = %do.end
  br label %do.end35

do.end35:                                         ; preds = %do.end34
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  %45 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %45, %struct.op** %retval, align 8
  br label %return

if.end36:                                         ; preds = %land.lhs.true11, %if.else
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %46, align 8
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.then
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next38 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 0
  %48 = load %struct.op*, %struct.op** %op_next38, align 8
  store %struct.op* %48, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end37, %do.end35
  %49 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %49
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %2, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  %3 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %3
}

declare dso_local %struct.magic* @Perl_mg_find_mglob(%struct.sv*) #1

declare dso_local i64 @Perl_sv_pos_b2u_flags(%struct.sv*, i64, i32) #1

declare dso_local void @Perl_sv_setuv(%struct.sv*, i64) #1

declare dso_local i32 @Perl_mg_set(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rv2cv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %gv = alloca %struct.gv*, align 8
  %stash_unused = alloca %struct.hv*, align 8
  %flags = alloca i32, align 4
  %cv = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 6
  %4 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %4 to i32
  %and2 = and i32 %conv1, 160
  %cmp = icmp eq i32 %and2, 32
  %5 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 65, i32 1
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond4 = phi i32 [ 1024, %cond.true ], [ %cond, %cond.false ]
  store i32 %cond4, i32* %flags, align 4
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %8 = load i32, i32* %flags, align 4
  %call = call %struct.cv* @Perl_sv_2cv(%struct.sv* %7, %struct.hv** %stash_unused, %struct.gv** %gv, i32 %8)
  store %struct.cv* %call, %struct.cv** %cv, align 8
  %9 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool5 = icmp ne %struct.cv* %9, null
  br i1 %tobool5, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  br label %if.end24

if.else:                                          ; preds = %cond.end
  %10 = load i32, i32* %flags, align 4
  %cmp6 = icmp eq i32 %10, 65
  br i1 %cmp6, label %land.lhs.true, label %if.else23

land.lhs.true:                                    ; preds = %if.else
  %11 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool8 = icmp ne %struct.gv* %11, null
  br i1 %tobool8, label %land.lhs.true9, label %if.else23

land.lhs.true9:                                   ; preds = %land.lhs.true
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and10 = and i32 %13, 2048
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else23

if.then12:                                        ; preds = %land.lhs.true9
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %14, i32 0, i32 3
  %svu_rv = bitcast %union.anon.4* %sv_u to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %16, 255
  %cmp15 = icmp eq i32 %and14, 13
  br i1 %cmp15, label %cond.true17, label %cond.false20

cond.true17:                                      ; preds = %if.then12
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u18 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 3
  %svu_rv19 = bitcast %union.anon.4* %sv_u18 to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %svu_rv19, align 8
  %19 = bitcast %struct.sv* %18 to i8*
  %20 = bitcast i8* %19 to %struct.cv*
  br label %cond.end21

cond.false20:                                     ; preds = %if.then12
  %21 = load %struct.gv*, %struct.gv** %gv, align 8
  %22 = bitcast %struct.gv* %21 to i8*
  %23 = bitcast i8* %22 to %struct.cv*
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %struct.cv* [ %20, %cond.true17 ], [ %23, %cond.false20 ]
  store %struct.cv* %cond22, %struct.cv** %cv, align 8
  br label %if.end

if.else23:                                        ; preds = %land.lhs.true9, %land.lhs.true, %if.else
  store %struct.cv* bitcast (%struct.sv* @PL_sv_undef to %struct.cv*), %struct.cv** %cv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else23, %cond.end21
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then
  %24 = load %struct.cv*, %struct.cv** %cv, align 8
  %25 = bitcast %struct.cv* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %26, %struct.sv** %27, align 8
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  %29 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %29
}

declare dso_local %struct.cv* @Perl_sv_2cv(%struct.sv*, %struct.hv**, %struct.gv**, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_prototype() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %cv = alloca %struct.cv*, align 8
  %stash = alloca %struct.hv*, align 8
  %gv = alloca %struct.gv*, align 8
  %ret = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %code = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %ret, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %call = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %5, i32 1538)
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call, %struct.sv** %6, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %9, 1024
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end29

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %13, i32 0, i32 2
  %14 = load i64, i64* %xpv_cur, align 8
  %cmp = icmp uge i64 %14, 7
  br i1 %cmp, label %if.then4, label %if.end29

if.then4:                                         ; preds = %land.lhs.true
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %17 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %17, i64 0
  store i8* %add.ptr, i8** %s, align 8
  %18 = load i8*, i8** %s, align 8
  %call5 = call i32 @strncmp(i8* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i64 6) #7
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end28, label %if.then7

if.then7:                                         ; preds = %if.then4
  %19 = load i8*, i8** %s, align 8
  %add.ptr8 = getelementptr inbounds i8, i8* %19, i64 6
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %xpv_cur10 = getelementptr inbounds %struct.xpv, %struct.xpv* %23, i32 0, i32 2
  %24 = load i64, i64* %xpv_cur10, align 8
  %sub = sub i64 %24, 6
  %conv = trunc i64 %sub to i32
  %call11 = call i32 @Perl_keyword(i8* %add.ptr8, i32 %conv, i1 zeroext true)
  store i32 %call11, i32* %code, align 4
  %25 = load i32, i32* %code, align 4
  %tobool12 = icmp ne i32 %25, 0
  br i1 %tobool12, label %if.end22, label %if.then13

if.then13:                                        ; preds = %if.then7
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %28, 536870912
  %tobool16 = icmp ne i32 %and15, 0
  %29 = zext i1 %tobool16 to i64
  %cond = select i1 %tobool16, i32 1, i32 0
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %31 = load %struct.sv*, %struct.sv** %30, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any17, align 8
  %33 = bitcast i8* %32 to %struct.xpv*
  %xpv_cur18 = getelementptr inbounds %struct.xpv, %struct.xpv* %33, i32 0, i32 2
  %34 = load i64, i64* %xpv_cur18, align 8
  %sub19 = sub i64 %34, 6
  %35 = load i8*, i8** %s, align 8
  %add.ptr20 = getelementptr inbounds i8, i8* %35, i64 6
  %call21 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0), i32 %cond, i64 %sub19, i8* %add.ptr20)
  store %struct.op* %call21, %struct.op** %retval, align 8
  br label %return

if.end22:                                         ; preds = %if.then7
  %36 = load i8*, i8** %s, align 8
  %add.ptr23 = getelementptr inbounds i8, i8* %36, i64 6
  %37 = load i32, i32* %code, align 4
  %call24 = call %struct.sv* @Perl_core_prototype(%struct.sv* null, i8* %add.ptr23, i32 %37, i32* null)
  store %struct.sv* %call24, %struct.sv** %sv, align 8
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool25 = icmp ne %struct.sv* %38, null
  br i1 %tobool25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end22
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %39, %struct.sv** %ret, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end22
  br label %set

if.end28:                                         ; preds = %if.then4
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %land.lhs.true, %if.end
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %41 = load %struct.sv*, %struct.sv** %40, align 8
  %call30 = call %struct.cv* @Perl_sv_2cv(%struct.sv* %41, %struct.hv** %stash, %struct.gv** %gv, i32 0)
  store %struct.cv* %call30, %struct.cv** %cv, align 8
  %42 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool31 = icmp ne %struct.cv* %42, null
  br i1 %tobool31, label %land.lhs.true32, label %if.end92

land.lhs.true32:                                  ; preds = %if.end29
  %43 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags33 = getelementptr inbounds %struct.cv, %struct.cv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %44, 1024
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.end92

if.then36:                                        ; preds = %land.lhs.true32
  %45 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags37 = getelementptr inbounds %struct.cv, %struct.cv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %46, 1024
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true, label %cond.false59

cond.true:                                        ; preds = %if.then36
  %47 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags40 = getelementptr inbounds %struct.cv, %struct.cv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %48, 255
  %cmp42 = icmp eq i32 %and41, 13
  br i1 %cmp42, label %land.lhs.true44, label %cond.false

land.lhs.true44:                                  ; preds = %cond.true
  %49 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any45 = getelementptr inbounds %struct.cv, %struct.cv* %49, i32 0, i32 0
  %50 = load %struct.xpvcv*, %struct.xpvcv** %sv_any45, align 8
  %51 = bitcast %struct.xpvcv* %50 to i8*
  %52 = bitcast i8* %51 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %52, i32 0, i32 12
  %53 = load i32, i32* %xcv_flags, align 4
  %and46 = and i32 %53, 8192
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false

cond.true48:                                      ; preds = %land.lhs.true44
  %54 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_u49 = getelementptr inbounds %struct.cv, %struct.cv* %54, i32 0, i32 3
  %svu_pv50 = bitcast %union.anon.3* %sv_u49 to i8**
  %55 = load i8*, i8** %svu_pv50, align 8
  %56 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any51 = getelementptr inbounds %struct.cv, %struct.cv* %56, i32 0, i32 0
  %57 = load %struct.xpvcv*, %struct.xpvcv** %sv_any51, align 8
  %58 = bitcast %struct.xpvcv* %57 to %struct.xpv*
  %xpv_cur52 = getelementptr inbounds %struct.xpv, %struct.xpv* %58, i32 0, i32 2
  %59 = load i64, i64* %xpv_cur52, align 8
  %add.ptr53 = getelementptr inbounds i8, i8* %55, i64 %59
  %add.ptr54 = getelementptr inbounds i8, i8* %add.ptr53, i64 1
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true44, %cond.true
  %60 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_u55 = getelementptr inbounds %struct.cv, %struct.cv* %60, i32 0, i32 3
  %svu_pv56 = bitcast %union.anon.3* %sv_u55 to i8**
  %61 = load i8*, i8** %svu_pv56, align 8
  %add.ptr57 = getelementptr inbounds i8, i8* %61, i64 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true48
  %cond58 = phi i8* [ %add.ptr54, %cond.true48 ], [ %add.ptr57, %cond.false ]
  br label %cond.end60

cond.false59:                                     ; preds = %if.then36
  br label %cond.end60

cond.end60:                                       ; preds = %cond.false59, %cond.end
  %cond61 = phi i8* [ %cond58, %cond.end ], [ null, %cond.false59 ]
  %62 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags62 = getelementptr inbounds %struct.cv, %struct.cv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %63, 1024
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %cond.true65, label %cond.false86

cond.true65:                                      ; preds = %cond.end60
  %64 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags66 = getelementptr inbounds %struct.cv, %struct.cv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %65, 255
  %cmp68 = icmp eq i32 %and67, 13
  br i1 %cmp68, label %land.lhs.true70, label %cond.false81

land.lhs.true70:                                  ; preds = %cond.true65
  %66 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any71 = getelementptr inbounds %struct.cv, %struct.cv* %66, i32 0, i32 0
  %67 = load %struct.xpvcv*, %struct.xpvcv** %sv_any71, align 8
  %68 = bitcast %struct.xpvcv* %67 to i8*
  %69 = bitcast i8* %68 to %struct.xpvcv*
  %xcv_flags72 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %69, i32 0, i32 12
  %70 = load i32, i32* %xcv_flags72, align 4
  %and73 = and i32 %70, 8192
  %tobool74 = icmp ne i32 %and73, 0
  br i1 %tobool74, label %cond.true75, label %cond.false81

cond.true75:                                      ; preds = %land.lhs.true70
  %71 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any76 = getelementptr inbounds %struct.cv, %struct.cv* %71, i32 0, i32 0
  %72 = load %struct.xpvcv*, %struct.xpvcv** %sv_any76, align 8
  %73 = bitcast %struct.xpvcv* %72 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %73, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %74 = load i64, i64* %xpvlenu_len, align 8
  %75 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any77 = getelementptr inbounds %struct.cv, %struct.cv* %75, i32 0, i32 0
  %76 = load %struct.xpvcv*, %struct.xpvcv** %sv_any77, align 8
  %77 = bitcast %struct.xpvcv* %76 to %struct.xpv*
  %xpv_cur78 = getelementptr inbounds %struct.xpv, %struct.xpv* %77, i32 0, i32 2
  %78 = load i64, i64* %xpv_cur78, align 8
  %sub79 = sub i64 %74, %78
  %sub80 = sub i64 %sub79, 2
  br label %cond.end84

cond.false81:                                     ; preds = %land.lhs.true70, %cond.true65
  %79 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any82 = getelementptr inbounds %struct.cv, %struct.cv* %79, i32 0, i32 0
  %80 = load %struct.xpvcv*, %struct.xpvcv** %sv_any82, align 8
  %81 = bitcast %struct.xpvcv* %80 to %struct.xpv*
  %xpv_cur83 = getelementptr inbounds %struct.xpv, %struct.xpv* %81, i32 0, i32 2
  %82 = load i64, i64* %xpv_cur83, align 8
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false81, %cond.true75
  %cond85 = phi i64 [ %sub80, %cond.true75 ], [ %82, %cond.false81 ]
  br label %cond.end87

cond.false86:                                     ; preds = %cond.end60
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false86, %cond.end84
  %cond88 = phi i64 [ %cond85, %cond.end84 ], [ 0, %cond.false86 ]
  %83 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags89 = getelementptr inbounds %struct.cv, %struct.cv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %84, 536870912
  %or = or i32 524288, %and90
  %call91 = call %struct.sv* @Perl_newSVpvn_flags(i8* %cond61, i64 %cond88, i32 %or)
  store %struct.sv* %call91, %struct.sv** %ret, align 8
  br label %if.end92

if.end92:                                         ; preds = %cond.end87, %land.lhs.true32, %if.end29
  br label %set

set:                                              ; preds = %if.end92, %if.end27
  %85 = load %struct.sv*, %struct.sv** %ret, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %85, %struct.sv** %86, align 8
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %87, %struct.sv*** @PL_stack_sp, align 8
  %88 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 0
  %89 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %89, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %set, %if.then13
  %90 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %90
}

declare dso_local %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv*, i32) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #2

declare dso_local i32 @Perl_keyword(i8*, i32, i1 zeroext) #1

declare dso_local %struct.sv* @Perl_core_prototype(%struct.sv*, i8*, i32, i32*) #1

declare dso_local %struct.sv* @Perl_newSVpvn_flags(i8*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_anoncode() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cv = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %5 = bitcast %struct.sv* %4 to i8*
  %6 = bitcast i8* %5 to %struct.cv*
  store %struct.cv* %6, %struct.cv** %cv, align 8
  %7 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %7, i32 0, i32 0
  %8 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %9 = bitcast %struct.xpvcv* %8 to i8*
  %10 = bitcast i8* %9 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %10, i32 0, i32 12
  %11 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %11, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %12 = load %struct.cv*, %struct.cv** %cv, align 8
  %call = call %struct.cv* @Perl_cv_clone(%struct.cv* %12)
  %13 = bitcast %struct.cv* %call to i8*
  %14 = bitcast i8* %13 to %struct.sv*
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %14)
  %15 = bitcast %struct.sv* %call1 to i8*
  %16 = bitcast i8* %15 to %struct.cv*
  store %struct.cv* %16, %struct.cv** %cv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then2, label %if.end4

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then2, label %if.end4

if.then2:                                         ; preds = %cond.false, %cond.true
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call3 = call %struct.sv** @Perl_stack_grow(%struct.sv** %19, %struct.sv** %20, i64 1)
  store %struct.sv** %call3, %struct.sv*** %sp, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end4
  %22 = load %struct.cv*, %struct.cv** %cv, align 8
  %23 = bitcast %struct.cv* %22 to i8*
  %24 = bitcast i8* %23 to %struct.sv*
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %incdec.ptr, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %28
}

declare dso_local %struct.cv* @Perl_cv_clone(%struct.cv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_srefgen() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %call = call %struct.sv* @S_refto(%struct.sv* %2)
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call, %struct.sv** %3, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 0
  %5 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %5
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_refto(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rv = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 10
  br i1 %cmp, label %land.lhs.true, label %if.else9

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %4, i32 0, i32 9
  %5 = load i8, i8* %xlv_type, align 8
  %conv = sext i8 %5 to i32
  %cmp1 = icmp eq i32 %conv, 121
  br i1 %cmp1, label %if.then, label %if.else9

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any3 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any3, align 8
  %8 = bitcast i8* %7 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %8, i32 0, i32 7
  %9 = load i64, i64* %xlv_targlen, align 8
  %tobool = icmp ne i64 %9, 0
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %10 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_vivify_defelem(%struct.sv* %10)
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %11 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any5, align 8
  %13 = bitcast i8* %12 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %13, i32 0, i32 8
  %14 = load %struct.sv*, %struct.sv** %xlv_targ, align 8
  store %struct.sv* %14, %struct.sv** %sv.addr, align 8
  %tobool6 = icmp ne %struct.sv* %14, null
  br i1 %tobool6, label %if.else, label %if.then7

if.then7:                                         ; preds = %if.end
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv.addr, align 8
  br label %if.end8

if.else:                                          ; preds = %if.end
  %15 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %16 = bitcast %struct.sv* %15 to i8*
  %17 = bitcast i8* %16 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 1
  %18 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %18, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.then7
  br label %if.end40

if.else9:                                         ; preds = %land.lhs.true, %entry
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %20, 255
  %cmp12 = icmp eq i32 %and11, 11
  br i1 %cmp12, label %if.then14, label %if.else28

if.then14:                                        ; preds = %if.else9
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %22 = bitcast %struct.sv* %21 to %struct.av*
  %sv_flags15 = getelementptr inbounds %struct.av, %struct.av* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %23, 1073741824
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.end23, label %land.lhs.true18

land.lhs.true18:                                  ; preds = %if.then14
  %24 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %25 = bitcast %struct.sv* %24 to %struct.av*
  %sv_flags19 = getelementptr inbounds %struct.av, %struct.av* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %26, -2147483648
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %land.lhs.true18
  %27 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %28 = bitcast %struct.sv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.av*
  call void @Perl_av_reify(%struct.av* %29)
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %land.lhs.true18, %if.then14
  %30 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %31, -524289
  store i32 %and25, i32* %sv_flags24, align 4
  %32 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %33 = bitcast %struct.sv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  %sv_refcnt26 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 1
  %35 = load i32, i32* %sv_refcnt26, align 8
  %inc27 = add i32 %35, 1
  store i32 %inc27, i32* %sv_refcnt26, align 8
  br label %if.end39

if.else28:                                        ; preds = %if.else9
  %36 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %37, 131072
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.then32, label %if.else33

if.then32:                                        ; preds = %if.else28
  %38 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call = call %struct.sv* @Perl_newSVsv(%struct.sv* %38)
  store %struct.sv* %call, %struct.sv** %sv.addr, align 8
  br label %if.end38

if.else33:                                        ; preds = %if.else28
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %40, -524289
  store i32 %and35, i32* %sv_flags34, align 4
  %41 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %42 = bitcast %struct.sv* %41 to i8*
  %43 = bitcast i8* %42 to %struct.sv*
  %sv_refcnt36 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 1
  %44 = load i32, i32* %sv_refcnt36, align 8
  %inc37 = add i32 %44, 1
  store i32 %inc37, i32* %sv_refcnt36, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.else33, %if.then32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end23
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end8
  %call41 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call41, %struct.sv** %rv, align 8
  %45 = load %struct.sv*, %struct.sv** %rv, align 8
  call void @Perl_sv_upgrade(%struct.sv* %45, i32 1)
  br label %do.body

do.body:                                          ; preds = %if.end40
  %46 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %47 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  store %struct.sv* %46, %struct.sv** %svu_rv, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %48 = load %struct.sv*, %struct.sv** %rv, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags42, align 4
  %or = or i32 %49, 2048
  store i32 %or, i32* %sv_flags42, align 4
  %50 = load %struct.sv*, %struct.sv** %rv, align 8
  ret %struct.sv* %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_refgen() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %markoff = alloca i64, align 8
  %eMiX = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %7 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp ne i32 %cond, 3
  br i1 %cmp, label %if.then, label %if.end22

if.then:                                          ; preds = %cond.end
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr5, %struct.sv*** %mark, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp6 = icmp ule %struct.sv** %incdec.ptr5, %9
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  %12 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %11, %struct.sv** %12, align 8
  br label %if.end20

if.else:                                          ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.else
  %13 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp9 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp9, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.body
  br i1 true, label %if.then13, label %if.end

cond.false12:                                     ; preds = %do.body
  br i1 false, label %if.then13, label %if.end

if.then13:                                        ; preds = %cond.false12, %cond.true11
  %15 = load %struct.sv**, %struct.sv*** %mark, align 8
  %16 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast14 = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.rhs.cast15 = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.sub16 = sub i64 %sub.ptr.lhs.cast14, %sub.ptr.rhs.cast15
  %sub.ptr.div17 = sdiv exact i64 %sub.ptr.sub16, 8
  store i64 %sub.ptr.div17, i64* %markoff, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call18 = call %struct.sv** @Perl_stack_grow(%struct.sv** %17, %struct.sv** %18, i64 1)
  store %struct.sv** %call18, %struct.sv*** %sp, align 8
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %20 = load i64, i64* %markoff, align 8
  %add.ptr19 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 %20
  store %struct.sv** %add.ptr19, %struct.sv*** %mark, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then13, %cond.false12, %cond.true11
  br label %do.end

do.end:                                           ; preds = %if.end
  %22 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %22, align 8
  br label %if.end20

if.end20:                                         ; preds = %do.end, %if.then8
  %23 = load %struct.sv**, %struct.sv*** %mark, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %call21 = call %struct.sv* @S_refto(%struct.sv* %24)
  %25 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call21, %struct.sv** %25, align 8
  %26 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %26, %struct.sv*** %sp, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %27, %struct.sv*** @PL_stack_sp, align 8
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  %29 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %29, %struct.op** %retval, align 8
  br label %return

if.end22:                                         ; preds = %cond.end
  br label %do.body23

do.body23:                                        ; preds = %if.end22
  %30 = load i64, i64* @PL_tmps_ix, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast24 = ptrtoint %struct.sv** %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %sub.ptr.div27 = sdiv exact i64 %sub.ptr.sub26, 8
  %add = add nsw i64 %30, %sub.ptr.div27
  store i64 %add, i64* %eMiX, align 8
  %33 = load i64, i64* %eMiX, align 8
  %34 = load i64, i64* @PL_tmps_max, align 8
  %cmp28 = icmp sge i64 %33, %34
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %do.body23
  br i1 true, label %if.then32, label %if.end34

cond.false31:                                     ; preds = %do.body23
  br i1 false, label %if.then32, label %if.end34

if.then32:                                        ; preds = %cond.false31, %cond.true30
  %35 = load i64, i64* %eMiX, align 8
  %call33 = call i64 @Perl_tmps_grow_p(i64 %35)
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %cond.false31, %cond.true30
  br label %do.end35

do.end35:                                         ; preds = %if.end34
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end35
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %mark, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp37 = icmp ule %struct.sv** %incdec.ptr36, %37
  br i1 %cmp37, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load %struct.sv**, %struct.sv*** %mark, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %call39 = call %struct.sv* @S_refto(%struct.sv* %39)
  %40 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call39, %struct.sv** %40, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %41, %struct.sv*** @PL_stack_sp, align 8
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next40 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next40, align 8
  store %struct.op* %43, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %while.end, %if.end20
  %44 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %44
}

declare dso_local i64 @Perl_tmps_grow_p(i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ref() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, 2048
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.else, label %if.then

if.then:                                          ; preds = %land.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %9, align 8
  br label %if.end13

if.else:                                          ; preds = %land.end
  %10 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 3
  %12 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %10, i64 %12
  %13 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %13, %struct.sv** %targ, align 8
  %14 = load %struct.sv*, %struct.sv** %targ, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %14, %struct.sv** %15, align 8
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %call5 = call %struct.sv* @Perl_sv_ref(%struct.sv* %16, %struct.sv* %18, i32 1)
  store %struct.sv* %call5, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %20, 4194304
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %do.body
  br i1 true, label %if.then11, label %if.end

cond.false10:                                     ; preds = %do.body
  br i1 false, label %if.then11, label %if.end

if.then11:                                        ; preds = %cond.false10, %cond.true9
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %call12 = call i32 @Perl_mg_set(%struct.sv* %21)
  br label %if.end

if.end:                                           ; preds = %if.then11, %cond.false10, %cond.true9
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end13

if.end13:                                         ; preds = %do.end, %if.then
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %23
}

declare dso_local %struct.sv* @Perl_sv_ref(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_bless() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %stash = alloca %struct.hv*, align 8
  %ssv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 15
  %cmp = icmp eq i32 %and, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %curstash

curstash:                                         ; preds = %if.then6, %if.then
  %3 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %3, i32 0, i32 8
  %4 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  store %struct.hv* %4, %struct.hv** %stash, align 8
  %5 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %6, 255
  %cmp3 = icmp ne i32 %and2, 12
  br i1 %cmp3, label %if.then5, label %if.end

if.then5:                                         ; preds = %curstash
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then5, %curstash
  br label %if.end82

if.else:                                          ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  store %struct.sv* %8, %struct.sv** %ssv, align 8
  %9 = load %struct.sv*, %struct.sv** %ssv, align 8
  %tobool = icmp ne %struct.sv* %9, null
  br i1 %tobool, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.else
  br label %curstash

if.end7:                                          ; preds = %if.else
  %10 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %11, 2097152
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end7
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end7
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %12 = load %struct.sv*, %struct.sv** %ssv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %12)
  %tobool11 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %13 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool11, %land.rhs ]
  %land.ext = zext i1 %13 to i32
  %14 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %15, 2048
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then15, label %if.else58

if.then15:                                        ; preds = %land.end
  %16 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %17, 2048
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %land.lhs.true, label %if.then28

land.lhs.true:                                    ; preds = %if.then15
  %18 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %19 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %20, 1048576
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.lhs.true22, label %if.then28

land.lhs.true22:                                  ; preds = %land.lhs.true
  %21 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u23 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_rv24 = bitcast %union.anon* %sv_u23 to %struct.sv**
  %22 = load %struct.sv*, %struct.sv** %svu_rv24, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any, align 8
  %24 = bitcast i8* %23 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %24, i32 0, i32 0
  %25 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags25 = getelementptr inbounds %struct.hv, %struct.hv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %26, 268435456
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.end29, label %if.then28

if.then28:                                        ; preds = %land.lhs.true22, %land.lhs.true, %if.then15
  br label %frog

frog:                                             ; preds = %if.then56, %if.then28
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  br label %if.end29

if.end29:                                         ; preds = %frog, %land.lhs.true22
  %27 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %28, 2098176
  %cmp32 = icmp eq i32 %and31, 1024
  br i1 %cmp32, label %cond.true34, label %cond.false37

cond.true34:                                      ; preds = %if.end29
  %29 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_any35 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any35, align 8
  %31 = bitcast i8* %30 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %31, i32 0, i32 2
  %32 = load i64, i64* %xpv_cur, align 8
  store i64 %32, i64* %len, align 8
  %33 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u36 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u36 to i8**
  %34 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %34, i64 0
  br label %cond.end

cond.false37:                                     ; preds = %if.end29
  %35 = load %struct.sv*, %struct.sv** %ssv, align 8
  %call38 = call i8* @Perl_sv_2pv_flags(%struct.sv* %35, i64* %len, i32 32)
  br label %cond.end

cond.end:                                         ; preds = %cond.false37, %cond.true34
  %cond = phi i8* [ %add.ptr, %cond.true34 ], [ %call38, %cond.false37 ]
  store i8* %cond, i8** %ptr, align 8
  %36 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %37, 2048
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %land.lhs.true42, label %if.then56

land.lhs.true42:                                  ; preds = %cond.end
  %38 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u43 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 3
  %svu_rv44 = bitcast %union.anon* %sv_u43 to %struct.sv**
  %39 = load %struct.sv*, %struct.sv** %svu_rv44, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %40, 1048576
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %land.lhs.true48, label %if.then56

land.lhs.true48:                                  ; preds = %land.lhs.true42
  %41 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u49 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 3
  %svu_rv50 = bitcast %union.anon* %sv_u49 to %struct.sv**
  %42 = load %struct.sv*, %struct.sv** %svu_rv50, align 8
  %sv_any51 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any51, align 8
  %44 = bitcast i8* %43 to %struct.xpvmg*
  %xmg_stash52 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %44, i32 0, i32 0
  %45 = load %struct.hv*, %struct.hv** %xmg_stash52, align 8
  %sv_flags53 = getelementptr inbounds %struct.hv, %struct.hv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %46, 268435456
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %if.end57, label %if.then56

if.then56:                                        ; preds = %land.lhs.true48, %land.lhs.true42, %cond.end
  br label %frog

if.end57:                                         ; preds = %land.lhs.true48
  br label %if.end73

if.else58:                                        ; preds = %land.end
  %47 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %48, 2098176
  %cmp61 = icmp eq i32 %and60, 1024
  br i1 %cmp61, label %cond.true63, label %cond.false69

cond.true63:                                      ; preds = %if.else58
  %49 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_any64 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any64, align 8
  %51 = bitcast i8* %50 to %struct.xpv*
  %xpv_cur65 = getelementptr inbounds %struct.xpv, %struct.xpv* %51, i32 0, i32 2
  %52 = load i64, i64* %xpv_cur65, align 8
  store i64 %52, i64* %len, align 8
  %53 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_u66 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 3
  %svu_pv67 = bitcast %union.anon* %sv_u66 to i8**
  %54 = load i8*, i8** %svu_pv67, align 8
  %add.ptr68 = getelementptr inbounds i8, i8* %54, i64 0
  br label %cond.end71

cond.false69:                                     ; preds = %if.else58
  %55 = load %struct.sv*, %struct.sv** %ssv, align 8
  %call70 = call i8* @Perl_sv_2pv_flags(%struct.sv* %55, i64* %len, i32 32)
  br label %cond.end71

cond.end71:                                       ; preds = %cond.false69, %cond.true63
  %cond72 = phi i8* [ %add.ptr68, %cond.true63 ], [ %call70, %cond.false69 ]
  store i8* %cond72, i8** %ptr, align 8
  br label %if.end73

if.end73:                                         ; preds = %cond.end71, %if.end57
  %56 = load i64, i64* %len, align 8
  %cmp74 = icmp eq i64 %56, 0
  br i1 %cmp74, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.end73
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0))
  br label %if.end77

if.end77:                                         ; preds = %if.then76, %if.end73
  %57 = load i8*, i8** %ptr, align 8
  %58 = load i64, i64* %len, align 8
  %conv78 = trunc i64 %58 to i32
  %59 = load %struct.sv*, %struct.sv** %ssv, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %60, 536870912
  %or = or i32 1, %and80
  %call81 = call %struct.hv* @Perl_gv_stashpvn(i8* %57, i32 %conv78, i32 %or)
  store %struct.hv* %call81, %struct.hv** %stash, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.end77, %if.end
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  %63 = load %struct.hv*, %struct.hv** %stash, align 8
  %call83 = call %struct.sv* @Perl_sv_bless(%struct.sv* %62, %struct.hv* %63)
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %64, %struct.sv*** @PL_stack_sp, align 8
  %65 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %65, i32 0, i32 0
  %66 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %66
}

declare dso_local i8* @Perl_sv_2pv_flags(%struct.sv*, i64*, i32) #1

declare dso_local void @Perl_ck_warner(i32, i8*, ...) #1

declare dso_local %struct.hv* @Perl_gv_stashpvn(i8*, i32, i32) #1

declare dso_local %struct.sv* @Perl_sv_bless(%struct.sv*, %struct.hv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gelem() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %elem = alloca i8*, align 8
  %gv = alloca %struct.gv*, align 8
  %tmpRef = alloca %struct.sv*, align 8
  %second_letter = alloca i8*, align 8
  %stash = alloca %struct.hv*, align 8
  %hek = alloca %struct.hek*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 2
  %8 = load i64, i64* %xpv_cur, align 8
  store i64 %8, i64* %len, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %10, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %elem, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %14 = bitcast %struct.sv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.gv*
  store %struct.gv* %15, %struct.gv** %gv, align 8
  store %struct.sv* null, %struct.sv** %tmpRef, align 8
  store %struct.sv* null, %struct.sv** %sv, align 8
  %16 = load i8*, i8** %elem, align 8
  %tobool = icmp ne i8* %16, null
  br i1 %tobool, label %if.then, label %if.end188

if.then:                                          ; preds = %cond.end
  %17 = load i8*, i8** %elem, align 8
  %add.ptr1 = getelementptr inbounds i8, i8* %17, i64 1
  store i8* %add.ptr1, i8** %second_letter, align 8
  %18 = load i8*, i8** %elem, align 8
  %19 = load i8, i8* %18, align 1
  %conv = sext i8 %19 to i32
  switch i32 %conv, label %sw.epilog [
    i32 65, label %sw.bb
    i32 67, label %sw.bb20
    i32 70, label %sw.bb39
    i32 71, label %sw.bb60
    i32 72, label %sw.bb68
    i32 73, label %sw.bb79
    i32 78, label %sw.bb94
    i32 80, label %sw.bb104
    i32 83, label %sw.bb163
  ]

sw.bb:                                            ; preds = %if.then
  %20 = load i64, i64* %len, align 8
  %cmp2 = icmp eq i64 %20, 5
  br i1 %cmp2, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %sw.bb
  %21 = load i8*, i8** %second_letter, align 8
  %call4 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0)) #7
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end19, label %if.then6

if.then6:                                         ; preds = %land.lhs.true
  %22 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u7 = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u7 to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr8 = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr8, i32 0, i32 6
  %24 = load %struct.av*, %struct.av** %gp_av, align 8
  %25 = bitcast %struct.av* %24 to i8*
  %26 = bitcast i8* %25 to %struct.sv*
  store %struct.sv* %26, %struct.sv** %tmpRef, align 8
  %27 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %tobool9 = icmp ne %struct.sv* %27, null
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %if.then6
  %28 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %29 = bitcast %struct.sv* %28 to %struct.av*
  %sv_flags11 = getelementptr inbounds %struct.av, %struct.av* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %30, 1073741824
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.end, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %31 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %32 = bitcast %struct.sv* %31 to %struct.av*
  %sv_flags15 = getelementptr inbounds %struct.av, %struct.av* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %33, -2147483648
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then18, label %if.end

if.then18:                                        ; preds = %land.lhs.true14
  %34 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %35 = bitcast %struct.sv* %34 to i8*
  %36 = bitcast i8* %35 to %struct.av*
  call void @Perl_av_reify(%struct.av* %36)
  br label %if.end

if.end:                                           ; preds = %if.then18, %land.lhs.true14, %land.lhs.true10, %if.then6
  br label %if.end19

if.end19:                                         ; preds = %if.end, %land.lhs.true, %sw.bb
  br label %sw.epilog

sw.bb20:                                          ; preds = %if.then
  %37 = load i64, i64* %len, align 8
  %cmp21 = icmp eq i64 %37, 4
  br i1 %cmp21, label %land.lhs.true23, label %if.end38

land.lhs.true23:                                  ; preds = %sw.bb20
  %38 = load i8*, i8** %second_letter, align 8
  %call24 = call i32 @strcmp(i8* %38, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)) #7
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.end38, label %if.then26

if.then26:                                        ; preds = %land.lhs.true23
  %39 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u27 = getelementptr inbounds %struct.gv, %struct.gv* %39, i32 0, i32 3
  %svu_gp28 = bitcast %union.anon.4* %sv_u27 to %struct.gp**
  %40 = load %struct.gp*, %struct.gp** %svu_gp28, align 8
  %add.ptr29 = getelementptr inbounds %struct.gp, %struct.gp* %40, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr29, i32 0, i32 3
  %41 = load i32, i32* %gp_cvgen, align 8
  %tobool30 = icmp ne i32 %41, 0
  br i1 %tobool30, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %if.then26
  br label %cond.end36

cond.false32:                                     ; preds = %if.then26
  %42 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u33 = getelementptr inbounds %struct.gv, %struct.gv* %42, i32 0, i32 3
  %svu_gp34 = bitcast %union.anon.4* %sv_u33 to %struct.gp**
  %43 = load %struct.gp*, %struct.gp** %svu_gp34, align 8
  %add.ptr35 = getelementptr inbounds %struct.gp, %struct.gp* %43, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr35, i32 0, i32 2
  %44 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false32, %cond.true31
  %cond37 = phi %struct.cv* [ null, %cond.true31 ], [ %44, %cond.false32 ]
  %45 = bitcast %struct.cv* %cond37 to i8*
  %46 = bitcast i8* %45 to %struct.sv*
  store %struct.sv* %46, %struct.sv** %tmpRef, align 8
  br label %if.end38

if.end38:                                         ; preds = %cond.end36, %land.lhs.true23, %sw.bb20
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.then
  %47 = load i64, i64* %len, align 8
  %cmp40 = icmp eq i64 %47, 10
  br i1 %cmp40, label %land.lhs.true42, label %if.else

land.lhs.true42:                                  ; preds = %sw.bb39
  %48 = load i8*, i8** %second_letter, align 8
  %call43 = call i32 @strcmp(i8* %48, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0)) #7
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.else, label %if.then45

if.then45:                                        ; preds = %land.lhs.true42
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.15, i64 0, i64 0))
  %49 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u46 = getelementptr inbounds %struct.gv, %struct.gv* %49, i32 0, i32 3
  %svu_gp47 = bitcast %union.anon.4* %sv_u46 to %struct.gp**
  %50 = load %struct.gp*, %struct.gp** %svu_gp47, align 8
  %add.ptr48 = getelementptr inbounds %struct.gp, %struct.gp* %50, i64 0
  %gp_io = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr48, i32 0, i32 1
  %51 = load %struct.io*, %struct.io** %gp_io, align 8
  %52 = bitcast %struct.io* %51 to i8*
  %53 = bitcast i8* %52 to %struct.sv*
  store %struct.sv* %53, %struct.sv** %tmpRef, align 8
  br label %if.end59

if.else:                                          ; preds = %land.lhs.true42, %sw.bb39
  %54 = load i64, i64* %len, align 8
  %cmp49 = icmp eq i64 %54, 6
  br i1 %cmp49, label %land.lhs.true51, label %if.end58

land.lhs.true51:                                  ; preds = %if.else
  %55 = load i8*, i8** %second_letter, align 8
  %call52 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0)) #7
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end58, label %if.then54

if.then54:                                        ; preds = %land.lhs.true51
  %56 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u55 = getelementptr inbounds %struct.gv, %struct.gv* %56, i32 0, i32 3
  %svu_gp56 = bitcast %union.anon.4* %sv_u55 to %struct.gp**
  %57 = load %struct.gp*, %struct.gp** %svu_gp56, align 8
  %add.ptr57 = getelementptr inbounds %struct.gp, %struct.gp* %57, i64 0
  %gp_form = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr57, i32 0, i32 7
  %58 = load %struct.cv*, %struct.cv** %gp_form, align 8
  %59 = bitcast %struct.cv* %58 to i8*
  %60 = bitcast i8* %59 to %struct.sv*
  store %struct.sv* %60, %struct.sv** %tmpRef, align 8
  br label %if.end58

if.end58:                                         ; preds = %if.then54, %land.lhs.true51, %if.else
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then45
  br label %sw.epilog

sw.bb60:                                          ; preds = %if.then
  %61 = load i64, i64* %len, align 8
  %cmp61 = icmp eq i64 %61, 4
  br i1 %cmp61, label %land.lhs.true63, label %if.end67

land.lhs.true63:                                  ; preds = %sw.bb60
  %62 = load i8*, i8** %second_letter, align 8
  %call64 = call i32 @strcmp(i8* %62, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17, i64 0, i64 0)) #7
  %tobool65 = icmp ne i32 %call64, 0
  br i1 %tobool65, label %if.end67, label %if.then66

if.then66:                                        ; preds = %land.lhs.true63
  %63 = load %struct.gv*, %struct.gv** %gv, align 8
  %64 = bitcast %struct.gv* %63 to i8*
  %65 = bitcast i8* %64 to %struct.sv*
  store %struct.sv* %65, %struct.sv** %tmpRef, align 8
  br label %if.end67

if.end67:                                         ; preds = %if.then66, %land.lhs.true63, %sw.bb60
  br label %sw.epilog

sw.bb68:                                          ; preds = %if.then
  %66 = load i64, i64* %len, align 8
  %cmp69 = icmp eq i64 %66, 4
  br i1 %cmp69, label %land.lhs.true71, label %if.end78

land.lhs.true71:                                  ; preds = %sw.bb68
  %67 = load i8*, i8** %second_letter, align 8
  %call72 = call i32 @strcmp(i8* %67, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)) #7
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.end78, label %if.then74

if.then74:                                        ; preds = %land.lhs.true71
  %68 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u75 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 3
  %svu_gp76 = bitcast %union.anon.4* %sv_u75 to %struct.gp**
  %69 = load %struct.gp*, %struct.gp** %svu_gp76, align 8
  %add.ptr77 = getelementptr inbounds %struct.gp, %struct.gp* %69, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr77, i32 0, i32 5
  %70 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  %71 = bitcast %struct.hv* %70 to i8*
  %72 = bitcast i8* %71 to %struct.sv*
  store %struct.sv* %72, %struct.sv** %tmpRef, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.then74, %land.lhs.true71, %sw.bb68
  br label %sw.epilog

sw.bb79:                                          ; preds = %if.then
  %73 = load i8*, i8** %second_letter, align 8
  %74 = load i8, i8* %73, align 1
  %conv80 = sext i8 %74 to i32
  %cmp81 = icmp eq i32 %conv80, 79
  br i1 %cmp81, label %land.lhs.true83, label %if.end93

land.lhs.true83:                                  ; preds = %sw.bb79
  %75 = load i8*, i8** %elem, align 8
  %arrayidx = getelementptr inbounds i8, i8* %75, i64 2
  %76 = load i8, i8* %arrayidx, align 1
  %tobool84 = icmp ne i8 %76, 0
  br i1 %tobool84, label %if.end93, label %land.lhs.true85

land.lhs.true85:                                  ; preds = %land.lhs.true83
  %77 = load i64, i64* %len, align 8
  %cmp86 = icmp eq i64 %77, 2
  br i1 %cmp86, label %if.then88, label %if.end93

if.then88:                                        ; preds = %land.lhs.true85
  %78 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u89 = getelementptr inbounds %struct.gv, %struct.gv* %78, i32 0, i32 3
  %svu_gp90 = bitcast %union.anon.4* %sv_u89 to %struct.gp**
  %79 = load %struct.gp*, %struct.gp** %svu_gp90, align 8
  %add.ptr91 = getelementptr inbounds %struct.gp, %struct.gp* %79, i64 0
  %gp_io92 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr91, i32 0, i32 1
  %80 = load %struct.io*, %struct.io** %gp_io92, align 8
  %81 = bitcast %struct.io* %80 to i8*
  %82 = bitcast i8* %81 to %struct.sv*
  store %struct.sv* %82, %struct.sv** %tmpRef, align 8
  br label %if.end93

if.end93:                                         ; preds = %if.then88, %land.lhs.true85, %land.lhs.true83, %sw.bb79
  br label %sw.epilog

sw.bb94:                                          ; preds = %if.then
  %83 = load i64, i64* %len, align 8
  %cmp95 = icmp eq i64 %83, 4
  br i1 %cmp95, label %land.lhs.true97, label %if.end103

land.lhs.true97:                                  ; preds = %sw.bb94
  %84 = load i8*, i8** %second_letter, align 8
  %call98 = call i32 @strcmp(i8* %84, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0)) #7
  %tobool99 = icmp ne i32 %call98, 0
  br i1 %tobool99, label %if.end103, label %if.then100

if.then100:                                       ; preds = %land.lhs.true97
  %85 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any101 = getelementptr inbounds %struct.gv, %struct.gv* %85, i32 0, i32 0
  %86 = load %struct.xpvgv*, %struct.xpvgv** %sv_any101, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %86, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %87 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  %call102 = call %struct.sv* @Perl_newSVhek(%struct.hek* %87)
  store %struct.sv* %call102, %struct.sv** %sv, align 8
  br label %if.end103

if.end103:                                        ; preds = %if.then100, %land.lhs.true97, %sw.bb94
  br label %sw.epilog

sw.bb104:                                         ; preds = %if.then
  %88 = load i64, i64* %len, align 8
  %cmp105 = icmp eq i64 %88, 7
  br i1 %cmp105, label %land.lhs.true107, label %if.end162

land.lhs.true107:                                 ; preds = %sw.bb104
  %89 = load i8*, i8** %second_letter, align 8
  %call108 = call i32 @strcmp(i8* %89, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0)) #7
  %tobool109 = icmp ne i32 %call108, 0
  br i1 %tobool109, label %if.end162, label %if.then110

if.then110:                                       ; preds = %land.lhs.true107
  %90 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_any111 = getelementptr inbounds %struct.gv, %struct.gv* %90, i32 0, i32 0
  %91 = load %struct.xpvgv*, %struct.xpvgv** %sv_any111, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %91, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %92 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  store %struct.hv* %92, %struct.hv** %stash, align 8
  %93 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool112 = icmp ne %struct.hv* %93, null
  br i1 %tobool112, label %cond.true113, label %cond.false152

cond.true113:                                     ; preds = %if.then110
  %94 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags114 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %95, 33554432
  %tobool116 = icmp ne i32 %and115, 0
  br i1 %tobool116, label %land.lhs.true117, label %cond.false149

land.lhs.true117:                                 ; preds = %cond.true113
  %96 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u118 = getelementptr inbounds %struct.hv, %struct.hv* %96, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u118 to %struct.he***
  %97 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %98 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any119 = getelementptr inbounds %struct.hv, %struct.hv* %98, i32 0, i32 0
  %99 = load %struct.xpvhv*, %struct.xpvhv** %sv_any119, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %99, i32 0, i32 3
  %100 = load i64, i64* %xhv_max, align 8
  %add = add i64 %100, 1
  %arrayidx120 = getelementptr inbounds %struct.he*, %struct.he** %97, i64 %add
  %101 = bitcast %struct.he** %arrayidx120 to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %101, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %102 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool121 = icmp ne %struct.hek* %102, null
  br i1 %tobool121, label %cond.true122, label %cond.false149

cond.true122:                                     ; preds = %land.lhs.true117
  %103 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u123 = getelementptr inbounds %struct.hv, %struct.hv* %103, i32 0, i32 3
  %svu_hash124 = bitcast %union.anon.5* %sv_u123 to %struct.he***
  %104 = load %struct.he**, %struct.he*** %svu_hash124, align 8
  %105 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any125 = getelementptr inbounds %struct.hv, %struct.hv* %105, i32 0, i32 0
  %106 = load %struct.xpvhv*, %struct.xpvhv** %sv_any125, align 8
  %xhv_max126 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %106, i32 0, i32 3
  %107 = load i64, i64* %xhv_max126, align 8
  %add127 = add i64 %107, 1
  %arrayidx128 = getelementptr inbounds %struct.he*, %struct.he** %104, i64 %add127
  %108 = bitcast %struct.he** %arrayidx128 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %108, i32 0, i32 4
  %109 = load i32, i32* %xhv_name_count, align 4
  %tobool129 = icmp ne i32 %109, 0
  br i1 %tobool129, label %cond.true130, label %cond.false138

cond.true130:                                     ; preds = %cond.true122
  %110 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u131 = getelementptr inbounds %struct.hv, %struct.hv* %110, i32 0, i32 3
  %svu_hash132 = bitcast %union.anon.5* %sv_u131 to %struct.he***
  %111 = load %struct.he**, %struct.he*** %svu_hash132, align 8
  %112 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any133 = getelementptr inbounds %struct.hv, %struct.hv* %112, i32 0, i32 0
  %113 = load %struct.xpvhv*, %struct.xpvhv** %sv_any133, align 8
  %xhv_max134 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %113, i32 0, i32 3
  %114 = load i64, i64* %xhv_max134, align 8
  %add135 = add i64 %114, 1
  %arrayidx136 = getelementptr inbounds %struct.he*, %struct.he** %111, i64 %add135
  %115 = bitcast %struct.he** %arrayidx136 to %struct.xpvhv_aux*
  %xhv_name_u137 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %115, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u137 to %struct.hek***
  %116 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %117 = load %struct.hek*, %struct.hek** %116, align 8
  br label %cond.end147

cond.false138:                                    ; preds = %cond.true122
  %118 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u139 = getelementptr inbounds %struct.hv, %struct.hv* %118, i32 0, i32 3
  %svu_hash140 = bitcast %union.anon.5* %sv_u139 to %struct.he***
  %119 = load %struct.he**, %struct.he*** %svu_hash140, align 8
  %120 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any141 = getelementptr inbounds %struct.hv, %struct.hv* %120, i32 0, i32 0
  %121 = load %struct.xpvhv*, %struct.xpvhv** %sv_any141, align 8
  %xhv_max142 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %121, i32 0, i32 3
  %122 = load i64, i64* %xhv_max142, align 8
  %add143 = add i64 %122, 1
  %arrayidx144 = getelementptr inbounds %struct.he*, %struct.he** %119, i64 %add143
  %123 = bitcast %struct.he** %arrayidx144 to %struct.xpvhv_aux*
  %xhv_name_u145 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %123, i32 0, i32 0
  %xhvnameu_name146 = bitcast %union._xhvnameu* %xhv_name_u145 to %struct.hek**
  %124 = load %struct.hek*, %struct.hek** %xhvnameu_name146, align 8
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false138, %cond.true130
  %cond148 = phi %struct.hek* [ %117, %cond.true130 ], [ %124, %cond.false138 ]
  br label %cond.end150

cond.false149:                                    ; preds = %land.lhs.true117, %cond.true113
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false149, %cond.end147
  %cond151 = phi %struct.hek* [ %cond148, %cond.end147 ], [ null, %cond.false149 ]
  br label %cond.end153

cond.false152:                                    ; preds = %if.then110
  br label %cond.end153

cond.end153:                                      ; preds = %cond.false152, %cond.end150
  %cond154 = phi %struct.hek* [ %cond151, %cond.end150 ], [ null, %cond.false152 ]
  store %struct.hek* %cond154, %struct.hek** %hek, align 8
  %125 = load %struct.hek*, %struct.hek** %hek, align 8
  %tobool155 = icmp ne %struct.hek* %125, null
  br i1 %tobool155, label %cond.true156, label %cond.false158

cond.true156:                                     ; preds = %cond.end153
  %126 = load %struct.hek*, %struct.hek** %hek, align 8
  %call157 = call %struct.sv* @Perl_newSVhek(%struct.hek* %126)
  br label %cond.end160

cond.false158:                                    ; preds = %cond.end153
  %call159 = call %struct.sv* @Perl_newSVpvn(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21, i64 0, i64 0), i64 8)
  br label %cond.end160

cond.end160:                                      ; preds = %cond.false158, %cond.true156
  %cond161 = phi %struct.sv* [ %call157, %cond.true156 ], [ %call159, %cond.false158 ]
  store %struct.sv* %cond161, %struct.sv** %sv, align 8
  br label %if.end162

if.end162:                                        ; preds = %cond.end160, %land.lhs.true107, %sw.bb104
  br label %sw.epilog

sw.bb163:                                         ; preds = %if.then
  %127 = load i64, i64* %len, align 8
  %cmp164 = icmp eq i64 %127, 6
  br i1 %cmp164, label %land.lhs.true166, label %if.end187

land.lhs.true166:                                 ; preds = %sw.bb163
  %128 = load i8*, i8** %second_letter, align 8
  %call167 = call i32 @strcmp(i8* %128, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0)) #7
  %tobool168 = icmp ne i32 %call167, 0
  br i1 %tobool168, label %if.end187, label %if.then169

if.then169:                                       ; preds = %land.lhs.true166
  %129 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u170 = getelementptr inbounds %struct.gv, %struct.gv* %129, i32 0, i32 3
  %svu_gp171 = bitcast %union.anon.4* %sv_u170 to %struct.gp**
  %130 = load %struct.gp*, %struct.gp** %svu_gp171, align 8
  %add.ptr172 = getelementptr inbounds %struct.gp, %struct.gp* %130, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr172, i32 0, i32 0
  %131 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool173 = icmp ne %struct.sv* %131, null
  br i1 %tobool173, label %cond.true174, label %cond.false179

cond.true174:                                     ; preds = %if.then169
  %132 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u175 = getelementptr inbounds %struct.gv, %struct.gv* %132, i32 0, i32 3
  %svu_gp176 = bitcast %union.anon.4* %sv_u175 to %struct.gp**
  %133 = load %struct.gp*, %struct.gp** %svu_gp176, align 8
  %add.ptr177 = getelementptr inbounds %struct.gp, %struct.gp* %133, i64 0
  %gp_sv178 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr177, i32 0, i32 0
  br label %cond.end185

cond.false179:                                    ; preds = %if.then169
  %134 = load %struct.gv*, %struct.gv** %gv, align 8
  %call180 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %134, i32 0)
  %sv_u181 = getelementptr inbounds %struct.gv, %struct.gv* %call180, i32 0, i32 3
  %svu_gp182 = bitcast %union.anon.4* %sv_u181 to %struct.gp**
  %135 = load %struct.gp*, %struct.gp** %svu_gp182, align 8
  %add.ptr183 = getelementptr inbounds %struct.gp, %struct.gp* %135, i64 0
  %gp_sv184 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr183, i32 0, i32 0
  br label %cond.end185

cond.end185:                                      ; preds = %cond.false179, %cond.true174
  %cond186 = phi %struct.sv** [ %gp_sv178, %cond.true174 ], [ %gp_sv184, %cond.false179 ]
  %136 = load %struct.sv*, %struct.sv** %cond186, align 8
  store %struct.sv* %136, %struct.sv** %tmpRef, align 8
  br label %if.end187

if.end187:                                        ; preds = %cond.end185, %land.lhs.true166, %sw.bb163
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then, %if.end187, %if.end162, %if.end103, %if.end93, %if.end78, %if.end67, %if.end59, %if.end38, %if.end19
  br label %if.end188

if.end188:                                        ; preds = %sw.epilog, %cond.end
  %137 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %tobool189 = icmp ne %struct.sv* %137, null
  br i1 %tobool189, label %if.then190, label %if.end192

if.then190:                                       ; preds = %if.end188
  %138 = load %struct.sv*, %struct.sv** %tmpRef, align 8
  %call191 = call %struct.sv* @Perl_newRV(%struct.sv* %138)
  store %struct.sv* %call191, %struct.sv** %sv, align 8
  br label %if.end192

if.end192:                                        ; preds = %if.then190, %if.end188
  %139 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool193 = icmp ne %struct.sv* %139, null
  br i1 %tobool193, label %if.then194, label %if.else196

if.then194:                                       ; preds = %if.end192
  %140 = load %struct.sv*, %struct.sv** %sv, align 8
  %call195 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %140)
  br label %if.end197

if.else196:                                       ; preds = %if.end192
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv, align 8
  br label %if.end197

if.end197:                                        ; preds = %if.else196, %if.then194
  %141 = load %struct.sv*, %struct.sv** %sv, align 8
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %141, %struct.sv** %142, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %143, %struct.sv*** @PL_stack_sp, align 8
  %144 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %144, i32 0, i32 0
  %145 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %145
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local void @Perl_av_reify(%struct.av*) #1

declare dso_local void @Perl_ck_warner_d(i32, i8*, ...) #1

declare dso_local %struct.sv* @Perl_newSVhek(%struct.hek*) #1

declare dso_local %struct.sv* @Perl_newSVpvn(i8*, i64) #1

declare dso_local %struct.sv* @Perl_newRV(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_study() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %7, i32 0, i32 2
  %8 = load i64, i64* %xpv_cur, align 8
  store i64 %8, i64* %len, align 8
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %10 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %11, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %10, %cond.true ], [ %call, %cond.false ]
  %12 = load i64, i64* %len, align 8
  %cmp1 = icmp eq i64 %12, 0
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %13 = load i64, i64* %len, align 8
  %cmp2 = icmp ugt i64 %13, 2147483647
  br i1 %cmp2, label %if.then, label %lor.lhs.false3

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %15, 1024
  %tobool = icmp ne i32 %and5, 0
  br i1 %tobool, label %lor.lhs.false6, label %if.then

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %17, 536870912
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false6
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %19, 1073741824
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false10
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %21, 49152
  %cmp16 = icmp eq i32 %and15, 49152
  br i1 %cmp16, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false6, %lor.lhs.false3, %lor.lhs.false, %cond.end
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %22, align 8
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 0
  %24 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %24, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false10
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %25, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next17 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next17, align 8
  store %struct.op* %27, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %28 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_trans() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %pv = alloca i8*, align 8
  %newsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %sv, align 8
  br label %if.end21

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then2, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then2, label %if.end

if.then2:                                         ; preds = %cond.false, %cond.true
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %7, %struct.sv** %8, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then2, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 3
  %11 = load i64, i64* %op_targ, align 8
  %tobool3 = icmp ne i64 %11, 0
  br i1 %tobool3, label %if.then4, label %if.else6

if.then4:                                         ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ5 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 3
  %14 = load i64, i64* %op_targ5, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 %14
  %15 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %15, %struct.sv** %sv, align 8
  br label %if.end20

if.else6:                                         ; preds = %do.end
  %16 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %16, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %17 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %17, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %18 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %tobool7 = icmp ne %struct.sv* %18, null
  br i1 %tobool7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %if.else6
  %19 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u9 = getelementptr inbounds %struct.gv, %struct.gv* %19, i32 0, i32 3
  %svu_gp10 = bitcast %union.anon.4* %sv_u9 to %struct.gp**
  %20 = load %struct.gp*, %struct.gp** %svu_gp10, align 8
  %add.ptr11 = getelementptr inbounds %struct.gp, %struct.gp* %20, i64 0
  %gp_sv12 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr11, i32 0, i32 0
  br label %cond.end

cond.false13:                                     ; preds = %if.else6
  %21 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %call14 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %21, i32 0)
  %sv_u15 = getelementptr inbounds %struct.gv, %struct.gv* %call14, i32 0, i32 3
  %svu_gp16 = bitcast %union.anon.4* %sv_u15 to %struct.gp**
  %22 = load %struct.gp*, %struct.gp** %svu_gp16, align 8
  %add.ptr17 = getelementptr inbounds %struct.gp, %struct.gp* %22, i64 0
  %gp_sv18 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr17, i32 0, i32 0
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi %struct.sv** [ %gp_sv12, %cond.true8 ], [ %gp_sv18, %cond.false13 ]
  %23 = load %struct.sv*, %struct.sv** %cond, align 8
  %add.ptr19 = getelementptr inbounds %struct.sv, %struct.sv* %23, i64 0
  store %struct.sv* %add.ptr19, %struct.sv** %sv, align 8
  br label %if.end20

if.end20:                                         ; preds = %cond.end, %if.then4
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp22 = icmp eq i32 %bf.cast, 36
  br i1 %cmp22, label %if.then24, label %if.else39

if.then24:                                        ; preds = %if.end21
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags, align 4
  %and25 = and i32 %26, 2098176
  %cmp26 = icmp eq i32 %and25, 1024
  br i1 %cmp26, label %cond.true28, label %cond.false30

cond.true28:                                      ; preds = %if.then24
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 0
  %28 = load i8*, i8** %sv_any, align 8
  %29 = bitcast i8* %28 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %29, i32 0, i32 2
  %30 = load i64, i64* %xpv_cur, align 8
  store i64 %30, i64* %len, align 8
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u29 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u29 to i8**
  %32 = load i8*, i8** %svu_pv, align 8
  br label %cond.end32

cond.false30:                                     ; preds = %if.then24
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %call31 = call i8* @Perl_sv_2pv_flags(%struct.sv* %33, i64* %len, i32 2)
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false30, %cond.true28
  %cond33 = phi i8* [ %32, %cond.true28 ], [ %call31, %cond.false30 ]
  store i8* %cond33, i8** %pv, align 8
  %34 = load i8*, i8** %pv, align 8
  %35 = load i64, i64* %len, align 8
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %37, 536870912
  %or = or i32 524288, %and35
  %call36 = call %struct.sv* @Perl_newSVpvn_flags(i8* %34, i64 %35, i32 %or)
  store %struct.sv* %call36, %struct.sv** %newsv, align 8
  %38 = load %struct.sv*, %struct.sv** %newsv, align 8
  %call37 = call i32 @Perl_do_trans(%struct.sv* %38)
  %39 = load %struct.sv*, %struct.sv** %newsv, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr38 = getelementptr inbounds %struct.sv*, %struct.sv** %40, i32 1
  store %struct.sv** %incdec.ptr38, %struct.sv*** %sp, align 8
  store %struct.sv* %39, %struct.sv** %incdec.ptr38, align 8
  br label %if.end44

if.else39:                                        ; preds = %if.end21
  %call40 = call %struct.sv* @Perl_sv_newmortal()
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i32 1
  store %struct.sv** %incdec.ptr41, %struct.sv*** %sp, align 8
  store %struct.sv* %call40, %struct.sv** %incdec.ptr41, align 8
  %42 = load %struct.sv*, %struct.sv** %sv, align 8
  %call42 = call i32 @Perl_do_trans(%struct.sv* %42)
  %conv43 = sext i32 %call42 to i64
  call void @Perl_sv_setiv(%struct.sv* %call40, i64 %conv43)
  br label %if.end44

if.end44:                                         ; preds = %if.else39, %cond.end32
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %43, %struct.sv*** @PL_stack_sp, align 8
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  %45 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %45
}

declare dso_local i32 @Perl_do_trans(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_schop() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %chomping = alloca i8, align 1
  %count = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 42
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %chomping, align 1
  %6 = load %struct.sv*, %struct.sv** %targ, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %9 = load i8, i8* %chomping, align 1
  %tobool = trunc i8 %9 to i1
  %call = call i64 @S_do_chomp(%struct.sv* %6, %struct.sv* %8, i1 zeroext %tobool)
  store i64 %call, i64* %count, align 8
  %10 = load i8, i8* %chomping, align 1
  %tobool1 = trunc i8 %10 to i1
  br i1 %tobool1, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %11 = load %struct.sv*, %struct.sv** %targ, align 8
  %12 = load i64, i64* %count, align 8
  call void @Perl_sv_setiv(%struct.sv* %11, i64 %12)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %13 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and = and i32 %14, 4194304
  %tobool3 = icmp ne i32 %and, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body2
  br i1 true, label %if.then4, label %if.end6

cond.false:                                       ; preds = %do.body2
  br i1 false, label %if.then4, label %if.end6

if.then4:                                         ; preds = %cond.false, %cond.true
  %15 = load %struct.sv*, %struct.sv** %targ, align 8
  %call5 = call i32 @Perl_mg_set(%struct.sv* %15)
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end6
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %16, %struct.sv** %17, align 8
  br label %do.end7

do.end7:                                          ; preds = %do.end
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %19
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_do_chomp(%struct.sv* %retval1, %struct.sv* %sv, i1 zeroext %chomping) #0 {
entry:
  %retval = alloca i64, align 8
  %retval.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %chomping.addr = alloca i8, align 1
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %count = alloca i64, align 8
  %i = alloca i32, align 4
  %av = alloca %struct.av*, align 8
  %max = alloca i32, align 4
  %hv = alloca %struct.hv*, align 8
  %entry53 = alloca %struct.he*, align 8
  %temp_buffer = alloca i8*, align 8
  %svrecode = alloca %struct.sv*, align 8
  %rslen = alloca i64, align 8
  %rs_charlen = alloca i64, align 8
  %rsptr = alloca i8*, align 8
  %is_utf8 = alloca i8, align 1
  %send = alloca i8*, align 8
  %start = alloca i8*, align 8
  store %struct.sv* %retval1, %struct.sv** %retval.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %frombool = zext i1 %chomping to i8
  store i8 %frombool, i8* %chomping.addr, align 1
  store i64 0, i64* %count, align 8
  %0 = load i8, i8* %chomping.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 65280
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %lor.lhs.false9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %4, 255
  %cmp = icmp eq i32 %and4, 8
  br i1 %cmp, label %lor.lhs.false9, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %5 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %6, 16826623
  %cmp8 = icmp eq i32 %and7, 16777226
  br i1 %cmp8, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %lor.lhs.false5, %lor.lhs.false, %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %8, 2048
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.lhs.true13, label %if.end

land.lhs.true13:                                  ; preds = %lor.lhs.false9
  %9 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %10 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %11, 2097408
  %cmp16 = icmp eq i32 %and15, 256
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true13
  %12 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u17 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 3
  %svu_rv18 = bitcast %union.anon* %sv_u17 to %struct.sv**
  %13 = load %struct.sv*, %struct.sv** %svu_rv18, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true13
  %17 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u19 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 3
  %svu_rv20 = bitcast %union.anon* %sv_u19 to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %svu_rv20, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %16, %cond.true ], [ %call, %cond.false ]
  %cmp21 = icmp sgt i64 %cond, 0
  br i1 %cmp21, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end, %lor.lhs.false5
  store i64 0, i64* %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end, %lor.lhs.false9, %entry
  %19 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %20, 255
  %cmp24 = icmp eq i32 %and23, 11
  br i1 %cmp24, label %if.then25, label %if.else

if.then25:                                        ; preds = %if.end
  %21 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %22 = bitcast %struct.sv* %21 to i8*
  %23 = bitcast i8* %22 to %struct.av*
  store %struct.av* %23, %struct.av** %av, align 8
  %24 = load %struct.av*, %struct.av** %av, align 8
  %25 = bitcast %struct.av* %24 to %struct.sv*
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %26, 8388608
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false31

cond.true29:                                      ; preds = %if.then25
  %27 = load %struct.av*, %struct.av** %av, align 8
  %28 = bitcast %struct.av* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  %call30 = call i32 @Perl_mg_size(%struct.sv* %29)
  %conv = sext i32 %call30 to i64
  br label %cond.end33

cond.false31:                                     ; preds = %if.then25
  %30 = load %struct.av*, %struct.av** %av, align 8
  %sv_any32 = getelementptr inbounds %struct.av, %struct.av* %30, i32 0, i32 0
  %31 = load %struct.xpvav*, %struct.xpvav** %sv_any32, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %31, i32 0, i32 2
  %32 = load i64, i64* %xav_fill, align 8
  br label %cond.end33

cond.end33:                                       ; preds = %cond.false31, %cond.true29
  %cond34 = phi i64 [ %conv, %cond.true29 ], [ %32, %cond.false31 ]
  %conv35 = trunc i64 %cond34 to i32
  store i32 %conv35, i32* %max, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %cond.end33
  %33 = load i32, i32* %i, align 4
  %34 = load i32, i32* %max, align 4
  %cmp36 = icmp sle i32 %33, %34
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load %struct.av*, %struct.av** %av, align 8
  %36 = load i32, i32* %i, align 4
  %conv38 = sext i32 %36 to i64
  %call39 = call %struct.sv** @Perl_av_fetch(%struct.av* %35, i64 %conv38, i32 0)
  %37 = bitcast %struct.sv** %call39 to i8*
  %38 = bitcast i8* %37 to %struct.sv*
  store %struct.sv* %38, %struct.sv** %sv.addr, align 8
  %39 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %tobool40 = icmp ne %struct.sv* %39, null
  br i1 %tobool40, label %land.lhs.true41, label %if.end47

land.lhs.true41:                                  ; preds = %for.body
  %40 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %41 = bitcast %struct.sv* %40 to %struct.sv**
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  store %struct.sv* %42, %struct.sv** %sv.addr, align 8
  %43 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp42 = icmp ne %struct.sv* %43, @PL_sv_undef
  br i1 %cmp42, label %if.then44, label %if.end47

if.then44:                                        ; preds = %land.lhs.true41
  %44 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  %45 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %46 = load i8, i8* %chomping.addr, align 1
  %tobool45 = trunc i8 %46 to i1
  %call46 = call i64 @S_do_chomp(%struct.sv* %44, %struct.sv* %45, i1 zeroext %tobool45)
  %47 = load i64, i64* %count, align 8
  %add = add i64 %47, %call46
  store i64 %add, i64* %count, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then44, %land.lhs.true41, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end47
  %48 = load i32, i32* %i, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %49 = load i64, i64* %count, align 8
  store i64 %49, i64* %retval, align 8
  br label %return

if.else:                                          ; preds = %if.end
  %50 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %51, 255
  %cmp50 = icmp eq i32 %and49, 12
  br i1 %cmp50, label %if.then52, label %if.else61

if.then52:                                        ; preds = %if.else
  %52 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %53 = bitcast %struct.sv* %52 to i8*
  %54 = bitcast i8* %53 to %struct.hv*
  store %struct.hv* %54, %struct.hv** %hv, align 8
  %55 = load %struct.hv*, %struct.hv** %hv, align 8
  %call54 = call i32 @Perl_hv_iterinit(%struct.hv* %55)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then52
  %56 = load %struct.hv*, %struct.hv** %hv, align 8
  %call55 = call %struct.he* @Perl_hv_iternext_flags(%struct.hv* %56, i32 0)
  store %struct.he* %call55, %struct.he** %entry53, align 8
  %tobool56 = icmp ne %struct.he* %call55, null
  br i1 %tobool56, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %57 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  %58 = load %struct.hv*, %struct.hv** %hv, align 8
  %59 = load %struct.he*, %struct.he** %entry53, align 8
  %call57 = call %struct.sv* @Perl_hv_iterval(%struct.hv* %58, %struct.he* %59)
  %60 = load i8, i8* %chomping.addr, align 1
  %tobool58 = trunc i8 %60 to i1
  %call59 = call i64 @S_do_chomp(%struct.sv* %57, %struct.sv* %call57, i1 zeroext %tobool58)
  %61 = load i64, i64* %count, align 8
  %add60 = add i64 %61, %call59
  store i64 %add60, i64* %count, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %62 = load i64, i64* %count, align 8
  store i64 %62, i64* %retval, align 8
  br label %return

if.else61:                                        ; preds = %if.else
  %63 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags62 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %64, 134283264
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.else61
  call void @Perl_croak_no_modify()
  br label %if.end66

if.end66:                                         ; preds = %if.then65, %if.else61
  br label %if.end67

if.end67:                                         ; preds = %if.end66
  br label %if.end68

if.end68:                                         ; preds = %if.end67
  %65 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool69 = icmp ne %struct.sv* %65, null
  br i1 %tobool69, label %cond.true76, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %if.end68
  %66 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool71 = icmp ne %struct.sv* %66, null
  br i1 %tobool71, label %land.lhs.true72, label %cond.false77

land.lhs.true72:                                  ; preds = %lor.lhs.false70
  %call73 = call %struct.sv* @Perl__get_encoding()
  %cmp74 = icmp ne %struct.sv* %call73, null
  br i1 %cmp74, label %cond.true76, label %cond.false77

cond.true76:                                      ; preds = %land.lhs.true72, %if.end68
  br i1 true, label %if.then78, label %if.end86

cond.false77:                                     ; preds = %land.lhs.true72, %lor.lhs.false70
  br i1 false, label %if.then78, label %if.end86

if.then78:                                        ; preds = %cond.false77, %cond.true76
  %67 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %68, 536870912
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %if.end85, label %if.then82

if.then82:                                        ; preds = %if.then78
  %69 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call83 = call %struct.sv* @Perl__get_encoding()
  %call84 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %69, %struct.sv* %call83)
  br label %if.end85

if.end85:                                         ; preds = %if.then82, %if.then78
  br label %if.end86

if.end86:                                         ; preds = %if.end85, %cond.false77, %cond.true76
  %70 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %71, 2098176
  %cmp89 = icmp eq i32 %and88, 1024
  br i1 %cmp89, label %cond.true91, label %cond.false94

cond.true91:                                      ; preds = %if.end86
  %72 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any92 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any92, align 8
  %74 = bitcast i8* %73 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %74, i32 0, i32 2
  %75 = load i64, i64* %xpv_cur, align 8
  store i64 %75, i64* %len, align 8
  %76 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u93 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u93 to i8**
  %77 = load i8*, i8** %svu_pv, align 8
  br label %cond.end96

cond.false94:                                     ; preds = %if.end86
  %78 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call95 = call i8* @Perl_sv_2pv_flags(%struct.sv* %78, i64* %len, i32 2)
  br label %cond.end96

cond.end96:                                       ; preds = %cond.false94, %cond.true91
  %cond97 = phi i8* [ %77, %cond.true91 ], [ %call95, %cond.false94 ]
  store i8* %cond97, i8** %s, align 8
  %79 = load i8, i8* %chomping.addr, align 1
  %tobool98 = trunc i8 %79 to i1
  br i1 %tobool98, label %if.then99, label %if.else256

if.then99:                                        ; preds = %cond.end96
  store i8* null, i8** %temp_buffer, align 8
  store %struct.sv* null, %struct.sv** %svrecode, align 8
  %80 = load i8*, i8** %s, align 8
  %tobool100 = icmp ne i8* %80, null
  br i1 %tobool100, label %land.lhs.true101, label %if.end255

land.lhs.true101:                                 ; preds = %if.then99
  %81 = load i64, i64* %len, align 8
  %tobool102 = icmp ne i64 %81, 0
  br i1 %tobool102, label %if.then103, label %if.end255

if.then103:                                       ; preds = %land.lhs.true101
  %82 = load i64, i64* %len, align 8
  %dec = add i64 %82, -1
  store i64 %dec, i64* %len, align 8
  %83 = load i8*, i8** %s, align 8
  %add.ptr = getelementptr inbounds i8, i8* %83, i64 %dec
  store i8* %add.ptr, i8** %s, align 8
  %84 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %85, 1024
  %tobool106 = icmp ne i32 %and105, 0
  br i1 %tobool106, label %land.lhs.true107, label %if.else127

land.lhs.true107:                                 ; preds = %if.then103
  %86 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any108 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any108, align 8
  %88 = bitcast i8* %87 to %struct.xpv*
  %xpv_cur109 = getelementptr inbounds %struct.xpv, %struct.xpv* %88, i32 0, i32 2
  %89 = load i64, i64* %xpv_cur109, align 8
  %tobool110 = icmp ne i64 %89, 0
  br i1 %tobool110, label %if.else127, label %if.then111

if.then111:                                       ; preds = %land.lhs.true107
  %90 = load i8*, i8** %s, align 8
  %91 = load i8, i8* %90, align 1
  %conv112 = sext i8 %91 to i32
  %cmp113 = icmp ne i32 %conv112, 10
  br i1 %cmp113, label %if.then115, label %if.end116

if.then115:                                       ; preds = %if.then111
  br label %nope

if.end116:                                        ; preds = %if.then111
  %92 = load i64, i64* %count, align 8
  %inc117 = add i64 %92, 1
  store i64 %inc117, i64* %count, align 8
  br label %while.cond118

while.cond118:                                    ; preds = %while.body123, %if.end116
  %93 = load i64, i64* %len, align 8
  %tobool119 = icmp ne i64 %93, 0
  br i1 %tobool119, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond118
  %94 = load i8*, i8** %s, align 8
  %arrayidx = getelementptr inbounds i8, i8* %94, i64 -1
  %95 = load i8, i8* %arrayidx, align 1
  %conv120 = sext i8 %95 to i32
  %cmp121 = icmp eq i32 %conv120, 10
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond118
  %96 = phi i1 [ false, %while.cond118 ], [ %cmp121, %land.rhs ]
  br i1 %96, label %while.body123, label %while.end126

while.body123:                                    ; preds = %land.end
  %97 = load i64, i64* %len, align 8
  %dec124 = add i64 %97, -1
  store i64 %dec124, i64* %len, align 8
  %98 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %98, i32 -1
  store i8* %incdec.ptr, i8** %s, align 8
  %99 = load i64, i64* %count, align 8
  %inc125 = add i64 %99, 1
  store i64 %inc125, i64* %count, align 8
  br label %while.cond118

while.end126:                                     ; preds = %land.end
  br label %if.end224

if.else127:                                       ; preds = %land.lhs.true107, %if.then103
  %100 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags128 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags128, align 4
  %and129 = and i32 %101, 2098176
  %cmp130 = icmp eq i32 %and129, 1024
  br i1 %cmp130, label %cond.true132, label %cond.false138

cond.true132:                                     ; preds = %if.else127
  %102 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_any133 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 0
  %103 = load i8*, i8** %sv_any133, align 8
  %104 = bitcast i8* %103 to %struct.xpv*
  %xpv_cur134 = getelementptr inbounds %struct.xpv, %struct.xpv* %104, i32 0, i32 2
  %105 = load i64, i64* %xpv_cur134, align 8
  store i64 %105, i64* %rslen, align 8
  %106 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_u135 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 3
  %svu_pv136 = bitcast %union.anon* %sv_u135 to i8**
  %107 = load i8*, i8** %svu_pv136, align 8
  %add.ptr137 = getelementptr inbounds i8, i8* %107, i64 0
  br label %cond.end140

cond.false138:                                    ; preds = %if.else127
  %108 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call139 = call i8* @Perl_sv_2pv_flags(%struct.sv* %108, i64* %rslen, i32 34)
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false138, %cond.true132
  %cond141 = phi i8* [ %add.ptr137, %cond.true132 ], [ %call139, %cond.false138 ]
  store i8* %cond141, i8** %rsptr, align 8
  %109 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags142 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags142, align 4
  %and143 = and i32 %110, 536870912
  %tobool144 = icmp ne i32 %and143, 0
  br i1 %tobool144, label %cond.true145, label %cond.false147

cond.true145:                                     ; preds = %cond.end140
  %111 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %call146 = call i64 @Perl_sv_len_utf8(%struct.sv* %111)
  br label %cond.end148

cond.false147:                                    ; preds = %cond.end140
  %112 = load i64, i64* %rslen, align 8
  br label %cond.end148

cond.end148:                                      ; preds = %cond.false147, %cond.true145
  %cond149 = phi i64 [ %call146, %cond.true145 ], [ %112, %cond.false147 ]
  store i64 %cond149, i64* %rs_charlen, align 8
  %113 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags150 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags150, align 4
  %and151 = and i32 %114, 536870912
  %115 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags152 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %116, 536870912
  %cmp154 = icmp ne i32 %and151, %and153
  br i1 %cmp154, label %if.then156, label %if.end198

if.then156:                                       ; preds = %cond.end148
  %117 = load %struct.sv*, %struct.sv** @PL_rs, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %118, 536870912
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %if.then160, label %if.else165

if.then160:                                       ; preds = %if.then156
  store i8 1, i8* %is_utf8, align 1
  %119 = load i8*, i8** %rsptr, align 8
  %call161 = call i8* @Perl_bytes_from_utf8(i8* %119, i64* %rslen, i8* %is_utf8)
  store i8* %call161, i8** %temp_buffer, align 8
  %120 = load i8, i8* %is_utf8, align 1
  %tobool162 = trunc i8 %120 to i1
  br i1 %tobool162, label %if.then163, label %if.end164

if.then163:                                       ; preds = %if.then160
  store i8* null, i8** %temp_buffer, align 8
  br label %nope

if.end164:                                        ; preds = %if.then160
  %121 = load i8*, i8** %temp_buffer, align 8
  store i8* %121, i8** %rsptr, align 8
  br label %if.end197

if.else165:                                       ; preds = %if.then156
  %122 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool166 = icmp ne %struct.sv* %122, null
  br i1 %tobool166, label %cond.true173, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %if.else165
  %123 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool168 = icmp ne %struct.sv* %123, null
  br i1 %tobool168, label %land.lhs.true169, label %cond.false174

land.lhs.true169:                                 ; preds = %lor.lhs.false167
  %call170 = call %struct.sv* @Perl__get_encoding()
  %cmp171 = icmp ne %struct.sv* %call170, null
  br i1 %cmp171, label %cond.true173, label %cond.false174

cond.true173:                                     ; preds = %land.lhs.true169, %if.else165
  br i1 true, label %if.then175, label %if.else194

cond.false174:                                    ; preds = %land.lhs.true169, %lor.lhs.false167
  br i1 false, label %if.then175, label %if.else194

if.then175:                                       ; preds = %cond.false174, %cond.true173
  %124 = load i8*, i8** %rsptr, align 8
  %125 = load i64, i64* %rslen, align 8
  %call176 = call %struct.sv* @Perl_newSVpvn(i8* %124, i64 %125)
  store %struct.sv* %call176, %struct.sv** %svrecode, align 8
  %126 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call177 = call %struct.sv* @Perl__get_encoding()
  %call178 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %126, %struct.sv* %call177)
  %127 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_flags179 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags179, align 4
  %and180 = and i32 %128, 2098176
  %cmp181 = icmp eq i32 %and180, 1024
  br i1 %cmp181, label %cond.true183, label %cond.false189

cond.true183:                                     ; preds = %if.then175
  %129 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_any184 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 0
  %130 = load i8*, i8** %sv_any184, align 8
  %131 = bitcast i8* %130 to %struct.xpv*
  %xpv_cur185 = getelementptr inbounds %struct.xpv, %struct.xpv* %131, i32 0, i32 2
  %132 = load i64, i64* %xpv_cur185, align 8
  store i64 %132, i64* %rslen, align 8
  %133 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %sv_u186 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 3
  %svu_pv187 = bitcast %union.anon* %sv_u186 to i8**
  %134 = load i8*, i8** %svu_pv187, align 8
  %add.ptr188 = getelementptr inbounds i8, i8* %134, i64 0
  br label %cond.end191

cond.false189:                                    ; preds = %if.then175
  %135 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call190 = call i8* @Perl_sv_2pv_flags(%struct.sv* %135, i64* %rslen, i32 34)
  br label %cond.end191

cond.end191:                                      ; preds = %cond.false189, %cond.true183
  %cond192 = phi i8* [ %add.ptr188, %cond.true183 ], [ %call190, %cond.false189 ]
  store i8* %cond192, i8** %rsptr, align 8
  %136 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %call193 = call i64 @Perl_sv_len_utf8(%struct.sv* %136)
  store i64 %call193, i64* %rs_charlen, align 8
  br label %if.end196

if.else194:                                       ; preds = %cond.false174, %cond.true173
  %137 = load i8*, i8** %rsptr, align 8
  %call195 = call i8* @Perl_bytes_to_utf8(i8* %137, i64* %rslen)
  store i8* %call195, i8** %temp_buffer, align 8
  %138 = load i8*, i8** %temp_buffer, align 8
  store i8* %138, i8** %rsptr, align 8
  br label %if.end196

if.end196:                                        ; preds = %if.else194, %cond.end191
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.end164
  br label %if.end198

if.end198:                                        ; preds = %if.end197, %cond.end148
  %139 = load i64, i64* %rslen, align 8
  %cmp199 = icmp eq i64 %139, 1
  br i1 %cmp199, label %if.then201, label %if.else209

if.then201:                                       ; preds = %if.end198
  %140 = load i8*, i8** %s, align 8
  %141 = load i8, i8* %140, align 1
  %conv202 = sext i8 %141 to i32
  %142 = load i8*, i8** %rsptr, align 8
  %143 = load i8, i8* %142, align 1
  %conv203 = sext i8 %143 to i32
  %cmp204 = icmp ne i32 %conv202, %conv203
  br i1 %cmp204, label %if.then206, label %if.end207

if.then206:                                       ; preds = %if.then201
  br label %nope

if.end207:                                        ; preds = %if.then201
  %144 = load i64, i64* %count, align 8
  %inc208 = add i64 %144, 1
  store i64 %inc208, i64* %count, align 8
  br label %if.end223

if.else209:                                       ; preds = %if.end198
  %145 = load i64, i64* %len, align 8
  %146 = load i64, i64* %rslen, align 8
  %sub = sub i64 %146, 1
  %cmp210 = icmp ult i64 %145, %sub
  br i1 %cmp210, label %if.then212, label %if.end213

if.then212:                                       ; preds = %if.else209
  br label %nope

if.end213:                                        ; preds = %if.else209
  %147 = load i64, i64* %rslen, align 8
  %sub214 = sub i64 %147, 1
  %148 = load i64, i64* %len, align 8
  %sub215 = sub i64 %148, %sub214
  store i64 %sub215, i64* %len, align 8
  %149 = load i64, i64* %rslen, align 8
  %sub216 = sub i64 %149, 1
  %150 = load i8*, i8** %s, align 8
  %idx.neg = sub i64 0, %sub216
  %add.ptr217 = getelementptr inbounds i8, i8* %150, i64 %idx.neg
  store i8* %add.ptr217, i8** %s, align 8
  %151 = load i8*, i8** %s, align 8
  %152 = load i8*, i8** %rsptr, align 8
  %153 = load i64, i64* %rslen, align 8
  %call218 = call i32 @memcmp(i8* %151, i8* %152, i64 %153) #7
  %tobool219 = icmp ne i32 %call218, 0
  br i1 %tobool219, label %if.then220, label %if.end221

if.then220:                                       ; preds = %if.end213
  br label %nope

if.end221:                                        ; preds = %if.end213
  %154 = load i64, i64* %rs_charlen, align 8
  %155 = load i64, i64* %count, align 8
  %add222 = add i64 %155, %154
  store i64 %add222, i64* %count, align 8
  br label %if.end223

if.end223:                                        ; preds = %if.end221, %if.end207
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %while.end126
  %156 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags225 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 2
  %157 = load i32, i32* %sv_flags225, align 4
  %and226 = and i32 %157, 430018304
  %cmp227 = icmp eq i32 %and226, 1024
  br i1 %cmp227, label %cond.true229, label %cond.false232

cond.true229:                                     ; preds = %if.end224
  %158 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u230 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 3
  %svu_pv231 = bitcast %union.anon* %sv_u230 to i8**
  %159 = load i8*, i8** %svu_pv231, align 8
  br label %cond.end234

cond.false232:                                    ; preds = %if.end224
  %160 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call233 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %160, i64* null, i32 0)
  br label %cond.end234

cond.end234:                                      ; preds = %cond.false232, %cond.true229
  %cond235 = phi i8* [ %159, %cond.true229 ], [ %call233, %cond.false232 ]
  br label %do.body

do.body:                                          ; preds = %cond.end234
  %161 = load i64, i64* %len, align 8
  %162 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any236 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 0
  %163 = load i8*, i8** %sv_any236, align 8
  %164 = bitcast i8* %163 to %struct.xpv*
  %xpv_cur237 = getelementptr inbounds %struct.xpv, %struct.xpv* %164, i32 0, i32 2
  store i64 %161, i64* %xpv_cur237, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %165 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u238 = getelementptr inbounds %struct.sv, %struct.sv* %165, i32 0, i32 3
  %svu_pv239 = bitcast %union.anon* %sv_u238 to i8**
  %166 = load i8*, i8** %svu_pv239, align 8
  %167 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any240 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 0
  %168 = load i8*, i8** %sv_any240, align 8
  %169 = bitcast i8* %168 to %struct.xpv*
  %xpv_cur241 = getelementptr inbounds %struct.xpv, %struct.xpv* %169, i32 0, i32 2
  %170 = load i64, i64* %xpv_cur241, align 8
  %add.ptr242 = getelementptr inbounds i8, i8* %166, i64 %170
  store i8 0, i8* %add.ptr242, align 1
  %171 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags243 = getelementptr inbounds %struct.sv, %struct.sv* %171, i32 0, i32 2
  %172 = load i32, i32* %sv_flags243, align 4
  %and244 = and i32 %172, 2147470591
  store i32 %and244, i32* %sv_flags243, align 4
  br label %do.body245

do.body245:                                       ; preds = %do.end
  %173 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 2
  %174 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %174, 4194304
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %cond.true249, label %cond.false250

cond.true249:                                     ; preds = %do.body245
  br i1 true, label %if.then251, label %if.end253

cond.false250:                                    ; preds = %do.body245
  br i1 false, label %if.then251, label %if.end253

if.then251:                                       ; preds = %cond.false250, %cond.true249
  %175 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call252 = call i32 @Perl_mg_set(%struct.sv* %175)
  br label %if.end253

if.end253:                                        ; preds = %if.then251, %cond.false250, %cond.true249
  br label %do.end254

do.end254:                                        ; preds = %if.end253
  br label %if.end255

if.end255:                                        ; preds = %do.end254, %land.lhs.true101, %if.then99
  br label %nope

nope:                                             ; preds = %if.end255, %if.then220, %if.then212, %if.then206, %if.then163, %if.then115
  %176 = load %struct.sv*, %struct.sv** %svrecode, align 8
  %177 = bitcast %struct.sv* %176 to i8*
  %178 = bitcast i8* %177 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %178)
  %179 = load i8*, i8** %temp_buffer, align 8
  call void @Perl_safesysfree(i8* %179)
  br label %if.end353

if.else256:                                       ; preds = %cond.end96
  %180 = load i64, i64* %len, align 8
  %tobool257 = icmp ne i64 %180, 0
  br i1 %tobool257, label %land.lhs.true258, label %if.end280

land.lhs.true258:                                 ; preds = %if.else256
  %181 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags259 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags259, align 4
  %and260 = and i32 %182, 1024
  %tobool261 = icmp ne i32 %and260, 0
  br i1 %tobool261, label %lor.lhs.false262, label %if.then266

lor.lhs.false262:                                 ; preds = %land.lhs.true258
  %183 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags263 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags263, align 4
  %and264 = and i32 %184, 268435456
  %tobool265 = icmp ne i32 %and264, 0
  br i1 %tobool265, label %if.then266, label %if.end280

if.then266:                                       ; preds = %lor.lhs.false262, %land.lhs.true258
  %185 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %186, 430018304
  %cmp269 = icmp eq i32 %and268, 1024
  br i1 %cmp269, label %cond.true271, label %cond.false276

cond.true271:                                     ; preds = %if.then266
  %187 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any272 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any272, align 8
  %189 = bitcast i8* %188 to %struct.xpv*
  %xpv_cur273 = getelementptr inbounds %struct.xpv, %struct.xpv* %189, i32 0, i32 2
  %190 = load i64, i64* %xpv_cur273, align 8
  store i64 %190, i64* %len, align 8
  %191 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u274 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 3
  %svu_pv275 = bitcast %union.anon* %sv_u274 to i8**
  %192 = load i8*, i8** %svu_pv275, align 8
  br label %cond.end278

cond.false276:                                    ; preds = %if.then266
  %193 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call277 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %193, i64* %len, i32 0)
  br label %cond.end278

cond.end278:                                      ; preds = %cond.false276, %cond.true271
  %cond279 = phi i8* [ %192, %cond.true271 ], [ %call277, %cond.false276 ]
  store i8* %cond279, i8** %s, align 8
  br label %if.end280

if.end280:                                        ; preds = %cond.end278, %lor.lhs.false262, %if.else256
  %194 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags281 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 2
  %195 = load i32, i32* %sv_flags281, align 4
  %and282 = and i32 %195, 536870912
  %tobool283 = icmp ne i32 %and282, 0
  br i1 %tobool283, label %land.lhs.true284, label %if.else325

land.lhs.true284:                                 ; preds = %if.end280
  %196 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %196, i32 0, i32 10
  %197 = load i32, i32* %cop_hints, align 8
  %add285 = add i32 %197, 0
  %and286 = and i32 %add285, 8
  %tobool287 = icmp ne i32 %and286, 0
  br i1 %tobool287, label %if.else325, label %if.then288

if.then288:                                       ; preds = %land.lhs.true284
  %198 = load i8*, i8** %s, align 8
  %tobool289 = icmp ne i8* %198, null
  br i1 %tobool289, label %land.lhs.true290, label %if.else323

land.lhs.true290:                                 ; preds = %if.then288
  %199 = load i64, i64* %len, align 8
  %tobool291 = icmp ne i64 %199, 0
  br i1 %tobool291, label %if.then292, label %if.else323

if.then292:                                       ; preds = %land.lhs.true290
  %200 = load i8*, i8** %s, align 8
  %201 = load i64, i64* %len, align 8
  %add.ptr293 = getelementptr inbounds i8, i8* %200, i64 %201
  store i8* %add.ptr293, i8** %send, align 8
  %202 = load i8*, i8** %s, align 8
  store i8* %202, i8** %start, align 8
  %203 = load i8*, i8** %send, align 8
  %add.ptr294 = getelementptr inbounds i8, i8* %203, i64 -1
  store i8* %add.ptr294, i8** %s, align 8
  br label %while.cond295

while.cond295:                                    ; preds = %while.body304, %if.then292
  %204 = load i8*, i8** %s, align 8
  %205 = load i8*, i8** %start, align 8
  %cmp296 = icmp ugt i8* %204, %205
  br i1 %cmp296, label %land.rhs298, label %land.end303

land.rhs298:                                      ; preds = %while.cond295
  %206 = load i8*, i8** %s, align 8
  %207 = load i8, i8* %206, align 1
  %conv299 = zext i8 %207 to i32
  %and300 = and i32 %conv299, 192
  %cmp301 = icmp eq i32 %and300, 128
  br label %land.end303

land.end303:                                      ; preds = %land.rhs298, %while.cond295
  %208 = phi i1 [ false, %while.cond295 ], [ %cmp301, %land.rhs298 ]
  br i1 %208, label %while.body304, label %while.end306

while.body304:                                    ; preds = %land.end303
  %209 = load i8*, i8** %s, align 8
  %incdec.ptr305 = getelementptr inbounds i8, i8* %209, i32 -1
  store i8* %incdec.ptr305, i8** %s, align 8
  br label %while.cond295

while.end306:                                     ; preds = %land.end303
  %210 = load i8*, i8** %s, align 8
  %211 = load i8*, i8** %send, align 8
  %212 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %211 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %212 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call307 = call zeroext i1 @Perl_is_utf8_string(i8* %210, i64 %sub.ptr.sub)
  br i1 %call307, label %if.then308, label %if.end322

if.then308:                                       ; preds = %while.end306
  %213 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  %214 = load i8*, i8** %s, align 8
  %215 = load i8*, i8** %send, align 8
  %216 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast309 = ptrtoint i8* %215 to i64
  %sub.ptr.rhs.cast310 = ptrtoint i8* %216 to i64
  %sub.ptr.sub311 = sub i64 %sub.ptr.lhs.cast309, %sub.ptr.rhs.cast310
  call void @Perl_sv_setpvn(%struct.sv* %213, i8* %214, i64 %sub.ptr.sub311)
  %217 = load i8*, i8** %s, align 8
  store i8 0, i8* %217, align 1
  br label %do.body312

do.body312:                                       ; preds = %if.then308
  %218 = load i8*, i8** %s, align 8
  %219 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast313 = ptrtoint i8* %218 to i64
  %sub.ptr.rhs.cast314 = ptrtoint i8* %219 to i64
  %sub.ptr.sub315 = sub i64 %sub.ptr.lhs.cast313, %sub.ptr.rhs.cast314
  %220 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any316 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 0
  %221 = load i8*, i8** %sv_any316, align 8
  %222 = bitcast i8* %221 to %struct.xpv*
  %xpv_cur317 = getelementptr inbounds %struct.xpv, %struct.xpv* %222, i32 0, i32 2
  store i64 %sub.ptr.sub315, i64* %xpv_cur317, align 8
  br label %do.end318

do.end318:                                        ; preds = %do.body312
  %223 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags319 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 2
  %224 = load i32, i32* %sv_flags319, align 4
  %and320 = and i32 %224, 2147470591
  store i32 %and320, i32* %sv_flags319, align 4
  %225 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  %sv_flags321 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 2
  %226 = load i32, i32* %sv_flags321, align 4
  %or = or i32 %226, 536870912
  store i32 %or, i32* %sv_flags321, align 4
  br label %if.end322

if.end322:                                        ; preds = %do.end318, %while.end306
  br label %if.end324

if.else323:                                       ; preds = %land.lhs.true290, %if.then288
  %227 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %227, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i64 0)
  br label %if.end324

if.end324:                                        ; preds = %if.else323, %if.end322
  br label %if.end342

if.else325:                                       ; preds = %land.lhs.true284, %if.end280
  %228 = load i8*, i8** %s, align 8
  %tobool326 = icmp ne i8* %228, null
  br i1 %tobool326, label %land.lhs.true327, label %if.else340

land.lhs.true327:                                 ; preds = %if.else325
  %229 = load i64, i64* %len, align 8
  %tobool328 = icmp ne i64 %229, 0
  br i1 %tobool328, label %if.then329, label %if.else340

if.then329:                                       ; preds = %land.lhs.true327
  %230 = load i64, i64* %len, align 8
  %dec330 = add i64 %230, -1
  store i64 %dec330, i64* %len, align 8
  %231 = load i8*, i8** %s, align 8
  %add.ptr331 = getelementptr inbounds i8, i8* %231, i64 %dec330
  store i8* %add.ptr331, i8** %s, align 8
  %232 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  %233 = load i8*, i8** %s, align 8
  call void @Perl_sv_setpvn(%struct.sv* %232, i8* %233, i64 1)
  %234 = load i8*, i8** %s, align 8
  store i8 0, i8* %234, align 1
  br label %do.body332

do.body332:                                       ; preds = %if.then329
  %235 = load i64, i64* %len, align 8
  %236 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_any333 = getelementptr inbounds %struct.sv, %struct.sv* %236, i32 0, i32 0
  %237 = load i8*, i8** %sv_any333, align 8
  %238 = bitcast i8* %237 to %struct.xpv*
  %xpv_cur334 = getelementptr inbounds %struct.xpv, %struct.xpv* %238, i32 0, i32 2
  store i64 %235, i64* %xpv_cur334, align 8
  br label %do.end335

do.end335:                                        ; preds = %do.body332
  %239 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 2
  %240 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %240, -536870913
  store i32 %and337, i32* %sv_flags336, align 4
  %241 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags338 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 2
  %242 = load i32, i32* %sv_flags338, align 4
  %and339 = and i32 %242, 2147470591
  store i32 %and339, i32* %sv_flags338, align 4
  br label %if.end341

if.else340:                                       ; preds = %land.lhs.true327, %if.else325
  %243 = load %struct.sv*, %struct.sv** %retval.addr, align 8
  call void @Perl_sv_setpvn(%struct.sv* %243, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i64 0)
  br label %if.end341

if.end341:                                        ; preds = %if.else340, %do.end335
  br label %if.end342

if.end342:                                        ; preds = %if.end341, %if.end324
  br label %do.body343

do.body343:                                       ; preds = %if.end342
  %244 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags344 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags344, align 4
  %and345 = and i32 %245, 4194304
  %tobool346 = icmp ne i32 %and345, 0
  br i1 %tobool346, label %cond.true347, label %cond.false348

cond.true347:                                     ; preds = %do.body343
  br i1 true, label %if.then349, label %if.end351

cond.false348:                                    ; preds = %do.body343
  br i1 false, label %if.then349, label %if.end351

if.then349:                                       ; preds = %cond.false348, %cond.true347
  %246 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %call350 = call i32 @Perl_mg_set(%struct.sv* %246)
  br label %if.end351

if.end351:                                        ; preds = %if.then349, %cond.false348, %cond.true347
  br label %do.end352

do.end352:                                        ; preds = %if.end351
  br label %if.end353

if.end353:                                        ; preds = %do.end352, %nope
  %247 = load i64, i64* %count, align 8
  store i64 %247, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end353, %while.end, %for.end, %if.then
  %248 = load i64, i64* %retval, align 8
  ret i64 %248
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_chop() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %origmark = alloca i32, align 4
  %chomping = alloca i8, align 1
  %count = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 3
  %6 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %4, i64 %6
  %7 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %7, %struct.sv** %targ, align 8
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %9 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %8 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 41
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %chomping, align 1
  store i64 0, i64* %count, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp2 = icmp ult %struct.sv** %11, %12
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %13 = load %struct.sv*, %struct.sv** %targ, align 8
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %14, i32 1
  store %struct.sv** %incdec.ptr4, %struct.sv*** %mark, align 8
  %15 = load %struct.sv*, %struct.sv** %incdec.ptr4, align 8
  %16 = load i8, i8* %chomping, align 1
  %tobool = trunc i8 %16 to i1
  %call = call i64 @S_do_chomp(%struct.sv* %13, %struct.sv* %15, i1 zeroext %tobool)
  %17 = load i64, i64* %count, align 8
  %add = add i64 %17, %call
  store i64 %add, i64* %count, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %18 = load i8, i8* %chomping, align 1
  %tobool5 = trunc i8 %18 to i1
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %while.end
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %20 = load i64, i64* %count, align 8
  call void @Perl_sv_setiv(%struct.sv* %19, i64 %20)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.end
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %22 = load i32, i32* %origmark, align 4
  %idx.ext6 = sext i32 %22 to i64
  %add.ptr7 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 %idx.ext6
  store %struct.sv** %add.ptr7, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body8

do.body8:                                         ; preds = %do.body
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags, align 4
  %and = and i32 %24, 4194304
  %tobool9 = icmp ne i32 %and, 0
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body8
  br i1 true, label %if.then10, label %if.end12

cond.false:                                       ; preds = %do.body8
  br i1 false, label %if.then10, label %if.end12

if.then10:                                        ; preds = %cond.false, %cond.true
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %call11 = call i32 @Perl_mg_set(%struct.sv* %25)
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end12
  br label %do.body13

do.body13:                                        ; preds = %do.end
  br label %do.body14

do.body14:                                        ; preds = %do.body13
  %26 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast15 = ptrtoint %struct.sv** %26 to i64
  %sub.ptr.rhs.cast16 = ptrtoint %struct.sv** %27 to i64
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast15, %sub.ptr.rhs.cast16
  %sub.ptr.div18 = sdiv exact i64 %sub.ptr.sub17, 8
  %cmp19 = icmp slt i64 %sub.ptr.div18, 1
  br i1 %cmp19, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %do.body14
  br i1 true, label %if.then23, label %if.end25

cond.false22:                                     ; preds = %do.body14
  br i1 false, label %if.then23, label %if.end25

if.then23:                                        ; preds = %cond.false22, %cond.true21
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call24 = call %struct.sv** @Perl_stack_grow(%struct.sv** %28, %struct.sv** %29, i64 1)
  store %struct.sv** %call24, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %cond.false22, %cond.true21
  br label %do.end26

do.end26:                                         ; preds = %if.end25
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i32 1
  store %struct.sv** %incdec.ptr27, %struct.sv*** %sp, align 8
  store %struct.sv* %31, %struct.sv** %incdec.ptr27, align 8
  br label %do.end28

do.end28:                                         ; preds = %do.end26
  br label %do.end29

do.end29:                                         ; preds = %do.end28
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %33, %struct.sv*** @PL_stack_sp, align 8
  %34 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 0
  %35 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_undef() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %gp = alloca %struct.gp*, align 8
  %stash = alloca %struct.hv*, align 8
  %method_changed = alloca i8, align 1
  %zok = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.end2, label %if.then

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then1, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then1, label %if.end

if.then1:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call = call %struct.sv** @Perl_stack_grow(%struct.sv** %5, %struct.sv** %6, i64 1)
  store %struct.sv** %call, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then1, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %9, %struct.sv*** @PL_stack_sp, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %return

if.end2:                                          ; preds = %entry
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  store %struct.sv* %13, %struct.sv** %sv, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool3 = icmp ne %struct.sv* %14, null
  br i1 %tobool3, label %if.end6, label %if.then4

if.then4:                                         ; preds = %if.end2
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %15, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next5 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next5, align 8
  store %struct.op* %17, %struct.op** %retval, align 8
  br label %return

if.end6:                                          ; preds = %if.end2
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and = and i32 %19, 427886592
  %tobool7 = icmp ne i32 %and, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_force_normal_flags(%struct.sv* %20, i32 5)
  br label %if.end9

if.end9:                                          ; preds = %if.then8, %if.end6
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %22, 255
  switch i32 %and11, label %sw.default [
    i32 0, label %sw.bb
    i32 11, label %sw.bb12
    i32 12, label %sw.bb13
    i32 13, label %sw.bb14
    i32 14, label %sw.bb48
    i32 9, label %sw.bb49
  ]

sw.bb:                                            ; preds = %if.end9
  br label %sw.epilog

sw.bb12:                                          ; preds = %if.end9
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %24 = bitcast %struct.sv* %23 to i8*
  %25 = bitcast i8* %24 to %struct.av*
  call void @Perl_av_undef(%struct.av* %25)
  br label %sw.epilog

sw.bb13:                                          ; preds = %if.end9
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %27 = bitcast %struct.sv* %26 to i8*
  %28 = bitcast i8* %27 to %struct.hv*
  call void @Perl_hv_undef_flags(%struct.hv* %28, i32 0)
  br label %sw.epilog

sw.bb14:                                          ; preds = %if.end9
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %30 = bitcast %struct.sv* %29 to %struct.cv*
  %call15 = call %struct.sv* @Perl_cv_const_sv(%struct.cv* %30)
  %tobool16 = icmp ne %struct.sv* %call15, null
  br i1 %tobool16, label %if.then17, label %if.end47

if.then17:                                        ; preds = %sw.bb14
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %32 = bitcast %struct.sv* %31 to %struct.cv*
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %32, i32 0, i32 0
  %33 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %34 = bitcast %struct.xpvcv* %33 to i8*
  %35 = bitcast i8* %34 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %35, i32 0, i32 12
  %36 = load i32, i32* %xcv_flags, align 4
  %and18 = and i32 %36, 128
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %if.then17
  %call21 = call %struct.sv* @Perl_newSVpvn_flags(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i64 0, i64 0), i64 11, i32 524288)
  br label %cond.end45

cond.false22:                                     ; preds = %if.then17
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any23, align 8
  %39 = bitcast i8* %38 to %struct.xpvcv*
  %xcv_flags24 = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %39, i32 0, i32 12
  %40 = load i32, i32* %xcv_flags24, align 4
  %and25 = and i32 %40, 32768
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.true27, label %cond.false29

cond.true27:                                      ; preds = %cond.false22
  %41 = load %struct.sv*, %struct.sv** %sv, align 8
  %42 = bitcast %struct.sv* %41 to %struct.cv*
  %call28 = call %struct.hek* @CvNAME_HEK(%struct.cv* %42)
  br label %cond.end41

cond.false29:                                     ; preds = %cond.false22
  %43 = load %struct.sv*, %struct.sv** %sv, align 8
  %44 = bitcast %struct.sv* %43 to %struct.cv*
  %call30 = call %struct.gv* @S_CvGV(%struct.cv* %44)
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %call30, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %45 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %45, i64 0
  %gp_egv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 8
  %46 = load %struct.gv*, %struct.gv** %gp_egv, align 8
  %tobool31 = icmp ne %struct.gv* %46, null
  br i1 %tobool31, label %cond.true32, label %cond.false38

cond.true32:                                      ; preds = %cond.false29
  %47 = load %struct.sv*, %struct.sv** %sv, align 8
  %48 = bitcast %struct.sv* %47 to %struct.cv*
  %call33 = call %struct.gv* @S_CvGV(%struct.cv* %48)
  %sv_u34 = getelementptr inbounds %struct.gv, %struct.gv* %call33, i32 0, i32 3
  %svu_gp35 = bitcast %union.anon.4* %sv_u34 to %struct.gp**
  %49 = load %struct.gp*, %struct.gp** %svu_gp35, align 8
  %add.ptr36 = getelementptr inbounds %struct.gp, %struct.gp* %49, i64 0
  %gp_egv37 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr36, i32 0, i32 8
  %50 = load %struct.gv*, %struct.gv** %gp_egv37, align 8
  br label %cond.end

cond.false38:                                     ; preds = %cond.false29
  %51 = load %struct.sv*, %struct.sv** %sv, align 8
  %52 = bitcast %struct.sv* %51 to %struct.cv*
  %call39 = call %struct.gv* @S_CvGV(%struct.cv* %52)
  br label %cond.end

cond.end:                                         ; preds = %cond.false38, %cond.true32
  %cond = phi %struct.gv* [ %50, %cond.true32 ], [ %call39, %cond.false38 ]
  %sv_any40 = getelementptr inbounds %struct.gv, %struct.gv* %cond, i32 0, i32 0
  %53 = load %struct.xpvgv*, %struct.xpvgv** %sv_any40, align 8
  %xiv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %53, i32 0, i32 4
  %xivu_namehek = bitcast %union._xivu* %xiv_u to %struct.hek**
  %54 = load %struct.hek*, %struct.hek** %xivu_namehek, align 8
  br label %cond.end41

cond.end41:                                       ; preds = %cond.end, %cond.true27
  %cond42 = phi %struct.hek* [ %call28, %cond.true27 ], [ %54, %cond.end ]
  %call43 = call %struct.sv* @Perl_newSVhek(%struct.hek* %cond42)
  %call44 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call43)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.end41, %cond.true20
  %cond46 = phi %struct.sv* [ %call21, %cond.true20 ], [ %call44, %cond.end41 ]
  %55 = bitcast %struct.sv* %cond46 to i8*
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.23, i64 0, i64 0), i8* %55)
  br label %if.end47

if.end47:                                         ; preds = %cond.end45, %sw.bb14
  br label %sw.bb48

sw.bb48:                                          ; preds = %if.end9, %if.end47
  %56 = load %struct.sv*, %struct.sv** %sv, align 8
  %57 = bitcast %struct.sv* %56 to i8*
  %58 = bitcast i8* %57 to %struct.cv*
  call void @Perl_cv_undef_flags(%struct.cv* %58, i32 1)
  br label %sw.epilog

sw.bb49:                                          ; preds = %if.end9
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %60 = bitcast %struct.sv* %59 to %struct.gv*
  %sv_u50 = getelementptr inbounds %struct.gv, %struct.gv* %60, i32 0, i32 3
  %svu_gp51 = bitcast %union.anon.4* %sv_u50 to %struct.gp**
  %61 = load %struct.gp*, %struct.gp** %svu_gp51, align 8
  %add.ptr52 = getelementptr inbounds %struct.gp, %struct.gp* %61, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr52, i32 0, i32 3
  %62 = load i32, i32* %gp_cvgen, align 8
  %tobool53 = icmp ne i32 %62, 0
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %sw.bb49
  br i1 false, label %land.lhs.true, label %land.end

cond.false55:                                     ; preds = %sw.bb49
  %63 = load %struct.sv*, %struct.sv** %sv, align 8
  %64 = bitcast %struct.sv* %63 to %struct.gv*
  %sv_u56 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp57 = bitcast %union.anon.4* %sv_u56 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp57, align 8
  %add.ptr58 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr58, i32 0, i32 2
  %66 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %tobool59 = icmp ne %struct.cv* %66, null
  br i1 %tobool59, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.false55, %cond.true54
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %68 = bitcast %struct.sv* %67 to %struct.gv*
  %sv_any60 = getelementptr inbounds %struct.gv, %struct.gv* %68, i32 0, i32 0
  %69 = load %struct.xpvgv*, %struct.xpvgv** %sv_any60, align 8
  %xnv_u = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %69, i32 0, i32 5
  %xgv_stash = bitcast %union._xnvu* %xnv_u to %struct.hv**
  %70 = load %struct.hv*, %struct.hv** %xgv_stash, align 8
  store %struct.hv* %70, %struct.hv** %stash, align 8
  %tobool61 = icmp ne %struct.hv* %70, null
  br i1 %tobool61, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %71 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags62 = getelementptr inbounds %struct.hv, %struct.hv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags62, align 4
  %and63 = and i32 %72, 33554432
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %land.lhs.true65, label %cond.false139

land.lhs.true65:                                  ; preds = %land.rhs
  %73 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u66 = getelementptr inbounds %struct.hv, %struct.hv* %73, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u66 to %struct.he***
  %74 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %75 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any67 = getelementptr inbounds %struct.hv, %struct.hv* %75, i32 0, i32 0
  %76 = load %struct.xpvhv*, %struct.xpvhv** %sv_any67, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %76, i32 0, i32 3
  %77 = load i64, i64* %xhv_max, align 8
  %add = add i64 %77, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %74, i64 %add
  %78 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %78, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %79 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool68 = icmp ne %struct.hek* %79, null
  br i1 %tobool68, label %land.lhs.true69, label %cond.false139

land.lhs.true69:                                  ; preds = %land.lhs.true65
  %80 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u70 = getelementptr inbounds %struct.hv, %struct.hv* %80, i32 0, i32 3
  %svu_hash71 = bitcast %union.anon.5* %sv_u70 to %struct.he***
  %81 = load %struct.he**, %struct.he*** %svu_hash71, align 8
  %82 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any72 = getelementptr inbounds %struct.hv, %struct.hv* %82, i32 0, i32 0
  %83 = load %struct.xpvhv*, %struct.xpvhv** %sv_any72, align 8
  %xhv_max73 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %83, i32 0, i32 3
  %84 = load i64, i64* %xhv_max73, align 8
  %add74 = add i64 %84, 1
  %arrayidx75 = getelementptr inbounds %struct.he*, %struct.he** %81, i64 %add74
  %85 = bitcast %struct.he** %arrayidx75 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %85, i32 0, i32 4
  %86 = load i32, i32* %xhv_name_count, align 4
  %cmp76 = icmp ne i32 %86, -1
  br i1 %cmp76, label %cond.true77, label %cond.false139

cond.true77:                                      ; preds = %land.lhs.true69
  %87 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u78 = getelementptr inbounds %struct.hv, %struct.hv* %87, i32 0, i32 3
  %svu_hash79 = bitcast %union.anon.5* %sv_u78 to %struct.he***
  %88 = load %struct.he**, %struct.he*** %svu_hash79, align 8
  %89 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any80 = getelementptr inbounds %struct.hv, %struct.hv* %89, i32 0, i32 0
  %90 = load %struct.xpvhv*, %struct.xpvhv** %sv_any80, align 8
  %xhv_max81 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %90, i32 0, i32 3
  %91 = load i64, i64* %xhv_max81, align 8
  %add82 = add i64 %91, 1
  %arrayidx83 = getelementptr inbounds %struct.he*, %struct.he** %88, i64 %add82
  %92 = bitcast %struct.he** %arrayidx83 to %struct.xpvhv_aux*
  %xhv_name_count84 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %92, i32 0, i32 4
  %93 = load i32, i32* %xhv_name_count84, align 4
  %cmp85 = icmp sgt i32 %93, 0
  br i1 %cmp85, label %cond.true86, label %cond.false95

cond.true86:                                      ; preds = %cond.true77
  %94 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u87 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 3
  %svu_hash88 = bitcast %union.anon.5* %sv_u87 to %struct.he***
  %95 = load %struct.he**, %struct.he*** %svu_hash88, align 8
  %96 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any89 = getelementptr inbounds %struct.hv, %struct.hv* %96, i32 0, i32 0
  %97 = load %struct.xpvhv*, %struct.xpvhv** %sv_any89, align 8
  %xhv_max90 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %97, i32 0, i32 3
  %98 = load i64, i64* %xhv_max90, align 8
  %add91 = add i64 %98, 1
  %arrayidx92 = getelementptr inbounds %struct.he*, %struct.he** %95, i64 %add91
  %99 = bitcast %struct.he** %arrayidx92 to %struct.xpvhv_aux*
  %xhv_name_u93 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %99, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u93 to %struct.hek***
  %100 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %arrayidx94 = getelementptr inbounds %struct.hek*, %struct.hek** %100, i64 0
  %101 = load %struct.hek*, %struct.hek** %arrayidx94, align 8
  br label %cond.end137

cond.false95:                                     ; preds = %cond.true77
  %102 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u96 = getelementptr inbounds %struct.hv, %struct.hv* %102, i32 0, i32 3
  %svu_hash97 = bitcast %union.anon.5* %sv_u96 to %struct.he***
  %103 = load %struct.he**, %struct.he*** %svu_hash97, align 8
  %104 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any98 = getelementptr inbounds %struct.hv, %struct.hv* %104, i32 0, i32 0
  %105 = load %struct.xpvhv*, %struct.xpvhv** %sv_any98, align 8
  %xhv_max99 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %105, i32 0, i32 3
  %106 = load i64, i64* %xhv_max99, align 8
  %add100 = add i64 %106, 1
  %arrayidx101 = getelementptr inbounds %struct.he*, %struct.he** %103, i64 %add100
  %107 = bitcast %struct.he** %arrayidx101 to %struct.xpvhv_aux*
  %xhv_name_count102 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %107, i32 0, i32 4
  %108 = load i32, i32* %xhv_name_count102, align 4
  %cmp103 = icmp slt i32 %108, -1
  br i1 %cmp103, label %cond.true104, label %cond.false114

cond.true104:                                     ; preds = %cond.false95
  %109 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u105 = getelementptr inbounds %struct.hv, %struct.hv* %109, i32 0, i32 3
  %svu_hash106 = bitcast %union.anon.5* %sv_u105 to %struct.he***
  %110 = load %struct.he**, %struct.he*** %svu_hash106, align 8
  %111 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any107 = getelementptr inbounds %struct.hv, %struct.hv* %111, i32 0, i32 0
  %112 = load %struct.xpvhv*, %struct.xpvhv** %sv_any107, align 8
  %xhv_max108 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %112, i32 0, i32 3
  %113 = load i64, i64* %xhv_max108, align 8
  %add109 = add i64 %113, 1
  %arrayidx110 = getelementptr inbounds %struct.he*, %struct.he** %110, i64 %add109
  %114 = bitcast %struct.he** %arrayidx110 to %struct.xpvhv_aux*
  %xhv_name_u111 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %114, i32 0, i32 0
  %xhvnameu_names112 = bitcast %union._xhvnameu* %xhv_name_u111 to %struct.hek***
  %115 = load %struct.hek**, %struct.hek*** %xhvnameu_names112, align 8
  %arrayidx113 = getelementptr inbounds %struct.hek*, %struct.hek** %115, i64 1
  %116 = load %struct.hek*, %struct.hek** %arrayidx113, align 8
  br label %cond.end135

cond.false114:                                    ; preds = %cond.false95
  %117 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u115 = getelementptr inbounds %struct.hv, %struct.hv* %117, i32 0, i32 3
  %svu_hash116 = bitcast %union.anon.5* %sv_u115 to %struct.he***
  %118 = load %struct.he**, %struct.he*** %svu_hash116, align 8
  %119 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any117 = getelementptr inbounds %struct.hv, %struct.hv* %119, i32 0, i32 0
  %120 = load %struct.xpvhv*, %struct.xpvhv** %sv_any117, align 8
  %xhv_max118 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %120, i32 0, i32 3
  %121 = load i64, i64* %xhv_max118, align 8
  %add119 = add i64 %121, 1
  %arrayidx120 = getelementptr inbounds %struct.he*, %struct.he** %118, i64 %add119
  %122 = bitcast %struct.he** %arrayidx120 to %struct.xpvhv_aux*
  %xhv_name_count121 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %122, i32 0, i32 4
  %123 = load i32, i32* %xhv_name_count121, align 4
  %cmp122 = icmp eq i32 %123, -1
  br i1 %cmp122, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %cond.false114
  br label %cond.end133

cond.false124:                                    ; preds = %cond.false114
  %124 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u125 = getelementptr inbounds %struct.hv, %struct.hv* %124, i32 0, i32 3
  %svu_hash126 = bitcast %union.anon.5* %sv_u125 to %struct.he***
  %125 = load %struct.he**, %struct.he*** %svu_hash126, align 8
  %126 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any127 = getelementptr inbounds %struct.hv, %struct.hv* %126, i32 0, i32 0
  %127 = load %struct.xpvhv*, %struct.xpvhv** %sv_any127, align 8
  %xhv_max128 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %127, i32 0, i32 3
  %128 = load i64, i64* %xhv_max128, align 8
  %add129 = add i64 %128, 1
  %arrayidx130 = getelementptr inbounds %struct.he*, %struct.he** %125, i64 %add129
  %129 = bitcast %struct.he** %arrayidx130 to %struct.xpvhv_aux*
  %xhv_name_u131 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %129, i32 0, i32 0
  %xhvnameu_name132 = bitcast %union._xhvnameu* %xhv_name_u131 to %struct.hek**
  %130 = load %struct.hek*, %struct.hek** %xhvnameu_name132, align 8
  br label %cond.end133

cond.end133:                                      ; preds = %cond.false124, %cond.true123
  %cond134 = phi %struct.hek* [ null, %cond.true123 ], [ %130, %cond.false124 ]
  br label %cond.end135

cond.end135:                                      ; preds = %cond.end133, %cond.true104
  %cond136 = phi %struct.hek* [ %116, %cond.true104 ], [ %cond134, %cond.end133 ]
  br label %cond.end137

cond.end137:                                      ; preds = %cond.end135, %cond.true86
  %cond138 = phi %struct.hek* [ %101, %cond.true86 ], [ %cond136, %cond.end135 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond138, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  br label %cond.end140

cond.false139:                                    ; preds = %land.lhs.true69, %land.lhs.true65, %land.rhs
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false139, %cond.end137
  %cond141 = phi i8* [ %arraydecay, %cond.end137 ], [ null, %cond.false139 ]
  %tobool142 = icmp ne i8* %cond141, null
  br label %land.end

land.end:                                         ; preds = %cond.end140, %land.lhs.true, %cond.false55, %cond.true54
  %131 = phi i1 [ false, %land.lhs.true ], [ false, %cond.false55 ], [ false, %cond.true54 ], [ %tobool142, %cond.end140 ]
  %frombool = zext i1 %131 to i8
  store i8 %frombool, i8* %method_changed, align 1
  %132 = load %struct.sv*, %struct.sv** %sv, align 8
  %133 = bitcast %struct.sv* %132 to %struct.gv*
  %sv_u143 = getelementptr inbounds %struct.gv, %struct.gv* %133, i32 0, i32 3
  %svu_gp144 = bitcast %union.anon.4* %sv_u143 to %struct.gp**
  %134 = load %struct.gp*, %struct.gp** %svu_gp144, align 8
  %add.ptr145 = getelementptr inbounds %struct.gp, %struct.gp* %134, i64 0
  %gp_hv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr145, i32 0, i32 5
  %135 = load %struct.hv*, %struct.hv** %gp_hv, align 8
  store %struct.hv* %135, %struct.hv** %stash, align 8
  %tobool146 = icmp ne %struct.hv* %135, null
  br i1 %tobool146, label %if.then147, label %if.end240

if.then147:                                       ; preds = %land.end
  %136 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags148 = getelementptr inbounds %struct.hv, %struct.hv* %136, i32 0, i32 2
  %137 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %137, 33554432
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %land.lhs.true151, label %cond.false236

land.lhs.true151:                                 ; preds = %if.then147
  %138 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u152 = getelementptr inbounds %struct.hv, %struct.hv* %138, i32 0, i32 3
  %svu_hash153 = bitcast %union.anon.5* %sv_u152 to %struct.he***
  %139 = load %struct.he**, %struct.he*** %svu_hash153, align 8
  %140 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any154 = getelementptr inbounds %struct.hv, %struct.hv* %140, i32 0, i32 0
  %141 = load %struct.xpvhv*, %struct.xpvhv** %sv_any154, align 8
  %xhv_max155 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %141, i32 0, i32 3
  %142 = load i64, i64* %xhv_max155, align 8
  %add156 = add i64 %142, 1
  %arrayidx157 = getelementptr inbounds %struct.he*, %struct.he** %139, i64 %add156
  %143 = bitcast %struct.he** %arrayidx157 to %struct.xpvhv_aux*
  %xhv_name_u158 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %143, i32 0, i32 0
  %xhvnameu_name159 = bitcast %union._xhvnameu* %xhv_name_u158 to %struct.hek**
  %144 = load %struct.hek*, %struct.hek** %xhvnameu_name159, align 8
  %tobool160 = icmp ne %struct.hek* %144, null
  br i1 %tobool160, label %land.lhs.true161, label %cond.false236

land.lhs.true161:                                 ; preds = %land.lhs.true151
  %145 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u162 = getelementptr inbounds %struct.hv, %struct.hv* %145, i32 0, i32 3
  %svu_hash163 = bitcast %union.anon.5* %sv_u162 to %struct.he***
  %146 = load %struct.he**, %struct.he*** %svu_hash163, align 8
  %147 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any164 = getelementptr inbounds %struct.hv, %struct.hv* %147, i32 0, i32 0
  %148 = load %struct.xpvhv*, %struct.xpvhv** %sv_any164, align 8
  %xhv_max165 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %148, i32 0, i32 3
  %149 = load i64, i64* %xhv_max165, align 8
  %add166 = add i64 %149, 1
  %arrayidx167 = getelementptr inbounds %struct.he*, %struct.he** %146, i64 %add166
  %150 = bitcast %struct.he** %arrayidx167 to %struct.xpvhv_aux*
  %xhv_name_count168 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %150, i32 0, i32 4
  %151 = load i32, i32* %xhv_name_count168, align 4
  %cmp169 = icmp ne i32 %151, -1
  br i1 %cmp169, label %cond.true170, label %cond.false236

cond.true170:                                     ; preds = %land.lhs.true161
  %152 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u171 = getelementptr inbounds %struct.hv, %struct.hv* %152, i32 0, i32 3
  %svu_hash172 = bitcast %union.anon.5* %sv_u171 to %struct.he***
  %153 = load %struct.he**, %struct.he*** %svu_hash172, align 8
  %154 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any173 = getelementptr inbounds %struct.hv, %struct.hv* %154, i32 0, i32 0
  %155 = load %struct.xpvhv*, %struct.xpvhv** %sv_any173, align 8
  %xhv_max174 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %155, i32 0, i32 3
  %156 = load i64, i64* %xhv_max174, align 8
  %add175 = add i64 %156, 1
  %arrayidx176 = getelementptr inbounds %struct.he*, %struct.he** %153, i64 %add175
  %157 = bitcast %struct.he** %arrayidx176 to %struct.xpvhv_aux*
  %xhv_name_count177 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %157, i32 0, i32 4
  %158 = load i32, i32* %xhv_name_count177, align 4
  %cmp178 = icmp sgt i32 %158, 0
  br i1 %cmp178, label %cond.true179, label %cond.false189

cond.true179:                                     ; preds = %cond.true170
  %159 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u180 = getelementptr inbounds %struct.hv, %struct.hv* %159, i32 0, i32 3
  %svu_hash181 = bitcast %union.anon.5* %sv_u180 to %struct.he***
  %160 = load %struct.he**, %struct.he*** %svu_hash181, align 8
  %161 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any182 = getelementptr inbounds %struct.hv, %struct.hv* %161, i32 0, i32 0
  %162 = load %struct.xpvhv*, %struct.xpvhv** %sv_any182, align 8
  %xhv_max183 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %162, i32 0, i32 3
  %163 = load i64, i64* %xhv_max183, align 8
  %add184 = add i64 %163, 1
  %arrayidx185 = getelementptr inbounds %struct.he*, %struct.he** %160, i64 %add184
  %164 = bitcast %struct.he** %arrayidx185 to %struct.xpvhv_aux*
  %xhv_name_u186 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %164, i32 0, i32 0
  %xhvnameu_names187 = bitcast %union._xhvnameu* %xhv_name_u186 to %struct.hek***
  %165 = load %struct.hek**, %struct.hek*** %xhvnameu_names187, align 8
  %arrayidx188 = getelementptr inbounds %struct.hek*, %struct.hek** %165, i64 0
  %166 = load %struct.hek*, %struct.hek** %arrayidx188, align 8
  br label %cond.end231

cond.false189:                                    ; preds = %cond.true170
  %167 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u190 = getelementptr inbounds %struct.hv, %struct.hv* %167, i32 0, i32 3
  %svu_hash191 = bitcast %union.anon.5* %sv_u190 to %struct.he***
  %168 = load %struct.he**, %struct.he*** %svu_hash191, align 8
  %169 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any192 = getelementptr inbounds %struct.hv, %struct.hv* %169, i32 0, i32 0
  %170 = load %struct.xpvhv*, %struct.xpvhv** %sv_any192, align 8
  %xhv_max193 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %170, i32 0, i32 3
  %171 = load i64, i64* %xhv_max193, align 8
  %add194 = add i64 %171, 1
  %arrayidx195 = getelementptr inbounds %struct.he*, %struct.he** %168, i64 %add194
  %172 = bitcast %struct.he** %arrayidx195 to %struct.xpvhv_aux*
  %xhv_name_count196 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %172, i32 0, i32 4
  %173 = load i32, i32* %xhv_name_count196, align 4
  %cmp197 = icmp slt i32 %173, -1
  br i1 %cmp197, label %cond.true198, label %cond.false208

cond.true198:                                     ; preds = %cond.false189
  %174 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u199 = getelementptr inbounds %struct.hv, %struct.hv* %174, i32 0, i32 3
  %svu_hash200 = bitcast %union.anon.5* %sv_u199 to %struct.he***
  %175 = load %struct.he**, %struct.he*** %svu_hash200, align 8
  %176 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any201 = getelementptr inbounds %struct.hv, %struct.hv* %176, i32 0, i32 0
  %177 = load %struct.xpvhv*, %struct.xpvhv** %sv_any201, align 8
  %xhv_max202 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %177, i32 0, i32 3
  %178 = load i64, i64* %xhv_max202, align 8
  %add203 = add i64 %178, 1
  %arrayidx204 = getelementptr inbounds %struct.he*, %struct.he** %175, i64 %add203
  %179 = bitcast %struct.he** %arrayidx204 to %struct.xpvhv_aux*
  %xhv_name_u205 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %179, i32 0, i32 0
  %xhvnameu_names206 = bitcast %union._xhvnameu* %xhv_name_u205 to %struct.hek***
  %180 = load %struct.hek**, %struct.hek*** %xhvnameu_names206, align 8
  %arrayidx207 = getelementptr inbounds %struct.hek*, %struct.hek** %180, i64 1
  %181 = load %struct.hek*, %struct.hek** %arrayidx207, align 8
  br label %cond.end229

cond.false208:                                    ; preds = %cond.false189
  %182 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u209 = getelementptr inbounds %struct.hv, %struct.hv* %182, i32 0, i32 3
  %svu_hash210 = bitcast %union.anon.5* %sv_u209 to %struct.he***
  %183 = load %struct.he**, %struct.he*** %svu_hash210, align 8
  %184 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any211 = getelementptr inbounds %struct.hv, %struct.hv* %184, i32 0, i32 0
  %185 = load %struct.xpvhv*, %struct.xpvhv** %sv_any211, align 8
  %xhv_max212 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %185, i32 0, i32 3
  %186 = load i64, i64* %xhv_max212, align 8
  %add213 = add i64 %186, 1
  %arrayidx214 = getelementptr inbounds %struct.he*, %struct.he** %183, i64 %add213
  %187 = bitcast %struct.he** %arrayidx214 to %struct.xpvhv_aux*
  %xhv_name_count215 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %187, i32 0, i32 4
  %188 = load i32, i32* %xhv_name_count215, align 4
  %cmp216 = icmp eq i32 %188, -1
  br i1 %cmp216, label %cond.true217, label %cond.false218

cond.true217:                                     ; preds = %cond.false208
  br label %cond.end227

cond.false218:                                    ; preds = %cond.false208
  %189 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u219 = getelementptr inbounds %struct.hv, %struct.hv* %189, i32 0, i32 3
  %svu_hash220 = bitcast %union.anon.5* %sv_u219 to %struct.he***
  %190 = load %struct.he**, %struct.he*** %svu_hash220, align 8
  %191 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any221 = getelementptr inbounds %struct.hv, %struct.hv* %191, i32 0, i32 0
  %192 = load %struct.xpvhv*, %struct.xpvhv** %sv_any221, align 8
  %xhv_max222 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %192, i32 0, i32 3
  %193 = load i64, i64* %xhv_max222, align 8
  %add223 = add i64 %193, 1
  %arrayidx224 = getelementptr inbounds %struct.he*, %struct.he** %190, i64 %add223
  %194 = bitcast %struct.he** %arrayidx224 to %struct.xpvhv_aux*
  %xhv_name_u225 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %194, i32 0, i32 0
  %xhvnameu_name226 = bitcast %union._xhvnameu* %xhv_name_u225 to %struct.hek**
  %195 = load %struct.hek*, %struct.hek** %xhvnameu_name226, align 8
  br label %cond.end227

cond.end227:                                      ; preds = %cond.false218, %cond.true217
  %cond228 = phi %struct.hek* [ null, %cond.true217 ], [ %195, %cond.false218 ]
  br label %cond.end229

cond.end229:                                      ; preds = %cond.end227, %cond.true198
  %cond230 = phi %struct.hek* [ %181, %cond.true198 ], [ %cond228, %cond.end227 ]
  br label %cond.end231

cond.end231:                                      ; preds = %cond.end229, %cond.true179
  %cond232 = phi %struct.hek* [ %166, %cond.true179 ], [ %cond230, %cond.end229 ]
  %hek_key233 = getelementptr inbounds %struct.hek, %struct.hek* %cond232, i32 0, i32 2
  %arraydecay234 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key233, i64 0, i64 0
  %tobool235 = icmp ne i8* %arraydecay234, null
  br i1 %tobool235, label %if.then237, label %if.else

cond.false236:                                    ; preds = %land.lhs.true161, %land.lhs.true151, %if.then147
  br i1 false, label %if.then237, label %if.else

if.then237:                                       ; preds = %cond.false236, %cond.end231
  %196 = load %struct.hv*, %struct.hv** %stash, align 8
  %197 = bitcast %struct.hv* %196 to %struct.sv*
  %call238 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %197)
  %198 = bitcast %struct.sv* %call238 to i8*
  %199 = bitcast i8* %198 to %struct.sv*
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 1
  %200 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %200, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end239

if.else:                                          ; preds = %cond.false236, %cond.end231
  store %struct.hv* null, %struct.hv** %stash, align 8
  br label %if.end239

if.end239:                                        ; preds = %if.else, %if.then237
  br label %if.end240

if.end240:                                        ; preds = %if.end239, %land.end
  %201 = load %struct.sv*, %struct.sv** %sv, align 8
  %call241 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %201)
  %202 = bitcast %struct.sv* %call241 to i8*
  %203 = bitcast i8* %202 to %struct.sv*
  %sv_refcnt242 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 1
  %204 = load i32, i32* %sv_refcnt242, align 8
  %inc243 = add i32 %204, 1
  store i32 %inc243, i32* %sv_refcnt242, align 8
  %205 = load %struct.sv*, %struct.sv** %sv, align 8
  %206 = bitcast %struct.sv* %205 to i8*
  %207 = bitcast i8* %206 to %struct.gv*
  call void @Perl_gp_free(%struct.gv* %207)
  %call244 = call i8* @Perl_safesyscalloc(i64 1, i64 80)
  %208 = bitcast i8* %call244 to %struct.gp*
  store %struct.gp* %208, %struct.gp** %gp, align 8
  %209 = load %struct.gp*, %struct.gp** %gp, align 8
  %call245 = call %struct.gp* @Perl_gp_ref(%struct.gp* %209)
  %210 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u246 = getelementptr inbounds %struct.sv, %struct.sv* %210, i32 0, i32 3
  %svu_gp247 = bitcast %union.anon* %sv_u246 to %struct.gp**
  store %struct.gp* %call245, %struct.gp** %svu_gp247, align 8
  %211 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_line = getelementptr inbounds %struct.cop, %struct.cop* %211, i32 0, i32 7
  %212 = load i32, i32* %cop_line, align 4
  %213 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u248 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 3
  %svu_gp249 = bitcast %union.anon* %sv_u248 to %struct.gp**
  %214 = load %struct.gp*, %struct.gp** %svu_gp249, align 8
  %add.ptr250 = getelementptr inbounds %struct.gp, %struct.gp* %214, i64 0
  %gp_line = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr250, i32 0, i32 9
  %bf.load = load i32, i32* %gp_line, align 8
  %bf.value = and i32 %212, 2147483647
  %bf.clear = and i32 %bf.load, -2147483648
  %bf.set = or i32 %bf.clear, %bf.value
  store i32 %bf.set, i32* %gp_line, align 8
  %215 = load %struct.sv*, %struct.sv** %sv, align 8
  %216 = bitcast %struct.sv* %215 to i8*
  %217 = bitcast i8* %216 to %struct.gv*
  %218 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u251 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 3
  %svu_gp252 = bitcast %union.anon* %sv_u251 to %struct.gp**
  %219 = load %struct.gp*, %struct.gp** %svu_gp252, align 8
  %add.ptr253 = getelementptr inbounds %struct.gp, %struct.gp* %219, i64 0
  %gp_egv254 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr253, i32 0, i32 8
  store %struct.gv* %217, %struct.gv** %gp_egv254, align 8
  %220 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any255 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 0
  %221 = load i8*, i8** %sv_any255, align 8
  %222 = bitcast i8* %221 to %struct.xpvgv*
  %xpv_cur = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %222, i32 0, i32 2
  %223 = load i64, i64* %xpv_cur, align 8
  %or = or i64 %223, 2
  store i64 %or, i64* %xpv_cur, align 8
  %224 = load %struct.hv*, %struct.hv** %stash, align 8
  %tobool256 = icmp ne %struct.hv* %224, null
  br i1 %tobool256, label %if.then257, label %if.end258

if.then257:                                       ; preds = %if.end240
  %225 = load %struct.hv*, %struct.hv** %stash, align 8
  %226 = load %struct.sv*, %struct.sv** %sv, align 8
  %227 = bitcast %struct.sv* %226 to %struct.gv*
  call void @Perl_mro_package_moved(%struct.hv* null, %struct.hv* %225, %struct.gv* %227, i32 0)
  br label %if.end258

if.end258:                                        ; preds = %if.then257, %if.end240
  store %struct.hv* null, %struct.hv** %stash, align 8
  %228 = load %struct.sv*, %struct.sv** %sv, align 8
  %229 = bitcast %struct.sv* %228 to %struct.gv*
  %sv_any259 = getelementptr inbounds %struct.gv, %struct.gv* %229, i32 0, i32 0
  %230 = load %struct.xpvgv*, %struct.xpvgv** %sv_any259, align 8
  %xiv_u260 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %230, i32 0, i32 4
  %xivu_namehek261 = bitcast %union._xivu* %xiv_u260 to %struct.hek**
  %231 = load %struct.hek*, %struct.hek** %xivu_namehek261, align 8
  %hek_key262 = getelementptr inbounds %struct.hek, %struct.hek* %231, i32 0, i32 2
  %arraydecay263 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key262, i64 0, i64 0
  %call264 = call i32 @strcmp(i8* %arraydecay263, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0)) #7
  %tobool265 = icmp ne i32 %call264, 0
  br i1 %tobool265, label %if.else363, label %land.lhs.true266

land.lhs.true266:                                 ; preds = %if.end258
  %232 = load %struct.sv*, %struct.sv** %sv, align 8
  %233 = bitcast %struct.sv* %232 to %struct.gv*
  %sv_any267 = getelementptr inbounds %struct.gv, %struct.gv* %233, i32 0, i32 0
  %234 = load %struct.xpvgv*, %struct.xpvgv** %sv_any267, align 8
  %xnv_u268 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %234, i32 0, i32 5
  %xgv_stash269 = bitcast %union._xnvu* %xnv_u268 to %struct.hv**
  %235 = load %struct.hv*, %struct.hv** %xgv_stash269, align 8
  store %struct.hv* %235, %struct.hv** %stash, align 8
  %tobool270 = icmp ne %struct.hv* %235, null
  br i1 %tobool270, label %land.lhs.true271, label %if.else363

land.lhs.true271:                                 ; preds = %land.lhs.true266
  %236 = load i8, i8* %method_changed, align 1
  %tobool272 = trunc i8 %236 to i1
  br i1 %tobool272, label %if.then362, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true271
  %237 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_flags273 = getelementptr inbounds %struct.hv, %struct.hv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags273, align 4
  %and274 = and i32 %238, 33554432
  %tobool275 = icmp ne i32 %and274, 0
  br i1 %tobool275, label %land.lhs.true276, label %cond.false361

land.lhs.true276:                                 ; preds = %lor.lhs.false
  %239 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u277 = getelementptr inbounds %struct.hv, %struct.hv* %239, i32 0, i32 3
  %svu_hash278 = bitcast %union.anon.5* %sv_u277 to %struct.he***
  %240 = load %struct.he**, %struct.he*** %svu_hash278, align 8
  %241 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any279 = getelementptr inbounds %struct.hv, %struct.hv* %241, i32 0, i32 0
  %242 = load %struct.xpvhv*, %struct.xpvhv** %sv_any279, align 8
  %xhv_max280 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %242, i32 0, i32 3
  %243 = load i64, i64* %xhv_max280, align 8
  %add281 = add i64 %243, 1
  %arrayidx282 = getelementptr inbounds %struct.he*, %struct.he** %240, i64 %add281
  %244 = bitcast %struct.he** %arrayidx282 to %struct.xpvhv_aux*
  %xhv_name_u283 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %244, i32 0, i32 0
  %xhvnameu_name284 = bitcast %union._xhvnameu* %xhv_name_u283 to %struct.hek**
  %245 = load %struct.hek*, %struct.hek** %xhvnameu_name284, align 8
  %tobool285 = icmp ne %struct.hek* %245, null
  br i1 %tobool285, label %land.lhs.true286, label %cond.false361

land.lhs.true286:                                 ; preds = %land.lhs.true276
  %246 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u287 = getelementptr inbounds %struct.hv, %struct.hv* %246, i32 0, i32 3
  %svu_hash288 = bitcast %union.anon.5* %sv_u287 to %struct.he***
  %247 = load %struct.he**, %struct.he*** %svu_hash288, align 8
  %248 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any289 = getelementptr inbounds %struct.hv, %struct.hv* %248, i32 0, i32 0
  %249 = load %struct.xpvhv*, %struct.xpvhv** %sv_any289, align 8
  %xhv_max290 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %249, i32 0, i32 3
  %250 = load i64, i64* %xhv_max290, align 8
  %add291 = add i64 %250, 1
  %arrayidx292 = getelementptr inbounds %struct.he*, %struct.he** %247, i64 %add291
  %251 = bitcast %struct.he** %arrayidx292 to %struct.xpvhv_aux*
  %xhv_name_count293 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %251, i32 0, i32 4
  %252 = load i32, i32* %xhv_name_count293, align 4
  %cmp294 = icmp ne i32 %252, -1
  br i1 %cmp294, label %cond.true295, label %cond.false361

cond.true295:                                     ; preds = %land.lhs.true286
  %253 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u296 = getelementptr inbounds %struct.hv, %struct.hv* %253, i32 0, i32 3
  %svu_hash297 = bitcast %union.anon.5* %sv_u296 to %struct.he***
  %254 = load %struct.he**, %struct.he*** %svu_hash297, align 8
  %255 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any298 = getelementptr inbounds %struct.hv, %struct.hv* %255, i32 0, i32 0
  %256 = load %struct.xpvhv*, %struct.xpvhv** %sv_any298, align 8
  %xhv_max299 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %256, i32 0, i32 3
  %257 = load i64, i64* %xhv_max299, align 8
  %add300 = add i64 %257, 1
  %arrayidx301 = getelementptr inbounds %struct.he*, %struct.he** %254, i64 %add300
  %258 = bitcast %struct.he** %arrayidx301 to %struct.xpvhv_aux*
  %xhv_name_count302 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %258, i32 0, i32 4
  %259 = load i32, i32* %xhv_name_count302, align 4
  %cmp303 = icmp sgt i32 %259, 0
  br i1 %cmp303, label %cond.true304, label %cond.false314

cond.true304:                                     ; preds = %cond.true295
  %260 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u305 = getelementptr inbounds %struct.hv, %struct.hv* %260, i32 0, i32 3
  %svu_hash306 = bitcast %union.anon.5* %sv_u305 to %struct.he***
  %261 = load %struct.he**, %struct.he*** %svu_hash306, align 8
  %262 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any307 = getelementptr inbounds %struct.hv, %struct.hv* %262, i32 0, i32 0
  %263 = load %struct.xpvhv*, %struct.xpvhv** %sv_any307, align 8
  %xhv_max308 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %263, i32 0, i32 3
  %264 = load i64, i64* %xhv_max308, align 8
  %add309 = add i64 %264, 1
  %arrayidx310 = getelementptr inbounds %struct.he*, %struct.he** %261, i64 %add309
  %265 = bitcast %struct.he** %arrayidx310 to %struct.xpvhv_aux*
  %xhv_name_u311 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %265, i32 0, i32 0
  %xhvnameu_names312 = bitcast %union._xhvnameu* %xhv_name_u311 to %struct.hek***
  %266 = load %struct.hek**, %struct.hek*** %xhvnameu_names312, align 8
  %arrayidx313 = getelementptr inbounds %struct.hek*, %struct.hek** %266, i64 0
  %267 = load %struct.hek*, %struct.hek** %arrayidx313, align 8
  br label %cond.end356

cond.false314:                                    ; preds = %cond.true295
  %268 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u315 = getelementptr inbounds %struct.hv, %struct.hv* %268, i32 0, i32 3
  %svu_hash316 = bitcast %union.anon.5* %sv_u315 to %struct.he***
  %269 = load %struct.he**, %struct.he*** %svu_hash316, align 8
  %270 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any317 = getelementptr inbounds %struct.hv, %struct.hv* %270, i32 0, i32 0
  %271 = load %struct.xpvhv*, %struct.xpvhv** %sv_any317, align 8
  %xhv_max318 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %271, i32 0, i32 3
  %272 = load i64, i64* %xhv_max318, align 8
  %add319 = add i64 %272, 1
  %arrayidx320 = getelementptr inbounds %struct.he*, %struct.he** %269, i64 %add319
  %273 = bitcast %struct.he** %arrayidx320 to %struct.xpvhv_aux*
  %xhv_name_count321 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %273, i32 0, i32 4
  %274 = load i32, i32* %xhv_name_count321, align 4
  %cmp322 = icmp slt i32 %274, -1
  br i1 %cmp322, label %cond.true323, label %cond.false333

cond.true323:                                     ; preds = %cond.false314
  %275 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u324 = getelementptr inbounds %struct.hv, %struct.hv* %275, i32 0, i32 3
  %svu_hash325 = bitcast %union.anon.5* %sv_u324 to %struct.he***
  %276 = load %struct.he**, %struct.he*** %svu_hash325, align 8
  %277 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any326 = getelementptr inbounds %struct.hv, %struct.hv* %277, i32 0, i32 0
  %278 = load %struct.xpvhv*, %struct.xpvhv** %sv_any326, align 8
  %xhv_max327 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %278, i32 0, i32 3
  %279 = load i64, i64* %xhv_max327, align 8
  %add328 = add i64 %279, 1
  %arrayidx329 = getelementptr inbounds %struct.he*, %struct.he** %276, i64 %add328
  %280 = bitcast %struct.he** %arrayidx329 to %struct.xpvhv_aux*
  %xhv_name_u330 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %280, i32 0, i32 0
  %xhvnameu_names331 = bitcast %union._xhvnameu* %xhv_name_u330 to %struct.hek***
  %281 = load %struct.hek**, %struct.hek*** %xhvnameu_names331, align 8
  %arrayidx332 = getelementptr inbounds %struct.hek*, %struct.hek** %281, i64 1
  %282 = load %struct.hek*, %struct.hek** %arrayidx332, align 8
  br label %cond.end354

cond.false333:                                    ; preds = %cond.false314
  %283 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u334 = getelementptr inbounds %struct.hv, %struct.hv* %283, i32 0, i32 3
  %svu_hash335 = bitcast %union.anon.5* %sv_u334 to %struct.he***
  %284 = load %struct.he**, %struct.he*** %svu_hash335, align 8
  %285 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any336 = getelementptr inbounds %struct.hv, %struct.hv* %285, i32 0, i32 0
  %286 = load %struct.xpvhv*, %struct.xpvhv** %sv_any336, align 8
  %xhv_max337 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %286, i32 0, i32 3
  %287 = load i64, i64* %xhv_max337, align 8
  %add338 = add i64 %287, 1
  %arrayidx339 = getelementptr inbounds %struct.he*, %struct.he** %284, i64 %add338
  %288 = bitcast %struct.he** %arrayidx339 to %struct.xpvhv_aux*
  %xhv_name_count340 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %288, i32 0, i32 4
  %289 = load i32, i32* %xhv_name_count340, align 4
  %cmp341 = icmp eq i32 %289, -1
  br i1 %cmp341, label %cond.true342, label %cond.false343

cond.true342:                                     ; preds = %cond.false333
  br label %cond.end352

cond.false343:                                    ; preds = %cond.false333
  %290 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_u344 = getelementptr inbounds %struct.hv, %struct.hv* %290, i32 0, i32 3
  %svu_hash345 = bitcast %union.anon.5* %sv_u344 to %struct.he***
  %291 = load %struct.he**, %struct.he*** %svu_hash345, align 8
  %292 = load %struct.hv*, %struct.hv** %stash, align 8
  %sv_any346 = getelementptr inbounds %struct.hv, %struct.hv* %292, i32 0, i32 0
  %293 = load %struct.xpvhv*, %struct.xpvhv** %sv_any346, align 8
  %xhv_max347 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %293, i32 0, i32 3
  %294 = load i64, i64* %xhv_max347, align 8
  %add348 = add i64 %294, 1
  %arrayidx349 = getelementptr inbounds %struct.he*, %struct.he** %291, i64 %add348
  %295 = bitcast %struct.he** %arrayidx349 to %struct.xpvhv_aux*
  %xhv_name_u350 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %295, i32 0, i32 0
  %xhvnameu_name351 = bitcast %union._xhvnameu* %xhv_name_u350 to %struct.hek**
  %296 = load %struct.hek*, %struct.hek** %xhvnameu_name351, align 8
  br label %cond.end352

cond.end352:                                      ; preds = %cond.false343, %cond.true342
  %cond353 = phi %struct.hek* [ null, %cond.true342 ], [ %296, %cond.false343 ]
  br label %cond.end354

cond.end354:                                      ; preds = %cond.end352, %cond.true323
  %cond355 = phi %struct.hek* [ %282, %cond.true323 ], [ %cond353, %cond.end352 ]
  br label %cond.end356

cond.end356:                                      ; preds = %cond.end354, %cond.true304
  %cond357 = phi %struct.hek* [ %267, %cond.true304 ], [ %cond355, %cond.end354 ]
  %hek_key358 = getelementptr inbounds %struct.hek, %struct.hek* %cond357, i32 0, i32 2
  %arraydecay359 = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key358, i64 0, i64 0
  %tobool360 = icmp ne i8* %arraydecay359, null
  br i1 %tobool360, label %if.then362, label %if.else363

cond.false361:                                    ; preds = %land.lhs.true286, %land.lhs.true276, %lor.lhs.false
  br i1 false, label %if.then362, label %if.else363

if.then362:                                       ; preds = %cond.false361, %cond.end356, %land.lhs.true271
  %297 = load %struct.hv*, %struct.hv** %stash, align 8
  call void @Perl_mro_isa_changed_in(%struct.hv* %297)
  br label %if.end370

if.else363:                                       ; preds = %cond.false361, %cond.end356, %land.lhs.true266, %if.end258
  %298 = load i8, i8* %method_changed, align 1
  %tobool364 = trunc i8 %298 to i1
  br i1 %tobool364, label %if.then365, label %if.end369

if.then365:                                       ; preds = %if.else363
  %299 = load %struct.sv*, %struct.sv** %sv, align 8
  %300 = bitcast %struct.sv* %299 to %struct.gv*
  %sv_any366 = getelementptr inbounds %struct.gv, %struct.gv* %300, i32 0, i32 0
  %301 = load %struct.xpvgv*, %struct.xpvgv** %sv_any366, align 8
  %xnv_u367 = getelementptr inbounds %struct.xpvgv, %struct.xpvgv* %301, i32 0, i32 5
  %xgv_stash368 = bitcast %union._xnvu* %xnv_u367 to %struct.hv**
  %302 = load %struct.hv*, %struct.hv** %xgv_stash368, align 8
  call void @Perl_mro_method_changed_in(%struct.hv* %302)
  br label %if.end369

if.end369:                                        ; preds = %if.then365, %if.else363
  br label %if.end370

if.end370:                                        ; preds = %if.end369, %if.then362
  br label %sw.epilog

sw.default:                                       ; preds = %if.end9
  %303 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags371 = getelementptr inbounds %struct.sv, %struct.sv* %303, i32 0, i32 2
  %304 = load i32, i32* %sv_flags371, align 4
  %and372 = and i32 %304, 255
  %cmp373 = icmp uge i32 %and372, 3
  br i1 %cmp373, label %land.lhs.true374, label %if.end438

land.lhs.true374:                                 ; preds = %sw.default
  %305 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u375 = getelementptr inbounds %struct.sv, %struct.sv* %305, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u375 to i8**
  %306 = load i8*, i8** %svu_pv, align 8
  %add.ptr376 = getelementptr inbounds i8, i8* %306, i64 0
  %tobool377 = icmp ne i8* %add.ptr376, null
  br i1 %tobool377, label %land.lhs.true378, label %if.end438

land.lhs.true378:                                 ; preds = %land.lhs.true374
  %307 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any379 = getelementptr inbounds %struct.sv, %struct.sv* %307, i32 0, i32 0
  %308 = load i8*, i8** %sv_any379, align 8
  %309 = bitcast i8* %308 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %309, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %310 = load i64, i64* %xpvlenu_len, align 8
  %tobool380 = icmp ne i64 %310, 0
  br i1 %tobool380, label %if.then381, label %if.end438

if.then381:                                       ; preds = %land.lhs.true378
  br label %do.body382

do.body382:                                       ; preds = %if.then381
  %311 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any383 = getelementptr inbounds %struct.sv, %struct.sv* %311, i32 0, i32 0
  %312 = load i8*, i8** %sv_any383, align 8
  %313 = bitcast i8* %312 to %struct.xpv*
  %xpv_len_u384 = getelementptr inbounds %struct.xpv, %struct.xpv* %313, i32 0, i32 3
  %xpvlenu_len385 = bitcast %union.anon.18* %xpv_len_u384 to i64*
  %314 = load i64, i64* %xpvlenu_len385, align 8
  %tobool386 = icmp ne i64 %314, 0
  br i1 %tobool386, label %if.then387, label %if.end427

if.then387:                                       ; preds = %do.body382
  %315 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags388 = getelementptr inbounds %struct.sv, %struct.sv* %315, i32 0, i32 2
  %316 = load i32, i32* %sv_flags388, align 4
  %and389 = and i32 %316, 33554432
  %tobool390 = icmp ne i32 %and389, 0
  br i1 %tobool390, label %cond.true391, label %cond.false392

cond.true391:                                     ; preds = %if.then387
  br i1 true, label %if.then393, label %if.end424

cond.false392:                                    ; preds = %if.then387
  br i1 false, label %if.then393, label %if.end424

if.then393:                                       ; preds = %cond.false392, %cond.true391
  br label %do.body394

do.body394:                                       ; preds = %if.then393
  %317 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags395 = getelementptr inbounds %struct.sv, %struct.sv* %317, i32 0, i32 2
  %318 = load i32, i32* %sv_flags395, align 4
  %and396 = and i32 %318, 33554432
  %tobool397 = icmp ne i32 %and396, 0
  br i1 %tobool397, label %if.then398, label %if.else411

if.then398:                                       ; preds = %do.body394
  %319 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u399 = getelementptr inbounds %struct.sv, %struct.sv* %319, i32 0, i32 3
  %svu_pv400 = bitcast %union.anon* %sv_u399 to i8**
  %320 = load i8*, i8** %svu_pv400, align 8
  %add.ptr401 = getelementptr inbounds i8, i8* %320, i64 0
  %arrayidx402 = getelementptr inbounds i8, i8* %add.ptr401, i64 -1
  %321 = load i8, i8* %arrayidx402, align 1
  %conv = zext i8 %321 to i64
  store i64 %conv, i64* %zok, align 8
  %322 = load i64, i64* %zok, align 8
  %tobool403 = icmp ne i64 %322, 0
  br i1 %tobool403, label %if.end410, label %if.then404

if.then404:                                       ; preds = %if.then398
  %323 = bitcast i64* %zok to i8*
  %324 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u405 = getelementptr inbounds %struct.sv, %struct.sv* %324, i32 0, i32 3
  %svu_pv406 = bitcast %union.anon* %sv_u405 to i8**
  %325 = load i8*, i8** %svu_pv406, align 8
  %add.ptr407 = getelementptr inbounds i8, i8* %325, i64 0
  %add.ptr408 = getelementptr inbounds i8, i8* %add.ptr407, i64 -1
  %add.ptr409 = getelementptr inbounds i8, i8* %add.ptr408, i64 -8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %323, i8* align 1 %add.ptr409, i64 8, i1 false)
  br label %if.end410

if.end410:                                        ; preds = %if.then404, %if.then398
  br label %if.end412

if.else411:                                       ; preds = %do.body394
  store i64 0, i64* %zok, align 8
  br label %if.end412

if.end412:                                        ; preds = %if.else411, %if.end410
  br label %do.end413

do.end413:                                        ; preds = %if.end412
  br label %do.body414

do.body414:                                       ; preds = %do.end413
  %326 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u415 = getelementptr inbounds %struct.sv, %struct.sv* %326, i32 0, i32 3
  %svu_pv416 = bitcast %union.anon* %sv_u415 to i8**
  %327 = load i8*, i8** %svu_pv416, align 8
  %add.ptr417 = getelementptr inbounds i8, i8* %327, i64 0
  %328 = load i64, i64* %zok, align 8
  %idx.neg = sub i64 0, %328
  %add.ptr418 = getelementptr inbounds i8, i8* %add.ptr417, i64 %idx.neg
  %329 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u419 = getelementptr inbounds %struct.sv, %struct.sv* %329, i32 0, i32 3
  %svu_pv420 = bitcast %union.anon* %sv_u419 to i8**
  store i8* %add.ptr418, i8** %svu_pv420, align 8
  br label %do.end421

do.end421:                                        ; preds = %do.body414
  %330 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags422 = getelementptr inbounds %struct.sv, %struct.sv* %330, i32 0, i32 2
  %331 = load i32, i32* %sv_flags422, align 4
  %and423 = and i32 %331, -33554433
  store i32 %and423, i32* %sv_flags422, align 4
  br label %if.end424

if.end424:                                        ; preds = %do.end421, %cond.false392, %cond.true391
  %332 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u425 = getelementptr inbounds %struct.sv, %struct.sv* %332, i32 0, i32 3
  %svu_pv426 = bitcast %union.anon* %sv_u425 to i8**
  %333 = load i8*, i8** %svu_pv426, align 8
  call void @Perl_safesysfree(i8* %333)
  br label %if.end427

if.end427:                                        ; preds = %if.end424, %do.body382
  br label %do.end428

do.end428:                                        ; preds = %if.end427
  br label %do.body429

do.body429:                                       ; preds = %do.end428
  %334 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u430 = getelementptr inbounds %struct.sv, %struct.sv* %334, i32 0, i32 3
  %svu_pv431 = bitcast %union.anon* %sv_u430 to i8**
  store i8* null, i8** %svu_pv431, align 8
  br label %do.end432

do.end432:                                        ; preds = %do.body429
  br label %do.body433

do.body433:                                       ; preds = %do.end432
  %335 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any434 = getelementptr inbounds %struct.sv, %struct.sv* %335, i32 0, i32 0
  %336 = load i8*, i8** %sv_any434, align 8
  %337 = bitcast i8* %336 to %struct.xpv*
  %xpv_len_u435 = getelementptr inbounds %struct.xpv, %struct.xpv* %337, i32 0, i32 3
  %xpvlenu_len436 = bitcast %union.anon.18* %xpv_len_u435 to i64*
  store i64 0, i64* %xpvlenu_len436, align 8
  br label %do.end437

do.end437:                                        ; preds = %do.body433
  br label %if.end438

if.end438:                                        ; preds = %do.end437, %land.lhs.true378, %land.lhs.true374, %sw.default
  %338 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags439 = getelementptr inbounds %struct.sv, %struct.sv* %338, i32 0, i32 2
  %339 = load i32, i32* %sv_flags439, align 4
  %and440 = and i32 %339, 1610547455
  store i32 %and440, i32* %sv_flags439, align 4
  %340 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags441 = getelementptr inbounds %struct.sv, %struct.sv* %340, i32 0, i32 2
  %341 = load i32, i32* %sv_flags441, align 4
  %and442 = and i32 %341, 33554432
  %tobool443 = icmp ne i32 %and442, 0
  br i1 %tobool443, label %land.rhs444, label %land.end447

land.rhs444:                                      ; preds = %if.end438
  %342 = load %struct.sv*, %struct.sv** %sv, align 8
  %call445 = call i32 @Perl_sv_backoff(%struct.sv* %342)
  %tobool446 = icmp ne i32 %call445, 0
  br label %land.end447

land.end447:                                      ; preds = %land.rhs444, %if.end438
  %343 = phi i1 [ false, %if.end438 ], [ %tobool446, %land.rhs444 ]
  %land.ext = zext i1 %343 to i32
  br label %do.body448

do.body448:                                       ; preds = %land.end447
  %344 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags449 = getelementptr inbounds %struct.sv, %struct.sv* %344, i32 0, i32 2
  %345 = load i32, i32* %sv_flags449, align 4
  %and450 = and i32 %345, 4194304
  %tobool451 = icmp ne i32 %and450, 0
  br i1 %tobool451, label %cond.true452, label %cond.false453

cond.true452:                                     ; preds = %do.body448
  br i1 true, label %if.then454, label %if.end456

cond.false453:                                    ; preds = %do.body448
  br i1 false, label %if.then454, label %if.end456

if.then454:                                       ; preds = %cond.false453, %cond.true452
  %346 = load %struct.sv*, %struct.sv** %sv, align 8
  %call455 = call i32 @Perl_mg_set(%struct.sv* %346)
  br label %if.end456

if.end456:                                        ; preds = %if.then454, %cond.false453, %cond.true452
  br label %do.end457

do.end457:                                        ; preds = %if.end456
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end457, %if.end370, %sw.bb48, %sw.bb13, %sw.bb12, %sw.bb
  %347 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %347, align 8
  %348 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next458 = getelementptr inbounds %struct.op, %struct.op* %348, i32 0, i32 0
  %349 = load %struct.op*, %struct.op** %op_next458, align 8
  store %struct.op* %349, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %sw.epilog, %if.then4, %do.end
  %350 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %350
}

declare dso_local void @Perl_sv_force_normal_flags(%struct.sv*, i32) #1

declare dso_local void @Perl_av_undef(%struct.av*) #1

declare dso_local void @Perl_hv_undef_flags(%struct.hv*, i32) #1

declare dso_local %struct.sv* @Perl_cv_const_sv(%struct.cv*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.hek* @CvNAME_HEK(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %5, i32 0, i32 0
  %6 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %7 = bitcast %struct.xpvcv* %6 to i8*
  %8 = bitcast i8* %7 to %struct.xpvcv*
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %8, i32 0, i32 7
  %xcv_hek = bitcast %union.anon.12* %xcv_gv_u to %struct.hek**
  %9 = load %struct.hek*, %struct.hek** %xcv_hek, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hek* [ %9, %cond.true ], [ null, %cond.false ]
  ret %struct.hek* %cond
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gv* @S_CvGV(%struct.cv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.cv*, align 8
  store %struct.cv* %sv, %struct.cv** %sv.addr, align 8
  %0 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %0, i32 0, i32 0
  %1 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %2 = bitcast %struct.xpvcv* %1 to i8*
  %3 = bitcast i8* %2 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %3, i32 0, i32 12
  %4 = load i32, i32* %xcv_flags, align 4
  %and = and i32 %4, 32768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %call = call %struct.gv* @Perl_cvgv_from_hek(%struct.cv* %5)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.cv*, %struct.cv** %sv.addr, align 8
  %sv_any1 = getelementptr inbounds %struct.cv, %struct.cv* %6, i32 0, i32 0
  %7 = load %struct.xpvcv*, %struct.xpvcv** %sv_any1, align 8
  %8 = bitcast %struct.xpvcv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.xpvcv*
  %xcv_gv_u = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %9, i32 0, i32 7
  %xcv_gv = bitcast %union.anon.12* %xcv_gv_u to %struct.gv**
  %10 = load %struct.gv*, %struct.gv** %xcv_gv, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gv* [ %call, %cond.true ], [ %10, %cond.false ]
  ret %struct.gv* %cond
}

declare dso_local void @Perl_cv_undef_flags(%struct.cv*, i32) #1

declare dso_local void @Perl_gp_free(%struct.gv*) #1

declare dso_local i8* @Perl_safesyscalloc(i64, i64) #1

declare dso_local %struct.gp* @Perl_gp_ref(%struct.gp*) #1

declare dso_local void @Perl_mro_package_moved(%struct.hv*, %struct.hv*, %struct.gv*, i32) #1

declare dso_local void @Perl_mro_isa_changed_in(%struct.hv*) #1

declare dso_local void @Perl_mro_method_changed_in(%struct.hv*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local void @Perl_safesysfree(i8*) #1

declare dso_local i32 @Perl_sv_backoff(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_postinc() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %inc = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 51
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 4
  %bf.load2 = load i16, i16* %op_type1, align 8
  %bf.clear3 = and i16 %bf.load2, 511
  %bf.cast4 = zext i16 %bf.clear3 to i32
  %cmp5 = icmp eq i32 %bf.cast4, 52
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %7 = phi i1 [ true, %entry ], [ %cmp5, %lor.rhs ]
  %frombool = zext i1 %7 to i8
  store i8 %frombool, i8* %inc, align 1
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %and = and i32 %10, 255
  %cmp6 = icmp uge i32 %and, 11
  br i1 %cmp6, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %13, 49152
  %cmp9 = icmp eq i32 %and8, 32768
  br i1 %cmp9, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %16, 255
  %cmp12 = icmp eq i32 %and11, 9
  br i1 %cmp12, label %land.lhs.true17, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %land.lhs.true
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %19, 255
  %cmp16 = icmp eq i32 %and15, 10
  br i1 %cmp16, label %land.lhs.true17, label %if.end

land.lhs.true17:                                  ; preds = %lor.lhs.false13, %land.lhs.true
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %22, 16777216
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true17, %lor.end
  call void @Perl_croak_no_modify()
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true17, %lor.lhs.false13, %lor.lhs.false
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %25, 2048
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  %call = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call, %struct.sv** %targ, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %26, %struct.sv* %28, i32 1538)
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %31, 134283264
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.else, label %land.lhs.true28

land.lhs.true28:                                  ; preds = %if.end24
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %34, 2097152
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %if.else, label %land.lhs.true32

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %37, -2147483392
  %cmp35 = icmp eq i32 %and34, 256
  br i1 %cmp35, label %land.lhs.true36, label %if.else

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %40, 512
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.else, label %land.lhs.true40

land.lhs.true40:                                  ; preds = %land.lhs.true36
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %43, 1024
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.else, label %land.lhs.true44

land.lhs.true44:                                  ; preds = %land.lhs.true40
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any, align 8
  %47 = bitcast i8* %46 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %47, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %48 = load i64, i64* %xivu_iv, align 8
  %49 = load i8, i8* %inc, align 1
  %tobool45 = trunc i8 %49 to i1
  %50 = zext i1 %tobool45 to i64
  %cond = select i1 %tobool45, i64 9223372036854775807, i64 -9223372036854775808
  %cmp46 = icmp ne i64 %48, %cond
  br i1 %cmp46, label %if.then47, label %if.else

if.then47:                                        ; preds = %land.lhs.true44
  br label %do.body

do.body:                                          ; preds = %if.then47
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 0
  %53 = load i8*, i8** %sv_any48, align 8
  %54 = bitcast i8* %53 to %struct.xpviv*
  %xiv_u49 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %54, i32 0, i32 4
  %xivu_iv50 = bitcast %union._xivu* %xiv_u49 to i64*
  %55 = load i64, i64* %xivu_iv50, align 8
  %56 = load i8, i8* %inc, align 1
  %tobool51 = trunc i8 %56 to i1
  %57 = zext i1 %tobool51 to i64
  %cond52 = select i1 %tobool51, i32 1, i32 -1
  %conv = sext i32 %cond52 to i64
  %add = add nsw i64 %55, %conv
  %58 = load %struct.sv**, %struct.sv*** %sp, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any53, align 8
  %61 = bitcast i8* %60 to %struct.xpviv*
  %xiv_u54 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %61, i32 0, i32 4
  %xivu_iv55 = bitcast %union._xivu* %xiv_u54 to i64*
  store i64 %add, i64* %xivu_iv55, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %63 = load %struct.sv*, %struct.sv** %62, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 2
  %64 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %64, -24577
  store i32 %and57, i32* %sv_flags56, align 4
  br label %if.end62

if.else:                                          ; preds = %land.lhs.true44, %land.lhs.true40, %land.lhs.true36, %land.lhs.true32, %land.lhs.true28, %if.end24
  %65 = load i8, i8* %inc, align 1
  %tobool58 = trunc i8 %65 to i1
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %if.else
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %67 = load %struct.sv*, %struct.sv** %66, align 8
  call void @Perl_sv_inc_nomg(%struct.sv* %67)
  br label %if.end61

if.else60:                                        ; preds = %if.else
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  call void @Perl_sv_dec_nomg(%struct.sv* %69)
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then59
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %do.end
  br label %do.body63

do.body63:                                        ; preds = %if.end62
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 2
  %72 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %72, 4194304
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body63
  br i1 true, label %if.then67, label %if.end69

cond.false:                                       ; preds = %do.body63
  br i1 false, label %if.then67, label %if.end69

if.then67:                                        ; preds = %cond.false, %cond.true
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %call68 = call i32 @Perl_mg_set(%struct.sv* %74)
  br label %if.end69

if.end69:                                         ; preds = %if.then67, %cond.false, %cond.true
  br label %do.end70

do.end70:                                         ; preds = %if.end69
  %75 = load i8, i8* %inc, align 1
  %tobool71 = trunc i8 %75 to i1
  br i1 %tobool71, label %land.lhs.true73, label %if.end88

land.lhs.true73:                                  ; preds = %do.end70
  %76 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %77, 65280
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %if.end88, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %land.lhs.true73
  %78 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %79, 255
  %cmp80 = icmp eq i32 %and79, 8
  br i1 %cmp80, label %if.end88, label %lor.lhs.false82

lor.lhs.false82:                                  ; preds = %lor.lhs.false77
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %81, 16826623
  %cmp85 = icmp eq i32 %and84, 16777226
  br i1 %cmp85, label %if.end88, label %if.then87

if.then87:                                        ; preds = %lor.lhs.false82
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %82, i64 0)
  br label %if.end88

if.end88:                                         ; preds = %if.then87, %lor.lhs.false82, %lor.lhs.false77, %land.lhs.true73, %do.end70
  br label %do.body89

do.body89:                                        ; preds = %if.end88
  br label %do.body90

do.body90:                                        ; preds = %do.body89
  %83 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %84, 4194304
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %do.body90
  br i1 true, label %if.then96, label %if.end98

cond.false95:                                     ; preds = %do.body90
  br i1 false, label %if.then96, label %if.end98

if.then96:                                        ; preds = %cond.false95, %cond.true94
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %call97 = call i32 @Perl_mg_set(%struct.sv* %85)
  br label %if.end98

if.end98:                                         ; preds = %if.then96, %cond.false95, %cond.true94
  br label %do.end99

do.end99:                                         ; preds = %if.end98
  %86 = load %struct.sv*, %struct.sv** %targ, align 8
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %86, %struct.sv** %87, align 8
  br label %do.end100

do.end100:                                        ; preds = %do.end99
  %88 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 0
  %89 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %89
}

declare dso_local void @Perl_croak_no_modify() #1

declare dso_local void @Perl_sv_setsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local void @Perl_sv_inc_nomg(%struct.sv*) #1

declare dso_local void @Perl_sv_dec_nomg(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_pow() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %is_int = alloca i8, align 1
  %power = alloca i64, align 8
  %baseuok = alloca i8, align 1
  %baseuv = alloca i64, align 8
  %iv = alloca i64, align 8
  %iv64 = alloca i64, align 8
  %result = alloca double, align 8
  %base = alloca double, align 8
  %highbit = alloca i32, align 4
  %diff = alloca i32, align 4
  %result144 = alloca i64, align 8
  %base145 = alloca i64, align 8
  %odd_power = alloca i8, align 1
  %right = alloca double, align 8
  %left = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  store i8 0, i8* %is_int, align 1
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 40, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 4352
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false21, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 1536
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false21

cond.true16:                                      ; preds = %land.lhs.true12
  %25 = load %struct.sv*, %struct.sv** %svr, align 8
  %call17 = call i64 @Perl_sv_2iv_flags(%struct.sv* %25, i32 0)
  %26 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %27, 256
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true25, label %if.end245

cond.false21:                                     ; preds = %land.lhs.true12, %do.end
  %28 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %29, 256
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end245

land.lhs.true25:                                  ; preds = %cond.false21, %cond.true16
  %30 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %31, 4352
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false38, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %land.lhs.true25
  %32 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %33, 1536
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false38

cond.true33:                                      ; preds = %land.lhs.true29
  %34 = load %struct.sv*, %struct.sv** %svl, align 8
  %call34 = call i64 @Perl_sv_2iv_flags(%struct.sv* %34, i32 0)
  %35 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %36, 256
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then42, label %if.end245

cond.false38:                                     ; preds = %land.lhs.true29, %land.lhs.true25
  %37 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %38, 256
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end245

if.then42:                                        ; preds = %cond.false38, %cond.true33
  %39 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %40, -2147483392
  %cmp = icmp eq i32 %and44, -2147483392
  br i1 %cmp, label %if.then46, label %if.else

if.then46:                                        ; preds = %if.then42
  %41 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any, align 8
  %43 = bitcast i8* %42 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %43, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %44 = load i64, i64* %xivu_uv, align 8
  store i64 %44, i64* %power, align 8
  br label %if.end53

if.else:                                          ; preds = %if.then42
  %45 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any47, align 8
  %47 = bitcast i8* %46 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %47, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %48 = load i64, i64* %xivu_iv, align 8
  store i64 %48, i64* %iv, align 8
  %49 = load i64, i64* %iv, align 8
  %cmp48 = icmp sge i64 %49, 0
  br i1 %cmp48, label %if.then50, label %if.else51

if.then50:                                        ; preds = %if.else
  %50 = load i64, i64* %iv, align 8
  store i64 %50, i64* %power, align 8
  br label %if.end52

if.else51:                                        ; preds = %if.else
  br label %float_it

if.end52:                                         ; preds = %if.then50
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then46
  %51 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %52, -2147483392
  %cmp56 = icmp eq i32 %and55, -2147483392
  %frombool = zext i1 %cmp56 to i8
  store i8 %frombool, i8* %baseuok, align 1
  %53 = load i8, i8* %baseuok, align 1
  %tobool58 = trunc i8 %53 to i1
  br i1 %tobool58, label %if.then59, label %if.else63

if.then59:                                        ; preds = %if.end53
  %54 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any60, align 8
  %56 = bitcast i8* %55 to %struct.xpvuv*
  %xuv_u61 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %56, i32 0, i32 4
  %xivu_uv62 = bitcast %union._xivu* %xuv_u61 to i64*
  %57 = load i64, i64* %xivu_uv62, align 8
  store i64 %57, i64* %baseuv, align 8
  br label %if.end73

if.else63:                                        ; preds = %if.end53
  %58 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any65 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any65, align 8
  %60 = bitcast i8* %59 to %struct.xpviv*
  %xiv_u66 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %60, i32 0, i32 4
  %xivu_iv67 = bitcast %union._xivu* %xiv_u66 to i64*
  %61 = load i64, i64* %xivu_iv67, align 8
  store i64 %61, i64* %iv64, align 8
  %62 = load i64, i64* %iv64, align 8
  %cmp68 = icmp sge i64 %62, 0
  br i1 %cmp68, label %if.then70, label %if.else71

if.then70:                                        ; preds = %if.else63
  %63 = load i64, i64* %iv64, align 8
  store i64 %63, i64* %baseuv, align 8
  store i8 1, i8* %baseuok, align 1
  br label %if.end72

if.else71:                                        ; preds = %if.else63
  %64 = load i64, i64* %iv64, align 8
  %sub = sub nsw i64 0, %64
  store i64 %sub, i64* %baseuv, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.else71, %if.then70
  br label %if.end73

if.end73:                                         ; preds = %if.end72, %if.then59
  store i8 1, i8* %is_int, align 1
  %65 = load i64, i64* %baseuv, align 8
  %66 = load i64, i64* %baseuv, align 8
  %sub74 = sub i64 %66, 1
  %and75 = and i64 %65, %sub74
  %tobool76 = icmp ne i64 %and75, 0
  br i1 %tobool76, label %if.else128, label %if.then77

if.then77:                                        ; preds = %if.end73
  store double 1.000000e+00, double* %result, align 8
  %67 = load i8, i8* %baseuok, align 1
  %tobool78 = trunc i8 %67 to i1
  br i1 %tobool78, label %cond.true80, label %cond.false82

cond.true80:                                      ; preds = %if.then77
  %68 = load i64, i64* %baseuv, align 8
  %conv81 = uitofp i64 %68 to double
  br label %cond.end84

cond.false82:                                     ; preds = %if.then77
  %69 = load i64, i64* %baseuv, align 8
  %conv83 = uitofp i64 %69 to double
  %fneg = fneg double %conv83
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true80
  %cond85 = phi double [ %conv81, %cond.true80 ], [ %fneg, %cond.false82 ]
  store double %cond85, double* %base, align 8
  %70 = load i64, i64* %power, align 8
  %and86 = and i64 %70, 1
  %tobool87 = icmp ne i64 %and86, 0
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %cond.end84
  %71 = load double, double* %base, align 8
  %72 = load double, double* %result, align 8
  %mul = fmul double %72, %71
  store double %mul, double* %result, align 8
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %cond.end84
  br label %while.cond

while.cond:                                       ; preds = %if.end96, %if.end89
  %73 = load i64, i64* %power, align 8
  %shr = lshr i64 %73, 1
  store i64 %shr, i64* %power, align 8
  %tobool90 = icmp ne i64 %shr, 0
  br i1 %tobool90, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %74 = load double, double* %base, align 8
  %75 = load double, double* %base, align 8
  %mul91 = fmul double %75, %74
  store double %mul91, double* %base, align 8
  %76 = load i64, i64* %power, align 8
  %and92 = and i64 %76, 1
  %tobool93 = icmp ne i64 %and92, 0
  br i1 %tobool93, label %if.then94, label %if.end96

if.then94:                                        ; preds = %while.body
  %77 = load double, double* %base, align 8
  %78 = load double, double* %result, align 8
  %mul95 = fmul double %78, %77
  store double %mul95, double* %result, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.then94, %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %79, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  br label %do.body97

do.body97:                                        ; preds = %while.end
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %81 = load double, double* %result, align 8
  call void @Perl_sv_setnv(%struct.sv* %80, double %81)
  br label %do.body98

do.body98:                                        ; preds = %do.body97
  br label %do.body99

do.body99:                                        ; preds = %do.body98
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %83, 4194304
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %cond.true103, label %cond.false104

cond.true103:                                     ; preds = %do.body99
  br i1 true, label %if.then105, label %if.end107

cond.false104:                                    ; preds = %do.body99
  br i1 false, label %if.then105, label %if.end107

if.then105:                                       ; preds = %cond.false104, %cond.true103
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %call106 = call i32 @Perl_mg_set(%struct.sv* %84)
  br label %if.end107

if.end107:                                        ; preds = %if.then105, %cond.false104, %cond.true103
  br label %do.end108

do.end108:                                        ; preds = %if.end107
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %85, %struct.sv** %86, align 8
  br label %do.end109

do.end109:                                        ; preds = %do.end108
  br label %do.end110

do.end110:                                        ; preds = %do.end109
  %87 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags111 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %88, 4352
  %tobool113 = icmp ne i32 %and112, 0
  br i1 %tobool113, label %cond.false122, label %land.lhs.true114

land.lhs.true114:                                 ; preds = %do.end110
  %89 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %90, 1536
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.true118, label %cond.false122

cond.true118:                                     ; preds = %land.lhs.true114
  %91 = load %struct.sv*, %struct.sv** %svr, align 8
  %call119 = call i64 @Perl_sv_2iv_flags(%struct.sv* %91, i32 0)
  %92 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags120 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags120, align 4
  %and121 = and i32 %93, 256
  br label %cond.end125

cond.false122:                                    ; preds = %land.lhs.true114, %do.end110
  %94 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags123 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags123, align 4
  %and124 = and i32 %95, 256
  br label %cond.end125

cond.end125:                                      ; preds = %cond.false122, %cond.true118
  %cond126 = phi i32 [ %and121, %cond.true118 ], [ %and124, %cond.false122 ]
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %96, %struct.sv*** @PL_stack_sp, align 8
  %97 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next127 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 0
  %98 = load %struct.op*, %struct.op** %op_next127, align 8
  store %struct.op* %98, %struct.op** %retval, align 8
  br label %return

if.else128:                                       ; preds = %if.end73
  store i32 64, i32* %highbit, align 4
  store i32 64, i32* %diff, align 4
  br label %while.cond129

while.cond129:                                    ; preds = %if.end137, %if.else128
  %99 = load i32, i32* %diff, align 4
  %shr130 = lshr i32 %99, 1
  store i32 %shr130, i32* %diff, align 4
  %tobool131 = icmp ne i32 %shr130, 0
  br i1 %tobool131, label %while.body132, label %while.end138

while.body132:                                    ; preds = %while.cond129
  %100 = load i32, i32* %diff, align 4
  %101 = load i32, i32* %highbit, align 4
  %sub133 = sub i32 %101, %100
  store i32 %sub133, i32* %highbit, align 4
  %102 = load i64, i64* %baseuv, align 8
  %103 = load i32, i32* %highbit, align 4
  %sh_prom = zext i32 %103 to i64
  %shr134 = lshr i64 %102, %sh_prom
  %tobool135 = icmp ne i64 %shr134, 0
  br i1 %tobool135, label %if.then136, label %if.end137

if.then136:                                       ; preds = %while.body132
  %104 = load i32, i32* %diff, align 4
  %105 = load i32, i32* %highbit, align 4
  %add = add i32 %105, %104
  store i32 %add, i32* %highbit, align 4
  br label %if.end137

if.end137:                                        ; preds = %if.then136, %while.body132
  br label %while.cond129

while.end138:                                     ; preds = %while.cond129
  %106 = load i64, i64* %power, align 8
  %107 = load i32, i32* %highbit, align 4
  %conv139 = zext i32 %107 to i64
  %mul140 = mul i64 %106, %conv139
  %cmp141 = icmp ule i64 %mul140, 64
  br i1 %cmp141, label %if.then143, label %if.end243

if.then143:                                       ; preds = %while.end138
  store i64 1, i64* %result144, align 8
  %108 = load i64, i64* %baseuv, align 8
  store i64 %108, i64* %base145, align 8
  %109 = load i64, i64* %power, align 8
  %and146 = and i64 %109, 1
  %tobool147 = icmp ne i64 %and146, 0
  %110 = zext i1 %tobool147 to i64
  %cond148 = select i1 %tobool147, i32 1, i32 0
  %tobool149 = icmp ne i32 %cond148, 0
  %frombool150 = zext i1 %tobool149 to i8
  store i8 %frombool150, i8* %odd_power, align 1
  %111 = load i8, i8* %odd_power, align 1
  %tobool151 = trunc i8 %111 to i1
  br i1 %tobool151, label %if.then152, label %if.end154

if.then152:                                       ; preds = %if.then143
  %112 = load i64, i64* %base145, align 8
  %113 = load i64, i64* %result144, align 8
  %mul153 = mul i64 %113, %112
  store i64 %mul153, i64* %result144, align 8
  br label %if.end154

if.end154:                                        ; preds = %if.then152, %if.then143
  br label %while.cond155

while.cond155:                                    ; preds = %if.end164, %if.end154
  %114 = load i64, i64* %power, align 8
  %shr156 = lshr i64 %114, 1
  store i64 %shr156, i64* %power, align 8
  %tobool157 = icmp ne i64 %shr156, 0
  br i1 %tobool157, label %while.body158, label %while.end165

while.body158:                                    ; preds = %while.cond155
  %115 = load i64, i64* %base145, align 8
  %116 = load i64, i64* %base145, align 8
  %mul159 = mul i64 %116, %115
  store i64 %mul159, i64* %base145, align 8
  %117 = load i64, i64* %power, align 8
  %and160 = and i64 %117, 1
  %tobool161 = icmp ne i64 %and160, 0
  br i1 %tobool161, label %if.then162, label %if.end164

if.then162:                                       ; preds = %while.body158
  %118 = load i64, i64* %base145, align 8
  %119 = load i64, i64* %result144, align 8
  %mul163 = mul i64 %119, %118
  store i64 %mul163, i64* %result144, align 8
  br label %if.end164

if.end164:                                        ; preds = %if.then162, %while.body158
  br label %while.cond155

while.end165:                                     ; preds = %while.cond155
  %120 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr166 = getelementptr inbounds %struct.sv*, %struct.sv** %120, i32 -1
  store %struct.sv** %incdec.ptr166, %struct.sv*** %sp, align 8
  %121 = load i8, i8* %baseuok, align 1
  %tobool167 = trunc i8 %121 to i1
  br i1 %tobool167, label %if.then170, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.end165
  %122 = load i8, i8* %odd_power, align 1
  %tobool169 = trunc i8 %122 to i1
  br i1 %tobool169, label %if.else185, label %if.then170

if.then170:                                       ; preds = %lor.lhs.false, %while.end165
  br label %do.body171

do.body171:                                       ; preds = %if.then170
  %123 = load %struct.sv*, %struct.sv** %targ, align 8
  %124 = load i64, i64* %result144, align 8
  call void @Perl_sv_setuv(%struct.sv* %123, i64 %124)
  br label %do.body172

do.body172:                                       ; preds = %do.body171
  br label %do.body173

do.body173:                                       ; preds = %do.body172
  %125 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags174 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 2
  %126 = load i32, i32* %sv_flags174, align 4
  %and175 = and i32 %126, 4194304
  %tobool176 = icmp ne i32 %and175, 0
  br i1 %tobool176, label %cond.true177, label %cond.false178

cond.true177:                                     ; preds = %do.body173
  br i1 true, label %if.then179, label %if.end181

cond.false178:                                    ; preds = %do.body173
  br i1 false, label %if.then179, label %if.end181

if.then179:                                       ; preds = %cond.false178, %cond.true177
  %127 = load %struct.sv*, %struct.sv** %targ, align 8
  %call180 = call i32 @Perl_mg_set(%struct.sv* %127)
  br label %if.end181

if.end181:                                        ; preds = %if.then179, %cond.false178, %cond.true177
  br label %do.end182

do.end182:                                        ; preds = %if.end181
  %128 = load %struct.sv*, %struct.sv** %targ, align 8
  %129 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %128, %struct.sv** %129, align 8
  br label %do.end183

do.end183:                                        ; preds = %do.end182
  br label %do.end184

do.end184:                                        ; preds = %do.end183
  br label %if.end241

if.else185:                                       ; preds = %lor.lhs.false
  %130 = load i64, i64* %result144, align 8
  %cmp186 = icmp ule i64 %130, 9223372036854775807
  br i1 %cmp186, label %if.then188, label %if.else204

if.then188:                                       ; preds = %if.else185
  br label %do.body189

do.body189:                                       ; preds = %if.then188
  %131 = load %struct.sv*, %struct.sv** %targ, align 8
  %132 = load i64, i64* %result144, align 8
  %sub190 = sub nsw i64 0, %132
  call void @Perl_sv_setiv(%struct.sv* %131, i64 %sub190)
  br label %do.body191

do.body191:                                       ; preds = %do.body189
  br label %do.body192

do.body192:                                       ; preds = %do.body191
  %133 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags193 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags193, align 4
  %and194 = and i32 %134, 4194304
  %tobool195 = icmp ne i32 %and194, 0
  br i1 %tobool195, label %cond.true196, label %cond.false197

cond.true196:                                     ; preds = %do.body192
  br i1 true, label %if.then198, label %if.end200

cond.false197:                                    ; preds = %do.body192
  br i1 false, label %if.then198, label %if.end200

if.then198:                                       ; preds = %cond.false197, %cond.true196
  %135 = load %struct.sv*, %struct.sv** %targ, align 8
  %call199 = call i32 @Perl_mg_set(%struct.sv* %135)
  br label %if.end200

if.end200:                                        ; preds = %if.then198, %cond.false197, %cond.true196
  br label %do.end201

do.end201:                                        ; preds = %if.end200
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %136, %struct.sv** %137, align 8
  br label %do.end202

do.end202:                                        ; preds = %do.end201
  br label %do.end203

do.end203:                                        ; preds = %do.end202
  br label %if.end240

if.else204:                                       ; preds = %if.else185
  %138 = load i64, i64* %result144, align 8
  %cmp205 = icmp eq i64 %138, -9223372036854775808
  br i1 %cmp205, label %if.then207, label %if.else222

if.then207:                                       ; preds = %if.else204
  br label %do.body208

do.body208:                                       ; preds = %if.then207
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %139, i64 -9223372036854775808)
  br label %do.body209

do.body209:                                       ; preds = %do.body208
  br label %do.body210

do.body210:                                       ; preds = %do.body209
  %140 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags211 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 2
  %141 = load i32, i32* %sv_flags211, align 4
  %and212 = and i32 %141, 4194304
  %tobool213 = icmp ne i32 %and212, 0
  br i1 %tobool213, label %cond.true214, label %cond.false215

cond.true214:                                     ; preds = %do.body210
  br i1 true, label %if.then216, label %if.end218

cond.false215:                                    ; preds = %do.body210
  br i1 false, label %if.then216, label %if.end218

if.then216:                                       ; preds = %cond.false215, %cond.true214
  %142 = load %struct.sv*, %struct.sv** %targ, align 8
  %call217 = call i32 @Perl_mg_set(%struct.sv* %142)
  br label %if.end218

if.end218:                                        ; preds = %if.then216, %cond.false215, %cond.true214
  br label %do.end219

do.end219:                                        ; preds = %if.end218
  %143 = load %struct.sv*, %struct.sv** %targ, align 8
  %144 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %143, %struct.sv** %144, align 8
  br label %do.end220

do.end220:                                        ; preds = %do.end219
  br label %do.end221

do.end221:                                        ; preds = %do.end220
  br label %if.end239

if.else222:                                       ; preds = %if.else204
  br label %do.body223

do.body223:                                       ; preds = %if.else222
  %145 = load %struct.sv*, %struct.sv** %targ, align 8
  %146 = load i64, i64* %result144, align 8
  %conv224 = uitofp i64 %146 to double
  %fneg225 = fneg double %conv224
  call void @Perl_sv_setnv(%struct.sv* %145, double %fneg225)
  br label %do.body226

do.body226:                                       ; preds = %do.body223
  br label %do.body227

do.body227:                                       ; preds = %do.body226
  %147 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags228 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags228, align 4
  %and229 = and i32 %148, 4194304
  %tobool230 = icmp ne i32 %and229, 0
  br i1 %tobool230, label %cond.true231, label %cond.false232

cond.true231:                                     ; preds = %do.body227
  br i1 true, label %if.then233, label %if.end235

cond.false232:                                    ; preds = %do.body227
  br i1 false, label %if.then233, label %if.end235

if.then233:                                       ; preds = %cond.false232, %cond.true231
  %149 = load %struct.sv*, %struct.sv** %targ, align 8
  %call234 = call i32 @Perl_mg_set(%struct.sv* %149)
  br label %if.end235

if.end235:                                        ; preds = %if.then233, %cond.false232, %cond.true231
  br label %do.end236

do.end236:                                        ; preds = %if.end235
  %150 = load %struct.sv*, %struct.sv** %targ, align 8
  %151 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %150, %struct.sv** %151, align 8
  br label %do.end237

do.end237:                                        ; preds = %do.end236
  br label %do.end238

do.end238:                                        ; preds = %do.end237
  br label %if.end239

if.end239:                                        ; preds = %do.end238, %do.end221
  br label %if.end240

if.end240:                                        ; preds = %if.end239, %do.end203
  br label %if.end241

if.end241:                                        ; preds = %if.end240, %do.end184
  %152 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %152, %struct.sv*** @PL_stack_sp, align 8
  %153 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next242 = getelementptr inbounds %struct.op, %struct.op* %153, i32 0, i32 0
  %154 = load %struct.op*, %struct.op** %op_next242, align 8
  store %struct.op* %154, %struct.op** %retval, align 8
  br label %return

if.end243:                                        ; preds = %while.end138
  br label %if.end244

if.end244:                                        ; preds = %if.end243
  br label %if.end245

if.end245:                                        ; preds = %if.end244, %cond.false38, %cond.true33, %cond.false21, %cond.true16
  br label %float_it

float_it:                                         ; preds = %if.end245, %if.else51
  %155 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %156, 512
  %tobool248 = icmp ne i32 %and247, 0
  br i1 %tobool248, label %cond.true249, label %cond.false251

cond.true249:                                     ; preds = %float_it
  %157 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any250 = getelementptr inbounds %struct.sv, %struct.sv* %157, i32 0, i32 0
  %158 = load i8*, i8** %sv_any250, align 8
  %159 = bitcast i8* %158 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %159, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %160 = load double, double* %xnv_nv, align 8
  br label %cond.end253

cond.false251:                                    ; preds = %float_it
  %161 = load %struct.sv*, %struct.sv** %svr, align 8
  %call252 = call double @Perl_sv_2nv_flags(%struct.sv* %161, i32 0)
  br label %cond.end253

cond.end253:                                      ; preds = %cond.false251, %cond.true249
  %cond254 = phi double [ %160, %cond.true249 ], [ %call252, %cond.false251 ]
  store double %cond254, double* %right, align 8
  %162 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags255 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 2
  %163 = load i32, i32* %sv_flags255, align 4
  %and256 = and i32 %163, 512
  %tobool257 = icmp ne i32 %and256, 0
  br i1 %tobool257, label %cond.true258, label %cond.false262

cond.true258:                                     ; preds = %cond.end253
  %164 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any259 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 0
  %165 = load i8*, i8** %sv_any259, align 8
  %166 = bitcast i8* %165 to %struct.xpvnv*
  %xnv_u260 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %166, i32 0, i32 5
  %xnv_nv261 = bitcast %union._xnvu* %xnv_u260 to double*
  %167 = load double, double* %xnv_nv261, align 8
  br label %cond.end264

cond.false262:                                    ; preds = %cond.end253
  %168 = load %struct.sv*, %struct.sv** %svl, align 8
  %call263 = call double @Perl_sv_2nv_flags(%struct.sv* %168, i32 0)
  br label %cond.end264

cond.end264:                                      ; preds = %cond.false262, %cond.true258
  %cond265 = phi double [ %167, %cond.true258 ], [ %call263, %cond.false262 ]
  store double %cond265, double* %left, align 8
  %169 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr266 = getelementptr inbounds %struct.sv*, %struct.sv** %169, i32 -1
  store %struct.sv** %incdec.ptr266, %struct.sv*** %sp, align 8
  %170 = load %struct.sv*, %struct.sv** %169, align 8
  br label %do.body267

do.body267:                                       ; preds = %cond.end264
  %171 = load %struct.sv*, %struct.sv** %targ, align 8
  %172 = load double, double* %left, align 8
  %173 = load double, double* %right, align 8
  %call268 = call double @pow(double %172, double %173) #8
  call void @Perl_sv_setnv(%struct.sv* %171, double %call268)
  br label %do.body269

do.body269:                                       ; preds = %do.body267
  br label %do.body270

do.body270:                                       ; preds = %do.body269
  %174 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags271 = getelementptr inbounds %struct.sv, %struct.sv* %174, i32 0, i32 2
  %175 = load i32, i32* %sv_flags271, align 4
  %and272 = and i32 %175, 4194304
  %tobool273 = icmp ne i32 %and272, 0
  br i1 %tobool273, label %cond.true274, label %cond.false275

cond.true274:                                     ; preds = %do.body270
  br i1 true, label %if.then276, label %if.end278

cond.false275:                                    ; preds = %do.body270
  br i1 false, label %if.then276, label %if.end278

if.then276:                                       ; preds = %cond.false275, %cond.true274
  %176 = load %struct.sv*, %struct.sv** %targ, align 8
  %call277 = call i32 @Perl_mg_set(%struct.sv* %176)
  br label %if.end278

if.end278:                                        ; preds = %if.then276, %cond.false275, %cond.true274
  br label %do.end279

do.end279:                                        ; preds = %if.end278
  %177 = load %struct.sv*, %struct.sv** %targ, align 8
  %178 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %177, %struct.sv** %178, align 8
  br label %do.end280

do.end280:                                        ; preds = %do.end279
  br label %do.end281

do.end281:                                        ; preds = %do.end280
  %179 = load i8, i8* %is_int, align 1
  %tobool282 = trunc i8 %179 to i1
  br i1 %tobool282, label %if.then283, label %if.end300

if.then283:                                       ; preds = %do.end281
  %180 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags284 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags284, align 4
  %and285 = and i32 %181, 4352
  %tobool286 = icmp ne i32 %and285, 0
  br i1 %tobool286, label %cond.false295, label %land.lhs.true287

land.lhs.true287:                                 ; preds = %if.then283
  %182 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags288 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 2
  %183 = load i32, i32* %sv_flags288, align 4
  %and289 = and i32 %183, 1536
  %tobool290 = icmp ne i32 %and289, 0
  br i1 %tobool290, label %cond.true291, label %cond.false295

cond.true291:                                     ; preds = %land.lhs.true287
  %184 = load %struct.sv*, %struct.sv** %svr, align 8
  %call292 = call i64 @Perl_sv_2iv_flags(%struct.sv* %184, i32 0)
  %185 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags293 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags293, align 4
  %and294 = and i32 %186, 256
  br label %cond.end298

cond.false295:                                    ; preds = %land.lhs.true287, %if.then283
  %187 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags296 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 2
  %188 = load i32, i32* %sv_flags296, align 4
  %and297 = and i32 %188, 256
  br label %cond.end298

cond.end298:                                      ; preds = %cond.false295, %cond.true291
  %cond299 = phi i32 [ %and294, %cond.true291 ], [ %and297, %cond.false295 ]
  br label %if.end300

if.end300:                                        ; preds = %cond.end298, %do.end281
  %189 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %189, %struct.sv*** @PL_stack_sp, align 8
  %190 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next301 = getelementptr inbounds %struct.op, %struct.op* %190, i32 0, i32 0
  %191 = load %struct.op*, %struct.op** %op_next301, align 8
  store %struct.op* %191, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end300, %if.end241, %cond.end125, %if.then
  %192 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %192
}

declare dso_local zeroext i1 @Perl_try_amagic_bin(i32, i32) #1

declare dso_local i64 @Perl_sv_2iv_flags(%struct.sv*, i32) #1

declare dso_local void @Perl_sv_setnv(%struct.sv*, double) #1

declare dso_local double @Perl_sv_2nv_flags(%struct.sv*, i32) #1

; Function Attrs: nounwind
declare dso_local double @pow(double, double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_multiply() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %auvok = alloca i8, align 1
  %buvok = alloca i8, align 1
  %topmask = alloca i64, align 8
  %botmask = alloca i64, align 8
  %alow = alloca i64, align 8
  %ahigh = alloca i64, align 8
  %blow = alloca i64, align 8
  %bhigh = alloca i64, align 8
  %aiv = alloca i64, align 8
  %biv = alloca i64, align 8
  %product = alloca i64, align 8
  %product_middle = alloca i64, align 8
  %product_low = alloca i64, align 8
  %right = alloca double, align 8
  %left = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 34, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 4352
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false21, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 1536
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false21

cond.true16:                                      ; preds = %land.lhs.true12
  %25 = load %struct.sv*, %struct.sv** %svr, align 8
  %call17 = call i64 @Perl_sv_2iv_flags(%struct.sv* %25, i32 0)
  %26 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %27, 256
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then25, label %if.end214

cond.false21:                                     ; preds = %land.lhs.true12, %do.end
  %28 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %29, 256
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.end214

if.then25:                                        ; preds = %cond.false21, %cond.true16
  %30 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %31, 4352
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false38, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %if.then25
  %32 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %33, 1536
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false38

cond.true33:                                      ; preds = %land.lhs.true29
  %34 = load %struct.sv*, %struct.sv** %svl, align 8
  %call34 = call i64 @Perl_sv_2iv_flags(%struct.sv* %34, i32 0)
  %35 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %36, 256
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then42, label %if.end213

cond.false38:                                     ; preds = %land.lhs.true29, %if.then25
  %37 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %38, 256
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end213

if.then42:                                        ; preds = %cond.false38, %cond.true33
  %39 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %40, -2147483392
  %cmp = icmp eq i32 %and44, -2147483392
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %auvok, align 1
  %41 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %42, -2147483392
  %cmp48 = icmp eq i32 %and47, -2147483392
  %frombool50 = zext i1 %cmp48 to i8
  store i8 %frombool50, i8* %buvok, align 1
  store i64 -4294967296, i64* %topmask, align 8
  store i64 4294967295, i64* %botmask, align 8
  %43 = load i8, i8* %auvok, align 1
  %tobool51 = trunc i8 %43 to i1
  br i1 %tobool51, label %if.then52, label %if.else

if.then52:                                        ; preds = %if.then42
  %44 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any, align 8
  %46 = bitcast i8* %45 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %46, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %47 = load i64, i64* %xivu_uv, align 8
  store i64 %47, i64* %alow, align 8
  br label %if.end65

if.else:                                          ; preds = %if.then42
  %48 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any53, align 8
  %50 = bitcast i8* %49 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %50, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %51 = load i64, i64* %xivu_iv, align 8
  store i64 %51, i64* %aiv, align 8
  %52 = load i64, i64* %aiv, align 8
  %cmp54 = icmp sge i64 %52, 0
  br i1 %cmp54, label %if.then56, label %if.else57

if.then56:                                        ; preds = %if.else
  %53 = load i64, i64* %aiv, align 8
  store i64 %53, i64* %alow, align 8
  store i8 1, i8* %auvok, align 1
  br label %if.end64

if.else57:                                        ; preds = %if.else
  %54 = load i64, i64* %aiv, align 8
  %cmp58 = icmp eq i64 %54, -9223372036854775808
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %if.else57
  %55 = load i64, i64* %aiv, align 8
  br label %cond.end62

cond.false61:                                     ; preds = %if.else57
  %56 = load i64, i64* %aiv, align 8
  %sub = sub nsw i64 0, %56
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i64 [ %55, %cond.true60 ], [ %sub, %cond.false61 ]
  store i64 %cond63, i64* %alow, align 8
  br label %if.end64

if.end64:                                         ; preds = %cond.end62, %if.then56
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then52
  %57 = load i8, i8* %buvok, align 1
  %tobool66 = trunc i8 %57 to i1
  br i1 %tobool66, label %if.then67, label %if.else71

if.then67:                                        ; preds = %if.end65
  %58 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any68 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 0
  %59 = load i8*, i8** %sv_any68, align 8
  %60 = bitcast i8* %59 to %struct.xpvuv*
  %xuv_u69 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %60, i32 0, i32 4
  %xivu_uv70 = bitcast %union._xivu* %xuv_u69 to i64*
  %61 = load i64, i64* %xivu_uv70, align 8
  store i64 %61, i64* %blow, align 8
  br label %if.end87

if.else71:                                        ; preds = %if.end65
  %62 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any72, align 8
  %64 = bitcast i8* %63 to %struct.xpviv*
  %xiv_u73 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %64, i32 0, i32 4
  %xivu_iv74 = bitcast %union._xivu* %xiv_u73 to i64*
  %65 = load i64, i64* %xivu_iv74, align 8
  store i64 %65, i64* %biv, align 8
  %66 = load i64, i64* %biv, align 8
  %cmp75 = icmp sge i64 %66, 0
  br i1 %cmp75, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.else71
  %67 = load i64, i64* %biv, align 8
  store i64 %67, i64* %blow, align 8
  store i8 1, i8* %buvok, align 1
  br label %if.end86

if.else78:                                        ; preds = %if.else71
  %68 = load i64, i64* %biv, align 8
  %cmp79 = icmp eq i64 %68, -9223372036854775808
  br i1 %cmp79, label %cond.true81, label %cond.false82

cond.true81:                                      ; preds = %if.else78
  %69 = load i64, i64* %biv, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %if.else78
  %70 = load i64, i64* %biv, align 8
  %sub83 = sub nsw i64 0, %70
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true81
  %cond85 = phi i64 [ %69, %cond.true81 ], [ %sub83, %cond.false82 ]
  store i64 %cond85, i64* %blow, align 8
  br label %if.end86

if.end86:                                         ; preds = %cond.end84, %if.then77
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then67
  %71 = load i64, i64* %alow, align 8
  %shr = lshr i64 %71, 32
  store i64 %shr, i64* %ahigh, align 8
  %72 = load i64, i64* %alow, align 8
  %and88 = and i64 %72, 4294967295
  store i64 %and88, i64* %alow, align 8
  %73 = load i64, i64* %blow, align 8
  %shr89 = lshr i64 %73, 32
  store i64 %shr89, i64* %bhigh, align 8
  %74 = load i64, i64* %blow, align 8
  %and90 = and i64 %74, 4294967295
  store i64 %and90, i64* %blow, align 8
  %75 = load i64, i64* %ahigh, align 8
  %tobool91 = icmp ne i64 %75, 0
  br i1 %tobool91, label %land.lhs.true92, label %if.else95

land.lhs.true92:                                  ; preds = %if.end87
  %76 = load i64, i64* %bhigh, align 8
  %tobool93 = icmp ne i64 %76, 0
  br i1 %tobool93, label %if.then94, label %if.else95

if.then94:                                        ; preds = %land.lhs.true92
  br label %if.end212

if.else95:                                        ; preds = %land.lhs.true92, %if.end87
  %77 = load i64, i64* %ahigh, align 8
  %tobool96 = icmp ne i64 %77, 0
  br i1 %tobool96, label %if.else145, label %land.lhs.true97

land.lhs.true97:                                  ; preds = %if.else95
  %78 = load i64, i64* %bhigh, align 8
  %tobool98 = icmp ne i64 %78, 0
  br i1 %tobool98, label %if.else145, label %if.then99

if.then99:                                        ; preds = %land.lhs.true97
  %79 = load i64, i64* %alow, align 8
  %80 = load i64, i64* %blow, align 8
  %mul = mul i64 %79, %80
  store i64 %mul, i64* %product, align 8
  %81 = load i8, i8* %auvok, align 1
  %tobool100 = trunc i8 %81 to i1
  %conv101 = zext i1 %tobool100 to i32
  %82 = load i8, i8* %buvok, align 1
  %tobool102 = trunc i8 %82 to i1
  %conv103 = zext i1 %tobool102 to i32
  %cmp104 = icmp eq i32 %conv101, %conv103
  br i1 %cmp104, label %if.then106, label %if.else122

if.then106:                                       ; preds = %if.then99
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %83, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  br label %do.body107

do.body107:                                       ; preds = %if.then106
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %85 = load i64, i64* %product, align 8
  call void @Perl_sv_setuv(%struct.sv* %84, i64 %85)
  br label %do.body108

do.body108:                                       ; preds = %do.body107
  br label %do.body109

do.body109:                                       ; preds = %do.body108
  %86 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 2
  %87 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %87, 4194304
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %cond.true113, label %cond.false114

cond.true113:                                     ; preds = %do.body109
  br i1 true, label %if.then115, label %if.end117

cond.false114:                                    ; preds = %do.body109
  br i1 false, label %if.then115, label %if.end117

if.then115:                                       ; preds = %cond.false114, %cond.true113
  %88 = load %struct.sv*, %struct.sv** %targ, align 8
  %call116 = call i32 @Perl_mg_set(%struct.sv* %88)
  br label %if.end117

if.end117:                                        ; preds = %if.then115, %cond.false114, %cond.true113
  br label %do.end118

do.end118:                                        ; preds = %if.end117
  %89 = load %struct.sv*, %struct.sv** %targ, align 8
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %89, %struct.sv** %90, align 8
  br label %do.end119

do.end119:                                        ; preds = %do.end118
  br label %do.end120

do.end120:                                        ; preds = %do.end119
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %91, %struct.sv*** @PL_stack_sp, align 8
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next121 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 0
  %93 = load %struct.op*, %struct.op** %op_next121, align 8
  store %struct.op* %93, %struct.op** %retval, align 8
  br label %return

if.else122:                                       ; preds = %if.then99
  %94 = load i64, i64* %product, align 8
  %cmp123 = icmp ule i64 %94, -9223372036854775808
  br i1 %cmp123, label %if.then125, label %if.end143

if.then125:                                       ; preds = %if.else122
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr126 = getelementptr inbounds %struct.sv*, %struct.sv** %95, i32 -1
  store %struct.sv** %incdec.ptr126, %struct.sv*** %sp, align 8
  br label %do.body127

do.body127:                                       ; preds = %if.then125
  %96 = load %struct.sv*, %struct.sv** %targ, align 8
  %97 = load i64, i64* %product, align 8
  %sub128 = sub nsw i64 0, %97
  call void @Perl_sv_setiv(%struct.sv* %96, i64 %sub128)
  br label %do.body129

do.body129:                                       ; preds = %do.body127
  br label %do.body130

do.body130:                                       ; preds = %do.body129
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags131 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags131, align 4
  %and132 = and i32 %99, 4194304
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %cond.true134, label %cond.false135

cond.true134:                                     ; preds = %do.body130
  br i1 true, label %if.then136, label %if.end138

cond.false135:                                    ; preds = %do.body130
  br i1 false, label %if.then136, label %if.end138

if.then136:                                       ; preds = %cond.false135, %cond.true134
  %100 = load %struct.sv*, %struct.sv** %targ, align 8
  %call137 = call i32 @Perl_mg_set(%struct.sv* %100)
  br label %if.end138

if.end138:                                        ; preds = %if.then136, %cond.false135, %cond.true134
  br label %do.end139

do.end139:                                        ; preds = %if.end138
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %101, %struct.sv** %102, align 8
  br label %do.end140

do.end140:                                        ; preds = %do.end139
  br label %do.end141

do.end141:                                        ; preds = %do.end140
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %103, %struct.sv*** @PL_stack_sp, align 8
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next142 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 0
  %105 = load %struct.op*, %struct.op** %op_next142, align 8
  store %struct.op* %105, %struct.op** %retval, align 8
  br label %return

if.end143:                                        ; preds = %if.else122
  br label %if.end144

if.end144:                                        ; preds = %if.end143
  br label %if.end211

if.else145:                                       ; preds = %land.lhs.true97, %if.else95
  %106 = load i64, i64* %bhigh, align 8
  %tobool146 = icmp ne i64 %106, 0
  br i1 %tobool146, label %if.then147, label %if.end148

if.then147:                                       ; preds = %if.else145
  %107 = load i64, i64* %bhigh, align 8
  store i64 %107, i64* %ahigh, align 8
  %108 = load i64, i64* %blow, align 8
  store i64 %108, i64* %bhigh, align 8
  %109 = load i64, i64* %alow, align 8
  store i64 %109, i64* %blow, align 8
  %110 = load i64, i64* %bhigh, align 8
  store i64 %110, i64* %alow, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.then147, %if.else145
  %111 = load i64, i64* %ahigh, align 8
  %112 = load i64, i64* %blow, align 8
  %mul149 = mul i64 %111, %112
  store i64 %mul149, i64* %product_middle, align 8
  %113 = load i64, i64* %product_middle, align 8
  %and150 = and i64 %113, -4294967296
  %tobool151 = icmp ne i64 %and150, 0
  br i1 %tobool151, label %if.end210, label %if.then152

if.then152:                                       ; preds = %if.end148
  %114 = load i64, i64* %product_middle, align 8
  %shl = shl i64 %114, 32
  store i64 %shl, i64* %product_middle, align 8
  %115 = load i64, i64* %alow, align 8
  %116 = load i64, i64* %blow, align 8
  %mul153 = mul i64 %115, %116
  store i64 %mul153, i64* %product_low, align 8
  %117 = load i64, i64* %product_middle, align 8
  %118 = load i64, i64* %product_low, align 8
  %add = add i64 %118, %117
  store i64 %add, i64* %product_low, align 8
  %119 = load i64, i64* %product_low, align 8
  %120 = load i64, i64* %product_middle, align 8
  %cmp154 = icmp uge i64 %119, %120
  br i1 %cmp154, label %if.then156, label %if.end209

if.then156:                                       ; preds = %if.then152
  %121 = load i8, i8* %auvok, align 1
  %tobool157 = trunc i8 %121 to i1
  %conv158 = zext i1 %tobool157 to i32
  %122 = load i8, i8* %buvok, align 1
  %tobool159 = trunc i8 %122 to i1
  %conv160 = zext i1 %tobool159 to i32
  %cmp161 = icmp eq i32 %conv158, %conv160
  br i1 %cmp161, label %if.then163, label %if.else180

if.then163:                                       ; preds = %if.then156
  %123 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr164 = getelementptr inbounds %struct.sv*, %struct.sv** %123, i32 -1
  store %struct.sv** %incdec.ptr164, %struct.sv*** %sp, align 8
  br label %do.body165

do.body165:                                       ; preds = %if.then163
  %124 = load %struct.sv*, %struct.sv** %targ, align 8
  %125 = load i64, i64* %product_low, align 8
  call void @Perl_sv_setuv(%struct.sv* %124, i64 %125)
  br label %do.body166

do.body166:                                       ; preds = %do.body165
  br label %do.body167

do.body167:                                       ; preds = %do.body166
  %126 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 2
  %127 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %127, 4194304
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %cond.true171, label %cond.false172

cond.true171:                                     ; preds = %do.body167
  br i1 true, label %if.then173, label %if.end175

cond.false172:                                    ; preds = %do.body167
  br i1 false, label %if.then173, label %if.end175

if.then173:                                       ; preds = %cond.false172, %cond.true171
  %128 = load %struct.sv*, %struct.sv** %targ, align 8
  %call174 = call i32 @Perl_mg_set(%struct.sv* %128)
  br label %if.end175

if.end175:                                        ; preds = %if.then173, %cond.false172, %cond.true171
  br label %do.end176

do.end176:                                        ; preds = %if.end175
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %130 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %129, %struct.sv** %130, align 8
  br label %do.end177

do.end177:                                        ; preds = %do.end176
  br label %do.end178

do.end178:                                        ; preds = %do.end177
  %131 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %131, %struct.sv*** @PL_stack_sp, align 8
  %132 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next179 = getelementptr inbounds %struct.op, %struct.op* %132, i32 0, i32 0
  %133 = load %struct.op*, %struct.op** %op_next179, align 8
  store %struct.op* %133, %struct.op** %retval, align 8
  br label %return

if.else180:                                       ; preds = %if.then156
  %134 = load i64, i64* %product_low, align 8
  %cmp181 = icmp ule i64 %134, -9223372036854775808
  br i1 %cmp181, label %if.then183, label %if.end207

if.then183:                                       ; preds = %if.else180
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr184 = getelementptr inbounds %struct.sv*, %struct.sv** %135, i32 -1
  store %struct.sv** %incdec.ptr184, %struct.sv*** %sp, align 8
  br label %do.body185

do.body185:                                       ; preds = %if.then183
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %137 = load i64, i64* %product_low, align 8
  %cmp186 = icmp eq i64 %137, -9223372036854775808
  br i1 %cmp186, label %cond.true188, label %cond.false189

cond.true188:                                     ; preds = %do.body185
  br label %cond.end191

cond.false189:                                    ; preds = %do.body185
  %138 = load i64, i64* %product_low, align 8
  %sub190 = sub nsw i64 0, %138
  br label %cond.end191

cond.end191:                                      ; preds = %cond.false189, %cond.true188
  %cond192 = phi i64 [ -9223372036854775808, %cond.true188 ], [ %sub190, %cond.false189 ]
  call void @Perl_sv_setiv(%struct.sv* %136, i64 %cond192)
  br label %do.body193

do.body193:                                       ; preds = %cond.end191
  br label %do.body194

do.body194:                                       ; preds = %do.body193
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags195 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags195, align 4
  %and196 = and i32 %140, 4194304
  %tobool197 = icmp ne i32 %and196, 0
  br i1 %tobool197, label %cond.true198, label %cond.false199

cond.true198:                                     ; preds = %do.body194
  br i1 true, label %if.then200, label %if.end202

cond.false199:                                    ; preds = %do.body194
  br i1 false, label %if.then200, label %if.end202

if.then200:                                       ; preds = %cond.false199, %cond.true198
  %141 = load %struct.sv*, %struct.sv** %targ, align 8
  %call201 = call i32 @Perl_mg_set(%struct.sv* %141)
  br label %if.end202

if.end202:                                        ; preds = %if.then200, %cond.false199, %cond.true198
  br label %do.end203

do.end203:                                        ; preds = %if.end202
  %142 = load %struct.sv*, %struct.sv** %targ, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %142, %struct.sv** %143, align 8
  br label %do.end204

do.end204:                                        ; preds = %do.end203
  br label %do.end205

do.end205:                                        ; preds = %do.end204
  %144 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %144, %struct.sv*** @PL_stack_sp, align 8
  %145 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next206 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 0
  %146 = load %struct.op*, %struct.op** %op_next206, align 8
  store %struct.op* %146, %struct.op** %retval, align 8
  br label %return

if.end207:                                        ; preds = %if.else180
  br label %if.end208

if.end208:                                        ; preds = %if.end207
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then152
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %if.end148
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %if.end144
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.then94
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %cond.false38, %cond.true33
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %cond.false21, %cond.true16
  %147 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags215 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags215, align 4
  %and216 = and i32 %148, 512
  %tobool217 = icmp ne i32 %and216, 0
  br i1 %tobool217, label %cond.true218, label %cond.false220

cond.true218:                                     ; preds = %if.end214
  %149 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any219 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 0
  %150 = load i8*, i8** %sv_any219, align 8
  %151 = bitcast i8* %150 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %151, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %152 = load double, double* %xnv_nv, align 8
  br label %cond.end222

cond.false220:                                    ; preds = %if.end214
  %153 = load %struct.sv*, %struct.sv** %svr, align 8
  %call221 = call double @Perl_sv_2nv_flags(%struct.sv* %153, i32 0)
  br label %cond.end222

cond.end222:                                      ; preds = %cond.false220, %cond.true218
  %cond223 = phi double [ %152, %cond.true218 ], [ %call221, %cond.false220 ]
  store double %cond223, double* %right, align 8
  %154 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 2
  %155 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %155, 512
  %tobool226 = icmp ne i32 %and225, 0
  br i1 %tobool226, label %cond.true227, label %cond.false231

cond.true227:                                     ; preds = %cond.end222
  %156 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any228 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 0
  %157 = load i8*, i8** %sv_any228, align 8
  %158 = bitcast i8* %157 to %struct.xpvnv*
  %xnv_u229 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %158, i32 0, i32 5
  %xnv_nv230 = bitcast %union._xnvu* %xnv_u229 to double*
  %159 = load double, double* %xnv_nv230, align 8
  br label %cond.end233

cond.false231:                                    ; preds = %cond.end222
  %160 = load %struct.sv*, %struct.sv** %svl, align 8
  %call232 = call double @Perl_sv_2nv_flags(%struct.sv* %160, i32 0)
  br label %cond.end233

cond.end233:                                      ; preds = %cond.false231, %cond.true227
  %cond234 = phi double [ %159, %cond.true227 ], [ %call232, %cond.false231 ]
  store double %cond234, double* %left, align 8
  %161 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr235 = getelementptr inbounds %struct.sv*, %struct.sv** %161, i32 -1
  store %struct.sv** %incdec.ptr235, %struct.sv*** %sp, align 8
  %162 = load %struct.sv*, %struct.sv** %161, align 8
  br label %do.body236

do.body236:                                       ; preds = %cond.end233
  %163 = load %struct.sv*, %struct.sv** %targ, align 8
  %164 = load double, double* %left, align 8
  %165 = load double, double* %right, align 8
  %mul237 = fmul double %164, %165
  call void @Perl_sv_setnv(%struct.sv* %163, double %mul237)
  br label %do.body238

do.body238:                                       ; preds = %do.body236
  br label %do.body239

do.body239:                                       ; preds = %do.body238
  %166 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags240 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 2
  %167 = load i32, i32* %sv_flags240, align 4
  %and241 = and i32 %167, 4194304
  %tobool242 = icmp ne i32 %and241, 0
  br i1 %tobool242, label %cond.true243, label %cond.false244

cond.true243:                                     ; preds = %do.body239
  br i1 true, label %if.then245, label %if.end247

cond.false244:                                    ; preds = %do.body239
  br i1 false, label %if.then245, label %if.end247

if.then245:                                       ; preds = %cond.false244, %cond.true243
  %168 = load %struct.sv*, %struct.sv** %targ, align 8
  %call246 = call i32 @Perl_mg_set(%struct.sv* %168)
  br label %if.end247

if.end247:                                        ; preds = %if.then245, %cond.false244, %cond.true243
  br label %do.end248

do.end248:                                        ; preds = %if.end247
  %169 = load %struct.sv*, %struct.sv** %targ, align 8
  %170 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %169, %struct.sv** %170, align 8
  br label %do.end249

do.end249:                                        ; preds = %do.end248
  br label %do.end250

do.end250:                                        ; preds = %do.end249
  %171 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %171, %struct.sv*** @PL_stack_sp, align 8
  %172 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next251 = getelementptr inbounds %struct.op, %struct.op* %172, i32 0, i32 0
  %173 = load %struct.op*, %struct.op** %op_next251, align 8
  store %struct.op* %173, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end250, %do.end205, %do.end178, %do.end141, %do.end120, %if.then
  %174 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %174
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_divide() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %left_non_neg = alloca i8, align 1
  %right_non_neg = alloca i8, align 1
  %left = alloca i64, align 8
  %right = alloca i64, align 8
  %biv = alloca i64, align 8
  %aiv = alloca i64, align 8
  %result = alloca i64, align 8
  %right170 = alloca double, align 8
  %left180 = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 36, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 4352
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false21, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 1536
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false21

cond.true16:                                      ; preds = %land.lhs.true12
  %25 = load %struct.sv*, %struct.sv** %svr, align 8
  %call17 = call i64 @Perl_sv_2iv_flags(%struct.sv* %25, i32 0)
  %26 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %27, 256
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.lhs.true25, label %if.end169

cond.false21:                                     ; preds = %land.lhs.true12, %do.end
  %28 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %29, 256
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %if.end169

land.lhs.true25:                                  ; preds = %cond.false21, %cond.true16
  %30 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %31, 4352
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.false38, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %land.lhs.true25
  %32 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %33, 1536
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false38

cond.true33:                                      ; preds = %land.lhs.true29
  %34 = load %struct.sv*, %struct.sv** %svl, align 8
  %call34 = call i64 @Perl_sv_2iv_flags(%struct.sv* %34, i32 0)
  %35 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %36, 256
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then42, label %if.end169

cond.false38:                                     ; preds = %land.lhs.true29, %land.lhs.true25
  %37 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %38, 256
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %if.then42, label %if.end169

if.then42:                                        ; preds = %cond.false38, %cond.true33
  %39 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %40, -2147483392
  %cmp = icmp eq i32 %and44, -2147483392
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %left_non_neg, align 1
  %41 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %42, -2147483392
  %cmp48 = icmp eq i32 %and47, -2147483392
  %frombool50 = zext i1 %cmp48 to i8
  store i8 %frombool50, i8* %right_non_neg, align 1
  %43 = load i8, i8* %right_non_neg, align 1
  %tobool51 = trunc i8 %43 to i1
  br i1 %tobool51, label %if.then52, label %if.else

if.then52:                                        ; preds = %if.then42
  %44 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 0
  %45 = load i8*, i8** %sv_any, align 8
  %46 = bitcast i8* %45 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %46, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %47 = load i64, i64* %xivu_uv, align 8
  store i64 %47, i64* %right, align 8
  br label %if.end65

if.else:                                          ; preds = %if.then42
  %48 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any53, align 8
  %50 = bitcast i8* %49 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %50, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %51 = load i64, i64* %xivu_iv, align 8
  store i64 %51, i64* %biv, align 8
  %52 = load i64, i64* %biv, align 8
  %cmp54 = icmp sge i64 %52, 0
  br i1 %cmp54, label %if.then56, label %if.else57

if.then56:                                        ; preds = %if.else
  %53 = load i64, i64* %biv, align 8
  store i64 %53, i64* %right, align 8
  store i8 1, i8* %right_non_neg, align 1
  br label %if.end64

if.else57:                                        ; preds = %if.else
  %54 = load i64, i64* %biv, align 8
  %cmp58 = icmp eq i64 %54, -9223372036854775808
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %if.else57
  %55 = load i64, i64* %biv, align 8
  br label %cond.end62

cond.false61:                                     ; preds = %if.else57
  %56 = load i64, i64* %biv, align 8
  %sub = sub nsw i64 0, %56
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false61, %cond.true60
  %cond63 = phi i64 [ %55, %cond.true60 ], [ %sub, %cond.false61 ]
  store i64 %cond63, i64* %right, align 8
  br label %if.end64

if.end64:                                         ; preds = %cond.end62, %if.then56
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then52
  %57 = load i64, i64* %right, align 8
  %cmp66 = icmp eq i64 %57, 0
  br i1 %cmp66, label %if.then68, label %if.end70

if.then68:                                        ; preds = %if.end65
  %call69 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0))
  store %struct.op* %call69, %struct.op** %retval, align 8
  br label %return

if.end70:                                         ; preds = %if.end65
  %58 = load i8, i8* %left_non_neg, align 1
  %tobool71 = trunc i8 %58 to i1
  br i1 %tobool71, label %if.then72, label %if.else76

if.then72:                                        ; preds = %if.end70
  %59 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any73 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 0
  %60 = load i8*, i8** %sv_any73, align 8
  %61 = bitcast i8* %60 to %struct.xpvuv*
  %xuv_u74 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %61, i32 0, i32 4
  %xivu_uv75 = bitcast %union._xivu* %xuv_u74 to i64*
  %62 = load i64, i64* %xivu_uv75, align 8
  store i64 %62, i64* %left, align 8
  br label %if.end92

if.else76:                                        ; preds = %if.end70
  %63 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any77 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any77, align 8
  %65 = bitcast i8* %64 to %struct.xpviv*
  %xiv_u78 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %65, i32 0, i32 4
  %xivu_iv79 = bitcast %union._xivu* %xiv_u78 to i64*
  %66 = load i64, i64* %xivu_iv79, align 8
  store i64 %66, i64* %aiv, align 8
  %67 = load i64, i64* %aiv, align 8
  %cmp80 = icmp sge i64 %67, 0
  br i1 %cmp80, label %if.then82, label %if.else83

if.then82:                                        ; preds = %if.else76
  %68 = load i64, i64* %aiv, align 8
  store i64 %68, i64* %left, align 8
  store i8 1, i8* %left_non_neg, align 1
  br label %if.end91

if.else83:                                        ; preds = %if.else76
  %69 = load i64, i64* %aiv, align 8
  %cmp84 = icmp eq i64 %69, -9223372036854775808
  br i1 %cmp84, label %cond.true86, label %cond.false87

cond.true86:                                      ; preds = %if.else83
  %70 = load i64, i64* %aiv, align 8
  br label %cond.end89

cond.false87:                                     ; preds = %if.else83
  %71 = load i64, i64* %aiv, align 8
  %sub88 = sub nsw i64 0, %71
  br label %cond.end89

cond.end89:                                       ; preds = %cond.false87, %cond.true86
  %cond90 = phi i64 [ %70, %cond.true86 ], [ %sub88, %cond.false87 ]
  store i64 %cond90, i64* %left, align 8
  br label %if.end91

if.end91:                                         ; preds = %cond.end89, %if.then82
  br label %if.end92

if.end92:                                         ; preds = %if.end91, %if.then72
  %72 = load i64, i64* %left, align 8
  %73 = load i64, i64* %right, align 8
  %cmp93 = icmp uge i64 %72, %73
  br i1 %cmp93, label %land.lhs.true95, label %if.end168

land.lhs.true95:                                  ; preds = %if.end92
  %74 = load i64, i64* %left, align 8
  %cmp96 = icmp ugt i64 %74, 9007199254740992
  br i1 %cmp96, label %if.then98, label %if.end168

if.then98:                                        ; preds = %land.lhs.true95
  %75 = load i64, i64* %left, align 8
  %76 = load i64, i64* %right, align 8
  %div = udiv i64 %75, %76
  store i64 %div, i64* %result, align 8
  %77 = load i64, i64* %result, align 8
  %78 = load i64, i64* %right, align 8
  %mul = mul i64 %77, %78
  %79 = load i64, i64* %left, align 8
  %cmp99 = icmp eq i64 %mul, %79
  br i1 %cmp99, label %if.then101, label %if.end167

if.then101:                                       ; preds = %if.then98
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %80, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %81 = load i8, i8* %left_non_neg, align 1
  %tobool102 = trunc i8 %81 to i1
  %conv103 = zext i1 %tobool102 to i32
  %82 = load i8, i8* %right_non_neg, align 1
  %tobool104 = trunc i8 %82 to i1
  %conv105 = zext i1 %tobool104 to i32
  %cmp106 = icmp eq i32 %conv103, %conv105
  br i1 %cmp106, label %if.then108, label %if.end124

if.then108:                                       ; preds = %if.then101
  br label %do.body109

do.body109:                                       ; preds = %if.then108
  %83 = load %struct.sv*, %struct.sv** %targ, align 8
  %84 = load i64, i64* %result, align 8
  call void @Perl_sv_setuv(%struct.sv* %83, i64 %84)
  br label %do.body110

do.body110:                                       ; preds = %do.body109
  br label %do.body111

do.body111:                                       ; preds = %do.body110
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %86, 4194304
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %cond.true115, label %cond.false116

cond.true115:                                     ; preds = %do.body111
  br i1 true, label %if.then117, label %if.end119

cond.false116:                                    ; preds = %do.body111
  br i1 false, label %if.then117, label %if.end119

if.then117:                                       ; preds = %cond.false116, %cond.true115
  %87 = load %struct.sv*, %struct.sv** %targ, align 8
  %call118 = call i32 @Perl_mg_set(%struct.sv* %87)
  br label %if.end119

if.end119:                                        ; preds = %if.then117, %cond.false116, %cond.true115
  br label %do.end120

do.end120:                                        ; preds = %if.end119
  %88 = load %struct.sv*, %struct.sv** %targ, align 8
  %89 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %88, %struct.sv** %89, align 8
  br label %do.end121

do.end121:                                        ; preds = %do.end120
  br label %do.end122

do.end122:                                        ; preds = %do.end121
  %90 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %90, %struct.sv*** @PL_stack_sp, align 8
  %91 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next123 = getelementptr inbounds %struct.op, %struct.op* %91, i32 0, i32 0
  %92 = load %struct.op*, %struct.op** %op_next123, align 8
  store %struct.op* %92, %struct.op** %retval, align 8
  br label %return

if.end124:                                        ; preds = %if.then101
  %93 = load i64, i64* %result, align 8
  %cmp125 = icmp ule i64 %93, -9223372036854775808
  br i1 %cmp125, label %if.then127, label %if.else149

if.then127:                                       ; preds = %if.end124
  br label %do.body128

do.body128:                                       ; preds = %if.then127
  %94 = load %struct.sv*, %struct.sv** %targ, align 8
  %95 = load i64, i64* %result, align 8
  %cmp129 = icmp eq i64 %95, -9223372036854775808
  br i1 %cmp129, label %cond.true131, label %cond.false132

cond.true131:                                     ; preds = %do.body128
  br label %cond.end134

cond.false132:                                    ; preds = %do.body128
  %96 = load i64, i64* %result, align 8
  %sub133 = sub nsw i64 0, %96
  br label %cond.end134

cond.end134:                                      ; preds = %cond.false132, %cond.true131
  %cond135 = phi i64 [ -9223372036854775808, %cond.true131 ], [ %sub133, %cond.false132 ]
  call void @Perl_sv_setiv(%struct.sv* %94, i64 %cond135)
  br label %do.body136

do.body136:                                       ; preds = %cond.end134
  br label %do.body137

do.body137:                                       ; preds = %do.body136
  %97 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags138 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags138, align 4
  %and139 = and i32 %98, 4194304
  %tobool140 = icmp ne i32 %and139, 0
  br i1 %tobool140, label %cond.true141, label %cond.false142

cond.true141:                                     ; preds = %do.body137
  br i1 true, label %if.then143, label %if.end145

cond.false142:                                    ; preds = %do.body137
  br i1 false, label %if.then143, label %if.end145

if.then143:                                       ; preds = %cond.false142, %cond.true141
  %99 = load %struct.sv*, %struct.sv** %targ, align 8
  %call144 = call i32 @Perl_mg_set(%struct.sv* %99)
  br label %if.end145

if.end145:                                        ; preds = %if.then143, %cond.false142, %cond.true141
  br label %do.end146

do.end146:                                        ; preds = %if.end145
  %100 = load %struct.sv*, %struct.sv** %targ, align 8
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %100, %struct.sv** %101, align 8
  br label %do.end147

do.end147:                                        ; preds = %do.end146
  br label %do.end148

do.end148:                                        ; preds = %do.end147
  br label %if.end165

if.else149:                                       ; preds = %if.end124
  br label %do.body150

do.body150:                                       ; preds = %if.else149
  %102 = load %struct.sv*, %struct.sv** %targ, align 8
  %103 = load i64, i64* %result, align 8
  %conv151 = uitofp i64 %103 to double
  %fneg = fneg double %conv151
  call void @Perl_sv_setnv(%struct.sv* %102, double %fneg)
  br label %do.body152

do.body152:                                       ; preds = %do.body150
  br label %do.body153

do.body153:                                       ; preds = %do.body152
  %104 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %104, i32 0, i32 2
  %105 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %105, 4194304
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %cond.true157, label %cond.false158

cond.true157:                                     ; preds = %do.body153
  br i1 true, label %if.then159, label %if.end161

cond.false158:                                    ; preds = %do.body153
  br i1 false, label %if.then159, label %if.end161

if.then159:                                       ; preds = %cond.false158, %cond.true157
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %call160 = call i32 @Perl_mg_set(%struct.sv* %106)
  br label %if.end161

if.end161:                                        ; preds = %if.then159, %cond.false158, %cond.true157
  br label %do.end162

do.end162:                                        ; preds = %if.end161
  %107 = load %struct.sv*, %struct.sv** %targ, align 8
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %107, %struct.sv** %108, align 8
  br label %do.end163

do.end163:                                        ; preds = %do.end162
  br label %do.end164

do.end164:                                        ; preds = %do.end163
  br label %if.end165

if.end165:                                        ; preds = %do.end164, %do.end148
  %109 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %109, %struct.sv*** @PL_stack_sp, align 8
  %110 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next166 = getelementptr inbounds %struct.op, %struct.op* %110, i32 0, i32 0
  %111 = load %struct.op*, %struct.op** %op_next166, align 8
  store %struct.op* %111, %struct.op** %retval, align 8
  br label %return

if.end167:                                        ; preds = %if.then98
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %land.lhs.true95, %if.end92
  br label %if.end169

if.end169:                                        ; preds = %if.end168, %cond.false38, %cond.true33, %cond.false21, %cond.true16
  %112 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %113, 512
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %cond.true174, label %cond.false176

cond.true174:                                     ; preds = %if.end169
  %114 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any175 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 0
  %115 = load i8*, i8** %sv_any175, align 8
  %116 = bitcast i8* %115 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %116, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %117 = load double, double* %xnv_nv, align 8
  br label %cond.end178

cond.false176:                                    ; preds = %if.end169
  %118 = load %struct.sv*, %struct.sv** %svr, align 8
  %call177 = call double @Perl_sv_2nv_flags(%struct.sv* %118, i32 0)
  br label %cond.end178

cond.end178:                                      ; preds = %cond.false176, %cond.true174
  %cond179 = phi double [ %117, %cond.true174 ], [ %call177, %cond.false176 ]
  store double %cond179, double* %right170, align 8
  %119 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags181 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %120, 512
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %cond.true184, label %cond.false188

cond.true184:                                     ; preds = %cond.end178
  %121 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any185 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 0
  %122 = load i8*, i8** %sv_any185, align 8
  %123 = bitcast i8* %122 to %struct.xpvnv*
  %xnv_u186 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %123, i32 0, i32 5
  %xnv_nv187 = bitcast %union._xnvu* %xnv_u186 to double*
  %124 = load double, double* %xnv_nv187, align 8
  br label %cond.end190

cond.false188:                                    ; preds = %cond.end178
  %125 = load %struct.sv*, %struct.sv** %svl, align 8
  %call189 = call double @Perl_sv_2nv_flags(%struct.sv* %125, i32 0)
  br label %cond.end190

cond.end190:                                      ; preds = %cond.false188, %cond.true184
  %cond191 = phi double [ %124, %cond.true184 ], [ %call189, %cond.false188 ]
  store double %cond191, double* %left180, align 8
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr192 = getelementptr inbounds %struct.sv*, %struct.sv** %126, i32 -1
  store %struct.sv** %incdec.ptr192, %struct.sv*** %sp, align 8
  %127 = load %struct.sv*, %struct.sv** %126, align 8
  %128 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr193 = getelementptr inbounds %struct.sv*, %struct.sv** %128, i32 -1
  store %struct.sv** %incdec.ptr193, %struct.sv*** %sp, align 8
  %129 = load %struct.sv*, %struct.sv** %128, align 8
  %130 = load double, double* %right170, align 8
  %cmp194 = fcmp oeq double %130, 0.000000e+00
  br i1 %cmp194, label %if.then196, label %if.end198

if.then196:                                       ; preds = %cond.end190
  %call197 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0))
  store %struct.op* %call197, %struct.op** %retval, align 8
  br label %return

if.end198:                                        ; preds = %cond.end190
  br label %do.body199

do.body199:                                       ; preds = %if.end198
  %131 = load %struct.sv*, %struct.sv** %targ, align 8
  %132 = load double, double* %left180, align 8
  %133 = load double, double* %right170, align 8
  %div200 = fdiv double %132, %133
  call void @Perl_sv_setnv(%struct.sv* %131, double %div200)
  br label %do.body201

do.body201:                                       ; preds = %do.body199
  br label %do.body202

do.body202:                                       ; preds = %do.body201
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags203, align 4
  %and204 = and i32 %135, 4194304
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %cond.true206, label %cond.false207

cond.true206:                                     ; preds = %do.body202
  br i1 true, label %if.then208, label %if.end210

cond.false207:                                    ; preds = %do.body202
  br i1 false, label %if.then208, label %if.end210

if.then208:                                       ; preds = %cond.false207, %cond.true206
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %call209 = call i32 @Perl_mg_set(%struct.sv* %136)
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %cond.false207, %cond.true206
  br label %do.end211

do.end211:                                        ; preds = %if.end210
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr212 = getelementptr inbounds %struct.sv*, %struct.sv** %138, i32 1
  store %struct.sv** %incdec.ptr212, %struct.sv*** %sp, align 8
  store %struct.sv* %137, %struct.sv** %incdec.ptr212, align 8
  br label %do.end213

do.end213:                                        ; preds = %do.end211
  br label %do.end214

do.end214:                                        ; preds = %do.end213
  %139 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %139, %struct.sv*** @PL_stack_sp, align 8
  %140 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next215 = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 0
  %141 = load %struct.op*, %struct.op** %op_next215, align 8
  store %struct.op* %141, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end214, %if.then196, %if.end165, %do.end122, %if.then68, %if.then
  %142 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %142
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_modulo() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %left = alloca i64, align 8
  %right = alloca i64, align 8
  %left_neg = alloca i8, align 1
  %right_neg = alloca i8, align 1
  %use_double = alloca i8, align 1
  %dright_valid = alloca i8, align 1
  %dright = alloca double, align 8
  %dleft = alloca double, align 8
  %svr = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %biv = alloca i64, align 8
  %aiv = alloca i64, align 8
  %dans = alloca double, align 8
  %ans = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 38, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  store i64 0, i64* %left, align 8
  store i64 0, i64* %right, align 8
  store i8 0, i8* %left_neg, align 1
  store i8 0, i8* %right_neg, align 1
  store i8 0, i8* %use_double, align 1
  store i8 0, i8* %dright_valid, align 1
  store double 0.000000e+00, double* %dright, align 8
  store double 0.000000e+00, double* %dleft, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 4352
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.false21, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 1536
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false21

cond.true16:                                      ; preds = %land.lhs.true12
  %25 = load %struct.sv*, %struct.sv** %svr, align 8
  %call17 = call i64 @Perl_sv_2iv_flags(%struct.sv* %25, i32 0)
  %26 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %27, 256
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %if.then25, label %if.else44

cond.false21:                                     ; preds = %land.lhs.true12, %do.end
  %28 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %29, 256
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %if.then25, label %if.else44

if.then25:                                        ; preds = %cond.false21, %cond.true16
  %30 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %31, -2147483392
  %cmp = icmp eq i32 %and27, -2147483392
  %lnot = xor i1 %cmp, true
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %right_neg, align 1
  %32 = load i8, i8* %right_neg, align 1
  %tobool29 = trunc i8 %32 to i1
  br i1 %tobool29, label %if.else, label %if.then30

if.then30:                                        ; preds = %if.then25
  %33 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 0
  %34 = load i8*, i8** %sv_any, align 8
  %35 = bitcast i8* %34 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %35, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %36 = load i64, i64* %xivu_uv, align 8
  store i64 %36, i64* %right, align 8
  br label %if.end43

if.else:                                          ; preds = %if.then25
  %37 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 0
  %38 = load i8*, i8** %sv_any31, align 8
  %39 = bitcast i8* %38 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %39, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %40 = load i64, i64* %xivu_iv, align 8
  store i64 %40, i64* %biv, align 8
  %41 = load i64, i64* %biv, align 8
  %cmp32 = icmp sge i64 %41, 0
  br i1 %cmp32, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.else
  %42 = load i64, i64* %biv, align 8
  store i64 %42, i64* %right, align 8
  store i8 0, i8* %right_neg, align 1
  br label %if.end42

if.else35:                                        ; preds = %if.else
  %43 = load i64, i64* %biv, align 8
  %cmp36 = icmp eq i64 %43, -9223372036854775808
  br i1 %cmp36, label %cond.true38, label %cond.false39

cond.true38:                                      ; preds = %if.else35
  %44 = load i64, i64* %biv, align 8
  br label %cond.end40

cond.false39:                                     ; preds = %if.else35
  %45 = load i64, i64* %biv, align 8
  %sub = sub nsw i64 0, %45
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i64 [ %44, %cond.true38 ], [ %sub, %cond.false39 ]
  store i64 %cond41, i64* %right, align 8
  br label %if.end42

if.end42:                                         ; preds = %cond.end40, %if.then34
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then30
  br label %if.end66

if.else44:                                        ; preds = %cond.false21, %cond.true16
  %46 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %47, 512
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false50

cond.true48:                                      ; preds = %if.else44
  %48 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any49, align 8
  %50 = bitcast i8* %49 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %50, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %51 = load double, double* %xnv_nv, align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.else44
  %52 = load %struct.sv*, %struct.sv** %svr, align 8
  %call51 = call double @Perl_sv_2nv_flags(%struct.sv* %52, i32 0)
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true48
  %cond53 = phi double [ %51, %cond.true48 ], [ %call51, %cond.false50 ]
  store double %cond53, double* %dright, align 8
  %53 = load double, double* %dright, align 8
  %cmp54 = fcmp olt double %53, 0.000000e+00
  %frombool56 = zext i1 %cmp54 to i8
  store i8 %frombool56, i8* %right_neg, align 1
  %54 = load i8, i8* %right_neg, align 1
  %tobool57 = trunc i8 %54 to i1
  br i1 %tobool57, label %if.then58, label %if.end59

if.then58:                                        ; preds = %cond.end52
  %55 = load double, double* %dright, align 8
  %fneg = fneg double %55
  store double %fneg, double* %dright, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then58, %cond.end52
  %56 = load double, double* %dright, align 8
  %cmp60 = fcmp olt double %56, 0x43F0000000000000
  br i1 %cmp60, label %if.then62, label %if.else64

if.then62:                                        ; preds = %if.end59
  %57 = load double, double* %dright, align 8
  %call63 = call i64 @Perl_cast_uv(double %57)
  store i64 %call63, i64* %right, align 8
  store i8 1, i8* %dright_valid, align 1
  br label %if.end65

if.else64:                                        ; preds = %if.end59
  store i8 1, i8* %use_double, align 1
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.then62
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end43
  %58 = load i8, i8* %use_double, align 1
  %tobool67 = trunc i8 %58 to i1
  br i1 %tobool67, label %if.else114, label %land.lhs.true68

land.lhs.true68:                                  ; preds = %if.end66
  %59 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %60, 4352
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %cond.false81, label %land.lhs.true72

land.lhs.true72:                                  ; preds = %land.lhs.true68
  %61 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %62, 1536
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %cond.true76, label %cond.false81

cond.true76:                                      ; preds = %land.lhs.true72
  %63 = load %struct.sv*, %struct.sv** %svl, align 8
  %call77 = call i64 @Perl_sv_2iv_flags(%struct.sv* %63, i32 0)
  %64 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %65, 256
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then85, label %if.else114

cond.false81:                                     ; preds = %land.lhs.true72, %land.lhs.true68
  %66 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags82, align 4
  %and83 = and i32 %67, 256
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.then85, label %if.else114

if.then85:                                        ; preds = %cond.false81, %cond.true76
  %68 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags86, align 4
  %and87 = and i32 %69, -2147483392
  %cmp88 = icmp eq i32 %and87, -2147483392
  %lnot90 = xor i1 %cmp88, true
  %frombool91 = zext i1 %lnot90 to i8
  store i8 %frombool91, i8* %left_neg, align 1
  %70 = load i8, i8* %left_neg, align 1
  %tobool92 = trunc i8 %70 to i1
  br i1 %tobool92, label %if.else97, label %if.then93

if.then93:                                        ; preds = %if.then85
  %71 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any94 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any94, align 8
  %73 = bitcast i8* %72 to %struct.xpvuv*
  %xuv_u95 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %73, i32 0, i32 4
  %xivu_uv96 = bitcast %union._xivu* %xuv_u95 to i64*
  %74 = load i64, i64* %xivu_uv96, align 8
  store i64 %74, i64* %left, align 8
  br label %if.end113

if.else97:                                        ; preds = %if.then85
  %75 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 0
  %76 = load i8*, i8** %sv_any98, align 8
  %77 = bitcast i8* %76 to %struct.xpviv*
  %xiv_u99 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %77, i32 0, i32 4
  %xivu_iv100 = bitcast %union._xivu* %xiv_u99 to i64*
  %78 = load i64, i64* %xivu_iv100, align 8
  store i64 %78, i64* %aiv, align 8
  %79 = load i64, i64* %aiv, align 8
  %cmp101 = icmp sge i64 %79, 0
  br i1 %cmp101, label %if.then103, label %if.else104

if.then103:                                       ; preds = %if.else97
  %80 = load i64, i64* %aiv, align 8
  store i64 %80, i64* %left, align 8
  store i8 0, i8* %left_neg, align 1
  br label %if.end112

if.else104:                                       ; preds = %if.else97
  %81 = load i64, i64* %aiv, align 8
  %cmp105 = icmp eq i64 %81, -9223372036854775808
  br i1 %cmp105, label %cond.true107, label %cond.false108

cond.true107:                                     ; preds = %if.else104
  %82 = load i64, i64* %aiv, align 8
  br label %cond.end110

cond.false108:                                    ; preds = %if.else104
  %83 = load i64, i64* %aiv, align 8
  %sub109 = sub nsw i64 0, %83
  br label %cond.end110

cond.end110:                                      ; preds = %cond.false108, %cond.true107
  %cond111 = phi i64 [ %82, %cond.true107 ], [ %sub109, %cond.false108 ]
  store i64 %cond111, i64* %left, align 8
  br label %if.end112

if.end112:                                        ; preds = %cond.end110, %if.then103
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then93
  br label %if.end148

if.else114:                                       ; preds = %cond.false81, %cond.true76, %if.end66
  %84 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 2
  %85 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %85, 512
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.true118, label %cond.false122

cond.true118:                                     ; preds = %if.else114
  %86 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %86, i32 0, i32 0
  %87 = load i8*, i8** %sv_any119, align 8
  %88 = bitcast i8* %87 to %struct.xpvnv*
  %xnv_u120 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %88, i32 0, i32 5
  %xnv_nv121 = bitcast %union._xnvu* %xnv_u120 to double*
  %89 = load double, double* %xnv_nv121, align 8
  br label %cond.end124

cond.false122:                                    ; preds = %if.else114
  %90 = load %struct.sv*, %struct.sv** %svl, align 8
  %call123 = call double @Perl_sv_2nv_flags(%struct.sv* %90, i32 0)
  br label %cond.end124

cond.end124:                                      ; preds = %cond.false122, %cond.true118
  %cond125 = phi double [ %89, %cond.true118 ], [ %call123, %cond.false122 ]
  store double %cond125, double* %dleft, align 8
  %91 = load double, double* %dleft, align 8
  %cmp126 = fcmp olt double %91, 0.000000e+00
  %frombool128 = zext i1 %cmp126 to i8
  store i8 %frombool128, i8* %left_neg, align 1
  %92 = load i8, i8* %left_neg, align 1
  %tobool129 = trunc i8 %92 to i1
  br i1 %tobool129, label %if.then130, label %if.end132

if.then130:                                       ; preds = %cond.end124
  %93 = load double, double* %dleft, align 8
  %fneg131 = fneg double %93
  store double %fneg131, double* %dleft, align 8
  br label %if.end132

if.end132:                                        ; preds = %if.then130, %cond.end124
  %94 = load i8, i8* %use_double, align 1
  %tobool133 = trunc i8 %94 to i1
  br i1 %tobool133, label %if.end147, label %if.then134

if.then134:                                       ; preds = %if.end132
  %95 = load double, double* %dleft, align 8
  %cmp135 = fcmp olt double %95, 0x43F0000000000000
  br i1 %cmp135, label %if.then137, label %if.else139

if.then137:                                       ; preds = %if.then134
  %96 = load double, double* %dleft, align 8
  %call138 = call i64 @Perl_cast_uv(double %96)
  store i64 %call138, i64* %left, align 8
  br label %if.end146

if.else139:                                       ; preds = %if.then134
  %97 = load double, double* %dleft, align 8
  %add = fadd double %97, 5.000000e-01
  %98 = call double @llvm.floor.f64(double %add)
  store double %98, double* %dleft, align 8
  store i8 1, i8* %use_double, align 1
  %99 = load i8, i8* %dright_valid, align 1
  %tobool140 = trunc i8 %99 to i1
  br i1 %tobool140, label %if.then141, label %if.else143

if.then141:                                       ; preds = %if.else139
  %100 = load double, double* %dright, align 8
  %add142 = fadd double %100, 5.000000e-01
  %101 = call double @llvm.floor.f64(double %add142)
  store double %101, double* %dright, align 8
  br label %if.end145

if.else143:                                       ; preds = %if.else139
  %102 = load i64, i64* %right, align 8
  %conv144 = uitofp i64 %102 to double
  store double %conv144, double* %dright, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.else143, %if.then141
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.then137
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end132
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.end113
  %103 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr149 = getelementptr inbounds %struct.sv*, %struct.sv** %103, i64 -2
  store %struct.sv** %add.ptr149, %struct.sv*** %sp, align 8
  %104 = load i8, i8* %use_double, align 1
  %tobool150 = trunc i8 %104 to i1
  br i1 %tobool150, label %if.then151, label %if.else172

if.then151:                                       ; preds = %if.end148
  %105 = load double, double* %dright, align 8
  %tobool152 = fcmp une double %105, 0.000000e+00
  br i1 %tobool152, label %if.end155, label %if.then153

if.then153:                                       ; preds = %if.then151
  %call154 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0))
  store %struct.op* %call154, %struct.op** %retval, align 8
  br label %return

if.end155:                                        ; preds = %if.then151
  %106 = load double, double* %dleft, align 8
  %107 = load double, double* %dright, align 8
  %call156 = call double @fmod(double %106, double %107) #8
  store double %call156, double* %dans, align 8
  %108 = load i8, i8* %left_neg, align 1
  %tobool157 = trunc i8 %108 to i1
  %conv158 = zext i1 %tobool157 to i32
  %109 = load i8, i8* %right_neg, align 1
  %tobool159 = trunc i8 %109 to i1
  %conv160 = zext i1 %tobool159 to i32
  %cmp161 = icmp ne i32 %conv158, %conv160
  br i1 %cmp161, label %land.lhs.true163, label %if.end167

land.lhs.true163:                                 ; preds = %if.end155
  %110 = load double, double* %dans, align 8
  %tobool164 = fcmp une double %110, 0.000000e+00
  br i1 %tobool164, label %if.then165, label %if.end167

if.then165:                                       ; preds = %land.lhs.true163
  %111 = load double, double* %dright, align 8
  %112 = load double, double* %dans, align 8
  %sub166 = fsub double %111, %112
  store double %sub166, double* %dans, align 8
  br label %if.end167

if.end167:                                        ; preds = %if.then165, %land.lhs.true163, %if.end155
  %113 = load i8, i8* %right_neg, align 1
  %tobool168 = trunc i8 %113 to i1
  br i1 %tobool168, label %if.then169, label %if.end171

if.then169:                                       ; preds = %if.end167
  %114 = load double, double* %dans, align 8
  %fneg170 = fneg double %114
  store double %fneg170, double* %dans, align 8
  br label %if.end171

if.end171:                                        ; preds = %if.then169, %if.end167
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %116 = load double, double* %dans, align 8
  call void @Perl_sv_setnv(%struct.sv* %115, double %116)
  br label %if.end200

if.else172:                                       ; preds = %if.end148
  %117 = load i64, i64* %right, align 8
  %tobool173 = icmp ne i64 %117, 0
  br i1 %tobool173, label %if.end176, label %if.then174

if.then174:                                       ; preds = %if.else172
  %call175 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0))
  store %struct.op* %call175, %struct.op** %retval, align 8
  br label %return

if.end176:                                        ; preds = %if.else172
  %118 = load i64, i64* %left, align 8
  %119 = load i64, i64* %right, align 8
  %rem = urem i64 %118, %119
  store i64 %rem, i64* %ans, align 8
  %120 = load i8, i8* %left_neg, align 1
  %tobool177 = trunc i8 %120 to i1
  %conv178 = zext i1 %tobool177 to i32
  %121 = load i8, i8* %right_neg, align 1
  %tobool179 = trunc i8 %121 to i1
  %conv180 = zext i1 %tobool179 to i32
  %cmp181 = icmp ne i32 %conv178, %conv180
  br i1 %cmp181, label %land.lhs.true183, label %if.end187

land.lhs.true183:                                 ; preds = %if.end176
  %122 = load i64, i64* %ans, align 8
  %tobool184 = icmp ne i64 %122, 0
  br i1 %tobool184, label %if.then185, label %if.end187

if.then185:                                       ; preds = %land.lhs.true183
  %123 = load i64, i64* %right, align 8
  %124 = load i64, i64* %ans, align 8
  %sub186 = sub i64 %123, %124
  store i64 %sub186, i64* %ans, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.then185, %land.lhs.true183, %if.end176
  %125 = load i8, i8* %right_neg, align 1
  %tobool188 = trunc i8 %125 to i1
  br i1 %tobool188, label %if.then189, label %if.else198

if.then189:                                       ; preds = %if.end187
  %126 = load i64, i64* %ans, align 8
  %cmp190 = icmp ule i64 %126, -9223372036854775807
  br i1 %cmp190, label %if.then192, label %if.else194

if.then192:                                       ; preds = %if.then189
  %127 = load %struct.sv*, %struct.sv** %targ, align 8
  %128 = load i64, i64* %ans, align 8
  %neg = xor i64 %128, -1
  %add193 = add i64 %neg, 1
  call void @Perl_sv_setiv(%struct.sv* %127, i64 %add193)
  br label %if.end197

if.else194:                                       ; preds = %if.then189
  %129 = load %struct.sv*, %struct.sv** %targ, align 8
  %130 = load i64, i64* %ans, align 8
  %conv195 = uitofp i64 %130 to double
  %fneg196 = fneg double %conv195
  call void @Perl_sv_setnv(%struct.sv* %129, double %fneg196)
  br label %if.end197

if.end197:                                        ; preds = %if.else194, %if.then192
  br label %if.end199

if.else198:                                       ; preds = %if.end187
  %131 = load %struct.sv*, %struct.sv** %targ, align 8
  %132 = load i64, i64* %ans, align 8
  call void @Perl_sv_setuv(%struct.sv* %131, i64 %132)
  br label %if.end199

if.end199:                                        ; preds = %if.else198, %if.end197
  br label %if.end200

if.end200:                                        ; preds = %if.end199, %if.end171
  br label %do.body201

do.body201:                                       ; preds = %if.end200
  br label %do.body202

do.body202:                                       ; preds = %do.body201
  %133 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags203 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags203, align 4
  %and204 = and i32 %134, 4194304
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %cond.true206, label %cond.false207

cond.true206:                                     ; preds = %do.body202
  br i1 true, label %if.then208, label %if.end210

cond.false207:                                    ; preds = %do.body202
  br i1 false, label %if.then208, label %if.end210

if.then208:                                       ; preds = %cond.false207, %cond.true206
  %135 = load %struct.sv*, %struct.sv** %targ, align 8
  %call209 = call i32 @Perl_mg_set(%struct.sv* %135)
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %cond.false207, %cond.true206
  br label %do.end211

do.end211:                                        ; preds = %if.end210
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %137, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %136, %struct.sv** %incdec.ptr, align 8
  br label %do.end212

do.end212:                                        ; preds = %do.end211
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %138, %struct.sv*** @PL_stack_sp, align 8
  %139 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next213 = getelementptr inbounds %struct.op, %struct.op* %139, i32 0, i32 0
  %140 = load %struct.op*, %struct.op** %op_next213, align 8
  store %struct.op* %140, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end212, %if.then174, %if.then153, %if.then
  %141 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %141
}

declare dso_local i64 @Perl_cast_uv(double) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #5

; Function Attrs: nounwind
declare dso_local double @fmod(double, double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_repeat() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %count = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %infnan = alloca i8, align 1
  %mark = alloca %struct.sv**, align 8
  %sv39 = alloca %struct.sv*, align 8
  %uv = alloca i64, align 8
  %nv = alloca double, align 8
  %mark172 = alloca %struct.sv**, align 8
  %items = alloca i64, align 8
  %mod = alloca i8, align 1
  %max = alloca i64, align 8
  %markoff = alloca i64, align 8
  %tmpstr = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %isutf = alloca i8, align 1
  %max276 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  store i8 0, i8* %infnan, align 1
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags2, align 2
  %conv3 = zext i8 %10 to i32
  %and4 = and i32 %conv3, 3
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true6, label %cond.false10

cond.true6:                                       ; preds = %cond.end
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags7 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags7, align 2
  %conv8 = zext i8 %12 to i32
  %and9 = and i32 %conv8, 3
  br label %cond.end11

cond.false10:                                     ; preds = %cond.end
  %call = call i32 @Perl_block_gimme()
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false10, %cond.true6
  %cond12 = phi i32 [ %and9, %cond.true6 ], [ %call, %cond.false10 ]
  %cmp = icmp eq i32 %cond12, 3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %cond.end11
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 6
  %14 = load i8, i8* %op_private, align 1
  %conv14 = zext i8 %14 to i32
  %and15 = and i32 %conv14, 64
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** %sv, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and17 = and i32 %18, 2097152
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false20:                                     ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false20, %cond.true19
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %call21 = call i32 @Perl_mg_get(%struct.sv* %19)
  %tobool22 = icmp ne i32 %call21, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false20, %cond.true19
  %20 = phi i1 [ false, %cond.false20 ], [ false, %cond.true19 ], [ %tobool22, %land.rhs ]
  %land.ext = zext i1 %20 to i32
  br label %if.end68

if.else:                                          ; preds = %land.lhs.true, %cond.end11
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private23 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 6
  %22 = load i8, i8* %op_private23, align 1
  %conv24 = zext i8 %22 to i32
  %and25 = and i32 %conv24, 64
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.true27, label %cond.false28

cond.true27:                                      ; preds = %if.else
  br i1 true, label %if.then29, label %if.end52

cond.false28:                                     ; preds = %if.else
  br i1 false, label %if.then29, label %if.end52

if.then29:                                        ; preds = %cond.false28, %cond.true27
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %24 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr30 = getelementptr inbounds i32, i32* %24, i32 -1
  store i32* %incdec.ptr30, i32** @PL_markstack_ptr, align 8
  %25 = load i32, i32* %24, align 4
  %idx.ext = sext i32 %25 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %26 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr31 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 1
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp32 = icmp ult %struct.sv** %add.ptr31, %27
  br i1 %cmp32, label %if.then34, label %if.else38

if.then34:                                        ; preds = %if.then29
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr35 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i64 -1
  %29 = load %struct.sv*, %struct.sv** %add.ptr35, align 8
  %30 = load %struct.sv**, %struct.sv*** %mark, align 8
  %arrayidx36 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i64 1
  store %struct.sv* %29, %struct.sv** %arrayidx36, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %33 = load %struct.sv**, %struct.sv*** %mark, align 8
  %arrayidx37 = getelementptr inbounds %struct.sv*, %struct.sv** %33, i64 2
  store %struct.sv* %32, %struct.sv** %arrayidx37, align 8
  br label %if.end50

if.else38:                                        ; preds = %if.then29
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  store %struct.sv* %35, %struct.sv** %sv39, align 8
  br label %do.body

do.body:                                          ; preds = %if.else38
  br label %do.body40

do.body40:                                        ; preds = %do.body
  %36 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp41 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp41, label %cond.true43, label %cond.false44

cond.true43:                                      ; preds = %do.body40
  br i1 true, label %if.then45, label %if.end

cond.false44:                                     ; preds = %do.body40
  br i1 false, label %if.then45, label %if.end

if.then45:                                        ; preds = %cond.false44, %cond.true43
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call46 = call %struct.sv** @Perl_stack_grow(%struct.sv** %38, %struct.sv** %39, i64 1)
  store %struct.sv** %call46, %struct.sv*** %sp, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then45, %cond.false44, %cond.true43
  br label %do.end

do.end:                                           ; preds = %if.end
  %41 = load %struct.sv*, %struct.sv** %sv39, align 8
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr47 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i32 1
  store %struct.sv** %incdec.ptr47, %struct.sv*** %sp, align 8
  store %struct.sv* %41, %struct.sv** %incdec.ptr47, align 8
  br label %do.end48

do.end48:                                         ; preds = %do.end
  %43 = load %struct.sv**, %struct.sv*** %mark, align 8
  %arrayidx49 = getelementptr inbounds %struct.sv*, %struct.sv** %43, i64 1
  store %struct.sv* @PL_sv_undef, %struct.sv** %arrayidx49, align 8
  br label %if.end50

if.end50:                                         ; preds = %do.end48, %if.then34
  %44 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr51 = getelementptr inbounds %struct.sv*, %struct.sv** %44, i64 2
  store %struct.sv** %add.ptr51, %struct.sv*** %sp, align 8
  br label %if.end52

if.end52:                                         ; preds = %if.end50, %cond.false28, %cond.true27
  br label %do.body53

do.body53:                                        ; preds = %if.end52
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr54 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i64 -1
  %46 = load %struct.sv*, %struct.sv** %add.ptr54, align 8
  %sv_flags55 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags55, align 4
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags56, align 4
  %or = or i32 %47, %50
  %and57 = and i32 %or, 2099200
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body53
  br i1 true, label %land.lhs.true61, label %if.end65

cond.false60:                                     ; preds = %do.body53
  br i1 false, label %land.lhs.true61, label %if.end65

land.lhs.true61:                                  ; preds = %cond.false60, %cond.true59
  %call62 = call zeroext i1 @Perl_try_amagic_bin(i32 68, i32 4)
  br i1 %call62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %land.lhs.true61
  %51 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 0
  %52 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %52, %struct.op** %retval, align 8
  br label %return

if.end65:                                         ; preds = %land.lhs.true61, %cond.false60, %cond.true59
  br label %do.end66

do.end66:                                         ; preds = %if.end65
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr67 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i32 -1
  store %struct.sv** %incdec.ptr67, %struct.sv*** %sp, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  store %struct.sv* %54, %struct.sv** %sv, align 8
  br label %if.end68

if.end68:                                         ; preds = %do.end66, %land.end
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %56, 4096
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %if.then72, label %if.else102

if.then72:                                        ; preds = %if.end68
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags73 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags73, align 4
  %and74 = and i32 %58, -2147483392
  %cmp75 = icmp eq i32 %and74, -2147483392
  br i1 %cmp75, label %if.then77, label %if.else91

if.then77:                                        ; preds = %if.then72
  %59 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags78 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags78, align 4
  %and79 = and i32 %60, 256
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %cond.true81, label %cond.false82

cond.true81:                                      ; preds = %if.then77
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any, align 8
  %63 = bitcast i8* %62 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %63, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %64 = load i64, i64* %xivu_uv, align 8
  br label %cond.end84

cond.false82:                                     ; preds = %if.then77
  %65 = load %struct.sv*, %struct.sv** %sv, align 8
  %call83 = call i64 @Perl_sv_2uv_flags(%struct.sv* %65, i32 0)
  br label %cond.end84

cond.end84:                                       ; preds = %cond.false82, %cond.true81
  %cond85 = phi i64 [ %64, %cond.true81 ], [ %call83, %cond.false82 ]
  store i64 %cond85, i64* %uv, align 8
  %66 = load i64, i64* %uv, align 8
  %cmp86 = icmp ugt i64 %66, 9223372036854775807
  br i1 %cmp86, label %if.then88, label %if.else89

if.then88:                                        ; preds = %cond.end84
  store i64 9223372036854775807, i64* %count, align 8
  br label %if.end90

if.else89:                                        ; preds = %cond.end84
  %67 = load i64, i64* %uv, align 8
  store i64 %67, i64* %count, align 8
  br label %if.end90

if.end90:                                         ; preds = %if.else89, %if.then88
  br label %if.end101

if.else91:                                        ; preds = %if.then72
  %68 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %69, 256
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %cond.true95, label %cond.false97

cond.true95:                                      ; preds = %if.else91
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any96, align 8
  %72 = bitcast i8* %71 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %72, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %73 = load i64, i64* %xivu_iv, align 8
  br label %cond.end99

cond.false97:                                     ; preds = %if.else91
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %call98 = call i64 @Perl_sv_2iv_flags(%struct.sv* %74, i32 0)
  br label %cond.end99

cond.end99:                                       ; preds = %cond.false97, %cond.true95
  %cond100 = phi i64 [ %73, %cond.true95 ], [ %call98, %cond.false97 ]
  store i64 %cond100, i64* %count, align 8
  br label %if.end101

if.end101:                                        ; preds = %cond.end99, %if.end90
  br label %if.end143

if.else102:                                       ; preds = %if.end68
  %75 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags103 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags103, align 4
  %and104 = and i32 %76, 8192
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then106, label %if.else130

if.then106:                                       ; preds = %if.else102
  %77 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %78, 512
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %cond.true110, label %cond.false112

cond.true110:                                     ; preds = %if.then106
  %79 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any111, align 8
  %81 = bitcast i8* %80 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %81, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %82 = load double, double* %xnv_nv, align 8
  br label %cond.end114

cond.false112:                                    ; preds = %if.then106
  %83 = load %struct.sv*, %struct.sv** %sv, align 8
  %call113 = call double @Perl_sv_2nv_flags(%struct.sv* %83, i32 0)
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false112, %cond.true110
  %cond115 = phi double [ %82, %cond.true110 ], [ %call113, %cond.false112 ]
  store double %cond115, double* %nv, align 8
  %84 = load double, double* %nv, align 8
  %call116 = call zeroext i1 @Perl_isinfnan(double %84)
  %frombool = zext i1 %call116 to i8
  store i8 %frombool, i8* %infnan, align 1
  %85 = load i8, i8* %infnan, align 1
  %tobool117 = trunc i8 %85 to i1
  br i1 %tobool117, label %cond.true119, label %cond.false120

cond.true119:                                     ; preds = %cond.end114
  br i1 true, label %if.then121, label %if.else122

cond.false120:                                    ; preds = %cond.end114
  br i1 false, label %if.then121, label %if.else122

if.then121:                                       ; preds = %cond.false120, %cond.true119
  store i64 0, i64* %count, align 8
  br label %if.end129

if.else122:                                       ; preds = %cond.false120, %cond.true119
  %86 = load double, double* %nv, align 8
  %cmp123 = fcmp olt double %86, 0.000000e+00
  br i1 %cmp123, label %if.then125, label %if.else126

if.then125:                                       ; preds = %if.else122
  store i64 -1, i64* %count, align 8
  br label %if.end128

if.else126:                                       ; preds = %if.else122
  %87 = load double, double* %nv, align 8
  %conv127 = fptosi double %87 to i64
  store i64 %conv127, i64* %count, align 8
  br label %if.end128

if.end128:                                        ; preds = %if.else126, %if.then125
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then121
  br label %if.end142

if.else130:                                       ; preds = %if.else102
  %88 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags131 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags131, align 4
  %and132 = and i32 %89, 256
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %cond.true134, label %cond.false138

cond.true134:                                     ; preds = %if.else130
  %90 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any135 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 0
  %91 = load i8*, i8** %sv_any135, align 8
  %92 = bitcast i8* %91 to %struct.xpviv*
  %xiv_u136 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %92, i32 0, i32 4
  %xivu_iv137 = bitcast %union._xivu* %xiv_u136 to i64*
  %93 = load i64, i64* %xivu_iv137, align 8
  br label %cond.end140

cond.false138:                                    ; preds = %if.else130
  %94 = load %struct.sv*, %struct.sv** %sv, align 8
  %call139 = call i64 @Perl_sv_2iv_flags(%struct.sv* %94, i32 0)
  br label %cond.end140

cond.end140:                                      ; preds = %cond.false138, %cond.true134
  %cond141 = phi i64 [ %93, %cond.true134 ], [ %call139, %cond.false138 ]
  store i64 %cond141, i64* %count, align 8
  br label %if.end142

if.end142:                                        ; preds = %cond.end140, %if.end129
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %if.end101
  %95 = load i8, i8* %infnan, align 1
  %tobool144 = trunc i8 %95 to i1
  br i1 %tobool144, label %if.then145, label %if.else146

if.then145:                                       ; preds = %if.end143
  call void (i32, i8*, ...) @Perl_ck_warner(i32 13, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.28, i64 0, i64 0))
  br label %if.end151

if.else146:                                       ; preds = %if.end143
  %96 = load i64, i64* %count, align 8
  %cmp147 = icmp slt i64 %96, 0
  br i1 %cmp147, label %if.then149, label %if.end150

if.then149:                                       ; preds = %if.else146
  store i64 0, i64* %count, align 8
  call void (i32, i8*, ...) @Perl_ck_warner(i32 13, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.29, i64 0, i64 0))
  br label %if.end150

if.end150:                                        ; preds = %if.then149, %if.else146
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then145
  %97 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags152 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 5
  %98 = load i8, i8* %op_flags152, align 2
  %conv153 = zext i8 %98 to i32
  %and154 = and i32 %conv153, 3
  %tobool155 = icmp ne i32 %and154, 0
  br i1 %tobool155, label %cond.true156, label %cond.false160

cond.true156:                                     ; preds = %if.end151
  %99 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags157 = getelementptr inbounds %struct.op, %struct.op* %99, i32 0, i32 5
  %100 = load i8, i8* %op_flags157, align 2
  %conv158 = zext i8 %100 to i32
  %and159 = and i32 %conv158, 3
  br label %cond.end162

cond.false160:                                    ; preds = %if.end151
  %call161 = call i32 @Perl_block_gimme()
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false160, %cond.true156
  %cond163 = phi i32 [ %and159, %cond.true156 ], [ %call161, %cond.false160 ]
  %cmp164 = icmp eq i32 %cond163, 3
  br i1 %cmp164, label %land.lhs.true166, label %if.else240

land.lhs.true166:                                 ; preds = %cond.end162
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private167 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 6
  %102 = load i8, i8* %op_private167, align 1
  %conv168 = zext i8 %102 to i32
  %and169 = and i32 %conv168, 64
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %if.then171, label %if.else240

if.then171:                                       ; preds = %land.lhs.true166
  %103 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %104 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr173 = getelementptr inbounds i32, i32* %104, i32 -1
  store i32* %incdec.ptr173, i32** @PL_markstack_ptr, align 8
  %105 = load i32, i32* %104, align 4
  %idx.ext174 = sext i32 %105 to i64
  %add.ptr175 = getelementptr inbounds %struct.sv*, %struct.sv** %103, i64 %idx.ext174
  store %struct.sv** %add.ptr175, %struct.sv*** %mark172, align 8
  %106 = load %struct.sv**, %struct.sv*** %sp, align 8
  %107 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %sub.ptr.lhs.cast176 = ptrtoint %struct.sv** %106 to i64
  %sub.ptr.rhs.cast177 = ptrtoint %struct.sv** %107 to i64
  %sub.ptr.sub178 = sub i64 %sub.ptr.lhs.cast176, %sub.ptr.rhs.cast177
  %sub.ptr.div179 = sdiv exact i64 %sub.ptr.sub178, 8
  store i64 %sub.ptr.div179, i64* %items, align 8
  %108 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags180 = getelementptr inbounds %struct.op, %struct.op* %108, i32 0, i32 5
  %109 = load i8, i8* %op_flags180, align 2
  %conv181 = zext i8 %109 to i32
  %and182 = and i32 %conv181, 32
  %conv183 = trunc i32 %and182 to i8
  store i8 %conv183, i8* %mod, align 1
  %110 = load i64, i64* %count, align 8
  %cmp184 = icmp sgt i64 %110, 1
  br i1 %cmp184, label %if.then186, label %if.else233

if.then186:                                       ; preds = %if.then171
  %111 = load i64, i64* %items, align 8
  %112 = load i64, i64* %count, align 8
  %div = udiv i64 -1, %112
  %cmp187 = icmp ugt i64 %111, %div
  br i1 %cmp187, label %if.then191, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then186
  %113 = load i64, i64* %items, align 8
  %cmp189 = icmp ugt i64 %113, 268435455
  br i1 %cmp189, label %if.then191, label %if.end192

if.then191:                                       ; preds = %lor.lhs.false, %if.then186
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.30, i64 0, i64 0))
  br label %if.end192

if.end192:                                        ; preds = %if.then191, %lor.lhs.false
  %114 = load i64, i64* %items, align 8
  %115 = load i64, i64* %count, align 8
  %mul = mul i64 %114, %115
  store i64 %mul, i64* %max, align 8
  br label %do.body193

do.body193:                                       ; preds = %if.end192
  %116 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %117 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %sub.ptr.lhs.cast194 = ptrtoint %struct.sv** %116 to i64
  %sub.ptr.rhs.cast195 = ptrtoint %struct.sv** %117 to i64
  %sub.ptr.sub196 = sub i64 %sub.ptr.lhs.cast194, %sub.ptr.rhs.cast195
  %sub.ptr.div197 = sdiv exact i64 %sub.ptr.sub196, 8
  %118 = load i64, i64* %max, align 8
  %cmp198 = icmp slt i64 %sub.ptr.div197, %118
  br i1 %cmp198, label %cond.true200, label %cond.false201

cond.true200:                                     ; preds = %do.body193
  br i1 true, label %if.then202, label %if.end209

cond.false201:                                    ; preds = %do.body193
  br i1 false, label %if.then202, label %if.end209

if.then202:                                       ; preds = %cond.false201, %cond.true200
  %119 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %120 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast203 = ptrtoint %struct.sv** %119 to i64
  %sub.ptr.rhs.cast204 = ptrtoint %struct.sv** %120 to i64
  %sub.ptr.sub205 = sub i64 %sub.ptr.lhs.cast203, %sub.ptr.rhs.cast204
  %sub.ptr.div206 = sdiv exact i64 %sub.ptr.sub205, 8
  store i64 %sub.ptr.div206, i64* %markoff, align 8
  %121 = load %struct.sv**, %struct.sv*** %sp, align 8
  %122 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %123 = load i64, i64* %max, align 8
  %call207 = call %struct.sv** @Perl_stack_grow(%struct.sv** %121, %struct.sv** %122, i64 %123)
  store %struct.sv** %call207, %struct.sv*** %sp, align 8
  %124 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %125 = load i64, i64* %markoff, align 8
  %add.ptr208 = getelementptr inbounds %struct.sv*, %struct.sv** %124, i64 %125
  store %struct.sv** %add.ptr208, %struct.sv*** %mark172, align 8
  %126 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end209

if.end209:                                        ; preds = %if.then202, %cond.false201, %cond.true200
  br label %do.end210

do.end210:                                        ; preds = %if.end209
  br label %while.cond

while.cond:                                       ; preds = %if.end226, %do.end210
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  %128 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %cmp211 = icmp ugt %struct.sv** %127, %128
  br i1 %cmp211, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %129 = load %struct.sv**, %struct.sv*** %sp, align 8
  %130 = load %struct.sv*, %struct.sv** %129, align 8
  %tobool213 = icmp ne %struct.sv* %130, null
  br i1 %tobool213, label %if.then214, label %if.end226

if.then214:                                       ; preds = %while.body
  %131 = load i8, i8* %mod, align 1
  %conv215 = zext i8 %131 to i32
  %tobool216 = icmp ne i32 %conv215, 0
  br i1 %tobool216, label %land.lhs.true217, label %if.end223

land.lhs.true217:                                 ; preds = %if.then214
  %132 = load %struct.sv**, %struct.sv*** %sp, align 8
  %133 = load %struct.sv*, %struct.sv** %132, align 8
  %sv_flags218 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags218, align 4
  %and219 = and i32 %134, 131072
  %tobool220 = icmp ne i32 %and219, 0
  br i1 %tobool220, label %if.then221, label %if.end223

if.then221:                                       ; preds = %land.lhs.true217
  %135 = load %struct.sv**, %struct.sv*** %sp, align 8
  %136 = load %struct.sv*, %struct.sv** %135, align 8
  %call222 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %136, i32 1538)
  %137 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call222, %struct.sv** %137, align 8
  br label %if.end223

if.end223:                                        ; preds = %if.then221, %land.lhs.true217, %if.then214
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  %139 = load %struct.sv*, %struct.sv** %138, align 8
  %sv_flags224 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags224, align 4
  %and225 = and i32 %140, -524289
  store i32 %and225, i32* %sv_flags224, align 4
  br label %if.end226

if.end226:                                        ; preds = %if.end223, %while.body
  %141 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr227 = getelementptr inbounds %struct.sv*, %struct.sv** %141, i32 -1
  store %struct.sv** %incdec.ptr227, %struct.sv*** %sp, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %142 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %incdec.ptr228 = getelementptr inbounds %struct.sv*, %struct.sv** %142, i32 1
  store %struct.sv** %incdec.ptr228, %struct.sv*** %mark172, align 8
  %143 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %144 = load i64, i64* %items, align 8
  %add.ptr229 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i64 %144
  %145 = bitcast %struct.sv** %add.ptr229 to i8*
  %146 = load %struct.sv**, %struct.sv*** %mark172, align 8
  %147 = bitcast %struct.sv** %146 to i8*
  %148 = load i64, i64* %items, align 8
  %mul230 = mul i64 %148, 8
  %conv231 = trunc i64 %mul230 to i32
  %149 = load i64, i64* %count, align 8
  %sub = sub nsw i64 %149, 1
  call void @Perl_repeatcpy(i8* %145, i8* %147, i32 %conv231, i64 %sub)
  %150 = load i64, i64* %max, align 8
  %151 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr232 = getelementptr inbounds %struct.sv*, %struct.sv** %151, i64 %150
  store %struct.sv** %add.ptr232, %struct.sv*** %sp, align 8
  br label %if.end239

if.else233:                                       ; preds = %if.then171
  %152 = load i64, i64* %count, align 8
  %cmp234 = icmp sle i64 %152, 0
  br i1 %cmp234, label %if.then236, label %if.end238

if.then236:                                       ; preds = %if.else233
  %153 = load i64, i64* %items, align 8
  %154 = load %struct.sv**, %struct.sv*** %sp, align 8
  %idx.neg = sub i64 0, %153
  %add.ptr237 = getelementptr inbounds %struct.sv*, %struct.sv** %154, i64 %idx.neg
  store %struct.sv** %add.ptr237, %struct.sv*** %sp, align 8
  br label %if.end238

if.end238:                                        ; preds = %if.then236, %if.else233
  br label %if.end239

if.end239:                                        ; preds = %if.end238, %while.end
  br label %if.end347

if.else240:                                       ; preds = %land.lhs.true166, %cond.end162
  %155 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr241 = getelementptr inbounds %struct.sv*, %struct.sv** %155, i32 -1
  store %struct.sv** %incdec.ptr241, %struct.sv*** %sp, align 8
  %156 = load %struct.sv*, %struct.sv** %155, align 8
  store %struct.sv* %156, %struct.sv** %tmpstr, align 8
  %157 = load %struct.sv*, %struct.sv** %targ, align 8
  %158 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  %cmp242 = icmp ne %struct.sv* %157, %158
  br i1 %cmp242, label %if.then244, label %if.end245

if.then244:                                       ; preds = %if.else240
  %159 = load %struct.sv*, %struct.sv** %targ, align 8
  %160 = load %struct.sv*, %struct.sv** %tmpstr, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %159, %struct.sv* %160, i32 1536)
  br label %if.end245

if.end245:                                        ; preds = %if.then244, %if.else240
  %161 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %162, 430018304
  %cmp248 = icmp eq i32 %and247, 1024
  br i1 %cmp248, label %cond.true250, label %cond.false252

cond.true250:                                     ; preds = %if.end245
  %163 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any251 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any251, align 8
  %165 = bitcast i8* %164 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %165, i32 0, i32 2
  %166 = load i64, i64* %xpv_cur, align 8
  store i64 %166, i64* %len, align 8
  %167 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %168 = load i8*, i8** %svu_pv, align 8
  br label %cond.end254

cond.false252:                                    ; preds = %if.end245
  %169 = load %struct.sv*, %struct.sv** %targ, align 8
  %call253 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %169, i64* %len, i32 0)
  br label %cond.end254

cond.end254:                                      ; preds = %cond.false252, %cond.true250
  %cond255 = phi i8* [ %168, %cond.true250 ], [ %call253, %cond.false252 ]
  %170 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags256 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags256, align 4
  %and257 = and i32 %171, 536870912
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %land.rhs259, label %land.end262

land.rhs259:                                      ; preds = %cond.end254
  %172 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %172, i32 0, i32 10
  %173 = load i32, i32* %cop_hints, align 8
  %add = add i32 %173, 0
  %and260 = and i32 %add, 8
  %tobool261 = icmp ne i32 %and260, 0
  %lnot = xor i1 %tobool261, true
  br label %land.end262

land.end262:                                      ; preds = %land.rhs259, %cond.end254
  %174 = phi i1 [ false, %cond.end254 ], [ %lnot, %land.rhs259 ]
  %frombool264 = zext i1 %174 to i8
  store i8 %frombool264, i8* %isutf, align 1
  %175 = load i64, i64* %count, align 8
  %cmp265 = icmp ne i64 %175, 1
  br i1 %cmp265, label %if.then267, label %if.end321

if.then267:                                       ; preds = %land.end262
  %176 = load i64, i64* %count, align 8
  %cmp268 = icmp slt i64 %176, 1
  br i1 %cmp268, label %if.then270, label %if.else275

if.then270:                                       ; preds = %if.then267
  br label %do.body271

do.body271:                                       ; preds = %if.then270
  %177 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any272 = getelementptr inbounds %struct.sv, %struct.sv* %177, i32 0, i32 0
  %178 = load i8*, i8** %sv_any272, align 8
  %179 = bitcast i8* %178 to %struct.xpv*
  %xpv_cur273 = getelementptr inbounds %struct.xpv, %struct.xpv* %179, i32 0, i32 2
  store i64 0, i64* %xpv_cur273, align 8
  br label %do.end274

do.end274:                                        ; preds = %do.body271
  br label %if.end315

if.else275:                                       ; preds = %if.then267
  %180 = load i64, i64* %len, align 8
  %181 = load i64, i64* %count, align 8
  %div277 = udiv i64 -2, %181
  %cmp278 = icmp ugt i64 %180, %div277
  br i1 %cmp278, label %if.then283, label %lor.lhs.false280

lor.lhs.false280:                                 ; preds = %if.else275
  %182 = load i64, i64* %len, align 8
  %cmp281 = icmp ugt i64 %182, 2147483647
  br i1 %cmp281, label %if.then283, label %if.end284

if.then283:                                       ; preds = %lor.lhs.false280, %if.else275
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.31, i64 0, i64 0))
  br label %if.end284

if.end284:                                        ; preds = %if.then283, %lor.lhs.false280
  %183 = load i64, i64* %count, align 8
  %184 = load i64, i64* %len, align 8
  %mul285 = mul i64 %183, %184
  %add286 = add i64 %mul285, 1
  store i64 %add286, i64* %max276, align 8
  %185 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags287 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags287, align 4
  %and288 = and i32 %186, 268435456
  %tobool289 = icmp ne i32 %and288, 0
  br i1 %tobool289, label %cond.true294, label %lor.lhs.false290

lor.lhs.false290:                                 ; preds = %if.end284
  %187 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any291 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any291, align 8
  %189 = bitcast i8* %188 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %189, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %190 = load i64, i64* %xpvlenu_len, align 8
  %191 = load i64, i64* %max276, align 8
  %cmp292 = icmp ult i64 %190, %191
  br i1 %cmp292, label %cond.true294, label %cond.false296

cond.true294:                                     ; preds = %lor.lhs.false290, %if.end284
  %192 = load %struct.sv*, %struct.sv** %targ, align 8
  %193 = load i64, i64* %max276, align 8
  %call295 = call i8* @Perl_sv_grow(%struct.sv* %192, i64 %193)
  br label %cond.end299

cond.false296:                                    ; preds = %lor.lhs.false290
  %194 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u297 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 3
  %svu_pv298 = bitcast %union.anon* %sv_u297 to i8**
  %195 = load i8*, i8** %svu_pv298, align 8
  br label %cond.end299

cond.end299:                                      ; preds = %cond.false296, %cond.true294
  %cond300 = phi i8* [ %call295, %cond.true294 ], [ %195, %cond.false296 ]
  %196 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u301 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 3
  %svu_pv302 = bitcast %union.anon* %sv_u301 to i8**
  %197 = load i8*, i8** %svu_pv302, align 8
  %198 = load i64, i64* %len, align 8
  %add.ptr303 = getelementptr inbounds i8, i8* %197, i64 %198
  %199 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u304 = getelementptr inbounds %struct.sv, %struct.sv* %199, i32 0, i32 3
  %svu_pv305 = bitcast %union.anon* %sv_u304 to i8**
  %200 = load i8*, i8** %svu_pv305, align 8
  %201 = load i64, i64* %len, align 8
  %conv306 = trunc i64 %201 to i32
  %202 = load i64, i64* %count, align 8
  %sub307 = sub nsw i64 %202, 1
  call void @Perl_repeatcpy(i8* %add.ptr303, i8* %200, i32 %conv306, i64 %sub307)
  br label %do.body308

do.body308:                                       ; preds = %cond.end299
  %203 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any309 = getelementptr inbounds %struct.sv, %struct.sv* %203, i32 0, i32 0
  %204 = load i8*, i8** %sv_any309, align 8
  %205 = bitcast i8* %204 to %struct.xpv*
  %xpv_cur310 = getelementptr inbounds %struct.xpv, %struct.xpv* %205, i32 0, i32 2
  %206 = load i64, i64* %xpv_cur310, align 8
  %207 = load i64, i64* %count, align 8
  %mul311 = mul i64 %206, %207
  %208 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any312 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 0
  %209 = load i8*, i8** %sv_any312, align 8
  %210 = bitcast i8* %209 to %struct.xpv*
  %xpv_cur313 = getelementptr inbounds %struct.xpv, %struct.xpv* %210, i32 0, i32 2
  store i64 %mul311, i64* %xpv_cur313, align 8
  br label %do.end314

do.end314:                                        ; preds = %do.body308
  br label %if.end315

if.end315:                                        ; preds = %do.end314, %do.end274
  %211 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u316 = getelementptr inbounds %struct.sv, %struct.sv* %211, i32 0, i32 3
  %svu_pv317 = bitcast %union.anon* %sv_u316 to i8**
  %212 = load i8*, i8** %svu_pv317, align 8
  %213 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any318 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 0
  %214 = load i8*, i8** %sv_any318, align 8
  %215 = bitcast i8* %214 to %struct.xpv*
  %xpv_cur319 = getelementptr inbounds %struct.xpv, %struct.xpv* %215, i32 0, i32 2
  %216 = load i64, i64* %xpv_cur319, align 8
  %add.ptr320 = getelementptr inbounds i8, i8* %212, i64 %216
  store i8 0, i8* %add.ptr320, align 1
  br label %if.end321

if.end321:                                        ; preds = %if.end315, %land.end262
  %217 = load i8, i8* %isutf, align 1
  %tobool322 = trunc i8 %217 to i1
  br i1 %tobool322, label %if.then323, label %if.else328

if.then323:                                       ; preds = %if.end321
  %218 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags324 = getelementptr inbounds %struct.sv, %struct.sv* %218, i32 0, i32 2
  %219 = load i32, i32* %sv_flags324, align 4
  %and325 = and i32 %219, 2147418367
  store i32 %and325, i32* %sv_flags324, align 4
  %220 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags326 = getelementptr inbounds %struct.sv, %struct.sv* %220, i32 0, i32 2
  %221 = load i32, i32* %sv_flags326, align 4
  %or327 = or i32 %221, 17408
  store i32 %or327, i32* %sv_flags326, align 4
  br label %if.end333

if.else328:                                       ; preds = %if.end321
  %222 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags329 = getelementptr inbounds %struct.sv, %struct.sv* %222, i32 0, i32 2
  %223 = load i32, i32* %sv_flags329, align 4
  %and330 = and i32 %223, 1610547455
  store i32 %and330, i32* %sv_flags329, align 4
  %224 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags331 = getelementptr inbounds %struct.sv, %struct.sv* %224, i32 0, i32 2
  %225 = load i32, i32* %sv_flags331, align 4
  %or332 = or i32 %225, 17408
  store i32 %or332, i32* %sv_flags331, align 4
  br label %if.end333

if.end333:                                        ; preds = %if.else328, %if.then323
  br label %do.body334

do.body334:                                       ; preds = %if.end333
  br label %do.body335

do.body335:                                       ; preds = %do.body334
  %226 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %226, i32 0, i32 2
  %227 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %227, 4194304
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %cond.true339, label %cond.false340

cond.true339:                                     ; preds = %do.body335
  br i1 true, label %if.then341, label %if.end343

cond.false340:                                    ; preds = %do.body335
  br i1 false, label %if.then341, label %if.end343

if.then341:                                       ; preds = %cond.false340, %cond.true339
  %228 = load %struct.sv*, %struct.sv** %targ, align 8
  %call342 = call i32 @Perl_mg_set(%struct.sv* %228)
  br label %if.end343

if.end343:                                        ; preds = %if.then341, %cond.false340, %cond.true339
  br label %do.end344

do.end344:                                        ; preds = %if.end343
  %229 = load %struct.sv*, %struct.sv** %targ, align 8
  %230 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr345 = getelementptr inbounds %struct.sv*, %struct.sv** %230, i32 1
  store %struct.sv** %incdec.ptr345, %struct.sv*** %sp, align 8
  store %struct.sv* %229, %struct.sv** %incdec.ptr345, align 8
  br label %do.end346

do.end346:                                        ; preds = %do.end344
  br label %if.end347

if.end347:                                        ; preds = %do.end346, %if.end239
  %231 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %231, %struct.sv*** @PL_stack_sp, align 8
  %232 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next348 = getelementptr inbounds %struct.op, %struct.op* %232, i32 0, i32 0
  %233 = load %struct.op*, %struct.op** %op_next348, align 8
  store %struct.op* %233, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end347, %if.then64
  %234 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %234
}

declare dso_local i64 @Perl_sv_2uv_flags(%struct.sv*, i32) #1

declare dso_local zeroext i1 @Perl_isinfnan(double) #1

declare dso_local void @Perl_repeatcpy(i8*, i8*, i32, i64) #1

declare dso_local i8* @Perl_sv_pvn_force_flags(%struct.sv*, i64*, i32) #1

declare dso_local i8* @Perl_sv_grow(%struct.sv*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_subtract() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %useleft = alloca i8, align 1
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %auv = alloca i64, align 8
  %auvok = alloca i8, align 1
  %a_valid = alloca i8, align 1
  %aiv = alloca i64, align 8
  %result_good = alloca i8, align 1
  %result = alloca i64, align 8
  %buv = alloca i64, align 8
  %buvok = alloca i8, align 1
  %biv = alloca i64, align 8
  %value = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 32, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 -1
  %20 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %22, 65280
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %24, 255
  %cmp = icmp eq i32 %and13, 8
  br i1 %cmp, label %lor.end, label %lor.lhs.false15

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %25 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %26, 16826623
  %cmp18 = icmp eq i32 %and17, 16777226
  br i1 %cmp18, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false15
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags20 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 5
  %28 = load i8, i8* %op_flags20, align 2
  %conv21 = zext i8 %28 to i32
  %and22 = and i32 %conv21, 64
  %tobool23 = icmp ne i32 %and22, 0
  %lnot = xor i1 %tobool23, true
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false15, %lor.lhs.false, %do.end
  %29 = phi i1 [ true, %lor.lhs.false15 ], [ true, %lor.lhs.false ], [ true, %do.end ], [ %lnot, %lor.rhs ]
  %frombool = zext i1 %29 to i8
  store i8 %frombool, i8* %useleft, align 1
  %30 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %31, 4352
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.false36, label %land.lhs.true27

land.lhs.true27:                                  ; preds = %lor.end
  %32 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %33, 1536
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %cond.true31, label %cond.false36

cond.true31:                                      ; preds = %land.lhs.true27
  %34 = load %struct.sv*, %struct.sv** %svr, align 8
  %call32 = call i64 @Perl_sv_2iv_flags(%struct.sv* %34, i32 0)
  %35 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %36, 256
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then40, label %if.end205

cond.false36:                                     ; preds = %land.lhs.true27, %lor.end
  %37 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %38, 256
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %if.then40, label %if.end205

if.then40:                                        ; preds = %cond.false36, %cond.true31
  store i64 0, i64* %auv, align 8
  store i8 0, i8* %auvok, align 1
  store i8 0, i8* %a_valid, align 1
  %39 = load i8, i8* %useleft, align 1
  %tobool41 = trunc i8 %39 to i1
  br i1 %tobool41, label %if.else, label %if.then42

if.then42:                                        ; preds = %if.then40
  store i64 0, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  store i8 1, i8* %a_valid, align 1
  br label %if.end81

if.else:                                          ; preds = %if.then40
  %40 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %41, 4352
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.false55, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %if.else
  %42 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %43, 1536
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %cond.true50, label %cond.false55

cond.true50:                                      ; preds = %land.lhs.true46
  %44 = load %struct.sv*, %struct.sv** %svl, align 8
  %call51 = call i64 @Perl_sv_2iv_flags(%struct.sv* %44, i32 0)
  %45 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %46, 256
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %if.then59, label %if.end80

cond.false55:                                     ; preds = %land.lhs.true46, %if.else
  %47 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 2
  %48 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %48, 256
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.end80

if.then59:                                        ; preds = %cond.false55, %cond.true50
  %49 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %50, -2147483392
  %cmp62 = icmp eq i32 %and61, -2147483392
  %frombool64 = zext i1 %cmp62 to i8
  store i8 %frombool64, i8* %auvok, align 1
  br i1 %cmp62, label %if.then65, label %if.else66

if.then65:                                        ; preds = %if.then59
  %51 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any, align 8
  %53 = bitcast i8* %52 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %53, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %54 = load i64, i64* %xivu_uv, align 8
  store i64 %54, i64* %auv, align 8
  br label %if.end79

if.else66:                                        ; preds = %if.then59
  %55 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any67, align 8
  %57 = bitcast i8* %56 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %57, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %58 = load i64, i64* %xivu_iv, align 8
  store i64 %58, i64* %aiv, align 8
  %59 = load i64, i64* %aiv, align 8
  %cmp68 = icmp sge i64 %59, 0
  br i1 %cmp68, label %if.then70, label %if.else71

if.then70:                                        ; preds = %if.else66
  %60 = load i64, i64* %aiv, align 8
  store i64 %60, i64* %auv, align 8
  store i8 1, i8* %auvok, align 1
  br label %if.end78

if.else71:                                        ; preds = %if.else66
  %61 = load i64, i64* %aiv, align 8
  %cmp72 = icmp eq i64 %61, -9223372036854775808
  br i1 %cmp72, label %cond.true74, label %cond.false75

cond.true74:                                      ; preds = %if.else71
  %62 = load i64, i64* %aiv, align 8
  br label %cond.end76

cond.false75:                                     ; preds = %if.else71
  %63 = load i64, i64* %aiv, align 8
  %sub = sub nsw i64 0, %63
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false75, %cond.true74
  %cond77 = phi i64 [ %62, %cond.true74 ], [ %sub, %cond.false75 ]
  store i64 %cond77, i64* %auv, align 8
  br label %if.end78

if.end78:                                         ; preds = %cond.end76, %if.then70
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.then65
  store i8 1, i8* %a_valid, align 1
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %cond.false55, %cond.true50
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then42
  %64 = load i8, i8* %a_valid, align 1
  %tobool82 = trunc i8 %64 to i1
  br i1 %tobool82, label %if.then83, label %if.end204

if.then83:                                        ; preds = %if.end81
  store i8 0, i8* %result_good, align 1
  %65 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %66, -2147483392
  %cmp86 = icmp eq i32 %and85, -2147483392
  %frombool88 = zext i1 %cmp86 to i8
  store i8 %frombool88, i8* %buvok, align 1
  %67 = load i8, i8* %buvok, align 1
  %tobool89 = trunc i8 %67 to i1
  br i1 %tobool89, label %if.then90, label %if.else94

if.then90:                                        ; preds = %if.then83
  %68 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 0
  %69 = load i8*, i8** %sv_any91, align 8
  %70 = bitcast i8* %69 to %struct.xpvuv*
  %xuv_u92 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %70, i32 0, i32 4
  %xivu_uv93 = bitcast %union._xivu* %xuv_u92 to i64*
  %71 = load i64, i64* %xivu_uv93, align 8
  store i64 %71, i64* %buv, align 8
  br label %if.end110

if.else94:                                        ; preds = %if.then83
  %72 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any95, align 8
  %74 = bitcast i8* %73 to %struct.xpviv*
  %xiv_u96 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %74, i32 0, i32 4
  %xivu_iv97 = bitcast %union._xivu* %xiv_u96 to i64*
  %75 = load i64, i64* %xivu_iv97, align 8
  store i64 %75, i64* %biv, align 8
  %76 = load i64, i64* %biv, align 8
  %cmp98 = icmp sge i64 %76, 0
  br i1 %cmp98, label %if.then100, label %if.else101

if.then100:                                       ; preds = %if.else94
  %77 = load i64, i64* %biv, align 8
  store i64 %77, i64* %buv, align 8
  store i8 1, i8* %buvok, align 1
  br label %if.end109

if.else101:                                       ; preds = %if.else94
  %78 = load i64, i64* %biv, align 8
  %cmp102 = icmp eq i64 %78, -9223372036854775808
  br i1 %cmp102, label %cond.true104, label %cond.false105

cond.true104:                                     ; preds = %if.else101
  %79 = load i64, i64* %biv, align 8
  br label %cond.end107

cond.false105:                                    ; preds = %if.else101
  %80 = load i64, i64* %biv, align 8
  %sub106 = sub nsw i64 0, %80
  br label %cond.end107

cond.end107:                                      ; preds = %cond.false105, %cond.true104
  %cond108 = phi i64 [ %79, %cond.true104 ], [ %sub106, %cond.false105 ]
  store i64 %cond108, i64* %buv, align 8
  br label %if.end109

if.end109:                                        ; preds = %cond.end107, %if.then100
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %if.then90
  %81 = load i8, i8* %auvok, align 1
  %tobool111 = trunc i8 %81 to i1
  %conv112 = zext i1 %tobool111 to i32
  %82 = load i8, i8* %buvok, align 1
  %tobool113 = trunc i8 %82 to i1
  %conv114 = zext i1 %tobool113 to i32
  %xor = xor i32 %conv112, %conv114
  %tobool115 = icmp ne i32 %xor, 0
  br i1 %tobool115, label %if.then116, label %if.else121

if.then116:                                       ; preds = %if.end110
  %83 = load i64, i64* %auv, align 8
  %84 = load i64, i64* %buv, align 8
  %add = add i64 %83, %84
  store i64 %add, i64* %result, align 8
  %85 = load i64, i64* %result, align 8
  %86 = load i64, i64* %auv, align 8
  %cmp117 = icmp uge i64 %85, %86
  br i1 %cmp117, label %if.then119, label %if.end120

if.then119:                                       ; preds = %if.then116
  store i8 1, i8* %result_good, align 1
  br label %if.end120

if.end120:                                        ; preds = %if.then119, %if.then116
  br label %if.end140

if.else121:                                       ; preds = %if.end110
  %87 = load i64, i64* %auv, align 8
  %88 = load i64, i64* %buv, align 8
  %cmp122 = icmp uge i64 %87, %88
  br i1 %cmp122, label %if.then124, label %if.else130

if.then124:                                       ; preds = %if.else121
  %89 = load i64, i64* %auv, align 8
  %90 = load i64, i64* %buv, align 8
  %sub125 = sub i64 %89, %90
  store i64 %sub125, i64* %result, align 8
  %91 = load i64, i64* %result, align 8
  %92 = load i64, i64* %auv, align 8
  %cmp126 = icmp ule i64 %91, %92
  br i1 %cmp126, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.then124
  store i8 1, i8* %result_good, align 1
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %if.then124
  br label %if.end139

if.else130:                                       ; preds = %if.else121
  %93 = load i64, i64* %buv, align 8
  %94 = load i64, i64* %auv, align 8
  %sub131 = sub i64 %93, %94
  store i64 %sub131, i64* %result, align 8
  %95 = load i64, i64* %result, align 8
  %96 = load i64, i64* %buv, align 8
  %cmp132 = icmp ule i64 %95, %96
  br i1 %cmp132, label %if.then134, label %if.end138

if.then134:                                       ; preds = %if.else130
  %97 = load i8, i8* %auvok, align 1
  %tobool135 = trunc i8 %97 to i1
  %lnot136 = xor i1 %tobool135, true
  %frombool137 = zext i1 %lnot136 to i8
  store i8 %frombool137, i8* %auvok, align 1
  store i8 1, i8* %result_good, align 1
  br label %if.end138

if.end138:                                        ; preds = %if.then134, %if.else130
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.end129
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.end120
  %98 = load i8, i8* %result_good, align 1
  %tobool141 = trunc i8 %98 to i1
  br i1 %tobool141, label %if.then142, label %if.end203

if.then142:                                       ; preds = %if.end140
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %99, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %100 = load i8, i8* %auvok, align 1
  %tobool143 = trunc i8 %100 to i1
  br i1 %tobool143, label %if.then144, label %if.else159

if.then144:                                       ; preds = %if.then142
  br label %do.body145

do.body145:                                       ; preds = %if.then144
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %102 = load i64, i64* %result, align 8
  call void @Perl_sv_setuv(%struct.sv* %101, i64 %102)
  br label %do.body146

do.body146:                                       ; preds = %do.body145
  br label %do.body147

do.body147:                                       ; preds = %do.body146
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %104, 4194304
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %cond.true151, label %cond.false152

cond.true151:                                     ; preds = %do.body147
  br i1 true, label %if.then153, label %if.end155

cond.false152:                                    ; preds = %do.body147
  br i1 false, label %if.then153, label %if.end155

if.then153:                                       ; preds = %cond.false152, %cond.true151
  %105 = load %struct.sv*, %struct.sv** %targ, align 8
  %call154 = call i32 @Perl_mg_set(%struct.sv* %105)
  br label %if.end155

if.end155:                                        ; preds = %if.then153, %cond.false152, %cond.true151
  br label %do.end156

do.end156:                                        ; preds = %if.end155
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %106, %struct.sv** %107, align 8
  br label %do.end157

do.end157:                                        ; preds = %do.end156
  br label %do.end158

do.end158:                                        ; preds = %do.end157
  br label %if.end201

if.else159:                                       ; preds = %if.then142
  %108 = load i64, i64* %result, align 8
  %cmp160 = icmp ule i64 %108, -9223372036854775808
  br i1 %cmp160, label %if.then162, label %if.else184

if.then162:                                       ; preds = %if.else159
  br label %do.body163

do.body163:                                       ; preds = %if.then162
  %109 = load %struct.sv*, %struct.sv** %targ, align 8
  %110 = load i64, i64* %result, align 8
  %cmp164 = icmp eq i64 %110, -9223372036854775808
  br i1 %cmp164, label %cond.true166, label %cond.false167

cond.true166:                                     ; preds = %do.body163
  br label %cond.end169

cond.false167:                                    ; preds = %do.body163
  %111 = load i64, i64* %result, align 8
  %sub168 = sub nsw i64 0, %111
  br label %cond.end169

cond.end169:                                      ; preds = %cond.false167, %cond.true166
  %cond170 = phi i64 [ -9223372036854775808, %cond.true166 ], [ %sub168, %cond.false167 ]
  call void @Perl_sv_setiv(%struct.sv* %109, i64 %cond170)
  br label %do.body171

do.body171:                                       ; preds = %cond.end169
  br label %do.body172

do.body172:                                       ; preds = %do.body171
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %113, 4194304
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %cond.true176, label %cond.false177

cond.true176:                                     ; preds = %do.body172
  br i1 true, label %if.then178, label %if.end180

cond.false177:                                    ; preds = %do.body172
  br i1 false, label %if.then178, label %if.end180

if.then178:                                       ; preds = %cond.false177, %cond.true176
  %114 = load %struct.sv*, %struct.sv** %targ, align 8
  %call179 = call i32 @Perl_mg_set(%struct.sv* %114)
  br label %if.end180

if.end180:                                        ; preds = %if.then178, %cond.false177, %cond.true176
  br label %do.end181

do.end181:                                        ; preds = %if.end180
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %115, %struct.sv** %116, align 8
  br label %do.end182

do.end182:                                        ; preds = %do.end181
  br label %do.end183

do.end183:                                        ; preds = %do.end182
  br label %if.end200

if.else184:                                       ; preds = %if.else159
  br label %do.body185

do.body185:                                       ; preds = %if.else184
  %117 = load %struct.sv*, %struct.sv** %targ, align 8
  %118 = load i64, i64* %result, align 8
  %conv186 = uitofp i64 %118 to double
  %fneg = fneg double %conv186
  call void @Perl_sv_setnv(%struct.sv* %117, double %fneg)
  br label %do.body187

do.body187:                                       ; preds = %do.body185
  br label %do.body188

do.body188:                                       ; preds = %do.body187
  %119 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags189 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags189, align 4
  %and190 = and i32 %120, 4194304
  %tobool191 = icmp ne i32 %and190, 0
  br i1 %tobool191, label %cond.true192, label %cond.false193

cond.true192:                                     ; preds = %do.body188
  br i1 true, label %if.then194, label %if.end196

cond.false193:                                    ; preds = %do.body188
  br i1 false, label %if.then194, label %if.end196

if.then194:                                       ; preds = %cond.false193, %cond.true192
  %121 = load %struct.sv*, %struct.sv** %targ, align 8
  %call195 = call i32 @Perl_mg_set(%struct.sv* %121)
  br label %if.end196

if.end196:                                        ; preds = %if.then194, %cond.false193, %cond.true192
  br label %do.end197

do.end197:                                        ; preds = %if.end196
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %123 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %122, %struct.sv** %123, align 8
  br label %do.end198

do.end198:                                        ; preds = %do.end197
  br label %do.end199

do.end199:                                        ; preds = %do.end198
  br label %if.end200

if.end200:                                        ; preds = %do.end199, %do.end183
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %do.end158
  %124 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %124, %struct.sv*** @PL_stack_sp, align 8
  %125 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next202 = getelementptr inbounds %struct.op, %struct.op* %125, i32 0, i32 0
  %126 = load %struct.op*, %struct.op** %op_next202, align 8
  store %struct.op* %126, %struct.op** %retval, align 8
  br label %return

if.end203:                                        ; preds = %if.end140
  br label %if.end204

if.end204:                                        ; preds = %if.end203, %if.end81
  br label %if.end205

if.end205:                                        ; preds = %if.end204, %cond.false36, %cond.true31
  %127 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags206 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 2
  %128 = load i32, i32* %sv_flags206, align 4
  %and207 = and i32 %128, 512
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %cond.true209, label %cond.false211

cond.true209:                                     ; preds = %if.end205
  %129 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any210 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 0
  %130 = load i8*, i8** %sv_any210, align 8
  %131 = bitcast i8* %130 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %131, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %132 = load double, double* %xnv_nv, align 8
  br label %cond.end213

cond.false211:                                    ; preds = %if.end205
  %133 = load %struct.sv*, %struct.sv** %svr, align 8
  %call212 = call double @Perl_sv_2nv_flags(%struct.sv* %133, i32 0)
  br label %cond.end213

cond.end213:                                      ; preds = %cond.false211, %cond.true209
  %cond214 = phi double [ %132, %cond.true209 ], [ %call212, %cond.false211 ]
  store double %cond214, double* %value, align 8
  %134 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr215 = getelementptr inbounds %struct.sv*, %struct.sv** %134, i32 -1
  store %struct.sv** %incdec.ptr215, %struct.sv*** %sp, align 8
  %135 = load %struct.sv*, %struct.sv** %134, align 8
  %136 = load i8, i8* %useleft, align 1
  %tobool216 = trunc i8 %136 to i1
  br i1 %tobool216, label %if.end234, label %if.then217

if.then217:                                       ; preds = %cond.end213
  br label %do.body218

do.body218:                                       ; preds = %if.then217
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %138 = load double, double* %value, align 8
  %fneg219 = fneg double %138
  call void @Perl_sv_setnv(%struct.sv* %137, double %fneg219)
  br label %do.body220

do.body220:                                       ; preds = %do.body218
  br label %do.body221

do.body221:                                       ; preds = %do.body220
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags222 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 2
  %140 = load i32, i32* %sv_flags222, align 4
  %and223 = and i32 %140, 4194304
  %tobool224 = icmp ne i32 %and223, 0
  br i1 %tobool224, label %cond.true225, label %cond.false226

cond.true225:                                     ; preds = %do.body221
  br i1 true, label %if.then227, label %if.end229

cond.false226:                                    ; preds = %do.body221
  br i1 false, label %if.then227, label %if.end229

if.then227:                                       ; preds = %cond.false226, %cond.true225
  %141 = load %struct.sv*, %struct.sv** %targ, align 8
  %call228 = call i32 @Perl_mg_set(%struct.sv* %141)
  br label %if.end229

if.end229:                                        ; preds = %if.then227, %cond.false226, %cond.true225
  br label %do.end230

do.end230:                                        ; preds = %if.end229
  %142 = load %struct.sv*, %struct.sv** %targ, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %142, %struct.sv** %143, align 8
  br label %do.end231

do.end231:                                        ; preds = %do.end230
  br label %do.end232

do.end232:                                        ; preds = %do.end231
  %144 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %144, %struct.sv*** @PL_stack_sp, align 8
  %145 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next233 = getelementptr inbounds %struct.op, %struct.op* %145, i32 0, i32 0
  %146 = load %struct.op*, %struct.op** %op_next233, align 8
  store %struct.op* %146, %struct.op** %retval, align 8
  br label %return

if.end234:                                        ; preds = %cond.end213
  br label %do.body235

do.body235:                                       ; preds = %if.end234
  %147 = load %struct.sv*, %struct.sv** %targ, align 8
  %148 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags236 = getelementptr inbounds %struct.sv, %struct.sv* %148, i32 0, i32 2
  %149 = load i32, i32* %sv_flags236, align 4
  %and237 = and i32 %149, 512
  %tobool238 = icmp ne i32 %and237, 0
  br i1 %tobool238, label %cond.true239, label %cond.false243

cond.true239:                                     ; preds = %do.body235
  %150 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any240 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 0
  %151 = load i8*, i8** %sv_any240, align 8
  %152 = bitcast i8* %151 to %struct.xpvnv*
  %xnv_u241 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %152, i32 0, i32 5
  %xnv_nv242 = bitcast %union._xnvu* %xnv_u241 to double*
  %153 = load double, double* %xnv_nv242, align 8
  br label %cond.end245

cond.false243:                                    ; preds = %do.body235
  %154 = load %struct.sv*, %struct.sv** %svl, align 8
  %call244 = call double @Perl_sv_2nv_flags(%struct.sv* %154, i32 0)
  br label %cond.end245

cond.end245:                                      ; preds = %cond.false243, %cond.true239
  %cond246 = phi double [ %153, %cond.true239 ], [ %call244, %cond.false243 ]
  %155 = load double, double* %value, align 8
  %sub247 = fsub double %cond246, %155
  call void @Perl_sv_setnv(%struct.sv* %147, double %sub247)
  br label %do.body248

do.body248:                                       ; preds = %cond.end245
  br label %do.body249

do.body249:                                       ; preds = %do.body248
  %156 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags250 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 2
  %157 = load i32, i32* %sv_flags250, align 4
  %and251 = and i32 %157, 4194304
  %tobool252 = icmp ne i32 %and251, 0
  br i1 %tobool252, label %cond.true253, label %cond.false254

cond.true253:                                     ; preds = %do.body249
  br i1 true, label %if.then255, label %if.end257

cond.false254:                                    ; preds = %do.body249
  br i1 false, label %if.then255, label %if.end257

if.then255:                                       ; preds = %cond.false254, %cond.true253
  %158 = load %struct.sv*, %struct.sv** %targ, align 8
  %call256 = call i32 @Perl_mg_set(%struct.sv* %158)
  br label %if.end257

if.end257:                                        ; preds = %if.then255, %cond.false254, %cond.true253
  br label %do.end258

do.end258:                                        ; preds = %if.end257
  %159 = load %struct.sv*, %struct.sv** %targ, align 8
  %160 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %159, %struct.sv** %160, align 8
  br label %do.end259

do.end259:                                        ; preds = %do.end258
  br label %do.end260

do.end260:                                        ; preds = %do.end259
  %161 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %161, %struct.sv*** @PL_stack_sp, align 8
  %162 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next261 = getelementptr inbounds %struct.op, %struct.op* %162, i32 0, i32 0
  %163 = load %struct.op*, %struct.op** %op_next261, align 8
  store %struct.op* %163, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end260, %do.end232, %if.end201, %if.then
  %164 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %164
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_left_shift() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %shift = alloca i64, align 8
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 42, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %25, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %26 = load i64, i64* %xivu_iv, align 8
  br label %cond.end14

cond.false12:                                     ; preds = %do.end
  %27 = load %struct.sv*, %struct.sv** %svr, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %27, i32 0)
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %26, %cond.true11 ], [ %call13, %cond.false12 ]
  store i64 %cond15, i64* %shift, align 8
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private, align 1
  %conv16 = zext i8 %29 to i32
  %and17 = and i32 %conv16, 1
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %cond.end14
  %30 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %31, 256
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false27

cond.true23:                                      ; preds = %if.then19
  %32 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any24, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u25 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv26 = bitcast %union._xivu* %xiv_u25 to i64*
  %35 = load i64, i64* %xivu_iv26, align 8
  br label %cond.end29

cond.false27:                                     ; preds = %if.then19
  %36 = load %struct.sv*, %struct.sv** %svl, align 8
  %call28 = call i64 @Perl_sv_2iv_flags(%struct.sv* %36, i32 0)
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false27, %cond.true23
  %cond30 = phi i64 [ %35, %cond.true23 ], [ %call28, %cond.false27 ]
  store i64 %cond30, i64* %i, align 8
  br label %do.body31

do.body31:                                        ; preds = %cond.end29
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load i64, i64* %i, align 8
  %39 = load i64, i64* %shift, align 8
  %shl = shl i64 %38, %39
  call void @Perl_sv_setiv(%struct.sv* %37, i64 %shl)
  br label %do.body32

do.body32:                                        ; preds = %do.body31
  br label %do.body33

do.body33:                                        ; preds = %do.body32
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %41, 4194304
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %do.body33
  br i1 true, label %if.then39, label %if.end41

cond.false38:                                     ; preds = %do.body33
  br i1 false, label %if.then39, label %if.end41

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %call40 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %do.end42

do.end42:                                         ; preds = %if.end41
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %43, %struct.sv** %44, align 8
  br label %do.end43

do.end43:                                         ; preds = %do.end42
  br label %do.end44

do.end44:                                         ; preds = %do.end43
  br label %if.end69

if.else:                                          ; preds = %cond.end14
  %45 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %46, 256
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false50

cond.true48:                                      ; preds = %if.else
  %47 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any49, align 8
  %49 = bitcast i8* %48 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %49, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %50 = load i64, i64* %xivu_uv, align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.else
  %51 = load %struct.sv*, %struct.sv** %svl, align 8
  %call51 = call i64 @Perl_sv_2uv_flags(%struct.sv* %51, i32 0)
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true48
  %cond53 = phi i64 [ %50, %cond.true48 ], [ %call51, %cond.false50 ]
  store i64 %cond53, i64* %u, align 8
  br label %do.body54

do.body54:                                        ; preds = %cond.end52
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load i64, i64* %u, align 8
  %54 = load i64, i64* %shift, align 8
  %shl55 = shl i64 %53, %54
  call void @Perl_sv_setuv(%struct.sv* %52, i64 %shl55)
  br label %do.body56

do.body56:                                        ; preds = %do.body54
  br label %do.body57

do.body57:                                        ; preds = %do.body56
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %56, 4194304
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %cond.true61, label %cond.false62

cond.true61:                                      ; preds = %do.body57
  br i1 true, label %if.then63, label %if.end65

cond.false62:                                     ; preds = %do.body57
  br i1 false, label %if.then63, label %if.end65

if.then63:                                        ; preds = %cond.false62, %cond.true61
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %call64 = call i32 @Perl_mg_set(%struct.sv* %57)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %cond.false62, %cond.true61
  br label %do.end66

do.end66:                                         ; preds = %if.end65
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %58, %struct.sv** %59, align 8
  br label %do.end67

do.end67:                                         ; preds = %do.end66
  br label %do.end68

do.end68:                                         ; preds = %do.end67
  br label %if.end69

if.end69:                                         ; preds = %do.end68, %do.end44
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %60, %struct.sv*** @PL_stack_sp, align 8
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next70 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  %62 = load %struct.op*, %struct.op** %op_next70, align 8
  store %struct.op* %62, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end69, %if.then
  %63 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_right_shift() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %svl = alloca %struct.sv*, align 8
  %svr = alloca %struct.sv*, align 8
  %shift = alloca i64, align 8
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 44, i32 20)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %svr, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %svl, align 8
  %21 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %svr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %25, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %26 = load i64, i64* %xivu_iv, align 8
  br label %cond.end14

cond.false12:                                     ; preds = %do.end
  %27 = load %struct.sv*, %struct.sv** %svr, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %27, i32 0)
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %26, %cond.true11 ], [ %call13, %cond.false12 ]
  store i64 %cond15, i64* %shift, align 8
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 6
  %29 = load i8, i8* %op_private, align 1
  %conv16 = zext i8 %29 to i32
  %and17 = and i32 %conv16, 1
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %if.then19, label %if.else

if.then19:                                        ; preds = %cond.end14
  %30 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %31, 256
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false27

cond.true23:                                      ; preds = %if.then19
  %32 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any24, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u25 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv26 = bitcast %union._xivu* %xiv_u25 to i64*
  %35 = load i64, i64* %xivu_iv26, align 8
  br label %cond.end29

cond.false27:                                     ; preds = %if.then19
  %36 = load %struct.sv*, %struct.sv** %svl, align 8
  %call28 = call i64 @Perl_sv_2iv_flags(%struct.sv* %36, i32 0)
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false27, %cond.true23
  %cond30 = phi i64 [ %35, %cond.true23 ], [ %call28, %cond.false27 ]
  store i64 %cond30, i64* %i, align 8
  br label %do.body31

do.body31:                                        ; preds = %cond.end29
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load i64, i64* %i, align 8
  %39 = load i64, i64* %shift, align 8
  %shr = ashr i64 %38, %39
  call void @Perl_sv_setiv(%struct.sv* %37, i64 %shr)
  br label %do.body32

do.body32:                                        ; preds = %do.body31
  br label %do.body33

do.body33:                                        ; preds = %do.body32
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %41, 4194304
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %do.body33
  br i1 true, label %if.then39, label %if.end41

cond.false38:                                     ; preds = %do.body33
  br i1 false, label %if.then39, label %if.end41

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %call40 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %do.end42

do.end42:                                         ; preds = %if.end41
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %43, %struct.sv** %44, align 8
  br label %do.end43

do.end43:                                         ; preds = %do.end42
  br label %do.end44

do.end44:                                         ; preds = %do.end43
  br label %if.end69

if.else:                                          ; preds = %cond.end14
  %45 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %46, 256
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false50

cond.true48:                                      ; preds = %if.else
  %47 = load %struct.sv*, %struct.sv** %svl, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any49, align 8
  %49 = bitcast i8* %48 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %49, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %50 = load i64, i64* %xivu_uv, align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.else
  %51 = load %struct.sv*, %struct.sv** %svl, align 8
  %call51 = call i64 @Perl_sv_2uv_flags(%struct.sv* %51, i32 0)
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true48
  %cond53 = phi i64 [ %50, %cond.true48 ], [ %call51, %cond.false50 ]
  store i64 %cond53, i64* %u, align 8
  br label %do.body54

do.body54:                                        ; preds = %cond.end52
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load i64, i64* %u, align 8
  %54 = load i64, i64* %shift, align 8
  %shr55 = lshr i64 %53, %54
  call void @Perl_sv_setuv(%struct.sv* %52, i64 %shr55)
  br label %do.body56

do.body56:                                        ; preds = %do.body54
  br label %do.body57

do.body57:                                        ; preds = %do.body56
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags58 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags58, align 4
  %and59 = and i32 %56, 4194304
  %tobool60 = icmp ne i32 %and59, 0
  br i1 %tobool60, label %cond.true61, label %cond.false62

cond.true61:                                      ; preds = %do.body57
  br i1 true, label %if.then63, label %if.end65

cond.false62:                                     ; preds = %do.body57
  br i1 false, label %if.then63, label %if.end65

if.then63:                                        ; preds = %cond.false62, %cond.true61
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %call64 = call i32 @Perl_mg_set(%struct.sv* %57)
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %cond.false62, %cond.true61
  br label %do.end66

do.end66:                                         ; preds = %if.end65
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %58, %struct.sv** %59, align 8
  br label %do.end67

do.end67:                                         ; preds = %do.end66
  br label %do.end68

do.end68:                                         ; preds = %do.end67
  br label %if.end69

if.end69:                                         ; preds = %do.end68, %do.end44
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %60, %struct.sv*** @PL_stack_sp, align 8
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next70 = getelementptr inbounds %struct.op, %struct.op* %61, i32 0, i32 0
  %62 = load %struct.op*, %struct.op** %op_next70, align 8
  store %struct.op* %62, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end69, %if.then
  %63 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lt() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 17, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp slt i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %cmp15 = icmp eq i32 %call14, -1
  %conv16 = zext i1 %cmp15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv16, %cond.false13 ]
  %tobool17 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond18, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Perl_do_ncmp(%struct.sv* %left, %struct.sv* %right) #0 {
entry:
  %retval = alloca i32, align 4
  %left.addr = alloca %struct.sv*, align 8
  %right.addr = alloca %struct.sv*, align 8
  %leftiv = alloca i64, align 8
  %rightiv = alloca i64, align 8
  %rightuv = alloca i64, align 8
  %leftuv = alloca i64, align 8
  %rightuv59 = alloca i64, align 8
  %rightiv69 = alloca i64, align 8
  %leftuv77 = alloca i64, align 8
  %rnv = alloca double, align 8
  %lnv = alloca double, align 8
  store %struct.sv* %left, %struct.sv** %left.addr, align 8
  store %struct.sv* %right, %struct.sv** %right.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 4352
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 1536
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %4, i32 0)
  %5 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 256
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true10, label %if.end86

cond.false:                                       ; preds = %land.lhs.true, %entry
  %7 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %8, 256
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end86

land.lhs.true10:                                  ; preds = %cond.false, %cond.true
  %9 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %10, 4352
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.false23, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %11 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %12, 1536
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %cond.true18, label %cond.false23

cond.true18:                                      ; preds = %land.lhs.true14
  %13 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %call19 = call i64 @Perl_sv_2iv_flags(%struct.sv* %13, i32 0)
  %14 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %15, 256
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then, label %if.end86

cond.false23:                                     ; preds = %land.lhs.true14, %land.lhs.true10
  %16 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %17, 256
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then, label %if.end86

if.then:                                          ; preds = %cond.false23, %cond.true18
  %18 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %19, -2147483392
  %cmp = icmp eq i32 %and28, -2147483392
  br i1 %cmp, label %if.end50, label %if.then29

if.then29:                                        ; preds = %if.then
  %20 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %22, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %23 = load i64, i64* %xivu_iv, align 8
  store i64 %23, i64* %leftiv, align 8
  %24 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %25, -2147483392
  %cmp32 = icmp eq i32 %and31, -2147483392
  br i1 %cmp32, label %if.end, label %if.then33

if.then33:                                        ; preds = %if.then29
  %26 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_any34 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any34, align 8
  %28 = bitcast i8* %27 to %struct.xpviv*
  %xiv_u35 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %28, i32 0, i32 4
  %xivu_iv36 = bitcast %union._xivu* %xiv_u35 to i64*
  %29 = load i64, i64* %xivu_iv36, align 8
  store i64 %29, i64* %rightiv, align 8
  %30 = load i64, i64* %leftiv, align 8
  %31 = load i64, i64* %rightiv, align 8
  %cmp37 = icmp sgt i64 %30, %31
  %conv = zext i1 %cmp37 to i32
  %32 = load i64, i64* %leftiv, align 8
  %33 = load i64, i64* %rightiv, align 8
  %cmp38 = icmp slt i64 %32, %33
  %conv39 = zext i1 %cmp38 to i32
  %sub = sub nsw i32 %conv, %conv39
  store i32 %sub, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %if.then29
  %34 = load i64, i64* %leftiv, align 8
  %cmp40 = icmp slt i64 %34, 0
  br i1 %cmp40, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.end
  store i32 -1, i32* %retval, align 4
  br label %return

if.end43:                                         ; preds = %if.end
  %35 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any44, align 8
  %37 = bitcast i8* %36 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %37, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %38 = load i64, i64* %xivu_uv, align 8
  store i64 %38, i64* %rightuv, align 8
  %39 = load i64, i64* %leftiv, align 8
  %40 = load i64, i64* %rightuv, align 8
  %cmp45 = icmp ugt i64 %39, %40
  %conv46 = zext i1 %cmp45 to i32
  %41 = load i64, i64* %leftiv, align 8
  %42 = load i64, i64* %rightuv, align 8
  %cmp47 = icmp ult i64 %41, %42
  %conv48 = zext i1 %cmp47 to i32
  %sub49 = sub nsw i32 %conv46, %conv48
  store i32 %sub49, i32* %retval, align 4
  br label %return

if.end50:                                         ; preds = %if.then
  %43 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %44, -2147483392
  %cmp53 = icmp eq i32 %and52, -2147483392
  br i1 %cmp53, label %if.then55, label %if.end68

if.then55:                                        ; preds = %if.end50
  %45 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any56, align 8
  %47 = bitcast i8* %46 to %struct.xpvuv*
  %xuv_u57 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %47, i32 0, i32 4
  %xivu_uv58 = bitcast %union._xivu* %xuv_u57 to i64*
  %48 = load i64, i64* %xivu_uv58, align 8
  store i64 %48, i64* %leftuv, align 8
  %49 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_any60 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any60, align 8
  %51 = bitcast i8* %50 to %struct.xpvuv*
  %xuv_u61 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %51, i32 0, i32 4
  %xivu_uv62 = bitcast %union._xivu* %xuv_u61 to i64*
  %52 = load i64, i64* %xivu_uv62, align 8
  store i64 %52, i64* %rightuv59, align 8
  %53 = load i64, i64* %leftuv, align 8
  %54 = load i64, i64* %rightuv59, align 8
  %cmp63 = icmp ugt i64 %53, %54
  %conv64 = zext i1 %cmp63 to i32
  %55 = load i64, i64* %leftuv, align 8
  %56 = load i64, i64* %rightuv59, align 8
  %cmp65 = icmp ult i64 %55, %56
  %conv66 = zext i1 %cmp65 to i32
  %sub67 = sub nsw i32 %conv64, %conv66
  store i32 %sub67, i32* %retval, align 4
  br label %return

if.end68:                                         ; preds = %if.end50
  %57 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_any70 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any70, align 8
  %59 = bitcast i8* %58 to %struct.xpviv*
  %xiv_u71 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %59, i32 0, i32 4
  %xivu_iv72 = bitcast %union._xivu* %xiv_u71 to i64*
  %60 = load i64, i64* %xivu_iv72, align 8
  store i64 %60, i64* %rightiv69, align 8
  %61 = load i64, i64* %rightiv69, align 8
  %cmp73 = icmp slt i64 %61, 0
  br i1 %cmp73, label %if.then75, label %if.end76

if.then75:                                        ; preds = %if.end68
  store i32 1, i32* %retval, align 4
  br label %return

if.end76:                                         ; preds = %if.end68
  %62 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 0
  %63 = load i8*, i8** %sv_any78, align 8
  %64 = bitcast i8* %63 to %struct.xpvuv*
  %xuv_u79 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %64, i32 0, i32 4
  %xivu_uv80 = bitcast %union._xivu* %xuv_u79 to i64*
  %65 = load i64, i64* %xivu_uv80, align 8
  store i64 %65, i64* %leftuv77, align 8
  %66 = load i64, i64* %leftuv77, align 8
  %67 = load i64, i64* %rightiv69, align 8
  %cmp81 = icmp ugt i64 %66, %67
  %conv82 = zext i1 %cmp81 to i32
  %68 = load i64, i64* %leftuv77, align 8
  %69 = load i64, i64* %rightiv69, align 8
  %cmp83 = icmp ult i64 %68, %69
  %conv84 = zext i1 %cmp83 to i32
  %sub85 = sub nsw i32 %conv82, %conv84
  store i32 %sub85, i32* %retval, align 4
  br label %return

if.end86:                                         ; preds = %cond.false23, %cond.true18, %cond.false, %cond.true
  %70 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_flags87 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags87, align 4
  %and88 = and i32 %71, 512
  %tobool89 = icmp ne i32 %and88, 0
  br i1 %tobool89, label %cond.true90, label %cond.false92

cond.true90:                                      ; preds = %if.end86
  %72 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any91, align 8
  %74 = bitcast i8* %73 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %74, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %75 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false92:                                     ; preds = %if.end86
  %76 = load %struct.sv*, %struct.sv** %right.addr, align 8
  %call93 = call double @Perl_sv_2nv_flags(%struct.sv* %76, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false92, %cond.true90
  %cond = phi double [ %75, %cond.true90 ], [ %call93, %cond.false92 ]
  store double %cond, double* %rnv, align 8
  %77 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 2
  %78 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %78, 512
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %cond.true97, label %cond.false101

cond.true97:                                      ; preds = %cond.end
  %79 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 0
  %80 = load i8*, i8** %sv_any98, align 8
  %81 = bitcast i8* %80 to %struct.xpvnv*
  %xnv_u99 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %81, i32 0, i32 5
  %xnv_nv100 = bitcast %union._xnvu* %xnv_u99 to double*
  %82 = load double, double* %xnv_nv100, align 8
  br label %cond.end103

cond.false101:                                    ; preds = %cond.end
  %83 = load %struct.sv*, %struct.sv** %left.addr, align 8
  %call102 = call double @Perl_sv_2nv_flags(%struct.sv* %83, i32 0)
  br label %cond.end103

cond.end103:                                      ; preds = %cond.false101, %cond.true97
  %cond104 = phi double [ %82, %cond.true97 ], [ %call102, %cond.false101 ]
  store double %cond104, double* %lnv, align 8
  %84 = load double, double* %lnv, align 8
  %85 = load double, double* %rnv, align 8
  %cmp105 = fcmp olt double %84, %85
  br i1 %cmp105, label %if.then107, label %if.end108

if.then107:                                       ; preds = %cond.end103
  store i32 -1, i32* %retval, align 4
  br label %return

if.end108:                                        ; preds = %cond.end103
  %86 = load double, double* %lnv, align 8
  %87 = load double, double* %rnv, align 8
  %cmp109 = fcmp ogt double %86, %87
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %if.end108
  store i32 1, i32* %retval, align 4
  br label %return

if.end112:                                        ; preds = %if.end108
  %88 = load double, double* %lnv, align 8
  %89 = load double, double* %rnv, align 8
  %cmp113 = fcmp oeq double %88, %89
  br i1 %cmp113, label %if.then115, label %if.end116

if.then115:                                       ; preds = %if.end112
  store i32 0, i32* %retval, align 4
  br label %return

if.end116:                                        ; preds = %if.end112
  store i32 2, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.end116, %if.then115, %if.then111, %if.then107, %if.end76, %if.then75, %if.then55, %if.end43, %if.then42, %if.then33
  %90 = load i32, i32* %retval, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_gt() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 19, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp sgt i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %cmp15 = icmp eq i32 %call14, 1
  %conv16 = zext i1 %cmp15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv16, %cond.false13 ]
  %tobool17 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond18, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_le() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 18, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp sle i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %cmp15 = icmp sle i32 %call14, 0
  %conv16 = zext i1 %cmp15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv16, %cond.false13 ]
  %tobool17 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond18, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ge() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 20, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp sge i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %and15 = and i32 %call14, 2
  %cmp16 = icmp eq i32 %and15, 0
  %conv17 = zext i1 %cmp16 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv17, %cond.false13 ]
  %tobool18 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool18 to i64
  %cond19 = select i1 %tobool18, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ne() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 22, i32 48)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, -2147483392
  %cmp = icmp eq i32 %and3, 256
  br i1 %cmp, label %land.lhs.true4, label %cond.false13

land.lhs.true4:                                   ; preds = %do.end
  %15 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %16, -2147483392
  %cmp7 = icmp eq i32 %and6, 256
  br i1 %cmp7, label %cond.true8, label %cond.false13

cond.true8:                                       ; preds = %land.lhs.true4
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any9, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u10 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv11 = bitcast %union._xivu* %xiv_u10 to i64*
  %24 = load i64, i64* %xivu_iv11, align 8
  %cmp12 = icmp ne i64 %20, %24
  %conv = zext i1 %cmp12 to i32
  br label %cond.end

cond.false13:                                     ; preds = %land.lhs.true4, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %call14 = call i32 @Perl_do_ncmp(%struct.sv* %25, %struct.sv* %26)
  %cmp15 = icmp ne i32 %call14, 0
  %conv16 = zext i1 %cmp15 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true8
  %cond = phi i32 [ %conv, %cond.true8 ], [ %conv16, %cond.false13 ]
  %tobool17 = icmp ne i32 %cond, 0
  %27 = zext i1 %tobool17 to i64
  %cond18 = select i1 %tobool17, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond18, %struct.sv** %28, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ncmp() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %left = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %value = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 58, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %14 = load %struct.sv*, %struct.sv** %right, align 8
  %call2 = call i32 @Perl_do_ncmp(%struct.sv* %13, %struct.sv* %14)
  store i32 %call2, i32* %value, align 4
  %15 = load i32, i32* %value, align 4
  %cmp = icmp eq i32 %15, 2
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %do.end
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %16, align 8
  br label %if.end18

if.else:                                          ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 3
  %19 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %17, i64 %19
  %20 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %20, %struct.sv** %targ, align 8
  br label %do.body4

do.body4:                                         ; preds = %if.else
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load i32, i32* %value, align 4
  %conv = sext i32 %22 to i64
  call void @Perl_sv_setiv(%struct.sv* %21, i64 %conv)
  br label %do.body5

do.body5:                                         ; preds = %do.body4
  br label %do.body6

do.body6:                                         ; preds = %do.body5
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %24, 4194304
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %do.body6
  br i1 true, label %if.then12, label %if.end14

cond.false11:                                     ; preds = %do.body6
  br i1 false, label %if.then12, label %if.end14

if.then12:                                        ; preds = %cond.false11, %cond.true10
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %call13 = call i32 @Perl_mg_set(%struct.sv* %25)
  br label %if.end14

if.end14:                                         ; preds = %if.then12, %cond.false11, %cond.true10
  br label %do.end15

do.end15:                                         ; preds = %if.end14
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %26, %struct.sv** %27, align 8
  br label %do.end16

do.end16:                                         ; preds = %do.end15
  br label %do.end17

do.end17:                                         ; preds = %do.end16
  br label %if.end18

if.end18:                                         ; preds = %do.end17, %if.then3
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %28, %struct.sv*** @PL_stack_sp, align 8
  %29 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next19 = getelementptr inbounds %struct.op, %struct.op* %29, i32 0, i32 0
  %30 = load %struct.op*, %struct.op** %op_next19, align 8
  store %struct.op* %30, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end18, %if.then
  %31 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sle() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %amg_type = alloca i32, align 4
  %multiplier = alloca i32, align 4
  %rhs = alloca i32, align 4
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %cmp = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  store i32 24, i32* %amg_type, align 4
  store i32 1, i32* %multiplier, align 4
  store i32 1, i32* %rhs, align 4
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  switch i32 %bf.cast, label %sw.epilog [
    i32 85, label %sw.bb
    i32 86, label %sw.bb1
    i32 88, label %sw.bb2
  ]

sw.bb:                                            ; preds = %entry
  store i32 23, i32* %amg_type, align 4
  store i32 0, i32* %rhs, align 4
  br label %sw.epilog

sw.bb1:                                           ; preds = %entry
  store i32 25, i32* %amg_type, align 4
  store i32 -1, i32* %multiplier, align 4
  store i32 0, i32* %rhs, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 26, i32* %amg_type, align 4
  store i32 -1, i32* %multiplier, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb2, %sw.bb1, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 -1
  %3 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags3, align 4
  %or = or i32 %4, %7
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %amg_type, align 4
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 %8, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 0
  %10 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %10, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %right, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %left, align 8
  %15 = load %struct.sv*, %struct.sv** %left, align 8
  %16 = load %struct.sv*, %struct.sv** %right, align 8
  %call4 = call i32 @Perl_sv_cmp_flags(%struct.sv* %15, %struct.sv* %16, i32 0)
  store i32 %call4, i32* %cmp, align 4
  %17 = load i32, i32* %cmp, align 4
  %18 = load i32, i32* %multiplier, align 4
  %mul = mul nsw i32 %17, %18
  %19 = load i32, i32* %rhs, align 4
  %cmp5 = icmp slt i32 %mul, %19
  %20 = zext i1 %cmp5 to i64
  %cond = select i1 %cmp5, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %21, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %22, %struct.sv*** @PL_stack_sp, align 8
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next6 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 0
  %24 = load %struct.op*, %struct.op** %op_next6, align 8
  store %struct.op* %24, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then
  %25 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %25
}

declare dso_local i32 @Perl_sv_cmp_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_seq() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 27, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %14 = load %struct.sv*, %struct.sv** %right, align 8
  %call2 = call i32 @Perl_sv_eq_flags(%struct.sv* %13, %struct.sv* %14, i32 0)
  %tobool3 = icmp ne i32 %call2, 0
  %15 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %16, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next4 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next4, align 8
  store %struct.op* %19, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then
  %20 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %20
}

declare dso_local i32 @Perl_sv_eq_flags(%struct.sv*, %struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sne() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 28, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %right, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %left, align 8
  %13 = load %struct.sv*, %struct.sv** %left, align 8
  %14 = load %struct.sv*, %struct.sv** %right, align 8
  %call2 = call i32 @Perl_sv_eq_flags(%struct.sv* %13, %struct.sv* %14, i32 0)
  %tobool3 = icmp ne i32 %call2, 0
  %lnot = xor i1 %tobool3, true
  %15 = zext i1 %lnot to i64
  %cond = select i1 %lnot, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %16, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next4 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next4, align 8
  store %struct.op* %19, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end, %if.then
  %20 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_scmp() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %cmp = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 -1
  %6 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %7, %10
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 59, i32 0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %13, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %right, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** %left, align 8
  %17 = load %struct.sv*, %struct.sv** %left, align 8
  %18 = load %struct.sv*, %struct.sv** %right, align 8
  %call2 = call i32 @Perl_sv_cmp_flags(%struct.sv* %17, %struct.sv* %18, i32 0)
  store i32 %call2, i32* %cmp, align 4
  br label %do.body3

do.body3:                                         ; preds = %do.end
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %20 = load i32, i32* %cmp, align 4
  %conv = sext i32 %20 to i64
  call void @Perl_sv_setiv(%struct.sv* %19, i64 %conv)
  br label %do.body4

do.body4:                                         ; preds = %do.body3
  br label %do.body5

do.body5:                                         ; preds = %do.body4
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %22, 4194304
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %do.body5
  br i1 true, label %if.then11, label %if.end13

cond.false10:                                     ; preds = %do.body5
  br i1 false, label %if.then11, label %if.end13

if.then11:                                        ; preds = %cond.false10, %cond.true9
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %call12 = call i32 @Perl_mg_set(%struct.sv* %23)
  br label %if.end13

if.end13:                                         ; preds = %if.then11, %cond.false10, %cond.true9
  br label %do.end14

do.end14:                                         ; preds = %if.end13
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %25, align 8
  br label %do.end15

do.end15:                                         ; preds = %do.end14
  br label %do.end16

do.end16:                                         ; preds = %do.end15
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next17 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next17, align 8
  store %struct.op* %28, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end16, %if.then
  %29 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %29
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_bit_and() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %left_ro_nonnum = alloca i8, align 1
  %right_ro_nonnum = alloca i8, align 1
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 46, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %left, align 8
  %21 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 12288
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %24, 12288
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.else117

if.then14:                                        ; preds = %lor.lhs.false, %do.end
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %26, 12288
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then14
  %27 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %28, 134283264
  %tobool20 = icmp ne i32 %and19, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then14
  %29 = phi i1 [ false, %if.then14 ], [ %tobool20, %land.rhs ]
  %frombool = zext i1 %29 to i8
  store i8 %frombool, i8* %left_ro_nonnum, align 1
  %30 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %31, 12288
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.end28, label %land.rhs24

land.rhs24:                                       ; preds = %land.end
  %32 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags25 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags25, align 4
  %and26 = and i32 %33, 134283264
  %tobool27 = icmp ne i32 %and26, 0
  br label %land.end28

land.end28:                                       ; preds = %land.rhs24, %land.end
  %34 = phi i1 [ false, %land.end ], [ %tobool27, %land.rhs24 ]
  %frombool29 = zext i1 %34 to i8
  store i8 %frombool29, i8* %right_ro_nonnum, align 1
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 6
  %36 = load i8, i8* %op_private, align 1
  %conv30 = zext i8 %36 to i32
  %and31 = and i32 %conv30, 1
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %if.then33, label %if.else

if.then33:                                        ; preds = %land.end28
  %37 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %38, 256
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %if.then33
  %39 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any, align 8
  %41 = bitcast i8* %40 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %41, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %42 = load i64, i64* %xivu_iv, align 8
  br label %cond.end40

cond.false38:                                     ; preds = %if.then33
  %43 = load %struct.sv*, %struct.sv** %left, align 8
  %call39 = call i64 @Perl_sv_2iv_flags(%struct.sv* %43, i32 0)
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false38, %cond.true37
  %cond41 = phi i64 [ %42, %cond.true37 ], [ %call39, %cond.false38 ]
  %44 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %45, 256
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true45, label %cond.false49

cond.true45:                                      ; preds = %cond.end40
  %46 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any46, align 8
  %48 = bitcast i8* %47 to %struct.xpviv*
  %xiv_u47 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %48, i32 0, i32 4
  %xivu_iv48 = bitcast %union._xivu* %xiv_u47 to i64*
  %49 = load i64, i64* %xivu_iv48, align 8
  br label %cond.end51

cond.false49:                                     ; preds = %cond.end40
  %50 = load %struct.sv*, %struct.sv** %right, align 8
  %call50 = call i64 @Perl_sv_2iv_flags(%struct.sv* %50, i32 0)
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false49, %cond.true45
  %cond52 = phi i64 [ %49, %cond.true45 ], [ %call50, %cond.false49 ]
  %and53 = and i64 %cond41, %cond52
  store i64 %and53, i64* %i, align 8
  br label %do.body54

do.body54:                                        ; preds = %cond.end51
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %52 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %51, i64 %52)
  br label %do.body55

do.body55:                                        ; preds = %do.body54
  br label %do.body56

do.body56:                                        ; preds = %do.body55
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags57 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags57, align 4
  %and58 = and i32 %54, 4194304
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %do.body56
  br i1 true, label %if.then62, label %if.end64

cond.false61:                                     ; preds = %do.body56
  br i1 false, label %if.then62, label %if.end64

if.then62:                                        ; preds = %cond.false61, %cond.true60
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %call63 = call i32 @Perl_mg_set(%struct.sv* %55)
  br label %if.end64

if.end64:                                         ; preds = %if.then62, %cond.false61, %cond.true60
  br label %do.end65

do.end65:                                         ; preds = %if.end64
  %56 = load %struct.sv*, %struct.sv** %targ, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %56, %struct.sv** %57, align 8
  br label %do.end66

do.end66:                                         ; preds = %do.end65
  br label %do.end67

do.end67:                                         ; preds = %do.end66
  br label %if.end103

if.else:                                          ; preds = %land.end28
  %58 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %59, 256
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false73

cond.true71:                                      ; preds = %if.else
  %60 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 0
  %61 = load i8*, i8** %sv_any72, align 8
  %62 = bitcast i8* %61 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %62, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %63 = load i64, i64* %xivu_uv, align 8
  br label %cond.end75

cond.false73:                                     ; preds = %if.else
  %64 = load %struct.sv*, %struct.sv** %left, align 8
  %call74 = call i64 @Perl_sv_2uv_flags(%struct.sv* %64, i32 0)
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false73, %cond.true71
  %cond76 = phi i64 [ %63, %cond.true71 ], [ %call74, %cond.false73 ]
  %65 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags77 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags77, align 4
  %and78 = and i32 %66, 256
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %cond.true80, label %cond.false84

cond.true80:                                      ; preds = %cond.end75
  %67 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any81 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any81, align 8
  %69 = bitcast i8* %68 to %struct.xpvuv*
  %xuv_u82 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %69, i32 0, i32 4
  %xivu_uv83 = bitcast %union._xivu* %xuv_u82 to i64*
  %70 = load i64, i64* %xivu_uv83, align 8
  br label %cond.end86

cond.false84:                                     ; preds = %cond.end75
  %71 = load %struct.sv*, %struct.sv** %right, align 8
  %call85 = call i64 @Perl_sv_2uv_flags(%struct.sv* %71, i32 0)
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.true80
  %cond87 = phi i64 [ %70, %cond.true80 ], [ %call85, %cond.false84 ]
  %and88 = and i64 %cond76, %cond87
  store i64 %and88, i64* %u, align 8
  br label %do.body89

do.body89:                                        ; preds = %cond.end86
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %73 = load i64, i64* %u, align 8
  call void @Perl_sv_setuv(%struct.sv* %72, i64 %73)
  br label %do.body90

do.body90:                                        ; preds = %do.body89
  br label %do.body91

do.body91:                                        ; preds = %do.body90
  %74 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %75, 4194304
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %cond.true95, label %cond.false96

cond.true95:                                      ; preds = %do.body91
  br i1 true, label %if.then97, label %if.end99

cond.false96:                                     ; preds = %do.body91
  br i1 false, label %if.then97, label %if.end99

if.then97:                                        ; preds = %cond.false96, %cond.true95
  %76 = load %struct.sv*, %struct.sv** %targ, align 8
  %call98 = call i32 @Perl_mg_set(%struct.sv* %76)
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %cond.false96, %cond.true95
  br label %do.end100

do.end100:                                        ; preds = %if.end99
  %77 = load %struct.sv*, %struct.sv** %targ, align 8
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %77, %struct.sv** %78, align 8
  br label %do.end101

do.end101:                                        ; preds = %do.end100
  br label %do.end102

do.end102:                                        ; preds = %do.end101
  br label %if.end103

if.end103:                                        ; preds = %do.end102, %do.end67
  %79 = load i8, i8* %left_ro_nonnum, align 1
  %tobool104 = trunc i8 %79 to i1
  br i1 %tobool104, label %land.lhs.true106, label %if.end111

land.lhs.true106:                                 ; preds = %if.end103
  %80 = load %struct.sv*, %struct.sv** %left, align 8
  %81 = load %struct.sv*, %struct.sv** %targ, align 8
  %cmp = icmp ne %struct.sv* %80, %81
  br i1 %cmp, label %if.then108, label %if.end111

if.then108:                                       ; preds = %land.lhs.true106
  %82 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags109 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags109, align 4
  %and110 = and i32 %83, 2147470591
  store i32 %and110, i32* %sv_flags109, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then108, %land.lhs.true106, %if.end103
  %84 = load i8, i8* %right_ro_nonnum, align 1
  %tobool112 = trunc i8 %84 to i1
  br i1 %tobool112, label %if.then113, label %if.end116

if.then113:                                       ; preds = %if.end111
  %85 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags114 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 2
  %86 = load i32, i32* %sv_flags114, align 4
  %and115 = and i32 %86, 2147470591
  store i32 %and115, i32* %sv_flags114, align 4
  br label %if.end116

if.end116:                                        ; preds = %if.then113, %if.end111
  br label %if.end130

if.else117:                                       ; preds = %lor.lhs.false
  %87 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %87, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %88 = load %struct.sv*, %struct.sv** %targ, align 8
  %89 = load %struct.sv*, %struct.sv** %left, align 8
  %90 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_do_vop(i32 %bf.cast, %struct.sv* %88, %struct.sv* %89, %struct.sv* %90)
  br label %do.body118

do.body118:                                       ; preds = %if.else117
  br label %do.body119

do.body119:                                       ; preds = %do.body118
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags120 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 2
  %92 = load i32, i32* %sv_flags120, align 4
  %and121 = and i32 %92, 4194304
  %tobool122 = icmp ne i32 %and121, 0
  br i1 %tobool122, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %do.body119
  br i1 true, label %if.then125, label %if.end127

cond.false124:                                    ; preds = %do.body119
  br i1 false, label %if.then125, label %if.end127

if.then125:                                       ; preds = %cond.false124, %cond.true123
  %93 = load %struct.sv*, %struct.sv** %targ, align 8
  %call126 = call i32 @Perl_mg_set(%struct.sv* %93)
  br label %if.end127

if.end127:                                        ; preds = %if.then125, %cond.false124, %cond.true123
  br label %do.end128

do.end128:                                        ; preds = %if.end127
  %94 = load %struct.sv*, %struct.sv** %targ, align 8
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %94, %struct.sv** %95, align 8
  br label %do.end129

do.end129:                                        ; preds = %do.end128
  br label %if.end130

if.end130:                                        ; preds = %do.end129, %if.end116
  %96 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %96, %struct.sv*** @PL_stack_sp, align 8
  %97 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next131 = getelementptr inbounds %struct.op, %struct.op* %97, i32 0, i32 0
  %98 = load %struct.op*, %struct.op** %op_next131, align 8
  store %struct.op* %98, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end130, %if.then
  %99 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %99
}

declare dso_local void @Perl_do_vop(i32, %struct.sv*, %struct.sv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_nbit_and() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 46, i32 132)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %10 to i32
  %and2 = and i32 %conv, 64
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %do.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 -1
  %12 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false5:                                      ; preds = %do.end
  %13 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 3
  %15 = load i64, i64* %op_targ, align 8
  %arrayidx6 = getelementptr inbounds %struct.sv*, %struct.sv** %13, i64 %15
  %16 = load %struct.sv*, %struct.sv** %arrayidx6, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi %struct.sv* [ %12, %cond.true4 ], [ %16, %cond.false5 ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %left, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 6
  %22 = load i8, i8* %op_private, align 1
  %conv7 = zext i8 %22 to i32
  %and8 = and i32 %conv7, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then10, label %if.else

if.then10:                                        ; preds = %cond.end
  %23 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %24, 256
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %if.then10
  %25 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any, align 8
  %27 = bitcast i8* %26 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %27, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %28 = load i64, i64* %xivu_iv, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %if.then10
  %29 = load %struct.sv*, %struct.sv** %left, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true14
  %cond18 = phi i64 [ %28, %cond.true14 ], [ %call16, %cond.false15 ]
  %30 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %31, 256
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true22, label %cond.false26

cond.true22:                                      ; preds = %cond.end17
  %32 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any23, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u24 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv25 = bitcast %union._xivu* %xiv_u24 to i64*
  %35 = load i64, i64* %xivu_iv25, align 8
  br label %cond.end28

cond.false26:                                     ; preds = %cond.end17
  %36 = load %struct.sv*, %struct.sv** %right, align 8
  %call27 = call i64 @Perl_sv_2iv_flags(%struct.sv* %36, i32 0)
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false26, %cond.true22
  %cond29 = phi i64 [ %35, %cond.true22 ], [ %call27, %cond.false26 ]
  %and30 = and i64 %cond18, %cond29
  store i64 %and30, i64* %i, align 8
  br label %do.body31

do.body31:                                        ; preds = %cond.end28
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %37, i64 %38)
  br label %do.body32

do.body32:                                        ; preds = %do.body31
  br label %do.body33

do.body33:                                        ; preds = %do.body32
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %40, 4194304
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %cond.true37, label %cond.false38

cond.true37:                                      ; preds = %do.body33
  br i1 true, label %if.then39, label %if.end41

cond.false38:                                     ; preds = %do.body33
  br i1 false, label %if.then39, label %if.end41

if.then39:                                        ; preds = %cond.false38, %cond.true37
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %call40 = call i32 @Perl_mg_set(%struct.sv* %41)
  br label %if.end41

if.end41:                                         ; preds = %if.then39, %cond.false38, %cond.true37
  br label %do.end42

do.end42:                                         ; preds = %if.end41
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %42, %struct.sv** %43, align 8
  br label %do.end43

do.end43:                                         ; preds = %do.end42
  br label %do.end44

do.end44:                                         ; preds = %do.end43
  br label %if.end80

if.else:                                          ; preds = %cond.end
  %44 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %45, 256
  %tobool47 = icmp ne i32 %and46, 0
  br i1 %tobool47, label %cond.true48, label %cond.false50

cond.true48:                                      ; preds = %if.else
  %46 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any49 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any49, align 8
  %48 = bitcast i8* %47 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %48, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %49 = load i64, i64* %xivu_uv, align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.else
  %50 = load %struct.sv*, %struct.sv** %left, align 8
  %call51 = call i64 @Perl_sv_2uv_flags(%struct.sv* %50, i32 0)
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true48
  %cond53 = phi i64 [ %49, %cond.true48 ], [ %call51, %cond.false50 ]
  %51 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %52, 256
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %cond.true57, label %cond.false61

cond.true57:                                      ; preds = %cond.end52
  %53 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any58 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 0
  %54 = load i8*, i8** %sv_any58, align 8
  %55 = bitcast i8* %54 to %struct.xpvuv*
  %xuv_u59 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %55, i32 0, i32 4
  %xivu_uv60 = bitcast %union._xivu* %xuv_u59 to i64*
  %56 = load i64, i64* %xivu_uv60, align 8
  br label %cond.end63

cond.false61:                                     ; preds = %cond.end52
  %57 = load %struct.sv*, %struct.sv** %right, align 8
  %call62 = call i64 @Perl_sv_2uv_flags(%struct.sv* %57, i32 0)
  br label %cond.end63

cond.end63:                                       ; preds = %cond.false61, %cond.true57
  %cond64 = phi i64 [ %56, %cond.true57 ], [ %call62, %cond.false61 ]
  %and65 = and i64 %cond53, %cond64
  store i64 %and65, i64* %u, align 8
  br label %do.body66

do.body66:                                        ; preds = %cond.end63
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load i64, i64* %u, align 8
  call void @Perl_sv_setuv(%struct.sv* %58, i64 %59)
  br label %do.body67

do.body67:                                        ; preds = %do.body66
  br label %do.body68

do.body68:                                        ; preds = %do.body67
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %61, 4194304
  %tobool71 = icmp ne i32 %and70, 0
  br i1 %tobool71, label %cond.true72, label %cond.false73

cond.true72:                                      ; preds = %do.body68
  br i1 true, label %if.then74, label %if.end76

cond.false73:                                     ; preds = %do.body68
  br i1 false, label %if.then74, label %if.end76

if.then74:                                        ; preds = %cond.false73, %cond.true72
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %call75 = call i32 @Perl_mg_set(%struct.sv* %62)
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %cond.false73, %cond.true72
  br label %do.end77

do.end77:                                         ; preds = %if.end76
  %63 = load %struct.sv*, %struct.sv** %targ, align 8
  %64 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %63, %struct.sv** %64, align 8
  br label %do.end78

do.end78:                                         ; preds = %do.end77
  br label %do.end79

do.end79:                                         ; preds = %do.end78
  br label %if.end80

if.end80:                                         ; preds = %do.end79, %do.end44
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %65, %struct.sv*** @PL_stack_sp, align 8
  %66 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next81 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 0
  %67 = load %struct.op*, %struct.op** %op_next81, align 8
  store %struct.op* %67, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end80, %if.then
  %68 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %68
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sbit_and() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 48, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %do.end21

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %10 to i32
  %and2 = and i32 %conv, 64
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %do.end
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 -1
  %12 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false5:                                      ; preds = %do.end
  %13 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 3
  %15 = load i64, i64* %op_targ, align 8
  %arrayidx6 = getelementptr inbounds %struct.sv*, %struct.sv** %13, i64 %15
  %16 = load %struct.sv*, %struct.sv** %arrayidx6, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi %struct.sv* [ %12, %cond.true4 ], [ %16, %cond.false5 ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %left, align 8
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load %struct.sv*, %struct.sv** %left, align 8
  %23 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_do_vop(i32 92, %struct.sv* %21, %struct.sv* %22, %struct.sv* %23)
  br label %do.body7

do.body7:                                         ; preds = %cond.end
  br label %do.body8

do.body8:                                         ; preds = %do.body7
  br label %do.body9

do.body9:                                         ; preds = %do.body8
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %25, 4194304
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %cond.true13, label %cond.false14

cond.true13:                                      ; preds = %do.body9
  br i1 true, label %if.then15, label %if.end17

cond.false14:                                     ; preds = %do.body9
  br i1 false, label %if.then15, label %if.end17

if.then15:                                        ; preds = %cond.false14, %cond.true13
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %call16 = call i32 @Perl_mg_set(%struct.sv* %26)
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %cond.false14, %cond.true13
  br label %do.end18

do.end18:                                         ; preds = %if.end17
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %27, %struct.sv** %28, align 8
  br label %do.end19

do.end19:                                         ; preds = %do.end18
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %do.end21

do.end21:                                         ; preds = %if.then, %do.end19
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_bit_or() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %op_type = alloca i32, align 4
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %left_ro_nonnum = alloca i8, align 1
  %right_ro_nonnum = alloca i8, align 1
  %l = alloca i64, align 8
  %r = alloca i64, align 8
  %result = alloca i64, align 8
  %l99 = alloca i64, align 8
  %r131 = alloca i64, align 8
  %result143 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 4
  %bf.load = load i16, i16* %op_type2, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  br label %do.body

do.body:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i64 -1
  %11 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags, align 4
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags3, align 4
  %or = or i32 %12, %15
  %and4 = and i32 %or, 2099200
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false7:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false7, %cond.true6
  %16 = load i32, i32* %op_type, align 4
  %cmp = icmp eq i32 %16, 94
  %17 = zext i1 %cmp to i64
  %cond9 = select i1 %cmp, i32 50, i32 54
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 %cond9, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %19, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false7, %cond.true6
  br label %do.end

do.end:                                           ; preds = %if.end
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  store %struct.sv* %21, %struct.sv** %right, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  store %struct.sv* %23, %struct.sv** %left, align 8
  %24 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %25, 12288
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %26 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %27, 12288
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.else181

if.then17:                                        ; preds = %lor.lhs.false, %do.end
  %28 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %29, 12288
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %land.end, label %land.rhs

land.rhs:                                         ; preds = %if.then17
  %30 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %31, 134283264
  %tobool23 = icmp ne i32 %and22, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then17
  %32 = phi i1 [ false, %if.then17 ], [ %tobool23, %land.rhs ]
  %frombool = zext i1 %32 to i8
  store i8 %frombool, i8* %left_ro_nonnum, align 1
  %33 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %34, 12288
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.end31, label %land.rhs27

land.rhs27:                                       ; preds = %land.end
  %35 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %36, 134283264
  %tobool30 = icmp ne i32 %and29, 0
  br label %land.end31

land.end31:                                       ; preds = %land.rhs27, %land.end
  %37 = phi i1 [ false, %land.end ], [ %tobool30, %land.rhs27 ]
  %frombool32 = zext i1 %37 to i8
  store i8 %frombool32, i8* %right_ro_nonnum, align 1
  %38 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 6
  %39 = load i8, i8* %op_private, align 1
  %conv33 = zext i8 %39 to i32
  %and34 = and i32 %conv33, 1
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then36, label %if.else

if.then36:                                        ; preds = %land.end31
  %40 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %41, 65280
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true55, label %lor.lhs.false40

lor.lhs.false40:                                  ; preds = %if.then36
  %42 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %43, 255
  %cmp43 = icmp eq i32 %and42, 8
  br i1 %cmp43, label %cond.true55, label %lor.lhs.false45

lor.lhs.false45:                                  ; preds = %lor.lhs.false40
  %44 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags46 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags46, align 4
  %and47 = and i32 %45, 16826623
  %cmp48 = icmp eq i32 %and47, 16777226
  br i1 %cmp48, label %cond.true55, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %lor.lhs.false45
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags51 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 5
  %47 = load i8, i8* %op_flags51, align 2
  %conv52 = zext i8 %47 to i32
  %and53 = and i32 %conv52, 64
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %cond.false64, label %cond.true55

cond.true55:                                      ; preds = %lor.lhs.false50, %lor.lhs.false45, %lor.lhs.false40, %if.then36
  %48 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %49, 256
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %cond.true55
  %50 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any, align 8
  %52 = bitcast i8* %51 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %52, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %53 = load i64, i64* %xivu_iv, align 8
  br label %cond.end62

cond.false60:                                     ; preds = %cond.true55
  %54 = load %struct.sv*, %struct.sv** %left, align 8
  %call61 = call i64 @Perl_sv_2iv_flags(%struct.sv* %54, i32 0)
  br label %cond.end62

cond.end62:                                       ; preds = %cond.false60, %cond.true59
  %cond63 = phi i64 [ %53, %cond.true59 ], [ %call61, %cond.false60 ]
  br label %cond.end65

cond.false64:                                     ; preds = %lor.lhs.false50
  br label %cond.end65

cond.end65:                                       ; preds = %cond.false64, %cond.end62
  %cond66 = phi i64 [ %cond63, %cond.end62 ], [ 0, %cond.false64 ]
  store i64 %cond66, i64* %l, align 8
  %55 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %56, 256
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %cond.true70, label %cond.false74

cond.true70:                                      ; preds = %cond.end65
  %57 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any71, align 8
  %59 = bitcast i8* %58 to %struct.xpviv*
  %xiv_u72 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %59, i32 0, i32 4
  %xivu_iv73 = bitcast %union._xivu* %xiv_u72 to i64*
  %60 = load i64, i64* %xivu_iv73, align 8
  br label %cond.end76

cond.false74:                                     ; preds = %cond.end65
  %61 = load %struct.sv*, %struct.sv** %right, align 8
  %call75 = call i64 @Perl_sv_2iv_flags(%struct.sv* %61, i32 0)
  br label %cond.end76

cond.end76:                                       ; preds = %cond.false74, %cond.true70
  %cond77 = phi i64 [ %60, %cond.true70 ], [ %call75, %cond.false74 ]
  store i64 %cond77, i64* %r, align 8
  %62 = load i32, i32* %op_type, align 4
  %cmp78 = icmp eq i32 %62, 94
  br i1 %cmp78, label %cond.true80, label %cond.false82

cond.true80:                                      ; preds = %cond.end76
  %63 = load i64, i64* %l, align 8
  %64 = load i64, i64* %r, align 8
  %or81 = or i64 %63, %64
  br label %cond.end83

cond.false82:                                     ; preds = %cond.end76
  %65 = load i64, i64* %l, align 8
  %66 = load i64, i64* %r, align 8
  %xor = xor i64 %65, %66
  br label %cond.end83

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi i64 [ %or81, %cond.true80 ], [ %xor, %cond.false82 ]
  store i64 %cond84, i64* %result, align 8
  br label %do.body85

do.body85:                                        ; preds = %cond.end83
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %68 = load i64, i64* %result, align 8
  call void @Perl_sv_setiv(%struct.sv* %67, i64 %68)
  br label %do.body86

do.body86:                                        ; preds = %do.body85
  br label %do.body87

do.body87:                                        ; preds = %do.body86
  %69 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %70, 4194304
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %cond.true91, label %cond.false92

cond.true91:                                      ; preds = %do.body87
  br i1 true, label %if.then93, label %if.end95

cond.false92:                                     ; preds = %do.body87
  br i1 false, label %if.then93, label %if.end95

if.then93:                                        ; preds = %cond.false92, %cond.true91
  %71 = load %struct.sv*, %struct.sv** %targ, align 8
  %call94 = call i32 @Perl_mg_set(%struct.sv* %71)
  br label %if.end95

if.end95:                                         ; preds = %if.then93, %cond.false92, %cond.true91
  br label %do.end96

do.end96:                                         ; preds = %if.end95
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %72, %struct.sv** %73, align 8
  br label %do.end97

do.end97:                                         ; preds = %do.end96
  br label %do.end98

do.end98:                                         ; preds = %do.end97
  br label %if.end166

if.else:                                          ; preds = %land.end31
  %74 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %75, 65280
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %cond.true118, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %if.else
  %76 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %77, 255
  %cmp106 = icmp eq i32 %and105, 8
  br i1 %cmp106, label %cond.true118, label %lor.lhs.false108

lor.lhs.false108:                                 ; preds = %lor.lhs.false103
  %78 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags109 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags109, align 4
  %and110 = and i32 %79, 16826623
  %cmp111 = icmp eq i32 %and110, 16777226
  br i1 %cmp111, label %cond.true118, label %lor.lhs.false113

lor.lhs.false113:                                 ; preds = %lor.lhs.false108
  %80 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags114 = getelementptr inbounds %struct.op, %struct.op* %80, i32 0, i32 5
  %81 = load i8, i8* %op_flags114, align 2
  %conv115 = zext i8 %81 to i32
  %and116 = and i32 %conv115, 64
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.false128, label %cond.true118

cond.true118:                                     ; preds = %lor.lhs.false113, %lor.lhs.false108, %lor.lhs.false103, %if.else
  %82 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %83, 256
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %cond.true122, label %cond.false124

cond.true122:                                     ; preds = %cond.true118
  %84 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any123, align 8
  %86 = bitcast i8* %85 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %86, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %87 = load i64, i64* %xivu_uv, align 8
  br label %cond.end126

cond.false124:                                    ; preds = %cond.true118
  %88 = load %struct.sv*, %struct.sv** %left, align 8
  %call125 = call i64 @Perl_sv_2uv_flags(%struct.sv* %88, i32 0)
  br label %cond.end126

cond.end126:                                      ; preds = %cond.false124, %cond.true122
  %cond127 = phi i64 [ %87, %cond.true122 ], [ %call125, %cond.false124 ]
  br label %cond.end129

cond.false128:                                    ; preds = %lor.lhs.false113
  br label %cond.end129

cond.end129:                                      ; preds = %cond.false128, %cond.end126
  %cond130 = phi i64 [ %cond127, %cond.end126 ], [ 0, %cond.false128 ]
  store i64 %cond130, i64* %l99, align 8
  %89 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags132 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags132, align 4
  %and133 = and i32 %90, 256
  %tobool134 = icmp ne i32 %and133, 0
  br i1 %tobool134, label %cond.true135, label %cond.false139

cond.true135:                                     ; preds = %cond.end129
  %91 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any136 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any136, align 8
  %93 = bitcast i8* %92 to %struct.xpvuv*
  %xuv_u137 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %93, i32 0, i32 4
  %xivu_uv138 = bitcast %union._xivu* %xuv_u137 to i64*
  %94 = load i64, i64* %xivu_uv138, align 8
  br label %cond.end141

cond.false139:                                    ; preds = %cond.end129
  %95 = load %struct.sv*, %struct.sv** %right, align 8
  %call140 = call i64 @Perl_sv_2uv_flags(%struct.sv* %95, i32 0)
  br label %cond.end141

cond.end141:                                      ; preds = %cond.false139, %cond.true135
  %cond142 = phi i64 [ %94, %cond.true135 ], [ %call140, %cond.false139 ]
  store i64 %cond142, i64* %r131, align 8
  %96 = load i32, i32* %op_type, align 4
  %cmp144 = icmp eq i32 %96, 94
  br i1 %cmp144, label %cond.true146, label %cond.false148

cond.true146:                                     ; preds = %cond.end141
  %97 = load i64, i64* %l99, align 8
  %98 = load i64, i64* %r131, align 8
  %or147 = or i64 %97, %98
  br label %cond.end150

cond.false148:                                    ; preds = %cond.end141
  %99 = load i64, i64* %l99, align 8
  %100 = load i64, i64* %r131, align 8
  %xor149 = xor i64 %99, %100
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false148, %cond.true146
  %cond151 = phi i64 [ %or147, %cond.true146 ], [ %xor149, %cond.false148 ]
  store i64 %cond151, i64* %result143, align 8
  br label %do.body152

do.body152:                                       ; preds = %cond.end150
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %102 = load i64, i64* %result143, align 8
  call void @Perl_sv_setuv(%struct.sv* %101, i64 %102)
  br label %do.body153

do.body153:                                       ; preds = %do.body152
  br label %do.body154

do.body154:                                       ; preds = %do.body153
  %103 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags155 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags155, align 4
  %and156 = and i32 %104, 4194304
  %tobool157 = icmp ne i32 %and156, 0
  br i1 %tobool157, label %cond.true158, label %cond.false159

cond.true158:                                     ; preds = %do.body154
  br i1 true, label %if.then160, label %if.end162

cond.false159:                                    ; preds = %do.body154
  br i1 false, label %if.then160, label %if.end162

if.then160:                                       ; preds = %cond.false159, %cond.true158
  %105 = load %struct.sv*, %struct.sv** %targ, align 8
  %call161 = call i32 @Perl_mg_set(%struct.sv* %105)
  br label %if.end162

if.end162:                                        ; preds = %if.then160, %cond.false159, %cond.true158
  br label %do.end163

do.end163:                                        ; preds = %if.end162
  %106 = load %struct.sv*, %struct.sv** %targ, align 8
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %106, %struct.sv** %107, align 8
  br label %do.end164

do.end164:                                        ; preds = %do.end163
  br label %do.end165

do.end165:                                        ; preds = %do.end164
  br label %if.end166

if.end166:                                        ; preds = %do.end165, %do.end98
  %108 = load i8, i8* %left_ro_nonnum, align 1
  %tobool167 = trunc i8 %108 to i1
  br i1 %tobool167, label %land.lhs.true169, label %if.end175

land.lhs.true169:                                 ; preds = %if.end166
  %109 = load %struct.sv*, %struct.sv** %left, align 8
  %110 = load %struct.sv*, %struct.sv** %targ, align 8
  %cmp170 = icmp ne %struct.sv* %109, %110
  br i1 %cmp170, label %if.then172, label %if.end175

if.then172:                                       ; preds = %land.lhs.true169
  %111 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %112, 2147470591
  store i32 %and174, i32* %sv_flags173, align 4
  br label %if.end175

if.end175:                                        ; preds = %if.then172, %land.lhs.true169, %if.end166
  %113 = load i8, i8* %right_ro_nonnum, align 1
  %tobool176 = trunc i8 %113 to i1
  br i1 %tobool176, label %if.then177, label %if.end180

if.then177:                                       ; preds = %if.end175
  %114 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %115, 2147470591
  store i32 %and179, i32* %sv_flags178, align 4
  br label %if.end180

if.end180:                                        ; preds = %if.then177, %if.end175
  br label %if.end194

if.else181:                                       ; preds = %lor.lhs.false
  %116 = load i32, i32* %op_type, align 4
  %117 = load %struct.sv*, %struct.sv** %targ, align 8
  %118 = load %struct.sv*, %struct.sv** %left, align 8
  %119 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_do_vop(i32 %116, %struct.sv* %117, %struct.sv* %118, %struct.sv* %119)
  br label %do.body182

do.body182:                                       ; preds = %if.else181
  br label %do.body183

do.body183:                                       ; preds = %do.body182
  %120 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags184 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags184, align 4
  %and185 = and i32 %121, 4194304
  %tobool186 = icmp ne i32 %and185, 0
  br i1 %tobool186, label %cond.true187, label %cond.false188

cond.true187:                                     ; preds = %do.body183
  br i1 true, label %if.then189, label %if.end191

cond.false188:                                    ; preds = %do.body183
  br i1 false, label %if.then189, label %if.end191

if.then189:                                       ; preds = %cond.false188, %cond.true187
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %call190 = call i32 @Perl_mg_set(%struct.sv* %122)
  br label %if.end191

if.end191:                                        ; preds = %if.then189, %cond.false188, %cond.true187
  br label %do.end192

do.end192:                                        ; preds = %if.end191
  %123 = load %struct.sv*, %struct.sv** %targ, align 8
  %124 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %123, %struct.sv** %124, align 8
  br label %do.end193

do.end193:                                        ; preds = %do.end192
  br label %if.end194

if.end194:                                        ; preds = %do.end193, %if.end180
  %125 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %125, %struct.sv*** @PL_stack_sp, align 8
  %126 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next195 = getelementptr inbounds %struct.op, %struct.op* %126, i32 0, i32 0
  %127 = load %struct.op*, %struct.op** %op_next195, align 8
  store %struct.op* %127, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end194, %if.then
  %128 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %128
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_nbit_or() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %op_type = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %l = alloca i64, align 8
  %r = alloca i64, align 8
  %result = alloca i64, align 8
  %l74 = alloca i64, align 8
  %r106 = alloca i64, align 8
  %result118 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 -1
  %3 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %4, %7
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %op_type, align 4
  %cmp = icmp eq i32 %8, 97
  %9 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 50, i32 54
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 %cond, i32 132)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and3 = and i32 %conv, 64
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 -1
  %15 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %16 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ, align 8
  %arrayidx7 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 %18
  %19 = load %struct.sv*, %struct.sv** %arrayidx7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond8 = phi %struct.sv* [ %15, %cond.true5 ], [ %19, %cond.false6 ]
  store %struct.sv* %cond8, %struct.sv** %targ, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  store %struct.sv* %21, %struct.sv** %right, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  store %struct.sv* %23, %struct.sv** %left, align 8
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 6
  %25 = load i8, i8* %op_private, align 1
  %conv9 = zext i8 %25 to i32
  %and10 = and i32 %conv9, 1
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else

if.then12:                                        ; preds = %cond.end
  %26 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %27, 65280
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then12
  %28 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %29, 255
  %cmp18 = icmp eq i32 %and17, 8
  br i1 %cmp18, label %cond.true30, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %lor.lhs.false
  %30 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %31, 16826623
  %cmp23 = icmp eq i32 %and22, 16777226
  br i1 %cmp23, label %cond.true30, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false20
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags26 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 5
  %33 = load i8, i8* %op_flags26, align 2
  %conv27 = zext i8 %33 to i32
  %and28 = and i32 %conv27, 64
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %cond.false39, label %cond.true30

cond.true30:                                      ; preds = %lor.lhs.false25, %lor.lhs.false20, %lor.lhs.false, %if.then12
  %34 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %35, 256
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %cond.true30
  %36 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %38, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %39 = load i64, i64* %xivu_iv, align 8
  br label %cond.end37

cond.false35:                                     ; preds = %cond.true30
  %40 = load %struct.sv*, %struct.sv** %left, align 8
  %call36 = call i64 @Perl_sv_2iv_flags(%struct.sv* %40, i32 0)
  br label %cond.end37

cond.end37:                                       ; preds = %cond.false35, %cond.true34
  %cond38 = phi i64 [ %39, %cond.true34 ], [ %call36, %cond.false35 ]
  br label %cond.end40

cond.false39:                                     ; preds = %lor.lhs.false25
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false39, %cond.end37
  %cond41 = phi i64 [ %cond38, %cond.end37 ], [ 0, %cond.false39 ]
  store i64 %cond41, i64* %l, align 8
  %41 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %42, 256
  %tobool44 = icmp ne i32 %and43, 0
  br i1 %tobool44, label %cond.true45, label %cond.false49

cond.true45:                                      ; preds = %cond.end40
  %43 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any46 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any46, align 8
  %45 = bitcast i8* %44 to %struct.xpviv*
  %xiv_u47 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %45, i32 0, i32 4
  %xivu_iv48 = bitcast %union._xivu* %xiv_u47 to i64*
  %46 = load i64, i64* %xivu_iv48, align 8
  br label %cond.end51

cond.false49:                                     ; preds = %cond.end40
  %47 = load %struct.sv*, %struct.sv** %right, align 8
  %call50 = call i64 @Perl_sv_2iv_flags(%struct.sv* %47, i32 0)
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false49, %cond.true45
  %cond52 = phi i64 [ %46, %cond.true45 ], [ %call50, %cond.false49 ]
  store i64 %cond52, i64* %r, align 8
  %48 = load i32, i32* %op_type, align 4
  %cmp53 = icmp eq i32 %48, 97
  br i1 %cmp53, label %cond.true55, label %cond.false57

cond.true55:                                      ; preds = %cond.end51
  %49 = load i64, i64* %l, align 8
  %50 = load i64, i64* %r, align 8
  %or56 = or i64 %49, %50
  br label %cond.end58

cond.false57:                                     ; preds = %cond.end51
  %51 = load i64, i64* %l, align 8
  %52 = load i64, i64* %r, align 8
  %xor = xor i64 %51, %52
  br label %cond.end58

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi i64 [ %or56, %cond.true55 ], [ %xor, %cond.false57 ]
  store i64 %cond59, i64* %result, align 8
  br label %do.body60

do.body60:                                        ; preds = %cond.end58
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %54 = load i64, i64* %result, align 8
  call void @Perl_sv_setiv(%struct.sv* %53, i64 %54)
  br label %do.body61

do.body61:                                        ; preds = %do.body60
  br label %do.body62

do.body62:                                        ; preds = %do.body61
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %56, 4194304
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %cond.true66, label %cond.false67

cond.true66:                                      ; preds = %do.body62
  br i1 true, label %if.then68, label %if.end70

cond.false67:                                     ; preds = %do.body62
  br i1 false, label %if.then68, label %if.end70

if.then68:                                        ; preds = %cond.false67, %cond.true66
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %call69 = call i32 @Perl_mg_set(%struct.sv* %57)
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %cond.false67, %cond.true66
  br label %do.end71

do.end71:                                         ; preds = %if.end70
  %58 = load %struct.sv*, %struct.sv** %targ, align 8
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %58, %struct.sv** %59, align 8
  br label %do.end72

do.end72:                                         ; preds = %do.end71
  br label %do.end73

do.end73:                                         ; preds = %do.end72
  br label %if.end141

if.else:                                          ; preds = %cond.end
  %60 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %61, 65280
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %cond.true93, label %lor.lhs.false78

lor.lhs.false78:                                  ; preds = %if.else
  %62 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %63, 255
  %cmp81 = icmp eq i32 %and80, 8
  br i1 %cmp81, label %cond.true93, label %lor.lhs.false83

lor.lhs.false83:                                  ; preds = %lor.lhs.false78
  %64 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %65, 16826623
  %cmp86 = icmp eq i32 %and85, 16777226
  br i1 %cmp86, label %cond.true93, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %lor.lhs.false83
  %66 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags89 = getelementptr inbounds %struct.op, %struct.op* %66, i32 0, i32 5
  %67 = load i8, i8* %op_flags89, align 2
  %conv90 = zext i8 %67 to i32
  %and91 = and i32 %conv90, 64
  %tobool92 = icmp ne i32 %and91, 0
  br i1 %tobool92, label %cond.false103, label %cond.true93

cond.true93:                                      ; preds = %lor.lhs.false88, %lor.lhs.false83, %lor.lhs.false78, %if.else
  %68 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags94 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags94, align 4
  %and95 = and i32 %69, 256
  %tobool96 = icmp ne i32 %and95, 0
  br i1 %tobool96, label %cond.true97, label %cond.false99

cond.true97:                                      ; preds = %cond.true93
  %70 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any98, align 8
  %72 = bitcast i8* %71 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %72, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %73 = load i64, i64* %xivu_uv, align 8
  br label %cond.end101

cond.false99:                                     ; preds = %cond.true93
  %74 = load %struct.sv*, %struct.sv** %left, align 8
  %call100 = call i64 @Perl_sv_2uv_flags(%struct.sv* %74, i32 0)
  br label %cond.end101

cond.end101:                                      ; preds = %cond.false99, %cond.true97
  %cond102 = phi i64 [ %73, %cond.true97 ], [ %call100, %cond.false99 ]
  br label %cond.end104

cond.false103:                                    ; preds = %lor.lhs.false88
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false103, %cond.end101
  %cond105 = phi i64 [ %cond102, %cond.end101 ], [ 0, %cond.false103 ]
  store i64 %cond105, i64* %l74, align 8
  %75 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %76, 256
  %tobool109 = icmp ne i32 %and108, 0
  br i1 %tobool109, label %cond.true110, label %cond.false114

cond.true110:                                     ; preds = %cond.end104
  %77 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any111 = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any111, align 8
  %79 = bitcast i8* %78 to %struct.xpvuv*
  %xuv_u112 = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %79, i32 0, i32 4
  %xivu_uv113 = bitcast %union._xivu* %xuv_u112 to i64*
  %80 = load i64, i64* %xivu_uv113, align 8
  br label %cond.end116

cond.false114:                                    ; preds = %cond.end104
  %81 = load %struct.sv*, %struct.sv** %right, align 8
  %call115 = call i64 @Perl_sv_2uv_flags(%struct.sv* %81, i32 0)
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false114, %cond.true110
  %cond117 = phi i64 [ %80, %cond.true110 ], [ %call115, %cond.false114 ]
  store i64 %cond117, i64* %r106, align 8
  %82 = load i32, i32* %op_type, align 4
  %cmp119 = icmp eq i32 %82, 97
  br i1 %cmp119, label %cond.true121, label %cond.false123

cond.true121:                                     ; preds = %cond.end116
  %83 = load i64, i64* %l74, align 8
  %84 = load i64, i64* %r106, align 8
  %or122 = or i64 %83, %84
  br label %cond.end125

cond.false123:                                    ; preds = %cond.end116
  %85 = load i64, i64* %l74, align 8
  %86 = load i64, i64* %r106, align 8
  %xor124 = xor i64 %85, %86
  br label %cond.end125

cond.end125:                                      ; preds = %cond.false123, %cond.true121
  %cond126 = phi i64 [ %or122, %cond.true121 ], [ %xor124, %cond.false123 ]
  store i64 %cond126, i64* %result118, align 8
  br label %do.body127

do.body127:                                       ; preds = %cond.end125
  %87 = load %struct.sv*, %struct.sv** %targ, align 8
  %88 = load i64, i64* %result118, align 8
  call void @Perl_sv_setuv(%struct.sv* %87, i64 %88)
  br label %do.body128

do.body128:                                       ; preds = %do.body127
  br label %do.body129

do.body129:                                       ; preds = %do.body128
  %89 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %90, 4194304
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %cond.true133, label %cond.false134

cond.true133:                                     ; preds = %do.body129
  br i1 true, label %if.then135, label %if.end137

cond.false134:                                    ; preds = %do.body129
  br i1 false, label %if.then135, label %if.end137

if.then135:                                       ; preds = %cond.false134, %cond.true133
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %call136 = call i32 @Perl_mg_set(%struct.sv* %91)
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %cond.false134, %cond.true133
  br label %do.end138

do.end138:                                        ; preds = %if.end137
  %92 = load %struct.sv*, %struct.sv** %targ, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %92, %struct.sv** %93, align 8
  br label %do.end139

do.end139:                                        ; preds = %do.end138
  br label %do.end140

do.end140:                                        ; preds = %do.end139
  br label %if.end141

if.end141:                                        ; preds = %do.end140, %do.end73
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %94, %struct.sv*** @PL_stack_sp, align 8
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next142 = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 0
  %96 = load %struct.op*, %struct.op** %op_next142, align 8
  store %struct.op* %96, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end141, %if.then
  %97 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %97
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sbit_or() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %op_type = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 -1
  %3 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %4, %7
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %8 = load i32, i32* %op_type, align 4
  %cmp = icmp eq i32 %8, 100
  %9 = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 52, i32 56
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 %cond, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %do.end26

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 5
  %13 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %13 to i32
  %and3 = and i32 %conv, 64
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %14, i64 -1
  %15 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %16 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 3
  %18 = load i64, i64* %op_targ, align 8
  %arrayidx7 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i64 %18
  %19 = load %struct.sv*, %struct.sv** %arrayidx7, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond8 = phi %struct.sv* [ %15, %cond.true5 ], [ %19, %cond.false6 ]
  store %struct.sv* %cond8, %struct.sv** %targ, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  store %struct.sv* %21, %struct.sv** %right, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  store %struct.sv* %23, %struct.sv** %left, align 8
  %24 = load i32, i32* %op_type, align 4
  %cmp9 = icmp eq i32 %24, 100
  %25 = zext i1 %cmp9 to i64
  %cond11 = select i1 %cmp9, i32 94, i32 93
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %27 = load %struct.sv*, %struct.sv** %left, align 8
  %28 = load %struct.sv*, %struct.sv** %right, align 8
  call void @Perl_do_vop(i32 %cond11, %struct.sv* %26, %struct.sv* %27, %struct.sv* %28)
  br label %do.body12

do.body12:                                        ; preds = %cond.end
  br label %do.body13

do.body13:                                        ; preds = %do.body12
  br label %do.body14

do.body14:                                        ; preds = %do.body13
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %30, 4194304
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %do.body14
  br i1 true, label %if.then20, label %if.end22

cond.false19:                                     ; preds = %do.body14
  br i1 false, label %if.then20, label %if.end22

if.then20:                                        ; preds = %cond.false19, %cond.true18
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %call21 = call i32 @Perl_mg_set(%struct.sv* %31)
  br label %if.end22

if.end22:                                         ; preds = %if.then20, %cond.false19, %cond.true18
  br label %do.end23

do.end23:                                         ; preds = %if.end22
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %32, %struct.sv** %33, align 8
  br label %do.end24

do.end24:                                         ; preds = %do.end23
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next25 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next25, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %do.end26

do.end26:                                         ; preds = %if.then, %do.end24
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_negate() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 14, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %call1 = call zeroext i1 @S_negate_string()
  br i1 %call1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %do.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next3 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next3, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %return

if.end4:                                          ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  store %struct.sv* %13, %struct.sv** %sv, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %15, 256
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.end97

if.then8:                                         ; preds = %if.end4
  br label %oops_its_an_int

oops_its_an_int:                                  ; preds = %if.then151, %if.then8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %17, -2147483648
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else55

if.then12:                                        ; preds = %oops_its_an_int
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %20, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %21 = load i64, i64* %xivu_iv, align 8
  %cmp = icmp eq i64 %21, -9223372036854775808
  br i1 %cmp, label %if.then13, label %if.else

if.then13:                                        ; preds = %if.then12
  br label %do.body14

do.body14:                                        ; preds = %if.then13
  %22 = load %struct.sv*, %struct.sv** %targ, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any15 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any15, align 8
  %25 = bitcast i8* %24 to %struct.xpviv*
  %xiv_u16 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %25, i32 0, i32 4
  %xivu_iv17 = bitcast %union._xivu* %xiv_u16 to i64*
  %26 = load i64, i64* %xivu_iv17, align 8
  call void @Perl_sv_setiv(%struct.sv* %22, i64 %26)
  br label %do.body18

do.body18:                                        ; preds = %do.body14
  br label %do.body19

do.body19:                                        ; preds = %do.body18
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %28, 4194304
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %do.body19
  br i1 true, label %if.then25, label %if.end27

cond.false24:                                     ; preds = %do.body19
  br i1 false, label %if.then25, label %if.end27

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %call26 = call i32 @Perl_mg_set(%struct.sv* %29)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %cond.false24, %cond.true23
  br label %do.end28

do.end28:                                         ; preds = %if.end27
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %30, %struct.sv** %31, align 8
  br label %do.end29

do.end29:                                         ; preds = %do.end28
  br label %do.end30

do.end30:                                         ; preds = %do.end29
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next31 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 0
  %33 = load %struct.op*, %struct.op** %op_next31, align 8
  store %struct.op* %33, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then12
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 0
  %35 = load i8*, i8** %sv_any32, align 8
  %36 = bitcast i8* %35 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %36, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %37 = load i64, i64* %xivu_uv, align 8
  %cmp33 = icmp ule i64 %37, 9223372036854775807
  br i1 %cmp33, label %if.then34, label %if.end53

if.then34:                                        ; preds = %if.else
  br label %do.body35

do.body35:                                        ; preds = %if.then34
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %39 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any36 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any36, align 8
  %41 = bitcast i8* %40 to %struct.xpviv*
  %xiv_u37 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %41, i32 0, i32 4
  %xivu_iv38 = bitcast %union._xivu* %xiv_u37 to i64*
  %42 = load i64, i64* %xivu_iv38, align 8
  %sub = sub nsw i64 0, %42
  call void @Perl_sv_setiv(%struct.sv* %38, i64 %sub)
  br label %do.body39

do.body39:                                        ; preds = %do.body35
  br label %do.body40

do.body40:                                        ; preds = %do.body39
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %44, 4194304
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %do.body40
  br i1 true, label %if.then46, label %if.end48

cond.false45:                                     ; preds = %do.body40
  br i1 false, label %if.then46, label %if.end48

if.then46:                                        ; preds = %cond.false45, %cond.true44
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %call47 = call i32 @Perl_mg_set(%struct.sv* %45)
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %cond.false45, %cond.true44
  br label %do.end49

do.end49:                                         ; preds = %if.end48
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %46, %struct.sv** %47, align 8
  br label %do.end50

do.end50:                                         ; preds = %do.end49
  br label %do.end51

do.end51:                                         ; preds = %do.end50
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next52 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next52, align 8
  store %struct.op* %49, %struct.op** %retval, align 8
  br label %return

if.end53:                                         ; preds = %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53
  br label %if.end96

if.else55:                                        ; preds = %oops_its_an_int
  %50 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any56 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 0
  %51 = load i8*, i8** %sv_any56, align 8
  %52 = bitcast i8* %51 to %struct.xpviv*
  %xiv_u57 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %52, i32 0, i32 4
  %xivu_iv58 = bitcast %union._xivu* %xiv_u57 to i64*
  %53 = load i64, i64* %xivu_iv58, align 8
  %cmp59 = icmp ne i64 %53, -9223372036854775808
  br i1 %cmp59, label %if.then60, label %if.else80

if.then60:                                        ; preds = %if.else55
  br label %do.body61

do.body61:                                        ; preds = %if.then60
  %54 = load %struct.sv*, %struct.sv** %targ, align 8
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any62 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any62, align 8
  %57 = bitcast i8* %56 to %struct.xpviv*
  %xiv_u63 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %57, i32 0, i32 4
  %xivu_iv64 = bitcast %union._xivu* %xiv_u63 to i64*
  %58 = load i64, i64* %xivu_iv64, align 8
  %sub65 = sub nsw i64 0, %58
  call void @Perl_sv_setiv(%struct.sv* %54, i64 %sub65)
  br label %do.body66

do.body66:                                        ; preds = %do.body61
  br label %do.body67

do.body67:                                        ; preds = %do.body66
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %60, 4194304
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %do.body67
  br i1 true, label %if.then73, label %if.end75

cond.false72:                                     ; preds = %do.body67
  br i1 false, label %if.then73, label %if.end75

if.then73:                                        ; preds = %cond.false72, %cond.true71
  %61 = load %struct.sv*, %struct.sv** %targ, align 8
  %call74 = call i32 @Perl_mg_set(%struct.sv* %61)
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %cond.false72, %cond.true71
  br label %do.end76

do.end76:                                         ; preds = %if.end75
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %62, %struct.sv** %63, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.end76
  br label %do.end78

do.end78:                                         ; preds = %do.end77
  %64 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next79 = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 0
  %65 = load %struct.op*, %struct.op** %op_next79, align 8
  store %struct.op* %65, %struct.op** %retval, align 8
  br label %return

if.else80:                                        ; preds = %if.else55
  br label %do.body81

do.body81:                                        ; preds = %if.else80
  %66 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setuv(%struct.sv* %66, i64 -9223372036854775808)
  br label %do.body82

do.body82:                                        ; preds = %do.body81
  br label %do.body83

do.body83:                                        ; preds = %do.body82
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags84 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags84, align 4
  %and85 = and i32 %68, 4194304
  %tobool86 = icmp ne i32 %and85, 0
  br i1 %tobool86, label %cond.true87, label %cond.false88

cond.true87:                                      ; preds = %do.body83
  br i1 true, label %if.then89, label %if.end91

cond.false88:                                     ; preds = %do.body83
  br i1 false, label %if.then89, label %if.end91

if.then89:                                        ; preds = %cond.false88, %cond.true87
  %69 = load %struct.sv*, %struct.sv** %targ, align 8
  %call90 = call i32 @Perl_mg_set(%struct.sv* %69)
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %cond.false88, %cond.true87
  br label %do.end92

do.end92:                                         ; preds = %if.end91
  %70 = load %struct.sv*, %struct.sv** %targ, align 8
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %70, %struct.sv** %71, align 8
  br label %do.end93

do.end93:                                         ; preds = %do.end92
  br label %do.end94

do.end94:                                         ; preds = %do.end93
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next95 = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 0
  %73 = load %struct.op*, %struct.op** %op_next95, align 8
  store %struct.op* %73, %struct.op** %retval, align 8
  br label %return

if.end96:                                         ; preds = %if.end54
  br label %if.end97

if.end97:                                         ; preds = %if.end96, %if.end4
  %74 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags98 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags98, align 4
  %and99 = and i32 %75, 12288
  %tobool100 = icmp ne i32 %and99, 0
  br i1 %tobool100, label %land.lhs.true101, label %if.else130

land.lhs.true101:                                 ; preds = %if.end97
  %76 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %77, 768
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %if.then108, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true101
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags105 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 2
  %79 = load i32, i32* %sv_flags105, align 4
  %and106 = and i32 %79, 1024
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.else130, label %if.then108

if.then108:                                       ; preds = %lor.lhs.false, %land.lhs.true101
  br label %do.body109

do.body109:                                       ; preds = %if.then108
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %81 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags110 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags110, align 4
  %and111 = and i32 %82, 512
  %tobool112 = icmp ne i32 %and111, 0
  br i1 %tobool112, label %cond.true113, label %cond.false115

cond.true113:                                     ; preds = %do.body109
  %83 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any114 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any114, align 8
  %85 = bitcast i8* %84 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %85, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %86 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false115:                                    ; preds = %do.body109
  %87 = load %struct.sv*, %struct.sv** %sv, align 8
  %call116 = call double @Perl_sv_2nv_flags(%struct.sv* %87, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false115, %cond.true113
  %cond = phi double [ %86, %cond.true113 ], [ %call116, %cond.false115 ]
  %fneg = fneg double %cond
  call void @Perl_sv_setnv(%struct.sv* %80, double %fneg)
  br label %do.body117

do.body117:                                       ; preds = %cond.end
  br label %do.body118

do.body118:                                       ; preds = %do.body117
  %88 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %88, i32 0, i32 2
  %89 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %89, 4194304
  %tobool121 = icmp ne i32 %and120, 0
  br i1 %tobool121, label %cond.true122, label %cond.false123

cond.true122:                                     ; preds = %do.body118
  br i1 true, label %if.then124, label %if.end126

cond.false123:                                    ; preds = %do.body118
  br i1 false, label %if.then124, label %if.end126

if.then124:                                       ; preds = %cond.false123, %cond.true122
  %90 = load %struct.sv*, %struct.sv** %targ, align 8
  %call125 = call i32 @Perl_mg_set(%struct.sv* %90)
  br label %if.end126

if.end126:                                        ; preds = %if.then124, %cond.false123, %cond.true122
  br label %do.end127

do.end127:                                        ; preds = %if.end126
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %91, %struct.sv** %92, align 8
  br label %do.end128

do.end128:                                        ; preds = %do.end127
  br label %do.end129

do.end129:                                        ; preds = %do.end128
  br label %if.end180

if.else130:                                       ; preds = %lor.lhs.false, %if.end97
  %93 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags131 = getelementptr inbounds %struct.sv, %struct.sv* %93, i32 0, i32 2
  %94 = load i32, i32* %sv_flags131, align 4
  %and132 = and i32 %94, 16384
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %land.lhs.true134, label %if.else152

land.lhs.true134:                                 ; preds = %if.else130
  %95 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 2
  %96 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %96, 4352
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.false147, label %land.lhs.true138

land.lhs.true138:                                 ; preds = %land.lhs.true134
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags139 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags139, align 4
  %and140 = and i32 %98, 1536
  %tobool141 = icmp ne i32 %and140, 0
  br i1 %tobool141, label %cond.true142, label %cond.false147

cond.true142:                                     ; preds = %land.lhs.true138
  %99 = load %struct.sv*, %struct.sv** %sv, align 8
  %call143 = call i64 @Perl_sv_2iv_flags(%struct.sv* %99, i32 0)
  %100 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %101, 256
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %if.then151, label %if.else152

cond.false147:                                    ; preds = %land.lhs.true138, %land.lhs.true134
  %102 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 2
  %103 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %103, 256
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %if.then151, label %if.else152

if.then151:                                       ; preds = %cond.false147, %cond.true142
  br label %oops_its_an_int

if.else152:                                       ; preds = %cond.false147, %cond.true142, %if.else130
  br label %do.body153

do.body153:                                       ; preds = %if.else152
  %104 = load %struct.sv*, %struct.sv** %targ, align 8
  %105 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags154 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 2
  %106 = load i32, i32* %sv_flags154, align 4
  %and155 = and i32 %106, 512
  %tobool156 = icmp ne i32 %and155, 0
  br i1 %tobool156, label %cond.true157, label %cond.false161

cond.true157:                                     ; preds = %do.body153
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any158 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 0
  %108 = load i8*, i8** %sv_any158, align 8
  %109 = bitcast i8* %108 to %struct.xpvnv*
  %xnv_u159 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %109, i32 0, i32 5
  %xnv_nv160 = bitcast %union._xnvu* %xnv_u159 to double*
  %110 = load double, double* %xnv_nv160, align 8
  br label %cond.end163

cond.false161:                                    ; preds = %do.body153
  %111 = load %struct.sv*, %struct.sv** %sv, align 8
  %call162 = call double @Perl_sv_2nv_flags(%struct.sv* %111, i32 0)
  br label %cond.end163

cond.end163:                                      ; preds = %cond.false161, %cond.true157
  %cond164 = phi double [ %110, %cond.true157 ], [ %call162, %cond.false161 ]
  %fneg165 = fneg double %cond164
  call void @Perl_sv_setnv(%struct.sv* %104, double %fneg165)
  br label %do.body166

do.body166:                                       ; preds = %cond.end163
  br label %do.body167

do.body167:                                       ; preds = %do.body166
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %113, 4194304
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %cond.true171, label %cond.false172

cond.true171:                                     ; preds = %do.body167
  br i1 true, label %if.then173, label %if.end175

cond.false172:                                    ; preds = %do.body167
  br i1 false, label %if.then173, label %if.end175

if.then173:                                       ; preds = %cond.false172, %cond.true171
  %114 = load %struct.sv*, %struct.sv** %targ, align 8
  %call174 = call i32 @Perl_mg_set(%struct.sv* %114)
  br label %if.end175

if.end175:                                        ; preds = %if.then173, %cond.false172, %cond.true171
  br label %do.end176

do.end176:                                        ; preds = %if.end175
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %115, %struct.sv** %116, align 8
  br label %do.end177

do.end177:                                        ; preds = %do.end176
  br label %do.end178

do.end178:                                        ; preds = %do.end177
  br label %if.end179

if.end179:                                        ; preds = %do.end178
  br label %if.end180

if.end180:                                        ; preds = %if.end179, %do.end129
  %117 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next181 = getelementptr inbounds %struct.op, %struct.op* %117, i32 0, i32 0
  %118 = load %struct.op*, %struct.op** %op_next181, align 8
  store %struct.op* %118, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end180, %do.end94, %do.end78, %do.end51, %do.end30, %if.then2, %if.then
  %119 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %119
}

declare dso_local zeroext i1 @Perl_try_amagic_un(i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i1 @S_negate_string() #0 {
entry:
  %retval = alloca i1, align 1
  %targ = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %2
  %3 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %3, %struct.sv** %targ, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %4, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 16384
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %10, 768
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %12, 1024
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %lor.lhs.false4
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %14, 12288
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false4
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %16, 2098176
  %cmp = icmp eq i32 %and12, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %19, i32 0, i32 2
  %20 = load i64, i64* %xpv_cur, align 8
  store i64 %20, i64* %len, align 8
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %22 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %22, i64 0
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %23, i64* %len, i32 32)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %24 = load i8*, i8** %s, align 8
  %25 = load i8, i8* %24, align 1
  %idxprom = zext i8 %25 to i64
  %arrayidx13 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %26 = load i32, i32* %arrayidx13, align 4
  %and14 = and i32 %26, 81920
  %cmp15 = icmp eq i32 %and14, 81920
  br i1 %cmp15, label %if.then16, label %if.else

if.then16:                                        ; preds = %cond.end
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpvn(%struct.sv* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.79, i64 0, i64 0), i64 1)
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_catsv_flags(%struct.sv* %28, %struct.sv* %29, i32 2)
  br label %if.end47

if.else:                                          ; preds = %cond.end
  %30 = load i8*, i8** %s, align 8
  %31 = load i8, i8* %30, align 1
  %conv = sext i8 %31 to i32
  %cmp17 = icmp eq i32 %conv, 43
  br i1 %cmp17, label %if.then26, label %lor.lhs.false19

lor.lhs.false19:                                  ; preds = %if.else
  %32 = load i8*, i8** %s, align 8
  %33 = load i8, i8* %32, align 1
  %conv20 = sext i8 %33 to i32
  %cmp21 = icmp eq i32 %conv20, 45
  br i1 %cmp21, label %land.lhs.true23, label %if.else45

land.lhs.true23:                                  ; preds = %lor.lhs.false19
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %call24 = call i32 @Perl_looks_like_number(%struct.sv* %34)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.else45, label %if.then26

if.then26:                                        ; preds = %land.lhs.true23, %if.else
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %35, %struct.sv* %36, i32 1536)
  %37 = load i8*, i8** %s, align 8
  %38 = load i8, i8* %37, align 1
  %conv27 = sext i8 %38 to i32
  %cmp28 = icmp eq i32 %conv27, 45
  %39 = zext i1 %cmp28 to i64
  %cond30 = select i1 %cmp28, i32 43, i32 45
  %conv31 = trunc i32 %cond30 to i8
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags32 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags32, align 4
  %and33 = and i32 %41, 430018304
  %cmp34 = icmp eq i32 %and33, 1024
  br i1 %cmp34, label %cond.true36, label %cond.false41

cond.true36:                                      ; preds = %if.then26
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any37 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 0
  %43 = load i8*, i8** %sv_any37, align 8
  %44 = bitcast i8* %43 to %struct.xpv*
  %xpv_cur38 = getelementptr inbounds %struct.xpv, %struct.xpv* %44, i32 0, i32 2
  %45 = load i64, i64* %xpv_cur38, align 8
  store i64 %45, i64* %len, align 8
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u39 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 3
  %svu_pv40 = bitcast %union.anon* %sv_u39 to i8**
  %47 = load i8*, i8** %svu_pv40, align 8
  br label %cond.end43

cond.false41:                                     ; preds = %if.then26
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %call42 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %48, i64* %len, i32 0)
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false41, %cond.true36
  %cond44 = phi i8* [ %47, %cond.true36 ], [ %call42, %cond.false41 ]
  store i8 %conv31, i8* %cond44, align 1
  br label %if.end46

if.else45:                                        ; preds = %land.lhs.true23, %lor.lhs.false19
  store i1 false, i1* %retval, align 1
  br label %return

if.end46:                                         ; preds = %cond.end43
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then16
  br label %do.body

do.body:                                          ; preds = %if.end47
  br label %do.body48

do.body48:                                        ; preds = %do.body
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %50, 4194304
  %tobool51 = icmp ne i32 %and50, 0
  br i1 %tobool51, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %do.body48
  br i1 true, label %if.then54, label %if.end56

cond.false53:                                     ; preds = %do.body48
  br i1 false, label %if.then54, label %if.end56

if.then54:                                        ; preds = %cond.false53, %cond.true52
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %call55 = call i32 @Perl_mg_set(%struct.sv* %51)
  br label %if.end56

if.end56:                                         ; preds = %if.then54, %cond.false53, %cond.true52
  br label %do.end

do.end:                                           ; preds = %if.end56
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %53, align 8
  br label %do.end57

do.end57:                                         ; preds = %do.end
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %do.end57, %if.else45, %if.then
  %54 = load i1, i1* %retval, align 1
  ret i1 %54
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_not() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 11, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 0
  %5 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %5, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %tobool1 = icmp ne %struct.sv* %7, null
  br i1 %tobool1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %do.end
  br i1 true, label %land.rhs, label %land.end67

cond.false3:                                      ; preds = %do.end
  br i1 false, label %land.rhs, label %land.end67

land.rhs:                                         ; preds = %cond.false3, %cond.true2
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %10, 65280
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.false14, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.rhs
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %13, 255
  %cmp = icmp eq i32 %and8, 8
  br i1 %cmp, label %cond.false14, label %lor.lhs.false9

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %14 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %15 = load %struct.sv*, %struct.sv** %14, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %16, 16826623
  %cmp12 = icmp eq i32 %and11, 16777226
  br i1 %cmp12, label %cond.false14, label %cond.true13

cond.true13:                                      ; preds = %lor.lhs.false9
  br label %cond.end64

cond.false14:                                     ; preds = %lor.lhs.false9, %lor.lhs.false, %land.rhs
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags15 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %19, 1024
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %cond.true18, label %cond.false30

cond.true18:                                      ; preds = %cond.false14
  %20 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpv*
  %tobool19 = icmp ne %struct.xpv* %23, null
  br i1 %tobool19, label %land.rhs20, label %land.end29

land.rhs20:                                       ; preds = %cond.true18
  %24 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %sv_any21 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any21, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 2
  %28 = load i64, i64* %xpv_cur, align 8
  %cmp22 = icmp ugt i64 %28, 1
  br i1 %cmp22, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs20
  %29 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any23, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_cur24 = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 2
  %33 = load i64, i64* %xpv_cur24, align 8
  %tobool25 = icmp ne i64 %33, 0
  br i1 %tobool25, label %land.rhs26, label %land.end

land.rhs26:                                       ; preds = %lor.rhs
  %34 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %36 = load i8*, i8** %svu_pv, align 8
  %37 = load i8, i8* %36, align 1
  %conv = sext i8 %37 to i32
  %cmp27 = icmp ne i32 %conv, 48
  br label %land.end

land.end:                                         ; preds = %land.rhs26, %lor.rhs
  %38 = phi i1 [ false, %lor.rhs ], [ %cmp27, %land.rhs26 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs20
  %39 = phi i1 [ true, %land.rhs20 ], [ %38, %land.end ]
  br label %land.end29

land.end29:                                       ; preds = %lor.end, %cond.true18
  %40 = phi i1 [ false, %cond.true18 ], [ %39, %lor.end ]
  %land.ext = zext i1 %40 to i32
  br label %cond.end62

cond.false30:                                     ; preds = %cond.false14
  %41 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %43, 768
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %cond.true34, label %cond.false59

cond.true34:                                      ; preds = %cond.false30
  %44 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %46, 256
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %land.lhs.true38, label %lor.rhs42

land.lhs.true38:                                  ; preds = %cond.true34
  %47 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %48 = load %struct.sv*, %struct.sv** %47, align 8
  %sv_any39 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 0
  %49 = load i8*, i8** %sv_any39, align 8
  %50 = bitcast i8* %49 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %50, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %51 = load i64, i64* %xivu_iv, align 8
  %cmp40 = icmp ne i64 %51, 0
  br i1 %cmp40, label %lor.end58, label %lor.rhs42

lor.rhs42:                                        ; preds = %land.lhs.true38, %cond.true34
  %52 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %54, 512
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %land.rhs46, label %land.end56

land.rhs46:                                       ; preds = %lor.rhs42
  %55 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  %sv_any47 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any47, align 8
  %58 = bitcast i8* %57 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %58, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %59 = load double, double* %xnv_nv, align 8
  %cmp48 = fcmp uno double %59, %59
  br i1 %cmp48, label %lor.end55, label %lor.rhs49

lor.rhs49:                                        ; preds = %land.rhs46
  %60 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  %sv_any50 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any50, align 8
  %63 = bitcast i8* %62 to %struct.xpvnv*
  %xnv_u51 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %63, i32 0, i32 5
  %xnv_nv52 = bitcast %union._xnvu* %xnv_u51 to double*
  %64 = load double, double* %xnv_nv52, align 8
  %cmp53 = fcmp une double %64, 0.000000e+00
  br label %lor.end55

lor.end55:                                        ; preds = %lor.rhs49, %land.rhs46
  %65 = phi i1 [ true, %land.rhs46 ], [ %cmp53, %lor.rhs49 ]
  br label %land.end56

land.end56:                                       ; preds = %lor.end55, %lor.rhs42
  %66 = phi i1 [ false, %lor.rhs42 ], [ %65, %lor.end55 ]
  br label %lor.end58

lor.end58:                                        ; preds = %land.end56, %land.lhs.true38
  %67 = phi i1 [ true, %land.lhs.true38 ], [ %66, %land.end56 ]
  %lor.ext = zext i1 %67 to i32
  br label %cond.end

cond.false59:                                     ; preds = %cond.false30
  %68 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %call60 = call zeroext i1 @Perl_sv_2bool_flags(%struct.sv* %69, i32 0)
  %conv61 = zext i1 %call60 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false59, %lor.end58
  %cond = phi i32 [ %lor.ext, %lor.end58 ], [ %conv61, %cond.false59 ]
  br label %cond.end62

cond.end62:                                       ; preds = %cond.end, %land.end29
  %cond63 = phi i32 [ %land.ext, %land.end29 ], [ %cond, %cond.end ]
  br label %cond.end64

cond.end64:                                       ; preds = %cond.end62, %cond.true13
  %cond65 = phi i32 [ 0, %cond.true13 ], [ %cond63, %cond.end62 ]
  %tobool66 = icmp ne i32 %cond65, 0
  br label %land.end67

land.end67:                                       ; preds = %cond.end64, %cond.false3, %cond.true2
  %70 = phi i1 [ false, %cond.false3 ], [ false, %cond.true2 ], [ %tobool66, %cond.end64 ]
  %lnot = xor i1 %70, true
  %71 = zext i1 %lnot to i64
  %cond69 = select i1 %lnot, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %72 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv* %cond69, %struct.sv** %72, align 8
  %73 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next70 = getelementptr inbounds %struct.op, %struct.op* %73, i32 0, i32 0
  %74 = load %struct.op*, %struct.op** %op_next70, align 8
  store %struct.op* %74, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %land.end67, %if.then
  %75 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %75
}

declare dso_local zeroext i1 @Perl_sv_2bool_flags(%struct.sv*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_complement() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 60, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %13, 12288
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %if.then4, label %if.else53

if.then4:                                         ; preds = %do.end
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 6
  %15 = load i8, i8* %op_private, align 1
  %conv = zext i8 %15 to i32
  %and5 = and i32 %conv, 1
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then4
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %17, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %if.then7
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 0
  %19 = load i8*, i8** %sv_any, align 8
  %20 = bitcast i8* %19 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %20, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %21 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false12:                                     ; preds = %if.then7
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %22, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false12, %cond.true11
  %cond = phi i64 [ %21, %cond.true11 ], [ %call13, %cond.false12 ]
  %neg = xor i64 %cond, -1
  store i64 %neg, i64* %i, align 8
  br label %do.body14

do.body14:                                        ; preds = %cond.end
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %24 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %23, i64 %24)
  br label %do.body15

do.body15:                                        ; preds = %do.body14
  br label %do.body16

do.body16:                                        ; preds = %do.body15
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %26, 4194304
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %do.body16
  br i1 true, label %if.then22, label %if.end24

cond.false21:                                     ; preds = %do.body16
  br i1 false, label %if.then22, label %if.end24

if.then22:                                        ; preds = %cond.false21, %cond.true20
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %call23 = call i32 @Perl_mg_set(%struct.sv* %27)
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %cond.false21, %cond.true20
  br label %do.end25

do.end25:                                         ; preds = %if.end24
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %28, %struct.sv** %29, align 8
  br label %do.end26

do.end26:                                         ; preds = %do.end25
  br label %do.end27

do.end27:                                         ; preds = %do.end26
  br label %if.end52

if.else:                                          ; preds = %if.then4
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %31, 256
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %cond.true31, label %cond.false33

cond.true31:                                      ; preds = %if.else
  %32 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any32 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any32, align 8
  %34 = bitcast i8* %33 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %34, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %35 = load i64, i64* %xivu_uv, align 8
  br label %cond.end35

cond.false33:                                     ; preds = %if.else
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %call34 = call i64 @Perl_sv_2uv_flags(%struct.sv* %36, i32 0)
  br label %cond.end35

cond.end35:                                       ; preds = %cond.false33, %cond.true31
  %cond36 = phi i64 [ %35, %cond.true31 ], [ %call34, %cond.false33 ]
  %neg37 = xor i64 %cond36, -1
  store i64 %neg37, i64* %u, align 8
  br label %do.body38

do.body38:                                        ; preds = %cond.end35
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load i64, i64* %u, align 8
  call void @Perl_sv_setuv(%struct.sv* %37, i64 %38)
  br label %do.body39

do.body39:                                        ; preds = %do.body38
  br label %do.body40

do.body40:                                        ; preds = %do.body39
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags41 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags41, align 4
  %and42 = and i32 %40, 4194304
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %cond.true44, label %cond.false45

cond.true44:                                      ; preds = %do.body40
  br i1 true, label %if.then46, label %if.end48

cond.false45:                                     ; preds = %do.body40
  br i1 false, label %if.then46, label %if.end48

if.then46:                                        ; preds = %cond.false45, %cond.true44
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %call47 = call i32 @Perl_mg_set(%struct.sv* %41)
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %cond.false45, %cond.true44
  br label %do.end49

do.end49:                                         ; preds = %if.end48
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %42, %struct.sv** %43, align 8
  br label %do.end50

do.end50:                                         ; preds = %do.end49
  br label %do.end51

do.end51:                                         ; preds = %do.end50
  br label %if.end52

if.end52:                                         ; preds = %do.end51, %do.end27
  br label %if.end66

if.else53:                                        ; preds = %do.end
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  %45 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @S_scomplement(%struct.sv* %44, %struct.sv* %45)
  br label %do.body54

do.body54:                                        ; preds = %if.else53
  br label %do.body55

do.body55:                                        ; preds = %do.body54
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %47, 4194304
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %do.body55
  br i1 true, label %if.then61, label %if.end63

cond.false60:                                     ; preds = %do.body55
  br i1 false, label %if.then61, label %if.end63

if.then61:                                        ; preds = %cond.false60, %cond.true59
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %call62 = call i32 @Perl_mg_set(%struct.sv* %48)
  br label %if.end63

if.end63:                                         ; preds = %if.then61, %cond.false60, %cond.true59
  br label %do.end64

do.end64:                                         ; preds = %if.end63
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %49, %struct.sv** %50, align 8
  br label %do.end65

do.end65:                                         ; preds = %do.end64
  br label %if.end66

if.end66:                                         ; preds = %do.end65, %if.end52
  %51 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next67 = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 0
  %52 = load %struct.op*, %struct.op** %op_next67, align 8
  store %struct.op* %52, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end66, %if.then
  %53 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %53
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_scomplement(%struct.sv* %targ, %struct.sv* %sv) #0 {
entry:
  %targ.addr = alloca %struct.sv*, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  %anum = alloca i32, align 4
  %len = alloca i64, align 8
  %targlen = alloca i64, align 8
  %l = alloca i64, align 8
  %nchar = alloca i64, align 8
  %nwide = alloca i64, align 8
  %send = alloca i8*, align 8
  %origtmps = alloca i8*, align 8
  %utf8flags = alloca i64, align 8
  %c = alloca i64, align 8
  %result = alloca i8*, align 8
  %p = alloca i8*, align 8
  %c65 = alloca i64, align 8
  %result75 = alloca i8*, align 8
  %p76 = alloca i8*, align 8
  %c84 = alloca i8, align 1
  %tmpl = alloca i64*, align 8
  store %struct.sv* %targ, %struct.sv** %targ.addr, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  call void @Perl_sv_copypv_flags(%struct.sv* %0, %struct.sv* %1, i32 0)
  %2 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 0
  %5 = load i8*, i8** %sv_any, align 8
  %6 = bitcast i8* %5 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %6, i32 0, i32 2
  %7 = load i64, i64* %xpv_cur, align 8
  store i64 %7, i64* %len, align 8
  %8 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %9 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %10 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %10, i64* %len, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %9, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps, align 8
  %11 = load i64, i64* %len, align 8
  %conv = trunc i64 %11 to i32
  store i32 %conv, i32* %anum, align 4
  %12 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %13, 536870912
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then, label %if.end98

if.then:                                          ; preds = %cond.end
  store i64 0, i64* %targlen, align 8
  store i64 0, i64* %nchar, align 8
  store i64 0, i64* %nwide, align 8
  %14 = load i8*, i8** %tmps, align 8
  %15 = load i64, i64* %len, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 %15
  store i8* %add.ptr, i8** %send, align 8
  %16 = load i8*, i8** %tmps, align 8
  store i8* %16, i8** %origtmps, align 8
  store i64 1, i64* %utf8flags, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %if.then
  %17 = load i8*, i8** %tmps, align 8
  %18 = load i8*, i8** %send, align 8
  %cmp3 = icmp ult i8* %17, %18
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load i8*, i8** %tmps, align 8
  %20 = load i8*, i8** %send, align 8
  %21 = load i8*, i8** %tmps, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %21 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call5 = call i64 @Perl_utf8n_to_uvchr(i8* %19, i64 %sub.ptr.sub, i64* %l, i32 1)
  store i64 %call5, i64* %c, align 8
  %22 = load i64, i64* %l, align 8
  %23 = load i8*, i8** %tmps, align 8
  %add.ptr6 = getelementptr inbounds i8, i8* %23, i64 %22
  store i8* %add.ptr6, i8** %tmps, align 8
  %24 = load i64, i64* %c, align 8
  %neg = xor i64 %24, -1
  %cmp7 = icmp ult i64 %neg, 128
  br i1 %cmp7, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %while.body
  br label %cond.end50

cond.false10:                                     ; preds = %while.body
  %25 = load i64, i64* %c, align 8
  %neg11 = xor i64 %25, -1
  %cmp12 = icmp ult i64 %neg11, 2048
  br i1 %cmp12, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %cond.false10
  br label %cond.end48

cond.false15:                                     ; preds = %cond.false10
  %26 = load i64, i64* %c, align 8
  %neg16 = xor i64 %26, -1
  %cmp17 = icmp ult i64 %neg16, 65536
  br i1 %cmp17, label %cond.true19, label %cond.false20

cond.true19:                                      ; preds = %cond.false15
  br label %cond.end46

cond.false20:                                     ; preds = %cond.false15
  %27 = load i64, i64* %c, align 8
  %neg21 = xor i64 %27, -1
  %cmp22 = icmp ult i64 %neg21, 2097152
  br i1 %cmp22, label %cond.true24, label %cond.false25

cond.true24:                                      ; preds = %cond.false20
  br label %cond.end44

cond.false25:                                     ; preds = %cond.false20
  %28 = load i64, i64* %c, align 8
  %neg26 = xor i64 %28, -1
  %cmp27 = icmp ult i64 %neg26, 67108864
  br i1 %cmp27, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %cond.false25
  br label %cond.end42

cond.false30:                                     ; preds = %cond.false25
  %29 = load i64, i64* %c, align 8
  %neg31 = xor i64 %29, -1
  %cmp32 = icmp ult i64 %neg31, 2147483648
  br i1 %cmp32, label %cond.true34, label %cond.false35

cond.true34:                                      ; preds = %cond.false30
  br label %cond.end40

cond.false35:                                     ; preds = %cond.false30
  %30 = load i64, i64* %c, align 8
  %neg36 = xor i64 %30, -1
  %cmp37 = icmp ult i64 %neg36, 68719476736
  %31 = zext i1 %cmp37 to i64
  %cond39 = select i1 %cmp37, i32 7, i32 13
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false35, %cond.true34
  %cond41 = phi i32 [ 6, %cond.true34 ], [ %cond39, %cond.false35 ]
  br label %cond.end42

cond.end42:                                       ; preds = %cond.end40, %cond.true29
  %cond43 = phi i32 [ 5, %cond.true29 ], [ %cond41, %cond.end40 ]
  br label %cond.end44

cond.end44:                                       ; preds = %cond.end42, %cond.true24
  %cond45 = phi i32 [ 4, %cond.true24 ], [ %cond43, %cond.end42 ]
  br label %cond.end46

cond.end46:                                       ; preds = %cond.end44, %cond.true19
  %cond47 = phi i32 [ 3, %cond.true19 ], [ %cond45, %cond.end44 ]
  br label %cond.end48

cond.end48:                                       ; preds = %cond.end46, %cond.true14
  %cond49 = phi i32 [ 2, %cond.true14 ], [ %cond47, %cond.end46 ]
  br label %cond.end50

cond.end50:                                       ; preds = %cond.end48, %cond.true9
  %cond51 = phi i32 [ 1, %cond.true9 ], [ %cond49, %cond.end48 ]
  %conv52 = sext i32 %cond51 to i64
  %32 = load i64, i64* %targlen, align 8
  %add = add i64 %32, %conv52
  store i64 %add, i64* %targlen, align 8
  %33 = load i64, i64* %nchar, align 8
  %inc = add i64 %33, 1
  store i64 %inc, i64* %nchar, align 8
  %34 = load i64, i64* %c, align 8
  %cmp53 = icmp ugt i64 %34, 255
  br i1 %cmp53, label %if.then55, label %if.end

if.then55:                                        ; preds = %cond.end50
  %35 = load i64, i64* %nwide, align 8
  %inc56 = add i64 %35, 1
  store i64 %inc56, i64* %nwide, align 8
  br label %if.end

if.end:                                           ; preds = %if.then55, %cond.end50
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %36 = load i8*, i8** %origtmps, align 8
  store i8* %36, i8** %tmps, align 8
  %37 = load i64, i64* %nwide, align 8
  %tobool57 = icmp ne i64 %37, 0
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %while.end
  %38 = load i64, i64* %targlen, align 8
  %add59 = add i64 %38, 1
  %mul = mul i64 %add59, 1
  %call60 = call i8* @Perl_safesysmalloc(i64 %mul)
  store i8* %call60, i8** %result, align 8
  %39 = load i8*, i8** %result, align 8
  store i8* %39, i8** %p, align 8
  br label %while.cond61

while.cond61:                                     ; preds = %while.body64, %if.then58
  %40 = load i8*, i8** %tmps, align 8
  %41 = load i8*, i8** %send, align 8
  %cmp62 = icmp ult i8* %40, %41
  br i1 %cmp62, label %while.body64, label %while.end73

while.body64:                                     ; preds = %while.cond61
  %42 = load i8*, i8** %tmps, align 8
  %43 = load i8*, i8** %send, align 8
  %44 = load i8*, i8** %tmps, align 8
  %sub.ptr.lhs.cast66 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %44 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %call69 = call i64 @Perl_utf8n_to_uvchr(i8* %42, i64 %sub.ptr.sub68, i64* %l, i32 1)
  store i64 %call69, i64* %c65, align 8
  %45 = load i64, i64* %l, align 8
  %46 = load i8*, i8** %tmps, align 8
  %add.ptr70 = getelementptr inbounds i8, i8* %46, i64 %45
  store i8* %add.ptr70, i8** %tmps, align 8
  %47 = load i8*, i8** %p, align 8
  %48 = load i64, i64* %c65, align 8
  %neg71 = xor i64 %48, -1
  %call72 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %47, i64 %neg71, i64 0)
  store i8* %call72, i8** %p, align 8
  br label %while.cond61

while.end73:                                      ; preds = %while.cond61
  %49 = load i8*, i8** %p, align 8
  store i8 0, i8* %49, align 1
  %50 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %51 = load i8*, i8** %result, align 8
  %52 = load i64, i64* %targlen, align 8
  call void @Perl_sv_usepvn_flags(%struct.sv* %50, i8* %51, i64 %52, i32 256)
  %53 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags74, align 4
  %or = or i32 %54, 536870912
  store i32 %or, i32* %sv_flags74, align 4
  br label %if.end97

if.else:                                          ; preds = %while.end
  %55 = load i64, i64* %nchar, align 8
  %add77 = add i64 %55, 1
  %mul78 = mul i64 %add77, 1
  %call79 = call i8* @Perl_safesysmalloc(i64 %mul78)
  store i8* %call79, i8** %result75, align 8
  %56 = load i8*, i8** %result75, align 8
  store i8* %56, i8** %p76, align 8
  br label %while.cond80

while.cond80:                                     ; preds = %while.body83, %if.else
  %57 = load i8*, i8** %tmps, align 8
  %58 = load i8*, i8** %send, align 8
  %cmp81 = icmp ult i8* %57, %58
  br i1 %cmp81, label %while.body83, label %while.end94

while.body83:                                     ; preds = %while.cond80
  %59 = load i8*, i8** %tmps, align 8
  %60 = load i8*, i8** %send, align 8
  %61 = load i8*, i8** %tmps, align 8
  %sub.ptr.lhs.cast85 = ptrtoint i8* %60 to i64
  %sub.ptr.rhs.cast86 = ptrtoint i8* %61 to i64
  %sub.ptr.sub87 = sub i64 %sub.ptr.lhs.cast85, %sub.ptr.rhs.cast86
  %call88 = call i64 @Perl_utf8n_to_uvchr(i8* %59, i64 %sub.ptr.sub87, i64* %l, i32 1)
  %conv89 = trunc i64 %call88 to i8
  store i8 %conv89, i8* %c84, align 1
  %62 = load i64, i64* %l, align 8
  %63 = load i8*, i8** %tmps, align 8
  %add.ptr90 = getelementptr inbounds i8, i8* %63, i64 %62
  store i8* %add.ptr90, i8** %tmps, align 8
  %64 = load i8, i8* %c84, align 1
  %conv91 = zext i8 %64 to i32
  %neg92 = xor i32 %conv91, -1
  %conv93 = trunc i32 %neg92 to i8
  %65 = load i8*, i8** %p76, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %65, i32 1
  store i8* %incdec.ptr, i8** %p76, align 8
  store i8 %conv93, i8* %65, align 1
  br label %while.cond80

while.end94:                                      ; preds = %while.cond80
  %66 = load i8*, i8** %p76, align 8
  store i8 0, i8* %66, align 1
  %67 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %68 = load i8*, i8** %result75, align 8
  %69 = load i64, i64* %nchar, align 8
  call void @Perl_sv_usepvn_flags(%struct.sv* %67, i8* %68, i64 %69, i32 256)
  %70 = load %struct.sv*, %struct.sv** %targ.addr, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %71, -536870913
  store i32 %and96, i32* %sv_flags95, align 4
  br label %if.end97

if.end97:                                         ; preds = %while.end94, %while.end73
  br label %for.end123

if.end98:                                         ; preds = %cond.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end98
  %72 = load i32, i32* %anum, align 4
  %tobool99 = icmp ne i32 %72, 0
  br i1 %tobool99, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %73 = load i8*, i8** %tmps, align 8
  %74 = ptrtoint i8* %73 to i64
  %rem = urem i64 %74, 8
  %tobool100 = icmp ne i64 %rem, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %75 = phi i1 [ false, %for.cond ], [ %tobool100, %land.rhs ]
  br i1 %75, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %76 = load i8*, i8** %tmps, align 8
  %77 = load i8, i8* %76, align 1
  %conv101 = zext i8 %77 to i32
  %neg102 = xor i32 %conv101, -1
  %conv103 = trunc i32 %neg102 to i8
  %78 = load i8*, i8** %tmps, align 8
  store i8 %conv103, i8* %78, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %79 = load i32, i32* %anum, align 4
  %dec = add nsw i32 %79, -1
  store i32 %dec, i32* %anum, align 4
  %80 = load i8*, i8** %tmps, align 8
  %incdec.ptr104 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %incdec.ptr104, i8** %tmps, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %81 = load i8*, i8** %tmps, align 8
  %82 = bitcast i8* %81 to i64*
  store i64* %82, i64** %tmpl, align 8
  br label %for.cond105

for.cond105:                                      ; preds = %for.inc110, %for.end
  %83 = load i32, i32* %anum, align 4
  %cmp106 = icmp sge i32 %83, 8
  br i1 %cmp106, label %for.body108, label %for.end112

for.body108:                                      ; preds = %for.cond105
  %84 = load i64*, i64** %tmpl, align 8
  %85 = load i64, i64* %84, align 8
  %neg109 = xor i64 %85, -1
  %86 = load i64*, i64** %tmpl, align 8
  store i64 %neg109, i64* %86, align 8
  br label %for.inc110

for.inc110:                                       ; preds = %for.body108
  %87 = load i32, i32* %anum, align 4
  %sub = sub nsw i32 %87, 8
  store i32 %sub, i32* %anum, align 4
  %88 = load i64*, i64** %tmpl, align 8
  %incdec.ptr111 = getelementptr inbounds i64, i64* %88, i32 1
  store i64* %incdec.ptr111, i64** %tmpl, align 8
  br label %for.cond105

for.end112:                                       ; preds = %for.cond105
  %89 = load i64*, i64** %tmpl, align 8
  %90 = bitcast i64* %89 to i8*
  store i8* %90, i8** %tmps, align 8
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc120, %for.end112
  %91 = load i32, i32* %anum, align 4
  %cmp114 = icmp sgt i32 %91, 0
  br i1 %cmp114, label %for.body116, label %for.end123

for.body116:                                      ; preds = %for.cond113
  %92 = load i8*, i8** %tmps, align 8
  %93 = load i8, i8* %92, align 1
  %conv117 = zext i8 %93 to i32
  %neg118 = xor i32 %conv117, -1
  %conv119 = trunc i32 %neg118 to i8
  %94 = load i8*, i8** %tmps, align 8
  store i8 %conv119, i8* %94, align 1
  br label %for.inc120

for.inc120:                                       ; preds = %for.body116
  %95 = load i32, i32* %anum, align 4
  %dec121 = add nsw i32 %95, -1
  store i32 %dec121, i32* %anum, align 4
  %96 = load i8*, i8** %tmps, align 8
  %incdec.ptr122 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %incdec.ptr122, i8** %tmps, align 8
  br label %for.cond113

for.end123:                                       ; preds = %if.end97, %for.cond113
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ncomplement() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %u = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 60, i32 144)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 0
  %5 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %5, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv = zext i8 %13 to i32
  %and1 = and i32 %conv, 1
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %if.then3, label %if.else

if.then3:                                         ; preds = %do.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %15, 256
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %if.then3
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false8:                                      ; preds = %if.then3
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call9 = call i64 @Perl_sv_2iv_flags(%struct.sv* %20, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false8, %cond.true7
  %cond = phi i64 [ %19, %cond.true7 ], [ %call9, %cond.false8 ]
  %neg = xor i64 %cond, -1
  store i64 %neg, i64* %i, align 8
  br label %do.body10

do.body10:                                        ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %21, i64 %22)
  br label %do.body11

do.body11:                                        ; preds = %do.body10
  br label %do.body12

do.body12:                                        ; preds = %do.body11
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 4194304
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true16, label %cond.false17

cond.true16:                                      ; preds = %do.body12
  br i1 true, label %if.then18, label %if.end20

cond.false17:                                     ; preds = %do.body12
  br i1 false, label %if.then18, label %if.end20

if.then18:                                        ; preds = %cond.false17, %cond.true16
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %call19 = call i32 @Perl_mg_set(%struct.sv* %25)
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %cond.false17, %cond.true16
  br label %do.end21

do.end21:                                         ; preds = %if.end20
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %26, %struct.sv** %27, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.end21
  br label %do.end23

do.end23:                                         ; preds = %do.end22
  br label %if.end48

if.else:                                          ; preds = %do.end
  %28 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %29, 256
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %cond.true27, label %cond.false29

cond.true27:                                      ; preds = %if.else
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any28 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any28, align 8
  %32 = bitcast i8* %31 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %32, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %33 = load i64, i64* %xivu_uv, align 8
  br label %cond.end31

cond.false29:                                     ; preds = %if.else
  %34 = load %struct.sv*, %struct.sv** %sv, align 8
  %call30 = call i64 @Perl_sv_2uv_flags(%struct.sv* %34, i32 0)
  br label %cond.end31

cond.end31:                                       ; preds = %cond.false29, %cond.true27
  %cond32 = phi i64 [ %33, %cond.true27 ], [ %call30, %cond.false29 ]
  %neg33 = xor i64 %cond32, -1
  store i64 %neg33, i64* %u, align 8
  br label %do.body34

do.body34:                                        ; preds = %cond.end31
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %36 = load i64, i64* %u, align 8
  call void @Perl_sv_setuv(%struct.sv* %35, i64 %36)
  br label %do.body35

do.body35:                                        ; preds = %do.body34
  br label %do.body36

do.body36:                                        ; preds = %do.body35
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags37 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags37, align 4
  %and38 = and i32 %38, 4194304
  %tobool39 = icmp ne i32 %and38, 0
  br i1 %tobool39, label %cond.true40, label %cond.false41

cond.true40:                                      ; preds = %do.body36
  br i1 true, label %if.then42, label %if.end44

cond.false41:                                     ; preds = %do.body36
  br i1 false, label %if.then42, label %if.end44

if.then42:                                        ; preds = %cond.false41, %cond.true40
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %call43 = call i32 @Perl_mg_set(%struct.sv* %39)
  br label %if.end44

if.end44:                                         ; preds = %if.then42, %cond.false41, %cond.true40
  br label %do.end45

do.end45:                                         ; preds = %if.end44
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %40, %struct.sv** %41, align 8
  br label %do.end46

do.end46:                                         ; preds = %do.end45
  br label %do.end47

do.end47:                                         ; preds = %do.end46
  br label %if.end48

if.end48:                                         ; preds = %do.end47, %do.end23
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next49 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 0
  %43 = load %struct.op*, %struct.op** %op_next49, align 8
  store %struct.op* %43, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end48, %if.then
  %44 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_scomplement() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %and = and i32 %3, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 61, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 0
  %5 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %5, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  %12 = load %struct.sv*, %struct.sv** %targ, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @S_scomplement(%struct.sv* %12, %struct.sv* %13)
  br label %do.body1

do.body1:                                         ; preds = %do.end
  br label %do.body2

do.body2:                                         ; preds = %do.body1
  %14 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %15, 4194304
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %do.body2
  br i1 true, label %if.then8, label %if.end10

cond.false7:                                      ; preds = %do.body2
  br i1 false, label %if.then8, label %if.end10

if.then8:                                         ; preds = %cond.false7, %cond.true6
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %call9 = call i32 @Perl_mg_set(%struct.sv* %16)
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %cond.false7, %cond.true6
  br label %do.end11

do.end11:                                         ; preds = %if.end10
  %17 = load %struct.sv*, %struct.sv** %targ, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %17, %struct.sv** %18, align 8
  br label %do.end12

do.end12:                                         ; preds = %do.end11
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next13 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 0
  %20 = load %struct.op*, %struct.op** %op_next13, align 8
  store %struct.op* %20, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end12, %if.then
  %21 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_multiply() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 34, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %19, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.end
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %24 = load i64, i64* %xivu_iv, align 8
  br label %cond.end14

cond.false12:                                     ; preds = %do.end
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %26, i32 0)
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %24, %cond.true11 ], [ %call13, %cond.false12 ]
  store i64 %cond15, i64* %right, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %27, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %30, 256
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.true19, label %cond.false23

cond.true19:                                      ; preds = %cond.end14
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any20, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u21 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv22 = bitcast %union._xivu* %xiv_u21 to i64*
  %35 = load i64, i64* %xivu_iv22, align 8
  br label %cond.end25

cond.false23:                                     ; preds = %cond.end14
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  %call24 = call i64 @Perl_sv_2iv_flags(%struct.sv* %37, i32 0)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false23, %cond.true19
  %cond26 = phi i64 [ %35, %cond.true19 ], [ %call24, %cond.false23 ]
  store i64 %cond26, i64* %left, align 8
  br label %do.body27

do.body27:                                        ; preds = %cond.end25
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %39 = load i64, i64* %left, align 8
  %40 = load i64, i64* %right, align 8
  %mul = mul nsw i64 %39, %40
  call void @Perl_sv_setiv(%struct.sv* %38, i64 %mul)
  br label %do.body28

do.body28:                                        ; preds = %do.body27
  br label %do.body29

do.body29:                                        ; preds = %do.body28
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %42, 4194304
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %do.body29
  br i1 true, label %if.then35, label %if.end37

cond.false34:                                     ; preds = %do.body29
  br i1 false, label %if.then35, label %if.end37

if.then35:                                        ; preds = %cond.false34, %cond.true33
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %call36 = call i32 @Perl_mg_set(%struct.sv* %43)
  br label %if.end37

if.end37:                                         ; preds = %if.then35, %cond.false34, %cond.true33
  br label %do.end38

do.end38:                                         ; preds = %if.end37
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %44, %struct.sv** %45, align 8
  br label %do.end39

do.end39:                                         ; preds = %do.end38
  br label %do.end40

do.end40:                                         ; preds = %do.end39
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %46, %struct.sv*** @PL_stack_sp, align 8
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next41 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 0
  %48 = load %struct.op*, %struct.op** %op_next41, align 8
  store %struct.op* %48, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end40, %if.then
  %49 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_divide() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %num = alloca i64, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %value = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 36, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  store %struct.sv* %18, %struct.sv** %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %left, align 8
  %21 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.end
  %23 = load %struct.sv*, %struct.sv** %right, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 0
  %24 = load i8*, i8** %sv_any, align 8
  %25 = bitcast i8* %24 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %25, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %26 = load i64, i64* %xivu_iv, align 8
  br label %cond.end14

cond.false12:                                     ; preds = %do.end
  %27 = load %struct.sv*, %struct.sv** %right, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %27, i32 0)
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %26, %cond.true11 ], [ %call13, %cond.false12 ]
  store i64 %cond15, i64* %value, align 8
  %28 = load i64, i64* %value, align 8
  %cmp = icmp eq i64 %28, 0
  br i1 %cmp, label %if.then17, label %if.end19

if.then17:                                        ; preds = %cond.end14
  %call18 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.26, i64 0, i64 0))
  store %struct.op* %call18, %struct.op** %retval, align 8
  br label %return

if.end19:                                         ; preds = %cond.end14
  %29 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %30, 256
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false27

cond.true23:                                      ; preds = %if.end19
  %31 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 0
  %32 = load i8*, i8** %sv_any24, align 8
  %33 = bitcast i8* %32 to %struct.xpviv*
  %xiv_u25 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %33, i32 0, i32 4
  %xivu_iv26 = bitcast %union._xivu* %xiv_u25 to i64*
  %34 = load i64, i64* %xivu_iv26, align 8
  br label %cond.end29

cond.false27:                                     ; preds = %if.end19
  %35 = load %struct.sv*, %struct.sv** %left, align 8
  %call28 = call i64 @Perl_sv_2iv_flags(%struct.sv* %35, i32 0)
  br label %cond.end29

cond.end29:                                       ; preds = %cond.false27, %cond.true23
  %cond30 = phi i64 [ %34, %cond.true23 ], [ %call28, %cond.false27 ]
  store i64 %cond30, i64* %num, align 8
  %36 = load i64, i64* %value, align 8
  %cmp31 = icmp eq i64 %36, -1
  br i1 %cmp31, label %if.then33, label %if.else

if.then33:                                        ; preds = %cond.end29
  %37 = load i64, i64* %num, align 8
  %sub = sub nsw i64 0, %37
  store i64 %sub, i64* %value, align 8
  br label %if.end34

if.else:                                          ; preds = %cond.end29
  %38 = load i64, i64* %num, align 8
  %39 = load i64, i64* %value, align 8
  %div = sdiv i64 %38, %39
  store i64 %div, i64* %value, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else, %if.then33
  br label %do.body35

do.body35:                                        ; preds = %if.end34
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %41 = load i64, i64* %value, align 8
  call void @Perl_sv_setiv(%struct.sv* %40, i64 %41)
  br label %do.body36

do.body36:                                        ; preds = %do.body35
  br label %do.body37

do.body37:                                        ; preds = %do.body36
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %43, 4194304
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body37
  br i1 true, label %if.then43, label %if.end45

cond.false42:                                     ; preds = %do.body37
  br i1 false, label %if.then43, label %if.end45

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  %call44 = call i32 @Perl_mg_set(%struct.sv* %44)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end46

do.end46:                                         ; preds = %if.end45
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %45, %struct.sv** %46, align 8
  br label %do.end47

do.end47:                                         ; preds = %do.end46
  br label %do.end48

do.end48:                                         ; preds = %do.end47
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %47, %struct.sv*** @PL_stack_sp, align 8
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next49 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next49, align 8
  store %struct.op* %49, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end48, %if.then17, %if.then
  %50 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_modulo() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 38, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %19, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.end
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %24 = load i64, i64* %xivu_iv, align 8
  br label %cond.end14

cond.false12:                                     ; preds = %do.end
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %call13 = call i64 @Perl_sv_2iv_flags(%struct.sv* %26, i32 0)
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i64 [ %24, %cond.true11 ], [ %call13, %cond.false12 ]
  store i64 %cond15, i64* %right, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %27, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %30, 256
  %tobool18 = icmp ne i32 %and17, 0
  br i1 %tobool18, label %cond.true19, label %cond.false23

cond.true19:                                      ; preds = %cond.end14
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %32 = load %struct.sv*, %struct.sv** %31, align 8
  %sv_any20 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any20, align 8
  %34 = bitcast i8* %33 to %struct.xpviv*
  %xiv_u21 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %34, i32 0, i32 4
  %xivu_iv22 = bitcast %union._xivu* %xiv_u21 to i64*
  %35 = load i64, i64* %xivu_iv22, align 8
  br label %cond.end25

cond.false23:                                     ; preds = %cond.end14
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  %call24 = call i64 @Perl_sv_2iv_flags(%struct.sv* %37, i32 0)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false23, %cond.true19
  %cond26 = phi i64 [ %35, %cond.true19 ], [ %call24, %cond.false23 ]
  store i64 %cond26, i64* %left, align 8
  %38 = load i64, i64* %right, align 8
  %tobool27 = icmp ne i64 %38, 0
  br i1 %tobool27, label %if.end30, label %if.then28

if.then28:                                        ; preds = %cond.end25
  %call29 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.27, i64 0, i64 0))
  store %struct.op* %call29, %struct.op** %retval, align 8
  br label %return

if.end30:                                         ; preds = %cond.end25
  %39 = load i64, i64* %right, align 8
  %cmp = icmp eq i64 %39, -1
  br i1 %cmp, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.end30
  br label %do.body33

do.body33:                                        ; preds = %if.then32
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setiv(%struct.sv* %40, i64 0)
  br label %do.body34

do.body34:                                        ; preds = %do.body33
  br label %do.body35

do.body35:                                        ; preds = %do.body34
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 2
  %42 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %42, 4194304
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %do.body35
  br i1 true, label %if.then41, label %if.end43

cond.false40:                                     ; preds = %do.body35
  br i1 false, label %if.then41, label %if.end43

if.then41:                                        ; preds = %cond.false40, %cond.true39
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %call42 = call i32 @Perl_mg_set(%struct.sv* %43)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %cond.false40, %cond.true39
  br label %do.end44

do.end44:                                         ; preds = %if.end43
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %44, %struct.sv** %45, align 8
  br label %do.end45

do.end45:                                         ; preds = %do.end44
  br label %do.end46

do.end46:                                         ; preds = %do.end45
  br label %if.end61

if.else:                                          ; preds = %if.end30
  br label %do.body47

do.body47:                                        ; preds = %if.else
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load i64, i64* %left, align 8
  %48 = load i64, i64* %right, align 8
  %rem = srem i64 %47, %48
  call void @Perl_sv_setiv(%struct.sv* %46, i64 %rem)
  br label %do.body48

do.body48:                                        ; preds = %do.body47
  br label %do.body49

do.body49:                                        ; preds = %do.body48
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %50, 4194304
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true53, label %cond.false54

cond.true53:                                      ; preds = %do.body49
  br i1 true, label %if.then55, label %if.end57

cond.false54:                                     ; preds = %do.body49
  br i1 false, label %if.then55, label %if.end57

if.then55:                                        ; preds = %cond.false54, %cond.true53
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %call56 = call i32 @Perl_mg_set(%struct.sv* %51)
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %cond.false54, %cond.true53
  br label %do.end58

do.end58:                                         ; preds = %if.end57
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %52, %struct.sv** %53, align 8
  br label %do.end59

do.end59:                                         ; preds = %do.end58
  br label %do.end60

do.end60:                                         ; preds = %do.end59
  br label %if.end61

if.end61:                                         ; preds = %do.end60, %do.end46
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %54, %struct.sv*** @PL_stack_sp, align 8
  %55 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next62 = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 0
  %56 = load %struct.op*, %struct.op** %op_next62, align 8
  store %struct.op* %56, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end61, %if.then28, %if.then
  %57 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %57
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_add() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca i64, align 8
  %leftsv = alloca %struct.sv*, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 30, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i64 1
  %19 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %20, 256
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %do.end
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr13 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 1
  %22 = load %struct.sv*, %struct.sv** %add.ptr13, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any, align 8
  %24 = bitcast i8* %23 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %24, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %25 = load i64, i64* %xivu_iv, align 8
  br label %cond.end17

cond.false14:                                     ; preds = %do.end
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 1
  %27 = load %struct.sv*, %struct.sv** %add.ptr15, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %27, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false14, %cond.true12
  %cond18 = phi i64 [ %25, %cond.true12 ], [ %call16, %cond.false14 ]
  store i64 %cond18, i64* %right, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  store %struct.sv* %29, %struct.sv** %leftsv, align 8
  %30 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %31, 65280
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end17
  %32 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %33, 255
  %cmp = icmp eq i32 %and23, 8
  br i1 %cmp, label %cond.true35, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %34 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %35, 16826623
  %cmp28 = icmp eq i32 %and27, 16777226
  br i1 %cmp28, label %cond.true35, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false25
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags31 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 5
  %37 = load i8, i8* %op_flags31, align 2
  %conv32 = zext i8 %37 to i32
  %and33 = and i32 %conv32, 64
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.false47, label %cond.true35

cond.true35:                                      ; preds = %lor.lhs.false30, %lor.lhs.false25, %lor.lhs.false, %cond.end17
  %38 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %39, 256
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %cond.true35
  %40 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any40, align 8
  %42 = bitcast i8* %41 to %struct.xpviv*
  %xiv_u41 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %42, i32 0, i32 4
  %xivu_iv42 = bitcast %union._xivu* %xiv_u41 to i64*
  %43 = load i64, i64* %xivu_iv42, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %cond.true35
  %44 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %call44 = call i64 @Perl_sv_2iv_flags(%struct.sv* %44, i32 0)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true39
  %cond46 = phi i64 [ %43, %cond.true39 ], [ %call44, %cond.false43 ]
  br label %cond.end48

cond.false47:                                     ; preds = %lor.lhs.false30
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.end45
  %cond49 = phi i64 [ %cond46, %cond.end45 ], [ 0, %cond.false47 ]
  store i64 %cond49, i64* %left, align 8
  br label %do.body50

do.body50:                                        ; preds = %cond.end48
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %46 = load i64, i64* %left, align 8
  %47 = load i64, i64* %right, align 8
  %add = add nsw i64 %46, %47
  call void @Perl_sv_setiv(%struct.sv* %45, i64 %add)
  br label %do.body51

do.body51:                                        ; preds = %do.body50
  br label %do.body52

do.body52:                                        ; preds = %do.body51
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %49, 4194304
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %do.body52
  br i1 true, label %if.then58, label %if.end60

cond.false57:                                     ; preds = %do.body52
  br i1 false, label %if.then58, label %if.end60

if.then58:                                        ; preds = %cond.false57, %cond.true56
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %call59 = call i32 @Perl_mg_set(%struct.sv* %50)
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %cond.false57, %cond.true56
  br label %do.end61

do.end61:                                         ; preds = %if.end60
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %51, %struct.sv** %52, align 8
  br label %do.end62

do.end62:                                         ; preds = %do.end61
  br label %do.end63

do.end63:                                         ; preds = %do.end62
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %53, %struct.sv*** @PL_stack_sp, align 8
  %54 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next64 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 0
  %55 = load %struct.op*, %struct.op** %op_next64, align 8
  store %struct.op* %55, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end63, %if.then
  %56 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_subtract() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca i64, align 8
  %leftsv = alloca %struct.sv*, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %3, i64 -1
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 3
  %7 = load i64, i64* %op_targ, align 8
  %arrayidx1 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %7
  %8 = load %struct.sv*, %struct.sv** %arrayidx1, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ %8, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i64 -1
  %10 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %or = or i32 %11, %14
  %and3 = and i32 %or, 2099200
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false6:                                      ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false6, %cond.true5
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 32, i32 4)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 0
  %16 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %16, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false6, %cond.true5
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i64 1
  %19 = load %struct.sv*, %struct.sv** %add.ptr8, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %20, 256
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %do.end
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr13 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i64 1
  %22 = load %struct.sv*, %struct.sv** %add.ptr13, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 0
  %23 = load i8*, i8** %sv_any, align 8
  %24 = bitcast i8* %23 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %24, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %25 = load i64, i64* %xivu_iv, align 8
  br label %cond.end17

cond.false14:                                     ; preds = %do.end
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i64 1
  %27 = load %struct.sv*, %struct.sv** %add.ptr15, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %27, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false14, %cond.true12
  %cond18 = phi i64 [ %25, %cond.true12 ], [ %call16, %cond.false14 ]
  store i64 %cond18, i64* %right, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  store %struct.sv* %29, %struct.sv** %leftsv, align 8
  %30 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %31, 65280
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %cond.true35, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end17
  %32 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %33, 255
  %cmp = icmp eq i32 %and23, 8
  br i1 %cmp, label %cond.true35, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false
  %34 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %35, 16826623
  %cmp28 = icmp eq i32 %and27, 16777226
  br i1 %cmp28, label %cond.true35, label %lor.lhs.false30

lor.lhs.false30:                                  ; preds = %lor.lhs.false25
  %36 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags31 = getelementptr inbounds %struct.op, %struct.op* %36, i32 0, i32 5
  %37 = load i8, i8* %op_flags31, align 2
  %conv32 = zext i8 %37 to i32
  %and33 = and i32 %conv32, 64
  %tobool34 = icmp ne i32 %and33, 0
  br i1 %tobool34, label %cond.false47, label %cond.true35

cond.true35:                                      ; preds = %lor.lhs.false30, %lor.lhs.false25, %lor.lhs.false, %cond.end17
  %38 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 2
  %39 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %39, 256
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false43

cond.true39:                                      ; preds = %cond.true35
  %40 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %sv_any40 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 0
  %41 = load i8*, i8** %sv_any40, align 8
  %42 = bitcast i8* %41 to %struct.xpviv*
  %xiv_u41 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %42, i32 0, i32 4
  %xivu_iv42 = bitcast %union._xivu* %xiv_u41 to i64*
  %43 = load i64, i64* %xivu_iv42, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %cond.true35
  %44 = load %struct.sv*, %struct.sv** %leftsv, align 8
  %call44 = call i64 @Perl_sv_2iv_flags(%struct.sv* %44, i32 0)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true39
  %cond46 = phi i64 [ %43, %cond.true39 ], [ %call44, %cond.false43 ]
  br label %cond.end48

cond.false47:                                     ; preds = %lor.lhs.false30
  br label %cond.end48

cond.end48:                                       ; preds = %cond.false47, %cond.end45
  %cond49 = phi i64 [ %cond46, %cond.end45 ], [ 0, %cond.false47 ]
  store i64 %cond49, i64* %left, align 8
  br label %do.body50

do.body50:                                        ; preds = %cond.end48
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %46 = load i64, i64* %left, align 8
  %47 = load i64, i64* %right, align 8
  %sub = sub nsw i64 %46, %47
  call void @Perl_sv_setiv(%struct.sv* %45, i64 %sub)
  br label %do.body51

do.body51:                                        ; preds = %do.body50
  br label %do.body52

do.body52:                                        ; preds = %do.body51
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags53 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags53, align 4
  %and54 = and i32 %49, 4194304
  %tobool55 = icmp ne i32 %and54, 0
  br i1 %tobool55, label %cond.true56, label %cond.false57

cond.true56:                                      ; preds = %do.body52
  br i1 true, label %if.then58, label %if.end60

cond.false57:                                     ; preds = %do.body52
  br i1 false, label %if.then58, label %if.end60

if.then58:                                        ; preds = %cond.false57, %cond.true56
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %call59 = call i32 @Perl_mg_set(%struct.sv* %50)
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %cond.false57, %cond.true56
  br label %do.end61

do.end61:                                         ; preds = %if.end60
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %52 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %51, %struct.sv** %52, align 8
  br label %do.end62

do.end62:                                         ; preds = %do.end61
  br label %do.end63

do.end63:                                         ; preds = %do.end62
  %53 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %53, %struct.sv*** @PL_stack_sp, align 8
  %54 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next64 = getelementptr inbounds %struct.op, %struct.op* %54, i32 0, i32 0
  %55 = load %struct.op*, %struct.op** %op_next64, align 8
  store %struct.op* %55, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end63, %if.then
  %56 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_lt() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 17, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp slt i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_gt() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 19, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp sgt i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_le() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 18, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp sle i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_ge() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 20, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp sge i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_eq() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 21, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp eq i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_ne() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 -1
  %2 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags, align 4
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %3, %6
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 22, i32 32)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 0
  %8 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %8, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %11, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 0
  %14 = load i8*, i8** %sv_any, align 8
  %15 = bitcast i8* %14 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %15, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %16 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %16, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %22, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load %struct.sv*, %struct.sv** %23, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 0
  %25 = load i8*, i8** %sv_any12, align 8
  %26 = bitcast i8* %25 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %26, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %27 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %29, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %27, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %30 = load i64, i64* %left, align 8
  %31 = load i64, i64* %right, align 8
  %cmp = icmp ne i64 %30, %31
  %32 = zext i1 %cmp to i64
  %cond19 = select i1 %cmp, %struct.sv* @PL_sv_yes, %struct.sv* @PL_sv_no
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %cond19, %struct.sv** %33, align 8
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %34, %struct.sv*** @PL_stack_sp, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 0
  %36 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %36, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end17, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_ncmp() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca i64, align 8
  %left = alloca i64, align 8
  %value = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 -1
  %6 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %7, %10
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 58, i32 0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %15, 256
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %19, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %20 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %call7 = call i64 @Perl_sv_2iv_flags(%struct.sv* %22, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi i64 [ %20, %cond.true5 ], [ %call7, %cond.false6 ]
  store i64 %cond, i64* %right, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %26, 256
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any12, align 8
  %30 = bitcast i8* %29 to %struct.xpviv*
  %xiv_u13 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %30, i32 0, i32 4
  %xivu_iv14 = bitcast %union._xivu* %xiv_u13 to i64*
  %31 = load i64, i64* %xivu_iv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %call16 = call i64 @Perl_sv_2iv_flags(%struct.sv* %33, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi i64 [ %31, %cond.true11 ], [ %call16, %cond.false15 ]
  store i64 %cond18, i64* %left, align 8
  %34 = load i64, i64* %left, align 8
  %35 = load i64, i64* %right, align 8
  %cmp = icmp sgt i64 %34, %35
  br i1 %cmp, label %if.then19, label %if.else

if.then19:                                        ; preds = %cond.end17
  store i32 1, i32* %value, align 4
  br label %if.end24

if.else:                                          ; preds = %cond.end17
  %36 = load i64, i64* %left, align 8
  %37 = load i64, i64* %right, align 8
  %cmp20 = icmp slt i64 %36, %37
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %if.else
  store i32 -1, i32* %value, align 4
  br label %if.end23

if.else22:                                        ; preds = %if.else
  store i32 0, i32* %value, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.else22, %if.then21
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then19
  br label %do.body25

do.body25:                                        ; preds = %if.end24
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %39 = load i32, i32* %value, align 4
  %conv = sext i32 %39 to i64
  call void @Perl_sv_setiv(%struct.sv* %38, i64 %conv)
  br label %do.body26

do.body26:                                        ; preds = %do.body25
  br label %do.body27

do.body27:                                        ; preds = %do.body26
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags28 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags28, align 4
  %and29 = and i32 %41, 4194304
  %tobool30 = icmp ne i32 %and29, 0
  br i1 %tobool30, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %do.body27
  br i1 true, label %if.then33, label %if.end35

cond.false32:                                     ; preds = %do.body27
  br i1 false, label %if.then33, label %if.end35

if.then33:                                        ; preds = %cond.false32, %cond.true31
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %call34 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %cond.false32, %cond.true31
  br label %do.end36

do.end36:                                         ; preds = %if.end35
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %43, %struct.sv** %44, align 8
  br label %do.end37

do.end37:                                         ; preds = %do.end36
  br label %do.end38

do.end38:                                         ; preds = %do.end37
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %45, %struct.sv*** @PL_stack_sp, align 8
  %46 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next39 = getelementptr inbounds %struct.op, %struct.op* %46, i32 0, i32 0
  %47 = load %struct.op*, %struct.op** %op_next39, align 8
  store %struct.op* %47, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end38, %if.then
  %48 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %48
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_i_negate() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %i = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 14, i32 0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %call1 = call zeroext i1 @S_negate_string()
  br i1 %call1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %do.end
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next3 = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 0
  %11 = load %struct.op*, %struct.op** %op_next3, align 8
  store %struct.op* %11, %struct.op** %retval, align 8
  br label %return

if.end4:                                          ; preds = %do.end
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  store %struct.sv* %13, %struct.sv** %sv, align 8
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %15, 256
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %cond.true8, label %cond.false9

cond.true8:                                       ; preds = %if.end4
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 0
  %17 = load i8*, i8** %sv_any, align 8
  %18 = bitcast i8* %17 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %18, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %19 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false9:                                      ; preds = %if.end4
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call10 = call i64 @Perl_sv_2iv_flags(%struct.sv* %20, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false9, %cond.true8
  %cond = phi i64 [ %19, %cond.true8 ], [ %call10, %cond.false9 ]
  store i64 %cond, i64* %i, align 8
  br label %do.body11

do.body11:                                        ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %22 = load i64, i64* %i, align 8
  %sub = sub nsw i64 0, %22
  call void @Perl_sv_setiv(%struct.sv* %21, i64 %sub)
  br label %do.body12

do.body12:                                        ; preds = %do.body11
  br label %do.body13

do.body13:                                        ; preds = %do.body12
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %24, 4194304
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %do.body13
  br i1 true, label %if.then19, label %if.end21

cond.false18:                                     ; preds = %do.body13
  br i1 false, label %if.then19, label %if.end21

if.then19:                                        ; preds = %cond.false18, %cond.true17
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %call20 = call i32 @Perl_mg_set(%struct.sv* %25)
  br label %if.end21

if.end21:                                         ; preds = %if.then19, %cond.false18, %cond.true17
  br label %do.end22

do.end22:                                         ; preds = %if.end21
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %26, %struct.sv** %27, align 8
  br label %do.end23

do.end23:                                         ; preds = %do.end22
  br label %do.end24

do.end24:                                         ; preds = %do.end23
  %28 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next25 = getelementptr inbounds %struct.op, %struct.op* %28, i32 0, i32 0
  %29 = load %struct.op*, %struct.op** %op_next25, align 8
  store %struct.op* %29, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end24, %if.then2, %if.then
  %30 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_atan2() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %right = alloca double, align 8
  %left = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 -1
  %6 = load %struct.sv*, %struct.sv** %add.ptr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags1, align 4
  %or = or i32 %7, %10
  %and = and i32 %or, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_bin(i32 62, i32 0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %15, 512
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false6

cond.true5:                                       ; preds = %do.end
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %19, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %20 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false6:                                      ; preds = %do.end
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %22 = load %struct.sv*, %struct.sv** %21, align 8
  %call7 = call double @Perl_sv_2nv_flags(%struct.sv* %22, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false6, %cond.true5
  %cond = phi double [ %20, %cond.true5 ], [ %call7, %cond.false6 ]
  store double %cond, double* %right, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 2
  %26 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %26, 512
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %cond.end
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %28 = load %struct.sv*, %struct.sv** %27, align 8
  %sv_any12 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 0
  %29 = load i8*, i8** %sv_any12, align 8
  %30 = bitcast i8* %29 to %struct.xpvnv*
  %xnv_u13 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %30, i32 0, i32 5
  %xnv_nv14 = bitcast %union._xnvu* %xnv_u13 to double*
  %31 = load double, double* %xnv_nv14, align 8
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %call16 = call double @Perl_sv_2nv_flags(%struct.sv* %33, i32 0)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true11
  %cond18 = phi double [ %31, %cond.true11 ], [ %call16, %cond.false15 ]
  store double %cond18, double* %left, align 8
  br label %do.body19

do.body19:                                        ; preds = %cond.end17
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load double, double* %left, align 8
  %36 = load double, double* %right, align 8
  %call20 = call double @atan2(double %35, double %36) #8
  call void @Perl_sv_setnv(%struct.sv* %34, double %call20)
  br label %do.body21

do.body21:                                        ; preds = %do.body19
  br label %do.body22

do.body22:                                        ; preds = %do.body21
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %38, 4194304
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %do.body22
  br i1 true, label %if.then28, label %if.end30

cond.false27:                                     ; preds = %do.body22
  br i1 false, label %if.then28, label %if.end30

if.then28:                                        ; preds = %cond.false27, %cond.true26
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %call29 = call i32 @Perl_mg_set(%struct.sv* %39)
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %cond.false27, %cond.true26
  br label %do.end31

do.end31:                                         ; preds = %if.end30
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %41 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %40, %struct.sv** %41, align 8
  br label %do.end32

do.end32:                                         ; preds = %do.end31
  br label %do.end33

do.end33:                                         ; preds = %do.end32
  %42 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %42, %struct.sv*** @PL_stack_sp, align 8
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next34 = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next34, align 8
  store %struct.op* %44, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end33, %if.then
  %45 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %45
}

; Function Attrs: nounwind
declare dso_local double @atan2(double, double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sin() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %amg_type = alloca i32, align 4
  %neg_report = alloca i8*, align 8
  %op_type = alloca i32, align 4
  %arg = alloca %struct.sv*, align 8
  %value = alloca double, align 8
  %result = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i32 0, i32* %amg_type, align 4
  store i8* null, i8** %neg_report, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  %6 = load i32, i32* %op_type, align 4
  switch i32 %6, label %sw.epilog [
    i32 109, label %sw.bb
    i32 110, label %sw.bb2
    i32 113, label %sw.bb3
    i32 114, label %sw.bb4
    i32 115, label %sw.bb5
  ]

sw.bb:                                            ; preds = %entry
  store i32 64, i32* %amg_type, align 4
  br label %sw.epilog

sw.bb2:                                           ; preds = %entry
  store i32 63, i32* %amg_type, align 4
  br label %sw.epilog

sw.bb3:                                           ; preds = %entry
  store i32 65, i32* %amg_type, align 4
  br label %sw.epilog

sw.bb4:                                           ; preds = %entry
  store i32 66, i32* %amg_type, align 4
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.32, i64 0, i64 0), i8** %neg_report, align 8
  br label %sw.epilog

sw.bb5:                                           ; preds = %entry
  store i32 67, i32* %amg_type, align 4
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i64 0, i64 0), i8** %neg_report, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb5, %sw.bb4, %sw.bb3, %sw.bb2, %sw.bb
  br label %do.body

do.body:                                          ; preds = %sw.epilog
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and = and i32 %9, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %10 = load i32, i32* %amg_type, align 4
  %call = call zeroext i1 @Perl_try_amagic_un(i32 %10, i32 0)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 0
  %12 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %12, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  store %struct.sv* %14, %struct.sv** %arg, align 8
  %15 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %16, 512
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false10

cond.true9:                                       ; preds = %do.end
  %17 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %19, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %20 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false10:                                     ; preds = %do.end
  %21 = load %struct.sv*, %struct.sv** %arg, align 8
  %call11 = call double @Perl_sv_2nv_flags(%struct.sv* %21, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true9
  %cond = phi double [ %20, %cond.true9 ], [ %call11, %cond.false10 ]
  store double %cond, double* %value, align 8
  store double 0x7FF8000000000000, double* %result, align 8
  %22 = load i8*, i8** %neg_report, align 8
  %tobool12 = icmp ne i8* %22, null
  br i1 %tobool12, label %if.then13, label %if.end21

if.then13:                                        ; preds = %cond.end
  %23 = load i32, i32* %op_type, align 4
  %cmp = icmp eq i32 %23, 114
  br i1 %cmp, label %cond.true14, label %cond.false16

cond.true14:                                      ; preds = %if.then13
  %24 = load double, double* %value, align 8
  %cmp15 = fcmp ole double %24, 0.000000e+00
  br i1 %cmp15, label %if.then18, label %if.end20

cond.false16:                                     ; preds = %if.then13
  %25 = load double, double* %value, align 8
  %cmp17 = fcmp olt double %25, 0.000000e+00
  br i1 %cmp17, label %if.then18, label %if.end20

if.then18:                                        ; preds = %cond.false16, %cond.true14
  %26 = load i8*, i8** %neg_report, align 8
  %27 = load double, double* %value, align 8
  %call19 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i64 0, i64 0), i8* %26, double %27)
  store %struct.op* %call19, %struct.op** %retval, align 8
  br label %return

if.end20:                                         ; preds = %cond.false16, %cond.true14
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %cond.end
  %28 = load i32, i32* %op_type, align 4
  switch i32 %28, label %sw.default [
    i32 109, label %sw.bb22
    i32 110, label %sw.bb24
    i32 113, label %sw.bb26
    i32 114, label %sw.bb28
    i32 115, label %sw.bb30
  ]

sw.default:                                       ; preds = %if.end21
  br label %sw.bb22

sw.bb22:                                          ; preds = %if.end21, %sw.default
  %29 = load double, double* %value, align 8
  %call23 = call double @sin(double %29) #8
  store double %call23, double* %result, align 8
  br label %sw.epilog32

sw.bb24:                                          ; preds = %if.end21
  %30 = load double, double* %value, align 8
  %call25 = call double @cos(double %30) #8
  store double %call25, double* %result, align 8
  br label %sw.epilog32

sw.bb26:                                          ; preds = %if.end21
  %31 = load double, double* %value, align 8
  %call27 = call double @exp(double %31) #8
  store double %call27, double* %result, align 8
  br label %sw.epilog32

sw.bb28:                                          ; preds = %if.end21
  %32 = load double, double* %value, align 8
  %call29 = call double @log(double %32) #8
  store double %call29, double* %result, align 8
  br label %sw.epilog32

sw.bb30:                                          ; preds = %if.end21
  %33 = load double, double* %value, align 8
  %call31 = call double @sqrt(double %33) #8
  store double %call31, double* %result, align 8
  br label %sw.epilog32

sw.epilog32:                                      ; preds = %sw.bb30, %sw.bb28, %sw.bb26, %sw.bb24, %sw.bb22
  br label %do.body33

do.body33:                                        ; preds = %sw.epilog32
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load double, double* %result, align 8
  call void @Perl_sv_setnv(%struct.sv* %34, double %35)
  br label %do.body34

do.body34:                                        ; preds = %do.body33
  br label %do.body35

do.body35:                                        ; preds = %do.body34
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %37, 4194304
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %do.body35
  br i1 true, label %if.then41, label %if.end43

cond.false40:                                     ; preds = %do.body35
  br i1 false, label %if.then41, label %if.end43

if.then41:                                        ; preds = %cond.false40, %cond.true39
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  %call42 = call i32 @Perl_mg_set(%struct.sv* %38)
  br label %if.end43

if.end43:                                         ; preds = %if.then41, %cond.false40, %cond.true39
  br label %do.end44

do.end44:                                         ; preds = %if.end43
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %39, %struct.sv** %40, align 8
  br label %do.end45

do.end45:                                         ; preds = %do.end44
  br label %do.end46

do.end46:                                         ; preds = %do.end45
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next47 = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 0
  %42 = load %struct.op*, %struct.op** %op_next47, align 8
  store %struct.op* %42, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end46, %if.then18, %if.then
  %43 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %43
}

; Function Attrs: nounwind
declare dso_local double @sin(double) #4

; Function Attrs: nounwind
declare dso_local double @cos(double) #4

; Function Attrs: nounwind
declare dso_local double @exp(double) #4

; Function Attrs: nounwind
declare dso_local double @log(double) #4

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rand() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %value = alloca double, align 8
  %sv = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load i8, i8* @PL_srand_called, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @Perl_seed()
  %conv = zext i32 %call to i64
  call void @spec_init_genrand(i64 %conv)
  store i8 1, i8* @PL_srand_called, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %1, %struct.sv*** %sp, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 6
  %3 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %3 to i32
  %and = and i32 %conv1, 15
  %cmp = icmp slt i32 %and, 1
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then3
  %4 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp4 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then6, label %if.end8

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then6, label %if.end8

if.then6:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call7 = call %struct.sv** @Perl_stack_grow(%struct.sv** %6, %struct.sv** %7, i64 1)
  store %struct.sv** %call7, %struct.sv*** %sp, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end8
  store double 1.000000e+00, double* %value, align 8
  br label %if.end19

if.else:                                          ; preds = %if.end
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %sv, align 8
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool9 = icmp ne %struct.sv* %11, null
  br i1 %tobool9, label %if.else11, label %if.then10

if.then10:                                        ; preds = %if.else
  store double 1.000000e+00, double* %value, align 8
  br label %if.end18

if.else11:                                        ; preds = %if.else
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and12 = and i32 %13, 2097664
  %cmp13 = icmp eq i32 %and12, 512
  br i1 %cmp13, label %cond.true15, label %cond.false16

cond.true15:                                      ; preds = %if.else11
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %16, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %17 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false16:                                     ; preds = %if.else11
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %call17 = call double @Perl_sv_2nv_flags(%struct.sv* %18, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false16, %cond.true15
  %cond = phi double [ %17, %cond.true15 ], [ %call17, %cond.false16 ]
  store double %cond, double* %value, align 8
  br label %if.end18

if.end18:                                         ; preds = %cond.end, %if.then10
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %do.end
  %19 = load double, double* %value, align 8
  %cmp20 = fcmp oeq double %19, 0.000000e+00
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.end19
  store double 1.000000e+00, double* %value, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then22, %if.end19
  %20 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 3
  %22 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %20, i64 %22
  %23 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %23, %struct.sv** %targ, align 8
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr24 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr24, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %incdec.ptr24, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %call25 = call double @spec_rand()
  %27 = load double, double* %value, align 8
  %mul = fmul double %27, %call25
  store double %mul, double* %value, align 8
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %29 = load double, double* %value, align 8
  call void @Perl_sv_setnv_mg(%struct.sv* %28, double %29)
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %31
}

declare dso_local void @spec_init_genrand(i64) #1

declare dso_local i32 @Perl_seed() #1

declare dso_local double @spec_rand() #1

declare dso_local void @Perl_sv_setnv_mg(%struct.sv*, double) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_srand() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %anum = alloca i64, align 8
  %top = alloca %struct.sv*, align 8
  %pv = alloca i8*, align 8
  %len = alloca i64, align 8
  %flags = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 15
  %cmp = icmp sge i32 %and, 1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  %tobool = icmp ne %struct.sv* %8, null
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %tobool2 = icmp ne %struct.sv* %10, null
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %11, i32 -1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  store %struct.sv* %12, %struct.sv** %top, align 8
  %13 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %14, 2098176
  %cmp5 = icmp eq i32 %and4, 1024
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %15 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 0
  %16 = load i8*, i8** %sv_any, align 8
  %17 = bitcast i8* %16 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %17, i32 0, i32 2
  %18 = load i64, i64* %xpv_cur, align 8
  store i64 %18, i64* %len, align 8
  %19 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %20 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %21 = load %struct.sv*, %struct.sv** %top, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %21, i64* %len, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %20, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %pv, align 8
  %22 = load i8*, i8** %pv, align 8
  %23 = load i64, i64* %len, align 8
  %call7 = call i32 @Perl_grok_number(i8* %22, i64 %23, i64* %anum)
  store i32 %call7, i32* %flags, align 4
  %24 = load i32, i32* %flags, align 4
  %and8 = and i32 %24, 1
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.end, label %if.then10

if.then10:                                        ; preds = %cond.end
  call void (i32, i8*, ...) @Perl_ck_warner_d(i32 15, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.35, i64 0, i64 0))
  store i64 -1, i64* %anum, align 8
  br label %if.end

if.end:                                           ; preds = %if.then10, %cond.end
  br label %if.end13

if.else:                                          ; preds = %lor.lhs.false, %entry
  %call11 = call i32 @Perl_seed()
  %conv12 = zext i32 %call11 to i64
  store i64 %conv12, i64* %anum, align 8
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.end
  %25 = load i64, i64* %anum, align 8
  call void @spec_init_genrand(i64 %25)
  store i8 1, i8* @PL_srand_called, align 1
  %26 = load i64, i64* %anum, align 8
  %tobool14 = icmp ne i64 %26, 0
  br i1 %tobool14, label %if.then15, label %if.else40

if.then15:                                        ; preds = %if.end13
  br label %do.body

do.body:                                          ; preds = %if.then15
  %27 = load %struct.sv*, %struct.sv** %targ, align 8
  %28 = load i64, i64* %anum, align 8
  call void @Perl_sv_setuv(%struct.sv* %27, i64 %28)
  br label %do.body16

do.body16:                                        ; preds = %do.body
  br label %do.body17

do.body17:                                        ; preds = %do.body16
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %30, 4194304
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %do.body17
  br i1 true, label %if.then23, label %if.end25

cond.false22:                                     ; preds = %do.body17
  br i1 false, label %if.then23, label %if.end25

if.then23:                                        ; preds = %cond.false22, %cond.true21
  %31 = load %struct.sv*, %struct.sv** %targ, align 8
  %call24 = call i32 @Perl_mg_set(%struct.sv* %31)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %cond.false22, %cond.true21
  br label %do.end

do.end:                                           ; preds = %if.end25
  br label %do.body26

do.body26:                                        ; preds = %do.end
  br label %do.body27

do.body27:                                        ; preds = %do.body26
  %32 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %32 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %33 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp28 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %do.body27
  br i1 true, label %if.then32, label %if.end34

cond.false31:                                     ; preds = %do.body27
  br i1 false, label %if.then32, label %if.end34

if.then32:                                        ; preds = %cond.false31, %cond.true30
  %34 = load %struct.sv**, %struct.sv*** %sp, align 8
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call33 = call %struct.sv** @Perl_stack_grow(%struct.sv** %34, %struct.sv** %35, i64 1)
  store %struct.sv** %call33, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %cond.false31, %cond.true30
  br label %do.end35

do.end35:                                         ; preds = %if.end34
  %37 = load %struct.sv*, %struct.sv** %targ, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %sp, align 8
  store %struct.sv* %37, %struct.sv** %incdec.ptr36, align 8
  br label %do.end37

do.end37:                                         ; preds = %do.end35
  br label %do.end38

do.end38:                                         ; preds = %do.end37
  br label %do.end39

do.end39:                                         ; preds = %do.end38
  br label %if.end69

if.else40:                                        ; preds = %if.end13
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setpvn(%struct.sv* %39, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.36, i64 0, i64 0), i64 10)
  br label %do.body41

do.body41:                                        ; preds = %if.else40
  br label %do.body42

do.body42:                                        ; preds = %do.body41
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %41, 4194304
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %cond.true46, label %cond.false47

cond.true46:                                      ; preds = %do.body42
  br i1 true, label %if.then48, label %if.end50

cond.false47:                                     ; preds = %do.body42
  br i1 false, label %if.then48, label %if.end50

if.then48:                                        ; preds = %cond.false47, %cond.true46
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %call49 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end50

if.end50:                                         ; preds = %if.then48, %cond.false47, %cond.true46
  br label %do.end51

do.end51:                                         ; preds = %if.end50
  br label %do.body52

do.body52:                                        ; preds = %do.end51
  br label %do.body53

do.body53:                                        ; preds = %do.body52
  %43 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast54 = ptrtoint %struct.sv** %43 to i64
  %sub.ptr.rhs.cast55 = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.sub56 = sub i64 %sub.ptr.lhs.cast54, %sub.ptr.rhs.cast55
  %sub.ptr.div57 = sdiv exact i64 %sub.ptr.sub56, 8
  %cmp58 = icmp slt i64 %sub.ptr.div57, 1
  br i1 %cmp58, label %cond.true60, label %cond.false61

cond.true60:                                      ; preds = %do.body53
  br i1 true, label %if.then62, label %if.end64

cond.false61:                                     ; preds = %do.body53
  br i1 false, label %if.then62, label %if.end64

if.then62:                                        ; preds = %cond.false61, %cond.true60
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call63 = call %struct.sv** @Perl_stack_grow(%struct.sv** %45, %struct.sv** %46, i64 1)
  store %struct.sv** %call63, %struct.sv*** %sp, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.then62, %cond.false61, %cond.true60
  br label %do.end65

do.end65:                                         ; preds = %if.end64
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr66 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i32 1
  store %struct.sv** %incdec.ptr66, %struct.sv*** %sp, align 8
  store %struct.sv* %48, %struct.sv** %incdec.ptr66, align 8
  br label %do.end67

do.end67:                                         ; preds = %do.end65
  br label %do.end68

do.end68:                                         ; preds = %do.end67
  br label %if.end69

if.end69:                                         ; preds = %do.end68, %do.end39
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %50, %struct.sv*** @PL_stack_sp, align 8
  %51 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %51, i32 0, i32 0
  %52 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %52
}

declare dso_local i32 @Perl_grok_number(i8*, i64, i64*) #1

declare dso_local void @Perl_sv_setpvn(%struct.sv*, i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_int() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %iv = alloca i64, align 8
  %value = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 16, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %13, 256
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %do.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %16, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %17 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false5:                                      ; preds = %do.end
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %call6 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi i64 [ %17, %cond.true4 ], [ %call6, %cond.false5 ]
  store i64 %cond, i64* %iv, align 8
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %20, 65280
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %22, 255
  %cmp = icmp eq i32 %and11, 8
  br i1 %cmp, label %if.else, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 16826623
  %cmp15 = icmp eq i32 %and14, 16777226
  br i1 %cmp15, label %if.else, label %if.then16

if.then16:                                        ; preds = %lor.lhs.false12
  br label %do.body17

do.body17:                                        ; preds = %if.then16
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setuv(%struct.sv* %25, i64 0)
  br label %do.body18

do.body18:                                        ; preds = %do.body17
  br label %do.body19

do.body19:                                        ; preds = %do.body18
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 4194304
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %do.body19
  br i1 true, label %if.then25, label %if.end27

cond.false24:                                     ; preds = %do.body19
  br i1 false, label %if.then25, label %if.end27

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %call26 = call i32 @Perl_mg_set(%struct.sv* %28)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %cond.false24, %cond.true23
  br label %do.end28

do.end28:                                         ; preds = %if.end27
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %29, %struct.sv** %30, align 8
  br label %do.end29

do.end29:                                         ; preds = %do.end28
  br label %do.end30

do.end30:                                         ; preds = %do.end29
  br label %if.end179

if.else:                                          ; preds = %lor.lhs.false12, %lor.lhs.false, %cond.end
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %32, 256
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.else78

if.then34:                                        ; preds = %if.else
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %34, -2147483648
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then38, label %if.else62

if.then38:                                        ; preds = %if.then34
  br label %do.body39

do.body39:                                        ; preds = %if.then38
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %37, 256
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true43, label %cond.false45

cond.true43:                                      ; preds = %do.body39
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any44, align 8
  %40 = bitcast i8* %39 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %40, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %41 = load i64, i64* %xivu_uv, align 8
  br label %cond.end47

cond.false45:                                     ; preds = %do.body39
  %42 = load %struct.sv*, %struct.sv** %sv, align 8
  %call46 = call i64 @Perl_sv_2uv_flags(%struct.sv* %42, i32 0)
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false45, %cond.true43
  %cond48 = phi i64 [ %41, %cond.true43 ], [ %call46, %cond.false45 ]
  call void @Perl_sv_setuv(%struct.sv* %35, i64 %cond48)
  br label %do.body49

do.body49:                                        ; preds = %cond.end47
  br label %do.body50

do.body50:                                        ; preds = %do.body49
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %44, 4194304
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %do.body50
  br i1 true, label %if.then56, label %if.end58

cond.false55:                                     ; preds = %do.body50
  br i1 false, label %if.then56, label %if.end58

if.then56:                                        ; preds = %cond.false55, %cond.true54
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %call57 = call i32 @Perl_mg_set(%struct.sv* %45)
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %cond.false55, %cond.true54
  br label %do.end59

do.end59:                                         ; preds = %if.end58
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %46, %struct.sv** %47, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.end59
  br label %do.end61

do.end61:                                         ; preds = %do.end60
  br label %if.end77

if.else62:                                        ; preds = %if.then34
  br label %do.body63

do.body63:                                        ; preds = %if.else62
  %48 = load %struct.sv*, %struct.sv** %targ, align 8
  %49 = load i64, i64* %iv, align 8
  call void @Perl_sv_setiv(%struct.sv* %48, i64 %49)
  br label %do.body64

do.body64:                                        ; preds = %do.body63
  br label %do.body65

do.body65:                                        ; preds = %do.body64
  %50 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %51, 4194304
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %cond.true69, label %cond.false70

cond.true69:                                      ; preds = %do.body65
  br i1 true, label %if.then71, label %if.end73

cond.false70:                                     ; preds = %do.body65
  br i1 false, label %if.then71, label %if.end73

if.then71:                                        ; preds = %cond.false70, %cond.true69
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  %call72 = call i32 @Perl_mg_set(%struct.sv* %52)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %cond.false70, %cond.true69
  br label %do.end74

do.end74:                                         ; preds = %if.end73
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %54 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %53, %struct.sv** %54, align 8
  br label %do.end75

do.end75:                                         ; preds = %do.end74
  br label %do.end76

do.end76:                                         ; preds = %do.end75
  br label %if.end77

if.end77:                                         ; preds = %do.end76, %do.end61
  br label %if.end178

if.else78:                                        ; preds = %if.else
  %55 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags79 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags79, align 4
  %and80 = and i32 %56, 512
  %tobool81 = icmp ne i32 %and80, 0
  br i1 %tobool81, label %cond.true82, label %cond.false84

cond.true82:                                      ; preds = %if.else78
  %57 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any83 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 0
  %58 = load i8*, i8** %sv_any83, align 8
  %59 = bitcast i8* %58 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %59, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %60 = load double, double* %xnv_nv, align 8
  br label %cond.end86

cond.false84:                                     ; preds = %if.else78
  %61 = load %struct.sv*, %struct.sv** %sv, align 8
  %call85 = call double @Perl_sv_2nv_flags(%struct.sv* %61, i32 0)
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false84, %cond.true82
  %cond87 = phi double [ %60, %cond.true82 ], [ %call85, %cond.false84 ]
  store double %cond87, double* %value, align 8
  %62 = load double, double* %value, align 8
  %call88 = call zeroext i1 @Perl_isinfnan(double %62)
  br i1 %call88, label %cond.true89, label %cond.false90

cond.true89:                                      ; preds = %cond.end86
  br i1 true, label %if.then91, label %if.else106

cond.false90:                                     ; preds = %cond.end86
  br i1 false, label %if.then91, label %if.else106

if.then91:                                        ; preds = %cond.false90, %cond.true89
  br label %do.body92

do.body92:                                        ; preds = %if.then91
  %63 = load %struct.sv*, %struct.sv** %targ, align 8
  %64 = load double, double* %value, align 8
  call void @Perl_sv_setnv(%struct.sv* %63, double %64)
  br label %do.body93

do.body93:                                        ; preds = %do.body92
  br label %do.body94

do.body94:                                        ; preds = %do.body93
  %65 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %66, 4194304
  %tobool97 = icmp ne i32 %and96, 0
  br i1 %tobool97, label %cond.true98, label %cond.false99

cond.true98:                                      ; preds = %do.body94
  br i1 true, label %if.then100, label %if.end102

cond.false99:                                     ; preds = %do.body94
  br i1 false, label %if.then100, label %if.end102

if.then100:                                       ; preds = %cond.false99, %cond.true98
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %call101 = call i32 @Perl_mg_set(%struct.sv* %67)
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %cond.false99, %cond.true98
  br label %do.end103

do.end103:                                        ; preds = %if.end102
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %68, %struct.sv** %69, align 8
  br label %do.end104

do.end104:                                        ; preds = %do.end103
  br label %do.end105

do.end105:                                        ; preds = %do.end104
  br label %if.end177

if.else106:                                       ; preds = %cond.false90, %cond.true89
  %70 = load double, double* %value, align 8
  %cmp107 = fcmp oge double %70, 0.000000e+00
  br i1 %cmp107, label %if.then108, label %if.else142

if.then108:                                       ; preds = %if.else106
  %71 = load double, double* %value, align 8
  %cmp109 = fcmp olt double %71, 0x43F0000000000000
  br i1 %cmp109, label %if.then110, label %if.else126

if.then110:                                       ; preds = %if.then108
  br label %do.body111

do.body111:                                       ; preds = %if.then110
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %73 = load double, double* %value, align 8
  %call112 = call i64 @Perl_cast_uv(double %73)
  call void @Perl_sv_setuv(%struct.sv* %72, i64 %call112)
  br label %do.body113

do.body113:                                       ; preds = %do.body111
  br label %do.body114

do.body114:                                       ; preds = %do.body113
  %74 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %75, 4194304
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.true118, label %cond.false119

cond.true118:                                     ; preds = %do.body114
  br i1 true, label %if.then120, label %if.end122

cond.false119:                                    ; preds = %do.body114
  br i1 false, label %if.then120, label %if.end122

if.then120:                                       ; preds = %cond.false119, %cond.true118
  %76 = load %struct.sv*, %struct.sv** %targ, align 8
  %call121 = call i32 @Perl_mg_set(%struct.sv* %76)
  br label %if.end122

if.end122:                                        ; preds = %if.then120, %cond.false119, %cond.true118
  br label %do.end123

do.end123:                                        ; preds = %if.end122
  %77 = load %struct.sv*, %struct.sv** %targ, align 8
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %77, %struct.sv** %78, align 8
  br label %do.end124

do.end124:                                        ; preds = %do.end123
  br label %do.end125

do.end125:                                        ; preds = %do.end124
  br label %if.end141

if.else126:                                       ; preds = %if.then108
  br label %do.body127

do.body127:                                       ; preds = %if.else126
  %79 = load %struct.sv*, %struct.sv** %targ, align 8
  %80 = load double, double* %value, align 8
  %81 = call double @llvm.floor.f64(double %80)
  call void @Perl_sv_setnv(%struct.sv* %79, double %81)
  br label %do.body128

do.body128:                                       ; preds = %do.body127
  br label %do.body129

do.body129:                                       ; preds = %do.body128
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %83, 4194304
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %cond.true133, label %cond.false134

cond.true133:                                     ; preds = %do.body129
  br i1 true, label %if.then135, label %if.end137

cond.false134:                                    ; preds = %do.body129
  br i1 false, label %if.then135, label %if.end137

if.then135:                                       ; preds = %cond.false134, %cond.true133
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %call136 = call i32 @Perl_mg_set(%struct.sv* %84)
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %cond.false134, %cond.true133
  br label %do.end138

do.end138:                                        ; preds = %if.end137
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %85, %struct.sv** %86, align 8
  br label %do.end139

do.end139:                                        ; preds = %do.end138
  br label %do.end140

do.end140:                                        ; preds = %do.end139
  br label %if.end141

if.end141:                                        ; preds = %do.end140, %do.end125
  br label %if.end176

if.else142:                                       ; preds = %if.else106
  %87 = load double, double* %value, align 8
  %cmp143 = fcmp ogt double %87, 0xC3E0000000000000
  br i1 %cmp143, label %if.then144, label %if.else160

if.then144:                                       ; preds = %if.else142
  br label %do.body145

do.body145:                                       ; preds = %if.then144
  %88 = load %struct.sv*, %struct.sv** %targ, align 8
  %89 = load double, double* %value, align 8
  %call146 = call i64 @Perl_cast_iv(double %89)
  call void @Perl_sv_setiv(%struct.sv* %88, i64 %call146)
  br label %do.body147

do.body147:                                       ; preds = %do.body145
  br label %do.body148

do.body148:                                       ; preds = %do.body147
  %90 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags149 = getelementptr inbounds %struct.sv, %struct.sv* %90, i32 0, i32 2
  %91 = load i32, i32* %sv_flags149, align 4
  %and150 = and i32 %91, 4194304
  %tobool151 = icmp ne i32 %and150, 0
  br i1 %tobool151, label %cond.true152, label %cond.false153

cond.true152:                                     ; preds = %do.body148
  br i1 true, label %if.then154, label %if.end156

cond.false153:                                    ; preds = %do.body148
  br i1 false, label %if.then154, label %if.end156

if.then154:                                       ; preds = %cond.false153, %cond.true152
  %92 = load %struct.sv*, %struct.sv** %targ, align 8
  %call155 = call i32 @Perl_mg_set(%struct.sv* %92)
  br label %if.end156

if.end156:                                        ; preds = %if.then154, %cond.false153, %cond.true152
  br label %do.end157

do.end157:                                        ; preds = %if.end156
  %93 = load %struct.sv*, %struct.sv** %targ, align 8
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %93, %struct.sv** %94, align 8
  br label %do.end158

do.end158:                                        ; preds = %do.end157
  br label %do.end159

do.end159:                                        ; preds = %do.end158
  br label %if.end175

if.else160:                                       ; preds = %if.else142
  br label %do.body161

do.body161:                                       ; preds = %if.else160
  %95 = load %struct.sv*, %struct.sv** %targ, align 8
  %96 = load double, double* %value, align 8
  %97 = call double @llvm.ceil.f64(double %96)
  call void @Perl_sv_setnv(%struct.sv* %95, double %97)
  br label %do.body162

do.body162:                                       ; preds = %do.body161
  br label %do.body163

do.body163:                                       ; preds = %do.body162
  %98 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags164 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags164, align 4
  %and165 = and i32 %99, 4194304
  %tobool166 = icmp ne i32 %and165, 0
  br i1 %tobool166, label %cond.true167, label %cond.false168

cond.true167:                                     ; preds = %do.body163
  br i1 true, label %if.then169, label %if.end171

cond.false168:                                    ; preds = %do.body163
  br i1 false, label %if.then169, label %if.end171

if.then169:                                       ; preds = %cond.false168, %cond.true167
  %100 = load %struct.sv*, %struct.sv** %targ, align 8
  %call170 = call i32 @Perl_mg_set(%struct.sv* %100)
  br label %if.end171

if.end171:                                        ; preds = %if.then169, %cond.false168, %cond.true167
  br label %do.end172

do.end172:                                        ; preds = %if.end171
  %101 = load %struct.sv*, %struct.sv** %targ, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %101, %struct.sv** %102, align 8
  br label %do.end173

do.end173:                                        ; preds = %do.end172
  br label %do.end174

do.end174:                                        ; preds = %do.end173
  br label %if.end175

if.end175:                                        ; preds = %do.end174, %do.end159
  br label %if.end176

if.end176:                                        ; preds = %if.end175, %if.end141
  br label %if.end177

if.end177:                                        ; preds = %if.end176, %do.end105
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end77
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %do.end30
  %103 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next180 = getelementptr inbounds %struct.op, %struct.op* %103, i32 0, i32 0
  %104 = load %struct.op*, %struct.op** %op_next180, align 8
  store %struct.op* %104, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end179, %if.then
  %105 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %105
}

declare dso_local i64 @Perl_cast_iv(double) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #5

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_abs() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %iv = alloca i64, align 8
  %value = alloca double, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 2099200
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %land.lhs.true, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %call = call zeroext i1 @Perl_try_amagic_un(i32 13, i32 16)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 0
  %9 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %9, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** %sv, align 8
  %12 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %13, 256
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %do.end
  %14 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any, align 8
  %16 = bitcast i8* %15 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %16, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %17 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false5:                                      ; preds = %do.end
  %18 = load %struct.sv*, %struct.sv** %sv, align 8
  %call6 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false5, %cond.true4
  %cond = phi i64 [ %17, %cond.true4 ], [ %call6, %cond.false5 ]
  store i64 %cond, i64* %iv, align 8
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %20, 65280
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.else, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %22, 255
  %cmp = icmp eq i32 %and11, 8
  br i1 %cmp, label %if.else, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %24, 16826623
  %cmp15 = icmp eq i32 %and14, 16777226
  br i1 %cmp15, label %if.else, label %if.then16

if.then16:                                        ; preds = %lor.lhs.false12
  br label %do.body17

do.body17:                                        ; preds = %if.then16
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setuv(%struct.sv* %25, i64 0)
  br label %do.body18

do.body18:                                        ; preds = %do.body17
  br label %do.body19

do.body19:                                        ; preds = %do.body18
  %26 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %27, 4194304
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %do.body19
  br i1 true, label %if.then25, label %if.end27

cond.false24:                                     ; preds = %do.body19
  br i1 false, label %if.then25, label %if.end27

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %28 = load %struct.sv*, %struct.sv** %targ, align 8
  %call26 = call i32 @Perl_mg_set(%struct.sv* %28)
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %cond.false24, %cond.true23
  br label %do.end28

do.end28:                                         ; preds = %if.end27
  %29 = load %struct.sv*, %struct.sv** %targ, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %29, %struct.sv** %30, align 8
  br label %do.end29

do.end29:                                         ; preds = %do.end28
  br label %do.end30

do.end30:                                         ; preds = %do.end29
  br label %if.end157

if.else:                                          ; preds = %lor.lhs.false12, %lor.lhs.false, %cond.end
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %32, 256
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.then34, label %if.else114

if.then34:                                        ; preds = %if.else
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags35 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags35, align 4
  %and36 = and i32 %34, -2147483648
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %if.then38, label %if.else62

if.then38:                                        ; preds = %if.then34
  br label %do.body39

do.body39:                                        ; preds = %if.then38
  %35 = load %struct.sv*, %struct.sv** %targ, align 8
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %37, 256
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %cond.true43, label %cond.false45

cond.true43:                                      ; preds = %do.body39
  %38 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any44 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any44, align 8
  %40 = bitcast i8* %39 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %40, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %41 = load i64, i64* %xivu_uv, align 8
  br label %cond.end47

cond.false45:                                     ; preds = %do.body39
  %42 = load %struct.sv*, %struct.sv** %sv, align 8
  %call46 = call i64 @Perl_sv_2uv_flags(%struct.sv* %42, i32 0)
  br label %cond.end47

cond.end47:                                       ; preds = %cond.false45, %cond.true43
  %cond48 = phi i64 [ %41, %cond.true43 ], [ %call46, %cond.false45 ]
  call void @Perl_sv_setuv(%struct.sv* %35, i64 %cond48)
  br label %do.body49

do.body49:                                        ; preds = %cond.end47
  br label %do.body50

do.body50:                                        ; preds = %do.body49
  %43 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %44, 4194304
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %do.body50
  br i1 true, label %if.then56, label %if.end58

cond.false55:                                     ; preds = %do.body50
  br i1 false, label %if.then56, label %if.end58

if.then56:                                        ; preds = %cond.false55, %cond.true54
  %45 = load %struct.sv*, %struct.sv** %targ, align 8
  %call57 = call i32 @Perl_mg_set(%struct.sv* %45)
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %cond.false55, %cond.true54
  br label %do.end59

do.end59:                                         ; preds = %if.end58
  %46 = load %struct.sv*, %struct.sv** %targ, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %46, %struct.sv** %47, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.end59
  br label %do.end61

do.end61:                                         ; preds = %do.end60
  br label %if.end113

if.else62:                                        ; preds = %if.then34
  %48 = load i64, i64* %iv, align 8
  %cmp63 = icmp sge i64 %48, 0
  br i1 %cmp63, label %if.then64, label %if.else79

if.then64:                                        ; preds = %if.else62
  br label %do.body65

do.body65:                                        ; preds = %if.then64
  %49 = load %struct.sv*, %struct.sv** %targ, align 8
  %50 = load i64, i64* %iv, align 8
  call void @Perl_sv_setiv(%struct.sv* %49, i64 %50)
  br label %do.body66

do.body66:                                        ; preds = %do.body65
  br label %do.body67

do.body67:                                        ; preds = %do.body66
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %52, 4194304
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %do.body67
  br i1 true, label %if.then73, label %if.end75

cond.false72:                                     ; preds = %do.body67
  br i1 false, label %if.then73, label %if.end75

if.then73:                                        ; preds = %cond.false72, %cond.true71
  %53 = load %struct.sv*, %struct.sv** %targ, align 8
  %call74 = call i32 @Perl_mg_set(%struct.sv* %53)
  br label %if.end75

if.end75:                                         ; preds = %if.then73, %cond.false72, %cond.true71
  br label %do.end76

do.end76:                                         ; preds = %if.end75
  %54 = load %struct.sv*, %struct.sv** %targ, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %54, %struct.sv** %55, align 8
  br label %do.end77

do.end77:                                         ; preds = %do.end76
  br label %do.end78

do.end78:                                         ; preds = %do.end77
  br label %if.end112

if.else79:                                        ; preds = %if.else62
  %56 = load i64, i64* %iv, align 8
  %cmp80 = icmp ne i64 %56, -9223372036854775808
  br i1 %cmp80, label %if.then81, label %if.else96

if.then81:                                        ; preds = %if.else79
  br label %do.body82

do.body82:                                        ; preds = %if.then81
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %58 = load i64, i64* %iv, align 8
  %sub = sub nsw i64 0, %58
  call void @Perl_sv_setiv(%struct.sv* %57, i64 %sub)
  br label %do.body83

do.body83:                                        ; preds = %do.body82
  br label %do.body84

do.body84:                                        ; preds = %do.body83
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags85 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags85, align 4
  %and86 = and i32 %60, 4194304
  %tobool87 = icmp ne i32 %and86, 0
  br i1 %tobool87, label %cond.true88, label %cond.false89

cond.true88:                                      ; preds = %do.body84
  br i1 true, label %if.then90, label %if.end92

cond.false89:                                     ; preds = %do.body84
  br i1 false, label %if.then90, label %if.end92

if.then90:                                        ; preds = %cond.false89, %cond.true88
  %61 = load %struct.sv*, %struct.sv** %targ, align 8
  %call91 = call i32 @Perl_mg_set(%struct.sv* %61)
  br label %if.end92

if.end92:                                         ; preds = %if.then90, %cond.false89, %cond.true88
  br label %do.end93

do.end93:                                         ; preds = %if.end92
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %62, %struct.sv** %63, align 8
  br label %do.end94

do.end94:                                         ; preds = %do.end93
  br label %do.end95

do.end95:                                         ; preds = %do.end94
  br label %if.end111

if.else96:                                        ; preds = %if.else79
  br label %do.body97

do.body97:                                        ; preds = %if.else96
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setuv(%struct.sv* %64, i64 -9223372036854775808)
  br label %do.body98

do.body98:                                        ; preds = %do.body97
  br label %do.body99

do.body99:                                        ; preds = %do.body98
  %65 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags100 = getelementptr inbounds %struct.sv, %struct.sv* %65, i32 0, i32 2
  %66 = load i32, i32* %sv_flags100, align 4
  %and101 = and i32 %66, 4194304
  %tobool102 = icmp ne i32 %and101, 0
  br i1 %tobool102, label %cond.true103, label %cond.false104

cond.true103:                                     ; preds = %do.body99
  br i1 true, label %if.then105, label %if.end107

cond.false104:                                    ; preds = %do.body99
  br i1 false, label %if.then105, label %if.end107

if.then105:                                       ; preds = %cond.false104, %cond.true103
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %call106 = call i32 @Perl_mg_set(%struct.sv* %67)
  br label %if.end107

if.end107:                                        ; preds = %if.then105, %cond.false104, %cond.true103
  br label %do.end108

do.end108:                                        ; preds = %if.end107
  %68 = load %struct.sv*, %struct.sv** %targ, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %68, %struct.sv** %69, align 8
  br label %do.end109

do.end109:                                        ; preds = %do.end108
  br label %do.end110

do.end110:                                        ; preds = %do.end109
  br label %if.end111

if.end111:                                        ; preds = %do.end110, %do.end95
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %do.end78
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %do.end61
  br label %if.end156

if.else114:                                       ; preds = %if.else
  %70 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags115, align 4
  %and116 = and i32 %71, 512
  %tobool117 = icmp ne i32 %and116, 0
  br i1 %tobool117, label %cond.true118, label %cond.false120

cond.true118:                                     ; preds = %if.else114
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any119 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any119, align 8
  %74 = bitcast i8* %73 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %74, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %75 = load double, double* %xnv_nv, align 8
  br label %cond.end122

cond.false120:                                    ; preds = %if.else114
  %76 = load %struct.sv*, %struct.sv** %sv, align 8
  %call121 = call double @Perl_sv_2nv_flags(%struct.sv* %76, i32 0)
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false120, %cond.true118
  %cond123 = phi double [ %75, %cond.true118 ], [ %call121, %cond.false120 ]
  store double %cond123, double* %value, align 8
  %77 = load double, double* %value, align 8
  %cmp124 = fcmp olt double %77, 0.000000e+00
  br i1 %cmp124, label %if.then125, label %if.else140

if.then125:                                       ; preds = %cond.end122
  br label %do.body126

do.body126:                                       ; preds = %if.then125
  %78 = load %struct.sv*, %struct.sv** %targ, align 8
  %79 = load double, double* %value, align 8
  %fneg = fneg double %79
  call void @Perl_sv_setnv(%struct.sv* %78, double %fneg)
  br label %do.body127

do.body127:                                       ; preds = %do.body126
  br label %do.body128

do.body128:                                       ; preds = %do.body127
  %80 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %81, 4194304
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %cond.true132, label %cond.false133

cond.true132:                                     ; preds = %do.body128
  br i1 true, label %if.then134, label %if.end136

cond.false133:                                    ; preds = %do.body128
  br i1 false, label %if.then134, label %if.end136

if.then134:                                       ; preds = %cond.false133, %cond.true132
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %call135 = call i32 @Perl_mg_set(%struct.sv* %82)
  br label %if.end136

if.end136:                                        ; preds = %if.then134, %cond.false133, %cond.true132
  br label %do.end137

do.end137:                                        ; preds = %if.end136
  %83 = load %struct.sv*, %struct.sv** %targ, align 8
  %84 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %83, %struct.sv** %84, align 8
  br label %do.end138

do.end138:                                        ; preds = %do.end137
  br label %do.end139

do.end139:                                        ; preds = %do.end138
  br label %if.end155

if.else140:                                       ; preds = %cond.end122
  br label %do.body141

do.body141:                                       ; preds = %if.else140
  %85 = load %struct.sv*, %struct.sv** %targ, align 8
  %86 = load double, double* %value, align 8
  call void @Perl_sv_setnv(%struct.sv* %85, double %86)
  br label %do.body142

do.body142:                                       ; preds = %do.body141
  br label %do.body143

do.body143:                                       ; preds = %do.body142
  %87 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags144 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags144, align 4
  %and145 = and i32 %88, 4194304
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %cond.true147, label %cond.false148

cond.true147:                                     ; preds = %do.body143
  br i1 true, label %if.then149, label %if.end151

cond.false148:                                    ; preds = %do.body143
  br i1 false, label %if.then149, label %if.end151

if.then149:                                       ; preds = %cond.false148, %cond.true147
  %89 = load %struct.sv*, %struct.sv** %targ, align 8
  %call150 = call i32 @Perl_mg_set(%struct.sv* %89)
  br label %if.end151

if.end151:                                        ; preds = %if.then149, %cond.false148, %cond.true147
  br label %do.end152

do.end152:                                        ; preds = %if.end151
  %90 = load %struct.sv*, %struct.sv** %targ, align 8
  %91 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %90, %struct.sv** %91, align 8
  br label %do.end153

do.end153:                                        ; preds = %do.end152
  br label %do.end154

do.end154:                                        ; preds = %do.end153
  br label %if.end155

if.end155:                                        ; preds = %do.end154, %do.end139
  br label %if.end156

if.end156:                                        ; preds = %if.end155, %if.end113
  br label %if.end157

if.end157:                                        ; preds = %if.end156, %do.end30
  %92 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next158 = getelementptr inbounds %struct.op, %struct.op* %92, i32 0, i32 0
  %93 = load %struct.op*, %struct.op** %op_next158, align 8
  store %struct.op* %93, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end157, %if.then
  %94 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %94
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_oct() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  %flags = alloca i32, align 4
  %len = alloca i64, align 8
  %result_nv = alloca double, align 8
  %result_uv = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %tsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i32 1, i32* %flags, align 4
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur, align 8
  store i64 %12, i64* %len, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %14 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %15, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %tmps, align 8
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %17, 536870912
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %18 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %18, i32 0, i32 10
  %19 = load i32, i32* %cop_hints, align 8
  %add = add i32 %19, 0
  %and3 = and i32 %add, 8
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %20 = load %struct.sv*, %struct.sv** %sv, align 8
  %call5 = call %struct.sv* @Perl_newSVsv(%struct.sv* %20)
  %call6 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call5)
  store %struct.sv* %call6, %struct.sv** %tsv, align 8
  %21 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags7, align 4
  %or = or i32 %22, 536870912
  store i32 %or, i32* %sv_flags7, align 4
  %23 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call8 = call zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv* %23, i1 zeroext false)
  %24 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %25, 2098176
  %cmp11 = icmp eq i32 %and10, 1024
  br i1 %cmp11, label %cond.true12, label %cond.false18

cond.true12:                                      ; preds = %if.then
  %26 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_any13 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any13, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_cur14 = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 2
  %29 = load i64, i64* %xpv_cur14, align 8
  store i64 %29, i64* %len, align 8
  %30 = load %struct.sv*, %struct.sv** %tsv, align 8
  %sv_u15 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_pv16 = bitcast %union.anon* %sv_u15 to i8**
  %31 = load i8*, i8** %svu_pv16, align 8
  %add.ptr17 = getelementptr inbounds i8, i8* %31, i64 0
  br label %cond.end20

cond.false18:                                     ; preds = %if.then
  %32 = load %struct.sv*, %struct.sv** %tsv, align 8
  %call19 = call i8* @Perl_sv_2pv_flags(%struct.sv* %32, i64* %len, i32 34)
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false18, %cond.true12
  %cond21 = phi i8* [ %add.ptr17, %cond.true12 ], [ %call19, %cond.false18 ]
  store i8* %cond21, i8** %tmps, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end20, %land.lhs.true, %cond.end
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp22 = icmp eq i32 %bf.cast, 117
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end
  br label %hex

if.end24:                                         ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end24
  %34 = load i8*, i8** %tmps, align 8
  %35 = load i8, i8* %34, align 1
  %conv = sext i8 %35 to i32
  %tobool25 = icmp ne i32 %conv, 0
  br i1 %tobool25, label %land.lhs.true26, label %land.end

land.lhs.true26:                                  ; preds = %while.cond
  %36 = load i64, i64* %len, align 8
  %tobool27 = icmp ne i64 %36, 0
  br i1 %tobool27, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true26
  %37 = load i8*, i8** %tmps, align 8
  %38 = load i8, i8* %37, align 1
  %idxprom = zext i8 %38 to i64
  %arrayidx28 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom
  %39 = load i32, i32* %arrayidx28, align 4
  %and29 = and i32 %39, 17408
  %cmp30 = icmp eq i32 %and29, 17408
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true26, %while.cond
  %40 = phi i1 [ false, %land.lhs.true26 ], [ false, %while.cond ], [ %cmp30, %land.rhs ]
  br i1 %40, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %41 = load i8*, i8** %tmps, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %incdec.ptr, i8** %tmps, align 8
  %42 = load i64, i64* %len, align 8
  %dec = add i64 %42, -1
  store i64 %dec, i64* %len, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %43 = load i8*, i8** %tmps, align 8
  %44 = load i8, i8* %43, align 1
  %conv32 = sext i8 %44 to i32
  %cmp33 = icmp eq i32 %conv32, 48
  br i1 %cmp33, label %if.then35, label %if.end38

if.then35:                                        ; preds = %while.end
  %45 = load i8*, i8** %tmps, align 8
  %incdec.ptr36 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %incdec.ptr36, i8** %tmps, align 8
  %46 = load i64, i64* %len, align 8
  %dec37 = add i64 %46, -1
  store i64 %dec37, i64* %len, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then35, %while.end
  %47 = load i8*, i8** %tmps, align 8
  %48 = load i8, i8* %47, align 1
  %conv39 = sext i8 %48 to i32
  %and40 = and i32 %conv39, -33
  %cmp41 = icmp eq i32 %and40, 88
  br i1 %cmp41, label %if.then43, label %if.else

if.then43:                                        ; preds = %if.end38
  br label %hex

hex:                                              ; preds = %if.then43, %if.then23
  %49 = load i8*, i8** %tmps, align 8
  %call44 = call i64 @Perl_grok_hex(i8* %49, i64* %len, i32* %flags, double* %result_nv)
  store i64 %call44, i64* %result_uv, align 8
  br label %if.end54

if.else:                                          ; preds = %if.end38
  %50 = load i8*, i8** %tmps, align 8
  %51 = load i8, i8* %50, align 1
  %conv45 = sext i8 %51 to i32
  %and46 = and i32 %conv45, -33
  %cmp47 = icmp eq i32 %and46, 66
  br i1 %cmp47, label %if.then49, label %if.else51

if.then49:                                        ; preds = %if.else
  %52 = load i8*, i8** %tmps, align 8
  %call50 = call i64 @Perl_grok_bin(i8* %52, i64* %len, i32* %flags, double* %result_nv)
  store i64 %call50, i64* %result_uv, align 8
  br label %if.end53

if.else51:                                        ; preds = %if.else
  %53 = load i8*, i8** %tmps, align 8
  %call52 = call i64 @Perl_grok_oct(i8* %53, i64* %len, i32* %flags, double* %result_nv)
  store i64 %call52, i64* %result_uv, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.else51, %if.then49
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %hex
  %54 = load i32, i32* %flags, align 4
  %and55 = and i32 %54, 2
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %if.then57, label %if.else70

if.then57:                                        ; preds = %if.end54
  br label %do.body

do.body:                                          ; preds = %if.then57
  %55 = load %struct.sv*, %struct.sv** %targ, align 8
  %56 = load double, double* %result_nv, align 8
  call void @Perl_sv_setnv(%struct.sv* %55, double %56)
  br label %do.body58

do.body58:                                        ; preds = %do.body
  br label %do.body59

do.body59:                                        ; preds = %do.body58
  %57 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %57, i32 0, i32 2
  %58 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %58, 4194304
  %tobool62 = icmp ne i32 %and61, 0
  br i1 %tobool62, label %cond.true63, label %cond.false64

cond.true63:                                      ; preds = %do.body59
  br i1 true, label %if.then65, label %if.end67

cond.false64:                                     ; preds = %do.body59
  br i1 false, label %if.then65, label %if.end67

if.then65:                                        ; preds = %cond.false64, %cond.true63
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %call66 = call i32 @Perl_mg_set(%struct.sv* %59)
  br label %if.end67

if.end67:                                         ; preds = %if.then65, %cond.false64, %cond.true63
  br label %do.end

do.end:                                           ; preds = %if.end67
  %60 = load %struct.sv*, %struct.sv** %targ, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %60, %struct.sv** %61, align 8
  br label %do.end68

do.end68:                                         ; preds = %do.end
  br label %do.end69

do.end69:                                         ; preds = %do.end68
  br label %if.end85

if.else70:                                        ; preds = %if.end54
  br label %do.body71

do.body71:                                        ; preds = %if.else70
  %62 = load %struct.sv*, %struct.sv** %targ, align 8
  %63 = load i64, i64* %result_uv, align 8
  call void @Perl_sv_setuv(%struct.sv* %62, i64 %63)
  br label %do.body72

do.body72:                                        ; preds = %do.body71
  br label %do.body73

do.body73:                                        ; preds = %do.body72
  %64 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags74 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags74, align 4
  %and75 = and i32 %65, 4194304
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false78

cond.true77:                                      ; preds = %do.body73
  br i1 true, label %if.then79, label %if.end81

cond.false78:                                     ; preds = %do.body73
  br i1 false, label %if.then79, label %if.end81

if.then79:                                        ; preds = %cond.false78, %cond.true77
  %66 = load %struct.sv*, %struct.sv** %targ, align 8
  %call80 = call i32 @Perl_mg_set(%struct.sv* %66)
  br label %if.end81

if.end81:                                         ; preds = %if.then79, %cond.false78, %cond.true77
  br label %do.end82

do.end82:                                         ; preds = %if.end81
  %67 = load %struct.sv*, %struct.sv** %targ, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %67, %struct.sv** %68, align 8
  br label %do.end83

do.end83:                                         ; preds = %do.end82
  br label %do.end84

do.end84:                                         ; preds = %do.end83
  br label %if.end85

if.end85:                                         ; preds = %do.end84, %do.end69
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 0
  %70 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %70
}

declare dso_local %struct.sv* @Perl_newSVsv(%struct.sv*) #1

declare dso_local zeroext i1 @Perl_sv_utf8_downgrade(%struct.sv*, i1 zeroext) #1

declare dso_local i64 @Perl_grok_hex(i8*, i64*, i32*, double*) #1

declare dso_local i64 @Perl_grok_bin(i8*, i64*, i32*, double*) #1

declare dso_local i64 @Perl_grok_oct(i8*, i64*, i32*, double*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_length() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %in_bytes = alloca i32, align 4
  %svflags = alloca i32, align 4
  %len = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %7, i32 0, i32 10
  %8 = load i32, i32* %cop_hints, align 8
  %add = add i32 %8, 0
  %and = and i32 %add, 8
  store i32 %and, i32* %in_bytes, align 4
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags, align 4
  %11 = load i32, i32* %in_bytes, align 4
  %shl = shl i32 %11, 26
  %xor = xor i32 %10, %shl
  %and1 = and i32 %xor, 538969088
  store i32 %and1, i32* %svflags, align 4
  %12 = load %struct.sv*, %struct.sv** %targ, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %12, %struct.sv** %13, align 8
  %14 = load i32, i32* %svflags, align 4
  %cmp = icmp eq i32 %14, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  br label %simple_pv

if.end:                                           ; preds = %cond.false, %cond.true
  %15 = load i32, i32* %svflags, align 4
  %and2 = and i32 %15, 2097152
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %16)
  br label %if.end4

if.end4:                                          ; preds = %if.then3, %if.end
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %18, 65280
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then15, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end4
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %20, 255
  %cmp10 = icmp eq i32 %and9, 8
  br i1 %cmp10, label %if.then15, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %21 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %22, 16826623
  %cmp14 = icmp eq i32 %and13, 16777226
  br i1 %cmp14, label %if.then15, label %if.else30

if.then15:                                        ; preds = %lor.lhs.false11, %lor.lhs.false, %if.end4
  %23 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints16 = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 10
  %24 = load i32, i32* %cop_hints16, align 8
  %add17 = add i32 %24, 0
  %and18 = and i32 %add17, 8
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %if.else, label %if.then20

if.then20:                                        ; preds = %if.then15
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %call21 = call i64 @Perl_sv_len_utf8_nomg(%struct.sv* %26)
  call void @Perl_sv_setiv(%struct.sv* %25, i64 %call21)
  br label %if.end29

if.else:                                          ; preds = %if.then15
  %27 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %28, 2098176
  %cmp24 = icmp eq i32 %and23, 1024
  br i1 %cmp24, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else
  br label %simple_pv

simple_pv:                                        ; preds = %if.then25, %if.then
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any, align 8
  %31 = bitcast i8* %30 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %31, i32 0, i32 2
  %32 = load i64, i64* %xpv_cur, align 8
  store i64 %32, i64* %len, align 8
  br label %if.end28

if.else26:                                        ; preds = %if.else
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %call27 = call i8* @Perl_sv_2pv_flags(%struct.sv* %33, i64* %len, i32 32)
  br label %if.end28

if.end28:                                         ; preds = %if.else26, %simple_pv
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %35 = load i64, i64* %len, align 8
  call void @Perl_sv_setiv(%struct.sv* %34, i64 %35)
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then20
  br label %if.end37

if.else30:                                        ; preds = %lor.lhs.false11
  %36 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags31 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags31, align 4
  %and32 = and i32 %37, 131072
  %tobool33 = icmp ne i32 %and32, 0
  br i1 %tobool33, label %if.else35, label %if.then34

if.then34:                                        ; preds = %if.else30
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %38, %struct.sv* @PL_sv_undef, i32 1536)
  br label %if.end36

if.else35:                                        ; preds = %if.else30
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %39, align 8
  br label %no_set_magic

if.end36:                                         ; preds = %if.then34
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %if.end29
  br label %do.body

do.body:                                          ; preds = %if.end37
  %40 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %41, 4194304
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body
  br i1 true, label %if.then43, label %if.end45

cond.false42:                                     ; preds = %do.body
  br i1 false, label %if.then43, label %if.end45

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %call44 = call i32 @Perl_mg_set(%struct.sv* %42)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end

do.end:                                           ; preds = %if.end45
  br label %no_set_magic

no_set_magic:                                     ; preds = %do.end, %if.else35
  %43 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %43, i32 0, i32 0
  %44 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %44
}

declare dso_local i64 @Perl_sv_len_utf8_nomg(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i1 @Perl_translate_substr_offsets(i64 %curlen, i64 %pos1_iv, i1 zeroext %pos1_is_uv, i64 %len_iv, i1 zeroext %len_is_uv, i64* %posp, i64* %lenp) #0 {
entry:
  %retval = alloca i1, align 1
  %curlen.addr = alloca i64, align 8
  %pos1_iv.addr = alloca i64, align 8
  %pos1_is_uv.addr = alloca i8, align 1
  %len_iv.addr = alloca i64, align 8
  %len_is_uv.addr = alloca i8, align 1
  %posp.addr = alloca i64*, align 8
  %lenp.addr = alloca i64*, align 8
  %pos2_iv = alloca i64, align 8
  %pos2_is_uv = alloca i32, align 4
  store i64 %curlen, i64* %curlen.addr, align 8
  store i64 %pos1_iv, i64* %pos1_iv.addr, align 8
  %frombool = zext i1 %pos1_is_uv to i8
  store i8 %frombool, i8* %pos1_is_uv.addr, align 1
  store i64 %len_iv, i64* %len_iv.addr, align 8
  %frombool1 = zext i1 %len_is_uv to i8
  store i8 %frombool1, i8* %len_is_uv.addr, align 1
  store i64* %posp, i64** %posp.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load i8, i8* %pos1_is_uv.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i64, i64* %pos1_iv.addr, align 8
  %cmp = icmp slt i64 %1, 0
  br i1 %cmp, label %land.lhs.true2, label %if.end

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load i64, i64* %curlen.addr, align 8
  %tobool3 = icmp ne i64 %2, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true2
  %3 = load i64, i64* %curlen.addr, align 8
  %sub = sub i64 %3, 1
  %4 = load i64, i64* %pos1_iv.addr, align 8
  %neg = xor i64 %4, -1
  %cmp4 = icmp ugt i64 %sub, %neg
  %frombool5 = zext i1 %cmp4 to i8
  store i8 %frombool5, i8* %pos1_is_uv.addr, align 1
  %5 = load i64, i64* %curlen.addr, align 8
  %6 = load i64, i64* %pos1_iv.addr, align 8
  %add = add i64 %6, %5
  store i64 %add, i64* %pos1_iv.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true2, %land.lhs.true, %entry
  %7 = load i8, i8* %pos1_is_uv.addr, align 1
  %tobool6 = trunc i8 %7 to i1
  br i1 %tobool6, label %land.lhs.true8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i64, i64* %pos1_iv.addr, align 8
  %cmp7 = icmp sgt i64 %8, 0
  br i1 %cmp7, label %land.lhs.true8, label %if.end11

land.lhs.true8:                                   ; preds = %lor.lhs.false, %if.end
  %9 = load i64, i64* %pos1_iv.addr, align 8
  %10 = load i64, i64* %curlen.addr, align 8
  %cmp9 = icmp ugt i64 %9, %10
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %land.lhs.true8
  store i1 false, i1* %retval, align 1
  br label %return

if.end11:                                         ; preds = %land.lhs.true8, %lor.lhs.false
  %11 = load i64, i64* %len_iv.addr, align 8
  %tobool12 = icmp ne i64 %11, 0
  br i1 %tobool12, label %if.then15, label %lor.lhs.false13

lor.lhs.false13:                                  ; preds = %if.end11
  %12 = load i8, i8* %len_is_uv.addr, align 1
  %tobool14 = trunc i8 %12 to i1
  br i1 %tobool14, label %if.then15, label %if.else46

if.then15:                                        ; preds = %lor.lhs.false13, %if.end11
  %13 = load i8, i8* %len_is_uv.addr, align 1
  %tobool16 = trunc i8 %13 to i1
  br i1 %tobool16, label %if.else27, label %land.lhs.true17

land.lhs.true17:                                  ; preds = %if.then15
  %14 = load i64, i64* %len_iv.addr, align 8
  %cmp18 = icmp slt i64 %14, 0
  br i1 %cmp18, label %if.then19, label %if.else27

if.then19:                                        ; preds = %land.lhs.true17
  %15 = load i64, i64* %curlen.addr, align 8
  %16 = load i64, i64* %len_iv.addr, align 8
  %add20 = add i64 %15, %16
  store i64 %add20, i64* %pos2_iv, align 8
  %17 = load i64, i64* %curlen.addr, align 8
  %tobool21 = icmp ne i64 %17, 0
  br i1 %tobool21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.then19
  %18 = load i64, i64* %curlen.addr, align 8
  %sub23 = sub i64 %18, 1
  %19 = load i64, i64* %len_iv.addr, align 8
  %neg24 = xor i64 %19, -1
  %cmp25 = icmp ugt i64 %sub23, %neg24
  %conv = zext i1 %cmp25 to i32
  store i32 %conv, i32* %pos2_is_uv, align 4
  br label %if.end26

if.else:                                          ; preds = %if.then19
  store i32 0, i32* %pos2_is_uv, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then22
  br label %if.end45

if.else27:                                        ; preds = %land.lhs.true17, %if.then15
  %20 = load i8, i8* %pos1_is_uv.addr, align 1
  %tobool28 = trunc i8 %20 to i1
  br i1 %tobool28, label %if.else36, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %if.else27
  %21 = load i64, i64* %pos1_iv.addr, align 8
  %cmp30 = icmp slt i64 %21, 0
  br i1 %cmp30, label %if.then32, label %if.else36

if.then32:                                        ; preds = %land.lhs.true29
  %22 = load i64, i64* %pos1_iv.addr, align 8
  %23 = load i64, i64* %len_iv.addr, align 8
  %add33 = add nsw i64 %22, %23
  store i64 %add33, i64* %pos2_iv, align 8
  %24 = load i64, i64* %len_iv.addr, align 8
  %cmp34 = icmp ugt i64 %24, 9223372036854775807
  %conv35 = zext i1 %cmp34 to i32
  store i32 %conv35, i32* %pos2_is_uv, align 4
  br label %if.end44

if.else36:                                        ; preds = %land.lhs.true29, %if.else27
  %25 = load i64, i64* %len_iv.addr, align 8
  %26 = load i64, i64* %curlen.addr, align 8
  %27 = load i64, i64* %pos1_iv.addr, align 8
  %sub37 = sub i64 %26, %27
  %cmp38 = icmp ugt i64 %25, %sub37
  br i1 %cmp38, label %if.then40, label %if.else41

if.then40:                                        ; preds = %if.else36
  %28 = load i64, i64* %curlen.addr, align 8
  store i64 %28, i64* %pos2_iv, align 8
  br label %if.end43

if.else41:                                        ; preds = %if.else36
  %29 = load i64, i64* %pos1_iv.addr, align 8
  %30 = load i64, i64* %len_iv.addr, align 8
  %add42 = add nsw i64 %29, %30
  store i64 %add42, i64* %pos2_iv, align 8
  br label %if.end43

if.end43:                                         ; preds = %if.else41, %if.then40
  store i32 1, i32* %pos2_is_uv, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then32
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end26
  br label %if.end47

if.else46:                                        ; preds = %lor.lhs.false13
  %31 = load i64, i64* %curlen.addr, align 8
  store i64 %31, i64* %pos2_iv, align 8
  store i32 1, i32* %pos2_is_uv, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.end45
  %32 = load i32, i32* %pos2_is_uv, align 4
  %tobool48 = icmp ne i32 %32, 0
  br i1 %tobool48, label %if.else59, label %land.lhs.true49

land.lhs.true49:                                  ; preds = %if.end47
  %33 = load i64, i64* %pos2_iv, align 8
  %cmp50 = icmp slt i64 %33, 0
  br i1 %cmp50, label %if.then52, label %if.else59

if.then52:                                        ; preds = %land.lhs.true49
  %34 = load i8, i8* %pos1_is_uv.addr, align 1
  %tobool53 = trunc i8 %34 to i1
  br i1 %tobool53, label %if.end58, label %land.lhs.true54

land.lhs.true54:                                  ; preds = %if.then52
  %35 = load i64, i64* %pos1_iv.addr, align 8
  %cmp55 = icmp slt i64 %35, 0
  br i1 %cmp55, label %if.then57, label %if.end58

if.then57:                                        ; preds = %land.lhs.true54
  store i1 false, i1* %retval, align 1
  br label %return

if.end58:                                         ; preds = %land.lhs.true54, %if.then52
  store i64 0, i64* %pos2_iv, align 8
  br label %if.end66

if.else59:                                        ; preds = %land.lhs.true49, %if.end47
  %36 = load i8, i8* %pos1_is_uv.addr, align 1
  %tobool60 = trunc i8 %36 to i1
  br i1 %tobool60, label %if.end65, label %land.lhs.true61

land.lhs.true61:                                  ; preds = %if.else59
  %37 = load i64, i64* %pos1_iv.addr, align 8
  %cmp62 = icmp slt i64 %37, 0
  br i1 %cmp62, label %if.then64, label %if.end65

if.then64:                                        ; preds = %land.lhs.true61
  store i64 0, i64* %pos1_iv.addr, align 8
  br label %if.end65

if.end65:                                         ; preds = %if.then64, %land.lhs.true61, %if.else59
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end58
  %38 = load i64, i64* %pos2_iv, align 8
  %39 = load i64, i64* %pos1_iv.addr, align 8
  %cmp67 = icmp ult i64 %38, %39
  br i1 %cmp67, label %if.then69, label %if.end70

if.then69:                                        ; preds = %if.end66
  %40 = load i64, i64* %pos1_iv.addr, align 8
  store i64 %40, i64* %pos2_iv, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.then69, %if.end66
  %41 = load i64, i64* %pos2_iv, align 8
  %42 = load i64, i64* %curlen.addr, align 8
  %cmp71 = icmp ugt i64 %41, %42
  br i1 %cmp71, label %if.then73, label %if.end74

if.then73:                                        ; preds = %if.end70
  %43 = load i64, i64* %curlen.addr, align 8
  store i64 %43, i64* %pos2_iv, align 8
  br label %if.end74

if.end74:                                         ; preds = %if.then73, %if.end70
  %44 = load i64, i64* %pos1_iv.addr, align 8
  %45 = load i64*, i64** %posp.addr, align 8
  store i64 %44, i64* %45, align 8
  %46 = load i64, i64* %pos2_iv, align 8
  %47 = load i64, i64* %pos1_iv.addr, align 8
  %sub75 = sub i64 %46, %47
  %48 = load i64*, i64** %lenp.addr, align 8
  store i64 %sub75, i64* %48, align 8
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end74, %if.then57, %if.then10
  %49 = load i1, i1* %retval, align 1
  ret i1 %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_substr() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %curlen = alloca i64, align 8
  %utf8_curlen = alloca i64, align 8
  %pos_sv = alloca %struct.sv*, align 8
  %pos1_iv = alloca i64, align 8
  %pos1_is_uv = alloca i32, align 4
  %len_sv = alloca %struct.sv*, align 8
  %len_iv = alloca i64, align 8
  %len_is_uv = alloca i32, align 4
  %lvalue = alloca i32, align 4
  %rvalue = alloca i8, align 1
  %tmps = alloca i8*, align 8
  %repl_sv = alloca %struct.sv*, align 8
  %repl = alloca i8*, align 8
  %repl_len = alloca i64, align 8
  %num_args = alloca i32, align 4
  %repl_need_utf8_upgrade = alloca i8, align 1
  %ret = alloca %struct.sv*, align 8
  %pos = alloca i64, align 8
  %len = alloca i64, align 8
  %byte_len = alloca i64, align 8
  %byte_pos = alloca i64, align 8
  %repl_sv_copy = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store i64 0, i64* %len_iv, align 8
  store i32 0, i32* %len_is_uv, align 4
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private, align 1
  %conv1 = zext i8 %8 to i32
  %and2 = and i32 %conv1, 8
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool4 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %9 = phi i1 [ false, %lor.rhs ], [ %tobool4, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %10 = phi i1 [ true, %entry ], [ %9, %land.end ]
  %lor.ext = zext i1 %10 to i32
  store i32 %lor.ext, i32* %lvalue, align 4
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags5 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 5
  %12 = load i8, i8* %op_flags5, align 2
  %conv6 = zext i8 %12 to i32
  %and7 = and i32 %conv6, 3
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.end
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags9 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags9, align 2
  %conv10 = zext i8 %14 to i32
  %and11 = and i32 %conv10, 3
  br label %cond.end

cond.false:                                       ; preds = %lor.end
  %call12 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and11, %cond.true ], [ %call12, %cond.false ]
  %cmp = icmp ne i32 %cond, 1
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %rvalue, align 1
  store %struct.sv* null, %struct.sv** %repl_sv, align 8
  store i8* null, i8** %repl, align 8
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private14 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 6
  %16 = load i8, i8* %op_private14, align 1
  %conv15 = zext i8 %16 to i32
  %and16 = and i32 %conv15, 7
  store i32 %and16, i32* %num_args, align 4
  store i8 0, i8* %repl_need_utf8_upgrade, align 1
  %17 = load i32, i32* %num_args, align 4
  %cmp17 = icmp sgt i32 %17, 2
  br i1 %cmp17, label %if.then, label %if.end47

if.then:                                          ; preds = %cond.end
  %18 = load i32, i32* %num_args, align 4
  %cmp19 = icmp sgt i32 %18, 3
  br i1 %cmp19, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.then
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %repl_sv, align 8
  %tobool22 = icmp ne %struct.sv* %20, null
  br i1 %tobool22, label %if.end, label %if.then23

if.then23:                                        ; preds = %if.then21
  %21 = load i32, i32* %num_args, align 4
  %dec = add nsw i32 %21, -1
  store i32 %dec, i32* %num_args, align 4
  br label %if.end

if.end:                                           ; preds = %if.then23, %if.then21
  br label %if.end24

if.end24:                                         ; preds = %if.end, %if.then
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr25 = getelementptr inbounds %struct.sv*, %struct.sv** %22, i32 -1
  store %struct.sv** %incdec.ptr25, %struct.sv*** %sp, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  store %struct.sv* %23, %struct.sv** %len_sv, align 8
  %tobool26 = icmp ne %struct.sv* %23, null
  br i1 %tobool26, label %if.then27, label %if.else

if.then27:                                        ; preds = %if.end24
  %24 = load %struct.sv*, %struct.sv** %len_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags, align 4
  %and28 = and i32 %25, 2097408
  %cmp29 = icmp eq i32 %and28, 256
  br i1 %cmp29, label %cond.true31, label %cond.false32

cond.true31:                                      ; preds = %if.then27
  %26 = load %struct.sv*, %struct.sv** %len_sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any, align 8
  %28 = bitcast i8* %27 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %28, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %29 = load i64, i64* %xivu_iv, align 8
  br label %cond.end34

cond.false32:                                     ; preds = %if.then27
  %30 = load %struct.sv*, %struct.sv** %len_sv, align 8
  %call33 = call i64 @Perl_sv_2iv_flags(%struct.sv* %30, i32 2)
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true31
  %cond35 = phi i64 [ %29, %cond.true31 ], [ %call33, %cond.false32 ]
  store i64 %cond35, i64* %len_iv, align 8
  %31 = load i64, i64* %len_iv, align 8
  %tobool36 = icmp ne i64 %31, 0
  br i1 %tobool36, label %cond.true37, label %cond.false42

cond.true37:                                      ; preds = %cond.end34
  %32 = load %struct.sv*, %struct.sv** %len_sv, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 2
  %33 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %33, -2147483392
  %cmp40 = icmp eq i32 %and39, -2147483392
  %conv41 = zext i1 %cmp40 to i32
  br label %cond.end43

cond.false42:                                     ; preds = %cond.end34
  br label %cond.end43

cond.end43:                                       ; preds = %cond.false42, %cond.true37
  %cond44 = phi i32 [ %conv41, %cond.true37 ], [ 1, %cond.false42 ]
  store i32 %cond44, i32* %len_is_uv, align 4
  br label %if.end46

if.else:                                          ; preds = %if.end24
  %34 = load i32, i32* %num_args, align 4
  %dec45 = add nsw i32 %34, -1
  store i32 %dec45, i32* %num_args, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.else, %cond.end43
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %cond.end
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr48 = getelementptr inbounds %struct.sv*, %struct.sv** %35, i32 -1
  store %struct.sv** %incdec.ptr48, %struct.sv*** %sp, align 8
  %36 = load %struct.sv*, %struct.sv** %35, align 8
  store %struct.sv* %36, %struct.sv** %pos_sv, align 8
  %37 = load %struct.sv*, %struct.sv** %pos_sv, align 8
  %sv_flags49 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags49, align 4
  %and50 = and i32 %38, 2097408
  %cmp51 = icmp eq i32 %and50, 256
  br i1 %cmp51, label %cond.true53, label %cond.false57

cond.true53:                                      ; preds = %if.end47
  %39 = load %struct.sv*, %struct.sv** %pos_sv, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any54, align 8
  %41 = bitcast i8* %40 to %struct.xpviv*
  %xiv_u55 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %41, i32 0, i32 4
  %xivu_iv56 = bitcast %union._xivu* %xiv_u55 to i64*
  %42 = load i64, i64* %xivu_iv56, align 8
  br label %cond.end59

cond.false57:                                     ; preds = %if.end47
  %43 = load %struct.sv*, %struct.sv** %pos_sv, align 8
  %call58 = call i64 @Perl_sv_2iv_flags(%struct.sv* %43, i32 2)
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false57, %cond.true53
  %cond60 = phi i64 [ %42, %cond.true53 ], [ %call58, %cond.false57 ]
  store i64 %cond60, i64* %pos1_iv, align 8
  %44 = load %struct.sv*, %struct.sv** %pos_sv, align 8
  %sv_flags61 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags61, align 4
  %and62 = and i32 %45, -2147483392
  %cmp63 = icmp eq i32 %and62, -2147483392
  %conv64 = zext i1 %cmp63 to i32
  store i32 %conv64, i32* %pos1_is_uv, align 4
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %46, i32 -1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  %47 = load %struct.sv*, %struct.sv** %46, align 8
  store %struct.sv* %47, %struct.sv** %sv, align 8
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private66 = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 6
  %49 = load i8, i8* %op_private66, align 1
  %conv67 = zext i8 %49 to i32
  %and68 = and i32 %conv67, 16
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %cond.end59
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr71 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 -1
  store %struct.sv** %incdec.ptr71, %struct.sv*** %sp, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  store %struct.sv* %51, %struct.sv** %repl_sv, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %cond.end59
  %52 = load i32, i32* %lvalue, align 4
  %tobool73 = icmp ne i32 %52, 0
  br i1 %tobool73, label %land.lhs.true, label %if.end108

land.lhs.true:                                    ; preds = %if.end72
  %53 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %tobool74 = icmp ne %struct.sv* %53, null
  br i1 %tobool74, label %if.end108, label %if.then75

if.then75:                                        ; preds = %land.lhs.true
  %call76 = call %struct.sv* @Perl_newSV_type(i32 10)
  %call77 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call76)
  store %struct.sv* %call77, %struct.sv** %ret, align 8
  %54 = load %struct.sv*, %struct.sv** %ret, align 8
  call void @Perl_sv_magic(%struct.sv* %54, %struct.sv* null, i32 120, i8* null, i32 0)
  %55 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any78 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any78, align 8
  %57 = bitcast i8* %56 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %57, i32 0, i32 9
  store i8 120, i8* %xlv_type, align 8
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  %59 = bitcast %struct.sv* %58 to i8*
  %60 = bitcast i8* %59 to %struct.sv*
  %call79 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %60)
  %61 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any80 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any80, align 8
  %63 = bitcast i8* %62 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %63, i32 0, i32 8
  store %struct.sv* %call79, %struct.sv** %xlv_targ, align 8
  %64 = load i32, i32* %pos1_is_uv, align 4
  %tobool81 = icmp ne i32 %64, 0
  br i1 %tobool81, label %cond.true84, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then75
  %65 = load i64, i64* %pos1_iv, align 8
  %cmp82 = icmp sge i64 %65, 0
  br i1 %cmp82, label %cond.true84, label %cond.false85

cond.true84:                                      ; preds = %lor.lhs.false, %if.then75
  %66 = load i64, i64* %pos1_iv, align 8
  br label %cond.end89

cond.false85:                                     ; preds = %lor.lhs.false
  %67 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any86 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 0
  %68 = load i8*, i8** %sv_any86, align 8
  %69 = bitcast i8* %68 to %struct.xpvlv*
  %xlv_flags = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %69, i32 0, i32 10
  %70 = load i8, i8* %xlv_flags, align 1
  %conv87 = sext i8 %70 to i32
  %or = or i32 %conv87, 1
  %conv88 = trunc i32 %or to i8
  store i8 %conv88, i8* %xlv_flags, align 1
  %71 = load i64, i64* %pos1_iv, align 8
  %sub = sub nsw i64 0, %71
  br label %cond.end89

cond.end89:                                       ; preds = %cond.false85, %cond.true84
  %cond90 = phi i64 [ %66, %cond.true84 ], [ %sub, %cond.false85 ]
  %72 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any91 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 0
  %73 = load i8*, i8** %sv_any91, align 8
  %74 = bitcast i8* %73 to %struct.xpvlv*
  %xlv_targoff_u = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %74, i32 0, i32 6
  %xlvu_targoff = bitcast %union.anon.20* %xlv_targoff_u to i64*
  store i64 %cond90, i64* %xlvu_targoff, align 8
  %75 = load i32, i32* %len_is_uv, align 4
  %tobool92 = icmp ne i32 %75, 0
  br i1 %tobool92, label %cond.true96, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %cond.end89
  %76 = load i64, i64* %len_iv, align 8
  %cmp94 = icmp sgt i64 %76, 0
  br i1 %cmp94, label %cond.true96, label %cond.false97

cond.true96:                                      ; preds = %lor.lhs.false93, %cond.end89
  %77 = load i64, i64* %len_iv, align 8
  br label %cond.end104

cond.false97:                                     ; preds = %lor.lhs.false93
  %78 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any98 = getelementptr inbounds %struct.sv, %struct.sv* %78, i32 0, i32 0
  %79 = load i8*, i8** %sv_any98, align 8
  %80 = bitcast i8* %79 to %struct.xpvlv*
  %xlv_flags99 = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %80, i32 0, i32 10
  %81 = load i8, i8* %xlv_flags99, align 1
  %conv100 = sext i8 %81 to i32
  %or101 = or i32 %conv100, 2
  %conv102 = trunc i32 %or101 to i8
  store i8 %conv102, i8* %xlv_flags99, align 1
  %82 = load i64, i64* %len_iv, align 8
  %sub103 = sub nsw i64 0, %82
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false97, %cond.true96
  %cond105 = phi i64 [ %77, %cond.true96 ], [ %sub103, %cond.false97 ]
  %83 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any106 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 0
  %84 = load i8*, i8** %sv_any106, align 8
  %85 = bitcast i8* %84 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %85, i32 0, i32 7
  store i64 %cond105, i64* %xlv_targlen, align 8
  %86 = load %struct.sv*, %struct.sv** %ret, align 8
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr107 = getelementptr inbounds %struct.sv*, %struct.sv** %87, i32 1
  store %struct.sv** %incdec.ptr107, %struct.sv*** %sp, align 8
  store %struct.sv* %86, %struct.sv** %incdec.ptr107, align 8
  %88 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %88, %struct.sv*** @PL_stack_sp, align 8
  %89 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %89, i32 0, i32 0
  %90 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %90, %struct.op** %retval, align 8
  br label %return

if.end108:                                        ; preds = %land.lhs.true, %if.end72
  %91 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %tobool109 = icmp ne %struct.sv* %91, null
  br i1 %tobool109, label %if.then110, label %if.else182

if.then110:                                       ; preds = %if.end108
  %92 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %sv_flags111 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 2
  %93 = load i32, i32* %sv_flags111, align 4
  %and112 = and i32 %93, 2098176
  %cmp113 = icmp eq i32 %and112, 1024
  br i1 %cmp113, label %cond.true115, label %cond.false117

cond.true115:                                     ; preds = %if.then110
  %94 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %sv_any116 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 0
  %95 = load i8*, i8** %sv_any116, align 8
  %96 = bitcast i8* %95 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %96, i32 0, i32 2
  %97 = load i64, i64* %xpv_cur, align 8
  store i64 %97, i64* %repl_len, align 8
  %98 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %99 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %99, i64 0
  br label %cond.end119

cond.false117:                                    ; preds = %if.then110
  %100 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %call118 = call i8* @Perl_sv_2pv_flags(%struct.sv* %100, i64* %repl_len, i32 34)
  br label %cond.end119

cond.end119:                                      ; preds = %cond.false117, %cond.true115
  %cond120 = phi i8* [ %add.ptr, %cond.true115 ], [ %call118, %cond.false117 ]
  store i8* %cond120, i8** %repl, align 8
  %101 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags121 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 2
  %102 = load i32, i32* %sv_flags121, align 4
  %and122 = and i32 %102, 2097152
  %tobool123 = icmp ne i32 %and122, 0
  br i1 %tobool123, label %cond.true124, label %cond.false125

cond.true124:                                     ; preds = %cond.end119
  br i1 true, label %land.rhs126, label %land.end129

cond.false125:                                    ; preds = %cond.end119
  br i1 false, label %land.rhs126, label %land.end129

land.rhs126:                                      ; preds = %cond.false125, %cond.true124
  %103 = load %struct.sv*, %struct.sv** %sv, align 8
  %call127 = call i32 @Perl_mg_get(%struct.sv* %103)
  %tobool128 = icmp ne i32 %call127, 0
  br label %land.end129

land.end129:                                      ; preds = %land.rhs126, %cond.false125, %cond.true124
  %104 = phi i1 [ false, %cond.false125 ], [ false, %cond.true124 ], [ %tobool128, %land.rhs126 ]
  %land.ext = zext i1 %104 to i32
  %105 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 2
  %106 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %106, 2048
  %tobool132 = icmp ne i32 %and131, 0
  br i1 %tobool132, label %if.then133, label %if.end134

if.then133:                                       ; preds = %land.end129
  call void (i32, i8*, ...) @Perl_ck_warner(i32 27, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.37, i64 0, i64 0))
  br label %if.end134

if.end134:                                        ; preds = %if.then133, %land.end129
  %107 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags135 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags135, align 4
  %and136 = and i32 %108, 430018304
  %cmp137 = icmp eq i32 %and136, 1024
  br i1 %cmp137, label %cond.true139, label %cond.false144

cond.true139:                                     ; preds = %if.end134
  %109 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any140 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 0
  %110 = load i8*, i8** %sv_any140, align 8
  %111 = bitcast i8* %110 to %struct.xpv*
  %xpv_cur141 = getelementptr inbounds %struct.xpv, %struct.xpv* %111, i32 0, i32 2
  %112 = load i64, i64* %xpv_cur141, align 8
  store i64 %112, i64* %curlen, align 8
  %113 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u142 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 3
  %svu_pv143 = bitcast %union.anon* %sv_u142 to i8**
  %114 = load i8*, i8** %svu_pv143, align 8
  br label %cond.end146

cond.false144:                                    ; preds = %if.end134
  %115 = load %struct.sv*, %struct.sv** %sv, align 8
  %call145 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %115, i64* %curlen, i32 0)
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false144, %cond.true139
  %cond147 = phi i8* [ %114, %cond.true139 ], [ %call145, %cond.false144 ]
  store i8* %cond147, i8** %tmps, align 8
  %116 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %sv_flags148 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 2
  %117 = load i32, i32* %sv_flags148, align 4
  %and149 = and i32 %117, 536870912
  %tobool150 = icmp ne i32 %and149, 0
  br i1 %tobool150, label %land.lhs.true151, label %if.else170

land.lhs.true151:                                 ; preds = %cond.end146
  %118 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %118, i32 0, i32 10
  %119 = load i32, i32* %cop_hints, align 8
  %add = add i32 %119, 0
  %and152 = and i32 %add, 8
  %tobool153 = icmp ne i32 %and152, 0
  br i1 %tobool153, label %if.else170, label %land.lhs.true154

land.lhs.true154:                                 ; preds = %land.lhs.true151
  %120 = load i64, i64* %repl_len, align 8
  %tobool155 = icmp ne i64 %120, 0
  br i1 %tobool155, label %if.then156, label %if.else170

if.then156:                                       ; preds = %land.lhs.true154
  %121 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags157, align 4
  %and158 = and i32 %122, 536870912
  %tobool159 = icmp ne i32 %and158, 0
  br i1 %tobool159, label %land.lhs.true160, label %if.then165

land.lhs.true160:                                 ; preds = %if.then156
  %123 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints161 = getelementptr inbounds %struct.cop, %struct.cop* %123, i32 0, i32 10
  %124 = load i32, i32* %cop_hints161, align 8
  %add162 = add i32 %124, 0
  %and163 = and i32 %add162, 8
  %tobool164 = icmp ne i32 %and163, 0
  br i1 %tobool164, label %if.then165, label %if.end169

if.then165:                                       ; preds = %land.lhs.true160, %if.then156
  %125 = load %struct.sv*, %struct.sv** %sv, align 8
  %call166 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %125, i32 0, i64 0)
  %126 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any167 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 0
  %127 = load i8*, i8** %sv_any167, align 8
  %128 = bitcast i8* %127 to %struct.xpv*
  %xpv_cur168 = getelementptr inbounds %struct.xpv, %struct.xpv* %128, i32 0, i32 2
  %129 = load i64, i64* %xpv_cur168, align 8
  store i64 %129, i64* %curlen, align 8
  br label %if.end169

if.end169:                                        ; preds = %if.then165, %land.lhs.true160
  br label %if.end181

if.else170:                                       ; preds = %land.lhs.true154, %land.lhs.true151, %cond.end146
  %130 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %131, 536870912
  %tobool173 = icmp ne i32 %and172, 0
  br i1 %tobool173, label %land.lhs.true174, label %if.end180

land.lhs.true174:                                 ; preds = %if.else170
  %132 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints175 = getelementptr inbounds %struct.cop, %struct.cop* %132, i32 0, i32 10
  %133 = load i32, i32* %cop_hints175, align 8
  %add176 = add i32 %133, 0
  %and177 = and i32 %add176, 8
  %tobool178 = icmp ne i32 %and177, 0
  br i1 %tobool178, label %if.end180, label %if.then179

if.then179:                                       ; preds = %land.lhs.true174
  store i8 1, i8* %repl_need_utf8_upgrade, align 1
  br label %if.end180

if.end180:                                        ; preds = %if.then179, %land.lhs.true174, %if.else170
  br label %if.end181

if.end181:                                        ; preds = %if.end180, %if.end169
  br label %if.end197

if.else182:                                       ; preds = %if.end108
  %134 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags183 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags183, align 4
  %and184 = and i32 %135, 2098176
  %cmp185 = icmp eq i32 %and184, 1024
  br i1 %cmp185, label %cond.true187, label %cond.false193

cond.true187:                                     ; preds = %if.else182
  %136 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any188 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 0
  %137 = load i8*, i8** %sv_any188, align 8
  %138 = bitcast i8* %137 to %struct.xpv*
  %xpv_cur189 = getelementptr inbounds %struct.xpv, %struct.xpv* %138, i32 0, i32 2
  %139 = load i64, i64* %xpv_cur189, align 8
  store i64 %139, i64* %curlen, align 8
  %140 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u190 = getelementptr inbounds %struct.sv, %struct.sv* %140, i32 0, i32 3
  %svu_pv191 = bitcast %union.anon* %sv_u190 to i8**
  %141 = load i8*, i8** %svu_pv191, align 8
  %add.ptr192 = getelementptr inbounds i8, i8* %141, i64 0
  br label %cond.end195

cond.false193:                                    ; preds = %if.else182
  %142 = load %struct.sv*, %struct.sv** %sv, align 8
  %call194 = call i8* @Perl_sv_2pv_flags(%struct.sv* %142, i64* %curlen, i32 34)
  br label %cond.end195

cond.end195:                                      ; preds = %cond.false193, %cond.true187
  %cond196 = phi i8* [ %add.ptr192, %cond.true187 ], [ %call194, %cond.false193 ]
  store i8* %cond196, i8** %tmps, align 8
  br label %if.end197

if.end197:                                        ; preds = %cond.end195, %if.end181
  %143 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags198 = getelementptr inbounds %struct.sv, %struct.sv* %143, i32 0, i32 2
  %144 = load i32, i32* %sv_flags198, align 4
  %and199 = and i32 %144, 536870912
  %tobool200 = icmp ne i32 %and199, 0
  br i1 %tobool200, label %land.lhs.true201, label %if.else238

land.lhs.true201:                                 ; preds = %if.end197
  %145 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints202 = getelementptr inbounds %struct.cop, %struct.cop* %145, i32 0, i32 10
  %146 = load i32, i32* %cop_hints202, align 8
  %add203 = add i32 %146, 0
  %and204 = and i32 %add203, 8
  %tobool205 = icmp ne i32 %and204, 0
  br i1 %tobool205, label %if.else238, label %if.then206

if.then206:                                       ; preds = %land.lhs.true201
  %147 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags207, align 4
  %and208 = and i32 %148, 2097152
  %tobool209 = icmp ne i32 %and208, 0
  br i1 %tobool209, label %cond.true226, label %lor.lhs.false210

lor.lhs.false210:                                 ; preds = %if.then206
  %149 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags211 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags211, align 4
  %and212 = and i32 %150, 2048
  %tobool213 = icmp ne i32 %and212, 0
  br i1 %tobool213, label %land.lhs.true214, label %cond.false229

land.lhs.true214:                                 ; preds = %lor.lhs.false210
  %151 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u215 = getelementptr inbounds %struct.sv, %struct.sv* %151, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u215 to %struct.sv**
  %152 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags216 = getelementptr inbounds %struct.sv, %struct.sv* %152, i32 0, i32 2
  %153 = load i32, i32* %sv_flags216, align 4
  %and217 = and i32 %153, 1048576
  %tobool218 = icmp ne i32 %and217, 0
  br i1 %tobool218, label %land.lhs.true219, label %cond.false229

land.lhs.true219:                                 ; preds = %land.lhs.true214
  %154 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u220 = getelementptr inbounds %struct.sv, %struct.sv* %154, i32 0, i32 3
  %svu_rv221 = bitcast %union.anon* %sv_u220 to %struct.sv**
  %155 = load %struct.sv*, %struct.sv** %svu_rv221, align 8
  %sv_any222 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 0
  %156 = load i8*, i8** %sv_any222, align 8
  %157 = bitcast i8* %156 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %157, i32 0, i32 0
  %158 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags223 = getelementptr inbounds %struct.hv, %struct.hv* %158, i32 0, i32 2
  %159 = load i32, i32* %sv_flags223, align 4
  %and224 = and i32 %159, 268435456
  %tobool225 = icmp ne i32 %and224, 0
  br i1 %tobool225, label %cond.true226, label %cond.false229

cond.true226:                                     ; preds = %land.lhs.true219, %if.then206
  %160 = load i8*, i8** %tmps, align 8
  %161 = load i8*, i8** %tmps, align 8
  %162 = load i64, i64* %curlen, align 8
  %add.ptr227 = getelementptr inbounds i8, i8* %161, i64 %162
  %call228 = call i64 @Perl_utf8_length(i8* %160, i8* %add.ptr227)
  br label %cond.end231

cond.false229:                                    ; preds = %land.lhs.true219, %land.lhs.true214, %lor.lhs.false210
  %163 = load %struct.sv*, %struct.sv** %sv, align 8
  %call230 = call i64 @Perl_sv_len_utf8(%struct.sv* %163)
  br label %cond.end231

cond.end231:                                      ; preds = %cond.false229, %cond.true226
  %cond232 = phi i64 [ %call228, %cond.true226 ], [ %call230, %cond.false229 ]
  store i64 %cond232, i64* %utf8_curlen, align 8
  %164 = load i64, i64* %utf8_curlen, align 8
  %165 = load i64, i64* %curlen, align 8
  %cmp233 = icmp eq i64 %164, %165
  br i1 %cmp233, label %if.then235, label %if.else236

if.then235:                                       ; preds = %cond.end231
  store i64 0, i64* %utf8_curlen, align 8
  br label %if.end237

if.else236:                                       ; preds = %cond.end231
  %166 = load i64, i64* %utf8_curlen, align 8
  store i64 %166, i64* %curlen, align 8
  br label %if.end237

if.end237:                                        ; preds = %if.else236, %if.then235
  br label %if.end239

if.else238:                                       ; preds = %land.lhs.true201, %if.end197
  store i64 0, i64* %utf8_curlen, align 8
  br label %if.end239

if.end239:                                        ; preds = %if.else238, %if.end237
  %167 = load i64, i64* %curlen, align 8
  %168 = load i64, i64* %pos1_iv, align 8
  %169 = load i32, i32* %pos1_is_uv, align 4
  %tobool240 = icmp ne i32 %169, 0
  %170 = load i64, i64* %len_iv, align 8
  %171 = load i32, i32* %len_is_uv, align 4
  %tobool241 = icmp ne i32 %171, 0
  %call242 = call zeroext i1 @Perl_translate_substr_offsets(i64 %167, i64 %168, i1 zeroext %tobool240, i64 %170, i1 zeroext %tobool241, i64* %pos, i64* %len)
  br i1 %call242, label %if.end244, label %if.then243

if.then243:                                       ; preds = %if.end239
  br label %bound_fail

if.end244:                                        ; preds = %if.end239
  %172 = load i64, i64* %len, align 8
  store i64 %172, i64* %byte_len, align 8
  %173 = load i64, i64* %utf8_curlen, align 8
  %tobool245 = icmp ne i64 %173, 0
  br i1 %tobool245, label %cond.true246, label %cond.false248

cond.true246:                                     ; preds = %if.end244
  %174 = load %struct.sv*, %struct.sv** %sv, align 8
  %175 = load i8*, i8** %tmps, align 8
  %176 = load i64, i64* %pos, align 8
  %call247 = call i64 @S_sv_or_pv_pos_u2b(%struct.sv* %174, i8* %175, i64 %176, i64* %byte_len)
  br label %cond.end249

cond.false248:                                    ; preds = %if.end244
  %177 = load i64, i64* %pos, align 8
  br label %cond.end249

cond.end249:                                      ; preds = %cond.false248, %cond.true246
  %cond250 = phi i64 [ %call247, %cond.true246 ], [ %177, %cond.false248 ]
  store i64 %cond250, i64* %byte_pos, align 8
  %178 = load i64, i64* %byte_pos, align 8
  %179 = load i8*, i8** %tmps, align 8
  %add.ptr251 = getelementptr inbounds i8, i8* %179, i64 %178
  store i8* %add.ptr251, i8** %tmps, align 8
  %180 = load i8, i8* %rvalue, align 1
  %tobool252 = trunc i8 %180 to i1
  br i1 %tobool252, label %if.then253, label %if.end267

if.then253:                                       ; preds = %cond.end249
  br label %do.body

do.body:                                          ; preds = %if.then253
  %181 = load i8, i8* @PL_tainting, align 1
  %tobool254 = trunc i8 %181 to i1
  br i1 %tobool254, label %cond.true256, label %cond.false257

cond.true256:                                     ; preds = %do.body
  br i1 true, label %if.then258, label %if.end259

cond.false257:                                    ; preds = %do.body
  br i1 false, label %if.then258, label %if.end259

if.then258:                                       ; preds = %cond.false257, %cond.true256
  %182 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_untaint(%struct.sv* %182)
  br label %if.end259

if.end259:                                        ; preds = %if.then258, %cond.false257, %cond.true256
  br label %do.end

do.end:                                           ; preds = %if.end259
  %183 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags260 = getelementptr inbounds %struct.sv, %struct.sv* %183, i32 0, i32 2
  %184 = load i32, i32* %sv_flags260, align 4
  %and261 = and i32 %184, -536870913
  store i32 %and261, i32* %sv_flags260, align 4
  %185 = load %struct.sv*, %struct.sv** %targ, align 8
  %186 = load i8*, i8** %tmps, align 8
  %187 = load i64, i64* %byte_len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %185, i8* %186, i64 %187)
  %188 = load i64, i64* %utf8_curlen, align 8
  %tobool262 = icmp ne i64 %188, 0
  br i1 %tobool262, label %if.then263, label %if.end266

if.then263:                                       ; preds = %do.end
  %189 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags264 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 2
  %190 = load i32, i32* %sv_flags264, align 4
  %or265 = or i32 %190, 536870912
  store i32 %or265, i32* %sv_flags264, align 4
  br label %if.end266

if.end266:                                        ; preds = %if.then263, %do.end
  br label %if.end267

if.end267:                                        ; preds = %if.end266, %cond.end249
  %191 = load i8*, i8** %repl, align 8
  %tobool268 = icmp ne i8* %191, null
  br i1 %tobool268, label %if.then269, label %if.end304

if.then269:                                       ; preds = %if.end267
  store %struct.sv* null, %struct.sv** %repl_sv_copy, align 8
  %192 = load i8, i8* %repl_need_utf8_upgrade, align 1
  %tobool270 = trunc i8 %192 to i1
  br i1 %tobool270, label %if.then271, label %if.end288

if.then271:                                       ; preds = %if.then269
  %193 = load %struct.sv*, %struct.sv** %repl_sv, align 8
  %call272 = call %struct.sv* @Perl_newSVsv(%struct.sv* %193)
  store %struct.sv* %call272, %struct.sv** %repl_sv_copy, align 8
  %194 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %call273 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %194, i32 2, i64 0)
  %195 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %sv_flags274 = getelementptr inbounds %struct.sv, %struct.sv* %195, i32 0, i32 2
  %196 = load i32, i32* %sv_flags274, align 4
  %and275 = and i32 %196, 2098176
  %cmp276 = icmp eq i32 %and275, 1024
  br i1 %cmp276, label %cond.true278, label %cond.false284

cond.true278:                                     ; preds = %if.then271
  %197 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %sv_any279 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 0
  %198 = load i8*, i8** %sv_any279, align 8
  %199 = bitcast i8* %198 to %struct.xpv*
  %xpv_cur280 = getelementptr inbounds %struct.xpv, %struct.xpv* %199, i32 0, i32 2
  %200 = load i64, i64* %xpv_cur280, align 8
  store i64 %200, i64* %repl_len, align 8
  %201 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %sv_u281 = getelementptr inbounds %struct.sv, %struct.sv* %201, i32 0, i32 3
  %svu_pv282 = bitcast %union.anon* %sv_u281 to i8**
  %202 = load i8*, i8** %svu_pv282, align 8
  %add.ptr283 = getelementptr inbounds i8, i8* %202, i64 0
  br label %cond.end286

cond.false284:                                    ; preds = %if.then271
  %203 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %call285 = call i8* @Perl_sv_2pv_flags(%struct.sv* %203, i64* %repl_len, i32 34)
  br label %cond.end286

cond.end286:                                      ; preds = %cond.false284, %cond.true278
  %cond287 = phi i8* [ %add.ptr283, %cond.true278 ], [ %call285, %cond.false284 ]
  store i8* %cond287, i8** %repl, align 8
  br label %if.end288

if.end288:                                        ; preds = %cond.end286, %if.then269
  %204 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags289 = getelementptr inbounds %struct.sv, %struct.sv* %204, i32 0, i32 2
  %205 = load i32, i32* %sv_flags289, align 4
  %and290 = and i32 %205, 65280
  %tobool291 = icmp ne i32 %and290, 0
  br i1 %tobool291, label %if.end303, label %lor.lhs.false292

lor.lhs.false292:                                 ; preds = %if.end288
  %206 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags293 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 2
  %207 = load i32, i32* %sv_flags293, align 4
  %and294 = and i32 %207, 255
  %cmp295 = icmp eq i32 %and294, 8
  br i1 %cmp295, label %if.end303, label %lor.lhs.false297

lor.lhs.false297:                                 ; preds = %lor.lhs.false292
  %208 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags298 = getelementptr inbounds %struct.sv, %struct.sv* %208, i32 0, i32 2
  %209 = load i32, i32* %sv_flags298, align 4
  %and299 = and i32 %209, 16826623
  %cmp300 = icmp eq i32 %and299, 16777226
  br i1 %cmp300, label %if.end303, label %if.then302

if.then302:                                       ; preds = %lor.lhs.false297
  %210 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setpvn(%struct.sv* %210, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i64 0)
  br label %if.end303

if.end303:                                        ; preds = %if.then302, %lor.lhs.false297, %lor.lhs.false292, %if.end288
  %211 = load %struct.sv*, %struct.sv** %sv, align 8
  %212 = load i64, i64* %byte_pos, align 8
  %213 = load i64, i64* %byte_len, align 8
  %214 = load i8*, i8** %repl, align 8
  %215 = load i64, i64* %repl_len, align 8
  call void @Perl_sv_insert_flags(%struct.sv* %211, i64 %212, i64 %213, i8* %214, i64 %215, i32 0)
  %216 = load %struct.sv*, %struct.sv** %repl_sv_copy, align 8
  %217 = bitcast %struct.sv* %216 to i8*
  %218 = bitcast i8* %217 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %218)
  br label %if.end304

if.end304:                                        ; preds = %if.end303, %if.end267
  %219 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private305 = getelementptr inbounds %struct.op, %struct.op* %219, i32 0, i32 6
  %220 = load i8, i8* %op_private305, align 1
  %conv306 = zext i8 %220 to i32
  %and307 = and i32 %conv306, 16
  %tobool308 = icmp ne i32 %and307, 0
  br i1 %tobool308, label %if.then309, label %if.else311

if.then309:                                       ; preds = %if.end304
  %221 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr310 = getelementptr inbounds %struct.sv*, %struct.sv** %221, i32 1
  store %struct.sv** %incdec.ptr310, %struct.sv*** %sp, align 8
  br label %if.end326

if.else311:                                       ; preds = %if.end304
  %222 = load i8, i8* %rvalue, align 1
  %tobool312 = trunc i8 %222 to i1
  br i1 %tobool312, label %if.then313, label %if.end325

if.then313:                                       ; preds = %if.else311
  br label %do.body314

do.body314:                                       ; preds = %if.then313
  %223 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 2
  %224 = load i32, i32* %sv_flags315, align 4
  %and316 = and i32 %224, 4194304
  %tobool317 = icmp ne i32 %and316, 0
  br i1 %tobool317, label %cond.true318, label %cond.false319

cond.true318:                                     ; preds = %do.body314
  br i1 true, label %if.then320, label %if.end322

cond.false319:                                    ; preds = %do.body314
  br i1 false, label %if.then320, label %if.end322

if.then320:                                       ; preds = %cond.false319, %cond.true318
  %225 = load %struct.sv*, %struct.sv** %targ, align 8
  %call321 = call i32 @Perl_mg_set(%struct.sv* %225)
  br label %if.end322

if.end322:                                        ; preds = %if.then320, %cond.false319, %cond.true318
  br label %do.end323

do.end323:                                        ; preds = %if.end322
  %226 = load %struct.sv*, %struct.sv** %targ, align 8
  %227 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr324 = getelementptr inbounds %struct.sv*, %struct.sv** %227, i32 1
  store %struct.sv** %incdec.ptr324, %struct.sv*** %sp, align 8
  store %struct.sv* %226, %struct.sv** %incdec.ptr324, align 8
  br label %if.end325

if.end325:                                        ; preds = %do.end323, %if.else311
  br label %if.end326

if.end326:                                        ; preds = %if.end325, %if.then309
  %228 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %228, %struct.sv*** @PL_stack_sp, align 8
  %229 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next327 = getelementptr inbounds %struct.op, %struct.op* %229, i32 0, i32 0
  %230 = load %struct.op*, %struct.op** %op_next327, align 8
  store %struct.op* %230, %struct.op** %retval, align 8
  br label %return

bound_fail:                                       ; preds = %if.then243
  %231 = load i8*, i8** %repl, align 8
  %tobool328 = icmp ne i8* %231, null
  br i1 %tobool328, label %if.then329, label %if.end330

if.then329:                                       ; preds = %bound_fail
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i64 0, i64 0))
  br label %if.end330

if.end330:                                        ; preds = %if.then329, %bound_fail
  call void (i32, i8*, ...) @Perl_ck_warner(i32 27, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.38, i64 0, i64 0))
  %232 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr331 = getelementptr inbounds %struct.sv*, %struct.sv** %232, i32 1
  store %struct.sv** %incdec.ptr331, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr331, align 8
  %233 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %233, %struct.sv*** @PL_stack_sp, align 8
  %234 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next332 = getelementptr inbounds %struct.op, %struct.op* %234, i32 0, i32 0
  %235 = load %struct.op*, %struct.op** %op_next332, align 8
  store %struct.op* %235, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end330, %if.end326, %cond.end104
  %236 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %236
}

declare dso_local i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv*, i32, i64) #1

declare dso_local i64 @Perl_utf8_length(i8*, i8*) #1

declare dso_local i64 @Perl_sv_len_utf8(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_sv_or_pv_pos_u2b(%struct.sv* %sv, i8* %pv, i64 %pos, i64* %lenp) #0 {
entry:
  %retval = alloca i64, align 8
  %sv.addr = alloca %struct.sv*, align 8
  %pv.addr = alloca i8*, align 8
  %pos.addr = alloca i64, align 8
  %lenp.addr = alloca i64*, align 8
  %hopped = alloca i8*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  store i8* %pv, i8** %pv.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  store i64* %lenp, i64** %lenp.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 2
  %3 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %3, 2048
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end20

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %5 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %6, 1048576
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %land.lhs.true7, label %if.end20

land.lhs.true7:                                   ; preds = %land.lhs.true
  %7 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_u8 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 3
  %svu_rv9 = bitcast %union.anon* %sv_u8 to %struct.sv**
  %8 = load %struct.sv*, %struct.sv** %svu_rv9, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 0
  %9 = load i8*, i8** %sv_any, align 8
  %10 = bitcast i8* %9 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %10, i32 0, i32 0
  %11 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags10 = getelementptr inbounds %struct.hv, %struct.hv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %12, 268435456
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %if.then, label %if.end20

if.then:                                          ; preds = %land.lhs.true7, %entry
  %13 = load i8*, i8** %pv.addr, align 8
  %14 = load i64, i64* %pos.addr, align 8
  %conv = trunc i64 %14 to i32
  %call = call i8* @Perl_utf8_hop(i8* %13, i32 %conv)
  store i8* %call, i8** %hopped, align 8
  %15 = load i64*, i64** %lenp.addr, align 8
  %tobool13 = icmp ne i64* %15, null
  br i1 %tobool13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then
  %16 = load i8*, i8** %hopped, align 8
  %17 = load i64*, i64** %lenp.addr, align 8
  %18 = load i64, i64* %17, align 8
  %conv15 = trunc i64 %18 to i32
  %call16 = call i8* @Perl_utf8_hop(i8* %16, i32 %conv15)
  %19 = load i8*, i8** %hopped, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %call16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %19 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %20 = load i64*, i64** %lenp.addr, align 8
  store i64 %sub.ptr.sub, i64* %20, align 8
  br label %if.end

if.end:                                           ; preds = %if.then14, %if.then
  %21 = load i8*, i8** %hopped, align 8
  %22 = load i8*, i8** %pv.addr, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %22 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  store i64 %sub.ptr.sub19, i64* %retval, align 8
  br label %return

if.end20:                                         ; preds = %land.lhs.true7, %land.lhs.true, %lor.lhs.false
  %23 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %24 = load i64, i64* %pos.addr, align 8
  %25 = load i64*, i64** %lenp.addr, align 8
  %call21 = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %23, i64 %24, i64* %25, i32 32)
  store i64 %call21, i64* %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.end
  %26 = load i64, i64* %retval, align 8
  ret i64 %26
}

declare dso_local void @Perl_sv_untaint(%struct.sv*) #1

declare dso_local void @Perl_sv_insert_flags(%struct.sv*, i64, i64, i8*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_SvREFCNT_dec(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  %rc = alloca i32, align 4
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %cmp = icmp ne %struct.sv* %0, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end6

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end6

if.then:                                          ; preds = %cond.false, %cond.true
  %1 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 1
  %2 = load i32, i32* %sv_refcnt, align 8
  store i32 %2, i32* %rc, align 4
  %3 = load i32, i32* %rc, align 4
  %cmp1 = icmp ugt i32 %3, 1
  br i1 %cmp1, label %cond.true2, label %cond.false3

cond.true2:                                       ; preds = %if.then
  br i1 true, label %if.then4, label %if.else

cond.false3:                                      ; preds = %if.then
  br i1 false, label %if.then4, label %if.else

if.then4:                                         ; preds = %cond.false3, %cond.true2
  %4 = load i32, i32* %rc, align 4
  %sub = sub i32 %4, 1
  %5 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt5 = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 1
  store i32 %sub, i32* %sv_refcnt5, align 8
  br label %if.end

if.else:                                          ; preds = %cond.false3, %cond.true2
  %6 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %7 = load i32, i32* %rc, align 4
  call void @Perl_sv_free2(%struct.sv* %6, i32 %7)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %cond.false, %cond.true
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_vec() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %src = alloca %struct.sv*, align 8
  %lvalue = alloca i32, align 4
  %ret = alloca %struct.sv*, align 8
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** @PL_Sv, align 8
  %3 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %5 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 0
  %6 = load i8*, i8** %sv_any, align 8
  %7 = bitcast i8* %6 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %7, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %8 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %9, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %8, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %size, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  store %struct.sv* %11, %struct.sv** @PL_Sv, align 8
  %12 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %13, 2097408
  %cmp4 = icmp eq i32 %and3, 256
  br i1 %cmp4, label %cond.true5, label %cond.false9

cond.true5:                                       ; preds = %cond.end
  %14 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any6 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 0
  %15 = load i8*, i8** %sv_any6, align 8
  %16 = bitcast i8* %15 to %struct.xpviv*
  %xiv_u7 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %16, i32 0, i32 4
  %xivu_iv8 = bitcast %union._xivu* %xiv_u7 to i64*
  %17 = load i64, i64* %xivu_iv8, align 8
  br label %cond.end11

cond.false9:                                      ; preds = %cond.end
  %18 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call10 = call i64 @Perl_sv_2iv_flags(%struct.sv* %18, i32 2)
  br label %cond.end11

cond.end11:                                       ; preds = %cond.false9, %cond.true5
  %cond12 = phi i64 [ %17, %cond.true5 ], [ %call10, %cond.false9 ]
  store i64 %cond12, i64* %offset, align 8
  %19 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr13 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i32 -1
  store %struct.sv** %incdec.ptr13, %struct.sv*** %sp, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  store %struct.sv* %20, %struct.sv** %src, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 5
  %22 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %22 to i32
  %and14 = and i32 %conv, 32
  %tobool = icmp ne i32 %and14, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end11
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  %24 = load i8, i8* %op_private, align 1
  %conv15 = zext i8 %24 to i32
  %and16 = and i32 %conv15, 8
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call18 = call i32 @Perl_is_lvalue_sub()
  %tobool19 = icmp ne i32 %call18, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %25 = phi i1 [ false, %lor.rhs ], [ %tobool19, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %cond.end11
  %26 = phi i1 [ true, %cond.end11 ], [ %25, %land.end ]
  %lor.ext = zext i1 %26 to i32
  store i32 %lor.ext, i32* %lvalue, align 4
  %27 = load i32, i32* %lvalue, align 4
  %tobool20 = icmp ne i32 %27, 0
  br i1 %tobool20, label %if.then, label %if.else

if.then:                                          ; preds = %lor.end
  %call21 = call %struct.sv* @Perl_newSV_type(i32 10)
  %call22 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call21)
  store %struct.sv* %call22, %struct.sv** %ret, align 8
  %28 = load %struct.sv*, %struct.sv** %ret, align 8
  call void @Perl_sv_magic(%struct.sv* %28, %struct.sv* null, i32 118, i8* null, i32 0)
  %29 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any23 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 0
  %30 = load i8*, i8** %sv_any23, align 8
  %31 = bitcast i8* %30 to %struct.xpvlv*
  %xlv_type = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %31, i32 0, i32 9
  store i8 118, i8* %xlv_type, align 8
  %32 = load %struct.sv*, %struct.sv** %src, align 8
  %33 = bitcast %struct.sv* %32 to i8*
  %34 = bitcast i8* %33 to %struct.sv*
  %call24 = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %34)
  %35 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any25 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any25, align 8
  %37 = bitcast i8* %36 to %struct.xpvlv*
  %xlv_targ = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %37, i32 0, i32 8
  store %struct.sv* %call24, %struct.sv** %xlv_targ, align 8
  %38 = load i64, i64* %offset, align 8
  %39 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any26 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any26, align 8
  %41 = bitcast i8* %40 to %struct.xpvlv*
  %xlv_targoff_u = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %41, i32 0, i32 6
  %xlvu_targoff = bitcast %union.anon.20* %xlv_targoff_u to i64*
  store i64 %38, i64* %xlvu_targoff, align 8
  %42 = load i64, i64* %size, align 8
  %43 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 0
  %44 = load i8*, i8** %sv_any27, align 8
  %45 = bitcast i8* %44 to %struct.xpvlv*
  %xlv_targlen = getelementptr inbounds %struct.xpvlv, %struct.xpvlv* %45, i32 0, i32 7
  store i64 %42, i64* %xlv_targlen, align 8
  br label %if.end33

if.else:                                          ; preds = %lor.end
  %46 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 3
  %48 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %46, i64 %48
  %49 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %49, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %50 = load i8, i8* @PL_tainting, align 1
  %tobool28 = trunc i8 %50 to i1
  br i1 %tobool28, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %do.body
  br i1 true, label %if.then32, label %if.end

cond.false31:                                     ; preds = %do.body
  br i1 false, label %if.then32, label %if.end

if.then32:                                        ; preds = %cond.false31, %cond.true30
  %51 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_untaint(%struct.sv* %51)
  br label %if.end

if.end:                                           ; preds = %if.then32, %cond.false31, %cond.true30
  br label %do.end

do.end:                                           ; preds = %if.end
  %52 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %52, %struct.sv** %ret, align 8
  br label %if.end33

if.end33:                                         ; preds = %do.end, %if.then
  %53 = load %struct.sv*, %struct.sv** %ret, align 8
  %54 = load %struct.sv*, %struct.sv** %src, align 8
  %55 = load i64, i64* %offset, align 8
  %56 = load i64, i64* %size, align 8
  %conv34 = trunc i64 %56 to i32
  %call35 = call i64 @Perl_do_vecget(%struct.sv* %54, i64 %55, i32 %conv34)
  call void @Perl_sv_setuv(%struct.sv* %53, i64 %call35)
  %57 = load i32, i32* %lvalue, align 4
  %tobool36 = icmp ne i32 %57, 0
  br i1 %tobool36, label %if.end48, label %if.then37

if.then37:                                        ; preds = %if.end33
  br label %do.body38

do.body38:                                        ; preds = %if.then37
  %58 = load %struct.sv*, %struct.sv** %ret, align 8
  %sv_flags39 = getelementptr inbounds %struct.sv, %struct.sv* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %59, 4194304
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %do.body38
  br i1 true, label %if.then44, label %if.end46

cond.false43:                                     ; preds = %do.body38
  br i1 false, label %if.then44, label %if.end46

if.then44:                                        ; preds = %cond.false43, %cond.true42
  %60 = load %struct.sv*, %struct.sv** %ret, align 8
  %call45 = call i32 @Perl_mg_set(%struct.sv* %60)
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %cond.false43, %cond.true42
  br label %do.end47

do.end47:                                         ; preds = %if.end46
  br label %if.end48

if.end48:                                         ; preds = %do.end47, %if.end33
  %61 = load %struct.sv*, %struct.sv** %ret, align 8
  %62 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr49 = getelementptr inbounds %struct.sv*, %struct.sv** %62, i32 1
  store %struct.sv** %incdec.ptr49, %struct.sv*** %sp, align 8
  store %struct.sv* %61, %struct.sv** %incdec.ptr49, align 8
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %63, %struct.sv*** @PL_stack_sp, align 8
  %64 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %64, i32 0, i32 0
  %65 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %65
}

declare dso_local i64 @Perl_do_vecget(%struct.sv*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_index() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %big = alloca %struct.sv*, align 8
  %little = alloca %struct.sv*, align 8
  %temp = alloca %struct.sv*, align 8
  %biglen = alloca i64, align 8
  %llen = alloca i64, align 8
  %offset = alloca i64, align 8
  %retval1 = alloca i64, align 8
  %big_p = alloca i8*, align 8
  %little_p = alloca i8*, align 8
  %big_utf8 = alloca i8, align 1
  %little_utf8 = alloca i8, align 1
  %is_index = alloca i8, align 1
  %threeargs = alloca i8, align 1
  %pv = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  store %struct.sv* null, %struct.sv** %temp, align 8
  store i64 0, i64* %llen, align 8
  store i64 0, i64* %offset, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp = icmp eq i32 %bf.cast, 123
  %frombool = zext i1 %cmp to i8
  store i8 %frombool, i8* %is_index, align 1
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 6
  %7 = load i8, i8* %op_private, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 15
  %cmp2 = icmp sge i32 %and, 3
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %tobool = icmp ne %struct.sv* %9, null
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %11 = load %struct.sv*, %struct.sv** %10, align 8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %12 = phi i1 [ true, %land.rhs ], [ false, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %13 = phi i1 [ false, %entry ], [ %12, %lor.end ]
  %frombool4 = zext i1 %13 to i8
  store i8 %frombool4, i8* %threeargs, align 1
  %14 = load i8, i8* %threeargs, align 1
  %tobool5 = trunc i8 %14 to i1
  br i1 %tobool5, label %if.then, label %if.end

if.then:                                          ; preds = %land.end
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 -1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** @PL_Sv, align 8
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and7 = and i32 %18, 2097408
  %cmp8 = icmp eq i32 %and7, 256
  br i1 %cmp8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any, align 8
  %21 = bitcast i8* %20 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %21, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %22 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %23 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %23, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %22, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %offset, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end, %land.end
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i32 -1
  store %struct.sv** %incdec.ptr10, %struct.sv*** %sp, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  store %struct.sv* %25, %struct.sv** %little, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr11 = getelementptr inbounds %struct.sv*, %struct.sv** %26, i32 -1
  store %struct.sv** %incdec.ptr11, %struct.sv*** %sp, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  store %struct.sv* %27, %struct.sv** %big, align 8
  %28 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_flags12 = getelementptr inbounds %struct.sv, %struct.sv* %28, i32 0, i32 2
  %29 = load i32, i32* %sv_flags12, align 4
  %and13 = and i32 %29, 2098176
  %cmp14 = icmp eq i32 %and13, 1024
  br i1 %cmp14, label %cond.true16, label %cond.false18

cond.true16:                                      ; preds = %if.end
  %30 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_any17 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any17, align 8
  %32 = bitcast i8* %31 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %32, i32 0, i32 2
  %33 = load i64, i64* %xpv_cur, align 8
  store i64 %33, i64* %biglen, align 8
  %34 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %35 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %35, i64 0
  br label %cond.end20

cond.false18:                                     ; preds = %if.end
  %36 = load %struct.sv*, %struct.sv** %big, align 8
  %call19 = call i8* @Perl_sv_2pv_flags(%struct.sv* %36, i64* %biglen, i32 34)
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false18, %cond.true16
  %cond21 = phi i8* [ %add.ptr, %cond.true16 ], [ %call19, %cond.false18 ]
  store i8* %cond21, i8** %big_p, align 8
  %37 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %38, 2098176
  %cmp24 = icmp eq i32 %and23, 1024
  br i1 %cmp24, label %cond.true26, label %cond.false32

cond.true26:                                      ; preds = %cond.end20
  %39 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any27, align 8
  %41 = bitcast i8* %40 to %struct.xpv*
  %xpv_cur28 = getelementptr inbounds %struct.xpv, %struct.xpv* %41, i32 0, i32 2
  %42 = load i64, i64* %xpv_cur28, align 8
  store i64 %42, i64* %llen, align 8
  %43 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u29 = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 3
  %svu_pv30 = bitcast %union.anon* %sv_u29 to i8**
  %44 = load i8*, i8** %svu_pv30, align 8
  %add.ptr31 = getelementptr inbounds i8, i8* %44, i64 0
  br label %cond.end34

cond.false32:                                     ; preds = %cond.end20
  %45 = load %struct.sv*, %struct.sv** %little, align 8
  %call33 = call i8* @Perl_sv_2pv_flags(%struct.sv* %45, i64* %llen, i32 34)
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true26
  %cond35 = phi i8* [ %add.ptr31, %cond.true26 ], [ %call33, %cond.false32 ]
  store i8* %cond35, i8** %little_p, align 8
  %46 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %47, 536870912
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %land.rhs39, label %land.end42

land.rhs39:                                       ; preds = %cond.end34
  %48 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %48, i32 0, i32 10
  %49 = load i32, i32* %cop_hints, align 8
  %add = add i32 %49, 0
  %and40 = and i32 %add, 8
  %tobool41 = icmp ne i32 %and40, 0
  %lnot = xor i1 %tobool41, true
  br label %land.end42

land.end42:                                       ; preds = %land.rhs39, %cond.end34
  %50 = phi i1 [ false, %cond.end34 ], [ %lnot, %land.rhs39 ]
  %frombool43 = zext i1 %50 to i8
  store i8 %frombool43, i8* %big_utf8, align 1
  %51 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %52, 536870912
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %land.rhs47, label %land.end53

land.rhs47:                                       ; preds = %land.end42
  %53 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints48 = getelementptr inbounds %struct.cop, %struct.cop* %53, i32 0, i32 10
  %54 = load i32, i32* %cop_hints48, align 8
  %add49 = add i32 %54, 0
  %and50 = and i32 %add49, 8
  %tobool51 = icmp ne i32 %and50, 0
  %lnot52 = xor i1 %tobool51, true
  br label %land.end53

land.end53:                                       ; preds = %land.rhs47, %land.end42
  %55 = phi i1 [ false, %land.end42 ], [ %lnot52, %land.rhs47 ]
  %frombool54 = zext i1 %55 to i8
  store i8 %frombool54, i8* %little_utf8, align 1
  %56 = load i8, i8* %big_utf8, align 1
  %tobool55 = trunc i8 %56 to i1
  %conv56 = zext i1 %tobool55 to i32
  %57 = load i8, i8* %little_utf8, align 1
  %tobool57 = trunc i8 %57 to i1
  %conv58 = zext i1 %tobool57 to i32
  %xor = xor i32 %conv56, %conv58
  %tobool59 = icmp ne i32 %xor, 0
  br i1 %tobool59, label %if.then60, label %if.end135

if.then60:                                        ; preds = %land.end53
  %58 = load i8, i8* %little_utf8, align 1
  %tobool61 = trunc i8 %58 to i1
  br i1 %tobool61, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then60
  %59 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool63 = icmp ne %struct.sv* %59, null
  br i1 %tobool63, label %cond.true69, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %60 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool64 = icmp ne %struct.sv* %60, null
  br i1 %tobool64, label %land.lhs.true65, label %cond.false70

land.lhs.true65:                                  ; preds = %lor.lhs.false
  %call66 = call %struct.sv* @Perl__get_encoding()
  %cmp67 = icmp ne %struct.sv* %call66, null
  br i1 %cmp67, label %cond.true69, label %cond.false70

cond.true69:                                      ; preds = %land.lhs.true65, %land.lhs.true
  br i1 true, label %if.else, label %if.then71

cond.false70:                                     ; preds = %land.lhs.true65, %lor.lhs.false
  br i1 false, label %if.else, label %if.then71

if.then71:                                        ; preds = %cond.false70, %cond.true69
  %61 = load i8*, i8** %little_p, align 8
  %call72 = call i8* @Perl_bytes_from_utf8(i8* %61, i64* %llen, i8* %little_utf8)
  store i8* %call72, i8** %pv, align 8
  %62 = load i8, i8* %little_utf8, align 1
  %tobool73 = trunc i8 %62 to i1
  br i1 %tobool73, label %if.then74, label %if.end75

if.then74:                                        ; preds = %if.then71
  store i64 -1, i64* %retval1, align 8
  br label %fail

if.end75:                                         ; preds = %if.then71
  %call76 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call76, %struct.sv** %temp, align 8
  store %struct.sv* %call76, %struct.sv** %little, align 8
  %63 = load %struct.sv*, %struct.sv** %temp, align 8
  %64 = load i8*, i8** %pv, align 8
  %65 = load i64, i64* %llen, align 8
  call void @Perl_sv_usepvn_flags(%struct.sv* %63, i8* %64, i64 %65, i32 0)
  %66 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u77 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 3
  %svu_pv78 = bitcast %union.anon* %sv_u77 to i8**
  %67 = load i8*, i8** %svu_pv78, align 8
  store i8* %67, i8** %little_p, align 8
  br label %if.end134

if.else:                                          ; preds = %cond.false70, %cond.true69, %if.then60
  %68 = load i8, i8* %little_utf8, align 1
  %tobool79 = trunc i8 %68 to i1
  br i1 %tobool79, label %cond.true81, label %cond.false83

cond.true81:                                      ; preds = %if.else
  %69 = load i8*, i8** %big_p, align 8
  %70 = load i64, i64* %biglen, align 8
  %call82 = call %struct.sv* @Perl_newSVpvn(i8* %69, i64 %70)
  br label %cond.end85

cond.false83:                                     ; preds = %if.else
  %71 = load i8*, i8** %little_p, align 8
  %72 = load i64, i64* %llen, align 8
  %call84 = call %struct.sv* @Perl_newSVpvn(i8* %71, i64 %72)
  br label %cond.end85

cond.end85:                                       ; preds = %cond.false83, %cond.true81
  %cond86 = phi %struct.sv* [ %call82, %cond.true81 ], [ %call84, %cond.false83 ]
  store %struct.sv* %cond86, %struct.sv** %temp, align 8
  %73 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool87 = icmp ne %struct.sv* %73, null
  br i1 %tobool87, label %cond.true94, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %cond.end85
  %74 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool89 = icmp ne %struct.sv* %74, null
  br i1 %tobool89, label %land.lhs.true90, label %cond.false95

land.lhs.true90:                                  ; preds = %lor.lhs.false88
  %call91 = call %struct.sv* @Perl__get_encoding()
  %cmp92 = icmp ne %struct.sv* %call91, null
  br i1 %cmp92, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %land.lhs.true90, %cond.end85
  br i1 true, label %if.then96, label %if.else99

cond.false95:                                     ; preds = %land.lhs.true90, %lor.lhs.false88
  br i1 false, label %if.then96, label %if.else99

if.then96:                                        ; preds = %cond.false95, %cond.true94
  %75 = load %struct.sv*, %struct.sv** %temp, align 8
  %call97 = call %struct.sv* @Perl__get_encoding()
  %call98 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %75, %struct.sv* %call97)
  br label %if.end101

if.else99:                                        ; preds = %cond.false95, %cond.true94
  %76 = load %struct.sv*, %struct.sv** %temp, align 8
  %call100 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %76, i32 2, i64 0)
  br label %if.end101

if.end101:                                        ; preds = %if.else99, %if.then96
  %77 = load i8, i8* %little_utf8, align 1
  %tobool102 = trunc i8 %77 to i1
  br i1 %tobool102, label %if.then103, label %if.else118

if.then103:                                       ; preds = %if.end101
  %78 = load %struct.sv*, %struct.sv** %temp, align 8
  store %struct.sv* %78, %struct.sv** %big, align 8
  store i8 1, i8* %big_utf8, align 1
  %79 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_flags104 = getelementptr inbounds %struct.sv, %struct.sv* %79, i32 0, i32 2
  %80 = load i32, i32* %sv_flags104, align 4
  %and105 = and i32 %80, 2098176
  %cmp106 = icmp eq i32 %and105, 1024
  br i1 %cmp106, label %cond.true108, label %cond.false114

cond.true108:                                     ; preds = %if.then103
  %81 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_any109 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 0
  %82 = load i8*, i8** %sv_any109, align 8
  %83 = bitcast i8* %82 to %struct.xpv*
  %xpv_cur110 = getelementptr inbounds %struct.xpv, %struct.xpv* %83, i32 0, i32 2
  %84 = load i64, i64* %xpv_cur110, align 8
  store i64 %84, i64* %biglen, align 8
  %85 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_u111 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 3
  %svu_pv112 = bitcast %union.anon* %sv_u111 to i8**
  %86 = load i8*, i8** %svu_pv112, align 8
  %add.ptr113 = getelementptr inbounds i8, i8* %86, i64 0
  br label %cond.end116

cond.false114:                                    ; preds = %if.then103
  %87 = load %struct.sv*, %struct.sv** %big, align 8
  %call115 = call i8* @Perl_sv_2pv_flags(%struct.sv* %87, i64* %biglen, i32 34)
  br label %cond.end116

cond.end116:                                      ; preds = %cond.false114, %cond.true108
  %cond117 = phi i8* [ %add.ptr113, %cond.true108 ], [ %call115, %cond.false114 ]
  store i8* %cond117, i8** %big_p, align 8
  br label %if.end133

if.else118:                                       ; preds = %if.end101
  %88 = load %struct.sv*, %struct.sv** %temp, align 8
  store %struct.sv* %88, %struct.sv** %little, align 8
  %89 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags119 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags119, align 4
  %and120 = and i32 %90, 2098176
  %cmp121 = icmp eq i32 %and120, 1024
  br i1 %cmp121, label %cond.true123, label %cond.false129

cond.true123:                                     ; preds = %if.else118
  %91 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_any124 = getelementptr inbounds %struct.sv, %struct.sv* %91, i32 0, i32 0
  %92 = load i8*, i8** %sv_any124, align 8
  %93 = bitcast i8* %92 to %struct.xpv*
  %xpv_cur125 = getelementptr inbounds %struct.xpv, %struct.xpv* %93, i32 0, i32 2
  %94 = load i64, i64* %xpv_cur125, align 8
  store i64 %94, i64* %llen, align 8
  %95 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u126 = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 3
  %svu_pv127 = bitcast %union.anon* %sv_u126 to i8**
  %96 = load i8*, i8** %svu_pv127, align 8
  %add.ptr128 = getelementptr inbounds i8, i8* %96, i64 0
  br label %cond.end131

cond.false129:                                    ; preds = %if.else118
  %97 = load %struct.sv*, %struct.sv** %little, align 8
  %call130 = call i8* @Perl_sv_2pv_flags(%struct.sv* %97, i64* %llen, i32 34)
  br label %cond.end131

cond.end131:                                      ; preds = %cond.false129, %cond.true123
  %cond132 = phi i8* [ %add.ptr128, %cond.true123 ], [ %call130, %cond.false129 ]
  store i8* %cond132, i8** %little_p, align 8
  br label %if.end133

if.end133:                                        ; preds = %cond.end131, %cond.end116
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end75
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %land.end53
  %98 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_flags136 = getelementptr inbounds %struct.sv, %struct.sv* %98, i32 0, i32 2
  %99 = load i32, i32* %sv_flags136, align 4
  %and137 = and i32 %99, 2097152
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %if.then155, label %lor.lhs.false139

lor.lhs.false139:                                 ; preds = %if.end135
  %100 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_flags140 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 2
  %101 = load i32, i32* %sv_flags140, align 4
  %and141 = and i32 %101, 2048
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %land.lhs.true143, label %if.end162

land.lhs.true143:                                 ; preds = %lor.lhs.false139
  %102 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_u144 = getelementptr inbounds %struct.sv, %struct.sv* %102, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u144 to %struct.sv**
  %103 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags145 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 2
  %104 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %104, 1048576
  %tobool147 = icmp ne i32 %and146, 0
  br i1 %tobool147, label %land.lhs.true148, label %if.end162

land.lhs.true148:                                 ; preds = %land.lhs.true143
  %105 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_u149 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_rv150 = bitcast %union.anon* %sv_u149 to %struct.sv**
  %106 = load %struct.sv*, %struct.sv** %svu_rv150, align 8
  %sv_any151 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 0
  %107 = load i8*, i8** %sv_any151, align 8
  %108 = bitcast i8* %107 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %108, i32 0, i32 0
  %109 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags152 = getelementptr inbounds %struct.hv, %struct.hv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags152, align 4
  %and153 = and i32 %110, 268435456
  %tobool154 = icmp ne i32 %and153, 0
  br i1 %tobool154, label %if.then155, label %if.end162

if.then155:                                       ; preds = %land.lhs.true148, %if.end135
  %111 = load i8*, i8** %big_p, align 8
  %112 = load i64, i64* %biglen, align 8
  %113 = load i8, i8* %big_utf8, align 1
  %tobool156 = trunc i8 %113 to i1
  %114 = zext i1 %tobool156 to i64
  %cond158 = select i1 %tobool156, i32 536870912, i32 0
  %or = or i32 524288, %cond158
  %call159 = call %struct.sv* @Perl_newSVpvn_flags(i8* %111, i64 %112, i32 %or)
  store %struct.sv* %call159, %struct.sv** %big, align 8
  %115 = load %struct.sv*, %struct.sv** %big, align 8
  %sv_u160 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 3
  %svu_pv161 = bitcast %union.anon* %sv_u160 to i8**
  %116 = load i8*, i8** %svu_pv161, align 8
  store i8* %116, i8** %big_p, align 8
  br label %if.end162

if.end162:                                        ; preds = %if.then155, %land.lhs.true148, %land.lhs.true143, %lor.lhs.false139
  %117 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags163 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags163, align 4
  %and164 = and i32 %118, 2097152
  %tobool165 = icmp ne i32 %and164, 0
  br i1 %tobool165, label %if.then201, label %lor.lhs.false166

lor.lhs.false166:                                 ; preds = %if.end162
  %119 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags167 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags167, align 4
  %and168 = and i32 %120, 2048
  %tobool169 = icmp ne i32 %and168, 0
  br i1 %tobool169, label %land.lhs.true170, label %lor.lhs.false184

land.lhs.true170:                                 ; preds = %lor.lhs.false166
  %121 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u171 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 3
  %svu_rv172 = bitcast %union.anon* %sv_u171 to %struct.sv**
  %122 = load %struct.sv*, %struct.sv** %svu_rv172, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 2
  %123 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %123, 1048576
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %land.lhs.true176, label %lor.lhs.false184

land.lhs.true176:                                 ; preds = %land.lhs.true170
  %124 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u177 = getelementptr inbounds %struct.sv, %struct.sv* %124, i32 0, i32 3
  %svu_rv178 = bitcast %union.anon* %sv_u177 to %struct.sv**
  %125 = load %struct.sv*, %struct.sv** %svu_rv178, align 8
  %sv_any179 = getelementptr inbounds %struct.sv, %struct.sv* %125, i32 0, i32 0
  %126 = load i8*, i8** %sv_any179, align 8
  %127 = bitcast i8* %126 to %struct.xpvmg*
  %xmg_stash180 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %127, i32 0, i32 0
  %128 = load %struct.hv*, %struct.hv** %xmg_stash180, align 8
  %sv_flags181 = getelementptr inbounds %struct.hv, %struct.hv* %128, i32 0, i32 2
  %129 = load i32, i32* %sv_flags181, align 4
  %and182 = and i32 %129, 268435456
  %tobool183 = icmp ne i32 %and182, 0
  br i1 %tobool183, label %if.then201, label %lor.lhs.false184

lor.lhs.false184:                                 ; preds = %land.lhs.true176, %land.lhs.true170, %lor.lhs.false166
  %130 = load i8, i8* %is_index, align 1
  %tobool185 = trunc i8 %130 to i1
  br i1 %tobool185, label %land.lhs.true187, label %if.end209

land.lhs.true187:                                 ; preds = %lor.lhs.false184
  %131 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags188 = getelementptr inbounds %struct.sv, %struct.sv* %131, i32 0, i32 2
  %132 = load i32, i32* %sv_flags188, align 4
  %and189 = and i32 %132, 65280
  %tobool190 = icmp ne i32 %and189, 0
  br i1 %tobool190, label %if.end209, label %lor.lhs.false191

lor.lhs.false191:                                 ; preds = %land.lhs.true187
  %133 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags192 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 2
  %134 = load i32, i32* %sv_flags192, align 4
  %and193 = and i32 %134, 255
  %cmp194 = icmp eq i32 %and193, 8
  br i1 %cmp194, label %if.end209, label %lor.lhs.false196

lor.lhs.false196:                                 ; preds = %lor.lhs.false191
  %135 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_flags197 = getelementptr inbounds %struct.sv, %struct.sv* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags197, align 4
  %and198 = and i32 %136, 16826623
  %cmp199 = icmp eq i32 %and198, 16777226
  br i1 %cmp199, label %if.end209, label %if.then201

if.then201:                                       ; preds = %lor.lhs.false196, %land.lhs.true176, %if.end162
  %137 = load i8*, i8** %little_p, align 8
  %138 = load i64, i64* %llen, align 8
  %139 = load i8, i8* %little_utf8, align 1
  %tobool202 = trunc i8 %139 to i1
  %140 = zext i1 %tobool202 to i64
  %cond204 = select i1 %tobool202, i32 536870912, i32 0
  %or205 = or i32 524288, %cond204
  %call206 = call %struct.sv* @Perl_newSVpvn_flags(i8* %137, i64 %138, i32 %or205)
  store %struct.sv* %call206, %struct.sv** %little, align 8
  %141 = load %struct.sv*, %struct.sv** %little, align 8
  %sv_u207 = getelementptr inbounds %struct.sv, %struct.sv* %141, i32 0, i32 3
  %svu_pv208 = bitcast %union.anon* %sv_u207 to i8**
  %142 = load i8*, i8** %svu_pv208, align 8
  store i8* %142, i8** %little_p, align 8
  br label %if.end209

if.end209:                                        ; preds = %if.then201, %lor.lhs.false196, %lor.lhs.false191, %land.lhs.true187, %lor.lhs.false184
  %143 = load i8, i8* %threeargs, align 1
  %tobool210 = trunc i8 %143 to i1
  br i1 %tobool210, label %if.else218, label %if.then211

if.then211:                                       ; preds = %if.end209
  %144 = load i8, i8* %is_index, align 1
  %tobool212 = trunc i8 %144 to i1
  br i1 %tobool212, label %cond.true214, label %cond.false215

cond.true214:                                     ; preds = %if.then211
  br label %cond.end216

cond.false215:                                    ; preds = %if.then211
  %145 = load i64, i64* %biglen, align 8
  br label %cond.end216

cond.end216:                                      ; preds = %cond.false215, %cond.true214
  %cond217 = phi i64 [ 0, %cond.true214 ], [ %145, %cond.false215 ]
  store i64 %cond217, i64* %offset, align 8
  br label %if.end231

if.else218:                                       ; preds = %if.end209
  %146 = load i8, i8* %big_utf8, align 1
  %tobool219 = trunc i8 %146 to i1
  br i1 %tobool219, label %land.lhs.true221, label %if.end226

land.lhs.true221:                                 ; preds = %if.else218
  %147 = load i64, i64* %offset, align 8
  %cmp222 = icmp sgt i64 %147, 0
  br i1 %cmp222, label %if.then224, label %if.end226

if.then224:                                       ; preds = %land.lhs.true221
  %148 = load %struct.sv*, %struct.sv** %big, align 8
  %149 = load i64, i64* %offset, align 8
  %call225 = call i64 @Perl_sv_pos_u2b_flags(%struct.sv* %148, i64 %149, i64* null, i32 32)
  store i64 %call225, i64* %offset, align 8
  br label %if.end226

if.end226:                                        ; preds = %if.then224, %land.lhs.true221, %if.else218
  %150 = load i8, i8* %is_index, align 1
  %tobool227 = trunc i8 %150 to i1
  br i1 %tobool227, label %if.end230, label %if.then228

if.then228:                                       ; preds = %if.end226
  %151 = load i64, i64* %llen, align 8
  %152 = load i64, i64* %offset, align 8
  %add229 = add i64 %152, %151
  store i64 %add229, i64* %offset, align 8
  br label %if.end230

if.end230:                                        ; preds = %if.then228, %if.end226
  br label %if.end231

if.end231:                                        ; preds = %if.end230, %cond.end216
  %153 = load i64, i64* %offset, align 8
  %cmp232 = icmp slt i64 %153, 0
  br i1 %cmp232, label %if.then234, label %if.else235

if.then234:                                       ; preds = %if.end231
  store i64 0, i64* %offset, align 8
  br label %if.end240

if.else235:                                       ; preds = %if.end231
  %154 = load i64, i64* %offset, align 8
  %155 = load i64, i64* %biglen, align 8
  %cmp236 = icmp sgt i64 %154, %155
  br i1 %cmp236, label %if.then238, label %if.end239

if.then238:                                       ; preds = %if.else235
  %156 = load i64, i64* %biglen, align 8
  store i64 %156, i64* %offset, align 8
  br label %if.end239

if.end239:                                        ; preds = %if.then238, %if.else235
  br label %if.end240

if.end240:                                        ; preds = %if.end239, %if.then234
  %157 = load i8, i8* %is_index, align 1
  %tobool241 = trunc i8 %157 to i1
  br i1 %tobool241, label %cond.true243, label %cond.false247

cond.true243:                                     ; preds = %if.end240
  %158 = load i8*, i8** %big_p, align 8
  %159 = load i64, i64* %offset, align 8
  %add.ptr244 = getelementptr inbounds i8, i8* %158, i64 %159
  %160 = load i8*, i8** %big_p, align 8
  %161 = load i64, i64* %biglen, align 8
  %add.ptr245 = getelementptr inbounds i8, i8* %160, i64 %161
  %162 = load %struct.sv*, %struct.sv** %little, align 8
  %call246 = call i8* @Perl_fbm_instr(i8* %add.ptr244, i8* %add.ptr245, %struct.sv* %162, i32 0)
  br label %cond.end251

cond.false247:                                    ; preds = %if.end240
  %163 = load i8*, i8** %big_p, align 8
  %164 = load i8*, i8** %big_p, align 8
  %165 = load i64, i64* %offset, align 8
  %add.ptr248 = getelementptr inbounds i8, i8* %164, i64 %165
  %166 = load i8*, i8** %little_p, align 8
  %167 = load i8*, i8** %little_p, align 8
  %168 = load i64, i64* %llen, align 8
  %add.ptr249 = getelementptr inbounds i8, i8* %167, i64 %168
  %call250 = call i8* @Perl_rninstr(i8* %163, i8* %add.ptr248, i8* %166, i8* %add.ptr249)
  br label %cond.end251

cond.end251:                                      ; preds = %cond.false247, %cond.true243
  %cond252 = phi i8* [ %call246, %cond.true243 ], [ %call250, %cond.false247 ]
  store i8* %cond252, i8** %little_p, align 8
  %tobool253 = icmp ne i8* %cond252, null
  br i1 %tobool253, label %if.else255, label %if.then254

if.then254:                                       ; preds = %cond.end251
  store i64 -1, i64* %retval1, align 8
  br label %if.end264

if.else255:                                       ; preds = %cond.end251
  %169 = load i8*, i8** %little_p, align 8
  %170 = load i8*, i8** %big_p, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %169 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %170 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %retval1, align 8
  %171 = load i64, i64* %retval1, align 8
  %cmp256 = icmp sgt i64 %171, 1
  br i1 %cmp256, label %land.lhs.true258, label %if.end263

land.lhs.true258:                                 ; preds = %if.else255
  %172 = load i8, i8* %big_utf8, align 1
  %tobool259 = trunc i8 %172 to i1
  br i1 %tobool259, label %if.then261, label %if.end263

if.then261:                                       ; preds = %land.lhs.true258
  %173 = load %struct.sv*, %struct.sv** %big, align 8
  %174 = load i64, i64* %retval1, align 8
  %call262 = call i64 @Perl_sv_pos_b2u_flags(%struct.sv* %173, i64 %174, i32 32)
  store i64 %call262, i64* %retval1, align 8
  br label %if.end263

if.end263:                                        ; preds = %if.then261, %land.lhs.true258, %if.else255
  br label %if.end264

if.end264:                                        ; preds = %if.end263, %if.then254
  %175 = load %struct.sv*, %struct.sv** %temp, align 8
  %176 = bitcast %struct.sv* %175 to i8*
  %177 = bitcast i8* %176 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %177)
  br label %fail

fail:                                             ; preds = %if.end264, %if.then74
  br label %do.body

do.body:                                          ; preds = %fail
  %178 = load %struct.sv*, %struct.sv** %targ, align 8
  %179 = load i64, i64* %retval1, align 8
  call void @Perl_sv_setiv(%struct.sv* %178, i64 %179)
  br label %do.body265

do.body265:                                       ; preds = %do.body
  br label %do.body266

do.body266:                                       ; preds = %do.body265
  %180 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags267 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags267, align 4
  %and268 = and i32 %181, 4194304
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %cond.true270, label %cond.false271

cond.true270:                                     ; preds = %do.body266
  br i1 true, label %if.then272, label %if.end274

cond.false271:                                    ; preds = %do.body266
  br i1 false, label %if.then272, label %if.end274

if.then272:                                       ; preds = %cond.false271, %cond.true270
  %182 = load %struct.sv*, %struct.sv** %targ, align 8
  %call273 = call i32 @Perl_mg_set(%struct.sv* %182)
  br label %if.end274

if.end274:                                        ; preds = %if.then272, %cond.false271, %cond.true270
  br label %do.end

do.end:                                           ; preds = %if.end274
  %183 = load %struct.sv*, %struct.sv** %targ, align 8
  %184 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr275 = getelementptr inbounds %struct.sv*, %struct.sv** %184, i32 1
  store %struct.sv** %incdec.ptr275, %struct.sv*** %sp, align 8
  store %struct.sv* %183, %struct.sv** %incdec.ptr275, align 8
  br label %do.end276

do.end276:                                        ; preds = %do.end
  br label %do.end277

do.end277:                                        ; preds = %do.end276
  %185 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %185, %struct.sv*** @PL_stack_sp, align 8
  %186 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %186, i32 0, i32 0
  %187 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %187
}

declare dso_local %struct.sv* @Perl__get_encoding() #1

declare dso_local i8* @Perl_bytes_from_utf8(i8*, i64*, i8*) #1

declare dso_local %struct.sv* @Perl_newSV(i64) #1

declare dso_local void @Perl_sv_usepvn_flags(%struct.sv*, i8*, i64, i32) #1

declare dso_local i8* @Perl_sv_recode_to_utf8(%struct.sv*, %struct.sv*) #1

declare dso_local i64 @Perl_sv_pos_u2b_flags(%struct.sv*, i64, i64*, i32) #1

declare dso_local i8* @Perl_fbm_instr(i8*, i8*, %struct.sv*, i32) #1

declare dso_local i8* @Perl_rninstr(i8*, i8*, i8*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_sprintf() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %10 = load i8, i8* @PL_tainting, align 1
  %tobool = trunc i8 %10 to i1
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %11 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_untaint(%struct.sv* %11)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %12 = load %struct.sv*, %struct.sv** %targ, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast2 = ptrtoint %struct.sv** %13 to i64
  %sub.ptr.rhs.cast3 = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.sub4 = sub i64 %sub.ptr.lhs.cast2, %sub.ptr.rhs.cast3
  %sub.ptr.div5 = sdiv exact i64 %sub.ptr.sub4, 8
  %conv6 = trunc i64 %sub.ptr.div5 to i32
  %15 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr7 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 1
  call void @Perl_do_sprintf(%struct.sv* %12, i32 %conv6, %struct.sv** %add.ptr7)
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags, align 4
  %and = and i32 %17, 14680064
  %tobool8 = icmp ne i32 %and, 0
  br i1 %tobool8, label %land.lhs.true, label %cond.false11

land.lhs.true:                                    ; preds = %do.end
  %18 = load %struct.sv*, %struct.sv** %targ, align 8
  %call = call zeroext i1 @Perl_sv_tainted(%struct.sv* %18)
  br i1 %call, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then12, label %if.end13

cond.false11:                                     ; preds = %land.lhs.true, %do.end
  br i1 false, label %if.then12, label %if.end13

if.then12:                                        ; preds = %cond.false11, %cond.true10
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %cond.false11, %cond.true10
  %19 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %20 = load i32, i32* %origmark, align 4
  %idx.ext14 = sext i32 %20 to i64
  %add.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %19, i64 %idx.ext14
  store %struct.sv** %add.ptr15, %struct.sv*** %sp, align 8
  br label %do.body16

do.body16:                                        ; preds = %if.end13
  br label %do.body17

do.body17:                                        ; preds = %do.body16
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags18 = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags18, align 4
  %and19 = and i32 %22, 4194304
  %tobool20 = icmp ne i32 %and19, 0
  br i1 %tobool20, label %cond.true21, label %cond.false22

cond.true21:                                      ; preds = %do.body17
  br i1 true, label %if.then23, label %if.end25

cond.false22:                                     ; preds = %do.body17
  br i1 false, label %if.then23, label %if.end25

if.then23:                                        ; preds = %cond.false22, %cond.true21
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %call24 = call i32 @Perl_mg_set(%struct.sv* %23)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %cond.false22, %cond.true21
  br label %do.end26

do.end26:                                         ; preds = %if.end25
  %24 = load %struct.sv*, %struct.sv** %targ, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr27, %struct.sv*** %sp, align 8
  store %struct.sv* %24, %struct.sv** %incdec.ptr27, align 8
  br label %do.end28

do.end28:                                         ; preds = %do.end26
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %28
}

declare dso_local void @Perl_do_sprintf(%struct.sv*, i32, %struct.sv**) #1

declare dso_local zeroext i1 @Perl_sv_tainted(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ord() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %argsv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %argsv, align 8
  %7 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur, align 8
  store i64 %12, i64* %len, align 8
  %13 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %14 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %15, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %16 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool = icmp ne %struct.sv* %16, null
  br i1 %tobool, label %cond.true4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end
  %17 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool1 = icmp ne %struct.sv* %17, null
  br i1 %tobool1, label %land.lhs.true, label %cond.false5

land.lhs.true:                                    ; preds = %lor.lhs.false
  %call2 = call %struct.sv* @Perl__get_encoding()
  %cmp3 = icmp ne %struct.sv* %call2, null
  br i1 %cmp3, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %land.lhs.true, %cond.end
  br i1 true, label %land.lhs.true6, label %if.end

cond.false5:                                      ; preds = %land.lhs.true, %lor.lhs.false
  br i1 false, label %land.lhs.true6, label %if.end

land.lhs.true6:                                   ; preds = %cond.false5, %cond.true4
  %18 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %19, 1024
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true10, label %if.end

land.lhs.true10:                                  ; preds = %land.lhs.true6
  %20 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %21, 536870912
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %land.lhs.true14, label %if.then

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %22 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %22, i32 0, i32 10
  %23 = load i32, i32* %cop_hints, align 8
  %add = add i32 %23, 0
  %and15 = and i32 %add, 8
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true14, %land.lhs.true10
  %24 = load %struct.sv*, %struct.sv** %argsv, align 8
  %call17 = call %struct.sv* @Perl_newSVsv(%struct.sv* %24)
  %call18 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call17)
  store %struct.sv* %call18, %struct.sv** %tmpsv, align 8
  %25 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call19 = call %struct.sv* @Perl__get_encoding()
  %call20 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %25, %struct.sv* %call19)
  store i8* %call20, i8** %s, align 8
  %26 = load i8*, i8** %s, align 8
  %27 = load i8, i8* %26, align 1
  %idxprom = zext i8 %27 to i64
  %arrayidx21 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %28 = load i8, i8* %arrayidx21, align 1
  %conv = zext i8 %28 to i64
  store i64 %conv, i64* %len, align 8
  %29 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  store %struct.sv* %29, %struct.sv** %argsv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true14, %land.lhs.true6, %cond.false5, %cond.true4
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %31 = load %struct.sv*, %struct.sv** %argsv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %32, 536870912
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true25, label %cond.false32

land.lhs.true25:                                  ; preds = %do.body
  %33 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints26 = getelementptr inbounds %struct.cop, %struct.cop* %33, i32 0, i32 10
  %34 = load i32, i32* %cop_hints26, align 8
  %add27 = add i32 %34, 0
  %and28 = and i32 %add27, 8
  %tobool29 = icmp ne i32 %and28, 0
  br i1 %tobool29, label %cond.false32, label %cond.true30

cond.true30:                                      ; preds = %land.lhs.true25
  %35 = load i8*, i8** %s, align 8
  %36 = load i64, i64* %len, align 8
  %call31 = call i64 @Perl_utf8n_to_uvchr(i8* %35, i64 %36, i64* null, i32 1)
  br label %cond.end34

cond.false32:                                     ; preds = %land.lhs.true25, %do.body
  %37 = load i8*, i8** %s, align 8
  %38 = load i8, i8* %37, align 1
  %conv33 = zext i8 %38 to i64
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true30
  %cond35 = phi i64 [ %call31, %cond.true30 ], [ %conv33, %cond.false32 ]
  call void @Perl_sv_setuv(%struct.sv* %30, i64 %cond35)
  br label %do.body36

do.body36:                                        ; preds = %cond.end34
  br label %do.body37

do.body37:                                        ; preds = %do.body36
  %39 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %40, 4194304
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false42

cond.true41:                                      ; preds = %do.body37
  br i1 true, label %if.then43, label %if.end45

cond.false42:                                     ; preds = %do.body37
  br i1 false, label %if.then43, label %if.end45

if.then43:                                        ; preds = %cond.false42, %cond.true41
  %41 = load %struct.sv*, %struct.sv** %targ, align 8
  %call44 = call i32 @Perl_mg_set(%struct.sv* %41)
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %cond.false42, %cond.true41
  br label %do.end

do.end:                                           ; preds = %if.end45
  %42 = load %struct.sv*, %struct.sv** %targ, align 8
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %42, %struct.sv** %43, align 8
  br label %do.end46

do.end46:                                         ; preds = %do.end
  br label %do.end47

do.end47:                                         ; preds = %do.end46
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 0
  %45 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %45
}

declare dso_local i64 @Perl_utf8n_to_uvchr(i8*, i64, i64*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_chr() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %tmps = alloca i8*, align 8
  %value = alloca i64, align 8
  %top = alloca %struct.sv*, align 8
  %top2 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %top, align 8
  %7 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %9 = load %struct.sv*, %struct.sv** %top, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %9)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %10 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %10 to i32
  %11 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %12, 2048
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true, label %cond.false15

land.lhs.true:                                    ; preds = %land.end
  %13 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %14 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %15, 1048576
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true8, label %cond.false15

land.lhs.true8:                                   ; preds = %land.lhs.true
  %16 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_u9 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_rv10 = bitcast %union.anon* %sv_u9 to %struct.sv**
  %17 = load %struct.sv*, %struct.sv** %svu_rv10, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 0
  %18 = load i8*, i8** %sv_any, align 8
  %19 = bitcast i8* %18 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %19, i32 0, i32 0
  %20 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  %sv_flags11 = getelementptr inbounds %struct.hv, %struct.hv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %21, 268435456
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %land.lhs.true8
  br i1 true, label %if.then, label %if.end

cond.false15:                                     ; preds = %land.lhs.true8, %land.lhs.true, %land.end
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false15, %cond.true14
  %22 = load %struct.sv*, %struct.sv** %top, align 8
  %call16 = call %struct.sv* @Perl_sv_2num(%struct.sv* %22)
  store %struct.sv* %call16, %struct.sv** %top, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false15, %cond.true14
  %23 = load %struct.sv*, %struct.sv** %top, align 8
  %call17 = call zeroext i1 @Perl_isinfnansv(%struct.sv* %23)
  br i1 %call17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.end
  br i1 true, label %if.then20, label %if.else

cond.false19:                                     ; preds = %if.end
  br i1 false, label %if.then20, label %if.else

if.then20:                                        ; preds = %cond.false19, %cond.true18
  %24 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %25, 2097664
  %cmp = icmp eq i32 %and22, 512
  br i1 %cmp, label %cond.true23, label %cond.false25

cond.true23:                                      ; preds = %if.then20
  %26 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_any24 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any24, align 8
  %28 = bitcast i8* %27 to %struct.xpvnv*
  %xnv_u = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %28, i32 0, i32 5
  %xnv_nv = bitcast %union._xnvu* %xnv_u to double*
  %29 = load double, double* %xnv_nv, align 8
  br label %cond.end

cond.false25:                                     ; preds = %if.then20
  %30 = load %struct.sv*, %struct.sv** %top, align 8
  %call26 = call double @Perl_sv_2nv_flags(%struct.sv* %30, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false25, %cond.true23
  %cond = phi double [ %29, %cond.true23 ], [ %call26, %cond.false25 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.39, i64 0, i64 0), double %cond)
  br label %if.end101

if.else:                                          ; preds = %cond.false19, %cond.true18
  %31 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %31, i32 0, i32 10
  %32 = load i32, i32* %cop_hints, align 8
  %add = add i32 %32, 0
  %and27 = and i32 %add, 8
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.else90, label %land.lhs.true29

land.lhs.true29:                                  ; preds = %if.else
  %33 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags30 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags30, align 4
  %and31 = and i32 %34, 4096
  %tobool32 = icmp ne i32 %and31, 0
  br i1 %tobool32, label %land.lhs.true33, label %lor.lhs.false

land.lhs.true33:                                  ; preds = %land.lhs.true29
  %35 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %36, -2147483648
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %lor.lhs.false, label %land.lhs.true37

land.lhs.true37:                                  ; preds = %land.lhs.true33
  %37 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 2
  %38 = load i32, i32* %sv_flags38, align 4
  %and39 = and i32 %38, 256
  %tobool40 = icmp ne i32 %and39, 0
  br i1 %tobool40, label %cond.true41, label %cond.false43

cond.true41:                                      ; preds = %land.lhs.true37
  %39 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_any42 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 0
  %40 = load i8*, i8** %sv_any42, align 8
  %41 = bitcast i8* %40 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %41, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %42 = load i64, i64* %xivu_iv, align 8
  br label %cond.end45

cond.false43:                                     ; preds = %land.lhs.true37
  %43 = load %struct.sv*, %struct.sv** %top, align 8
  %call44 = call i64 @Perl_sv_2iv_flags(%struct.sv* %43, i32 0)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false43, %cond.true41
  %cond46 = phi i64 [ %42, %cond.true41 ], [ %call44, %cond.false43 ]
  %cmp47 = icmp slt i64 %cond46, 0
  br i1 %cmp47, label %if.then80, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end45, %land.lhs.true33, %land.lhs.true29
  %44 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %45, 8192
  %tobool50 = icmp ne i32 %and49, 0
  br i1 %tobool50, label %land.lhs.true67, label %lor.lhs.false51

lor.lhs.false51:                                  ; preds = %lor.lhs.false
  %46 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %47, 65280
  %tobool54 = icmp ne i32 %and53, 0
  br i1 %tobool54, label %land.lhs.true63, label %lor.lhs.false55

lor.lhs.false55:                                  ; preds = %lor.lhs.false51
  %48 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags56 = getelementptr inbounds %struct.sv, %struct.sv* %48, i32 0, i32 2
  %49 = load i32, i32* %sv_flags56, align 4
  %and57 = and i32 %49, 255
  %cmp58 = icmp eq i32 %and57, 8
  br i1 %cmp58, label %land.lhs.true63, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %lor.lhs.false55
  %50 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags60 = getelementptr inbounds %struct.sv, %struct.sv* %50, i32 0, i32 2
  %51 = load i32, i32* %sv_flags60, align 4
  %and61 = and i32 %51, 16826623
  %cmp62 = icmp eq i32 %and61, 16777226
  br i1 %cmp62, label %land.lhs.true63, label %if.else90

land.lhs.true63:                                  ; preds = %lor.lhs.false59, %lor.lhs.false55, %lor.lhs.false51
  %52 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %53, -2147483648
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %if.else90, label %land.lhs.true67

land.lhs.true67:                                  ; preds = %land.lhs.true63, %lor.lhs.false
  %54 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags68 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 2
  %55 = load i32, i32* %sv_flags68, align 4
  %and69 = and i32 %55, 512
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %cond.true71, label %cond.false75

cond.true71:                                      ; preds = %land.lhs.true67
  %56 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_any72 = getelementptr inbounds %struct.sv, %struct.sv* %56, i32 0, i32 0
  %57 = load i8*, i8** %sv_any72, align 8
  %58 = bitcast i8* %57 to %struct.xpvnv*
  %xnv_u73 = getelementptr inbounds %struct.xpvnv, %struct.xpvnv* %58, i32 0, i32 5
  %xnv_nv74 = bitcast %union._xnvu* %xnv_u73 to double*
  %59 = load double, double* %xnv_nv74, align 8
  br label %cond.end77

cond.false75:                                     ; preds = %land.lhs.true67
  %60 = load %struct.sv*, %struct.sv** %top, align 8
  %call76 = call double @Perl_sv_2nv_flags(%struct.sv* %60, i32 0)
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false75, %cond.true71
  %cond78 = phi double [ %59, %cond.true71 ], [ %call76, %cond.false75 ]
  %cmp79 = fcmp olt double %cond78, 0.000000e+00
  br i1 %cmp79, label %if.then80, label %if.else90

if.then80:                                        ; preds = %cond.end77, %cond.end45
  %call81 = call zeroext i1 @Perl_ckwarn(i32 44)
  br i1 %call81, label %if.then82, label %if.end89

if.then82:                                        ; preds = %if.then80
  %61 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %62, 2097152
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.then82
  %call87 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call87, %struct.sv** %top2, align 8
  %63 = load %struct.sv*, %struct.sv** %top2, align 8
  %64 = load %struct.sv*, %struct.sv** %top, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %63, %struct.sv* %64, i32 1536)
  %65 = load %struct.sv*, %struct.sv** %top2, align 8
  store %struct.sv* %65, %struct.sv** %top, align 8
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %if.then82
  %66 = load %struct.sv*, %struct.sv** %top, align 8
  %67 = bitcast %struct.sv* %66 to i8*
  call void (i32, i8*, ...) @Perl_warner(i32 44, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.40, i64 0, i64 0), i8* %67)
  br label %if.end89

if.end89:                                         ; preds = %if.end88, %if.then80
  store i64 65533, i64* %value, align 8
  br label %if.end100

if.else90:                                        ; preds = %cond.end77, %land.lhs.true63, %lor.lhs.false59, %if.else
  %68 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_flags91 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags91, align 4
  %and92 = and i32 %69, 256
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cond.true94, label %cond.false96

cond.true94:                                      ; preds = %if.else90
  %70 = load %struct.sv*, %struct.sv** %top, align 8
  %sv_any95 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 0
  %71 = load i8*, i8** %sv_any95, align 8
  %72 = bitcast i8* %71 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %72, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %73 = load i64, i64* %xivu_uv, align 8
  br label %cond.end98

cond.false96:                                     ; preds = %if.else90
  %74 = load %struct.sv*, %struct.sv** %top, align 8
  %call97 = call i64 @Perl_sv_2uv_flags(%struct.sv* %74, i32 0)
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false96, %cond.true94
  %cond99 = phi i64 [ %73, %cond.true94 ], [ %call97, %cond.false96 ]
  store i64 %cond99, i64* %value, align 8
  br label %if.end100

if.end100:                                        ; preds = %cond.end98, %if.end89
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %cond.end
  %75 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %75, i32 0, i32 2
  %76 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %76, 255
  %cmp104 = icmp uge i32 %and103, 3
  br i1 %cmp104, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end101
  %77 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_upgrade(%struct.sv* %77, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end101
  %78 = phi i1 [ true, %if.end101 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %78 to i32
  %79 = load i64, i64* %value, align 8
  %cmp105 = icmp ugt i64 %79, 255
  br i1 %cmp105, label %land.lhs.true106, label %if.end222

land.lhs.true106:                                 ; preds = %lor.end
  %80 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints107 = getelementptr inbounds %struct.cop, %struct.cop* %80, i32 0, i32 10
  %81 = load i32, i32* %cop_hints107, align 8
  %add108 = add i32 %81, 0
  %and109 = and i32 %add108, 8
  %tobool110 = icmp ne i32 %and109, 0
  br i1 %tobool110, label %if.end222, label %if.then111

if.then111:                                       ; preds = %land.lhs.true106
  %82 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %82, i32 0, i32 2
  %83 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %83, 268435456
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %cond.true152, label %lor.lhs.false115

lor.lhs.false115:                                 ; preds = %if.then111
  %84 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any116 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any116, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %87 = load i64, i64* %xpvlenu_len, align 8
  %88 = load i64, i64* %value, align 8
  %cmp117 = icmp ult i64 %88, 128
  br i1 %cmp117, label %cond.true118, label %cond.false119

cond.true118:                                     ; preds = %lor.lhs.false115
  br label %cond.end147

cond.false119:                                    ; preds = %lor.lhs.false115
  %89 = load i64, i64* %value, align 8
  %cmp120 = icmp ult i64 %89, 2048
  br i1 %cmp120, label %cond.true121, label %cond.false122

cond.true121:                                     ; preds = %cond.false119
  br label %cond.end145

cond.false122:                                    ; preds = %cond.false119
  %90 = load i64, i64* %value, align 8
  %cmp123 = icmp ult i64 %90, 65536
  br i1 %cmp123, label %cond.true124, label %cond.false125

cond.true124:                                     ; preds = %cond.false122
  br label %cond.end143

cond.false125:                                    ; preds = %cond.false122
  %91 = load i64, i64* %value, align 8
  %cmp126 = icmp ult i64 %91, 2097152
  br i1 %cmp126, label %cond.true127, label %cond.false128

cond.true127:                                     ; preds = %cond.false125
  br label %cond.end141

cond.false128:                                    ; preds = %cond.false125
  %92 = load i64, i64* %value, align 8
  %cmp129 = icmp ult i64 %92, 67108864
  br i1 %cmp129, label %cond.true130, label %cond.false131

cond.true130:                                     ; preds = %cond.false128
  br label %cond.end139

cond.false131:                                    ; preds = %cond.false128
  %93 = load i64, i64* %value, align 8
  %cmp132 = icmp ult i64 %93, 2147483648
  br i1 %cmp132, label %cond.true133, label %cond.false134

cond.true133:                                     ; preds = %cond.false131
  br label %cond.end137

cond.false134:                                    ; preds = %cond.false131
  %94 = load i64, i64* %value, align 8
  %cmp135 = icmp ult i64 %94, 68719476736
  %95 = zext i1 %cmp135 to i64
  %cond136 = select i1 %cmp135, i32 7, i32 13
  br label %cond.end137

cond.end137:                                      ; preds = %cond.false134, %cond.true133
  %cond138 = phi i32 [ 6, %cond.true133 ], [ %cond136, %cond.false134 ]
  br label %cond.end139

cond.end139:                                      ; preds = %cond.end137, %cond.true130
  %cond140 = phi i32 [ 5, %cond.true130 ], [ %cond138, %cond.end137 ]
  br label %cond.end141

cond.end141:                                      ; preds = %cond.end139, %cond.true127
  %cond142 = phi i32 [ 4, %cond.true127 ], [ %cond140, %cond.end139 ]
  br label %cond.end143

cond.end143:                                      ; preds = %cond.end141, %cond.true124
  %cond144 = phi i32 [ 3, %cond.true124 ], [ %cond142, %cond.end141 ]
  br label %cond.end145

cond.end145:                                      ; preds = %cond.end143, %cond.true121
  %cond146 = phi i32 [ 2, %cond.true121 ], [ %cond144, %cond.end143 ]
  br label %cond.end147

cond.end147:                                      ; preds = %cond.end145, %cond.true118
  %cond148 = phi i32 [ 1, %cond.true118 ], [ %cond146, %cond.end145 ]
  %conv = sext i32 %cond148 to i64
  %add149 = add i64 %conv, 1
  %cmp150 = icmp ult i64 %87, %add149
  br i1 %cmp150, label %cond.true152, label %cond.false195

cond.true152:                                     ; preds = %cond.end147, %if.then111
  %96 = load %struct.sv*, %struct.sv** %targ, align 8
  %97 = load i64, i64* %value, align 8
  %cmp153 = icmp ult i64 %97, 128
  br i1 %cmp153, label %cond.true155, label %cond.false156

cond.true155:                                     ; preds = %cond.true152
  br label %cond.end190

cond.false156:                                    ; preds = %cond.true152
  %98 = load i64, i64* %value, align 8
  %cmp157 = icmp ult i64 %98, 2048
  br i1 %cmp157, label %cond.true159, label %cond.false160

cond.true159:                                     ; preds = %cond.false156
  br label %cond.end188

cond.false160:                                    ; preds = %cond.false156
  %99 = load i64, i64* %value, align 8
  %cmp161 = icmp ult i64 %99, 65536
  br i1 %cmp161, label %cond.true163, label %cond.false164

cond.true163:                                     ; preds = %cond.false160
  br label %cond.end186

cond.false164:                                    ; preds = %cond.false160
  %100 = load i64, i64* %value, align 8
  %cmp165 = icmp ult i64 %100, 2097152
  br i1 %cmp165, label %cond.true167, label %cond.false168

cond.true167:                                     ; preds = %cond.false164
  br label %cond.end184

cond.false168:                                    ; preds = %cond.false164
  %101 = load i64, i64* %value, align 8
  %cmp169 = icmp ult i64 %101, 67108864
  br i1 %cmp169, label %cond.true171, label %cond.false172

cond.true171:                                     ; preds = %cond.false168
  br label %cond.end182

cond.false172:                                    ; preds = %cond.false168
  %102 = load i64, i64* %value, align 8
  %cmp173 = icmp ult i64 %102, 2147483648
  br i1 %cmp173, label %cond.true175, label %cond.false176

cond.true175:                                     ; preds = %cond.false172
  br label %cond.end180

cond.false176:                                    ; preds = %cond.false172
  %103 = load i64, i64* %value, align 8
  %cmp177 = icmp ult i64 %103, 68719476736
  %104 = zext i1 %cmp177 to i64
  %cond179 = select i1 %cmp177, i32 7, i32 13
  br label %cond.end180

cond.end180:                                      ; preds = %cond.false176, %cond.true175
  %cond181 = phi i32 [ 6, %cond.true175 ], [ %cond179, %cond.false176 ]
  br label %cond.end182

cond.end182:                                      ; preds = %cond.end180, %cond.true171
  %cond183 = phi i32 [ 5, %cond.true171 ], [ %cond181, %cond.end180 ]
  br label %cond.end184

cond.end184:                                      ; preds = %cond.end182, %cond.true167
  %cond185 = phi i32 [ 4, %cond.true167 ], [ %cond183, %cond.end182 ]
  br label %cond.end186

cond.end186:                                      ; preds = %cond.end184, %cond.true163
  %cond187 = phi i32 [ 3, %cond.true163 ], [ %cond185, %cond.end184 ]
  br label %cond.end188

cond.end188:                                      ; preds = %cond.end186, %cond.true159
  %cond189 = phi i32 [ 2, %cond.true159 ], [ %cond187, %cond.end186 ]
  br label %cond.end190

cond.end190:                                      ; preds = %cond.end188, %cond.true155
  %cond191 = phi i32 [ 1, %cond.true155 ], [ %cond189, %cond.end188 ]
  %conv192 = sext i32 %cond191 to i64
  %add193 = add i64 %conv192, 1
  %call194 = call i8* @Perl_sv_grow(%struct.sv* %96, i64 %add193)
  br label %cond.end197

cond.false195:                                    ; preds = %cond.end147
  %105 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u196 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u196 to i8**
  %106 = load i8*, i8** %svu_pv, align 8
  br label %cond.end197

cond.end197:                                      ; preds = %cond.false195, %cond.end190
  %cond198 = phi i8* [ %call194, %cond.end190 ], [ %106, %cond.false195 ]
  %107 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u199 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 3
  %svu_pv200 = bitcast %union.anon* %sv_u199 to i8**
  %108 = load i8*, i8** %svu_pv200, align 8
  %109 = load i64, i64* %value, align 8
  %call201 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %108, i64 %109, i64 0)
  store i8* %call201, i8** %tmps, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end197
  %110 = load i8*, i8** %tmps, align 8
  %111 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u202 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 3
  %svu_pv203 = bitcast %union.anon* %sv_u202 to i8**
  %112 = load i8*, i8** %svu_pv203, align 8
  %add.ptr = getelementptr inbounds i8, i8* %112, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %110 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %113 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any204 = getelementptr inbounds %struct.sv, %struct.sv* %113, i32 0, i32 0
  %114 = load i8*, i8** %sv_any204, align 8
  %115 = bitcast i8* %114 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %115, i32 0, i32 2
  store i64 %sub.ptr.sub, i64* %xpv_cur, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %116 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %116, align 1
  %117 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags205 = getelementptr inbounds %struct.sv, %struct.sv* %117, i32 0, i32 2
  %118 = load i32, i32* %sv_flags205, align 4
  %and206 = and i32 %118, 1610547455
  store i32 %and206, i32* %sv_flags205, align 4
  %119 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags207 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 2
  %120 = load i32, i32* %sv_flags207, align 4
  %or = or i32 %120, 17408
  store i32 %or, i32* %sv_flags207, align 4
  %121 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags208 = getelementptr inbounds %struct.sv, %struct.sv* %121, i32 0, i32 2
  %122 = load i32, i32* %sv_flags208, align 4
  %or209 = or i32 %122, 536870912
  store i32 %or209, i32* %sv_flags208, align 4
  br label %do.body210

do.body210:                                       ; preds = %do.end
  br label %do.body211

do.body211:                                       ; preds = %do.body210
  %123 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags212 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 2
  %124 = load i32, i32* %sv_flags212, align 4
  %and213 = and i32 %124, 4194304
  %tobool214 = icmp ne i32 %and213, 0
  br i1 %tobool214, label %cond.true215, label %cond.false216

cond.true215:                                     ; preds = %do.body211
  br i1 true, label %if.then217, label %if.end219

cond.false216:                                    ; preds = %do.body211
  br i1 false, label %if.then217, label %if.end219

if.then217:                                       ; preds = %cond.false216, %cond.true215
  %125 = load %struct.sv*, %struct.sv** %targ, align 8
  %call218 = call i32 @Perl_mg_set(%struct.sv* %125)
  br label %if.end219

if.end219:                                        ; preds = %if.then217, %cond.false216, %cond.true215
  br label %do.end220

do.end220:                                        ; preds = %if.end219
  %126 = load %struct.sv*, %struct.sv** %targ, align 8
  %127 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %126, %struct.sv** %127, align 8
  br label %do.end221

do.end221:                                        ; preds = %do.end220
  %128 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %128, i32 0, i32 0
  %129 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %129, %struct.op** %retval, align 8
  br label %return

if.end222:                                        ; preds = %land.lhs.true106, %lor.end
  %130 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags223 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags223, align 4
  %and224 = and i32 %131, 268435456
  %tobool225 = icmp ne i32 %and224, 0
  br i1 %tobool225, label %cond.true232, label %lor.lhs.false226

lor.lhs.false226:                                 ; preds = %if.end222
  %132 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any227 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 0
  %133 = load i8*, i8** %sv_any227, align 8
  %134 = bitcast i8* %133 to %struct.xpv*
  %xpv_len_u228 = getelementptr inbounds %struct.xpv, %struct.xpv* %134, i32 0, i32 3
  %xpvlenu_len229 = bitcast %union.anon.18* %xpv_len_u228 to i64*
  %135 = load i64, i64* %xpvlenu_len229, align 8
  %cmp230 = icmp ult i64 %135, 2
  br i1 %cmp230, label %cond.true232, label %cond.false234

cond.true232:                                     ; preds = %lor.lhs.false226, %if.end222
  %136 = load %struct.sv*, %struct.sv** %targ, align 8
  %call233 = call i8* @Perl_sv_grow(%struct.sv* %136, i64 2)
  br label %cond.end237

cond.false234:                                    ; preds = %lor.lhs.false226
  %137 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u235 = getelementptr inbounds %struct.sv, %struct.sv* %137, i32 0, i32 3
  %svu_pv236 = bitcast %union.anon* %sv_u235 to i8**
  %138 = load i8*, i8** %svu_pv236, align 8
  br label %cond.end237

cond.end237:                                      ; preds = %cond.false234, %cond.true232
  %cond238 = phi i8* [ %call233, %cond.true232 ], [ %138, %cond.false234 ]
  br label %do.body239

do.body239:                                       ; preds = %cond.end237
  %139 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any240 = getelementptr inbounds %struct.sv, %struct.sv* %139, i32 0, i32 0
  %140 = load i8*, i8** %sv_any240, align 8
  %141 = bitcast i8* %140 to %struct.xpv*
  %xpv_cur241 = getelementptr inbounds %struct.xpv, %struct.xpv* %141, i32 0, i32 2
  store i64 1, i64* %xpv_cur241, align 8
  br label %do.end242

do.end242:                                        ; preds = %do.body239
  %142 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u243 = getelementptr inbounds %struct.sv, %struct.sv* %142, i32 0, i32 3
  %svu_pv244 = bitcast %union.anon* %sv_u243 to i8**
  %143 = load i8*, i8** %svu_pv244, align 8
  store i8* %143, i8** %tmps, align 8
  %144 = load i64, i64* %value, align 8
  %conv245 = trunc i64 %144 to i8
  %145 = load i8*, i8** %tmps, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr, i8** %tmps, align 8
  store i8 %conv245, i8* %145, align 1
  %146 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %146, align 1
  %147 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags246 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 2
  %148 = load i32, i32* %sv_flags246, align 4
  %and247 = and i32 %148, 1610547455
  store i32 %and247, i32* %sv_flags246, align 4
  %149 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags248 = getelementptr inbounds %struct.sv, %struct.sv* %149, i32 0, i32 2
  %150 = load i32, i32* %sv_flags248, align 4
  %or249 = or i32 %150, 17408
  store i32 %or249, i32* %sv_flags248, align 4
  %151 = load %struct.sv*, %struct.sv** @PL_encoding, align 8
  %tobool250 = icmp ne %struct.sv* %151, null
  br i1 %tobool250, label %cond.true257, label %lor.lhs.false251

lor.lhs.false251:                                 ; preds = %do.end242
  %152 = load %struct.sv*, %struct.sv** @PL_lex_encoding, align 8
  %tobool252 = icmp ne %struct.sv* %152, null
  br i1 %tobool252, label %land.lhs.true253, label %cond.false258

land.lhs.true253:                                 ; preds = %lor.lhs.false251
  %call254 = call %struct.sv* @Perl__get_encoding()
  %cmp255 = icmp ne %struct.sv* %call254, null
  br i1 %cmp255, label %cond.true257, label %cond.false258

cond.true257:                                     ; preds = %land.lhs.true253, %do.end242
  br i1 true, label %land.lhs.true259, label %if.end333

cond.false258:                                    ; preds = %land.lhs.true253, %lor.lhs.false251
  br i1 false, label %land.lhs.true259, label %if.end333

land.lhs.true259:                                 ; preds = %cond.false258, %cond.true257
  %153 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints260 = getelementptr inbounds %struct.cop, %struct.cop* %153, i32 0, i32 10
  %154 = load i32, i32* %cop_hints260, align 8
  %add261 = add i32 %154, 0
  %and262 = and i32 %add261, 8
  %tobool263 = icmp ne i32 %and262, 0
  br i1 %tobool263, label %if.end333, label %if.then264

if.then264:                                       ; preds = %land.lhs.true259
  %155 = load %struct.sv*, %struct.sv** %targ, align 8
  %call265 = call %struct.sv* @Perl__get_encoding()
  %call266 = call i8* @Perl_sv_recode_to_utf8(%struct.sv* %155, %struct.sv* %call265)
  %156 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u267 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 3
  %svu_pv268 = bitcast %union.anon* %sv_u267 to i8**
  %157 = load i8*, i8** %svu_pv268, align 8
  store i8* %157, i8** %tmps, align 8
  %158 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any269 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any269, align 8
  %160 = bitcast i8* %159 to %struct.xpv*
  %xpv_cur270 = getelementptr inbounds %struct.xpv, %struct.xpv* %160, i32 0, i32 2
  %161 = load i64, i64* %xpv_cur270, align 8
  %cmp271 = icmp eq i64 %161, 0
  br i1 %cmp271, label %if.then305, label %lor.lhs.false273

lor.lhs.false273:                                 ; preds = %if.then264
  %162 = load i8*, i8** %tmps, align 8
  %163 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any274 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any274, align 8
  %165 = bitcast i8* %164 to %struct.xpv*
  %xpv_cur275 = getelementptr inbounds %struct.xpv, %struct.xpv* %165, i32 0, i32 2
  %166 = load i64, i64* %xpv_cur275, align 8
  %call276 = call zeroext i1 @Perl_is_utf8_string(i8* %162, i64 %166)
  br i1 %call276, label %lor.lhs.false277, label %if.then305

lor.lhs.false277:                                 ; preds = %lor.lhs.false273
  %167 = load i8*, i8** %tmps, align 8
  %168 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any278 = getelementptr inbounds %struct.sv, %struct.sv* %168, i32 0, i32 0
  %169 = load i8*, i8** %sv_any278, align 8
  %170 = bitcast i8* %169 to %struct.xpv*
  %xpv_cur279 = getelementptr inbounds %struct.xpv, %struct.xpv* %170, i32 0, i32 2
  %171 = load i64, i64* %xpv_cur279, align 8
  %add.ptr280 = getelementptr inbounds i8, i8* %167, i64 %171
  %172 = load i8*, i8** %tmps, align 8
  %sub.ptr.lhs.cast281 = ptrtoint i8* %add.ptr280 to i64
  %sub.ptr.rhs.cast282 = ptrtoint i8* %172 to i64
  %sub.ptr.sub283 = sub i64 %sub.ptr.lhs.cast281, %sub.ptr.rhs.cast282
  %cmp284 = icmp sge i64 %sub.ptr.sub283, 3
  br i1 %cmp284, label %land.lhs.true286, label %cond.false302

land.lhs.true286:                                 ; preds = %lor.lhs.false277
  %173 = load i8*, i8** %tmps, align 8
  %arrayidx287 = getelementptr inbounds i8, i8* %173, i64 0
  %174 = load i8, i8* %arrayidx287, align 1
  %conv288 = zext i8 %174 to i32
  %cmp289 = icmp eq i32 239, %conv288
  br i1 %cmp289, label %land.lhs.true291, label %cond.false302

land.lhs.true291:                                 ; preds = %land.lhs.true286
  %175 = load i8*, i8** %tmps, align 8
  %arrayidx292 = getelementptr inbounds i8, i8* %175, i64 1
  %176 = load i8, i8* %arrayidx292, align 1
  %conv293 = zext i8 %176 to i32
  %cmp294 = icmp eq i32 191, %conv293
  br i1 %cmp294, label %land.lhs.true296, label %cond.false302

land.lhs.true296:                                 ; preds = %land.lhs.true291
  %177 = load i8*, i8** %tmps, align 8
  %arrayidx297 = getelementptr inbounds i8, i8* %177, i64 2
  %178 = load i8, i8* %arrayidx297, align 1
  %conv298 = zext i8 %178 to i32
  %cmp299 = icmp eq i32 189, %conv298
  br i1 %cmp299, label %cond.true301, label %cond.false302

cond.true301:                                     ; preds = %land.lhs.true296
  br i1 true, label %cond.true303, label %cond.false304

cond.false302:                                    ; preds = %land.lhs.true296, %land.lhs.true291, %land.lhs.true286, %lor.lhs.false277
  br i1 false, label %cond.true303, label %cond.false304

cond.true303:                                     ; preds = %cond.false302, %cond.true301
  br i1 true, label %if.then305, label %if.end332

cond.false304:                                    ; preds = %cond.false302, %cond.true301
  br i1 false, label %if.then305, label %if.end332

if.then305:                                       ; preds = %cond.false304, %cond.true303, %lor.lhs.false273, %if.then264
  %179 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags306 = getelementptr inbounds %struct.sv, %struct.sv* %179, i32 0, i32 2
  %180 = load i32, i32* %sv_flags306, align 4
  %and307 = and i32 %180, 268435456
  %tobool308 = icmp ne i32 %and307, 0
  br i1 %tobool308, label %cond.true315, label %lor.lhs.false309

lor.lhs.false309:                                 ; preds = %if.then305
  %181 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any310 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 0
  %182 = load i8*, i8** %sv_any310, align 8
  %183 = bitcast i8* %182 to %struct.xpv*
  %xpv_len_u311 = getelementptr inbounds %struct.xpv, %struct.xpv* %183, i32 0, i32 3
  %xpvlenu_len312 = bitcast %union.anon.18* %xpv_len_u311 to i64*
  %184 = load i64, i64* %xpvlenu_len312, align 8
  %cmp313 = icmp ult i64 %184, 2
  br i1 %cmp313, label %cond.true315, label %cond.false317

cond.true315:                                     ; preds = %lor.lhs.false309, %if.then305
  %185 = load %struct.sv*, %struct.sv** %targ, align 8
  %call316 = call i8* @Perl_sv_grow(%struct.sv* %185, i64 2)
  br label %cond.end320

cond.false317:                                    ; preds = %lor.lhs.false309
  %186 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u318 = getelementptr inbounds %struct.sv, %struct.sv* %186, i32 0, i32 3
  %svu_pv319 = bitcast %union.anon* %sv_u318 to i8**
  %187 = load i8*, i8** %svu_pv319, align 8
  br label %cond.end320

cond.end320:                                      ; preds = %cond.false317, %cond.true315
  %cond321 = phi i8* [ %call316, %cond.true315 ], [ %187, %cond.false317 ]
  %188 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u322 = getelementptr inbounds %struct.sv, %struct.sv* %188, i32 0, i32 3
  %svu_pv323 = bitcast %union.anon* %sv_u322 to i8**
  %189 = load i8*, i8** %svu_pv323, align 8
  store i8* %189, i8** %tmps, align 8
  br label %do.body324

do.body324:                                       ; preds = %cond.end320
  %190 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any325 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 0
  %191 = load i8*, i8** %sv_any325, align 8
  %192 = bitcast i8* %191 to %struct.xpv*
  %xpv_cur326 = getelementptr inbounds %struct.xpv, %struct.xpv* %192, i32 0, i32 2
  store i64 1, i64* %xpv_cur326, align 8
  br label %do.end327

do.end327:                                        ; preds = %do.body324
  %193 = load i64, i64* %value, align 8
  %conv328 = trunc i64 %193 to i8
  %194 = load i8*, i8** %tmps, align 8
  %incdec.ptr329 = getelementptr inbounds i8, i8* %194, i32 1
  store i8* %incdec.ptr329, i8** %tmps, align 8
  store i8 %conv328, i8* %194, align 1
  %195 = load i8*, i8** %tmps, align 8
  store i8 0, i8* %195, align 1
  %196 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags330 = getelementptr inbounds %struct.sv, %struct.sv* %196, i32 0, i32 2
  %197 = load i32, i32* %sv_flags330, align 4
  %and331 = and i32 %197, -536870913
  store i32 %and331, i32* %sv_flags330, align 4
  br label %if.end332

if.end332:                                        ; preds = %do.end327, %cond.false304, %cond.true303
  br label %if.end333

if.end333:                                        ; preds = %if.end332, %land.lhs.true259, %cond.false258, %cond.true257
  br label %do.body334

do.body334:                                       ; preds = %if.end333
  br label %do.body335

do.body335:                                       ; preds = %do.body334
  %198 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags336 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags336, align 4
  %and337 = and i32 %199, 4194304
  %tobool338 = icmp ne i32 %and337, 0
  br i1 %tobool338, label %cond.true339, label %cond.false340

cond.true339:                                     ; preds = %do.body335
  br i1 true, label %if.then341, label %if.end343

cond.false340:                                    ; preds = %do.body335
  br i1 false, label %if.then341, label %if.end343

if.then341:                                       ; preds = %cond.false340, %cond.true339
  %200 = load %struct.sv*, %struct.sv** %targ, align 8
  %call342 = call i32 @Perl_mg_set(%struct.sv* %200)
  br label %if.end343

if.end343:                                        ; preds = %if.then341, %cond.false340, %cond.true339
  br label %do.end344

do.end344:                                        ; preds = %if.end343
  %201 = load %struct.sv*, %struct.sv** %targ, align 8
  %202 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %201, %struct.sv** %202, align 8
  br label %do.end345

do.end345:                                        ; preds = %do.end344
  %203 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next346 = getelementptr inbounds %struct.op, %struct.op* %203, i32 0, i32 0
  %204 = load %struct.op*, %struct.op** %op_next346, align 8
  store %struct.op* %204, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end345, %do.end221
  %205 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %205
}

declare dso_local %struct.sv* @Perl_sv_2num(%struct.sv*) #1

declare dso_local zeroext i1 @Perl_isinfnansv(%struct.sv*) #1

declare dso_local void @Perl_warner(i32, i8*, ...) #1

declare dso_local void @Perl_sv_upgrade(%struct.sv*, i32) #1

declare dso_local i8* @Perl_uvoffuni_to_utf8_flags(i8*, i64, i64) #1

declare dso_local zeroext i1 @Perl_is_utf8_string(i8*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_crypt() #0 {
entry:
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.41, i64 0, i64 0))
  ret %struct.op* %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_ucfirst() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %source = alloca %struct.sv*, align 8
  %slen = alloca i64, align 8
  %need = alloca i64, align 8
  %dest = alloca %struct.sv*, align 8
  %inplace = alloca i8, align 1
  %doing_utf8 = alloca i8, align 1
  %convert_source_to_utf8 = alloca i8, align 1
  %op_type = alloca i32, align 4
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %tmpbuf = alloca [14 x i8], align 1
  %ulen = alloca i64, align 8
  %tculen = alloca i64, align 8
  %title_ord = alloca i64, align 8
  %targ = alloca %struct.sv*, align 8
  %send = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %source, align 8
  store i8 0, i8* %doing_utf8, align 1
  store i8 0, i8* %convert_source_to_utf8, align 1
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  %4 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 0
  %7 = load i8*, i8** %sv_any, align 8
  %8 = bitcast i8* %7 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %8, i32 0, i32 2
  %9 = load i64, i64* %xpv_cur, align 8
  store i64 %9, i64* %slen, align 8
  %10 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %11 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load %struct.sv*, %struct.sv** %source, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %12, i64* %slen, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %13 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %14, 134283264
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %land.end15, label %land.rhs

land.rhs:                                         ; preds = %cond.end
  %15 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags4 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %16, 131072
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %17 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %18, 524288
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.rhs
  %19 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %20, 4194304
  %tobool12 = icmp ne i32 %and11, 0
  br i1 %tobool12, label %land.end, label %land.rhs13

land.rhs13:                                       ; preds = %land.lhs.true
  %21 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 1
  %22 = load i32, i32* %sv_refcnt, align 8
  %cmp14 = icmp eq i32 %22, 1
  br label %land.end

land.end:                                         ; preds = %land.rhs13, %land.lhs.true, %lor.rhs
  %23 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %cmp14, %land.rhs13 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.rhs
  %24 = phi i1 [ true, %land.rhs ], [ %23, %land.end ]
  br label %land.end15

land.end15:                                       ; preds = %lor.end, %cond.end
  %25 = phi i1 [ false, %cond.end ], [ %24, %lor.end ]
  %frombool = zext i1 %25 to i8
  store i8 %frombool, i8* %inplace, align 1
  %26 = load i64, i64* %slen, align 8
  %tobool16 = icmp ne i64 %26, 0
  br i1 %tobool16, label %if.else, label %if.then

if.then:                                          ; preds = %land.end15
  store i64 1, i64* %need, align 8
  store i64 0, i64* %ulen, align 8
  br label %if.end144

if.else:                                          ; preds = %land.end15
  %27 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %28, 536870912
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.else37

land.lhs.true20:                                  ; preds = %if.else
  %29 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %29, i32 0, i32 10
  %30 = load i32, i32* %cop_hints, align 8
  %add = add i32 %30, 0
  %and21 = and i32 %add, 8
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.else37, label %if.then23

if.then23:                                        ; preds = %land.lhs.true20
  store i8 1, i8* %doing_utf8, align 1
  %31 = load i8*, i8** %s, align 8
  %32 = load i8, i8* %31, align 1
  %idxprom = zext i8 %32 to i64
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %33 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %33 to i64
  store i64 %conv, i64* %ulen, align 8
  %34 = load i32, i32* %op_type, align 4
  %cmp24 = icmp eq i32 %34, 130
  br i1 %cmp24, label %if.then26, label %if.else28

if.then26:                                        ; preds = %if.then23
  %35 = load i8*, i8** %s, align 8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call27 = call i64 @Perl__to_utf8_title_flags(i8* %35, i8* %arraydecay, i64* %tculen, i1 zeroext false)
  br label %if.end

if.else28:                                        ; preds = %if.then23
  %36 = load i8*, i8** %s, align 8
  %arraydecay29 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call30 = call i64 @Perl__to_utf8_lower_flags(i8* %36, i8* %arraydecay29, i64* %tculen, i1 zeroext false)
  br label %if.end

if.end:                                           ; preds = %if.else28, %if.then26
  %37 = load i64, i64* %ulen, align 8
  %38 = load i64, i64* %tculen, align 8
  %cmp31 = icmp ne i64 %37, %38
  br i1 %cmp31, label %if.then33, label %if.end34

if.then33:                                        ; preds = %if.end
  store i8 0, i8* %inplace, align 1
  br label %if.end34

if.end34:                                         ; preds = %if.then33, %if.end
  %39 = load i64, i64* %slen, align 8
  %add35 = add i64 %39, 1
  %40 = load i64, i64* %ulen, align 8
  %sub = sub i64 %add35, %40
  %41 = load i64, i64* %tculen, align 8
  %add36 = add i64 %sub, %41
  store i64 %add36, i64* %need, align 8
  br label %if.end143

if.else37:                                        ; preds = %land.lhs.true20, %if.else
  store i64 1, i64* %ulen, align 8
  store i64 1, i64* %tculen, align 8
  %42 = load i64, i64* %slen, align 8
  %add38 = add i64 %42, 1
  store i64 %add38, i64* %need, align 8
  %43 = load i32, i32* %op_type, align 4
  %cmp39 = icmp eq i32 %43, 131
  br i1 %cmp39, label %if.then41, label %if.else81

if.then41:                                        ; preds = %if.else37
  %44 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints42 = getelementptr inbounds %struct.cop, %struct.cop* %44, i32 0, i32 10
  %45 = load i32, i32* %cop_hints42, align 8
  %add43 = add i32 %45, 0
  %and44 = and i32 %add43, 2048
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %land.lhs.true53, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then41
  %46 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints46 = getelementptr inbounds %struct.cop, %struct.cop* %46, i32 0, i32 10
  %47 = load i32, i32* %cop_hints46, align 8
  %add47 = add i32 %47, 0
  %and48 = and i32 %add47, 16
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %land.lhs.true50, label %cond.false62

land.lhs.true50:                                  ; preds = %lor.lhs.false
  %call51 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call51, label %land.lhs.true53, label %cond.false62

land.lhs.true53:                                  ; preds = %land.lhs.true50, %if.then41
  %48 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints54 = getelementptr inbounds %struct.cop, %struct.cop* %48, i32 0, i32 10
  %49 = load i32, i32* %cop_hints54, align 8
  %add55 = add i32 %49, 0
  %and56 = and i32 %add55, 8
  %tobool57 = icmp ne i32 %and56, 0
  br i1 %tobool57, label %cond.false62, label %cond.true58

cond.true58:                                      ; preds = %land.lhs.true53
  %50 = load i8*, i8** %s, align 8
  %51 = load i8, i8* %50, align 1
  %idxprom59 = zext i8 %51 to i64
  %arrayidx60 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom59
  %52 = load i8, i8* %arrayidx60, align 1
  %conv61 = zext i8 %52 to i32
  br label %cond.end77

cond.false62:                                     ; preds = %land.lhs.true53, %land.lhs.true50, %lor.lhs.false
  %53 = load i8*, i8** %s, align 8
  %54 = load i8, i8* %53, align 1
  %idxprom63 = zext i8 %54 to i64
  %arrayidx64 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom63
  %55 = load i32, i32* %arrayidx64, align 4
  %and65 = and i32 %55, 16400
  %cmp66 = icmp eq i32 %and65, 16400
  br i1 %cmp66, label %cond.true68, label %cond.false73

cond.true68:                                      ; preds = %cond.false62
  %56 = load i8*, i8** %s, align 8
  %57 = load i8, i8* %56, align 1
  %conv69 = zext i8 %57 to i32
  %add70 = add nsw i32 %conv69, 32
  %conv71 = trunc i32 %add70 to i8
  %conv72 = zext i8 %conv71 to i32
  br label %cond.end75

cond.false73:                                     ; preds = %cond.false62
  %58 = load i8*, i8** %s, align 8
  %59 = load i8, i8* %58, align 1
  %conv74 = zext i8 %59 to i32
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false73, %cond.true68
  %cond76 = phi i32 [ %conv72, %cond.true68 ], [ %conv74, %cond.false73 ]
  br label %cond.end77

cond.end77:                                       ; preds = %cond.end75, %cond.true58
  %cond78 = phi i32 [ %conv61, %cond.true58 ], [ %cond76, %cond.end75 ]
  %conv79 = trunc i32 %cond78 to i8
  %arraydecay80 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  store i8 %conv79, i8* %arraydecay80, align 1
  br label %if.end142

if.else81:                                        ; preds = %if.else37
  %60 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints82 = getelementptr inbounds %struct.cop, %struct.cop* %60, i32 0, i32 10
  %61 = load i32, i32* %cop_hints82, align 8
  %add83 = add i32 %61, 0
  %and84 = and i32 %add83, 2048
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %land.lhs.true94, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %if.else81
  %62 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints87 = getelementptr inbounds %struct.cop, %struct.cop* %62, i32 0, i32 10
  %63 = load i32, i32* %cop_hints87, align 8
  %add88 = add i32 %63, 0
  %and89 = and i32 %add88, 16
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %land.lhs.true91, label %if.then99

land.lhs.true91:                                  ; preds = %lor.lhs.false86
  %call92 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call92, label %land.lhs.true94, label %if.then99

land.lhs.true94:                                  ; preds = %land.lhs.true91, %if.else81
  %64 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints95 = getelementptr inbounds %struct.cop, %struct.cop* %64, i32 0, i32 10
  %65 = load i32, i32* %cop_hints95, align 8
  %add96 = add i32 %65, 0
  %and97 = and i32 %add96, 8
  %tobool98 = icmp ne i32 %and97, 0
  br i1 %tobool98, label %if.then99, label %if.else116

if.then99:                                        ; preds = %land.lhs.true94, %land.lhs.true91, %lor.lhs.false86
  %66 = load i8*, i8** %s, align 8
  %67 = load i8, i8* %66, align 1
  %idxprom100 = zext i8 %67 to i64
  %arrayidx101 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom100
  %68 = load i32, i32* %arrayidx101, align 4
  %and102 = and i32 %68, 16392
  %cmp103 = icmp eq i32 %and102, 16392
  br i1 %cmp103, label %cond.true105, label %cond.false110

cond.true105:                                     ; preds = %if.then99
  %69 = load i8*, i8** %s, align 8
  %70 = load i8, i8* %69, align 1
  %conv106 = zext i8 %70 to i32
  %sub107 = sub nsw i32 %conv106, 32
  %conv108 = trunc i32 %sub107 to i8
  %conv109 = zext i8 %conv108 to i32
  br label %cond.end112

cond.false110:                                    ; preds = %if.then99
  %71 = load i8*, i8** %s, align 8
  %72 = load i8, i8* %71, align 1
  %conv111 = zext i8 %72 to i32
  br label %cond.end112

cond.end112:                                      ; preds = %cond.false110, %cond.true105
  %cond113 = phi i32 [ %conv109, %cond.true105 ], [ %conv111, %cond.false110 ]
  %conv114 = trunc i32 %cond113 to i8
  %arraydecay115 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  store i8 %conv114, i8* %arraydecay115, align 1
  br label %if.end141

if.else116:                                       ; preds = %land.lhs.true94
  %73 = load i8*, i8** %s, align 8
  %74 = load i8, i8* %73, align 1
  %arraydecay117 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call118 = call i64 @Perl__to_upper_title_latin1(i8 zeroext %74, i8* %arraydecay117, i64* %tculen, i8 signext 115)
  store i64 %call118, i64* %title_ord, align 8
  %75 = load i64, i64* %tculen, align 8
  %cmp119 = icmp ugt i64 %75, 1
  br i1 %cmp119, label %if.then121, label %if.end140

if.then121:                                       ; preds = %if.else116
  %arraydecay122 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %76 = load i8, i8* %arraydecay122, align 1
  %conv123 = zext i8 %76 to i32
  %and124 = and i32 %conv123, 254
  %cmp125 = icmp eq i32 %and124, 194
  br i1 %cmp125, label %if.then127, label %if.else130

if.then127:                                       ; preds = %if.then121
  %77 = load i64, i64* %title_ord, align 8
  %conv128 = trunc i64 %77 to i8
  %arraydecay129 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  store i8 %conv128, i8* %arraydecay129, align 1
  store i64 1, i64* %tculen, align 8
  br label %if.end139

if.else130:                                       ; preds = %if.then121
  store i8 0, i8* %inplace, align 1
  %78 = load i64, i64* %title_ord, align 8
  %cmp131 = icmp ugt i64 %78, 255
  br i1 %cmp131, label %if.then133, label %if.else135

if.then133:                                       ; preds = %if.else130
  store i8 1, i8* %doing_utf8, align 1
  store i8 1, i8* %convert_source_to_utf8, align 1
  %79 = load i64, i64* %slen, align 8
  %mul = mul i64 %79, 2
  %add134 = add i64 %mul, 1
  store i64 %add134, i64* %need, align 8
  store i64 2, i64* %ulen, align 8
  br label %if.end138

if.else135:                                       ; preds = %if.else130
  %80 = load i64, i64* %slen, align 8
  %add136 = add i64 %80, 1
  %add137 = add i64 %add136, 1
  store i64 %add137, i64* %need, align 8
  br label %if.end138

if.end138:                                        ; preds = %if.else135, %if.then133
  br label %if.end139

if.end139:                                        ; preds = %if.end138, %if.then127
  br label %if.end140

if.end140:                                        ; preds = %if.end139, %if.else116
  br label %if.end141

if.end141:                                        ; preds = %if.end140, %cond.end112
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %cond.end77
  br label %if.end143

if.end143:                                        ; preds = %if.end142, %if.end34
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then
  %81 = load i8, i8* %inplace, align 1
  %tobool145 = trunc i8 %81 to i1
  br i1 %tobool145, label %if.then146, label %if.else160

if.then146:                                       ; preds = %if.end144
  %82 = load %struct.sv*, %struct.sv** %source, align 8
  store %struct.sv* %82, %struct.sv** %dest, align 8
  %83 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags147 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 2
  %84 = load i32, i32* %sv_flags147, align 4
  %and148 = and i32 %84, 430018304
  %cmp149 = icmp eq i32 %and148, 1024
  br i1 %cmp149, label %cond.true151, label %cond.false156

cond.true151:                                     ; preds = %if.then146
  %85 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any152 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 0
  %86 = load i8*, i8** %sv_any152, align 8
  %87 = bitcast i8* %86 to %struct.xpv*
  %xpv_cur153 = getelementptr inbounds %struct.xpv, %struct.xpv* %87, i32 0, i32 2
  %88 = load i64, i64* %xpv_cur153, align 8
  store i64 %88, i64* %slen, align 8
  %89 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u154 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 3
  %svu_pv155 = bitcast %union.anon* %sv_u154 to i8**
  %90 = load i8*, i8** %svu_pv155, align 8
  br label %cond.end158

cond.false156:                                    ; preds = %if.then146
  %91 = load %struct.sv*, %struct.sv** %source, align 8
  %call157 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %91, i64* %slen, i32 0)
  br label %cond.end158

cond.end158:                                      ; preds = %cond.false156, %cond.true151
  %cond159 = phi i8* [ %90, %cond.true151 ], [ %call157, %cond.false156 ]
  store i8* %cond159, i8** %d, align 8
  store i8* %cond159, i8** %s, align 8
  br label %if.end185

if.else160:                                       ; preds = %if.end144
  %92 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %93 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %93, i32 0, i32 3
  %94 = load i64, i64* %op_targ, align 8
  %arrayidx161 = getelementptr inbounds %struct.sv*, %struct.sv** %92, i64 %94
  %95 = load %struct.sv*, %struct.sv** %arrayidx161, align 8
  store %struct.sv* %95, %struct.sv** %targ, align 8
  %96 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %96, %struct.sv** %dest, align 8
  %97 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags162 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags162, align 4
  %and163 = and i32 %98, 255
  %cmp164 = icmp uge i32 %and163, 3
  br i1 %cmp164, label %lor.end167, label %lor.rhs166

lor.rhs166:                                       ; preds = %if.else160
  %99 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_upgrade(%struct.sv* %99, i32 3)
  br label %lor.end167

lor.end167:                                       ; preds = %lor.rhs166, %if.else160
  %100 = phi i1 [ true, %if.else160 ], [ true, %lor.rhs166 ]
  %lor.ext = zext i1 %100 to i32
  %101 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags168 = getelementptr inbounds %struct.sv, %struct.sv* %101, i32 0, i32 2
  %102 = load i32, i32* %sv_flags168, align 4
  %and169 = and i32 %102, 268435456
  %tobool170 = icmp ne i32 %and169, 0
  br i1 %tobool170, label %cond.true175, label %lor.lhs.false171

lor.lhs.false171:                                 ; preds = %lor.end167
  %103 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any172 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 0
  %104 = load i8*, i8** %sv_any172, align 8
  %105 = bitcast i8* %104 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %105, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %106 = load i64, i64* %xpvlenu_len, align 8
  %107 = load i64, i64* %need, align 8
  %cmp173 = icmp ult i64 %106, %107
  br i1 %cmp173, label %cond.true175, label %cond.false177

cond.true175:                                     ; preds = %lor.lhs.false171, %lor.end167
  %108 = load %struct.sv*, %struct.sv** %dest, align 8
  %109 = load i64, i64* %need, align 8
  %call176 = call i8* @Perl_sv_grow(%struct.sv* %108, i64 %109)
  br label %cond.end180

cond.false177:                                    ; preds = %lor.lhs.false171
  %110 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u178 = getelementptr inbounds %struct.sv, %struct.sv* %110, i32 0, i32 3
  %svu_pv179 = bitcast %union.anon* %sv_u178 to i8**
  %111 = load i8*, i8** %svu_pv179, align 8
  br label %cond.end180

cond.end180:                                      ; preds = %cond.false177, %cond.true175
  %cond181 = phi i8* [ %call176, %cond.true175 ], [ %111, %cond.false177 ]
  store i8* %cond181, i8** %d, align 8
  %112 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags182 = getelementptr inbounds %struct.sv, %struct.sv* %112, i32 0, i32 2
  %113 = load i32, i32* %sv_flags182, align 4
  %and183 = and i32 %113, 1610547455
  store i32 %and183, i32* %sv_flags182, align 4
  %114 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags184 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags184, align 4
  %or = or i32 %115, 17408
  store i32 %or, i32* %sv_flags184, align 4
  %116 = load %struct.sv*, %struct.sv** %dest, align 8
  %117 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %116, %struct.sv** %117, align 8
  br label %if.end185

if.end185:                                        ; preds = %cond.end180, %cond.end158
  %118 = load i8, i8* %doing_utf8, align 1
  %tobool186 = trunc i8 %118 to i1
  br i1 %tobool186, label %if.then187, label %if.else228

if.then187:                                       ; preds = %if.end185
  %119 = load i8, i8* %inplace, align 1
  %tobool188 = trunc i8 %119 to i1
  br i1 %tobool188, label %if.else219, label %if.then189

if.then189:                                       ; preds = %if.then187
  %120 = load i8, i8* %convert_source_to_utf8, align 1
  %tobool190 = trunc i8 %120 to i1
  br i1 %tobool190, label %if.else199, label %if.then191

if.then191:                                       ; preds = %if.then189
  %121 = load %struct.sv*, %struct.sv** %dest, align 8
  %arraydecay192 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %122 = load i64, i64* %tculen, align 8
  call void @Perl_sv_setpvn(%struct.sv* %121, i8* %arraydecay192, i64 %122)
  %123 = load i64, i64* %slen, align 8
  %124 = load i64, i64* %ulen, align 8
  %cmp193 = icmp ugt i64 %123, %124
  br i1 %cmp193, label %if.then195, label %if.end198

if.then195:                                       ; preds = %if.then191
  %125 = load %struct.sv*, %struct.sv** %dest, align 8
  %126 = load i8*, i8** %s, align 8
  %127 = load i64, i64* %ulen, align 8
  %add.ptr196 = getelementptr inbounds i8, i8* %126, i64 %127
  %128 = load i64, i64* %slen, align 8
  %129 = load i64, i64* %ulen, align 8
  %sub197 = sub i64 %128, %129
  call void @Perl_sv_catpvn_flags(%struct.sv* %125, i8* %add.ptr196, i64 %sub197, i32 2)
  br label %if.end198

if.end198:                                        ; preds = %if.then195, %if.then191
  br label %if.end216

if.else199:                                       ; preds = %if.then189
  %130 = load i8*, i8** %s, align 8
  %131 = load i64, i64* %slen, align 8
  %add.ptr200 = getelementptr inbounds i8, i8* %130, i64 %131
  store i8* %add.ptr200, i8** %send, align 8
  %arraydecay201 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %132 = load i8, i8* %arraydecay201, align 1
  %133 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %133, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 %132, i8* %133, align 1
  %arraydecay202 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %add.ptr203 = getelementptr inbounds i8, i8* %arraydecay202, i64 1
  %134 = load i8, i8* %add.ptr203, align 1
  %135 = load i8*, i8** %d, align 8
  %incdec.ptr204 = getelementptr inbounds i8, i8* %135, i32 1
  store i8* %incdec.ptr204, i8** %d, align 8
  store i8 %134, i8* %135, align 1
  %136 = load i8*, i8** %s, align 8
  %incdec.ptr205 = getelementptr inbounds i8, i8* %136, i32 1
  store i8* %incdec.ptr205, i8** %s, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else199
  %137 = load i8*, i8** %s, align 8
  %138 = load i8*, i8** %send, align 8
  %cmp206 = icmp ult i8* %137, %138
  br i1 %cmp206, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %139 = load i8*, i8** %d, align 8
  %140 = load i8*, i8** %s, align 8
  %141 = load i8, i8* %140, align 1
  %conv208 = zext i8 %141 to i64
  %call209 = call i8* @Perl_uvoffuni_to_utf8_flags(i8* %139, i64 %conv208, i64 0)
  store i8* %call209, i8** %d, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %142 = load i8*, i8** %s, align 8
  %incdec.ptr210 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr210, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %143 = load i8*, i8** %d, align 8
  store i8 0, i8* %143, align 1
  br label %do.body

do.body:                                          ; preds = %for.end
  %144 = load i8*, i8** %d, align 8
  %145 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u211 = getelementptr inbounds %struct.sv, %struct.sv* %145, i32 0, i32 3
  %svu_pv212 = bitcast %union.anon* %sv_u211 to i8**
  %146 = load i8*, i8** %svu_pv212, align 8
  %add.ptr213 = getelementptr inbounds i8, i8* %146, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %144 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr213 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %147 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any214 = getelementptr inbounds %struct.sv, %struct.sv* %147, i32 0, i32 0
  %148 = load i8*, i8** %sv_any214, align 8
  %149 = bitcast i8* %148 to %struct.xpv*
  %xpv_cur215 = getelementptr inbounds %struct.xpv, %struct.xpv* %149, i32 0, i32 2
  store i64 %sub.ptr.sub, i64* %xpv_cur215, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end216

if.end216:                                        ; preds = %do.end, %if.end198
  %150 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags217 = getelementptr inbounds %struct.sv, %struct.sv* %150, i32 0, i32 2
  %151 = load i32, i32* %sv_flags217, align 4
  %or218 = or i32 %151, 536870912
  store i32 %or218, i32* %sv_flags217, align 4
  br label %if.end227

if.else219:                                       ; preds = %if.then187
  %152 = load i8*, i8** %d, align 8
  %arraydecay220 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %153 = load i64, i64* %tculen, align 8
  %mul221 = mul i64 %153, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %152, i8* align 1 %arraydecay220, i64 %mul221, i1 false)
  br label %do.body222

do.body222:                                       ; preds = %if.else219
  %154 = load i64, i64* %need, align 8
  %sub223 = sub i64 %154, 1
  %155 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any224 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 0
  %156 = load i8*, i8** %sv_any224, align 8
  %157 = bitcast i8* %156 to %struct.xpv*
  %xpv_cur225 = getelementptr inbounds %struct.xpv, %struct.xpv* %157, i32 0, i32 2
  store i64 %sub223, i64* %xpv_cur225, align 8
  br label %do.end226

do.end226:                                        ; preds = %do.body222
  br label %if.end227

if.end227:                                        ; preds = %do.end226, %if.end216
  br label %if.end265

if.else228:                                       ; preds = %if.end185
  %158 = load i64, i64* %slen, align 8
  %tobool229 = icmp ne i64 %158, 0
  br i1 %tobool229, label %if.then230, label %if.else240

if.then230:                                       ; preds = %if.else228
  %159 = load i8, i8* %inplace, align 1
  %tobool231 = trunc i8 %159 to i1
  br i1 %tobool231, label %if.then232, label %if.else234

if.then232:                                       ; preds = %if.then230
  %arraydecay233 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %160 = load i8, i8* %arraydecay233, align 1
  %161 = load i8*, i8** %d, align 8
  store i8 %160, i8* %161, align 1
  br label %if.end239

if.else234:                                       ; preds = %if.then230
  %162 = load i8*, i8** %d, align 8
  %arraydecay235 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %163 = load i64, i64* %tculen, align 8
  %mul236 = mul i64 %163, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %162, i8* align 1 %arraydecay235, i64 %mul236, i1 false)
  %164 = load i64, i64* %tculen, align 8
  %sub237 = sub i64 %164, 1
  %165 = load i8*, i8** %d, align 8
  %add.ptr238 = getelementptr inbounds i8, i8* %165, i64 %sub237
  store i8* %add.ptr238, i8** %d, align 8
  br label %if.end239

if.end239:                                        ; preds = %if.else234, %if.then232
  br label %if.end241

if.else240:                                       ; preds = %if.else228
  %166 = load i8*, i8** %s, align 8
  %167 = load i8, i8* %166, align 1
  %168 = load i8*, i8** %d, align 8
  store i8 %167, i8* %168, align 1
  br label %if.end241

if.end241:                                        ; preds = %if.else240, %if.end239
  %169 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags242 = getelementptr inbounds %struct.sv, %struct.sv* %169, i32 0, i32 2
  %170 = load i32, i32* %sv_flags242, align 4
  %and243 = and i32 %170, 536870912
  %tobool244 = icmp ne i32 %and243, 0
  br i1 %tobool244, label %land.lhs.true245, label %if.end253

land.lhs.true245:                                 ; preds = %if.end241
  %171 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints246 = getelementptr inbounds %struct.cop, %struct.cop* %171, i32 0, i32 10
  %172 = load i32, i32* %cop_hints246, align 8
  %add247 = add i32 %172, 0
  %and248 = and i32 %add247, 8
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %if.end253, label %if.then250

if.then250:                                       ; preds = %land.lhs.true245
  %173 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags251 = getelementptr inbounds %struct.sv, %struct.sv* %173, i32 0, i32 2
  %174 = load i32, i32* %sv_flags251, align 4
  %or252 = or i32 %174, 536870912
  store i32 %or252, i32* %sv_flags251, align 4
  br label %if.end253

if.end253:                                        ; preds = %if.then250, %land.lhs.true245, %if.end241
  %175 = load i8, i8* %inplace, align 1
  %tobool254 = trunc i8 %175 to i1
  br i1 %tobool254, label %if.end264, label %if.then255

if.then255:                                       ; preds = %if.end253
  %176 = load i8*, i8** %d, align 8
  %add.ptr256 = getelementptr inbounds i8, i8* %176, i64 1
  %177 = load i8*, i8** %s, align 8
  %add.ptr257 = getelementptr inbounds i8, i8* %177, i64 1
  %178 = load i64, i64* %slen, align 8
  %mul258 = mul i64 %178, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr256, i8* align 1 %add.ptr257, i64 %mul258, i1 false)
  br label %do.body259

do.body259:                                       ; preds = %if.then255
  %179 = load i64, i64* %need, align 8
  %sub260 = sub i64 %179, 1
  %180 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any261 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 0
  %181 = load i8*, i8** %sv_any261, align 8
  %182 = bitcast i8* %181 to %struct.xpv*
  %xpv_cur262 = getelementptr inbounds %struct.xpv, %struct.xpv* %182, i32 0, i32 2
  store i64 %sub260, i64* %xpv_cur262, align 8
  br label %do.end263

do.end263:                                        ; preds = %do.body259
  br label %if.end264

if.end264:                                        ; preds = %do.end263, %if.end253
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.end227
  %183 = load %struct.sv*, %struct.sv** %dest, align 8
  %184 = load %struct.sv*, %struct.sv** %source, align 8
  %cmp266 = icmp ne %struct.sv* %183, %184
  br i1 %cmp266, label %land.lhs.true268, label %if.end298

land.lhs.true268:                                 ; preds = %if.end265
  %185 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags269 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 2
  %186 = load i32, i32* %sv_flags269, align 4
  %and270 = and i32 %186, 14680064
  %tobool271 = icmp ne i32 %and270, 0
  br i1 %tobool271, label %land.lhs.true272, label %if.end298

land.lhs.true272:                                 ; preds = %land.lhs.true268
  %187 = load %struct.sv*, %struct.sv** %source, align 8
  %call273 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %187)
  br i1 %call273, label %if.then275, label %if.end298

if.then275:                                       ; preds = %land.lhs.true272
  br label %do.body276

do.body276:                                       ; preds = %if.then275
  %188 = load i8, i8* @PL_tainting, align 1
  %tobool277 = trunc i8 %188 to i1
  br i1 %tobool277, label %cond.true279, label %cond.false280

cond.true279:                                     ; preds = %do.body276
  br i1 true, label %if.then281, label %if.end296

cond.false280:                                    ; preds = %do.body276
  br i1 false, label %if.then281, label %if.end296

if.then281:                                       ; preds = %cond.false280, %cond.true279
  %189 = load i8, i8* @PL_tainted, align 1
  %tobool282 = trunc i8 %189 to i1
  br i1 %tobool282, label %cond.true284, label %cond.false285

cond.true284:                                     ; preds = %if.then281
  br i1 true, label %if.then286, label %if.end295

cond.false285:                                    ; preds = %if.then281
  br i1 false, label %if.then286, label %if.end295

if.then286:                                       ; preds = %cond.false285, %cond.true284
  br label %do.body287

do.body287:                                       ; preds = %if.then286
  %190 = load i8, i8* @PL_tainting, align 1
  %tobool288 = trunc i8 %190 to i1
  br i1 %tobool288, label %cond.true290, label %cond.false291

cond.true290:                                     ; preds = %do.body287
  br i1 true, label %if.then292, label %if.end293

cond.false291:                                    ; preds = %do.body287
  br i1 false, label %if.then292, label %if.end293

if.then292:                                       ; preds = %cond.false291, %cond.true290
  %191 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_magic(%struct.sv* %191, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end293

if.end293:                                        ; preds = %if.then292, %cond.false291, %cond.true290
  br label %do.end294

do.end294:                                        ; preds = %if.end293
  br label %if.end295

if.end295:                                        ; preds = %do.end294, %cond.false285, %cond.true284
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %cond.false280, %cond.true279
  br label %do.end297

do.end297:                                        ; preds = %if.end296
  br label %if.end298

if.end298:                                        ; preds = %do.end297, %land.lhs.true272, %land.lhs.true268, %if.end265
  br label %do.body299

do.body299:                                       ; preds = %if.end298
  %192 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags300 = getelementptr inbounds %struct.sv, %struct.sv* %192, i32 0, i32 2
  %193 = load i32, i32* %sv_flags300, align 4
  %and301 = and i32 %193, 4194304
  %tobool302 = icmp ne i32 %and301, 0
  br i1 %tobool302, label %cond.true303, label %cond.false304

cond.true303:                                     ; preds = %do.body299
  br i1 true, label %if.then305, label %if.end307

cond.false304:                                    ; preds = %do.body299
  br i1 false, label %if.then305, label %if.end307

if.then305:                                       ; preds = %cond.false304, %cond.true303
  %194 = load %struct.sv*, %struct.sv** %dest, align 8
  %call306 = call i32 @Perl_mg_set(%struct.sv* %194)
  br label %if.end307

if.end307:                                        ; preds = %if.then305, %cond.false304, %cond.true303
  br label %do.end308

do.end308:                                        ; preds = %if.end307
  %195 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %195, i32 0, i32 0
  %196 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %196
}

declare dso_local i64 @Perl__to_utf8_title_flags(i8*, i8*, i64*, i1 zeroext) #1

declare dso_local i64 @Perl__to_utf8_lower_flags(i8*, i8*, i64*, i1 zeroext) #1

declare dso_local zeroext i1 @Perl__is_in_locale_category(i1 zeroext, i32) #1

declare dso_local i64 @Perl__to_upper_title_latin1(i8 zeroext, i8*, i64*, i8 signext) #1

declare dso_local void @Perl_sv_catpvn_flags(%struct.sv*, i8*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_uc() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %source = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %min = alloca i64, align 8
  %dest = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %targ = alloca %struct.sv*, align 8
  %send = alloca i8*, align 8
  %tmpbuf = alloca [14 x i8], align 1
  %in_iota_subscript = alloca i8, align 1
  %u = alloca i64, align 8
  %ulen = alloca i64, align 8
  %uv = alloca i64, align 8
  %o = alloca i64, align 8
  %send170 = alloca i8*, align 8
  %o234 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %source, align 8
  %3 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %source, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, 131072
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %10, 524288
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, 4194304
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.else, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 1
  %14 = load i32, i32* %sv_refcnt, align 8
  %cmp = icmp eq i32 %14, 1
  br i1 %cmp, label %land.lhs.true12, label %if.else

land.lhs.true12:                                  ; preds = %land.lhs.true11, %land.end
  %15 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %16, 134283264
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.else, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %17 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %18, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.else

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %19 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %20, 536870912
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %land.lhs.true27

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 10
  %22 = load i32, i32* %cop_hints, align 8
  %add = add i32 %22, 0
  %and25 = and i32 %add, 8
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %land.lhs.true27, label %if.else

land.lhs.true27:                                  ; preds = %land.lhs.true24, %land.lhs.true20
  %23 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints28 = getelementptr inbounds %struct.cop, %struct.cop* %23, i32 0, i32 10
  %24 = load i32, i32* %cop_hints28, align 8
  %add29 = add i32 %24, 0
  %and30 = and i32 %add29, 2048
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %land.lhs.true39, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %land.lhs.true27
  %25 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints33 = getelementptr inbounds %struct.cop, %struct.cop* %25, i32 0, i32 10
  %26 = load i32, i32* %cop_hints33, align 8
  %add34 = add i32 %26, 0
  %and35 = and i32 %add34, 16
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %land.lhs.true37, label %if.then

land.lhs.true37:                                  ; preds = %lor.lhs.false32
  %call38 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call38, label %land.lhs.true39, label %if.then

land.lhs.true39:                                  ; preds = %land.lhs.true37, %land.lhs.true27
  %27 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints40 = getelementptr inbounds %struct.cop, %struct.cop* %27, i32 0, i32 10
  %28 = load i32, i32* %cop_hints40, align 8
  %add41 = add i32 %28, 0
  %and42 = and i32 %add41, 8
  %tobool43 = icmp ne i32 %and42, 0
  br i1 %tobool43, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true39, %land.lhs.true37, %lor.lhs.false32
  %29 = load %struct.sv*, %struct.sv** %source, align 8
  store %struct.sv* %29, %struct.sv** %dest, align 8
  %30 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %31, 430018304
  %cmp46 = icmp eq i32 %and45, 1024
  br i1 %cmp46, label %cond.true47, label %cond.false48

cond.true47:                                      ; preds = %if.then
  %32 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any, align 8
  %34 = bitcast i8* %33 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %34, i32 0, i32 2
  %35 = load i64, i64* %xpv_cur, align 8
  store i64 %35, i64* %len, align 8
  %36 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %37 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false48:                                     ; preds = %if.then
  %38 = load %struct.sv*, %struct.sv** %source, align 8
  %call49 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %38, i64* %len, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false48, %cond.true47
  %cond = phi i8* [ %37, %cond.true47 ], [ %call49, %cond.false48 ]
  store i8* %cond, i8** %d, align 8
  store i8* %cond, i8** %s, align 8
  %39 = load i64, i64* %len, align 8
  %add50 = add i64 %39, 1
  store i64 %add50, i64* %min, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true39, %land.lhs.true24, %land.lhs.true16, %land.lhs.true12, %land.lhs.true11, %land.lhs.true, %lor.lhs.false
  %40 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %41 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %41, i32 0, i32 3
  %42 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %40, i64 %42
  %43 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %43, %struct.sv** %targ, align 8
  %44 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %44, %struct.sv** %dest, align 8
  %45 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 2
  %46 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %46, 2098176
  %cmp53 = icmp eq i32 %and52, 1024
  br i1 %cmp53, label %cond.true54, label %cond.false59

cond.true54:                                      ; preds = %if.else
  %47 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any55 = getelementptr inbounds %struct.sv, %struct.sv* %47, i32 0, i32 0
  %48 = load i8*, i8** %sv_any55, align 8
  %49 = bitcast i8* %48 to %struct.xpv*
  %xpv_cur56 = getelementptr inbounds %struct.xpv, %struct.xpv* %49, i32 0, i32 2
  %50 = load i64, i64* %xpv_cur56, align 8
  store i64 %50, i64* %len, align 8
  %51 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u57 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 3
  %svu_pv58 = bitcast %union.anon* %sv_u57 to i8**
  %52 = load i8*, i8** %svu_pv58, align 8
  %add.ptr = getelementptr inbounds i8, i8* %52, i64 0
  br label %cond.end61

cond.false59:                                     ; preds = %if.else
  %53 = load %struct.sv*, %struct.sv** %source, align 8
  %call60 = call i8* @Perl_sv_2pv_flags(%struct.sv* %53, i64* %len, i32 32)
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false59, %cond.true54
  %cond62 = phi i8* [ %add.ptr, %cond.true54 ], [ %call60, %cond.false59 ]
  store i8* %cond62, i8** %s, align 8
  %54 = load i64, i64* %len, align 8
  %add63 = add i64 %54, 1
  store i64 %add63, i64* %min, align 8
  %55 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags64 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %56, 255
  %cmp66 = icmp uge i32 %and65, 3
  br i1 %cmp66, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end61
  %57 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_upgrade(%struct.sv* %57, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end61
  %58 = phi i1 [ true, %cond.end61 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %58 to i32
  %59 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags67 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags67, align 4
  %and68 = and i32 %60, 268435456
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %cond.true73, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %lor.end
  %61 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any71 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 0
  %62 = load i8*, i8** %sv_any71, align 8
  %63 = bitcast i8* %62 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %63, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %64 = load i64, i64* %xpvlenu_len, align 8
  %65 = load i64, i64* %min, align 8
  %cmp72 = icmp ult i64 %64, %65
  br i1 %cmp72, label %cond.true73, label %cond.false75

cond.true73:                                      ; preds = %lor.lhs.false70, %lor.end
  %66 = load %struct.sv*, %struct.sv** %dest, align 8
  %67 = load i64, i64* %min, align 8
  %call74 = call i8* @Perl_sv_grow(%struct.sv* %66, i64 %67)
  br label %cond.end78

cond.false75:                                     ; preds = %lor.lhs.false70
  %68 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u76 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 3
  %svu_pv77 = bitcast %union.anon* %sv_u76 to i8**
  %69 = load i8*, i8** %svu_pv77, align 8
  br label %cond.end78

cond.end78:                                       ; preds = %cond.false75, %cond.true73
  %cond79 = phi i8* [ %call74, %cond.true73 ], [ %69, %cond.false75 ]
  store i8* %cond79, i8** %d, align 8
  %70 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags80 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags80, align 4
  %and81 = and i32 %71, 1610547455
  store i32 %and81, i32* %sv_flags80, align 4
  %72 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags82 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 2
  %73 = load i32, i32* %sv_flags82, align 4
  %or = or i32 %73, 17408
  store i32 %or, i32* %sv_flags82, align 4
  %74 = load %struct.sv*, %struct.sv** %dest, align 8
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %74, %struct.sv** %75, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end78, %cond.end
  %76 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags83 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 2
  %77 = load i32, i32* %sv_flags83, align 4
  %and84 = and i32 %77, 536870912
  %tobool85 = icmp ne i32 %and84, 0
  br i1 %tobool85, label %land.lhs.true86, label %if.else167

land.lhs.true86:                                  ; preds = %if.end
  %78 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints87 = getelementptr inbounds %struct.cop, %struct.cop* %78, i32 0, i32 10
  %79 = load i32, i32* %cop_hints87, align 8
  %add88 = add i32 %79, 0
  %and89 = and i32 %add88, 8
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %if.else167, label %if.then91

if.then91:                                        ; preds = %land.lhs.true86
  %80 = load i8*, i8** %s, align 8
  %81 = load i64, i64* %len, align 8
  %add.ptr92 = getelementptr inbounds i8, i8* %80, i64 %81
  store i8* %add.ptr92, i8** %send, align 8
  store i8 0, i8* %in_iota_subscript, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end151, %if.then91
  %82 = load i8*, i8** %s, align 8
  %83 = load i8*, i8** %send, align 8
  %cmp93 = icmp ult i8* %82, %83
  br i1 %cmp93, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %84 = load i8, i8* %in_iota_subscript, align 1
  %tobool94 = trunc i8 %84 to i1
  br i1 %tobool94, label %land.lhs.true95, label %if.end99

land.lhs.true95:                                  ; preds = %while.body
  %85 = load i8*, i8** %s, align 8
  %call96 = call zeroext i1 @Perl__is_utf8_mark(i8* %85)
  br i1 %call96, label %if.end99, label %if.then97

if.then97:                                        ; preds = %land.lhs.true95
  %86 = load i8*, i8** %d, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %86, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), i64 2, i1 false)
  %87 = load i8*, i8** %d, align 8
  %add.ptr98 = getelementptr inbounds i8, i8* %87, i64 2
  store i8* %add.ptr98, i8** %d, align 8
  store i8 0, i8* %in_iota_subscript, align 1
  br label %if.end99

if.end99:                                         ; preds = %if.then97, %land.lhs.true95, %while.body
  %88 = load i8*, i8** %s, align 8
  %89 = load i8, i8* %88, align 1
  %idxprom = zext i8 %89 to i64
  %arrayidx100 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %90 = load i8, i8* %arrayidx100, align 1
  %conv = zext i8 %90 to i64
  store i64 %conv, i64* %u, align 8
  %91 = load i8*, i8** %s, align 8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call101 = call i64 @Perl__to_utf8_upper_flags(i8* %91, i8* %arraydecay, i64* %ulen, i1 zeroext false)
  store i64 %call101, i64* %uv, align 8
  %92 = load i64, i64* %uv, align 8
  %cmp102 = icmp eq i64 %92, 921
  br i1 %cmp102, label %land.lhs.true104, label %if.else112

land.lhs.true104:                                 ; preds = %if.end99
  %93 = load i8*, i8** %s, align 8
  %94 = load i8*, i8** %send, align 8
  %95 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %95 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call105 = call zeroext i1 @Perl_ckwarn_d(i32 44)
  %96 = zext i1 %call105 to i64
  %cond107 = select i1 %call105, i32 0, i32 -8161
  %call108 = call i64 @Perl_utf8n_to_uvchr(i8* %93, i64 %sub.ptr.sub, i64* null, i32 %cond107)
  %cmp109 = icmp eq i64 %call108, 837
  br i1 %cmp109, label %if.then111, label %if.else112

if.then111:                                       ; preds = %land.lhs.true104
  store i8 1, i8* %in_iota_subscript, align 1
  br label %if.end151

if.else112:                                       ; preds = %land.lhs.true104, %if.end99
  %97 = load i64, i64* %ulen, align 8
  %98 = load i64, i64* %u, align 8
  %cmp113 = icmp ugt i64 %97, %98
  br i1 %cmp113, label %land.lhs.true115, label %if.end148

land.lhs.true115:                                 ; preds = %if.else112
  %99 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any116 = getelementptr inbounds %struct.sv, %struct.sv* %99, i32 0, i32 0
  %100 = load i8*, i8** %sv_any116, align 8
  %101 = bitcast i8* %100 to %struct.xpv*
  %xpv_len_u117 = getelementptr inbounds %struct.xpv, %struct.xpv* %101, i32 0, i32 3
  %xpvlenu_len118 = bitcast %union.anon.18* %xpv_len_u117 to i64*
  %102 = load i64, i64* %xpvlenu_len118, align 8
  %103 = load i64, i64* %ulen, align 8
  %104 = load i64, i64* %u, align 8
  %sub = sub i64 %103, %104
  %105 = load i64, i64* %min, align 8
  %add119 = add i64 %105, %sub
  store i64 %add119, i64* %min, align 8
  %cmp120 = icmp ult i64 %102, %add119
  br i1 %cmp120, label %if.then122, label %if.end148

if.then122:                                       ; preds = %land.lhs.true115
  %106 = load i8*, i8** %d, align 8
  %107 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u123 = getelementptr inbounds %struct.sv, %struct.sv* %107, i32 0, i32 3
  %svu_pv124 = bitcast %union.anon* %sv_u123 to i8**
  %108 = load i8*, i8** %svu_pv124, align 8
  %add.ptr125 = getelementptr inbounds i8, i8* %108, i64 0
  %sub.ptr.lhs.cast126 = ptrtoint i8* %106 to i64
  %sub.ptr.rhs.cast127 = ptrtoint i8* %add.ptr125 to i64
  %sub.ptr.sub128 = sub i64 %sub.ptr.lhs.cast126, %sub.ptr.rhs.cast127
  store i64 %sub.ptr.sub128, i64* %o, align 8
  %109 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags129 = getelementptr inbounds %struct.sv, %struct.sv* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags129, align 4
  %and130 = and i32 %110, 268435456
  %tobool131 = icmp ne i32 %and130, 0
  br i1 %tobool131, label %cond.true138, label %lor.lhs.false132

lor.lhs.false132:                                 ; preds = %if.then122
  %111 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any133 = getelementptr inbounds %struct.sv, %struct.sv* %111, i32 0, i32 0
  %112 = load i8*, i8** %sv_any133, align 8
  %113 = bitcast i8* %112 to %struct.xpv*
  %xpv_len_u134 = getelementptr inbounds %struct.xpv, %struct.xpv* %113, i32 0, i32 3
  %xpvlenu_len135 = bitcast %union.anon.18* %xpv_len_u134 to i64*
  %114 = load i64, i64* %xpvlenu_len135, align 8
  %115 = load i64, i64* %min, align 8
  %cmp136 = icmp ult i64 %114, %115
  br i1 %cmp136, label %cond.true138, label %cond.false140

cond.true138:                                     ; preds = %lor.lhs.false132, %if.then122
  %116 = load %struct.sv*, %struct.sv** %dest, align 8
  %117 = load i64, i64* %min, align 8
  %call139 = call i8* @Perl_sv_grow(%struct.sv* %116, i64 %117)
  br label %cond.end143

cond.false140:                                    ; preds = %lor.lhs.false132
  %118 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u141 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 3
  %svu_pv142 = bitcast %union.anon* %sv_u141 to i8**
  %119 = load i8*, i8** %svu_pv142, align 8
  br label %cond.end143

cond.end143:                                      ; preds = %cond.false140, %cond.true138
  %cond144 = phi i8* [ %call139, %cond.true138 ], [ %119, %cond.false140 ]
  %120 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u145 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 3
  %svu_pv146 = bitcast %union.anon* %sv_u145 to i8**
  %121 = load i8*, i8** %svu_pv146, align 8
  %122 = load i64, i64* %o, align 8
  %add.ptr147 = getelementptr inbounds i8, i8* %121, i64 %122
  store i8* %add.ptr147, i8** %d, align 8
  br label %if.end148

if.end148:                                        ; preds = %cond.end143, %land.lhs.true115, %if.else112
  %123 = load i8*, i8** %d, align 8
  %arraydecay149 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %124 = load i64, i64* %ulen, align 8
  %mul = mul i64 %124, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %arraydecay149, i64 %mul, i1 false)
  %125 = load i64, i64* %ulen, align 8
  %126 = load i8*, i8** %d, align 8
  %add.ptr150 = getelementptr inbounds i8, i8* %126, i64 %125
  store i8* %add.ptr150, i8** %d, align 8
  br label %if.end151

if.end151:                                        ; preds = %if.end148, %if.then111
  %127 = load i64, i64* %u, align 8
  %128 = load i8*, i8** %s, align 8
  %add.ptr152 = getelementptr inbounds i8, i8* %128, i64 %127
  store i8* %add.ptr152, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %129 = load i8, i8* %in_iota_subscript, align 1
  %tobool153 = trunc i8 %129 to i1
  br i1 %tobool153, label %if.then154, label %if.end156

if.then154:                                       ; preds = %while.end
  %130 = load i8*, i8** %d, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0), i64 2, i1 false)
  %131 = load i8*, i8** %d, align 8
  %add.ptr155 = getelementptr inbounds i8, i8* %131, i64 2
  store i8* %add.ptr155, i8** %d, align 8
  br label %if.end156

if.end156:                                        ; preds = %if.then154, %while.end
  %132 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags157 = getelementptr inbounds %struct.sv, %struct.sv* %132, i32 0, i32 2
  %133 = load i32, i32* %sv_flags157, align 4
  %or158 = or i32 %133, 536870912
  store i32 %or158, i32* %sv_flags157, align 4
  %134 = load i8*, i8** %d, align 8
  store i8 0, i8* %134, align 1
  br label %do.body

do.body:                                          ; preds = %if.end156
  %135 = load i8*, i8** %d, align 8
  %136 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u159 = getelementptr inbounds %struct.sv, %struct.sv* %136, i32 0, i32 3
  %svu_pv160 = bitcast %union.anon* %sv_u159 to i8**
  %137 = load i8*, i8** %svu_pv160, align 8
  %add.ptr161 = getelementptr inbounds i8, i8* %137, i64 0
  %sub.ptr.lhs.cast162 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast163 = ptrtoint i8* %add.ptr161 to i64
  %sub.ptr.sub164 = sub i64 %sub.ptr.lhs.cast162, %sub.ptr.rhs.cast163
  %138 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any165 = getelementptr inbounds %struct.sv, %struct.sv* %138, i32 0, i32 0
  %139 = load i8*, i8** %sv_any165, align 8
  %140 = bitcast i8* %139 to %struct.xpv*
  %xpv_cur166 = getelementptr inbounds %struct.xpv, %struct.xpv* %140, i32 0, i32 2
  store i64 %sub.ptr.sub164, i64* %xpv_cur166, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end311

if.else167:                                       ; preds = %land.lhs.true86, %if.end
  %141 = load i64, i64* %len, align 8
  %tobool168 = icmp ne i64 %141, 0
  br i1 %tobool168, label %if.then169, label %if.end296

if.then169:                                       ; preds = %if.else167
  %142 = load i8*, i8** %s, align 8
  %143 = load i64, i64* %len, align 8
  %add.ptr171 = getelementptr inbounds i8, i8* %142, i64 %143
  store i8* %add.ptr171, i8** %send170, align 8
  %144 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints172 = getelementptr inbounds %struct.cop, %struct.cop* %144, i32 0, i32 10
  %145 = load i32, i32* %cop_hints172, align 8
  %add173 = add i32 %145, 0
  %and174 = and i32 %add173, 2048
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %land.lhs.true184, label %lor.lhs.false176

lor.lhs.false176:                                 ; preds = %if.then169
  %146 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints177 = getelementptr inbounds %struct.cop, %struct.cop* %146, i32 0, i32 10
  %147 = load i32, i32* %cop_hints177, align 8
  %add178 = add i32 %147, 0
  %and179 = and i32 %add178, 16
  %tobool180 = icmp ne i32 %and179, 0
  br i1 %tobool180, label %land.lhs.true181, label %if.then189

land.lhs.true181:                                 ; preds = %lor.lhs.false176
  %call182 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call182, label %land.lhs.true184, label %if.then189

land.lhs.true184:                                 ; preds = %land.lhs.true181, %if.then169
  %148 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints185 = getelementptr inbounds %struct.cop, %struct.cop* %148, i32 0, i32 10
  %149 = load i32, i32* %cop_hints185, align 8
  %add186 = add i32 %149, 0
  %and187 = and i32 %add186, 8
  %tobool188 = icmp ne i32 %and187, 0
  br i1 %tobool188, label %if.then189, label %if.else208

if.then189:                                       ; preds = %land.lhs.true184, %land.lhs.true181, %lor.lhs.false176
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then189
  %150 = load i8*, i8** %s, align 8
  %151 = load i8*, i8** %send170, align 8
  %cmp190 = icmp ult i8* %150, %151
  br i1 %cmp190, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %152 = load i8*, i8** %s, align 8
  %153 = load i8, i8* %152, align 1
  %idxprom192 = zext i8 %153 to i64
  %arrayidx193 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom192
  %154 = load i32, i32* %arrayidx193, align 4
  %and194 = and i32 %154, 16392
  %cmp195 = icmp eq i32 %and194, 16392
  br i1 %cmp195, label %cond.true197, label %cond.false202

cond.true197:                                     ; preds = %for.body
  %155 = load i8*, i8** %s, align 8
  %156 = load i8, i8* %155, align 1
  %conv198 = zext i8 %156 to i32
  %sub199 = sub nsw i32 %conv198, 32
  %conv200 = trunc i32 %sub199 to i8
  %conv201 = zext i8 %conv200 to i32
  br label %cond.end204

cond.false202:                                    ; preds = %for.body
  %157 = load i8*, i8** %s, align 8
  %158 = load i8, i8* %157, align 1
  %conv203 = zext i8 %158 to i32
  br label %cond.end204

cond.end204:                                      ; preds = %cond.false202, %cond.true197
  %cond205 = phi i32 [ %conv201, %cond.true197 ], [ %conv203, %cond.false202 ]
  %conv206 = trunc i32 %cond205 to i8
  %159 = load i8*, i8** %d, align 8
  store i8 %conv206, i8* %159, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end204
  %160 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  %161 = load i8*, i8** %s, align 8
  %incdec.ptr207 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %incdec.ptr207, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end295

if.else208:                                       ; preds = %land.lhs.true184
  br label %for.cond209

for.cond209:                                      ; preds = %for.inc291, %if.else208
  %162 = load i8*, i8** %s, align 8
  %163 = load i8*, i8** %send170, align 8
  %cmp210 = icmp ult i8* %162, %163
  br i1 %cmp210, label %for.body212, label %for.end294

for.body212:                                      ; preds = %for.cond209
  %164 = load i8*, i8** %s, align 8
  %165 = load i8, i8* %164, align 1
  %idxprom213 = zext i8 %165 to i64
  %arrayidx214 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_mod_latin1_uc, i64 0, i64 %idxprom213
  %166 = load i8, i8* %arrayidx214, align 1
  %conv215 = zext i8 %166 to i32
  %conv216 = trunc i32 %conv215 to i8
  %167 = load i8*, i8** %d, align 8
  store i8 %conv216, i8* %167, align 1
  %168 = load i8*, i8** %d, align 8
  %169 = load i8, i8* %168, align 1
  %conv217 = zext i8 %169 to i32
  %cmp218 = icmp ne i32 %conv217, 255
  br i1 %cmp218, label %cond.true220, label %cond.false221

cond.true220:                                     ; preds = %for.body212
  br i1 true, label %if.then222, label %if.end223

cond.false221:                                    ; preds = %for.body212
  br i1 false, label %if.then222, label %if.end223

if.then222:                                       ; preds = %cond.false221, %cond.true220
  br label %for.inc291

if.end223:                                        ; preds = %cond.false221, %cond.true220
  %170 = load i8*, i8** %s, align 8
  %171 = load i8, i8* %170, align 1
  %conv224 = zext i8 %171 to i32
  %cmp225 = icmp eq i32 %conv224, 223
  br i1 %cmp225, label %if.then227, label %if.end262

if.then227:                                       ; preds = %if.end223
  %172 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any228 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 0
  %173 = load i8*, i8** %sv_any228, align 8
  %174 = bitcast i8* %173 to %struct.xpv*
  %xpv_len_u229 = getelementptr inbounds %struct.xpv, %struct.xpv* %174, i32 0, i32 3
  %xpvlenu_len230 = bitcast %union.anon.18* %xpv_len_u229 to i64*
  %175 = load i64, i64* %xpvlenu_len230, align 8
  %176 = load i64, i64* %min, align 8
  %inc = add i64 %176, 1
  store i64 %inc, i64* %min, align 8
  %cmp231 = icmp ult i64 %175, %inc
  br i1 %cmp231, label %if.then233, label %if.end260

if.then233:                                       ; preds = %if.then227
  %177 = load i8*, i8** %d, align 8
  %178 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u235 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 3
  %svu_pv236 = bitcast %union.anon* %sv_u235 to i8**
  %179 = load i8*, i8** %svu_pv236, align 8
  %add.ptr237 = getelementptr inbounds i8, i8* %179, i64 0
  %sub.ptr.lhs.cast238 = ptrtoint i8* %177 to i64
  %sub.ptr.rhs.cast239 = ptrtoint i8* %add.ptr237 to i64
  %sub.ptr.sub240 = sub i64 %sub.ptr.lhs.cast238, %sub.ptr.rhs.cast239
  store i64 %sub.ptr.sub240, i64* %o234, align 8
  %180 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags241 = getelementptr inbounds %struct.sv, %struct.sv* %180, i32 0, i32 2
  %181 = load i32, i32* %sv_flags241, align 4
  %and242 = and i32 %181, 268435456
  %tobool243 = icmp ne i32 %and242, 0
  br i1 %tobool243, label %cond.true250, label %lor.lhs.false244

lor.lhs.false244:                                 ; preds = %if.then233
  %182 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any245 = getelementptr inbounds %struct.sv, %struct.sv* %182, i32 0, i32 0
  %183 = load i8*, i8** %sv_any245, align 8
  %184 = bitcast i8* %183 to %struct.xpv*
  %xpv_len_u246 = getelementptr inbounds %struct.xpv, %struct.xpv* %184, i32 0, i32 3
  %xpvlenu_len247 = bitcast %union.anon.18* %xpv_len_u246 to i64*
  %185 = load i64, i64* %xpvlenu_len247, align 8
  %186 = load i64, i64* %min, align 8
  %cmp248 = icmp ult i64 %185, %186
  br i1 %cmp248, label %cond.true250, label %cond.false252

cond.true250:                                     ; preds = %lor.lhs.false244, %if.then233
  %187 = load %struct.sv*, %struct.sv** %dest, align 8
  %188 = load i64, i64* %min, align 8
  %call251 = call i8* @Perl_sv_grow(%struct.sv* %187, i64 %188)
  br label %cond.end255

cond.false252:                                    ; preds = %lor.lhs.false244
  %189 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u253 = getelementptr inbounds %struct.sv, %struct.sv* %189, i32 0, i32 3
  %svu_pv254 = bitcast %union.anon* %sv_u253 to i8**
  %190 = load i8*, i8** %svu_pv254, align 8
  br label %cond.end255

cond.end255:                                      ; preds = %cond.false252, %cond.true250
  %cond256 = phi i8* [ %call251, %cond.true250 ], [ %190, %cond.false252 ]
  %191 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u257 = getelementptr inbounds %struct.sv, %struct.sv* %191, i32 0, i32 3
  %svu_pv258 = bitcast %union.anon* %sv_u257 to i8**
  %192 = load i8*, i8** %svu_pv258, align 8
  %193 = load i64, i64* %o234, align 8
  %add.ptr259 = getelementptr inbounds i8, i8* %192, i64 %193
  store i8* %add.ptr259, i8** %d, align 8
  br label %if.end260

if.end260:                                        ; preds = %cond.end255, %if.then227
  %194 = load i8*, i8** %d, align 8
  %incdec.ptr261 = getelementptr inbounds i8, i8* %194, i32 1
  store i8* %incdec.ptr261, i8** %d, align 8
  store i8 83, i8* %194, align 1
  %195 = load i8*, i8** %d, align 8
  store i8 83, i8* %195, align 1
  br label %for.inc291

if.end262:                                        ; preds = %if.end223
  %196 = load i8*, i8** %d, align 8
  %197 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u263 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 3
  %svu_pv264 = bitcast %union.anon* %sv_u263 to i8**
  %198 = load i8*, i8** %svu_pv264, align 8
  %add.ptr265 = getelementptr inbounds i8, i8* %198, i64 0
  %sub.ptr.lhs.cast266 = ptrtoint i8* %196 to i64
  %sub.ptr.rhs.cast267 = ptrtoint i8* %add.ptr265 to i64
  %sub.ptr.sub268 = sub i64 %sub.ptr.lhs.cast266, %sub.ptr.rhs.cast267
  store i64 %sub.ptr.sub268, i64* %len, align 8
  br label %do.body269

do.body269:                                       ; preds = %if.end262
  %199 = load i64, i64* %len, align 8
  %200 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any270 = getelementptr inbounds %struct.sv, %struct.sv* %200, i32 0, i32 0
  %201 = load i8*, i8** %sv_any270, align 8
  %202 = bitcast i8* %201 to %struct.xpv*
  %xpv_cur271 = getelementptr inbounds %struct.xpv, %struct.xpv* %202, i32 0, i32 2
  store i64 %199, i64* %xpv_cur271, align 8
  br label %do.end272

do.end272:                                        ; preds = %do.body269
  %203 = load %struct.sv*, %struct.sv** %dest, align 8
  %204 = load i8*, i8** %send170, align 8
  %205 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast273 = ptrtoint i8* %204 to i64
  %sub.ptr.rhs.cast274 = ptrtoint i8* %205 to i64
  %sub.ptr.sub275 = sub i64 %sub.ptr.lhs.cast273, %sub.ptr.rhs.cast274
  %mul276 = mul nsw i64 %sub.ptr.sub275, 2
  %add277 = add nsw i64 %mul276, 1
  %call278 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %203, i32 4098, i64 %add277)
  store i64 %call278, i64* %len, align 8
  %206 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u279 = getelementptr inbounds %struct.sv, %struct.sv* %206, i32 0, i32 3
  %svu_pv280 = bitcast %union.anon* %sv_u279 to i8**
  %207 = load i8*, i8** %svu_pv280, align 8
  %208 = load i64, i64* %len, align 8
  %add.ptr281 = getelementptr inbounds i8, i8* %207, i64 %208
  store i8* %add.ptr281, i8** %d, align 8
  br label %for.cond282

for.cond282:                                      ; preds = %for.inc288, %do.end272
  %209 = load i8*, i8** %s, align 8
  %210 = load i8*, i8** %send170, align 8
  %cmp283 = icmp ult i8* %209, %210
  br i1 %cmp283, label %for.body285, label %for.end290

for.body285:                                      ; preds = %for.cond282
  %211 = load i8*, i8** %s, align 8
  %212 = load i8, i8* %211, align 1
  %213 = load i8*, i8** %d, align 8
  %call286 = call i64 @Perl__to_upper_title_latin1(i8 zeroext %212, i8* %213, i64* %len, i8 signext 83)
  %214 = load i64, i64* %len, align 8
  %215 = load i8*, i8** %d, align 8
  %add.ptr287 = getelementptr inbounds i8, i8* %215, i64 %214
  store i8* %add.ptr287, i8** %d, align 8
  br label %for.inc288

for.inc288:                                       ; preds = %for.body285
  %216 = load i8*, i8** %s, align 8
  %incdec.ptr289 = getelementptr inbounds i8, i8* %216, i32 1
  store i8* %incdec.ptr289, i8** %s, align 8
  br label %for.cond282

for.end290:                                       ; preds = %for.cond282
  br label %for.end294

for.inc291:                                       ; preds = %if.end260, %if.then222
  %217 = load i8*, i8** %d, align 8
  %incdec.ptr292 = getelementptr inbounds i8, i8* %217, i32 1
  store i8* %incdec.ptr292, i8** %d, align 8
  %218 = load i8*, i8** %s, align 8
  %incdec.ptr293 = getelementptr inbounds i8, i8* %218, i32 1
  store i8* %incdec.ptr293, i8** %s, align 8
  br label %for.cond209

for.end294:                                       ; preds = %for.end290, %for.cond209
  br label %if.end295

if.end295:                                        ; preds = %for.end294, %for.end
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %if.else167
  %219 = load %struct.sv*, %struct.sv** %source, align 8
  %220 = load %struct.sv*, %struct.sv** %dest, align 8
  %cmp297 = icmp ne %struct.sv* %219, %220
  br i1 %cmp297, label %if.then299, label %if.end310

if.then299:                                       ; preds = %if.end296
  %221 = load i8*, i8** %d, align 8
  store i8 0, i8* %221, align 1
  br label %do.body300

do.body300:                                       ; preds = %if.then299
  %222 = load i8*, i8** %d, align 8
  %223 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u301 = getelementptr inbounds %struct.sv, %struct.sv* %223, i32 0, i32 3
  %svu_pv302 = bitcast %union.anon* %sv_u301 to i8**
  %224 = load i8*, i8** %svu_pv302, align 8
  %add.ptr303 = getelementptr inbounds i8, i8* %224, i64 0
  %sub.ptr.lhs.cast304 = ptrtoint i8* %222 to i64
  %sub.ptr.rhs.cast305 = ptrtoint i8* %add.ptr303 to i64
  %sub.ptr.sub306 = sub i64 %sub.ptr.lhs.cast304, %sub.ptr.rhs.cast305
  %225 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any307 = getelementptr inbounds %struct.sv, %struct.sv* %225, i32 0, i32 0
  %226 = load i8*, i8** %sv_any307, align 8
  %227 = bitcast i8* %226 to %struct.xpv*
  %xpv_cur308 = getelementptr inbounds %struct.xpv, %struct.xpv* %227, i32 0, i32 2
  store i64 %sub.ptr.sub306, i64* %xpv_cur308, align 8
  br label %do.end309

do.end309:                                        ; preds = %do.body300
  br label %if.end310

if.end310:                                        ; preds = %do.end309, %if.end296
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %do.end
  %228 = load %struct.sv*, %struct.sv** %dest, align 8
  %229 = load %struct.sv*, %struct.sv** %source, align 8
  %cmp312 = icmp ne %struct.sv* %228, %229
  br i1 %cmp312, label %land.lhs.true314, label %if.end344

land.lhs.true314:                                 ; preds = %if.end311
  %230 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags315 = getelementptr inbounds %struct.sv, %struct.sv* %230, i32 0, i32 2
  %231 = load i32, i32* %sv_flags315, align 4
  %and316 = and i32 %231, 14680064
  %tobool317 = icmp ne i32 %and316, 0
  br i1 %tobool317, label %land.lhs.true318, label %if.end344

land.lhs.true318:                                 ; preds = %land.lhs.true314
  %232 = load %struct.sv*, %struct.sv** %source, align 8
  %call319 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %232)
  br i1 %call319, label %if.then321, label %if.end344

if.then321:                                       ; preds = %land.lhs.true318
  br label %do.body322

do.body322:                                       ; preds = %if.then321
  %233 = load i8, i8* @PL_tainting, align 1
  %tobool323 = trunc i8 %233 to i1
  br i1 %tobool323, label %cond.true325, label %cond.false326

cond.true325:                                     ; preds = %do.body322
  br i1 true, label %if.then327, label %if.end342

cond.false326:                                    ; preds = %do.body322
  br i1 false, label %if.then327, label %if.end342

if.then327:                                       ; preds = %cond.false326, %cond.true325
  %234 = load i8, i8* @PL_tainted, align 1
  %tobool328 = trunc i8 %234 to i1
  br i1 %tobool328, label %cond.true330, label %cond.false331

cond.true330:                                     ; preds = %if.then327
  br i1 true, label %if.then332, label %if.end341

cond.false331:                                    ; preds = %if.then327
  br i1 false, label %if.then332, label %if.end341

if.then332:                                       ; preds = %cond.false331, %cond.true330
  br label %do.body333

do.body333:                                       ; preds = %if.then332
  %235 = load i8, i8* @PL_tainting, align 1
  %tobool334 = trunc i8 %235 to i1
  br i1 %tobool334, label %cond.true336, label %cond.false337

cond.true336:                                     ; preds = %do.body333
  br i1 true, label %if.then338, label %if.end339

cond.false337:                                    ; preds = %do.body333
  br i1 false, label %if.then338, label %if.end339

if.then338:                                       ; preds = %cond.false337, %cond.true336
  %236 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_magic(%struct.sv* %236, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end339

if.end339:                                        ; preds = %if.then338, %cond.false337, %cond.true336
  br label %do.end340

do.end340:                                        ; preds = %if.end339
  br label %if.end341

if.end341:                                        ; preds = %do.end340, %cond.false331, %cond.true330
  br label %if.end342

if.end342:                                        ; preds = %if.end341, %cond.false326, %cond.true325
  br label %do.end343

do.end343:                                        ; preds = %if.end342
  br label %if.end344

if.end344:                                        ; preds = %do.end343, %land.lhs.true318, %land.lhs.true314, %if.end311
  br label %do.body345

do.body345:                                       ; preds = %if.end344
  %237 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags346 = getelementptr inbounds %struct.sv, %struct.sv* %237, i32 0, i32 2
  %238 = load i32, i32* %sv_flags346, align 4
  %and347 = and i32 %238, 4194304
  %tobool348 = icmp ne i32 %and347, 0
  br i1 %tobool348, label %cond.true349, label %cond.false350

cond.true349:                                     ; preds = %do.body345
  br i1 true, label %if.then351, label %if.end353

cond.false350:                                    ; preds = %do.body345
  br i1 false, label %if.then351, label %if.end353

if.then351:                                       ; preds = %cond.false350, %cond.true349
  %239 = load %struct.sv*, %struct.sv** %dest, align 8
  %call352 = call i32 @Perl_mg_set(%struct.sv* %239)
  br label %if.end353

if.end353:                                        ; preds = %if.then351, %cond.false350, %cond.true349
  br label %do.end354

do.end354:                                        ; preds = %if.end353
  %240 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %240, i32 0, i32 0
  %241 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %241
}

declare dso_local zeroext i1 @Perl__is_utf8_mark(i8*) #1

declare dso_local i64 @Perl__to_utf8_upper_flags(i8*, i8*, i64*, i1 zeroext) #1

declare dso_local zeroext i1 @Perl_ckwarn_d(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lc() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %source = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %min = alloca i64, align 8
  %dest = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %targ = alloca %struct.sv*, align 8
  %send = alloca i8*, align 8
  %tmpbuf = alloca [14 x i8], align 1
  %u = alloca i64, align 8
  %ulen = alloca i64, align 8
  %o = alloca i64, align 8
  %send128 = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %source, align 8
  %3 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %source, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, 131072
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %land.lhs.true12, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %10, 524288
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %12, 4194304
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %if.else, label %land.lhs.true11

land.lhs.true11:                                  ; preds = %land.lhs.true
  %13 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 1
  %14 = load i32, i32* %sv_refcnt, align 8
  %cmp = icmp eq i32 %14, 1
  br i1 %cmp, label %land.lhs.true12, label %if.else

land.lhs.true12:                                  ; preds = %land.lhs.true11, %land.end
  %15 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags13 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags13, align 4
  %and14 = and i32 %16, 134283264
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.else, label %land.lhs.true16

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %17 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %18, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.else

land.lhs.true20:                                  ; preds = %land.lhs.true16
  %19 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags21 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags21, align 4
  %and22 = and i32 %20, 536870912
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %land.lhs.true24, label %if.then

land.lhs.true24:                                  ; preds = %land.lhs.true20
  %21 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %21, i32 0, i32 10
  %22 = load i32, i32* %cop_hints, align 8
  %add = add i32 %22, 0
  %and25 = and i32 %add, 8
  %tobool26 = icmp ne i32 %and25, 0
  br i1 %tobool26, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true24, %land.lhs.true20
  %23 = load %struct.sv*, %struct.sv** %source, align 8
  store %struct.sv* %23, %struct.sv** %dest, align 8
  %24 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags27 = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 2
  %25 = load i32, i32* %sv_flags27, align 4
  %and28 = and i32 %25, 430018304
  %cmp29 = icmp eq i32 %and28, 1024
  br i1 %cmp29, label %cond.true30, label %cond.false31

cond.true30:                                      ; preds = %if.then
  %26 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 0
  %27 = load i8*, i8** %sv_any, align 8
  %28 = bitcast i8* %27 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %28, i32 0, i32 2
  %29 = load i64, i64* %xpv_cur, align 8
  store i64 %29, i64* %len, align 8
  %30 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %31 = load i8*, i8** %svu_pv, align 8
  br label %cond.end

cond.false31:                                     ; preds = %if.then
  %32 = load %struct.sv*, %struct.sv** %source, align 8
  %call32 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %32, i64* %len, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false31, %cond.true30
  %cond = phi i8* [ %31, %cond.true30 ], [ %call32, %cond.false31 ]
  store i8* %cond, i8** %d, align 8
  store i8* %cond, i8** %s, align 8
  %33 = load i64, i64* %len, align 8
  %add33 = add i64 %33, 1
  store i64 %add33, i64* %min, align 8
  br label %if.end

if.else:                                          ; preds = %land.lhs.true24, %land.lhs.true16, %land.lhs.true12, %land.lhs.true11, %land.lhs.true, %lor.lhs.false
  %34 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 3
  %36 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %36
  %37 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %37, %struct.sv** %targ, align 8
  %38 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %38, %struct.sv** %dest, align 8
  %39 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags34 = getelementptr inbounds %struct.sv, %struct.sv* %39, i32 0, i32 2
  %40 = load i32, i32* %sv_flags34, align 4
  %and35 = and i32 %40, 2098176
  %cmp36 = icmp eq i32 %and35, 1024
  br i1 %cmp36, label %cond.true37, label %cond.false42

cond.true37:                                      ; preds = %if.else
  %41 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any38 = getelementptr inbounds %struct.sv, %struct.sv* %41, i32 0, i32 0
  %42 = load i8*, i8** %sv_any38, align 8
  %43 = bitcast i8* %42 to %struct.xpv*
  %xpv_cur39 = getelementptr inbounds %struct.xpv, %struct.xpv* %43, i32 0, i32 2
  %44 = load i64, i64* %xpv_cur39, align 8
  store i64 %44, i64* %len, align 8
  %45 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 3
  %svu_pv41 = bitcast %union.anon* %sv_u40 to i8**
  %46 = load i8*, i8** %svu_pv41, align 8
  %add.ptr = getelementptr inbounds i8, i8* %46, i64 0
  br label %cond.end44

cond.false42:                                     ; preds = %if.else
  %47 = load %struct.sv*, %struct.sv** %source, align 8
  %call43 = call i8* @Perl_sv_2pv_flags(%struct.sv* %47, i64* %len, i32 32)
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false42, %cond.true37
  %cond45 = phi i8* [ %add.ptr, %cond.true37 ], [ %call43, %cond.false42 ]
  store i8* %cond45, i8** %s, align 8
  %48 = load i64, i64* %len, align 8
  %add46 = add i64 %48, 1
  store i64 %add46, i64* %min, align 8
  %49 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags47 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags47, align 4
  %and48 = and i32 %50, 255
  %cmp49 = icmp uge i32 %and48, 3
  br i1 %cmp49, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end44
  %51 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_upgrade(%struct.sv* %51, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end44
  %52 = phi i1 [ true, %cond.end44 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %52 to i32
  %53 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %54, 268435456
  %tobool52 = icmp ne i32 %and51, 0
  br i1 %tobool52, label %cond.true56, label %lor.lhs.false53

lor.lhs.false53:                                  ; preds = %lor.end
  %55 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any54 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 0
  %56 = load i8*, i8** %sv_any54, align 8
  %57 = bitcast i8* %56 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %57, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %58 = load i64, i64* %xpvlenu_len, align 8
  %59 = load i64, i64* %min, align 8
  %cmp55 = icmp ult i64 %58, %59
  br i1 %cmp55, label %cond.true56, label %cond.false58

cond.true56:                                      ; preds = %lor.lhs.false53, %lor.end
  %60 = load %struct.sv*, %struct.sv** %dest, align 8
  %61 = load i64, i64* %min, align 8
  %call57 = call i8* @Perl_sv_grow(%struct.sv* %60, i64 %61)
  br label %cond.end61

cond.false58:                                     ; preds = %lor.lhs.false53
  %62 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u59 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 3
  %svu_pv60 = bitcast %union.anon* %sv_u59 to i8**
  %63 = load i8*, i8** %svu_pv60, align 8
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false58, %cond.true56
  %cond62 = phi i8* [ %call57, %cond.true56 ], [ %63, %cond.false58 ]
  store i8* %cond62, i8** %d, align 8
  %64 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 2
  %65 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %65, 1610547455
  store i32 %and64, i32* %sv_flags63, align 4
  %66 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %66, i32 0, i32 2
  %67 = load i32, i32* %sv_flags65, align 4
  %or = or i32 %67, 17408
  store i32 %or, i32* %sv_flags65, align 4
  %68 = load %struct.sv*, %struct.sv** %dest, align 8
  %69 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %68, %struct.sv** %69, align 8
  br label %if.end

if.end:                                           ; preds = %cond.end61, %cond.end
  %70 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %70, i32 0, i32 2
  %71 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %71, 536870912
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %land.lhs.true69, label %if.else125

land.lhs.true69:                                  ; preds = %if.end
  %72 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints70 = getelementptr inbounds %struct.cop, %struct.cop* %72, i32 0, i32 10
  %73 = load i32, i32* %cop_hints70, align 8
  %add71 = add i32 %73, 0
  %and72 = and i32 %add71, 8
  %tobool73 = icmp ne i32 %and72, 0
  br i1 %tobool73, label %if.else125, label %if.then74

if.then74:                                        ; preds = %land.lhs.true69
  %74 = load i8*, i8** %s, align 8
  %75 = load i64, i64* %len, align 8
  %add.ptr75 = getelementptr inbounds i8, i8* %74, i64 %75
  store i8* %add.ptr75, i8** %send, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end111, %if.then74
  %76 = load i8*, i8** %s, align 8
  %77 = load i8*, i8** %send, align 8
  %cmp76 = icmp ult i8* %76, %77
  br i1 %cmp76, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %78 = load i8*, i8** %s, align 8
  %79 = load i8, i8* %78, align 1
  %idxprom = zext i8 %79 to i64
  %arrayidx77 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %80 = load i8, i8* %arrayidx77, align 1
  %conv = zext i8 %80 to i64
  store i64 %conv, i64* %u, align 8
  %81 = load i8*, i8** %s, align 8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call78 = call i64 @Perl__to_utf8_lower_flags(i8* %81, i8* %arraydecay, i64* %ulen, i1 zeroext false)
  %82 = load i64, i64* %ulen, align 8
  %83 = load i64, i64* %u, align 8
  %cmp79 = icmp ugt i64 %82, %83
  br i1 %cmp79, label %land.lhs.true81, label %if.end111

land.lhs.true81:                                  ; preds = %while.body
  %84 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any82 = getelementptr inbounds %struct.sv, %struct.sv* %84, i32 0, i32 0
  %85 = load i8*, i8** %sv_any82, align 8
  %86 = bitcast i8* %85 to %struct.xpv*
  %xpv_len_u83 = getelementptr inbounds %struct.xpv, %struct.xpv* %86, i32 0, i32 3
  %xpvlenu_len84 = bitcast %union.anon.18* %xpv_len_u83 to i64*
  %87 = load i64, i64* %xpvlenu_len84, align 8
  %88 = load i64, i64* %ulen, align 8
  %89 = load i64, i64* %u, align 8
  %sub = sub i64 %88, %89
  %90 = load i64, i64* %min, align 8
  %add85 = add i64 %90, %sub
  store i64 %add85, i64* %min, align 8
  %cmp86 = icmp ult i64 %87, %add85
  br i1 %cmp86, label %if.then88, label %if.end111

if.then88:                                        ; preds = %land.lhs.true81
  %91 = load i8*, i8** %d, align 8
  %92 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u89 = getelementptr inbounds %struct.sv, %struct.sv* %92, i32 0, i32 3
  %svu_pv90 = bitcast %union.anon* %sv_u89 to i8**
  %93 = load i8*, i8** %svu_pv90, align 8
  %add.ptr91 = getelementptr inbounds i8, i8* %93, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr91 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %o, align 8
  %94 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags92 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags92, align 4
  %and93 = and i32 %95, 268435456
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %cond.true101, label %lor.lhs.false95

lor.lhs.false95:                                  ; preds = %if.then88
  %96 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any96 = getelementptr inbounds %struct.sv, %struct.sv* %96, i32 0, i32 0
  %97 = load i8*, i8** %sv_any96, align 8
  %98 = bitcast i8* %97 to %struct.xpv*
  %xpv_len_u97 = getelementptr inbounds %struct.xpv, %struct.xpv* %98, i32 0, i32 3
  %xpvlenu_len98 = bitcast %union.anon.18* %xpv_len_u97 to i64*
  %99 = load i64, i64* %xpvlenu_len98, align 8
  %100 = load i64, i64* %min, align 8
  %cmp99 = icmp ult i64 %99, %100
  br i1 %cmp99, label %cond.true101, label %cond.false103

cond.true101:                                     ; preds = %lor.lhs.false95, %if.then88
  %101 = load %struct.sv*, %struct.sv** %dest, align 8
  %102 = load i64, i64* %min, align 8
  %call102 = call i8* @Perl_sv_grow(%struct.sv* %101, i64 %102)
  br label %cond.end106

cond.false103:                                    ; preds = %lor.lhs.false95
  %103 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u104 = getelementptr inbounds %struct.sv, %struct.sv* %103, i32 0, i32 3
  %svu_pv105 = bitcast %union.anon* %sv_u104 to i8**
  %104 = load i8*, i8** %svu_pv105, align 8
  br label %cond.end106

cond.end106:                                      ; preds = %cond.false103, %cond.true101
  %cond107 = phi i8* [ %call102, %cond.true101 ], [ %104, %cond.false103 ]
  %105 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u108 = getelementptr inbounds %struct.sv, %struct.sv* %105, i32 0, i32 3
  %svu_pv109 = bitcast %union.anon* %sv_u108 to i8**
  %106 = load i8*, i8** %svu_pv109, align 8
  %107 = load i64, i64* %o, align 8
  %add.ptr110 = getelementptr inbounds i8, i8* %106, i64 %107
  store i8* %add.ptr110, i8** %d, align 8
  br label %if.end111

if.end111:                                        ; preds = %cond.end106, %land.lhs.true81, %while.body
  %108 = load i8*, i8** %d, align 8
  %arraydecay112 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %109 = load i64, i64* %ulen, align 8
  %mul = mul i64 %109, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %arraydecay112, i64 %mul, i1 false)
  %110 = load i64, i64* %ulen, align 8
  %111 = load i8*, i8** %d, align 8
  %add.ptr113 = getelementptr inbounds i8, i8* %111, i64 %110
  store i8* %add.ptr113, i8** %d, align 8
  %112 = load i64, i64* %u, align 8
  %113 = load i8*, i8** %s, align 8
  %add.ptr114 = getelementptr inbounds i8, i8* %113, i64 %112
  store i8* %add.ptr114, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %114 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags115 = getelementptr inbounds %struct.sv, %struct.sv* %114, i32 0, i32 2
  %115 = load i32, i32* %sv_flags115, align 4
  %or116 = or i32 %115, 536870912
  store i32 %or116, i32* %sv_flags115, align 4
  %116 = load i8*, i8** %d, align 8
  store i8 0, i8* %116, align 1
  br label %do.body

do.body:                                          ; preds = %while.end
  %117 = load i8*, i8** %d, align 8
  %118 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u117 = getelementptr inbounds %struct.sv, %struct.sv* %118, i32 0, i32 3
  %svu_pv118 = bitcast %union.anon* %sv_u117 to i8**
  %119 = load i8*, i8** %svu_pv118, align 8
  %add.ptr119 = getelementptr inbounds i8, i8* %119, i64 0
  %sub.ptr.lhs.cast120 = ptrtoint i8* %117 to i64
  %sub.ptr.rhs.cast121 = ptrtoint i8* %add.ptr119 to i64
  %sub.ptr.sub122 = sub i64 %sub.ptr.lhs.cast120, %sub.ptr.rhs.cast121
  %120 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 0
  %121 = load i8*, i8** %sv_any123, align 8
  %122 = bitcast i8* %121 to %struct.xpv*
  %xpv_cur124 = getelementptr inbounds %struct.xpv, %struct.xpv* %122, i32 0, i32 2
  store i64 %sub.ptr.sub122, i64* %xpv_cur124, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %if.end195

if.else125:                                       ; preds = %land.lhs.true69, %if.end
  %123 = load i64, i64* %len, align 8
  %tobool126 = icmp ne i64 %123, 0
  br i1 %tobool126, label %if.then127, label %if.end180

if.then127:                                       ; preds = %if.else125
  %124 = load i8*, i8** %s, align 8
  %125 = load i64, i64* %len, align 8
  %add.ptr129 = getelementptr inbounds i8, i8* %124, i64 %125
  store i8* %add.ptr129, i8** %send128, align 8
  %126 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints130 = getelementptr inbounds %struct.cop, %struct.cop* %126, i32 0, i32 10
  %127 = load i32, i32* %cop_hints130, align 8
  %add131 = add i32 %127, 0
  %and132 = and i32 %add131, 2048
  %tobool133 = icmp ne i32 %and132, 0
  br i1 %tobool133, label %land.lhs.true142, label %lor.lhs.false134

lor.lhs.false134:                                 ; preds = %if.then127
  %128 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints135 = getelementptr inbounds %struct.cop, %struct.cop* %128, i32 0, i32 10
  %129 = load i32, i32* %cop_hints135, align 8
  %add136 = add i32 %129, 0
  %and137 = and i32 %add136, 16
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %land.lhs.true139, label %if.then147

land.lhs.true139:                                 ; preds = %lor.lhs.false134
  %call140 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call140, label %land.lhs.true142, label %if.then147

land.lhs.true142:                                 ; preds = %land.lhs.true139, %if.then127
  %130 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints143 = getelementptr inbounds %struct.cop, %struct.cop* %130, i32 0, i32 10
  %131 = load i32, i32* %cop_hints143, align 8
  %add144 = add i32 %131, 0
  %and145 = and i32 %add144, 8
  %tobool146 = icmp ne i32 %and145, 0
  br i1 %tobool146, label %if.then147, label %if.else166

if.then147:                                       ; preds = %land.lhs.true142, %land.lhs.true139, %lor.lhs.false134
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then147
  %132 = load i8*, i8** %s, align 8
  %133 = load i8*, i8** %send128, align 8
  %cmp148 = icmp ult i8* %132, %133
  br i1 %cmp148, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %134 = load i8*, i8** %s, align 8
  %135 = load i8, i8* %134, align 1
  %idxprom150 = zext i8 %135 to i64
  %arrayidx151 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom150
  %136 = load i32, i32* %arrayidx151, align 4
  %and152 = and i32 %136, 16400
  %cmp153 = icmp eq i32 %and152, 16400
  br i1 %cmp153, label %cond.true155, label %cond.false160

cond.true155:                                     ; preds = %for.body
  %137 = load i8*, i8** %s, align 8
  %138 = load i8, i8* %137, align 1
  %conv156 = zext i8 %138 to i32
  %add157 = add nsw i32 %conv156, 32
  %conv158 = trunc i32 %add157 to i8
  %conv159 = zext i8 %conv158 to i32
  br label %cond.end162

cond.false160:                                    ; preds = %for.body
  %139 = load i8*, i8** %s, align 8
  %140 = load i8, i8* %139, align 1
  %conv161 = zext i8 %140 to i32
  br label %cond.end162

cond.end162:                                      ; preds = %cond.false160, %cond.true155
  %cond163 = phi i32 [ %conv159, %cond.true155 ], [ %conv161, %cond.false160 ]
  %conv164 = trunc i32 %cond163 to i8
  %141 = load i8*, i8** %d, align 8
  store i8 %conv164, i8* %141, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end162
  %142 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  %143 = load i8*, i8** %s, align 8
  %incdec.ptr165 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr165, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end179

if.else166:                                       ; preds = %land.lhs.true142
  br label %for.cond167

for.cond167:                                      ; preds = %for.inc175, %if.else166
  %144 = load i8*, i8** %s, align 8
  %145 = load i8*, i8** %send128, align 8
  %cmp168 = icmp ult i8* %144, %145
  br i1 %cmp168, label %for.body170, label %for.end178

for.body170:                                      ; preds = %for.cond167
  %146 = load i8*, i8** %s, align 8
  %147 = load i8, i8* %146, align 1
  %idxprom171 = zext i8 %147 to i64
  %arrayidx172 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom171
  %148 = load i8, i8* %arrayidx172, align 1
  %conv173 = zext i8 %148 to i32
  %conv174 = trunc i32 %conv173 to i8
  %149 = load i8*, i8** %d, align 8
  store i8 %conv174, i8* %149, align 1
  br label %for.inc175

for.inc175:                                       ; preds = %for.body170
  %150 = load i8*, i8** %d, align 8
  %incdec.ptr176 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr176, i8** %d, align 8
  %151 = load i8*, i8** %s, align 8
  %incdec.ptr177 = getelementptr inbounds i8, i8* %151, i32 1
  store i8* %incdec.ptr177, i8** %s, align 8
  br label %for.cond167

for.end178:                                       ; preds = %for.cond167
  br label %if.end179

if.end179:                                        ; preds = %for.end178, %for.end
  br label %if.end180

if.end180:                                        ; preds = %if.end179, %if.else125
  %152 = load %struct.sv*, %struct.sv** %source, align 8
  %153 = load %struct.sv*, %struct.sv** %dest, align 8
  %cmp181 = icmp ne %struct.sv* %152, %153
  br i1 %cmp181, label %if.then183, label %if.end194

if.then183:                                       ; preds = %if.end180
  %154 = load i8*, i8** %d, align 8
  store i8 0, i8* %154, align 1
  br label %do.body184

do.body184:                                       ; preds = %if.then183
  %155 = load i8*, i8** %d, align 8
  %156 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u185 = getelementptr inbounds %struct.sv, %struct.sv* %156, i32 0, i32 3
  %svu_pv186 = bitcast %union.anon* %sv_u185 to i8**
  %157 = load i8*, i8** %svu_pv186, align 8
  %add.ptr187 = getelementptr inbounds i8, i8* %157, i64 0
  %sub.ptr.lhs.cast188 = ptrtoint i8* %155 to i64
  %sub.ptr.rhs.cast189 = ptrtoint i8* %add.ptr187 to i64
  %sub.ptr.sub190 = sub i64 %sub.ptr.lhs.cast188, %sub.ptr.rhs.cast189
  %158 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any191 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 0
  %159 = load i8*, i8** %sv_any191, align 8
  %160 = bitcast i8* %159 to %struct.xpv*
  %xpv_cur192 = getelementptr inbounds %struct.xpv, %struct.xpv* %160, i32 0, i32 2
  store i64 %sub.ptr.sub190, i64* %xpv_cur192, align 8
  br label %do.end193

do.end193:                                        ; preds = %do.body184
  br label %if.end194

if.end194:                                        ; preds = %do.end193, %if.end180
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %do.end
  %161 = load %struct.sv*, %struct.sv** %dest, align 8
  %162 = load %struct.sv*, %struct.sv** %source, align 8
  %cmp196 = icmp ne %struct.sv* %161, %162
  br i1 %cmp196, label %land.lhs.true198, label %if.end228

land.lhs.true198:                                 ; preds = %if.end195
  %163 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags199 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 2
  %164 = load i32, i32* %sv_flags199, align 4
  %and200 = and i32 %164, 14680064
  %tobool201 = icmp ne i32 %and200, 0
  br i1 %tobool201, label %land.lhs.true202, label %if.end228

land.lhs.true202:                                 ; preds = %land.lhs.true198
  %165 = load %struct.sv*, %struct.sv** %source, align 8
  %call203 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %165)
  br i1 %call203, label %if.then205, label %if.end228

if.then205:                                       ; preds = %land.lhs.true202
  br label %do.body206

do.body206:                                       ; preds = %if.then205
  %166 = load i8, i8* @PL_tainting, align 1
  %tobool207 = trunc i8 %166 to i1
  br i1 %tobool207, label %cond.true209, label %cond.false210

cond.true209:                                     ; preds = %do.body206
  br i1 true, label %if.then211, label %if.end226

cond.false210:                                    ; preds = %do.body206
  br i1 false, label %if.then211, label %if.end226

if.then211:                                       ; preds = %cond.false210, %cond.true209
  %167 = load i8, i8* @PL_tainted, align 1
  %tobool212 = trunc i8 %167 to i1
  br i1 %tobool212, label %cond.true214, label %cond.false215

cond.true214:                                     ; preds = %if.then211
  br i1 true, label %if.then216, label %if.end225

cond.false215:                                    ; preds = %if.then211
  br i1 false, label %if.then216, label %if.end225

if.then216:                                       ; preds = %cond.false215, %cond.true214
  br label %do.body217

do.body217:                                       ; preds = %if.then216
  %168 = load i8, i8* @PL_tainting, align 1
  %tobool218 = trunc i8 %168 to i1
  br i1 %tobool218, label %cond.true220, label %cond.false221

cond.true220:                                     ; preds = %do.body217
  br i1 true, label %if.then222, label %if.end223

cond.false221:                                    ; preds = %do.body217
  br i1 false, label %if.then222, label %if.end223

if.then222:                                       ; preds = %cond.false221, %cond.true220
  %169 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_magic(%struct.sv* %169, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end223

if.end223:                                        ; preds = %if.then222, %cond.false221, %cond.true220
  br label %do.end224

do.end224:                                        ; preds = %if.end223
  br label %if.end225

if.end225:                                        ; preds = %do.end224, %cond.false215, %cond.true214
  br label %if.end226

if.end226:                                        ; preds = %if.end225, %cond.false210, %cond.true209
  br label %do.end227

do.end227:                                        ; preds = %if.end226
  br label %if.end228

if.end228:                                        ; preds = %do.end227, %land.lhs.true202, %land.lhs.true198, %if.end195
  br label %do.body229

do.body229:                                       ; preds = %if.end228
  %170 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags230 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 2
  %171 = load i32, i32* %sv_flags230, align 4
  %and231 = and i32 %171, 4194304
  %tobool232 = icmp ne i32 %and231, 0
  br i1 %tobool232, label %cond.true233, label %cond.false234

cond.true233:                                     ; preds = %do.body229
  br i1 true, label %if.then235, label %if.end237

cond.false234:                                    ; preds = %do.body229
  br i1 false, label %if.then235, label %if.end237

if.then235:                                       ; preds = %cond.false234, %cond.true233
  %172 = load %struct.sv*, %struct.sv** %dest, align 8
  %call236 = call i32 @Perl_mg_set(%struct.sv* %172)
  br label %if.end237

if.end237:                                        ; preds = %if.then235, %cond.false234, %cond.true233
  br label %do.end238

do.end238:                                        ; preds = %if.end237
  %173 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 0
  %174 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %174
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_quotemeta() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %d = alloca i8*, align 8
  %ulen = alloca i64, align 8
  %to_quote = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %targ, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %sv, align 8
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2098176
  %cmp = icmp eq i32 %and, 1024
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 0
  %10 = load i8*, i8** %sv_any, align 8
  %11 = bitcast i8* %10 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %11, i32 0, i32 2
  %12 = load i64, i64* %xpv_cur, align 8
  store i64 %12, i64* %len, align 8
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %14 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %14, i64 0
  br label %cond.end

cond.false:                                       ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i8* @Perl_sv_2pv_flags(%struct.sv* %15, i64* %len, i32 34)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %add.ptr, %cond.true ], [ %call, %cond.false ]
  store i8* %cond, i8** %s, align 8
  %16 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %17, -536870913
  store i32 %and2, i32* %sv_flags1, align 4
  %18 = load i64, i64* %len, align 8
  %tobool = icmp ne i64 %18, 0
  br i1 %tobool, label %if.then, label %if.else558

if.then:                                          ; preds = %cond.end
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %20, 255
  %cmp5 = icmp uge i32 %and4, 3
  br i1 %cmp5, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %21 = load %struct.sv*, %struct.sv** %targ, align 8
  call void @Perl_sv_upgrade(%struct.sv* %21, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %22 = phi i1 [ true, %if.then ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %22 to i32
  %23 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags6 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags6, align 4
  %and7 = and i32 %24, 268435456
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %lor.end
  %25 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any9 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 0
  %26 = load i8*, i8** %sv_any9, align 8
  %27 = bitcast i8* %26 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %27, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %28 = load i64, i64* %xpvlenu_len, align 8
  %29 = load i64, i64* %len, align 8
  %mul = mul i64 %29, 2
  %add = add i64 %mul, 1
  %cmp10 = icmp ult i64 %28, %add
  br i1 %cmp10, label %cond.true11, label %cond.false15

cond.true11:                                      ; preds = %lor.lhs.false, %lor.end
  %30 = load %struct.sv*, %struct.sv** %targ, align 8
  %31 = load i64, i64* %len, align 8
  %mul12 = mul i64 %31, 2
  %add13 = add i64 %mul12, 1
  %call14 = call i8* @Perl_sv_grow(%struct.sv* %30, i64 %add13)
  br label %cond.end18

cond.false15:                                     ; preds = %lor.lhs.false
  %32 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u16 = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 3
  %svu_pv17 = bitcast %union.anon* %sv_u16 to i8**
  %33 = load i8*, i8** %svu_pv17, align 8
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false15, %cond.true11
  %cond19 = phi i8* [ %call14, %cond.true11 ], [ %33, %cond.false15 ]
  %34 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u20 = getelementptr inbounds %struct.sv, %struct.sv* %34, i32 0, i32 3
  %svu_pv21 = bitcast %union.anon* %sv_u20 to i8**
  %35 = load i8*, i8** %svu_pv21, align 8
  store i8* %35, i8** %d, align 8
  %36 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags22 = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 2
  %37 = load i32, i32* %sv_flags22, align 4
  %and23 = and i32 %37, 536870912
  %tobool24 = icmp ne i32 %and23, 0
  br i1 %tobool24, label %land.lhs.true, label %if.else496

land.lhs.true:                                    ; preds = %cond.end18
  %38 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %38, i32 0, i32 10
  %39 = load i32, i32* %cop_hints, align 8
  %add25 = add i32 %39, 0
  %and26 = and i32 %add25, 8
  %tobool27 = icmp ne i32 %and26, 0
  br i1 %tobool27, label %if.else496, label %if.then28

if.then28:                                        ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.then28
  %40 = load i64, i64* %len, align 8
  %tobool29 = icmp ne i64 %40, 0
  br i1 %tobool29, label %while.body, label %while.end493

while.body:                                       ; preds = %while.cond
  %41 = load i8*, i8** %s, align 8
  %42 = load i8, i8* %41, align 1
  %idxprom = zext i8 %42 to i64
  %arrayidx30 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %43 = load i8, i8* %arrayidx30, align 1
  %conv = zext i8 %43 to i64
  store i64 %conv, i64* %ulen, align 8
  store i8 0, i8* %to_quote, align 1
  %44 = load i8*, i8** %s, align 8
  %45 = load i8, i8* %44, align 1
  %conv31 = sext i8 %45 to i64
  %cmp32 = icmp ult i64 %conv31, 128
  br i1 %cmp32, label %if.then34, label %if.else

if.then34:                                        ; preds = %while.body
  %46 = load i8*, i8** %s, align 8
  %47 = load i8, i8* %46, align 1
  %idxprom35 = zext i8 %47 to i64
  %arrayidx36 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom35
  %48 = load i32, i32* %arrayidx36, align 4
  %and37 = and i32 %48, 1048576
  %tobool38 = icmp ne i32 %and37, 0
  br i1 %tobool38, label %cond.true39, label %cond.false40

cond.true39:                                      ; preds = %if.then34
  br i1 true, label %if.then41, label %if.end

cond.false40:                                     ; preds = %if.then34
  br i1 false, label %if.then41, label %if.end

if.then41:                                        ; preds = %cond.false40, %cond.true39
  store i8 1, i8* %to_quote, align 1
  br label %if.end

if.end:                                           ; preds = %if.then41, %cond.false40, %cond.true39
  br label %if.end480

if.else:                                          ; preds = %while.body
  %49 = load i8*, i8** %s, align 8
  %50 = load i8, i8* %49, align 1
  %conv42 = zext i8 %50 to i32
  %and43 = and i32 %conv42, 254
  %cmp44 = icmp eq i32 %and43, 194
  br i1 %cmp44, label %if.then46, label %if.else72

if.then46:                                        ; preds = %if.else
  %51 = load i8*, i8** %s, align 8
  %52 = load i8, i8* %51, align 1
  %conv47 = sext i8 %52 to i32
  %and48 = and i32 %conv47, 31
  %shl = shl i32 %and48, 6
  %53 = load i8*, i8** %s, align 8
  %add.ptr49 = getelementptr inbounds i8, i8* %53, i64 1
  %54 = load i8, i8* %add.ptr49, align 1
  %conv50 = zext i8 %54 to i32
  %and51 = and i32 %conv50, 63
  %or = or i32 %shl, %and51
  %conv52 = sext i32 %or to i64
  %and53 = and i64 %conv52, -256
  %tobool54 = icmp ne i64 %and53, 0
  br i1 %tobool54, label %cond.false69, label %land.lhs.true55

land.lhs.true55:                                  ; preds = %if.then46
  %55 = load i8*, i8** %s, align 8
  %56 = load i8, i8* %55, align 1
  %conv56 = sext i8 %56 to i32
  %and57 = and i32 %conv56, 31
  %shl58 = shl i32 %and57, 6
  %57 = load i8*, i8** %s, align 8
  %add.ptr59 = getelementptr inbounds i8, i8* %57, i64 1
  %58 = load i8, i8* %add.ptr59, align 1
  %conv60 = zext i8 %58 to i32
  %and61 = and i32 %conv60, 63
  %or62 = or i32 %shl58, %and61
  %conv63 = trunc i32 %or62 to i8
  %idxprom64 = zext i8 %conv63 to i64
  %arrayidx65 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom64
  %59 = load i32, i32* %arrayidx65, align 4
  %and66 = and i32 %59, 1048576
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %cond.true68, label %cond.false69

cond.true68:                                      ; preds = %land.lhs.true55
  br i1 true, label %if.then70, label %if.end71

cond.false69:                                     ; preds = %land.lhs.true55, %if.then46
  br i1 false, label %if.then70, label %if.end71

if.then70:                                        ; preds = %cond.false69, %cond.true68
  store i8 1, i8* %to_quote, align 1
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %cond.false69, %cond.true68
  br label %if.end479

if.else72:                                        ; preds = %if.else
  %60 = load i8*, i8** %s, align 8
  %arrayidx73 = getelementptr inbounds i8, i8* %60, i64 0
  %61 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %61 to i32
  %cmp75 = icmp eq i32 205, %conv74
  br i1 %cmp75, label %cond.true77, label %cond.false84

cond.true77:                                      ; preds = %if.else72
  %62 = load i8*, i8** %s, align 8
  %arrayidx78 = getelementptr inbounds i8, i8* %62, i64 1
  %63 = load i8, i8* %arrayidx78, align 1
  %conv79 = zext i8 %63 to i32
  %cmp80 = icmp eq i32 143, %conv79
  br i1 %cmp80, label %cond.true82, label %cond.false83

cond.true82:                                      ; preds = %cond.true77
  br i1 true, label %if.then477, label %if.end478

cond.false83:                                     ; preds = %cond.true77
  br i1 false, label %if.then477, label %if.end478

cond.false84:                                     ; preds = %if.else72
  %64 = load i8*, i8** %s, align 8
  %arrayidx85 = getelementptr inbounds i8, i8* %64, i64 0
  %65 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %65 to i32
  %cmp87 = icmp eq i32 216, %conv86
  br i1 %cmp87, label %cond.true89, label %cond.false96

cond.true89:                                      ; preds = %cond.false84
  %66 = load i8*, i8** %s, align 8
  %arrayidx90 = getelementptr inbounds i8, i8* %66, i64 1
  %67 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %67 to i32
  %cmp92 = icmp eq i32 156, %conv91
  br i1 %cmp92, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %cond.true89
  br i1 true, label %if.then477, label %if.end478

cond.false95:                                     ; preds = %cond.true89
  br i1 false, label %if.then477, label %if.end478

cond.false96:                                     ; preds = %cond.false84
  %68 = load i8*, i8** %s, align 8
  %arrayidx97 = getelementptr inbounds i8, i8* %68, i64 0
  %69 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %69 to i32
  %cmp99 = icmp eq i32 225, %conv98
  br i1 %cmp99, label %cond.true101, label %cond.false160

cond.true101:                                     ; preds = %cond.false96
  %70 = load i8*, i8** %s, align 8
  %arrayidx102 = getelementptr inbounds i8, i8* %70, i64 1
  %71 = load i8, i8* %arrayidx102, align 1
  %conv103 = zext i8 %71 to i32
  %cmp104 = icmp eq i32 133, %conv103
  br i1 %cmp104, label %cond.true106, label %cond.false118

cond.true106:                                     ; preds = %cond.true101
  %72 = load i8*, i8** %s, align 8
  %arrayidx107 = getelementptr inbounds i8, i8* %72, i64 2
  %73 = load i8, i8* %arrayidx107, align 1
  %conv108 = zext i8 %73 to i32
  %cmp109 = icmp eq i32 159, %conv108
  br i1 %cmp109, label %cond.true116, label %lor.lhs.false111

lor.lhs.false111:                                 ; preds = %cond.true106
  %74 = load i8*, i8** %s, align 8
  %arrayidx112 = getelementptr inbounds i8, i8* %74, i64 2
  %75 = load i8, i8* %arrayidx112, align 1
  %conv113 = zext i8 %75 to i32
  %cmp114 = icmp eq i32 160, %conv113
  br i1 %cmp114, label %cond.true116, label %cond.false117

cond.true116:                                     ; preds = %lor.lhs.false111, %cond.true106
  br i1 true, label %if.then477, label %if.end478

cond.false117:                                    ; preds = %lor.lhs.false111
  br i1 false, label %if.then477, label %if.end478

cond.false118:                                    ; preds = %cond.true101
  %76 = load i8*, i8** %s, align 8
  %arrayidx119 = getelementptr inbounds i8, i8* %76, i64 1
  %77 = load i8, i8* %arrayidx119, align 1
  %conv120 = zext i8 %77 to i32
  %cmp121 = icmp eq i32 154, %conv120
  br i1 %cmp121, label %cond.true123, label %cond.false130

cond.true123:                                     ; preds = %cond.false118
  %78 = load i8*, i8** %s, align 8
  %arrayidx124 = getelementptr inbounds i8, i8* %78, i64 2
  %79 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %79 to i32
  %cmp126 = icmp eq i32 128, %conv125
  br i1 %cmp126, label %cond.true128, label %cond.false129

cond.true128:                                     ; preds = %cond.true123
  br i1 true, label %if.then477, label %if.end478

cond.false129:                                    ; preds = %cond.true123
  br i1 false, label %if.then477, label %if.end478

cond.false130:                                    ; preds = %cond.false118
  %80 = load i8*, i8** %s, align 8
  %arrayidx131 = getelementptr inbounds i8, i8* %80, i64 1
  %81 = load i8, i8* %arrayidx131, align 1
  %conv132 = zext i8 %81 to i32
  %cmp133 = icmp eq i32 158, %conv132
  br i1 %cmp133, label %cond.true135, label %cond.false143

cond.true135:                                     ; preds = %cond.false130
  %82 = load i8*, i8** %s, align 8
  %arrayidx136 = getelementptr inbounds i8, i8* %82, i64 2
  %83 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %83 to i32
  %and138 = and i32 %conv137, 254
  %cmp139 = icmp eq i32 %and138, 180
  br i1 %cmp139, label %cond.true141, label %cond.false142

cond.true141:                                     ; preds = %cond.true135
  br i1 true, label %if.then477, label %if.end478

cond.false142:                                    ; preds = %cond.true135
  br i1 false, label %if.then477, label %if.end478

cond.false143:                                    ; preds = %cond.false130
  %84 = load i8*, i8** %s, align 8
  %arrayidx144 = getelementptr inbounds i8, i8* %84, i64 1
  %85 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %85 to i32
  %cmp146 = icmp eq i32 160, %conv145
  br i1 %cmp146, label %land.lhs.true148, label %cond.false159

land.lhs.true148:                                 ; preds = %cond.false143
  %86 = load i8*, i8** %s, align 8
  %arrayidx149 = getelementptr inbounds i8, i8* %86, i64 2
  %87 = load i8, i8* %arrayidx149, align 1
  %conv150 = zext i8 %87 to i32
  %cmp151 = icmp sle i32 139, %conv150
  br i1 %cmp151, label %land.lhs.true153, label %cond.false159

land.lhs.true153:                                 ; preds = %land.lhs.true148
  %88 = load i8*, i8** %s, align 8
  %arrayidx154 = getelementptr inbounds i8, i8* %88, i64 2
  %89 = load i8, i8* %arrayidx154, align 1
  %conv155 = zext i8 %89 to i32
  %cmp156 = icmp sle i32 %conv155, 142
  br i1 %cmp156, label %cond.true158, label %cond.false159

cond.true158:                                     ; preds = %land.lhs.true153
  br i1 true, label %if.then477, label %if.end478

cond.false159:                                    ; preds = %land.lhs.true153, %land.lhs.true148, %cond.false143
  br i1 false, label %if.then477, label %if.end478

cond.false160:                                    ; preds = %cond.false96
  %90 = load i8*, i8** %s, align 8
  %arrayidx161 = getelementptr inbounds i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx161, align 1
  %conv162 = zext i8 %91 to i32
  %cmp163 = icmp eq i32 226, %conv162
  br i1 %cmp163, label %cond.true165, label %cond.false289

cond.true165:                                     ; preds = %cond.false160
  %92 = load i8*, i8** %s, align 8
  %arrayidx166 = getelementptr inbounds i8, i8* %92, i64 1
  %93 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %93 to i32
  %cmp168 = icmp eq i32 128, %conv167
  br i1 %cmp168, label %cond.true170, label %cond.false177

cond.true170:                                     ; preds = %cond.true165
  %94 = load i8*, i8** %s, align 8
  %arrayidx171 = getelementptr inbounds i8, i8* %94, i64 2
  %95 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %95 to i32
  %cmp173 = icmp sle i32 %conv172, 190
  br i1 %cmp173, label %cond.true175, label %cond.false176

cond.true175:                                     ; preds = %cond.true170
  br i1 true, label %if.then477, label %if.end478

cond.false176:                                    ; preds = %cond.true170
  br i1 false, label %if.then477, label %if.end478

cond.false177:                                    ; preds = %cond.true165
  %96 = load i8*, i8** %s, align 8
  %arrayidx178 = getelementptr inbounds i8, i8* %96, i64 1
  %97 = load i8, i8* %arrayidx178, align 1
  %conv179 = zext i8 %97 to i32
  %cmp180 = icmp eq i32 129, %conv179
  br i1 %cmp180, label %cond.true182, label %cond.false204

cond.true182:                                     ; preds = %cond.false177
  %98 = load i8*, i8** %s, align 8
  %arrayidx183 = getelementptr inbounds i8, i8* %98, i64 2
  %99 = load i8, i8* %arrayidx183, align 1
  %conv184 = zext i8 %99 to i32
  %cmp185 = icmp sle i32 129, %conv184
  br i1 %cmp185, label %land.lhs.true187, label %lor.lhs.false192

land.lhs.true187:                                 ; preds = %cond.true182
  %100 = load i8*, i8** %s, align 8
  %arrayidx188 = getelementptr inbounds i8, i8* %100, i64 2
  %101 = load i8, i8* %arrayidx188, align 1
  %conv189 = zext i8 %101 to i32
  %cmp190 = icmp sle i32 %conv189, 147
  br i1 %cmp190, label %cond.true202, label %lor.lhs.false192

lor.lhs.false192:                                 ; preds = %land.lhs.true187, %cond.true182
  %102 = load i8*, i8** %s, align 8
  %arrayidx193 = getelementptr inbounds i8, i8* %102, i64 2
  %103 = load i8, i8* %arrayidx193, align 1
  %conv194 = zext i8 %103 to i32
  %cmp195 = icmp sle i32 149, %conv194
  br i1 %cmp195, label %land.lhs.true197, label %cond.false203

land.lhs.true197:                                 ; preds = %lor.lhs.false192
  %104 = load i8*, i8** %s, align 8
  %arrayidx198 = getelementptr inbounds i8, i8* %104, i64 2
  %105 = load i8, i8* %arrayidx198, align 1
  %conv199 = zext i8 %105 to i32
  %cmp200 = icmp sle i32 %conv199, 175
  br i1 %cmp200, label %cond.true202, label %cond.false203

cond.true202:                                     ; preds = %land.lhs.true197, %land.lhs.true187
  br i1 true, label %if.then477, label %if.end478

cond.false203:                                    ; preds = %land.lhs.true197, %lor.lhs.false192
  br i1 false, label %if.then477, label %if.end478

cond.false204:                                    ; preds = %cond.false177
  %106 = load i8*, i8** %s, align 8
  %arrayidx205 = getelementptr inbounds i8, i8* %106, i64 1
  %107 = load i8, i8* %arrayidx205, align 1
  %conv206 = zext i8 %107 to i32
  %cmp207 = icmp eq i32 134, %conv206
  br i1 %cmp207, label %cond.true209, label %cond.false216

cond.true209:                                     ; preds = %cond.false204
  %108 = load i8*, i8** %s, align 8
  %arrayidx210 = getelementptr inbounds i8, i8* %108, i64 2
  %109 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %109 to i32
  %cmp212 = icmp sge i32 %conv211, 144
  br i1 %cmp212, label %cond.true214, label %cond.false215

cond.true214:                                     ; preds = %cond.true209
  br i1 true, label %if.then477, label %if.end478

cond.false215:                                    ; preds = %cond.true209
  br i1 false, label %if.then477, label %if.end478

cond.false216:                                    ; preds = %cond.false204
  %110 = load i8*, i8** %s, align 8
  %arrayidx217 = getelementptr inbounds i8, i8* %110, i64 1
  %111 = load i8, i8* %arrayidx217, align 1
  %conv218 = zext i8 %111 to i32
  %cmp219 = icmp sle i32 135, %conv218
  br i1 %cmp219, label %land.lhs.true221, label %lor.lhs.false226

land.lhs.true221:                                 ; preds = %cond.false216
  %112 = load i8*, i8** %s, align 8
  %arrayidx222 = getelementptr inbounds i8, i8* %112, i64 1
  %113 = load i8, i8* %arrayidx222, align 1
  %conv223 = zext i8 %113 to i32
  %cmp224 = icmp sle i32 %conv223, 144
  br i1 %cmp224, label %cond.true252, label %lor.lhs.false226

lor.lhs.false226:                                 ; preds = %land.lhs.true221, %cond.false216
  %114 = load i8*, i8** %s, align 8
  %arrayidx227 = getelementptr inbounds i8, i8* %114, i64 1
  %115 = load i8, i8* %arrayidx227, align 1
  %conv228 = zext i8 %115 to i32
  %cmp229 = icmp sle i32 148, %conv228
  br i1 %cmp229, label %land.lhs.true231, label %lor.lhs.false236

land.lhs.true231:                                 ; preds = %lor.lhs.false226
  %116 = load i8*, i8** %s, align 8
  %arrayidx232 = getelementptr inbounds i8, i8* %116, i64 1
  %117 = load i8, i8* %arrayidx232, align 1
  %conv233 = zext i8 %117 to i32
  %cmp234 = icmp sle i32 %conv233, 156
  br i1 %cmp234, label %cond.true252, label %lor.lhs.false236

lor.lhs.false236:                                 ; preds = %land.lhs.true231, %lor.lhs.false226
  %118 = load i8*, i8** %s, align 8
  %arrayidx237 = getelementptr inbounds i8, i8* %118, i64 1
  %119 = load i8, i8* %arrayidx237, align 1
  %conv238 = zext i8 %119 to i32
  %cmp239 = icmp sle i32 159, %conv238
  br i1 %cmp239, label %land.lhs.true241, label %lor.lhs.false246

land.lhs.true241:                                 ; preds = %lor.lhs.false236
  %120 = load i8*, i8** %s, align 8
  %arrayidx242 = getelementptr inbounds i8, i8* %120, i64 1
  %121 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %121 to i32
  %cmp244 = icmp sle i32 %conv243, 175
  br i1 %cmp244, label %cond.true252, label %lor.lhs.false246

lor.lhs.false246:                                 ; preds = %land.lhs.true241, %lor.lhs.false236
  %122 = load i8*, i8** %s, align 8
  %arrayidx247 = getelementptr inbounds i8, i8* %122, i64 1
  %123 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %123 to i32
  %and249 = and i32 %conv248, 254
  %cmp250 = icmp eq i32 %and249, 184
  br i1 %cmp250, label %cond.true252, label %cond.false253

cond.true252:                                     ; preds = %lor.lhs.false246, %land.lhs.true241, %land.lhs.true231, %land.lhs.true221
  br i1 true, label %if.then477, label %if.end478

cond.false253:                                    ; preds = %lor.lhs.false246
  %124 = load i8*, i8** %s, align 8
  %arrayidx254 = getelementptr inbounds i8, i8* %124, i64 1
  %125 = load i8, i8* %arrayidx254, align 1
  %conv255 = zext i8 %125 to i32
  %cmp256 = icmp eq i32 145, %conv255
  br i1 %cmp256, label %cond.true258, label %cond.false265

cond.true258:                                     ; preds = %cond.false253
  %126 = load i8*, i8** %s, align 8
  %arrayidx259 = getelementptr inbounds i8, i8* %126, i64 2
  %127 = load i8, i8* %arrayidx259, align 1
  %conv260 = zext i8 %127 to i32
  %cmp261 = icmp sle i32 %conv260, 159
  br i1 %cmp261, label %cond.true263, label %cond.false264

cond.true263:                                     ; preds = %cond.true258
  br i1 true, label %if.then477, label %if.end478

cond.false264:                                    ; preds = %cond.true258
  br i1 false, label %if.then477, label %if.end478

cond.false265:                                    ; preds = %cond.false253
  %128 = load i8*, i8** %s, align 8
  %arrayidx266 = getelementptr inbounds i8, i8* %128, i64 1
  %129 = load i8, i8* %arrayidx266, align 1
  %conv267 = zext i8 %129 to i32
  %cmp268 = icmp eq i32 157, %conv267
  br i1 %cmp268, label %cond.true270, label %cond.false277

cond.true270:                                     ; preds = %cond.false265
  %130 = load i8*, i8** %s, align 8
  %arrayidx271 = getelementptr inbounds i8, i8* %130, i64 2
  %131 = load i8, i8* %arrayidx271, align 1
  %conv272 = zext i8 %131 to i32
  %cmp273 = icmp sle i32 %conv272, 181
  br i1 %cmp273, label %cond.true275, label %cond.false276

cond.true275:                                     ; preds = %cond.true270
  br i1 true, label %if.then477, label %if.end478

cond.false276:                                    ; preds = %cond.true270
  br i1 false, label %if.then477, label %if.end478

cond.false277:                                    ; preds = %cond.false265
  %132 = load i8*, i8** %s, align 8
  %arrayidx278 = getelementptr inbounds i8, i8* %132, i64 1
  %133 = load i8, i8* %arrayidx278, align 1
  %conv279 = zext i8 %133 to i32
  %cmp280 = icmp eq i32 158, %conv279
  br i1 %cmp280, label %land.lhs.true282, label %cond.false288

land.lhs.true282:                                 ; preds = %cond.false277
  %134 = load i8*, i8** %s, align 8
  %arrayidx283 = getelementptr inbounds i8, i8* %134, i64 2
  %135 = load i8, i8* %arrayidx283, align 1
  %conv284 = zext i8 %135 to i32
  %cmp285 = icmp sge i32 %conv284, 148
  br i1 %cmp285, label %cond.true287, label %cond.false288

cond.true287:                                     ; preds = %land.lhs.true282
  br i1 true, label %if.then477, label %if.end478

cond.false288:                                    ; preds = %land.lhs.true282, %cond.false277
  br i1 false, label %if.then477, label %if.end478

cond.false289:                                    ; preds = %cond.false160
  %136 = load i8*, i8** %s, align 8
  %arrayidx290 = getelementptr inbounds i8, i8* %136, i64 0
  %137 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %137 to i32
  %cmp292 = icmp eq i32 227, %conv291
  br i1 %cmp292, label %cond.true294, label %cond.false333

cond.true294:                                     ; preds = %cond.false289
  %138 = load i8*, i8** %s, align 8
  %arrayidx295 = getelementptr inbounds i8, i8* %138, i64 1
  %139 = load i8, i8* %arrayidx295, align 1
  %conv296 = zext i8 %139 to i32
  %cmp297 = icmp eq i32 128, %conv296
  br i1 %cmp297, label %cond.true299, label %cond.false321

cond.true299:                                     ; preds = %cond.true294
  %140 = load i8*, i8** %s, align 8
  %arrayidx300 = getelementptr inbounds i8, i8* %140, i64 2
  %141 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %141 to i32
  %cmp302 = icmp sle i32 %conv301, 131
  br i1 %cmp302, label %cond.true319, label %lor.lhs.false304

lor.lhs.false304:                                 ; preds = %cond.true299
  %142 = load i8*, i8** %s, align 8
  %arrayidx305 = getelementptr inbounds i8, i8* %142, i64 2
  %143 = load i8, i8* %arrayidx305, align 1
  %conv306 = zext i8 %143 to i32
  %cmp307 = icmp sle i32 136, %conv306
  br i1 %cmp307, label %land.lhs.true309, label %lor.lhs.false314

land.lhs.true309:                                 ; preds = %lor.lhs.false304
  %144 = load i8*, i8** %s, align 8
  %arrayidx310 = getelementptr inbounds i8, i8* %144, i64 2
  %145 = load i8, i8* %arrayidx310, align 1
  %conv311 = zext i8 %145 to i32
  %cmp312 = icmp sle i32 %conv311, 160
  br i1 %cmp312, label %cond.true319, label %lor.lhs.false314

lor.lhs.false314:                                 ; preds = %land.lhs.true309, %lor.lhs.false304
  %146 = load i8*, i8** %s, align 8
  %arrayidx315 = getelementptr inbounds i8, i8* %146, i64 2
  %147 = load i8, i8* %arrayidx315, align 1
  %conv316 = zext i8 %147 to i32
  %cmp317 = icmp eq i32 176, %conv316
  br i1 %cmp317, label %cond.true319, label %cond.false320

cond.true319:                                     ; preds = %lor.lhs.false314, %land.lhs.true309, %cond.true299
  br i1 true, label %if.then477, label %if.end478

cond.false320:                                    ; preds = %lor.lhs.false314
  br i1 false, label %if.then477, label %if.end478

cond.false321:                                    ; preds = %cond.true294
  %148 = load i8*, i8** %s, align 8
  %arrayidx322 = getelementptr inbounds i8, i8* %148, i64 1
  %149 = load i8, i8* %arrayidx322, align 1
  %conv323 = zext i8 %149 to i32
  %cmp324 = icmp eq i32 133, %conv323
  br i1 %cmp324, label %land.lhs.true326, label %cond.false332

land.lhs.true326:                                 ; preds = %cond.false321
  %150 = load i8*, i8** %s, align 8
  %arrayidx327 = getelementptr inbounds i8, i8* %150, i64 2
  %151 = load i8, i8* %arrayidx327, align 1
  %conv328 = zext i8 %151 to i32
  %cmp329 = icmp eq i32 164, %conv328
  br i1 %cmp329, label %cond.true331, label %cond.false332

cond.true331:                                     ; preds = %land.lhs.true326
  br i1 true, label %if.then477, label %if.end478

cond.false332:                                    ; preds = %land.lhs.true326, %cond.false321
  br i1 false, label %if.then477, label %if.end478

cond.false333:                                    ; preds = %cond.false289
  %152 = load i8*, i8** %s, align 8
  %arrayidx334 = getelementptr inbounds i8, i8* %152, i64 0
  %153 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %153 to i32
  %cmp336 = icmp eq i32 239, %conv335
  br i1 %cmp336, label %cond.true338, label %cond.false420

cond.true338:                                     ; preds = %cond.false333
  %154 = load i8*, i8** %s, align 8
  %arrayidx339 = getelementptr inbounds i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx339, align 1
  %conv340 = zext i8 %155 to i32
  %cmp341 = icmp eq i32 180, %conv340
  br i1 %cmp341, label %cond.true343, label %cond.false350

cond.true343:                                     ; preds = %cond.true338
  %156 = load i8*, i8** %s, align 8
  %arrayidx344 = getelementptr inbounds i8, i8* %156, i64 2
  %157 = load i8, i8* %arrayidx344, align 1
  %conv345 = zext i8 %157 to i32
  %cmp346 = icmp sge i32 %conv345, 190
  br i1 %cmp346, label %cond.true348, label %cond.false349

cond.true348:                                     ; preds = %cond.true343
  br i1 true, label %if.then477, label %if.end478

cond.false349:                                    ; preds = %cond.true343
  br i1 false, label %if.then477, label %if.end478

cond.false350:                                    ; preds = %cond.true338
  %158 = load i8*, i8** %s, align 8
  %arrayidx351 = getelementptr inbounds i8, i8* %158, i64 1
  %159 = load i8, i8* %arrayidx351, align 1
  %conv352 = zext i8 %159 to i32
  %cmp353 = icmp eq i32 184, %conv352
  br i1 %cmp353, label %cond.true355, label %cond.false362

cond.true355:                                     ; preds = %cond.false350
  %160 = load i8*, i8** %s, align 8
  %arrayidx356 = getelementptr inbounds i8, i8* %160, i64 2
  %161 = load i8, i8* %arrayidx356, align 1
  %conv357 = zext i8 %161 to i32
  %cmp358 = icmp sle i32 %conv357, 143
  br i1 %cmp358, label %cond.true360, label %cond.false361

cond.true360:                                     ; preds = %cond.true355
  br i1 true, label %if.then477, label %if.end478

cond.false361:                                    ; preds = %cond.true355
  br i1 false, label %if.then477, label %if.end478

cond.false362:                                    ; preds = %cond.false350
  %162 = load i8*, i8** %s, align 8
  %arrayidx363 = getelementptr inbounds i8, i8* %162, i64 1
  %163 = load i8, i8* %arrayidx363, align 1
  %conv364 = zext i8 %163 to i32
  %cmp365 = icmp eq i32 185, %conv364
  br i1 %cmp365, label %cond.true367, label %cond.false379

cond.true367:                                     ; preds = %cond.false362
  %164 = load i8*, i8** %s, align 8
  %arrayidx368 = getelementptr inbounds i8, i8* %164, i64 2
  %165 = load i8, i8* %arrayidx368, align 1
  %conv369 = zext i8 %165 to i32
  %cmp370 = icmp eq i32 133, %conv369
  br i1 %cmp370, label %cond.true377, label %lor.lhs.false372

lor.lhs.false372:                                 ; preds = %cond.true367
  %166 = load i8*, i8** %s, align 8
  %arrayidx373 = getelementptr inbounds i8, i8* %166, i64 2
  %167 = load i8, i8* %arrayidx373, align 1
  %conv374 = zext i8 %167 to i32
  %cmp375 = icmp eq i32 134, %conv374
  br i1 %cmp375, label %cond.true377, label %cond.false378

cond.true377:                                     ; preds = %lor.lhs.false372, %cond.true367
  br i1 true, label %if.then477, label %if.end478

cond.false378:                                    ; preds = %lor.lhs.false372
  br i1 false, label %if.then477, label %if.end478

cond.false379:                                    ; preds = %cond.false362
  %168 = load i8*, i8** %s, align 8
  %arrayidx380 = getelementptr inbounds i8, i8* %168, i64 1
  %169 = load i8, i8* %arrayidx380, align 1
  %conv381 = zext i8 %169 to i32
  %cmp382 = icmp eq i32 187, %conv381
  br i1 %cmp382, label %cond.true384, label %cond.false391

cond.true384:                                     ; preds = %cond.false379
  %170 = load i8*, i8** %s, align 8
  %arrayidx385 = getelementptr inbounds i8, i8* %170, i64 2
  %171 = load i8, i8* %arrayidx385, align 1
  %conv386 = zext i8 %171 to i32
  %cmp387 = icmp eq i32 191, %conv386
  br i1 %cmp387, label %cond.true389, label %cond.false390

cond.true389:                                     ; preds = %cond.true384
  br i1 true, label %if.then477, label %if.end478

cond.false390:                                    ; preds = %cond.true384
  br i1 false, label %if.then477, label %if.end478

cond.false391:                                    ; preds = %cond.false379
  %172 = load i8*, i8** %s, align 8
  %arrayidx392 = getelementptr inbounds i8, i8* %172, i64 1
  %173 = load i8, i8* %arrayidx392, align 1
  %conv393 = zext i8 %173 to i32
  %cmp394 = icmp eq i32 190, %conv393
  br i1 %cmp394, label %cond.true396, label %cond.false403

cond.true396:                                     ; preds = %cond.false391
  %174 = load i8*, i8** %s, align 8
  %arrayidx397 = getelementptr inbounds i8, i8* %174, i64 2
  %175 = load i8, i8* %arrayidx397, align 1
  %conv398 = zext i8 %175 to i32
  %cmp399 = icmp eq i32 160, %conv398
  br i1 %cmp399, label %cond.true401, label %cond.false402

cond.true401:                                     ; preds = %cond.true396
  br i1 true, label %if.then477, label %if.end478

cond.false402:                                    ; preds = %cond.true396
  br i1 false, label %if.then477, label %if.end478

cond.false403:                                    ; preds = %cond.false391
  %176 = load i8*, i8** %s, align 8
  %arrayidx404 = getelementptr inbounds i8, i8* %176, i64 1
  %177 = load i8, i8* %arrayidx404, align 1
  %conv405 = zext i8 %177 to i32
  %cmp406 = icmp eq i32 191, %conv405
  br i1 %cmp406, label %land.lhs.true408, label %cond.false419

land.lhs.true408:                                 ; preds = %cond.false403
  %178 = load i8*, i8** %s, align 8
  %arrayidx409 = getelementptr inbounds i8, i8* %178, i64 2
  %179 = load i8, i8* %arrayidx409, align 1
  %conv410 = zext i8 %179 to i32
  %cmp411 = icmp sle i32 176, %conv410
  br i1 %cmp411, label %land.lhs.true413, label %cond.false419

land.lhs.true413:                                 ; preds = %land.lhs.true408
  %180 = load i8*, i8** %s, align 8
  %arrayidx414 = getelementptr inbounds i8, i8* %180, i64 2
  %181 = load i8, i8* %arrayidx414, align 1
  %conv415 = zext i8 %181 to i32
  %cmp416 = icmp sle i32 %conv415, 184
  br i1 %cmp416, label %cond.true418, label %cond.false419

cond.true418:                                     ; preds = %land.lhs.true413
  br i1 true, label %if.then477, label %if.end478

cond.false419:                                    ; preds = %land.lhs.true413, %land.lhs.true408, %cond.false403
  br i1 false, label %if.then477, label %if.end478

cond.false420:                                    ; preds = %cond.false333
  %182 = load i8*, i8** %s, align 8
  %arrayidx421 = getelementptr inbounds i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx421, align 1
  %conv422 = zext i8 %183 to i32
  %cmp423 = icmp eq i32 240, %conv422
  br i1 %cmp423, label %cond.true425, label %cond.false465

cond.true425:                                     ; preds = %cond.false420
  %184 = load i8*, i8** %s, align 8
  %arrayidx426 = getelementptr inbounds i8, i8* %184, i64 1
  %185 = load i8, i8* %arrayidx426, align 1
  %conv427 = zext i8 %185 to i32
  %cmp428 = icmp eq i32 155, %conv427
  br i1 %cmp428, label %cond.true430, label %cond.false443

cond.true430:                                     ; preds = %cond.true425
  %186 = load i8*, i8** %s, align 8
  %arrayidx431 = getelementptr inbounds i8, i8* %186, i64 2
  %187 = load i8, i8* %arrayidx431, align 1
  %conv432 = zext i8 %187 to i32
  %cmp433 = icmp eq i32 178, %conv432
  br i1 %cmp433, label %land.lhs.true435, label %cond.false442

land.lhs.true435:                                 ; preds = %cond.true430
  %188 = load i8*, i8** %s, align 8
  %arrayidx436 = getelementptr inbounds i8, i8* %188, i64 3
  %189 = load i8, i8* %arrayidx436, align 1
  %conv437 = zext i8 %189 to i32
  %and438 = and i32 %conv437, 252
  %cmp439 = icmp eq i32 %and438, 160
  br i1 %cmp439, label %cond.true441, label %cond.false442

cond.true441:                                     ; preds = %land.lhs.true435
  br i1 true, label %if.then477, label %if.end478

cond.false442:                                    ; preds = %land.lhs.true435, %cond.true430
  br i1 false, label %if.then477, label %if.end478

cond.false443:                                    ; preds = %cond.true425
  %190 = load i8*, i8** %s, align 8
  %arrayidx444 = getelementptr inbounds i8, i8* %190, i64 1
  %191 = load i8, i8* %arrayidx444, align 1
  %conv445 = zext i8 %191 to i32
  %cmp446 = icmp eq i32 157, %conv445
  br i1 %cmp446, label %land.lhs.true448, label %cond.false464

land.lhs.true448:                                 ; preds = %cond.false443
  %192 = load i8*, i8** %s, align 8
  %arrayidx449 = getelementptr inbounds i8, i8* %192, i64 2
  %193 = load i8, i8* %arrayidx449, align 1
  %conv450 = zext i8 %193 to i32
  %cmp451 = icmp eq i32 133, %conv450
  br i1 %cmp451, label %land.lhs.true453, label %cond.false464

land.lhs.true453:                                 ; preds = %land.lhs.true448
  %194 = load i8*, i8** %s, align 8
  %arrayidx454 = getelementptr inbounds i8, i8* %194, i64 3
  %195 = load i8, i8* %arrayidx454, align 1
  %conv455 = zext i8 %195 to i32
  %cmp456 = icmp sle i32 179, %conv455
  br i1 %cmp456, label %land.lhs.true458, label %cond.false464

land.lhs.true458:                                 ; preds = %land.lhs.true453
  %196 = load i8*, i8** %s, align 8
  %arrayidx459 = getelementptr inbounds i8, i8* %196, i64 3
  %197 = load i8, i8* %arrayidx459, align 1
  %conv460 = zext i8 %197 to i32
  %cmp461 = icmp sle i32 %conv460, 186
  br i1 %cmp461, label %cond.true463, label %cond.false464

cond.true463:                                     ; preds = %land.lhs.true458
  br i1 true, label %if.then477, label %if.end478

cond.false464:                                    ; preds = %land.lhs.true458, %land.lhs.true453, %land.lhs.true448, %cond.false443
  br i1 false, label %if.then477, label %if.end478

cond.false465:                                    ; preds = %cond.false420
  %198 = load i8*, i8** %s, align 8
  %arrayidx466 = getelementptr inbounds i8, i8* %198, i64 0
  %199 = load i8, i8* %arrayidx466, align 1
  %conv467 = zext i8 %199 to i32
  %cmp468 = icmp eq i32 243, %conv467
  br i1 %cmp468, label %land.lhs.true470, label %cond.false476

land.lhs.true470:                                 ; preds = %cond.false465
  %200 = load i8*, i8** %s, align 8
  %arrayidx471 = getelementptr inbounds i8, i8* %200, i64 1
  %201 = load i8, i8* %arrayidx471, align 1
  %conv472 = zext i8 %201 to i32
  %cmp473 = icmp eq i32 160, %conv472
  br i1 %cmp473, label %cond.true475, label %cond.false476

cond.true475:                                     ; preds = %land.lhs.true470
  br i1 true, label %if.then477, label %if.end478

cond.false476:                                    ; preds = %land.lhs.true470, %cond.false465
  br i1 false, label %if.then477, label %if.end478

if.then477:                                       ; preds = %cond.false476, %cond.true475, %cond.false464, %cond.true463, %cond.false442, %cond.true441, %cond.false419, %cond.true418, %cond.false402, %cond.true401, %cond.false390, %cond.true389, %cond.false378, %cond.true377, %cond.false361, %cond.true360, %cond.false349, %cond.true348, %cond.false332, %cond.true331, %cond.false320, %cond.true319, %cond.false288, %cond.true287, %cond.false276, %cond.true275, %cond.false264, %cond.true263, %cond.true252, %cond.false215, %cond.true214, %cond.false203, %cond.true202, %cond.false176, %cond.true175, %cond.false159, %cond.true158, %cond.false142, %cond.true141, %cond.false129, %cond.true128, %cond.false117, %cond.true116, %cond.false95, %cond.true94, %cond.false83, %cond.true82
  store i8 1, i8* %to_quote, align 1
  br label %if.end478

if.end478:                                        ; preds = %if.then477, %cond.false476, %cond.true475, %cond.false464, %cond.true463, %cond.false442, %cond.true441, %cond.false419, %cond.true418, %cond.false402, %cond.true401, %cond.false390, %cond.true389, %cond.false378, %cond.true377, %cond.false361, %cond.true360, %cond.false349, %cond.true348, %cond.false332, %cond.true331, %cond.false320, %cond.true319, %cond.false288, %cond.true287, %cond.false276, %cond.true275, %cond.false264, %cond.true263, %cond.true252, %cond.false215, %cond.true214, %cond.false203, %cond.true202, %cond.false176, %cond.true175, %cond.false159, %cond.true158, %cond.false142, %cond.true141, %cond.false129, %cond.true128, %cond.false117, %cond.true116, %cond.false95, %cond.true94, %cond.false83, %cond.true82
  br label %if.end479

if.end479:                                        ; preds = %if.end478, %if.end71
  br label %if.end480

if.end480:                                        ; preds = %if.end479, %if.end
  %202 = load i8, i8* %to_quote, align 1
  %tobool481 = trunc i8 %202 to i1
  br i1 %tobool481, label %if.then482, label %if.end483

if.then482:                                       ; preds = %if.end480
  %203 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %203, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  store i8 92, i8* %203, align 1
  br label %if.end483

if.end483:                                        ; preds = %if.then482, %if.end480
  %204 = load i64, i64* %ulen, align 8
  %205 = load i64, i64* %len, align 8
  %cmp484 = icmp ugt i64 %204, %205
  br i1 %cmp484, label %if.then486, label %if.end487

if.then486:                                       ; preds = %if.end483
  %206 = load i64, i64* %len, align 8
  store i64 %206, i64* %ulen, align 8
  br label %if.end487

if.end487:                                        ; preds = %if.then486, %if.end483
  %207 = load i64, i64* %ulen, align 8
  %208 = load i64, i64* %len, align 8
  %sub = sub i64 %208, %207
  store i64 %sub, i64* %len, align 8
  br label %while.cond488

while.cond488:                                    ; preds = %while.body490, %if.end487
  %209 = load i64, i64* %ulen, align 8
  %dec = add i64 %209, -1
  store i64 %dec, i64* %ulen, align 8
  %tobool489 = icmp ne i64 %209, 0
  br i1 %tobool489, label %while.body490, label %while.end

while.body490:                                    ; preds = %while.cond488
  %210 = load i8*, i8** %s, align 8
  %incdec.ptr491 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %incdec.ptr491, i8** %s, align 8
  %211 = load i8, i8* %210, align 1
  %212 = load i8*, i8** %d, align 8
  %incdec.ptr492 = getelementptr inbounds i8, i8* %212, i32 1
  store i8* %incdec.ptr492, i8** %d, align 8
  store i8 %211, i8* %212, align 1
  br label %while.cond488

while.end:                                        ; preds = %while.cond488
  br label %while.cond

while.end493:                                     ; preds = %while.cond
  %213 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags494 = getelementptr inbounds %struct.sv, %struct.sv* %213, i32 0, i32 2
  %214 = load i32, i32* %sv_flags494, align 4
  %or495 = or i32 %214, 536870912
  store i32 %or495, i32* %sv_flags494, align 4
  br label %if.end548

if.else496:                                       ; preds = %land.lhs.true, %cond.end18
  %215 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints497 = getelementptr inbounds %struct.cop, %struct.cop* %215, i32 0, i32 10
  %216 = load i32, i32* %cop_hints497, align 8
  %add498 = add i32 %216, 0
  %and499 = and i32 %add498, 2048
  %tobool500 = icmp ne i32 %and499, 0
  br i1 %tobool500, label %land.lhs.true509, label %lor.lhs.false501

lor.lhs.false501:                                 ; preds = %if.else496
  %217 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints502 = getelementptr inbounds %struct.cop, %struct.cop* %217, i32 0, i32 10
  %218 = load i32, i32* %cop_hints502, align 8
  %add503 = add i32 %218, 0
  %and504 = and i32 %add503, 16
  %tobool505 = icmp ne i32 %and504, 0
  br i1 %tobool505, label %land.lhs.true506, label %if.else531

land.lhs.true506:                                 ; preds = %lor.lhs.false501
  %call507 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call507, label %land.lhs.true509, label %if.else531

land.lhs.true509:                                 ; preds = %land.lhs.true506, %if.else496
  %219 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints510 = getelementptr inbounds %struct.cop, %struct.cop* %219, i32 0, i32 10
  %220 = load i32, i32* %cop_hints510, align 8
  %add511 = add i32 %220, 0
  %and512 = and i32 %add511, 8
  %tobool513 = icmp ne i32 %and512, 0
  br i1 %tobool513, label %if.else531, label %if.then514

if.then514:                                       ; preds = %land.lhs.true509
  br label %while.cond515

while.cond515:                                    ; preds = %if.end527, %if.then514
  %221 = load i64, i64* %len, align 8
  %dec516 = add i64 %221, -1
  store i64 %dec516, i64* %len, align 8
  %tobool517 = icmp ne i64 %221, 0
  br i1 %tobool517, label %while.body518, label %while.end530

while.body518:                                    ; preds = %while.cond515
  %222 = load i8*, i8** %s, align 8
  %223 = load i8, i8* %222, align 1
  %idxprom519 = zext i8 %223 to i64
  %arrayidx520 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom519
  %224 = load i32, i32* %arrayidx520, align 4
  %and521 = and i32 %224, 1048576
  %tobool522 = icmp ne i32 %and521, 0
  br i1 %tobool522, label %cond.true523, label %cond.false524

cond.true523:                                     ; preds = %while.body518
  br i1 true, label %if.then525, label %if.end527

cond.false524:                                    ; preds = %while.body518
  br i1 false, label %if.then525, label %if.end527

if.then525:                                       ; preds = %cond.false524, %cond.true523
  %225 = load i8*, i8** %d, align 8
  %incdec.ptr526 = getelementptr inbounds i8, i8* %225, i32 1
  store i8* %incdec.ptr526, i8** %d, align 8
  store i8 92, i8* %225, align 1
  br label %if.end527

if.end527:                                        ; preds = %if.then525, %cond.false524, %cond.true523
  %226 = load i8*, i8** %s, align 8
  %incdec.ptr528 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %incdec.ptr528, i8** %s, align 8
  %227 = load i8, i8* %226, align 1
  %228 = load i8*, i8** %d, align 8
  %incdec.ptr529 = getelementptr inbounds i8, i8* %228, i32 1
  store i8* %incdec.ptr529, i8** %d, align 8
  store i8 %227, i8* %228, align 1
  br label %while.cond515

while.end530:                                     ; preds = %while.cond515
  br label %if.end547

if.else531:                                       ; preds = %land.lhs.true509, %land.lhs.true506, %lor.lhs.false501
  br label %while.cond532

while.cond532:                                    ; preds = %if.end543, %if.else531
  %229 = load i64, i64* %len, align 8
  %dec533 = add i64 %229, -1
  store i64 %dec533, i64* %len, align 8
  %tobool534 = icmp ne i64 %229, 0
  br i1 %tobool534, label %while.body535, label %while.end546

while.body535:                                    ; preds = %while.cond532
  %230 = load i8*, i8** %s, align 8
  %231 = load i8, i8* %230, align 1
  %idxprom536 = zext i8 %231 to i64
  %arrayidx537 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom536
  %232 = load i32, i32* %arrayidx537, align 4
  %and538 = and i32 %232, 16385
  %cmp539 = icmp eq i32 %and538, 16385
  br i1 %cmp539, label %if.end543, label %if.then541

if.then541:                                       ; preds = %while.body535
  %233 = load i8*, i8** %d, align 8
  %incdec.ptr542 = getelementptr inbounds i8, i8* %233, i32 1
  store i8* %incdec.ptr542, i8** %d, align 8
  store i8 92, i8* %233, align 1
  br label %if.end543

if.end543:                                        ; preds = %if.then541, %while.body535
  %234 = load i8*, i8** %s, align 8
  %incdec.ptr544 = getelementptr inbounds i8, i8* %234, i32 1
  store i8* %incdec.ptr544, i8** %s, align 8
  %235 = load i8, i8* %234, align 1
  %236 = load i8*, i8** %d, align 8
  %incdec.ptr545 = getelementptr inbounds i8, i8* %236, i32 1
  store i8* %incdec.ptr545, i8** %d, align 8
  store i8 %235, i8* %236, align 1
  br label %while.cond532

while.end546:                                     ; preds = %while.cond532
  br label %if.end547

if.end547:                                        ; preds = %while.end546, %while.end530
  br label %if.end548

if.end548:                                        ; preds = %if.end547, %while.end493
  %237 = load i8*, i8** %d, align 8
  store i8 0, i8* %237, align 1
  br label %do.body

do.body:                                          ; preds = %if.end548
  %238 = load i8*, i8** %d, align 8
  %239 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u549 = getelementptr inbounds %struct.sv, %struct.sv* %239, i32 0, i32 3
  %svu_pv550 = bitcast %union.anon* %sv_u549 to i8**
  %240 = load i8*, i8** %svu_pv550, align 8
  %add.ptr551 = getelementptr inbounds i8, i8* %240, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %238 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr551 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %241 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any552 = getelementptr inbounds %struct.sv, %struct.sv* %241, i32 0, i32 0
  %242 = load i8*, i8** %sv_any552, align 8
  %243 = bitcast i8* %242 to %struct.xpv*
  %xpv_cur553 = getelementptr inbounds %struct.xpv, %struct.xpv* %243, i32 0, i32 2
  store i64 %sub.ptr.sub, i64* %xpv_cur553, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %244 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags554 = getelementptr inbounds %struct.sv, %struct.sv* %244, i32 0, i32 2
  %245 = load i32, i32* %sv_flags554, align 4
  %and555 = and i32 %245, 2147418367
  store i32 %and555, i32* %sv_flags554, align 4
  %246 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags556 = getelementptr inbounds %struct.sv, %struct.sv* %246, i32 0, i32 2
  %247 = load i32, i32* %sv_flags556, align 4
  %or557 = or i32 %247, 17408
  store i32 %or557, i32* %sv_flags556, align 4
  br label %if.end559

if.else558:                                       ; preds = %cond.end
  %248 = load %struct.sv*, %struct.sv** %targ, align 8
  %249 = load i8*, i8** %s, align 8
  %250 = load i64, i64* %len, align 8
  call void @Perl_sv_setpvn(%struct.sv* %248, i8* %249, i64 %250)
  br label %if.end559

if.end559:                                        ; preds = %if.else558, %do.end
  br label %do.body560

do.body560:                                       ; preds = %if.end559
  br label %do.body561

do.body561:                                       ; preds = %do.body560
  %251 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags562 = getelementptr inbounds %struct.sv, %struct.sv* %251, i32 0, i32 2
  %252 = load i32, i32* %sv_flags562, align 4
  %and563 = and i32 %252, 4194304
  %tobool564 = icmp ne i32 %and563, 0
  br i1 %tobool564, label %cond.true565, label %cond.false566

cond.true565:                                     ; preds = %do.body561
  br i1 true, label %if.then567, label %if.end569

cond.false566:                                    ; preds = %do.body561
  br i1 false, label %if.then567, label %if.end569

if.then567:                                       ; preds = %cond.false566, %cond.true565
  %253 = load %struct.sv*, %struct.sv** %targ, align 8
  %call568 = call i32 @Perl_mg_set(%struct.sv* %253)
  br label %if.end569

if.end569:                                        ; preds = %if.then567, %cond.false566, %cond.true565
  br label %do.end570

do.end570:                                        ; preds = %if.end569
  %254 = load %struct.sv*, %struct.sv** %targ, align 8
  %255 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %254, %struct.sv** %255, align 8
  br label %do.end571

do.end571:                                        ; preds = %do.end570
  %256 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %256, i32 0, i32 0
  %257 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %257
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_fc() #0 {
entry:
  %targ = alloca %struct.sv*, align 8
  %sp = alloca %struct.sv**, align 8
  %source = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %min = alloca i64, align 8
  %dest = alloca %struct.sv*, align 8
  %s = alloca i8*, align 8
  %send = alloca i8*, align 8
  %d = alloca i8*, align 8
  %tmpbuf = alloca [14 x i8], align 1
  %full_folding = alloca i8, align 1
  %flags = alloca i8, align 1
  %u = alloca i64, align 8
  %ulen = alloca i64, align 8
  %o = alloca i64, align 8
  %ulen159 = alloca i64, align 8
  %fc = alloca i64, align 8
  %o195 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 3
  %2 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %0, i64 %2
  %3 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %3, %struct.sv** %targ, align 8
  %4 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %4, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv*, %struct.sv** %5, align 8
  store %struct.sv* %6, %struct.sv** %source, align 8
  store i8 1, i8* %full_folding, align 1
  store i8 2, i8* %flags, align 1
  %7 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags, align 4
  %and = and i32 %8, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %9 = load %struct.sv*, %struct.sv** %source, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %9)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %10 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %10 to i32
  %11 = load %struct.sv*, %struct.sv** %targ, align 8
  store %struct.sv* %11, %struct.sv** %dest, align 8
  %12 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %13, 65280
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.end
  %14 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %14, i32 0, i32 2
  %15 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %15, 255
  %cmp = icmp eq i32 %and6, 8
  br i1 %cmp, label %if.then, label %lor.lhs.false7

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %16 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %17, 16826623
  %cmp10 = icmp eq i32 %and9, 16777226
  br i1 %cmp10, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false7, %lor.lhs.false, %land.end
  %18 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags11 = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags11, align 4
  %and12 = and i32 %19, 2098176
  %cmp13 = icmp eq i32 %and12, 1024
  br i1 %cmp13, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %if.then
  %20 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 0
  %21 = load i8*, i8** %sv_any, align 8
  %22 = bitcast i8* %21 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %22, i32 0, i32 2
  %23 = load i64, i64* %xpv_cur, align 8
  store i64 %23, i64* %len, align 8
  %24 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %24, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %25 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %25, i64 0
  br label %cond.end

cond.false15:                                     ; preds = %if.then
  %26 = load %struct.sv*, %struct.sv** %source, align 8
  %call16 = call i8* @Perl_sv_2pv_flags(%struct.sv* %26, i64* %len, i32 32)
  br label %cond.end

cond.end:                                         ; preds = %cond.false15, %cond.true14
  %cond = phi i8* [ %add.ptr, %cond.true14 ], [ %call16, %cond.false15 ]
  store i8* %cond, i8** %s, align 8
  br label %if.end19

if.else:                                          ; preds = %lor.lhs.false7
  %call17 = call zeroext i1 @Perl_ckwarn(i32 41)
  br i1 %call17, label %if.then18, label %if.end

if.then18:                                        ; preds = %if.else
  %27 = load %struct.sv*, %struct.sv** %source, align 8
  call void @Perl_report_uninit(%struct.sv* %27)
  br label %if.end

if.end:                                           ; preds = %if.then18, %if.else
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3, i64 0, i64 0), i8** %s, align 8
  store i64 0, i64* %len, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.end, %cond.end
  %28 = load i64, i64* %len, align 8
  %add = add i64 %28, 1
  store i64 %add, i64* %min, align 8
  %29 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags20 = getelementptr inbounds %struct.sv, %struct.sv* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %30, 255
  %cmp22 = icmp uge i32 %and21, 3
  br i1 %cmp22, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end19
  %31 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_upgrade(%struct.sv* %31, i32 3)
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end19
  %32 = phi i1 [ true, %if.end19 ], [ true, %lor.rhs ]
  %lor.ext = zext i1 %32 to i32
  %33 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags23 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags23, align 4
  %and24 = and i32 %34, 268435456
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true29, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.end
  %35 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any27 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 0
  %36 = load i8*, i8** %sv_any27, align 8
  %37 = bitcast i8* %36 to %struct.xpv*
  %xpv_len_u = getelementptr inbounds %struct.xpv, %struct.xpv* %37, i32 0, i32 3
  %xpvlenu_len = bitcast %union.anon.18* %xpv_len_u to i64*
  %38 = load i64, i64* %xpvlenu_len, align 8
  %39 = load i64, i64* %min, align 8
  %cmp28 = icmp ult i64 %38, %39
  br i1 %cmp28, label %cond.true29, label %cond.false31

cond.true29:                                      ; preds = %lor.lhs.false26, %lor.end
  %40 = load %struct.sv*, %struct.sv** %dest, align 8
  %41 = load i64, i64* %min, align 8
  %call30 = call i8* @Perl_sv_grow(%struct.sv* %40, i64 %41)
  br label %cond.end34

cond.false31:                                     ; preds = %lor.lhs.false26
  %42 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u32 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 3
  %svu_pv33 = bitcast %union.anon* %sv_u32 to i8**
  %43 = load i8*, i8** %svu_pv33, align 8
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false31, %cond.true29
  %cond35 = phi i8* [ %call30, %cond.true29 ], [ %43, %cond.false31 ]
  store i8* %cond35, i8** %d, align 8
  %44 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags36 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags36, align 4
  %and37 = and i32 %45, 1610547455
  store i32 %and37, i32* %sv_flags36, align 4
  %46 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags38 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags38, align 4
  %or = or i32 %47, 17408
  store i32 %or, i32* %sv_flags38, align 4
  %48 = load %struct.sv*, %struct.sv** %dest, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %48, %struct.sv** %49, align 8
  %50 = load i8*, i8** %s, align 8
  %51 = load i64, i64* %len, align 8
  %add.ptr39 = getelementptr inbounds i8, i8* %50, i64 %51
  store i8* %add.ptr39, i8** %send, align 8
  %52 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags40 = getelementptr inbounds %struct.sv, %struct.sv* %52, i32 0, i32 2
  %53 = load i32, i32* %sv_flags40, align 4
  %and41 = and i32 %53, 536870912
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %land.lhs.true, label %if.else88

land.lhs.true:                                    ; preds = %cond.end34
  %54 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %54, i32 0, i32 10
  %55 = load i32, i32* %cop_hints, align 8
  %add43 = add i32 %55, 0
  %and44 = and i32 %add43, 8
  %tobool45 = icmp ne i32 %and44, 0
  br i1 %tobool45, label %if.else88, label %if.then46

if.then46:                                        ; preds = %land.lhs.true
  br label %while.cond

while.cond:                                       ; preds = %if.end82, %if.then46
  %56 = load i8*, i8** %s, align 8
  %57 = load i8*, i8** %send, align 8
  %cmp47 = icmp ult i8* %56, %57
  br i1 %cmp47, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %58 = load i8*, i8** %s, align 8
  %59 = load i8, i8* %58, align 1
  %idxprom = zext i8 %59 to i64
  %arrayidx48 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %60 = load i8, i8* %arrayidx48, align 1
  %conv = zext i8 %60 to i64
  store i64 %conv, i64* %u, align 8
  %61 = load i8*, i8** %s, align 8
  %arraydecay = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call49 = call i64 @Perl__to_utf8_fold_flags(i8* %61, i8* %arraydecay, i64* %ulen, i8 zeroext 2)
  %62 = load i64, i64* %ulen, align 8
  %63 = load i64, i64* %u, align 8
  %cmp50 = icmp ugt i64 %62, %63
  br i1 %cmp50, label %land.lhs.true52, label %if.end82

land.lhs.true52:                                  ; preds = %while.body
  %64 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any53 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any53, align 8
  %66 = bitcast i8* %65 to %struct.xpv*
  %xpv_len_u54 = getelementptr inbounds %struct.xpv, %struct.xpv* %66, i32 0, i32 3
  %xpvlenu_len55 = bitcast %union.anon.18* %xpv_len_u54 to i64*
  %67 = load i64, i64* %xpvlenu_len55, align 8
  %68 = load i64, i64* %ulen, align 8
  %69 = load i64, i64* %u, align 8
  %sub = sub i64 %68, %69
  %70 = load i64, i64* %min, align 8
  %add56 = add i64 %70, %sub
  store i64 %add56, i64* %min, align 8
  %cmp57 = icmp ult i64 %67, %add56
  br i1 %cmp57, label %if.then59, label %if.end82

if.then59:                                        ; preds = %land.lhs.true52
  %71 = load i8*, i8** %d, align 8
  %72 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u60 = getelementptr inbounds %struct.sv, %struct.sv* %72, i32 0, i32 3
  %svu_pv61 = bitcast %union.anon* %sv_u60 to i8**
  %73 = load i8*, i8** %svu_pv61, align 8
  %add.ptr62 = getelementptr inbounds i8, i8* %73, i64 0
  %sub.ptr.lhs.cast = ptrtoint i8* %71 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %add.ptr62 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %o, align 8
  %74 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags63 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags63, align 4
  %and64 = and i32 %75, 268435456
  %tobool65 = icmp ne i32 %and64, 0
  br i1 %tobool65, label %cond.true72, label %lor.lhs.false66

lor.lhs.false66:                                  ; preds = %if.then59
  %76 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any67 = getelementptr inbounds %struct.sv, %struct.sv* %76, i32 0, i32 0
  %77 = load i8*, i8** %sv_any67, align 8
  %78 = bitcast i8* %77 to %struct.xpv*
  %xpv_len_u68 = getelementptr inbounds %struct.xpv, %struct.xpv* %78, i32 0, i32 3
  %xpvlenu_len69 = bitcast %union.anon.18* %xpv_len_u68 to i64*
  %79 = load i64, i64* %xpvlenu_len69, align 8
  %80 = load i64, i64* %min, align 8
  %cmp70 = icmp ult i64 %79, %80
  br i1 %cmp70, label %cond.true72, label %cond.false74

cond.true72:                                      ; preds = %lor.lhs.false66, %if.then59
  %81 = load %struct.sv*, %struct.sv** %dest, align 8
  %82 = load i64, i64* %min, align 8
  %call73 = call i8* @Perl_sv_grow(%struct.sv* %81, i64 %82)
  br label %cond.end77

cond.false74:                                     ; preds = %lor.lhs.false66
  %83 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u75 = getelementptr inbounds %struct.sv, %struct.sv* %83, i32 0, i32 3
  %svu_pv76 = bitcast %union.anon* %sv_u75 to i8**
  %84 = load i8*, i8** %svu_pv76, align 8
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false74, %cond.true72
  %cond78 = phi i8* [ %call73, %cond.true72 ], [ %84, %cond.false74 ]
  %85 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u79 = getelementptr inbounds %struct.sv, %struct.sv* %85, i32 0, i32 3
  %svu_pv80 = bitcast %union.anon* %sv_u79 to i8**
  %86 = load i8*, i8** %svu_pv80, align 8
  %87 = load i64, i64* %o, align 8
  %add.ptr81 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8* %add.ptr81, i8** %d, align 8
  br label %if.end82

if.end82:                                         ; preds = %cond.end77, %land.lhs.true52, %while.body
  %88 = load i8*, i8** %d, align 8
  %arraydecay83 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %89 = load i64, i64* %ulen, align 8
  %mul = mul i64 %89, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %88, i8* align 1 %arraydecay83, i64 %mul, i1 false)
  %90 = load i64, i64* %ulen, align 8
  %91 = load i8*, i8** %d, align 8
  %add.ptr84 = getelementptr inbounds i8, i8* %91, i64 %90
  store i8* %add.ptr84, i8** %d, align 8
  %92 = load i64, i64* %u, align 8
  %93 = load i8*, i8** %s, align 8
  %add.ptr85 = getelementptr inbounds i8, i8* %93, i64 %92
  store i8* %add.ptr85, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %94 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags86 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 2
  %95 = load i32, i32* %sv_flags86, align 4
  %or87 = or i32 %95, 536870912
  store i32 %or87, i32* %sv_flags86, align 4
  br label %if.end236

if.else88:                                        ; preds = %land.lhs.true, %cond.end34
  %96 = load i64, i64* %len, align 8
  %tobool89 = icmp ne i64 %96, 0
  br i1 %tobool89, label %if.then90, label %if.end235

if.then90:                                        ; preds = %if.else88
  %97 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints91 = getelementptr inbounds %struct.cop, %struct.cop* %97, i32 0, i32 10
  %98 = load i32, i32* %cop_hints91, align 8
  %add92 = add i32 %98, 0
  %and93 = and i32 %add92, 2048
  %tobool94 = icmp ne i32 %and93, 0
  br i1 %tobool94, label %land.lhs.true103, label %lor.lhs.false95

lor.lhs.false95:                                  ; preds = %if.then90
  %99 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints96 = getelementptr inbounds %struct.cop, %struct.cop* %99, i32 0, i32 10
  %100 = load i32, i32* %cop_hints96, align 8
  %add97 = add i32 %100, 0
  %and98 = and i32 %add97, 16
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %land.lhs.true100, label %if.then108

land.lhs.true100:                                 ; preds = %lor.lhs.false95
  %call101 = call zeroext i1 @Perl__is_in_locale_category(i1 zeroext false, i32 -1)
  br i1 %call101, label %land.lhs.true103, label %if.then108

land.lhs.true103:                                 ; preds = %land.lhs.true100, %if.then90
  %101 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints104 = getelementptr inbounds %struct.cop, %struct.cop* %101, i32 0, i32 10
  %102 = load i32, i32* %cop_hints104, align 8
  %add105 = add i32 %102, 0
  %and106 = and i32 %add105, 8
  %tobool107 = icmp ne i32 %and106, 0
  br i1 %tobool107, label %if.then108, label %if.else127

if.then108:                                       ; preds = %land.lhs.true103, %land.lhs.true100, %lor.lhs.false95
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then108
  %103 = load i8*, i8** %s, align 8
  %104 = load i8*, i8** %send, align 8
  %cmp109 = icmp ult i8* %103, %104
  br i1 %cmp109, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %105 = load i8*, i8** %s, align 8
  %106 = load i8, i8* %105, align 1
  %idxprom111 = zext i8 %106 to i64
  %arrayidx112 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom111
  %107 = load i32, i32* %arrayidx112, align 4
  %and113 = and i32 %107, 16400
  %cmp114 = icmp eq i32 %and113, 16400
  br i1 %cmp114, label %cond.true116, label %cond.false121

cond.true116:                                     ; preds = %for.body
  %108 = load i8*, i8** %s, align 8
  %109 = load i8, i8* %108, align 1
  %conv117 = zext i8 %109 to i32
  %add118 = add nsw i32 %conv117, 32
  %conv119 = trunc i32 %add118 to i8
  %conv120 = zext i8 %conv119 to i32
  br label %cond.end123

cond.false121:                                    ; preds = %for.body
  %110 = load i8*, i8** %s, align 8
  %111 = load i8, i8* %110, align 1
  %conv122 = zext i8 %111 to i32
  br label %cond.end123

cond.end123:                                      ; preds = %cond.false121, %cond.true116
  %cond124 = phi i32 [ %conv120, %cond.true116 ], [ %conv122, %cond.false121 ]
  %conv125 = trunc i32 %cond124 to i8
  %112 = load i8*, i8** %d, align 8
  store i8 %conv125, i8* %112, align 1
  br label %for.inc

for.inc:                                          ; preds = %cond.end123
  %113 = load i8*, i8** %d, align 8
  %incdec.ptr = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %incdec.ptr, i8** %d, align 8
  %114 = load i8*, i8** %s, align 8
  %incdec.ptr126 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %incdec.ptr126, i8** %s, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end234

if.else127:                                       ; preds = %land.lhs.true103
  br label %for.cond128

for.cond128:                                      ; preds = %for.inc230, %if.else127
  %115 = load i8*, i8** %s, align 8
  %116 = load i8*, i8** %send, align 8
  %cmp129 = icmp ult i8* %115, %116
  br i1 %cmp129, label %for.body131, label %for.end233

for.body131:                                      ; preds = %for.cond128
  %117 = load i8*, i8** %s, align 8
  %118 = load i8, i8* %117, align 1
  %conv132 = zext i8 %118 to i32
  %cmp133 = icmp eq i32 %conv132, 181
  br i1 %cmp133, label %if.then135, label %if.else184

if.then135:                                       ; preds = %for.body131
  %119 = load i8*, i8** %d, align 8
  %120 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u136 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 3
  %svu_pv137 = bitcast %union.anon* %sv_u136 to i8**
  %121 = load i8*, i8** %svu_pv137, align 8
  %add.ptr138 = getelementptr inbounds i8, i8* %121, i64 0
  %sub.ptr.lhs.cast139 = ptrtoint i8* %119 to i64
  %sub.ptr.rhs.cast140 = ptrtoint i8* %add.ptr138 to i64
  %sub.ptr.sub141 = sub i64 %sub.ptr.lhs.cast139, %sub.ptr.rhs.cast140
  store i64 %sub.ptr.sub141, i64* %len, align 8
  br label %do.body

do.body:                                          ; preds = %if.then135
  %122 = load i64, i64* %len, align 8
  %123 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any142 = getelementptr inbounds %struct.sv, %struct.sv* %123, i32 0, i32 0
  %124 = load i8*, i8** %sv_any142, align 8
  %125 = bitcast i8* %124 to %struct.xpv*
  %xpv_cur143 = getelementptr inbounds %struct.xpv, %struct.xpv* %125, i32 0, i32 2
  store i64 %122, i64* %xpv_cur143, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %126 = load %struct.sv*, %struct.sv** %dest, align 8
  %127 = load i8*, i8** %send, align 8
  %128 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast144 = ptrtoint i8* %127 to i64
  %sub.ptr.rhs.cast145 = ptrtoint i8* %128 to i64
  %sub.ptr.sub146 = sub i64 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %mul147 = mul nsw i64 %sub.ptr.sub146, 2
  %add148 = add nsw i64 %mul147, 1
  %call149 = call i64 @Perl_sv_utf8_upgrade_flags_grow(%struct.sv* %126, i32 4098, i64 %add148)
  store i64 %call149, i64* %len, align 8
  %129 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u150 = getelementptr inbounds %struct.sv, %struct.sv* %129, i32 0, i32 3
  %svu_pv151 = bitcast %union.anon* %sv_u150 to i8**
  %130 = load i8*, i8** %svu_pv151, align 8
  %131 = load i64, i64* %len, align 8
  %add.ptr152 = getelementptr inbounds i8, i8* %130, i64 %131
  store i8* %add.ptr152, i8** %d, align 8
  %132 = load i8*, i8** %d, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @.str.43, i64 0, i64 0), i64 2, i1 false)
  %133 = load i8*, i8** %d, align 8
  %add.ptr153 = getelementptr inbounds i8, i8* %133, i64 2
  store i8* %add.ptr153, i8** %d, align 8
  %134 = load i8*, i8** %s, align 8
  %incdec.ptr154 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %incdec.ptr154, i8** %s, align 8
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc181, %do.end
  %135 = load i8*, i8** %s, align 8
  %136 = load i8*, i8** %send, align 8
  %cmp156 = icmp ult i8* %135, %136
  br i1 %cmp156, label %for.body158, label %for.end183

for.body158:                                      ; preds = %for.cond155
  %137 = load i8*, i8** %s, align 8
  %138 = load i8, i8* %137, align 1
  %conv160 = zext i8 %138 to i64
  %arraydecay161 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %call162 = call i64 @Perl__to_uni_fold_flags(i64 %conv160, i8* %arraydecay161, i64* %ulen159, i8 zeroext 2)
  store i64 %call162, i64* %fc, align 8
  %139 = load i64, i64* %fc, align 8
  %cmp163 = icmp ult i64 %139, 128
  br i1 %cmp163, label %if.then165, label %if.else176

if.then165:                                       ; preds = %for.body158
  %140 = load i8*, i8** %s, align 8
  %141 = load i8, i8* %140, align 1
  %conv166 = zext i8 %141 to i32
  %cmp167 = icmp eq i32 %conv166, 223
  br i1 %cmp167, label %if.then169, label %if.else172

if.then169:                                       ; preds = %if.then165
  %142 = load i8*, i8** %d, align 8
  %incdec.ptr170 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr170, i8** %d, align 8
  store i8 115, i8* %142, align 1
  %143 = load i8*, i8** %d, align 8
  %incdec.ptr171 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %incdec.ptr171, i8** %d, align 8
  store i8 115, i8* %143, align 1
  br label %if.end175

if.else172:                                       ; preds = %if.then165
  %144 = load i64, i64* %fc, align 8
  %conv173 = trunc i64 %144 to i8
  %145 = load i8*, i8** %d, align 8
  %incdec.ptr174 = getelementptr inbounds i8, i8* %145, i32 1
  store i8* %incdec.ptr174, i8** %d, align 8
  store i8 %conv173, i8* %145, align 1
  br label %if.end175

if.end175:                                        ; preds = %if.else172, %if.then169
  br label %if.end180

if.else176:                                       ; preds = %for.body158
  %146 = load i8*, i8** %d, align 8
  %arraydecay177 = getelementptr inbounds [14 x i8], [14 x i8]* %tmpbuf, i64 0, i64 0
  %147 = load i64, i64* %ulen159, align 8
  %mul178 = mul i64 %147, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %arraydecay177, i64 %mul178, i1 false)
  %148 = load i64, i64* %ulen159, align 8
  %149 = load i8*, i8** %d, align 8
  %add.ptr179 = getelementptr inbounds i8, i8* %149, i64 %148
  store i8* %add.ptr179, i8** %d, align 8
  br label %if.end180

if.end180:                                        ; preds = %if.else176, %if.end175
  br label %for.inc181

for.inc181:                                       ; preds = %if.end180
  %150 = load i8*, i8** %s, align 8
  %incdec.ptr182 = getelementptr inbounds i8, i8* %150, i32 1
  store i8* %incdec.ptr182, i8** %s, align 8
  br label %for.cond155

for.end183:                                       ; preds = %for.cond155
  br label %for.end233

if.else184:                                       ; preds = %for.body131
  %151 = load i8*, i8** %s, align 8
  %152 = load i8, i8* %151, align 1
  %conv185 = zext i8 %152 to i32
  %cmp186 = icmp eq i32 %conv185, 223
  br i1 %cmp186, label %if.then188, label %if.else223

if.then188:                                       ; preds = %if.else184
  %153 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any189 = getelementptr inbounds %struct.sv, %struct.sv* %153, i32 0, i32 0
  %154 = load i8*, i8** %sv_any189, align 8
  %155 = bitcast i8* %154 to %struct.xpv*
  %xpv_len_u190 = getelementptr inbounds %struct.xpv, %struct.xpv* %155, i32 0, i32 3
  %xpvlenu_len191 = bitcast %union.anon.18* %xpv_len_u190 to i64*
  %156 = load i64, i64* %xpvlenu_len191, align 8
  %157 = load i64, i64* %min, align 8
  %inc = add i64 %157, 1
  store i64 %inc, i64* %min, align 8
  %cmp192 = icmp ult i64 %156, %inc
  br i1 %cmp192, label %if.then194, label %if.end221

if.then194:                                       ; preds = %if.then188
  %158 = load i8*, i8** %d, align 8
  %159 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u196 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 3
  %svu_pv197 = bitcast %union.anon* %sv_u196 to i8**
  %160 = load i8*, i8** %svu_pv197, align 8
  %add.ptr198 = getelementptr inbounds i8, i8* %160, i64 0
  %sub.ptr.lhs.cast199 = ptrtoint i8* %158 to i64
  %sub.ptr.rhs.cast200 = ptrtoint i8* %add.ptr198 to i64
  %sub.ptr.sub201 = sub i64 %sub.ptr.lhs.cast199, %sub.ptr.rhs.cast200
  store i64 %sub.ptr.sub201, i64* %o195, align 8
  %161 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags202 = getelementptr inbounds %struct.sv, %struct.sv* %161, i32 0, i32 2
  %162 = load i32, i32* %sv_flags202, align 4
  %and203 = and i32 %162, 268435456
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %cond.true211, label %lor.lhs.false205

lor.lhs.false205:                                 ; preds = %if.then194
  %163 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any206 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 0
  %164 = load i8*, i8** %sv_any206, align 8
  %165 = bitcast i8* %164 to %struct.xpv*
  %xpv_len_u207 = getelementptr inbounds %struct.xpv, %struct.xpv* %165, i32 0, i32 3
  %xpvlenu_len208 = bitcast %union.anon.18* %xpv_len_u207 to i64*
  %166 = load i64, i64* %xpvlenu_len208, align 8
  %167 = load i64, i64* %min, align 8
  %cmp209 = icmp ult i64 %166, %167
  br i1 %cmp209, label %cond.true211, label %cond.false213

cond.true211:                                     ; preds = %lor.lhs.false205, %if.then194
  %168 = load %struct.sv*, %struct.sv** %dest, align 8
  %169 = load i64, i64* %min, align 8
  %call212 = call i8* @Perl_sv_grow(%struct.sv* %168, i64 %169)
  br label %cond.end216

cond.false213:                                    ; preds = %lor.lhs.false205
  %170 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u214 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 3
  %svu_pv215 = bitcast %union.anon* %sv_u214 to i8**
  %171 = load i8*, i8** %svu_pv215, align 8
  br label %cond.end216

cond.end216:                                      ; preds = %cond.false213, %cond.true211
  %cond217 = phi i8* [ %call212, %cond.true211 ], [ %171, %cond.false213 ]
  %172 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u218 = getelementptr inbounds %struct.sv, %struct.sv* %172, i32 0, i32 3
  %svu_pv219 = bitcast %union.anon* %sv_u218 to i8**
  %173 = load i8*, i8** %svu_pv219, align 8
  %174 = load i64, i64* %o195, align 8
  %add.ptr220 = getelementptr inbounds i8, i8* %173, i64 %174
  store i8* %add.ptr220, i8** %d, align 8
  br label %if.end221

if.end221:                                        ; preds = %cond.end216, %if.then188
  %175 = load i8*, i8** %d, align 8
  %incdec.ptr222 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %incdec.ptr222, i8** %d, align 8
  store i8 115, i8* %175, align 1
  %176 = load i8*, i8** %d, align 8
  store i8 115, i8* %176, align 1
  br label %if.end228

if.else223:                                       ; preds = %if.else184
  %177 = load i8*, i8** %s, align 8
  %178 = load i8, i8* %177, align 1
  %idxprom224 = zext i8 %178 to i64
  %arrayidx225 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_latin1_lc, i64 0, i64 %idxprom224
  %179 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %179 to i32
  %conv227 = trunc i32 %conv226 to i8
  %180 = load i8*, i8** %d, align 8
  store i8 %conv227, i8* %180, align 1
  br label %if.end228

if.end228:                                        ; preds = %if.else223, %if.end221
  br label %if.end229

if.end229:                                        ; preds = %if.end228
  br label %for.inc230

for.inc230:                                       ; preds = %if.end229
  %181 = load i8*, i8** %d, align 8
  %incdec.ptr231 = getelementptr inbounds i8, i8* %181, i32 1
  store i8* %incdec.ptr231, i8** %d, align 8
  %182 = load i8*, i8** %s, align 8
  %incdec.ptr232 = getelementptr inbounds i8, i8* %182, i32 1
  store i8* %incdec.ptr232, i8** %s, align 8
  br label %for.cond128

for.end233:                                       ; preds = %for.end183, %for.cond128
  br label %if.end234

if.end234:                                        ; preds = %for.end233, %for.end
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.else88
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %while.end
  %183 = load i8*, i8** %d, align 8
  store i8 0, i8* %183, align 1
  br label %do.body237

do.body237:                                       ; preds = %if.end236
  %184 = load i8*, i8** %d, align 8
  %185 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_u238 = getelementptr inbounds %struct.sv, %struct.sv* %185, i32 0, i32 3
  %svu_pv239 = bitcast %union.anon* %sv_u238 to i8**
  %186 = load i8*, i8** %svu_pv239, align 8
  %add.ptr240 = getelementptr inbounds i8, i8* %186, i64 0
  %sub.ptr.lhs.cast241 = ptrtoint i8* %184 to i64
  %sub.ptr.rhs.cast242 = ptrtoint i8* %add.ptr240 to i64
  %sub.ptr.sub243 = sub i64 %sub.ptr.lhs.cast241, %sub.ptr.rhs.cast242
  %187 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_any244 = getelementptr inbounds %struct.sv, %struct.sv* %187, i32 0, i32 0
  %188 = load i8*, i8** %sv_any244, align 8
  %189 = bitcast i8* %188 to %struct.xpv*
  %xpv_cur245 = getelementptr inbounds %struct.xpv, %struct.xpv* %189, i32 0, i32 2
  store i64 %sub.ptr.sub243, i64* %xpv_cur245, align 8
  br label %do.end246

do.end246:                                        ; preds = %do.body237
  %190 = load %struct.sv*, %struct.sv** %source, align 8
  %sv_flags247 = getelementptr inbounds %struct.sv, %struct.sv* %190, i32 0, i32 2
  %191 = load i32, i32* %sv_flags247, align 4
  %and248 = and i32 %191, 14680064
  %tobool249 = icmp ne i32 %and248, 0
  br i1 %tobool249, label %land.lhs.true250, label %if.end276

land.lhs.true250:                                 ; preds = %do.end246
  %192 = load %struct.sv*, %struct.sv** %source, align 8
  %call251 = call zeroext i1 @Perl_sv_tainted(%struct.sv* %192)
  br i1 %call251, label %if.then253, label %if.end276

if.then253:                                       ; preds = %land.lhs.true250
  br label %do.body254

do.body254:                                       ; preds = %if.then253
  %193 = load i8, i8* @PL_tainting, align 1
  %tobool255 = trunc i8 %193 to i1
  br i1 %tobool255, label %cond.true257, label %cond.false258

cond.true257:                                     ; preds = %do.body254
  br i1 true, label %if.then259, label %if.end274

cond.false258:                                    ; preds = %do.body254
  br i1 false, label %if.then259, label %if.end274

if.then259:                                       ; preds = %cond.false258, %cond.true257
  %194 = load i8, i8* @PL_tainted, align 1
  %tobool260 = trunc i8 %194 to i1
  br i1 %tobool260, label %cond.true262, label %cond.false263

cond.true262:                                     ; preds = %if.then259
  br i1 true, label %if.then264, label %if.end273

cond.false263:                                    ; preds = %if.then259
  br i1 false, label %if.then264, label %if.end273

if.then264:                                       ; preds = %cond.false263, %cond.true262
  br label %do.body265

do.body265:                                       ; preds = %if.then264
  %195 = load i8, i8* @PL_tainting, align 1
  %tobool266 = trunc i8 %195 to i1
  br i1 %tobool266, label %cond.true268, label %cond.false269

cond.true268:                                     ; preds = %do.body265
  br i1 true, label %if.then270, label %if.end271

cond.false269:                                    ; preds = %do.body265
  br i1 false, label %if.then270, label %if.end271

if.then270:                                       ; preds = %cond.false269, %cond.true268
  %196 = load %struct.sv*, %struct.sv** %dest, align 8
  call void @Perl_sv_magic(%struct.sv* %196, %struct.sv* null, i32 116, i8* null, i32 0)
  br label %if.end271

if.end271:                                        ; preds = %if.then270, %cond.false269, %cond.true268
  br label %do.end272

do.end272:                                        ; preds = %if.end271
  br label %if.end273

if.end273:                                        ; preds = %do.end272, %cond.false263, %cond.true262
  br label %if.end274

if.end274:                                        ; preds = %if.end273, %cond.false258, %cond.true257
  br label %do.end275

do.end275:                                        ; preds = %if.end274
  br label %if.end276

if.end276:                                        ; preds = %do.end275, %land.lhs.true250, %do.end246
  br label %do.body277

do.body277:                                       ; preds = %if.end276
  %197 = load %struct.sv*, %struct.sv** %dest, align 8
  %sv_flags278 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 2
  %198 = load i32, i32* %sv_flags278, align 4
  %and279 = and i32 %198, 4194304
  %tobool280 = icmp ne i32 %and279, 0
  br i1 %tobool280, label %cond.true281, label %cond.false282

cond.true281:                                     ; preds = %do.body277
  br i1 true, label %if.then283, label %if.end285

cond.false282:                                    ; preds = %do.body277
  br i1 false, label %if.then283, label %if.end285

if.then283:                                       ; preds = %cond.false282, %cond.true281
  %199 = load %struct.sv*, %struct.sv** %dest, align 8
  %call284 = call i32 @Perl_mg_set(%struct.sv* %199)
  br label %if.end285

if.end285:                                        ; preds = %if.then283, %cond.false282, %cond.true281
  br label %do.end286

do.end286:                                        ; preds = %if.end285
  %200 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %200, %struct.sv*** @PL_stack_sp, align 8
  %201 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %201, i32 0, i32 0
  %202 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %202
}

declare dso_local i64 @Perl__to_utf8_fold_flags(i8*, i8*, i64*, i8 zeroext) #1

declare dso_local i64 @Perl__to_uni_fold_flags(i64, i8*, i64*, i8 zeroext) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_aslice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %localizing = alloca i8, align 1
  %can_preserve = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %svp = alloca %struct.sv**, align 8
  %max = alloca i64, align 8
  %elem = alloca i64, align 8
  %svp67 = alloca %struct.sv**, align 8
  %elem68 = alloca i64, align 8
  %preeminent = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %8 = bitcast %struct.sv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.av*
  store %struct.av* %9, %struct.av** %av, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags, align 2
  %conv2 = zext i8 %11 to i32
  %and = and i32 %conv2, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv3 = zext i8 %13 to i32
  %and4 = and i32 %conv3, 8
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool6 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %14 = phi i1 [ false, %lor.rhs ], [ %tobool6, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %15 = phi i1 [ true, %entry ], [ %14, %land.end ]
  %lor.ext = zext i1 %15 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %16 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %16, i32 0, i32 2
  %17 = load i32, i32* %sv_flags, align 4
  %and7 = and i32 %17, 255
  %cmp = icmp eq i32 %and7, 11
  br i1 %cmp, label %if.then, label %if.end111

if.then:                                          ; preds = %lor.end
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private9 = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 6
  %19 = load i8, i8* %op_private9, align 1
  %conv10 = zext i8 %19 to i32
  %and11 = and i32 %conv10, 128
  %tobool12 = icmp ne i32 %and11, 0
  %frombool = zext i1 %tobool12 to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 0, i8* %can_preserve, align 1
  %20 = load i8, i8* %localizing, align 1
  %tobool13 = trunc i8 %20 to i1
  br i1 %tobool13, label %if.then14, label %if.end

if.then14:                                        ; preds = %if.then
  %21 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags15 = getelementptr inbounds %struct.av, %struct.av* %21, i32 0, i32 2
  %22 = load i32, i32* %sv_flags15, align 4
  %and16 = and i32 %22, 8388608
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %lor.lhs.false, label %lor.end32

lor.lhs.false:                                    ; preds = %if.then14
  %23 = load %struct.av*, %struct.av** %av, align 8
  %24 = bitcast %struct.av* %23 to %struct.sv*
  %call18 = call %struct.magic* @Perl_mg_find(%struct.sv* %24, i32 80)
  store %struct.magic* %call18, %struct.magic** %mg, align 8
  %tobool19 = icmp ne %struct.magic* %call18, null
  br i1 %tobool19, label %lor.rhs20, label %lor.end32

lor.rhs20:                                        ; preds = %lor.lhs.false
  %25 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %25, i32 0, i32 6
  %26 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool21 = icmp ne %struct.sv* %26, null
  br i1 %tobool21, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.rhs20
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj22 = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 6
  %28 = load %struct.sv*, %struct.sv** %mg_obj22, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.rhs20
  %29 = load %struct.av*, %struct.av** %av, align 8
  %30 = bitcast %struct.av* %29 to i8*
  %31 = bitcast i8* %30 to %struct.sv*
  %call23 = call %struct.sv* @Perl_newRV(%struct.sv* %31)
  %call24 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call23)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %28, %cond.true ], [ %call24, %cond.false ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %32 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any, align 8
  %34 = bitcast i8* %33 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %34, i32 0, i32 0
  %35 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %35, %struct.hv** %stash, align 8
  %tobool25 = icmp ne %struct.hv* %35, null
  br i1 %tobool25, label %land.lhs.true, label %land.end31

land.lhs.true:                                    ; preds = %cond.end
  %36 = load %struct.hv*, %struct.hv** %stash, align 8
  %call26 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool27 = icmp ne %struct.gv* %call26, null
  br i1 %tobool27, label %land.rhs28, label %land.end31

land.rhs28:                                       ; preds = %land.lhs.true
  %37 = load %struct.hv*, %struct.hv** %stash, align 8
  %call29 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool30 = icmp ne %struct.gv* %call29, null
  br label %land.end31

land.end31:                                       ; preds = %land.rhs28, %land.lhs.true, %cond.end
  %38 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end ], [ %tobool30, %land.rhs28 ]
  br label %lor.end32

lor.end32:                                        ; preds = %land.end31, %lor.lhs.false, %if.then14
  %39 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then14 ], [ %38, %land.end31 ]
  %frombool34 = zext i1 %39 to i8
  store i8 %frombool34, i8* %can_preserve, align 1
  br label %if.end

if.end:                                           ; preds = %lor.end32, %if.then
  %40 = load i32, i32* %lval, align 4
  %tobool35 = icmp ne i32 %40, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end63

land.lhs.true36:                                  ; preds = %if.end
  %41 = load i8, i8* %localizing, align 1
  %tobool37 = trunc i8 %41 to i1
  br i1 %tobool37, label %if.then39, label %if.end63

if.then39:                                        ; preds = %land.lhs.true36
  store i64 -1, i64* %max, align 8
  %42 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i64 1
  store %struct.sv** %add.ptr40, %struct.sv*** %svp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then39
  %43 = load %struct.sv**, %struct.sv*** %svp, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp41 = icmp ule %struct.sv** %43, %44
  br i1 %cmp41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %45 = load %struct.sv**, %struct.sv*** %svp, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 2
  %47 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %47, 2097408
  %cmp45 = icmp eq i32 %and44, 256
  br i1 %cmp45, label %cond.true47, label %cond.false49

cond.true47:                                      ; preds = %for.body
  %48 = load %struct.sv**, %struct.sv*** %svp, align 8
  %49 = load %struct.sv*, %struct.sv** %48, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 0
  %50 = load i8*, i8** %sv_any48, align 8
  %51 = bitcast i8* %50 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %51, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %52 = load i64, i64* %xivu_iv, align 8
  br label %cond.end51

cond.false49:                                     ; preds = %for.body
  %53 = load %struct.sv**, %struct.sv*** %svp, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %call50 = call i64 @Perl_sv_2iv_flags(%struct.sv* %54, i32 2)
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false49, %cond.true47
  %cond52 = phi i64 [ %52, %cond.true47 ], [ %call50, %cond.false49 ]
  store i64 %cond52, i64* %elem, align 8
  %55 = load i64, i64* %elem, align 8
  %56 = load i64, i64* %max, align 8
  %cmp53 = icmp sgt i64 %55, %56
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %cond.end51
  %57 = load i64, i64* %elem, align 8
  store i64 %57, i64* %max, align 8
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %cond.end51
  br label %for.inc

for.inc:                                          ; preds = %if.end56
  %58 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %58, i32 1
  store %struct.sv** %incdec.ptr57, %struct.sv*** %svp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %59 = load i64, i64* %max, align 8
  %60 = load %struct.av*, %struct.av** %av, align 8
  %sv_any58 = getelementptr inbounds %struct.av, %struct.av* %60, i32 0, i32 0
  %61 = load %struct.xpvav*, %struct.xpvav** %sv_any58, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %61, i32 0, i32 3
  %62 = load i64, i64* %xav_max, align 8
  %cmp59 = icmp sgt i64 %59, %62
  br i1 %cmp59, label %if.then61, label %if.end62

if.then61:                                        ; preds = %for.end
  %63 = load %struct.av*, %struct.av** %av, align 8
  %64 = load i64, i64* %max, align 8
  call void @Perl_av_extend(%struct.av* %63, i64 %64)
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %for.end
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %land.lhs.true36, %if.end
  br label %while.cond

while.cond:                                       ; preds = %cond.end109, %if.end63
  %65 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %65, i32 1
  store %struct.sv** %incdec.ptr64, %struct.sv*** %mark, align 8
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp65 = icmp ule %struct.sv** %incdec.ptr64, %66
  br i1 %cmp65, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  %68 = load %struct.sv*, %struct.sv** %67, align 8
  %sv_flags69 = getelementptr inbounds %struct.sv, %struct.sv* %68, i32 0, i32 2
  %69 = load i32, i32* %sv_flags69, align 4
  %and70 = and i32 %69, 2097408
  %cmp71 = icmp eq i32 %and70, 256
  br i1 %cmp71, label %cond.true73, label %cond.false77

cond.true73:                                      ; preds = %while.body
  %70 = load %struct.sv**, %struct.sv*** %mark, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %sv_any74 = getelementptr inbounds %struct.sv, %struct.sv* %71, i32 0, i32 0
  %72 = load i8*, i8** %sv_any74, align 8
  %73 = bitcast i8* %72 to %struct.xpviv*
  %xiv_u75 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %73, i32 0, i32 4
  %xivu_iv76 = bitcast %union._xivu* %xiv_u75 to i64*
  %74 = load i64, i64* %xivu_iv76, align 8
  br label %cond.end79

cond.false77:                                     ; preds = %while.body
  %75 = load %struct.sv**, %struct.sv*** %mark, align 8
  %76 = load %struct.sv*, %struct.sv** %75, align 8
  %call78 = call i64 @Perl_sv_2iv_flags(%struct.sv* %76, i32 2)
  br label %cond.end79

cond.end79:                                       ; preds = %cond.false77, %cond.true73
  %cond80 = phi i64 [ %74, %cond.true73 ], [ %call78, %cond.false77 ]
  store i64 %cond80, i64* %elem68, align 8
  store i8 1, i8* %preeminent, align 1
  %77 = load i8, i8* %localizing, align 1
  %tobool81 = trunc i8 %77 to i1
  br i1 %tobool81, label %land.lhs.true83, label %if.end89

land.lhs.true83:                                  ; preds = %cond.end79
  %78 = load i8, i8* %can_preserve, align 1
  %tobool84 = trunc i8 %78 to i1
  br i1 %tobool84, label %if.then86, label %if.end89

if.then86:                                        ; preds = %land.lhs.true83
  %79 = load %struct.av*, %struct.av** %av, align 8
  %80 = load i64, i64* %elem68, align 8
  %call87 = call zeroext i1 @Perl_av_exists(%struct.av* %79, i64 %80)
  %frombool88 = zext i1 %call87 to i8
  store i8 %frombool88, i8* %preeminent, align 1
  br label %if.end89

if.end89:                                         ; preds = %if.then86, %land.lhs.true83, %cond.end79
  %81 = load %struct.av*, %struct.av** %av, align 8
  %82 = load i64, i64* %elem68, align 8
  %83 = load i32, i32* %lval, align 4
  %call90 = call %struct.sv** @Perl_av_fetch(%struct.av* %81, i64 %82, i32 %83)
  store %struct.sv** %call90, %struct.sv*** %svp67, align 8
  %84 = load i32, i32* %lval, align 4
  %tobool91 = icmp ne i32 %84, 0
  br i1 %tobool91, label %if.then92, label %if.end105

if.then92:                                        ; preds = %if.end89
  %85 = load %struct.sv**, %struct.sv*** %svp67, align 8
  %tobool93 = icmp ne %struct.sv** %85, null
  br i1 %tobool93, label %lor.lhs.false94, label %if.then96

lor.lhs.false94:                                  ; preds = %if.then92
  %86 = load %struct.sv**, %struct.sv*** %svp67, align 8
  %87 = load %struct.sv*, %struct.sv** %86, align 8
  %tobool95 = icmp ne %struct.sv* %87, null
  br i1 %tobool95, label %if.end98, label %if.then96

if.then96:                                        ; preds = %lor.lhs.false94, %if.then92
  %88 = load i64, i64* %elem68, align 8
  %call97 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %88)
  store %struct.op* %call97, %struct.op** %retval, align 8
  br label %return

if.end98:                                         ; preds = %lor.lhs.false94
  %89 = load i8, i8* %localizing, align 1
  %tobool99 = trunc i8 %89 to i1
  br i1 %tobool99, label %if.then100, label %if.end104

if.then100:                                       ; preds = %if.end98
  %90 = load i8, i8* %preeminent, align 1
  %tobool101 = trunc i8 %90 to i1
  br i1 %tobool101, label %if.then102, label %if.else

if.then102:                                       ; preds = %if.then100
  %91 = load %struct.av*, %struct.av** %av, align 8
  %92 = load i64, i64* %elem68, align 8
  %93 = load %struct.sv**, %struct.sv*** %svp67, align 8
  call void @Perl_save_aelem_flags(%struct.av* %91, i64 %92, %struct.sv** %93, i32 1)
  br label %if.end103

if.else:                                          ; preds = %if.then100
  %94 = load %struct.av*, %struct.av** %av, align 8
  %95 = bitcast %struct.av* %94 to i8*
  %96 = bitcast i8* %95 to %struct.av*
  %97 = load i64, i64* %elem68, align 8
  call void @Perl_save_adelete(%struct.av* %96, i64 %97)
  br label %if.end103

if.end103:                                        ; preds = %if.else, %if.then102
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.end98
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.end89
  %98 = load %struct.sv**, %struct.sv*** %svp67, align 8
  %tobool106 = icmp ne %struct.sv** %98, null
  br i1 %tobool106, label %cond.true107, label %cond.false108

cond.true107:                                     ; preds = %if.end105
  %99 = load %struct.sv**, %struct.sv*** %svp67, align 8
  %100 = load %struct.sv*, %struct.sv** %99, align 8
  br label %cond.end109

cond.false108:                                    ; preds = %if.end105
  br label %cond.end109

cond.end109:                                      ; preds = %cond.false108, %cond.true107
  %cond110 = phi %struct.sv* [ %100, %cond.true107 ], [ @PL_sv_undef, %cond.false108 ]
  %101 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond110, %struct.sv** %101, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end111

if.end111:                                        ; preds = %while.end, %lor.end
  %102 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags112 = getelementptr inbounds %struct.op, %struct.op* %102, i32 0, i32 5
  %103 = load i8, i8* %op_flags112, align 2
  %conv113 = zext i8 %103 to i32
  %and114 = and i32 %conv113, 3
  %tobool115 = icmp ne i32 %and114, 0
  br i1 %tobool115, label %cond.true116, label %cond.false120

cond.true116:                                     ; preds = %if.end111
  %104 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags117 = getelementptr inbounds %struct.op, %struct.op* %104, i32 0, i32 5
  %105 = load i8, i8* %op_flags117, align 2
  %conv118 = zext i8 %105 to i32
  %and119 = and i32 %conv118, 3
  br label %cond.end122

cond.false120:                                    ; preds = %if.end111
  %call121 = call i32 @Perl_block_gimme()
  br label %cond.end122

cond.end122:                                      ; preds = %cond.false120, %cond.true116
  %cond123 = phi i32 [ %and119, %cond.true116 ], [ %call121, %cond.false120 ]
  %cmp124 = icmp ne i32 %cond123, 3
  br i1 %cmp124, label %if.then126, label %if.end138

if.then126:                                       ; preds = %cond.end122
  %106 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %107 = load i32, i32* %origmark, align 4
  %idx.ext127 = sext i32 %107 to i64
  %add.ptr128 = getelementptr inbounds %struct.sv*, %struct.sv** %106, i64 %idx.ext127
  store %struct.sv** %add.ptr128, %struct.sv*** %mark, align 8
  %108 = load %struct.sv**, %struct.sv*** %sp, align 8
  %109 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %110 = load i32, i32* %origmark, align 4
  %idx.ext129 = sext i32 %110 to i64
  %add.ptr130 = getelementptr inbounds %struct.sv*, %struct.sv** %109, i64 %idx.ext129
  %cmp131 = icmp ugt %struct.sv** %108, %add.ptr130
  br i1 %cmp131, label %cond.true133, label %cond.false134

cond.true133:                                     ; preds = %if.then126
  %111 = load %struct.sv**, %struct.sv*** %sp, align 8
  %112 = load %struct.sv*, %struct.sv** %111, align 8
  br label %cond.end135

cond.false134:                                    ; preds = %if.then126
  br label %cond.end135

cond.end135:                                      ; preds = %cond.false134, %cond.true133
  %cond136 = phi %struct.sv* [ %112, %cond.true133 ], [ @PL_sv_undef, %cond.false134 ]
  %113 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr137 = getelementptr inbounds %struct.sv*, %struct.sv** %113, i32 1
  store %struct.sv** %incdec.ptr137, %struct.sv*** %mark, align 8
  store %struct.sv* %cond136, %struct.sv** %incdec.ptr137, align 8
  %114 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %114, %struct.sv*** %sp, align 8
  br label %if.end138

if.end138:                                        ; preds = %cond.end135, %cond.end122
  %115 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %115, %struct.sv*** @PL_stack_sp, align 8
  %116 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %116, i32 0, i32 0
  %117 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %117, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end138, %if.then96
  %118 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %118
}

declare dso_local %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv*, i8*, i32) #1

declare dso_local void @Perl_av_extend(%struct.av*, i64) #1

declare dso_local zeroext i1 @Perl_av_exists(%struct.av*, i64) #1

declare dso_local void @Perl_save_aelem_flags(%struct.av*, i64, %struct.sv**, i32) #1

declare dso_local void @Perl_save_adelete(%struct.av*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_kvaslice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %lval = alloca i32, align 4
  %items = alloca i64, align 8
  %flags = alloca i32, align 4
  %markoff = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %4, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.av*
  store %struct.av* %7, %struct.av** %av, align 8
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %9 to i32
  %and = and i32 %conv, 32
  store i32 %and, i32* %lval, align 4
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  store i64 %sub.ptr.div, i64* %items, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %13 to i32
  %and3 = and i32 %conv2, 8
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %call = call i32 @Perl_is_lvalue_sub()
  store i32 %call, i32* %flags, align 4
  %14 = load i32, i32* %flags, align 4
  %tobool4 = icmp ne i32 %14, 0
  br i1 %tobool4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.then
  %15 = load i32, i32* %flags, align 4
  %and6 = and i32 %15, 1
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then5
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.46, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then5
  %16 = load i32, i32* %flags, align 4
  store i32 %16, i32* %lval, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %entry
  br label %do.body

do.body:                                          ; preds = %if.end10
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast11 = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast12 = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %sub.ptr.div14 = sdiv exact i64 %sub.ptr.sub13, 8
  %19 = load i64, i64* %items, align 8
  %cmp = icmp slt i64 %sub.ptr.div14, %19
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then16, label %if.end23

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then16, label %if.end23

if.then16:                                        ; preds = %cond.false, %cond.true
  %20 = load %struct.sv**, %struct.sv*** %mark, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast17 = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.rhs.cast18 = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %sub.ptr.div20 = sdiv exact i64 %sub.ptr.sub19, 8
  store i64 %sub.ptr.div20, i64* %markoff, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load i64, i64* %items, align 8
  %call21 = call %struct.sv** @Perl_stack_grow(%struct.sv** %22, %struct.sv** %23, i64 %24)
  store %struct.sv** %call21, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %26 = load i64, i64* %markoff, align 8
  %add.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i64 %26
  store %struct.sv** %add.ptr22, %struct.sv*** %mark, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then16, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end23
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %28 = load i64, i64* %items, align 8
  %cmp24 = icmp sgt i64 %28, 1
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %29 = load %struct.sv**, %struct.sv*** %mark, align 8
  %30 = load i64, i64* %items, align 8
  %add.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i64 %30
  %31 = load %struct.sv*, %struct.sv** %add.ptr26, align 8
  %32 = load %struct.sv**, %struct.sv*** %mark, align 8
  %33 = load i64, i64* %items, align 8
  %mul = mul nsw i64 %33, 2
  %add.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 %mul
  %add.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr27, i64 -1
  store %struct.sv* %31, %struct.sv** %add.ptr28, align 8
  %34 = load i64, i64* %items, align 8
  %dec = add nsw i64 %34, -1
  store i64 %dec, i64* %items, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast29 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.rhs.cast30 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %sub.ptr.div32 = sdiv exact i64 %sub.ptr.sub31, 8
  store i64 %sub.ptr.div32, i64* %items, align 8
  %37 = load i64, i64* %items, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr33 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %37
  store %struct.sv** %add.ptr33, %struct.sv*** %sp, align 8
  br label %while.cond34

while.cond34:                                     ; preds = %cond.end73, %while.end
  %39 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr35 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i32 1
  store %struct.sv** %incdec.ptr35, %struct.sv*** %mark, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp36 = icmp ule %struct.sv** %incdec.ptr35, %40
  br i1 %cmp36, label %while.body38, label %while.end76

while.body38:                                     ; preds = %while.cond34
  %41 = load %struct.av*, %struct.av** %av, align 8
  %42 = load %struct.sv**, %struct.sv*** %mark, align 8
  %43 = load %struct.sv*, %struct.sv** %42, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags, align 4
  %and39 = and i32 %44, 2097408
  %cmp40 = icmp eq i32 %and39, 256
  br i1 %cmp40, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %while.body38
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %46, i32 0, i32 0
  %47 = load i8*, i8** %sv_any, align 8
  %48 = bitcast i8* %47 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %48, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %49 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false43:                                     ; preds = %while.body38
  %50 = load %struct.sv**, %struct.sv*** %mark, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  %call44 = call i64 @Perl_sv_2iv_flags(%struct.sv* %51, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false43, %cond.true42
  %cond = phi i64 [ %49, %cond.true42 ], [ %call44, %cond.false43 ]
  %52 = load i32, i32* %lval, align 4
  %call45 = call %struct.sv** @Perl_av_fetch(%struct.av* %41, i64 %cond, i32 %52)
  store %struct.sv** %call45, %struct.sv*** %svp, align 8
  %53 = load i32, i32* %lval, align 4
  %tobool46 = icmp ne i32 %53, 0
  br i1 %tobool46, label %if.then47, label %if.end69

if.then47:                                        ; preds = %cond.end
  %54 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool48 = icmp ne %struct.sv** %54, null
  br i1 %tobool48, label %lor.lhs.false, label %if.then53

lor.lhs.false:                                    ; preds = %if.then47
  %55 = load %struct.sv**, %struct.sv*** %svp, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  %tobool49 = icmp ne %struct.sv* %56, null
  br i1 %tobool49, label %lor.lhs.false50, label %if.then53

lor.lhs.false50:                                  ; preds = %lor.lhs.false
  %57 = load %struct.sv**, %struct.sv*** %svp, align 8
  %58 = load %struct.sv*, %struct.sv** %57, align 8
  %cmp51 = icmp eq %struct.sv* %58, @PL_sv_undef
  br i1 %cmp51, label %if.then53, label %if.end67

if.then53:                                        ; preds = %lor.lhs.false50, %lor.lhs.false, %if.then47
  %59 = load %struct.sv**, %struct.sv*** %mark, align 8
  %60 = load %struct.sv*, %struct.sv** %59, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %60, i32 0, i32 2
  %61 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %61, 2097408
  %cmp56 = icmp eq i32 %and55, 256
  br i1 %cmp56, label %cond.true58, label %cond.false62

cond.true58:                                      ; preds = %if.then53
  %62 = load %struct.sv**, %struct.sv*** %mark, align 8
  %63 = load %struct.sv*, %struct.sv** %62, align 8
  %sv_any59 = getelementptr inbounds %struct.sv, %struct.sv* %63, i32 0, i32 0
  %64 = load i8*, i8** %sv_any59, align 8
  %65 = bitcast i8* %64 to %struct.xpviv*
  %xiv_u60 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %65, i32 0, i32 4
  %xivu_iv61 = bitcast %union._xivu* %xiv_u60 to i64*
  %66 = load i64, i64* %xivu_iv61, align 8
  br label %cond.end64

cond.false62:                                     ; preds = %if.then53
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  %68 = load %struct.sv*, %struct.sv** %67, align 8
  %call63 = call i64 @Perl_sv_2iv_flags(%struct.sv* %68, i32 2)
  br label %cond.end64

cond.end64:                                       ; preds = %cond.false62, %cond.true58
  %cond65 = phi i64 [ %66, %cond.true58 ], [ %call63, %cond.false62 ]
  %call66 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %cond65)
  store %struct.op* %call66, %struct.op** %retval, align 8
  br label %return

if.end67:                                         ; preds = %lor.lhs.false50
  %69 = load %struct.sv**, %struct.sv*** %mark, align 8
  %70 = load %struct.sv*, %struct.sv** %69, align 8
  %call68 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %70, i32 1538)
  %71 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call68, %struct.sv** %71, align 8
  br label %if.end69

if.end69:                                         ; preds = %if.end67, %cond.end
  %72 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool70 = icmp ne %struct.sv** %72, null
  br i1 %tobool70, label %cond.true71, label %cond.false72

cond.true71:                                      ; preds = %if.end69
  %73 = load %struct.sv**, %struct.sv*** %svp, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  br label %cond.end73

cond.false72:                                     ; preds = %if.end69
  br label %cond.end73

cond.end73:                                       ; preds = %cond.false72, %cond.true71
  %cond74 = phi %struct.sv* [ %74, %cond.true71 ], [ @PL_sv_undef, %cond.false72 ]
  %75 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %75, i32 1
  store %struct.sv** %incdec.ptr75, %struct.sv*** %mark, align 8
  store %struct.sv* %cond74, %struct.sv** %incdec.ptr75, align 8
  br label %while.cond34

while.end76:                                      ; preds = %while.cond34
  %76 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags77 = getelementptr inbounds %struct.op, %struct.op* %76, i32 0, i32 5
  %77 = load i8, i8* %op_flags77, align 2
  %conv78 = zext i8 %77 to i32
  %and79 = and i32 %conv78, 3
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %cond.true81, label %cond.false85

cond.true81:                                      ; preds = %while.end76
  %78 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags82 = getelementptr inbounds %struct.op, %struct.op* %78, i32 0, i32 5
  %79 = load i8, i8* %op_flags82, align 2
  %conv83 = zext i8 %79 to i32
  %and84 = and i32 %conv83, 3
  br label %cond.end87

cond.false85:                                     ; preds = %while.end76
  %call86 = call i32 @Perl_block_gimme()
  br label %cond.end87

cond.end87:                                       ; preds = %cond.false85, %cond.true81
  %cond88 = phi i32 [ %and84, %cond.true81 ], [ %call86, %cond.false85 ]
  %cmp89 = icmp ne i32 %cond88, 3
  br i1 %cmp89, label %if.then91, label %if.end101

if.then91:                                        ; preds = %cond.end87
  %80 = load %struct.sv**, %struct.sv*** %sp, align 8
  %81 = load i64, i64* %items, align 8
  %mul92 = mul nsw i64 %81, 2
  %idx.neg = sub i64 0, %mul92
  %add.ptr93 = getelementptr inbounds %struct.sv*, %struct.sv** %80, i64 %idx.neg
  store %struct.sv** %add.ptr93, %struct.sv*** %mark, align 8
  %82 = load i64, i64* %items, align 8
  %cmp94 = icmp sgt i64 %82, 0
  br i1 %cmp94, label %cond.true96, label %cond.false97

cond.true96:                                      ; preds = %if.then91
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  %84 = load %struct.sv*, %struct.sv** %83, align 8
  br label %cond.end98

cond.false97:                                     ; preds = %if.then91
  br label %cond.end98

cond.end98:                                       ; preds = %cond.false97, %cond.true96
  %cond99 = phi %struct.sv* [ %84, %cond.true96 ], [ @PL_sv_undef, %cond.false97 ]
  %85 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr100 = getelementptr inbounds %struct.sv*, %struct.sv** %85, i32 1
  store %struct.sv** %incdec.ptr100, %struct.sv*** %mark, align 8
  store %struct.sv* %cond99, %struct.sv** %incdec.ptr100, align 8
  %86 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %86, %struct.sv*** %sp, align 8
  br label %if.end101

if.end101:                                        ; preds = %cond.end98, %cond.end87
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %87, %struct.sv*** @PL_stack_sp, align 8
  %88 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %88, i32 0, i32 0
  %89 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %89, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end101, %cond.end64
  %90 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %90
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_rkeys() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 2097152
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %entry
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call i32 @Perl_mg_get(%struct.sv* %5)
  %tobool1 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %6 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool1, %land.rhs ]
  %land.ext = zext i1 %6 to i32
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, 2048
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %land.end
  %9 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %9, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %10 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  store %struct.sv* %10, %struct.sv** %sv, align 8
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 2
  %12 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %12, 255
  %cmp = icmp ne i32 %and6, 12
  br i1 %cmp, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %14, 255
  %cmp9 = icmp ne i32 %and8, 11
  br i1 %cmp9, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %15 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags10 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags10, align 4
  %and11 = and i32 %16, 1048576
  %tobool12 = icmp ne i32 %and11, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.lhs.true
  %17 = phi i1 [ true, %land.lhs.true ], [ %tobool12, %lor.rhs ]
  br i1 %17, label %if.then, label %if.end

if.then:                                          ; preds = %lor.end, %land.end
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %idxprom = zext i32 %bf.cast to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom
  %19 = load i8*, i8** %arrayidx, align 8
  %call13 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.47, i64 0, i64 0), i8* %19)
  store %struct.op* %call13, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %lor.end
  %20 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %20, i32 0, i32 5
  %21 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %21 to i32
  %and14 = and i32 %conv, 128
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %land.lhs.true16, label %if.end35

land.lhs.true16:                                  ; preds = %if.end
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %23, 255
  %cmp19 = icmp eq i32 %and18, 11
  br i1 %cmp19, label %if.then21, label %if.end35

if.then21:                                        ; preds = %land.lhs.true16
  %24 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type22 = getelementptr inbounds %struct.op, %struct.op* %24, i32 0, i32 4
  %bf.load23 = load i16, i16* %op_type22, align 8
  %bf.clear24 = and i16 %bf.load23, 511
  %bf.cast25 = zext i16 %bf.clear24 to i32
  %idxprom26 = zext i32 %bf.cast25 to i64
  %arrayidx27 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom26
  %25 = load i8*, i8** %arrayidx27, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next, align 8
  %op_type28 = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 4
  %bf.load29 = load i16, i16* %op_type28, align 8
  %bf.clear30 = and i16 %bf.load29, 511
  %bf.cast31 = zext i16 %bf.clear30 to i32
  %idxprom32 = zext i32 %bf.cast31 to i64
  %arrayidx33 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom32
  %28 = load i8*, i8** %arrayidx33, align 8
  %call34 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.48, i64 0, i64 0), i8* %25, i8* %28)
  store %struct.op* %call34, %struct.op** %retval, align 8
  br label %return

if.end35:                                         ; preds = %land.lhs.true16, %if.end
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %sp, align 8
  store %struct.sv* %29, %struct.sv** %incdec.ptr36, align 8
  %31 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type37 = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load38 = load i16, i16* %op_type37, align 8
  %bf.clear39 = and i16 %bf.load38, 511
  %bf.cast40 = zext i16 %bf.clear39 to i32
  %cmp41 = icmp eq i32 %bf.cast40, 382
  br i1 %cmp41, label %if.then50, label %lor.lhs.false43

lor.lhs.false43:                                  ; preds = %if.end35
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type44 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load45 = load i16, i16* %op_type44, align 8
  %bf.clear46 = and i16 %bf.load45, 511
  %bf.cast47 = zext i16 %bf.clear46 to i32
  %cmp48 = icmp eq i32 %bf.cast47, 383
  br i1 %cmp48, label %if.then50, label %if.else

if.then50:                                        ; preds = %lor.lhs.false43, %if.end35
  %33 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %33, i32 0, i32 2
  %34 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %34, 255
  %cmp53 = icmp eq i32 %and52, 12
  br i1 %cmp53, label %cond.true55, label %cond.false57

cond.true55:                                      ; preds = %if.then50
  %call56 = call %struct.op* @Perl_do_kv()
  br label %cond.end

cond.false57:                                     ; preds = %if.then50
  %call58 = call %struct.op* @Perl_pp_akeys()
  br label %cond.end

cond.end:                                         ; preds = %cond.false57, %cond.true55
  %cond = phi %struct.op* [ %call56, %cond.true55 ], [ %call58, %cond.false57 ]
  store %struct.op* %cond, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %lor.lhs.false43
  %35 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags59 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags59, align 4
  %and60 = and i32 %36, 255
  %cmp61 = icmp eq i32 %and60, 12
  br i1 %cmp61, label %cond.true63, label %cond.false65

cond.true63:                                      ; preds = %if.else
  %call64 = call %struct.op* @Perl_pp_each()
  br label %cond.end67

cond.false65:                                     ; preds = %if.else
  %call66 = call %struct.op* @Perl_pp_aeach()
  br label %cond.end67

cond.end67:                                       ; preds = %cond.false65, %cond.true63
  %cond68 = phi %struct.op* [ %call64, %cond.true63 ], [ %call66, %cond.false65 ]
  store %struct.op* %cond68, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %cond.end67, %cond.end, %if.then21, %if.then
  %37 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_akeys() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %array = alloca %struct.av*, align 8
  %gimme = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %elem = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.av*
  store %struct.av* %4, %struct.av** %array, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %8 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %9 = load %struct.av*, %struct.av** %array, align 8
  %call4 = call i64* @Perl_av_iter_p(%struct.av* %9)
  store i64 0, i64* %call4, align 8
  %10 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %10, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %11 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 3
  %13 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 %13
  %14 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %14, %struct.sv** %targ, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %15 = load %struct.sv*, %struct.sv** %targ, align 8
  %16 = load %struct.av*, %struct.av** %array, align 8
  %call6 = call i64 @S_av_top_index(%struct.av* %16)
  %add = add nsw i64 %call6, 1
  call void @Perl_sv_setiv(%struct.sv* %15, i64 %add)
  br label %do.body7

do.body7:                                         ; preds = %do.body
  br label %do.body8

do.body8:                                         ; preds = %do.body7
  %17 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %18, 4194304
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %do.body8
  br i1 true, label %if.then13, label %if.end

cond.false12:                                     ; preds = %do.body8
  br i1 false, label %if.then13, label %if.end

if.then13:                                        ; preds = %cond.false12, %cond.true11
  %19 = load %struct.sv*, %struct.sv** %targ, align 8
  %call14 = call i32 @Perl_mg_set(%struct.sv* %19)
  br label %if.end

if.end:                                           ; preds = %if.then13, %cond.false12, %cond.true11
  br label %do.end

do.end:                                           ; preds = %if.end
  %20 = load %struct.sv*, %struct.sv** %targ, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %21, i32 1
  store %struct.sv** %incdec.ptr15, %struct.sv*** %sp, align 8
  store %struct.sv* %20, %struct.sv** %incdec.ptr15, align 8
  br label %do.end16

do.end16:                                         ; preds = %do.end
  br label %do.end17

do.end17:                                         ; preds = %do.end16
  br label %if.end63

if.else:                                          ; preds = %cond.end
  %22 = load i32, i32* %gimme, align 4
  %cmp18 = icmp eq i32 %22, 3
  br i1 %cmp18, label %if.then20, label %if.end62

if.then20:                                        ; preds = %if.else
  %23 = load %struct.av*, %struct.av** %array, align 8
  %call21 = call i64 @Perl_av_len(%struct.av* %23)
  store i64 %call21, i64* %n, align 8
  br label %do.body22

do.body22:                                        ; preds = %if.then20
  %24 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %26 = load i64, i64* %n, align 8
  %add23 = add nsw i64 %26, 1
  %cmp24 = icmp slt i64 %sub.ptr.div, %add23
  br i1 %cmp24, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %do.body22
  br i1 true, label %if.then28, label %if.end31

cond.false27:                                     ; preds = %do.body22
  br i1 false, label %if.then28, label %if.end31

if.then28:                                        ; preds = %cond.false27, %cond.true26
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %29 = load i64, i64* %n, align 8
  %add29 = add nsw i64 %29, 1
  %call30 = call %struct.sv** @Perl_stack_grow(%struct.sv** %27, %struct.sv** %28, i64 %add29)
  store %struct.sv** %call30, %struct.sv*** %sp, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then28, %cond.false27, %cond.true26
  br label %do.end32

do.end32:                                         ; preds = %if.end31
  %31 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %31, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp33 = icmp eq i32 %bf.cast, 142
  br i1 %cmp33, label %if.then41, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end32
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type35 = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 4
  %bf.load36 = load i16, i16* %op_type35, align 8
  %bf.clear37 = and i16 %bf.load36, 511
  %bf.cast38 = zext i16 %bf.clear37 to i32
  %cmp39 = icmp eq i32 %bf.cast38, 382
  br i1 %cmp39, label %if.then41, label %if.else46

if.then41:                                        ; preds = %lor.lhs.false, %do.end32
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then41
  %33 = load i64, i64* %i, align 8
  %34 = load i64, i64* %n, align 8
  %cmp42 = icmp sle i64 %33, %34
  br i1 %cmp42, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %call44 = call %struct.sv* @Perl_sv_newmortal()
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %35, i32 1
  store %struct.sv** %incdec.ptr45, %struct.sv*** %sp, align 8
  store %struct.sv* %call44, %struct.sv** %incdec.ptr45, align 8
  %36 = load i64, i64* %i, align 8
  call void @Perl_sv_setiv(%struct.sv* %call44, i64 %36)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %37 = load i64, i64* %i, align 8
  %inc = add nsw i64 %37, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end61

if.else46:                                        ; preds = %lor.lhs.false
  store i64 0, i64* %i, align 8
  br label %for.cond47

for.cond47:                                       ; preds = %for.inc58, %if.else46
  %38 = load i64, i64* %i, align 8
  %39 = load i64, i64* %n, align 8
  %cmp48 = icmp sle i64 %38, %39
  br i1 %cmp48, label %for.body50, label %for.end60

for.body50:                                       ; preds = %for.cond47
  %40 = load %struct.av*, %struct.av** %array, align 8
  %41 = load i64, i64* %i, align 8
  %call51 = call %struct.sv** @Perl_av_fetch(%struct.av* %40, i64 %41, i32 0)
  store %struct.sv** %call51, %struct.sv*** %elem, align 8
  %42 = load %struct.sv**, %struct.sv*** %elem, align 8
  %tobool52 = icmp ne %struct.sv** %42, null
  br i1 %tobool52, label %cond.true53, label %cond.false54

cond.true53:                                      ; preds = %for.body50
  %43 = load %struct.sv**, %struct.sv*** %elem, align 8
  %44 = load %struct.sv*, %struct.sv** %43, align 8
  br label %cond.end55

cond.false54:                                     ; preds = %for.body50
  br label %cond.end55

cond.end55:                                       ; preds = %cond.false54, %cond.true53
  %cond56 = phi %struct.sv* [ %44, %cond.true53 ], [ @PL_sv_undef, %cond.false54 ]
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i32 1
  store %struct.sv** %incdec.ptr57, %struct.sv*** %sp, align 8
  store %struct.sv* %cond56, %struct.sv** %incdec.ptr57, align 8
  br label %for.inc58

for.inc58:                                        ; preds = %cond.end55
  %46 = load i64, i64* %i, align 8
  %inc59 = add nsw i64 %46, 1
  store i64 %inc59, i64* %i, align 8
  br label %for.cond47

for.end60:                                        ; preds = %for.cond47
  br label %if.end61

if.end61:                                         ; preds = %for.end60, %for.end
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.else
  br label %if.end63

if.end63:                                         ; preds = %if.end62, %do.end17
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %47, %struct.sv*** @PL_stack_sp, align 8
  %48 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %48, i32 0, i32 0
  %49 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_each() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %hash = alloca %struct.hv*, align 8
  %entry1 = alloca %struct.he*, align 8
  %gimme = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %val = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.hv*
  store %struct.hv* %4, %struct.hv** %hash, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags2 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags2, align 2
  %conv3 = zext i8 %8 to i32
  %and4 = and i32 %conv3, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and4, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %9 = load %struct.hv*, %struct.hv** %hash, align 8
  %call5 = call %struct.he* @Perl_hv_iternext_flags(%struct.hv* %9, i32 0)
  store %struct.he* %call5, %struct.he** %entry1, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %10 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 2
  br i1 %cmp, label %cond.true7, label %cond.false8

cond.true7:                                       ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false8:                                      ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false8, %cond.true7
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call9 = call %struct.sv** @Perl_stack_grow(%struct.sv** %12, %struct.sv** %13, i64 2)
  store %struct.sv** %call9, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false8, %cond.true7
  br label %do.end

do.end:                                           ; preds = %if.end
  %15 = load %struct.he*, %struct.he** %entry1, align 8
  %tobool10 = icmp ne %struct.he* %15, null
  br i1 %tobool10, label %if.then11, label %if.else

if.then11:                                        ; preds = %do.end
  %16 = load %struct.he*, %struct.he** %entry1, align 8
  %call12 = call %struct.sv* @Perl_hv_iterkeysv(%struct.he* %16)
  store %struct.sv* %call12, %struct.sv** %sv, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr13 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i32 1
  store %struct.sv** %incdec.ptr13, %struct.sv*** %sp, align 8
  store %struct.sv* %17, %struct.sv** %incdec.ptr13, align 8
  %19 = load i32, i32* %gimme, align 4
  %cmp14 = icmp eq i32 %19, 3
  br i1 %cmp14, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.then11
  %20 = load %struct.hv*, %struct.hv** %hash, align 8
  %21 = load %struct.he*, %struct.he** %entry1, align 8
  %call17 = call %struct.sv* @Perl_hv_iterval(%struct.hv* %20, %struct.he* %21)
  store %struct.sv* %call17, %struct.sv** %val, align 8
  %22 = load %struct.sv*, %struct.sv** %val, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr18 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr18, %struct.sv*** %sp, align 8
  store %struct.sv* %22, %struct.sv** %incdec.ptr18, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.then16, %if.then11
  br label %if.end25

if.else:                                          ; preds = %do.end
  %24 = load i32, i32* %gimme, align 4
  %cmp20 = icmp eq i32 %24, 2
  br i1 %cmp20, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.else
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr23 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i32 1
  store %struct.sv** %incdec.ptr23, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr23, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %26, %struct.sv*** @PL_stack_sp, align 8
  %27 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %27, i32 0, i32 0
  %28 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %28, %struct.op** %retval, align 8
  br label %return

if.end24:                                         ; preds = %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.end19
  %29 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %29, %struct.sv*** @PL_stack_sp, align 8
  %30 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next26 = getelementptr inbounds %struct.op, %struct.op* %30, i32 0, i32 0
  %31 = load %struct.op*, %struct.op** %op_next26, align 8
  store %struct.op* %31, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end25, %if.then22
  %32 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_aeach() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %array = alloca %struct.av*, align 8
  %gimme = alloca i32, align 4
  %iterp = alloca i64*, align 8
  %current = alloca i64, align 8
  %element = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  %3 = bitcast %struct.sv* %2 to i8*
  %4 = bitcast i8* %3 to %struct.av*
  store %struct.av* %4, %struct.av** %array, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 5
  %8 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %8 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %9 = load %struct.av*, %struct.av** %array, align 8
  %call4 = call i64* @Perl_av_iter_p(%struct.av* %9)
  store i64* %call4, i64** %iterp, align 8
  %10 = load i64*, i64** %iterp, align 8
  %11 = load i64, i64* %10, align 8
  %inc = add nsw i64 %11, 1
  store i64 %inc, i64* %10, align 8
  store i64 %11, i64* %current, align 8
  %12 = load i64, i64* %current, align 8
  %13 = load %struct.av*, %struct.av** %array, align 8
  %call5 = call i64 @S_av_top_index(%struct.av* %13)
  %cmp = icmp sgt i64 %12, %call5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %14 = load i64*, i64** %iterp, align 8
  store i64 0, i64* %14, align 8
  %15 = load i32, i32* %gimme, align 4
  %cmp7 = icmp eq i32 %15, 2
  br i1 %cmp7, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr10 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 1
  store %struct.sv** %incdec.ptr10, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr10, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %17, %struct.sv*** @PL_stack_sp, align 8
  %18 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %18, i32 0, i32 0
  %19 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %19, %struct.op** %retval, align 8
  br label %return

if.else:                                          ; preds = %if.then
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %20, %struct.sv*** @PL_stack_sp, align 8
  %21 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next11 = getelementptr inbounds %struct.op, %struct.op* %21, i32 0, i32 0
  %22 = load %struct.op*, %struct.op** %op_next11, align 8
  store %struct.op* %22, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.end
  %23 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %24 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp12 = icmp slt i64 %sub.ptr.div, 2
  br i1 %cmp12, label %cond.true14, label %cond.false15

cond.true14:                                      ; preds = %do.body
  br i1 true, label %if.then16, label %if.end18

cond.false15:                                     ; preds = %do.body
  br i1 false, label %if.then16, label %if.end18

if.then16:                                        ; preds = %cond.false15, %cond.true14
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call17 = call %struct.sv** @Perl_stack_grow(%struct.sv** %25, %struct.sv** %26, i64 2)
  store %struct.sv** %call17, %struct.sv*** %sp, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %cond.false15, %cond.true14
  br label %do.end

do.end:                                           ; preds = %if.end18
  %call19 = call %struct.sv* @Perl_sv_newmortal()
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr20 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr20, %struct.sv*** %sp, align 8
  store %struct.sv* %call19, %struct.sv** %incdec.ptr20, align 8
  %29 = load i64, i64* %current, align 8
  call void @Perl_sv_setiv(%struct.sv* %call19, i64 %29)
  %30 = load i32, i32* %gimme, align 4
  %cmp21 = icmp eq i32 %30, 3
  br i1 %cmp21, label %if.then23, label %if.end31

if.then23:                                        ; preds = %do.end
  %31 = load %struct.av*, %struct.av** %array, align 8
  %32 = load i64, i64* %current, align 8
  %call24 = call %struct.sv** @Perl_av_fetch(%struct.av* %31, i64 %32, i32 0)
  store %struct.sv** %call24, %struct.sv*** %element, align 8
  %33 = load %struct.sv**, %struct.sv*** %element, align 8
  %tobool25 = icmp ne %struct.sv** %33, null
  br i1 %tobool25, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %if.then23
  %34 = load %struct.sv**, %struct.sv*** %element, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  br label %cond.end28

cond.false27:                                     ; preds = %if.then23
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.sv* [ %35, %cond.true26 ], [ @PL_sv_undef, %cond.false27 ]
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr30 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i32 1
  store %struct.sv** %incdec.ptr30, %struct.sv*** %sp, align 8
  store %struct.sv* %cond29, %struct.sv** %incdec.ptr30, align 8
  br label %if.end31

if.end31:                                         ; preds = %cond.end28, %do.end
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %37, %struct.sv*** @PL_stack_sp, align 8
  %38 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next32 = getelementptr inbounds %struct.op, %struct.op* %38, i32 0, i32 0
  %39 = load %struct.op*, %struct.op** %op_next32, align 8
  store %struct.op* %39, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end31, %if.else, %if.then9
  %40 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %40
}

declare dso_local i64* @Perl_av_iter_p(%struct.av*) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @S_av_top_index(%struct.av* %av) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  %0 = load %struct.av*, %struct.av** %av.addr, align 8
  %1 = bitcast %struct.av* %0 to %struct.sv*
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %1, i32 0, i32 2
  %2 = load i32, i32* %sv_flags, align 4
  %and = and i32 %2, 8388608
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.av*, %struct.av** %av.addr, align 8
  %4 = bitcast %struct.av* %3 to i8*
  %5 = bitcast i8* %4 to %struct.sv*
  %call = call i32 @Perl_mg_size(%struct.sv* %5)
  %conv = sext i32 %call to i64
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.av*, %struct.av** %av.addr, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %6, i32 0, i32 0
  %7 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %7, i32 0, i32 2
  %8 = load i64, i64* %xav_fill, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %conv, %cond.true ], [ %8, %cond.false ]
  ret i64 %cond
}

declare dso_local i64 @Perl_av_len(%struct.av*) #1

declare dso_local %struct.he* @Perl_hv_iternext_flags(%struct.hv*, i32) #1

declare dso_local %struct.sv* @Perl_hv_iterkeysv(%struct.he*) #1

declare dso_local %struct.sv* @Perl_hv_iterval(%struct.hv*, %struct.he*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_delete() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %discard = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %hv = alloca %struct.hv*, align 8
  %hvtype = alloca i32, align 4
  %sv = alloca %struct.sv*, align 8
  %sv43 = alloca %struct.sv*, align 8
  %keysv = alloca %struct.sv*, align 8
  %hv86 = alloca %struct.hv*, align 8
  %sv88 = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call %struct.op* @S_do_delete_local()
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %4 to i32
  %and2 = and i32 %conv1, 3
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags4 = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags4, align 2
  %conv5 = zext i8 %6 to i32
  %and6 = and i32 %conv5, 3
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call7 = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and6, %cond.true ], [ %call7, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %7 = load i32, i32* %gimme, align 4
  %cmp = icmp eq i32 %7, 1
  %8 = zext i1 %cmp to i64
  %cond9 = select i1 %cmp, i32 4, i32 0
  store i32 %cond9, i32* %discard, align 4
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private10 = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 6
  %10 = load i8, i8* %op_private10, align 1
  %conv11 = zext i8 %10 to i32
  %and12 = and i32 %conv11, 64
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %if.then14, label %if.else84

if.then14:                                        ; preds = %cond.end
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %12 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %12, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %13 = load i32, i32* %12, align 4
  %idx.ext = sext i32 %13 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %11, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  %15 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %14 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv15 = trunc i64 %sub.ptr.div to i32
  store i32 %conv15, i32* %origmark, align 4
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %16, i32 -1
  store %struct.sv** %incdec.ptr16, %struct.sv*** %sp, align 8
  %17 = load %struct.sv*, %struct.sv** %16, align 8
  %18 = bitcast %struct.sv* %17 to i8*
  %19 = bitcast i8* %18 to %struct.hv*
  store %struct.hv* %19, %struct.hv** %hv, align 8
  %20 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags, align 4
  %and17 = and i32 %21, 255
  store i32 %and17, i32* %hvtype, align 4
  %22 = load i32, i32* %hvtype, align 4
  %cmp18 = icmp eq i32 %22, 12
  br i1 %cmp18, label %if.then20, label %if.else

if.then20:                                        ; preds = %if.then14
  br label %while.cond

while.cond:                                       ; preds = %cond.end28, %if.then20
  %23 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr21 = getelementptr inbounds %struct.sv*, %struct.sv** %23, i32 1
  store %struct.sv** %incdec.ptr21, %struct.sv*** %mark, align 8
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp22 = icmp ule %struct.sv** %incdec.ptr21, %24
  br i1 %cmp22, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %25 = load %struct.hv*, %struct.hv** %hv, align 8
  %26 = load %struct.sv**, %struct.sv*** %mark, align 8
  %27 = load %struct.sv*, %struct.sv** %26, align 8
  %28 = load i32, i32* %discard, align 4
  %or = or i32 %28, 64
  %call24 = call i8* @Perl_hv_common(%struct.hv* %25, %struct.sv* %27, i8* null, i64 0, i32 0, i32 %or, %struct.sv* null, i32 0)
  %29 = bitcast i8* %call24 to %struct.sv*
  store %struct.sv* %29, %struct.sv** %sv, align 8
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool25 = icmp ne %struct.sv* %30, null
  br i1 %tobool25, label %cond.true26, label %cond.false27

cond.true26:                                      ; preds = %while.body
  %31 = load %struct.sv*, %struct.sv** %sv, align 8
  br label %cond.end28

cond.false27:                                     ; preds = %while.body
  br label %cond.end28

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.sv* [ %31, %cond.true26 ], [ @PL_sv_undef, %cond.false27 ]
  %32 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond29, %struct.sv** %32, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end64

if.else:                                          ; preds = %if.then14
  %33 = load i32, i32* %hvtype, align 4
  %cmp30 = icmp eq i32 %33, 11
  br i1 %cmp30, label %if.then32, label %if.else61

if.then32:                                        ; preds = %if.else
  %34 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags33 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 5
  %35 = load i8, i8* %op_flags33, align 2
  %conv34 = zext i8 %35 to i32
  %and35 = and i32 %conv34, 128
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %if.then37, label %if.end60

if.then37:                                        ; preds = %if.then32
  br label %while.cond38

while.cond38:                                     ; preds = %cond.end57, %if.then37
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr39 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i32 1
  store %struct.sv** %incdec.ptr39, %struct.sv*** %mark, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp40 = icmp ule %struct.sv** %incdec.ptr39, %37
  br i1 %cmp40, label %while.body42, label %while.end59

while.body42:                                     ; preds = %while.cond38
  %38 = load %struct.hv*, %struct.hv** %hv, align 8
  %39 = bitcast %struct.hv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.av*
  %41 = load %struct.sv**, %struct.sv*** %mark, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_flags44 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags44, align 4
  %and45 = and i32 %43, 2097408
  %cmp46 = icmp eq i32 %and45, 256
  br i1 %cmp46, label %cond.true48, label %cond.false49

cond.true48:                                      ; preds = %while.body42
  %44 = load %struct.sv**, %struct.sv*** %mark, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any, align 8
  %47 = bitcast i8* %46 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %47, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %48 = load i64, i64* %xivu_iv, align 8
  br label %cond.end51

cond.false49:                                     ; preds = %while.body42
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %call50 = call i64 @Perl_sv_2iv_flags(%struct.sv* %50, i32 2)
  br label %cond.end51

cond.end51:                                       ; preds = %cond.false49, %cond.true48
  %cond52 = phi i64 [ %48, %cond.true48 ], [ %call50, %cond.false49 ]
  %51 = load i32, i32* %discard, align 4
  %call53 = call %struct.sv* @Perl_av_delete(%struct.av* %40, i64 %cond52, i32 %51)
  store %struct.sv* %call53, %struct.sv** %sv43, align 8
  %52 = load %struct.sv*, %struct.sv** %sv43, align 8
  %tobool54 = icmp ne %struct.sv* %52, null
  br i1 %tobool54, label %cond.true55, label %cond.false56

cond.true55:                                      ; preds = %cond.end51
  %53 = load %struct.sv*, %struct.sv** %sv43, align 8
  br label %cond.end57

cond.false56:                                     ; preds = %cond.end51
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi %struct.sv* [ %53, %cond.true55 ], [ @PL_sv_undef, %cond.false56 ]
  %54 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond58, %struct.sv** %54, align 8
  br label %while.cond38

while.end59:                                      ; preds = %while.cond38
  br label %if.end60

if.end60:                                         ; preds = %while.end59, %if.then32
  br label %if.end63

if.else61:                                        ; preds = %if.else
  %call62 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0))
  store %struct.op* %call62, %struct.op** %retval, align 8
  br label %return

if.end63:                                         ; preds = %if.end60
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %while.end
  %55 = load i32, i32* %discard, align 4
  %tobool65 = icmp ne i32 %55, 0
  br i1 %tobool65, label %if.then66, label %if.else69

if.then66:                                        ; preds = %if.end64
  %56 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %57 = load i32, i32* %origmark, align 4
  %idx.ext67 = sext i32 %57 to i64
  %add.ptr68 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i64 %idx.ext67
  store %struct.sv** %add.ptr68, %struct.sv*** %sp, align 8
  br label %if.end83

if.else69:                                        ; preds = %if.end64
  %58 = load i32, i32* %gimme, align 4
  %cmp70 = icmp eq i32 %58, 2
  br i1 %cmp70, label %if.then72, label %if.end82

if.then72:                                        ; preds = %if.else69
  %59 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %60 = load i32, i32* %origmark, align 4
  %idx.ext73 = sext i32 %60 to i64
  %add.ptr74 = getelementptr inbounds %struct.sv*, %struct.sv** %59, i64 %idx.ext73
  store %struct.sv** %add.ptr74, %struct.sv*** %mark, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  %62 = load %struct.sv**, %struct.sv*** %mark, align 8
  %cmp75 = icmp ugt %struct.sv** %61, %62
  br i1 %cmp75, label %if.then77, label %if.else79

if.then77:                                        ; preds = %if.then72
  %63 = load %struct.sv**, %struct.sv*** %sp, align 8
  %64 = load %struct.sv*, %struct.sv** %63, align 8
  %65 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr78 = getelementptr inbounds %struct.sv*, %struct.sv** %65, i32 1
  store %struct.sv** %incdec.ptr78, %struct.sv*** %mark, align 8
  store %struct.sv* %64, %struct.sv** %incdec.ptr78, align 8
  br label %if.end81

if.else79:                                        ; preds = %if.then72
  %66 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr80 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr80, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr80, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.else79, %if.then77
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %67, %struct.sv*** %sp, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.else69
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then66
  br label %if.end134

if.else84:                                        ; preds = %cond.end
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %68, i32 -1
  store %struct.sv** %incdec.ptr85, %struct.sv*** %sp, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  store %struct.sv* %69, %struct.sv** %keysv, align 8
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr87 = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 -1
  store %struct.sv** %incdec.ptr87, %struct.sv*** %sp, align 8
  %71 = load %struct.sv*, %struct.sv** %70, align 8
  %72 = bitcast %struct.sv* %71 to i8*
  %73 = bitcast i8* %72 to %struct.hv*
  store %struct.hv* %73, %struct.hv** %hv86, align 8
  store %struct.sv* null, %struct.sv** %sv88, align 8
  %74 = load %struct.hv*, %struct.hv** %hv86, align 8
  %sv_flags89 = getelementptr inbounds %struct.hv, %struct.hv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags89, align 4
  %and90 = and i32 %75, 255
  %cmp91 = icmp eq i32 %and90, 12
  br i1 %cmp91, label %if.then93, label %if.else96

if.then93:                                        ; preds = %if.else84
  %76 = load %struct.hv*, %struct.hv** %hv86, align 8
  %77 = load %struct.sv*, %struct.sv** %keysv, align 8
  %78 = load i32, i32* %discard, align 4
  %or94 = or i32 %78, 64
  %call95 = call i8* @Perl_hv_common(%struct.hv* %76, %struct.sv* %77, i8* null, i64 0, i32 0, i32 %or94, %struct.sv* null, i32 0)
  %79 = bitcast i8* %call95 to %struct.sv*
  store %struct.sv* %79, %struct.sv** %sv88, align 8
  br label %if.end126

if.else96:                                        ; preds = %if.else84
  %80 = load %struct.hv*, %struct.hv** %hv86, align 8
  %sv_flags97 = getelementptr inbounds %struct.hv, %struct.hv* %80, i32 0, i32 2
  %81 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %81, 255
  %cmp99 = icmp eq i32 %and98, 11
  br i1 %cmp99, label %if.then101, label %if.else123

if.then101:                                       ; preds = %if.else96
  %82 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags102 = getelementptr inbounds %struct.op, %struct.op* %82, i32 0, i32 5
  %83 = load i8, i8* %op_flags102, align 2
  %conv103 = zext i8 %83 to i32
  %and104 = and i32 %conv103, 128
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then106, label %if.else120

if.then106:                                       ; preds = %if.then101
  %84 = load %struct.hv*, %struct.hv** %hv86, align 8
  %85 = bitcast %struct.hv* %84 to i8*
  %86 = bitcast i8* %85 to %struct.av*
  %87 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_flags107 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags107, align 4
  %and108 = and i32 %88, 2097408
  %cmp109 = icmp eq i32 %and108, 256
  br i1 %cmp109, label %cond.true111, label %cond.false115

cond.true111:                                     ; preds = %if.then106
  %89 = load %struct.sv*, %struct.sv** %keysv, align 8
  %sv_any112 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any112, align 8
  %91 = bitcast i8* %90 to %struct.xpviv*
  %xiv_u113 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %91, i32 0, i32 4
  %xivu_iv114 = bitcast %union._xivu* %xiv_u113 to i64*
  %92 = load i64, i64* %xivu_iv114, align 8
  br label %cond.end117

cond.false115:                                    ; preds = %if.then106
  %93 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call116 = call i64 @Perl_sv_2iv_flags(%struct.sv* %93, i32 2)
  br label %cond.end117

cond.end117:                                      ; preds = %cond.false115, %cond.true111
  %cond118 = phi i64 [ %92, %cond.true111 ], [ %call116, %cond.false115 ]
  %94 = load i32, i32* %discard, align 4
  %call119 = call %struct.sv* @Perl_av_delete(%struct.av* %86, i64 %cond118, i32 %94)
  store %struct.sv* %call119, %struct.sv** %sv88, align 8
  br label %if.end122

if.else120:                                       ; preds = %if.then101
  %call121 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.50, i64 0, i64 0))
  store %struct.op* %call121, %struct.op** %retval, align 8
  br label %return

if.end122:                                        ; preds = %cond.end117
  br label %if.end125

if.else123:                                       ; preds = %if.else96
  %call124 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0))
  store %struct.op* %call124, %struct.op** %retval, align 8
  br label %return

if.end125:                                        ; preds = %if.end122
  br label %if.end126

if.end126:                                        ; preds = %if.end125, %if.then93
  %95 = load %struct.sv*, %struct.sv** %sv88, align 8
  %tobool127 = icmp ne %struct.sv* %95, null
  br i1 %tobool127, label %if.end129, label %if.then128

if.then128:                                       ; preds = %if.end126
  store %struct.sv* @PL_sv_undef, %struct.sv** %sv88, align 8
  br label %if.end129

if.end129:                                        ; preds = %if.then128, %if.end126
  %96 = load i32, i32* %discard, align 4
  %tobool130 = icmp ne i32 %96, 0
  br i1 %tobool130, label %if.end133, label %if.then131

if.then131:                                       ; preds = %if.end129
  %97 = load %struct.sv*, %struct.sv** %sv88, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr132 = getelementptr inbounds %struct.sv*, %struct.sv** %98, i32 1
  store %struct.sv** %incdec.ptr132, %struct.sv*** %sp, align 8
  store %struct.sv* %97, %struct.sv** %incdec.ptr132, align 8
  br label %if.end133

if.end133:                                        ; preds = %if.then131, %if.end129
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end83
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %99, %struct.sv*** @PL_stack_sp, align 8
  %100 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %100, i32 0, i32 0
  %101 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %101, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end134, %if.else123, %if.else120, %if.else61, %if.then
  %102 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %102
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.op* @S_do_delete_local() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %gimme = alloca i32, align 4
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %sliced = alloca i8, align 1
  %unsliced_keysv = alloca %struct.sv**, align 8
  %osv = alloca %struct.sv*, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %tied = alloca i8, align 1
  %can_preserve = alloca i8, align 1
  %type = alloca i32, align 4
  %end = alloca %struct.sv**, align 8
  %hv = alloca %struct.hv*, align 8
  %keysv = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %preeminent = alloca i8, align 1
  %he = alloca %struct.he*, align 8
  %av = alloca %struct.av*, align 8
  %idx = alloca i64, align 8
  %sv122 = alloca %struct.sv*, align 8
  %preeminent123 = alloca i8, align 1
  %svp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %3, i32 0, i32 5
  %4 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %4 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %gimme, align 4
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 6
  %6 = load i8, i8* %op_private, align 1
  %conv4 = zext i8 %6 to i32
  %and5 = and i32 %conv4, 64
  %tobool6 = icmp ne i32 %and5, 0
  %lnot = xor i1 %tobool6, true
  %lnot7 = xor i1 %lnot, true
  %frombool = zext i1 %lnot7 to i8
  store i8 %frombool, i8* %sliced, align 1
  %7 = load i8, i8* %sliced, align 1
  %tobool8 = trunc i8 %7 to i1
  br i1 %tobool8, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %cond.end
  br label %cond.end12

cond.false11:                                     ; preds = %cond.end
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.sv** [ null, %cond.true10 ], [ %8, %cond.false11 ]
  store %struct.sv** %cond13, %struct.sv*** %unsliced_keysv, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr14 = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 -1
  store %struct.sv** %incdec.ptr14, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %osv, align 8
  %11 = load i8, i8* %sliced, align 1
  %tobool15 = trunc i8 %11 to i1
  br i1 %tobool15, label %cond.true17, label %cond.false19

cond.true17:                                      ; preds = %cond.end12
  %12 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %13 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr18 = getelementptr inbounds i32, i32* %13, i32 -1
  store i32* %incdec.ptr18, i32** @PL_markstack_ptr, align 8
  %14 = load i32, i32* %13, align 4
  %idx.ext = sext i32 %14 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i64 %idx.ext
  br label %cond.end21

cond.false19:                                     ; preds = %cond.end12
  %15 = load %struct.sv**, %struct.sv*** %unsliced_keysv, align 8
  %add.ptr20 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i64 -1
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false19, %cond.true17
  %cond22 = phi %struct.sv** [ %add.ptr, %cond.true17 ], [ %add.ptr20, %cond.false19 ]
  store %struct.sv** %cond22, %struct.sv*** %mark, align 8
  %16 = load %struct.sv**, %struct.sv*** %mark, align 8
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %16 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv23 = trunc i64 %sub.ptr.div to i32
  store i32 %conv23, i32* %origmark, align 4
  %18 = load %struct.sv*, %struct.sv** %osv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and24 = and i32 %19, 8388608
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end21
  %20 = load %struct.sv*, %struct.sv** %osv, align 8
  %call26 = call %struct.magic* @Perl_mg_find(%struct.sv* %20, i32 80)
  %tobool27 = icmp ne %struct.magic* %call26, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end21
  %21 = phi i1 [ false, %cond.end21 ], [ %tobool27, %land.rhs ]
  %frombool28 = zext i1 %21 to i8
  store i8 %frombool28, i8* %tied, align 1
  %22 = load %struct.sv*, %struct.sv** %osv, align 8
  %sv_flags29 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags29, align 4
  %and30 = and i32 %23, 8388608
  %tobool31 = icmp ne i32 %and30, 0
  br i1 %tobool31, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %land.end
  %24 = load %struct.sv*, %struct.sv** %osv, align 8
  %call32 = call %struct.magic* @Perl_mg_find(%struct.sv* %24, i32 80)
  store %struct.magic* %call32, %struct.magic** %mg, align 8
  %tobool33 = icmp ne %struct.magic* %call32, null
  br i1 %tobool33, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %25 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %25, i32 0, i32 6
  %26 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool34 = icmp ne %struct.sv* %26, null
  br i1 %tobool34, label %cond.true35, label %cond.false37

cond.true35:                                      ; preds = %lor.rhs
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj36 = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 6
  %28 = load %struct.sv*, %struct.sv** %mg_obj36, align 8
  br label %cond.end40

cond.false37:                                     ; preds = %lor.rhs
  %29 = load %struct.sv*, %struct.sv** %osv, align 8
  %30 = bitcast %struct.sv* %29 to i8*
  %31 = bitcast i8* %30 to %struct.sv*
  %call38 = call %struct.sv* @Perl_newRV(%struct.sv* %31)
  %call39 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call38)
  br label %cond.end40

cond.end40:                                       ; preds = %cond.false37, %cond.true35
  %cond41 = phi %struct.sv* [ %28, %cond.true35 ], [ %call39, %cond.false37 ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond41, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %32 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %32, i32 0, i32 0
  %33 = load i8*, i8** %sv_any, align 8
  %34 = bitcast i8* %33 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %34, i32 0, i32 0
  %35 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %35, %struct.hv** %stash, align 8
  %tobool42 = icmp ne %struct.hv* %35, null
  br i1 %tobool42, label %land.lhs.true, label %land.end48

land.lhs.true:                                    ; preds = %cond.end40
  %36 = load %struct.hv*, %struct.hv** %stash, align 8
  %call43 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool44 = icmp ne %struct.gv* %call43, null
  br i1 %tobool44, label %land.rhs45, label %land.end48

land.rhs45:                                       ; preds = %land.lhs.true
  %37 = load %struct.hv*, %struct.hv** %stash, align 8
  %call46 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %37, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool47 = icmp ne %struct.gv* %call46, null
  br label %land.end48

land.end48:                                       ; preds = %land.rhs45, %land.lhs.true, %cond.end40
  %38 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end40 ], [ %tobool47, %land.rhs45 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end48, %lor.lhs.false, %land.end
  %39 = phi i1 [ true, %lor.lhs.false ], [ true, %land.end ], [ %38, %land.end48 ]
  %frombool49 = zext i1 %39 to i8
  store i8 %frombool49, i8* %can_preserve, align 1
  %40 = load %struct.sv*, %struct.sv** %osv, align 8
  %sv_flags50 = getelementptr inbounds %struct.sv, %struct.sv* %40, i32 0, i32 2
  %41 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %41, 255
  store i32 %and51, i32* %type, align 4
  %42 = load i8, i8* %sliced, align 1
  %tobool52 = trunc i8 %42 to i1
  br i1 %tobool52, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %lor.end
  %43 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %cond.end56

cond.false55:                                     ; preds = %lor.end
  %44 = load %struct.sv**, %struct.sv*** %unsliced_keysv, align 8
  br label %cond.end56

cond.end56:                                       ; preds = %cond.false55, %cond.true54
  %cond57 = phi %struct.sv** [ %43, %cond.true54 ], [ %44, %cond.false55 ]
  store %struct.sv** %cond57, %struct.sv*** %end, align 8
  %45 = load i32, i32* %type, align 4
  %cmp = icmp eq i32 %45, 12
  br i1 %cmp, label %if.then, label %if.else98

if.then:                                          ; preds = %cond.end56
  %46 = load %struct.sv*, %struct.sv** %osv, align 8
  %47 = bitcast %struct.sv* %46 to i8*
  %48 = bitcast i8* %47 to %struct.hv*
  store %struct.hv* %48, %struct.hv** %hv, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end97, %if.then
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr59 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i32 1
  store %struct.sv** %incdec.ptr59, %struct.sv*** %mark, align 8
  %50 = load %struct.sv**, %struct.sv*** %end, align 8
  %cmp60 = icmp ule %struct.sv** %incdec.ptr59, %50
  br i1 %cmp60, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %51 = load %struct.sv**, %struct.sv*** %mark, align 8
  %52 = load %struct.sv*, %struct.sv** %51, align 8
  store %struct.sv* %52, %struct.sv** %keysv, align 8
  store %struct.sv* null, %struct.sv** %sv, align 8
  store i8 1, i8* %preeminent, align 1
  %53 = load i8, i8* %can_preserve, align 1
  %tobool62 = trunc i8 %53 to i1
  br i1 %tobool62, label %if.then63, label %if.end

if.then63:                                        ; preds = %while.body
  %54 = load %struct.hv*, %struct.hv** %hv, align 8
  %55 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call64 = call i8* @Perl_hv_common(%struct.hv* %54, %struct.sv* %55, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool65 = icmp ne i8* %call64, null
  %56 = zext i1 %tobool65 to i64
  %cond66 = select i1 %tobool65, i32 1, i32 0
  %tobool67 = icmp ne i32 %cond66, 0
  %frombool68 = zext i1 %tobool67 to i8
  store i8 %frombool68, i8* %preeminent, align 1
  br label %if.end

if.end:                                           ; preds = %if.then63, %while.body
  %57 = load i8, i8* %tied, align 1
  %tobool69 = trunc i8 %57 to i1
  br i1 %tobool69, label %if.then70, label %if.else75

if.then70:                                        ; preds = %if.end
  %58 = load %struct.hv*, %struct.hv** %hv, align 8
  %59 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call71 = call i8* @Perl_hv_common(%struct.hv* %58, %struct.sv* %59, i8* null, i64 0, i32 0, i32 16, %struct.sv* null, i32 0)
  %60 = bitcast i8* %call71 to %struct.he*
  store %struct.he* %60, %struct.he** %he, align 8
  %61 = load %struct.he*, %struct.he** %he, align 8
  %tobool72 = icmp ne %struct.he* %61, null
  br i1 %tobool72, label %if.then73, label %if.else

if.then73:                                        ; preds = %if.then70
  %62 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %62, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  %63 = load %struct.sv*, %struct.sv** %hent_val, align 8
  store %struct.sv* %63, %struct.sv** %sv, align 8
  br label %if.end74

if.else:                                          ; preds = %if.then70
  store i8 0, i8* %preeminent, align 1
  br label %if.end74

if.end74:                                         ; preds = %if.else, %if.then73
  br label %if.end83

if.else75:                                        ; preds = %if.end
  %64 = load %struct.hv*, %struct.hv** %hv, align 8
  %65 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call76 = call i8* @Perl_hv_common(%struct.hv* %64, %struct.sv* %65, i8* null, i64 0, i32 0, i32 64, %struct.sv* null, i32 0)
  %66 = bitcast i8* %call76 to %struct.sv*
  store %struct.sv* %66, %struct.sv** %sv, align 8
  %67 = load i8, i8* %preeminent, align 1
  %tobool77 = trunc i8 %67 to i1
  br i1 %tobool77, label %if.then78, label %if.end82

if.then78:                                        ; preds = %if.else75
  br label %do.body

do.body:                                          ; preds = %if.then78
  %68 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool79 = icmp ne %struct.sv* %68, null
  br i1 %tobool79, label %if.then80, label %if.end81

if.then80:                                        ; preds = %do.body
  %69 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 1
  %70 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %70, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end81
  br label %if.end82

if.end82:                                         ; preds = %do.end, %if.else75
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.end74
  %71 = load i8, i8* %preeminent, align 1
  %tobool84 = trunc i8 %71 to i1
  br i1 %tobool84, label %if.then85, label %if.else96

if.then85:                                        ; preds = %if.end83
  %72 = load %struct.sv*, %struct.sv** %sv, align 8
  %tobool86 = icmp ne %struct.sv* %72, null
  br i1 %tobool86, label %if.end89, label %if.then87

if.then87:                                        ; preds = %if.then85
  %73 = load %struct.sv*, %struct.sv** %keysv, align 8
  %74 = bitcast %struct.sv* %73 to i8*
  %call88 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %74)
  store %struct.op* %call88, %struct.op** %retval, align 8
  br label %return

if.end89:                                         ; preds = %if.then85
  %75 = load %struct.hv*, %struct.hv** %hv, align 8
  %76 = load %struct.sv*, %struct.sv** %keysv, align 8
  call void @Perl_save_helem_flags(%struct.hv* %75, %struct.sv* %76, %struct.sv** %sv, i32 2)
  %77 = load i8, i8* %tied, align 1
  %tobool90 = trunc i8 %77 to i1
  br i1 %tobool90, label %if.then91, label %if.else94

if.then91:                                        ; preds = %if.end89
  %78 = load %struct.sv*, %struct.sv** %sv, align 8
  %call92 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %78, i32 1538)
  %79 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call92, %struct.sv** %79, align 8
  %80 = load %struct.sv*, %struct.sv** %sv, align 8
  %call93 = call i32 @Perl_mg_clear(%struct.sv* %80)
  br label %if.end95

if.else94:                                        ; preds = %if.end89
  %81 = load %struct.sv*, %struct.sv** %sv, align 8
  %82 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %81, %struct.sv** %82, align 8
  br label %if.end95

if.end95:                                         ; preds = %if.else94, %if.then91
  br label %if.end97

if.else96:                                        ; preds = %if.end83
  %83 = load %struct.hv*, %struct.hv** %hv, align 8
  %84 = bitcast %struct.hv* %83 to i8*
  %85 = bitcast i8* %84 to %struct.hv*
  %86 = load %struct.sv*, %struct.sv** %keysv, align 8
  call void @Perl_save_hdelete(%struct.hv* %85, %struct.sv* %86)
  %87 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %87, align 8
  br label %if.end97

if.end97:                                         ; preds = %if.else96, %if.end95
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end166

if.else98:                                        ; preds = %cond.end56
  %88 = load i32, i32* %type, align 4
  %cmp99 = icmp eq i32 %88, 11
  br i1 %cmp99, label %if.then101, label %if.else163

if.then101:                                       ; preds = %if.else98
  %89 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags102 = getelementptr inbounds %struct.op, %struct.op* %89, i32 0, i32 5
  %90 = load i8, i8* %op_flags102, align 2
  %conv103 = zext i8 %90 to i32
  %and104 = and i32 %conv103, 128
  %tobool105 = icmp ne i32 %and104, 0
  br i1 %tobool105, label %if.then106, label %if.else160

if.then106:                                       ; preds = %if.then101
  %91 = load %struct.sv*, %struct.sv** %osv, align 8
  %92 = bitcast %struct.sv* %91 to i8*
  %93 = bitcast i8* %92 to %struct.av*
  store %struct.av* %93, %struct.av** %av, align 8
  br label %while.cond107

while.cond107:                                    ; preds = %if.end158, %if.then106
  %94 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr108 = getelementptr inbounds %struct.sv*, %struct.sv** %94, i32 1
  store %struct.sv** %incdec.ptr108, %struct.sv*** %mark, align 8
  %95 = load %struct.sv**, %struct.sv*** %end, align 8
  %cmp109 = icmp ule %struct.sv** %incdec.ptr108, %95
  br i1 %cmp109, label %while.body111, label %while.end159

while.body111:                                    ; preds = %while.cond107
  %96 = load %struct.sv**, %struct.sv*** %mark, align 8
  %97 = load %struct.sv*, %struct.sv** %96, align 8
  %sv_flags112 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 2
  %98 = load i32, i32* %sv_flags112, align 4
  %and113 = and i32 %98, 2097408
  %cmp114 = icmp eq i32 %and113, 256
  br i1 %cmp114, label %cond.true116, label %cond.false118

cond.true116:                                     ; preds = %while.body111
  %99 = load %struct.sv**, %struct.sv*** %mark, align 8
  %100 = load %struct.sv*, %struct.sv** %99, align 8
  %sv_any117 = getelementptr inbounds %struct.sv, %struct.sv* %100, i32 0, i32 0
  %101 = load i8*, i8** %sv_any117, align 8
  %102 = bitcast i8* %101 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %102, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %103 = load i64, i64* %xivu_iv, align 8
  br label %cond.end120

cond.false118:                                    ; preds = %while.body111
  %104 = load %struct.sv**, %struct.sv*** %mark, align 8
  %105 = load %struct.sv*, %struct.sv** %104, align 8
  %call119 = call i64 @Perl_sv_2iv_flags(%struct.sv* %105, i32 2)
  br label %cond.end120

cond.end120:                                      ; preds = %cond.false118, %cond.true116
  %cond121 = phi i64 [ %103, %cond.true116 ], [ %call119, %cond.false118 ]
  store i64 %cond121, i64* %idx, align 8
  store %struct.sv* null, %struct.sv** %sv122, align 8
  store i8 1, i8* %preeminent123, align 1
  %106 = load i8, i8* %can_preserve, align 1
  %tobool124 = trunc i8 %106 to i1
  br i1 %tobool124, label %if.then125, label %if.end128

if.then125:                                       ; preds = %cond.end120
  %107 = load %struct.av*, %struct.av** %av, align 8
  %108 = load i64, i64* %idx, align 8
  %call126 = call zeroext i1 @Perl_av_exists(%struct.av* %107, i64 %108)
  %frombool127 = zext i1 %call126 to i8
  store i8 %frombool127, i8* %preeminent123, align 1
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %cond.end120
  %109 = load i8, i8* %tied, align 1
  %tobool129 = trunc i8 %109 to i1
  br i1 %tobool129, label %if.then130, label %if.else136

if.then130:                                       ; preds = %if.end128
  %110 = load %struct.av*, %struct.av** %av, align 8
  %111 = load i64, i64* %idx, align 8
  %call131 = call %struct.sv** @Perl_av_fetch(%struct.av* %110, i64 %111, i32 1)
  store %struct.sv** %call131, %struct.sv*** %svp, align 8
  %112 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool132 = icmp ne %struct.sv** %112, null
  br i1 %tobool132, label %if.then133, label %if.else134

if.then133:                                       ; preds = %if.then130
  %113 = load %struct.sv**, %struct.sv*** %svp, align 8
  %114 = load %struct.sv*, %struct.sv** %113, align 8
  store %struct.sv* %114, %struct.sv** %sv122, align 8
  br label %if.end135

if.else134:                                       ; preds = %if.then130
  store i8 0, i8* %preeminent123, align 1
  br label %if.end135

if.end135:                                        ; preds = %if.else134, %if.then133
  br label %if.end148

if.else136:                                       ; preds = %if.end128
  %115 = load %struct.av*, %struct.av** %av, align 8
  %116 = load i64, i64* %idx, align 8
  %call137 = call %struct.sv* @Perl_av_delete(%struct.av* %115, i64 %116, i32 0)
  store %struct.sv* %call137, %struct.sv** %sv122, align 8
  %117 = load i8, i8* %preeminent123, align 1
  %tobool138 = trunc i8 %117 to i1
  br i1 %tobool138, label %if.then139, label %if.end147

if.then139:                                       ; preds = %if.else136
  br label %do.body140

do.body140:                                       ; preds = %if.then139
  %118 = load %struct.sv*, %struct.sv** %sv122, align 8
  %tobool141 = icmp ne %struct.sv* %118, null
  br i1 %tobool141, label %if.then142, label %if.end145

if.then142:                                       ; preds = %do.body140
  %119 = load %struct.sv*, %struct.sv** %sv122, align 8
  %sv_refcnt143 = getelementptr inbounds %struct.sv, %struct.sv* %119, i32 0, i32 1
  %120 = load i32, i32* %sv_refcnt143, align 8
  %inc144 = add i32 %120, 1
  store i32 %inc144, i32* %sv_refcnt143, align 8
  br label %if.end145

if.end145:                                        ; preds = %if.then142, %do.body140
  br label %do.end146

do.end146:                                        ; preds = %if.end145
  br label %if.end147

if.end147:                                        ; preds = %do.end146, %if.else136
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.end135
  %121 = load i8, i8* %preeminent123, align 1
  %tobool149 = trunc i8 %121 to i1
  br i1 %tobool149, label %if.then150, label %if.else157

if.then150:                                       ; preds = %if.end148
  %122 = load %struct.av*, %struct.av** %av, align 8
  %123 = load i64, i64* %idx, align 8
  call void @Perl_save_aelem_flags(%struct.av* %122, i64 %123, %struct.sv** %sv122, i32 2)
  %124 = load i8, i8* %tied, align 1
  %tobool151 = trunc i8 %124 to i1
  br i1 %tobool151, label %if.then152, label %if.else155

if.then152:                                       ; preds = %if.then150
  %125 = load %struct.sv*, %struct.sv** %sv122, align 8
  %call153 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %125, i32 1538)
  %126 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call153, %struct.sv** %126, align 8
  %127 = load %struct.sv*, %struct.sv** %sv122, align 8
  %call154 = call i32 @Perl_mg_clear(%struct.sv* %127)
  br label %if.end156

if.else155:                                       ; preds = %if.then150
  %128 = load %struct.sv*, %struct.sv** %sv122, align 8
  %129 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %128, %struct.sv** %129, align 8
  br label %if.end156

if.end156:                                        ; preds = %if.else155, %if.then152
  br label %if.end158

if.else157:                                       ; preds = %if.end148
  %130 = load %struct.av*, %struct.av** %av, align 8
  %131 = bitcast %struct.av* %130 to i8*
  %132 = bitcast i8* %131 to %struct.av*
  %133 = load i64, i64* %idx, align 8
  call void @Perl_save_adelete(%struct.av* %132, i64 %133)
  %134 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %134, align 8
  br label %if.end158

if.end158:                                        ; preds = %if.else157, %if.end156
  br label %while.cond107

while.end159:                                     ; preds = %while.cond107
  br label %if.end162

if.else160:                                       ; preds = %if.then101
  %call161 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.50, i64 0, i64 0))
  store %struct.op* %call161, %struct.op** %retval, align 8
  br label %return

if.end162:                                        ; preds = %while.end159
  br label %if.end165

if.else163:                                       ; preds = %if.else98
  %call164 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0))
  store %struct.op* %call164, %struct.op** %retval, align 8
  br label %return

if.end165:                                        ; preds = %if.end162
  br label %if.end166

if.end166:                                        ; preds = %if.end165, %while.end
  %135 = load i8, i8* %sliced, align 1
  %tobool167 = trunc i8 %135 to i1
  br i1 %tobool167, label %if.then168, label %if.else189

if.then168:                                       ; preds = %if.end166
  %136 = load i32, i32* %gimme, align 4
  %cmp169 = icmp eq i32 %136, 1
  br i1 %cmp169, label %if.then171, label %if.else174

if.then171:                                       ; preds = %if.then168
  %137 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %138 = load i32, i32* %origmark, align 4
  %idx.ext172 = sext i32 %138 to i64
  %add.ptr173 = getelementptr inbounds %struct.sv*, %struct.sv** %137, i64 %idx.ext172
  store %struct.sv** %add.ptr173, %struct.sv*** %sp, align 8
  br label %if.end188

if.else174:                                       ; preds = %if.then168
  %139 = load i32, i32* %gimme, align 4
  %cmp175 = icmp eq i32 %139, 2
  br i1 %cmp175, label %if.then177, label %if.end187

if.then177:                                       ; preds = %if.else174
  %140 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %141 = load i32, i32* %origmark, align 4
  %idx.ext178 = sext i32 %141 to i64
  %add.ptr179 = getelementptr inbounds %struct.sv*, %struct.sv** %140, i64 %idx.ext178
  store %struct.sv** %add.ptr179, %struct.sv*** %mark, align 8
  %142 = load %struct.sv**, %struct.sv*** %sp, align 8
  %143 = load %struct.sv**, %struct.sv*** %mark, align 8
  %cmp180 = icmp ugt %struct.sv** %142, %143
  br i1 %cmp180, label %if.then182, label %if.else184

if.then182:                                       ; preds = %if.then177
  %144 = load %struct.sv**, %struct.sv*** %sp, align 8
  %145 = load %struct.sv*, %struct.sv** %144, align 8
  %146 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr183 = getelementptr inbounds %struct.sv*, %struct.sv** %146, i32 1
  store %struct.sv** %incdec.ptr183, %struct.sv*** %mark, align 8
  store %struct.sv* %145, %struct.sv** %incdec.ptr183, align 8
  br label %if.end186

if.else184:                                       ; preds = %if.then177
  %147 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr185 = getelementptr inbounds %struct.sv*, %struct.sv** %147, i32 1
  store %struct.sv** %incdec.ptr185, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %incdec.ptr185, align 8
  br label %if.end186

if.end186:                                        ; preds = %if.else184, %if.then182
  %148 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %148, %struct.sv*** %sp, align 8
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.else174
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.then171
  br label %if.end195

if.else189:                                       ; preds = %if.end166
  %149 = load i32, i32* %gimme, align 4
  %cmp190 = icmp ne i32 %149, 1
  br i1 %cmp190, label %if.then192, label %if.end194

if.then192:                                       ; preds = %if.else189
  %150 = load %struct.sv**, %struct.sv*** %unsliced_keysv, align 8
  %151 = load %struct.sv*, %struct.sv** %150, align 8
  %152 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr193 = getelementptr inbounds %struct.sv*, %struct.sv** %152, i32 1
  store %struct.sv** %incdec.ptr193, %struct.sv*** %sp, align 8
  store %struct.sv* %151, %struct.sv** %incdec.ptr193, align 8
  br label %if.end194

if.end194:                                        ; preds = %if.then192, %if.else189
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.end188
  %153 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %153, %struct.sv*** @PL_stack_sp, align 8
  %154 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %154, i32 0, i32 0
  %155 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %155, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end195, %if.else163, %if.else160, %if.then87
  %156 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %156
}

declare dso_local i8* @Perl_hv_common(%struct.hv*, %struct.sv*, i8*, i64, i32, i32, %struct.sv*, i32) #1

declare dso_local %struct.sv* @Perl_av_delete(%struct.av*, i64, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_exists() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %tmpsv = alloca %struct.sv*, align 8
  %hv = alloca %struct.hv*, align 8
  %gv = alloca %struct.gv*, align 8
  %sv = alloca %struct.sv*, align 8
  %cv = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end21

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end21

if.then:                                          ; preds = %cond.false, %cond.true
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %sv, align 8
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %call = call %struct.cv* @Perl_sv_2cv(%struct.sv* %5, %struct.hv** %hv, %struct.gv** %gv, i32 0)
  store %struct.cv* %call, %struct.cv** %cv, align 8
  %6 = load %struct.cv*, %struct.cv** %cv, align 8
  %tobool1 = icmp ne %struct.cv* %6, null
  br i1 %tobool1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 1
  store %struct.sv** %incdec.ptr3, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr3, align 8
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %8, %struct.sv*** @PL_stack_sp, align 8
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 0
  %10 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %10, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %11 = load %struct.gv*, %struct.gv** %gv, align 8
  %tobool4 = icmp ne %struct.gv* %11, null
  br i1 %tobool4, label %land.lhs.true, label %if.end18

land.lhs.true:                                    ; preds = %if.end
  %12 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_flags = getelementptr inbounds %struct.gv, %struct.gv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags, align 4
  %and5 = and i32 %13, 255
  %cmp = icmp eq i32 %and5, 9
  br i1 %cmp, label %land.lhs.true7, label %if.end18

land.lhs.true7:                                   ; preds = %land.lhs.true
  %14 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %14, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %15 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %15, i64 0
  %gp_cv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 2
  %16 = load %struct.cv*, %struct.cv** %gp_cv, align 8
  %add.ptr8 = getelementptr inbounds %struct.cv, %struct.cv* %16, i64 0
  %tobool9 = icmp ne %struct.cv* %add.ptr8, null
  br i1 %tobool9, label %land.lhs.true10, label %if.end18

land.lhs.true10:                                  ; preds = %land.lhs.true7
  %17 = load %struct.gv*, %struct.gv** %gv, align 8
  %sv_u11 = getelementptr inbounds %struct.gv, %struct.gv* %17, i32 0, i32 3
  %svu_gp12 = bitcast %union.anon.4* %sv_u11 to %struct.gp**
  %18 = load %struct.gp*, %struct.gp** %svu_gp12, align 8
  %add.ptr13 = getelementptr inbounds %struct.gp, %struct.gp* %18, i64 0
  %gp_cvgen = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr13, i32 0, i32 3
  %19 = load i32, i32* %gp_cvgen, align 8
  %tobool14 = icmp ne i32 %19, 0
  br i1 %tobool14, label %if.end18, label %if.then15

if.then15:                                        ; preds = %land.lhs.true10
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 1
  store %struct.sv** %incdec.ptr16, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr16, align 8
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next17 = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next17, align 8
  store %struct.op* %23, %struct.op** %retval, align 8
  br label %return

if.end18:                                         ; preds = %land.lhs.true10, %land.lhs.true7, %land.lhs.true, %if.end
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr19 = getelementptr inbounds %struct.sv*, %struct.sv** %24, i32 1
  store %struct.sv** %incdec.ptr19, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr19, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %25, %struct.sv*** @PL_stack_sp, align 8
  %26 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next20 = getelementptr inbounds %struct.op, %struct.op* %26, i32 0, i32 0
  %27 = load %struct.op*, %struct.op** %op_next20, align 8
  store %struct.op* %27, %struct.op** %retval, align 8
  br label %return

if.end21:                                         ; preds = %cond.false, %cond.true
  %28 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 -1
  store %struct.sv** %incdec.ptr22, %struct.sv*** %sp, align 8
  %29 = load %struct.sv*, %struct.sv** %28, align 8
  store %struct.sv* %29, %struct.sv** %tmpsv, align 8
  %30 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr23 = getelementptr inbounds %struct.sv*, %struct.sv** %30, i32 -1
  store %struct.sv** %incdec.ptr23, %struct.sv*** %sp, align 8
  %31 = load %struct.sv*, %struct.sv** %30, align 8
  %32 = bitcast %struct.sv* %31 to i8*
  %33 = bitcast i8* %32 to %struct.hv*
  store %struct.hv* %33, %struct.hv** %hv, align 8
  %34 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags24 = getelementptr inbounds %struct.hv, %struct.hv* %34, i32 0, i32 2
  %35 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %35, 255
  %cmp26 = icmp eq i32 %and25, 12
  br i1 %cmp26, label %cond.true28, label %cond.false29

cond.true28:                                      ; preds = %if.end21
  br i1 true, label %if.then30, label %if.else

cond.false29:                                     ; preds = %if.end21
  br i1 false, label %if.then30, label %if.else

if.then30:                                        ; preds = %cond.false29, %cond.true28
  %36 = load %struct.hv*, %struct.hv** %hv, align 8
  %37 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call31 = call i8* @Perl_hv_common(%struct.hv* %36, %struct.sv* %37, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool32 = icmp ne i8* %call31, null
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %if.then30
  br i1 true, label %if.then35, label %if.end38

cond.false34:                                     ; preds = %if.then30
  br i1 false, label %if.then35, label %if.end38

if.then35:                                        ; preds = %cond.false34, %cond.true33
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr36 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 1
  store %struct.sv** %incdec.ptr36, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr36, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next37 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next37, align 8
  store %struct.op* %41, %struct.op** %retval, align 8
  br label %return

if.end38:                                         ; preds = %cond.false34, %cond.true33
  br label %if.end64

if.else:                                          ; preds = %cond.false29, %cond.true28
  %42 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags39 = getelementptr inbounds %struct.hv, %struct.hv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %43, 255
  %cmp41 = icmp eq i32 %and40, 11
  br i1 %cmp41, label %if.then43, label %if.else61

if.then43:                                        ; preds = %if.else
  %44 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %44, i32 0, i32 5
  %45 = load i8, i8* %op_flags, align 2
  %conv44 = zext i8 %45 to i32
  %and45 = and i32 %conv44, 128
  %tobool46 = icmp ne i32 %and45, 0
  br i1 %tobool46, label %if.then47, label %if.end60

if.then47:                                        ; preds = %if.then43
  %46 = load %struct.hv*, %struct.hv** %hv, align 8
  %47 = bitcast %struct.hv* %46 to i8*
  %48 = bitcast i8* %47 to %struct.av*
  %49 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_flags48 = getelementptr inbounds %struct.sv, %struct.sv* %49, i32 0, i32 2
  %50 = load i32, i32* %sv_flags48, align 4
  %and49 = and i32 %50, 2097408
  %cmp50 = icmp eq i32 %and49, 256
  br i1 %cmp50, label %cond.true52, label %cond.false53

cond.true52:                                      ; preds = %if.then47
  %51 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 0
  %52 = load i8*, i8** %sv_any, align 8
  %53 = bitcast i8* %52 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %53, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %54 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false53:                                     ; preds = %if.then47
  %55 = load %struct.sv*, %struct.sv** %tmpsv, align 8
  %call54 = call i64 @Perl_sv_2iv_flags(%struct.sv* %55, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false53, %cond.true52
  %cond = phi i64 [ %54, %cond.true52 ], [ %call54, %cond.false53 ]
  %call55 = call zeroext i1 @Perl_av_exists(%struct.av* %48, i64 %cond)
  br i1 %call55, label %if.then56, label %if.end59

if.then56:                                        ; preds = %cond.end
  %56 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr57 = getelementptr inbounds %struct.sv*, %struct.sv** %56, i32 1
  store %struct.sv** %incdec.ptr57, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_yes, %struct.sv** %incdec.ptr57, align 8
  %57 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %57, %struct.sv*** @PL_stack_sp, align 8
  %58 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next58 = getelementptr inbounds %struct.op, %struct.op* %58, i32 0, i32 0
  %59 = load %struct.op*, %struct.op** %op_next58, align 8
  store %struct.op* %59, %struct.op** %retval, align 8
  br label %return

if.end59:                                         ; preds = %cond.end
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then43
  br label %if.end63

if.else61:                                        ; preds = %if.else
  %call62 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.49, i64 0, i64 0))
  store %struct.op* %call62, %struct.op** %retval, align 8
  br label %return

if.end63:                                         ; preds = %if.end60
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.end38
  %60 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_no, %struct.sv** %incdec.ptr65, align 8
  %61 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %61, %struct.sv*** @PL_stack_sp, align 8
  %62 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next66 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 0
  %63 = load %struct.op*, %struct.op** %op_next66, align 8
  store %struct.op* %63, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end64, %if.else61, %if.then56, %if.then35, %if.end18, %if.then15, %if.then2
  %64 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %64
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_hslice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %hv = alloca %struct.hv*, align 8
  %lval = alloca i32, align 4
  %localizing = alloca i8, align 1
  %can_preserve = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %keysv = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %he = alloca %struct.he*, align 8
  %preeminent = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  %8 = bitcast %struct.sv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.hv*
  store %struct.hv* %9, %struct.hv** %hv, align 8
  %10 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %10, i32 0, i32 5
  %11 = load i8, i8* %op_flags, align 2
  %conv2 = zext i8 %11 to i32
  %and = and i32 %conv2, 32
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv3 = zext i8 %13 to i32
  %and4 = and i32 %conv3, 8
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %lor.rhs
  %call = call i32 @Perl_is_lvalue_sub()
  %tobool6 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.rhs
  %14 = phi i1 [ false, %lor.rhs ], [ %tobool6, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %15 = phi i1 [ true, %entry ], [ %14, %land.end ]
  %lor.ext = zext i1 %15 to i32
  store i32 %lor.ext, i32* %lval, align 4
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private7 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private7, align 1
  %conv8 = zext i8 %17 to i32
  %and9 = and i32 %conv8, 128
  %tobool10 = icmp ne i32 %and9, 0
  %frombool = zext i1 %tobool10 to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 0, i8* %can_preserve, align 1
  %18 = load i8, i8* %localizing, align 1
  %tobool11 = trunc i8 %18 to i1
  br i1 %tobool11, label %if.then, label %if.end28

if.then:                                          ; preds = %lor.end
  %19 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags, align 4
  %and12 = and i32 %20, 8388608
  %tobool13 = icmp ne i32 %and12, 0
  br i1 %tobool13, label %lor.lhs.false, label %if.then27

lor.lhs.false:                                    ; preds = %if.then
  %21 = load %struct.hv*, %struct.hv** %hv, align 8
  %22 = bitcast %struct.hv* %21 to %struct.sv*
  %call14 = call %struct.magic* @Perl_mg_find(%struct.sv* %22, i32 80)
  store %struct.magic* %call14, %struct.magic** %mg, align 8
  %tobool15 = icmp ne %struct.magic* %call14, null
  br i1 %tobool15, label %lor.lhs.false16, label %if.then27

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %23 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %23, i32 0, i32 6
  %24 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool17 = icmp ne %struct.sv* %24, null
  br i1 %tobool17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false16
  %25 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj18 = getelementptr inbounds %struct.magic, %struct.magic* %25, i32 0, i32 6
  %26 = load %struct.sv*, %struct.sv** %mg_obj18, align 8
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false16
  %27 = load %struct.hv*, %struct.hv** %hv, align 8
  %28 = bitcast %struct.hv* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  %call19 = call %struct.sv* @Perl_newRV(%struct.sv* %29)
  %call20 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %26, %cond.true ], [ %call20, %cond.false ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %30 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any, align 8
  %32 = bitcast i8* %31 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %32, i32 0, i32 0
  %33 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %33, %struct.hv** %stash, align 8
  %tobool21 = icmp ne %struct.hv* %33, null
  br i1 %tobool21, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %34 = load %struct.hv*, %struct.hv** %stash, align 8
  %call22 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool23 = icmp ne %struct.gv* %call22, null
  br i1 %tobool23, label %land.lhs.true24, label %if.end

land.lhs.true24:                                  ; preds = %land.lhs.true
  %35 = load %struct.hv*, %struct.hv** %stash, align 8
  %call25 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool26 = icmp ne %struct.gv* %call25, null
  br i1 %tobool26, label %if.then27, label %if.end

if.then27:                                        ; preds = %land.lhs.true24, %lor.lhs.false, %if.then
  store i8 1, i8* %can_preserve, align 1
  br label %if.end

if.end:                                           ; preds = %if.then27, %land.lhs.true24, %land.lhs.true, %cond.end
  br label %if.end28

if.end28:                                         ; preds = %if.end, %lor.end
  br label %while.cond

while.cond:                                       ; preds = %cond.end156, %if.end28
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr29 = getelementptr inbounds %struct.sv*, %struct.sv** %36, i32 1
  store %struct.sv** %incdec.ptr29, %struct.sv*** %mark, align 8
  %37 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp = icmp ule %struct.sv** %incdec.ptr29, %37
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load %struct.sv**, %struct.sv*** %mark, align 8
  %39 = load %struct.sv*, %struct.sv** %38, align 8
  store %struct.sv* %39, %struct.sv** %keysv, align 8
  store i8 1, i8* %preeminent, align 1
  %40 = load i8, i8* %localizing, align 1
  %tobool31 = trunc i8 %40 to i1
  br i1 %tobool31, label %land.lhs.true33, label %if.end42

land.lhs.true33:                                  ; preds = %while.body
  %41 = load i8, i8* %can_preserve, align 1
  %tobool34 = trunc i8 %41 to i1
  br i1 %tobool34, label %if.then36, label %if.end42

if.then36:                                        ; preds = %land.lhs.true33
  %42 = load %struct.hv*, %struct.hv** %hv, align 8
  %43 = load %struct.sv*, %struct.sv** %keysv, align 8
  %call37 = call i8* @Perl_hv_common(%struct.hv* %42, %struct.sv* %43, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool38 = icmp ne i8* %call37, null
  %44 = zext i1 %tobool38 to i64
  %cond39 = select i1 %tobool38, i32 1, i32 0
  %tobool40 = icmp ne i32 %cond39, 0
  %frombool41 = zext i1 %tobool40 to i8
  store i8 %frombool41, i8* %preeminent, align 1
  br label %if.end42

if.end42:                                         ; preds = %if.then36, %land.lhs.true33, %while.body
  %45 = load %struct.hv*, %struct.hv** %hv, align 8
  %46 = load %struct.sv*, %struct.sv** %keysv, align 8
  %47 = load i32, i32* %lval, align 4
  %tobool43 = icmp ne i32 %47, 0
  %48 = zext i1 %tobool43 to i64
  %cond44 = select i1 %tobool43, i32 16, i32 0
  %call45 = call i8* @Perl_hv_common(%struct.hv* %45, %struct.sv* %46, i8* null, i64 0, i32 0, i32 %cond44, %struct.sv* null, i32 0)
  %49 = bitcast i8* %call45 to %struct.he*
  store %struct.he* %49, %struct.he** %he, align 8
  %50 = load %struct.he*, %struct.he** %he, align 8
  %tobool46 = icmp ne %struct.he* %50, null
  br i1 %tobool46, label %cond.true47, label %cond.false48

cond.true47:                                      ; preds = %if.end42
  %51 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %51, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  br label %cond.end49

cond.false48:                                     ; preds = %if.end42
  br label %cond.end49

cond.end49:                                       ; preds = %cond.false48, %cond.true47
  %cond50 = phi %struct.sv** [ %hent_val, %cond.true47 ], [ null, %cond.false48 ]
  store %struct.sv** %cond50, %struct.sv*** %svp, align 8
  %52 = load i32, i32* %lval, align 4
  %tobool51 = icmp ne i32 %52, 0
  br i1 %tobool51, label %if.then52, label %if.end150

if.then52:                                        ; preds = %cond.end49
  %53 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool53 = icmp ne %struct.sv** %53, null
  br i1 %tobool53, label %lor.lhs.false54, label %if.then59

lor.lhs.false54:                                  ; preds = %if.then52
  %54 = load %struct.sv**, %struct.sv*** %svp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %tobool55 = icmp ne %struct.sv* %55, null
  br i1 %tobool55, label %lor.lhs.false56, label %if.then59

lor.lhs.false56:                                  ; preds = %lor.lhs.false54
  %56 = load %struct.sv**, %struct.sv*** %svp, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  %cmp57 = icmp eq %struct.sv* %57, @PL_sv_undef
  br i1 %cmp57, label %if.then59, label %if.end61

if.then59:                                        ; preds = %lor.lhs.false56, %lor.lhs.false54, %if.then52
  %58 = load %struct.sv*, %struct.sv** %keysv, align 8
  %59 = bitcast %struct.sv* %58 to i8*
  %call60 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %59)
  store %struct.op* %call60, %struct.op** %retval, align 8
  br label %return

if.end61:                                         ; preds = %lor.lhs.false56
  %60 = load i8, i8* %localizing, align 1
  %tobool62 = trunc i8 %60 to i1
  br i1 %tobool62, label %if.then63, label %if.end149

if.then63:                                        ; preds = %if.end61
  %61 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_flags64 = getelementptr inbounds %struct.hv, %struct.hv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags64, align 4
  %and65 = and i32 %62, 33554432
  %tobool66 = icmp ne i32 %and65, 0
  br i1 %tobool66, label %land.lhs.true67, label %cond.false128

land.lhs.true67:                                  ; preds = %if.then63
  %63 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u68 = getelementptr inbounds %struct.hv, %struct.hv* %63, i32 0, i32 3
  %svu_hash = bitcast %union.anon.5* %sv_u68 to %struct.he***
  %64 = load %struct.he**, %struct.he*** %svu_hash, align 8
  %65 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any69 = getelementptr inbounds %struct.hv, %struct.hv* %65, i32 0, i32 0
  %66 = load %struct.xpvhv*, %struct.xpvhv** %sv_any69, align 8
  %xhv_max = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %66, i32 0, i32 3
  %67 = load i64, i64* %xhv_max, align 8
  %add = add i64 %67, 1
  %arrayidx = getelementptr inbounds %struct.he*, %struct.he** %64, i64 %add
  %68 = bitcast %struct.he** %arrayidx to %struct.xpvhv_aux*
  %xhv_name_u = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %68, i32 0, i32 0
  %xhvnameu_name = bitcast %union._xhvnameu* %xhv_name_u to %struct.hek**
  %69 = load %struct.hek*, %struct.hek** %xhvnameu_name, align 8
  %tobool70 = icmp ne %struct.hek* %69, null
  br i1 %tobool70, label %land.lhs.true71, label %cond.false128

land.lhs.true71:                                  ; preds = %land.lhs.true67
  %70 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u72 = getelementptr inbounds %struct.hv, %struct.hv* %70, i32 0, i32 3
  %svu_hash73 = bitcast %union.anon.5* %sv_u72 to %struct.he***
  %71 = load %struct.he**, %struct.he*** %svu_hash73, align 8
  %72 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any74 = getelementptr inbounds %struct.hv, %struct.hv* %72, i32 0, i32 0
  %73 = load %struct.xpvhv*, %struct.xpvhv** %sv_any74, align 8
  %xhv_max75 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %73, i32 0, i32 3
  %74 = load i64, i64* %xhv_max75, align 8
  %add76 = add i64 %74, 1
  %arrayidx77 = getelementptr inbounds %struct.he*, %struct.he** %71, i64 %add76
  %75 = bitcast %struct.he** %arrayidx77 to %struct.xpvhv_aux*
  %xhv_name_count = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %75, i32 0, i32 4
  %76 = load i32, i32* %xhv_name_count, align 4
  %tobool78 = icmp ne i32 %76, 0
  br i1 %tobool78, label %cond.true79, label %cond.false88

cond.true79:                                      ; preds = %land.lhs.true71
  %77 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u80 = getelementptr inbounds %struct.hv, %struct.hv* %77, i32 0, i32 3
  %svu_hash81 = bitcast %union.anon.5* %sv_u80 to %struct.he***
  %78 = load %struct.he**, %struct.he*** %svu_hash81, align 8
  %79 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any82 = getelementptr inbounds %struct.hv, %struct.hv* %79, i32 0, i32 0
  %80 = load %struct.xpvhv*, %struct.xpvhv** %sv_any82, align 8
  %xhv_max83 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %80, i32 0, i32 3
  %81 = load i64, i64* %xhv_max83, align 8
  %add84 = add i64 %81, 1
  %arrayidx85 = getelementptr inbounds %struct.he*, %struct.he** %78, i64 %add84
  %82 = bitcast %struct.he** %arrayidx85 to %struct.xpvhv_aux*
  %xhv_name_u86 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %82, i32 0, i32 0
  %xhvnameu_names = bitcast %union._xhvnameu* %xhv_name_u86 to %struct.hek***
  %83 = load %struct.hek**, %struct.hek*** %xhvnameu_names, align 8
  %84 = load %struct.hek*, %struct.hek** %83, align 8
  %tobool87 = icmp ne %struct.hek* %84, null
  br i1 %tobool87, label %cond.true98, label %cond.false128

cond.false88:                                     ; preds = %land.lhs.true71
  %85 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u89 = getelementptr inbounds %struct.hv, %struct.hv* %85, i32 0, i32 3
  %svu_hash90 = bitcast %union.anon.5* %sv_u89 to %struct.he***
  %86 = load %struct.he**, %struct.he*** %svu_hash90, align 8
  %87 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any91 = getelementptr inbounds %struct.hv, %struct.hv* %87, i32 0, i32 0
  %88 = load %struct.xpvhv*, %struct.xpvhv** %sv_any91, align 8
  %xhv_max92 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %88, i32 0, i32 3
  %89 = load i64, i64* %xhv_max92, align 8
  %add93 = add i64 %89, 1
  %arrayidx94 = getelementptr inbounds %struct.he*, %struct.he** %86, i64 %add93
  %90 = bitcast %struct.he** %arrayidx94 to %struct.xpvhv_aux*
  %xhv_name_u95 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %90, i32 0, i32 0
  %xhvnameu_name96 = bitcast %union._xhvnameu* %xhv_name_u95 to %struct.hek**
  %91 = load %struct.hek*, %struct.hek** %xhvnameu_name96, align 8
  %tobool97 = icmp ne %struct.hek* %91, null
  br i1 %tobool97, label %cond.true98, label %cond.false128

cond.true98:                                      ; preds = %cond.false88, %cond.true79
  %92 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u99 = getelementptr inbounds %struct.hv, %struct.hv* %92, i32 0, i32 3
  %svu_hash100 = bitcast %union.anon.5* %sv_u99 to %struct.he***
  %93 = load %struct.he**, %struct.he*** %svu_hash100, align 8
  %94 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any101 = getelementptr inbounds %struct.hv, %struct.hv* %94, i32 0, i32 0
  %95 = load %struct.xpvhv*, %struct.xpvhv** %sv_any101, align 8
  %xhv_max102 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %95, i32 0, i32 3
  %96 = load i64, i64* %xhv_max102, align 8
  %add103 = add i64 %96, 1
  %arrayidx104 = getelementptr inbounds %struct.he*, %struct.he** %93, i64 %add103
  %97 = bitcast %struct.he** %arrayidx104 to %struct.xpvhv_aux*
  %xhv_name_count105 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %97, i32 0, i32 4
  %98 = load i32, i32* %xhv_name_count105, align 4
  %tobool106 = icmp ne i32 %98, 0
  br i1 %tobool106, label %cond.true107, label %cond.false116

cond.true107:                                     ; preds = %cond.true98
  %99 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u108 = getelementptr inbounds %struct.hv, %struct.hv* %99, i32 0, i32 3
  %svu_hash109 = bitcast %union.anon.5* %sv_u108 to %struct.he***
  %100 = load %struct.he**, %struct.he*** %svu_hash109, align 8
  %101 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any110 = getelementptr inbounds %struct.hv, %struct.hv* %101, i32 0, i32 0
  %102 = load %struct.xpvhv*, %struct.xpvhv** %sv_any110, align 8
  %xhv_max111 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %102, i32 0, i32 3
  %103 = load i64, i64* %xhv_max111, align 8
  %add112 = add i64 %103, 1
  %arrayidx113 = getelementptr inbounds %struct.he*, %struct.he** %100, i64 %add112
  %104 = bitcast %struct.he** %arrayidx113 to %struct.xpvhv_aux*
  %xhv_name_u114 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %104, i32 0, i32 0
  %xhvnameu_names115 = bitcast %union._xhvnameu* %xhv_name_u114 to %struct.hek***
  %105 = load %struct.hek**, %struct.hek*** %xhvnameu_names115, align 8
  %106 = load %struct.hek*, %struct.hek** %105, align 8
  br label %cond.end125

cond.false116:                                    ; preds = %cond.true98
  %107 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_u117 = getelementptr inbounds %struct.hv, %struct.hv* %107, i32 0, i32 3
  %svu_hash118 = bitcast %union.anon.5* %sv_u117 to %struct.he***
  %108 = load %struct.he**, %struct.he*** %svu_hash118, align 8
  %109 = load %struct.hv*, %struct.hv** %hv, align 8
  %sv_any119 = getelementptr inbounds %struct.hv, %struct.hv* %109, i32 0, i32 0
  %110 = load %struct.xpvhv*, %struct.xpvhv** %sv_any119, align 8
  %xhv_max120 = getelementptr inbounds %struct.xpvhv, %struct.xpvhv* %110, i32 0, i32 3
  %111 = load i64, i64* %xhv_max120, align 8
  %add121 = add i64 %111, 1
  %arrayidx122 = getelementptr inbounds %struct.he*, %struct.he** %108, i64 %add121
  %112 = bitcast %struct.he** %arrayidx122 to %struct.xpvhv_aux*
  %xhv_name_u123 = getelementptr inbounds %struct.xpvhv_aux, %struct.xpvhv_aux* %112, i32 0, i32 0
  %xhvnameu_name124 = bitcast %union._xhvnameu* %xhv_name_u123 to %struct.hek**
  %113 = load %struct.hek*, %struct.hek** %xhvnameu_name124, align 8
  br label %cond.end125

cond.end125:                                      ; preds = %cond.false116, %cond.true107
  %cond126 = phi %struct.hek* [ %106, %cond.true107 ], [ %113, %cond.false116 ]
  %hek_key = getelementptr inbounds %struct.hek, %struct.hek* %cond126, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %hek_key, i64 0, i64 0
  %tobool127 = icmp ne i8* %arraydecay, null
  br i1 %tobool127, label %land.lhs.true129, label %if.else

cond.false128:                                    ; preds = %cond.false88, %cond.true79, %land.lhs.true67, %if.then63
  br i1 false, label %land.lhs.true129, label %if.else

land.lhs.true129:                                 ; preds = %cond.false128, %cond.end125
  %114 = load %struct.sv**, %struct.sv*** %svp, align 8
  %115 = load %struct.sv*, %struct.sv** %114, align 8
  %sv_flags130 = getelementptr inbounds %struct.sv, %struct.sv* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags130, align 4
  %and131 = and i32 %116, 255
  %cmp132 = icmp eq i32 %and131, 9
  br i1 %cmp132, label %if.then134, label %if.else

if.then134:                                       ; preds = %land.lhs.true129
  %117 = load %struct.sv**, %struct.sv*** %svp, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %119 = bitcast %struct.sv* %118 to i8*
  %120 = bitcast i8* %119 to %struct.gv*
  %121 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags135 = getelementptr inbounds %struct.op, %struct.op* %121, i32 0, i32 5
  %122 = load i8, i8* %op_flags135, align 2
  %conv136 = zext i8 %122 to i32
  %and137 = and i32 %conv136, 128
  %tobool138 = icmp ne i32 %and137, 0
  %lnot = xor i1 %tobool138, true
  %lnot.ext = zext i1 %lnot to i32
  call void @Perl_save_gp(%struct.gv* %120, i32 %lnot.ext)
  br label %if.end148

if.else:                                          ; preds = %land.lhs.true129, %cond.false128, %cond.end125
  %123 = load i8, i8* %preeminent, align 1
  %tobool139 = trunc i8 %123 to i1
  br i1 %tobool139, label %if.then140, label %if.else146

if.then140:                                       ; preds = %if.else
  %124 = load %struct.hv*, %struct.hv** %hv, align 8
  %125 = load %struct.sv*, %struct.sv** %keysv, align 8
  %126 = load %struct.sv**, %struct.sv*** %svp, align 8
  %127 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags141 = getelementptr inbounds %struct.op, %struct.op* %127, i32 0, i32 5
  %128 = load i8, i8* %op_flags141, align 2
  %conv142 = zext i8 %128 to i32
  %and143 = and i32 %conv142, 128
  %tobool144 = icmp ne i32 %and143, 0
  %129 = zext i1 %tobool144 to i64
  %cond145 = select i1 %tobool144, i32 0, i32 1
  call void @Perl_save_helem_flags(%struct.hv* %124, %struct.sv* %125, %struct.sv** %126, i32 %cond145)
  br label %if.end147

if.else146:                                       ; preds = %if.else
  %130 = load %struct.hv*, %struct.hv** %hv, align 8
  %131 = bitcast %struct.hv* %130 to i8*
  %132 = bitcast i8* %131 to %struct.hv*
  %133 = load %struct.sv*, %struct.sv** %keysv, align 8
  call void @Perl_save_hdelete(%struct.hv* %132, %struct.sv* %133)
  br label %if.end147

if.end147:                                        ; preds = %if.else146, %if.then140
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.then134
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %if.end61
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %cond.end49
  %134 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool151 = icmp ne %struct.sv** %134, null
  br i1 %tobool151, label %land.lhs.true152, label %cond.false155

land.lhs.true152:                                 ; preds = %if.end150
  %135 = load %struct.sv**, %struct.sv*** %svp, align 8
  %136 = load %struct.sv*, %struct.sv** %135, align 8
  %tobool153 = icmp ne %struct.sv* %136, null
  br i1 %tobool153, label %cond.true154, label %cond.false155

cond.true154:                                     ; preds = %land.lhs.true152
  %137 = load %struct.sv**, %struct.sv*** %svp, align 8
  %138 = load %struct.sv*, %struct.sv** %137, align 8
  br label %cond.end156

cond.false155:                                    ; preds = %land.lhs.true152, %if.end150
  br label %cond.end156

cond.end156:                                      ; preds = %cond.false155, %cond.true154
  %cond157 = phi %struct.sv* [ %138, %cond.true154 ], [ @PL_sv_undef, %cond.false155 ]
  %139 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %cond157, %struct.sv** %139, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %140 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags158 = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 5
  %141 = load i8, i8* %op_flags158, align 2
  %conv159 = zext i8 %141 to i32
  %and160 = and i32 %conv159, 3
  %tobool161 = icmp ne i32 %and160, 0
  br i1 %tobool161, label %cond.true162, label %cond.false166

cond.true162:                                     ; preds = %while.end
  %142 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags163 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 5
  %143 = load i8, i8* %op_flags163, align 2
  %conv164 = zext i8 %143 to i32
  %and165 = and i32 %conv164, 3
  br label %cond.end168

cond.false166:                                    ; preds = %while.end
  %call167 = call i32 @Perl_block_gimme()
  br label %cond.end168

cond.end168:                                      ; preds = %cond.false166, %cond.true162
  %cond169 = phi i32 [ %and165, %cond.true162 ], [ %call167, %cond.false166 ]
  %cmp170 = icmp ne i32 %cond169, 3
  br i1 %cmp170, label %if.then172, label %if.end184

if.then172:                                       ; preds = %cond.end168
  %144 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %145 = load i32, i32* %origmark, align 4
  %idx.ext173 = sext i32 %145 to i64
  %add.ptr174 = getelementptr inbounds %struct.sv*, %struct.sv** %144, i64 %idx.ext173
  store %struct.sv** %add.ptr174, %struct.sv*** %mark, align 8
  %146 = load %struct.sv**, %struct.sv*** %sp, align 8
  %147 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %148 = load i32, i32* %origmark, align 4
  %idx.ext175 = sext i32 %148 to i64
  %add.ptr176 = getelementptr inbounds %struct.sv*, %struct.sv** %147, i64 %idx.ext175
  %cmp177 = icmp ugt %struct.sv** %146, %add.ptr176
  br i1 %cmp177, label %cond.true179, label %cond.false180

cond.true179:                                     ; preds = %if.then172
  %149 = load %struct.sv**, %struct.sv*** %sp, align 8
  %150 = load %struct.sv*, %struct.sv** %149, align 8
  br label %cond.end181

cond.false180:                                    ; preds = %if.then172
  br label %cond.end181

cond.end181:                                      ; preds = %cond.false180, %cond.true179
  %cond182 = phi %struct.sv* [ %150, %cond.true179 ], [ @PL_sv_undef, %cond.false180 ]
  %151 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr183 = getelementptr inbounds %struct.sv*, %struct.sv** %151, i32 1
  store %struct.sv** %incdec.ptr183, %struct.sv*** %mark, align 8
  store %struct.sv* %cond182, %struct.sv** %incdec.ptr183, align 8
  %152 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %152, %struct.sv*** %sp, align 8
  br label %if.end184

if.end184:                                        ; preds = %cond.end181, %cond.end168
  %153 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %153, %struct.sv*** @PL_stack_sp, align 8
  %154 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %154, i32 0, i32 0
  %155 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %155, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end184, %if.then59
  %156 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %156
}

declare dso_local void @Perl_save_helem_flags(%struct.hv*, %struct.sv*, %struct.sv**, i32) #1

declare dso_local void @Perl_save_hdelete(%struct.hv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_kvhslice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %hv = alloca %struct.hv*, align 8
  %lval = alloca i32, align 4
  %items = alloca i64, align 8
  %flags = alloca i32, align 4
  %markoff = alloca i64, align 8
  %keysv = alloca %struct.sv*, align 8
  %svp = alloca %struct.sv**, align 8
  %he = alloca %struct.he*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %4, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.hv*
  store %struct.hv* %7, %struct.hv** %hv, align 8
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %9 to i32
  %and = and i32 %conv, 32
  store i32 %and, i32* %lval, align 4
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %11 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %10 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  store i64 %sub.ptr.div, i64* %items, align 8
  %12 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %12, i32 0, i32 6
  %13 = load i8, i8* %op_private, align 1
  %conv2 = zext i8 %13 to i32
  %and3 = and i32 %conv2, 8
  %tobool = icmp ne i32 %and3, 0
  br i1 %tobool, label %if.then, label %if.end10

if.then:                                          ; preds = %entry
  %call = call i32 @Perl_is_lvalue_sub()
  store i32 %call, i32* %flags, align 4
  %14 = load i32, i32* %flags, align 4
  %tobool4 = icmp ne i32 %14, 0
  br i1 %tobool4, label %if.then5, label %if.end9

if.then5:                                         ; preds = %if.then
  %15 = load i32, i32* %flags, align 4
  %and6 = and i32 %15, 1
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.then5
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.51, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.then5
  %16 = load i32, i32* %flags, align 4
  store i32 %16, i32* %lval, align 4
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %entry
  br label %do.body

do.body:                                          ; preds = %if.end10
  %17 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast11 = ptrtoint %struct.sv** %17 to i64
  %sub.ptr.rhs.cast12 = ptrtoint %struct.sv** %18 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %sub.ptr.div14 = sdiv exact i64 %sub.ptr.sub13, 8
  %19 = load i64, i64* %items, align 8
  %cmp = icmp slt i64 %sub.ptr.div14, %19
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body
  br i1 true, label %if.then16, label %if.end23

cond.false:                                       ; preds = %do.body
  br i1 false, label %if.then16, label %if.end23

if.then16:                                        ; preds = %cond.false, %cond.true
  %20 = load %struct.sv**, %struct.sv*** %mark, align 8
  %21 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast17 = ptrtoint %struct.sv** %20 to i64
  %sub.ptr.rhs.cast18 = ptrtoint %struct.sv** %21 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %sub.ptr.div20 = sdiv exact i64 %sub.ptr.sub19, 8
  store i64 %sub.ptr.div20, i64* %markoff, align 8
  %22 = load %struct.sv**, %struct.sv*** %sp, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %24 = load i64, i64* %items, align 8
  %call21 = call %struct.sv** @Perl_stack_grow(%struct.sv** %22, %struct.sv** %23, i64 %24)
  store %struct.sv** %call21, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %26 = load i64, i64* %markoff, align 8
  %add.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %25, i64 %26
  store %struct.sv** %add.ptr22, %struct.sv*** %mark, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then16, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end23
  br label %while.cond

while.cond:                                       ; preds = %while.body, %do.end
  %28 = load i64, i64* %items, align 8
  %cmp24 = icmp sgt i64 %28, 1
  br i1 %cmp24, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %29 = load %struct.sv**, %struct.sv*** %mark, align 8
  %30 = load i64, i64* %items, align 8
  %add.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %29, i64 %30
  %31 = load %struct.sv*, %struct.sv** %add.ptr26, align 8
  %32 = load %struct.sv**, %struct.sv*** %mark, align 8
  %33 = load i64, i64* %items, align 8
  %mul = mul nsw i64 %33, 2
  %add.ptr27 = getelementptr inbounds %struct.sv*, %struct.sv** %32, i64 %mul
  %add.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr27, i64 -1
  store %struct.sv* %31, %struct.sv** %add.ptr28, align 8
  %34 = load i64, i64* %items, align 8
  %dec = add nsw i64 %34, -1
  store i64 %dec, i64* %items, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %35 = load %struct.sv**, %struct.sv*** %sp, align 8
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast29 = ptrtoint %struct.sv** %35 to i64
  %sub.ptr.rhs.cast30 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %sub.ptr.div32 = sdiv exact i64 %sub.ptr.sub31, 8
  store i64 %sub.ptr.div32, i64* %items, align 8
  %37 = load i64, i64* %items, align 8
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr33 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i64 %37
  store %struct.sv** %add.ptr33, %struct.sv*** %sp, align 8
  br label %while.cond34

while.cond34:                                     ; preds = %cond.end61, %while.end
  %39 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr35 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i32 1
  store %struct.sv** %incdec.ptr35, %struct.sv*** %mark, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp36 = icmp ule %struct.sv** %incdec.ptr35, %40
  br i1 %cmp36, label %while.body38, label %while.end64

while.body38:                                     ; preds = %while.cond34
  %41 = load %struct.sv**, %struct.sv*** %mark, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  store %struct.sv* %42, %struct.sv** %keysv, align 8
  %43 = load %struct.hv*, %struct.hv** %hv, align 8
  %44 = load %struct.sv*, %struct.sv** %keysv, align 8
  %45 = load i32, i32* %lval, align 4
  %tobool39 = icmp ne i32 %45, 0
  %46 = zext i1 %tobool39 to i64
  %cond = select i1 %tobool39, i32 16, i32 0
  %call40 = call i8* @Perl_hv_common(%struct.hv* %43, %struct.sv* %44, i8* null, i64 0, i32 0, i32 %cond, %struct.sv* null, i32 0)
  %47 = bitcast i8* %call40 to %struct.he*
  store %struct.he* %47, %struct.he** %he, align 8
  %48 = load %struct.he*, %struct.he** %he, align 8
  %tobool41 = icmp ne %struct.he* %48, null
  br i1 %tobool41, label %cond.true42, label %cond.false43

cond.true42:                                      ; preds = %while.body38
  %49 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %49, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  br label %cond.end

cond.false43:                                     ; preds = %while.body38
  br label %cond.end

cond.end:                                         ; preds = %cond.false43, %cond.true42
  %cond44 = phi %struct.sv** [ %hent_val, %cond.true42 ], [ null, %cond.false43 ]
  store %struct.sv** %cond44, %struct.sv*** %svp, align 8
  %50 = load i32, i32* %lval, align 4
  %tobool45 = icmp ne i32 %50, 0
  br i1 %tobool45, label %if.then46, label %if.end56

if.then46:                                        ; preds = %cond.end
  %51 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool47 = icmp ne %struct.sv** %51, null
  br i1 %tobool47, label %lor.lhs.false, label %if.then52

lor.lhs.false:                                    ; preds = %if.then46
  %52 = load %struct.sv**, %struct.sv*** %svp, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %tobool48 = icmp ne %struct.sv* %53, null
  br i1 %tobool48, label %lor.lhs.false49, label %if.then52

lor.lhs.false49:                                  ; preds = %lor.lhs.false
  %54 = load %struct.sv**, %struct.sv*** %svp, align 8
  %55 = load %struct.sv*, %struct.sv** %54, align 8
  %cmp50 = icmp eq %struct.sv* %55, @PL_sv_undef
  br i1 %cmp50, label %if.then52, label %if.end54

if.then52:                                        ; preds = %lor.lhs.false49, %lor.lhs.false, %if.then46
  %56 = load %struct.sv*, %struct.sv** %keysv, align 8
  %57 = bitcast %struct.sv* %56 to i8*
  %call53 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %57)
  store %struct.op* %call53, %struct.op** %retval, align 8
  br label %return

if.end54:                                         ; preds = %lor.lhs.false49
  %58 = load %struct.sv**, %struct.sv*** %mark, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  %call55 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %59, i32 1538)
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call55, %struct.sv** %60, align 8
  br label %if.end56

if.end56:                                         ; preds = %if.end54, %cond.end
  %61 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool57 = icmp ne %struct.sv** %61, null
  br i1 %tobool57, label %land.lhs.true, label %cond.false60

land.lhs.true:                                    ; preds = %if.end56
  %62 = load %struct.sv**, %struct.sv*** %svp, align 8
  %63 = load %struct.sv*, %struct.sv** %62, align 8
  %tobool58 = icmp ne %struct.sv* %63, null
  br i1 %tobool58, label %cond.true59, label %cond.false60

cond.true59:                                      ; preds = %land.lhs.true
  %64 = load %struct.sv**, %struct.sv*** %svp, align 8
  %65 = load %struct.sv*, %struct.sv** %64, align 8
  br label %cond.end61

cond.false60:                                     ; preds = %land.lhs.true, %if.end56
  br label %cond.end61

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi %struct.sv* [ %65, %cond.true59 ], [ @PL_sv_undef, %cond.false60 ]
  %66 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr63 = getelementptr inbounds %struct.sv*, %struct.sv** %66, i32 1
  store %struct.sv** %incdec.ptr63, %struct.sv*** %mark, align 8
  store %struct.sv* %cond62, %struct.sv** %incdec.ptr63, align 8
  br label %while.cond34

while.end64:                                      ; preds = %while.cond34
  %67 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags65 = getelementptr inbounds %struct.op, %struct.op* %67, i32 0, i32 5
  %68 = load i8, i8* %op_flags65, align 2
  %conv66 = zext i8 %68 to i32
  %and67 = and i32 %conv66, 3
  %tobool68 = icmp ne i32 %and67, 0
  br i1 %tobool68, label %cond.true69, label %cond.false73

cond.true69:                                      ; preds = %while.end64
  %69 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags70 = getelementptr inbounds %struct.op, %struct.op* %69, i32 0, i32 5
  %70 = load i8, i8* %op_flags70, align 2
  %conv71 = zext i8 %70 to i32
  %and72 = and i32 %conv71, 3
  br label %cond.end75

cond.false73:                                     ; preds = %while.end64
  %call74 = call i32 @Perl_block_gimme()
  br label %cond.end75

cond.end75:                                       ; preds = %cond.false73, %cond.true69
  %cond76 = phi i32 [ %and72, %cond.true69 ], [ %call74, %cond.false73 ]
  %cmp77 = icmp ne i32 %cond76, 3
  br i1 %cmp77, label %if.then79, label %if.end89

if.then79:                                        ; preds = %cond.end75
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  %72 = load i64, i64* %items, align 8
  %mul80 = mul nsw i64 %72, 2
  %idx.neg = sub i64 0, %mul80
  %add.ptr81 = getelementptr inbounds %struct.sv*, %struct.sv** %71, i64 %idx.neg
  store %struct.sv** %add.ptr81, %struct.sv*** %mark, align 8
  %73 = load i64, i64* %items, align 8
  %cmp82 = icmp sgt i64 %73, 0
  br i1 %cmp82, label %cond.true84, label %cond.false85

cond.true84:                                      ; preds = %if.then79
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  %75 = load %struct.sv*, %struct.sv** %74, align 8
  br label %cond.end86

cond.false85:                                     ; preds = %if.then79
  br label %cond.end86

cond.end86:                                       ; preds = %cond.false85, %cond.true84
  %cond87 = phi %struct.sv* [ %75, %cond.true84 ], [ @PL_sv_undef, %cond.false85 ]
  %76 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr88 = getelementptr inbounds %struct.sv*, %struct.sv** %76, i32 1
  store %struct.sv** %incdec.ptr88, %struct.sv*** %mark, align 8
  store %struct.sv* %cond87, %struct.sv** %incdec.ptr88, align 8
  %77 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %77, %struct.sv*** %sp, align 8
  br label %if.end89

if.end89:                                         ; preds = %cond.end86, %cond.end75
  %78 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %78, %struct.sv*** @PL_stack_sp, align 8
  %79 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %79, i32 0, i32 0
  %80 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %80, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end89, %if.then52
  %81 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %81
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_list() #0 {
entry:
  %markidx = alloca i32, align 4
  %mark = alloca %struct.sv**, align 8
  %sp = alloca %struct.sv**, align 8
  %0 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %0, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %1 = load i32, i32* %0, align 4
  store i32 %1, i32* %markidx, align 4
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 5
  %3 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %3 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %5 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp ne i32 %cond, 3
  br i1 %cmp, label %if.then, label %if.end9

if.then:                                          ; preds = %cond.end
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %7 = load i32, i32* %markidx, align 4
  %idx.ext = sext i32 %7 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %8 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %8, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %9, i32 1
  store %struct.sv** %incdec.ptr5, %struct.sv*** %mark, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp6 = icmp ule %struct.sv** %incdec.ptr5, %10
  br i1 %cmp6, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then
  %11 = load %struct.sv**, %struct.sv*** %sp, align 8
  %12 = load %struct.sv*, %struct.sv** %11, align 8
  %13 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %12, %struct.sv** %13, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %14 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then8
  %15 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %15, %struct.sv*** %sp, align 8
  %16 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %16, %struct.sv*** @PL_stack_sp, align 8
  br label %if.end9

if.end9:                                          ; preds = %if.end, %cond.end
  %17 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %17, i32 0, i32 0
  %18 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lslice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %lastrelem = alloca %struct.sv**, align 8
  %lastlelem = alloca %struct.sv**, align 8
  %firstlelem = alloca %struct.sv**, align 8
  %firstrelem = alloca %struct.sv**, align 8
  %mod = alloca i8, align 1
  %max = alloca i32, align 4
  %lelem = alloca %struct.sv**, align 8
  %ix = alloca i32, align 4
  %ix42 = alloca i32, align 4
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %1, %struct.sv*** %lastrelem, align 8
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %3 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %3, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %4 = load i32, i32* %3, align 4
  %idx.ext = sext i32 %4 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %2, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %lastlelem, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %6 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr1 = getelementptr inbounds i32, i32* %6, i32 -1
  store i32* %incdec.ptr1, i32** @PL_markstack_ptr, align 8
  %7 = load i32, i32* %6, align 4
  %idx.ext2 = sext i32 %7 to i64
  %add.ptr3 = getelementptr inbounds %struct.sv*, %struct.sv** %5, i64 %idx.ext2
  %add.ptr4 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr3, i64 1
  store %struct.sv** %add.ptr4, %struct.sv*** %firstlelem, align 8
  %8 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %add.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i64 1
  store %struct.sv** %add.ptr5, %struct.sv*** %firstrelem, align 8
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %9, i32 0, i32 5
  %10 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %10 to i32
  %and = and i32 %conv, 32
  %conv6 = trunc i32 %and to i8
  store i8 %conv6, i8* %mod, align 1
  %11 = load %struct.sv**, %struct.sv*** %lastrelem, align 8
  %12 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv7 = trunc i64 %sub.ptr.div to i32
  store i32 %conv7, i32* %max, align 4
  %13 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags8 = getelementptr inbounds %struct.op, %struct.op* %13, i32 0, i32 5
  %14 = load i8, i8* %op_flags8, align 2
  %conv9 = zext i8 %14 to i32
  %and10 = and i32 %conv9, 3
  %tobool = icmp ne i32 %and10, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags11 = getelementptr inbounds %struct.op, %struct.op* %15, i32 0, i32 5
  %16 = load i8, i8* %op_flags11, align 2
  %conv12 = zext i8 %16 to i32
  %and13 = and i32 %conv12, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and13, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp ne i32 %cond, 3
  br i1 %cmp, label %if.then, label %if.end33

if.then:                                          ; preds = %cond.end
  %17 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %18 = load %struct.sv*, %struct.sv** %17, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %18, i32 0, i32 2
  %19 = load i32, i32* %sv_flags, align 4
  %and15 = and i32 %19, 2097408
  %cmp16 = icmp eq i32 %and15, 256
  br i1 %cmp16, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.then
  %20 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %21 = load %struct.sv*, %struct.sv** %20, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %23, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %24 = load i64, i64* %xivu_iv, align 8
  br label %cond.end21

cond.false19:                                     ; preds = %if.then
  %25 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %26 = load %struct.sv*, %struct.sv** %25, align 8
  %call20 = call i64 @Perl_sv_2iv_flags(%struct.sv* %26, i32 2)
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false19, %cond.true18
  %cond22 = phi i64 [ %24, %cond.true18 ], [ %call20, %cond.false19 ]
  %conv23 = trunc i64 %cond22 to i32
  store i32 %conv23, i32* %ix, align 4
  %27 = load i32, i32* %ix, align 4
  %cmp24 = icmp slt i32 %27, 0
  br i1 %cmp24, label %if.then26, label %if.end

if.then26:                                        ; preds = %cond.end21
  %28 = load i32, i32* %max, align 4
  %29 = load i32, i32* %ix, align 4
  %add = add nsw i32 %29, %28
  store i32 %add, i32* %ix, align 4
  br label %if.end

if.end:                                           ; preds = %if.then26, %cond.end21
  %30 = load i32, i32* %ix, align 4
  %cmp27 = icmp slt i32 %30, 0
  br i1 %cmp27, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %31 = load i32, i32* %ix, align 4
  %32 = load i32, i32* %max, align 4
  %cmp29 = icmp sge i32 %31, %32
  br i1 %cmp29, label %if.then31, label %if.else

if.then31:                                        ; preds = %lor.lhs.false, %if.end
  %33 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %33, align 8
  br label %if.end32

if.else:                                          ; preds = %lor.lhs.false
  %34 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %35 = load i32, i32* %ix, align 4
  %idxprom = sext i32 %35 to i64
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %34, i64 %idxprom
  %36 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %37 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv* %36, %struct.sv** %37, align 8
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then31
  %38 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv** %38, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %39, %struct.sv*** @PL_stack_sp, align 8
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 0
  %41 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %41, %struct.op** %retval, align 8
  br label %return

if.end33:                                         ; preds = %cond.end
  %42 = load i32, i32* %max, align 4
  %cmp34 = icmp eq i32 %42, 0
  br i1 %cmp34, label %if.then36, label %if.end39

if.then36:                                        ; preds = %if.end33
  %43 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  %add.ptr37 = getelementptr inbounds %struct.sv*, %struct.sv** %43, i64 -1
  store %struct.sv** %add.ptr37, %struct.sv*** %sp, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %44, %struct.sv*** @PL_stack_sp, align 8
  %45 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next38 = getelementptr inbounds %struct.op, %struct.op* %45, i32 0, i32 0
  %46 = load %struct.op*, %struct.op** %op_next38, align 8
  store %struct.op* %46, %struct.op** %retval, align 8
  br label %return

if.end39:                                         ; preds = %if.end33
  %47 = load %struct.sv**, %struct.sv*** %firstlelem, align 8
  store %struct.sv** %47, %struct.sv*** %lelem, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end39
  %48 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %49 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  %cmp40 = icmp ule %struct.sv** %48, %49
  br i1 %cmp40, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %50 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  %sv_flags43 = getelementptr inbounds %struct.sv, %struct.sv* %51, i32 0, i32 2
  %52 = load i32, i32* %sv_flags43, align 4
  %and44 = and i32 %52, 2097408
  %cmp45 = icmp eq i32 %and44, 256
  br i1 %cmp45, label %cond.true47, label %cond.false51

cond.true47:                                      ; preds = %for.body
  %53 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %54 = load %struct.sv*, %struct.sv** %53, align 8
  %sv_any48 = getelementptr inbounds %struct.sv, %struct.sv* %54, i32 0, i32 0
  %55 = load i8*, i8** %sv_any48, align 8
  %56 = bitcast i8* %55 to %struct.xpviv*
  %xiv_u49 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %56, i32 0, i32 4
  %xivu_iv50 = bitcast %union._xivu* %xiv_u49 to i64*
  %57 = load i64, i64* %xivu_iv50, align 8
  br label %cond.end53

cond.false51:                                     ; preds = %for.body
  %58 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  %call52 = call i64 @Perl_sv_2iv_flags(%struct.sv* %59, i32 2)
  br label %cond.end53

cond.end53:                                       ; preds = %cond.false51, %cond.true47
  %cond54 = phi i64 [ %57, %cond.true47 ], [ %call52, %cond.false51 ]
  %conv55 = trunc i64 %cond54 to i32
  store i32 %conv55, i32* %ix42, align 4
  %60 = load i32, i32* %ix42, align 4
  %cmp56 = icmp slt i32 %60, 0
  br i1 %cmp56, label %if.then58, label %if.end60

if.then58:                                        ; preds = %cond.end53
  %61 = load i32, i32* %max, align 4
  %62 = load i32, i32* %ix42, align 4
  %add59 = add nsw i32 %62, %61
  store i32 %add59, i32* %ix42, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %cond.end53
  %63 = load i32, i32* %ix42, align 4
  %cmp61 = icmp slt i32 %63, 0
  br i1 %cmp61, label %if.then66, label %lor.lhs.false63

lor.lhs.false63:                                  ; preds = %if.end60
  %64 = load i32, i32* %ix42, align 4
  %65 = load i32, i32* %max, align 4
  %cmp64 = icmp sge i32 %64, %65
  br i1 %cmp64, label %if.then66, label %if.else67

if.then66:                                        ; preds = %lor.lhs.false63, %if.end60
  %66 = load %struct.sv**, %struct.sv*** %lelem, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %66, align 8
  br label %if.end84

if.else67:                                        ; preds = %lor.lhs.false63
  %67 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %68 = load i32, i32* %ix42, align 4
  %idxprom68 = sext i32 %68 to i64
  %arrayidx69 = getelementptr inbounds %struct.sv*, %struct.sv** %67, i64 %idxprom68
  %69 = load %struct.sv*, %struct.sv** %arrayidx69, align 8
  %70 = load %struct.sv**, %struct.sv*** %lelem, align 8
  store %struct.sv* %69, %struct.sv** %70, align 8
  %tobool70 = icmp ne %struct.sv* %69, null
  br i1 %tobool70, label %if.else72, label %if.then71

if.then71:                                        ; preds = %if.else67
  %71 = load %struct.sv**, %struct.sv*** %lelem, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %71, align 8
  br label %if.end83

if.else72:                                        ; preds = %if.else67
  %72 = load i8, i8* %mod, align 1
  %conv73 = zext i8 %72 to i32
  %tobool74 = icmp ne i32 %conv73, 0
  br i1 %tobool74, label %land.lhs.true, label %if.end82

land.lhs.true:                                    ; preds = %if.else72
  %73 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %74 = load %struct.sv*, %struct.sv** %73, align 8
  %sv_flags75 = getelementptr inbounds %struct.sv, %struct.sv* %74, i32 0, i32 2
  %75 = load i32, i32* %sv_flags75, align 4
  %and76 = and i32 %75, 131072
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.then78, label %if.end82

if.then78:                                        ; preds = %land.lhs.true
  %76 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %77 = load %struct.sv*, %struct.sv** %76, align 8
  %call79 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %77, i32 1538)
  %78 = load %struct.sv**, %struct.sv*** %firstrelem, align 8
  %79 = load i32, i32* %ix42, align 4
  %idxprom80 = sext i32 %79 to i64
  %arrayidx81 = getelementptr inbounds %struct.sv*, %struct.sv** %78, i64 %idxprom80
  store %struct.sv* %call79, %struct.sv** %arrayidx81, align 8
  %80 = load %struct.sv**, %struct.sv*** %lelem, align 8
  store %struct.sv* %call79, %struct.sv** %80, align 8
  br label %if.end82

if.end82:                                         ; preds = %if.then78, %land.lhs.true, %if.else72
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then71
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then66
  br label %for.inc

for.inc:                                          ; preds = %if.end84
  %81 = load %struct.sv**, %struct.sv*** %lelem, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %81, i32 1
  store %struct.sv** %incdec.ptr85, %struct.sv*** %lelem, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %82 = load %struct.sv**, %struct.sv*** %lastlelem, align 8
  store %struct.sv** %82, %struct.sv*** %sp, align 8
  %83 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %83, %struct.sv*** @PL_stack_sp, align 8
  %84 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next86 = getelementptr inbounds %struct.op, %struct.op* %84, i32 0, i32 0
  %85 = load %struct.op*, %struct.op** %op_next86, align 8
  store %struct.op* %85, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then36, %if.end32
  %86 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %86
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_anonlist() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %items = alloca i32, align 4
  %av = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %5 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %items, align 4
  %6 = load i32, i32* %items, align 4
  %conv1 = sext i32 %6 to i64
  %7 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr2 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i64 1
  %call = call %struct.av* @Perl_av_make(i64 %conv1, %struct.sv** %add.ptr2)
  %8 = bitcast %struct.av* %call to i8*
  %9 = bitcast i8* %8 to %struct.sv*
  store %struct.sv* %9, %struct.sv** %av, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %10, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  br label %do.body3

do.body3:                                         ; preds = %do.body
  %11 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast4 = ptrtoint %struct.sv** %11 to i64
  %sub.ptr.rhs.cast5 = ptrtoint %struct.sv** %12 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %sub.ptr.div7 = sdiv exact i64 %sub.ptr.sub6, 8
  %cmp = icmp slt i64 %sub.ptr.div7, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body3
  br i1 true, label %if.then, label %if.end

cond.false:                                       ; preds = %do.body3
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false, %cond.true
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call9 = call %struct.sv** @Perl_stack_grow(%struct.sv** %13, %struct.sv** %14, i64 1)
  store %struct.sv** %call9, %struct.sv*** %sp, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 5
  %17 = load i8, i8* %op_flags, align 2
  %conv10 = zext i8 %17 to i32
  %and = and i32 %conv10, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true11, label %cond.false13

cond.true11:                                      ; preds = %do.end
  %18 = load %struct.sv*, %struct.sv** %av, align 8
  %call12 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %18)
  br label %cond.end

cond.false13:                                     ; preds = %do.end
  %19 = load %struct.sv*, %struct.sv** %av, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false13, %cond.true11
  %cond = phi %struct.sv* [ %call12, %cond.true11 ], [ %19, %cond.false13 ]
  %call14 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %cond)
  %20 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr15 = getelementptr inbounds %struct.sv*, %struct.sv** %20, i32 1
  store %struct.sv** %incdec.ptr15, %struct.sv*** %sp, align 8
  store %struct.sv* %call14, %struct.sv** %incdec.ptr15, align 8
  br label %do.end16

do.end16:                                         ; preds = %cond.end
  %21 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %21, %struct.sv*** @PL_stack_sp, align 8
  %22 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %22, i32 0, i32 0
  %23 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %23
}

declare dso_local %struct.av* @Perl_av_make(i64, %struct.sv**) #1

declare dso_local %struct.sv* @Perl_newRV_noinc(%struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_anonhash() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %hv = alloca %struct.hv*, align 8
  %retval1 = alloca %struct.sv*, align 8
  %key = alloca %struct.sv*, align 8
  %val = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %call = call %struct.sv* @Perl_newSV_type(i32 12)
  %6 = bitcast %struct.sv* %call to i8*
  %7 = bitcast i8* %6 to %struct.hv*
  store %struct.hv* %7, %struct.hv** %hv, align 8
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 5
  %9 = load i8, i8* %op_flags, align 2
  %conv2 = zext i8 %9 to i32
  %and = and i32 %conv2, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %10 = load %struct.hv*, %struct.hv** %hv, align 8
  %11 = bitcast %struct.hv* %10 to i8*
  %12 = bitcast i8* %11 to %struct.sv*
  %call3 = call %struct.sv* @Perl_newRV_noinc(%struct.sv* %12)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %13 = load %struct.hv*, %struct.hv** %hv, align 8
  %14 = bitcast %struct.hv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.sv*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %call3, %cond.true ], [ %15, %cond.false ]
  %call4 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %cond)
  store %struct.sv* %call4, %struct.sv** %retval1, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %cond.end
  %16 = load %struct.sv**, %struct.sv*** %mark, align 8
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp = icmp ult %struct.sv** %16, %17
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %18, i32 1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %mark, align 8
  %19 = load %struct.sv**, %struct.sv*** %mark, align 8
  %20 = load %struct.sv*, %struct.sv** %19, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags, align 4
  %and7 = and i32 %21, 2097152
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %cond.true9, label %cond.false11

cond.true9:                                       ; preds = %while.body
  %22 = load %struct.sv**, %struct.sv*** %mark, align 8
  %23 = load %struct.sv*, %struct.sv** %22, align 8
  %call10 = call %struct.sv* @Perl_sv_mortalcopy_flags(%struct.sv* %23, i32 1538)
  br label %cond.end12

cond.false11:                                     ; preds = %while.body
  %24 = load %struct.sv**, %struct.sv*** %mark, align 8
  %25 = load %struct.sv*, %struct.sv** %24, align 8
  br label %cond.end12

cond.end12:                                       ; preds = %cond.false11, %cond.true9
  %cond13 = phi %struct.sv* [ %call10, %cond.true9 ], [ %25, %cond.false11 ]
  store %struct.sv* %cond13, %struct.sv** %key, align 8
  %26 = load %struct.sv**, %struct.sv*** %mark, align 8
  %27 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp14 = icmp ult %struct.sv** %26, %27
  br i1 %cmp14, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end12
  %28 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr16 = getelementptr inbounds %struct.sv*, %struct.sv** %28, i32 1
  store %struct.sv** %incdec.ptr16, %struct.sv*** %mark, align 8
  %29 = load %struct.sv**, %struct.sv*** %mark, align 8
  %30 = load %struct.sv*, %struct.sv** %29, align 8
  %sv_flags17 = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 2
  %31 = load i32, i32* %sv_flags17, align 4
  %and18 = and i32 %31, 2097152
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %cond.true20, label %cond.false21

cond.true20:                                      ; preds = %if.then
  br i1 true, label %land.rhs, label %land.end

cond.false21:                                     ; preds = %if.then
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false21, %cond.true20
  %32 = load %struct.sv**, %struct.sv*** %mark, align 8
  %33 = load %struct.sv*, %struct.sv** %32, align 8
  %call22 = call i32 @Perl_mg_get(%struct.sv* %33)
  %tobool23 = icmp ne i32 %call22, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false21, %cond.true20
  %34 = phi i1 [ false, %cond.false21 ], [ false, %cond.true20 ], [ %tobool23, %land.rhs ]
  %land.ext = zext i1 %34 to i32
  %call24 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call24, %struct.sv** %val, align 8
  %35 = load %struct.sv*, %struct.sv** %val, align 8
  %36 = load %struct.sv**, %struct.sv*** %mark, align 8
  %37 = load %struct.sv*, %struct.sv** %36, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %35, %struct.sv* %37, i32 1536)
  br label %if.end

if.else:                                          ; preds = %cond.end12
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.52, i64 0, i64 0))
  %call25 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call25, %struct.sv** %val, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %land.end
  %38 = load %struct.hv*, %struct.hv** %hv, align 8
  %39 = load %struct.sv*, %struct.sv** %key, align 8
  %40 = load %struct.sv*, %struct.sv** %val, align 8
  %call26 = call i8* @Perl_hv_common(%struct.hv* %38, %struct.sv* %39, i8* null, i64 0, i32 0, i32 4, %struct.sv* %40, i32 0)
  %41 = bitcast i8* %call26 to %struct.he*
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %42 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %43 = load i32, i32* %origmark, align 4
  %idx.ext27 = sext i32 %43 to i64
  %add.ptr28 = getelementptr inbounds %struct.sv*, %struct.sv** %42, i64 %idx.ext27
  store %struct.sv** %add.ptr28, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %while.end
  br label %do.body29

do.body29:                                        ; preds = %do.body
  %44 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast30 = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.rhs.cast31 = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.sub32 = sub i64 %sub.ptr.lhs.cast30, %sub.ptr.rhs.cast31
  %sub.ptr.div33 = sdiv exact i64 %sub.ptr.sub32, 8
  %cmp34 = icmp slt i64 %sub.ptr.div33, 1
  br i1 %cmp34, label %cond.true36, label %cond.false37

cond.true36:                                      ; preds = %do.body29
  br i1 true, label %if.then38, label %if.end40

cond.false37:                                     ; preds = %do.body29
  br i1 false, label %if.then38, label %if.end40

if.then38:                                        ; preds = %cond.false37, %cond.true36
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call39 = call %struct.sv** @Perl_stack_grow(%struct.sv** %46, %struct.sv** %47, i64 1)
  store %struct.sv** %call39, %struct.sv*** %sp, align 8
  %48 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %cond.false37, %cond.true36
  br label %do.end

do.end:                                           ; preds = %if.end40
  %49 = load %struct.sv*, %struct.sv** %retval1, align 8
  %50 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %50, i32 1
  store %struct.sv** %incdec.ptr41, %struct.sv*** %sp, align 8
  store %struct.sv* %49, %struct.sv** %incdec.ptr41, align 8
  br label %do.end42

do.end42:                                         ; preds = %do.end
  %51 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %51, %struct.sv*** @PL_stack_sp, align 8
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 0
  %53 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_splice() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %num_args = alloca i32, align 4
  %ary = alloca %struct.av*, align 8
  %src = alloca %struct.sv**, align 8
  %dst = alloca %struct.sv**, align 8
  %i = alloca i64, align 8
  %offset = alloca i64, align 8
  %length = alloca i64, align 8
  %newlen = alloca i64, align 8
  %after = alloca i64, align 8
  %diff = alloca i64, align 8
  %mg = alloca %struct.magic*, align 8
  %h = alloca %struct.sv*, align 8
  %tmparyval = alloca %struct.sv**, align 8
  %real = alloca i8, align 1
  %markoff = alloca i64, align 8
  %eMiX = alloca i64, align 8
  %tmparyval314 = alloca %struct.sv**, align 8
  %real424 = alloca i8, align 1
  %eMiX434 = alloca i64, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast1 = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.rhs.cast2 = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %sub.ptr.div4 = sdiv exact i64 %sub.ptr.sub3, 8
  %conv5 = trunc i64 %sub.ptr.div4 to i32
  store i32 %conv5, i32* %num_args, align 4
  %8 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %mark, align 8
  %9 = load %struct.sv*, %struct.sv** %incdec.ptr6, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.av*
  %12 = bitcast %struct.av* %11 to %struct.sv*
  store %struct.sv* %12, %struct.sv** @PL_Sv, align 8
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and = and i32 %14, 255
  %cmp = icmp eq i32 %and, 11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %16 = bitcast %struct.sv* %15 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %18 = bitcast %struct.sv* %17 to %struct.av*
  %call = call %struct.av* @S_deref_plain_array(%struct.av* %18)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %16, %cond.true ], [ %call, %cond.false ]
  store %struct.av* %cond, %struct.av** %ary, align 8
  %19 = load %struct.av*, %struct.av** %ary, align 8
  %20 = bitcast %struct.av* %19 to %struct.sv*
  %sv_flags8 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags8, align 4
  %and9 = and i32 %21, 8388608
  %tobool = icmp ne i32 %and9, 0
  br i1 %tobool, label %cond.true10, label %cond.false12

cond.true10:                                      ; preds = %cond.end
  %22 = load %struct.av*, %struct.av** %ary, align 8
  %23 = bitcast %struct.av* %22 to %struct.sv*
  %call11 = call %struct.magic* @Perl_mg_find(%struct.sv* %23, i32 80)
  br label %cond.end13

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.magic* [ %call11, %cond.true10 ], [ null, %cond.false12 ]
  store %struct.magic* %cond14, %struct.magic** %mg, align 8
  %24 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool15 = icmp ne %struct.magic* %24, null
  br i1 %tobool15, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end13
  %25 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 13), align 8
  %tobool16 = icmp ne %struct.sv* %25, null
  br i1 %tobool16, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %if.then
  %26 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 13), align 8
  br label %cond.end20

cond.false18:                                     ; preds = %if.then
  %call19 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53, i64 0, i64 0), i32 0)
  store %struct.sv* %call19, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 13), align 8
  br label %cond.end20

cond.end20:                                       ; preds = %cond.false18, %cond.true17
  %cond21 = phi %struct.sv* [ %26, %cond.true17 ], [ %call19, %cond.false18 ]
  %27 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr22 = getelementptr inbounds %struct.sv*, %struct.sv** %27, i64 -1
  %28 = load %struct.av*, %struct.av** %ary, align 8
  %29 = bitcast %struct.av* %28 to i8*
  %30 = bitcast i8* %29 to %struct.sv*
  %31 = load %struct.magic*, %struct.magic** %mg, align 8
  %32 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %32, i32 0, i32 5
  %33 = load i8, i8* %op_flags, align 2
  %conv23 = zext i8 %33 to i32
  %and24 = and i32 %conv23, 3
  %tobool25 = icmp ne i32 %and24, 0
  br i1 %tobool25, label %cond.true26, label %cond.false30

cond.true26:                                      ; preds = %cond.end20
  %34 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags27 = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 5
  %35 = load i8, i8* %op_flags27, align 2
  %conv28 = zext i8 %35 to i32
  %and29 = and i32 %conv28, 3
  br label %cond.end32

cond.false30:                                     ; preds = %cond.end20
  %call31 = call i32 @Perl_block_gimme()
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false30, %cond.true26
  %cond33 = phi i32 [ %and29, %cond.true26 ], [ %call31, %cond.false30 ]
  %or = or i32 %cond33, 8
  %36 = load %struct.sv**, %struct.sv*** %sp, align 8
  %37 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast34 = ptrtoint %struct.sv** %36 to i64
  %sub.ptr.rhs.cast35 = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %sub.ptr.div37 = sdiv exact i64 %sub.ptr.sub36, 8
  %conv38 = trunc i64 %sub.ptr.div37 to i32
  %call39 = call %struct.op* (%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) @Perl_tied_method(%struct.sv* %cond21, %struct.sv** %add.ptr22, %struct.sv* %30, %struct.magic* %31, i32 %or, i32 %conv38)
  store %struct.op* %call39, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end13
  %38 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr40 = getelementptr inbounds %struct.sv*, %struct.sv** %38, i32 1
  store %struct.sv** %incdec.ptr40, %struct.sv*** %sp, align 8
  %39 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr41 = getelementptr inbounds %struct.sv*, %struct.sv** %39, i32 1
  store %struct.sv** %incdec.ptr41, %struct.sv*** %mark, align 8
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp42 = icmp ult %struct.sv** %incdec.ptr41, %40
  br i1 %cmp42, label %if.then44, label %if.else97

if.then44:                                        ; preds = %if.end
  %41 = load %struct.sv**, %struct.sv*** %mark, align 8
  %42 = load %struct.sv*, %struct.sv** %41, align 8
  %sv_flags45 = getelementptr inbounds %struct.sv, %struct.sv* %42, i32 0, i32 2
  %43 = load i32, i32* %sv_flags45, align 4
  %and46 = and i32 %43, 2097408
  %cmp47 = icmp eq i32 %and46, 256
  br i1 %cmp47, label %cond.true49, label %cond.false50

cond.true49:                                      ; preds = %if.then44
  %44 = load %struct.sv**, %struct.sv*** %mark, align 8
  %45 = load %struct.sv*, %struct.sv** %44, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %45, i32 0, i32 0
  %46 = load i8*, i8** %sv_any, align 8
  %47 = bitcast i8* %46 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %47, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %48 = load i64, i64* %xivu_iv, align 8
  br label %cond.end52

cond.false50:                                     ; preds = %if.then44
  %49 = load %struct.sv**, %struct.sv*** %mark, align 8
  %50 = load %struct.sv*, %struct.sv** %49, align 8
  %call51 = call i64 @Perl_sv_2iv_flags(%struct.sv* %50, i32 2)
  br label %cond.end52

cond.end52:                                       ; preds = %cond.false50, %cond.true49
  %cond53 = phi i64 [ %48, %cond.true49 ], [ %call51, %cond.false50 ]
  store i64 %cond53, i64* %i, align 8
  store i64 %cond53, i64* %offset, align 8
  %51 = load i64, i64* %offset, align 8
  %cmp54 = icmp slt i64 %51, 0
  br i1 %cmp54, label %if.then56, label %if.end59

if.then56:                                        ; preds = %cond.end52
  %52 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any57 = getelementptr inbounds %struct.av, %struct.av* %52, i32 0, i32 0
  %53 = load %struct.xpvav*, %struct.xpvav** %sv_any57, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %53, i32 0, i32 2
  %54 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %54, 1
  %55 = load i64, i64* %offset, align 8
  %add58 = add nsw i64 %55, %add
  store i64 %add58, i64* %offset, align 8
  br label %if.end59

if.end59:                                         ; preds = %if.then56, %cond.end52
  %56 = load i64, i64* %offset, align 8
  %cmp60 = icmp slt i64 %56, 0
  br i1 %cmp60, label %if.then62, label %if.end64

if.then62:                                        ; preds = %if.end59
  %57 = load i64, i64* %i, align 8
  %call63 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %57)
  store %struct.op* %call63, %struct.op** %retval, align 8
  br label %return

if.end64:                                         ; preds = %if.end59
  %58 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %58, i32 1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %mark, align 8
  %59 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp66 = icmp ult %struct.sv** %incdec.ptr65, %59
  br i1 %cmp66, label %if.then68, label %if.else

if.then68:                                        ; preds = %if.end64
  %60 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr69 = getelementptr inbounds %struct.sv*, %struct.sv** %60, i32 1
  store %struct.sv** %incdec.ptr69, %struct.sv*** %mark, align 8
  %61 = load %struct.sv*, %struct.sv** %60, align 8
  store %struct.sv* %61, %struct.sv** @PL_Sv, align 8
  %62 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags70 = getelementptr inbounds %struct.sv, %struct.sv* %62, i32 0, i32 2
  %63 = load i32, i32* %sv_flags70, align 4
  %and71 = and i32 %63, 2097408
  %cmp72 = icmp eq i32 %and71, 256
  br i1 %cmp72, label %cond.true74, label %cond.false78

cond.true74:                                      ; preds = %if.then68
  %64 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any75 = getelementptr inbounds %struct.sv, %struct.sv* %64, i32 0, i32 0
  %65 = load i8*, i8** %sv_any75, align 8
  %66 = bitcast i8* %65 to %struct.xpviv*
  %xiv_u76 = getelementptr inbounds %struct.xpviv, %struct.xpviv* %66, i32 0, i32 4
  %xivu_iv77 = bitcast %union._xivu* %xiv_u76 to i64*
  %67 = load i64, i64* %xivu_iv77, align 8
  br label %cond.end80

cond.false78:                                     ; preds = %if.then68
  %68 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call79 = call i64 @Perl_sv_2iv_flags(%struct.sv* %68, i32 2)
  br label %cond.end80

cond.end80:                                       ; preds = %cond.false78, %cond.true74
  %cond81 = phi i64 [ %67, %cond.true74 ], [ %call79, %cond.false78 ]
  store i64 %cond81, i64* %length, align 8
  %69 = load i64, i64* %length, align 8
  %cmp82 = icmp slt i64 %69, 0
  br i1 %cmp82, label %if.then84, label %if.end93

if.then84:                                        ; preds = %cond.end80
  %70 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any85 = getelementptr inbounds %struct.av, %struct.av* %70, i32 0, i32 0
  %71 = load %struct.xpvav*, %struct.xpvav** %sv_any85, align 8
  %xav_fill86 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %71, i32 0, i32 2
  %72 = load i64, i64* %xav_fill86, align 8
  %73 = load i64, i64* %offset, align 8
  %sub = sub nsw i64 %72, %73
  %add87 = add nsw i64 %sub, 1
  %74 = load i64, i64* %length, align 8
  %add88 = add nsw i64 %74, %add87
  store i64 %add88, i64* %length, align 8
  %75 = load i64, i64* %length, align 8
  %cmp89 = icmp slt i64 %75, 0
  br i1 %cmp89, label %if.then91, label %if.end92

if.then91:                                        ; preds = %if.then84
  store i64 0, i64* %length, align 8
  br label %if.end92

if.end92:                                         ; preds = %if.then91, %if.then84
  br label %if.end93

if.end93:                                         ; preds = %if.end92, %cond.end80
  br label %if.end96

if.else:                                          ; preds = %if.end64
  %76 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any94 = getelementptr inbounds %struct.av, %struct.av* %76, i32 0, i32 0
  %77 = load %struct.xpvav*, %struct.xpvav** %sv_any94, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %77, i32 0, i32 3
  %78 = load i64, i64* %xav_max, align 8
  %add95 = add nsw i64 %78, 1
  store i64 %add95, i64* %length, align 8
  br label %if.end96

if.end96:                                         ; preds = %if.else, %if.end93
  br label %if.end101

if.else97:                                        ; preds = %if.end
  store i64 0, i64* %offset, align 8
  %79 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any98 = getelementptr inbounds %struct.av, %struct.av* %79, i32 0, i32 0
  %80 = load %struct.xpvav*, %struct.xpvav** %sv_any98, align 8
  %xav_max99 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %80, i32 0, i32 3
  %81 = load i64, i64* %xav_max99, align 8
  %add100 = add nsw i64 %81, 1
  store i64 %add100, i64* %length, align 8
  br label %if.end101

if.end101:                                        ; preds = %if.else97, %if.end96
  %82 = load i64, i64* %offset, align 8
  %83 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any102 = getelementptr inbounds %struct.av, %struct.av* %83, i32 0, i32 0
  %84 = load %struct.xpvav*, %struct.xpvav** %sv_any102, align 8
  %xav_fill103 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %84, i32 0, i32 2
  %85 = load i64, i64* %xav_fill103, align 8
  %add104 = add nsw i64 %85, 1
  %cmp105 = icmp sgt i64 %82, %add104
  br i1 %cmp105, label %if.then107, label %if.end115

if.then107:                                       ; preds = %if.end101
  %86 = load i32, i32* %num_args, align 4
  %cmp108 = icmp sgt i32 %86, 2
  br i1 %cmp108, label %if.then110, label %if.end111

if.then110:                                       ; preds = %if.then107
  call void (i32, i8*, ...) @Perl_ck_warner(i32 12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.54, i64 0, i64 0))
  br label %if.end111

if.end111:                                        ; preds = %if.then110, %if.then107
  %87 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any112 = getelementptr inbounds %struct.av, %struct.av* %87, i32 0, i32 0
  %88 = load %struct.xpvav*, %struct.xpvav** %sv_any112, align 8
  %xav_fill113 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %88, i32 0, i32 2
  %89 = load i64, i64* %xav_fill113, align 8
  %add114 = add nsw i64 %89, 1
  store i64 %add114, i64* %offset, align 8
  br label %if.end115

if.end115:                                        ; preds = %if.end111, %if.end101
  %90 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any116 = getelementptr inbounds %struct.av, %struct.av* %90, i32 0, i32 0
  %91 = load %struct.xpvav*, %struct.xpvav** %sv_any116, align 8
  %xav_fill117 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %91, i32 0, i32 2
  %92 = load i64, i64* %xav_fill117, align 8
  %add118 = add nsw i64 %92, 1
  %93 = load i64, i64* %offset, align 8
  %94 = load i64, i64* %length, align 8
  %add119 = add nsw i64 %93, %94
  %sub120 = sub nsw i64 %add118, %add119
  store i64 %sub120, i64* %after, align 8
  %95 = load i64, i64* %after, align 8
  %cmp121 = icmp slt i64 %95, 0
  br i1 %cmp121, label %if.then123, label %if.end129

if.then123:                                       ; preds = %if.end115
  %96 = load i64, i64* %after, align 8
  %97 = load i64, i64* %length, align 8
  %add124 = add nsw i64 %97, %96
  store i64 %add124, i64* %length, align 8
  store i64 0, i64* %after, align 8
  %98 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any125 = getelementptr inbounds %struct.av, %struct.av* %98, i32 0, i32 0
  %99 = load %struct.xpvav*, %struct.xpvav** %sv_any125, align 8
  %xav_alloc = getelementptr inbounds %struct.xpvav, %struct.xpvav* %99, i32 0, i32 4
  %100 = load %struct.sv**, %struct.sv*** %xav_alloc, align 8
  %tobool126 = icmp ne %struct.sv** %100, null
  br i1 %tobool126, label %if.end128, label %if.then127

if.then127:                                       ; preds = %if.then123
  %101 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_extend(%struct.av* %101, i64 0)
  br label %if.end128

if.end128:                                        ; preds = %if.then127, %if.then123
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end115
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  %103 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast130 = ptrtoint %struct.sv** %102 to i64
  %sub.ptr.rhs.cast131 = ptrtoint %struct.sv** %103 to i64
  %sub.ptr.sub132 = sub i64 %sub.ptr.lhs.cast130, %sub.ptr.rhs.cast131
  %sub.ptr.div133 = sdiv exact i64 %sub.ptr.sub132, 8
  store i64 %sub.ptr.div133, i64* %newlen, align 8
  %104 = load i64, i64* %newlen, align 8
  %105 = load i64, i64* %length, align 8
  %sub134 = sub nsw i64 %104, %105
  store i64 %sub134, i64* %diff, align 8
  %106 = load i64, i64* %newlen, align 8
  %tobool135 = icmp ne i64 %106, 0
  br i1 %tobool135, label %land.lhs.true, label %if.end144

land.lhs.true:                                    ; preds = %if.end129
  %107 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags136 = getelementptr inbounds %struct.av, %struct.av* %107, i32 0, i32 2
  %108 = load i32, i32* %sv_flags136, align 4
  %and137 = and i32 %108, 1073741824
  %tobool138 = icmp ne i32 %and137, 0
  br i1 %tobool138, label %if.end144, label %land.lhs.true139

land.lhs.true139:                                 ; preds = %land.lhs.true
  %109 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags140 = getelementptr inbounds %struct.av, %struct.av* %109, i32 0, i32 2
  %110 = load i32, i32* %sv_flags140, align 4
  %and141 = and i32 %110, -2147483648
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %if.then143, label %if.end144

if.then143:                                       ; preds = %land.lhs.true139
  %111 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_reify(%struct.av* %111)
  br label %if.end144

if.end144:                                        ; preds = %if.then143, %land.lhs.true139, %land.lhs.true, %if.end129
  %112 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %112, %struct.sv*** %dst, align 8
  %113 = load i64, i64* %newlen, align 8
  store i64 %113, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end144
  %114 = load i64, i64* %i, align 8
  %tobool145 = icmp ne i64 %114, 0
  br i1 %tobool145, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %115 = load %struct.sv**, %struct.sv*** %dst, align 8
  %116 = load %struct.sv*, %struct.sv** %115, align 8
  store %struct.sv* %116, %struct.sv** %h, align 8
  %117 = load %struct.sv*, %struct.sv** %h, align 8
  %call146 = call %struct.sv* @Perl_newSVsv(%struct.sv* %117)
  %118 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr147 = getelementptr inbounds %struct.sv*, %struct.sv** %118, i32 1
  store %struct.sv** %incdec.ptr147, %struct.sv*** %dst, align 8
  store %struct.sv* %call146, %struct.sv** %118, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %119 = load i64, i64* %i, align 8
  %dec = add nsw i64 %119, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %120 = load i64, i64* %diff, align 8
  %cmp148 = icmp slt i64 %120, 0
  br i1 %cmp148, label %if.then150, label %if.else313

if.then150:                                       ; preds = %for.end
  store %struct.sv** null, %struct.sv*** %tmparyval, align 8
  %121 = load i64, i64* %newlen, align 8
  %tobool151 = icmp ne i64 %121, 0
  br i1 %tobool151, label %if.then152, label %if.end155

if.then152:                                       ; preds = %if.then150
  %122 = load i64, i64* %newlen, align 8
  %mul = mul i64 %122, 8
  %call153 = call i8* @Perl_safesysmalloc(i64 %mul)
  %123 = bitcast i8* %call153 to %struct.sv**
  store %struct.sv** %123, %struct.sv*** %tmparyval, align 8
  %124 = load %struct.sv**, %struct.sv*** %tmparyval, align 8
  %125 = bitcast %struct.sv** %124 to i8*
  %126 = load %struct.sv**, %struct.sv*** %mark, align 8
  %127 = bitcast %struct.sv** %126 to i8*
  %128 = load i64, i64* %newlen, align 8
  %mul154 = mul i64 %128, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %127, i64 %mul154, i1 false)
  br label %if.end155

if.end155:                                        ; preds = %if.then152, %if.then150
  %129 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %130 = load i32, i32* %origmark, align 4
  %idx.ext156 = sext i32 %130 to i64
  %add.ptr157 = getelementptr inbounds %struct.sv*, %struct.sv** %129, i64 %idx.ext156
  %add.ptr158 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr157, i64 1
  store %struct.sv** %add.ptr158, %struct.sv*** %mark, align 8
  %131 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags159 = getelementptr inbounds %struct.op, %struct.op* %131, i32 0, i32 5
  %132 = load i8, i8* %op_flags159, align 2
  %conv160 = zext i8 %132 to i32
  %and161 = and i32 %conv160, 3
  %tobool162 = icmp ne i32 %and161, 0
  br i1 %tobool162, label %cond.true163, label %cond.false167

cond.true163:                                     ; preds = %if.end155
  %133 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags164 = getelementptr inbounds %struct.op, %struct.op* %133, i32 0, i32 5
  %134 = load i8, i8* %op_flags164, align 2
  %conv165 = zext i8 %134 to i32
  %and166 = and i32 %conv165, 3
  br label %cond.end169

cond.false167:                                    ; preds = %if.end155
  %call168 = call i32 @Perl_block_gimme()
  br label %cond.end169

cond.end169:                                      ; preds = %cond.false167, %cond.true163
  %cond170 = phi i32 [ %and166, %cond.true163 ], [ %call168, %cond.false167 ]
  %cmp171 = icmp eq i32 %cond170, 3
  br i1 %cmp171, label %if.then173, label %if.else226

if.then173:                                       ; preds = %cond.end169
  %135 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags174 = getelementptr inbounds %struct.av, %struct.av* %135, i32 0, i32 2
  %136 = load i32, i32* %sv_flags174, align 4
  %and175 = and i32 %136, 1073741824
  %tobool176 = icmp ne i32 %and175, 0
  %137 = zext i1 %tobool176 to i64
  %cond177 = select i1 %tobool176, i32 1, i32 0
  %tobool178 = icmp ne i32 %cond177, 0
  %frombool = zext i1 %tobool178 to i8
  store i8 %frombool, i8* %real, align 1
  br label %do.body

do.body:                                          ; preds = %if.then173
  %138 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %139 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast179 = ptrtoint %struct.sv** %138 to i64
  %sub.ptr.rhs.cast180 = ptrtoint %struct.sv** %139 to i64
  %sub.ptr.sub181 = sub i64 %sub.ptr.lhs.cast179, %sub.ptr.rhs.cast180
  %sub.ptr.div182 = sdiv exact i64 %sub.ptr.sub181, 8
  %140 = load i64, i64* %length, align 8
  %cmp183 = icmp slt i64 %sub.ptr.div182, %140
  br i1 %cmp183, label %cond.true185, label %cond.false186

cond.true185:                                     ; preds = %do.body
  br i1 true, label %if.then187, label %if.end194

cond.false186:                                    ; preds = %do.body
  br i1 false, label %if.then187, label %if.end194

if.then187:                                       ; preds = %cond.false186, %cond.true185
  %141 = load %struct.sv**, %struct.sv*** %mark, align 8
  %142 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast188 = ptrtoint %struct.sv** %141 to i64
  %sub.ptr.rhs.cast189 = ptrtoint %struct.sv** %142 to i64
  %sub.ptr.sub190 = sub i64 %sub.ptr.lhs.cast188, %sub.ptr.rhs.cast189
  %sub.ptr.div191 = sdiv exact i64 %sub.ptr.sub190, 8
  store i64 %sub.ptr.div191, i64* %markoff, align 8
  %143 = load %struct.sv**, %struct.sv*** %sp, align 8
  %144 = load %struct.sv**, %struct.sv*** %mark, align 8
  %145 = load i64, i64* %length, align 8
  %call192 = call %struct.sv** @Perl_stack_grow(%struct.sv** %143, %struct.sv** %144, i64 %145)
  store %struct.sv** %call192, %struct.sv*** %sp, align 8
  %146 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %147 = load i64, i64* %markoff, align 8
  %add.ptr193 = getelementptr inbounds %struct.sv*, %struct.sv** %146, i64 %147
  store %struct.sv** %add.ptr193, %struct.sv*** %mark, align 8
  %148 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end194

if.end194:                                        ; preds = %if.then187, %cond.false186, %cond.true185
  br label %do.end

do.end:                                           ; preds = %if.end194
  %149 = load i8, i8* %real, align 1
  %tobool195 = trunc i8 %149 to i1
  br i1 %tobool195, label %if.then196, label %if.end207

if.then196:                                       ; preds = %do.end
  br label %do.body197

do.body197:                                       ; preds = %if.then196
  %150 = load i64, i64* @PL_tmps_ix, align 8
  %151 = load i64, i64* %length, align 8
  %add198 = add nsw i64 %150, %151
  store i64 %add198, i64* %eMiX, align 8
  %152 = load i64, i64* %eMiX, align 8
  %153 = load i64, i64* @PL_tmps_max, align 8
  %cmp199 = icmp sge i64 %152, %153
  br i1 %cmp199, label %cond.true201, label %cond.false202

cond.true201:                                     ; preds = %do.body197
  br i1 true, label %if.then203, label %if.end205

cond.false202:                                    ; preds = %do.body197
  br i1 false, label %if.then203, label %if.end205

if.then203:                                       ; preds = %cond.false202, %cond.true201
  %154 = load i64, i64* %eMiX, align 8
  %call204 = call i64 @Perl_tmps_grow_p(i64 %154)
  br label %if.end205

if.end205:                                        ; preds = %if.then203, %cond.false202, %cond.true201
  br label %do.end206

do.end206:                                        ; preds = %if.end205
  br label %if.end207

if.end207:                                        ; preds = %do.end206, %do.end
  store i64 0, i64* %i, align 8
  %155 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %155, %struct.sv*** %dst, align 8
  br label %for.cond208

for.cond208:                                      ; preds = %for.inc222, %if.end207
  %156 = load i64, i64* %i, align 8
  %157 = load i64, i64* %length, align 8
  %cmp209 = icmp slt i64 %156, %157
  br i1 %cmp209, label %for.body211, label %for.end223

for.body211:                                      ; preds = %for.cond208
  %158 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %158, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u to %struct.sv***
  %159 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %160 = load i64, i64* %i, align 8
  %161 = load i64, i64* %offset, align 8
  %add212 = add nsw i64 %160, %161
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %159, i64 %add212
  %162 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %163 = load %struct.sv**, %struct.sv*** %dst, align 8
  store %struct.sv* %162, %struct.sv** %163, align 8
  %tobool213 = icmp ne %struct.sv* %162, null
  br i1 %tobool213, label %if.then214, label %if.else219

if.then214:                                       ; preds = %for.body211
  %164 = load i8, i8* %real, align 1
  %tobool215 = trunc i8 %164 to i1
  br i1 %tobool215, label %if.then216, label %if.end218

if.then216:                                       ; preds = %if.then214
  %165 = load %struct.sv**, %struct.sv*** %dst, align 8
  %166 = load %struct.sv*, %struct.sv** %165, align 8
  %call217 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %166)
  br label %if.end218

if.end218:                                        ; preds = %if.then216, %if.then214
  br label %if.end220

if.else219:                                       ; preds = %for.body211
  %167 = load %struct.sv**, %struct.sv*** %dst, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %167, align 8
  br label %if.end220

if.end220:                                        ; preds = %if.else219, %if.end218
  %168 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr221 = getelementptr inbounds %struct.sv*, %struct.sv** %168, i32 1
  store %struct.sv** %incdec.ptr221, %struct.sv*** %dst, align 8
  br label %for.inc222

for.inc222:                                       ; preds = %if.end220
  %169 = load i64, i64* %i, align 8
  %inc = add nsw i64 %169, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond208

for.end223:                                       ; preds = %for.cond208
  %170 = load i64, i64* %length, align 8
  %sub224 = sub nsw i64 %170, 1
  %171 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr225 = getelementptr inbounds %struct.sv*, %struct.sv** %171, i64 %sub224
  store %struct.sv** %add.ptr225, %struct.sv*** %mark, align 8
  br label %if.end250

if.else226:                                       ; preds = %cond.end169
  %172 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u227 = getelementptr inbounds %struct.av, %struct.av* %172, i32 0, i32 3
  %svu_array228 = bitcast %union.anon.0* %sv_u227 to %struct.sv***
  %173 = load %struct.sv**, %struct.sv*** %svu_array228, align 8
  %174 = load i64, i64* %offset, align 8
  %175 = load i64, i64* %length, align 8
  %add229 = add nsw i64 %174, %175
  %sub230 = sub nsw i64 %add229, 1
  %arrayidx231 = getelementptr inbounds %struct.sv*, %struct.sv** %173, i64 %sub230
  %176 = load %struct.sv*, %struct.sv** %arrayidx231, align 8
  %177 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %176, %struct.sv** %177, align 8
  %178 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags232 = getelementptr inbounds %struct.av, %struct.av* %178, i32 0, i32 2
  %179 = load i32, i32* %sv_flags232, align 4
  %and233 = and i32 %179, 1073741824
  %tobool234 = icmp ne i32 %and233, 0
  br i1 %tobool234, label %if.then235, label %if.end249

if.then235:                                       ; preds = %if.else226
  %180 = load %struct.sv**, %struct.sv*** %mark, align 8
  %181 = load %struct.sv*, %struct.sv** %180, align 8
  %call236 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %181)
  %182 = load i64, i64* %length, align 8
  %sub237 = sub nsw i64 %182, 1
  store i64 %sub237, i64* %i, align 8
  %183 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u238 = getelementptr inbounds %struct.av, %struct.av* %183, i32 0, i32 3
  %svu_array239 = bitcast %union.anon.0* %sv_u238 to %struct.sv***
  %184 = load %struct.sv**, %struct.sv*** %svu_array239, align 8
  %185 = load i64, i64* %offset, align 8
  %arrayidx240 = getelementptr inbounds %struct.sv*, %struct.sv** %184, i64 %185
  store %struct.sv** %arrayidx240, %struct.sv*** %dst, align 8
  br label %for.cond241

for.cond241:                                      ; preds = %for.inc246, %if.then235
  %186 = load i64, i64* %i, align 8
  %cmp242 = icmp sgt i64 %186, 0
  br i1 %cmp242, label %for.body244, label %for.end248

for.body244:                                      ; preds = %for.cond241
  %187 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr245 = getelementptr inbounds %struct.sv*, %struct.sv** %187, i32 1
  store %struct.sv** %incdec.ptr245, %struct.sv*** %dst, align 8
  %188 = load %struct.sv*, %struct.sv** %187, align 8
  %189 = bitcast %struct.sv* %188 to i8*
  %190 = bitcast i8* %189 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %190)
  br label %for.inc246

for.inc246:                                       ; preds = %for.body244
  %191 = load i64, i64* %i, align 8
  %dec247 = add nsw i64 %191, -1
  store i64 %dec247, i64* %i, align 8
  br label %for.cond241

for.end248:                                       ; preds = %for.cond241
  br label %if.end249

if.end249:                                        ; preds = %for.end248, %if.else226
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %for.end223
  %192 = load i64, i64* %diff, align 8
  %193 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any251 = getelementptr inbounds %struct.av, %struct.av* %193, i32 0, i32 0
  %194 = load %struct.xpvav*, %struct.xpvav** %sv_any251, align 8
  %xav_fill252 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %194, i32 0, i32 2
  %195 = load i64, i64* %xav_fill252, align 8
  %add253 = add nsw i64 %195, %192
  store i64 %add253, i64* %xav_fill252, align 8
  %196 = load i64, i64* %offset, align 8
  %197 = load i64, i64* %after, align 8
  %cmp254 = icmp slt i64 %196, %197
  br i1 %cmp254, label %if.then256, label %if.else285

if.then256:                                       ; preds = %if.end250
  %198 = load i64, i64* %offset, align 8
  %tobool257 = icmp ne i64 %198, 0
  br i1 %tobool257, label %if.then258, label %if.end273

if.then258:                                       ; preds = %if.then256
  %199 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u259 = getelementptr inbounds %struct.av, %struct.av* %199, i32 0, i32 3
  %svu_array260 = bitcast %union.anon.0* %sv_u259 to %struct.sv***
  %200 = load %struct.sv**, %struct.sv*** %svu_array260, align 8
  %201 = load i64, i64* %offset, align 8
  %sub261 = sub nsw i64 %201, 1
  %arrayidx262 = getelementptr inbounds %struct.sv*, %struct.sv** %200, i64 %sub261
  store %struct.sv** %arrayidx262, %struct.sv*** %src, align 8
  %202 = load %struct.sv**, %struct.sv*** %src, align 8
  %203 = load i64, i64* %diff, align 8
  %idx.neg = sub i64 0, %203
  %add.ptr263 = getelementptr inbounds %struct.sv*, %struct.sv** %202, i64 %idx.neg
  store %struct.sv** %add.ptr263, %struct.sv*** %dst, align 8
  %204 = load i64, i64* %offset, align 8
  store i64 %204, i64* %i, align 8
  br label %for.cond264

for.cond264:                                      ; preds = %for.inc270, %if.then258
  %205 = load i64, i64* %i, align 8
  %cmp265 = icmp sgt i64 %205, 0
  br i1 %cmp265, label %for.body267, label %for.end272

for.body267:                                      ; preds = %for.cond264
  %206 = load %struct.sv**, %struct.sv*** %src, align 8
  %incdec.ptr268 = getelementptr inbounds %struct.sv*, %struct.sv** %206, i32 -1
  store %struct.sv** %incdec.ptr268, %struct.sv*** %src, align 8
  %207 = load %struct.sv*, %struct.sv** %206, align 8
  %208 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr269 = getelementptr inbounds %struct.sv*, %struct.sv** %208, i32 -1
  store %struct.sv** %incdec.ptr269, %struct.sv*** %dst, align 8
  store %struct.sv* %207, %struct.sv** %208, align 8
  br label %for.inc270

for.inc270:                                       ; preds = %for.body267
  %209 = load i64, i64* %i, align 8
  %dec271 = add nsw i64 %209, -1
  store i64 %dec271, i64* %i, align 8
  br label %for.cond264

for.end272:                                       ; preds = %for.cond264
  br label %if.end273

if.end273:                                        ; preds = %for.end272, %if.then256
  %210 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u274 = getelementptr inbounds %struct.av, %struct.av* %210, i32 0, i32 3
  %svu_array275 = bitcast %union.anon.0* %sv_u274 to %struct.sv***
  %211 = load %struct.sv**, %struct.sv*** %svu_array275, align 8
  store %struct.sv** %211, %struct.sv*** %dst, align 8
  %212 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u276 = getelementptr inbounds %struct.av, %struct.av* %212, i32 0, i32 3
  %svu_array277 = bitcast %union.anon.0* %sv_u276 to %struct.sv***
  %213 = load %struct.sv**, %struct.sv*** %svu_array277, align 8
  %214 = load i64, i64* %diff, align 8
  %idx.neg278 = sub i64 0, %214
  %add.ptr279 = getelementptr inbounds %struct.sv*, %struct.sv** %213, i64 %idx.neg278
  %215 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u280 = getelementptr inbounds %struct.av, %struct.av* %215, i32 0, i32 3
  %svu_array281 = bitcast %union.anon.0* %sv_u280 to %struct.sv***
  store %struct.sv** %add.ptr279, %struct.sv*** %svu_array281, align 8
  %216 = load i64, i64* %diff, align 8
  %217 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any282 = getelementptr inbounds %struct.av, %struct.av* %217, i32 0, i32 0
  %218 = load %struct.xpvav*, %struct.xpvav** %sv_any282, align 8
  %xav_max283 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %218, i32 0, i32 3
  %219 = load i64, i64* %xav_max283, align 8
  %add284 = add nsw i64 %219, %216
  store i64 %add284, i64* %xav_max283, align 8
  br label %if.end301

if.else285:                                       ; preds = %if.end250
  %220 = load i64, i64* %after, align 8
  %tobool286 = icmp ne i64 %220, 0
  br i1 %tobool286, label %if.then287, label %if.end294

if.then287:                                       ; preds = %if.else285
  %221 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u288 = getelementptr inbounds %struct.av, %struct.av* %221, i32 0, i32 3
  %svu_array289 = bitcast %union.anon.0* %sv_u288 to %struct.sv***
  %222 = load %struct.sv**, %struct.sv*** %svu_array289, align 8
  %223 = load i64, i64* %offset, align 8
  %add.ptr290 = getelementptr inbounds %struct.sv*, %struct.sv** %222, i64 %223
  %224 = load i64, i64* %length, align 8
  %add.ptr291 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr290, i64 %224
  store %struct.sv** %add.ptr291, %struct.sv*** %src, align 8
  %225 = load %struct.sv**, %struct.sv*** %src, align 8
  %226 = load i64, i64* %diff, align 8
  %add.ptr292 = getelementptr inbounds %struct.sv*, %struct.sv** %225, i64 %226
  store %struct.sv** %add.ptr292, %struct.sv*** %dst, align 8
  %227 = load %struct.sv**, %struct.sv*** %dst, align 8
  %228 = bitcast %struct.sv** %227 to i8*
  %229 = load %struct.sv**, %struct.sv*** %src, align 8
  %230 = bitcast %struct.sv** %229 to i8*
  %231 = load i64, i64* %after, align 8
  %mul293 = mul i64 %231, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %228, i8* align 1 %230, i64 %mul293, i1 false)
  br label %if.end294

if.end294:                                        ; preds = %if.then287, %if.else285
  %232 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u295 = getelementptr inbounds %struct.av, %struct.av* %232, i32 0, i32 3
  %svu_array296 = bitcast %union.anon.0* %sv_u295 to %struct.sv***
  %233 = load %struct.sv**, %struct.sv*** %svu_array296, align 8
  %234 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any297 = getelementptr inbounds %struct.av, %struct.av* %234, i32 0, i32 0
  %235 = load %struct.xpvav*, %struct.xpvav** %sv_any297, align 8
  %xav_fill298 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %235, i32 0, i32 2
  %236 = load i64, i64* %xav_fill298, align 8
  %add299 = add nsw i64 %236, 1
  %arrayidx300 = getelementptr inbounds %struct.sv*, %struct.sv** %233, i64 %add299
  store %struct.sv** %arrayidx300, %struct.sv*** %dst, align 8
  br label %if.end301

if.end301:                                        ; preds = %if.end294, %if.end273
  %237 = load i64, i64* %diff, align 8
  %sub302 = sub nsw i64 0, %237
  store i64 %sub302, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end301
  %238 = load i64, i64* %i, align 8
  %tobool303 = icmp ne i64 %238, 0
  br i1 %tobool303, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %239 = load %struct.sv**, %struct.sv*** %dst, align 8
  %240 = load i64, i64* %i, align 8
  %dec304 = add nsw i64 %240, -1
  store i64 %dec304, i64* %i, align 8
  %arrayidx305 = getelementptr inbounds %struct.sv*, %struct.sv** %239, i64 %dec304
  store %struct.sv* null, %struct.sv** %arrayidx305, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %241 = load i64, i64* %newlen, align 8
  %tobool306 = icmp ne i64 %241, 0
  br i1 %tobool306, label %if.then307, label %if.end312

if.then307:                                       ; preds = %while.end
  %242 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u308 = getelementptr inbounds %struct.av, %struct.av* %242, i32 0, i32 3
  %svu_array309 = bitcast %union.anon.0* %sv_u308 to %struct.sv***
  %243 = load %struct.sv**, %struct.sv*** %svu_array309, align 8
  %244 = load i64, i64* %offset, align 8
  %add.ptr310 = getelementptr inbounds %struct.sv*, %struct.sv** %243, i64 %244
  %245 = bitcast %struct.sv** %add.ptr310 to i8*
  %246 = load %struct.sv**, %struct.sv*** %tmparyval, align 8
  %247 = bitcast %struct.sv** %246 to i8*
  %248 = load i64, i64* %newlen, align 8
  %mul311 = mul i64 %248, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %245, i8* align 1 %247, i64 %mul311, i1 false)
  %249 = load %struct.sv**, %struct.sv*** %tmparyval, align 8
  %250 = bitcast %struct.sv** %249 to i8*
  call void @Perl_safesysfree(i8* %250)
  br label %if.end312

if.end312:                                        ; preds = %if.then307, %while.end
  br label %if.end486

if.else313:                                       ; preds = %for.end
  store %struct.sv** null, %struct.sv*** %tmparyval314, align 8
  %251 = load i64, i64* %length, align 8
  %tobool315 = icmp ne i64 %251, 0
  br i1 %tobool315, label %if.then316, label %if.end323

if.then316:                                       ; preds = %if.else313
  %252 = load i64, i64* %length, align 8
  %mul317 = mul i64 %252, 8
  %call318 = call i8* @Perl_safesysmalloc(i64 %mul317)
  %253 = bitcast i8* %call318 to %struct.sv**
  store %struct.sv** %253, %struct.sv*** %tmparyval314, align 8
  %254 = load %struct.sv**, %struct.sv*** %tmparyval314, align 8
  %255 = bitcast %struct.sv** %254 to i8*
  %256 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u319 = getelementptr inbounds %struct.av, %struct.av* %256, i32 0, i32 3
  %svu_array320 = bitcast %union.anon.0* %sv_u319 to %struct.sv***
  %257 = load %struct.sv**, %struct.sv*** %svu_array320, align 8
  %258 = load i64, i64* %offset, align 8
  %add.ptr321 = getelementptr inbounds %struct.sv*, %struct.sv** %257, i64 %258
  %259 = bitcast %struct.sv** %add.ptr321 to i8*
  %260 = load i64, i64* %length, align 8
  %mul322 = mul i64 %260, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %259, i64 %mul322, i1 false)
  br label %if.end323

if.end323:                                        ; preds = %if.then316, %if.else313
  %261 = load i64, i64* %diff, align 8
  %cmp324 = icmp sgt i64 %261, 0
  br i1 %cmp324, label %if.then326, label %if.end396

if.then326:                                       ; preds = %if.end323
  %262 = load i64, i64* %offset, align 8
  %263 = load i64, i64* %after, align 8
  %cmp327 = icmp slt i64 %262, %263
  br i1 %cmp327, label %land.lhs.true329, label %if.else361

land.lhs.true329:                                 ; preds = %if.then326
  %264 = load i64, i64* %diff, align 8
  %265 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u330 = getelementptr inbounds %struct.av, %struct.av* %265, i32 0, i32 3
  %svu_array331 = bitcast %union.anon.0* %sv_u330 to %struct.sv***
  %266 = load %struct.sv**, %struct.sv*** %svu_array331, align 8
  %267 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any332 = getelementptr inbounds %struct.av, %struct.av* %267, i32 0, i32 0
  %268 = load %struct.xpvav*, %struct.xpvav** %sv_any332, align 8
  %xav_alloc333 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %268, i32 0, i32 4
  %269 = load %struct.sv**, %struct.sv*** %xav_alloc333, align 8
  %sub.ptr.lhs.cast334 = ptrtoint %struct.sv** %266 to i64
  %sub.ptr.rhs.cast335 = ptrtoint %struct.sv** %269 to i64
  %sub.ptr.sub336 = sub i64 %sub.ptr.lhs.cast334, %sub.ptr.rhs.cast335
  %sub.ptr.div337 = sdiv exact i64 %sub.ptr.sub336, 8
  %cmp338 = icmp sle i64 %264, %sub.ptr.div337
  br i1 %cmp338, label %if.then340, label %if.else361

if.then340:                                       ; preds = %land.lhs.true329
  %270 = load i64, i64* %offset, align 8
  %tobool341 = icmp ne i64 %270, 0
  br i1 %tobool341, label %if.then342, label %if.end348

if.then342:                                       ; preds = %if.then340
  %271 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u343 = getelementptr inbounds %struct.av, %struct.av* %271, i32 0, i32 3
  %svu_array344 = bitcast %union.anon.0* %sv_u343 to %struct.sv***
  %272 = load %struct.sv**, %struct.sv*** %svu_array344, align 8
  store %struct.sv** %272, %struct.sv*** %src, align 8
  %273 = load %struct.sv**, %struct.sv*** %src, align 8
  %274 = load i64, i64* %diff, align 8
  %idx.neg345 = sub i64 0, %274
  %add.ptr346 = getelementptr inbounds %struct.sv*, %struct.sv** %273, i64 %idx.neg345
  store %struct.sv** %add.ptr346, %struct.sv*** %dst, align 8
  %275 = load %struct.sv**, %struct.sv*** %dst, align 8
  %276 = bitcast %struct.sv** %275 to i8*
  %277 = load %struct.sv**, %struct.sv*** %src, align 8
  %278 = bitcast %struct.sv** %277 to i8*
  %279 = load i64, i64* %offset, align 8
  %mul347 = mul i64 %279, 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %276, i8* align 1 %278, i64 %mul347, i1 false)
  br label %if.end348

if.end348:                                        ; preds = %if.then342, %if.then340
  %280 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u349 = getelementptr inbounds %struct.av, %struct.av* %280, i32 0, i32 3
  %svu_array350 = bitcast %union.anon.0* %sv_u349 to %struct.sv***
  %281 = load %struct.sv**, %struct.sv*** %svu_array350, align 8
  %282 = load i64, i64* %diff, align 8
  %idx.neg351 = sub i64 0, %282
  %add.ptr352 = getelementptr inbounds %struct.sv*, %struct.sv** %281, i64 %idx.neg351
  %283 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u353 = getelementptr inbounds %struct.av, %struct.av* %283, i32 0, i32 3
  %svu_array354 = bitcast %union.anon.0* %sv_u353 to %struct.sv***
  store %struct.sv** %add.ptr352, %struct.sv*** %svu_array354, align 8
  %284 = load i64, i64* %diff, align 8
  %285 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any355 = getelementptr inbounds %struct.av, %struct.av* %285, i32 0, i32 0
  %286 = load %struct.xpvav*, %struct.xpvav** %sv_any355, align 8
  %xav_max356 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %286, i32 0, i32 3
  %287 = load i64, i64* %xav_max356, align 8
  %add357 = add nsw i64 %287, %284
  store i64 %add357, i64* %xav_max356, align 8
  %288 = load i64, i64* %diff, align 8
  %289 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any358 = getelementptr inbounds %struct.av, %struct.av* %289, i32 0, i32 0
  %290 = load %struct.xpvav*, %struct.xpvav** %sv_any358, align 8
  %xav_fill359 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %290, i32 0, i32 2
  %291 = load i64, i64* %xav_fill359, align 8
  %add360 = add nsw i64 %291, %288
  store i64 %add360, i64* %xav_fill359, align 8
  br label %if.end395

if.else361:                                       ; preds = %land.lhs.true329, %if.then326
  %292 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any362 = getelementptr inbounds %struct.av, %struct.av* %292, i32 0, i32 0
  %293 = load %struct.xpvav*, %struct.xpvav** %sv_any362, align 8
  %xav_fill363 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %293, i32 0, i32 2
  %294 = load i64, i64* %xav_fill363, align 8
  %295 = load i64, i64* %diff, align 8
  %add364 = add nsw i64 %294, %295
  %296 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any365 = getelementptr inbounds %struct.av, %struct.av* %296, i32 0, i32 0
  %297 = load %struct.xpvav*, %struct.xpvav** %sv_any365, align 8
  %xav_max366 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %297, i32 0, i32 3
  %298 = load i64, i64* %xav_max366, align 8
  %cmp367 = icmp sge i64 %add364, %298
  br i1 %cmp367, label %if.then369, label %if.end373

if.then369:                                       ; preds = %if.else361
  %299 = load %struct.av*, %struct.av** %ary, align 8
  %300 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any370 = getelementptr inbounds %struct.av, %struct.av* %300, i32 0, i32 0
  %301 = load %struct.xpvav*, %struct.xpvav** %sv_any370, align 8
  %xav_fill371 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %301, i32 0, i32 2
  %302 = load i64, i64* %xav_fill371, align 8
  %303 = load i64, i64* %diff, align 8
  %add372 = add nsw i64 %302, %303
  call void @Perl_av_extend(%struct.av* %299, i64 %add372)
  br label %if.end373

if.end373:                                        ; preds = %if.then369, %if.else361
  %304 = load i64, i64* %diff, align 8
  %305 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any374 = getelementptr inbounds %struct.av, %struct.av* %305, i32 0, i32 0
  %306 = load %struct.xpvav*, %struct.xpvav** %sv_any374, align 8
  %xav_fill375 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %306, i32 0, i32 2
  %307 = load i64, i64* %xav_fill375, align 8
  %add376 = add nsw i64 %307, %304
  store i64 %add376, i64* %xav_fill375, align 8
  %308 = load i64, i64* %after, align 8
  %tobool377 = icmp ne i64 %308, 0
  br i1 %tobool377, label %if.then378, label %if.end394

if.then378:                                       ; preds = %if.end373
  %309 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u379 = getelementptr inbounds %struct.av, %struct.av* %309, i32 0, i32 3
  %svu_array380 = bitcast %union.anon.0* %sv_u379 to %struct.sv***
  %310 = load %struct.sv**, %struct.sv*** %svu_array380, align 8
  %311 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any381 = getelementptr inbounds %struct.av, %struct.av* %311, i32 0, i32 0
  %312 = load %struct.xpvav*, %struct.xpvav** %sv_any381, align 8
  %xav_fill382 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %312, i32 0, i32 2
  %313 = load i64, i64* %xav_fill382, align 8
  %add.ptr383 = getelementptr inbounds %struct.sv*, %struct.sv** %310, i64 %313
  store %struct.sv** %add.ptr383, %struct.sv*** %dst, align 8
  %314 = load %struct.sv**, %struct.sv*** %dst, align 8
  %315 = load i64, i64* %diff, align 8
  %idx.neg384 = sub i64 0, %315
  %add.ptr385 = getelementptr inbounds %struct.sv*, %struct.sv** %314, i64 %idx.neg384
  store %struct.sv** %add.ptr385, %struct.sv*** %src, align 8
  %316 = load i64, i64* %after, align 8
  store i64 %316, i64* %i, align 8
  br label %for.cond386

for.cond386:                                      ; preds = %for.inc391, %if.then378
  %317 = load i64, i64* %i, align 8
  %tobool387 = icmp ne i64 %317, 0
  br i1 %tobool387, label %for.body388, label %for.end393

for.body388:                                      ; preds = %for.cond386
  %318 = load %struct.sv**, %struct.sv*** %src, align 8
  %incdec.ptr389 = getelementptr inbounds %struct.sv*, %struct.sv** %318, i32 -1
  store %struct.sv** %incdec.ptr389, %struct.sv*** %src, align 8
  %319 = load %struct.sv*, %struct.sv** %318, align 8
  %320 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr390 = getelementptr inbounds %struct.sv*, %struct.sv** %320, i32 -1
  store %struct.sv** %incdec.ptr390, %struct.sv*** %dst, align 8
  store %struct.sv* %319, %struct.sv** %320, align 8
  br label %for.inc391

for.inc391:                                       ; preds = %for.body388
  %321 = load i64, i64* %i, align 8
  %dec392 = add nsw i64 %321, -1
  store i64 %dec392, i64* %i, align 8
  br label %for.cond386

for.end393:                                       ; preds = %for.cond386
  br label %if.end394

if.end394:                                        ; preds = %for.end393, %if.end373
  br label %if.end395

if.end395:                                        ; preds = %if.end394, %if.end348
  br label %if.end396

if.end396:                                        ; preds = %if.end395, %if.end323
  %322 = load i64, i64* %newlen, align 8
  %tobool397 = icmp ne i64 %322, 0
  br i1 %tobool397, label %if.then398, label %if.end403

if.then398:                                       ; preds = %if.end396
  %323 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u399 = getelementptr inbounds %struct.av, %struct.av* %323, i32 0, i32 3
  %svu_array400 = bitcast %union.anon.0* %sv_u399 to %struct.sv***
  %324 = load %struct.sv**, %struct.sv*** %svu_array400, align 8
  %325 = load i64, i64* %offset, align 8
  %add.ptr401 = getelementptr inbounds %struct.sv*, %struct.sv** %324, i64 %325
  %326 = bitcast %struct.sv** %add.ptr401 to i8*
  %327 = load %struct.sv**, %struct.sv*** %mark, align 8
  %328 = bitcast %struct.sv** %327 to i8*
  %329 = load i64, i64* %newlen, align 8
  %mul402 = mul i64 %329, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %326, i8* align 1 %328, i64 %mul402, i1 false)
  br label %if.end403

if.end403:                                        ; preds = %if.then398, %if.end396
  %330 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %331 = load i32, i32* %origmark, align 4
  %idx.ext404 = sext i32 %331 to i64
  %add.ptr405 = getelementptr inbounds %struct.sv*, %struct.sv** %330, i64 %idx.ext404
  %add.ptr406 = getelementptr inbounds %struct.sv*, %struct.sv** %add.ptr405, i64 1
  store %struct.sv** %add.ptr406, %struct.sv*** %mark, align 8
  %332 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags407 = getelementptr inbounds %struct.op, %struct.op* %332, i32 0, i32 5
  %333 = load i8, i8* %op_flags407, align 2
  %conv408 = zext i8 %333 to i32
  %and409 = and i32 %conv408, 3
  %tobool410 = icmp ne i32 %and409, 0
  br i1 %tobool410, label %cond.true411, label %cond.false415

cond.true411:                                     ; preds = %if.end403
  %334 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags412 = getelementptr inbounds %struct.op, %struct.op* %334, i32 0, i32 5
  %335 = load i8, i8* %op_flags412, align 2
  %conv413 = zext i8 %335 to i32
  %and414 = and i32 %conv413, 3
  br label %cond.end417

cond.false415:                                    ; preds = %if.end403
  %call416 = call i32 @Perl_block_gimme()
  br label %cond.end417

cond.end417:                                      ; preds = %cond.false415, %cond.true411
  %cond418 = phi i32 [ %and414, %cond.true411 ], [ %call416, %cond.false415 ]
  %cmp419 = icmp eq i32 %cond418, 3
  br i1 %cmp419, label %if.then421, label %if.else465

if.then421:                                       ; preds = %cond.end417
  %336 = load i64, i64* %length, align 8
  %tobool422 = icmp ne i64 %336, 0
  br i1 %tobool422, label %if.then423, label %if.end462

if.then423:                                       ; preds = %if.then421
  %337 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags425 = getelementptr inbounds %struct.av, %struct.av* %337, i32 0, i32 2
  %338 = load i32, i32* %sv_flags425, align 4
  %and426 = and i32 %338, 1073741824
  %tobool427 = icmp ne i32 %and426, 0
  %339 = zext i1 %tobool427 to i64
  %cond428 = select i1 %tobool427, i32 1, i32 0
  %tobool429 = icmp ne i32 %cond428, 0
  %frombool430 = zext i1 %tobool429 to i8
  store i8 %frombool430, i8* %real424, align 1
  %340 = load i8, i8* %real424, align 1
  %tobool431 = trunc i8 %340 to i1
  br i1 %tobool431, label %if.then432, label %if.end444

if.then432:                                       ; preds = %if.then423
  br label %do.body433

do.body433:                                       ; preds = %if.then432
  %341 = load i64, i64* @PL_tmps_ix, align 8
  %342 = load i64, i64* %length, align 8
  %add435 = add nsw i64 %341, %342
  store i64 %add435, i64* %eMiX434, align 8
  %343 = load i64, i64* %eMiX434, align 8
  %344 = load i64, i64* @PL_tmps_max, align 8
  %cmp436 = icmp sge i64 %343, %344
  br i1 %cmp436, label %cond.true438, label %cond.false439

cond.true438:                                     ; preds = %do.body433
  br i1 true, label %if.then440, label %if.end442

cond.false439:                                    ; preds = %do.body433
  br i1 false, label %if.then440, label %if.end442

if.then440:                                       ; preds = %cond.false439, %cond.true438
  %345 = load i64, i64* %eMiX434, align 8
  %call441 = call i64 @Perl_tmps_grow_p(i64 %345)
  br label %if.end442

if.end442:                                        ; preds = %if.then440, %cond.false439, %cond.true438
  br label %do.end443

do.end443:                                        ; preds = %if.end442
  br label %if.end444

if.end444:                                        ; preds = %do.end443, %if.then423
  store i64 0, i64* %i, align 8
  %346 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %346, %struct.sv*** %dst, align 8
  br label %for.cond445

for.cond445:                                      ; preds = %for.inc459, %if.end444
  %347 = load i64, i64* %i, align 8
  %348 = load i64, i64* %length, align 8
  %cmp446 = icmp slt i64 %347, %348
  br i1 %cmp446, label %for.body448, label %for.end461

for.body448:                                      ; preds = %for.cond445
  %349 = load %struct.sv**, %struct.sv*** %tmparyval314, align 8
  %350 = load i64, i64* %i, align 8
  %arrayidx449 = getelementptr inbounds %struct.sv*, %struct.sv** %349, i64 %350
  %351 = load %struct.sv*, %struct.sv** %arrayidx449, align 8
  %352 = load %struct.sv**, %struct.sv*** %dst, align 8
  store %struct.sv* %351, %struct.sv** %352, align 8
  %tobool450 = icmp ne %struct.sv* %351, null
  br i1 %tobool450, label %if.then451, label %if.else456

if.then451:                                       ; preds = %for.body448
  %353 = load i8, i8* %real424, align 1
  %tobool452 = trunc i8 %353 to i1
  br i1 %tobool452, label %if.then453, label %if.end455

if.then453:                                       ; preds = %if.then451
  %354 = load %struct.sv**, %struct.sv*** %dst, align 8
  %355 = load %struct.sv*, %struct.sv** %354, align 8
  %call454 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %355)
  br label %if.end455

if.end455:                                        ; preds = %if.then453, %if.then451
  br label %if.end457

if.else456:                                       ; preds = %for.body448
  %356 = load %struct.sv**, %struct.sv*** %dst, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %356, align 8
  br label %if.end457

if.end457:                                        ; preds = %if.else456, %if.end455
  %357 = load %struct.sv**, %struct.sv*** %dst, align 8
  %incdec.ptr458 = getelementptr inbounds %struct.sv*, %struct.sv** %357, i32 1
  store %struct.sv** %incdec.ptr458, %struct.sv*** %dst, align 8
  br label %for.inc459

for.inc459:                                       ; preds = %if.end457
  %358 = load i64, i64* %i, align 8
  %inc460 = add nsw i64 %358, 1
  store i64 %inc460, i64* %i, align 8
  br label %for.cond445

for.end461:                                       ; preds = %for.cond445
  br label %if.end462

if.end462:                                        ; preds = %for.end461, %if.then421
  %359 = load i64, i64* %length, align 8
  %sub463 = sub nsw i64 %359, 1
  %360 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr464 = getelementptr inbounds %struct.sv*, %struct.sv** %360, i64 %sub463
  store %struct.sv** %add.ptr464, %struct.sv*** %mark, align 8
  br label %if.end485

if.else465:                                       ; preds = %cond.end417
  %361 = load i64, i64* %length, align 8
  %dec466 = add nsw i64 %361, -1
  store i64 %dec466, i64* %length, align 8
  %tobool467 = icmp ne i64 %361, 0
  br i1 %tobool467, label %if.then468, label %if.else483

if.then468:                                       ; preds = %if.else465
  %362 = load %struct.sv**, %struct.sv*** %tmparyval314, align 8
  %363 = load i64, i64* %length, align 8
  %arrayidx469 = getelementptr inbounds %struct.sv*, %struct.sv** %362, i64 %363
  %364 = load %struct.sv*, %struct.sv** %arrayidx469, align 8
  %365 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %364, %struct.sv** %365, align 8
  %366 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags470 = getelementptr inbounds %struct.av, %struct.av* %366, i32 0, i32 2
  %367 = load i32, i32* %sv_flags470, align 4
  %and471 = and i32 %367, 1073741824
  %tobool472 = icmp ne i32 %and471, 0
  br i1 %tobool472, label %if.then473, label %if.end482

if.then473:                                       ; preds = %if.then468
  %368 = load %struct.sv**, %struct.sv*** %mark, align 8
  %369 = load %struct.sv*, %struct.sv** %368, align 8
  %call474 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %369)
  br label %while.cond475

while.cond475:                                    ; preds = %while.body479, %if.then473
  %370 = load i64, i64* %length, align 8
  %dec476 = add nsw i64 %370, -1
  store i64 %dec476, i64* %length, align 8
  %cmp477 = icmp sgt i64 %370, 0
  br i1 %cmp477, label %while.body479, label %while.end481

while.body479:                                    ; preds = %while.cond475
  %371 = load %struct.sv**, %struct.sv*** %tmparyval314, align 8
  %372 = load i64, i64* %length, align 8
  %arrayidx480 = getelementptr inbounds %struct.sv*, %struct.sv** %371, i64 %372
  %373 = load %struct.sv*, %struct.sv** %arrayidx480, align 8
  %374 = bitcast %struct.sv* %373 to i8*
  %375 = bitcast i8* %374 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %375)
  br label %while.cond475

while.end481:                                     ; preds = %while.cond475
  br label %if.end482

if.end482:                                        ; preds = %while.end481, %if.then468
  br label %if.end484

if.else483:                                       ; preds = %if.else465
  %376 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %376, align 8
  br label %if.end484

if.end484:                                        ; preds = %if.else483, %if.end482
  br label %if.end485

if.end485:                                        ; preds = %if.end484, %if.end462
  %377 = load %struct.sv**, %struct.sv*** %tmparyval314, align 8
  %378 = bitcast %struct.sv** %377 to i8*
  call void @Perl_safesysfree(i8* %378)
  br label %if.end486

if.end486:                                        ; preds = %if.end485, %if.end312
  %379 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags487 = getelementptr inbounds %struct.av, %struct.av* %379, i32 0, i32 2
  %380 = load i32, i32* %sv_flags487, align 4
  %and488 = and i32 %380, 14680064
  %tobool489 = icmp ne i32 %and488, 0
  br i1 %tobool489, label %if.then490, label %if.end492

if.then490:                                       ; preds = %if.end486
  %381 = load %struct.av*, %struct.av** %ary, align 8
  %382 = bitcast %struct.av* %381 to i8*
  %383 = bitcast i8* %382 to %struct.sv*
  %call491 = call i32 @Perl_mg_set(%struct.sv* %383)
  br label %if.end492

if.end492:                                        ; preds = %if.then490, %if.end486
  %384 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %384, %struct.sv*** %sp, align 8
  %385 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %385, %struct.sv*** @PL_stack_sp, align 8
  %386 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %386, i32 0, i32 0
  %387 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %387, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end492, %if.then62, %cond.end32
  %388 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %388
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.av* @S_deref_plain_array(%struct.av* %ary) #0 {
entry:
  %retval = alloca %struct.av*, align 8
  %ary.addr = alloca %struct.av*, align 8
  store %struct.av* %ary, %struct.av** %ary.addr, align 8
  %0 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 255
  %cmp = icmp eq i32 %and, 11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.av*, %struct.av** %ary.addr, align 8
  store %struct.av* %2, %struct.av** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.av*, %struct.av** %ary.addr, align 8
  %4 = bitcast %struct.av* %3 to %struct.sv*
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %5, 2097152
  %tobool = icmp ne i32 %and2, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  br i1 true, label %land.rhs, label %land.end

cond.false:                                       ; preds = %if.end
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false, %cond.true
  %6 = load %struct.av*, %struct.av** %ary.addr, align 8
  %7 = bitcast %struct.av* %6 to %struct.sv*
  %call = call i32 @Perl_mg_get(%struct.sv* %7)
  %tobool3 = icmp ne i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false, %cond.true
  %8 = phi i1 [ false, %cond.false ], [ false, %cond.true ], [ %tobool3, %land.rhs ]
  %land.ext = zext i1 %8 to i32
  %9 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_flags4 = getelementptr inbounds %struct.av, %struct.av* %9, i32 0, i32 2
  %10 = load i32, i32* %sv_flags4, align 4
  %and5 = and i32 %10, 2048
  %tobool6 = icmp ne i32 %and5, 0
  br i1 %tobool6, label %lor.lhs.false, label %if.then10

lor.lhs.false:                                    ; preds = %land.end
  %11 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_u = getelementptr inbounds %struct.av, %struct.av* %11, i32 0, i32 3
  %svu_rv = bitcast %union.anon.0* %sv_u to %struct.sv**
  %12 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags7 = getelementptr inbounds %struct.sv, %struct.sv* %12, i32 0, i32 2
  %13 = load i32, i32* %sv_flags7, align 4
  %and8 = and i32 %13, 255
  %cmp9 = icmp ne i32 %and8, 11
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %lor.lhs.false, %land.end
  %call11 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.80, i64 0, i64 0))
  br label %if.end20

if.else:                                          ; preds = %lor.lhs.false
  %14 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_u12 = getelementptr inbounds %struct.av, %struct.av* %14, i32 0, i32 3
  %svu_rv13 = bitcast %union.anon.0* %sv_u12 to %struct.sv**
  %15 = load %struct.sv*, %struct.sv** %svu_rv13, align 8
  %sv_flags14 = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %16, 1048576
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %if.else
  %call18 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.81, i64 0, i64 0))
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19, %if.then10
  %17 = load %struct.av*, %struct.av** %ary.addr, align 8
  %sv_u21 = getelementptr inbounds %struct.av, %struct.av* %17, i32 0, i32 3
  %svu_rv22 = bitcast %union.anon.0* %sv_u21 to %struct.sv**
  %18 = load %struct.sv*, %struct.sv** %svu_rv22, align 8
  %19 = bitcast %struct.sv* %18 to %struct.av*
  store %struct.av* %19, %struct.av** %retval, align 8
  br label %return

return:                                           ; preds = %if.end20, %if.then
  %20 = load %struct.av*, %struct.av** %retval, align 8
  ret %struct.av* %20
}

declare dso_local %struct.op* @Perl_tied_method(%struct.sv*, %struct.sv**, %struct.sv*, %struct.magic*, i32, i32, ...) #1

declare dso_local %struct.sv* @Perl_newSVpv_share(i8*, i32) #1

declare dso_local i8* @Perl_safesysmalloc(i64) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_push() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %mg = alloca %struct.magic*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.av*
  %14 = bitcast %struct.av* %13 to %struct.sv*
  store %struct.sv* %14, %struct.sv** @PL_Sv, align 8
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 255
  %cmp = icmp eq i32 %and, 11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %18 = bitcast %struct.sv* %17 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %20 = bitcast %struct.sv* %19 to %struct.av*
  %call = call %struct.av* @S_deref_plain_array(%struct.av* %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %18, %cond.true ], [ %call, %cond.false ]
  store %struct.av* %cond, %struct.av** %ary, align 8
  %21 = load %struct.av*, %struct.av** %ary, align 8
  %22 = bitcast %struct.av* %21 to %struct.sv*
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %23, 8388608
  %tobool = icmp ne i32 %and4, 0
  br i1 %tobool, label %cond.true5, label %cond.false7

cond.true5:                                       ; preds = %cond.end
  %24 = load %struct.av*, %struct.av** %ary, align 8
  %25 = bitcast %struct.av* %24 to %struct.sv*
  %call6 = call %struct.magic* @Perl_mg_find(%struct.sv* %25, i32 80)
  br label %cond.end8

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.magic* [ %call6, %cond.true5 ], [ null, %cond.false7 ]
  store %struct.magic* %cond9, %struct.magic** %mg, align 8
  %26 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool10 = icmp ne %struct.magic* %26, null
  br i1 %tobool10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end8
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 6
  %28 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool11 = icmp ne %struct.sv* %28, null
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.then
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj13 = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 6
  %30 = load %struct.sv*, %struct.sv** %mg_obj13, align 8
  br label %cond.end17

cond.false14:                                     ; preds = %if.then
  %31 = load %struct.av*, %struct.av** %ary, align 8
  %32 = bitcast %struct.av* %31 to i8*
  %33 = bitcast i8* %32 to %struct.sv*
  %call15 = call %struct.sv* @Perl_newRV(%struct.sv* %33)
  %call16 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call15)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false14, %cond.true12
  %cond18 = phi %struct.sv* [ %30, %cond.true12 ], [ %call16, %cond.false14 ]
  %34 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr19 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i32 -1
  store %struct.sv** %incdec.ptr19, %struct.sv*** %mark, align 8
  store %struct.sv* %cond18, %struct.sv** %34, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end17
  %35 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr20 = getelementptr inbounds i32, i32* %35, i32 1
  store i32* %incdec.ptr20, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr20, i32** %mark_stack_entry, align 8
  %36 = load i32*, i32** @PL_markstack_max, align 8
  %cmp21 = icmp eq i32* %incdec.ptr20, %36
  br i1 %cmp21, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %do.body
  br i1 true, label %if.then25, label %if.end

cond.false24:                                     ; preds = %do.body
  br i1 false, label %if.then25, label %if.end

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %call26 = call i32* @Perl_markstack_grow()
  store i32* %call26, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then25, %cond.false24, %cond.true23
  %37 = load %struct.sv**, %struct.sv*** %mark, align 8
  %38 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast27 = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.rhs.cast28 = ptrtoint %struct.sv** %38 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %sub.ptr.div30 = sdiv exact i64 %sub.ptr.sub29, 8
  %conv31 = trunc i64 %sub.ptr.div30 to i32
  %39 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv31, i32* %39, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %40, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %41 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  %tobool32 = icmp ne %struct.sv* %41, null
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %do.end
  %42 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  br label %cond.end36

cond.false34:                                     ; preds = %do.end
  %call35 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i64 0, i64 0), i32 0)
  store %struct.sv* %call35, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false34, %cond.true33
  %cond37 = phi %struct.sv* [ %42, %cond.true33 ], [ %call35, %cond.false34 ]
  %call38 = call i32 @Perl_call_sv(%struct.sv* %cond37, i32 4102)
  call void @Perl_pop_scope()
  br label %if.end71

if.else:                                          ; preds = %cond.end8
  %43 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags39 = getelementptr inbounds %struct.av, %struct.av* %43, i32 0, i32 2
  %44 = load i32, i32* %sv_flags39, align 4
  %and40 = and i32 %44, 134283264
  %tobool41 = icmp ne i32 %and40, 0
  br i1 %tobool41, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %if.else
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  %46 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp42 = icmp ult %struct.sv** %45, %46
  br i1 %cmp42, label %if.then44, label %if.end45

if.then44:                                        ; preds = %land.lhs.true
  call void @Perl_croak_no_modify()
  br label %if.end45

if.end45:                                         ; preds = %if.then44, %land.lhs.true, %if.else
  store i16 256, i16* @PL_delaymagic, align 2
  %47 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr46 = getelementptr inbounds %struct.sv*, %struct.sv** %47, i32 1
  store %struct.sv** %incdec.ptr46, %struct.sv*** %mark, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end45
  %48 = load %struct.sv**, %struct.sv*** %mark, align 8
  %49 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp47 = icmp ule %struct.sv** %48, %49
  br i1 %cmp47, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %50 = load %struct.sv**, %struct.sv*** %mark, align 8
  %51 = load %struct.sv*, %struct.sv** %50, align 8
  %tobool49 = icmp ne %struct.sv* %51, null
  br i1 %tobool49, label %if.then50, label %if.end58

if.then50:                                        ; preds = %for.body
  %52 = load %struct.sv**, %struct.sv*** %mark, align 8
  %53 = load %struct.sv*, %struct.sv** %52, align 8
  %sv_flags51 = getelementptr inbounds %struct.sv, %struct.sv* %53, i32 0, i32 2
  %54 = load i32, i32* %sv_flags51, align 4
  %and52 = and i32 %54, 2097152
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false55

cond.true54:                                      ; preds = %if.then50
  br i1 true, label %land.rhs, label %land.end

cond.false55:                                     ; preds = %if.then50
  br i1 false, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.false55, %cond.true54
  %55 = load %struct.sv**, %struct.sv*** %mark, align 8
  %56 = load %struct.sv*, %struct.sv** %55, align 8
  %call56 = call i32 @Perl_mg_get(%struct.sv* %56)
  %tobool57 = icmp ne i32 %call56, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.false55, %cond.true54
  %57 = phi i1 [ false, %cond.false55 ], [ false, %cond.true54 ], [ %tobool57, %land.rhs ]
  %land.ext = zext i1 %57 to i32
  br label %if.end58

if.end58:                                         ; preds = %land.end, %for.body
  %call59 = call %struct.sv* @Perl_newSV(i64 0)
  store %struct.sv* %call59, %struct.sv** %sv, align 8
  %58 = load %struct.sv**, %struct.sv*** %mark, align 8
  %59 = load %struct.sv*, %struct.sv** %58, align 8
  %tobool60 = icmp ne %struct.sv* %59, null
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.end58
  %60 = load %struct.sv*, %struct.sv** %sv, align 8
  %61 = load %struct.sv**, %struct.sv*** %mark, align 8
  %62 = load %struct.sv*, %struct.sv** %61, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %60, %struct.sv* %62, i32 1536)
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end58
  %63 = load %struct.av*, %struct.av** %ary, align 8
  %64 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %64, i32 0, i32 0
  %65 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %65, i32 0, i32 2
  %66 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %66, 1
  %67 = load %struct.sv*, %struct.sv** %sv, align 8
  %call63 = call %struct.sv** @Perl_av_store(%struct.av* %63, i64 %add, %struct.sv* %67)
  br label %for.inc

for.inc:                                          ; preds = %if.end62
  %68 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %68, i32 1
  store %struct.sv** %incdec.ptr64, %struct.sv*** %mark, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %69 = load i16, i16* @PL_delaymagic, align 2
  %conv65 = zext i16 %69 to i32
  %and66 = and i32 %conv65, 4
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %if.then68, label %if.end70

if.then68:                                        ; preds = %for.end
  %70 = load %struct.av*, %struct.av** %ary, align 8
  %71 = bitcast %struct.av* %70 to i8*
  %72 = bitcast i8* %71 to %struct.sv*
  %call69 = call i32 @Perl_mg_set(%struct.sv* %72)
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %for.end
  store i16 0, i16* @PL_delaymagic, align 2
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %cond.end36
  %73 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %74 = load i32, i32* %origmark, align 4
  %idx.ext72 = sext i32 %74 to i64
  %add.ptr73 = getelementptr inbounds %struct.sv*, %struct.sv** %73, i64 %idx.ext72
  store %struct.sv** %add.ptr73, %struct.sv*** %sp, align 8
  %75 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 5
  %76 = load i8, i8* %op_flags, align 2
  %conv74 = zext i8 %76 to i32
  %and75 = and i32 %conv74, 3
  %tobool76 = icmp ne i32 %and75, 0
  br i1 %tobool76, label %cond.true77, label %cond.false81

cond.true77:                                      ; preds = %if.end71
  %77 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags78 = getelementptr inbounds %struct.op, %struct.op* %77, i32 0, i32 5
  %78 = load i8, i8* %op_flags78, align 2
  %conv79 = zext i8 %78 to i32
  %and80 = and i32 %conv79, 3
  br label %cond.end82

cond.false81:                                     ; preds = %if.end71
  br label %cond.end82

cond.end82:                                       ; preds = %cond.false81, %cond.true77
  %cond83 = phi i32 [ %and80, %cond.true77 ], [ 0, %cond.false81 ]
  %cmp84 = icmp ne i32 %cond83, 1
  br i1 %cmp84, label %if.then86, label %if.end114

if.then86:                                        ; preds = %cond.end82
  br label %do.body87

do.body87:                                        ; preds = %if.then86
  %79 = load %struct.sv*, %struct.sv** %targ, align 8
  %80 = load %struct.av*, %struct.av** %ary, align 8
  %81 = bitcast %struct.av* %80 to %struct.sv*
  %sv_flags88 = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 2
  %82 = load i32, i32* %sv_flags88, align 4
  %and89 = and i32 %82, 8388608
  %tobool90 = icmp ne i32 %and89, 0
  br i1 %tobool90, label %cond.true91, label %cond.false94

cond.true91:                                      ; preds = %do.body87
  %83 = load %struct.av*, %struct.av** %ary, align 8
  %84 = bitcast %struct.av* %83 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  %call92 = call i32 @Perl_mg_size(%struct.sv* %85)
  %conv93 = sext i32 %call92 to i64
  br label %cond.end97

cond.false94:                                     ; preds = %do.body87
  %86 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any95 = getelementptr inbounds %struct.av, %struct.av* %86, i32 0, i32 0
  %87 = load %struct.xpvav*, %struct.xpvav** %sv_any95, align 8
  %xav_fill96 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %87, i32 0, i32 2
  %88 = load i64, i64* %xav_fill96, align 8
  br label %cond.end97

cond.end97:                                       ; preds = %cond.false94, %cond.true91
  %cond98 = phi i64 [ %conv93, %cond.true91 ], [ %88, %cond.false94 ]
  %add99 = add nsw i64 %cond98, 1
  call void @Perl_sv_setiv(%struct.sv* %79, i64 %add99)
  br label %do.body100

do.body100:                                       ; preds = %cond.end97
  br label %do.body101

do.body101:                                       ; preds = %do.body100
  %89 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags102 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags102, align 4
  %and103 = and i32 %90, 4194304
  %tobool104 = icmp ne i32 %and103, 0
  br i1 %tobool104, label %cond.true105, label %cond.false106

cond.true105:                                     ; preds = %do.body101
  br i1 true, label %if.then107, label %if.end109

cond.false106:                                    ; preds = %do.body101
  br i1 false, label %if.then107, label %if.end109

if.then107:                                       ; preds = %cond.false106, %cond.true105
  %91 = load %struct.sv*, %struct.sv** %targ, align 8
  %call108 = call i32 @Perl_mg_set(%struct.sv* %91)
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %cond.false106, %cond.true105
  br label %do.end110

do.end110:                                        ; preds = %if.end109
  %92 = load %struct.sv*, %struct.sv** %targ, align 8
  %93 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr111 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr111, %struct.sv*** %sp, align 8
  store %struct.sv* %92, %struct.sv** %incdec.ptr111, align 8
  br label %do.end112

do.end112:                                        ; preds = %do.end110
  br label %do.end113

do.end113:                                        ; preds = %do.end112
  br label %if.end114

if.end114:                                        ; preds = %do.end113, %cond.end82
  %94 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %94, %struct.sv*** @PL_stack_sp, align 8
  %95 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %95, i32 0, i32 0
  %96 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %96
}

declare dso_local i32* @Perl_markstack_grow() #1

declare dso_local void @Perl_push_scope() #1

declare dso_local i32 @Perl_call_sv(%struct.sv*, i32) #1

declare dso_local void @Perl_pop_scope() #1

declare dso_local %struct.sv** @Perl_av_store(%struct.av*, i64, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_shift() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %5 = load %struct.av*, %struct.av** %gp_av, align 8
  %6 = bitcast %struct.av* %5 to i8*
  %7 = bitcast i8* %6 to %struct.av*
  br label %cond.end5

cond.false:                                       ; preds = %entry
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %8, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %9 = load %struct.sv*, %struct.sv** %8, align 8
  %10 = bitcast %struct.sv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.av*
  %12 = bitcast %struct.av* %11 to %struct.sv*
  store %struct.sv* %12, %struct.sv** @PL_Sv, align 8
  %13 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and1 = and i32 %14, 255
  %cmp = icmp eq i32 %and1, 11
  br i1 %cmp, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.false
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %16 = bitcast %struct.sv* %15 to %struct.av*
  br label %cond.end

cond.false4:                                      ; preds = %cond.false
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %18 = bitcast %struct.sv* %17 to %struct.av*
  %call = call %struct.av* @S_deref_plain_array(%struct.av* %18)
  br label %cond.end

cond.end:                                         ; preds = %cond.false4, %cond.true3
  %cond = phi %struct.av* [ %16, %cond.true3 ], [ %call, %cond.false4 ]
  br label %cond.end5

cond.end5:                                        ; preds = %cond.end, %cond.true
  %cond6 = phi %struct.av* [ %7, %cond.true ], [ %cond, %cond.end ]
  store %struct.av* %cond6, %struct.av** %av, align 8
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp7 = icmp eq i32 %bf.cast, 165
  br i1 %cmp7, label %cond.true9, label %cond.false11

cond.true9:                                       ; preds = %cond.end5
  %20 = load %struct.av*, %struct.av** %av, align 8
  %call10 = call %struct.sv* @Perl_av_shift(%struct.av* %20)
  br label %cond.end13

cond.false11:                                     ; preds = %cond.end5
  %21 = load %struct.av*, %struct.av** %av, align 8
  %call12 = call %struct.sv* @Perl_av_pop(%struct.av* %21)
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false11, %cond.true9
  %cond14 = phi %struct.sv* [ %call10, %cond.true9 ], [ %call12, %cond.false11 ]
  store %struct.sv* %cond14, %struct.sv** %sv, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end13
  %22 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %23 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %22 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp15 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp15, label %cond.true17, label %cond.false18

cond.true17:                                      ; preds = %do.body
  br i1 true, label %if.then, label %if.end

cond.false18:                                     ; preds = %do.body
  br i1 false, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false18, %cond.true17
  %24 = load %struct.sv**, %struct.sv*** %sp, align 8
  %25 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call19 = call %struct.sv** @Perl_stack_grow(%struct.sv** %24, %struct.sv** %25, i64 1)
  store %struct.sv** %call19, %struct.sv*** %sp, align 8
  %26 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false18, %cond.true17
  br label %do.end

do.end:                                           ; preds = %if.end
  %27 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags20 = getelementptr inbounds %struct.av, %struct.av* %27, i32 0, i32 2
  %28 = load i32, i32* %sv_flags20, align 4
  %and21 = and i32 %28, 1073741824
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then23, label %if.end25

if.then23:                                        ; preds = %do.end
  %29 = load %struct.sv*, %struct.sv** %sv, align 8
  %call24 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %29)
  br label %if.end25

if.end25:                                         ; preds = %if.then23, %do.end
  %30 = load %struct.sv*, %struct.sv** %sv, align 8
  %31 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr26 = getelementptr inbounds %struct.sv*, %struct.sv** %31, i32 1
  store %struct.sv** %incdec.ptr26, %struct.sv*** %sp, align 8
  store %struct.sv* %30, %struct.sv** %incdec.ptr26, align 8
  %32 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %32, %struct.sv*** @PL_stack_sp, align 8
  %33 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %33, i32 0, i32 0
  %34 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %34
}

declare dso_local %struct.sv* @Perl_av_shift(%struct.av*) #1

declare dso_local %struct.sv* @Perl_av_pop(%struct.av*) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_unshift() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %origmark = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %mg = alloca %struct.magic*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %i = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %mark, align 8
  %5 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %5 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %conv = trunc i64 %sub.ptr.div to i32
  store i32 %conv, i32* %origmark, align 4
  %6 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 3
  %8 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %6, i64 %8
  %9 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %9, %struct.sv** %targ, align 8
  %10 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %10, i32 1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %mark, align 8
  %11 = load %struct.sv*, %struct.sv** %incdec.ptr1, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = bitcast i8* %12 to %struct.av*
  %14 = bitcast %struct.av* %13 to %struct.sv*
  store %struct.sv* %14, %struct.sv** @PL_Sv, align 8
  %15 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %15, i32 0, i32 2
  %16 = load i32, i32* %sv_flags, align 4
  %and = and i32 %16, 255
  %cmp = icmp eq i32 %and, 11
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %17 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %18 = bitcast %struct.sv* %17 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  %19 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %20 = bitcast %struct.sv* %19 to %struct.av*
  %call = call %struct.av* @S_deref_plain_array(%struct.av* %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %18, %cond.true ], [ %call, %cond.false ]
  store %struct.av* %cond, %struct.av** %ary, align 8
  %21 = load %struct.av*, %struct.av** %ary, align 8
  %22 = bitcast %struct.av* %21 to %struct.sv*
  %sv_flags3 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 2
  %23 = load i32, i32* %sv_flags3, align 4
  %and4 = and i32 %23, 8388608
  %tobool = icmp ne i32 %and4, 0
  br i1 %tobool, label %cond.true5, label %cond.false7

cond.true5:                                       ; preds = %cond.end
  %24 = load %struct.av*, %struct.av** %ary, align 8
  %25 = bitcast %struct.av* %24 to %struct.sv*
  %call6 = call %struct.magic* @Perl_mg_find(%struct.sv* %25, i32 80)
  br label %cond.end8

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.magic* [ %call6, %cond.true5 ], [ null, %cond.false7 ]
  store %struct.magic* %cond9, %struct.magic** %mg, align 8
  %26 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool10 = icmp ne %struct.magic* %26, null
  br i1 %tobool10, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end8
  %27 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %27, i32 0, i32 6
  %28 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool11 = icmp ne %struct.sv* %28, null
  br i1 %tobool11, label %cond.true12, label %cond.false14

cond.true12:                                      ; preds = %if.then
  %29 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj13 = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 6
  %30 = load %struct.sv*, %struct.sv** %mg_obj13, align 8
  br label %cond.end17

cond.false14:                                     ; preds = %if.then
  %31 = load %struct.av*, %struct.av** %ary, align 8
  %32 = bitcast %struct.av* %31 to i8*
  %33 = bitcast i8* %32 to %struct.sv*
  %call15 = call %struct.sv* @Perl_newRV(%struct.sv* %33)
  %call16 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call15)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false14, %cond.true12
  %cond18 = phi %struct.sv* [ %30, %cond.true12 ], [ %call16, %cond.false14 ]
  %34 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr19 = getelementptr inbounds %struct.sv*, %struct.sv** %34, i32 -1
  store %struct.sv** %incdec.ptr19, %struct.sv*** %mark, align 8
  store %struct.sv* %cond18, %struct.sv** %34, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end17
  %35 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr20 = getelementptr inbounds i32, i32* %35, i32 1
  store i32* %incdec.ptr20, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr20, i32** %mark_stack_entry, align 8
  %36 = load i32*, i32** @PL_markstack_max, align 8
  %cmp21 = icmp eq i32* %incdec.ptr20, %36
  br i1 %cmp21, label %cond.true23, label %cond.false24

cond.true23:                                      ; preds = %do.body
  br i1 true, label %if.then25, label %if.end

cond.false24:                                     ; preds = %do.body
  br i1 false, label %if.then25, label %if.end

if.then25:                                        ; preds = %cond.false24, %cond.true23
  %call26 = call i32* @Perl_markstack_grow()
  store i32* %call26, i32** %mark_stack_entry, align 8
  br label %if.end

if.end:                                           ; preds = %if.then25, %cond.false24, %cond.true23
  %37 = load %struct.sv**, %struct.sv*** %mark, align 8
  %38 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast27 = ptrtoint %struct.sv** %37 to i64
  %sub.ptr.rhs.cast28 = ptrtoint %struct.sv** %38 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %sub.ptr.div30 = sdiv exact i64 %sub.ptr.sub29, 8
  %conv31 = trunc i64 %sub.ptr.div30 to i32
  %39 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv31, i32* %39, align 4
  br label %do.end

do.end:                                           ; preds = %if.end
  %40 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %40, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %41 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 12), align 16
  %tobool32 = icmp ne %struct.sv* %41, null
  br i1 %tobool32, label %cond.true33, label %cond.false34

cond.true33:                                      ; preds = %do.end
  %42 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 12), align 16
  br label %cond.end36

cond.false34:                                     ; preds = %do.end
  %call35 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56, i64 0, i64 0), i32 0)
  store %struct.sv* %call35, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 12), align 16
  br label %cond.end36

cond.end36:                                       ; preds = %cond.false34, %cond.true33
  %cond37 = phi %struct.sv* [ %42, %cond.true33 ], [ %call35, %cond.false34 ]
  %call38 = call i32 @Perl_call_sv(%struct.sv* %cond37, i32 4102)
  call void @Perl_pop_scope()
  br label %if.end48

if.else:                                          ; preds = %cond.end8
  store i64 0, i64* %i, align 8
  %43 = load %struct.av*, %struct.av** %ary, align 8
  %44 = load %struct.sv**, %struct.sv*** %sp, align 8
  %45 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast39 = ptrtoint %struct.sv** %44 to i64
  %sub.ptr.rhs.cast40 = ptrtoint %struct.sv** %45 to i64
  %sub.ptr.sub41 = sub i64 %sub.ptr.lhs.cast39, %sub.ptr.rhs.cast40
  %sub.ptr.div42 = sdiv exact i64 %sub.ptr.sub41, 8
  call void @Perl_av_unshift(%struct.av* %43, i64 %sub.ptr.div42)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else
  %46 = load %struct.sv**, %struct.sv*** %mark, align 8
  %47 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp43 = icmp ult %struct.sv** %46, %47
  br i1 %cmp43, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %48 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr45 = getelementptr inbounds %struct.sv*, %struct.sv** %48, i32 1
  store %struct.sv** %incdec.ptr45, %struct.sv*** %mark, align 8
  %49 = load %struct.sv*, %struct.sv** %incdec.ptr45, align 8
  %call46 = call %struct.sv* @Perl_newSVsv(%struct.sv* %49)
  store %struct.sv* %call46, %struct.sv** %sv, align 8
  %50 = load %struct.av*, %struct.av** %ary, align 8
  %51 = load i64, i64* %i, align 8
  %inc = add nsw i64 %51, 1
  store i64 %inc, i64* %i, align 8
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  %call47 = call %struct.sv** @Perl_av_store(%struct.av* %50, i64 %51, %struct.sv* %52)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end48

if.end48:                                         ; preds = %while.end, %cond.end36
  %53 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %54 = load i32, i32* %origmark, align 4
  %idx.ext49 = sext i32 %54 to i64
  %add.ptr50 = getelementptr inbounds %struct.sv*, %struct.sv** %53, i64 %idx.ext49
  store %struct.sv** %add.ptr50, %struct.sv*** %sp, align 8
  %55 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %55, i32 0, i32 5
  %56 = load i8, i8* %op_flags, align 2
  %conv51 = zext i8 %56 to i32
  %and52 = and i32 %conv51, 3
  %tobool53 = icmp ne i32 %and52, 0
  br i1 %tobool53, label %cond.true54, label %cond.false58

cond.true54:                                      ; preds = %if.end48
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags55 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 5
  %58 = load i8, i8* %op_flags55, align 2
  %conv56 = zext i8 %58 to i32
  %and57 = and i32 %conv56, 3
  br label %cond.end59

cond.false58:                                     ; preds = %if.end48
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false58, %cond.true54
  %cond60 = phi i32 [ %and57, %cond.true54 ], [ 0, %cond.false58 ]
  %cmp61 = icmp ne i32 %cond60, 1
  br i1 %cmp61, label %if.then63, label %if.end88

if.then63:                                        ; preds = %cond.end59
  br label %do.body64

do.body64:                                        ; preds = %if.then63
  %59 = load %struct.sv*, %struct.sv** %targ, align 8
  %60 = load %struct.av*, %struct.av** %ary, align 8
  %61 = bitcast %struct.av* %60 to %struct.sv*
  %sv_flags65 = getelementptr inbounds %struct.sv, %struct.sv* %61, i32 0, i32 2
  %62 = load i32, i32* %sv_flags65, align 4
  %and66 = and i32 %62, 8388608
  %tobool67 = icmp ne i32 %and66, 0
  br i1 %tobool67, label %cond.true68, label %cond.false71

cond.true68:                                      ; preds = %do.body64
  %63 = load %struct.av*, %struct.av** %ary, align 8
  %64 = bitcast %struct.av* %63 to i8*
  %65 = bitcast i8* %64 to %struct.sv*
  %call69 = call i32 @Perl_mg_size(%struct.sv* %65)
  %conv70 = sext i32 %call69 to i64
  br label %cond.end72

cond.false71:                                     ; preds = %do.body64
  %66 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any = getelementptr inbounds %struct.av, %struct.av* %66, i32 0, i32 0
  %67 = load %struct.xpvav*, %struct.xpvav** %sv_any, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %67, i32 0, i32 2
  %68 = load i64, i64* %xav_fill, align 8
  br label %cond.end72

cond.end72:                                       ; preds = %cond.false71, %cond.true68
  %cond73 = phi i64 [ %conv70, %cond.true68 ], [ %68, %cond.false71 ]
  %add = add nsw i64 %cond73, 1
  call void @Perl_sv_setiv(%struct.sv* %59, i64 %add)
  br label %do.body74

do.body74:                                        ; preds = %cond.end72
  br label %do.body75

do.body75:                                        ; preds = %do.body74
  %69 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags76 = getelementptr inbounds %struct.sv, %struct.sv* %69, i32 0, i32 2
  %70 = load i32, i32* %sv_flags76, align 4
  %and77 = and i32 %70, 4194304
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %cond.true79, label %cond.false80

cond.true79:                                      ; preds = %do.body75
  br i1 true, label %if.then81, label %if.end83

cond.false80:                                     ; preds = %do.body75
  br i1 false, label %if.then81, label %if.end83

if.then81:                                        ; preds = %cond.false80, %cond.true79
  %71 = load %struct.sv*, %struct.sv** %targ, align 8
  %call82 = call i32 @Perl_mg_set(%struct.sv* %71)
  br label %if.end83

if.end83:                                         ; preds = %if.then81, %cond.false80, %cond.true79
  br label %do.end84

do.end84:                                         ; preds = %if.end83
  %72 = load %struct.sv*, %struct.sv** %targ, align 8
  %73 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %73, i32 1
  store %struct.sv** %incdec.ptr85, %struct.sv*** %sp, align 8
  store %struct.sv* %72, %struct.sv** %incdec.ptr85, align 8
  br label %do.end86

do.end86:                                         ; preds = %do.end84
  br label %do.end87

do.end87:                                         ; preds = %do.end86
  br label %if.end88

if.end88:                                         ; preds = %do.end87, %cond.end59
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %74, %struct.sv*** @PL_stack_sp, align 8
  %75 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 0
  %76 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %76
}

declare dso_local void @Perl_av_unshift(%struct.av*, i64) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_reverse() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %tmp = alloca %struct.sv*, align 8
  %stash = alloca %struct.hv*, align 8
  %mg = alloca %struct.magic*, align 8
  %can_preserve = alloca i8, align 1
  %begin = alloca %struct.sv*, align 8
  %end = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %sv45 = alloca %struct.sv*, align 8
  %begin54 = alloca %struct.sv**, align 8
  %end58 = alloca %struct.sv**, align 8
  %tmp63 = alloca %struct.sv*, align 8
  %oldsp = alloca %struct.sv**, align 8
  %tmp74 = alloca %struct.sv*, align 8
  %up = alloca i8*, align 8
  %down = alloca i8*, align 8
  %tmp80 = alloca i32, align 4
  %targ = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %send = alloca i8*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %4, i32 0, i32 5
  %5 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %5 to i32
  %and = and i32 %conv, 3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags1 = getelementptr inbounds %struct.op, %struct.op* %6, i32 0, i32 5
  %7 = load i8, i8* %op_flags1, align 2
  %conv2 = zext i8 %7 to i32
  %and3 = and i32 %conv2, 3
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call = call i32 @Perl_block_gimme()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %and3, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp eq i32 %cond, 3
  br i1 %cmp, label %if.then, label %if.else79

if.then:                                          ; preds = %cond.end
  %8 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %8, i32 0, i32 6
  %9 = load i8, i8* %op_private, align 1
  %conv5 = zext i8 %9 to i32
  %and6 = and i32 %conv5, 8
  %tobool7 = icmp ne i32 %and6, 0
  br i1 %tobool7, label %if.then8, label %if.else68

if.then8:                                         ; preds = %if.then
  %10 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr9 = getelementptr inbounds i32, i32* %10, i32 -1
  store i32* %incdec.ptr9, i32** @PL_markstack_ptr, align 8
  %11 = load i32, i32* %10, align 4
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %13 = load %struct.sv*, %struct.sv** %12, align 8
  %14 = bitcast %struct.sv* %13 to i8*
  %15 = bitcast i8* %14 to %struct.av*
  store %struct.av* %15, %struct.av** %av, align 8
  %16 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv** %16, %struct.sv*** %sp, align 8
  %17 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags, align 4
  %and10 = and i32 %18, 14680064
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %if.then12, label %if.else53

if.then12:                                        ; preds = %if.then8
  %call13 = call %struct.sv* @Perl_sv_newmortal()
  store %struct.sv* %call13, %struct.sv** %tmp, align 8
  %19 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags14 = getelementptr inbounds %struct.av, %struct.av* %19, i32 0, i32 2
  %20 = load i32, i32* %sv_flags14, align 4
  %and15 = and i32 %20, 8388608
  %tobool16 = icmp ne i32 %and15, 0
  br i1 %tobool16, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %if.then12
  %21 = load %struct.av*, %struct.av** %av, align 8
  %22 = bitcast %struct.av* %21 to %struct.sv*
  %call17 = call %struct.magic* @Perl_mg_find(%struct.sv* %22, i32 80)
  store %struct.magic* %call17, %struct.magic** %mg, align 8
  %tobool18 = icmp ne %struct.magic* %call17, null
  br i1 %tobool18, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %23 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %23, i32 0, i32 6
  %24 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool19 = icmp ne %struct.sv* %24, null
  br i1 %tobool19, label %cond.true20, label %cond.false22

cond.true20:                                      ; preds = %lor.rhs
  %25 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj21 = getelementptr inbounds %struct.magic, %struct.magic* %25, i32 0, i32 6
  %26 = load %struct.sv*, %struct.sv** %mg_obj21, align 8
  br label %cond.end25

cond.false22:                                     ; preds = %lor.rhs
  %27 = load %struct.av*, %struct.av** %av, align 8
  %28 = bitcast %struct.av* %27 to i8*
  %29 = bitcast i8* %28 to %struct.sv*
  %call23 = call %struct.sv* @Perl_newRV(%struct.sv* %29)
  %call24 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call23)
  br label %cond.end25

cond.end25:                                       ; preds = %cond.false22, %cond.true20
  %cond26 = phi %struct.sv* [ %26, %cond.true20 ], [ %call24, %cond.false22 ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond26, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %30 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %30, i32 0, i32 0
  %31 = load i8*, i8** %sv_any, align 8
  %32 = bitcast i8* %31 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %32, i32 0, i32 0
  %33 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %33, %struct.hv** %stash, align 8
  %tobool27 = icmp ne %struct.hv* %33, null
  br i1 %tobool27, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.end25
  %34 = load %struct.hv*, %struct.hv** %stash, align 8
  %call28 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %34, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool29 = icmp ne %struct.gv* %call28, null
  br i1 %tobool29, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %35 = load %struct.hv*, %struct.hv** %stash, align 8
  %call30 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool31 = icmp ne %struct.gv* %call30, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %cond.end25
  %36 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end25 ], [ %tobool31, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %if.then12
  %37 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then12 ], [ %36, %land.end ]
  %frombool = zext i1 %37 to i8
  store i8 %frombool, i8* %can_preserve, align 1
  store i64 0, i64* %i, align 8
  %38 = load %struct.av*, %struct.av** %av, align 8
  %call32 = call i64 @S_av_top_index(%struct.av* %38)
  store i64 %call32, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %lor.end
  %39 = load i64, i64* %i, align 8
  %40 = load i64, i64* %j, align 8
  %cmp33 = icmp slt i64 %39, %40
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load i8, i8* %can_preserve, align 1
  %tobool35 = trunc i8 %41 to i1
  br i1 %tobool35, label %if.then36, label %if.end50

if.then36:                                        ; preds = %for.body
  %42 = load %struct.av*, %struct.av** %av, align 8
  %43 = load i64, i64* %i, align 8
  %call37 = call zeroext i1 @Perl_av_exists(%struct.av* %42, i64 %43)
  br i1 %call37, label %if.else, label %if.then38

if.then38:                                        ; preds = %if.then36
  %44 = load %struct.av*, %struct.av** %av, align 8
  %45 = load i64, i64* %j, align 8
  %call39 = call zeroext i1 @Perl_av_exists(%struct.av* %44, i64 %45)
  br i1 %call39, label %if.then40, label %if.end

if.then40:                                        ; preds = %if.then38
  %46 = load %struct.av*, %struct.av** %av, align 8
  %47 = load i64, i64* %j, align 8
  %call41 = call %struct.sv* @Perl_av_delete(%struct.av* %46, i64 %47, i32 0)
  store %struct.sv* %call41, %struct.sv** %sv, align 8
  %48 = load %struct.av*, %struct.av** %av, align 8
  %49 = load i64, i64* %i, align 8
  %call42 = call %struct.sv** @Perl_av_fetch(%struct.av* %48, i64 %49, i32 1)
  %50 = load %struct.sv*, %struct.sv** %call42, align 8
  store %struct.sv* %50, %struct.sv** %begin, align 8
  %51 = load %struct.sv*, %struct.sv** %begin, align 8
  %52 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_sv_setsv_mg(%struct.sv* %51, %struct.sv* %52)
  br label %if.end

if.end:                                           ; preds = %if.then40, %if.then38
  br label %for.inc

if.else:                                          ; preds = %if.then36
  %53 = load %struct.av*, %struct.av** %av, align 8
  %54 = load i64, i64* %j, align 8
  %call43 = call zeroext i1 @Perl_av_exists(%struct.av* %53, i64 %54)
  br i1 %call43, label %if.end48, label %if.then44

if.then44:                                        ; preds = %if.else
  %55 = load %struct.av*, %struct.av** %av, align 8
  %56 = load i64, i64* %i, align 8
  %call46 = call %struct.sv* @Perl_av_delete(%struct.av* %55, i64 %56, i32 0)
  store %struct.sv* %call46, %struct.sv** %sv45, align 8
  %57 = load %struct.av*, %struct.av** %av, align 8
  %58 = load i64, i64* %j, align 8
  %call47 = call %struct.sv** @Perl_av_fetch(%struct.av* %57, i64 %58, i32 1)
  %59 = load %struct.sv*, %struct.sv** %call47, align 8
  store %struct.sv* %59, %struct.sv** %end, align 8
  %60 = load %struct.sv*, %struct.sv** %end, align 8
  %61 = load %struct.sv*, %struct.sv** %sv45, align 8
  call void @Perl_sv_setsv_mg(%struct.sv* %60, %struct.sv* %61)
  br label %for.inc

if.end48:                                         ; preds = %if.else
  br label %if.end49

if.end49:                                         ; preds = %if.end48
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %for.body
  %62 = load %struct.av*, %struct.av** %av, align 8
  %63 = load i64, i64* %i, align 8
  %call51 = call %struct.sv** @Perl_av_fetch(%struct.av* %62, i64 %63, i32 1)
  %64 = load %struct.sv*, %struct.sv** %call51, align 8
  store %struct.sv* %64, %struct.sv** %begin, align 8
  %65 = load %struct.av*, %struct.av** %av, align 8
  %66 = load i64, i64* %j, align 8
  %call52 = call %struct.sv** @Perl_av_fetch(%struct.av* %65, i64 %66, i32 1)
  %67 = load %struct.sv*, %struct.sv** %call52, align 8
  store %struct.sv* %67, %struct.sv** %end, align 8
  %68 = load %struct.sv*, %struct.sv** %tmp, align 8
  %69 = load %struct.sv*, %struct.sv** %begin, align 8
  call void @Perl_sv_setsv_flags(%struct.sv* %68, %struct.sv* %69, i32 1538)
  %70 = load %struct.sv*, %struct.sv** %begin, align 8
  %71 = load %struct.sv*, %struct.sv** %end, align 8
  call void @Perl_sv_setsv_mg(%struct.sv* %70, %struct.sv* %71)
  %72 = load %struct.sv*, %struct.sv** %end, align 8
  %73 = load %struct.sv*, %struct.sv** %tmp, align 8
  call void @Perl_sv_setsv_mg(%struct.sv* %72, %struct.sv* %73)
  br label %for.inc

for.inc:                                          ; preds = %if.end50, %if.then44, %if.end
  %74 = load i64, i64* %i, align 8
  %inc = add nsw i64 %74, 1
  store i64 %inc, i64* %i, align 8
  %75 = load i64, i64* %j, align 8
  %dec = add nsw i64 %75, -1
  store i64 %dec, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end67

if.else53:                                        ; preds = %if.then8
  %76 = load %struct.av*, %struct.av** %av, align 8
  %sv_u55 = getelementptr inbounds %struct.av, %struct.av* %76, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u55 to %struct.sv***
  %77 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  store %struct.sv** %77, %struct.sv*** %begin54, align 8
  %78 = load %struct.sv**, %struct.sv*** %begin54, align 8
  %tobool56 = icmp ne %struct.sv** %78, null
  br i1 %tobool56, label %if.then57, label %if.end66

if.then57:                                        ; preds = %if.else53
  %79 = load %struct.sv**, %struct.sv*** %begin54, align 8
  %80 = load %struct.av*, %struct.av** %av, align 8
  %sv_any59 = getelementptr inbounds %struct.av, %struct.av* %80, i32 0, i32 0
  %81 = load %struct.xpvav*, %struct.xpvav** %sv_any59, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %81, i32 0, i32 2
  %82 = load i64, i64* %xav_fill, align 8
  %add.ptr60 = getelementptr inbounds %struct.sv*, %struct.sv** %79, i64 %82
  store %struct.sv** %add.ptr60, %struct.sv*** %end58, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then57
  %83 = load %struct.sv**, %struct.sv*** %begin54, align 8
  %84 = load %struct.sv**, %struct.sv*** %end58, align 8
  %cmp61 = icmp ult %struct.sv** %83, %84
  br i1 %cmp61, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %85 = load %struct.sv**, %struct.sv*** %begin54, align 8
  %86 = load %struct.sv*, %struct.sv** %85, align 8
  store %struct.sv* %86, %struct.sv** %tmp63, align 8
  %87 = load %struct.sv**, %struct.sv*** %end58, align 8
  %88 = load %struct.sv*, %struct.sv** %87, align 8
  %89 = load %struct.sv**, %struct.sv*** %begin54, align 8
  %incdec.ptr64 = getelementptr inbounds %struct.sv*, %struct.sv** %89, i32 1
  store %struct.sv** %incdec.ptr64, %struct.sv*** %begin54, align 8
  store %struct.sv* %88, %struct.sv** %89, align 8
  %90 = load %struct.sv*, %struct.sv** %tmp63, align 8
  %91 = load %struct.sv**, %struct.sv*** %end58, align 8
  %incdec.ptr65 = getelementptr inbounds %struct.sv*, %struct.sv** %91, i32 -1
  store %struct.sv** %incdec.ptr65, %struct.sv*** %end58, align 8
  store %struct.sv* %90, %struct.sv** %91, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end66

if.end66:                                         ; preds = %while.end, %if.else53
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %for.end
  br label %if.end78

if.else68:                                        ; preds = %if.then
  %92 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %92, %struct.sv*** %oldsp, align 8
  %93 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr69 = getelementptr inbounds %struct.sv*, %struct.sv** %93, i32 1
  store %struct.sv** %incdec.ptr69, %struct.sv*** %mark, align 8
  br label %while.cond70

while.cond70:                                     ; preds = %while.body73, %if.else68
  %94 = load %struct.sv**, %struct.sv*** %mark, align 8
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp71 = icmp ult %struct.sv** %94, %95
  br i1 %cmp71, label %while.body73, label %while.end77

while.body73:                                     ; preds = %while.cond70
  %96 = load %struct.sv**, %struct.sv*** %mark, align 8
  %97 = load %struct.sv*, %struct.sv** %96, align 8
  store %struct.sv* %97, %struct.sv** %tmp74, align 8
  %98 = load %struct.sv**, %struct.sv*** %sp, align 8
  %99 = load %struct.sv*, %struct.sv** %98, align 8
  %100 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr75 = getelementptr inbounds %struct.sv*, %struct.sv** %100, i32 1
  store %struct.sv** %incdec.ptr75, %struct.sv*** %mark, align 8
  store %struct.sv* %99, %struct.sv** %100, align 8
  %101 = load %struct.sv*, %struct.sv** %tmp74, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr76 = getelementptr inbounds %struct.sv*, %struct.sv** %102, i32 -1
  store %struct.sv** %incdec.ptr76, %struct.sv*** %sp, align 8
  store %struct.sv* %101, %struct.sv** %102, align 8
  br label %while.cond70

while.end77:                                      ; preds = %while.cond70
  %103 = load %struct.sv**, %struct.sv*** %oldsp, align 8
  store %struct.sv** %103, %struct.sv*** %sp, align 8
  br label %if.end78

if.end78:                                         ; preds = %while.end77, %if.end67
  br label %if.end186

if.else79:                                        ; preds = %cond.end
  %104 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %105 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %105, i32 0, i32 3
  %106 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %104, i64 %106
  %107 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %107, %struct.sv** %targ, align 8
  %108 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %108, i32 0, i32 2
  %109 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %109, -536870913
  store i32 %and82, i32* %sv_flags81, align 4
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  %111 = load %struct.sv**, %struct.sv*** %mark, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %110 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %111 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp83 = icmp sgt i64 %sub.ptr.div, 1
  br i1 %cmp83, label %if.then85, label %if.else86

if.then85:                                        ; preds = %if.else79
  %112 = load %struct.sv*, %struct.sv** %targ, align 8
  %113 = load %struct.sv**, %struct.sv*** %mark, align 8
  %114 = load %struct.sv**, %struct.sv*** %sp, align 8
  call void @Perl_do_join(%struct.sv* %112, %struct.sv* @PL_sv_no, %struct.sv** %113, %struct.sv** %114)
  br label %if.end94

if.else86:                                        ; preds = %if.else79
  %115 = load %struct.sv*, %struct.sv** %targ, align 8
  %116 = load %struct.sv**, %struct.sv*** %sp, align 8
  %117 = load %struct.sv**, %struct.sv*** %mark, align 8
  %cmp87 = icmp ugt %struct.sv** %116, %117
  br i1 %cmp87, label %cond.true89, label %cond.false90

cond.true89:                                      ; preds = %if.else86
  %118 = load %struct.sv**, %struct.sv*** %sp, align 8
  %119 = load %struct.sv*, %struct.sv** %118, align 8
  br label %cond.end92

cond.false90:                                     ; preds = %if.else86
  %call91 = call %struct.sv* @Perl_find_rundefsv()
  br label %cond.end92

cond.end92:                                       ; preds = %cond.false90, %cond.true89
  %cond93 = phi %struct.sv* [ %119, %cond.true89 ], [ %call91, %cond.false90 ]
  call void @Perl_sv_setsv_flags(%struct.sv* %115, %struct.sv* %cond93, i32 1538)
  br label %if.end94

if.end94:                                         ; preds = %cond.end92, %if.then85
  %120 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags95 = getelementptr inbounds %struct.sv, %struct.sv* %120, i32 0, i32 2
  %121 = load i32, i32* %sv_flags95, align 4
  %and96 = and i32 %121, 430018304
  %cmp97 = icmp eq i32 %and96, 1024
  br i1 %cmp97, label %cond.true99, label %cond.false102

cond.true99:                                      ; preds = %if.end94
  %122 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_any100 = getelementptr inbounds %struct.sv, %struct.sv* %122, i32 0, i32 0
  %123 = load i8*, i8** %sv_any100, align 8
  %124 = bitcast i8* %123 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %124, i32 0, i32 2
  %125 = load i64, i64* %xpv_cur, align 8
  store i64 %125, i64* %len, align 8
  %126 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u101 = getelementptr inbounds %struct.sv, %struct.sv* %126, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u101 to i8**
  %127 = load i8*, i8** %svu_pv, align 8
  br label %cond.end104

cond.false102:                                    ; preds = %if.end94
  %128 = load %struct.sv*, %struct.sv** %targ, align 8
  %call103 = call i8* @Perl_sv_pvn_force_flags(%struct.sv* %128, i64* %len, i32 2)
  br label %cond.end104

cond.end104:                                      ; preds = %cond.false102, %cond.true99
  %cond105 = phi i8* [ %127, %cond.true99 ], [ %call103, %cond.false102 ]
  store i8* %cond105, i8** %up, align 8
  %129 = load i64, i64* %len, align 8
  %cmp106 = icmp ugt i64 %129, 1
  br i1 %cmp106, label %if.then108, label %if.end174

if.then108:                                       ; preds = %cond.end104
  %130 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags109 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags109, align 4
  %and110 = and i32 %131, 536870912
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %land.lhs.true112, label %if.end157

land.lhs.true112:                                 ; preds = %if.then108
  %132 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %132, i32 0, i32 10
  %133 = load i32, i32* %cop_hints, align 8
  %add = add i32 %133, 0
  %and113 = and i32 %add, 8
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.end157, label %if.then115

if.then115:                                       ; preds = %land.lhs.true112
  %134 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u116 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 3
  %svu_pv117 = bitcast %union.anon* %sv_u116 to i8**
  %135 = load i8*, i8** %svu_pv117, align 8
  store i8* %135, i8** %s, align 8
  %136 = load i8*, i8** %s, align 8
  %137 = load i64, i64* %len, align 8
  %add.ptr118 = getelementptr inbounds i8, i8* %136, i64 %137
  store i8* %add.ptr118, i8** %send, align 8
  br label %while.cond119

while.cond119:                                    ; preds = %if.end153, %if.then126, %if.then115
  %138 = load i8*, i8** %s, align 8
  %139 = load i8*, i8** %send, align 8
  %cmp120 = icmp ult i8* %138, %139
  br i1 %cmp120, label %while.body122, label %while.end154

while.body122:                                    ; preds = %while.cond119
  %140 = load i8*, i8** %s, align 8
  %141 = load i8, i8* %140, align 1
  %conv123 = zext i8 %141 to i64
  %cmp124 = icmp ult i64 %conv123, 128
  br i1 %cmp124, label %if.then126, label %if.else128

if.then126:                                       ; preds = %while.body122
  %142 = load i8*, i8** %s, align 8
  %incdec.ptr127 = getelementptr inbounds i8, i8* %142, i32 1
  store i8* %incdec.ptr127, i8** %s, align 8
  br label %while.cond119

if.else128:                                       ; preds = %while.body122
  %143 = load i8*, i8** %s, align 8
  %144 = load i8*, i8** %send, align 8
  %145 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast129 = ptrtoint i8* %144 to i64
  %sub.ptr.rhs.cast130 = ptrtoint i8* %145 to i64
  %sub.ptr.sub131 = sub i64 %sub.ptr.lhs.cast129, %sub.ptr.rhs.cast130
  %call132 = call zeroext i1 @Perl_ckwarn_d(i32 44)
  %146 = zext i1 %call132 to i64
  %cond134 = select i1 %call132, i32 0, i32 -8161
  %call135 = call i64 @Perl_utf8n_to_uvchr(i8* %143, i64 %sub.ptr.sub131, i64* null, i32 %cond134)
  %tobool136 = icmp ne i64 %call135, 0
  br i1 %tobool136, label %if.end138, label %if.then137

if.then137:                                       ; preds = %if.else128
  br label %while.end154

if.end138:                                        ; preds = %if.else128
  %147 = load i8*, i8** %s, align 8
  store i8* %147, i8** %up, align 8
  %148 = load i8*, i8** %s, align 8
  %149 = load i8, i8* %148, align 1
  %idxprom = zext i8 %149 to i64
  %arrayidx139 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom
  %150 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %150 to i32
  %151 = load i8*, i8** %s, align 8
  %idx.ext141 = sext i32 %conv140 to i64
  %add.ptr142 = getelementptr inbounds i8, i8* %151, i64 %idx.ext141
  store i8* %add.ptr142, i8** %s, align 8
  %152 = load i8*, i8** %s, align 8
  %add.ptr143 = getelementptr inbounds i8, i8* %152, i64 -1
  store i8* %add.ptr143, i8** %down, align 8
  br label %while.cond144

while.cond144:                                    ; preds = %while.body147, %if.end138
  %153 = load i8*, i8** %down, align 8
  %154 = load i8*, i8** %up, align 8
  %cmp145 = icmp ugt i8* %153, %154
  br i1 %cmp145, label %while.body147, label %while.end152

while.body147:                                    ; preds = %while.cond144
  %155 = load i8*, i8** %up, align 8
  %156 = load i8, i8* %155, align 1
  %conv148 = sext i8 %156 to i32
  store i32 %conv148, i32* %tmp80, align 4
  %157 = load i8*, i8** %down, align 8
  %158 = load i8, i8* %157, align 1
  %159 = load i8*, i8** %up, align 8
  %incdec.ptr149 = getelementptr inbounds i8, i8* %159, i32 1
  store i8* %incdec.ptr149, i8** %up, align 8
  store i8 %158, i8* %159, align 1
  %160 = load i32, i32* %tmp80, align 4
  %conv150 = trunc i32 %160 to i8
  %161 = load i8*, i8** %down, align 8
  %incdec.ptr151 = getelementptr inbounds i8, i8* %161, i32 -1
  store i8* %incdec.ptr151, i8** %down, align 8
  store i8 %conv150, i8* %161, align 1
  br label %while.cond144

while.end152:                                     ; preds = %while.cond144
  br label %if.end153

if.end153:                                        ; preds = %while.end152
  br label %while.cond119

while.end154:                                     ; preds = %if.then137, %while.cond119
  %162 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u155 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 3
  %svu_pv156 = bitcast %union.anon* %sv_u155 to i8**
  %163 = load i8*, i8** %svu_pv156, align 8
  store i8* %163, i8** %up, align 8
  br label %if.end157

if.end157:                                        ; preds = %while.end154, %land.lhs.true112, %if.then108
  %164 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_u158 = getelementptr inbounds %struct.sv, %struct.sv* %164, i32 0, i32 3
  %svu_pv159 = bitcast %union.anon* %sv_u158 to i8**
  %165 = load i8*, i8** %svu_pv159, align 8
  %166 = load i64, i64* %len, align 8
  %add.ptr160 = getelementptr inbounds i8, i8* %165, i64 %166
  %add.ptr161 = getelementptr inbounds i8, i8* %add.ptr160, i64 -1
  store i8* %add.ptr161, i8** %down, align 8
  br label %while.cond162

while.cond162:                                    ; preds = %while.body165, %if.end157
  %167 = load i8*, i8** %down, align 8
  %168 = load i8*, i8** %up, align 8
  %cmp163 = icmp ugt i8* %167, %168
  br i1 %cmp163, label %while.body165, label %while.end170

while.body165:                                    ; preds = %while.cond162
  %169 = load i8*, i8** %up, align 8
  %170 = load i8, i8* %169, align 1
  %conv166 = sext i8 %170 to i32
  store i32 %conv166, i32* %tmp80, align 4
  %171 = load i8*, i8** %down, align 8
  %172 = load i8, i8* %171, align 1
  %173 = load i8*, i8** %up, align 8
  %incdec.ptr167 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %incdec.ptr167, i8** %up, align 8
  store i8 %172, i8* %173, align 1
  %174 = load i32, i32* %tmp80, align 4
  %conv168 = trunc i32 %174 to i8
  %175 = load i8*, i8** %down, align 8
  %incdec.ptr169 = getelementptr inbounds i8, i8* %175, i32 -1
  store i8* %incdec.ptr169, i8** %down, align 8
  store i8 %conv168, i8* %175, align 1
  br label %while.cond162

while.end170:                                     ; preds = %while.cond162
  %176 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags171 = getelementptr inbounds %struct.sv, %struct.sv* %176, i32 0, i32 2
  %177 = load i32, i32* %sv_flags171, align 4
  %and172 = and i32 %177, 2147418367
  store i32 %and172, i32* %sv_flags171, align 4
  %178 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %178, i32 0, i32 2
  %179 = load i32, i32* %sv_flags173, align 4
  %or = or i32 %179, 17408
  store i32 %or, i32* %sv_flags173, align 4
  br label %if.end174

if.end174:                                        ; preds = %while.end170, %cond.end104
  %180 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr175 = getelementptr inbounds %struct.sv*, %struct.sv** %180, i64 1
  store %struct.sv** %add.ptr175, %struct.sv*** %sp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end174
  br label %do.body176

do.body176:                                       ; preds = %do.body
  %181 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags177 = getelementptr inbounds %struct.sv, %struct.sv* %181, i32 0, i32 2
  %182 = load i32, i32* %sv_flags177, align 4
  %and178 = and i32 %182, 4194304
  %tobool179 = icmp ne i32 %and178, 0
  br i1 %tobool179, label %cond.true180, label %cond.false181

cond.true180:                                     ; preds = %do.body176
  br i1 true, label %if.then182, label %if.end184

cond.false181:                                    ; preds = %do.body176
  br i1 false, label %if.then182, label %if.end184

if.then182:                                       ; preds = %cond.false181, %cond.true180
  %183 = load %struct.sv*, %struct.sv** %targ, align 8
  %call183 = call i32 @Perl_mg_set(%struct.sv* %183)
  br label %if.end184

if.end184:                                        ; preds = %if.then182, %cond.false181, %cond.true180
  br label %do.end

do.end:                                           ; preds = %if.end184
  %184 = load %struct.sv*, %struct.sv** %targ, align 8
  %185 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %184, %struct.sv** %185, align 8
  br label %do.end185

do.end185:                                        ; preds = %do.end
  br label %if.end186

if.end186:                                        ; preds = %do.end185, %if.end78
  %186 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %186, %struct.sv*** @PL_stack_sp, align 8
  %187 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %187, i32 0, i32 0
  %188 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %188
}

declare dso_local void @Perl_sv_setsv_mg(%struct.sv*, %struct.sv*) #1

declare dso_local void @Perl_do_join(%struct.sv*, %struct.sv*, %struct.sv**, %struct.sv**) #1

declare dso_local %struct.sv* @Perl_find_rundefsv() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_split() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %targ = alloca %struct.sv*, align 8
  %ary = alloca %struct.av*, align 8
  %limit = alloca i64, align 8
  %sv = alloca %struct.sv*, align 8
  %len = alloca i64, align 8
  %s = alloca i8*, align 8
  %do_utf8 = alloca i8, align 1
  %strend = alloca i8*, align 8
  %pm = alloca %struct.pmop*, align 8
  %rx = alloca %struct.p5rx*, align 8
  %dstr = alloca %struct.sv*, align 8
  %m = alloca i8*, align 8
  %iters = alloca i64, align 8
  %slen = alloca i64, align 8
  %maxiters = alloca i64, align 8
  %trailing_empty = alloca i32, align 4
  %orig = alloca i8*, align 8
  %origlimit = alloca i32, align 4
  %realarray = alloca i32, align 4
  %base = alloca i32, align 4
  %gimme = alloca i32, align 4
  %gimme_scalar = alloca i8, align 1
  %oldsave = alloca i32, align 4
  %make_mortal = alloca i32, align 4
  %multiline = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %mark_stack_entry = alloca i32*, align 8
  %i = alloca i32, align 4
  %t = alloca i32, align 4
  %items = alloca i32, align 4
  %tail = alloca i32, align 4
  %csv = alloca %struct.sv*, align 8
  %c = alloca i8, align 1
  %rex_return = alloca i32, align 4
  %i1233 = alloca i32, align 4
  %l = alloca i64, align 8
  %i1445 = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 5
  %2 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  %5 = bitcast %struct.sv* %4 to %struct.av*
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.av* [ %5, %cond.true ], [ null, %cond.false ]
  store %struct.av* %cond, %struct.av** %ary, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %6, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %7 = load %struct.sv*, %struct.sv** %6, align 8
  store %struct.sv* %7, %struct.sv** @PL_Sv, align 8
  %8 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags, align 4
  %and2 = and i32 %9, 2097408
  %cmp = icmp eq i32 %and2, 256
  br i1 %cmp, label %cond.true4, label %cond.false5

cond.true4:                                       ; preds = %cond.end
  %10 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 0
  %11 = load i8*, i8** %sv_any, align 8
  %12 = bitcast i8* %11 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %12, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %13 = load i64, i64* %xivu_iv, align 8
  br label %cond.end6

cond.false5:                                      ; preds = %cond.end
  %14 = load %struct.sv*, %struct.sv** @PL_Sv, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %14, i32 2)
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi i64 [ %13, %cond.true4 ], [ %call, %cond.false5 ]
  store i64 %cond7, i64* %limit, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr8 = getelementptr inbounds %struct.sv*, %struct.sv** %15, i32 -1
  store %struct.sv** %incdec.ptr8, %struct.sv*** %sp, align 8
  %16 = load %struct.sv*, %struct.sv** %15, align 8
  store %struct.sv* %16, %struct.sv** %sv, align 8
  %17 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags9 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags9, align 4
  %and10 = and i32 %18, 2098176
  %cmp11 = icmp eq i32 %and10, 1024
  br i1 %cmp11, label %cond.true13, label %cond.false15

cond.true13:                                      ; preds = %cond.end6
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_any14 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 0
  %20 = load i8*, i8** %sv_any14, align 8
  %21 = bitcast i8* %20 to %struct.xpv*
  %xpv_cur = getelementptr inbounds %struct.xpv, %struct.xpv* %21, i32 0, i32 2
  %22 = load i64, i64* %xpv_cur, align 8
  store i64 %22, i64* %len, align 8
  %23 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u to i8**
  %24 = load i8*, i8** %svu_pv, align 8
  %add.ptr = getelementptr inbounds i8, i8* %24, i64 0
  br label %cond.end17

cond.false15:                                     ; preds = %cond.end6
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %call16 = call i8* @Perl_sv_2pv_flags(%struct.sv* %25, i64* %len, i32 34)
  br label %cond.end17

cond.end17:                                       ; preds = %cond.false15, %cond.true13
  %cond18 = phi i8* [ %add.ptr, %cond.true13 ], [ %call16, %cond.false15 ]
  store i8* %cond18, i8** %s, align 8
  %26 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags19 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %27, 536870912
  %tobool21 = icmp ne i32 %and20, 0
  br i1 %tobool21, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %cond.end17
  %28 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %28, i32 0, i32 10
  %29 = load i32, i32* %cop_hints, align 8
  %add = add i32 %29, 0
  %and22 = and i32 %add, 8
  %tobool23 = icmp ne i32 %and22, 0
  %lnot = xor i1 %tobool23, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %cond.end17
  %30 = phi i1 [ false, %cond.end17 ], [ %lnot, %land.rhs ]
  %frombool = zext i1 %30 to i8
  store i8 %frombool, i8* %do_utf8, align 1
  %31 = load i8*, i8** %s, align 8
  %32 = load i64, i64* %len, align 8
  %add.ptr24 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8* %add.ptr24, i8** %strend, align 8
  store i64 0, i64* %iters, align 8
  %33 = load i8, i8* %do_utf8, align 1
  %tobool25 = trunc i8 %33 to i1
  br i1 %tobool25, label %cond.true27, label %cond.false29

cond.true27:                                      ; preds = %land.end
  %34 = load i8*, i8** %s, align 8
  %35 = load i8*, i8** %strend, align 8
  %call28 = call i64 @Perl_utf8_length(i8* %34, i8* %35)
  br label %cond.end30

cond.false29:                                     ; preds = %land.end
  %36 = load i8*, i8** %strend, align 8
  %37 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %36 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %37 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  br label %cond.end30

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi i64 [ %call28, %cond.true27 ], [ %sub.ptr.sub, %cond.false29 ]
  store i64 %cond31, i64* %slen, align 8
  %38 = load i64, i64* %slen, align 8
  %add32 = add i64 %38, 10
  store i64 %add32, i64* %maxiters, align 8
  store i32 0, i32* %trailing_empty, align 4
  %39 = load i64, i64* %limit, align 8
  %conv33 = trunc i64 %39 to i32
  store i32 %conv33, i32* %origlimit, align 4
  store i32 0, i32* %realarray, align 4
  %40 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags34 = getelementptr inbounds %struct.op, %struct.op* %40, i32 0, i32 5
  %41 = load i8, i8* %op_flags34, align 2
  %conv35 = zext i8 %41 to i32
  %and36 = and i32 %conv35, 3
  %tobool37 = icmp ne i32 %and36, 0
  br i1 %tobool37, label %cond.true38, label %cond.false42

cond.true38:                                      ; preds = %cond.end30
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags39 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 5
  %43 = load i8, i8* %op_flags39, align 2
  %conv40 = zext i8 %43 to i32
  %and41 = and i32 %conv40, 3
  br label %cond.end44

cond.false42:                                     ; preds = %cond.end30
  %call43 = call i32 @Perl_block_gimme()
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false42, %cond.true38
  %cond45 = phi i32 [ %and41, %cond.true38 ], [ %call43, %cond.false42 ]
  store i32 %cond45, i32* %gimme, align 4
  %44 = load i32, i32* @PL_savestack_ix, align 4
  store i32 %44, i32* %oldsave, align 4
  store i32 524288, i32* %make_mortal, align 4
  store i8 0, i8* %multiline, align 1
  store %struct.magic* null, %struct.magic** %mg, align 8
  %45 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr46 = getelementptr inbounds %struct.sv*, %struct.sv** %45, i32 -1
  store %struct.sv** %incdec.ptr46, %struct.sv*** %sp, align 8
  %46 = load %struct.sv*, %struct.sv** %45, align 8
  %47 = bitcast %struct.sv* %46 to %struct.pmop*
  store %struct.pmop* %47, %struct.pmop** %pm, align 8
  %48 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %tobool47 = icmp ne %struct.pmop* %48, null
  br i1 %tobool47, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end44
  %49 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %50 = load i8*, i8** %s, align 8
  %call48 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.57, i64 0, i64 0), %struct.pmop* %49, i8* %50)
  store %struct.op* %call48, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end44
  %51 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmregexp = getelementptr inbounds %struct.pmop, %struct.pmop* %51, i32 0, i32 9
  %52 = load %struct.p5rx*, %struct.p5rx** %op_pmregexp, align 8
  store %struct.p5rx* %52, %struct.p5rx** %rx, align 8
  %53 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call49 = call %struct.regexp* @S_ReANY(%struct.p5rx* %53)
  %extflags = getelementptr inbounds %struct.regexp, %struct.regexp* %call49, i32 0, i32 7
  %54 = load i32, i32* %extflags, align 8
  %call50 = call i32 @get_regex_charset(i32 %54)
  %cmp51 = icmp eq i32 %call50, 1
  br i1 %cmp51, label %land.lhs.true, label %cond.false58

land.lhs.true:                                    ; preds = %if.end
  %55 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call53 = call %struct.regexp* @S_ReANY(%struct.p5rx* %55)
  %extflags54 = getelementptr inbounds %struct.regexp, %struct.regexp* %call53, i32 0, i32 7
  %56 = load i32, i32* %extflags54, align 8
  %and55 = and i32 %56, 1610612736
  %tobool56 = icmp ne i32 %and55, 0
  br i1 %tobool56, label %cond.true57, label %cond.false58

cond.true57:                                      ; preds = %land.lhs.true
  br i1 true, label %if.then59, label %if.end60

cond.false58:                                     ; preds = %land.lhs.true, %if.end
  br i1 false, label %if.then59, label %if.end60

if.then59:                                        ; preds = %cond.false58, %cond.true57
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end60

if.end60:                                         ; preds = %if.then59, %cond.false58, %cond.true57
  %57 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu = getelementptr inbounds %struct.pmop, %struct.pmop* %57, i32 0, i32 11
  %op_pmtargetgv = bitcast %union.anon.25* %op_pmreplrootu to %struct.gv**
  %58 = load %struct.gv*, %struct.gv** %op_pmtargetgv, align 8
  %tobool61 = icmp ne %struct.gv* %58, null
  br i1 %tobool61, label %if.then62, label %if.else

if.then62:                                        ; preds = %if.end60
  %59 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu63 = getelementptr inbounds %struct.pmop, %struct.pmop* %59, i32 0, i32 11
  %op_pmtargetgv64 = bitcast %union.anon.25* %op_pmreplrootu63 to %struct.gv**
  %60 = load %struct.gv*, %struct.gv** %op_pmtargetgv64, align 8
  %sv_u65 = getelementptr inbounds %struct.gv, %struct.gv* %60, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u65 to %struct.gp**
  %61 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr66 = getelementptr inbounds %struct.gp, %struct.gp* %61, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr66, i32 0, i32 6
  %62 = load %struct.av*, %struct.av** %gp_av, align 8
  %tobool67 = icmp ne %struct.av* %62, null
  br i1 %tobool67, label %cond.true68, label %cond.false75

cond.true68:                                      ; preds = %if.then62
  %63 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu69 = getelementptr inbounds %struct.pmop, %struct.pmop* %63, i32 0, i32 11
  %op_pmtargetgv70 = bitcast %union.anon.25* %op_pmreplrootu69 to %struct.gv**
  %64 = load %struct.gv*, %struct.gv** %op_pmtargetgv70, align 8
  %sv_u71 = getelementptr inbounds %struct.gv, %struct.gv* %64, i32 0, i32 3
  %svu_gp72 = bitcast %union.anon.4* %sv_u71 to %struct.gp**
  %65 = load %struct.gp*, %struct.gp** %svu_gp72, align 8
  %add.ptr73 = getelementptr inbounds %struct.gp, %struct.gp* %65, i64 0
  %gp_av74 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr73, i32 0, i32 6
  %66 = load %struct.av*, %struct.av** %gp_av74, align 8
  br label %cond.end83

cond.false75:                                     ; preds = %if.then62
  %67 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_pmreplrootu76 = getelementptr inbounds %struct.pmop, %struct.pmop* %67, i32 0, i32 11
  %op_pmtargetgv77 = bitcast %union.anon.25* %op_pmreplrootu76 to %struct.gv**
  %68 = load %struct.gv*, %struct.gv** %op_pmtargetgv77, align 8
  %call78 = call %struct.gv* @Perl_gv_add_by_type(%struct.gv* %68, i32 11)
  %sv_u79 = getelementptr inbounds %struct.gv, %struct.gv* %call78, i32 0, i32 3
  %svu_gp80 = bitcast %union.anon.4* %sv_u79 to %struct.gp**
  %69 = load %struct.gp*, %struct.gp** %svu_gp80, align 8
  %add.ptr81 = getelementptr inbounds %struct.gp, %struct.gp* %69, i64 0
  %gp_av82 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr81, i32 0, i32 6
  %70 = load %struct.av*, %struct.av** %gp_av82, align 8
  br label %cond.end83

cond.end83:                                       ; preds = %cond.false75, %cond.true68
  %cond84 = phi %struct.av* [ %66, %cond.true68 ], [ %70, %cond.false75 ]
  store %struct.av* %cond84, %struct.av** %ary, align 8
  br label %have_av

if.else:                                          ; preds = %if.end60
  %71 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_targ = getelementptr inbounds %struct.pmop, %struct.pmop* %71, i32 0, i32 3
  %72 = load i64, i64* %op_targ, align 8
  %tobool85 = icmp ne i64 %72, 0
  br i1 %tobool85, label %if.then86, label %if.end88

if.then86:                                        ; preds = %if.else
  %73 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %74 = load %struct.pmop*, %struct.pmop** %pm, align 8
  %op_targ87 = getelementptr inbounds %struct.pmop, %struct.pmop* %74, i32 0, i32 3
  %75 = load i64, i64* %op_targ87, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %73, i64 %75
  %76 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  %77 = bitcast %struct.sv* %76 to %struct.av*
  store %struct.av* %77, %struct.av** %ary, align 8
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %if.else
  br label %if.end89

if.end89:                                         ; preds = %if.end88
  %78 = load %struct.av*, %struct.av** %ary, align 8
  %tobool90 = icmp ne %struct.av* %78, null
  br i1 %tobool90, label %if.then91, label %if.end172

if.then91:                                        ; preds = %if.end89
  br label %have_av

have_av:                                          ; preds = %if.then91, %cond.end83
  store i32 1, i32* %realarray, align 4
  %79 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %79, %struct.sv*** @PL_stack_sp, align 8
  %80 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_extend(%struct.av* %80, i64 0)
  %81 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %81, i32 0, i32 1
  %82 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %82, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %83 = load %struct.sv*, %struct.sv** %sv, align 8
  %84 = bitcast %struct.sv* %83 to i8*
  %85 = bitcast i8* %84 to %struct.sv*
  %call92 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %85)
  %86 = load %struct.av*, %struct.av** %ary, align 8
  call void @Perl_av_clear(%struct.av* %86)
  %87 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %87, %struct.sv*** %sp, align 8
  %88 = load %struct.av*, %struct.av** %ary, align 8
  %89 = bitcast %struct.av* %88 to %struct.sv*
  %sv_flags93 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 2
  %90 = load i32, i32* %sv_flags93, align 4
  %and94 = and i32 %90, 8388608
  %tobool95 = icmp ne i32 %and94, 0
  br i1 %tobool95, label %cond.true96, label %cond.false98

cond.true96:                                      ; preds = %have_av
  %91 = load %struct.av*, %struct.av** %ary, align 8
  %92 = bitcast %struct.av* %91 to %struct.sv*
  %call97 = call %struct.magic* @Perl_mg_find(%struct.sv* %92, i32 80)
  br label %cond.end99

cond.false98:                                     ; preds = %have_av
  br label %cond.end99

cond.end99:                                       ; preds = %cond.false98, %cond.true96
  %cond100 = phi %struct.magic* [ %call97, %cond.true96 ], [ null, %cond.false98 ]
  store %struct.magic* %cond100, %struct.magic** %mg, align 8
  %tobool101 = icmp ne %struct.magic* %cond100, null
  br i1 %tobool101, label %if.then102, label %if.else139

if.then102:                                       ; preds = %cond.end99
  br label %do.body

do.body:                                          ; preds = %if.then102
  %93 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr103 = getelementptr inbounds i32, i32* %93, i32 1
  store i32* %incdec.ptr103, i32** @PL_markstack_ptr, align 8
  store i32* %incdec.ptr103, i32** %mark_stack_entry, align 8
  %94 = load i32*, i32** @PL_markstack_max, align 8
  %cmp104 = icmp eq i32* %incdec.ptr103, %94
  br i1 %cmp104, label %cond.true106, label %cond.false107

cond.true106:                                     ; preds = %do.body
  br i1 true, label %if.then108, label %if.end110

cond.false107:                                    ; preds = %do.body
  br i1 false, label %if.then108, label %if.end110

if.then108:                                       ; preds = %cond.false107, %cond.true106
  %call109 = call i32* @Perl_markstack_grow()
  store i32* %call109, i32** %mark_stack_entry, align 8
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %cond.false107, %cond.true106
  %95 = load %struct.sv**, %struct.sv*** %sp, align 8
  %96 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast111 = ptrtoint %struct.sv** %95 to i64
  %sub.ptr.rhs.cast112 = ptrtoint %struct.sv** %96 to i64
  %sub.ptr.sub113 = sub i64 %sub.ptr.lhs.cast111, %sub.ptr.rhs.cast112
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub113, 8
  %conv114 = trunc i64 %sub.ptr.div to i32
  %97 = load i32*, i32** %mark_stack_entry, align 8
  store i32 %conv114, i32* %97, align 4
  br label %do.end

do.end:                                           ; preds = %if.end110
  br label %do.body115

do.body115:                                       ; preds = %do.end
  br label %do.body116

do.body116:                                       ; preds = %do.body115
  %98 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %99 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast117 = ptrtoint %struct.sv** %98 to i64
  %sub.ptr.rhs.cast118 = ptrtoint %struct.sv** %99 to i64
  %sub.ptr.sub119 = sub i64 %sub.ptr.lhs.cast117, %sub.ptr.rhs.cast118
  %sub.ptr.div120 = sdiv exact i64 %sub.ptr.sub119, 8
  %cmp121 = icmp slt i64 %sub.ptr.div120, 1
  br i1 %cmp121, label %cond.true123, label %cond.false124

cond.true123:                                     ; preds = %do.body116
  br i1 true, label %if.then125, label %if.end127

cond.false124:                                    ; preds = %do.body116
  br i1 false, label %if.then125, label %if.end127

if.then125:                                       ; preds = %cond.false124, %cond.true123
  %100 = load %struct.sv**, %struct.sv*** %sp, align 8
  %101 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call126 = call %struct.sv** @Perl_stack_grow(%struct.sv** %100, %struct.sv** %101, i64 1)
  store %struct.sv** %call126, %struct.sv*** %sp, align 8
  %102 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end127

if.end127:                                        ; preds = %if.then125, %cond.false124, %cond.true123
  br label %do.end128

do.end128:                                        ; preds = %if.end127
  %103 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %103, i32 0, i32 6
  %104 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool129 = icmp ne %struct.sv* %104, null
  br i1 %tobool129, label %cond.true130, label %cond.false132

cond.true130:                                     ; preds = %do.end128
  %105 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj131 = getelementptr inbounds %struct.magic, %struct.magic* %105, i32 0, i32 6
  %106 = load %struct.sv*, %struct.sv** %mg_obj131, align 8
  br label %cond.end135

cond.false132:                                    ; preds = %do.end128
  %107 = load %struct.av*, %struct.av** %ary, align 8
  %108 = bitcast %struct.av* %107 to i8*
  %109 = bitcast i8* %108 to %struct.sv*
  %call133 = call %struct.sv* @Perl_newRV(%struct.sv* %109)
  %call134 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call133)
  br label %cond.end135

cond.end135:                                      ; preds = %cond.false132, %cond.true130
  %cond136 = phi %struct.sv* [ %106, %cond.true130 ], [ %call134, %cond.false132 ]
  %110 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr137 = getelementptr inbounds %struct.sv*, %struct.sv** %110, i32 1
  store %struct.sv** %incdec.ptr137, %struct.sv*** %sp, align 8
  store %struct.sv* %cond136, %struct.sv** %incdec.ptr137, align 8
  br label %do.end138

do.end138:                                        ; preds = %cond.end135
  br label %if.end171

if.else139:                                       ; preds = %cond.end99
  %111 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags140 = getelementptr inbounds %struct.av, %struct.av* %111, i32 0, i32 2
  %112 = load i32, i32* %sv_flags140, align 4
  %and141 = and i32 %112, 1073741824
  %tobool142 = icmp ne i32 %and141, 0
  br i1 %tobool142, label %if.end153, label %if.then143

if.then143:                                       ; preds = %if.else139
  %113 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags144 = getelementptr inbounds %struct.av, %struct.av* %113, i32 0, i32 2
  %114 = load i32, i32* %sv_flags144, align 4
  %or = or i32 %114, 1073741824
  store i32 %or, i32* %sv_flags144, align 4
  %115 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags145 = getelementptr inbounds %struct.av, %struct.av* %115, i32 0, i32 2
  %116 = load i32, i32* %sv_flags145, align 4
  %and146 = and i32 %116, 2147483647
  store i32 %and146, i32* %sv_flags145, align 4
  %117 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any147 = getelementptr inbounds %struct.av, %struct.av* %117, i32 0, i32 0
  %118 = load %struct.xpvav*, %struct.xpvav** %sv_any147, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %118, i32 0, i32 2
  %119 = load i64, i64* %xav_fill, align 8
  %conv148 = trunc i64 %119 to i32
  store i32 %conv148, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then143
  %120 = load i32, i32* %i, align 4
  %cmp149 = icmp sge i32 %120, 0
  br i1 %cmp149, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %121 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u151 = getelementptr inbounds %struct.av, %struct.av* %121, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u151 to %struct.sv***
  %122 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  %123 = load i32, i32* %i, align 4
  %idxprom = sext i32 %123 to i64
  %arrayidx152 = getelementptr inbounds %struct.sv*, %struct.sv** %122, i64 %idxprom
  store %struct.sv* @PL_sv_undef, %struct.sv** %arrayidx152, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %124 = load i32, i32* %i, align 4
  %dec = add nsw i32 %124, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end153

if.end153:                                        ; preds = %for.end, %if.else139
  br label %do.body154

do.body154:                                       ; preds = %if.end153
  %125 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %126 = bitcast %struct.av* %125 to i8*
  %127 = bitcast i8* %126 to %struct.sv*
  %128 = bitcast %struct.sv* %127 to i8*
  %129 = load %struct.av*, %struct.av** %ary, align 8
  %130 = bitcast %struct.av* %129 to i8*
  %131 = bitcast i8* %130 to %struct.sv*
  %132 = bitcast %struct.sv* %131 to i8*
  call void @Perl_save_pushptrptr(i8* %128, i8* %132, i32 39)
  br label %do.body155

do.body155:                                       ; preds = %do.body154
  %133 = load %struct.sv**, %struct.sv*** %sp, align 8
  %134 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast156 = ptrtoint %struct.sv** %133 to i64
  %sub.ptr.rhs.cast157 = ptrtoint %struct.sv** %134 to i64
  %sub.ptr.sub158 = sub i64 %sub.ptr.lhs.cast156, %sub.ptr.rhs.cast157
  %sub.ptr.div159 = sdiv exact i64 %sub.ptr.sub158, 8
  %135 = load %struct.av*, %struct.av** @PL_curstack, align 8
  %sv_any160 = getelementptr inbounds %struct.av, %struct.av* %135, i32 0, i32 0
  %136 = load %struct.xpvav*, %struct.xpvav** %sv_any160, align 8
  %xav_fill161 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %136, i32 0, i32 2
  store i64 %sub.ptr.div159, i64* %xav_fill161, align 8
  %137 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u162 = getelementptr inbounds %struct.av, %struct.av* %137, i32 0, i32 3
  %svu_array163 = bitcast %union.anon.0* %sv_u162 to %struct.sv***
  %138 = load %struct.sv**, %struct.sv*** %svu_array163, align 8
  store %struct.sv** %138, %struct.sv*** @PL_stack_base, align 8
  %139 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %140 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any164 = getelementptr inbounds %struct.av, %struct.av* %140, i32 0, i32 0
  %141 = load %struct.xpvav*, %struct.xpvav** %sv_any164, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %141, i32 0, i32 3
  %142 = load i64, i64* %xav_max, align 8
  %add.ptr165 = getelementptr inbounds %struct.sv*, %struct.sv** %139, i64 %142
  store %struct.sv** %add.ptr165, %struct.sv*** @PL_stack_max, align 8
  %143 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %144 = load %struct.av*, %struct.av** %ary, align 8
  %sv_any166 = getelementptr inbounds %struct.av, %struct.av* %144, i32 0, i32 0
  %145 = load %struct.xpvav*, %struct.xpvav** %sv_any166, align 8
  %xav_fill167 = getelementptr inbounds %struct.xpvav, %struct.xpvav* %145, i32 0, i32 2
  %146 = load i64, i64* %xav_fill167, align 8
  %add.ptr168 = getelementptr inbounds %struct.sv*, %struct.sv** %143, i64 %146
  store %struct.sv** %add.ptr168, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %add.ptr168, %struct.sv*** %sp, align 8
  %147 = load %struct.av*, %struct.av** %ary, align 8
  store %struct.av* %147, %struct.av** @PL_curstack, align 8
  br label %do.end169

do.end169:                                        ; preds = %do.body155
  %148 = load %struct.av*, %struct.av** %ary, align 8
  %149 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_stack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %149, i32 0, i32 0
  store %struct.av* %148, %struct.av** %si_stack, align 8
  br label %do.end170

do.end170:                                        ; preds = %do.end169
  store i32 0, i32* %make_mortal, align 4
  br label %if.end171

if.end171:                                        ; preds = %do.end170, %do.end138
  br label %if.end172

if.end172:                                        ; preds = %if.end171, %if.end89
  %150 = load %struct.sv**, %struct.sv*** %sp, align 8
  %151 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast173 = ptrtoint %struct.sv** %150 to i64
  %sub.ptr.rhs.cast174 = ptrtoint %struct.sv** %151 to i64
  %sub.ptr.sub175 = sub i64 %sub.ptr.lhs.cast173, %sub.ptr.rhs.cast174
  %sub.ptr.div176 = sdiv exact i64 %sub.ptr.sub175, 8
  %conv177 = trunc i64 %sub.ptr.div176 to i32
  store i32 %conv177, i32* %base, align 4
  %152 = load i8*, i8** %s, align 8
  store i8* %152, i8** %orig, align 8
  %153 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call178 = call %struct.regexp* @S_ReANY(%struct.p5rx* %153)
  %extflags179 = getelementptr inbounds %struct.regexp, %struct.regexp* %call178, i32 0, i32 7
  %154 = load i32, i32* %extflags179, align 8
  %and180 = and i32 %154, 536870912
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %if.then182, label %if.end346

if.then182:                                       ; preds = %if.end172
  %155 = load i8, i8* %do_utf8, align 1
  %tobool183 = trunc i8 %155 to i1
  br i1 %tobool183, label %if.then184, label %if.else310

if.then184:                                       ; preds = %if.then182
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then184
  %156 = load i8*, i8** %s, align 8
  %157 = load i8, i8* %156, align 1
  %conv185 = sext i8 %157 to i64
  %cmp186 = icmp ult i64 %conv185, 128
  br i1 %cmp186, label %cond.true188, label %cond.false194

cond.true188:                                     ; preds = %while.cond
  %158 = load i8*, i8** %s, align 8
  %159 = load i8, i8* %158, align 1
  %idxprom189 = zext i8 %159 to i64
  %arrayidx190 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom189
  %160 = load i32, i32* %arrayidx190, align 4
  %and191 = and i32 %160, 1024
  %tobool192 = icmp ne i32 %and191, 0
  %161 = zext i1 %tobool192 to i64
  %cond193 = select i1 %tobool192, i32 1, i32 0
  br label %cond.end303

cond.false194:                                    ; preds = %while.cond
  %162 = load i8*, i8** %s, align 8
  %163 = load i8, i8* %162, align 1
  %conv195 = zext i8 %163 to i32
  %and196 = and i32 %conv195, 254
  %cmp197 = icmp eq i32 %and196, 194
  br i1 %cmp197, label %cond.true199, label %cond.false224

cond.true199:                                     ; preds = %cond.false194
  %164 = load i8*, i8** %s, align 8
  %165 = load i8, i8* %164, align 1
  %conv200 = sext i8 %165 to i32
  %and201 = and i32 %conv200, 31
  %shl = shl i32 %and201, 6
  %166 = load i8*, i8** %s, align 8
  %add.ptr202 = getelementptr inbounds i8, i8* %166, i64 1
  %167 = load i8, i8* %add.ptr202, align 1
  %conv203 = zext i8 %167 to i32
  %and204 = and i32 %conv203, 63
  %or205 = or i32 %shl, %and204
  %conv206 = sext i32 %or205 to i64
  %and207 = and i64 %conv206, -256
  %tobool208 = icmp ne i64 %and207, 0
  br i1 %tobool208, label %land.end222, label %land.rhs209

land.rhs209:                                      ; preds = %cond.true199
  %168 = load i8*, i8** %s, align 8
  %169 = load i8, i8* %168, align 1
  %conv210 = sext i8 %169 to i32
  %and211 = and i32 %conv210, 31
  %shl212 = shl i32 %and211, 6
  %170 = load i8*, i8** %s, align 8
  %add.ptr213 = getelementptr inbounds i8, i8* %170, i64 1
  %171 = load i8, i8* %add.ptr213, align 1
  %conv214 = zext i8 %171 to i32
  %and215 = and i32 %conv214, 63
  %or216 = or i32 %shl212, %and215
  %conv217 = trunc i32 %or216 to i8
  %idxprom218 = zext i8 %conv217 to i64
  %arrayidx219 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom218
  %172 = load i32, i32* %arrayidx219, align 4
  %and220 = and i32 %172, 1024
  %tobool221 = icmp ne i32 %and220, 0
  br label %land.end222

land.end222:                                      ; preds = %land.rhs209, %cond.true199
  %173 = phi i1 [ false, %cond.true199 ], [ %tobool221, %land.rhs209 ]
  %174 = zext i1 %173 to i64
  %cond223 = select i1 %173, i32 1, i32 0
  br label %cond.end301

cond.false224:                                    ; preds = %cond.false194
  %175 = load i8*, i8** %s, align 8
  %arrayidx225 = getelementptr inbounds i8, i8* %175, i64 0
  %176 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %176 to i32
  %cmp227 = icmp eq i32 225, %conv226
  br i1 %cmp227, label %cond.true229, label %cond.false241

cond.true229:                                     ; preds = %cond.false224
  %177 = load i8*, i8** %s, align 8
  %arrayidx230 = getelementptr inbounds i8, i8* %177, i64 1
  %178 = load i8, i8* %arrayidx230, align 1
  %conv231 = zext i8 %178 to i32
  %cmp232 = icmp eq i32 154, %conv231
  br i1 %cmp232, label %land.rhs234, label %land.end239

land.rhs234:                                      ; preds = %cond.true229
  %179 = load i8*, i8** %s, align 8
  %arrayidx235 = getelementptr inbounds i8, i8* %179, i64 2
  %180 = load i8, i8* %arrayidx235, align 1
  %conv236 = zext i8 %180 to i32
  %cmp237 = icmp eq i32 128, %conv236
  br label %land.end239

land.end239:                                      ; preds = %land.rhs234, %cond.true229
  %181 = phi i1 [ false, %cond.true229 ], [ %cmp237, %land.rhs234 ]
  %182 = zext i1 %181 to i64
  %cond240 = select i1 %181, i32 3, i32 0
  br label %cond.end299

cond.false241:                                    ; preds = %cond.false224
  %183 = load i8*, i8** %s, align 8
  %arrayidx242 = getelementptr inbounds i8, i8* %183, i64 0
  %184 = load i8, i8* %arrayidx242, align 1
  %conv243 = zext i8 %184 to i32
  %cmp244 = icmp eq i32 226, %conv243
  br i1 %cmp244, label %cond.true246, label %cond.false280

cond.true246:                                     ; preds = %cond.false241
  %185 = load i8*, i8** %s, align 8
  %arrayidx247 = getelementptr inbounds i8, i8* %185, i64 1
  %186 = load i8, i8* %arrayidx247, align 1
  %conv248 = zext i8 %186 to i32
  %cmp249 = icmp eq i32 128, %conv248
  br i1 %cmp249, label %cond.true251, label %cond.false266

cond.true251:                                     ; preds = %cond.true246
  %187 = load i8*, i8** %s, align 8
  %arrayidx252 = getelementptr inbounds i8, i8* %187, i64 2
  %188 = load i8, i8* %arrayidx252, align 1
  %conv253 = zext i8 %188 to i32
  %cmp254 = icmp sle i32 %conv253, 138
  br i1 %cmp254, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.true251
  %189 = load i8*, i8** %s, align 8
  %arrayidx256 = getelementptr inbounds i8, i8* %189, i64 2
  %190 = load i8, i8* %arrayidx256, align 1
  %conv257 = zext i8 %190 to i32
  %and258 = and i32 %conv257, 254
  %cmp259 = icmp eq i32 %and258, 168
  br i1 %cmp259, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %191 = load i8*, i8** %s, align 8
  %arrayidx261 = getelementptr inbounds i8, i8* %191, i64 2
  %192 = load i8, i8* %arrayidx261, align 1
  %conv262 = zext i8 %192 to i32
  %cmp263 = icmp eq i32 175, %conv262
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %cond.true251
  %193 = phi i1 [ true, %lor.lhs.false ], [ true, %cond.true251 ], [ %cmp263, %lor.rhs ]
  %194 = zext i1 %193 to i64
  %cond265 = select i1 %193, i32 3, i32 0
  br label %cond.end278

cond.false266:                                    ; preds = %cond.true246
  %195 = load i8*, i8** %s, align 8
  %arrayidx267 = getelementptr inbounds i8, i8* %195, i64 1
  %196 = load i8, i8* %arrayidx267, align 1
  %conv268 = zext i8 %196 to i32
  %cmp269 = icmp eq i32 129, %conv268
  br i1 %cmp269, label %land.rhs271, label %land.end276

land.rhs271:                                      ; preds = %cond.false266
  %197 = load i8*, i8** %s, align 8
  %arrayidx272 = getelementptr inbounds i8, i8* %197, i64 2
  %198 = load i8, i8* %arrayidx272, align 1
  %conv273 = zext i8 %198 to i32
  %cmp274 = icmp eq i32 159, %conv273
  br label %land.end276

land.end276:                                      ; preds = %land.rhs271, %cond.false266
  %199 = phi i1 [ false, %cond.false266 ], [ %cmp274, %land.rhs271 ]
  %200 = zext i1 %199 to i64
  %cond277 = select i1 %199, i32 3, i32 0
  br label %cond.end278

cond.end278:                                      ; preds = %land.end276, %lor.end
  %cond279 = phi i32 [ %cond265, %lor.end ], [ %cond277, %land.end276 ]
  br label %cond.end297

cond.false280:                                    ; preds = %cond.false241
  %201 = load i8*, i8** %s, align 8
  %arrayidx281 = getelementptr inbounds i8, i8* %201, i64 0
  %202 = load i8, i8* %arrayidx281, align 1
  %conv282 = zext i8 %202 to i32
  %cmp283 = icmp eq i32 227, %conv282
  br i1 %cmp283, label %land.lhs.true285, label %land.end295

land.lhs.true285:                                 ; preds = %cond.false280
  %203 = load i8*, i8** %s, align 8
  %arrayidx286 = getelementptr inbounds i8, i8* %203, i64 1
  %204 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %204 to i32
  %cmp288 = icmp eq i32 128, %conv287
  br i1 %cmp288, label %land.rhs290, label %land.end295

land.rhs290:                                      ; preds = %land.lhs.true285
  %205 = load i8*, i8** %s, align 8
  %arrayidx291 = getelementptr inbounds i8, i8* %205, i64 2
  %206 = load i8, i8* %arrayidx291, align 1
  %conv292 = zext i8 %206 to i32
  %cmp293 = icmp eq i32 128, %conv292
  br label %land.end295

land.end295:                                      ; preds = %land.rhs290, %land.lhs.true285, %cond.false280
  %207 = phi i1 [ false, %land.lhs.true285 ], [ false, %cond.false280 ], [ %cmp293, %land.rhs290 ]
  %208 = zext i1 %207 to i64
  %cond296 = select i1 %207, i32 3, i32 0
  br label %cond.end297

cond.end297:                                      ; preds = %land.end295, %cond.end278
  %cond298 = phi i32 [ %cond279, %cond.end278 ], [ %cond296, %land.end295 ]
  br label %cond.end299

cond.end299:                                      ; preds = %cond.end297, %land.end239
  %cond300 = phi i32 [ %cond240, %land.end239 ], [ %cond298, %cond.end297 ]
  br label %cond.end301

cond.end301:                                      ; preds = %cond.end299, %land.end222
  %cond302 = phi i32 [ %cond223, %land.end222 ], [ %cond300, %cond.end299 ]
  br label %cond.end303

cond.end303:                                      ; preds = %cond.end301, %cond.true188
  %cond304 = phi i32 [ %cond193, %cond.true188 ], [ %cond302, %cond.end301 ]
  %tobool305 = icmp ne i32 %cond304, 0
  br i1 %tobool305, label %while.body, label %while.end

while.body:                                       ; preds = %cond.end303
  %209 = load i8*, i8** %s, align 8
  %210 = load i8, i8* %209, align 1
  %idxprom306 = zext i8 %210 to i64
  %arrayidx307 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom306
  %211 = load i8, i8* %arrayidx307, align 1
  %conv308 = zext i8 %211 to i32
  %212 = load i8*, i8** %s, align 8
  %idx.ext = sext i32 %conv308 to i64
  %add.ptr309 = getelementptr inbounds i8, i8* %212, i64 %idx.ext
  store i8* %add.ptr309, i8** %s, align 8
  br label %while.cond

while.end:                                        ; preds = %cond.end303
  br label %if.end345

if.else310:                                       ; preds = %if.then182
  %213 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call311 = call %struct.regexp* @S_ReANY(%struct.p5rx* %213)
  %extflags312 = getelementptr inbounds %struct.regexp, %struct.regexp* %call311, i32 0, i32 7
  %214 = load i32, i32* %extflags312, align 8
  %call313 = call i32 @get_regex_charset(i32 %214)
  %cmp314 = icmp eq i32 %call313, 1
  br i1 %cmp314, label %if.then316, label %if.else334

if.then316:                                       ; preds = %if.else310
  br label %while.cond317

while.cond317:                                    ; preds = %while.body331, %if.then316
  %215 = load i8*, i8** %s, align 8
  %216 = load i8, i8* %215, align 1
  %conv318 = sext i8 %216 to i32
  %and319 = and i32 %conv318, -128
  %cmp320 = icmp eq i32 %and319, 0
  br i1 %cmp320, label %land.rhs322, label %land.end330

land.rhs322:                                      ; preds = %while.cond317
  %call323 = call i16** @__ctype_b_loc() #9
  %217 = load i16*, i16** %call323, align 8
  %218 = load i8*, i8** %s, align 8
  %219 = load i8, i8* %218, align 1
  %conv324 = sext i8 %219 to i32
  %idxprom325 = sext i32 %conv324 to i64
  %arrayidx326 = getelementptr inbounds i16, i16* %217, i64 %idxprom325
  %220 = load i16, i16* %arrayidx326, align 2
  %conv327 = zext i16 %220 to i32
  %and328 = and i32 %conv327, 8192
  %tobool329 = icmp ne i32 %and328, 0
  br label %land.end330

land.end330:                                      ; preds = %land.rhs322, %while.cond317
  %221 = phi i1 [ false, %while.cond317 ], [ %tobool329, %land.rhs322 ]
  br i1 %221, label %while.body331, label %while.end333

while.body331:                                    ; preds = %land.end330
  %222 = load i8*, i8** %s, align 8
  %incdec.ptr332 = getelementptr inbounds i8, i8* %222, i32 1
  store i8* %incdec.ptr332, i8** %s, align 8
  br label %while.cond317

while.end333:                                     ; preds = %land.end330
  br label %if.end344

if.else334:                                       ; preds = %if.else310
  br label %while.cond335

while.cond335:                                    ; preds = %while.body341, %if.else334
  %223 = load i8*, i8** %s, align 8
  %224 = load i8, i8* %223, align 1
  %idxprom336 = zext i8 %224 to i64
  %arrayidx337 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom336
  %225 = load i32, i32* %arrayidx337, align 4
  %and338 = and i32 %225, 17408
  %cmp339 = icmp eq i32 %and338, 17408
  br i1 %cmp339, label %while.body341, label %while.end343

while.body341:                                    ; preds = %while.cond335
  %226 = load i8*, i8** %s, align 8
  %incdec.ptr342 = getelementptr inbounds i8, i8* %226, i32 1
  store i8* %incdec.ptr342, i8** %s, align 8
  br label %while.cond335

while.end343:                                     ; preds = %while.cond335
  br label %if.end344

if.end344:                                        ; preds = %while.end343, %while.end333
  br label %if.end345

if.end345:                                        ; preds = %if.end344, %while.end
  br label %if.end346

if.end346:                                        ; preds = %if.end345, %if.end172
  %227 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call347 = call %struct.regexp* @S_ReANY(%struct.p5rx* %227)
  %extflags348 = getelementptr inbounds %struct.regexp, %struct.regexp* %call347, i32 0, i32 7
  %228 = load i32, i32* %extflags348, align 8
  %and349 = and i32 %228, 1
  %tobool350 = icmp ne i32 %and349, 0
  br i1 %tobool350, label %if.then351, label %if.end352

if.then351:                                       ; preds = %if.end346
  store i8 1, i8* %multiline, align 1
  br label %if.end352

if.end352:                                        ; preds = %if.then351, %if.end346
  %229 = load i32, i32* %gimme, align 4
  %cmp353 = icmp eq i32 %229, 2
  br i1 %cmp353, label %land.rhs355, label %land.end358

land.rhs355:                                      ; preds = %if.end352
  %230 = load %struct.av*, %struct.av** %ary, align 8
  %tobool356 = icmp ne %struct.av* %230, null
  %lnot357 = xor i1 %tobool356, true
  br label %land.end358

land.end358:                                      ; preds = %land.rhs355, %if.end352
  %231 = phi i1 [ false, %if.end352 ], [ %lnot357, %land.rhs355 ]
  %frombool359 = zext i1 %231 to i8
  store i8 %frombool359, i8* %gimme_scalar, align 1
  %232 = load i64, i64* %limit, align 8
  %tobool360 = icmp ne i64 %232, 0
  br i1 %tobool360, label %if.end363, label %if.then361

if.then361:                                       ; preds = %land.end358
  %233 = load i64, i64* %maxiters, align 8
  %add362 = add nsw i64 %233, 2
  store i64 %add362, i64* %limit, align 8
  br label %if.end363

if.end363:                                        ; preds = %if.then361, %land.end358
  %234 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call364 = call %struct.regexp* @S_ReANY(%struct.p5rx* %234)
  %extflags365 = getelementptr inbounds %struct.regexp, %struct.regexp* %call364, i32 0, i32 7
  %235 = load i32, i32* %extflags365, align 8
  %and366 = and i32 %235, 1073741824
  %tobool367 = icmp ne i32 %and366, 0
  br i1 %tobool367, label %if.then368, label %if.else804

if.then368:                                       ; preds = %if.end363
  br label %while.cond369

while.cond369:                                    ; preds = %if.end802, %if.then368
  %236 = load i64, i64* %limit, align 8
  %dec370 = add nsw i64 %236, -1
  store i64 %dec370, i64* %limit, align 8
  %tobool371 = icmp ne i64 %dec370, 0
  br i1 %tobool371, label %while.body372, label %while.end803

while.body372:                                    ; preds = %while.cond369
  %237 = load i8*, i8** %s, align 8
  store i8* %237, i8** %m, align 8
  %238 = load i8, i8* %do_utf8, align 1
  %tobool373 = trunc i8 %238 to i1
  br i1 %tobool373, label %if.then374, label %if.else522

if.then374:                                       ; preds = %while.body372
  br label %while.cond375

while.cond375:                                    ; preds = %if.end520, %if.then374
  %239 = load i8*, i8** %m, align 8
  %240 = load i8*, i8** %strend, align 8
  %cmp376 = icmp ult i8* %239, %240
  br i1 %cmp376, label %land.rhs378, label %land.end505

land.rhs378:                                      ; preds = %while.cond375
  %241 = load i8*, i8** %m, align 8
  %242 = load i8, i8* %241, align 1
  %conv379 = sext i8 %242 to i64
  %cmp380 = icmp ult i64 %conv379, 128
  br i1 %cmp380, label %cond.true382, label %cond.false388

cond.true382:                                     ; preds = %land.rhs378
  %243 = load i8*, i8** %m, align 8
  %244 = load i8, i8* %243, align 1
  %idxprom383 = zext i8 %244 to i64
  %arrayidx384 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom383
  %245 = load i32, i32* %arrayidx384, align 4
  %and385 = and i32 %245, 1024
  %tobool386 = icmp ne i32 %and385, 0
  %246 = zext i1 %tobool386 to i64
  %cond387 = select i1 %tobool386, i32 1, i32 0
  br label %cond.end501

cond.false388:                                    ; preds = %land.rhs378
  %247 = load i8*, i8** %m, align 8
  %248 = load i8, i8* %247, align 1
  %conv389 = zext i8 %248 to i32
  %and390 = and i32 %conv389, 254
  %cmp391 = icmp eq i32 %and390, 194
  br i1 %cmp391, label %cond.true393, label %cond.false419

cond.true393:                                     ; preds = %cond.false388
  %249 = load i8*, i8** %m, align 8
  %250 = load i8, i8* %249, align 1
  %conv394 = sext i8 %250 to i32
  %and395 = and i32 %conv394, 31
  %shl396 = shl i32 %and395, 6
  %251 = load i8*, i8** %m, align 8
  %add.ptr397 = getelementptr inbounds i8, i8* %251, i64 1
  %252 = load i8, i8* %add.ptr397, align 1
  %conv398 = zext i8 %252 to i32
  %and399 = and i32 %conv398, 63
  %or400 = or i32 %shl396, %and399
  %conv401 = sext i32 %or400 to i64
  %and402 = and i64 %conv401, -256
  %tobool403 = icmp ne i64 %and402, 0
  br i1 %tobool403, label %land.end417, label %land.rhs404

land.rhs404:                                      ; preds = %cond.true393
  %253 = load i8*, i8** %m, align 8
  %254 = load i8, i8* %253, align 1
  %conv405 = sext i8 %254 to i32
  %and406 = and i32 %conv405, 31
  %shl407 = shl i32 %and406, 6
  %255 = load i8*, i8** %m, align 8
  %add.ptr408 = getelementptr inbounds i8, i8* %255, i64 1
  %256 = load i8, i8* %add.ptr408, align 1
  %conv409 = zext i8 %256 to i32
  %and410 = and i32 %conv409, 63
  %or411 = or i32 %shl407, %and410
  %conv412 = trunc i32 %or411 to i8
  %idxprom413 = zext i8 %conv412 to i64
  %arrayidx414 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom413
  %257 = load i32, i32* %arrayidx414, align 4
  %and415 = and i32 %257, 1024
  %tobool416 = icmp ne i32 %and415, 0
  br label %land.end417

land.end417:                                      ; preds = %land.rhs404, %cond.true393
  %258 = phi i1 [ false, %cond.true393 ], [ %tobool416, %land.rhs404 ]
  %259 = zext i1 %258 to i64
  %cond418 = select i1 %258, i32 1, i32 0
  br label %cond.end499

cond.false419:                                    ; preds = %cond.false388
  %260 = load i8*, i8** %m, align 8
  %arrayidx420 = getelementptr inbounds i8, i8* %260, i64 0
  %261 = load i8, i8* %arrayidx420, align 1
  %conv421 = zext i8 %261 to i32
  %cmp422 = icmp eq i32 225, %conv421
  br i1 %cmp422, label %cond.true424, label %cond.false436

cond.true424:                                     ; preds = %cond.false419
  %262 = load i8*, i8** %m, align 8
  %arrayidx425 = getelementptr inbounds i8, i8* %262, i64 1
  %263 = load i8, i8* %arrayidx425, align 1
  %conv426 = zext i8 %263 to i32
  %cmp427 = icmp eq i32 154, %conv426
  br i1 %cmp427, label %land.rhs429, label %land.end434

land.rhs429:                                      ; preds = %cond.true424
  %264 = load i8*, i8** %m, align 8
  %arrayidx430 = getelementptr inbounds i8, i8* %264, i64 2
  %265 = load i8, i8* %arrayidx430, align 1
  %conv431 = zext i8 %265 to i32
  %cmp432 = icmp eq i32 128, %conv431
  br label %land.end434

land.end434:                                      ; preds = %land.rhs429, %cond.true424
  %266 = phi i1 [ false, %cond.true424 ], [ %cmp432, %land.rhs429 ]
  %267 = zext i1 %266 to i64
  %cond435 = select i1 %266, i32 3, i32 0
  br label %cond.end497

cond.false436:                                    ; preds = %cond.false419
  %268 = load i8*, i8** %m, align 8
  %arrayidx437 = getelementptr inbounds i8, i8* %268, i64 0
  %269 = load i8, i8* %arrayidx437, align 1
  %conv438 = zext i8 %269 to i32
  %cmp439 = icmp eq i32 226, %conv438
  br i1 %cmp439, label %cond.true441, label %cond.false478

cond.true441:                                     ; preds = %cond.false436
  %270 = load i8*, i8** %m, align 8
  %arrayidx442 = getelementptr inbounds i8, i8* %270, i64 1
  %271 = load i8, i8* %arrayidx442, align 1
  %conv443 = zext i8 %271 to i32
  %cmp444 = icmp eq i32 128, %conv443
  br i1 %cmp444, label %cond.true446, label %cond.false464

cond.true446:                                     ; preds = %cond.true441
  %272 = load i8*, i8** %m, align 8
  %arrayidx447 = getelementptr inbounds i8, i8* %272, i64 2
  %273 = load i8, i8* %arrayidx447, align 1
  %conv448 = zext i8 %273 to i32
  %cmp449 = icmp sle i32 %conv448, 138
  br i1 %cmp449, label %lor.end462, label %lor.lhs.false451

lor.lhs.false451:                                 ; preds = %cond.true446
  %274 = load i8*, i8** %m, align 8
  %arrayidx452 = getelementptr inbounds i8, i8* %274, i64 2
  %275 = load i8, i8* %arrayidx452, align 1
  %conv453 = zext i8 %275 to i32
  %and454 = and i32 %conv453, 254
  %cmp455 = icmp eq i32 %and454, 168
  br i1 %cmp455, label %lor.end462, label %lor.rhs457

lor.rhs457:                                       ; preds = %lor.lhs.false451
  %276 = load i8*, i8** %m, align 8
  %arrayidx458 = getelementptr inbounds i8, i8* %276, i64 2
  %277 = load i8, i8* %arrayidx458, align 1
  %conv459 = zext i8 %277 to i32
  %cmp460 = icmp eq i32 175, %conv459
  br label %lor.end462

lor.end462:                                       ; preds = %lor.rhs457, %lor.lhs.false451, %cond.true446
  %278 = phi i1 [ true, %lor.lhs.false451 ], [ true, %cond.true446 ], [ %cmp460, %lor.rhs457 ]
  %279 = zext i1 %278 to i64
  %cond463 = select i1 %278, i32 3, i32 0
  br label %cond.end476

cond.false464:                                    ; preds = %cond.true441
  %280 = load i8*, i8** %m, align 8
  %arrayidx465 = getelementptr inbounds i8, i8* %280, i64 1
  %281 = load i8, i8* %arrayidx465, align 1
  %conv466 = zext i8 %281 to i32
  %cmp467 = icmp eq i32 129, %conv466
  br i1 %cmp467, label %land.rhs469, label %land.end474

land.rhs469:                                      ; preds = %cond.false464
  %282 = load i8*, i8** %m, align 8
  %arrayidx470 = getelementptr inbounds i8, i8* %282, i64 2
  %283 = load i8, i8* %arrayidx470, align 1
  %conv471 = zext i8 %283 to i32
  %cmp472 = icmp eq i32 159, %conv471
  br label %land.end474

land.end474:                                      ; preds = %land.rhs469, %cond.false464
  %284 = phi i1 [ false, %cond.false464 ], [ %cmp472, %land.rhs469 ]
  %285 = zext i1 %284 to i64
  %cond475 = select i1 %284, i32 3, i32 0
  br label %cond.end476

cond.end476:                                      ; preds = %land.end474, %lor.end462
  %cond477 = phi i32 [ %cond463, %lor.end462 ], [ %cond475, %land.end474 ]
  br label %cond.end495

cond.false478:                                    ; preds = %cond.false436
  %286 = load i8*, i8** %m, align 8
  %arrayidx479 = getelementptr inbounds i8, i8* %286, i64 0
  %287 = load i8, i8* %arrayidx479, align 1
  %conv480 = zext i8 %287 to i32
  %cmp481 = icmp eq i32 227, %conv480
  br i1 %cmp481, label %land.lhs.true483, label %land.end493

land.lhs.true483:                                 ; preds = %cond.false478
  %288 = load i8*, i8** %m, align 8
  %arrayidx484 = getelementptr inbounds i8, i8* %288, i64 1
  %289 = load i8, i8* %arrayidx484, align 1
  %conv485 = zext i8 %289 to i32
  %cmp486 = icmp eq i32 128, %conv485
  br i1 %cmp486, label %land.rhs488, label %land.end493

land.rhs488:                                      ; preds = %land.lhs.true483
  %290 = load i8*, i8** %m, align 8
  %arrayidx489 = getelementptr inbounds i8, i8* %290, i64 2
  %291 = load i8, i8* %arrayidx489, align 1
  %conv490 = zext i8 %291 to i32
  %cmp491 = icmp eq i32 128, %conv490
  br label %land.end493

land.end493:                                      ; preds = %land.rhs488, %land.lhs.true483, %cond.false478
  %292 = phi i1 [ false, %land.lhs.true483 ], [ false, %cond.false478 ], [ %cmp491, %land.rhs488 ]
  %293 = zext i1 %292 to i64
  %cond494 = select i1 %292, i32 3, i32 0
  br label %cond.end495

cond.end495:                                      ; preds = %land.end493, %cond.end476
  %cond496 = phi i32 [ %cond477, %cond.end476 ], [ %cond494, %land.end493 ]
  br label %cond.end497

cond.end497:                                      ; preds = %cond.end495, %land.end434
  %cond498 = phi i32 [ %cond435, %land.end434 ], [ %cond496, %cond.end495 ]
  br label %cond.end499

cond.end499:                                      ; preds = %cond.end497, %land.end417
  %cond500 = phi i32 [ %cond418, %land.end417 ], [ %cond498, %cond.end497 ]
  br label %cond.end501

cond.end501:                                      ; preds = %cond.end499, %cond.true382
  %cond502 = phi i32 [ %cond387, %cond.true382 ], [ %cond500, %cond.end499 ]
  %tobool503 = icmp ne i32 %cond502, 0
  %lnot504 = xor i1 %tobool503, true
  br label %land.end505

land.end505:                                      ; preds = %cond.end501, %while.cond375
  %294 = phi i1 [ false, %while.cond375 ], [ %lnot504, %cond.end501 ]
  br i1 %294, label %while.body506, label %while.end521

while.body506:                                    ; preds = %land.end505
  %295 = load i8*, i8** %m, align 8
  %296 = load i8, i8* %295, align 1
  %idxprom507 = zext i8 %296 to i64
  %arrayidx508 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom507
  %297 = load i8, i8* %arrayidx508, align 1
  %conv509 = zext i8 %297 to i32
  store i32 %conv509, i32* %t, align 4
  %298 = load i8*, i8** %strend, align 8
  %299 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast510 = ptrtoint i8* %298 to i64
  %sub.ptr.rhs.cast511 = ptrtoint i8* %299 to i64
  %sub.ptr.sub512 = sub i64 %sub.ptr.lhs.cast510, %sub.ptr.rhs.cast511
  %300 = load i32, i32* %t, align 4
  %conv513 = sext i32 %300 to i64
  %cmp514 = icmp slt i64 %sub.ptr.sub512, %conv513
  br i1 %cmp514, label %if.then516, label %if.else517

if.then516:                                       ; preds = %while.body506
  %301 = load i8*, i8** %strend, align 8
  store i8* %301, i8** %m, align 8
  br label %if.end520

if.else517:                                       ; preds = %while.body506
  %302 = load i32, i32* %t, align 4
  %303 = load i8*, i8** %m, align 8
  %idx.ext518 = sext i32 %302 to i64
  %add.ptr519 = getelementptr inbounds i8, i8* %303, i64 %idx.ext518
  store i8* %add.ptr519, i8** %m, align 8
  br label %if.end520

if.end520:                                        ; preds = %if.else517, %if.then516
  br label %while.cond375

while.end521:                                     ; preds = %land.end505
  br label %if.end567

if.else522:                                       ; preds = %while.body372
  %304 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call523 = call %struct.regexp* @S_ReANY(%struct.p5rx* %304)
  %extflags524 = getelementptr inbounds %struct.regexp, %struct.regexp* %call523, i32 0, i32 7
  %305 = load i32, i32* %extflags524, align 8
  %call525 = call i32 @get_regex_charset(i32 %305)
  %cmp526 = icmp eq i32 %call525, 1
  br i1 %cmp526, label %if.then528, label %if.else551

if.then528:                                       ; preds = %if.else522
  br label %while.cond529

while.cond529:                                    ; preds = %while.body548, %if.then528
  %306 = load i8*, i8** %m, align 8
  %307 = load i8*, i8** %strend, align 8
  %cmp530 = icmp ult i8* %306, %307
  br i1 %cmp530, label %land.rhs532, label %land.end547

land.rhs532:                                      ; preds = %while.cond529
  %308 = load i8*, i8** %m, align 8
  %309 = load i8, i8* %308, align 1
  %conv533 = sext i8 %309 to i32
  %and534 = and i32 %conv533, -128
  %cmp535 = icmp eq i32 %and534, 0
  br i1 %cmp535, label %land.rhs537, label %land.end545

land.rhs537:                                      ; preds = %land.rhs532
  %call538 = call i16** @__ctype_b_loc() #9
  %310 = load i16*, i16** %call538, align 8
  %311 = load i8*, i8** %m, align 8
  %312 = load i8, i8* %311, align 1
  %conv539 = sext i8 %312 to i32
  %idxprom540 = sext i32 %conv539 to i64
  %arrayidx541 = getelementptr inbounds i16, i16* %310, i64 %idxprom540
  %313 = load i16, i16* %arrayidx541, align 2
  %conv542 = zext i16 %313 to i32
  %and543 = and i32 %conv542, 8192
  %tobool544 = icmp ne i32 %and543, 0
  br label %land.end545

land.end545:                                      ; preds = %land.rhs537, %land.rhs532
  %314 = phi i1 [ false, %land.rhs532 ], [ %tobool544, %land.rhs537 ]
  %lnot546 = xor i1 %314, true
  br label %land.end547

land.end547:                                      ; preds = %land.end545, %while.cond529
  %315 = phi i1 [ false, %while.cond529 ], [ %lnot546, %land.end545 ]
  br i1 %315, label %while.body548, label %while.end550

while.body548:                                    ; preds = %land.end547
  %316 = load i8*, i8** %m, align 8
  %incdec.ptr549 = getelementptr inbounds i8, i8* %316, i32 1
  store i8* %incdec.ptr549, i8** %m, align 8
  br label %while.cond529

while.end550:                                     ; preds = %land.end547
  br label %if.end566

if.else551:                                       ; preds = %if.else522
  br label %while.cond552

while.cond552:                                    ; preds = %while.body563, %if.else551
  %317 = load i8*, i8** %m, align 8
  %318 = load i8*, i8** %strend, align 8
  %cmp553 = icmp ult i8* %317, %318
  br i1 %cmp553, label %land.rhs555, label %land.end562

land.rhs555:                                      ; preds = %while.cond552
  %319 = load i8*, i8** %m, align 8
  %320 = load i8, i8* %319, align 1
  %idxprom556 = zext i8 %320 to i64
  %arrayidx557 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom556
  %321 = load i32, i32* %arrayidx557, align 4
  %and558 = and i32 %321, 17408
  %cmp559 = icmp eq i32 %and558, 17408
  %lnot561 = xor i1 %cmp559, true
  br label %land.end562

land.end562:                                      ; preds = %land.rhs555, %while.cond552
  %322 = phi i1 [ false, %while.cond552 ], [ %lnot561, %land.rhs555 ]
  br i1 %322, label %while.body563, label %while.end565

while.body563:                                    ; preds = %land.end562
  %323 = load i8*, i8** %m, align 8
  %incdec.ptr564 = getelementptr inbounds i8, i8* %323, i32 1
  store i8* %incdec.ptr564, i8** %m, align 8
  br label %while.cond552

while.end565:                                     ; preds = %land.end562
  br label %if.end566

if.end566:                                        ; preds = %while.end565, %while.end550
  br label %if.end567

if.end567:                                        ; preds = %if.end566, %while.end521
  %324 = load i8*, i8** %m, align 8
  %325 = load i8*, i8** %strend, align 8
  %cmp568 = icmp uge i8* %324, %325
  br i1 %cmp568, label %if.then570, label %if.end571

if.then570:                                       ; preds = %if.end567
  br label %while.end803

if.end571:                                        ; preds = %if.end567
  %326 = load i8, i8* %gimme_scalar, align 1
  %tobool572 = trunc i8 %326 to i1
  br i1 %tobool572, label %if.then573, label %if.else584

if.then573:                                       ; preds = %if.end571
  %327 = load i64, i64* %iters, align 8
  %inc574 = add nsw i64 %327, 1
  store i64 %inc574, i64* %iters, align 8
  %328 = load i8*, i8** %m, align 8
  %329 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast575 = ptrtoint i8* %328 to i64
  %sub.ptr.rhs.cast576 = ptrtoint i8* %329 to i64
  %sub.ptr.sub577 = sub i64 %sub.ptr.lhs.cast575, %sub.ptr.rhs.cast576
  %cmp578 = icmp eq i64 %sub.ptr.sub577, 0
  br i1 %cmp578, label %if.then580, label %if.else582

if.then580:                                       ; preds = %if.then573
  %330 = load i32, i32* %trailing_empty, align 4
  %inc581 = add nsw i32 %330, 1
  store i32 %inc581, i32* %trailing_empty, align 4
  br label %if.end583

if.else582:                                       ; preds = %if.then573
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end583

if.end583:                                        ; preds = %if.else582, %if.then580
  br label %if.end609

if.else584:                                       ; preds = %if.end571
  %331 = load i8*, i8** %s, align 8
  %332 = load i8*, i8** %m, align 8
  %333 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast585 = ptrtoint i8* %332 to i64
  %sub.ptr.rhs.cast586 = ptrtoint i8* %333 to i64
  %sub.ptr.sub587 = sub i64 %sub.ptr.lhs.cast585, %sub.ptr.rhs.cast586
  %334 = load i8, i8* %do_utf8, align 1
  %tobool588 = trunc i8 %334 to i1
  %335 = zext i1 %tobool588 to i64
  %cond590 = select i1 %tobool588, i32 536870912, i32 0
  %336 = load i32, i32* %make_mortal, align 4
  %or591 = or i32 %cond590, %336
  %call592 = call %struct.sv* @Perl_newSVpvn_flags(i8* %331, i64 %sub.ptr.sub587, i32 %or591)
  store %struct.sv* %call592, %struct.sv** %dstr, align 8
  br label %do.body593

do.body593:                                       ; preds = %if.else584
  br label %do.body594

do.body594:                                       ; preds = %do.body593
  %337 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %338 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast595 = ptrtoint %struct.sv** %337 to i64
  %sub.ptr.rhs.cast596 = ptrtoint %struct.sv** %338 to i64
  %sub.ptr.sub597 = sub i64 %sub.ptr.lhs.cast595, %sub.ptr.rhs.cast596
  %sub.ptr.div598 = sdiv exact i64 %sub.ptr.sub597, 8
  %cmp599 = icmp slt i64 %sub.ptr.div598, 1
  br i1 %cmp599, label %cond.true601, label %cond.false602

cond.true601:                                     ; preds = %do.body594
  br i1 true, label %if.then603, label %if.end605

cond.false602:                                    ; preds = %do.body594
  br i1 false, label %if.then603, label %if.end605

if.then603:                                       ; preds = %cond.false602, %cond.true601
  %339 = load %struct.sv**, %struct.sv*** %sp, align 8
  %340 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call604 = call %struct.sv** @Perl_stack_grow(%struct.sv** %339, %struct.sv** %340, i64 1)
  store %struct.sv** %call604, %struct.sv*** %sp, align 8
  %341 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end605

if.end605:                                        ; preds = %if.then603, %cond.false602, %cond.true601
  br label %do.end606

do.end606:                                        ; preds = %if.end605
  %342 = load %struct.sv*, %struct.sv** %dstr, align 8
  %343 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr607 = getelementptr inbounds %struct.sv*, %struct.sv** %343, i32 1
  store %struct.sv** %incdec.ptr607, %struct.sv*** %sp, align 8
  store %struct.sv* %342, %struct.sv** %incdec.ptr607, align 8
  br label %do.end608

do.end608:                                        ; preds = %do.end606
  br label %if.end609

if.end609:                                        ; preds = %do.end608, %if.end583
  %344 = load i8, i8* %do_utf8, align 1
  %tobool610 = trunc i8 %344 to i1
  br i1 %tobool610, label %if.then611, label %if.else617

if.then611:                                       ; preds = %if.end609
  %345 = load i8*, i8** %m, align 8
  %346 = load i8*, i8** %m, align 8
  %347 = load i8, i8* %346, align 1
  %idxprom612 = zext i8 %347 to i64
  %arrayidx613 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom612
  %348 = load i8, i8* %arrayidx613, align 1
  %conv614 = zext i8 %348 to i32
  %idx.ext615 = sext i32 %conv614 to i64
  %add.ptr616 = getelementptr inbounds i8, i8* %345, i64 %idx.ext615
  store i8* %add.ptr616, i8** %s, align 8
  br label %if.end619

if.else617:                                       ; preds = %if.end609
  %349 = load i8*, i8** %m, align 8
  %add.ptr618 = getelementptr inbounds i8, i8* %349, i64 1
  store i8* %add.ptr618, i8** %s, align 8
  br label %if.end619

if.end619:                                        ; preds = %if.else617, %if.then611
  %350 = load i8, i8* %do_utf8, align 1
  %tobool620 = trunc i8 %350 to i1
  br i1 %tobool620, label %if.then621, label %if.else759

if.then621:                                       ; preds = %if.end619
  br label %while.cond622

while.cond622:                                    ; preds = %while.body752, %if.then621
  %351 = load i8*, i8** %s, align 8
  %352 = load i8*, i8** %strend, align 8
  %cmp623 = icmp ult i8* %351, %352
  br i1 %cmp623, label %land.rhs625, label %land.end751

land.rhs625:                                      ; preds = %while.cond622
  %353 = load i8*, i8** %s, align 8
  %354 = load i8, i8* %353, align 1
  %conv626 = sext i8 %354 to i64
  %cmp627 = icmp ult i64 %conv626, 128
  br i1 %cmp627, label %cond.true629, label %cond.false635

cond.true629:                                     ; preds = %land.rhs625
  %355 = load i8*, i8** %s, align 8
  %356 = load i8, i8* %355, align 1
  %idxprom630 = zext i8 %356 to i64
  %arrayidx631 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom630
  %357 = load i32, i32* %arrayidx631, align 4
  %and632 = and i32 %357, 1024
  %tobool633 = icmp ne i32 %and632, 0
  %358 = zext i1 %tobool633 to i64
  %cond634 = select i1 %tobool633, i32 1, i32 0
  br label %cond.end748

cond.false635:                                    ; preds = %land.rhs625
  %359 = load i8*, i8** %s, align 8
  %360 = load i8, i8* %359, align 1
  %conv636 = zext i8 %360 to i32
  %and637 = and i32 %conv636, 254
  %cmp638 = icmp eq i32 %and637, 194
  br i1 %cmp638, label %cond.true640, label %cond.false666

cond.true640:                                     ; preds = %cond.false635
  %361 = load i8*, i8** %s, align 8
  %362 = load i8, i8* %361, align 1
  %conv641 = sext i8 %362 to i32
  %and642 = and i32 %conv641, 31
  %shl643 = shl i32 %and642, 6
  %363 = load i8*, i8** %s, align 8
  %add.ptr644 = getelementptr inbounds i8, i8* %363, i64 1
  %364 = load i8, i8* %add.ptr644, align 1
  %conv645 = zext i8 %364 to i32
  %and646 = and i32 %conv645, 63
  %or647 = or i32 %shl643, %and646
  %conv648 = sext i32 %or647 to i64
  %and649 = and i64 %conv648, -256
  %tobool650 = icmp ne i64 %and649, 0
  br i1 %tobool650, label %land.end664, label %land.rhs651

land.rhs651:                                      ; preds = %cond.true640
  %365 = load i8*, i8** %s, align 8
  %366 = load i8, i8* %365, align 1
  %conv652 = sext i8 %366 to i32
  %and653 = and i32 %conv652, 31
  %shl654 = shl i32 %and653, 6
  %367 = load i8*, i8** %s, align 8
  %add.ptr655 = getelementptr inbounds i8, i8* %367, i64 1
  %368 = load i8, i8* %add.ptr655, align 1
  %conv656 = zext i8 %368 to i32
  %and657 = and i32 %conv656, 63
  %or658 = or i32 %shl654, %and657
  %conv659 = trunc i32 %or658 to i8
  %idxprom660 = zext i8 %conv659 to i64
  %arrayidx661 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom660
  %369 = load i32, i32* %arrayidx661, align 4
  %and662 = and i32 %369, 1024
  %tobool663 = icmp ne i32 %and662, 0
  br label %land.end664

land.end664:                                      ; preds = %land.rhs651, %cond.true640
  %370 = phi i1 [ false, %cond.true640 ], [ %tobool663, %land.rhs651 ]
  %371 = zext i1 %370 to i64
  %cond665 = select i1 %370, i32 1, i32 0
  br label %cond.end746

cond.false666:                                    ; preds = %cond.false635
  %372 = load i8*, i8** %s, align 8
  %arrayidx667 = getelementptr inbounds i8, i8* %372, i64 0
  %373 = load i8, i8* %arrayidx667, align 1
  %conv668 = zext i8 %373 to i32
  %cmp669 = icmp eq i32 225, %conv668
  br i1 %cmp669, label %cond.true671, label %cond.false683

cond.true671:                                     ; preds = %cond.false666
  %374 = load i8*, i8** %s, align 8
  %arrayidx672 = getelementptr inbounds i8, i8* %374, i64 1
  %375 = load i8, i8* %arrayidx672, align 1
  %conv673 = zext i8 %375 to i32
  %cmp674 = icmp eq i32 154, %conv673
  br i1 %cmp674, label %land.rhs676, label %land.end681

land.rhs676:                                      ; preds = %cond.true671
  %376 = load i8*, i8** %s, align 8
  %arrayidx677 = getelementptr inbounds i8, i8* %376, i64 2
  %377 = load i8, i8* %arrayidx677, align 1
  %conv678 = zext i8 %377 to i32
  %cmp679 = icmp eq i32 128, %conv678
  br label %land.end681

land.end681:                                      ; preds = %land.rhs676, %cond.true671
  %378 = phi i1 [ false, %cond.true671 ], [ %cmp679, %land.rhs676 ]
  %379 = zext i1 %378 to i64
  %cond682 = select i1 %378, i32 3, i32 0
  br label %cond.end744

cond.false683:                                    ; preds = %cond.false666
  %380 = load i8*, i8** %s, align 8
  %arrayidx684 = getelementptr inbounds i8, i8* %380, i64 0
  %381 = load i8, i8* %arrayidx684, align 1
  %conv685 = zext i8 %381 to i32
  %cmp686 = icmp eq i32 226, %conv685
  br i1 %cmp686, label %cond.true688, label %cond.false725

cond.true688:                                     ; preds = %cond.false683
  %382 = load i8*, i8** %s, align 8
  %arrayidx689 = getelementptr inbounds i8, i8* %382, i64 1
  %383 = load i8, i8* %arrayidx689, align 1
  %conv690 = zext i8 %383 to i32
  %cmp691 = icmp eq i32 128, %conv690
  br i1 %cmp691, label %cond.true693, label %cond.false711

cond.true693:                                     ; preds = %cond.true688
  %384 = load i8*, i8** %s, align 8
  %arrayidx694 = getelementptr inbounds i8, i8* %384, i64 2
  %385 = load i8, i8* %arrayidx694, align 1
  %conv695 = zext i8 %385 to i32
  %cmp696 = icmp sle i32 %conv695, 138
  br i1 %cmp696, label %lor.end709, label %lor.lhs.false698

lor.lhs.false698:                                 ; preds = %cond.true693
  %386 = load i8*, i8** %s, align 8
  %arrayidx699 = getelementptr inbounds i8, i8* %386, i64 2
  %387 = load i8, i8* %arrayidx699, align 1
  %conv700 = zext i8 %387 to i32
  %and701 = and i32 %conv700, 254
  %cmp702 = icmp eq i32 %and701, 168
  br i1 %cmp702, label %lor.end709, label %lor.rhs704

lor.rhs704:                                       ; preds = %lor.lhs.false698
  %388 = load i8*, i8** %s, align 8
  %arrayidx705 = getelementptr inbounds i8, i8* %388, i64 2
  %389 = load i8, i8* %arrayidx705, align 1
  %conv706 = zext i8 %389 to i32
  %cmp707 = icmp eq i32 175, %conv706
  br label %lor.end709

lor.end709:                                       ; preds = %lor.rhs704, %lor.lhs.false698, %cond.true693
  %390 = phi i1 [ true, %lor.lhs.false698 ], [ true, %cond.true693 ], [ %cmp707, %lor.rhs704 ]
  %391 = zext i1 %390 to i64
  %cond710 = select i1 %390, i32 3, i32 0
  br label %cond.end723

cond.false711:                                    ; preds = %cond.true688
  %392 = load i8*, i8** %s, align 8
  %arrayidx712 = getelementptr inbounds i8, i8* %392, i64 1
  %393 = load i8, i8* %arrayidx712, align 1
  %conv713 = zext i8 %393 to i32
  %cmp714 = icmp eq i32 129, %conv713
  br i1 %cmp714, label %land.rhs716, label %land.end721

land.rhs716:                                      ; preds = %cond.false711
  %394 = load i8*, i8** %s, align 8
  %arrayidx717 = getelementptr inbounds i8, i8* %394, i64 2
  %395 = load i8, i8* %arrayidx717, align 1
  %conv718 = zext i8 %395 to i32
  %cmp719 = icmp eq i32 159, %conv718
  br label %land.end721

land.end721:                                      ; preds = %land.rhs716, %cond.false711
  %396 = phi i1 [ false, %cond.false711 ], [ %cmp719, %land.rhs716 ]
  %397 = zext i1 %396 to i64
  %cond722 = select i1 %396, i32 3, i32 0
  br label %cond.end723

cond.end723:                                      ; preds = %land.end721, %lor.end709
  %cond724 = phi i32 [ %cond710, %lor.end709 ], [ %cond722, %land.end721 ]
  br label %cond.end742

cond.false725:                                    ; preds = %cond.false683
  %398 = load i8*, i8** %s, align 8
  %arrayidx726 = getelementptr inbounds i8, i8* %398, i64 0
  %399 = load i8, i8* %arrayidx726, align 1
  %conv727 = zext i8 %399 to i32
  %cmp728 = icmp eq i32 227, %conv727
  br i1 %cmp728, label %land.lhs.true730, label %land.end740

land.lhs.true730:                                 ; preds = %cond.false725
  %400 = load i8*, i8** %s, align 8
  %arrayidx731 = getelementptr inbounds i8, i8* %400, i64 1
  %401 = load i8, i8* %arrayidx731, align 1
  %conv732 = zext i8 %401 to i32
  %cmp733 = icmp eq i32 128, %conv732
  br i1 %cmp733, label %land.rhs735, label %land.end740

land.rhs735:                                      ; preds = %land.lhs.true730
  %402 = load i8*, i8** %s, align 8
  %arrayidx736 = getelementptr inbounds i8, i8* %402, i64 2
  %403 = load i8, i8* %arrayidx736, align 1
  %conv737 = zext i8 %403 to i32
  %cmp738 = icmp eq i32 128, %conv737
  br label %land.end740

land.end740:                                      ; preds = %land.rhs735, %land.lhs.true730, %cond.false725
  %404 = phi i1 [ false, %land.lhs.true730 ], [ false, %cond.false725 ], [ %cmp738, %land.rhs735 ]
  %405 = zext i1 %404 to i64
  %cond741 = select i1 %404, i32 3, i32 0
  br label %cond.end742

cond.end742:                                      ; preds = %land.end740, %cond.end723
  %cond743 = phi i32 [ %cond724, %cond.end723 ], [ %cond741, %land.end740 ]
  br label %cond.end744

cond.end744:                                      ; preds = %cond.end742, %land.end681
  %cond745 = phi i32 [ %cond682, %land.end681 ], [ %cond743, %cond.end742 ]
  br label %cond.end746

cond.end746:                                      ; preds = %cond.end744, %land.end664
  %cond747 = phi i32 [ %cond665, %land.end664 ], [ %cond745, %cond.end744 ]
  br label %cond.end748

cond.end748:                                      ; preds = %cond.end746, %cond.true629
  %cond749 = phi i32 [ %cond634, %cond.true629 ], [ %cond747, %cond.end746 ]
  %tobool750 = icmp ne i32 %cond749, 0
  br label %land.end751

land.end751:                                      ; preds = %cond.end748, %while.cond622
  %406 = phi i1 [ false, %while.cond622 ], [ %tobool750, %cond.end748 ]
  br i1 %406, label %while.body752, label %while.end758

while.body752:                                    ; preds = %land.end751
  %407 = load i8*, i8** %s, align 8
  %408 = load i8, i8* %407, align 1
  %idxprom753 = zext i8 %408 to i64
  %arrayidx754 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom753
  %409 = load i8, i8* %arrayidx754, align 1
  %conv755 = zext i8 %409 to i32
  %410 = load i8*, i8** %s, align 8
  %idx.ext756 = sext i32 %conv755 to i64
  %add.ptr757 = getelementptr inbounds i8, i8* %410, i64 %idx.ext756
  store i8* %add.ptr757, i8** %s, align 8
  br label %while.cond622

while.end758:                                     ; preds = %land.end751
  br label %if.end802

if.else759:                                       ; preds = %if.end619
  %411 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call760 = call %struct.regexp* @S_ReANY(%struct.p5rx* %411)
  %extflags761 = getelementptr inbounds %struct.regexp, %struct.regexp* %call760, i32 0, i32 7
  %412 = load i32, i32* %extflags761, align 8
  %call762 = call i32 @get_regex_charset(i32 %412)
  %cmp763 = icmp eq i32 %call762, 1
  br i1 %cmp763, label %if.then765, label %if.else787

if.then765:                                       ; preds = %if.else759
  br label %while.cond766

while.cond766:                                    ; preds = %while.body784, %if.then765
  %413 = load i8*, i8** %s, align 8
  %414 = load i8*, i8** %strend, align 8
  %cmp767 = icmp ult i8* %413, %414
  br i1 %cmp767, label %land.rhs769, label %land.end783

land.rhs769:                                      ; preds = %while.cond766
  %415 = load i8*, i8** %s, align 8
  %416 = load i8, i8* %415, align 1
  %conv770 = sext i8 %416 to i32
  %and771 = and i32 %conv770, -128
  %cmp772 = icmp eq i32 %and771, 0
  br i1 %cmp772, label %land.rhs774, label %land.end782

land.rhs774:                                      ; preds = %land.rhs769
  %call775 = call i16** @__ctype_b_loc() #9
  %417 = load i16*, i16** %call775, align 8
  %418 = load i8*, i8** %s, align 8
  %419 = load i8, i8* %418, align 1
  %conv776 = sext i8 %419 to i32
  %idxprom777 = sext i32 %conv776 to i64
  %arrayidx778 = getelementptr inbounds i16, i16* %417, i64 %idxprom777
  %420 = load i16, i16* %arrayidx778, align 2
  %conv779 = zext i16 %420 to i32
  %and780 = and i32 %conv779, 8192
  %tobool781 = icmp ne i32 %and780, 0
  br label %land.end782

land.end782:                                      ; preds = %land.rhs774, %land.rhs769
  %421 = phi i1 [ false, %land.rhs769 ], [ %tobool781, %land.rhs774 ]
  br label %land.end783

land.end783:                                      ; preds = %land.end782, %while.cond766
  %422 = phi i1 [ false, %while.cond766 ], [ %421, %land.end782 ]
  br i1 %422, label %while.body784, label %while.end786

while.body784:                                    ; preds = %land.end783
  %423 = load i8*, i8** %s, align 8
  %incdec.ptr785 = getelementptr inbounds i8, i8* %423, i32 1
  store i8* %incdec.ptr785, i8** %s, align 8
  br label %while.cond766

while.end786:                                     ; preds = %land.end783
  br label %if.end801

if.else787:                                       ; preds = %if.else759
  br label %while.cond788

while.cond788:                                    ; preds = %while.body798, %if.else787
  %424 = load i8*, i8** %s, align 8
  %425 = load i8*, i8** %strend, align 8
  %cmp789 = icmp ult i8* %424, %425
  br i1 %cmp789, label %land.rhs791, label %land.end797

land.rhs791:                                      ; preds = %while.cond788
  %426 = load i8*, i8** %s, align 8
  %427 = load i8, i8* %426, align 1
  %idxprom792 = zext i8 %427 to i64
  %arrayidx793 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_charclass, i64 0, i64 %idxprom792
  %428 = load i32, i32* %arrayidx793, align 4
  %and794 = and i32 %428, 17408
  %cmp795 = icmp eq i32 %and794, 17408
  br label %land.end797

land.end797:                                      ; preds = %land.rhs791, %while.cond788
  %429 = phi i1 [ false, %while.cond788 ], [ %cmp795, %land.rhs791 ]
  br i1 %429, label %while.body798, label %while.end800

while.body798:                                    ; preds = %land.end797
  %430 = load i8*, i8** %s, align 8
  %incdec.ptr799 = getelementptr inbounds i8, i8* %430, i32 1
  store i8* %incdec.ptr799, i8** %s, align 8
  br label %while.cond788

while.end800:                                     ; preds = %land.end797
  br label %if.end801

if.end801:                                        ; preds = %while.end800, %while.end786
  br label %if.end802

if.end802:                                        ; preds = %if.end801, %while.end758
  br label %while.cond369

while.end803:                                     ; preds = %if.then570, %while.cond369
  br label %if.end1310

if.else804:                                       ; preds = %if.end363
  %431 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call805 = call %struct.regexp* @S_ReANY(%struct.p5rx* %431)
  %extflags806 = getelementptr inbounds %struct.regexp, %struct.regexp* %call805, i32 0, i32 7
  %432 = load i32, i32* %extflags806, align 8
  %and807 = and i32 %432, 268435456
  %tobool808 = icmp ne i32 %and807, 0
  br i1 %tobool808, label %if.then809, label %if.else870

if.then809:                                       ; preds = %if.else804
  br label %while.cond810

while.cond810:                                    ; preds = %if.end868, %if.then809
  %433 = load i64, i64* %limit, align 8
  %dec811 = add nsw i64 %433, -1
  store i64 %dec811, i64* %limit, align 8
  %tobool812 = icmp ne i64 %dec811, 0
  br i1 %tobool812, label %while.body813, label %while.end869

while.body813:                                    ; preds = %while.cond810
  %434 = load i8*, i8** %s, align 8
  store i8* %434, i8** %m, align 8
  br label %for.cond814

for.cond814:                                      ; preds = %for.inc823, %while.body813
  %435 = load i8*, i8** %m, align 8
  %436 = load i8*, i8** %strend, align 8
  %cmp815 = icmp ult i8* %435, %436
  br i1 %cmp815, label %land.rhs817, label %land.end821

land.rhs817:                                      ; preds = %for.cond814
  %437 = load i8*, i8** %m, align 8
  %438 = load i8, i8* %437, align 1
  %conv818 = sext i8 %438 to i32
  %cmp819 = icmp ne i32 %conv818, 10
  br label %land.end821

land.end821:                                      ; preds = %land.rhs817, %for.cond814
  %439 = phi i1 [ false, %for.cond814 ], [ %cmp819, %land.rhs817 ]
  br i1 %439, label %for.body822, label %for.end825

for.body822:                                      ; preds = %land.end821
  br label %for.inc823

for.inc823:                                       ; preds = %for.body822
  %440 = load i8*, i8** %m, align 8
  %incdec.ptr824 = getelementptr inbounds i8, i8* %440, i32 1
  store i8* %incdec.ptr824, i8** %m, align 8
  br label %for.cond814

for.end825:                                       ; preds = %land.end821
  %441 = load i8*, i8** %m, align 8
  %incdec.ptr826 = getelementptr inbounds i8, i8* %441, i32 1
  store i8* %incdec.ptr826, i8** %m, align 8
  %442 = load i8*, i8** %m, align 8
  %443 = load i8*, i8** %strend, align 8
  %cmp827 = icmp uge i8* %442, %443
  br i1 %cmp827, label %if.then829, label %if.end830

if.then829:                                       ; preds = %for.end825
  br label %while.end869

if.end830:                                        ; preds = %for.end825
  %444 = load i8, i8* %gimme_scalar, align 1
  %tobool831 = trunc i8 %444 to i1
  br i1 %tobool831, label %if.then832, label %if.else843

if.then832:                                       ; preds = %if.end830
  %445 = load i64, i64* %iters, align 8
  %inc833 = add nsw i64 %445, 1
  store i64 %inc833, i64* %iters, align 8
  %446 = load i8*, i8** %m, align 8
  %447 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast834 = ptrtoint i8* %446 to i64
  %sub.ptr.rhs.cast835 = ptrtoint i8* %447 to i64
  %sub.ptr.sub836 = sub i64 %sub.ptr.lhs.cast834, %sub.ptr.rhs.cast835
  %cmp837 = icmp eq i64 %sub.ptr.sub836, 0
  br i1 %cmp837, label %if.then839, label %if.else841

if.then839:                                       ; preds = %if.then832
  %448 = load i32, i32* %trailing_empty, align 4
  %inc840 = add nsw i32 %448, 1
  store i32 %inc840, i32* %trailing_empty, align 4
  br label %if.end842

if.else841:                                       ; preds = %if.then832
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end842

if.end842:                                        ; preds = %if.else841, %if.then839
  br label %if.end868

if.else843:                                       ; preds = %if.end830
  %449 = load i8*, i8** %s, align 8
  %450 = load i8*, i8** %m, align 8
  %451 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast844 = ptrtoint i8* %450 to i64
  %sub.ptr.rhs.cast845 = ptrtoint i8* %451 to i64
  %sub.ptr.sub846 = sub i64 %sub.ptr.lhs.cast844, %sub.ptr.rhs.cast845
  %452 = load i8, i8* %do_utf8, align 1
  %tobool847 = trunc i8 %452 to i1
  %453 = zext i1 %tobool847 to i64
  %cond849 = select i1 %tobool847, i32 536870912, i32 0
  %454 = load i32, i32* %make_mortal, align 4
  %or850 = or i32 %cond849, %454
  %call851 = call %struct.sv* @Perl_newSVpvn_flags(i8* %449, i64 %sub.ptr.sub846, i32 %or850)
  store %struct.sv* %call851, %struct.sv** %dstr, align 8
  br label %do.body852

do.body852:                                       ; preds = %if.else843
  br label %do.body853

do.body853:                                       ; preds = %do.body852
  %455 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %456 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast854 = ptrtoint %struct.sv** %455 to i64
  %sub.ptr.rhs.cast855 = ptrtoint %struct.sv** %456 to i64
  %sub.ptr.sub856 = sub i64 %sub.ptr.lhs.cast854, %sub.ptr.rhs.cast855
  %sub.ptr.div857 = sdiv exact i64 %sub.ptr.sub856, 8
  %cmp858 = icmp slt i64 %sub.ptr.div857, 1
  br i1 %cmp858, label %cond.true860, label %cond.false861

cond.true860:                                     ; preds = %do.body853
  br i1 true, label %if.then862, label %if.end864

cond.false861:                                    ; preds = %do.body853
  br i1 false, label %if.then862, label %if.end864

if.then862:                                       ; preds = %cond.false861, %cond.true860
  %457 = load %struct.sv**, %struct.sv*** %sp, align 8
  %458 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call863 = call %struct.sv** @Perl_stack_grow(%struct.sv** %457, %struct.sv** %458, i64 1)
  store %struct.sv** %call863, %struct.sv*** %sp, align 8
  %459 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end864

if.end864:                                        ; preds = %if.then862, %cond.false861, %cond.true860
  br label %do.end865

do.end865:                                        ; preds = %if.end864
  %460 = load %struct.sv*, %struct.sv** %dstr, align 8
  %461 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr866 = getelementptr inbounds %struct.sv*, %struct.sv** %461, i32 1
  store %struct.sv** %incdec.ptr866, %struct.sv*** %sp, align 8
  store %struct.sv* %460, %struct.sv** %incdec.ptr866, align 8
  br label %do.end867

do.end867:                                        ; preds = %do.end865
  br label %if.end868

if.end868:                                        ; preds = %do.end867, %if.end842
  %462 = load i8*, i8** %m, align 8
  store i8* %462, i8** %s, align 8
  br label %while.cond810

while.end869:                                     ; preds = %if.then829, %while.cond810
  br label %if.end1309

if.else870:                                       ; preds = %if.else804
  %463 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call871 = call %struct.regexp* @S_ReANY(%struct.p5rx* %463)
  %extflags872 = getelementptr inbounds %struct.regexp, %struct.regexp* %call871, i32 0, i32 7
  %464 = load i32, i32* %extflags872, align 8
  %and873 = and i32 %464, -2147483648
  %tobool874 = icmp ne i32 %and873, 0
  br i1 %tobool874, label %land.lhs.true875, label %if.else976

land.lhs.true875:                                 ; preds = %if.else870
  %465 = load i8*, i8** %s, align 8
  %466 = load i8*, i8** %strend, align 8
  %cmp876 = icmp uge i8* %465, %466
  br i1 %cmp876, label %if.else976, label %if.then878

if.then878:                                       ; preds = %land.lhs.true875
  %467 = load i8, i8* %gimme_scalar, align 1
  %tobool879 = trunc i8 %467 to i1
  br i1 %tobool879, label %if.end916, label %if.then880

if.then880:                                       ; preds = %if.then878
  %468 = load i64, i64* %limit, align 8
  %sub = sub nsw i64 %468, 1
  %conv881 = trunc i64 %sub to i32
  store i32 %conv881, i32* %items, align 4
  %469 = load i32, i32* %items, align 4
  %conv882 = zext i32 %469 to i64
  %470 = load i64, i64* %slen, align 8
  %cmp883 = icmp ult i64 %conv882, %470
  br i1 %cmp883, label %if.then885, label %if.else901

if.then885:                                       ; preds = %if.then880
  br label %do.body886

do.body886:                                       ; preds = %if.then885
  %471 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %472 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast887 = ptrtoint %struct.sv** %471 to i64
  %sub.ptr.rhs.cast888 = ptrtoint %struct.sv** %472 to i64
  %sub.ptr.sub889 = sub i64 %sub.ptr.lhs.cast887, %sub.ptr.rhs.cast888
  %sub.ptr.div890 = sdiv exact i64 %sub.ptr.sub889, 8
  %473 = load i32, i32* %items, align 4
  %conv891 = zext i32 %473 to i64
  %cmp892 = icmp slt i64 %sub.ptr.div890, %conv891
  br i1 %cmp892, label %cond.true894, label %cond.false895

cond.true894:                                     ; preds = %do.body886
  br i1 true, label %if.then896, label %if.end899

cond.false895:                                    ; preds = %do.body886
  br i1 false, label %if.then896, label %if.end899

if.then896:                                       ; preds = %cond.false895, %cond.true894
  %474 = load %struct.sv**, %struct.sv*** %sp, align 8
  %475 = load %struct.sv**, %struct.sv*** %sp, align 8
  %476 = load i32, i32* %items, align 4
  %conv897 = zext i32 %476 to i64
  %call898 = call %struct.sv** @Perl_stack_grow(%struct.sv** %474, %struct.sv** %475, i64 %conv897)
  store %struct.sv** %call898, %struct.sv*** %sp, align 8
  %477 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end899

if.end899:                                        ; preds = %if.then896, %cond.false895, %cond.true894
  br label %do.end900

do.end900:                                        ; preds = %if.end899
  br label %if.end915

if.else901:                                       ; preds = %if.then880
  br label %do.body902

do.body902:                                       ; preds = %if.else901
  %478 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %479 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast903 = ptrtoint %struct.sv** %478 to i64
  %sub.ptr.rhs.cast904 = ptrtoint %struct.sv** %479 to i64
  %sub.ptr.sub905 = sub i64 %sub.ptr.lhs.cast903, %sub.ptr.rhs.cast904
  %sub.ptr.div906 = sdiv exact i64 %sub.ptr.sub905, 8
  %480 = load i64, i64* %slen, align 8
  %cmp907 = icmp slt i64 %sub.ptr.div906, %480
  br i1 %cmp907, label %cond.true909, label %cond.false910

cond.true909:                                     ; preds = %do.body902
  br i1 true, label %if.then911, label %if.end913

cond.false910:                                    ; preds = %do.body902
  br i1 false, label %if.then911, label %if.end913

if.then911:                                       ; preds = %cond.false910, %cond.true909
  %481 = load %struct.sv**, %struct.sv*** %sp, align 8
  %482 = load %struct.sv**, %struct.sv*** %sp, align 8
  %483 = load i64, i64* %slen, align 8
  %call912 = call %struct.sv** @Perl_stack_grow(%struct.sv** %481, %struct.sv** %482, i64 %483)
  store %struct.sv** %call912, %struct.sv*** %sp, align 8
  %484 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end913

if.end913:                                        ; preds = %if.then911, %cond.false910, %cond.true909
  br label %do.end914

do.end914:                                        ; preds = %if.end913
  br label %if.end915

if.end915:                                        ; preds = %do.end914, %do.end900
  br label %if.end916

if.end916:                                        ; preds = %if.end915, %if.then878
  %485 = load i8, i8* %do_utf8, align 1
  %tobool917 = trunc i8 %485 to i1
  br i1 %tobool917, label %if.then918, label %if.else953

if.then918:                                       ; preds = %if.end916
  br label %while.cond919

while.cond919:                                    ; preds = %if.end951, %if.then918
  %486 = load i64, i64* %limit, align 8
  %dec920 = add nsw i64 %486, -1
  store i64 %dec920, i64* %limit, align 8
  %tobool921 = icmp ne i64 %dec920, 0
  br i1 %tobool921, label %while.body922, label %while.end952

while.body922:                                    ; preds = %while.cond919
  %487 = load i8*, i8** %s, align 8
  store i8* %487, i8** %m, align 8
  %488 = load i8*, i8** %s, align 8
  %489 = load i8, i8* %488, align 1
  %idxprom923 = zext i8 %489 to i64
  %arrayidx924 = getelementptr inbounds [0 x i8], [0 x i8]* @PL_utf8skip, i64 0, i64 %idxprom923
  %490 = load i8, i8* %arrayidx924, align 1
  %conv925 = zext i8 %490 to i32
  %491 = load i8*, i8** %s, align 8
  %idx.ext926 = sext i32 %conv925 to i64
  %add.ptr927 = getelementptr inbounds i8, i8* %491, i64 %idx.ext926
  store i8* %add.ptr927, i8** %s, align 8
  %492 = load i8, i8* %gimme_scalar, align 1
  %tobool928 = trunc i8 %492 to i1
  br i1 %tobool928, label %if.then929, label %if.else940

if.then929:                                       ; preds = %while.body922
  %493 = load i64, i64* %iters, align 8
  %inc930 = add nsw i64 %493, 1
  store i64 %inc930, i64* %iters, align 8
  %494 = load i8*, i8** %s, align 8
  %495 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast931 = ptrtoint i8* %494 to i64
  %sub.ptr.rhs.cast932 = ptrtoint i8* %495 to i64
  %sub.ptr.sub933 = sub i64 %sub.ptr.lhs.cast931, %sub.ptr.rhs.cast932
  %cmp934 = icmp eq i64 %sub.ptr.sub933, 0
  br i1 %cmp934, label %if.then936, label %if.else938

if.then936:                                       ; preds = %if.then929
  %496 = load i32, i32* %trailing_empty, align 4
  %inc937 = add nsw i32 %496, 1
  store i32 %inc937, i32* %trailing_empty, align 4
  br label %if.end939

if.else938:                                       ; preds = %if.then929
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end939

if.end939:                                        ; preds = %if.else938, %if.then936
  br label %if.end947

if.else940:                                       ; preds = %while.body922
  %497 = load i8*, i8** %m, align 8
  %498 = load i8*, i8** %s, align 8
  %499 = load i8*, i8** %m, align 8
  %sub.ptr.lhs.cast941 = ptrtoint i8* %498 to i64
  %sub.ptr.rhs.cast942 = ptrtoint i8* %499 to i64
  %sub.ptr.sub943 = sub i64 %sub.ptr.lhs.cast941, %sub.ptr.rhs.cast942
  %500 = load i32, i32* %make_mortal, align 4
  %or944 = or i32 536870912, %500
  %call945 = call %struct.sv* @Perl_newSVpvn_flags(i8* %497, i64 %sub.ptr.sub943, i32 %or944)
  store %struct.sv* %call945, %struct.sv** %dstr, align 8
  %501 = load %struct.sv*, %struct.sv** %dstr, align 8
  %502 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr946 = getelementptr inbounds %struct.sv*, %struct.sv** %502, i32 1
  store %struct.sv** %incdec.ptr946, %struct.sv*** %sp, align 8
  store %struct.sv* %501, %struct.sv** %incdec.ptr946, align 8
  br label %if.end947

if.end947:                                        ; preds = %if.else940, %if.end939
  %503 = load i8*, i8** %s, align 8
  %504 = load i8*, i8** %strend, align 8
  %cmp948 = icmp uge i8* %503, %504
  br i1 %cmp948, label %if.then950, label %if.end951

if.then950:                                       ; preds = %if.end947
  br label %while.end952

if.end951:                                        ; preds = %if.end947
  br label %while.cond919

while.end952:                                     ; preds = %if.then950, %while.cond919
  br label %if.end975

if.else953:                                       ; preds = %if.end916
  br label %while.cond954

while.cond954:                                    ; preds = %if.end973, %if.else953
  %505 = load i64, i64* %limit, align 8
  %dec955 = add nsw i64 %505, -1
  store i64 %dec955, i64* %limit, align 8
  %tobool956 = icmp ne i64 %dec955, 0
  br i1 %tobool956, label %while.body957, label %while.end974

while.body957:                                    ; preds = %while.cond954
  %506 = load i8, i8* %gimme_scalar, align 1
  %tobool958 = trunc i8 %506 to i1
  br i1 %tobool958, label %if.then959, label %if.else961

if.then959:                                       ; preds = %while.body957
  %507 = load i64, i64* %iters, align 8
  %inc960 = add nsw i64 %507, 1
  store i64 %inc960, i64* %iters, align 8
  br label %if.end968

if.else961:                                       ; preds = %while.body957
  %508 = load i8*, i8** %s, align 8
  %call962 = call %struct.sv* @Perl_newSVpvn(i8* %508, i64 1)
  store %struct.sv* %call962, %struct.sv** %dstr, align 8
  %509 = load i32, i32* %make_mortal, align 4
  %tobool963 = icmp ne i32 %509, 0
  br i1 %tobool963, label %if.then964, label %if.end966

if.then964:                                       ; preds = %if.else961
  %510 = load %struct.sv*, %struct.sv** %dstr, align 8
  %call965 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %510)
  br label %if.end966

if.end966:                                        ; preds = %if.then964, %if.else961
  %511 = load %struct.sv*, %struct.sv** %dstr, align 8
  %512 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr967 = getelementptr inbounds %struct.sv*, %struct.sv** %512, i32 1
  store %struct.sv** %incdec.ptr967, %struct.sv*** %sp, align 8
  store %struct.sv* %511, %struct.sv** %incdec.ptr967, align 8
  br label %if.end968

if.end968:                                        ; preds = %if.end966, %if.then959
  %513 = load i8*, i8** %s, align 8
  %incdec.ptr969 = getelementptr inbounds i8, i8* %513, i32 1
  store i8* %incdec.ptr969, i8** %s, align 8
  %514 = load i8*, i8** %s, align 8
  %515 = load i8*, i8** %strend, align 8
  %cmp970 = icmp uge i8* %514, %515
  br i1 %cmp970, label %if.then972, label %if.end973

if.then972:                                       ; preds = %if.end968
  br label %while.end974

if.end973:                                        ; preds = %if.end968
  br label %while.cond954

while.end974:                                     ; preds = %if.then972, %while.cond954
  br label %if.end975

if.end975:                                        ; preds = %while.end974, %while.end952
  br label %if.end1308

if.else976:                                       ; preds = %land.lhs.true875, %if.else870
  %516 = load i8, i8* %do_utf8, align 1
  %tobool977 = trunc i8 %516 to i1
  %conv978 = zext i1 %tobool977 to i32
  %517 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_flags979 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %517, i32 0, i32 2
  %518 = load i32, i32* %sv_flags979, align 4
  %and980 = and i32 %518, 536870912
  %cmp981 = icmp ne i32 %and980, 0
  %conv982 = zext i1 %cmp981 to i32
  %cmp983 = icmp eq i32 %conv978, %conv982
  br i1 %cmp983, label %land.lhs.true985, label %if.else1160

land.lhs.true985:                                 ; preds = %if.else976
  %519 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call986 = call %struct.regexp* @S_ReANY(%struct.p5rx* %519)
  %extflags987 = getelementptr inbounds %struct.regexp, %struct.regexp* %call986, i32 0, i32 7
  %520 = load i32, i32* %extflags987, align 8
  %and988 = and i32 %520, 6291456
  %tobool989 = icmp ne i32 %and988, 0
  br i1 %tobool989, label %land.lhs.true990, label %if.else1160

land.lhs.true990:                                 ; preds = %land.lhs.true985
  %521 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call991 = call %struct.regexp* @S_ReANY(%struct.p5rx* %521)
  %nparens = getelementptr inbounds %struct.regexp, %struct.regexp* %call991, i32 0, i32 12
  %522 = load i32, i32* %nparens, align 8
  %tobool992 = icmp ne i32 %522, 0
  br i1 %tobool992, label %if.else1160, label %land.lhs.true993

land.lhs.true993:                                 ; preds = %land.lhs.true990
  %523 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call994 = call %struct.regexp* @S_ReANY(%struct.p5rx* %523)
  %extflags995 = getelementptr inbounds %struct.regexp, %struct.regexp* %call994, i32 0, i32 7
  %524 = load i32, i32* %extflags995, align 8
  %and996 = and i32 %524, 524288
  %tobool997 = icmp ne i32 %and996, 0
  br i1 %tobool997, label %land.lhs.true998, label %if.else1160

land.lhs.true998:                                 ; preds = %land.lhs.true993
  %525 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call999 = call %struct.regexp* @S_ReANY(%struct.p5rx* %525)
  %extflags1000 = getelementptr inbounds %struct.regexp, %struct.regexp* %call999, i32 0, i32 7
  %526 = load i32, i32* %extflags1000, align 8
  %and1001 = and i32 %526, 16777216
  %tobool1002 = icmp ne i32 %and1001, 0
  br i1 %tobool1002, label %if.else1160, label %if.then1003

if.then1003:                                      ; preds = %land.lhs.true998
  %527 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1004 = call %struct.regexp* @S_ReANY(%struct.p5rx* %527)
  %extflags1005 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1004, i32 0, i32 7
  %528 = load i32, i32* %extflags1005, align 8
  %and1006 = and i32 %528, 8388608
  store i32 %and1006, i32* %tail, align 4
  %529 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1007 = call %struct.regexp* @S_ReANY(%struct.p5rx* %529)
  %engine = getelementptr inbounds %struct.regexp, %struct.regexp* %call1007, i32 0, i32 4
  %530 = load %struct.regexp_engine*, %struct.regexp_engine** %engine, align 8
  %checkstr = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %530, i32 0, i32 3
  %531 = load %struct.sv* (%struct.p5rx*)*, %struct.sv* (%struct.p5rx*)** %checkstr, align 8
  %532 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1008 = call %struct.sv* %531(%struct.p5rx* %532)
  store %struct.sv* %call1008, %struct.sv** %csv, align 8
  %533 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1009 = call %struct.regexp* @S_ReANY(%struct.p5rx* %533)
  %minlenret = getelementptr inbounds %struct.regexp, %struct.regexp* %call1009, i32 0, i32 9
  %534 = load i64, i64* %minlenret, align 8
  store i64 %534, i64* %len, align 8
  %535 = load i64, i64* %len, align 8
  %cmp1010 = icmp eq i64 %535, 1
  br i1 %cmp1010, label %land.lhs.true1012, label %if.else1098

land.lhs.true1012:                                ; preds = %if.then1003
  %536 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %sv_flags1013 = getelementptr inbounds %struct.p5rx, %struct.p5rx* %536, i32 0, i32 2
  %537 = load i32, i32* %sv_flags1013, align 4
  %and1014 = and i32 %537, 536870912
  %tobool1015 = icmp ne i32 %and1014, 0
  br i1 %tobool1015, label %if.else1098, label %land.lhs.true1016

land.lhs.true1016:                                ; preds = %land.lhs.true1012
  %538 = load i32, i32* %tail, align 4
  %tobool1017 = icmp ne i32 %538, 0
  br i1 %tobool1017, label %if.else1098, label %if.then1018

if.then1018:                                      ; preds = %land.lhs.true1016
  %539 = load %struct.sv*, %struct.sv** %csv, align 8
  %sv_flags1019 = getelementptr inbounds %struct.sv, %struct.sv* %539, i32 0, i32 2
  %540 = load i32, i32* %sv_flags1019, align 4
  %and1020 = and i32 %540, 2098176
  %cmp1021 = icmp eq i32 %and1020, 1024
  br i1 %cmp1021, label %cond.true1023, label %cond.false1027

cond.true1023:                                    ; preds = %if.then1018
  %541 = load %struct.sv*, %struct.sv** %csv, align 8
  %sv_u1024 = getelementptr inbounds %struct.sv, %struct.sv* %541, i32 0, i32 3
  %svu_pv1025 = bitcast %union.anon* %sv_u1024 to i8**
  %542 = load i8*, i8** %svu_pv1025, align 8
  %add.ptr1026 = getelementptr inbounds i8, i8* %542, i64 0
  br label %cond.end1029

cond.false1027:                                   ; preds = %if.then1018
  %543 = load %struct.sv*, %struct.sv** %csv, align 8
  %call1028 = call i8* @Perl_sv_2pv_flags(%struct.sv* %543, i64* null, i32 34)
  br label %cond.end1029

cond.end1029:                                     ; preds = %cond.false1027, %cond.true1023
  %cond1030 = phi i8* [ %add.ptr1026, %cond.true1023 ], [ %call1028, %cond.false1027 ]
  %544 = load i8, i8* %cond1030, align 1
  store i8 %544, i8* %c, align 1
  br label %while.cond1031

while.cond1031:                                   ; preds = %if.end1096, %cond.end1029
  %545 = load i64, i64* %limit, align 8
  %dec1032 = add nsw i64 %545, -1
  store i64 %dec1032, i64* %limit, align 8
  %tobool1033 = icmp ne i64 %dec1032, 0
  br i1 %tobool1033, label %while.body1034, label %while.end1097

while.body1034:                                   ; preds = %while.cond1031
  %546 = load i8*, i8** %s, align 8
  store i8* %546, i8** %m, align 8
  br label %for.cond1035

for.cond1035:                                     ; preds = %for.inc1045, %while.body1034
  %547 = load i8*, i8** %m, align 8
  %548 = load i8*, i8** %strend, align 8
  %cmp1036 = icmp ult i8* %547, %548
  br i1 %cmp1036, label %land.rhs1038, label %land.end1043

land.rhs1038:                                     ; preds = %for.cond1035
  %549 = load i8*, i8** %m, align 8
  %550 = load i8, i8* %549, align 1
  %conv1039 = sext i8 %550 to i32
  %551 = load i8, i8* %c, align 1
  %conv1040 = sext i8 %551 to i32
  %cmp1041 = icmp ne i32 %conv1039, %conv1040
  br label %land.end1043

land.end1043:                                     ; preds = %land.rhs1038, %for.cond1035
  %552 = phi i1 [ false, %for.cond1035 ], [ %cmp1041, %land.rhs1038 ]
  br i1 %552, label %for.body1044, label %for.end1047

for.body1044:                                     ; preds = %land.end1043
  br label %for.inc1045

for.inc1045:                                      ; preds = %for.body1044
  %553 = load i8*, i8** %m, align 8
  %incdec.ptr1046 = getelementptr inbounds i8, i8* %553, i32 1
  store i8* %incdec.ptr1046, i8** %m, align 8
  br label %for.cond1035

for.end1047:                                      ; preds = %land.end1043
  %554 = load i8*, i8** %m, align 8
  %555 = load i8*, i8** %strend, align 8
  %cmp1048 = icmp uge i8* %554, %555
  br i1 %cmp1048, label %if.then1050, label %if.end1051

if.then1050:                                      ; preds = %for.end1047
  br label %while.end1097

if.end1051:                                       ; preds = %for.end1047
  %556 = load i8, i8* %gimme_scalar, align 1
  %tobool1052 = trunc i8 %556 to i1
  br i1 %tobool1052, label %if.then1053, label %if.else1064

if.then1053:                                      ; preds = %if.end1051
  %557 = load i64, i64* %iters, align 8
  %inc1054 = add nsw i64 %557, 1
  store i64 %inc1054, i64* %iters, align 8
  %558 = load i8*, i8** %m, align 8
  %559 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1055 = ptrtoint i8* %558 to i64
  %sub.ptr.rhs.cast1056 = ptrtoint i8* %559 to i64
  %sub.ptr.sub1057 = sub i64 %sub.ptr.lhs.cast1055, %sub.ptr.rhs.cast1056
  %cmp1058 = icmp eq i64 %sub.ptr.sub1057, 0
  br i1 %cmp1058, label %if.then1060, label %if.else1062

if.then1060:                                      ; preds = %if.then1053
  %560 = load i32, i32* %trailing_empty, align 4
  %inc1061 = add nsw i32 %560, 1
  store i32 %inc1061, i32* %trailing_empty, align 4
  br label %if.end1063

if.else1062:                                      ; preds = %if.then1053
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end1063

if.end1063:                                       ; preds = %if.else1062, %if.then1060
  br label %if.end1089

if.else1064:                                      ; preds = %if.end1051
  %561 = load i8*, i8** %s, align 8
  %562 = load i8*, i8** %m, align 8
  %563 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1065 = ptrtoint i8* %562 to i64
  %sub.ptr.rhs.cast1066 = ptrtoint i8* %563 to i64
  %sub.ptr.sub1067 = sub i64 %sub.ptr.lhs.cast1065, %sub.ptr.rhs.cast1066
  %564 = load i8, i8* %do_utf8, align 1
  %tobool1068 = trunc i8 %564 to i1
  %565 = zext i1 %tobool1068 to i64
  %cond1070 = select i1 %tobool1068, i32 536870912, i32 0
  %566 = load i32, i32* %make_mortal, align 4
  %or1071 = or i32 %cond1070, %566
  %call1072 = call %struct.sv* @Perl_newSVpvn_flags(i8* %561, i64 %sub.ptr.sub1067, i32 %or1071)
  store %struct.sv* %call1072, %struct.sv** %dstr, align 8
  br label %do.body1073

do.body1073:                                      ; preds = %if.else1064
  br label %do.body1074

do.body1074:                                      ; preds = %do.body1073
  %567 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %568 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1075 = ptrtoint %struct.sv** %567 to i64
  %sub.ptr.rhs.cast1076 = ptrtoint %struct.sv** %568 to i64
  %sub.ptr.sub1077 = sub i64 %sub.ptr.lhs.cast1075, %sub.ptr.rhs.cast1076
  %sub.ptr.div1078 = sdiv exact i64 %sub.ptr.sub1077, 8
  %cmp1079 = icmp slt i64 %sub.ptr.div1078, 1
  br i1 %cmp1079, label %cond.true1081, label %cond.false1082

cond.true1081:                                    ; preds = %do.body1074
  br i1 true, label %if.then1083, label %if.end1085

cond.false1082:                                   ; preds = %do.body1074
  br i1 false, label %if.then1083, label %if.end1085

if.then1083:                                      ; preds = %cond.false1082, %cond.true1081
  %569 = load %struct.sv**, %struct.sv*** %sp, align 8
  %570 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1084 = call %struct.sv** @Perl_stack_grow(%struct.sv** %569, %struct.sv** %570, i64 1)
  store %struct.sv** %call1084, %struct.sv*** %sp, align 8
  %571 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1085

if.end1085:                                       ; preds = %if.then1083, %cond.false1082, %cond.true1081
  br label %do.end1086

do.end1086:                                       ; preds = %if.end1085
  %572 = load %struct.sv*, %struct.sv** %dstr, align 8
  %573 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1087 = getelementptr inbounds %struct.sv*, %struct.sv** %573, i32 1
  store %struct.sv** %incdec.ptr1087, %struct.sv*** %sp, align 8
  store %struct.sv* %572, %struct.sv** %incdec.ptr1087, align 8
  br label %do.end1088

do.end1088:                                       ; preds = %do.end1086
  br label %if.end1089

if.end1089:                                       ; preds = %do.end1088, %if.end1063
  %574 = load i8, i8* %do_utf8, align 1
  %tobool1090 = trunc i8 %574 to i1
  br i1 %tobool1090, label %if.then1091, label %if.else1094

if.then1091:                                      ; preds = %if.end1089
  %575 = load i8*, i8** %m, align 8
  %576 = load i64, i64* %len, align 8
  %conv1092 = trunc i64 %576 to i32
  %call1093 = call i8* @Perl_utf8_hop(i8* %575, i32 %conv1092)
  store i8* %call1093, i8** %s, align 8
  br label %if.end1096

if.else1094:                                      ; preds = %if.end1089
  %577 = load i8*, i8** %m, align 8
  %578 = load i64, i64* %len, align 8
  %add.ptr1095 = getelementptr inbounds i8, i8* %577, i64 %578
  store i8* %add.ptr1095, i8** %s, align 8
  br label %if.end1096

if.end1096:                                       ; preds = %if.else1094, %if.then1091
  br label %while.cond1031

while.end1097:                                    ; preds = %if.then1050, %while.cond1031
  br label %if.end1159

if.else1098:                                      ; preds = %land.lhs.true1016, %land.lhs.true1012, %if.then1003
  br label %while.cond1099

while.cond1099:                                   ; preds = %if.end1157, %if.else1098
  %579 = load i8*, i8** %s, align 8
  %580 = load i8*, i8** %strend, align 8
  %cmp1100 = icmp ult i8* %579, %580
  br i1 %cmp1100, label %land.lhs.true1102, label %land.end1111

land.lhs.true1102:                                ; preds = %while.cond1099
  %581 = load i64, i64* %limit, align 8
  %dec1103 = add nsw i64 %581, -1
  store i64 %dec1103, i64* %limit, align 8
  %tobool1104 = icmp ne i64 %dec1103, 0
  br i1 %tobool1104, label %land.rhs1105, label %land.end1111

land.rhs1105:                                     ; preds = %land.lhs.true1102
  %582 = load i8*, i8** %s, align 8
  %583 = load i8*, i8** %strend, align 8
  %584 = load %struct.sv*, %struct.sv** %csv, align 8
  %585 = load i8, i8* %multiline, align 1
  %tobool1106 = trunc i8 %585 to i1
  %586 = zext i1 %tobool1106 to i64
  %cond1108 = select i1 %tobool1106, i32 1, i32 0
  %call1109 = call i8* @Perl_fbm_instr(i8* %582, i8* %583, %struct.sv* %584, i32 %cond1108)
  store i8* %call1109, i8** %m, align 8
  %tobool1110 = icmp ne i8* %call1109, null
  br label %land.end1111

land.end1111:                                     ; preds = %land.rhs1105, %land.lhs.true1102, %while.cond1099
  %587 = phi i1 [ false, %land.lhs.true1102 ], [ false, %while.cond1099 ], [ %tobool1110, %land.rhs1105 ]
  br i1 %587, label %while.body1112, label %while.end1158

while.body1112:                                   ; preds = %land.end1111
  %588 = load i8, i8* %gimme_scalar, align 1
  %tobool1113 = trunc i8 %588 to i1
  br i1 %tobool1113, label %if.then1114, label %if.else1125

if.then1114:                                      ; preds = %while.body1112
  %589 = load i64, i64* %iters, align 8
  %inc1115 = add nsw i64 %589, 1
  store i64 %inc1115, i64* %iters, align 8
  %590 = load i8*, i8** %m, align 8
  %591 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1116 = ptrtoint i8* %590 to i64
  %sub.ptr.rhs.cast1117 = ptrtoint i8* %591 to i64
  %sub.ptr.sub1118 = sub i64 %sub.ptr.lhs.cast1116, %sub.ptr.rhs.cast1117
  %cmp1119 = icmp eq i64 %sub.ptr.sub1118, 0
  br i1 %cmp1119, label %if.then1121, label %if.else1123

if.then1121:                                      ; preds = %if.then1114
  %592 = load i32, i32* %trailing_empty, align 4
  %inc1122 = add nsw i32 %592, 1
  store i32 %inc1122, i32* %trailing_empty, align 4
  br label %if.end1124

if.else1123:                                      ; preds = %if.then1114
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end1124

if.end1124:                                       ; preds = %if.else1123, %if.then1121
  br label %if.end1150

if.else1125:                                      ; preds = %while.body1112
  %593 = load i8*, i8** %s, align 8
  %594 = load i8*, i8** %m, align 8
  %595 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1126 = ptrtoint i8* %594 to i64
  %sub.ptr.rhs.cast1127 = ptrtoint i8* %595 to i64
  %sub.ptr.sub1128 = sub i64 %sub.ptr.lhs.cast1126, %sub.ptr.rhs.cast1127
  %596 = load i8, i8* %do_utf8, align 1
  %tobool1129 = trunc i8 %596 to i1
  %597 = zext i1 %tobool1129 to i64
  %cond1131 = select i1 %tobool1129, i32 536870912, i32 0
  %598 = load i32, i32* %make_mortal, align 4
  %or1132 = or i32 %cond1131, %598
  %call1133 = call %struct.sv* @Perl_newSVpvn_flags(i8* %593, i64 %sub.ptr.sub1128, i32 %or1132)
  store %struct.sv* %call1133, %struct.sv** %dstr, align 8
  br label %do.body1134

do.body1134:                                      ; preds = %if.else1125
  br label %do.body1135

do.body1135:                                      ; preds = %do.body1134
  %599 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %600 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1136 = ptrtoint %struct.sv** %599 to i64
  %sub.ptr.rhs.cast1137 = ptrtoint %struct.sv** %600 to i64
  %sub.ptr.sub1138 = sub i64 %sub.ptr.lhs.cast1136, %sub.ptr.rhs.cast1137
  %sub.ptr.div1139 = sdiv exact i64 %sub.ptr.sub1138, 8
  %cmp1140 = icmp slt i64 %sub.ptr.div1139, 1
  br i1 %cmp1140, label %cond.true1142, label %cond.false1143

cond.true1142:                                    ; preds = %do.body1135
  br i1 true, label %if.then1144, label %if.end1146

cond.false1143:                                   ; preds = %do.body1135
  br i1 false, label %if.then1144, label %if.end1146

if.then1144:                                      ; preds = %cond.false1143, %cond.true1142
  %601 = load %struct.sv**, %struct.sv*** %sp, align 8
  %602 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1145 = call %struct.sv** @Perl_stack_grow(%struct.sv** %601, %struct.sv** %602, i64 1)
  store %struct.sv** %call1145, %struct.sv*** %sp, align 8
  %603 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1146

if.end1146:                                       ; preds = %if.then1144, %cond.false1143, %cond.true1142
  br label %do.end1147

do.end1147:                                       ; preds = %if.end1146
  %604 = load %struct.sv*, %struct.sv** %dstr, align 8
  %605 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1148 = getelementptr inbounds %struct.sv*, %struct.sv** %605, i32 1
  store %struct.sv** %incdec.ptr1148, %struct.sv*** %sp, align 8
  store %struct.sv* %604, %struct.sv** %incdec.ptr1148, align 8
  br label %do.end1149

do.end1149:                                       ; preds = %do.end1147
  br label %if.end1150

if.end1150:                                       ; preds = %do.end1149, %if.end1124
  %606 = load i8, i8* %do_utf8, align 1
  %tobool1151 = trunc i8 %606 to i1
  br i1 %tobool1151, label %if.then1152, label %if.else1155

if.then1152:                                      ; preds = %if.end1150
  %607 = load i8*, i8** %m, align 8
  %608 = load i64, i64* %len, align 8
  %conv1153 = trunc i64 %608 to i32
  %call1154 = call i8* @Perl_utf8_hop(i8* %607, i32 %conv1153)
  store i8* %call1154, i8** %s, align 8
  br label %if.end1157

if.else1155:                                      ; preds = %if.end1150
  %609 = load i8*, i8** %m, align 8
  %610 = load i64, i64* %len, align 8
  %add.ptr1156 = getelementptr inbounds i8, i8* %609, i64 %610
  store i8* %add.ptr1156, i8** %s, align 8
  br label %if.end1157

if.end1157:                                       ; preds = %if.else1155, %if.then1152
  br label %while.cond1099

while.end1158:                                    ; preds = %land.end1111
  br label %if.end1159

if.end1159:                                       ; preds = %while.end1158, %while.end1097
  br label %if.end1307

if.else1160:                                      ; preds = %land.lhs.true998, %land.lhs.true993, %land.lhs.true990, %land.lhs.true985, %if.else976
  %611 = load i64, i64* %slen, align 8
  %612 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1161 = call %struct.regexp* @S_ReANY(%struct.p5rx* %612)
  %nparens1162 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1161, i32 0, i32 12
  %613 = load i32, i32* %nparens1162, align 8
  %conv1163 = zext i32 %613 to i64
  %mul = mul i64 %611, %conv1163
  %614 = load i64, i64* %maxiters, align 8
  %add1164 = add i64 %614, %mul
  store i64 %add1164, i64* %maxiters, align 8
  br label %while.cond1165

while.cond1165:                                   ; preds = %if.end1300, %if.else1160
  %615 = load i8*, i8** %s, align 8
  %616 = load i8*, i8** %strend, align 8
  %cmp1166 = icmp ult i8* %615, %616
  br i1 %cmp1166, label %land.rhs1168, label %land.end1171

land.rhs1168:                                     ; preds = %while.cond1165
  %617 = load i64, i64* %limit, align 8
  %dec1169 = add nsw i64 %617, -1
  store i64 %dec1169, i64* %limit, align 8
  %tobool1170 = icmp ne i64 %dec1169, 0
  br label %land.end1171

land.end1171:                                     ; preds = %land.rhs1168, %while.cond1165
  %618 = phi i1 [ false, %while.cond1165 ], [ %tobool1170, %land.rhs1168 ]
  br i1 %618, label %while.body1172, label %while.end1306

while.body1172:                                   ; preds = %land.end1171
  %619 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %619, %struct.sv*** @PL_stack_sp, align 8
  %620 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1173 = call %struct.regexp* @S_ReANY(%struct.p5rx* %620)
  %engine1174 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1173, i32 0, i32 4
  %621 = load %struct.regexp_engine*, %struct.regexp_engine** %engine1174, align 8
  %exec = getelementptr inbounds %struct.regexp_engine, %struct.regexp_engine* %621, i32 0, i32 1
  %622 = load i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)*, i32 (%struct.p5rx*, i8*, i8*, i8*, i64, %struct.sv*, i8*, i32)** %exec, align 8
  %623 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %624 = load i8*, i8** %s, align 8
  %625 = load i8*, i8** %strend, align 8
  %626 = load i8*, i8** %orig, align 8
  %627 = load %struct.sv*, %struct.sv** %sv, align 8
  %call1175 = call i32 %622(%struct.p5rx* %623, i8* %624, i8* %625, i8* %626, i64 1, %struct.sv* %627, i8* null, i32 0)
  store i32 %call1175, i32* %rex_return, align 4
  %628 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %628, %struct.sv*** %sp, align 8
  %629 = load i32, i32* %rex_return, align 4
  %cmp1176 = icmp eq i32 %629, 0
  br i1 %cmp1176, label %if.then1178, label %if.end1179

if.then1178:                                      ; preds = %while.body1172
  br label %while.end1306

if.end1179:                                       ; preds = %while.body1172
  %630 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1180 = call %struct.regexp* @S_ReANY(%struct.p5rx* %630)
  %extflags1181 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1180, i32 0, i32 7
  %631 = load i32, i32* %extflags1181, align 8
  %and1182 = and i32 %631, 67108864
  %tobool1183 = icmp ne i32 %and1182, 0
  br i1 %tobool1183, label %cond.true1184, label %cond.false1185

cond.true1184:                                    ; preds = %if.end1179
  br i1 true, label %if.then1186, label %if.end1187

cond.false1185:                                   ; preds = %if.end1179
  br i1 false, label %if.then1186, label %if.end1187

if.then1186:                                      ; preds = %cond.false1185, %cond.true1184
  store i8 1, i8* @PL_tainted, align 1
  br label %if.end1187

if.end1187:                                       ; preds = %if.then1186, %cond.false1185, %cond.true1184
  %632 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1188 = call %struct.regexp* @S_ReANY(%struct.p5rx* %632)
  %offs = getelementptr inbounds %struct.regexp, %struct.regexp* %call1188, i32 0, i32 17
  %633 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs, align 8
  %arrayidx1189 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %633, i64 0
  %start = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx1189, i32 0, i32 0
  %634 = load i64, i64* %start, align 8
  %635 = load i8*, i8** %orig, align 8
  %add.ptr1190 = getelementptr inbounds i8, i8* %635, i64 %634
  store i8* %add.ptr1190, i8** %m, align 8
  %636 = load i8, i8* %gimme_scalar, align 1
  %tobool1191 = trunc i8 %636 to i1
  br i1 %tobool1191, label %if.then1192, label %if.else1203

if.then1192:                                      ; preds = %if.end1187
  %637 = load i64, i64* %iters, align 8
  %inc1193 = add nsw i64 %637, 1
  store i64 %inc1193, i64* %iters, align 8
  %638 = load i8*, i8** %m, align 8
  %639 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1194 = ptrtoint i8* %638 to i64
  %sub.ptr.rhs.cast1195 = ptrtoint i8* %639 to i64
  %sub.ptr.sub1196 = sub i64 %sub.ptr.lhs.cast1194, %sub.ptr.rhs.cast1195
  %cmp1197 = icmp eq i64 %sub.ptr.sub1196, 0
  br i1 %cmp1197, label %if.then1199, label %if.else1201

if.then1199:                                      ; preds = %if.then1192
  %640 = load i32, i32* %trailing_empty, align 4
  %inc1200 = add nsw i32 %640, 1
  store i32 %inc1200, i32* %trailing_empty, align 4
  br label %if.end1202

if.else1201:                                      ; preds = %if.then1192
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end1202

if.end1202:                                       ; preds = %if.else1201, %if.then1199
  br label %if.end1228

if.else1203:                                      ; preds = %if.end1187
  %641 = load i8*, i8** %s, align 8
  %642 = load i8*, i8** %m, align 8
  %643 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1204 = ptrtoint i8* %642 to i64
  %sub.ptr.rhs.cast1205 = ptrtoint i8* %643 to i64
  %sub.ptr.sub1206 = sub i64 %sub.ptr.lhs.cast1204, %sub.ptr.rhs.cast1205
  %644 = load i8, i8* %do_utf8, align 1
  %tobool1207 = trunc i8 %644 to i1
  %645 = zext i1 %tobool1207 to i64
  %cond1209 = select i1 %tobool1207, i32 536870912, i32 0
  %646 = load i32, i32* %make_mortal, align 4
  %or1210 = or i32 %cond1209, %646
  %call1211 = call %struct.sv* @Perl_newSVpvn_flags(i8* %641, i64 %sub.ptr.sub1206, i32 %or1210)
  store %struct.sv* %call1211, %struct.sv** %dstr, align 8
  br label %do.body1212

do.body1212:                                      ; preds = %if.else1203
  br label %do.body1213

do.body1213:                                      ; preds = %do.body1212
  %647 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %648 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1214 = ptrtoint %struct.sv** %647 to i64
  %sub.ptr.rhs.cast1215 = ptrtoint %struct.sv** %648 to i64
  %sub.ptr.sub1216 = sub i64 %sub.ptr.lhs.cast1214, %sub.ptr.rhs.cast1215
  %sub.ptr.div1217 = sdiv exact i64 %sub.ptr.sub1216, 8
  %cmp1218 = icmp slt i64 %sub.ptr.div1217, 1
  br i1 %cmp1218, label %cond.true1220, label %cond.false1221

cond.true1220:                                    ; preds = %do.body1213
  br i1 true, label %if.then1222, label %if.end1224

cond.false1221:                                   ; preds = %do.body1213
  br i1 false, label %if.then1222, label %if.end1224

if.then1222:                                      ; preds = %cond.false1221, %cond.true1220
  %649 = load %struct.sv**, %struct.sv*** %sp, align 8
  %650 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1223 = call %struct.sv** @Perl_stack_grow(%struct.sv** %649, %struct.sv** %650, i64 1)
  store %struct.sv** %call1223, %struct.sv*** %sp, align 8
  %651 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1224

if.end1224:                                       ; preds = %if.then1222, %cond.false1221, %cond.true1220
  br label %do.end1225

do.end1225:                                       ; preds = %if.end1224
  %652 = load %struct.sv*, %struct.sv** %dstr, align 8
  %653 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1226 = getelementptr inbounds %struct.sv*, %struct.sv** %653, i32 1
  store %struct.sv** %incdec.ptr1226, %struct.sv*** %sp, align 8
  store %struct.sv* %652, %struct.sv** %incdec.ptr1226, align 8
  br label %do.end1227

do.end1227:                                       ; preds = %do.end1225
  br label %if.end1228

if.end1228:                                       ; preds = %do.end1227, %if.end1202
  %654 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1229 = call %struct.regexp* @S_ReANY(%struct.p5rx* %654)
  %nparens1230 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1229, i32 0, i32 12
  %655 = load i32, i32* %nparens1230, align 8
  %tobool1231 = icmp ne i32 %655, 0
  br i1 %tobool1231, label %if.then1232, label %if.end1300

if.then1232:                                      ; preds = %if.end1228
  store i32 1, i32* %i1233, align 4
  br label %for.cond1234

for.cond1234:                                     ; preds = %for.inc1297, %if.then1232
  %656 = load i32, i32* %i1233, align 4
  %657 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1235 = call %struct.regexp* @S_ReANY(%struct.p5rx* %657)
  %nparens1236 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1235, i32 0, i32 12
  %658 = load i32, i32* %nparens1236, align 8
  %cmp1237 = icmp sle i32 %656, %658
  br i1 %cmp1237, label %for.body1239, label %for.end1299

for.body1239:                                     ; preds = %for.cond1234
  %659 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1240 = call %struct.regexp* @S_ReANY(%struct.p5rx* %659)
  %offs1241 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1240, i32 0, i32 17
  %660 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs1241, align 8
  %661 = load i32, i32* %i1233, align 4
  %idxprom1242 = sext i32 %661 to i64
  %arrayidx1243 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %660, i64 %idxprom1242
  %start1244 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx1243, i32 0, i32 0
  %662 = load i64, i64* %start1244, align 8
  %663 = load i8*, i8** %orig, align 8
  %add.ptr1245 = getelementptr inbounds i8, i8* %663, i64 %662
  store i8* %add.ptr1245, i8** %s, align 8
  %664 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1246 = call %struct.regexp* @S_ReANY(%struct.p5rx* %664)
  %offs1247 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1246, i32 0, i32 17
  %665 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs1247, align 8
  %666 = load i32, i32* %i1233, align 4
  %idxprom1248 = sext i32 %666 to i64
  %arrayidx1249 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %665, i64 %idxprom1248
  %end = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx1249, i32 0, i32 1
  %667 = load i64, i64* %end, align 8
  %668 = load i8*, i8** %orig, align 8
  %add.ptr1250 = getelementptr inbounds i8, i8* %668, i64 %667
  store i8* %add.ptr1250, i8** %m, align 8
  %669 = load i8, i8* %gimme_scalar, align 1
  %tobool1251 = trunc i8 %669 to i1
  br i1 %tobool1251, label %if.then1252, label %if.else1263

if.then1252:                                      ; preds = %for.body1239
  %670 = load i64, i64* %iters, align 8
  %inc1253 = add nsw i64 %670, 1
  store i64 %inc1253, i64* %iters, align 8
  %671 = load i8*, i8** %m, align 8
  %672 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1254 = ptrtoint i8* %671 to i64
  %sub.ptr.rhs.cast1255 = ptrtoint i8* %672 to i64
  %sub.ptr.sub1256 = sub i64 %sub.ptr.lhs.cast1254, %sub.ptr.rhs.cast1255
  %cmp1257 = icmp eq i64 %sub.ptr.sub1256, 0
  br i1 %cmp1257, label %if.then1259, label %if.else1261

if.then1259:                                      ; preds = %if.then1252
  %673 = load i32, i32* %trailing_empty, align 4
  %inc1260 = add nsw i32 %673, 1
  store i32 %inc1260, i32* %trailing_empty, align 4
  br label %if.end1262

if.else1261:                                      ; preds = %if.then1252
  store i32 0, i32* %trailing_empty, align 4
  br label %if.end1262

if.end1262:                                       ; preds = %if.else1261, %if.then1259
  br label %if.end1296

if.else1263:                                      ; preds = %for.body1239
  %674 = load i8*, i8** %m, align 8
  %675 = load i8*, i8** %orig, align 8
  %cmp1264 = icmp uge i8* %674, %675
  br i1 %cmp1264, label %land.lhs.true1266, label %if.else1278

land.lhs.true1266:                                ; preds = %if.else1263
  %676 = load i8*, i8** %s, align 8
  %677 = load i8*, i8** %orig, align 8
  %cmp1267 = icmp uge i8* %676, %677
  br i1 %cmp1267, label %if.then1269, label %if.else1278

if.then1269:                                      ; preds = %land.lhs.true1266
  %678 = load i8*, i8** %s, align 8
  %679 = load i8*, i8** %m, align 8
  %680 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1270 = ptrtoint i8* %679 to i64
  %sub.ptr.rhs.cast1271 = ptrtoint i8* %680 to i64
  %sub.ptr.sub1272 = sub i64 %sub.ptr.lhs.cast1270, %sub.ptr.rhs.cast1271
  %681 = load i8, i8* %do_utf8, align 1
  %tobool1273 = trunc i8 %681 to i1
  %682 = zext i1 %tobool1273 to i64
  %cond1275 = select i1 %tobool1273, i32 536870912, i32 0
  %683 = load i32, i32* %make_mortal, align 4
  %or1276 = or i32 %cond1275, %683
  %call1277 = call %struct.sv* @Perl_newSVpvn_flags(i8* %678, i64 %sub.ptr.sub1272, i32 %or1276)
  store %struct.sv* %call1277, %struct.sv** %dstr, align 8
  br label %if.end1279

if.else1278:                                      ; preds = %land.lhs.true1266, %if.else1263
  store %struct.sv* @PL_sv_undef, %struct.sv** %dstr, align 8
  br label %if.end1279

if.end1279:                                       ; preds = %if.else1278, %if.then1269
  br label %do.body1280

do.body1280:                                      ; preds = %if.end1279
  br label %do.body1281

do.body1281:                                      ; preds = %do.body1280
  %684 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %685 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1282 = ptrtoint %struct.sv** %684 to i64
  %sub.ptr.rhs.cast1283 = ptrtoint %struct.sv** %685 to i64
  %sub.ptr.sub1284 = sub i64 %sub.ptr.lhs.cast1282, %sub.ptr.rhs.cast1283
  %sub.ptr.div1285 = sdiv exact i64 %sub.ptr.sub1284, 8
  %cmp1286 = icmp slt i64 %sub.ptr.div1285, 1
  br i1 %cmp1286, label %cond.true1288, label %cond.false1289

cond.true1288:                                    ; preds = %do.body1281
  br i1 true, label %if.then1290, label %if.end1292

cond.false1289:                                   ; preds = %do.body1281
  br i1 false, label %if.then1290, label %if.end1292

if.then1290:                                      ; preds = %cond.false1289, %cond.true1288
  %686 = load %struct.sv**, %struct.sv*** %sp, align 8
  %687 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1291 = call %struct.sv** @Perl_stack_grow(%struct.sv** %686, %struct.sv** %687, i64 1)
  store %struct.sv** %call1291, %struct.sv*** %sp, align 8
  %688 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1292

if.end1292:                                       ; preds = %if.then1290, %cond.false1289, %cond.true1288
  br label %do.end1293

do.end1293:                                       ; preds = %if.end1292
  %689 = load %struct.sv*, %struct.sv** %dstr, align 8
  %690 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1294 = getelementptr inbounds %struct.sv*, %struct.sv** %690, i32 1
  store %struct.sv** %incdec.ptr1294, %struct.sv*** %sp, align 8
  store %struct.sv* %689, %struct.sv** %incdec.ptr1294, align 8
  br label %do.end1295

do.end1295:                                       ; preds = %do.end1293
  br label %if.end1296

if.end1296:                                       ; preds = %do.end1295, %if.end1262
  br label %for.inc1297

for.inc1297:                                      ; preds = %if.end1296
  %691 = load i32, i32* %i1233, align 4
  %inc1298 = add nsw i32 %691, 1
  store i32 %inc1298, i32* %i1233, align 4
  br label %for.cond1234

for.end1299:                                      ; preds = %for.cond1234
  br label %if.end1300

if.end1300:                                       ; preds = %for.end1299, %if.end1228
  %692 = load %struct.p5rx*, %struct.p5rx** %rx, align 8
  %call1301 = call %struct.regexp* @S_ReANY(%struct.p5rx* %692)
  %offs1302 = getelementptr inbounds %struct.regexp, %struct.regexp* %call1301, i32 0, i32 17
  %693 = load %struct.regexp_paren_pair*, %struct.regexp_paren_pair** %offs1302, align 8
  %arrayidx1303 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %693, i64 0
  %end1304 = getelementptr inbounds %struct.regexp_paren_pair, %struct.regexp_paren_pair* %arrayidx1303, i32 0, i32 1
  %694 = load i64, i64* %end1304, align 8
  %695 = load i8*, i8** %orig, align 8
  %add.ptr1305 = getelementptr inbounds i8, i8* %695, i64 %694
  store i8* %add.ptr1305, i8** %s, align 8
  br label %while.cond1165

while.end1306:                                    ; preds = %if.then1178, %land.end1171
  br label %if.end1307

if.end1307:                                       ; preds = %while.end1306, %if.end1159
  br label %if.end1308

if.end1308:                                       ; preds = %if.end1307, %if.end975
  br label %if.end1309

if.end1309:                                       ; preds = %if.end1308, %while.end869
  br label %if.end1310

if.end1310:                                       ; preds = %if.end1309, %while.end803
  %696 = load i8, i8* %gimme_scalar, align 1
  %tobool1311 = trunc i8 %696 to i1
  br i1 %tobool1311, label %if.end1319, label %if.then1312

if.then1312:                                      ; preds = %if.end1310
  %697 = load %struct.sv**, %struct.sv*** %sp, align 8
  %698 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %sub.ptr.lhs.cast1313 = ptrtoint %struct.sv** %697 to i64
  %sub.ptr.rhs.cast1314 = ptrtoint %struct.sv** %698 to i64
  %sub.ptr.sub1315 = sub i64 %sub.ptr.lhs.cast1313, %sub.ptr.rhs.cast1314
  %sub.ptr.div1316 = sdiv exact i64 %sub.ptr.sub1315, 8
  %699 = load i32, i32* %base, align 4
  %conv1317 = sext i32 %699 to i64
  %sub1318 = sub nsw i64 %sub.ptr.div1316, %conv1317
  store i64 %sub1318, i64* %iters, align 8
  br label %if.end1319

if.end1319:                                       ; preds = %if.then1312, %if.end1310
  %700 = load i64, i64* %iters, align 8
  %701 = load i64, i64* %maxiters, align 8
  %cmp1320 = icmp sgt i64 %700, %701
  br i1 %cmp1320, label %if.then1322, label %if.end1324

if.then1322:                                      ; preds = %if.end1319
  %call1323 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.58, i64 0, i64 0))
  store %struct.op* %call1323, %struct.op** %retval, align 8
  br label %return

if.end1324:                                       ; preds = %if.end1319
  %702 = load i8*, i8** %s, align 8
  %703 = load i8*, i8** %strend, align 8
  %cmp1325 = icmp ult i8* %702, %703
  br i1 %cmp1325, label %if.then1331, label %lor.lhs.false1327

lor.lhs.false1327:                                ; preds = %if.end1324
  %704 = load i64, i64* %iters, align 8
  %tobool1328 = icmp ne i64 %704, 0
  br i1 %tobool1328, label %land.lhs.true1329, label %if.else1360

land.lhs.true1329:                                ; preds = %lor.lhs.false1327
  %705 = load i32, i32* %origlimit, align 4
  %tobool1330 = icmp ne i32 %705, 0
  br i1 %tobool1330, label %if.then1331, label %if.else1360

if.then1331:                                      ; preds = %land.lhs.true1329, %if.end1324
  %706 = load i8, i8* %gimme_scalar, align 1
  %tobool1332 = trunc i8 %706 to i1
  br i1 %tobool1332, label %if.end1358, label %if.then1333

if.then1333:                                      ; preds = %if.then1331
  %707 = load i8*, i8** %strend, align 8
  %708 = load i8*, i8** %s, align 8
  %sub.ptr.lhs.cast1334 = ptrtoint i8* %707 to i64
  %sub.ptr.rhs.cast1335 = ptrtoint i8* %708 to i64
  %sub.ptr.sub1336 = sub i64 %sub.ptr.lhs.cast1334, %sub.ptr.rhs.cast1335
  store i64 %sub.ptr.sub1336, i64* %l, align 8
  %709 = load i8*, i8** %s, align 8
  %710 = load i64, i64* %l, align 8
  %711 = load i8, i8* %do_utf8, align 1
  %tobool1337 = trunc i8 %711 to i1
  %712 = zext i1 %tobool1337 to i64
  %cond1339 = select i1 %tobool1337, i32 536870912, i32 0
  %713 = load i32, i32* %make_mortal, align 4
  %or1340 = or i32 %cond1339, %713
  %call1341 = call %struct.sv* @Perl_newSVpvn_flags(i8* %709, i64 %710, i32 %or1340)
  store %struct.sv* %call1341, %struct.sv** %dstr, align 8
  br label %do.body1342

do.body1342:                                      ; preds = %if.then1333
  br label %do.body1343

do.body1343:                                      ; preds = %do.body1342
  %714 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %715 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1344 = ptrtoint %struct.sv** %714 to i64
  %sub.ptr.rhs.cast1345 = ptrtoint %struct.sv** %715 to i64
  %sub.ptr.sub1346 = sub i64 %sub.ptr.lhs.cast1344, %sub.ptr.rhs.cast1345
  %sub.ptr.div1347 = sdiv exact i64 %sub.ptr.sub1346, 8
  %cmp1348 = icmp slt i64 %sub.ptr.div1347, 1
  br i1 %cmp1348, label %cond.true1350, label %cond.false1351

cond.true1350:                                    ; preds = %do.body1343
  br i1 true, label %if.then1352, label %if.end1354

cond.false1351:                                   ; preds = %do.body1343
  br i1 false, label %if.then1352, label %if.end1354

if.then1352:                                      ; preds = %cond.false1351, %cond.true1350
  %716 = load %struct.sv**, %struct.sv*** %sp, align 8
  %717 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call1353 = call %struct.sv** @Perl_stack_grow(%struct.sv** %716, %struct.sv** %717, i64 1)
  store %struct.sv** %call1353, %struct.sv*** %sp, align 8
  %718 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1354

if.end1354:                                       ; preds = %if.then1352, %cond.false1351, %cond.true1350
  br label %do.end1355

do.end1355:                                       ; preds = %if.end1354
  %719 = load %struct.sv*, %struct.sv** %dstr, align 8
  %720 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1356 = getelementptr inbounds %struct.sv*, %struct.sv** %720, i32 1
  store %struct.sv** %incdec.ptr1356, %struct.sv*** %sp, align 8
  store %struct.sv* %719, %struct.sv** %incdec.ptr1356, align 8
  br label %do.end1357

do.end1357:                                       ; preds = %do.end1355
  br label %if.end1358

if.end1358:                                       ; preds = %do.end1357, %if.then1331
  %721 = load i64, i64* %iters, align 8
  %inc1359 = add nsw i64 %721, 1
  store i64 %inc1359, i64* %iters, align 8
  br label %if.end1395

if.else1360:                                      ; preds = %land.lhs.true1329, %lor.lhs.false1327
  %722 = load i32, i32* %origlimit, align 4
  %tobool1361 = icmp ne i32 %722, 0
  br i1 %tobool1361, label %if.end1394, label %if.then1362

if.then1362:                                      ; preds = %if.else1360
  %723 = load i8, i8* %gimme_scalar, align 1
  %tobool1363 = trunc i8 %723 to i1
  br i1 %tobool1363, label %if.then1364, label %if.else1367

if.then1364:                                      ; preds = %if.then1362
  %724 = load i32, i32* %trailing_empty, align 4
  %conv1365 = sext i32 %724 to i64
  %725 = load i64, i64* %iters, align 8
  %sub1366 = sub nsw i64 %725, %conv1365
  store i64 %sub1366, i64* %iters, align 8
  br label %if.end1393

if.else1367:                                      ; preds = %if.then1362
  br label %while.cond1368

while.cond1368:                                   ; preds = %if.end1389, %if.else1367
  %726 = load i64, i64* %iters, align 8
  %cmp1369 = icmp sgt i64 %726, 0
  br i1 %cmp1369, label %land.rhs1371, label %land.end1382

land.rhs1371:                                     ; preds = %while.cond1368
  %727 = load %struct.sv**, %struct.sv*** %sp, align 8
  %728 = load %struct.sv*, %struct.sv** %727, align 8
  %tobool1372 = icmp ne %struct.sv* %728, null
  br i1 %tobool1372, label %lor.lhs.false1373, label %lor.end1381

lor.lhs.false1373:                                ; preds = %land.rhs1371
  %729 = load %struct.sv**, %struct.sv*** %sp, align 8
  %730 = load %struct.sv*, %struct.sv** %729, align 8
  %sv_any1374 = getelementptr inbounds %struct.sv, %struct.sv* %730, i32 0, i32 0
  %731 = load i8*, i8** %sv_any1374, align 8
  %tobool1375 = icmp ne i8* %731, null
  br i1 %tobool1375, label %lor.rhs1376, label %lor.end1381

lor.rhs1376:                                      ; preds = %lor.lhs.false1373
  %732 = load %struct.sv**, %struct.sv*** %sp, align 8
  %733 = load %struct.sv*, %struct.sv** %732, align 8
  %sv_any1377 = getelementptr inbounds %struct.sv, %struct.sv* %733, i32 0, i32 0
  %734 = load i8*, i8** %sv_any1377, align 8
  %735 = bitcast i8* %734 to %struct.xpv*
  %xpv_cur1378 = getelementptr inbounds %struct.xpv, %struct.xpv* %735, i32 0, i32 2
  %736 = load i64, i64* %xpv_cur1378, align 8
  %cmp1379 = icmp eq i64 %736, 0
  br label %lor.end1381

lor.end1381:                                      ; preds = %lor.rhs1376, %lor.lhs.false1373, %land.rhs1371
  %737 = phi i1 [ true, %lor.lhs.false1373 ], [ true, %land.rhs1371 ], [ %cmp1379, %lor.rhs1376 ]
  br label %land.end1382

land.end1382:                                     ; preds = %lor.end1381, %while.cond1368
  %738 = phi i1 [ false, %while.cond1368 ], [ %737, %lor.end1381 ]
  br i1 %738, label %while.body1383, label %while.end1392

while.body1383:                                   ; preds = %land.end1382
  %739 = load %struct.sv**, %struct.sv*** %sp, align 8
  %740 = load %struct.sv*, %struct.sv** %739, align 8
  %tobool1384 = icmp ne %struct.sv* %740, null
  br i1 %tobool1384, label %land.lhs.true1385, label %if.end1389

land.lhs.true1385:                                ; preds = %while.body1383
  %741 = load i32, i32* %make_mortal, align 4
  %tobool1386 = icmp ne i32 %741, 0
  br i1 %tobool1386, label %if.end1389, label %if.then1387

if.then1387:                                      ; preds = %land.lhs.true1385
  %742 = load %struct.sv**, %struct.sv*** %sp, align 8
  %743 = load %struct.sv*, %struct.sv** %742, align 8
  %call1388 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %743)
  br label %if.end1389

if.end1389:                                       ; preds = %if.then1387, %land.lhs.true1385, %while.body1383
  %744 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1390 = getelementptr inbounds %struct.sv*, %struct.sv** %744, i32 -1
  store %struct.sv** %incdec.ptr1390, %struct.sv*** %sp, align 8
  store %struct.sv* @PL_sv_undef, %struct.sv** %744, align 8
  %745 = load i64, i64* %iters, align 8
  %dec1391 = add nsw i64 %745, -1
  store i64 %dec1391, i64* %iters, align 8
  br label %while.cond1368

while.end1392:                                    ; preds = %land.end1382
  br label %if.end1393

if.end1393:                                       ; preds = %while.end1392, %if.then1364
  br label %if.end1394

if.end1394:                                       ; preds = %if.end1393, %if.else1360
  br label %if.end1395

if.end1395:                                       ; preds = %if.end1394, %if.end1358
  %746 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %746, %struct.sv*** @PL_stack_sp, align 8
  br label %do.body1396

do.body1396:                                      ; preds = %if.end1395
  %747 = load i32, i32* @PL_savestack_ix, align 4
  %748 = load i32, i32* %oldsave, align 4
  %cmp1397 = icmp sgt i32 %747, %748
  br i1 %cmp1397, label %if.then1399, label %if.end1400

if.then1399:                                      ; preds = %do.body1396
  %749 = load i32, i32* %oldsave, align 4
  call void @Perl_leave_scope(i32 %749)
  br label %if.end1400

if.end1400:                                       ; preds = %if.then1399, %do.body1396
  br label %do.end1401

do.end1401:                                       ; preds = %if.end1400
  %750 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %750, %struct.sv*** %sp, align 8
  %751 = load i32, i32* %realarray, align 4
  %tobool1402 = icmp ne i32 %751, 0
  br i1 %tobool1402, label %if.then1403, label %if.else1476

if.then1403:                                      ; preds = %do.end1401
  %752 = load %struct.magic*, %struct.magic** %mg, align 8
  %tobool1404 = icmp ne %struct.magic* %752, null
  br i1 %tobool1404, label %if.else1434, label %if.then1405

if.then1405:                                      ; preds = %if.then1403
  %753 = load %struct.av*, %struct.av** %ary, align 8
  %sv_flags1406 = getelementptr inbounds %struct.av, %struct.av* %753, i32 0, i32 2
  %754 = load i32, i32* %sv_flags1406, align 4
  %and1407 = and i32 %754, 4194304
  %tobool1408 = icmp ne i32 %and1407, 0
  br i1 %tobool1408, label %if.then1409, label %if.end1411

if.then1409:                                      ; preds = %if.then1405
  %755 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %755, %struct.sv*** @PL_stack_sp, align 8
  %756 = load %struct.av*, %struct.av** %ary, align 8
  %757 = bitcast %struct.av* %756 to i8*
  %758 = bitcast i8* %757 to %struct.sv*
  %call1410 = call i32 @Perl_mg_set(%struct.sv* %758)
  %759 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %759, %struct.sv*** %sp, align 8
  br label %if.end1411

if.end1411:                                       ; preds = %if.then1409, %if.then1405
  %760 = load i32, i32* %gimme, align 4
  %cmp1412 = icmp eq i32 %760, 3
  br i1 %cmp1412, label %if.then1414, label %if.end1433

if.then1414:                                      ; preds = %if.end1411
  br label %do.body1415

do.body1415:                                      ; preds = %if.then1414
  %761 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %762 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1416 = ptrtoint %struct.sv** %761 to i64
  %sub.ptr.rhs.cast1417 = ptrtoint %struct.sv** %762 to i64
  %sub.ptr.sub1418 = sub i64 %sub.ptr.lhs.cast1416, %sub.ptr.rhs.cast1417
  %sub.ptr.div1419 = sdiv exact i64 %sub.ptr.sub1418, 8
  %763 = load i64, i64* %iters, align 8
  %cmp1420 = icmp slt i64 %sub.ptr.div1419, %763
  br i1 %cmp1420, label %cond.true1422, label %cond.false1423

cond.true1422:                                    ; preds = %do.body1415
  br i1 true, label %if.then1424, label %if.end1426

cond.false1423:                                   ; preds = %do.body1415
  br i1 false, label %if.then1424, label %if.end1426

if.then1424:                                      ; preds = %cond.false1423, %cond.true1422
  %764 = load %struct.sv**, %struct.sv*** %sp, align 8
  %765 = load %struct.sv**, %struct.sv*** %sp, align 8
  %766 = load i64, i64* %iters, align 8
  %call1425 = call %struct.sv** @Perl_stack_grow(%struct.sv** %764, %struct.sv** %765, i64 %766)
  store %struct.sv** %call1425, %struct.sv*** %sp, align 8
  %767 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1426

if.end1426:                                       ; preds = %if.then1424, %cond.false1423, %cond.true1422
  br label %do.end1427

do.end1427:                                       ; preds = %if.end1426
  %768 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr1428 = getelementptr inbounds %struct.sv*, %struct.sv** %768, i64 1
  %769 = bitcast %struct.sv** %add.ptr1428 to i8*
  %770 = load %struct.av*, %struct.av** %ary, align 8
  %sv_u1429 = getelementptr inbounds %struct.av, %struct.av* %770, i32 0, i32 3
  %svu_array1430 = bitcast %union.anon.0* %sv_u1429 to %struct.sv***
  %771 = load %struct.sv**, %struct.sv*** %svu_array1430, align 8
  %772 = bitcast %struct.sv** %771 to i8*
  %773 = load i64, i64* %iters, align 8
  %mul1431 = mul i64 %773, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %769, i8* align 1 %772, i64 %mul1431, i1 false)
  %774 = load i64, i64* %iters, align 8
  %775 = load %struct.sv**, %struct.sv*** %sp, align 8
  %add.ptr1432 = getelementptr inbounds %struct.sv*, %struct.sv** %775, i64 %774
  store %struct.sv** %add.ptr1432, %struct.sv*** %sp, align 8
  %776 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %776, %struct.sv*** @PL_stack_sp, align 8
  %777 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %777, i32 0, i32 0
  %778 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %778, %struct.op** %retval, align 8
  br label %return

if.end1433:                                       ; preds = %if.end1411
  br label %if.end1475

if.else1434:                                      ; preds = %if.then1403
  %779 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %779, %struct.sv*** @PL_stack_sp, align 8
  call void @Perl_push_scope()
  %780 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  %tobool1435 = icmp ne %struct.sv* %780, null
  br i1 %tobool1435, label %cond.true1436, label %cond.false1437

cond.true1436:                                    ; preds = %if.else1434
  %781 = load %struct.sv*, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  br label %cond.end1439

cond.false1437:                                   ; preds = %if.else1434
  %call1438 = call %struct.sv* @Perl_newSVpv_share(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i64 0, i64 0), i32 0)
  store %struct.sv* %call1438, %struct.sv** getelementptr inbounds ([35 x %struct.sv*], [35 x %struct.sv*]* @PL_sv_consts, i64 0, i64 9), align 8
  br label %cond.end1439

cond.end1439:                                     ; preds = %cond.false1437, %cond.true1436
  %cond1440 = phi %struct.sv* [ %781, %cond.true1436 ], [ %call1438, %cond.false1437 ]
  %call1441 = call i32 @Perl_call_sv(%struct.sv* %cond1440, i32 4102)
  call void @Perl_pop_scope()
  %782 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %782, %struct.sv*** %sp, align 8
  %783 = load i32, i32* %gimme, align 4
  %cmp1442 = icmp eq i32 %783, 3
  br i1 %cmp1442, label %if.then1444, label %if.end1474

if.then1444:                                      ; preds = %cond.end1439
  br label %do.body1446

do.body1446:                                      ; preds = %if.then1444
  %784 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %785 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast1447 = ptrtoint %struct.sv** %784 to i64
  %sub.ptr.rhs.cast1448 = ptrtoint %struct.sv** %785 to i64
  %sub.ptr.sub1449 = sub i64 %sub.ptr.lhs.cast1447, %sub.ptr.rhs.cast1448
  %sub.ptr.div1450 = sdiv exact i64 %sub.ptr.sub1449, 8
  %786 = load i64, i64* %iters, align 8
  %cmp1451 = icmp slt i64 %sub.ptr.div1450, %786
  br i1 %cmp1451, label %cond.true1453, label %cond.false1454

cond.true1453:                                    ; preds = %do.body1446
  br i1 true, label %if.then1455, label %if.end1457

cond.false1454:                                   ; preds = %do.body1446
  br i1 false, label %if.then1455, label %if.end1457

if.then1455:                                      ; preds = %cond.false1454, %cond.true1453
  %787 = load %struct.sv**, %struct.sv*** %sp, align 8
  %788 = load %struct.sv**, %struct.sv*** %sp, align 8
  %789 = load i64, i64* %iters, align 8
  %call1456 = call %struct.sv** @Perl_stack_grow(%struct.sv** %787, %struct.sv** %788, i64 %789)
  store %struct.sv** %call1456, %struct.sv*** %sp, align 8
  %790 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end1457

if.end1457:                                       ; preds = %if.then1455, %cond.false1454, %cond.true1453
  br label %do.end1458

do.end1458:                                       ; preds = %if.end1457
  store i64 0, i64* %i1445, align 8
  br label %for.cond1459

for.cond1459:                                     ; preds = %for.inc1470, %do.end1458
  %791 = load i64, i64* %i1445, align 8
  %792 = load i64, i64* %iters, align 8
  %cmp1460 = icmp slt i64 %791, %792
  br i1 %cmp1460, label %for.body1462, label %for.end1472

for.body1462:                                     ; preds = %for.cond1459
  %793 = load %struct.av*, %struct.av** %ary, align 8
  %794 = load i64, i64* %i1445, align 8
  %call1463 = call %struct.sv** @Perl_av_fetch(%struct.av* %793, i64 %794, i32 0)
  store %struct.sv** %call1463, %struct.sv*** %svp, align 8
  %795 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool1464 = icmp ne %struct.sv** %795, null
  br i1 %tobool1464, label %cond.true1465, label %cond.false1466

cond.true1465:                                    ; preds = %for.body1462
  %796 = load %struct.sv**, %struct.sv*** %svp, align 8
  %797 = load %struct.sv*, %struct.sv** %796, align 8
  br label %cond.end1467

cond.false1466:                                   ; preds = %for.body1462
  br label %cond.end1467

cond.end1467:                                     ; preds = %cond.false1466, %cond.true1465
  %cond1468 = phi %struct.sv* [ %797, %cond.true1465 ], [ @PL_sv_undef, %cond.false1466 ]
  %798 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1469 = getelementptr inbounds %struct.sv*, %struct.sv** %798, i32 1
  store %struct.sv** %incdec.ptr1469, %struct.sv*** %sp, align 8
  store %struct.sv* %cond1468, %struct.sv** %incdec.ptr1469, align 8
  br label %for.inc1470

for.inc1470:                                      ; preds = %cond.end1467
  %799 = load i64, i64* %i1445, align 8
  %inc1471 = add nsw i64 %799, 1
  store i64 %inc1471, i64* %i1445, align 8
  br label %for.cond1459

for.end1472:                                      ; preds = %for.cond1459
  %800 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %800, %struct.sv*** @PL_stack_sp, align 8
  %801 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next1473 = getelementptr inbounds %struct.op, %struct.op* %801, i32 0, i32 0
  %802 = load %struct.op*, %struct.op** %op_next1473, align 8
  store %struct.op* %802, %struct.op** %retval, align 8
  br label %return

if.end1474:                                       ; preds = %cond.end1439
  br label %if.end1475

if.end1475:                                       ; preds = %if.end1474, %if.end1433
  br label %if.end1482

if.else1476:                                      ; preds = %do.end1401
  %803 = load i32, i32* %gimme, align 4
  %cmp1477 = icmp eq i32 %803, 3
  br i1 %cmp1477, label %if.then1479, label %if.end1481

if.then1479:                                      ; preds = %if.else1476
  %804 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %804, %struct.sv*** @PL_stack_sp, align 8
  %805 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next1480 = getelementptr inbounds %struct.op, %struct.op* %805, i32 0, i32 0
  %806 = load %struct.op*, %struct.op** %op_next1480, align 8
  store %struct.op* %806, %struct.op** %retval, align 8
  br label %return

if.end1481:                                       ; preds = %if.else1476
  br label %if.end1482

if.end1482:                                       ; preds = %if.end1481, %if.end1475
  %807 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %808 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ1483 = getelementptr inbounds %struct.op, %struct.op* %808, i32 0, i32 3
  %809 = load i64, i64* %op_targ1483, align 8
  %arrayidx1484 = getelementptr inbounds %struct.sv*, %struct.sv** %807, i64 %809
  %810 = load %struct.sv*, %struct.sv** %arrayidx1484, align 8
  store %struct.sv* %810, %struct.sv** %targ, align 8
  br label %do.body1485

do.body1485:                                      ; preds = %if.end1482
  %811 = load %struct.sv*, %struct.sv** %targ, align 8
  %812 = load i64, i64* %iters, align 8
  call void @Perl_sv_setiv(%struct.sv* %811, i64 %812)
  br label %do.body1486

do.body1486:                                      ; preds = %do.body1485
  br label %do.body1487

do.body1487:                                      ; preds = %do.body1486
  %813 = load %struct.sv*, %struct.sv** %targ, align 8
  %sv_flags1488 = getelementptr inbounds %struct.sv, %struct.sv* %813, i32 0, i32 2
  %814 = load i32, i32* %sv_flags1488, align 4
  %and1489 = and i32 %814, 4194304
  %tobool1490 = icmp ne i32 %and1489, 0
  br i1 %tobool1490, label %cond.true1491, label %cond.false1492

cond.true1491:                                    ; preds = %do.body1487
  br i1 true, label %if.then1493, label %if.end1495

cond.false1492:                                   ; preds = %do.body1487
  br i1 false, label %if.then1493, label %if.end1495

if.then1493:                                      ; preds = %cond.false1492, %cond.true1491
  %815 = load %struct.sv*, %struct.sv** %targ, align 8
  %call1494 = call i32 @Perl_mg_set(%struct.sv* %815)
  br label %if.end1495

if.end1495:                                       ; preds = %if.then1493, %cond.false1492, %cond.true1491
  br label %do.end1496

do.end1496:                                       ; preds = %if.end1495
  %816 = load %struct.sv*, %struct.sv** %targ, align 8
  %817 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1497 = getelementptr inbounds %struct.sv*, %struct.sv** %817, i32 1
  store %struct.sv** %incdec.ptr1497, %struct.sv*** %sp, align 8
  store %struct.sv* %816, %struct.sv** %incdec.ptr1497, align 8
  br label %do.end1498

do.end1498:                                       ; preds = %do.end1496
  br label %do.end1499

do.end1499:                                       ; preds = %do.end1498
  %818 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %818, %struct.sv*** @PL_stack_sp, align 8
  %819 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next1500 = getelementptr inbounds %struct.op, %struct.op* %819, i32 0, i32 0
  %820 = load %struct.op*, %struct.op** %op_next1500, align 8
  store %struct.op* %820, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %do.end1499, %if.then1479, %for.end1472, %do.end1427, %if.then1322, %if.then
  %821 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %821
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_regex_charset(i32 %flags) #0 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 896
  %shr = lshr i32 %and, 7
  ret i32 %shr
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.regexp* @S_ReANY(%struct.p5rx* %re) #0 {
entry:
  %re.addr = alloca %struct.p5rx*, align 8
  store %struct.p5rx* %re, %struct.p5rx** %re.addr, align 8
  %0 = load %struct.p5rx*, %struct.p5rx** %re.addr, align 8
  %sv_u = getelementptr inbounds %struct.p5rx, %struct.p5rx* %0, i32 0, i32 3
  %svu_rx = bitcast %union.anon.7* %sv_u to %struct.regexp**
  %1 = load %struct.regexp*, %struct.regexp** %svu_rx, align 8
  ret %struct.regexp* %1
}

declare dso_local void @Perl_av_clear(%struct.av*) #1

declare dso_local void @Perl_save_pushptrptr(i8*, i8*, i32) #1

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #6

declare dso_local i8* @Perl_utf8_hop(i8*, i32) #1

declare dso_local void @Perl_leave_scope(i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_once() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 3
  %3 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %3
  %4 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %4, %struct.sv** %sv, align 8
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %5, i32 0, i32 2
  %6 = load i32, i32* %sv_flags, align 4
  %and = and i32 %6, 262144
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load %struct.sv*, %struct.sv** %sv, align 8
  %8 = bitcast %struct.sv* %7 to i8*
  %9 = bitcast i8* %8 to %struct.sv*
  %call = call i32 @S_SvPADSTALE_off(%struct.sv* %9)
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %10, %struct.sv*** @PL_stack_sp, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %12 = bitcast %struct.op* %11 to %struct.logop*
  %op_other = getelementptr inbounds %struct.logop, %struct.logop* %12, i32 0, i32 8
  %13 = load %struct.op*, %struct.op** %op_other, align 8
  store %struct.op* %13, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %entry
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %14, %struct.sv*** @PL_stack_sp, align 8
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %16 = bitcast %struct.op* %15 to %struct.logop*
  %op_next = getelementptr inbounds %struct.logop, %struct.logop* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %17, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %18 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lock() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %retsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.sv*, %struct.sv** %sv, align 8
  store %struct.sv* %3, %struct.sv** %retsv, align 8
  %4 = load void (%struct.sv*)*, void (%struct.sv*)** @PL_lockhook, align 8
  %5 = load %struct.sv*, %struct.sv** %sv, align 8
  call void %4(%struct.sv* %5)
  %6 = load %struct.sv*, %struct.sv** %retsv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %6, i32 0, i32 2
  %7 = load i32, i32* %sv_flags, align 4
  %and = and i32 %7, 255
  %cmp = icmp eq i32 %and, 11
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %8 = load %struct.sv*, %struct.sv** %retsv, align 8
  %sv_flags1 = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 2
  %9 = load i32, i32* %sv_flags1, align 4
  %and2 = and i32 %9, 255
  %cmp3 = icmp eq i32 %and2, 12
  br i1 %cmp3, label %if.then, label %lor.lhs.false4

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %10 = load %struct.sv*, %struct.sv** %retsv, align 8
  %sv_flags5 = getelementptr inbounds %struct.sv, %struct.sv* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags5, align 4
  %and6 = and i32 %11, 255
  %cmp7 = icmp eq i32 %and6, 13
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  %12 = load %struct.sv*, %struct.sv** %retsv, align 8
  %call = call %struct.sv* @S_refto(%struct.sv* %12)
  store %struct.sv* %call, %struct.sv** %retsv, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false4
  %13 = load %struct.sv*, %struct.sv** %retsv, align 8
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %13, %struct.sv** %14, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_unimplemented_op() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %op_type = alloca i32, align 4
  %name = alloca i8*, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type1 = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 4
  %bf.load = load i16, i16* %op_type1, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  store i32 %bf.cast, i32* %op_type, align 4
  %1 = load i32, i32* %op_type, align 4
  %cmp = icmp uge i32 %1, 396
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %2 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_type2 = getelementptr inbounds %struct.op, %struct.op* %2, i32 0, i32 4
  %bf.load3 = load i16, i16* %op_type2, align 8
  %bf.clear4 = and i16 %bf.load3, 511
  %bf.cast5 = zext i16 %bf.clear4 to i32
  %idxprom = zext i32 %bf.cast5 to i64
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom
  %3 = load i8*, i8** %arrayidx, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i64 0, i64 0), %cond.true ], [ %3, %cond.false ]
  store i8* %cond, i8** %name, align 8
  %4 = load i32, i32* %op_type, align 4
  %cmp6 = icmp uge i32 %4, 251
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %5 = load i32, i32* %op_type, align 4
  %cmp7 = icmp ule i32 %5, 263
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %name, align 8
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_sock_func, i64 0, i64 0), i8* %6)
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %land.lhs.true, %cond.end
  %7 = load i8*, i8** %name, align 8
  %8 = load i32, i32* %op_type, align 4
  %call8 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.60, i64 0, i64 0), i8* %7, i32 %8)
  store %struct.op* %call8, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_coreargs() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %opnum = alloca i32, align 4
  %defgv = alloca i32, align 4
  %whicharg = alloca i32, align 4
  %at_ = alloca %struct.av*, align 8
  %svp = alloca %struct.sv**, align 8
  %minargs = alloca i32, align 4
  %maxargs = alloca i32, align 4
  %numargs = alloca i32, align 4
  %oa = alloca i32, align 4
  %seen_question = alloca i8, align 1
  %err = alloca i8*, align 8
  %pushmark = alloca i8, align 1
  %coerce = alloca %union.XOPRETANY, align 8
  %constr = alloca i8, align 1
  %wantscalar = alloca i8, align 1
  %cx = alloca %struct.context*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %2 = bitcast %struct.op* %1 to %struct.svop*
  %op_sv = getelementptr inbounds %struct.svop, %struct.svop* %2, i32 0, i32 7
  %3 = load %struct.sv*, %struct.sv** %op_sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %3, i32 0, i32 2
  %4 = load i32, i32* %sv_flags, align 4
  %and = and i32 %4, 256
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false7

cond.true:                                        ; preds = %entry
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %6 = bitcast %struct.op* %5 to %struct.svop*
  %op_sv1 = getelementptr inbounds %struct.svop, %struct.svop* %6, i32 0, i32 7
  %7 = load %struct.sv*, %struct.sv** %op_sv1, align 8
  %sv_flags2 = getelementptr inbounds %struct.sv, %struct.sv* %7, i32 0, i32 2
  %8 = load i32, i32* %sv_flags2, align 4
  %and3 = and i32 %8, -2145386240
  %cmp = icmp eq i32 %and3, -2147483392
  br i1 %cmp, label %cond.true4, label %cond.false

cond.true4:                                       ; preds = %cond.true
  %9 = load %struct.op*, %struct.op** @PL_op, align 8
  %10 = bitcast %struct.op* %9 to %struct.svop*
  %op_sv5 = getelementptr inbounds %struct.svop, %struct.svop* %10, i32 0, i32 7
  %11 = load %struct.sv*, %struct.sv** %op_sv5, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %11, i32 0, i32 0
  %12 = load i8*, i8** %sv_any, align 8
  %13 = bitcast i8* %12 to %struct.xpvuv*
  %xuv_u = getelementptr inbounds %struct.xpvuv, %struct.xpvuv* %13, i32 0, i32 4
  %xivu_uv = bitcast %union._xivu* %xuv_u to i64*
  %14 = load i64, i64* %xivu_uv, align 8
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %15 = load %struct.op*, %struct.op** @PL_op, align 8
  %16 = bitcast %struct.op* %15 to %struct.svop*
  %op_sv6 = getelementptr inbounds %struct.svop, %struct.svop* %16, i32 0, i32 7
  %17 = load %struct.sv*, %struct.sv** %op_sv6, align 8
  %call = call i64 @Perl_sv_2uv_flags(%struct.sv* %17, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true4
  %cond = phi i64 [ %14, %cond.true4 ], [ %call, %cond.false ]
  %conv = trunc i64 %cond to i32
  br label %cond.end8

cond.false7:                                      ; preds = %entry
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.end
  %cond9 = phi i32 [ %conv, %cond.end ], [ 0, %cond.false7 ]
  store i32 %cond9, i32* %opnum, align 4
  %18 = load i32, i32* %opnum, align 4
  %idxprom = sext i32 %18 to i64
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom
  %19 = load i32, i32* %arrayidx, align 4
  %and10 = and i32 %19, 128
  %tobool11 = icmp ne i32 %and10, 0
  br i1 %tobool11, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %cond.end8
  %20 = load i32, i32* %opnum, align 4
  %cmp12 = icmp eq i32 %20, 25
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %cond.end8
  %21 = phi i1 [ true, %cond.end8 ], [ %cmp12, %lor.rhs ]
  %lor.ext = zext i1 %21 to i32
  store i32 %lor.ext, i32* %defgv, align 4
  store i32 0, i32* %whicharg, align 4
  %22 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %22, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %23 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %23, i64 0
  %gp_av = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 6
  %24 = load %struct.av*, %struct.av** %gp_av, align 8
  store %struct.av* %24, %struct.av** %at_, align 8
  %25 = load %struct.av*, %struct.av** %at_, align 8
  %tobool14 = icmp ne %struct.av* %25, null
  br i1 %tobool14, label %cond.true15, label %cond.false17

cond.true15:                                      ; preds = %lor.end
  %26 = load %struct.av*, %struct.av** %at_, align 8
  %sv_u16 = getelementptr inbounds %struct.av, %struct.av* %26, i32 0, i32 3
  %svu_array = bitcast %union.anon.0* %sv_u16 to %struct.sv***
  %27 = load %struct.sv**, %struct.sv*** %svu_array, align 8
  br label %cond.end18

cond.false17:                                     ; preds = %lor.end
  br label %cond.end18

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.sv** [ %27, %cond.true15 ], [ null, %cond.false17 ]
  store %struct.sv** %cond19, %struct.sv*** %svp, align 8
  store i32 0, i32* %minargs, align 4
  store i32 0, i32* %maxargs, align 4
  %28 = load %struct.av*, %struct.av** %at_, align 8
  %tobool20 = icmp ne %struct.av* %28, null
  br i1 %tobool20, label %cond.true21, label %cond.false23

cond.true21:                                      ; preds = %cond.end18
  %29 = load %struct.av*, %struct.av** %at_, align 8
  %sv_any22 = getelementptr inbounds %struct.av, %struct.av* %29, i32 0, i32 0
  %30 = load %struct.xpvav*, %struct.xpvav** %sv_any22, align 8
  %xav_fill = getelementptr inbounds %struct.xpvav, %struct.xpvav* %30, i32 0, i32 2
  %31 = load i64, i64* %xav_fill, align 8
  %add = add nsw i64 %31, 1
  br label %cond.end24

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi i64 [ %add, %cond.true21 ], [ 0, %cond.false23 ]
  %conv26 = trunc i64 %cond25 to i32
  store i32 %conv26, i32* %numargs, align 4
  %32 = load i32, i32* %opnum, align 4
  %tobool27 = icmp ne i32 %32, 0
  br i1 %tobool27, label %cond.true28, label %cond.false31

cond.true28:                                      ; preds = %cond.end24
  %33 = load i32, i32* %opnum, align 4
  %idxprom29 = sext i32 %33 to i64
  %arrayidx30 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom29
  %34 = load i32, i32* %arrayidx30, align 4
  %shr = lshr i32 %34, 12
  br label %cond.end32

cond.false31:                                     ; preds = %cond.end24
  br label %cond.end32

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi i32 [ %shr, %cond.true28 ], [ 0, %cond.false31 ]
  store i32 %cond33, i32* %oa, align 4
  store i8 0, i8* %seen_question, align 1
  store i8* null, i8** %err, align 8
  %35 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %35, i32 0, i32 6
  %36 = load i8, i8* %op_private, align 1
  %conv34 = zext i8 %36 to i32
  %and35 = and i32 %conv34, 128
  %tobool36 = icmp ne i32 %and35, 0
  %frombool = zext i1 %tobool36 to i8
  store i8 %frombool, i8* %pushmark, align 1
  br label %while.cond

while.cond:                                       ; preds = %if.end48, %cond.end32
  %37 = load i32, i32* %oa, align 4
  %tobool37 = icmp ne i32 %37, 0
  br i1 %tobool37, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %38 = load i32, i32* %oa, align 4
  %and38 = and i32 %38, 7
  %cmp39 = icmp eq i32 %and38, 2
  br i1 %cmp39, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  store i32 2147483647, i32* %maxargs, align 4
  br label %while.end

if.end:                                           ; preds = %while.body
  %39 = load i32, i32* %maxargs, align 4
  %inc = add nsw i32 %39, 1
  store i32 %inc, i32* %maxargs, align 4
  %40 = load i32, i32* %oa, align 4
  %and41 = and i32 %40, 8
  %tobool42 = icmp ne i32 %and41, 0
  br i1 %tobool42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.end
  store i8 1, i8* %seen_question, align 1
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %if.end
  %41 = load i8, i8* %seen_question, align 1
  %tobool45 = trunc i8 %41 to i1
  br i1 %tobool45, label %if.end48, label %if.then46

if.then46:                                        ; preds = %if.end44
  %42 = load i32, i32* %minargs, align 4
  %inc47 = add nsw i32 %42, 1
  store i32 %inc47, i32* %minargs, align 4
  br label %if.end48

if.end48:                                         ; preds = %if.then46, %if.end44
  %43 = load i32, i32* %oa, align 4
  %shr49 = ashr i32 %43, 4
  store i32 %shr49, i32* %oa, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then, %while.cond
  %44 = load i32, i32* %numargs, align 4
  %45 = load i32, i32* %minargs, align 4
  %cmp50 = icmp slt i32 %44, %45
  br i1 %cmp50, label %if.then52, label %if.else

if.then52:                                        ; preds = %while.end
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.61, i64 0, i64 0), i8** %err, align 8
  br label %if.end57

if.else:                                          ; preds = %while.end
  %46 = load i32, i32* %numargs, align 4
  %47 = load i32, i32* %maxargs, align 4
  %cmp53 = icmp sgt i32 %46, %47
  br i1 %cmp53, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i64 0, i64 0), i8** %err, align 8
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then52
  %48 = load i8*, i8** %err, align 8
  %tobool58 = icmp ne i8* %48, null
  br i1 %tobool58, label %if.then59, label %if.end81

if.then59:                                        ; preds = %if.end57
  %49 = load i8*, i8** %err, align 8
  %50 = load i32, i32* %opnum, align 4
  %tobool60 = icmp ne i32 %50, 0
  br i1 %tobool60, label %cond.true61, label %cond.false64

cond.true61:                                      ; preds = %if.then59
  %51 = load i32, i32* %opnum, align 4
  %idxprom62 = sext i32 %51 to i64
  %arrayidx63 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom62
  %52 = load i8*, i8** %arrayidx63, align 8
  br label %cond.end79

cond.false64:                                     ; preds = %if.then59
  %53 = load %struct.op*, %struct.op** @PL_op, align 8
  %54 = bitcast %struct.op* %53 to %struct.svop*
  %op_sv65 = getelementptr inbounds %struct.svop, %struct.svop* %54, i32 0, i32 7
  %55 = load %struct.sv*, %struct.sv** %op_sv65, align 8
  %sv_flags66 = getelementptr inbounds %struct.sv, %struct.sv* %55, i32 0, i32 2
  %56 = load i32, i32* %sv_flags66, align 4
  %and67 = and i32 %56, 2098176
  %cmp68 = icmp eq i32 %and67, 1024
  br i1 %cmp68, label %cond.true70, label %cond.false74

cond.true70:                                      ; preds = %cond.false64
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %58 = bitcast %struct.op* %57 to %struct.svop*
  %op_sv71 = getelementptr inbounds %struct.svop, %struct.svop* %58, i32 0, i32 7
  %59 = load %struct.sv*, %struct.sv** %op_sv71, align 8
  %sv_u72 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 3
  %svu_pv = bitcast %union.anon* %sv_u72 to i8**
  %60 = load i8*, i8** %svu_pv, align 8
  %add.ptr73 = getelementptr inbounds i8, i8* %60, i64 0
  br label %cond.end77

cond.false74:                                     ; preds = %cond.false64
  %61 = load %struct.op*, %struct.op** @PL_op, align 8
  %62 = bitcast %struct.op* %61 to %struct.svop*
  %op_sv75 = getelementptr inbounds %struct.svop, %struct.svop* %62, i32 0, i32 7
  %63 = load %struct.sv*, %struct.sv** %op_sv75, align 8
  %call76 = call i8* @Perl_sv_2pv_flags(%struct.sv* %63, i64* null, i32 34)
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false74, %cond.true70
  %cond78 = phi i8* [ %add.ptr73, %cond.true70 ], [ %call76, %cond.false74 ]
  br label %cond.end79

cond.end79:                                       ; preds = %cond.end77, %cond.true61
  %cond80 = phi i8* [ %52, %cond.true61 ], [ %cond78, %cond.end77 ]
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.63, i64 0, i64 0), i8* %49, i8* %cond80)
  br label %if.end81

if.end81:                                         ; preds = %cond.end79, %if.end57
  %64 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %65 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %65, i32 0, i32 1
  %66 = load %struct.context*, %struct.context** %si_cxstack, align 8
  %67 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %67, i32 0, i32 4
  %68 = load i32, i32* %si_cxix, align 8
  %idxprom82 = sext i32 %68 to i64
  %arrayidx83 = getelementptr inbounds %struct.context, %struct.context* %66, i64 %idxprom82
  %cx_u = getelementptr inbounds %struct.context, %struct.context* %arrayidx83, i32 0, i32 0
  %cx_blk = bitcast %union.anon.27* %cx_u to %struct.block*
  %blku_oldsp = getelementptr inbounds %struct.block, %struct.block* %cx_blk, i32 0, i32 3
  %69 = load i32, i32* %blku_oldsp, align 4
  %idx.ext = sext i32 %69 to i64
  %add.ptr84 = getelementptr inbounds %struct.sv*, %struct.sv** %64, i64 %idx.ext
  store %struct.sv** %add.ptr84, %struct.sv*** %sp, align 8
  %70 = load i32, i32* %maxargs, align 4
  %tobool85 = icmp ne i32 %70, 0
  br i1 %tobool85, label %if.end87, label %if.then86

if.then86:                                        ; preds = %if.end81
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %71, %struct.sv*** @PL_stack_sp, align 8
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 0
  %73 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %73, %struct.op** %retval, align 8
  br label %return

if.end87:                                         ; preds = %if.end81
  %74 = load i8, i8* %pushmark, align 1
  %tobool88 = trunc i8 %74 to i1
  br i1 %tobool88, label %if.then89, label %if.end91

if.then89:                                        ; preds = %if.end87
  %75 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %75, %struct.sv*** @PL_stack_sp, align 8
  %call90 = call %struct.op* @Perl_pp_pushmark()
  br label %if.end91

if.end91:                                         ; preds = %if.then89, %if.end87
  br label %do.body

do.body:                                          ; preds = %if.end91
  %76 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %77 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %76 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %77 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %78 = load i32, i32* %maxargs, align 4
  %cmp92 = icmp eq i32 %78, 2147483647
  br i1 %cmp92, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %do.body
  %79 = load i32, i32* %numargs, align 4
  br label %cond.end96

cond.false95:                                     ; preds = %do.body
  %80 = load i32, i32* %maxargs, align 4
  br label %cond.end96

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ %79, %cond.true94 ], [ %80, %cond.false95 ]
  %conv98 = sext i32 %cond97 to i64
  %cmp99 = icmp slt i64 %sub.ptr.div, %conv98
  br i1 %cmp99, label %cond.true101, label %cond.false102

cond.true101:                                     ; preds = %cond.end96
  br i1 true, label %if.then103, label %if.end112

cond.false102:                                    ; preds = %cond.end96
  br i1 false, label %if.then103, label %if.end112

if.then103:                                       ; preds = %cond.false102, %cond.true101
  %81 = load %struct.sv**, %struct.sv*** %sp, align 8
  %82 = load %struct.sv**, %struct.sv*** %sp, align 8
  %83 = load i32, i32* %maxargs, align 4
  %cmp104 = icmp eq i32 %83, 2147483647
  br i1 %cmp104, label %cond.true106, label %cond.false107

cond.true106:                                     ; preds = %if.then103
  %84 = load i32, i32* %numargs, align 4
  br label %cond.end108

cond.false107:                                    ; preds = %if.then103
  %85 = load i32, i32* %maxargs, align 4
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond109 = phi i32 [ %84, %cond.true106 ], [ %85, %cond.false107 ]
  %conv110 = sext i32 %cond109 to i64
  %call111 = call %struct.sv** @Perl_stack_grow(%struct.sv** %81, %struct.sv** %82, i64 %conv110)
  store %struct.sv** %call111, %struct.sv*** %sp, align 8
  %86 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end112

if.end112:                                        ; preds = %cond.end108, %cond.false102, %cond.true101
  br label %do.end

do.end:                                           ; preds = %if.end112
  %87 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %87, %struct.sv*** @PL_stack_sp, align 8
  %88 = load i32, i32* %opnum, align 4
  %idxprom113 = sext i32 %88 to i64
  %arrayidx114 = getelementptr inbounds [0 x i32], [0 x i32]* @PL_opargs, i64 0, i64 %idxprom113
  %89 = load i32, i32* %arrayidx114, align 4
  %shr115 = lshr i32 %89, 12
  store i32 %shr115, i32* %oa, align 4
  br label %for.cond

for.cond:                                         ; preds = %land.end374, %do.end
  %90 = load i32, i32* %oa, align 4
  %tobool116 = icmp ne i32 %90, 0
  br i1 %tobool116, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %91 = load i32, i32* %numargs, align 4
  %tobool117 = icmp ne i32 %91, 0
  br i1 %tobool117, label %lor.end120, label %lor.rhs118

lor.rhs118:                                       ; preds = %land.rhs
  %92 = load i8, i8* %pushmark, align 1
  %tobool119 = trunc i8 %92 to i1
  %lnot = xor i1 %tobool119, true
  br label %lor.end120

lor.end120:                                       ; preds = %lor.rhs118, %land.rhs
  %93 = phi i1 [ true, %land.rhs ], [ %lnot, %lor.rhs118 ]
  br label %land.end

land.end:                                         ; preds = %lor.end120, %for.cond
  %94 = phi i1 [ false, %for.cond ], [ %93, %lor.end120 ]
  br i1 %94, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %95 = load i32, i32* %whicharg, align 4
  %inc122 = add nsw i32 %95, 1
  store i32 %inc122, i32* %whicharg, align 4
  %96 = load i32, i32* %oa, align 4
  %and123 = and i32 %96, 7
  switch i32 %and123, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb154
    i32 4, label %sw.bb169
    i32 6, label %sw.bb204
    i32 7, label %sw.bb266
  ]

sw.bb:                                            ; preds = %for.body
  br label %try_defsv

try_defsv:                                        ; preds = %if.then268, %sw.bb
  %97 = load i32, i32* %numargs, align 4
  %tobool124 = icmp ne i32 %97, 0
  br i1 %tobool124, label %if.else139, label %land.lhs.true

land.lhs.true:                                    ; preds = %try_defsv
  %98 = load i32, i32* %defgv, align 4
  %tobool125 = icmp ne i32 %98, 0
  br i1 %tobool125, label %land.lhs.true126, label %if.else139

land.lhs.true126:                                 ; preds = %land.lhs.true
  %99 = load i32, i32* %whicharg, align 4
  %100 = load i32, i32* %minargs, align 4
  %add127 = add nsw i32 %100, 1
  %cmp128 = icmp eq i32 %99, %add127
  br i1 %cmp128, label %if.then130, label %if.else139

if.then130:                                       ; preds = %land.lhs.true126
  %call131 = call %struct.cv* @Perl_find_runcv_where(i8 zeroext 2, i64 1, i32* null)
  %101 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack132 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %101, i32 0, i32 1
  %102 = load %struct.context*, %struct.context** %si_cxstack132, align 8
  %103 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix133 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %103, i32 0, i32 4
  %104 = load i32, i32* %si_cxix133, align 8
  %idxprom134 = sext i32 %104 to i64
  %arrayidx135 = getelementptr inbounds %struct.context, %struct.context* %102, i64 %idxprom134
  %cx_u136 = getelementptr inbounds %struct.context, %struct.context* %arrayidx135, i32 0, i32 0
  %cx_blk137 = bitcast %union.anon.27* %cx_u136 to %struct.block*
  %blku_oldcop = getelementptr inbounds %struct.block, %struct.block* %cx_blk137, i32 0, i32 4
  %105 = load %struct.cop*, %struct.cop** %blku_oldcop, align 8
  %cop_seq = getelementptr inbounds %struct.cop, %struct.cop* %105, i32 0, i32 11
  %106 = load i32, i32* %cop_seq, align 4
  %call138 = call %struct.sv* @Perl_find_rundefsv2(%struct.cv* %call131, i32 %106)
  %107 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %107, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %call138, %struct.sv** %incdec.ptr, align 8
  br label %if.end153

if.else139:                                       ; preds = %land.lhs.true126, %land.lhs.true, %try_defsv
  %108 = load i32, i32* %numargs, align 4
  %tobool140 = icmp ne i32 %108, 0
  br i1 %tobool140, label %cond.true141, label %cond.false149

cond.true141:                                     ; preds = %if.else139
  %109 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool142 = icmp ne %struct.sv** %109, null
  br i1 %tobool142, label %land.lhs.true143, label %cond.false146

land.lhs.true143:                                 ; preds = %cond.true141
  %110 = load %struct.sv**, %struct.sv*** %svp, align 8
  %111 = load %struct.sv*, %struct.sv** %110, align 8
  %tobool144 = icmp ne %struct.sv* %111, null
  br i1 %tobool144, label %cond.true145, label %cond.false146

cond.true145:                                     ; preds = %land.lhs.true143
  %112 = load %struct.sv**, %struct.sv*** %svp, align 8
  %113 = load %struct.sv*, %struct.sv** %112, align 8
  br label %cond.end147

cond.false146:                                    ; preds = %land.lhs.true143, %cond.true141
  br label %cond.end147

cond.end147:                                      ; preds = %cond.false146, %cond.true145
  %cond148 = phi %struct.sv* [ %113, %cond.true145 ], [ @PL_sv_undef, %cond.false146 ]
  br label %cond.end150

cond.false149:                                    ; preds = %if.else139
  br label %cond.end150

cond.end150:                                      ; preds = %cond.false149, %cond.end147
  %cond151 = phi %struct.sv* [ %cond148, %cond.end147 ], [ null, %cond.false149 ]
  %114 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr152 = getelementptr inbounds %struct.sv*, %struct.sv** %114, i32 1
  store %struct.sv** %incdec.ptr152, %struct.sv*** %sp, align 8
  store %struct.sv* %cond151, %struct.sv** %incdec.ptr152, align 8
  br label %if.end153

if.end153:                                        ; preds = %cond.end150, %if.then130
  br label %sw.epilog

sw.bb154:                                         ; preds = %for.body
  br label %while.cond155

while.cond155:                                    ; preds = %cond.end163, %sw.bb154
  %115 = load i32, i32* %numargs, align 4
  %dec = add nsw i32 %115, -1
  store i32 %dec, i32* %numargs, align 4
  %tobool156 = icmp ne i32 %115, 0
  br i1 %tobool156, label %while.body157, label %while.end167

while.body157:                                    ; preds = %while.cond155
  %116 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool158 = icmp ne %struct.sv** %116, null
  br i1 %tobool158, label %land.lhs.true159, label %cond.false162

land.lhs.true159:                                 ; preds = %while.body157
  %117 = load %struct.sv**, %struct.sv*** %svp, align 8
  %118 = load %struct.sv*, %struct.sv** %117, align 8
  %tobool160 = icmp ne %struct.sv* %118, null
  br i1 %tobool160, label %cond.true161, label %cond.false162

cond.true161:                                     ; preds = %land.lhs.true159
  %119 = load %struct.sv**, %struct.sv*** %svp, align 8
  %120 = load %struct.sv*, %struct.sv** %119, align 8
  br label %cond.end163

cond.false162:                                    ; preds = %land.lhs.true159, %while.body157
  br label %cond.end163

cond.end163:                                      ; preds = %cond.false162, %cond.true161
  %cond164 = phi %struct.sv* [ %120, %cond.true161 ], [ @PL_sv_undef, %cond.false162 ]
  %121 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr165 = getelementptr inbounds %struct.sv*, %struct.sv** %121, i32 1
  store %struct.sv** %incdec.ptr165, %struct.sv*** %sp, align 8
  store %struct.sv* %cond164, %struct.sv** %incdec.ptr165, align 8
  %122 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr166 = getelementptr inbounds %struct.sv*, %struct.sv** %122, i32 1
  store %struct.sv** %incdec.ptr166, %struct.sv*** %svp, align 8
  br label %while.cond155

while.end167:                                     ; preds = %while.cond155
  %123 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %123, %struct.sv*** @PL_stack_sp, align 8
  %124 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next168 = getelementptr inbounds %struct.op, %struct.op* %124, i32 0, i32 0
  %125 = load %struct.op*, %struct.op** %op_next168, align 8
  store %struct.op* %125, %struct.op** %retval, align 8
  br label %return

sw.bb169:                                         ; preds = %for.body
  %126 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool170 = icmp ne %struct.sv** %126, null
  br i1 %tobool170, label %lor.lhs.false, label %if.then182

lor.lhs.false:                                    ; preds = %sw.bb169
  %127 = load %struct.sv**, %struct.sv*** %svp, align 8
  %128 = load %struct.sv*, %struct.sv** %127, align 8
  %tobool171 = icmp ne %struct.sv* %128, null
  br i1 %tobool171, label %lor.lhs.false172, label %if.then182

lor.lhs.false172:                                 ; preds = %lor.lhs.false
  %129 = load %struct.sv**, %struct.sv*** %svp, align 8
  %130 = load %struct.sv*, %struct.sv** %129, align 8
  %sv_flags173 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 2
  %131 = load i32, i32* %sv_flags173, align 4
  %and174 = and i32 %131, 2048
  %tobool175 = icmp ne i32 %and174, 0
  br i1 %tobool175, label %lor.lhs.false176, label %if.then182

lor.lhs.false176:                                 ; preds = %lor.lhs.false172
  %132 = load %struct.sv**, %struct.sv*** %svp, align 8
  %133 = load %struct.sv*, %struct.sv** %132, align 8
  %sv_u177 = getelementptr inbounds %struct.sv, %struct.sv* %133, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u177 to %struct.sv**
  %134 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags178 = getelementptr inbounds %struct.sv, %struct.sv* %134, i32 0, i32 2
  %135 = load i32, i32* %sv_flags178, align 4
  %and179 = and i32 %135, 255
  %cmp180 = icmp ne i32 %and179, 12
  br i1 %cmp180, label %if.then182, label %if.end200

if.then182:                                       ; preds = %lor.lhs.false176, %lor.lhs.false172, %lor.lhs.false, %sw.bb169
  %136 = load i32, i32* %whicharg, align 4
  %137 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next183 = getelementptr inbounds %struct.op, %struct.op* %137, i32 0, i32 0
  %138 = load %struct.op*, %struct.op** %op_next183, align 8
  %op_type = getelementptr inbounds %struct.op, %struct.op* %138, i32 0, i32 4
  %bf.load = load i16, i16* %op_type, align 8
  %bf.clear = and i16 %bf.load, 511
  %bf.cast = zext i16 %bf.clear to i32
  %cmp184 = icmp eq i32 %bf.cast, 380
  br i1 %cmp184, label %cond.true186, label %cond.false189

cond.true186:                                     ; preds = %if.then182
  %139 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next187 = getelementptr inbounds %struct.op, %struct.op* %139, i32 0, i32 0
  %140 = load %struct.op*, %struct.op** %op_next187, align 8
  %call188 = call i8* @Perl_custom_op_get_field(%struct.op* %140, i32 2)
  %coerce.dive = getelementptr inbounds %union.XOPRETANY, %union.XOPRETANY* %coerce, i32 0, i32 0
  store i8* %call188, i8** %coerce.dive, align 8
  %xop_desc = bitcast %union.XOPRETANY* %coerce to i8**
  %141 = load i8*, i8** %xop_desc, align 8
  br label %cond.end197

cond.false189:                                    ; preds = %if.then182
  %142 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next190 = getelementptr inbounds %struct.op, %struct.op* %142, i32 0, i32 0
  %143 = load %struct.op*, %struct.op** %op_next190, align 8
  %op_type191 = getelementptr inbounds %struct.op, %struct.op* %143, i32 0, i32 4
  %bf.load192 = load i16, i16* %op_type191, align 8
  %bf.clear193 = and i16 %bf.load192, 511
  %bf.cast194 = zext i16 %bf.clear193 to i32
  %idxprom195 = zext i32 %bf.cast194 to i64
  %arrayidx196 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_desc, i64 0, i64 %idxprom195
  %144 = load i8*, i8** %arrayidx196, align 8
  br label %cond.end197

cond.end197:                                      ; preds = %cond.false189, %cond.true186
  %cond198 = phi i8* [ %141, %cond.true186 ], [ %144, %cond.false189 ]
  %call199 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.64, i64 0, i64 0), i32 %136, i8* %cond198)
  store %struct.op* %call199, %struct.op** %retval, align 8
  br label %return

if.end200:                                        ; preds = %lor.lhs.false176
  %145 = load %struct.sv**, %struct.sv*** %svp, align 8
  %146 = load %struct.sv*, %struct.sv** %145, align 8
  %sv_u201 = getelementptr inbounds %struct.sv, %struct.sv* %146, i32 0, i32 3
  %svu_rv202 = bitcast %union.anon* %sv_u201 to %struct.sv**
  %147 = load %struct.sv*, %struct.sv** %svu_rv202, align 8
  %148 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr203 = getelementptr inbounds %struct.sv*, %struct.sv** %148, i32 1
  store %struct.sv** %incdec.ptr203, %struct.sv*** %sp, align 8
  store %struct.sv* %147, %struct.sv** %incdec.ptr203, align 8
  br label %sw.epilog

sw.bb204:                                         ; preds = %for.body
  %149 = load i32, i32* %numargs, align 4
  %tobool205 = icmp ne i32 %149, 0
  br i1 %tobool205, label %if.else208, label %if.then206

if.then206:                                       ; preds = %sw.bb204
  %150 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr207 = getelementptr inbounds %struct.sv*, %struct.sv** %150, i32 1
  store %struct.sv** %incdec.ptr207, %struct.sv*** %sp, align 8
  store %struct.sv* null, %struct.sv** %incdec.ptr207, align 8
  br label %if.end265

if.else208:                                       ; preds = %sw.bb204
  %151 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool209 = icmp ne %struct.sv** %151, null
  br i1 %tobool209, label %land.lhs.true210, label %if.else241

land.lhs.true210:                                 ; preds = %if.else208
  %152 = load %struct.sv**, %struct.sv*** %svp, align 8
  %153 = load %struct.sv*, %struct.sv** %152, align 8
  %tobool211 = icmp ne %struct.sv* %153, null
  br i1 %tobool211, label %land.lhs.true212, label %if.else241

land.lhs.true212:                                 ; preds = %land.lhs.true210
  %154 = load %struct.sv**, %struct.sv*** %svp, align 8
  %155 = load %struct.sv*, %struct.sv** %154, align 8
  %sv_flags213 = getelementptr inbounds %struct.sv, %struct.sv* %155, i32 0, i32 2
  %156 = load i32, i32* %sv_flags213, align 4
  %and214 = and i32 %156, 2048
  %tobool215 = icmp ne i32 %and214, 0
  br i1 %tobool215, label %land.lhs.true216, label %if.else241

land.lhs.true216:                                 ; preds = %land.lhs.true212
  %157 = load %struct.sv**, %struct.sv*** %svp, align 8
  %158 = load %struct.sv*, %struct.sv** %157, align 8
  %sv_u217 = getelementptr inbounds %struct.sv, %struct.sv* %158, i32 0, i32 3
  %svu_rv218 = bitcast %union.anon* %sv_u217 to %struct.sv**
  %159 = load %struct.sv*, %struct.sv** %svu_rv218, align 8
  %sv_flags219 = getelementptr inbounds %struct.sv, %struct.sv* %159, i32 0, i32 2
  %160 = load i32, i32* %sv_flags219, align 4
  %and220 = and i32 %160, 49152
  %cmp221 = icmp eq i32 %and220, 32768
  br i1 %cmp221, label %land.lhs.true223, label %if.else241

land.lhs.true223:                                 ; preds = %land.lhs.true216
  %161 = load %struct.sv**, %struct.sv*** %svp, align 8
  %162 = load %struct.sv*, %struct.sv** %161, align 8
  %sv_u224 = getelementptr inbounds %struct.sv, %struct.sv* %162, i32 0, i32 3
  %svu_rv225 = bitcast %union.anon* %sv_u224 to %struct.sv**
  %163 = load %struct.sv*, %struct.sv** %svu_rv225, align 8
  %sv_flags226 = getelementptr inbounds %struct.sv, %struct.sv* %163, i32 0, i32 2
  %164 = load i32, i32* %sv_flags226, align 4
  %and227 = and i32 %164, 255
  %cmp228 = icmp eq i32 %and227, 9
  br i1 %cmp228, label %if.then237, label %lor.lhs.false230

lor.lhs.false230:                                 ; preds = %land.lhs.true223
  %165 = load %struct.sv**, %struct.sv*** %svp, align 8
  %166 = load %struct.sv*, %struct.sv** %165, align 8
  %sv_u231 = getelementptr inbounds %struct.sv, %struct.sv* %166, i32 0, i32 3
  %svu_rv232 = bitcast %union.anon* %sv_u231 to %struct.sv**
  %167 = load %struct.sv*, %struct.sv** %svu_rv232, align 8
  %sv_flags233 = getelementptr inbounds %struct.sv, %struct.sv* %167, i32 0, i32 2
  %168 = load i32, i32* %sv_flags233, align 4
  %and234 = and i32 %168, 255
  %cmp235 = icmp eq i32 %and234, 10
  br i1 %cmp235, label %if.then237, label %if.else241

if.then237:                                       ; preds = %lor.lhs.false230, %land.lhs.true223
  %169 = load %struct.sv**, %struct.sv*** %svp, align 8
  %170 = load %struct.sv*, %struct.sv** %169, align 8
  %sv_u238 = getelementptr inbounds %struct.sv, %struct.sv* %170, i32 0, i32 3
  %svu_rv239 = bitcast %union.anon* %sv_u238 to %struct.sv**
  %171 = load %struct.sv*, %struct.sv** %svu_rv239, align 8
  %172 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr240 = getelementptr inbounds %struct.sv*, %struct.sv** %172, i32 1
  store %struct.sv** %incdec.ptr240, %struct.sv*** %sp, align 8
  store %struct.sv* %171, %struct.sv** %incdec.ptr240, align 8
  br label %if.end264

if.else241:                                       ; preds = %lor.lhs.false230, %land.lhs.true216, %land.lhs.true212, %land.lhs.true210, %if.else208
  %173 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private242 = getelementptr inbounds %struct.op, %struct.op* %173, i32 0, i32 6
  %174 = load i8, i8* %op_private242, align 1
  %conv243 = zext i8 %174 to i32
  %175 = load i32, i32* %whicharg, align 4
  %and244 = and i32 %conv243, %175
  %tobool245 = icmp ne i32 %and244, 0
  %frombool246 = zext i1 %tobool245 to i8
  store i8 %frombool246, i8* %constr, align 1
  %176 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool247 = icmp ne %struct.sv** %176, null
  br i1 %tobool247, label %land.lhs.true248, label %cond.false251

land.lhs.true248:                                 ; preds = %if.else241
  %177 = load %struct.sv**, %struct.sv*** %svp, align 8
  %178 = load %struct.sv*, %struct.sv** %177, align 8
  %tobool249 = icmp ne %struct.sv* %178, null
  br i1 %tobool249, label %cond.true250, label %cond.false251

cond.true250:                                     ; preds = %land.lhs.true248
  %179 = load %struct.sv**, %struct.sv*** %svp, align 8
  %180 = load %struct.sv*, %struct.sv** %179, align 8
  br label %cond.end252

cond.false251:                                    ; preds = %land.lhs.true248, %if.else241
  br label %cond.end252

cond.end252:                                      ; preds = %cond.false251, %cond.true250
  %cond253 = phi %struct.sv* [ %180, %cond.true250 ], [ @PL_sv_undef, %cond.false251 ]
  %181 = load i8, i8* %constr, align 1
  %tobool254 = trunc i8 %181 to i1
  %182 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_hints = getelementptr inbounds %struct.cop, %struct.cop* %182, i32 0, i32 10
  %183 = load i32, i32* %cop_hints, align 8
  %add255 = add i32 %183, 0
  %and256 = and i32 %add255, 2
  %tobool257 = icmp ne i32 %and256, 0
  %184 = zext i1 %tobool257 to i64
  %cond258 = select i1 %tobool257, i32 1, i32 0
  %tobool259 = icmp ne i32 %cond258, 0
  %185 = load i8, i8* %constr, align 1
  %tobool260 = trunc i8 %185 to i1
  %lnot261 = xor i1 %tobool260, true
  %call262 = call %struct.sv* @S_rv2gv(%struct.sv* %cond253, i1 zeroext %tobool254, i1 zeroext %tobool259, i1 zeroext %lnot261)
  %186 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr263 = getelementptr inbounds %struct.sv*, %struct.sv** %186, i32 1
  store %struct.sv** %incdec.ptr263, %struct.sv*** %sp, align 8
  store %struct.sv* %call262, %struct.sv** %incdec.ptr263, align 8
  br label %if.end264

if.end264:                                        ; preds = %cond.end252, %if.then237
  br label %if.end265

if.end265:                                        ; preds = %if.end264, %if.then206
  br label %sw.epilog

sw.bb266:                                         ; preds = %for.body
  %187 = load i32, i32* %numargs, align 4
  %tobool267 = icmp ne i32 %187, 0
  br i1 %tobool267, label %if.else269, label %if.then268

if.then268:                                       ; preds = %sw.bb266
  br label %try_defsv

if.else269:                                       ; preds = %sw.bb266
  %188 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private270 = getelementptr inbounds %struct.op, %struct.op* %188, i32 0, i32 6
  %189 = load i8, i8* %op_private270, align 1
  %conv271 = zext i8 %189 to i32
  %and272 = and i32 %conv271, 64
  %tobool273 = icmp ne i32 %and272, 0
  %frombool274 = zext i1 %tobool273 to i8
  store i8 %frombool274, i8* %wantscalar, align 1
  %190 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool275 = icmp ne %struct.sv** %190, null
  br i1 %tobool275, label %lor.lhs.false276, label %if.then303

lor.lhs.false276:                                 ; preds = %if.else269
  %191 = load %struct.sv**, %struct.sv*** %svp, align 8
  %192 = load %struct.sv*, %struct.sv** %191, align 8
  %tobool277 = icmp ne %struct.sv* %192, null
  br i1 %tobool277, label %lor.lhs.false278, label %if.then303

lor.lhs.false278:                                 ; preds = %lor.lhs.false276
  %193 = load %struct.sv**, %struct.sv*** %svp, align 8
  %194 = load %struct.sv*, %struct.sv** %193, align 8
  %sv_flags279 = getelementptr inbounds %struct.sv, %struct.sv* %194, i32 0, i32 2
  %195 = load i32, i32* %sv_flags279, align 4
  %and280 = and i32 %195, 2048
  %tobool281 = icmp ne i32 %and280, 0
  br i1 %tobool281, label %lor.lhs.false282, label %if.then303

lor.lhs.false282:                                 ; preds = %lor.lhs.false278
  %196 = load %struct.sv**, %struct.sv*** %svp, align 8
  %197 = load %struct.sv*, %struct.sv** %196, align 8
  %sv_u283 = getelementptr inbounds %struct.sv, %struct.sv* %197, i32 0, i32 3
  %svu_rv284 = bitcast %union.anon* %sv_u283 to %struct.sv**
  %198 = load %struct.sv*, %struct.sv** %svu_rv284, align 8
  %sv_flags285 = getelementptr inbounds %struct.sv, %struct.sv* %198, i32 0, i32 2
  %199 = load i32, i32* %sv_flags285, align 4
  %and286 = and i32 %199, 255
  %200 = load i8, i8* %wantscalar, align 1
  %tobool287 = trunc i8 %200 to i1
  br i1 %tobool287, label %cond.true289, label %cond.false290

cond.true289:                                     ; preds = %lor.lhs.false282
  br label %cond.end299

cond.false290:                                    ; preds = %lor.lhs.false282
  %201 = load i32, i32* %opnum, align 4
  %cmp291 = icmp eq i32 %201, 378
  br i1 %cmp291, label %lor.end296, label %lor.rhs293

lor.rhs293:                                       ; preds = %cond.false290
  %202 = load i32, i32* %opnum, align 4
  %cmp294 = icmp eq i32 %202, 44
  br label %lor.end296

lor.end296:                                       ; preds = %lor.rhs293, %cond.false290
  %203 = phi i1 [ true, %cond.false290 ], [ %cmp294, %lor.rhs293 ]
  %204 = zext i1 %203 to i64
  %cond298 = select i1 %203, i32 13, i32 12
  br label %cond.end299

cond.end299:                                      ; preds = %lor.end296, %cond.true289
  %cond300 = phi i32 [ 10, %cond.true289 ], [ %cond298, %lor.end296 ]
  %cmp301 = icmp ugt i32 %and286, %cond300
  br i1 %cmp301, label %if.then303, label %if.end321

if.then303:                                       ; preds = %cond.end299, %lor.lhs.false278, %lor.lhs.false276, %if.else269
  %205 = load i32, i32* %whicharg, align 4
  %206 = load i32, i32* %opnum, align 4
  %idxprom304 = sext i32 %206 to i64
  %arrayidx305 = getelementptr inbounds [0 x i8*], [0 x i8*]* @PL_op_name, i64 0, i64 %idxprom304
  %207 = load i8*, i8** %arrayidx305, align 8
  %208 = load i8, i8* %wantscalar, align 1
  %tobool306 = trunc i8 %208 to i1
  br i1 %tobool306, label %cond.true308, label %cond.false309

cond.true308:                                     ; preds = %if.then303
  br label %cond.end318

cond.false309:                                    ; preds = %if.then303
  %209 = load i32, i32* %opnum, align 4
  %cmp310 = icmp eq i32 %209, 378
  br i1 %cmp310, label %lor.end315, label %lor.rhs312

lor.rhs312:                                       ; preds = %cond.false309
  %210 = load i32, i32* %opnum, align 4
  %cmp313 = icmp eq i32 %210, 44
  br label %lor.end315

lor.end315:                                       ; preds = %lor.rhs312, %cond.false309
  %211 = phi i1 [ true, %cond.false309 ], [ %cmp313, %lor.rhs312 ]
  %212 = zext i1 %211 to i64
  %cond317 = select i1 %211, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.68, i64 0, i64 0)
  br label %cond.end318

cond.end318:                                      ; preds = %lor.end315, %cond.true308
  %cond319 = phi i8* [ getelementptr inbounds ([17 x i8], [17 x i8]* @.str.66, i64 0, i64 0), %cond.true308 ], [ %cond317, %lor.end315 ]
  %call320 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.65, i64 0, i64 0), i32 %205, i8* %207, i8* %cond319)
  store %struct.op* %call320, %struct.op** %retval, align 8
  br label %return

if.end321:                                        ; preds = %cond.end299
  %213 = load %struct.sv**, %struct.sv*** %svp, align 8
  %214 = load %struct.sv*, %struct.sv** %213, align 8
  %sv_u322 = getelementptr inbounds %struct.sv, %struct.sv* %214, i32 0, i32 3
  %svu_rv323 = bitcast %union.anon* %sv_u322 to %struct.sv**
  %215 = load %struct.sv*, %struct.sv** %svu_rv323, align 8
  %216 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr324 = getelementptr inbounds %struct.sv*, %struct.sv** %216, i32 1
  store %struct.sv** %incdec.ptr324, %struct.sv*** %sp, align 8
  store %struct.sv* %215, %struct.sv** %incdec.ptr324, align 8
  %217 = load i32, i32* %opnum, align 4
  %cmp325 = icmp eq i32 %217, 44
  br i1 %cmp325, label %land.lhs.true327, label %if.end364

land.lhs.true327:                                 ; preds = %if.end321
  %218 = load %struct.sv**, %struct.sv*** %svp, align 8
  %219 = load %struct.sv*, %struct.sv** %218, align 8
  %sv_u328 = getelementptr inbounds %struct.sv, %struct.sv* %219, i32 0, i32 3
  %svu_rv329 = bitcast %union.anon* %sv_u328 to %struct.sv**
  %220 = load %struct.sv*, %struct.sv** %svu_rv329, align 8
  %221 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %222 = bitcast %struct.gv* %221 to %struct.sv*
  %cmp330 = icmp eq %struct.sv* %220, %222
  br i1 %cmp330, label %land.lhs.true332, label %if.end364

land.lhs.true332:                                 ; preds = %land.lhs.true327
  %223 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack333 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %223, i32 0, i32 1
  %224 = load %struct.context*, %struct.context** %si_cxstack333, align 8
  %225 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix334 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %225, i32 0, i32 4
  %226 = load i32, i32* %si_cxix334, align 8
  %idxprom335 = sext i32 %226 to i64
  %arrayidx336 = getelementptr inbounds %struct.context, %struct.context* %224, i64 %idxprom335
  %cx_u337 = getelementptr inbounds %struct.context, %struct.context* %arrayidx336, i32 0, i32 0
  %cx_subst = bitcast %union.anon.27* %cx_u337 to %struct.subst*
  %sbu_type = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst, i32 0, i32 0
  %227 = load i8, i8* %sbu_type, align 8
  %conv338 = zext i8 %227 to i32
  %and339 = and i32 %conv338, 32
  %tobool340 = icmp ne i32 %and339, 0
  br i1 %tobool340, label %if.then341, label %if.end364

if.then341:                                       ; preds = %land.lhs.true332
  %228 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxstack342 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %228, i32 0, i32 1
  %229 = load %struct.context*, %struct.context** %si_cxstack342, align 8
  %230 = load %struct.stackinfo*, %struct.stackinfo** @PL_curstackinfo, align 8
  %si_cxix343 = getelementptr inbounds %struct.stackinfo, %struct.stackinfo* %230, i32 0, i32 4
  %231 = load i32, i32* %si_cxix343, align 8
  %idxprom344 = sext i32 %231 to i64
  %arrayidx345 = getelementptr inbounds %struct.context, %struct.context* %229, i64 %idxprom344
  store %struct.context* %arrayidx345, %struct.context** %cx, align 8
  br label %do.body346

do.body346:                                       ; preds = %if.then341
  %232 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u347 = getelementptr inbounds %struct.gv, %struct.gv* %232, i32 0, i32 3
  %svu_gp348 = bitcast %union.anon.4* %sv_u347 to %struct.gp**
  %233 = load %struct.gp*, %struct.gp** %svu_gp348, align 8
  %add.ptr349 = getelementptr inbounds %struct.gp, %struct.gp* %233, i64 0
  %gp_av350 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr349, i32 0, i32 6
  %234 = load %struct.av*, %struct.av** %gp_av350, align 8
  %235 = bitcast %struct.av* %234 to i8*
  %236 = bitcast i8* %235 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %236)
  %237 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u351 = getelementptr inbounds %struct.context, %struct.context* %237, i32 0, i32 0
  %cx_blk352 = bitcast %union.anon.27* %cx_u351 to %struct.block*
  %blk_u = getelementptr inbounds %struct.block, %struct.block* %cx_blk352, i32 0, i32 8
  %blku_sub = bitcast %union.anon.28* %blk_u to %struct.block_sub*
  %savearray = getelementptr inbounds %struct.block_sub, %struct.block_sub* %blku_sub, i32 0, i32 2
  %238 = load %struct.av*, %struct.av** %savearray, align 8
  %239 = load %struct.gv*, %struct.gv** @PL_defgv, align 8
  %sv_u353 = getelementptr inbounds %struct.gv, %struct.gv* %239, i32 0, i32 3
  %svu_gp354 = bitcast %union.anon.4* %sv_u353 to %struct.gp**
  %240 = load %struct.gp*, %struct.gp** %svu_gp354, align 8
  %add.ptr355 = getelementptr inbounds %struct.gp, %struct.gp* %240, i64 0
  %gp_av356 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr355, i32 0, i32 6
  store %struct.av* %238, %struct.av** %gp_av356, align 8
  br label %do.end357

do.end357:                                        ; preds = %do.body346
  %241 = load %struct.context*, %struct.context** %cx, align 8
  %cx_u358 = getelementptr inbounds %struct.context, %struct.context* %241, i32 0, i32 0
  %cx_subst359 = bitcast %union.anon.27* %cx_u358 to %struct.subst*
  %sbu_type360 = getelementptr inbounds %struct.subst, %struct.subst* %cx_subst359, i32 0, i32 0
  %242 = load i8, i8* %sbu_type360, align 8
  %conv361 = zext i8 %242 to i32
  %and362 = and i32 %conv361, -33
  %conv363 = trunc i32 %and362 to i8
  store i8 %conv363, i8* %sbu_type360, align 8
  br label %if.end364

if.end364:                                        ; preds = %do.end357, %land.lhs.true332, %land.lhs.true327, %if.end321
  br label %if.end365

if.end365:                                        ; preds = %if.end364
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %243 = load i32, i32* %oa, align 4
  %and366 = and i32 %243, 7
  %call367 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.69, i64 0, i64 0), i32 %and366)
  store %struct.op* %call367, %struct.op** %retval, align 8
  br label %return

sw.epilog:                                        ; preds = %if.end365, %if.end265, %if.end200, %if.end153
  %244 = load i32, i32* %oa, align 4
  %shr368 = ashr i32 %244, 4
  store i32 %shr368, i32* %oa, align 4
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %245 = load i32, i32* %numargs, align 4
  %tobool369 = icmp ne i32 %245, 0
  br i1 %tobool369, label %land.rhs370, label %land.end374

land.rhs370:                                      ; preds = %for.inc
  %246 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr371 = getelementptr inbounds %struct.sv*, %struct.sv** %246, i32 1
  store %struct.sv** %incdec.ptr371, %struct.sv*** %svp, align 8
  %247 = load i32, i32* %numargs, align 4
  %dec372 = add nsw i32 %247, -1
  store i32 %dec372, i32* %numargs, align 4
  %tobool373 = icmp ne i32 %dec372, 0
  br label %land.end374

land.end374:                                      ; preds = %land.rhs370, %for.inc
  %248 = phi i1 [ false, %for.inc ], [ %tobool373, %land.rhs370 ]
  %land.ext = zext i1 %248 to i32
  br label %for.cond

for.end:                                          ; preds = %land.end
  %249 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %249, %struct.sv*** @PL_stack_sp, align 8
  %250 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next375 = getelementptr inbounds %struct.op, %struct.op* %250, i32 0, i32 0
  %251 = load %struct.op*, %struct.op** %op_next375, align 8
  store %struct.op* %251, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %for.end, %sw.default, %cond.end318, %cond.end197, %while.end167, %if.then86
  %252 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %252
}

declare dso_local %struct.op* @Perl_pp_pushmark() #1

declare dso_local %struct.sv* @Perl_find_rundefsv2(%struct.cv*, i32) #1

declare dso_local %struct.cv* @Perl_find_runcv_where(i8 zeroext, i64, i32*) #1

declare dso_local i8* @Perl_custom_op_get_field(%struct.op*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_runcv() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %cv = alloca %struct.cv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct.cv* @Perl_find_runcv_where(i8 zeroext 2, i64 1, i32* null)
  store %struct.cv* %call, %struct.cv** %cv, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call %struct.cv* @Perl_find_runcv(i32* null)
  store %struct.cv* %call1, %struct.cv** %cv, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %3 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %3 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %4 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body2
  br i1 true, label %if.then4, label %if.end6

cond.false:                                       ; preds = %do.body2
  br i1 false, label %if.then4, label %if.end6

if.then4:                                         ; preds = %cond.false, %cond.true
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  %6 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call5 = call %struct.sv** @Perl_stack_grow(%struct.sv** %5, %struct.sv** %6, i64 1)
  store %struct.sv** %call5, %struct.sv*** %sp, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end6
  %8 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_any = getelementptr inbounds %struct.cv, %struct.cv* %8, i32 0, i32 0
  %9 = load %struct.xpvcv*, %struct.xpvcv** %sv_any, align 8
  %10 = bitcast %struct.xpvcv* %9 to i8*
  %11 = bitcast i8* %10 to %struct.xpvcv*
  %xcv_flags = getelementptr inbounds %struct.xpvcv, %struct.xpvcv* %11, i32 0, i32 12
  %12 = load i32, i32* %xcv_flags, align 4
  %and7 = and i32 %12, 256
  %tobool8 = icmp ne i32 %and7, 0
  br i1 %tobool8, label %land.lhs.true, label %cond.false12

land.lhs.true:                                    ; preds = %do.end
  %13 = load %struct.cv*, %struct.cv** %cv, align 8
  %sv_flags = getelementptr inbounds %struct.cv, %struct.cv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and9 = and i32 %14, 16777216
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %cond.false12, label %cond.true11

cond.true11:                                      ; preds = %land.lhs.true
  br label %cond.end

cond.false12:                                     ; preds = %land.lhs.true, %do.end
  %15 = load %struct.cv*, %struct.cv** %cv, align 8
  %16 = bitcast %struct.cv* %15 to %struct.sv*
  %call13 = call %struct.sv* @Perl_newRV(%struct.sv* %16)
  %call14 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call13)
  br label %cond.end

cond.end:                                         ; preds = %cond.false12, %cond.true11
  %cond = phi %struct.sv* [ @PL_sv_undef, %cond.true11 ], [ %call14, %cond.false12 ]
  %17 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %17, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %cond, %struct.sv** %incdec.ptr, align 8
  br label %do.end15

do.end15:                                         ; preds = %cond.end
  %18 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %18, %struct.sv*** @PL_stack_sp, align 8
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 0
  %20 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_refassign() #0 {
entry:
  %retval = alloca %struct.op*, align 8
  %sp = alloca %struct.sv**, align 8
  %key = alloca %struct.sv*, align 8
  %left = alloca %struct.sv*, align 8
  %sv = alloca %struct.sv*, align 8
  %bad = alloca i8*, align 8
  %type = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %old = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %key, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv1 = zext i8 %6 to i32
  %and2 = and i32 %conv1, 64
  %tobool3 = icmp ne i32 %and2, 0
  br i1 %tobool3, label %cond.true4, label %cond.false6

cond.true4:                                       ; preds = %cond.end
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr5 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr5, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  br label %cond.end7

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.sv* [ %8, %cond.true4 ], [ null, %cond.false6 ]
  store %struct.sv* %cond8, %struct.sv** %left, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  store %struct.sv* %10, %struct.sv** %sv, align 8
  store i8* null, i8** %bad, align 8
  %11 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private9 = getelementptr inbounds %struct.op, %struct.op* %11, i32 0, i32 6
  %12 = load i8, i8* %op_private9, align 1
  %conv10 = zext i8 %12 to i32
  %and11 = and i32 %conv10, 48
  %conv12 = trunc i32 %and11 to i8
  store i8 %conv12, i8* %type, align 1
  %13 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %13, i32 0, i32 2
  %14 = load i32, i32* %sv_flags, align 4
  %and13 = and i32 %14, 2048
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end7
  %call = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.70, i64 0, i64 0))
  store %struct.op* %call, %struct.op** %retval, align 8
  br label %return

if.end:                                           ; preds = %cond.end7
  %15 = load i8, i8* %type, align 1
  %conv15 = zext i8 %15 to i32
  switch i32 %conv15, label %sw.epilog [
    i32 0, label %sw.bb
    i32 16, label %sw.bb21
    i32 32, label %sw.bb30
    i32 48, label %sw.bb39
  ]

sw.bb:                                            ; preds = %if.end
  %16 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %16, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %17 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_flags16 = getelementptr inbounds %struct.sv, %struct.sv* %17, i32 0, i32 2
  %18 = load i32, i32* %sv_flags16, align 4
  %and17 = and i32 %18, 255
  %cmp = icmp ugt i32 %and17, 10
  br i1 %cmp, label %if.then19, label %if.end20

if.then19:                                        ; preds = %sw.bb
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i64 0, i64 0), i8** %bad, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then19, %sw.bb
  br label %sw.epilog

sw.bb21:                                          ; preds = %if.end
  %19 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u22 = getelementptr inbounds %struct.sv, %struct.sv* %19, i32 0, i32 3
  %svu_rv23 = bitcast %union.anon* %sv_u22 to %struct.sv**
  %20 = load %struct.sv*, %struct.sv** %svu_rv23, align 8
  %sv_flags24 = getelementptr inbounds %struct.sv, %struct.sv* %20, i32 0, i32 2
  %21 = load i32, i32* %sv_flags24, align 4
  %and25 = and i32 %21, 255
  %cmp26 = icmp ne i32 %and25, 11
  br i1 %cmp26, label %if.then28, label %if.end29

if.then28:                                        ; preds = %sw.bb21
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i64 0, i64 0), i8** %bad, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %sw.bb21
  br label %sw.epilog

sw.bb30:                                          ; preds = %if.end
  %22 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u31 = getelementptr inbounds %struct.sv, %struct.sv* %22, i32 0, i32 3
  %svu_rv32 = bitcast %union.anon* %sv_u31 to %struct.sv**
  %23 = load %struct.sv*, %struct.sv** %svu_rv32, align 8
  %sv_flags33 = getelementptr inbounds %struct.sv, %struct.sv* %23, i32 0, i32 2
  %24 = load i32, i32* %sv_flags33, align 4
  %and34 = and i32 %24, 255
  %cmp35 = icmp ne i32 %and34, 12
  br i1 %cmp35, label %if.then37, label %if.end38

if.then37:                                        ; preds = %sw.bb30
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73, i64 0, i64 0), i8** %bad, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.then37, %sw.bb30
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.end
  %25 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u40 = getelementptr inbounds %struct.sv, %struct.sv* %25, i32 0, i32 3
  %svu_rv41 = bitcast %union.anon* %sv_u40 to %struct.sv**
  %26 = load %struct.sv*, %struct.sv** %svu_rv41, align 8
  %sv_flags42 = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags42, align 4
  %and43 = and i32 %27, 255
  %cmp44 = icmp ne i32 %and43, 13
  br i1 %cmp44, label %if.then46, label %if.end47

if.then46:                                        ; preds = %sw.bb39
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i64 0, i64 0), i8** %bad, align 8
  br label %if.end47

if.end47:                                         ; preds = %if.then46, %sw.bb39
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end47, %if.end, %if.end38, %if.end29, %if.end20
  %28 = load i8*, i8** %bad, align 8
  %tobool48 = icmp ne i8* %28, null
  br i1 %tobool48, label %if.then49, label %if.end51

if.then49:                                        ; preds = %sw.epilog
  %29 = load i8*, i8** %bad, align 8
  %call50 = call %struct.op* (i8*, ...) @Perl_die(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.75, i64 0, i64 0), i8* %29)
  store %struct.op* %call50, %struct.op** %retval, align 8
  br label %return

if.end51:                                         ; preds = %sw.epilog
  %30 = load %struct.sv*, %struct.sv** %left, align 8
  %tobool52 = icmp ne %struct.sv* %30, null
  br i1 %tobool52, label %cond.true53, label %cond.false56

cond.true53:                                      ; preds = %if.end51
  %31 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags54 = getelementptr inbounds %struct.sv, %struct.sv* %31, i32 0, i32 2
  %32 = load i32, i32* %sv_flags54, align 4
  %and55 = and i32 %32, 255
  br label %cond.end57

cond.false56:                                     ; preds = %if.end51
  br label %cond.end57

cond.end57:                                       ; preds = %cond.false56, %cond.true53
  %cond58 = phi i32 [ %and55, %cond.true53 ], [ 0, %cond.false56 ]
  switch i32 %cond58, label %sw.epilog178 [
    i32 0, label %sw.bb59
    i32 9, label %sw.bb74
    i32 11, label %sw.bb89
    i32 12, label %sw.bb133
  ]

sw.bb59:                                          ; preds = %cond.end57
  %33 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %34 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %34, i32 0, i32 3
  %35 = load i64, i64* %op_targ, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %33, i64 %35
  %36 = load %struct.sv*, %struct.sv** %arrayidx, align 8
  store %struct.sv* %36, %struct.sv** %old, align 8
  %37 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u60 = getelementptr inbounds %struct.sv, %struct.sv* %37, i32 0, i32 3
  %svu_rv61 = bitcast %union.anon* %sv_u60 to %struct.sv**
  %38 = load %struct.sv*, %struct.sv** %svu_rv61, align 8
  %39 = bitcast %struct.sv* %38 to i8*
  %40 = bitcast i8* %39 to %struct.sv*
  %call62 = call %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %40)
  %41 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %42 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ63 = getelementptr inbounds %struct.op, %struct.op* %42, i32 0, i32 3
  %43 = load i64, i64* %op_targ63, align 8
  %arrayidx64 = getelementptr inbounds %struct.sv*, %struct.sv** %41, i64 %43
  store %struct.sv* %call62, %struct.sv** %arrayidx64, align 8
  %44 = load %struct.sv*, %struct.sv** %old, align 8
  %45 = bitcast %struct.sv* %44 to i8*
  %46 = bitcast i8* %45 to %struct.sv*
  call void @S_SvREFCNT_dec(%struct.sv* %46)
  %47 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private65 = getelementptr inbounds %struct.op, %struct.op* %47, i32 0, i32 6
  %48 = load i8, i8* %op_private65, align 1
  %conv66 = zext i8 %48 to i32
  %and67 = and i32 %conv66, 192
  %cmp68 = icmp eq i32 %and67, 128
  br i1 %cmp68, label %if.then70, label %if.end73

if.then70:                                        ; preds = %sw.bb59
  %49 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %50 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ71 = getelementptr inbounds %struct.op, %struct.op* %50, i32 0, i32 3
  %51 = load i64, i64* %op_targ71, align 8
  %arrayidx72 = getelementptr inbounds %struct.sv*, %struct.sv** %49, i64 %51
  call void @Perl_save_clearsv(%struct.sv** %arrayidx72)
  br label %if.end73

if.end73:                                         ; preds = %if.then70, %sw.bb59
  br label %sw.epilog178

sw.bb74:                                          ; preds = %cond.end57
  %52 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private75 = getelementptr inbounds %struct.op, %struct.op* %52, i32 0, i32 6
  %53 = load i8, i8* %op_private75, align 1
  %conv76 = zext i8 %53 to i32
  %and77 = and i32 %conv76, 128
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.then79, label %if.end80

if.then79:                                        ; preds = %sw.bb74
  %54 = load %struct.sv*, %struct.sv** %left, align 8
  %55 = bitcast %struct.sv* %54 to %struct.gv*
  %56 = load i8, i8* %type, align 1
  call void @S_localise_gv_slot(%struct.gv* %55, i8 zeroext %56)
  br label %if.end80

if.end80:                                         ; preds = %if.then79, %sw.bb74
  %57 = load %struct.sv*, %struct.sv** %left, align 8
  %58 = load %struct.sv*, %struct.sv** %sv, align 8
  call void @Perl_gv_setref(%struct.sv* %57, %struct.sv* %58)
  br label %do.body

do.body:                                          ; preds = %if.end80
  %59 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags81 = getelementptr inbounds %struct.sv, %struct.sv* %59, i32 0, i32 2
  %60 = load i32, i32* %sv_flags81, align 4
  %and82 = and i32 %60, 4194304
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %cond.true84, label %cond.false85

cond.true84:                                      ; preds = %do.body
  br i1 true, label %if.then86, label %if.end88

cond.false85:                                     ; preds = %do.body
  br i1 false, label %if.then86, label %if.end88

if.then86:                                        ; preds = %cond.false85, %cond.true84
  %61 = load %struct.sv*, %struct.sv** %left, align 8
  %call87 = call i32 @Perl_mg_set(%struct.sv* %61)
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %cond.false85, %cond.true84
  br label %do.end

do.end:                                           ; preds = %if.end88
  br label %sw.epilog178

sw.bb89:                                          ; preds = %cond.end57
  %62 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private90 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 6
  %63 = load i8, i8* %op_private90, align 1
  %conv91 = zext i8 %63 to i32
  %and92 = and i32 %conv91, 128
  %tobool93 = icmp ne i32 %and92, 0
  br i1 %tobool93, label %cond.true94, label %cond.false95

cond.true94:                                      ; preds = %sw.bb89
  br i1 true, label %if.then96, label %if.end117

cond.false95:                                     ; preds = %sw.bb89
  br i1 false, label %if.then96, label %if.end117

if.then96:                                        ; preds = %cond.false95, %cond.true94
  %64 = load %struct.sv*, %struct.sv** %left, align 8
  %65 = bitcast %struct.sv* %64 to %struct.av*
  %66 = load %struct.sv*, %struct.sv** %key, align 8
  %67 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags97 = getelementptr inbounds %struct.sv, %struct.sv* %67, i32 0, i32 2
  %68 = load i32, i32* %sv_flags97, align 4
  %and98 = and i32 %68, 8388608
  %tobool99 = icmp ne i32 %and98, 0
  br i1 %tobool99, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %if.then96
  %69 = load %struct.sv*, %struct.sv** %left, align 8
  %call100 = call %struct.magic* @Perl_mg_find(%struct.sv* %69, i32 80)
  store %struct.magic* %call100, %struct.magic** %mg, align 8
  %tobool101 = icmp ne %struct.magic* %call100, null
  br i1 %tobool101, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %70 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %70, i32 0, i32 6
  %71 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool102 = icmp ne %struct.sv* %71, null
  br i1 %tobool102, label %cond.true103, label %cond.false105

cond.true103:                                     ; preds = %lor.rhs
  %72 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj104 = getelementptr inbounds %struct.magic, %struct.magic* %72, i32 0, i32 6
  %73 = load %struct.sv*, %struct.sv** %mg_obj104, align 8
  br label %cond.end108

cond.false105:                                    ; preds = %lor.rhs
  %74 = load %struct.sv*, %struct.sv** %left, align 8
  %75 = bitcast %struct.sv* %74 to i8*
  %76 = bitcast i8* %75 to %struct.sv*
  %call106 = call %struct.sv* @Perl_newRV(%struct.sv* %76)
  %call107 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call106)
  br label %cond.end108

cond.end108:                                      ; preds = %cond.false105, %cond.true103
  %cond109 = phi %struct.sv* [ %73, %cond.true103 ], [ %call107, %cond.false105 ]
  %sv_u110 = getelementptr inbounds %struct.sv, %struct.sv* %cond109, i32 0, i32 3
  %svu_rv111 = bitcast %union.anon* %sv_u110 to %struct.sv**
  %77 = load %struct.sv*, %struct.sv** %svu_rv111, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %77, i32 0, i32 0
  %78 = load i8*, i8** %sv_any, align 8
  %79 = bitcast i8* %78 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %79, i32 0, i32 0
  %80 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %80, %struct.hv** %stash, align 8
  %tobool112 = icmp ne %struct.hv* %80, null
  br i1 %tobool112, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.end108
  %81 = load %struct.hv*, %struct.hv** %stash, align 8
  %call113 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %81, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool114 = icmp ne %struct.gv* %call113, null
  br i1 %tobool114, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %82 = load %struct.hv*, %struct.hv** %stash, align 8
  %call115 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool116 = icmp ne %struct.gv* %call115, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %cond.end108
  %83 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end108 ], [ %tobool116, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %if.then96
  %84 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then96 ], [ %83, %land.end ]
  call void @S_localise_aelem_lval(%struct.av* %65, %struct.sv* %66, i1 zeroext %84)
  br label %if.end117

if.end117:                                        ; preds = %lor.end, %cond.false95, %cond.true94
  %85 = load %struct.sv*, %struct.sv** %left, align 8
  %86 = bitcast %struct.sv* %85 to %struct.av*
  %87 = load %struct.sv*, %struct.sv** %key, align 8
  %sv_flags118 = getelementptr inbounds %struct.sv, %struct.sv* %87, i32 0, i32 2
  %88 = load i32, i32* %sv_flags118, align 4
  %and119 = and i32 %88, 2097408
  %cmp120 = icmp eq i32 %and119, 256
  br i1 %cmp120, label %cond.true122, label %cond.false124

cond.true122:                                     ; preds = %if.end117
  %89 = load %struct.sv*, %struct.sv** %key, align 8
  %sv_any123 = getelementptr inbounds %struct.sv, %struct.sv* %89, i32 0, i32 0
  %90 = load i8*, i8** %sv_any123, align 8
  %91 = bitcast i8* %90 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %91, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %92 = load i64, i64* %xivu_iv, align 8
  br label %cond.end126

cond.false124:                                    ; preds = %if.end117
  %93 = load %struct.sv*, %struct.sv** %key, align 8
  %call125 = call i64 @Perl_sv_2iv_flags(%struct.sv* %93, i32 2)
  br label %cond.end126

cond.end126:                                      ; preds = %cond.false124, %cond.true122
  %cond127 = phi i64 [ %92, %cond.true122 ], [ %call125, %cond.false124 ]
  %94 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u128 = getelementptr inbounds %struct.sv, %struct.sv* %94, i32 0, i32 3
  %svu_rv129 = bitcast %union.anon* %sv_u128 to %struct.sv**
  %95 = load %struct.sv*, %struct.sv** %svu_rv129, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %95, i32 0, i32 1
  %96 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %96, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %97 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u130 = getelementptr inbounds %struct.sv, %struct.sv* %97, i32 0, i32 3
  %svu_rv131 = bitcast %union.anon* %sv_u130 to %struct.sv**
  %98 = load %struct.sv*, %struct.sv** %svu_rv131, align 8
  %99 = bitcast %struct.sv* %98 to i8*
  %100 = bitcast i8* %99 to %struct.sv*
  %call132 = call %struct.sv** @Perl_av_store(%struct.av* %86, i64 %cond127, %struct.sv* %100)
  br label %sw.epilog178

sw.bb133:                                         ; preds = %cond.end57
  %101 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private134 = getelementptr inbounds %struct.op, %struct.op* %101, i32 0, i32 6
  %102 = load i8, i8* %op_private134, align 1
  %conv135 = zext i8 %102 to i32
  %and136 = and i32 %conv135, 128
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %cond.true138, label %cond.false139

cond.true138:                                     ; preds = %sw.bb133
  br i1 true, label %if.then140, label %if.end170

cond.false139:                                    ; preds = %sw.bb133
  br i1 false, label %if.then140, label %if.end170

if.then140:                                       ; preds = %cond.false139, %cond.true138
  %103 = load %struct.sv*, %struct.sv** %left, align 8
  %104 = bitcast %struct.sv* %103 to %struct.hv*
  %105 = load %struct.sv*, %struct.sv** %key, align 8
  %106 = load %struct.sv*, %struct.sv** %left, align 8
  %sv_flags141 = getelementptr inbounds %struct.sv, %struct.sv* %106, i32 0, i32 2
  %107 = load i32, i32* %sv_flags141, align 4
  %and142 = and i32 %107, 8388608
  %tobool143 = icmp ne i32 %and142, 0
  br i1 %tobool143, label %lor.lhs.false144, label %lor.end169

lor.lhs.false144:                                 ; preds = %if.then140
  %108 = load %struct.sv*, %struct.sv** %left, align 8
  %call145 = call %struct.magic* @Perl_mg_find(%struct.sv* %108, i32 80)
  store %struct.magic* %call145, %struct.magic** %mg, align 8
  %tobool146 = icmp ne %struct.magic* %call145, null
  br i1 %tobool146, label %lor.rhs147, label %lor.end169

lor.rhs147:                                       ; preds = %lor.lhs.false144
  %109 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj148 = getelementptr inbounds %struct.magic, %struct.magic* %109, i32 0, i32 6
  %110 = load %struct.sv*, %struct.sv** %mg_obj148, align 8
  %tobool149 = icmp ne %struct.sv* %110, null
  br i1 %tobool149, label %cond.true150, label %cond.false152

cond.true150:                                     ; preds = %lor.rhs147
  %111 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj151 = getelementptr inbounds %struct.magic, %struct.magic* %111, i32 0, i32 6
  %112 = load %struct.sv*, %struct.sv** %mg_obj151, align 8
  br label %cond.end155

cond.false152:                                    ; preds = %lor.rhs147
  %113 = load %struct.sv*, %struct.sv** %left, align 8
  %114 = bitcast %struct.sv* %113 to i8*
  %115 = bitcast i8* %114 to %struct.sv*
  %call153 = call %struct.sv* @Perl_newRV(%struct.sv* %115)
  %call154 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call153)
  br label %cond.end155

cond.end155:                                      ; preds = %cond.false152, %cond.true150
  %cond156 = phi %struct.sv* [ %112, %cond.true150 ], [ %call154, %cond.false152 ]
  %sv_u157 = getelementptr inbounds %struct.sv, %struct.sv* %cond156, i32 0, i32 3
  %svu_rv158 = bitcast %union.anon* %sv_u157 to %struct.sv**
  %116 = load %struct.sv*, %struct.sv** %svu_rv158, align 8
  %sv_any159 = getelementptr inbounds %struct.sv, %struct.sv* %116, i32 0, i32 0
  %117 = load i8*, i8** %sv_any159, align 8
  %118 = bitcast i8* %117 to %struct.xpvmg*
  %xmg_stash160 = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %118, i32 0, i32 0
  %119 = load %struct.hv*, %struct.hv** %xmg_stash160, align 8
  store %struct.hv* %119, %struct.hv** %stash, align 8
  %tobool161 = icmp ne %struct.hv* %119, null
  br i1 %tobool161, label %land.lhs.true162, label %land.end168

land.lhs.true162:                                 ; preds = %cond.end155
  %120 = load %struct.hv*, %struct.hv** %stash, align 8
  %call163 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %120, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool164 = icmp ne %struct.gv* %call163, null
  br i1 %tobool164, label %land.rhs165, label %land.end168

land.rhs165:                                      ; preds = %land.lhs.true162
  %121 = load %struct.hv*, %struct.hv** %stash, align 8
  %call166 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %121, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool167 = icmp ne %struct.gv* %call166, null
  br label %land.end168

land.end168:                                      ; preds = %land.rhs165, %land.lhs.true162, %cond.end155
  %122 = phi i1 [ false, %land.lhs.true162 ], [ false, %cond.end155 ], [ %tobool167, %land.rhs165 ]
  br label %lor.end169

lor.end169:                                       ; preds = %land.end168, %lor.lhs.false144, %if.then140
  %123 = phi i1 [ true, %lor.lhs.false144 ], [ true, %if.then140 ], [ %122, %land.end168 ]
  call void @S_localise_helem_lval(%struct.hv* %104, %struct.sv* %105, i1 zeroext %123)
  br label %if.end170

if.end170:                                        ; preds = %lor.end169, %cond.false139, %cond.true138
  %124 = load %struct.sv*, %struct.sv** %left, align 8
  %125 = bitcast %struct.sv* %124 to %struct.hv*
  %126 = load %struct.sv*, %struct.sv** %key, align 8
  %127 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u171 = getelementptr inbounds %struct.sv, %struct.sv* %127, i32 0, i32 3
  %svu_rv172 = bitcast %union.anon* %sv_u171 to %struct.sv**
  %128 = load %struct.sv*, %struct.sv** %svu_rv172, align 8
  %sv_refcnt173 = getelementptr inbounds %struct.sv, %struct.sv* %128, i32 0, i32 1
  %129 = load i32, i32* %sv_refcnt173, align 8
  %inc174 = add i32 %129, 1
  store i32 %inc174, i32* %sv_refcnt173, align 8
  %130 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_u175 = getelementptr inbounds %struct.sv, %struct.sv* %130, i32 0, i32 3
  %svu_rv176 = bitcast %union.anon* %sv_u175 to %struct.sv**
  %131 = load %struct.sv*, %struct.sv** %svu_rv176, align 8
  %132 = bitcast %struct.sv* %131 to i8*
  %133 = bitcast i8* %132 to %struct.sv*
  %call177 = call i8* @Perl_hv_common(%struct.hv* %125, %struct.sv* %126, i8* null, i64 0, i32 0, i32 4, %struct.sv* %133, i32 0)
  %134 = bitcast i8* %call177 to %struct.he*
  br label %sw.epilog178

sw.epilog178:                                     ; preds = %if.end170, %cond.end57, %cond.end126, %do.end, %if.end73
  %135 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags179 = getelementptr inbounds %struct.op, %struct.op* %135, i32 0, i32 5
  %136 = load i8, i8* %op_flags179, align 2
  %conv180 = zext i8 %136 to i32
  %and181 = and i32 %conv180, 32
  %tobool182 = icmp ne i32 %and181, 0
  br i1 %tobool182, label %if.then183, label %if.end186

if.then183:                                       ; preds = %sw.epilog178
  %137 = load %struct.sv*, %struct.sv** %sv, align 8
  %call184 = call %struct.sv* @Perl_newSVsv(%struct.sv* %137)
  %call185 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call184)
  %138 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call185, %struct.sv** %138, align 8
  br label %if.end186

if.end186:                                        ; preds = %if.then183, %sw.epilog178
  %139 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %139, %struct.sv*** @PL_stack_sp, align 8
  %140 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %140, i32 0, i32 0
  %141 = load %struct.op*, %struct.op** %op_next, align 8
  store %struct.op* %141, %struct.op** %retval, align 8
  br label %return

return:                                           ; preds = %if.end186, %if.then49, %if.then
  %142 = load %struct.op*, %struct.op** %retval, align 8
  ret %struct.op* %142
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sv* @S_SvREFCNT_inc_NN(%struct.sv* %sv) #0 {
entry:
  %sv.addr = alloca %struct.sv*, align 8
  store %struct.sv* %sv, %struct.sv** %sv.addr, align 8
  %0 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 1
  %1 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %1, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %2 = load %struct.sv*, %struct.sv** %sv.addr, align 8
  ret %struct.sv* %2
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_localise_gv_slot(%struct.gv* %gv, i8 zeroext %type) #0 {
entry:
  %gv.addr = alloca %struct.gv*, align 8
  %type.addr = alloca i8, align 1
  store %struct.gv* %gv, %struct.gv** %gv.addr, align 8
  store i8 %type, i8* %type.addr, align 1
  %0 = load i8, i8* %type.addr, align 1
  %conv = zext i8 %0 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %2 = bitcast %struct.gv* %1 to i8*
  %3 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u = getelementptr inbounds %struct.gv, %struct.gv* %3, i32 0, i32 3
  %svu_gp = bitcast %union.anon.4* %sv_u to %struct.gp**
  %4 = load %struct.gp*, %struct.gp** %svu_gp, align 8
  %add.ptr = getelementptr inbounds %struct.gp, %struct.gp* %4, i64 0
  %gp_sv = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr, i32 0, i32 0
  %5 = load %struct.sv*, %struct.sv** %gp_sv, align 8
  %6 = bitcast %struct.sv* %5 to i8*
  %7 = bitcast i8* %6 to %struct.sv*
  %call = call %struct.sv* @S_SvREFCNT_inc(%struct.sv* %7)
  %8 = bitcast %struct.sv* %call to i8*
  call void @Perl_save_pushptrptr(i8* %2, i8* %8, i32 29)
  %9 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %sv_u2 = getelementptr inbounds %struct.gv, %struct.gv* %9, i32 0, i32 3
  %svu_gp3 = bitcast %union.anon.4* %sv_u2 to %struct.gp**
  %10 = load %struct.gp*, %struct.gp** %svu_gp3, align 8
  %add.ptr4 = getelementptr inbounds %struct.gp, %struct.gp* %10, i64 0
  %gp_sv5 = getelementptr inbounds %struct.gp, %struct.gp* %add.ptr4, i32 0, i32 0
  store %struct.sv* null, %struct.sv** %gp_sv5, align 8
  br label %if.end13

if.else:                                          ; preds = %entry
  %11 = load i8, i8* %type.addr, align 1
  %conv6 = zext i8 %11 to i32
  %cmp7 = icmp eq i32 %conv6, 16
  br i1 %cmp7, label %if.then9, label %if.else11

if.then9:                                         ; preds = %if.else
  %12 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %call10 = call %struct.av* @Perl_save_ary(%struct.gv* %12)
  br label %if.end

if.else11:                                        ; preds = %if.else
  %13 = load %struct.gv*, %struct.gv** %gv.addr, align 8
  %call12 = call %struct.hv* @Perl_save_hash(%struct.gv* %13)
  br label %if.end

if.end:                                           ; preds = %if.else11, %if.then9
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then
  ret void
}

declare dso_local void @Perl_gv_setref(%struct.sv*, %struct.sv*) #1

; Function Attrs: noinline nounwind uwtable
define internal void @S_localise_aelem_lval(%struct.av* %av, %struct.sv* %keysv, i1 zeroext %can_preserve) #0 {
entry:
  %av.addr = alloca %struct.av*, align 8
  %keysv.addr = alloca %struct.sv*, align 8
  %can_preserve.addr = alloca i8, align 1
  %ix = alloca i64, align 8
  %svp = alloca %struct.sv**, align 8
  store %struct.av* %av, %struct.av** %av.addr, align 8
  store %struct.sv* %keysv, %struct.sv** %keysv.addr, align 8
  %frombool = zext i1 %can_preserve to i8
  store i8 %frombool, i8* %can_preserve.addr, align 1
  %0 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %0, i32 0, i32 2
  %1 = load i32, i32* %sv_flags, align 4
  %and = and i32 %1, 2097408
  %cmp = icmp eq i32 %and, 256
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %2 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %2, i32 0, i32 0
  %3 = load i8*, i8** %sv_any, align 8
  %4 = bitcast i8* %3 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %4, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %5 = load i64, i64* %xivu_iv, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %call = call i64 @Perl_sv_2iv_flags(%struct.sv* %6, i32 2)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %5, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %ix, align 8
  %7 = load i8, i8* %can_preserve.addr, align 1
  %tobool = trunc i8 %7 to i1
  br i1 %tobool, label %cond.true1, label %cond.false3

cond.true1:                                       ; preds = %cond.end
  %8 = load %struct.av*, %struct.av** %av.addr, align 8
  %9 = load i64, i64* %ix, align 8
  %call2 = call zeroext i1 @Perl_av_exists(%struct.av* %8, i64 %9)
  br i1 %call2, label %if.then, label %if.else

cond.false3:                                      ; preds = %cond.end
  br i1 true, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false3, %cond.true1
  %10 = load %struct.av*, %struct.av** %av.addr, align 8
  %11 = load i64, i64* %ix, align 8
  %call4 = call %struct.sv** @Perl_av_fetch(%struct.av* %10, i64 %11, i32 1)
  store %struct.sv** %call4, %struct.sv*** %svp, align 8
  %12 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool5 = icmp ne %struct.sv** %12, null
  br i1 %tobool5, label %lor.lhs.false, label %if.then7

lor.lhs.false:                                    ; preds = %if.then
  %13 = load %struct.sv**, %struct.sv*** %svp, align 8
  %14 = load %struct.sv*, %struct.sv** %13, align 8
  %tobool6 = icmp ne %struct.sv* %14, null
  br i1 %tobool6, label %if.end, label %if.then7

if.then7:                                         ; preds = %lor.lhs.false, %if.then
  %15 = load i64, i64* %ix, align 8
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_aelem, i64 0, i64 0), i64 %15)
  br label %if.end

if.end:                                           ; preds = %if.then7, %lor.lhs.false
  %16 = load %struct.av*, %struct.av** %av.addr, align 8
  %17 = load i64, i64* %ix, align 8
  %18 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_aelem_flags(%struct.av* %16, i64 %17, %struct.sv** %18, i32 1)
  br label %if.end8

if.else:                                          ; preds = %cond.false3, %cond.true1
  %19 = load %struct.av*, %struct.av** %av.addr, align 8
  %20 = bitcast %struct.av* %19 to i8*
  %21 = bitcast i8* %20 to %struct.av*
  %22 = load i64, i64* %ix, align 8
  call void @Perl_save_adelete(%struct.av* %21, i64 %22)
  br label %if.end8

if.end8:                                          ; preds = %if.else, %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @S_localise_helem_lval(%struct.hv* %hv, %struct.sv* %keysv, i1 zeroext %can_preserve) #0 {
entry:
  %hv.addr = alloca %struct.hv*, align 8
  %keysv.addr = alloca %struct.sv*, align 8
  %can_preserve.addr = alloca i8, align 1
  %he = alloca %struct.he*, align 8
  %svp = alloca %struct.sv**, align 8
  store %struct.hv* %hv, %struct.hv** %hv.addr, align 8
  store %struct.sv* %keysv, %struct.sv** %keysv.addr, align 8
  %frombool = zext i1 %can_preserve to i8
  store i8 %frombool, i8* %can_preserve.addr, align 1
  %0 = load i8, i8* %can_preserve.addr, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %cond.true, label %cond.false3

cond.true:                                        ; preds = %entry
  %1 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %2 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %call = call i8* @Perl_hv_common(%struct.hv* %1, %struct.sv* %2, i8* null, i64 0, i32 0, i32 8, %struct.sv* null, i32 0)
  %tobool1 = icmp ne i8* %call, null
  br i1 %tobool1, label %cond.true2, label %cond.false

cond.true2:                                       ; preds = %cond.true
  br i1 true, label %if.then, label %if.else

cond.false:                                       ; preds = %cond.true
  br i1 false, label %if.then, label %if.else

cond.false3:                                      ; preds = %entry
  br i1 true, label %if.then, label %if.else

if.then:                                          ; preds = %cond.false3, %cond.false, %cond.true2
  %3 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %4 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %call4 = call i8* @Perl_hv_common(%struct.hv* %3, %struct.sv* %4, i8* null, i64 0, i32 0, i32 16, %struct.sv* null, i32 0)
  %5 = bitcast i8* %call4 to %struct.he*
  store %struct.he* %5, %struct.he** %he, align 8
  %6 = load %struct.he*, %struct.he** %he, align 8
  %tobool5 = icmp ne %struct.he* %6, null
  br i1 %tobool5, label %cond.true6, label %cond.false7

cond.true6:                                       ; preds = %if.then
  %7 = load %struct.he*, %struct.he** %he, align 8
  %he_valu = getelementptr inbounds %struct.he, %struct.he* %7, i32 0, i32 2
  %hent_val = bitcast %union.anon.1* %he_valu to %struct.sv**
  br label %cond.end

cond.false7:                                      ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false7, %cond.true6
  %cond = phi %struct.sv** [ %hent_val, %cond.true6 ], [ null, %cond.false7 ]
  store %struct.sv** %cond, %struct.sv*** %svp, align 8
  %8 = load %struct.sv**, %struct.sv*** %svp, align 8
  %tobool8 = icmp ne %struct.sv** %8, null
  br i1 %tobool8, label %lor.lhs.false, label %if.then10

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load %struct.sv**, %struct.sv*** %svp, align 8
  %10 = load %struct.sv*, %struct.sv** %9, align 8
  %tobool9 = icmp ne %struct.sv* %10, null
  br i1 %tobool9, label %if.end, label %if.then10

if.then10:                                        ; preds = %lor.lhs.false, %cond.end
  %11 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  call void (i8*, ...) @Perl_croak(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @PL_no_helem_sv, i64 0, i64 0), i8* %12)
  br label %if.end

if.end:                                           ; preds = %if.then10, %lor.lhs.false
  %13 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %14 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  %15 = load %struct.sv**, %struct.sv*** %svp, align 8
  call void @Perl_save_helem_flags(%struct.hv* %13, %struct.sv* %14, %struct.sv** %15, i32 0)
  br label %if.end11

if.else:                                          ; preds = %cond.false3, %cond.false, %cond.true2
  %16 = load %struct.hv*, %struct.hv** %hv.addr, align 8
  %17 = bitcast %struct.hv* %16 to i8*
  %18 = bitcast i8* %17 to %struct.hv*
  %19 = load %struct.sv*, %struct.sv** %keysv.addr, align 8
  call void @Perl_save_hdelete(%struct.hv* %18, %struct.sv* %19)
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lvref() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %ret = alloca %struct.sv*, align 8
  %elem = alloca %struct.sv*, align 8
  %arg = alloca %struct.sv*, align 8
  %mg = alloca %struct.magic*, align 8
  %mg34 = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %can_preserve = alloca i8, align 1
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %call = call %struct.sv* @Perl_newSV_type(i32 7)
  %call1 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call)
  store %struct.sv* %call1, %struct.sv** %ret, align 8
  %1 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %1, i32 0, i32 6
  %2 = load i8, i8* %op_private, align 1
  %conv = zext i8 %2 to i32
  %and = and i32 %conv, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %3, i32 -1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sv* [ %4, %cond.true ], [ null, %cond.false ]
  store %struct.sv* %cond, %struct.sv** %elem, align 8
  %5 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %5, i32 0, i32 5
  %6 = load i8, i8* %op_flags, align 2
  %conv2 = zext i8 %6 to i32
  %and3 = and i32 %conv2, 64
  %tobool4 = icmp ne i32 %and3, 0
  br i1 %tobool4, label %cond.true5, label %cond.false7

cond.true5:                                       ; preds = %cond.end
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr6 = getelementptr inbounds %struct.sv*, %struct.sv** %7, i32 -1
  store %struct.sv** %incdec.ptr6, %struct.sv*** %sp, align 8
  %8 = load %struct.sv*, %struct.sv** %7, align 8
  br label %cond.end8

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.sv* [ %8, %cond.true5 ], [ null, %cond.false7 ]
  store %struct.sv* %cond9, %struct.sv** %arg, align 8
  %9 = load %struct.sv*, %struct.sv** %ret, align 8
  %10 = load %struct.sv*, %struct.sv** %arg, align 8
  %11 = load %struct.sv*, %struct.sv** %elem, align 8
  %12 = bitcast %struct.sv* %11 to i8*
  %13 = load %struct.sv*, %struct.sv** %elem, align 8
  %tobool10 = icmp ne %struct.sv* %13, null
  br i1 %tobool10, label %cond.true11, label %cond.false12

cond.true11:                                      ; preds = %cond.end8
  br label %cond.end14

cond.false12:                                     ; preds = %cond.end8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 3
  %15 = load i64, i64* %op_targ, align 8
  %conv13 = trunc i64 %15 to i32
  br label %cond.end14

cond.end14:                                       ; preds = %cond.false12, %cond.true11
  %cond15 = phi i32 [ -2, %cond.true11 ], [ %conv13, %cond.false12 ]
  %call16 = call %struct.magic* @Perl_sv_magicext(%struct.sv* %9, %struct.sv* %10, i32 92, %struct.mgvtbl* getelementptr inbounds ([31 x %struct.mgvtbl], [31 x %struct.mgvtbl]* @PL_magic_vtables, i64 0, i64 14), i8* %12, i32 %cond15)
  store %struct.magic* %call16, %struct.magic** %mg, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private17 = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 6
  %17 = load i8, i8* %op_private17, align 1
  %conv18 = zext i8 %17 to i16
  %18 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_private = getelementptr inbounds %struct.magic, %struct.magic* %18, i32 0, i32 2
  store i16 %conv18, i16* %mg_private, align 8
  %19 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private19 = getelementptr inbounds %struct.op, %struct.op* %19, i32 0, i32 6
  %20 = load i8, i8* %op_private19, align 1
  %conv20 = zext i8 %20 to i32
  %and21 = and i32 %conv20, 8
  %tobool22 = icmp ne i32 %and21, 0
  br i1 %tobool22, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end14
  %21 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_flags = getelementptr inbounds %struct.magic, %struct.magic* %21, i32 0, i32 4
  %22 = load i8, i8* %mg_flags, align 1
  %conv23 = zext i8 %22 to i32
  %or = or i32 %conv23, 128
  %conv24 = trunc i32 %or to i8
  store i8 %conv24, i8* %mg_flags, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end14
  %23 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private25 = getelementptr inbounds %struct.op, %struct.op* %23, i32 0, i32 6
  %24 = load i8, i8* %op_private25, align 1
  %conv26 = zext i8 %24 to i32
  %and27 = and i32 %conv26, 128
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %cond.true29, label %cond.false30

cond.true29:                                      ; preds = %if.end
  br i1 true, label %if.then31, label %if.end76

cond.false30:                                     ; preds = %if.end
  br i1 false, label %if.then31, label %if.end76

if.then31:                                        ; preds = %cond.false30, %cond.true29
  %25 = load %struct.sv*, %struct.sv** %elem, align 8
  %tobool32 = icmp ne %struct.sv* %25, null
  br i1 %tobool32, label %if.then33, label %if.else59

if.then33:                                        ; preds = %if.then31
  %26 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags = getelementptr inbounds %struct.sv, %struct.sv* %26, i32 0, i32 2
  %27 = load i32, i32* %sv_flags, align 4
  %and35 = and i32 %27, 8388608
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %if.then33
  %28 = load %struct.sv*, %struct.sv** %arg, align 8
  %call37 = call %struct.magic* @Perl_mg_find(%struct.sv* %28, i32 80)
  store %struct.magic* %call37, %struct.magic** %mg34, align 8
  %tobool38 = icmp ne %struct.magic* %call37, null
  br i1 %tobool38, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %29 = load %struct.magic*, %struct.magic** %mg34, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %29, i32 0, i32 6
  %30 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool39 = icmp ne %struct.sv* %30, null
  br i1 %tobool39, label %cond.true40, label %cond.false42

cond.true40:                                      ; preds = %lor.rhs
  %31 = load %struct.magic*, %struct.magic** %mg34, align 8
  %mg_obj41 = getelementptr inbounds %struct.magic, %struct.magic* %31, i32 0, i32 6
  %32 = load %struct.sv*, %struct.sv** %mg_obj41, align 8
  br label %cond.end45

cond.false42:                                     ; preds = %lor.rhs
  %33 = load %struct.sv*, %struct.sv** %arg, align 8
  %34 = bitcast %struct.sv* %33 to i8*
  %35 = bitcast i8* %34 to %struct.sv*
  %call43 = call %struct.sv* @Perl_newRV(%struct.sv* %35)
  %call44 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call43)
  br label %cond.end45

cond.end45:                                       ; preds = %cond.false42, %cond.true40
  %cond46 = phi %struct.sv* [ %32, %cond.true40 ], [ %call44, %cond.false42 ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond46, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %36 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %36, i32 0, i32 0
  %37 = load i8*, i8** %sv_any, align 8
  %38 = bitcast i8* %37 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %38, i32 0, i32 0
  %39 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %39, %struct.hv** %stash, align 8
  %tobool47 = icmp ne %struct.hv* %39, null
  br i1 %tobool47, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.end45
  %40 = load %struct.hv*, %struct.hv** %stash, align 8
  %call48 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool49 = icmp ne %struct.gv* %call48, null
  br i1 %tobool49, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %41 = load %struct.hv*, %struct.hv** %stash, align 8
  %call50 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %41, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool51 = icmp ne %struct.gv* %call50, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %cond.end45
  %42 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end45 ], [ %tobool51, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %if.then33
  %43 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then33 ], [ %42, %land.end ]
  %frombool = zext i1 %43 to i8
  store i8 %frombool, i8* %can_preserve, align 1
  %44 = load %struct.sv*, %struct.sv** %arg, align 8
  %sv_flags52 = getelementptr inbounds %struct.sv, %struct.sv* %44, i32 0, i32 2
  %45 = load i32, i32* %sv_flags52, align 4
  %and53 = and i32 %45, 255
  %cmp = icmp eq i32 %and53, 11
  br i1 %cmp, label %if.then55, label %if.else

if.then55:                                        ; preds = %lor.end
  %46 = load %struct.sv*, %struct.sv** %arg, align 8
  %47 = bitcast %struct.sv* %46 to %struct.av*
  %48 = load %struct.sv*, %struct.sv** %elem, align 8
  %49 = load i8, i8* %can_preserve, align 1
  %tobool56 = trunc i8 %49 to i1
  call void @S_localise_aelem_lval(%struct.av* %47, %struct.sv* %48, i1 zeroext %tobool56)
  br label %if.end58

if.else:                                          ; preds = %lor.end
  %50 = load %struct.sv*, %struct.sv** %arg, align 8
  %51 = bitcast %struct.sv* %50 to %struct.hv*
  %52 = load %struct.sv*, %struct.sv** %elem, align 8
  %53 = load i8, i8* %can_preserve, align 1
  %tobool57 = trunc i8 %53 to i1
  call void @S_localise_helem_lval(%struct.hv* %51, %struct.sv* %52, i1 zeroext %tobool57)
  br label %if.end58

if.end58:                                         ; preds = %if.else, %if.then55
  br label %if.end75

if.else59:                                        ; preds = %if.then31
  %54 = load %struct.sv*, %struct.sv** %arg, align 8
  %tobool60 = icmp ne %struct.sv* %54, null
  br i1 %tobool60, label %if.then61, label %if.else66

if.then61:                                        ; preds = %if.else59
  %55 = load %struct.sv*, %struct.sv** %arg, align 8
  %56 = bitcast %struct.sv* %55 to %struct.gv*
  %57 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private62 = getelementptr inbounds %struct.op, %struct.op* %57, i32 0, i32 6
  %58 = load i8, i8* %op_private62, align 1
  %conv63 = zext i8 %58 to i32
  %and64 = and i32 %conv63, 48
  %conv65 = trunc i32 %and64 to i8
  call void @S_localise_gv_slot(%struct.gv* %56, i8 zeroext %conv65)
  br label %if.end74

if.else66:                                        ; preds = %if.else59
  %59 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private67 = getelementptr inbounds %struct.op, %struct.op* %59, i32 0, i32 6
  %60 = load i8, i8* %op_private67, align 1
  %conv68 = zext i8 %60 to i32
  %and69 = and i32 %conv68, 64
  %tobool70 = icmp ne i32 %and69, 0
  br i1 %tobool70, label %if.end73, label %if.then71

if.then71:                                        ; preds = %if.else66
  %61 = load %struct.sv**, %struct.sv*** @PL_curpad, align 8
  %62 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_targ72 = getelementptr inbounds %struct.op, %struct.op* %62, i32 0, i32 3
  %63 = load i64, i64* %op_targ72, align 8
  %arrayidx = getelementptr inbounds %struct.sv*, %struct.sv** %61, i64 %63
  call void @Perl_save_clearsv(%struct.sv** %arrayidx)
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %if.else66
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %if.then61
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end58
  br label %if.end76

if.end76:                                         ; preds = %if.end75, %cond.false30, %cond.true29
  br label %do.body

do.body:                                          ; preds = %if.end76
  br label %do.body77

do.body77:                                        ; preds = %do.body
  %64 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %65 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %64 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %65 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp78 = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp78, label %cond.true80, label %cond.false81

cond.true80:                                      ; preds = %do.body77
  br i1 true, label %if.then82, label %if.end84

cond.false81:                                     ; preds = %do.body77
  br i1 false, label %if.then82, label %if.end84

if.then82:                                        ; preds = %cond.false81, %cond.true80
  %66 = load %struct.sv**, %struct.sv*** %sp, align 8
  %67 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call83 = call %struct.sv** @Perl_stack_grow(%struct.sv** %66, %struct.sv** %67, i64 1)
  store %struct.sv** %call83, %struct.sv*** %sp, align 8
  %68 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %cond.false81, %cond.true80
  br label %do.end

do.end:                                           ; preds = %if.end84
  %69 = load %struct.sv*, %struct.sv** %ret, align 8
  %70 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr85 = getelementptr inbounds %struct.sv*, %struct.sv** %70, i32 1
  store %struct.sv** %incdec.ptr85, %struct.sv*** %sp, align 8
  store %struct.sv* %69, %struct.sv** %incdec.ptr85, align 8
  br label %do.end86

do.end86:                                         ; preds = %do.end
  %71 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %71, %struct.sv*** @PL_stack_sp, align 8
  %72 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %72, i32 0, i32 0
  %73 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %73
}

declare dso_local %struct.magic* @Perl_sv_magicext(%struct.sv*, %struct.sv*, i32, %struct.mgvtbl*, i8*, i32) #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lvrefslice() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %mark = alloca %struct.sv**, align 8
  %av = alloca %struct.av*, align 8
  %localizing = alloca i8, align 1
  %can_preserve = alloca i8, align 1
  %mg = alloca %struct.magic*, align 8
  %stash = alloca %struct.hv*, align 8
  %svp = alloca %struct.sv**, align 8
  %max = alloca i64, align 8
  %elem = alloca i64, align 8
  %elemsv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** @PL_stack_base, align 8
  %2 = load i32*, i32** @PL_markstack_ptr, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %2, i32 -1
  store i32* %incdec.ptr, i32** @PL_markstack_ptr, align 8
  %3 = load i32, i32* %2, align 4
  %idx.ext = sext i32 %3 to i64
  %add.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %1, i64 %idx.ext
  store %struct.sv** %add.ptr, %struct.sv*** %mark, align 8
  %4 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr1 = getelementptr inbounds %struct.sv*, %struct.sv** %4, i32 -1
  store %struct.sv** %incdec.ptr1, %struct.sv*** %sp, align 8
  %5 = load %struct.sv*, %struct.sv** %4, align 8
  %6 = bitcast %struct.sv* %5 to %struct.av*
  store %struct.av* %6, %struct.av** %av, align 8
  %7 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_private = getelementptr inbounds %struct.op, %struct.op* %7, i32 0, i32 6
  %8 = load i8, i8* %op_private, align 1
  %conv = zext i8 %8 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  %frombool = zext i1 %tobool to i8
  store i8 %frombool, i8* %localizing, align 1
  store i8 0, i8* %can_preserve, align 1
  %9 = load i8, i8* %localizing, align 1
  %tobool2 = trunc i8 %9 to i1
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br i1 true, label %if.then, label %if.end46

cond.false:                                       ; preds = %entry
  br i1 false, label %if.then, label %if.end46

if.then:                                          ; preds = %cond.false, %cond.true
  %10 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags = getelementptr inbounds %struct.av, %struct.av* %10, i32 0, i32 2
  %11 = load i32, i32* %sv_flags, align 4
  %and4 = and i32 %11, 8388608
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %lor.lhs.false, label %lor.end

lor.lhs.false:                                    ; preds = %if.then
  %12 = load %struct.av*, %struct.av** %av, align 8
  %13 = bitcast %struct.av* %12 to %struct.sv*
  %call = call %struct.magic* @Perl_mg_find(%struct.sv* %13, i32 80)
  store %struct.magic* %call, %struct.magic** %mg, align 8
  %tobool6 = icmp ne %struct.magic* %call, null
  br i1 %tobool6, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %lor.lhs.false
  %14 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj = getelementptr inbounds %struct.magic, %struct.magic* %14, i32 0, i32 6
  %15 = load %struct.sv*, %struct.sv** %mg_obj, align 8
  %tobool7 = icmp ne %struct.sv* %15, null
  br i1 %tobool7, label %cond.true8, label %cond.false10

cond.true8:                                       ; preds = %lor.rhs
  %16 = load %struct.magic*, %struct.magic** %mg, align 8
  %mg_obj9 = getelementptr inbounds %struct.magic, %struct.magic* %16, i32 0, i32 6
  %17 = load %struct.sv*, %struct.sv** %mg_obj9, align 8
  br label %cond.end

cond.false10:                                     ; preds = %lor.rhs
  %18 = load %struct.av*, %struct.av** %av, align 8
  %19 = bitcast %struct.av* %18 to i8*
  %20 = bitcast i8* %19 to %struct.sv*
  %call11 = call %struct.sv* @Perl_newRV(%struct.sv* %20)
  %call12 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false10, %cond.true8
  %cond = phi %struct.sv* [ %17, %cond.true8 ], [ %call12, %cond.false10 ]
  %sv_u = getelementptr inbounds %struct.sv, %struct.sv* %cond, i32 0, i32 3
  %svu_rv = bitcast %union.anon* %sv_u to %struct.sv**
  %21 = load %struct.sv*, %struct.sv** %svu_rv, align 8
  %sv_any = getelementptr inbounds %struct.sv, %struct.sv* %21, i32 0, i32 0
  %22 = load i8*, i8** %sv_any, align 8
  %23 = bitcast i8* %22 to %struct.xpvmg*
  %xmg_stash = getelementptr inbounds %struct.xpvmg, %struct.xpvmg* %23, i32 0, i32 0
  %24 = load %struct.hv*, %struct.hv** %xmg_stash, align 8
  store %struct.hv* %24, %struct.hv** %stash, align 8
  %tobool13 = icmp ne %struct.hv* %24, null
  br i1 %tobool13, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %cond.end
  %25 = load %struct.hv*, %struct.hv** %stash, align 8
  %call14 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %25, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i64 0, i64 0), i32 1)
  %tobool15 = icmp ne %struct.gv* %call14, null
  br i1 %tobool15, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %26 = load %struct.hv*, %struct.hv** %stash, align 8
  %call16 = call %struct.gv* @Perl_gv_fetchmethod_autoload(%struct.hv* %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i64 0, i64 0), i32 1)
  %tobool17 = icmp ne %struct.gv* %call16, null
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %cond.end
  %27 = phi i1 [ false, %land.lhs.true ], [ false, %cond.end ], [ %tobool17, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %lor.lhs.false, %if.then
  %28 = phi i1 [ true, %lor.lhs.false ], [ true, %if.then ], [ %27, %land.end ]
  %frombool18 = zext i1 %28 to i8
  store i8 %frombool18, i8* %can_preserve, align 1
  %29 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags19 = getelementptr inbounds %struct.av, %struct.av* %29, i32 0, i32 2
  %30 = load i32, i32* %sv_flags19, align 4
  %and20 = and i32 %30, 255
  %cmp = icmp eq i32 %and20, 11
  br i1 %cmp, label %if.then22, label %if.end45

if.then22:                                        ; preds = %lor.end
  store i64 -1, i64* %max, align 8
  %31 = load %struct.sv**, %struct.sv*** %mark, align 8
  %add.ptr23 = getelementptr inbounds %struct.sv*, %struct.sv** %31, i64 1
  store %struct.sv** %add.ptr23, %struct.sv*** %svp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then22
  %32 = load %struct.sv**, %struct.sv*** %svp, align 8
  %33 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp24 = icmp ule %struct.sv** %32, %33
  br i1 %cmp24, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.sv**, %struct.sv*** %svp, align 8
  %35 = load %struct.sv*, %struct.sv** %34, align 8
  %sv_flags26 = getelementptr inbounds %struct.sv, %struct.sv* %35, i32 0, i32 2
  %36 = load i32, i32* %sv_flags26, align 4
  %and27 = and i32 %36, 2097408
  %cmp28 = icmp eq i32 %and27, 256
  br i1 %cmp28, label %cond.true30, label %cond.false32

cond.true30:                                      ; preds = %for.body
  %37 = load %struct.sv**, %struct.sv*** %svp, align 8
  %38 = load %struct.sv*, %struct.sv** %37, align 8
  %sv_any31 = getelementptr inbounds %struct.sv, %struct.sv* %38, i32 0, i32 0
  %39 = load i8*, i8** %sv_any31, align 8
  %40 = bitcast i8* %39 to %struct.xpviv*
  %xiv_u = getelementptr inbounds %struct.xpviv, %struct.xpviv* %40, i32 0, i32 4
  %xivu_iv = bitcast %union._xivu* %xiv_u to i64*
  %41 = load i64, i64* %xivu_iv, align 8
  br label %cond.end34

cond.false32:                                     ; preds = %for.body
  %42 = load %struct.sv**, %struct.sv*** %svp, align 8
  %43 = load %struct.sv*, %struct.sv** %42, align 8
  %call33 = call i64 @Perl_sv_2iv_flags(%struct.sv* %43, i32 2)
  br label %cond.end34

cond.end34:                                       ; preds = %cond.false32, %cond.true30
  %cond35 = phi i64 [ %41, %cond.true30 ], [ %call33, %cond.false32 ]
  store i64 %cond35, i64* %elem, align 8
  %44 = load i64, i64* %elem, align 8
  %45 = load i64, i64* %max, align 8
  %cmp36 = icmp sgt i64 %44, %45
  br i1 %cmp36, label %if.then38, label %if.end

if.then38:                                        ; preds = %cond.end34
  %46 = load i64, i64* %elem, align 8
  store i64 %46, i64* %max, align 8
  br label %if.end

if.end:                                           ; preds = %if.then38, %cond.end34
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %47 = load %struct.sv**, %struct.sv*** %svp, align 8
  %incdec.ptr39 = getelementptr inbounds %struct.sv*, %struct.sv** %47, i32 1
  store %struct.sv** %incdec.ptr39, %struct.sv*** %svp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %48 = load i64, i64* %max, align 8
  %49 = load %struct.av*, %struct.av** %av, align 8
  %sv_any40 = getelementptr inbounds %struct.av, %struct.av* %49, i32 0, i32 0
  %50 = load %struct.xpvav*, %struct.xpvav** %sv_any40, align 8
  %xav_max = getelementptr inbounds %struct.xpvav, %struct.xpvav* %50, i32 0, i32 3
  %51 = load i64, i64* %xav_max, align 8
  %cmp41 = icmp sgt i64 %48, %51
  br i1 %cmp41, label %if.then43, label %if.end44

if.then43:                                        ; preds = %for.end
  %52 = load %struct.av*, %struct.av** %av, align 8
  %53 = load i64, i64* %max, align 8
  call void @Perl_av_extend(%struct.av* %52, i64 %53)
  br label %if.end44

if.end44:                                         ; preds = %if.then43, %for.end
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %lor.end
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %cond.false, %cond.true
  br label %while.cond

while.cond:                                       ; preds = %if.end57, %if.end46
  %54 = load %struct.sv**, %struct.sv*** %mark, align 8
  %incdec.ptr47 = getelementptr inbounds %struct.sv*, %struct.sv** %54, i32 1
  store %struct.sv** %incdec.ptr47, %struct.sv*** %mark, align 8
  %55 = load %struct.sv**, %struct.sv*** %sp, align 8
  %cmp48 = icmp ule %struct.sv** %incdec.ptr47, %55
  br i1 %cmp48, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %56 = load %struct.sv**, %struct.sv*** %mark, align 8
  %57 = load %struct.sv*, %struct.sv** %56, align 8
  store %struct.sv* %57, %struct.sv** %elemsv, align 8
  %58 = load %struct.av*, %struct.av** %av, align 8
  %sv_flags50 = getelementptr inbounds %struct.av, %struct.av* %58, i32 0, i32 2
  %59 = load i32, i32* %sv_flags50, align 4
  %and51 = and i32 %59, 255
  %cmp52 = icmp eq i32 %and51, 11
  br i1 %cmp52, label %if.then54, label %if.else

if.then54:                                        ; preds = %while.body
  %60 = load %struct.av*, %struct.av** %av, align 8
  %61 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %62 = load i8, i8* %can_preserve, align 1
  %tobool55 = trunc i8 %62 to i1
  call void @S_localise_aelem_lval(%struct.av* %60, %struct.sv* %61, i1 zeroext %tobool55)
  br label %if.end57

if.else:                                          ; preds = %while.body
  %63 = load %struct.av*, %struct.av** %av, align 8
  %64 = bitcast %struct.av* %63 to %struct.hv*
  %65 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %66 = load i8, i8* %can_preserve, align 1
  %tobool56 = trunc i8 %66 to i1
  call void @S_localise_helem_lval(%struct.hv* %64, %struct.sv* %65, i1 zeroext %tobool56)
  br label %if.end57

if.end57:                                         ; preds = %if.else, %if.then54
  %call58 = call %struct.sv* @Perl_newSV_type(i32 7)
  %call59 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %call58)
  %67 = load %struct.sv**, %struct.sv*** %mark, align 8
  store %struct.sv* %call59, %struct.sv** %67, align 8
  %68 = load %struct.sv**, %struct.sv*** %mark, align 8
  %69 = load %struct.sv*, %struct.sv** %68, align 8
  %70 = load %struct.av*, %struct.av** %av, align 8
  %71 = bitcast %struct.av* %70 to %struct.sv*
  %72 = load %struct.sv*, %struct.sv** %elemsv, align 8
  %73 = bitcast %struct.sv* %72 to i8*
  call void @Perl_sv_magic(%struct.sv* %69, %struct.sv* %71, i32 92, i8* %73, i32 -2)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %74 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %74, %struct.sv*** @PL_stack_sp, align 8
  %75 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %75, i32 0, i32 0
  %76 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %76
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_lvavref() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_flags = getelementptr inbounds %struct.op, %struct.op* %0, i32 0, i32 5
  %1 = load i8, i8* %op_flags, align 2
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 64
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct.op* @Perl_pp_rv2av()
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call %struct.op* @Perl_pp_padav()
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %2 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %2, %struct.sv*** %sp, align 8
  %3 = load %struct.sv**, %struct.sv*** %sp, align 8
  %4 = load %struct.sv*, %struct.sv** %3, align 8
  store %struct.sv* %4, %struct.sv** %sv, align 8
  %5 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* null, %struct.sv** %5, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  br label %do.body2

do.body2:                                         ; preds = %do.body
  %6 = load %struct.sv**, %struct.sv*** @PL_stack_max, align 8
  %7 = load %struct.sv**, %struct.sv*** %sp, align 8
  %sub.ptr.lhs.cast = ptrtoint %struct.sv** %6 to i64
  %sub.ptr.rhs.cast = ptrtoint %struct.sv** %7 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub, 8
  %cmp = icmp slt i64 %sub.ptr.div, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.body2
  br i1 true, label %if.then4, label %if.end6

cond.false:                                       ; preds = %do.body2
  br i1 false, label %if.then4, label %if.end6

if.then4:                                         ; preds = %cond.false, %cond.true
  %8 = load %struct.sv**, %struct.sv*** %sp, align 8
  %9 = load %struct.sv**, %struct.sv*** %sp, align 8
  %call5 = call %struct.sv** @Perl_stack_grow(%struct.sv** %8, %struct.sv** %9, i64 1)
  store %struct.sv** %call5, %struct.sv*** %sp, align 8
  %10 = load %struct.sv**, %struct.sv*** %sp, align 8
  br label %if.end6

if.end6:                                          ; preds = %if.then4, %cond.false, %cond.true
  br label %do.end

do.end:                                           ; preds = %if.end6
  %11 = load %struct.sv*, %struct.sv** %sv, align 8
  %12 = load %struct.sv**, %struct.sv*** %sp, align 8
  %incdec.ptr = getelementptr inbounds %struct.sv*, %struct.sv** %12, i32 1
  store %struct.sv** %incdec.ptr, %struct.sv*** %sp, align 8
  store %struct.sv* %11, %struct.sv** %incdec.ptr, align 8
  br label %do.end7

do.end7:                                          ; preds = %do.end
  %13 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %13, %struct.sv*** @PL_stack_sp, align 8
  %14 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %14, i32 0, i32 0
  %15 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %15
}

declare dso_local %struct.op* @Perl_pp_rv2av() #1

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.op* @Perl_pp_anonconst() #0 {
entry:
  %sp = alloca %struct.sv**, align 8
  %sv = alloca %struct.sv*, align 8
  %0 = load %struct.sv**, %struct.sv*** @PL_stack_sp, align 8
  store %struct.sv** %0, %struct.sv*** %sp, align 8
  %1 = load %struct.sv**, %struct.sv*** %sp, align 8
  %2 = load %struct.sv*, %struct.sv** %1, align 8
  store %struct.sv* %2, %struct.sv** %sv, align 8
  %3 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash = getelementptr inbounds %struct.cop, %struct.cop* %3, i32 0, i32 8
  %4 = load %struct.hv*, %struct.hv** %cop_stash, align 8
  %sv_flags = getelementptr inbounds %struct.hv, %struct.hv* %4, i32 0, i32 2
  %5 = load i32, i32* %sv_flags, align 4
  %and = and i32 %5, 255
  %cmp = icmp eq i32 %and, 12
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %6 = load %struct.cop*, %struct.cop** @PL_curcop, align 8
  %cop_stash1 = getelementptr inbounds %struct.cop, %struct.cop* %6, i32 0, i32 8
  %7 = load %struct.hv*, %struct.hv** %cop_stash1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.hv* [ %7, %cond.true ], [ null, %cond.false ]
  %8 = load %struct.sv*, %struct.sv** %sv, align 8
  %sv_refcnt = getelementptr inbounds %struct.sv, %struct.sv* %8, i32 0, i32 1
  %9 = load i32, i32* %sv_refcnt, align 8
  %inc = add i32 %9, 1
  store i32 %inc, i32* %sv_refcnt, align 8
  %10 = load %struct.sv*, %struct.sv** %sv, align 8
  %11 = bitcast %struct.sv* %10 to i8*
  %12 = bitcast i8* %11 to %struct.sv*
  %call = call %struct.cv* @Perl_newCONSTSUB(%struct.hv* %cond, i8* null, %struct.sv* %12)
  %13 = bitcast %struct.cv* %call to %struct.sv*
  %call2 = call %struct.sv* @Perl_sv_2mortal(%struct.sv* %13)
  %14 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv* %call2, %struct.sv** %14, align 8
  %15 = load %struct.sv**, %struct.sv*** %sp, align 8
  store %struct.sv** %15, %struct.sv*** @PL_stack_sp, align 8
  %16 = load %struct.op*, %struct.op** @PL_op, align 8
  %op_next = getelementptr inbounds %struct.op, %struct.op* %16, i32 0, i32 0
  %17 = load %struct.op*, %struct.op** %op_next, align 8
  ret %struct.op* %17
}

declare dso_local %struct.cv* @Perl_newCONSTSUB(%struct.hv*, i8*, %struct.sv*) #1

declare dso_local void @Perl_gv_init_pvn(%struct.gv*, %struct.hv*, i8*, i64, i32) #1

declare dso_local void @Perl_gv_init_sv(%struct.gv*, %struct.hv*, %struct.sv*, i32) #1

declare dso_local %struct.gv* @Perl_newGVgen_flags(i8*, i32) #1

declare dso_local void @Perl_vivify_defelem(%struct.sv*) #1

declare dso_local i32 @Perl_hv_iterinit(%struct.hv*) #1

declare dso_local i8* @Perl_bytes_to_utf8(i8*, i64*) #1

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #2

declare dso_local %struct.gv* @Perl_cvgv_from_hek(%struct.cv*) #1

declare dso_local void @Perl_sv_catsv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local i32 @Perl_looks_like_number(%struct.sv*) #1

declare dso_local void @Perl_sv_copypv_flags(%struct.sv*, %struct.sv*, i32) #1

declare dso_local void @Perl_sv_free2(%struct.sv*, i32) #1

declare dso_local i32 @Perl_mg_clear(%struct.sv*) #1

declare dso_local %struct.av* @Perl_save_ary(%struct.gv*) #1

declare dso_local %struct.hv* @Perl_save_hash(%struct.gv*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable willreturn }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { nounwind }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
