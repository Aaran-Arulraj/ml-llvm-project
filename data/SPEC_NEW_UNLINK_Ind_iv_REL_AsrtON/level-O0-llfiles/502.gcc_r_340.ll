; ModuleID = 'tree-ssa-dom.c'
source_filename = "tree-ssa-dom.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.opt_stats_d = type { i64, i64, i64, i64, i64 }
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.VEC_expr_hash_elt_t_heap = type { %struct.VEC_expr_hash_elt_t_base }
%struct.VEC_expr_hash_elt_t_base = type { i32, i32, [1 x %struct.expr_hash_elt*] }
%struct.expr_hash_elt = type { %union.tree_node*, %struct.hashable_expr, %union.gimple_statement_d*, i32, %struct.expr_hash_elt* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.hashable_expr = type { %union.tree_node*, i32, %union.anon.0 }
%union.anon.0 = type { %struct.anon.3 }
%struct.anon.3 = type { %union.tree_node*, i8, i64, %union.tree_node** }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.dom_walk_data = type { i8, void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, void (%struct.dom_walk_data*, %struct.basic_block_def*)*, i8*, %struct.VEC_void_p_heap*, i64, %struct.VEC_void_p_heap* }
%struct.VEC_void_p_heap = type { %struct.VEC_void_p_base }
%struct.VEC_void_p_base = type { i32, i32, [1 x i8*] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.edge_info = type { %union.tree_node*, %union.tree_node*, %struct.cond_equivalence*, i32 }
%struct.cond_equivalence = type { %struct.hashable_expr, %union.tree_node* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.anon = type { %union.tree_node* }
%struct.anon.1 = type { i32, %union.tree_node* }
%struct.anon.2 = type { i32, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_real_cst = type { %struct.tree_common, %struct.real_value* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.gimple_statement_with_ops = type { %struct.gimple_statement_with_ops_base, [1 x %union.tree_node*] }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }

@.str = private unnamed_addr constant [4 x i8] c"dom\00", align 1
@pass_dominator = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_dominator, i32 ()* @tree_ssa_dominator_optimize, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 62, i32 40, i32 0, i32 0, i32 0, i32 2085 } }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [53 x i8] c"Total number of statements:                   %6ld\0A\0A\00", align 1
@opt_stats = internal global %struct.opt_stats_d zeroinitializer, align 8, !dbg !3084
@.str.2 = private unnamed_addr constant [52 x i8] c"Exprs considered for dominator optimizations: %6ld\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"\0AHash table statistics:\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"    avail_exprs: \00", align 1
@avail_exprs = internal global %struct.htab* null, align 8, !dbg !3082
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.5 = private unnamed_addr constant [9 x i8] c"phicprop\00", align 1
@pass_phi_only_cprop = dso_local global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i32 0, i32 0), i8 ()* @gate_dominator, i32 ()* @eliminate_degenerate_phis, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 66, i32 40, i32 0, i32 0, i32 0, i32 2103 } }, align 8, !dbg !3054
@flag_tree_dom = external dso_local global i32, align 4
@avail_exprs_stack = internal global %struct.VEC_expr_hash_elt_t_heap* null, align 8, !dbg !3093
@const_and_copies_stack = internal global %struct.VEC_tree_heap* null, align 8, !dbg !3095
@need_eh_cleanup = internal global %struct.bitmap_head_def* null, align 8, !dbg !3097
@cfg_altered = internal global i8 0, align 1, !dbg !3099
@cfun = external dso_local global %struct.function*, align 8
@first_pass_instance = external dso_local global i8, align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"Redundant expressions eliminated\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"Constants propagated\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"Copies propagated\00", align 1
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@ssa_name_values = external dso_local global %struct.VEC_tree_heap*, align 8
@.str.9 = private unnamed_addr constant [15 x i8] c"tree-ssa-dom.c\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"\0A\0AOptimizing block #%d\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@mode_class = external dso_local constant [87 x i8], align 16
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_signed_zeros = external dso_local global i32, align 4
@dconst0 = external dso_local global %struct.real_value, align 8
@.str.13 = private unnamed_addr constant [11 x i8] c"0>>> COPY \00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c" = \00", align 1
@.str.15 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"1>>> \00", align 1
@.str.17 = private unnamed_addr constant [6 x i8] c"STMT \00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"COND \00", align 1
@.str.19 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@tree_code_name = external dso_local constant [0 x i8*], align 8
@.str.20 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c" (\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str.24 = private unnamed_addr constant [11 x i8] c"          \00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"Optimizing statement \00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c"  Folded to: \00", align 1
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@.str.27 = private unnamed_addr constant [30 x i8] c"  Flagged to clear EH edges.\0A\00", align 1
@.str.28 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@.str.29 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c"  Replaced '\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c"' with %s '\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"constant\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"variable\00", align 1
@.str.34 = private unnamed_addr constant [3 x i8] c"'\0A\00", align 1
@gimple_rhs_class_table = external dso_local constant [0 x i8], align 1
@.str.35 = private unnamed_addr constant [28 x i8] c"  Replaced redundant expr '\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"' with '\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"LKUP \00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"2>>> \00", align 1
@.str.39 = private unnamed_addr constant [7 x i8] c"FIND: \00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"==== ASGN \00", align 1
@tree_code_type = external dso_local constant [0 x i32], align 4
@.str.41 = private unnamed_addr constant [6 x i8] c"<<<< \00", align 1
@.str.42 = private unnamed_addr constant [11 x i8] c"<<<< COPY \00", align 1
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.43 = private unnamed_addr constant [51 x i8] c"size %ld, %ld elements, %f collision/search ratio\0A\00", align 1
@flag_var_tracking_assignments = external dso_local global i32, align 4
@.str.44 = private unnamed_addr constant [14 x i8] c"  Replacing '\00", align 1
@.str.45 = private unnamed_addr constant [24 x i8] c"    Original statement:\00", align 1
@.str.46 = private unnamed_addr constant [23 x i8] c"    Updated statement:\00", align 1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_dominator() #0 !dbg !3105 {
entry:
  %0 = load i32, i32* @flag_tree_dom, align 4, !dbg !3107
  %cmp = icmp ne i32 %0, 0, !dbg !3108
  %conv = zext i1 %cmp to i32, !dbg !3108
  %conv1 = trunc i32 %conv to i8, !dbg !3107
  ret i8 %conv1, !dbg !3109
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tree_ssa_dominator_optimize() #0 !dbg !3110 {
entry:
  %walk_data = alloca %struct.dom_walk_data, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %bb27 = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data* %walk_data, metadata !3111, metadata !DIExpression()), !dbg !3143
  call void @llvm.memset.p0i8.i64(i8* align 8 bitcast (%struct.opt_stats_d* @opt_stats to i8*), i8 0, i64 40, i1 false), !dbg !3144
  %call = call %struct.htab* @htab_create(i64 1024, i32 (i8*)* @real_avail_expr_hash, i32 (i8*, i8*)* @avail_expr_eq, void (i8*)* @free_expr_hash_elt), !dbg !3145
  store %struct.htab* %call, %struct.htab** @avail_exprs, align 8, !dbg !3146
  %call1 = call %struct.VEC_expr_hash_elt_t_heap* @VEC_expr_hash_elt_t_heap_alloc(i32 20), !dbg !3147
  store %struct.VEC_expr_hash_elt_t_heap* %call1, %struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, align 8, !dbg !3148
  %call2 = call %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 20), !dbg !3149
  store %struct.VEC_tree_heap* %call2, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !3150
  %call3 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3151
  store %struct.bitmap_head_def* %call3, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3152
  %0 = bitcast %struct.dom_walk_data* %walk_data to i8*, !dbg !3153
  %bf.load = load i8, i8* %0, align 8, !dbg !3154
  %bf.clear = and i8 %bf.load, -4, !dbg !3154
  %bf.set = or i8 %bf.clear, 1, !dbg !3154
  store i8 %bf.set, i8* %0, align 8, !dbg !3154
  %initialize_block_local_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 1, !dbg !3155
  store void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)* null, void (%struct.dom_walk_data*, %struct.basic_block_def*, i8)** %initialize_block_local_data, align 8, !dbg !3156
  %before_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 2, !dbg !3157
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @dom_opt_enter_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %before_dom_children, align 8, !dbg !3158
  %after_dom_children = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 3, !dbg !3159
  store void (%struct.dom_walk_data*, %struct.basic_block_def*)* @dom_opt_leave_block, void (%struct.dom_walk_data*, %struct.basic_block_def*)** %after_dom_children, align 8, !dbg !3160
  %global_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 4, !dbg !3161
  store i8* null, i8** %global_data, align 8, !dbg !3162
  %block_local_data_size = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %walk_data, i32 0, i32 6, !dbg !3163
  store i64 0, i64* %block_local_data_size, align 8, !dbg !3164
  call void @init_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3165
  call void @calculate_dominance_info(i32 1), !dbg !3166
  store i8 0, i8* @cfg_altered, align 1, !dbg !3167
  call void @loop_optimizer_init(i32 2), !dbg !3168
  call void @threadedge_initialize_values(), !dbg !3169
  %call4 = call zeroext i8 @mark_dfs_back_edges(), !dbg !3170
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3171
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !3171
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3171
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3171
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !3171
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3171
  call void @walk_dominator_tree(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %3), !dbg !3172
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3173, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3182, metadata !DIExpression()), !dbg !3183
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3184
  %add.ptr5 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !3184
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %add.ptr5, i32 0, i32 1, !dbg !3184
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !3184
  %x_entry_block_ptr7 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 0, !dbg !3184
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr7, align 8, !dbg !3184
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 6, !dbg !3184
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3184
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !3184
  br label %for.cond, !dbg !3184

for.cond:                                         ; preds = %for.inc14, %entry
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3186
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3186
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3186
  %cfg9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 1, !dbg !3186
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg9, align 8, !dbg !3186
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 1, !dbg !3186
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3186
  %cmp = icmp ne %struct.basic_block_def* %8, %11, !dbg !3186
  br i1 %cmp, label %for.body, label %for.end16, !dbg !3184

for.body:                                         ; preds = %for.cond
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3188
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %12), !dbg !3191
  %13 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3191
  %14 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3191
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 24, i1 false), !dbg !3191
  br label %for.cond10, !dbg !3192

for.cond10:                                       ; preds = %for.inc, %for.body
  %call11 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3193
  %tobool = icmp ne i8 %call11, 0, !dbg !3195
  %lnot = xor i1 %tobool, true, !dbg !3195
  br i1 %lnot, label %for.body12, label %for.end, !dbg !3196

for.body12:                                       ; preds = %for.cond10
  %call13 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3197
  call void @update_stmt_if_modified(%union.gimple_statement_d* %call13), !dbg !3198
  br label %for.inc, !dbg !3198

for.inc:                                          ; preds = %for.body12
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3199
  br label %for.cond10, !dbg !3200, !llvm.loop !3201

for.end:                                          ; preds = %for.cond10
  br label %for.inc14, !dbg !3203

for.inc14:                                        ; preds = %for.end
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3186
  %next_bb15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 6, !dbg !3186
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb15, align 8, !dbg !3186
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !3186
  br label %for.cond, !dbg !3186, !llvm.loop !3204

for.end16:                                        ; preds = %for.cond
  call void @update_ssa(i32 2048), !dbg !3206
  call void @free_all_edge_infos(), !dbg !3207
  %17 = load i8, i8* @first_pass_instance, align 1, !dbg !3208
  %call17 = call zeroext i8 @thread_through_all_blocks(i8 zeroext %17), !dbg !3209
  %conv = zext i8 %call17 to i32, !dbg !3209
  %18 = load i8, i8* @cfg_altered, align 1, !dbg !3210
  %conv18 = zext i8 %18 to i32, !dbg !3210
  %or = or i32 %conv18, %conv, !dbg !3210
  %conv19 = trunc i32 %or to i8, !dbg !3210
  store i8 %conv19, i8* @cfg_altered, align 1, !dbg !3210
  %19 = load i8, i8* @cfg_altered, align 1, !dbg !3211
  %tobool20 = icmp ne i8 %19, 0, !dbg !3211
  br i1 %tobool20, label %if.then, label %if.end, !dbg !3213

if.then:                                          ; preds = %for.end16
  call void @free_dominance_info(i32 1), !dbg !3214
  br label %if.end, !dbg !3214

if.end:                                           ; preds = %if.then, %for.end16
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3215
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %20, i32 0, i32 0, !dbg !3215
  %21 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3215
  %tobool21 = icmp ne %struct.bitmap_element_def* %21, null, !dbg !3215
  br i1 %tobool21, label %if.then22, label %if.end50, !dbg !3217

if.then22:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3218, metadata !DIExpression()), !dbg !3220
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3221, metadata !DIExpression()), !dbg !3229
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3230
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %22, i32 0, i32* %i), !dbg !3230
  br label %for.cond23, !dbg !3230

for.cond23:                                       ; preds = %for.inc47, %if.then22
  %call24 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3232
  %tobool25 = icmp ne i8 %call24, 0, !dbg !3230
  br i1 %tobool25, label %for.body26, label %for.end48, !dbg !3230

for.body26:                                       ; preds = %for.cond23
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb27, metadata !3234, metadata !DIExpression()), !dbg !3236
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3237
  %add.ptr28 = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, !dbg !3237
  %cfg29 = getelementptr inbounds %struct.function, %struct.function* %add.ptr28, i32 0, i32 1, !dbg !3237
  %24 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg29, align 8, !dbg !3237
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %24, i32 0, i32 2, !dbg !3237
  %25 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !3237
  %tobool30 = icmp ne %struct.VEC_basic_block_gc* %25, null, !dbg !3237
  br i1 %tobool30, label %cond.true, label %cond.false, !dbg !3237

cond.true:                                        ; preds = %for.body26
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3237
  %add.ptr31 = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, !dbg !3237
  %cfg32 = getelementptr inbounds %struct.function, %struct.function* %add.ptr31, i32 0, i32 1, !dbg !3237
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg32, align 8, !dbg !3237
  %x_basic_block_info33 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i32 0, i32 2, !dbg !3237
  %28 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info33, align 8, !dbg !3237
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %28, i32 0, i32 0, !dbg !3237
  br label %cond.end, !dbg !3237

cond.false:                                       ; preds = %for.body26
  br label %cond.end, !dbg !3237

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3237
  %29 = load i32, i32* %i, align 4, !dbg !3237
  %call34 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %29), !dbg !3237
  store %struct.basic_block_def* %call34, %struct.basic_block_def** %bb27, align 8, !dbg !3236
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb27, align 8, !dbg !3238
  %call35 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %30), !dbg !3240
  %conv36 = zext i8 %call35 to i32, !dbg !3240
  %cmp37 = icmp eq i32 %conv36, 1, !dbg !3241
  br i1 %cmp37, label %land.lhs.true, label %if.end46, !dbg !3242

land.lhs.true:                                    ; preds = %cond.end
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb27, align 8, !dbg !3243
  %call39 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %31), !dbg !3244
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call39, i32 0, i32 7, !dbg !3245
  %32 = load i32, i32* %flags, align 8, !dbg !3245
  %and = and i32 %32, 8, !dbg !3246
  %cmp40 = icmp eq i32 %and, 0, !dbg !3247
  br i1 %cmp40, label %if.then42, label %if.end46, !dbg !3248

if.then42:                                        ; preds = %land.lhs.true
  %33 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3249
  %34 = load i32, i32* %i, align 4, !dbg !3251
  %call43 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %33, i32 %34), !dbg !3252
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3253
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb27, align 8, !dbg !3254
  %call44 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %36), !dbg !3255
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call44, i32 0, i32 9, !dbg !3256
  %37 = load i32, i32* %index, align 8, !dbg !3256
  %call45 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %35, i32 %37), !dbg !3257
  br label %if.end46, !dbg !3258

if.end46:                                         ; preds = %if.then42, %land.lhs.true, %cond.end
  br label %for.inc47, !dbg !3259

for.inc47:                                        ; preds = %if.end46
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3232
  br label %for.cond23, !dbg !3232, !llvm.loop !3260

for.end48:                                        ; preds = %for.cond23
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3262
  %call49 = call zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def* %38), !dbg !3263
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3264
  call void @bitmap_clear(%struct.bitmap_head_def* %39), !dbg !3264
  br label %if.end50, !dbg !3265

if.end50:                                         ; preds = %for.end48, %if.end
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3266
  %add.ptr51 = getelementptr inbounds %struct.function, %struct.function* %40, i64 0, !dbg !3266
  %41 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 2), align 8, !dbg !3267
  %conv52 = trunc i64 %41 to i32, !dbg !3268
  call void @statistics_counter_event(%struct.function* %add.ptr51, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i32 %conv52), !dbg !3269
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3270
  %add.ptr53 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !3270
  %43 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 3), align 8, !dbg !3271
  %conv54 = trunc i64 %43 to i32, !dbg !3272
  call void @statistics_counter_event(%struct.function* %add.ptr53, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i32 %conv54), !dbg !3273
  %44 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3274
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, !dbg !3274
  %45 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 4), align 8, !dbg !3275
  %conv56 = trunc i64 %45 to i32, !dbg !3276
  call void @statistics_counter_event(%struct.function* %add.ptr55, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i32 %conv56), !dbg !3277
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3278
  %tobool57 = icmp ne %struct._IO_FILE* %46, null, !dbg !3278
  br i1 %tobool57, label %land.lhs.true58, label %if.end62, !dbg !3280

land.lhs.true58:                                  ; preds = %if.end50
  %47 = load i32, i32* @dump_flags, align 4, !dbg !3281
  %and59 = and i32 %47, 16, !dbg !3282
  %tobool60 = icmp ne i32 %and59, 0, !dbg !3282
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !3283

if.then61:                                        ; preds = %land.lhs.true58
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3284
  call void @dump_dominator_optimization_stats(%struct._IO_FILE* %48), !dbg !3285
  br label %if.end62, !dbg !3285

if.end62:                                         ; preds = %if.then61, %land.lhs.true58, %if.end50
  call void @loop_optimizer_finalize(), !dbg !3286
  %49 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !3287
  call void @htab_delete(%struct.htab* %49), !dbg !3288
  call void @fini_walk_dominator_tree(%struct.dom_walk_data* %walk_data), !dbg !3289
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3290
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %50), !dbg !3290
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3290
  call void @VEC_expr_hash_elt_t_heap_free(%struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack), !dbg !3291
  call void @VEC_tree_heap_free(%struct.VEC_tree_heap** @const_and_copies_stack), !dbg !3292
  call void @threadedge_finalize_values(), !dbg !3293
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !3294
  ret i32 0, !dbg !3295
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @dump_dominator_optimization_stats(%struct._IO_FILE* %file) #0 !dbg !3296 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3350, metadata !DIExpression()), !dbg !3351
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3352
  %1 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 0), align 8, !dbg !3353
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0), i64 %1), !dbg !3354
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3355
  %3 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 1), align 8, !dbg !3356
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i64 %3), !dbg !3357
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3358
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0)), !dbg !3359
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3360
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0)), !dbg !3361
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3362
  %7 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !3363
  call void @htab_statistics(%struct._IO_FILE* %6, %struct.htab* %7), !dbg !3364
  ret void, !dbg !3365
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define internal void @htab_statistics(%struct._IO_FILE* %file, %struct.htab* %htab) #0 !dbg !3366 {
entry:
  %file.addr = alloca %struct._IO_FILE*, align 8
  %htab.addr = alloca %struct.htab*, align 8
  store %struct._IO_FILE* %file, %struct._IO_FILE** %file.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %file.addr, metadata !3369, metadata !DIExpression()), !dbg !3370
  store %struct.htab* %htab, %struct.htab** %htab.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.htab** %htab.addr, metadata !3371, metadata !DIExpression()), !dbg !3372
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %file.addr, align 8, !dbg !3373
  %1 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3374
  %call = call i64 @htab_size(%struct.htab* %1), !dbg !3375
  %2 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3376
  %call1 = call i64 @htab_elements(%struct.htab* %2), !dbg !3377
  %3 = load %struct.htab*, %struct.htab** %htab.addr, align 8, !dbg !3378
  %call2 = call double @htab_collisions(%struct.htab* %3), !dbg !3379
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.43, i64 0, i64 0), i64 %call, i64 %call1, double %call2), !dbg !3380
  ret void, !dbg !3381
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_dominator_optimization_stats() #0 !dbg !3382 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3385
  call void @dump_dominator_optimization_stats(%struct._IO_FILE* %0), !dbg !3386
  ret void, !dbg !3387
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @loop_depth_of_name(%union.tree_node* %x) #0 !dbg !3388 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %union.tree_node*, align 8
  %defstmt = alloca %union.gimple_statement_d*, align 8
  %defbb = alloca %struct.basic_block_def*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !3391, metadata !DIExpression()), !dbg !3392
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %defstmt, metadata !3393, metadata !DIExpression()), !dbg !3394
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %defbb, metadata !3395, metadata !DIExpression()), !dbg !3396
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3397
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3397
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3397
  %bf.load = load i64, i64* %1, align 8, !dbg !3397
  %bf.clear = and i64 %bf.load, 65535, !dbg !3397
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3397
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !3399
  br i1 %cmp, label %if.then, label %if.end, !dbg !3400

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !3401
  br label %return, !dbg !3401

if.end:                                           ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !3402
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !3402
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3402
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3402
  store %union.gimple_statement_d* %3, %union.gimple_statement_d** %defstmt, align 8, !dbg !3403
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !3404
  %call = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4), !dbg !3405
  store %struct.basic_block_def* %call, %struct.basic_block_def** %defbb, align 8, !dbg !3406
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %defbb, align 8, !dbg !3407
  %tobool = icmp ne %struct.basic_block_def* %5, null, !dbg !3407
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !3409

if.then1:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3410
  br label %return, !dbg !3410

if.end2:                                          ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %defbb, align 8, !dbg !3411
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 10, !dbg !3412
  %7 = load i32, i32* %loop_depth, align 4, !dbg !3412
  store i32 %7, i32* %retval, align 4, !dbg !3413
  br label %return, !dbg !3413

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !3414
  ret i32 %8, !dbg !3414
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) #0 !dbg !3415 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !3419, metadata !DIExpression()), !dbg !3420
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !3421
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !3422
  %bb = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 4, !dbg !3423
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3423
  ret %struct.basic_block_def* %1, !dbg !3424
}

; Function Attrs: noinline nounwind uwtable
define dso_local %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d* %phi) #0 !dbg !3425 {
entry:
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %arg = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !3428, metadata !DIExpression()), !dbg !3429
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3430, metadata !DIExpression()), !dbg !3431
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3432
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !3433
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !3431
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !3434, metadata !DIExpression()), !dbg !3435
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !3435
  call void @llvm.dbg.declare(metadata i64* %i, metadata !3436, metadata !DIExpression()), !dbg !3437
  store i64 0, i64* %i, align 8, !dbg !3438
  br label %for.cond, !dbg !3440

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8, !dbg !3441
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3443
  %call1 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %2), !dbg !3444
  %conv = zext i32 %call1 to i64, !dbg !3444
  %cmp = icmp ult i64 %1, %conv, !dbg !3445
  br i1 %cmp, label %for.body, label %for.end, !dbg !3446

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !3447, metadata !DIExpression()), !dbg !3449
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3450
  %4 = load i64, i64* %i, align 8, !dbg !3451
  %call3 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %3, i64 %4), !dbg !3452
  store %union.tree_node* %call3, %union.tree_node** %arg, align 8, !dbg !3449
  %5 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3453
  %6 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3455
  %cmp4 = icmp eq %union.tree_node* %5, %6, !dbg !3456
  br i1 %cmp4, label %if.then, label %if.else, !dbg !3457

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !3458

if.else:                                          ; preds = %for.body
  %7 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3459
  %tobool = icmp ne %union.tree_node* %7, null, !dbg !3459
  br i1 %tobool, label %if.else7, label %if.then6, !dbg !3461

if.then6:                                         ; preds = %if.else
  br label %for.end, !dbg !3462

if.else7:                                         ; preds = %if.else
  %8 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3463
  %tobool8 = icmp ne %union.tree_node* %8, null, !dbg !3463
  br i1 %tobool8, label %if.else10, label %if.then9, !dbg !3465

if.then9:                                         ; preds = %if.else7
  %9 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3466
  store %union.tree_node* %9, %union.tree_node** %val, align 8, !dbg !3467
  br label %if.end32, !dbg !3468

if.else10:                                        ; preds = %if.else7
  %10 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3469
  %11 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3471
  %cmp11 = icmp eq %union.tree_node* %10, %11, !dbg !3472
  br i1 %cmp11, label %if.then13, label %if.else14, !dbg !3473

if.then13:                                        ; preds = %if.else10
  br label %for.inc, !dbg !3474

if.else14:                                        ; preds = %if.else10
  %12 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3475
  %base = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !3475
  %13 = bitcast %struct.tree_base* %base to i64*, !dbg !3475
  %bf.load = load i64, i64* %13, align 8, !dbg !3475
  %bf.clear = and i64 %bf.load, 65535, !dbg !3475
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3475
  %14 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3477
  %base15 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !3477
  %15 = bitcast %struct.tree_base* %base15 to i64*, !dbg !3477
  %bf.load16 = load i64, i64* %15, align 8, !dbg !3477
  %bf.clear17 = and i64 %bf.load16, 65535, !dbg !3477
  %bf.cast18 = trunc i64 %bf.clear17 to i32, !dbg !3477
  %cmp19 = icmp ne i32 %bf.cast, %bf.cast18, !dbg !3478
  br i1 %cmp19, label %if.then30, label %lor.lhs.false, !dbg !3479

lor.lhs.false:                                    ; preds = %if.else14
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3480
  %base21 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !3480
  %17 = bitcast %struct.tree_base* %base21 to i64*, !dbg !3480
  %bf.load22 = load i64, i64* %17, align 8, !dbg !3480
  %bf.clear23 = and i64 %bf.load22, 65535, !dbg !3480
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !3480
  %cmp25 = icmp eq i32 %bf.cast24, 141, !dbg !3481
  br i1 %cmp25, label %if.then30, label %lor.lhs.false27, !dbg !3482

lor.lhs.false27:                                  ; preds = %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !3483
  %19 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3484
  %call28 = call i32 @operand_equal_p(%union.tree_node* %18, %union.tree_node* %19, i32 0), !dbg !3485
  %tobool29 = icmp ne i32 %call28, 0, !dbg !3485
  br i1 %tobool29, label %if.end, label %if.then30, !dbg !3486

if.then30:                                        ; preds = %lor.lhs.false27, %lor.lhs.false, %if.else14
  br label %for.end, !dbg !3487

if.end:                                           ; preds = %lor.lhs.false27
  br label %if.end31

if.end31:                                         ; preds = %if.end
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then9
  br label %if.end33

if.end33:                                         ; preds = %if.end32
  br label %if.end34

if.end34:                                         ; preds = %if.end33
  br label %for.inc, !dbg !3488

for.inc:                                          ; preds = %if.end34, %if.then13, %if.then
  %20 = load i64, i64* %i, align 8, !dbg !3489
  %inc = add i64 %20, 1, !dbg !3489
  store i64 %inc, i64* %i, align 8, !dbg !3489
  br label %for.cond, !dbg !3490, !llvm.loop !3491

for.end:                                          ; preds = %if.then30, %if.then6, %for.cond
  %21 = load i64, i64* %i, align 8, !dbg !3493
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !3494
  %call35 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %22), !dbg !3495
  %conv36 = zext i32 %call35 to i64, !dbg !3495
  %cmp37 = icmp eq i64 %21, %conv36, !dbg !3496
  br i1 %cmp37, label %cond.true, label %cond.false, !dbg !3493

cond.true:                                        ; preds = %for.end
  %23 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3497
  br label %cond.end, !dbg !3493

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !3493

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %23, %cond.true ], [ null, %cond.false ], !dbg !3493
  ret %union.tree_node* %cond, !dbg !3498
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) #0 !dbg !3499 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3502, metadata !DIExpression()), !dbg !3503
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3504
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3505
  %result = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 3, !dbg !3506
  %1 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !3506
  ret %union.tree_node* %1, !dbg !3507
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) #0 !dbg !3508 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3511, metadata !DIExpression()), !dbg !3512
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3513
  %gimple_phi = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_phi*, !dbg !3514
  %nargs = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 2, !dbg !3515
  %1 = load i32, i32* %nargs, align 4, !dbg !3515
  ret i32 %1, !dbg !3516
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %gs, i64 %index) #0 !dbg !3517 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i64, align 8
  %pd = alloca %struct.phi_arg_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3521, metadata !DIExpression()), !dbg !3522
  store i64 %index, i64* %index.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %index.addr, metadata !3523, metadata !DIExpression()), !dbg !3524
  call void @llvm.dbg.declare(metadata %struct.phi_arg_d** %pd, metadata !3525, metadata !DIExpression()), !dbg !3527
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3528
  %1 = load i64, i64* %index.addr, align 8, !dbg !3529
  %conv = trunc i64 %1 to i32, !dbg !3529
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %conv), !dbg !3530
  store %struct.phi_arg_d* %call, %struct.phi_arg_d** %pd, align 8, !dbg !3527
  %2 = load %struct.phi_arg_d*, %struct.phi_arg_d** %pd, align 8, !dbg !3531
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %2, i32 0, i32 0, !dbg !3532
  %call1 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %imm_use), !dbg !3533
  ret %union.tree_node* %call1, !dbg !3534
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @eliminate_degenerate_phis() #0 !dbg !3535 {
entry:
  %interesting_names = alloca %struct.bitmap_head_def*, align 8
  %interesting_names1 = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %name = alloca %union.tree_node*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %interesting_names, metadata !3536, metadata !DIExpression()), !dbg !3537
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %interesting_names1, metadata !3538, metadata !DIExpression()), !dbg !3539
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3540
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3541
  %call1 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3542
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3543
  %call2 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3544
  store %struct.bitmap_head_def* %call2, %struct.bitmap_head_def** %interesting_names1, align 8, !dbg !3545
  call void @calculate_dominance_info(i32 1), !dbg !3546
  store i8 0, i8* @cfg_altered, align 1, !dbg !3547
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3548
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3548
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3548
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3548
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !3548
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3548
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3549
  call void @eliminate_degenerate_phis_1(%struct.basic_block_def* %2, %struct.bitmap_head_def* %3), !dbg !3550
  br label %while.cond, !dbg !3551

while.cond:                                       ; preds = %for.end, %entry
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3552
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %4, i32 0, i32 0, !dbg !3552
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3552
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !3552
  %lnot = xor i1 %tobool, true, !dbg !3552
  %lnot3 = xor i1 %lnot, true, !dbg !3553
  br i1 %lnot3, label %while.body, label %while.end, !dbg !3551

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3554, metadata !DIExpression()), !dbg !3556
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3557, metadata !DIExpression()), !dbg !3558
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names1, align 8, !dbg !3559
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3560
  call void @bitmap_copy(%struct.bitmap_head_def* %6, %struct.bitmap_head_def* %7), !dbg !3561
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names1, align 8, !dbg !3562
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %8, i32 0, i32* %i), !dbg !3562
  br label %for.cond, !dbg !3562

for.cond:                                         ; preds = %for.inc, %while.body
  %call4 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3564
  %tobool5 = icmp ne i8 %call4, 0, !dbg !3562
  br i1 %tobool5, label %for.body, label %for.end, !dbg !3562

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %name, metadata !3566, metadata !DIExpression()), !dbg !3568
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3569
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !3569
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 3, !dbg !3569
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3569
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i32 0, i32 2, !dbg !3569
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3569
  %tobool7 = icmp ne %struct.VEC_tree_gc* %11, null, !dbg !3569
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !3569

cond.true:                                        ; preds = %for.body
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3569
  %add.ptr8 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !3569
  %gimple_df9 = getelementptr inbounds %struct.function, %struct.function* %add.ptr8, i32 0, i32 3, !dbg !3569
  %13 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df9, align 8, !dbg !3569
  %ssa_names10 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %13, i32 0, i32 2, !dbg !3569
  %14 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names10, align 8, !dbg !3569
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %14, i32 0, i32 0, !dbg !3569
  br label %cond.end, !dbg !3569

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !3569

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3569
  %15 = load i32, i32* %i, align 4, !dbg !3569
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %15), !dbg !3569
  store %union.tree_node* %call11, %union.tree_node** %name, align 8, !dbg !3568
  %16 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3570
  %tobool12 = icmp ne %union.tree_node* %16, null, !dbg !3570
  br i1 %tobool12, label %if.then, label %if.end, !dbg !3572

if.then:                                          ; preds = %cond.end
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3573
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !3573
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %add.ptr13, i32 0, i32 3, !dbg !3573
  %18 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !3573
  %ssa_names15 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %18, i32 0, i32 2, !dbg !3573
  %19 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names15, align 8, !dbg !3573
  %tobool16 = icmp ne %struct.VEC_tree_gc* %19, null, !dbg !3573
  br i1 %tobool16, label %cond.true17, label %cond.false22, !dbg !3573

cond.true17:                                      ; preds = %if.then
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3573
  %add.ptr18 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !3573
  %gimple_df19 = getelementptr inbounds %struct.function, %struct.function* %add.ptr18, i32 0, i32 3, !dbg !3573
  %21 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df19, align 8, !dbg !3573
  %ssa_names20 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %21, i32 0, i32 2, !dbg !3573
  %22 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names20, align 8, !dbg !3573
  %base21 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %22, i32 0, i32 0, !dbg !3573
  br label %cond.end23, !dbg !3573

cond.false22:                                     ; preds = %if.then
  br label %cond.end23, !dbg !3573

cond.end23:                                       ; preds = %cond.false22, %cond.true17
  %cond24 = phi %struct.VEC_tree_base* [ %base21, %cond.true17 ], [ null, %cond.false22 ], !dbg !3573
  %23 = load i32, i32* %i, align 4, !dbg !3573
  %call25 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond24, i32 %23), !dbg !3573
  %ssa_name = bitcast %union.tree_node* %call25 to %struct.tree_ssa_name*, !dbg !3573
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !3573
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !3573
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3574
  call void @eliminate_const_or_copy(%union.gimple_statement_d* %24, %struct.bitmap_head_def* %25), !dbg !3575
  br label %if.end, !dbg !3575

if.end:                                           ; preds = %cond.end23, %cond.end
  br label %for.inc, !dbg !3576

for.inc:                                          ; preds = %if.end
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !3564
  br label %for.cond, !dbg !3564, !llvm.loop !3577

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !3551, !llvm.loop !3579

while.end:                                        ; preds = %while.cond
  %26 = load i8, i8* @cfg_altered, align 1, !dbg !3581
  %tobool26 = icmp ne i8 %26, 0, !dbg !3581
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !3583

if.then27:                                        ; preds = %while.end
  call void @free_dominance_info(i32 1), !dbg !3584
  br label %if.end28, !dbg !3584

if.end28:                                         ; preds = %if.then27, %while.end
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3585
  %first29 = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %27, i32 0, i32 0, !dbg !3585
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first29, align 8, !dbg !3585
  %tobool30 = icmp ne %struct.bitmap_element_def* %28, null, !dbg !3585
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !3587

if.then31:                                        ; preds = %if.end28
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3588
  %call32 = call zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def* %29), !dbg !3590
  %30 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3591
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %30), !dbg !3591
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !3591
  br label %if.end33, !dbg !3592

if.end33:                                         ; preds = %if.then31, %if.end28
  %31 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3593
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %31), !dbg !3593
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %interesting_names, align 8, !dbg !3593
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names1, align 8, !dbg !3594
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %32), !dbg !3594
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %interesting_names1, align 8, !dbg !3594
  ret i32 0, !dbg !3595
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @real_avail_expr_hash(i8* %p) #0 !dbg !3596 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !3597, metadata !DIExpression()), !dbg !3598
  %0 = load i8*, i8** %p.addr, align 8, !dbg !3599
  %1 = bitcast i8* %0 to %struct.expr_hash_elt*, !dbg !3600
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %1, i32 0, i32 3, !dbg !3601
  %2 = load i32, i32* %hash, align 8, !dbg !3601
  ret i32 %2, !dbg !3602
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @avail_expr_eq(i8* %p1, i8* %p2) #0 !dbg !3603 {
entry:
  %retval = alloca i32, align 4
  %p1.addr = alloca i8*, align 8
  %p2.addr = alloca i8*, align 8
  %stmt1 = alloca %union.gimple_statement_d*, align 8
  %expr1 = alloca %struct.hashable_expr*, align 8
  %stamp1 = alloca %struct.expr_hash_elt*, align 8
  %stmt2 = alloca %union.gimple_statement_d*, align 8
  %expr2 = alloca %struct.hashable_expr*, align 8
  %stamp2 = alloca %struct.expr_hash_elt*, align 8
  store i8* %p1, i8** %p1.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p1.addr, metadata !3604, metadata !DIExpression()), !dbg !3605
  store i8* %p2, i8** %p2.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p2.addr, metadata !3606, metadata !DIExpression()), !dbg !3607
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt1, metadata !3608, metadata !DIExpression()), !dbg !3609
  %0 = load i8*, i8** %p1.addr, align 8, !dbg !3610
  %1 = bitcast i8* %0 to %struct.expr_hash_elt*, !dbg !3611
  %stmt = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %1, i32 0, i32 2, !dbg !3612
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3612
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt1, align 8, !dbg !3609
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr1, metadata !3613, metadata !DIExpression()), !dbg !3616
  %3 = load i8*, i8** %p1.addr, align 8, !dbg !3617
  %4 = bitcast i8* %3 to %struct.expr_hash_elt*, !dbg !3618
  %expr = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %4, i32 0, i32 1, !dbg !3619
  store %struct.hashable_expr* %expr, %struct.hashable_expr** %expr1, align 8, !dbg !3616
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %stamp1, metadata !3620, metadata !DIExpression()), !dbg !3621
  %5 = load i8*, i8** %p1.addr, align 8, !dbg !3622
  %6 = bitcast i8* %5 to %struct.expr_hash_elt*, !dbg !3623
  %stamp = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %6, i32 0, i32 4, !dbg !3624
  %7 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %stamp, align 8, !dbg !3624
  store %struct.expr_hash_elt* %7, %struct.expr_hash_elt** %stamp1, align 8, !dbg !3621
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt2, metadata !3625, metadata !DIExpression()), !dbg !3626
  %8 = load i8*, i8** %p2.addr, align 8, !dbg !3627
  %9 = bitcast i8* %8 to %struct.expr_hash_elt*, !dbg !3628
  %stmt3 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %9, i32 0, i32 2, !dbg !3629
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt3, align 8, !dbg !3629
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %stmt2, align 8, !dbg !3626
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr2, metadata !3630, metadata !DIExpression()), !dbg !3631
  %11 = load i8*, i8** %p2.addr, align 8, !dbg !3632
  %12 = bitcast i8* %11 to %struct.expr_hash_elt*, !dbg !3633
  %expr4 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %12, i32 0, i32 1, !dbg !3634
  store %struct.hashable_expr* %expr4, %struct.hashable_expr** %expr2, align 8, !dbg !3631
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %stamp2, metadata !3635, metadata !DIExpression()), !dbg !3636
  %13 = load i8*, i8** %p2.addr, align 8, !dbg !3637
  %14 = bitcast i8* %13 to %struct.expr_hash_elt*, !dbg !3638
  %stamp5 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %14, i32 0, i32 4, !dbg !3639
  %15 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %stamp5, align 8, !dbg !3639
  store %struct.expr_hash_elt* %15, %struct.expr_hash_elt** %stamp2, align 8, !dbg !3636
  %16 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %stamp1, align 8, !dbg !3640
  %17 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %stamp2, align 8, !dbg !3642
  %cmp = icmp eq %struct.expr_hash_elt* %16, %17, !dbg !3643
  br i1 %cmp, label %if.then, label %if.end, !dbg !3644

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !3645
  br label %return, !dbg !3645

if.end:                                           ; preds = %entry
  %18 = load i8*, i8** %p1.addr, align 8, !dbg !3646
  %19 = bitcast i8* %18 to %struct.expr_hash_elt*, !dbg !3648
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %19, i32 0, i32 3, !dbg !3649
  %20 = load i32, i32* %hash, align 8, !dbg !3649
  %21 = load i8*, i8** %p2.addr, align 8, !dbg !3650
  %22 = bitcast i8* %21 to %struct.expr_hash_elt*, !dbg !3651
  %hash6 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %22, i32 0, i32 3, !dbg !3652
  %23 = load i32, i32* %hash6, align 8, !dbg !3652
  %cmp7 = icmp ne i32 %20, %23, !dbg !3653
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !3654

if.then8:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !3655
  br label %return, !dbg !3655

if.end9:                                          ; preds = %if.end
  %24 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1, align 8, !dbg !3656
  %25 = load %struct.hashable_expr*, %struct.hashable_expr** %expr2, align 8, !dbg !3658
  %call = call zeroext i8 @hashable_expr_equal_p(%struct.hashable_expr* %24, %struct.hashable_expr* %25), !dbg !3659
  %conv = zext i8 %call to i32, !dbg !3659
  %tobool = icmp ne i32 %conv, 0, !dbg !3659
  br i1 %tobool, label %land.lhs.true, label %if.end25, !dbg !3660

land.lhs.true:                                    ; preds = %if.end9
  %26 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1, align 8, !dbg !3661
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %26, i32 0, i32 0, !dbg !3662
  %27 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3662
  %28 = load %struct.hashable_expr*, %struct.hashable_expr** %expr2, align 8, !dbg !3663
  %type10 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %28, i32 0, i32 0, !dbg !3664
  %29 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !3664
  %call11 = call zeroext i8 @types_compatible_p(%union.tree_node* %27, %union.tree_node* %29), !dbg !3665
  %conv12 = zext i8 %call11 to i32, !dbg !3665
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !3665
  br i1 %tobool13, label %if.then14, label %if.end25, !dbg !3666

if.then14:                                        ; preds = %land.lhs.true
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !3667
  %tobool15 = icmp ne %union.gimple_statement_d* %30, null, !dbg !3667
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !3667

cond.true:                                        ; preds = %if.then14
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !3669
  %call16 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %31), !dbg !3670
  br label %cond.end, !dbg !3667

cond.false:                                       ; preds = %if.then14
  br label %cond.end, !dbg !3667

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call16, %cond.true ], [ null, %cond.false ], !dbg !3667
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !3671
  %tobool17 = icmp ne %union.gimple_statement_d* %32, null, !dbg !3671
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !3671

cond.true18:                                      ; preds = %cond.end
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt2, align 8, !dbg !3672
  %call19 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %33), !dbg !3673
  br label %cond.end21, !dbg !3671

cond.false20:                                     ; preds = %cond.end
  br label %cond.end21, !dbg !3671

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %union.tree_node* [ %call19, %cond.true18 ], [ null, %cond.false20 ], !dbg !3671
  %cmp23 = icmp eq %union.tree_node* %cond, %cond22, !dbg !3674
  %conv24 = zext i1 %cmp23 to i32, !dbg !3674
  store i32 %conv24, i32* %retval, align 4, !dbg !3675
  br label %return, !dbg !3675

if.end25:                                         ; preds = %land.lhs.true, %if.end9
  store i32 0, i32* %retval, align 4, !dbg !3676
  br label %return, !dbg !3676

return:                                           ; preds = %if.end25, %cond.end21, %if.then8, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !3677
  ret i32 %34, !dbg !3677
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_expr_hash_elt(i8* %elt) #0 !dbg !3678 {
entry:
  %elt.addr = alloca i8*, align 8
  %element = alloca %struct.expr_hash_elt*, align 8
  store i8* %elt, i8** %elt.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %elt.addr, metadata !3679, metadata !DIExpression()), !dbg !3680
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element, metadata !3681, metadata !DIExpression()), !dbg !3682
  %0 = load i8*, i8** %elt.addr, align 8, !dbg !3683
  %1 = bitcast i8* %0 to %struct.expr_hash_elt*, !dbg !3684
  store %struct.expr_hash_elt* %1, %struct.expr_hash_elt** %element, align 8, !dbg !3682
  %2 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !3685
  %expr = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %2, i32 0, i32 1, !dbg !3687
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr, i32 0, i32 1, !dbg !3688
  %3 = load i32, i32* %kind, align 8, !dbg !3688
  %cmp = icmp eq i32 %3, 3, !dbg !3689
  br i1 %cmp, label %if.then, label %if.end, !dbg !3690

if.then:                                          ; preds = %entry
  %4 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !3691
  %expr1 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %4, i32 0, i32 1, !dbg !3692
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr1, i32 0, i32 2, !dbg !3693
  %call = bitcast %union.anon.0* %ops to %struct.anon.3*, !dbg !3694
  %args = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call, i32 0, i32 3, !dbg !3695
  %5 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !3695
  %6 = bitcast %union.tree_node** %5 to i8*, !dbg !3691
  call void @free(i8* %6), !dbg !3696
  br label %if.end, !dbg !3696

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !3697
  %8 = bitcast %struct.expr_hash_elt* %7 to i8*, !dbg !3697
  call void @free(i8* %8), !dbg !3698
  ret void, !dbg !3699
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_expr_hash_elt_t_heap* @VEC_expr_hash_elt_t_heap_alloc(i32 %alloc_) #0 !dbg !3700 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3703, metadata !DIExpression()), !dbg !3704
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3704
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3704
  %1 = bitcast i8* %call to %struct.VEC_expr_hash_elt_t_heap*, !dbg !3704
  ret %struct.VEC_expr_hash_elt_t_heap* %1, !dbg !3704
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) #0 !dbg !3705 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !3708, metadata !DIExpression()), !dbg !3709
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !3709
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !3709
  %1 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !3709
  ret %struct.VEC_tree_heap* %1, !dbg !3709
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dom_opt_enter_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !3710 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !3711, metadata !DIExpression()), !dbg !3712
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3713, metadata !DIExpression()), !dbg !3714
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3715, metadata !DIExpression()), !dbg !3716
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3717
  %tobool = icmp ne %struct._IO_FILE* %0, null, !dbg !3717
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3719

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3720
  %and = and i32 %1, 8, !dbg !3721
  %tobool1 = icmp ne i32 %and, 0, !dbg !3721
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3722

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3723
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3724
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !3725
  %4 = load i32, i32* %index, align 8, !dbg !3725
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i32 %4), !dbg !3726
  br label %if.end, !dbg !3726

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call2 = call %struct.expr_hash_elt** @VEC_expr_hash_elt_t_heap_safe_push(%struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, %struct.expr_hash_elt* null), !dbg !3727
  %call3 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @const_and_copies_stack, %union.tree_node* null), !dbg !3728
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3729
  call void @record_equivalences_from_incoming_edge(%struct.basic_block_def* %5), !dbg !3730
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3731
  call void @record_equivalences_from_phis(%struct.basic_block_def* %6), !dbg !3732
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3733
  call void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %7), !dbg !3735
  %8 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3735
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3735
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 24, i1 false), !dbg !3735
  br label %for.cond, !dbg !3736

for.cond:                                         ; preds = %for.inc, %if.end
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3737
  %tobool5 = icmp ne i8 %call4, 0, !dbg !3739
  %lnot = xor i1 %tobool5, true, !dbg !3739
  br i1 %lnot, label %for.body, label %for.end, !dbg !3740

for.body:                                         ; preds = %for.cond
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3741
  call void @optimize_stmt(%struct.basic_block_def* %10, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !3742
  br label %for.inc, !dbg !3742

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !3743
  br label %for.cond, !dbg !3744, !llvm.loop !3745

for.end:                                          ; preds = %for.cond
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3747
  call void @record_edge_info(%struct.basic_block_def* %11), !dbg !3748
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3749
  call void @cprop_into_successor_phis(%struct.basic_block_def* %12), !dbg !3750
  ret void, !dbg !3751
}

; Function Attrs: noinline nounwind uwtable
define internal void @dom_opt_leave_block(%struct.dom_walk_data* %walk_data, %struct.basic_block_def* %bb) #0 !dbg !3752 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %last = alloca %union.gimple_statement_d*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %edge_info = alloca %struct.edge_info*, align 8
  %i = alloca i32, align 4
  %cond_equivalences = alloca %struct.cond_equivalence*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %edge_info77 = alloca %struct.edge_info*, align 8
  %i78 = alloca i32, align 4
  %cond_equivalences83 = alloca %struct.cond_equivalence*, align 8
  %lhs85 = alloca %union.tree_node*, align 8
  %rhs87 = alloca %union.tree_node*, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %last, metadata !3757, metadata !DIExpression()), !dbg !3758
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3759
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !3761
  %conv = zext i8 %call to i32, !dbg !3761
  %tobool = icmp ne i32 %conv, 0, !dbg !3761
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !3762

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3763
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %1), !dbg !3764
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call1, i32 0, i32 7, !dbg !3765
  %2 = load i32, i32* %flags, align 8, !dbg !3765
  %and = and i32 %2, 2, !dbg !3766
  %cmp = icmp eq i32 %and, 0, !dbg !3767
  br i1 %cmp, label %land.lhs.true3, label %if.else, !dbg !3768

land.lhs.true3:                                   ; preds = %land.lhs.true
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3769
  %call4 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %3), !dbg !3770
  %call5 = call zeroext i8 @potentially_threadable_block(%struct.basic_block_def* %call4), !dbg !3771
  %conv6 = zext i8 %call5 to i32, !dbg !3771
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !3771
  br i1 %tobool7, label %if.then, label %if.else, !dbg !3772

if.then:                                          ; preds = %land.lhs.true3
  %4 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !3773
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3775
  %call8 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %5), !dbg !3776
  call void @dom_thread_across_edge(%struct.dom_walk_data* %4, %struct.edge_def* %call8), !dbg !3777
  br label %if.end115, !dbg !3778

if.else:                                          ; preds = %land.lhs.true3, %land.lhs.true, %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3779
  %call9 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %6), !dbg !3781
  store %union.gimple_statement_d* %call9, %union.gimple_statement_d** %last, align 8, !dbg !3782
  %tobool10 = icmp ne %union.gimple_statement_d* %call9, null, !dbg !3782
  br i1 %tobool10, label %land.lhs.true11, label %if.end114, !dbg !3783

land.lhs.true11:                                  ; preds = %if.else
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %last, align 8, !dbg !3784
  %call12 = call i32 @gimple_code(%union.gimple_statement_d* %7), !dbg !3785
  %cmp13 = icmp eq i32 %call12, 1, !dbg !3786
  br i1 %cmp13, label %land.lhs.true15, label %if.end114, !dbg !3787

land.lhs.true15:                                  ; preds = %land.lhs.true11
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3788
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !3788
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3788
  %tobool16 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !3788
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !3788

cond.true:                                        ; preds = %land.lhs.true15
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3788
  %succs17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !3788
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs17, align 8, !dbg !3788
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !3788
  br label %cond.end, !dbg !3788

cond.false:                                       ; preds = %land.lhs.true15
  br label %cond.end, !dbg !3788

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3788
  %call18 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !3788
  %cmp19 = icmp eq i32 %call18, 2, !dbg !3789
  br i1 %cmp19, label %land.lhs.true21, label %if.end114, !dbg !3790

land.lhs.true21:                                  ; preds = %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3791
  %succs22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !3791
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs22, align 8, !dbg !3791
  %tobool23 = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !3791
  br i1 %tobool23, label %cond.true24, label %cond.false27, !dbg !3791

cond.true24:                                      ; preds = %land.lhs.true21
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3791
  %succs25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !3791
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs25, align 8, !dbg !3791
  %base26 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !3791
  br label %cond.end28, !dbg !3791

cond.false27:                                     ; preds = %land.lhs.true21
  br label %cond.end28, !dbg !3791

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi %struct.VEC_edge_base* [ %base26, %cond.true24 ], [ null, %cond.false27 ], !dbg !3791
  %call30 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond29, i32 0), !dbg !3791
  %flags31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call30, i32 0, i32 7, !dbg !3792
  %16 = load i32, i32* %flags31, align 8, !dbg !3792
  %and32 = and i32 %16, 2, !dbg !3793
  %cmp33 = icmp eq i32 %and32, 0, !dbg !3794
  br i1 %cmp33, label %land.lhs.true35, label %if.end114, !dbg !3795

land.lhs.true35:                                  ; preds = %cond.end28
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3796
  %succs36 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !3796
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs36, align 8, !dbg !3796
  %tobool37 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !3796
  br i1 %tobool37, label %cond.true38, label %cond.false41, !dbg !3796

cond.true38:                                      ; preds = %land.lhs.true35
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3796
  %succs39 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !3796
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs39, align 8, !dbg !3796
  %base40 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !3796
  br label %cond.end42, !dbg !3796

cond.false41:                                     ; preds = %land.lhs.true35
  br label %cond.end42, !dbg !3796

cond.end42:                                       ; preds = %cond.false41, %cond.true38
  %cond43 = phi %struct.VEC_edge_base* [ %base40, %cond.true38 ], [ null, %cond.false41 ], !dbg !3796
  %call44 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond43, i32 1), !dbg !3796
  %flags45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call44, i32 0, i32 7, !dbg !3797
  %21 = load i32, i32* %flags45, align 8, !dbg !3797
  %and46 = and i32 %21, 2, !dbg !3798
  %cmp47 = icmp eq i32 %and46, 0, !dbg !3799
  br i1 %cmp47, label %if.then49, label %if.end114, !dbg !3800

if.then49:                                        ; preds = %cond.end42
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !3801, metadata !DIExpression()), !dbg !3803
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !3804, metadata !DIExpression()), !dbg !3805
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3806
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %22, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !3807
  %23 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !3808
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !3810
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3810
  %call50 = call zeroext i8 @potentially_threadable_block(%struct.basic_block_def* %24), !dbg !3811
  %tobool51 = icmp ne i8 %call50, 0, !dbg !3811
  br i1 %tobool51, label %if.then52, label %if.end72, !dbg !3812

if.then52:                                        ; preds = %if.then49
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info, metadata !3813, metadata !DIExpression()), !dbg !3815
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3816, metadata !DIExpression()), !dbg !3817
  %call53 = call %struct.expr_hash_elt** @VEC_expr_hash_elt_t_heap_safe_push(%struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, %struct.expr_hash_elt* null), !dbg !3818
  %call54 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @const_and_copies_stack, %union.tree_node* null), !dbg !3819
  %25 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !3820
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 3, !dbg !3821
  %26 = load i8*, i8** %aux, align 8, !dbg !3821
  %27 = bitcast i8* %26 to %struct.edge_info*, !dbg !3822
  store %struct.edge_info* %27, %struct.edge_info** %edge_info, align 8, !dbg !3823
  %28 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !3824
  %tobool55 = icmp ne %struct.edge_info* %28, null, !dbg !3824
  br i1 %tobool55, label %if.then56, label %if.end71, !dbg !3826

if.then56:                                        ; preds = %if.then52
  call void @llvm.dbg.declare(metadata %struct.cond_equivalence** %cond_equivalences, metadata !3827, metadata !DIExpression()), !dbg !3829
  %29 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !3830
  %cond_equivalences57 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %29, i32 0, i32 2, !dbg !3831
  %30 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences57, align 8, !dbg !3831
  store %struct.cond_equivalence* %30, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !3829
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !3832, metadata !DIExpression()), !dbg !3833
  %31 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !3834
  %lhs58 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %31, i32 0, i32 0, !dbg !3835
  %32 = load %union.tree_node*, %union.tree_node** %lhs58, align 8, !dbg !3835
  store %union.tree_node* %32, %union.tree_node** %lhs, align 8, !dbg !3833
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !3836, metadata !DIExpression()), !dbg !3837
  %33 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !3838
  %rhs59 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %33, i32 0, i32 1, !dbg !3839
  %34 = load %union.tree_node*, %union.tree_node** %rhs59, align 8, !dbg !3839
  store %union.tree_node* %34, %union.tree_node** %rhs, align 8, !dbg !3837
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3840
  %tobool60 = icmp ne %union.tree_node* %35, null, !dbg !3840
  br i1 %tobool60, label %land.lhs.true61, label %if.end, !dbg !3842

land.lhs.true61:                                  ; preds = %if.then56
  %36 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3843
  %base62 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !3843
  %37 = bitcast %struct.tree_base* %base62 to i64*, !dbg !3843
  %bf.load = load i64, i64* %37, align 8, !dbg !3843
  %bf.clear = and i64 %bf.load, 65535, !dbg !3843
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3843
  %cmp63 = icmp eq i32 %bf.cast, 141, !dbg !3844
  br i1 %cmp63, label %if.then65, label %if.end, !dbg !3845

if.then65:                                        ; preds = %land.lhs.true61
  %38 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !3846
  %39 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !3847
  call void @record_const_or_copy(%union.tree_node* %38, %union.tree_node* %39), !dbg !3848
  br label %if.end, !dbg !3848

if.end:                                           ; preds = %if.then65, %land.lhs.true61, %if.then56
  %40 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !3849
  %tobool66 = icmp ne %struct.cond_equivalence* %40, null, !dbg !3849
  br i1 %tobool66, label %if.then67, label %if.end70, !dbg !3851

if.then67:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !3852
  br label %for.cond, !dbg !3854

for.cond:                                         ; preds = %for.inc, %if.then67
  %41 = load i32, i32* %i, align 4, !dbg !3855
  %42 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !3857
  %max_cond_equivalences = getelementptr inbounds %struct.edge_info, %struct.edge_info* %42, i32 0, i32 3, !dbg !3858
  %43 = load i32, i32* %max_cond_equivalences, align 8, !dbg !3858
  %cmp68 = icmp ult i32 %41, %43, !dbg !3859
  br i1 %cmp68, label %for.body, label %for.end, !dbg !3860

for.body:                                         ; preds = %for.cond
  %44 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !3861
  %45 = load i32, i32* %i, align 4, !dbg !3862
  %idxprom = zext i32 %45 to i64, !dbg !3861
  %arrayidx = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %44, i64 %idxprom, !dbg !3861
  call void @record_cond(%struct.cond_equivalence* %arrayidx), !dbg !3863
  br label %for.inc, !dbg !3863

for.inc:                                          ; preds = %for.body
  %46 = load i32, i32* %i, align 4, !dbg !3864
  %inc = add i32 %46, 1, !dbg !3864
  store i32 %inc, i32* %i, align 4, !dbg !3864
  br label %for.cond, !dbg !3865, !llvm.loop !3866

for.end:                                          ; preds = %for.cond
  br label %if.end70, !dbg !3867

if.end70:                                         ; preds = %for.end, %if.end
  br label %if.end71, !dbg !3868

if.end71:                                         ; preds = %if.end70, %if.then52
  %47 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !3869
  %48 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !3870
  call void @dom_thread_across_edge(%struct.dom_walk_data* %47, %struct.edge_def* %48), !dbg !3871
  call void @remove_local_expressions_from_table(), !dbg !3872
  br label %if.end72, !dbg !3873

if.end72:                                         ; preds = %if.end71, %if.then49
  %49 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !3874
  %dest73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %49, i32 0, i32 1, !dbg !3876
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %dest73, align 8, !dbg !3876
  %call74 = call zeroext i8 @potentially_threadable_block(%struct.basic_block_def* %50), !dbg !3877
  %tobool75 = icmp ne i8 %call74, 0, !dbg !3877
  br i1 %tobool75, label %if.then76, label %if.end113, !dbg !3878

if.then76:                                        ; preds = %if.end72
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info77, metadata !3879, metadata !DIExpression()), !dbg !3881
  call void @llvm.dbg.declare(metadata i32* %i78, metadata !3882, metadata !DIExpression()), !dbg !3883
  %call79 = call %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** @const_and_copies_stack, %union.tree_node* null), !dbg !3884
  %51 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !3885
  %aux80 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 3, !dbg !3886
  %52 = load i8*, i8** %aux80, align 8, !dbg !3886
  %53 = bitcast i8* %52 to %struct.edge_info*, !dbg !3887
  store %struct.edge_info* %53, %struct.edge_info** %edge_info77, align 8, !dbg !3888
  %54 = load %struct.edge_info*, %struct.edge_info** %edge_info77, align 8, !dbg !3889
  %tobool81 = icmp ne %struct.edge_info* %54, null, !dbg !3889
  br i1 %tobool81, label %if.then82, label %if.end112, !dbg !3891

if.then82:                                        ; preds = %if.then76
  call void @llvm.dbg.declare(metadata %struct.cond_equivalence** %cond_equivalences83, metadata !3892, metadata !DIExpression()), !dbg !3894
  %55 = load %struct.edge_info*, %struct.edge_info** %edge_info77, align 8, !dbg !3895
  %cond_equivalences84 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %55, i32 0, i32 2, !dbg !3896
  %56 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences84, align 8, !dbg !3896
  store %struct.cond_equivalence* %56, %struct.cond_equivalence** %cond_equivalences83, align 8, !dbg !3894
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs85, metadata !3897, metadata !DIExpression()), !dbg !3898
  %57 = load %struct.edge_info*, %struct.edge_info** %edge_info77, align 8, !dbg !3899
  %lhs86 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %57, i32 0, i32 0, !dbg !3900
  %58 = load %union.tree_node*, %union.tree_node** %lhs86, align 8, !dbg !3900
  store %union.tree_node* %58, %union.tree_node** %lhs85, align 8, !dbg !3898
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs87, metadata !3901, metadata !DIExpression()), !dbg !3902
  %59 = load %struct.edge_info*, %struct.edge_info** %edge_info77, align 8, !dbg !3903
  %rhs88 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %59, i32 0, i32 1, !dbg !3904
  %60 = load %union.tree_node*, %union.tree_node** %rhs88, align 8, !dbg !3904
  store %union.tree_node* %60, %union.tree_node** %rhs87, align 8, !dbg !3902
  %61 = load %union.tree_node*, %union.tree_node** %lhs85, align 8, !dbg !3905
  %tobool89 = icmp ne %union.tree_node* %61, null, !dbg !3905
  br i1 %tobool89, label %land.lhs.true90, label %if.end98, !dbg !3907

land.lhs.true90:                                  ; preds = %if.then82
  %62 = load %union.tree_node*, %union.tree_node** %lhs85, align 8, !dbg !3908
  %base91 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !3908
  %63 = bitcast %struct.tree_base* %base91 to i64*, !dbg !3908
  %bf.load92 = load i64, i64* %63, align 8, !dbg !3908
  %bf.clear93 = and i64 %bf.load92, 65535, !dbg !3908
  %bf.cast94 = trunc i64 %bf.clear93 to i32, !dbg !3908
  %cmp95 = icmp eq i32 %bf.cast94, 141, !dbg !3909
  br i1 %cmp95, label %if.then97, label %if.end98, !dbg !3910

if.then97:                                        ; preds = %land.lhs.true90
  %64 = load %union.tree_node*, %union.tree_node** %lhs85, align 8, !dbg !3911
  %65 = load %union.tree_node*, %union.tree_node** %rhs87, align 8, !dbg !3912
  call void @record_const_or_copy(%union.tree_node* %64, %union.tree_node* %65), !dbg !3913
  br label %if.end98, !dbg !3913

if.end98:                                         ; preds = %if.then97, %land.lhs.true90, %if.then82
  %66 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences83, align 8, !dbg !3914
  %tobool99 = icmp ne %struct.cond_equivalence* %66, null, !dbg !3914
  br i1 %tobool99, label %if.then100, label %if.end111, !dbg !3916

if.then100:                                       ; preds = %if.end98
  store i32 0, i32* %i78, align 4, !dbg !3917
  br label %for.cond101, !dbg !3919

for.cond101:                                      ; preds = %for.inc108, %if.then100
  %67 = load i32, i32* %i78, align 4, !dbg !3920
  %68 = load %struct.edge_info*, %struct.edge_info** %edge_info77, align 8, !dbg !3922
  %max_cond_equivalences102 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %68, i32 0, i32 3, !dbg !3923
  %69 = load i32, i32* %max_cond_equivalences102, align 8, !dbg !3923
  %cmp103 = icmp ult i32 %67, %69, !dbg !3924
  br i1 %cmp103, label %for.body105, label %for.end110, !dbg !3925

for.body105:                                      ; preds = %for.cond101
  %70 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences83, align 8, !dbg !3926
  %71 = load i32, i32* %i78, align 4, !dbg !3927
  %idxprom106 = zext i32 %71 to i64, !dbg !3926
  %arrayidx107 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %70, i64 %idxprom106, !dbg !3926
  call void @record_cond(%struct.cond_equivalence* %arrayidx107), !dbg !3928
  br label %for.inc108, !dbg !3928

for.inc108:                                       ; preds = %for.body105
  %72 = load i32, i32* %i78, align 4, !dbg !3929
  %inc109 = add i32 %72, 1, !dbg !3929
  store i32 %inc109, i32* %i78, align 4, !dbg !3929
  br label %for.cond101, !dbg !3930, !llvm.loop !3931

for.end110:                                       ; preds = %for.cond101
  br label %if.end111, !dbg !3932

if.end111:                                        ; preds = %for.end110, %if.end98
  br label %if.end112, !dbg !3933

if.end112:                                        ; preds = %if.end111, %if.then76
  %73 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !3934
  %74 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !3935
  call void @dom_thread_across_edge(%struct.dom_walk_data* %73, %struct.edge_def* %74), !dbg !3936
  br label %if.end113, !dbg !3937

if.end113:                                        ; preds = %if.end112, %if.end72
  br label %if.end114, !dbg !3938

if.end114:                                        ; preds = %if.end113, %cond.end42, %cond.end28, %cond.end, %land.lhs.true11, %if.else
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then
  call void @remove_local_expressions_from_table(), !dbg !3939
  call void @restore_vars_to_original_value(), !dbg !3940
  ret void, !dbg !3941
}

declare dso_local void @init_walk_dominator_tree(%struct.dom_walk_data*) #2

declare dso_local void @calculate_dominance_info(i32) #2

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local void @threadedge_initialize_values() #2

declare dso_local zeroext i8 @mark_dfs_back_edges() #2

declare dso_local void @walk_dominator_tree(%struct.dom_walk_data*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3942 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3945, metadata !DIExpression()), !dbg !3946
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3947, metadata !DIExpression()), !dbg !3948
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3949, metadata !DIExpression()), !dbg !3950
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3951
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3952
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3953
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3954
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %1), !dbg !3955
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3956
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3957
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3958
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3959
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3960
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3961
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3962
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3963
  ret void, !dbg !3964
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3965 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3968, metadata !DIExpression()), !dbg !3969
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3970
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3970
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3971
  %conv = zext i1 %cmp to i32, !dbg !3971
  %conv1 = trunc i32 %conv to i8, !dbg !3972
  ret i8 %conv1, !dbg !3973
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt_if_modified(%union.gimple_statement_d* %s) #0 !dbg !3974 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !3977, metadata !DIExpression()), !dbg !3978
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3979
  %call = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %0), !dbg !3981
  %tobool = icmp ne i8 %call, 0, !dbg !3981
  br i1 %tobool, label %if.then, label %if.end, !dbg !3982

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !3983
  call void @update_stmt_operands(%union.gimple_statement_d* %1), !dbg !3984
  br label %if.end, !dbg !3984

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3985
}

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) #0 !dbg !3986 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3989, metadata !DIExpression()), !dbg !3990
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i32 0, i32 0, !dbg !3991
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3991
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i32 0, i32 0, !dbg !3992
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3992
  ret %union.gimple_statement_d* %1, !dbg !3993
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_next(%struct.gimple_stmt_iterator* %i) #0 !dbg !3994 {
entry:
  %i.addr = alloca %struct.gimple_stmt_iterator*, align 8
  store %struct.gimple_stmt_iterator* %i, %struct.gimple_stmt_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %i.addr, metadata !3998, metadata !DIExpression()), !dbg !3999
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4000
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %0, i32 0, i32 0, !dbg !4001
  %1 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4001
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %1, i32 0, i32 2, !dbg !4002
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %next, align 8, !dbg !4002
  %3 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %i.addr, align 8, !dbg !4003
  %ptr1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %3, i32 0, i32 0, !dbg !4004
  store %struct.gimple_seq_node_d* %2, %struct.gimple_seq_node_d** %ptr1, align 8, !dbg !4005
  ret void, !dbg !4006
}

declare dso_local void @update_ssa(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_all_edge_infos() #0 !dbg !4007 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %edge_info = alloca %struct.edge_info*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4010, metadata !DIExpression()), !dbg !4017
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4018, metadata !DIExpression()), !dbg !4019
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4020
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !4020
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4020
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4020
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !4020
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4020
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !4020
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4020
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !4020
  br label %for.cond, !dbg !4020

for.cond:                                         ; preds = %for.inc12, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4022
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4022
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !4022
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !4022
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4022
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !4022
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4022
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !4022
  br i1 %cmp, label %for.body, label %for.end14, !dbg !4020

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4024
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !4024
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4024
  %9 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4024
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4024
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4024
  store i32 %11, i32* %10, align 8, !dbg !4024
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4024
  %13 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4024
  store %struct.VEC_edge_gc** %13, %struct.VEC_edge_gc*** %12, align 8, !dbg !4024
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4024
  %15 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4024
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false), !dbg !4024
  br label %for.cond3, !dbg !4024

for.cond3:                                        ; preds = %for.inc, %for.body
  %16 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4027
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !4027
  %18 = load i32, i32* %17, align 8, !dbg !4027
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !4027
  %20 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %19, align 8, !dbg !4027
  %call4 = call zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %20, %struct.edge_def** %e), !dbg !4027
  %tobool = icmp ne i8 %call4, 0, !dbg !4024
  br i1 %tobool, label %for.body5, label %for.end, !dbg !4024

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info, metadata !4029, metadata !DIExpression()), !dbg !4031
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4032
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 3, !dbg !4033
  %22 = load i8*, i8** %aux, align 8, !dbg !4033
  %23 = bitcast i8* %22 to %struct.edge_info*, !dbg !4034
  store %struct.edge_info* %23, %struct.edge_info** %edge_info, align 8, !dbg !4031
  %24 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4035
  %tobool6 = icmp ne %struct.edge_info* %24, null, !dbg !4035
  br i1 %tobool6, label %if.then, label %if.end11, !dbg !4037

if.then:                                          ; preds = %for.body5
  %25 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4038
  %cond_equivalences = getelementptr inbounds %struct.edge_info, %struct.edge_info* %25, i32 0, i32 2, !dbg !4041
  %26 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !4041
  %tobool7 = icmp ne %struct.cond_equivalence* %26, null, !dbg !4038
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !4042

if.then8:                                         ; preds = %if.then
  %27 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4043
  %cond_equivalences9 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %27, i32 0, i32 2, !dbg !4044
  %28 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences9, align 8, !dbg !4044
  %29 = bitcast %struct.cond_equivalence* %28 to i8*, !dbg !4043
  call void @free(i8* %29), !dbg !4045
  br label %if.end, !dbg !4045

if.end:                                           ; preds = %if.then8, %if.then
  %30 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4046
  %31 = bitcast %struct.edge_info* %30 to i8*, !dbg !4046
  call void @free(i8* %31), !dbg !4047
  %32 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4048
  %aux10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 3, !dbg !4049
  store i8* null, i8** %aux10, align 8, !dbg !4050
  br label %if.end11, !dbg !4051

if.end11:                                         ; preds = %if.end, %for.body5
  br label %for.inc, !dbg !4052

for.inc:                                          ; preds = %if.end11
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4027
  br label %for.cond3, !dbg !4027, !llvm.loop !4053

for.end:                                          ; preds = %for.cond3
  br label %for.inc12, !dbg !4055

for.inc12:                                        ; preds = %for.end
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4022
  %next_bb13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 6, !dbg !4022
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb13, align 8, !dbg !4022
  store %struct.basic_block_def* %34, %struct.basic_block_def** %bb, align 8, !dbg !4022
  br label %for.cond, !dbg !4022, !llvm.loop !4056

for.end14:                                        ; preds = %for.cond
  ret void, !dbg !4058
}

declare dso_local zeroext i8 @thread_through_all_blocks(i8 zeroext) #2

declare dso_local void @free_dominance_info(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4059 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4067, metadata !DIExpression()), !dbg !4068
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4069, metadata !DIExpression()), !dbg !4070
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4071, metadata !DIExpression()), !dbg !4072
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4073, metadata !DIExpression()), !dbg !4074
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4075
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4076
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4076
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4077
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4078
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4079
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4080
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4081
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4082
  br label %while.body, !dbg !4083

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4084
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4087
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4087
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4084
  br i1 %tobool, label %if.end, label %if.then, !dbg !4088

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4089
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4091
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4092
  br label %while.end, !dbg !4093

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4094
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4096
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4096
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4097
  %9 = load i32, i32* %indx, align 8, !dbg !4097
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4098
  %div = udiv i32 %10, 128, !dbg !4099
  %cmp = icmp uge i32 %9, %div, !dbg !4100
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4101

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4102

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4103
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4104
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4104
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4105
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4105
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4106
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4107
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4108
  br label %while.body, !dbg !4083, !llvm.loop !4109

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4111
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4113
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4113
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4114
  %17 = load i32, i32* %indx9, align 8, !dbg !4114
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4115
  %div10 = udiv i32 %18, 128, !dbg !4116
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4117
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4118

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4119
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4120
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4120
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4121
  %21 = load i32, i32* %indx14, align 8, !dbg !4121
  %mul = mul i32 %21, 128, !dbg !4122
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4123
  br label %if.end15, !dbg !4124

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4125
  %div16 = udiv i32 %22, 64, !dbg !4126
  %rem = urem i32 %div16, 2, !dbg !4127
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4128
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4129
  store i32 %rem, i32* %word_no, align 8, !dbg !4130
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4131
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4132
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4132
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4133
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4134
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4135
  %27 = load i32, i32* %word_no18, align 8, !dbg !4135
  %idxprom = zext i32 %27 to i64, !dbg !4131
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4131
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4131
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4136
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4137
  store i64 %28, i64* %bits19, align 8, !dbg !4138
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4139
  %rem20 = urem i32 %30, 64, !dbg !4140
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4141
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4142
  %32 = load i64, i64* %bits21, align 8, !dbg !4143
  %sh_prom = zext i32 %rem20 to i64, !dbg !4143
  %shr = lshr i64 %32, %sh_prom, !dbg !4143
  store i64 %shr, i64* %bits21, align 8, !dbg !4143
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4144
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4145
  %34 = load i64, i64* %bits22, align 8, !dbg !4145
  %tobool23 = icmp ne i64 %34, 0, !dbg !4146
  %lnot = xor i1 %tobool23, true, !dbg !4146
  %lnot.ext = zext i1 %lnot to i32, !dbg !4146
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4147
  %add = add i32 %35, %lnot.ext, !dbg !4147
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4147
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4148
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4149
  store i32 %36, i32* %37, align 4, !dbg !4150
  ret void, !dbg !4151
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4152 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4155, metadata !DIExpression()), !dbg !4156
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4157, metadata !DIExpression()), !dbg !4158
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4159
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4161
  %1 = load i64, i64* %bits, align 8, !dbg !4161
  %tobool = icmp ne i64 %1, 0, !dbg !4159
  br i1 %tobool, label %if.then, label %if.end, !dbg !4162

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4163

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4164), !dbg !4166
  br label %while.cond, !dbg !4167

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4168
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4169
  %3 = load i64, i64* %bits1, align 8, !dbg !4169
  %and = and i64 %3, 1, !dbg !4170
  %tobool2 = icmp ne i64 %and, 0, !dbg !4171
  %lnot = xor i1 %tobool2, true, !dbg !4171
  br i1 %lnot, label %while.body, label %while.end, !dbg !4167

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4172
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4174
  %5 = load i64, i64* %bits3, align 8, !dbg !4175
  %shr = lshr i64 %5, 1, !dbg !4175
  store i64 %shr, i64* %bits3, align 8, !dbg !4175
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4176
  %7 = load i32, i32* %6, align 4, !dbg !4177
  %add = add i32 %7, 1, !dbg !4177
  store i32 %add, i32* %6, align 4, !dbg !4177
  br label %while.cond, !dbg !4167, !llvm.loop !4178

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4180
  br label %return, !dbg !4180

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4181
  %9 = load i32, i32* %8, align 4, !dbg !4182
  %add4 = add i32 %9, 64, !dbg !4183
  %sub = sub i32 %add4, 1, !dbg !4184
  %div = udiv i32 %sub, 64, !dbg !4185
  %mul = mul i32 %div, 64, !dbg !4186
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4187
  store i32 %mul, i32* %10, align 4, !dbg !4188
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4189
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4190
  %12 = load i32, i32* %word_no, align 8, !dbg !4191
  %inc = add i32 %12, 1, !dbg !4191
  store i32 %inc, i32* %word_no, align 8, !dbg !4191
  br label %while.body6, !dbg !4192

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4193

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4195
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4196
  %14 = load i32, i32* %word_no8, align 8, !dbg !4196
  %cmp = icmp ne i32 %14, 2, !dbg !4197
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4193

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4198
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4200
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4200
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4201
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4202
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4203
  %18 = load i32, i32* %word_no11, align 8, !dbg !4203
  %idxprom = zext i32 %18 to i64, !dbg !4198
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4198
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4198
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4204
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4205
  store i64 %19, i64* %bits12, align 8, !dbg !4206
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4207
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4209
  %22 = load i64, i64* %bits13, align 8, !dbg !4209
  %tobool14 = icmp ne i64 %22, 0, !dbg !4207
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4210

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4211

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4212
  %24 = load i32, i32* %23, align 4, !dbg !4213
  %add17 = add i32 %24, 64, !dbg !4213
  store i32 %add17, i32* %23, align 4, !dbg !4213
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4214
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4215
  %26 = load i32, i32* %word_no18, align 8, !dbg !4216
  %inc19 = add i32 %26, 1, !dbg !4216
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4216
  br label %while.cond7, !dbg !4193, !llvm.loop !4217

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4219
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4220
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4220
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4221
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4221
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4222
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4223
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4224
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4225
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4227
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4227
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4225
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4228

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4229
  br label %return, !dbg !4229

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4230
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4231
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4231
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4232
  %35 = load i32, i32* %indx, align 8, !dbg !4232
  %mul28 = mul i32 %35, 128, !dbg !4233
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4234
  store i32 %mul28, i32* %36, align 4, !dbg !4235
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4236
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4237
  store i32 0, i32* %word_no29, align 8, !dbg !4238
  br label %while.body6, !dbg !4192, !llvm.loop !4239

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4241
  ret i8 %38, !dbg !4241
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !4242 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4247, metadata !DIExpression()), !dbg !4248
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4249, metadata !DIExpression()), !dbg !4248
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4248
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4248
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4248

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4248
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4248
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !4248
  %3 = load i32, i32* %num, align 8, !dbg !4248
  %cmp = icmp ult i32 %1, %3, !dbg !4248
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4250
  %land.ext = zext i1 %4 to i32, !dbg !4248
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4248
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !4248
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4248
  %idxprom = zext i32 %6 to i64, !dbg !4248
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4248
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4248
  ret %struct.basic_block_def* %7, !dbg !4248
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !4251 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4257, metadata !DIExpression()), !dbg !4258
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4259
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4259
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4259
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4259
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4259

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4259
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4259
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4259
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4259
  br label %cond.end, !dbg !4259

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4259
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4259
  %cmp = icmp eq i32 %call, 1, !dbg !4260
  %conv = zext i1 %cmp to i32, !dbg !4260
  %conv2 = trunc i32 %conv to i8, !dbg !4259
  ret i8 %conv2, !dbg !4261
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !4262 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4265, metadata !DIExpression()), !dbg !4266
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4267
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !4267
  %tobool = icmp ne i8 %call, 0, !dbg !4267
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4267

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4267
  br label %cond.end, !dbg !4267

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4267
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4268
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !4268
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4268
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !4268
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4268

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4268
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !4268
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !4268
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !4268
  br label %cond.end5, !dbg !4268

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4268

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !4268
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !4268
  ret %struct.edge_def* %call7, !dbg !4269
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !4270 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4273, metadata !DIExpression()), !dbg !4274
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4275
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !4276
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !4277
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4277
  ret %struct.basic_block_def* %1, !dbg !4278
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4279 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4282, metadata !DIExpression()), !dbg !4283
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4284, metadata !DIExpression()), !dbg !4285
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4286
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4287
  %1 = load i64, i64* %bits, align 8, !dbg !4288
  %shr = lshr i64 %1, 1, !dbg !4288
  store i64 %shr, i64* %bits, align 8, !dbg !4288
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4289
  %3 = load i32, i32* %2, align 4, !dbg !4290
  %add = add i32 %3, 1, !dbg !4290
  store i32 %add, i32* %2, align 4, !dbg !4290
  ret void, !dbg !4291
}

declare dso_local zeroext i8 @gimple_purge_all_dead_eh_edges(%struct.bitmap_head_def*) #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) #2

declare dso_local void @loop_optimizer_finalize() #2

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @fini_walk_dominator_tree(%struct.dom_walk_data*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_expr_hash_elt_t_heap_free(%struct.VEC_expr_hash_elt_t_heap** %vec_) #0 !dbg !4292 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_heap**, align 8
  store %struct.VEC_expr_hash_elt_t_heap** %vec_, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, metadata !4296, metadata !DIExpression()), !dbg !4297
  %0 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4298
  %1 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %0, align 8, !dbg !4298
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_heap* %1, null, !dbg !4298
  br i1 %tobool, label %if.then, label %if.end, !dbg !4297

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4298
  %3 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %2, align 8, !dbg !4298
  %4 = bitcast %struct.VEC_expr_hash_elt_t_heap* %3 to i8*, !dbg !4298
  call void @free(i8* %4), !dbg !4298
  br label %if.end, !dbg !4298

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4297
  store %struct.VEC_expr_hash_elt_t_heap* null, %struct.VEC_expr_hash_elt_t_heap** %5, align 8, !dbg !4297
  ret void, !dbg !4297
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) #0 !dbg !4300 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4304, metadata !DIExpression()), !dbg !4305
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4306
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !4306
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !4306
  br i1 %tobool, label %if.then, label %if.end, !dbg !4305

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4306
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !4306
  %4 = bitcast %struct.VEC_tree_heap* %3 to i8*, !dbg !4306
  call void @free(i8* %4), !dbg !4306
  br label %if.end, !dbg !4306

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4305
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %5, align 8, !dbg !4305
  ret void, !dbg !4305
}

declare dso_local void @threadedge_finalize_values() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @hashable_expr_equal_p(%struct.hashable_expr* %expr0, %struct.hashable_expr* %expr1) #0 !dbg !4308 {
entry:
  %retval = alloca i8, align 1
  %expr0.addr = alloca %struct.hashable_expr*, align 8
  %expr1.addr = alloca %struct.hashable_expr*, align 8
  %type0 = alloca %union.tree_node*, align 8
  %type1 = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  store %struct.hashable_expr* %expr0, %struct.hashable_expr** %expr0.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr0.addr, metadata !4311, metadata !DIExpression()), !dbg !4312
  store %struct.hashable_expr* %expr1, %struct.hashable_expr** %expr1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr1.addr, metadata !4313, metadata !DIExpression()), !dbg !4314
  call void @llvm.dbg.declare(metadata %union.tree_node** %type0, metadata !4315, metadata !DIExpression()), !dbg !4316
  %0 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4317
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %0, i32 0, i32 0, !dbg !4318
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4318
  store %union.tree_node* %1, %union.tree_node** %type0, align 8, !dbg !4316
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1, metadata !4319, metadata !DIExpression()), !dbg !4320
  %2 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4321
  %type2 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %2, i32 0, i32 0, !dbg !4322
  %3 = load %union.tree_node*, %union.tree_node** %type2, align 8, !dbg !4322
  store %union.tree_node* %3, %union.tree_node** %type1, align 8, !dbg !4320
  %4 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4323
  %cmp = icmp eq %union.tree_node* %4, null, !dbg !4325
  %conv = zext i1 %cmp to i32, !dbg !4325
  %5 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4326
  %cmp3 = icmp eq %union.tree_node* %5, null, !dbg !4327
  %conv4 = zext i1 %cmp3 to i32, !dbg !4327
  %xor = xor i32 %conv, %conv4, !dbg !4328
  %tobool = icmp ne i32 %xor, 0, !dbg !4328
  br i1 %tobool, label %if.then, label %if.end, !dbg !4329

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !4330
  br label %return, !dbg !4330

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4331
  %7 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4333
  %cmp5 = icmp ne %union.tree_node* %6, %7, !dbg !4334
  br i1 %cmp5, label %land.lhs.true, label %if.end67, !dbg !4335

land.lhs.true:                                    ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4336
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !4336
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !4336
  %bf.load = load i64, i64* %9, align 8, !dbg !4336
  %bf.clear = and i64 %bf.load, 65535, !dbg !4336
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4336
  %cmp7 = icmp eq i32 %bf.cast, 0, !dbg !4337
  br i1 %cmp7, label %if.then66, label %lor.lhs.false, !dbg !4338

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4339
  %base9 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !4339
  %11 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4339
  %bf.load10 = load i64, i64* %11, align 8, !dbg !4339
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !4339
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !4339
  %cmp13 = icmp eq i32 %bf.cast12, 0, !dbg !4340
  br i1 %cmp13, label %if.then66, label %lor.lhs.false15, !dbg !4341

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %12 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4342
  %base16 = bitcast %union.tree_node* %12 to %struct.tree_base*, !dbg !4342
  %13 = bitcast %struct.tree_base* %base16 to i64*, !dbg !4342
  %bf.load17 = load i64, i64* %13, align 8, !dbg !4342
  %bf.lshr = lshr i64 %bf.load17, 21, !dbg !4342
  %bf.clear18 = and i64 %bf.lshr, 1, !dbg !4342
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !4342
  %14 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4343
  %base20 = bitcast %union.tree_node* %14 to %struct.tree_base*, !dbg !4343
  %15 = bitcast %struct.tree_base* %base20 to i64*, !dbg !4343
  %bf.load21 = load i64, i64* %15, align 8, !dbg !4343
  %bf.lshr22 = lshr i64 %bf.load21, 21, !dbg !4343
  %bf.clear23 = and i64 %bf.lshr22, 1, !dbg !4343
  %bf.cast24 = trunc i64 %bf.clear23 to i32, !dbg !4343
  %cmp25 = icmp ne i32 %bf.cast19, %bf.cast24, !dbg !4344
  br i1 %cmp25, label %if.then66, label %lor.lhs.false27, !dbg !4345

lor.lhs.false27:                                  ; preds = %lor.lhs.false15
  %16 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4346
  %type28 = bitcast %union.tree_node* %16 to %struct.tree_type*, !dbg !4346
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type28, i32 0, i32 6, !dbg !4346
  %bf.load29 = load i32, i32* %precision, align 4, !dbg !4346
  %bf.clear30 = and i32 %bf.load29, 1023, !dbg !4346
  %17 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4347
  %type31 = bitcast %union.tree_node* %17 to %struct.tree_type*, !dbg !4347
  %precision32 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type31, i32 0, i32 6, !dbg !4347
  %bf.load33 = load i32, i32* %precision32, align 4, !dbg !4347
  %bf.clear34 = and i32 %bf.load33, 1023, !dbg !4347
  %cmp35 = icmp ne i32 %bf.clear30, %bf.clear34, !dbg !4348
  br i1 %cmp35, label %if.then66, label %lor.lhs.false37, !dbg !4349

lor.lhs.false37:                                  ; preds = %lor.lhs.false27
  %18 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4350
  %base38 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !4350
  %19 = bitcast %struct.tree_base* %base38 to i64*, !dbg !4350
  %bf.load39 = load i64, i64* %19, align 8, !dbg !4350
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !4350
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !4350
  %cmp42 = icmp eq i32 %bf.cast41, 14, !dbg !4350
  br i1 %cmp42, label %cond.true, label %cond.false, !dbg !4350

cond.true:                                        ; preds = %lor.lhs.false37
  %20 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4350
  %call = call i32 @vector_type_mode(%union.tree_node* %20), !dbg !4350
  br label %cond.end, !dbg !4350

cond.false:                                       ; preds = %lor.lhs.false37
  %21 = load %union.tree_node*, %union.tree_node** %type0, align 8, !dbg !4350
  %type44 = bitcast %union.tree_node* %21 to %struct.tree_type*, !dbg !4350
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type44, i32 0, i32 6, !dbg !4350
  %bf.load45 = load i32, i32* %mode, align 4, !dbg !4350
  %bf.lshr46 = lshr i32 %bf.load45, 16, !dbg !4350
  %bf.clear47 = and i32 %bf.lshr46, 255, !dbg !4350
  br label %cond.end, !dbg !4350

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear47, %cond.false ], !dbg !4350
  %22 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4351
  %base48 = bitcast %union.tree_node* %22 to %struct.tree_base*, !dbg !4351
  %23 = bitcast %struct.tree_base* %base48 to i64*, !dbg !4351
  %bf.load49 = load i64, i64* %23, align 8, !dbg !4351
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !4351
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !4351
  %cmp52 = icmp eq i32 %bf.cast51, 14, !dbg !4351
  br i1 %cmp52, label %cond.true54, label %cond.false56, !dbg !4351

cond.true54:                                      ; preds = %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4351
  %call55 = call i32 @vector_type_mode(%union.tree_node* %24), !dbg !4351
  br label %cond.end62, !dbg !4351

cond.false56:                                     ; preds = %cond.end
  %25 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4351
  %type57 = bitcast %union.tree_node* %25 to %struct.tree_type*, !dbg !4351
  %mode58 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57, i32 0, i32 6, !dbg !4351
  %bf.load59 = load i32, i32* %mode58, align 4, !dbg !4351
  %bf.lshr60 = lshr i32 %bf.load59, 16, !dbg !4351
  %bf.clear61 = and i32 %bf.lshr60, 255, !dbg !4351
  br label %cond.end62, !dbg !4351

cond.end62:                                       ; preds = %cond.false56, %cond.true54
  %cond63 = phi i32 [ %call55, %cond.true54 ], [ %bf.clear61, %cond.false56 ], !dbg !4351
  %cmp64 = icmp ne i32 %cond, %cond63, !dbg !4352
  br i1 %cmp64, label %if.then66, label %if.end67, !dbg !4353

if.then66:                                        ; preds = %cond.end62, %lor.lhs.false27, %lor.lhs.false15, %lor.lhs.false, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !4354
  br label %return, !dbg !4354

if.end67:                                         ; preds = %cond.end62, %if.end
  %26 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4355
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %26, i32 0, i32 1, !dbg !4357
  %27 = load i32, i32* %kind, align 8, !dbg !4357
  %28 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4358
  %kind68 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %28, i32 0, i32 1, !dbg !4359
  %29 = load i32, i32* %kind68, align 8, !dbg !4359
  %cmp69 = icmp ne i32 %27, %29, !dbg !4360
  br i1 %cmp69, label %if.then71, label %if.end72, !dbg !4361

if.then71:                                        ; preds = %if.end67
  store i8 0, i8* %retval, align 1, !dbg !4362
  br label %return, !dbg !4362

if.end72:                                         ; preds = %if.end67
  %30 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4363
  %kind73 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %30, i32 0, i32 1, !dbg !4364
  %31 = load i32, i32* %kind73, align 8, !dbg !4364
  switch i32 %31, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb79
    i32 2, label %sw.bb129
    i32 3, label %sw.bb180
  ], !dbg !4365

sw.bb:                                            ; preds = %if.end72
  %32 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4366
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %32, i32 0, i32 2, !dbg !4368
  %single = bitcast %union.anon.0* %ops to %struct.anon*, !dbg !4369
  %rhs = getelementptr inbounds %struct.anon, %struct.anon* %single, i32 0, i32 0, !dbg !4370
  %33 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4370
  %34 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4371
  %ops74 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %34, i32 0, i32 2, !dbg !4372
  %single75 = bitcast %union.anon.0* %ops74 to %struct.anon*, !dbg !4373
  %rhs76 = getelementptr inbounds %struct.anon, %struct.anon* %single75, i32 0, i32 0, !dbg !4374
  %35 = load %union.tree_node*, %union.tree_node** %rhs76, align 8, !dbg !4374
  %call77 = call i32 @operand_equal_p(%union.tree_node* %33, %union.tree_node* %35, i32 0), !dbg !4375
  %conv78 = trunc i32 %call77 to i8, !dbg !4375
  store i8 %conv78, i8* %retval, align 1, !dbg !4376
  br label %return, !dbg !4376

sw.bb79:                                          ; preds = %if.end72
  %36 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4377
  %ops80 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %36, i32 0, i32 2, !dbg !4379
  %unary = bitcast %union.anon.0* %ops80 to %struct.anon.1*, !dbg !4380
  %op = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary, i32 0, i32 0, !dbg !4381
  %37 = load i32, i32* %op, align 8, !dbg !4381
  %38 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4382
  %ops81 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %38, i32 0, i32 2, !dbg !4383
  %unary82 = bitcast %union.anon.0* %ops81 to %struct.anon.1*, !dbg !4384
  %op83 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary82, i32 0, i32 0, !dbg !4385
  %39 = load i32, i32* %op83, align 8, !dbg !4385
  %cmp84 = icmp ne i32 %37, %39, !dbg !4386
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !4387

if.then86:                                        ; preds = %sw.bb79
  store i8 0, i8* %retval, align 1, !dbg !4388
  br label %return, !dbg !4388

if.end87:                                         ; preds = %sw.bb79
  %40 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4389
  %ops88 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %40, i32 0, i32 2, !dbg !4389
  %unary89 = bitcast %union.anon.0* %ops88 to %struct.anon.1*, !dbg !4389
  %op90 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary89, i32 0, i32 0, !dbg !4389
  %41 = load i32, i32* %op90, align 8, !dbg !4389
  %cmp91 = icmp eq i32 %41, 116, !dbg !4389
  br i1 %cmp91, label %land.lhs.true105, label %lor.lhs.false93, !dbg !4389

lor.lhs.false93:                                  ; preds = %if.end87
  %42 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4389
  %ops94 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %42, i32 0, i32 2, !dbg !4389
  %unary95 = bitcast %union.anon.0* %ops94 to %struct.anon.1*, !dbg !4389
  %op96 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary95, i32 0, i32 0, !dbg !4389
  %43 = load i32, i32* %op96, align 8, !dbg !4389
  %cmp97 = icmp eq i32 %43, 113, !dbg !4389
  br i1 %cmp97, label %land.lhs.true105, label %lor.lhs.false99, !dbg !4391

lor.lhs.false99:                                  ; preds = %lor.lhs.false93
  %44 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4392
  %ops100 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %44, i32 0, i32 2, !dbg !4393
  %unary101 = bitcast %union.anon.0* %ops100 to %struct.anon.1*, !dbg !4394
  %op102 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary101, i32 0, i32 0, !dbg !4395
  %45 = load i32, i32* %op102, align 8, !dbg !4395
  %cmp103 = icmp eq i32 %45, 117, !dbg !4396
  br i1 %cmp103, label %land.lhs.true105, label %if.end121, !dbg !4397

land.lhs.true105:                                 ; preds = %lor.lhs.false99, %lor.lhs.false93, %if.end87
  %46 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4398
  %type106 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %46, i32 0, i32 0, !dbg !4398
  %47 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !4398
  %base107 = bitcast %union.tree_node* %47 to %struct.tree_base*, !dbg !4398
  %48 = bitcast %struct.tree_base* %base107 to i64*, !dbg !4398
  %bf.load108 = load i64, i64* %48, align 8, !dbg !4398
  %bf.lshr109 = lshr i64 %bf.load108, 21, !dbg !4398
  %bf.clear110 = and i64 %bf.lshr109, 1, !dbg !4398
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !4398
  %49 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4399
  %type112 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %49, i32 0, i32 0, !dbg !4399
  %50 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !4399
  %base113 = bitcast %union.tree_node* %50 to %struct.tree_base*, !dbg !4399
  %51 = bitcast %struct.tree_base* %base113 to i64*, !dbg !4399
  %bf.load114 = load i64, i64* %51, align 8, !dbg !4399
  %bf.lshr115 = lshr i64 %bf.load114, 21, !dbg !4399
  %bf.clear116 = and i64 %bf.lshr115, 1, !dbg !4399
  %bf.cast117 = trunc i64 %bf.clear116 to i32, !dbg !4399
  %cmp118 = icmp ne i32 %bf.cast111, %bf.cast117, !dbg !4400
  br i1 %cmp118, label %if.then120, label %if.end121, !dbg !4401

if.then120:                                       ; preds = %land.lhs.true105
  store i8 0, i8* %retval, align 1, !dbg !4402
  br label %return, !dbg !4402

if.end121:                                        ; preds = %land.lhs.true105, %lor.lhs.false99
  %52 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4403
  %ops122 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %52, i32 0, i32 2, !dbg !4404
  %unary123 = bitcast %union.anon.0* %ops122 to %struct.anon.1*, !dbg !4405
  %opnd = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary123, i32 0, i32 1, !dbg !4406
  %53 = load %union.tree_node*, %union.tree_node** %opnd, align 8, !dbg !4406
  %54 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4407
  %ops124 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %54, i32 0, i32 2, !dbg !4408
  %unary125 = bitcast %union.anon.0* %ops124 to %struct.anon.1*, !dbg !4409
  %opnd126 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary125, i32 0, i32 1, !dbg !4410
  %55 = load %union.tree_node*, %union.tree_node** %opnd126, align 8, !dbg !4410
  %call127 = call i32 @operand_equal_p(%union.tree_node* %53, %union.tree_node* %55, i32 0), !dbg !4411
  %conv128 = trunc i32 %call127 to i8, !dbg !4411
  store i8 %conv128, i8* %retval, align 1, !dbg !4412
  br label %return, !dbg !4412

sw.bb129:                                         ; preds = %if.end72
  %56 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4413
  %ops130 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %56, i32 0, i32 2, !dbg !4416
  %binary = bitcast %union.anon.0* %ops130 to %struct.anon.2*, !dbg !4417
  %op131 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 0, !dbg !4418
  %57 = load i32, i32* %op131, align 8, !dbg !4418
  %58 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4419
  %ops132 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %58, i32 0, i32 2, !dbg !4420
  %binary133 = bitcast %union.anon.0* %ops132 to %struct.anon.2*, !dbg !4421
  %op134 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary133, i32 0, i32 0, !dbg !4422
  %59 = load i32, i32* %op134, align 8, !dbg !4422
  %cmp135 = icmp ne i32 %57, %59, !dbg !4423
  br i1 %cmp135, label %if.then137, label %if.end138, !dbg !4424

if.then137:                                       ; preds = %sw.bb129
  store i8 0, i8* %retval, align 1, !dbg !4425
  br label %return, !dbg !4425

if.end138:                                        ; preds = %sw.bb129
  %60 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4426
  %ops139 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %60, i32 0, i32 2, !dbg !4428
  %binary140 = bitcast %union.anon.0* %ops139 to %struct.anon.2*, !dbg !4429
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary140, i32 0, i32 1, !dbg !4430
  %61 = load %union.tree_node*, %union.tree_node** %opnd0, align 8, !dbg !4430
  %62 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4431
  %ops141 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %62, i32 0, i32 2, !dbg !4432
  %binary142 = bitcast %union.anon.0* %ops141 to %struct.anon.2*, !dbg !4433
  %opnd0143 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary142, i32 0, i32 1, !dbg !4434
  %63 = load %union.tree_node*, %union.tree_node** %opnd0143, align 8, !dbg !4434
  %call144 = call i32 @operand_equal_p(%union.tree_node* %61, %union.tree_node* %63, i32 0), !dbg !4435
  %tobool145 = icmp ne i32 %call144, 0, !dbg !4435
  br i1 %tobool145, label %land.lhs.true146, label %if.end155, !dbg !4436

land.lhs.true146:                                 ; preds = %if.end138
  %64 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4437
  %ops147 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %64, i32 0, i32 2, !dbg !4438
  %binary148 = bitcast %union.anon.0* %ops147 to %struct.anon.2*, !dbg !4439
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary148, i32 0, i32 2, !dbg !4440
  %65 = load %union.tree_node*, %union.tree_node** %opnd1, align 8, !dbg !4440
  %66 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4441
  %ops149 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %66, i32 0, i32 2, !dbg !4442
  %binary150 = bitcast %union.anon.0* %ops149 to %struct.anon.2*, !dbg !4443
  %opnd1151 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary150, i32 0, i32 2, !dbg !4444
  %67 = load %union.tree_node*, %union.tree_node** %opnd1151, align 8, !dbg !4444
  %call152 = call i32 @operand_equal_p(%union.tree_node* %65, %union.tree_node* %67, i32 0), !dbg !4445
  %tobool153 = icmp ne i32 %call152, 0, !dbg !4445
  br i1 %tobool153, label %if.then154, label %if.end155, !dbg !4446

if.then154:                                       ; preds = %land.lhs.true146
  store i8 1, i8* %retval, align 1, !dbg !4447
  br label %return, !dbg !4447

if.end155:                                        ; preds = %land.lhs.true146, %if.end138
  %68 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4448
  %ops156 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %68, i32 0, i32 2, !dbg !4449
  %binary157 = bitcast %union.anon.0* %ops156 to %struct.anon.2*, !dbg !4450
  %op158 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary157, i32 0, i32 0, !dbg !4451
  %69 = load i32, i32* %op158, align 8, !dbg !4451
  %call159 = call zeroext i8 @commutative_tree_code(i32 %69), !dbg !4452
  %conv160 = zext i8 %call159 to i32, !dbg !4452
  %tobool161 = icmp ne i32 %conv160, 0, !dbg !4452
  br i1 %tobool161, label %land.lhs.true162, label %land.end, !dbg !4453

land.lhs.true162:                                 ; preds = %if.end155
  %70 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4454
  %ops163 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %70, i32 0, i32 2, !dbg !4455
  %binary164 = bitcast %union.anon.0* %ops163 to %struct.anon.2*, !dbg !4456
  %opnd0165 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary164, i32 0, i32 1, !dbg !4457
  %71 = load %union.tree_node*, %union.tree_node** %opnd0165, align 8, !dbg !4457
  %72 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4458
  %ops166 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %72, i32 0, i32 2, !dbg !4459
  %binary167 = bitcast %union.anon.0* %ops166 to %struct.anon.2*, !dbg !4460
  %opnd1168 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary167, i32 0, i32 2, !dbg !4461
  %73 = load %union.tree_node*, %union.tree_node** %opnd1168, align 8, !dbg !4461
  %call169 = call i32 @operand_equal_p(%union.tree_node* %71, %union.tree_node* %73, i32 0), !dbg !4462
  %tobool170 = icmp ne i32 %call169, 0, !dbg !4462
  br i1 %tobool170, label %land.rhs, label %land.end, !dbg !4463

land.rhs:                                         ; preds = %land.lhs.true162
  %74 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4464
  %ops171 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %74, i32 0, i32 2, !dbg !4465
  %binary172 = bitcast %union.anon.0* %ops171 to %struct.anon.2*, !dbg !4466
  %opnd1173 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary172, i32 0, i32 2, !dbg !4467
  %75 = load %union.tree_node*, %union.tree_node** %opnd1173, align 8, !dbg !4467
  %76 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4468
  %ops174 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %76, i32 0, i32 2, !dbg !4469
  %binary175 = bitcast %union.anon.0* %ops174 to %struct.anon.2*, !dbg !4470
  %opnd0176 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary175, i32 0, i32 1, !dbg !4471
  %77 = load %union.tree_node*, %union.tree_node** %opnd0176, align 8, !dbg !4471
  %call177 = call i32 @operand_equal_p(%union.tree_node* %75, %union.tree_node* %77, i32 0), !dbg !4472
  %tobool178 = icmp ne i32 %call177, 0, !dbg !4463
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true162, %if.end155
  %78 = phi i1 [ false, %land.lhs.true162 ], [ false, %if.end155 ], [ %tobool178, %land.rhs ], !dbg !4473
  %land.ext = zext i1 %78 to i32, !dbg !4463
  %conv179 = trunc i32 %land.ext to i8, !dbg !4474
  store i8 %conv179, i8* %retval, align 1, !dbg !4475
  br label %return, !dbg !4475

sw.bb180:                                         ; preds = %if.end72
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4476, metadata !DIExpression()), !dbg !4478
  %79 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4479
  %ops181 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %79, i32 0, i32 2, !dbg !4481
  %call182 = bitcast %union.anon.0* %ops181 to %struct.anon.3*, !dbg !4482
  %fn = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call182, i32 0, i32 0, !dbg !4483
  %80 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !4483
  %81 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4484
  %ops183 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %81, i32 0, i32 2, !dbg !4485
  %call184 = bitcast %union.anon.0* %ops183 to %struct.anon.3*, !dbg !4486
  %fn185 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call184, i32 0, i32 0, !dbg !4487
  %82 = load %union.tree_node*, %union.tree_node** %fn185, align 8, !dbg !4487
  %call186 = call i32 @operand_equal_p(%union.tree_node* %80, %union.tree_node* %82, i32 0), !dbg !4488
  %tobool187 = icmp ne i32 %call186, 0, !dbg !4488
  br i1 %tobool187, label %if.end189, label %if.then188, !dbg !4489

if.then188:                                       ; preds = %sw.bb180
  store i8 0, i8* %retval, align 1, !dbg !4490
  br label %return, !dbg !4490

if.end189:                                        ; preds = %sw.bb180
  %83 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4491
  %ops190 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %83, i32 0, i32 2, !dbg !4493
  %call191 = bitcast %union.anon.0* %ops190 to %struct.anon.3*, !dbg !4494
  %pure = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call191, i32 0, i32 1, !dbg !4495
  %84 = load i8, i8* %pure, align 8, !dbg !4495
  %tobool192 = icmp ne i8 %84, 0, !dbg !4491
  br i1 %tobool192, label %if.end194, label %if.then193, !dbg !4496

if.then193:                                       ; preds = %if.end189
  store i8 0, i8* %retval, align 1, !dbg !4497
  br label %return, !dbg !4497

if.end194:                                        ; preds = %if.end189
  %85 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4498
  %ops195 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %85, i32 0, i32 2, !dbg !4500
  %call196 = bitcast %union.anon.0* %ops195 to %struct.anon.3*, !dbg !4501
  %nargs = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call196, i32 0, i32 2, !dbg !4502
  %86 = load i64, i64* %nargs, align 8, !dbg !4502
  %87 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4503
  %ops197 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %87, i32 0, i32 2, !dbg !4504
  %call198 = bitcast %union.anon.0* %ops197 to %struct.anon.3*, !dbg !4505
  %nargs199 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call198, i32 0, i32 2, !dbg !4506
  %88 = load i64, i64* %nargs199, align 8, !dbg !4506
  %cmp200 = icmp ne i64 %86, %88, !dbg !4507
  br i1 %cmp200, label %if.then202, label %if.end203, !dbg !4508

if.then202:                                       ; preds = %if.end194
  store i8 0, i8* %retval, align 1, !dbg !4509
  br label %return, !dbg !4509

if.end203:                                        ; preds = %if.end194
  store i64 0, i64* %i, align 8, !dbg !4510
  br label %for.cond, !dbg !4512

for.cond:                                         ; preds = %for.inc, %if.end203
  %89 = load i64, i64* %i, align 8, !dbg !4513
  %90 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4515
  %ops204 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %90, i32 0, i32 2, !dbg !4516
  %call205 = bitcast %union.anon.0* %ops204 to %struct.anon.3*, !dbg !4517
  %nargs206 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call205, i32 0, i32 2, !dbg !4518
  %91 = load i64, i64* %nargs206, align 8, !dbg !4518
  %cmp207 = icmp ult i64 %89, %91, !dbg !4519
  br i1 %cmp207, label %for.body, label %for.end, !dbg !4520

for.body:                                         ; preds = %for.cond
  %92 = load %struct.hashable_expr*, %struct.hashable_expr** %expr0.addr, align 8, !dbg !4521
  %ops209 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %92, i32 0, i32 2, !dbg !4523
  %call210 = bitcast %union.anon.0* %ops209 to %struct.anon.3*, !dbg !4524
  %args = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call210, i32 0, i32 3, !dbg !4525
  %93 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !4525
  %94 = load i64, i64* %i, align 8, !dbg !4526
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %93, i64 %94, !dbg !4521
  %95 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4521
  %96 = load %struct.hashable_expr*, %struct.hashable_expr** %expr1.addr, align 8, !dbg !4527
  %ops211 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %96, i32 0, i32 2, !dbg !4528
  %call212 = bitcast %union.anon.0* %ops211 to %struct.anon.3*, !dbg !4529
  %args213 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call212, i32 0, i32 3, !dbg !4530
  %97 = load %union.tree_node**, %union.tree_node*** %args213, align 8, !dbg !4530
  %98 = load i64, i64* %i, align 8, !dbg !4531
  %arrayidx214 = getelementptr inbounds %union.tree_node*, %union.tree_node** %97, i64 %98, !dbg !4527
  %99 = load %union.tree_node*, %union.tree_node** %arrayidx214, align 8, !dbg !4527
  %call215 = call i32 @operand_equal_p(%union.tree_node* %95, %union.tree_node* %99, i32 0), !dbg !4532
  %tobool216 = icmp ne i32 %call215, 0, !dbg !4532
  br i1 %tobool216, label %if.end218, label %if.then217, !dbg !4533

if.then217:                                       ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !4534
  br label %return, !dbg !4534

if.end218:                                        ; preds = %for.body
  br label %for.inc, !dbg !4535

for.inc:                                          ; preds = %if.end218
  %100 = load i64, i64* %i, align 8, !dbg !4536
  %inc = add i64 %100, 1, !dbg !4536
  store i64 %inc, i64* %i, align 8, !dbg !4536
  br label %for.cond, !dbg !4537, !llvm.loop !4538

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !4540
  br label %return, !dbg !4540

sw.default:                                       ; preds = %if.end72
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 420, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4541
  br label %sw.epilog, !dbg !4542

sw.epilog:                                        ; preds = %sw.default
  store i8 0, i8* %retval, align 1, !dbg !4543
  br label %return, !dbg !4543

return:                                           ; preds = %sw.epilog, %for.end, %if.then217, %if.then202, %if.then193, %if.then188, %land.end, %if.then154, %if.then137, %if.end121, %if.then120, %if.then86, %sw.bb, %if.then71, %if.then66, %if.then
  %101 = load i8, i8* %retval, align 1, !dbg !4544
  ret i8 %101, !dbg !4544
}

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) #0 !dbg !4545 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4546, metadata !DIExpression()), !dbg !4547
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4548
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !4550
  %tobool = icmp ne i8 %call, 0, !dbg !4550
  br i1 %tobool, label %if.end, label %if.then, !dbg !4551

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !4552
  br label %return, !dbg !4552

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4553
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !4554
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !4555
  %2 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !4555
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !4556
  br label %return, !dbg !4556

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !4557
  ret %union.tree_node* %3, !dbg !4557
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

declare dso_local zeroext i8 @commutative_tree_code(i32) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #0 !dbg !4558 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4561, metadata !DIExpression()), !dbg !4562
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4563
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4564
  %cmp = icmp uge i32 %call, 6, !dbg !4565
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4566

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4567
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !4568
  %cmp2 = icmp ule i32 %call1, 9, !dbg !4569
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !4570
  %land.ext = zext i1 %2 to i32, !dbg !4566
  %conv = trunc i32 %land.ext to i8, !dbg !4564
  ret i8 %conv, !dbg !4571
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !4572 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !4575, metadata !DIExpression()), !dbg !4576
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !4577
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !4578
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !4579
  %bf.load = load i32, i32* %1, align 8, !dbg !4579
  %bf.clear = and i32 %bf.load, 255, !dbg !4579
  ret i32 %bf.clear, !dbg !4580
}

declare dso_local void @free(i8*) #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_hash_elt** @VEC_expr_hash_elt_t_heap_safe_push(%struct.VEC_expr_hash_elt_t_heap** %vec_, %struct.expr_hash_elt* %obj_) #0 !dbg !4581 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_heap**, align 8
  %obj_.addr = alloca %struct.expr_hash_elt*, align 8
  store %struct.VEC_expr_hash_elt_t_heap** %vec_, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  store %struct.expr_hash_elt* %obj_, %struct.expr_hash_elt** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %obj_.addr, metadata !4587, metadata !DIExpression()), !dbg !4586
  %0 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4586
  %call = call i32 @VEC_expr_hash_elt_t_heap_reserve(%struct.VEC_expr_hash_elt_t_heap** %0, i32 1), !dbg !4586
  %1 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4586
  %2 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %1, align 8, !dbg !4586
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_heap* %2, null, !dbg !4586
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4586

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !4586
  %4 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %3, align 8, !dbg !4586
  %base = getelementptr inbounds %struct.VEC_expr_hash_elt_t_heap, %struct.VEC_expr_hash_elt_t_heap* %4, i32 0, i32 0, !dbg !4586
  br label %cond.end, !dbg !4586

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4586

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_hash_elt_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4586
  %5 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %obj_.addr, align 8, !dbg !4586
  %call1 = call %struct.expr_hash_elt** @VEC_expr_hash_elt_t_base_quick_push(%struct.VEC_expr_hash_elt_t_base* %cond, %struct.expr_hash_elt* %5), !dbg !4586
  ret %struct.expr_hash_elt** %call1, !dbg !4586
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) #0 !dbg !4588 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !4591, metadata !DIExpression()), !dbg !4592
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !4593, metadata !DIExpression()), !dbg !4592
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4592
  %call = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %0, i32 1), !dbg !4592
  %1 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4592
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %1, align 8, !dbg !4592
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !4592
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4592

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !4592
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %3, align 8, !dbg !4592
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !4592
  br label %cond.end, !dbg !4592

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4592

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4592
  %5 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !4592
  %call1 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %5), !dbg !4592
  ret %union.tree_node** %call1, !dbg !4592
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_equivalences_from_incoming_edge(%struct.basic_block_def* %bb) #0 !dbg !4594 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %parent = alloca %struct.basic_block_def*, align 8
  %edge_info = alloca %struct.edge_info*, align 8
  %i = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %cond_equivalences = alloca %struct.cond_equivalence*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4597, metadata !DIExpression()), !dbg !4598
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4599, metadata !DIExpression()), !dbg !4600
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %parent, metadata !4601, metadata !DIExpression()), !dbg !4602
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info, metadata !4603, metadata !DIExpression()), !dbg !4604
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4605
  %call = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %0), !dbg !4606
  store %struct.basic_block_def* %call, %struct.basic_block_def** %parent, align 8, !dbg !4607
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4608
  %call1 = call %struct.edge_def* @single_incoming_edge_ignoring_loop_edges(%struct.basic_block_def* %1), !dbg !4609
  store %struct.edge_def* %call1, %struct.edge_def** %e, align 8, !dbg !4610
  %2 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4611
  %tobool = icmp ne %struct.edge_def* %2, null, !dbg !4611
  br i1 %tobool, label %land.lhs.true, label %if.end14, !dbg !4613

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4614
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !4615
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4615
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %parent, align 8, !dbg !4616
  %cmp = icmp eq %struct.basic_block_def* %4, %5, !dbg !4617
  br i1 %cmp, label %if.then, label %if.end14, !dbg !4618

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4619, metadata !DIExpression()), !dbg !4621
  %6 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4622
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 3, !dbg !4623
  %7 = load i8*, i8** %aux, align 8, !dbg !4623
  %8 = bitcast i8* %7 to %struct.edge_info*, !dbg !4624
  store %struct.edge_info* %8, %struct.edge_info** %edge_info, align 8, !dbg !4625
  %9 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4626
  %tobool2 = icmp ne %struct.edge_info* %9, null, !dbg !4626
  br i1 %tobool2, label %if.then3, label %if.end13, !dbg !4628

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4629, metadata !DIExpression()), !dbg !4631
  %10 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4632
  %lhs4 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %10, i32 0, i32 0, !dbg !4633
  %11 = load %union.tree_node*, %union.tree_node** %lhs4, align 8, !dbg !4633
  store %union.tree_node* %11, %union.tree_node** %lhs, align 8, !dbg !4631
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4634, metadata !DIExpression()), !dbg !4635
  %12 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4636
  %rhs5 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %12, i32 0, i32 1, !dbg !4637
  %13 = load %union.tree_node*, %union.tree_node** %rhs5, align 8, !dbg !4637
  store %union.tree_node* %13, %union.tree_node** %rhs, align 8, !dbg !4635
  call void @llvm.dbg.declare(metadata %struct.cond_equivalence** %cond_equivalences, metadata !4638, metadata !DIExpression()), !dbg !4639
  %14 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4640
  %cond_equivalences6 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %14, i32 0, i32 2, !dbg !4641
  %15 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences6, align 8, !dbg !4641
  store %struct.cond_equivalence* %15, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !4639
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4642
  %tobool7 = icmp ne %union.tree_node* %16, null, !dbg !4642
  br i1 %tobool7, label %if.then8, label %if.end, !dbg !4644

if.then8:                                         ; preds = %if.then3
  %17 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4645
  %18 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4646
  call void @record_equality(%union.tree_node* %17, %union.tree_node* %18), !dbg !4647
  br label %if.end, !dbg !4647

if.end:                                           ; preds = %if.then8, %if.then3
  %19 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !4648
  %tobool9 = icmp ne %struct.cond_equivalence* %19, null, !dbg !4648
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !4650

if.then10:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !4651
  br label %for.cond, !dbg !4653

for.cond:                                         ; preds = %for.inc, %if.then10
  %20 = load i32, i32* %i, align 4, !dbg !4654
  %21 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !4656
  %max_cond_equivalences = getelementptr inbounds %struct.edge_info, %struct.edge_info* %21, i32 0, i32 3, !dbg !4657
  %22 = load i32, i32* %max_cond_equivalences, align 8, !dbg !4657
  %cmp11 = icmp ult i32 %20, %22, !dbg !4658
  br i1 %cmp11, label %for.body, label %for.end, !dbg !4659

for.body:                                         ; preds = %for.cond
  %23 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !4660
  %24 = load i32, i32* %i, align 4, !dbg !4661
  %idxprom = zext i32 %24 to i64, !dbg !4660
  %arrayidx = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %23, i64 %idxprom, !dbg !4660
  call void @record_cond(%struct.cond_equivalence* %arrayidx), !dbg !4662
  br label %for.inc, !dbg !4662

for.inc:                                          ; preds = %for.body
  %25 = load i32, i32* %i, align 4, !dbg !4663
  %inc = add i32 %25, 1, !dbg !4663
  store i32 %inc, i32* %i, align 4, !dbg !4663
  br label %for.cond, !dbg !4664, !llvm.loop !4665

for.end:                                          ; preds = %for.cond
  br label %if.end12, !dbg !4666

if.end12:                                         ; preds = %for.end, %if.end
  br label %if.end13, !dbg !4667

if.end13:                                         ; preds = %if.end12, %if.then
  br label %if.end14, !dbg !4668

if.end14:                                         ; preds = %if.end13, %land.lhs.true, %entry
  ret void, !dbg !4669
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_equivalences_from_phis(%struct.basic_block_def* %bb) #0 !dbg !4670 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %i = alloca i64, align 8
  %t = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4673, metadata !DIExpression()), !dbg !4674
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4675
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !4677
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4677
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4677
  br label %for.cond, !dbg !4678

for.cond:                                         ; preds = %for.inc30, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4679
  %tobool = icmp ne i8 %call, 0, !dbg !4681
  %lnot = xor i1 %tobool, true, !dbg !4681
  br i1 %lnot, label %for.body, label %for.end31, !dbg !4682

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !4683, metadata !DIExpression()), !dbg !4685
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !4686
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !4685
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !4687, metadata !DIExpression()), !dbg !4688
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4689
  %call2 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %3), !dbg !4690
  store %union.tree_node* %call2, %union.tree_node** %lhs, align 8, !dbg !4688
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4691, metadata !DIExpression()), !dbg !4692
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !4692
  call void @llvm.dbg.declare(metadata i64* %i, metadata !4693, metadata !DIExpression()), !dbg !4694
  store i64 0, i64* %i, align 8, !dbg !4695
  br label %for.cond3, !dbg !4697

for.cond3:                                        ; preds = %for.inc, %for.body
  %4 = load i64, i64* %i, align 8, !dbg !4698
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4700
  %call4 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %5), !dbg !4701
  %conv = zext i32 %call4 to i64, !dbg !4701
  %cmp = icmp ult i64 %4, %conv, !dbg !4702
  br i1 %cmp, label %for.body6, label %for.end, !dbg !4703

for.body6:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.tree_node** %t, metadata !4704, metadata !DIExpression()), !dbg !4706
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4707
  %7 = load i64, i64* %i, align 8, !dbg !4708
  %call7 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %6, i64 %7), !dbg !4709
  store %union.tree_node* %call7, %union.tree_node** %t, align 8, !dbg !4706
  %8 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4710
  %9 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4712
  %cmp8 = icmp eq %union.tree_node* %8, %9, !dbg !4713
  br i1 %cmp8, label %if.then, label %if.end, !dbg !4714

if.then:                                          ; preds = %for.body6
  br label %for.inc, !dbg !4715

if.end:                                           ; preds = %for.body6
  %10 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4716
  %cmp10 = icmp eq %union.tree_node* %10, null, !dbg !4718
  br i1 %cmp10, label %if.then12, label %if.else, !dbg !4719

if.then12:                                        ; preds = %if.end
  %11 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4720
  store %union.tree_node* %11, %union.tree_node** %rhs, align 8, !dbg !4721
  br label %if.end17, !dbg !4722

if.else:                                          ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4723
  %13 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !4725
  %call13 = call i32 @operand_equal_for_phi_arg_p(%union.tree_node* %12, %union.tree_node* %13), !dbg !4726
  %tobool14 = icmp ne i32 %call13, 0, !dbg !4726
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !4727

if.then15:                                        ; preds = %if.else
  br label %for.end, !dbg !4728

if.end16:                                         ; preds = %if.else
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.then12
  br label %for.inc, !dbg !4729

for.inc:                                          ; preds = %if.end17, %if.then
  %14 = load i64, i64* %i, align 8, !dbg !4730
  %inc = add i64 %14, 1, !dbg !4730
  store i64 %inc, i64* %i, align 8, !dbg !4730
  br label %for.cond3, !dbg !4731, !llvm.loop !4732

for.end:                                          ; preds = %if.then15, %for.cond3
  %15 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4734
  %tobool18 = icmp ne %union.tree_node* %15, null, !dbg !4734
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !4736

if.then19:                                        ; preds = %for.end
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4737
  store %union.tree_node* %16, %union.tree_node** %rhs, align 8, !dbg !4738
  br label %if.end20, !dbg !4739

if.end20:                                         ; preds = %if.then19, %for.end
  %17 = load i64, i64* %i, align 8, !dbg !4740
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !4742
  %call21 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %18), !dbg !4743
  %conv22 = zext i32 %call21 to i64, !dbg !4743
  %cmp23 = icmp eq i64 %17, %conv22, !dbg !4744
  br i1 %cmp23, label %land.lhs.true, label %if.end29, !dbg !4745

land.lhs.true:                                    ; preds = %if.end20
  %19 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4746
  %20 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4747
  %call25 = call zeroext i8 @may_propagate_copy(%union.tree_node* %19, %union.tree_node* %20), !dbg !4748
  %conv26 = zext i8 %call25 to i32, !dbg !4748
  %tobool27 = icmp ne i32 %conv26, 0, !dbg !4748
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !4749

if.then28:                                        ; preds = %land.lhs.true
  %21 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !4750
  %22 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4751
  call void @set_ssa_name_value(%union.tree_node* %21, %union.tree_node* %22), !dbg !4752
  br label %if.end29, !dbg !4752

if.end29:                                         ; preds = %if.then28, %land.lhs.true, %if.end20
  br label %for.inc30, !dbg !4753

for.inc30:                                        ; preds = %if.end29
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !4754
  br label %for.cond, !dbg !4755, !llvm.loop !4756

for.end31:                                        ; preds = %for.cond
  ret void, !dbg !4758
}

; Function Attrs: noinline nounwind uwtable
define internal void @optimize_stmt(%struct.basic_block_def* %bb, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si) #0 !dbg !4759 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %old_stmt = alloca %union.gimple_statement_d*, align 8
  %may_optimize_p = alloca i8, align 1
  %modified_p = alloca i8, align 1
  %rhs = alloca %union.tree_node*, align 8
  %callee = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4762, metadata !DIExpression()), !dbg !4763
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !4764, metadata !DIExpression()), !dbg !4765
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !4766, metadata !DIExpression()), !dbg !4767
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %old_stmt, metadata !4768, metadata !DIExpression()), !dbg !4769
  call void @llvm.dbg.declare(metadata i8* %may_optimize_p, metadata !4770, metadata !DIExpression()), !dbg !4771
  call void @llvm.dbg.declare(metadata i8* %modified_p, metadata !4772, metadata !DIExpression()), !dbg !4773
  store i8 0, i8* %modified_p, align 1, !dbg !4773
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4774
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !4775
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %old_stmt, align 8, !dbg !4776
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4777
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !4779
  %cmp = icmp eq i32 %call1, 1, !dbg !4780
  br i1 %cmp, label %if.then, label %if.end, !dbg !4781

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4782
  call void @canonicalize_comparison(%union.gimple_statement_d* %1), !dbg !4783
  br label %if.end, !dbg !4783

if.end:                                           ; preds = %if.then, %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4784
  call void @update_stmt_if_modified(%union.gimple_statement_d* %2), !dbg !4785
  %3 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 0), align 8, !dbg !4786
  %inc = add nsw i64 %3, 1, !dbg !4786
  store i64 %inc, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 0), align 8, !dbg !4786
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4787
  %tobool = icmp ne %struct._IO_FILE* %4, null, !dbg !4787
  br i1 %tobool, label %land.lhs.true, label %if.end5, !dbg !4789

land.lhs.true:                                    ; preds = %if.end
  %5 = load i32, i32* @dump_flags, align 4, !dbg !4790
  %and = and i32 %5, 8, !dbg !4791
  %tobool2 = icmp ne i32 %and, 0, !dbg !4791
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !4792

if.then3:                                         ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4793
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0)), !dbg !4795
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4796
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4797
  call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %8, i32 0, i32 2), !dbg !4798
  br label %if.end5, !dbg !4799

if.end5:                                          ; preds = %if.then3, %land.lhs.true, %if.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4800
  call void @cprop_into_stmt(%union.gimple_statement_d* %9), !dbg !4801
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4802
  %call6 = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %10), !dbg !4804
  %tobool7 = icmp ne i8 %call6, 0, !dbg !4804
  br i1 %tobool7, label %if.then8, label %if.end42, !dbg !4805

if.then8:                                         ; preds = %if.end5
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !4806, metadata !DIExpression()), !dbg !4808
  store %union.tree_node* null, %union.tree_node** %rhs, align 8, !dbg !4808
  %call9 = call zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* %si), !dbg !4809
  %tobool10 = icmp ne i8 %call9, 0, !dbg !4809
  br i1 %tobool10, label %if.then11, label %if.end20, !dbg !4811

if.then11:                                        ; preds = %if.then8
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4812
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %stmt, align 8, !dbg !4814
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4815
  call void @gimple_set_modified(%union.gimple_statement_d* %11, i8 zeroext 1), !dbg !4816
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4817
  %tobool13 = icmp ne %struct._IO_FILE* %12, null, !dbg !4817
  br i1 %tobool13, label %land.lhs.true14, label %if.end19, !dbg !4819

land.lhs.true14:                                  ; preds = %if.then11
  %13 = load i32, i32* @dump_flags, align 4, !dbg !4820
  %and15 = and i32 %13, 8, !dbg !4821
  %tobool16 = icmp ne i32 %and15, 0, !dbg !4821
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !4822

if.then17:                                        ; preds = %land.lhs.true14
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4823
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0)), !dbg !4825
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4826
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4827
  call void @print_gimple_stmt(%struct._IO_FILE* %15, %union.gimple_statement_d* %16, i32 0, i32 2), !dbg !4828
  br label %if.end19, !dbg !4829

if.end19:                                         ; preds = %if.then17, %land.lhs.true14, %if.then11
  br label %if.end20, !dbg !4830

if.end20:                                         ; preds = %if.end19, %if.then8
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4831
  %call21 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %17), !dbg !4833
  %tobool22 = icmp ne i8 %call21, 0, !dbg !4833
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !4834

if.then23:                                        ; preds = %if.end20
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4835
  %call24 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %18), !dbg !4836
  store %union.tree_node* %call24, %union.tree_node** %rhs, align 8, !dbg !4837
  br label %if.end36, !dbg !4838

if.else:                                          ; preds = %if.end20
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4839
  %call25 = call i32 @gimple_code(%union.gimple_statement_d* %19), !dbg !4841
  %cmp26 = icmp eq i32 %call25, 3, !dbg !4842
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !4843

if.then27:                                        ; preds = %if.else
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4844
  %call28 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %20), !dbg !4845
  store %union.tree_node* %call28, %union.tree_node** %rhs, align 8, !dbg !4846
  br label %if.end35, !dbg !4847

if.else29:                                        ; preds = %if.else
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4848
  %call30 = call i32 @gimple_code(%union.gimple_statement_d* %21), !dbg !4850
  %cmp31 = icmp eq i32 %call30, 5, !dbg !4851
  br i1 %cmp31, label %if.then32, label %if.end34, !dbg !4852

if.then32:                                        ; preds = %if.else29
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4853
  %call33 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %22), !dbg !4854
  store %union.tree_node* %call33, %union.tree_node** %rhs, align 8, !dbg !4855
  br label %if.end34, !dbg !4856

if.end34:                                         ; preds = %if.then32, %if.else29
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then27
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then23
  %23 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4857
  %tobool37 = icmp ne %union.tree_node* %23, null, !dbg !4857
  br i1 %tobool37, label %land.lhs.true38, label %if.end41, !dbg !4859

land.lhs.true38:                                  ; preds = %if.end36
  %24 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4860
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !4860
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !4860
  %bf.load = load i64, i64* %25, align 8, !dbg !4860
  %bf.clear = and i64 %bf.load, 65535, !dbg !4860
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4860
  %cmp39 = icmp eq i32 %bf.cast, 121, !dbg !4861
  br i1 %cmp39, label %if.then40, label %if.end41, !dbg !4862

if.then40:                                        ; preds = %land.lhs.true38
  %26 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !4863
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %26), !dbg !4864
  br label %if.end41, !dbg !4864

if.end41:                                         ; preds = %if.then40, %land.lhs.true38, %if.end36
  store i8 1, i8* %modified_p, align 1, !dbg !4865
  br label %if.end42, !dbg !4866

if.end42:                                         ; preds = %if.end41, %if.end5
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4867
  %call43 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %27), !dbg !4868
  %tobool44 = icmp ne i8 %call43, 0, !dbg !4868
  br i1 %tobool44, label %land.end, label %land.rhs, !dbg !4869

land.rhs:                                         ; preds = %if.end42
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4870
  %call45 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %28), !dbg !4871
  %conv = zext i8 %call45 to i32, !dbg !4871
  %tobool46 = icmp ne i32 %conv, 0, !dbg !4871
  br i1 %tobool46, label %land.lhs.true47, label %lor.lhs.false, !dbg !4872

land.lhs.true47:                                  ; preds = %land.rhs
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4873
  %call48 = call zeroext i8 @gimple_rhs_has_side_effects(%union.gimple_statement_d* %29), !dbg !4874
  %tobool49 = icmp ne i8 %call48, 0, !dbg !4874
  br i1 %tobool49, label %lor.lhs.false, label %lor.end, !dbg !4875

lor.lhs.false:                                    ; preds = %land.lhs.true47, %land.rhs
  %30 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4876
  %call50 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %30), !dbg !4877
  %conv51 = zext i8 %call50 to i32, !dbg !4877
  %tobool52 = icmp ne i32 %conv51, 0, !dbg !4877
  br i1 %tobool52, label %land.lhs.true53, label %lor.lhs.false60, !dbg !4878

land.lhs.true53:                                  ; preds = %lor.lhs.false
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4879
  %call54 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %31), !dbg !4880
  %cmp55 = icmp ne %union.tree_node* %call54, null, !dbg !4881
  br i1 %cmp55, label %land.lhs.true57, label %lor.lhs.false60, !dbg !4882

land.lhs.true57:                                  ; preds = %land.lhs.true53
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4883
  %call58 = call zeroext i8 @gimple_rhs_has_side_effects(%union.gimple_statement_d* %32), !dbg !4884
  %tobool59 = icmp ne i8 %call58, 0, !dbg !4884
  br i1 %tobool59, label %lor.lhs.false60, label %lor.end, !dbg !4885

lor.lhs.false60:                                  ; preds = %land.lhs.true57, %land.lhs.true53, %lor.lhs.false
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4886
  %call61 = call i32 @gimple_code(%union.gimple_statement_d* %33), !dbg !4887
  %cmp62 = icmp eq i32 %call61, 1, !dbg !4888
  br i1 %cmp62, label %lor.end, label %lor.rhs, !dbg !4889

lor.rhs:                                          ; preds = %lor.lhs.false60
  %34 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4890
  %call64 = call i32 @gimple_code(%union.gimple_statement_d* %34), !dbg !4891
  %cmp65 = icmp eq i32 %call64, 5, !dbg !4892
  br label %lor.end, !dbg !4889

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false60, %land.lhs.true57, %land.lhs.true47
  %35 = phi i1 [ true, %lor.lhs.false60 ], [ true, %land.lhs.true57 ], [ true, %land.lhs.true47 ], [ %cmp65, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end42
  %36 = phi i1 [ false, %if.end42 ], [ %35, %lor.end ], !dbg !4893
  %land.ext = zext i1 %36 to i32, !dbg !4869
  %conv67 = trunc i32 %land.ext to i8, !dbg !4894
  store i8 %conv67, i8* %may_optimize_p, align 1, !dbg !4895
  %37 = load i8, i8* %may_optimize_p, align 1, !dbg !4896
  %tobool68 = icmp ne i8 %37, 0, !dbg !4896
  br i1 %tobool68, label %if.then69, label %if.end92, !dbg !4898

if.then69:                                        ; preds = %land.end
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4899
  %call70 = call i32 @gimple_code(%union.gimple_statement_d* %38), !dbg !4902
  %cmp71 = icmp eq i32 %call70, 8, !dbg !4903
  br i1 %cmp71, label %if.then73, label %if.end90, !dbg !4904

if.then73:                                        ; preds = %if.then69
  call void @llvm.dbg.declare(metadata %union.tree_node** %callee, metadata !4905, metadata !DIExpression()), !dbg !4907
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4908
  %call74 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %39), !dbg !4909
  store %union.tree_node* %call74, %union.tree_node** %callee, align 8, !dbg !4907
  %40 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4910
  %tobool75 = icmp ne %union.tree_node* %40, null, !dbg !4910
  br i1 %tobool75, label %land.lhs.true76, label %if.end89, !dbg !4912

land.lhs.true76:                                  ; preds = %if.then73
  %41 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4913
  %function_decl = bitcast %union.tree_node* %41 to %struct.tree_function_decl*, !dbg !4913
  %built_in_class = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !4913
  %bf.load77 = load i32, i32* %built_in_class, align 8, !dbg !4913
  %bf.lshr = lshr i32 %bf.load77, 11, !dbg !4913
  %bf.clear78 = and i32 %bf.lshr, 3, !dbg !4913
  %cmp79 = icmp eq i32 %bf.clear78, 3, !dbg !4914
  br i1 %cmp79, label %land.lhs.true81, label %if.end89, !dbg !4915

land.lhs.true81:                                  ; preds = %land.lhs.true76
  %42 = load %union.tree_node*, %union.tree_node** %callee, align 8, !dbg !4916
  %function_decl82 = bitcast %union.tree_node* %42 to %struct.tree_function_decl*, !dbg !4916
  %function_code = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl82, i32 0, i32 5, !dbg !4916
  %bf.load83 = load i32, i32* %function_code, align 8, !dbg !4916
  %bf.clear84 = and i32 %bf.load83, 2047, !dbg !4916
  %cmp85 = icmp eq i32 %bf.clear84, 428, !dbg !4917
  br i1 %cmp85, label %if.then87, label %if.end89, !dbg !4918

if.then87:                                        ; preds = %land.lhs.true81
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4919
  call void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator* %si, %union.tree_node* %43), !dbg !4921
  %call88 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4922
  store %union.gimple_statement_d* %call88, %union.gimple_statement_d** %stmt, align 8, !dbg !4923
  br label %if.end89, !dbg !4924

if.end89:                                         ; preds = %if.then87, %land.lhs.true81, %land.lhs.true76, %if.then73
  br label %if.end90, !dbg !4925

if.end90:                                         ; preds = %if.end89, %if.then69
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4926
  call void @update_stmt_if_modified(%union.gimple_statement_d* %44), !dbg !4927
  call void @eliminate_redundant_computations(%struct.gimple_stmt_iterator* %si), !dbg !4928
  %call91 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si), !dbg !4929
  store %union.gimple_statement_d* %call91, %union.gimple_statement_d** %stmt, align 8, !dbg !4930
  br label %if.end92, !dbg !4931

if.end92:                                         ; preds = %if.end90, %land.end
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4932
  %call93 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %45), !dbg !4934
  %tobool94 = icmp ne i8 %call93, 0, !dbg !4934
  br i1 %tobool94, label %if.then95, label %if.end97, !dbg !4935

if.then95:                                        ; preds = %if.end92
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4936
  %47 = load i8, i8* %may_optimize_p, align 1, !dbg !4937
  %conv96 = zext i8 %47 to i32, !dbg !4937
  call void @record_equivalences_from_stmt(%union.gimple_statement_d* %46, i32 %conv96), !dbg !4938
  br label %if.end97, !dbg !4938

if.end97:                                         ; preds = %if.then95, %if.end92
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4939
  %call98 = call zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %48), !dbg !4941
  %conv99 = zext i8 %call98 to i32, !dbg !4941
  %tobool100 = icmp ne i32 %conv99, 0, !dbg !4941
  br i1 %tobool100, label %if.then104, label %lor.lhs.false101, !dbg !4942

lor.lhs.false101:                                 ; preds = %if.end97
  %49 = load i8, i8* %modified_p, align 1, !dbg !4943
  %conv102 = zext i8 %49 to i32, !dbg !4943
  %tobool103 = icmp ne i32 %conv102, 0, !dbg !4943
  br i1 %tobool103, label %if.then104, label %if.end147, !dbg !4944

if.then104:                                       ; preds = %lor.lhs.false101, %if.end97
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !4945, metadata !DIExpression()), !dbg !4947
  store %union.tree_node* null, %union.tree_node** %val, align 8, !dbg !4947
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4948
  call void @update_stmt_if_modified(%union.gimple_statement_d* %50), !dbg !4949
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4950
  %call105 = call i32 @gimple_code(%union.gimple_statement_d* %51), !dbg !4952
  %cmp106 = icmp eq i32 %call105, 1, !dbg !4953
  br i1 %cmp106, label %if.then108, label %if.else114, !dbg !4954

if.then108:                                       ; preds = %if.then104
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4955
  %call109 = call i32 @gimple_location(%union.gimple_statement_d* %52), !dbg !4956
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4957
  %call110 = call i32 @gimple_cond_code(%union.gimple_statement_d* %53), !dbg !4958
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4959
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4960
  %call111 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %55), !dbg !4961
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4962
  %call112 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %56), !dbg !4963
  %call113 = call %union.tree_node* @fold_binary_loc(i32 %call109, i32 %call110, %union.tree_node* %54, %union.tree_node* %call111, %union.tree_node* %call112), !dbg !4964
  store %union.tree_node* %call113, %union.tree_node** %val, align 8, !dbg !4965
  br label %if.end121, !dbg !4966

if.else114:                                       ; preds = %if.then104
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4967
  %call115 = call i32 @gimple_code(%union.gimple_statement_d* %57), !dbg !4969
  %cmp116 = icmp eq i32 %call115, 5, !dbg !4970
  br i1 %cmp116, label %if.then118, label %if.end120, !dbg !4971

if.then118:                                       ; preds = %if.else114
  %58 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4972
  %call119 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %58), !dbg !4973
  store %union.tree_node* %call119, %union.tree_node** %val, align 8, !dbg !4974
  br label %if.end120, !dbg !4975

if.end120:                                        ; preds = %if.then118, %if.else114
  br label %if.end121

if.end121:                                        ; preds = %if.end120, %if.then108
  %59 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4976
  %tobool122 = icmp ne %union.tree_node* %59, null, !dbg !4976
  br i1 %tobool122, label %land.lhs.true123, label %if.end134, !dbg !4978

land.lhs.true123:                                 ; preds = %if.end121
  %60 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4979
  %base124 = bitcast %union.tree_node* %60 to %struct.tree_base*, !dbg !4979
  %61 = bitcast %struct.tree_base* %base124 to i64*, !dbg !4979
  %bf.load125 = load i64, i64* %61, align 8, !dbg !4979
  %bf.clear126 = and i64 %bf.load125, 65535, !dbg !4979
  %bf.cast127 = trunc i64 %bf.clear126 to i32, !dbg !4979
  %cmp128 = icmp eq i32 %bf.cast127, 23, !dbg !4980
  br i1 %cmp128, label %land.lhs.true130, label %if.end134, !dbg !4981

land.lhs.true130:                                 ; preds = %land.lhs.true123
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4982
  %63 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !4983
  %call131 = call %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %62, %union.tree_node* %63), !dbg !4984
  %tobool132 = icmp ne %struct.edge_def* %call131, null, !dbg !4984
  br i1 %tobool132, label %if.then133, label %if.end134, !dbg !4985

if.then133:                                       ; preds = %land.lhs.true130
  store i8 1, i8* @cfg_altered, align 1, !dbg !4986
  br label %if.end134, !dbg !4987

if.end134:                                        ; preds = %if.then133, %land.lhs.true130, %land.lhs.true123, %if.end121
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %old_stmt, align 8, !dbg !4988
  %65 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4990
  %call135 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %64, %union.gimple_statement_d* %65), !dbg !4991
  %tobool136 = icmp ne i8 %call135, 0, !dbg !4991
  br i1 %tobool136, label %if.then137, label %if.end146, !dbg !4992

if.then137:                                       ; preds = %if.end134
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !4993
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4995
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 9, !dbg !4996
  %68 = load i32, i32* %index, align 8, !dbg !4996
  %call138 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %66, i32 %68), !dbg !4997
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4998
  %tobool139 = icmp ne %struct._IO_FILE* %69, null, !dbg !4998
  br i1 %tobool139, label %land.lhs.true140, label %if.end145, !dbg !5000

land.lhs.true140:                                 ; preds = %if.then137
  %70 = load i32, i32* @dump_flags, align 4, !dbg !5001
  %and141 = and i32 %70, 8, !dbg !5002
  %tobool142 = icmp ne i32 %and141, 0, !dbg !5002
  br i1 %tobool142, label %if.then143, label %if.end145, !dbg !5003

if.then143:                                       ; preds = %land.lhs.true140
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5004
  %call144 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i64 0, i64 0)), !dbg !5005
  br label %if.end145, !dbg !5005

if.end145:                                        ; preds = %if.then143, %land.lhs.true140, %if.then137
  br label %if.end146, !dbg !5006

if.end146:                                        ; preds = %if.end145, %if.end134
  br label %if.end147, !dbg !5007

if.end147:                                        ; preds = %if.end146, %lor.lhs.false101
  ret void, !dbg !5008
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_edge_info(%struct.basic_block_def* %bb) #0 !dbg !5009 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %edge_info = alloca %struct.edge_info*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %loc = alloca i32, align 4
  %index = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %n_labels = alloca i32, align 4
  %info = alloca %union.tree_node**, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %label = alloca %union.tree_node*, align 8
  %target_bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %target_bb39 = alloca %struct.basic_block_def*, align 8
  %label40 = alloca %union.tree_node*, align 8
  %x = alloca %union.tree_node*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  %cond145 = alloca %union.tree_node*, align 8
  %inverted = alloca %union.tree_node*, align 8
  %edge_info148 = alloca %struct.edge_info*, align 8
  %cond182 = alloca %union.tree_node*, align 8
  %inverted184 = alloca %union.tree_node*, align 8
  %edge_info186 = alloca %struct.edge_info*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5010, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5012, metadata !DIExpression()), !dbg !5013
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5014
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %gsi, %struct.basic_block_def* %0), !dbg !5015
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info, metadata !5016, metadata !DIExpression()), !dbg !5017
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5018
  %tobool = icmp ne i8 %call, 0, !dbg !5018
  br i1 %tobool, label %if.end209, label %if.then, !dbg !5020

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !5021, metadata !DIExpression()), !dbg !5023
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5024
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %stmt, align 8, !dbg !5023
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !5025, metadata !DIExpression()), !dbg !5026
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5027
  %call2 = call i32 @gimple_location(%union.gimple_statement_d* %1), !dbg !5028
  store i32 %call2, i32* %loc, align 4, !dbg !5026
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5029
  %call3 = call i32 @gimple_code(%union.gimple_statement_d* %2), !dbg !5031
  %cmp = icmp eq i32 %call3, 5, !dbg !5032
  br i1 %cmp, label %if.then4, label %if.end58, !dbg !5033

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata %union.tree_node** %index, metadata !5034, metadata !DIExpression()), !dbg !5036
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5037
  %call5 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %3), !dbg !5038
  store %union.tree_node* %call5, %union.tree_node** %index, align 8, !dbg !5036
  %4 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5039
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5039
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5039
  %bf.load = load i64, i64* %5, align 8, !dbg !5039
  %bf.clear = and i64 %bf.load, 65535, !dbg !5039
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5039
  %cmp6 = icmp eq i32 %bf.cast, 141, !dbg !5041
  br i1 %cmp6, label %if.then7, label %if.end57, !dbg !5042

if.then7:                                         ; preds = %if.then4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5043, metadata !DIExpression()), !dbg !5045
  call void @llvm.dbg.declare(metadata i32* %n_labels, metadata !5046, metadata !DIExpression()), !dbg !5047
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5048
  %call8 = call i32 @gimple_switch_num_labels(%union.gimple_statement_d* %6), !dbg !5049
  store i32 %call8, i32* %n_labels, align 4, !dbg !5047
  call void @llvm.dbg.declare(metadata %union.tree_node*** %info, metadata !5050, metadata !DIExpression()), !dbg !5051
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5052
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, !dbg !5052
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5052
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5052
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i32 0, i32 5, !dbg !5052
  %9 = load i32, i32* %x_last_basic_block, align 8, !dbg !5052
  %conv = sext i32 %9 to i64, !dbg !5052
  %call9 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !5052
  %10 = bitcast i8* %call9 to %union.tree_node**, !dbg !5052
  store %union.tree_node** %10, %union.tree_node*** %info, align 8, !dbg !5051
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5053, metadata !DIExpression()), !dbg !5054
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5055, metadata !DIExpression()), !dbg !5056
  store i32 0, i32* %i, align 4, !dbg !5057
  br label %for.cond, !dbg !5059

for.cond:                                         ; preds = %for.inc, %if.then7
  %11 = load i32, i32* %i, align 4, !dbg !5060
  %12 = load i32, i32* %n_labels, align 4, !dbg !5062
  %cmp10 = icmp slt i32 %11, %12, !dbg !5063
  br i1 %cmp10, label %for.body, label %for.end, !dbg !5064

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %label, metadata !5065, metadata !DIExpression()), !dbg !5067
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5068
  %14 = load i32, i32* %i, align 4, !dbg !5069
  %call12 = call %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %13, i32 %14), !dbg !5070
  store %union.tree_node* %call12, %union.tree_node** %label, align 8, !dbg !5067
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target_bb, metadata !5071, metadata !DIExpression()), !dbg !5072
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5073
  %add.ptr13 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !5073
  %16 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5073
  %exp = bitcast %union.tree_node* %16 to %struct.tree_exp*, !dbg !5073
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5073
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 2, !dbg !5073
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5073
  %call14 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %add.ptr13, %union.tree_node* %17), !dbg !5073
  store %struct.basic_block_def* %call14, %struct.basic_block_def** %target_bb, align 8, !dbg !5072
  %18 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5074
  %exp15 = bitcast %union.tree_node* %18 to %struct.tree_exp*, !dbg !5074
  %operands16 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp15, i32 0, i32 3, !dbg !5074
  %arrayidx17 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands16, i64 0, i64 1, !dbg !5074
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx17, align 8, !dbg !5074
  %tobool18 = icmp ne %union.tree_node* %19, null, !dbg !5074
  br i1 %tobool18, label %if.then27, label %lor.lhs.false, !dbg !5076

lor.lhs.false:                                    ; preds = %for.body
  %20 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5077
  %exp19 = bitcast %union.tree_node* %20 to %struct.tree_exp*, !dbg !5077
  %operands20 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp19, i32 0, i32 3, !dbg !5077
  %arrayidx21 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands20, i64 0, i64 0, !dbg !5077
  %21 = load %union.tree_node*, %union.tree_node** %arrayidx21, align 8, !dbg !5077
  %tobool22 = icmp ne %union.tree_node* %21, null, !dbg !5077
  br i1 %tobool22, label %lor.lhs.false23, label %if.then27, !dbg !5078

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %22 = load %union.tree_node**, %union.tree_node*** %info, align 8, !dbg !5079
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !5080
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !5081
  %24 = load i32, i32* %index24, align 8, !dbg !5081
  %idxprom = sext i32 %24 to i64, !dbg !5079
  %arrayidx25 = getelementptr inbounds %union.tree_node*, %union.tree_node** %22, i64 %idxprom, !dbg !5079
  %25 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !5079
  %tobool26 = icmp ne %union.tree_node* %25, null, !dbg !5079
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !5082

if.then27:                                        ; preds = %lor.lhs.false23, %lor.lhs.false, %for.body
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5083
  %27 = load %union.tree_node**, %union.tree_node*** %info, align 8, !dbg !5084
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !5085
  %index28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !5086
  %29 = load i32, i32* %index28, align 8, !dbg !5086
  %idxprom29 = sext i32 %29 to i64, !dbg !5084
  %arrayidx30 = getelementptr inbounds %union.tree_node*, %union.tree_node** %27, i64 %idxprom29, !dbg !5084
  store %union.tree_node* %26, %union.tree_node** %arrayidx30, align 8, !dbg !5087
  br label %if.end, !dbg !5084

if.else:                                          ; preds = %lor.lhs.false23
  %30 = load %union.tree_node*, %union.tree_node** %label, align 8, !dbg !5088
  %31 = load %union.tree_node**, %union.tree_node*** %info, align 8, !dbg !5089
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !5090
  %index31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !5091
  %33 = load i32, i32* %index31, align 8, !dbg !5091
  %idxprom32 = sext i32 %33 to i64, !dbg !5089
  %arrayidx33 = getelementptr inbounds %union.tree_node*, %union.tree_node** %31, i64 %idxprom32, !dbg !5089
  store %union.tree_node* %30, %union.tree_node** %arrayidx33, align 8, !dbg !5092
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then27
  br label %for.inc, !dbg !5093

for.inc:                                          ; preds = %if.end
  %34 = load i32, i32* %i, align 4, !dbg !5094
  %inc = add nsw i32 %34, 1, !dbg !5094
  store i32 %inc, i32* %i, align 4, !dbg !5094
  br label %for.cond, !dbg !5095, !llvm.loop !5096

for.end:                                          ; preds = %for.cond
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5098
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 1, !dbg !5098
  %call34 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5098
  %36 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5098
  %37 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %36, i32 0, i32 0, !dbg !5098
  %38 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 0, !dbg !5098
  store i32 %38, i32* %37, align 8, !dbg !5098
  %39 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %36, i32 0, i32 1, !dbg !5098
  %40 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 1, !dbg !5098
  store %struct.VEC_edge_gc** %40, %struct.VEC_edge_gc*** %39, align 8, !dbg !5098
  %41 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5098
  %42 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5098
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false), !dbg !5098
  br label %for.cond35, !dbg !5098

for.cond35:                                       ; preds = %for.inc55, %for.end
  %43 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5100
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !5100
  %45 = load i32, i32* %44, align 8, !dbg !5100
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !5100
  %47 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %46, align 8, !dbg !5100
  %call36 = call zeroext i8 @ei_cond(i32 %45, %struct.VEC_edge_gc** %47, %struct.edge_def** %e), !dbg !5100
  %tobool37 = icmp ne i8 %call36, 0, !dbg !5098
  br i1 %tobool37, label %for.body38, label %for.end56, !dbg !5098

for.body38:                                       ; preds = %for.cond35
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target_bb39, metadata !5102, metadata !DIExpression()), !dbg !5104
  %48 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5105
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %48, i32 0, i32 1, !dbg !5106
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5106
  store %struct.basic_block_def* %49, %struct.basic_block_def** %target_bb39, align 8, !dbg !5104
  call void @llvm.dbg.declare(metadata %union.tree_node** %label40, metadata !5107, metadata !DIExpression()), !dbg !5108
  %50 = load %union.tree_node**, %union.tree_node*** %info, align 8, !dbg !5109
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb39, align 8, !dbg !5110
  %index41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !5111
  %52 = load i32, i32* %index41, align 8, !dbg !5111
  %idxprom42 = sext i32 %52 to i64, !dbg !5109
  %arrayidx43 = getelementptr inbounds %union.tree_node*, %union.tree_node** %50, i64 %idxprom42, !dbg !5109
  %53 = load %union.tree_node*, %union.tree_node** %arrayidx43, align 8, !dbg !5109
  store %union.tree_node* %53, %union.tree_node** %label40, align 8, !dbg !5108
  %54 = load %union.tree_node*, %union.tree_node** %label40, align 8, !dbg !5112
  %cmp44 = icmp ne %union.tree_node* %54, null, !dbg !5114
  br i1 %cmp44, label %land.lhs.true, label %if.end54, !dbg !5115

land.lhs.true:                                    ; preds = %for.body38
  %55 = load %union.tree_node*, %union.tree_node** %label40, align 8, !dbg !5116
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5117
  %cmp46 = icmp ne %union.tree_node* %55, %56, !dbg !5118
  br i1 %cmp46, label %if.then48, label %if.end54, !dbg !5119

if.then48:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %x, metadata !5120, metadata !DIExpression()), !dbg !5122
  %57 = load i32, i32* %loc, align 4, !dbg !5123
  %58 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5124
  %common = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !5124
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5124
  %59 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5124
  %60 = load %union.tree_node*, %union.tree_node** %label40, align 8, !dbg !5125
  %exp49 = bitcast %union.tree_node* %60 to %struct.tree_exp*, !dbg !5125
  %operands50 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp49, i32 0, i32 3, !dbg !5125
  %arrayidx51 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands50, i64 0, i64 0, !dbg !5125
  %61 = load %union.tree_node*, %union.tree_node** %arrayidx51, align 8, !dbg !5125
  %call52 = call %union.tree_node* @fold_convert_loc(i32 %57, %union.tree_node* %59, %union.tree_node* %61), !dbg !5126
  store %union.tree_node* %call52, %union.tree_node** %x, align 8, !dbg !5122
  %62 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5127
  %call53 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %62), !dbg !5128
  store %struct.edge_info* %call53, %struct.edge_info** %edge_info, align 8, !dbg !5129
  %63 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5130
  %64 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5131
  %lhs = getelementptr inbounds %struct.edge_info, %struct.edge_info* %64, i32 0, i32 0, !dbg !5132
  store %union.tree_node* %63, %union.tree_node** %lhs, align 8, !dbg !5133
  %65 = load %union.tree_node*, %union.tree_node** %x, align 8, !dbg !5134
  %66 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5135
  %rhs = getelementptr inbounds %struct.edge_info, %struct.edge_info* %66, i32 0, i32 1, !dbg !5136
  store %union.tree_node* %65, %union.tree_node** %rhs, align 8, !dbg !5137
  br label %if.end54, !dbg !5138

if.end54:                                         ; preds = %if.then48, %land.lhs.true, %for.body38
  br label %for.inc55, !dbg !5139

for.inc55:                                        ; preds = %if.end54
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5100
  br label %for.cond35, !dbg !5100, !llvm.loop !5140

for.end56:                                        ; preds = %for.cond35
  %67 = load %union.tree_node**, %union.tree_node*** %info, align 8, !dbg !5142
  %68 = bitcast %union.tree_node** %67 to i8*, !dbg !5142
  call void @free(i8* %68), !dbg !5143
  br label %if.end57, !dbg !5144

if.end57:                                         ; preds = %for.end56, %if.then4
  br label %if.end58, !dbg !5145

if.end58:                                         ; preds = %if.end57, %if.then
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5146
  %call59 = call i32 @gimple_code(%union.gimple_statement_d* %69), !dbg !5148
  %cmp60 = icmp eq i32 %call59, 1, !dbg !5149
  br i1 %cmp60, label %if.then62, label %if.end208, !dbg !5150

if.then62:                                        ; preds = %if.end58
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !5151, metadata !DIExpression()), !dbg !5153
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !5154, metadata !DIExpression()), !dbg !5155
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !5156, metadata !DIExpression()), !dbg !5157
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5158
  %call63 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %70), !dbg !5159
  store %union.tree_node* %call63, %union.tree_node** %op0, align 8, !dbg !5157
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !5160, metadata !DIExpression()), !dbg !5161
  %71 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5162
  %call64 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %71), !dbg !5163
  store %union.tree_node* %call64, %union.tree_node** %op1, align 8, !dbg !5161
  call void @llvm.dbg.declare(metadata i32* %code, metadata !5164, metadata !DIExpression()), !dbg !5165
  %72 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5166
  %call65 = call i32 @gimple_cond_code(%union.gimple_statement_d* %72), !dbg !5167
  store i32 %call65, i32* %code, align 4, !dbg !5165
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5168
  call void @extract_true_false_edges_from_block(%struct.basic_block_def* %73, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !5169
  %74 = load i32, i32* %code, align 4, !dbg !5170
  %cmp66 = icmp eq i32 %74, 101, !dbg !5172
  br i1 %cmp66, label %land.lhs.true71, label %lor.lhs.false68, !dbg !5173

lor.lhs.false68:                                  ; preds = %if.then62
  %75 = load i32, i32* %code, align 4, !dbg !5174
  %cmp69 = icmp eq i32 %75, 102, !dbg !5175
  br i1 %cmp69, label %land.lhs.true71, label %if.else129, !dbg !5176

land.lhs.true71:                                  ; preds = %lor.lhs.false68, %if.then62
  %76 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5177
  %base72 = bitcast %union.tree_node* %76 to %struct.tree_base*, !dbg !5177
  %77 = bitcast %struct.tree_base* %base72 to i64*, !dbg !5177
  %bf.load73 = load i64, i64* %77, align 8, !dbg !5177
  %bf.clear74 = and i64 %bf.load73, 65535, !dbg !5177
  %bf.cast75 = trunc i64 %bf.clear74 to i32, !dbg !5177
  %cmp76 = icmp eq i32 %bf.cast75, 141, !dbg !5178
  br i1 %cmp76, label %land.lhs.true78, label %if.else129, !dbg !5179

land.lhs.true78:                                  ; preds = %land.lhs.true71
  %78 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5180
  %common79 = bitcast %union.tree_node* %78 to %struct.tree_common*, !dbg !5180
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !5180
  %79 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !5180
  %base81 = bitcast %union.tree_node* %79 to %struct.tree_base*, !dbg !5180
  %80 = bitcast %struct.tree_base* %base81 to i64*, !dbg !5180
  %bf.load82 = load i64, i64* %80, align 8, !dbg !5180
  %bf.clear83 = and i64 %bf.load82, 65535, !dbg !5180
  %bf.cast84 = trunc i64 %bf.clear83 to i32, !dbg !5180
  %cmp85 = icmp eq i32 %bf.cast84, 7, !dbg !5181
  br i1 %cmp85, label %land.lhs.true87, label %if.else129, !dbg !5182

land.lhs.true87:                                  ; preds = %land.lhs.true78
  %81 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5183
  %call88 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %81), !dbg !5184
  %conv89 = zext i8 %call88 to i32, !dbg !5184
  %tobool90 = icmp ne i32 %conv89, 0, !dbg !5184
  br i1 %tobool90, label %if.then91, label %if.else129, !dbg !5185

if.then91:                                        ; preds = %land.lhs.true87
  %82 = load i32, i32* %code, align 4, !dbg !5186
  %cmp92 = icmp eq i32 %82, 101, !dbg !5189
  br i1 %cmp92, label %if.then94, label %if.else109, !dbg !5190

if.then94:                                        ; preds = %if.then91
  %83 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !5191
  %call95 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %83), !dbg !5193
  store %struct.edge_info* %call95, %struct.edge_info** %edge_info, align 8, !dbg !5194
  %84 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5195
  %85 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5196
  %lhs96 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %85, i32 0, i32 0, !dbg !5197
  store %union.tree_node* %84, %union.tree_node** %lhs96, align 8, !dbg !5198
  %86 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5199
  %call97 = call i32 @integer_zerop(%union.tree_node* %86), !dbg !5200
  %tobool98 = icmp ne i32 %call97, 0, !dbg !5200
  br i1 %tobool98, label %cond.true, label %cond.false, !dbg !5200

cond.true:                                        ; preds = %if.then94
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5201
  br label %cond.end, !dbg !5200

cond.false:                                       ; preds = %if.then94
  %88 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5202
  br label %cond.end, !dbg !5200

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %87, %cond.true ], [ %88, %cond.false ], !dbg !5200
  %89 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5203
  %rhs99 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %89, i32 0, i32 1, !dbg !5204
  store %union.tree_node* %cond, %union.tree_node** %rhs99, align 8, !dbg !5205
  %90 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5206
  %call100 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %90), !dbg !5207
  store %struct.edge_info* %call100, %struct.edge_info** %edge_info, align 8, !dbg !5208
  %91 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5209
  %92 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5210
  %lhs101 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %92, i32 0, i32 0, !dbg !5211
  store %union.tree_node* %91, %union.tree_node** %lhs101, align 8, !dbg !5212
  %93 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5213
  %call102 = call i32 @integer_zerop(%union.tree_node* %93), !dbg !5214
  %tobool103 = icmp ne i32 %call102, 0, !dbg !5214
  br i1 %tobool103, label %cond.true104, label %cond.false105, !dbg !5214

cond.true104:                                     ; preds = %cond.end
  %94 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5215
  br label %cond.end106, !dbg !5214

cond.false105:                                    ; preds = %cond.end
  %95 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5216
  br label %cond.end106, !dbg !5214

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi %union.tree_node* [ %94, %cond.true104 ], [ %95, %cond.false105 ], !dbg !5214
  %96 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5217
  %rhs108 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %96, i32 0, i32 1, !dbg !5218
  store %union.tree_node* %cond107, %union.tree_node** %rhs108, align 8, !dbg !5219
  br label %if.end128, !dbg !5220

if.else109:                                       ; preds = %if.then91
  %97 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !5221
  %call110 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %97), !dbg !5223
  store %struct.edge_info* %call110, %struct.edge_info** %edge_info, align 8, !dbg !5224
  %98 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5225
  %99 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5226
  %lhs111 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %99, i32 0, i32 0, !dbg !5227
  store %union.tree_node* %98, %union.tree_node** %lhs111, align 8, !dbg !5228
  %100 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5229
  %call112 = call i32 @integer_zerop(%union.tree_node* %100), !dbg !5230
  %tobool113 = icmp ne i32 %call112, 0, !dbg !5230
  br i1 %tobool113, label %cond.true114, label %cond.false115, !dbg !5230

cond.true114:                                     ; preds = %if.else109
  %101 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5231
  br label %cond.end116, !dbg !5230

cond.false115:                                    ; preds = %if.else109
  %102 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5232
  br label %cond.end116, !dbg !5230

cond.end116:                                      ; preds = %cond.false115, %cond.true114
  %cond117 = phi %union.tree_node* [ %101, %cond.true114 ], [ %102, %cond.false115 ], !dbg !5230
  %103 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5233
  %rhs118 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %103, i32 0, i32 1, !dbg !5234
  store %union.tree_node* %cond117, %union.tree_node** %rhs118, align 8, !dbg !5235
  %104 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5236
  %call119 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %104), !dbg !5237
  store %struct.edge_info* %call119, %struct.edge_info** %edge_info, align 8, !dbg !5238
  %105 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5239
  %106 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5240
  %lhs120 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %106, i32 0, i32 0, !dbg !5241
  store %union.tree_node* %105, %union.tree_node** %lhs120, align 8, !dbg !5242
  %107 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5243
  %call121 = call i32 @integer_zerop(%union.tree_node* %107), !dbg !5244
  %tobool122 = icmp ne i32 %call121, 0, !dbg !5244
  br i1 %tobool122, label %cond.true123, label %cond.false124, !dbg !5244

cond.true123:                                     ; preds = %cond.end116
  %108 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5245
  br label %cond.end125, !dbg !5244

cond.false124:                                    ; preds = %cond.end116
  %109 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5246
  br label %cond.end125, !dbg !5244

cond.end125:                                      ; preds = %cond.false124, %cond.true123
  %cond126 = phi %union.tree_node* [ %108, %cond.true123 ], [ %109, %cond.false124 ], !dbg !5244
  %110 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !5247
  %rhs127 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %110, i32 0, i32 1, !dbg !5248
  store %union.tree_node* %cond126, %union.tree_node** %rhs127, align 8, !dbg !5249
  br label %if.end128

if.end128:                                        ; preds = %cond.end125, %cond.end106
  br label %if.end207, !dbg !5250

if.else129:                                       ; preds = %land.lhs.true87, %land.lhs.true78, %land.lhs.true71, %lor.lhs.false68
  %111 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5251
  %call130 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %111), !dbg !5253
  %conv131 = zext i8 %call130 to i32, !dbg !5253
  %tobool132 = icmp ne i32 %conv131, 0, !dbg !5253
  br i1 %tobool132, label %land.lhs.true133, label %if.else163, !dbg !5254

land.lhs.true133:                                 ; preds = %if.else129
  %112 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5255
  %base134 = bitcast %union.tree_node* %112 to %struct.tree_base*, !dbg !5255
  %113 = bitcast %struct.tree_base* %base134 to i64*, !dbg !5255
  %bf.load135 = load i64, i64* %113, align 8, !dbg !5255
  %bf.clear136 = and i64 %bf.load135, 65535, !dbg !5255
  %bf.cast137 = trunc i64 %bf.clear136 to i32, !dbg !5255
  %cmp138 = icmp eq i32 %bf.cast137, 141, !dbg !5256
  br i1 %cmp138, label %if.then144, label %lor.lhs.false140, !dbg !5257

lor.lhs.false140:                                 ; preds = %land.lhs.true133
  %114 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5258
  %call141 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %114), !dbg !5259
  %conv142 = zext i8 %call141 to i32, !dbg !5259
  %tobool143 = icmp ne i32 %conv142, 0, !dbg !5259
  br i1 %tobool143, label %if.then144, label %if.else163, !dbg !5260

if.then144:                                       ; preds = %lor.lhs.false140, %land.lhs.true133
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond145, metadata !5261, metadata !DIExpression()), !dbg !5263
  %115 = load i32, i32* %code, align 4, !dbg !5264
  %116 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5264
  %117 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5264
  %118 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5264
  %call146 = call %union.tree_node* @build2_stat(i32 %115, %union.tree_node* %116, %union.tree_node* %117, %union.tree_node* %118), !dbg !5264
  store %union.tree_node* %call146, %union.tree_node** %cond145, align 8, !dbg !5263
  call void @llvm.dbg.declare(metadata %union.tree_node** %inverted, metadata !5265, metadata !DIExpression()), !dbg !5266
  %119 = load i32, i32* %loc, align 4, !dbg !5267
  %120 = load %union.tree_node*, %union.tree_node** %cond145, align 8, !dbg !5268
  %call147 = call %union.tree_node* @invert_truthvalue_loc(i32 %119, %union.tree_node* %120), !dbg !5269
  store %union.tree_node* %call147, %union.tree_node** %inverted, align 8, !dbg !5266
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info148, metadata !5270, metadata !DIExpression()), !dbg !5271
  %121 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !5272
  %call149 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %121), !dbg !5273
  store %struct.edge_info* %call149, %struct.edge_info** %edge_info148, align 8, !dbg !5274
  %122 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5275
  %123 = load %union.tree_node*, %union.tree_node** %cond145, align 8, !dbg !5276
  %124 = load %union.tree_node*, %union.tree_node** %inverted, align 8, !dbg !5277
  call void @record_conditions(%struct.edge_info* %122, %union.tree_node* %123, %union.tree_node* %124), !dbg !5278
  %125 = load i32, i32* %code, align 4, !dbg !5279
  %cmp150 = icmp eq i32 %125, 101, !dbg !5281
  br i1 %cmp150, label %if.then152, label %if.end155, !dbg !5282

if.then152:                                       ; preds = %if.then144
  %126 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5283
  %127 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5285
  %lhs153 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %127, i32 0, i32 0, !dbg !5286
  store %union.tree_node* %126, %union.tree_node** %lhs153, align 8, !dbg !5287
  %128 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5288
  %129 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5289
  %rhs154 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %129, i32 0, i32 1, !dbg !5290
  store %union.tree_node* %128, %union.tree_node** %rhs154, align 8, !dbg !5291
  br label %if.end155, !dbg !5292

if.end155:                                        ; preds = %if.then152, %if.then144
  %130 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5293
  %call156 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %130), !dbg !5294
  store %struct.edge_info* %call156, %struct.edge_info** %edge_info148, align 8, !dbg !5295
  %131 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5296
  %132 = load %union.tree_node*, %union.tree_node** %inverted, align 8, !dbg !5297
  %133 = load %union.tree_node*, %union.tree_node** %cond145, align 8, !dbg !5298
  call void @record_conditions(%struct.edge_info* %131, %union.tree_node* %132, %union.tree_node* %133), !dbg !5299
  %134 = load i32, i32* %code, align 4, !dbg !5300
  %cmp157 = icmp eq i32 %134, 102, !dbg !5302
  br i1 %cmp157, label %if.then159, label %if.end162, !dbg !5303

if.then159:                                       ; preds = %if.end155
  %135 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5304
  %136 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5306
  %lhs160 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %136, i32 0, i32 0, !dbg !5307
  store %union.tree_node* %135, %union.tree_node** %lhs160, align 8, !dbg !5308
  %137 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5309
  %138 = load %struct.edge_info*, %struct.edge_info** %edge_info148, align 8, !dbg !5310
  %rhs161 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %138, i32 0, i32 1, !dbg !5311
  store %union.tree_node* %137, %union.tree_node** %rhs161, align 8, !dbg !5312
  br label %if.end162, !dbg !5313

if.end162:                                        ; preds = %if.then159, %if.end155
  br label %if.end206, !dbg !5314

if.else163:                                       ; preds = %lor.lhs.false140, %if.else129
  %139 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5315
  %base164 = bitcast %union.tree_node* %139 to %struct.tree_base*, !dbg !5315
  %140 = bitcast %struct.tree_base* %base164 to i64*, !dbg !5315
  %bf.load165 = load i64, i64* %140, align 8, !dbg !5315
  %bf.clear166 = and i64 %bf.load165, 65535, !dbg !5315
  %bf.cast167 = trunc i64 %bf.clear166 to i32, !dbg !5315
  %cmp168 = icmp eq i32 %bf.cast167, 141, !dbg !5317
  br i1 %cmp168, label %land.lhs.true170, label %if.end205, !dbg !5318

land.lhs.true170:                                 ; preds = %if.else163
  %141 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5319
  %call171 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %141), !dbg !5320
  %conv172 = zext i8 %call171 to i32, !dbg !5320
  %tobool173 = icmp ne i32 %conv172, 0, !dbg !5320
  br i1 %tobool173, label %if.then181, label %lor.lhs.false174, !dbg !5321

lor.lhs.false174:                                 ; preds = %land.lhs.true170
  %142 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5322
  %base175 = bitcast %union.tree_node* %142 to %struct.tree_base*, !dbg !5322
  %143 = bitcast %struct.tree_base* %base175 to i64*, !dbg !5322
  %bf.load176 = load i64, i64* %143, align 8, !dbg !5322
  %bf.clear177 = and i64 %bf.load176, 65535, !dbg !5322
  %bf.cast178 = trunc i64 %bf.clear177 to i32, !dbg !5322
  %cmp179 = icmp eq i32 %bf.cast178, 141, !dbg !5323
  br i1 %cmp179, label %if.then181, label %if.end205, !dbg !5324

if.then181:                                       ; preds = %lor.lhs.false174, %land.lhs.true170
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond182, metadata !5325, metadata !DIExpression()), !dbg !5327
  %144 = load i32, i32* %code, align 4, !dbg !5328
  %145 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5328
  %146 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5328
  %147 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5328
  %call183 = call %union.tree_node* @build2_stat(i32 %144, %union.tree_node* %145, %union.tree_node* %146, %union.tree_node* %147), !dbg !5328
  store %union.tree_node* %call183, %union.tree_node** %cond182, align 8, !dbg !5327
  call void @llvm.dbg.declare(metadata %union.tree_node** %inverted184, metadata !5329, metadata !DIExpression()), !dbg !5330
  %148 = load i32, i32* %loc, align 4, !dbg !5331
  %149 = load %union.tree_node*, %union.tree_node** %cond182, align 8, !dbg !5332
  %call185 = call %union.tree_node* @invert_truthvalue_loc(i32 %148, %union.tree_node* %149), !dbg !5333
  store %union.tree_node* %call185, %union.tree_node** %inverted184, align 8, !dbg !5330
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info186, metadata !5334, metadata !DIExpression()), !dbg !5335
  %150 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !5336
  %call187 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %150), !dbg !5337
  store %struct.edge_info* %call187, %struct.edge_info** %edge_info186, align 8, !dbg !5338
  %151 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5339
  %152 = load %union.tree_node*, %union.tree_node** %cond182, align 8, !dbg !5340
  %153 = load %union.tree_node*, %union.tree_node** %inverted184, align 8, !dbg !5341
  call void @record_conditions(%struct.edge_info* %151, %union.tree_node* %152, %union.tree_node* %153), !dbg !5342
  %154 = load i32, i32* %code, align 4, !dbg !5343
  %cmp188 = icmp eq i32 %154, 101, !dbg !5345
  br i1 %cmp188, label %if.then190, label %if.end193, !dbg !5346

if.then190:                                       ; preds = %if.then181
  %155 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5347
  %156 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5349
  %lhs191 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %156, i32 0, i32 0, !dbg !5350
  store %union.tree_node* %155, %union.tree_node** %lhs191, align 8, !dbg !5351
  %157 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5352
  %158 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5353
  %rhs192 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %158, i32 0, i32 1, !dbg !5354
  store %union.tree_node* %157, %union.tree_node** %rhs192, align 8, !dbg !5355
  br label %if.end193, !dbg !5356

if.end193:                                        ; preds = %if.then190, %if.then181
  %159 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5357
  %call194 = call %struct.edge_info* @allocate_edge_info(%struct.edge_def* %159), !dbg !5358
  store %struct.edge_info* %call194, %struct.edge_info** %edge_info186, align 8, !dbg !5359
  %160 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5360
  %161 = load %union.tree_node*, %union.tree_node** %inverted184, align 8, !dbg !5361
  %162 = load %union.tree_node*, %union.tree_node** %cond182, align 8, !dbg !5362
  call void @record_conditions(%struct.edge_info* %160, %union.tree_node* %161, %union.tree_node* %162), !dbg !5363
  %163 = load %union.tree_node*, %union.tree_node** %cond182, align 8, !dbg !5364
  %base195 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !5364
  %164 = bitcast %struct.tree_base* %base195 to i64*, !dbg !5364
  %bf.load196 = load i64, i64* %164, align 8, !dbg !5364
  %bf.clear197 = and i64 %bf.load196, 65535, !dbg !5364
  %bf.cast198 = trunc i64 %bf.clear197 to i32, !dbg !5364
  %cmp199 = icmp eq i32 %bf.cast198, 102, !dbg !5366
  br i1 %cmp199, label %if.then201, label %if.end204, !dbg !5367

if.then201:                                       ; preds = %if.end193
  %165 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !5368
  %166 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5370
  %lhs202 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %166, i32 0, i32 0, !dbg !5371
  store %union.tree_node* %165, %union.tree_node** %lhs202, align 8, !dbg !5372
  %167 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5373
  %168 = load %struct.edge_info*, %struct.edge_info** %edge_info186, align 8, !dbg !5374
  %rhs203 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %168, i32 0, i32 1, !dbg !5375
  store %union.tree_node* %167, %union.tree_node** %rhs203, align 8, !dbg !5376
  br label %if.end204, !dbg !5377

if.end204:                                        ; preds = %if.then201, %if.end193
  br label %if.end205, !dbg !5378

if.end205:                                        ; preds = %if.end204, %lor.lhs.false174, %if.else163
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.end162
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.end128
  br label %if.end208, !dbg !5379

if.end208:                                        ; preds = %if.end207, %if.end58
  br label %if.end209, !dbg !5380

if.end209:                                        ; preds = %if.end208, %entry
  ret void, !dbg !5381
}

; Function Attrs: noinline nounwind uwtable
define internal void @cprop_into_successor_phis(%struct.basic_block_def* %bb) #0 !dbg !5382 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %indx = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp3 = alloca %struct.gimple_stmt_iterator, align 8
  %new_val = alloca %union.tree_node*, align 8
  %orig_p = alloca %struct.ssa_use_operand_d*, align 8
  %orig_val = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5383, metadata !DIExpression()), !dbg !5384
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5385, metadata !DIExpression()), !dbg !5386
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5387, metadata !DIExpression()), !dbg !5388
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5389
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5389
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5389
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5389
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !5389
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5389
  store i32 %3, i32* %2, align 8, !dbg !5389
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !5389
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5389
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !5389
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5389
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5389
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5389
  br label %for.cond, !dbg !5389

for.cond:                                         ; preds = %for.inc50, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5391
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5391
  %10 = load i32, i32* %9, align 8, !dbg !5391
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5391
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5391
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !5391
  %tobool = icmp ne i8 %call1, 0, !dbg !5389
  br i1 %tobool, label %for.body, label %for.end51, !dbg !5389

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %indx, metadata !5393, metadata !DIExpression()), !dbg !5395
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5396, metadata !DIExpression()), !dbg !5397
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5398
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !5400
  %14 = load i32, i32* %flags, align 8, !dbg !5400
  %and = and i32 %14, 2, !dbg !5401
  %tobool2 = icmp ne i32 %and, 0, !dbg !5401
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5402

if.then:                                          ; preds = %for.body
  br label %for.inc50, !dbg !5403

if.end:                                           ; preds = %for.body
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5404
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !5405
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5405
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp3, %struct.basic_block_def* %16), !dbg !5406
  %17 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5406
  %18 = bitcast %struct.gimple_stmt_iterator* %tmp3 to i8*, !dbg !5406
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 24, i1 false), !dbg !5406
  %call4 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5407
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5407
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !5409

if.then6:                                         ; preds = %if.end
  br label %for.inc50, !dbg !5410

if.end7:                                          ; preds = %if.end
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5411
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 6, !dbg !5412
  %20 = load i32, i32* %dest_idx, align 4, !dbg !5412
  store i32 %20, i32* %indx, align 4, !dbg !5413
  br label %for.cond8, !dbg !5414

for.cond8:                                        ; preds = %for.inc, %if.end7
  %call9 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5415
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5418
  %lnot = xor i1 %tobool10, true, !dbg !5418
  br i1 %lnot, label %for.body11, label %for.end, !dbg !5419

for.body11:                                       ; preds = %for.cond8
  call void @llvm.dbg.declare(metadata %union.tree_node** %new_val, metadata !5420, metadata !DIExpression()), !dbg !5422
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %orig_p, metadata !5423, metadata !DIExpression()), !dbg !5424
  call void @llvm.dbg.declare(metadata %union.tree_node** %orig_val, metadata !5425, metadata !DIExpression()), !dbg !5426
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !5427, metadata !DIExpression()), !dbg !5428
  %call12 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !5429
  store %union.gimple_statement_d* %call12, %union.gimple_statement_d** %phi, align 8, !dbg !5428
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !5430
  %22 = load i32, i32* %indx, align 4, !dbg !5431
  %call13 = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %21, i32 %22), !dbg !5432
  store %struct.ssa_use_operand_d* %call13, %struct.ssa_use_operand_d** %orig_p, align 8, !dbg !5433
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %orig_p, align 8, !dbg !5434
  %call14 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !5435
  store %union.tree_node* %call14, %union.tree_node** %orig_val, align 8, !dbg !5436
  %24 = load %union.tree_node*, %union.tree_node** %orig_val, align 8, !dbg !5437
  %base = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5437
  %25 = bitcast %struct.tree_base* %base to i64*, !dbg !5437
  %bf.load = load i64, i64* %25, align 8, !dbg !5437
  %bf.clear = and i64 %bf.load, 65535, !dbg !5437
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5437
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !5439
  br i1 %cmp, label %if.then15, label %if.end16, !dbg !5440

if.then15:                                        ; preds = %for.body11
  br label %for.inc, !dbg !5441

if.end16:                                         ; preds = %for.body11
  %26 = load %union.tree_node*, %union.tree_node** %orig_val, align 8, !dbg !5442
  %ssa_name = bitcast %union.tree_node* %26 to %struct.tree_ssa_name*, !dbg !5442
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5442
  %27 = load i32, i32* %version, align 8, !dbg !5442
  %28 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5442
  %tobool17 = icmp ne %struct.VEC_tree_heap* %28, null, !dbg !5442
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !5442

cond.true:                                        ; preds = %if.end16
  %29 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5442
  %base18 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %29, i32 0, i32 0, !dbg !5442
  br label %cond.end, !dbg !5442

cond.false:                                       ; preds = %if.end16
  br label %cond.end, !dbg !5442

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base18, %cond.true ], [ null, %cond.false ], !dbg !5442
  %call19 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5442
  %cmp20 = icmp ult i32 %27, %call19, !dbg !5442
  br i1 %cmp20, label %cond.true21, label %cond.false31, !dbg !5442

cond.true21:                                      ; preds = %cond.end
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5442
  %tobool22 = icmp ne %struct.VEC_tree_heap* %30, null, !dbg !5442
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !5442

cond.true23:                                      ; preds = %cond.true21
  %31 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5442
  %base24 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %31, i32 0, i32 0, !dbg !5442
  br label %cond.end26, !dbg !5442

cond.false25:                                     ; preds = %cond.true21
  br label %cond.end26, !dbg !5442

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_tree_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !5442
  %32 = load %union.tree_node*, %union.tree_node** %orig_val, align 8, !dbg !5442
  %ssa_name28 = bitcast %union.tree_node* %32 to %struct.tree_ssa_name*, !dbg !5442
  %version29 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name28, i32 0, i32 3, !dbg !5442
  %33 = load i32, i32* %version29, align 8, !dbg !5442
  %call30 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond27, i32 %33), !dbg !5442
  br label %cond.end32, !dbg !5442

cond.false31:                                     ; preds = %cond.end
  br label %cond.end32, !dbg !5442

cond.end32:                                       ; preds = %cond.false31, %cond.end26
  %cond33 = phi %union.tree_node* [ %call30, %cond.end26 ], [ null, %cond.false31 ], !dbg !5442
  store %union.tree_node* %cond33, %union.tree_node** %new_val, align 8, !dbg !5443
  %34 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5444
  %tobool34 = icmp ne %union.tree_node* %34, null, !dbg !5444
  br i1 %tobool34, label %land.lhs.true, label %if.end49, !dbg !5446

land.lhs.true:                                    ; preds = %cond.end32
  %35 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5447
  %36 = load %union.tree_node*, %union.tree_node** %orig_val, align 8, !dbg !5448
  %cmp35 = icmp ne %union.tree_node* %35, %36, !dbg !5449
  br i1 %cmp35, label %land.lhs.true36, label %if.end49, !dbg !5450

land.lhs.true36:                                  ; preds = %land.lhs.true
  %37 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5451
  %base37 = bitcast %union.tree_node* %37 to %struct.tree_base*, !dbg !5451
  %38 = bitcast %struct.tree_base* %base37 to i64*, !dbg !5451
  %bf.load38 = load i64, i64* %38, align 8, !dbg !5451
  %bf.clear39 = and i64 %bf.load38, 65535, !dbg !5451
  %bf.cast40 = trunc i64 %bf.clear39 to i32, !dbg !5451
  %cmp41 = icmp eq i32 %bf.cast40, 141, !dbg !5452
  br i1 %cmp41, label %land.lhs.true44, label %lor.lhs.false, !dbg !5453

lor.lhs.false:                                    ; preds = %land.lhs.true36
  %39 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5454
  %call42 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %39), !dbg !5455
  %conv = zext i8 %call42 to i32, !dbg !5455
  %tobool43 = icmp ne i32 %conv, 0, !dbg !5455
  br i1 %tobool43, label %land.lhs.true44, label %if.end49, !dbg !5456

land.lhs.true44:                                  ; preds = %lor.lhs.false, %land.lhs.true36
  %40 = load %union.tree_node*, %union.tree_node** %orig_val, align 8, !dbg !5457
  %41 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5458
  %call45 = call zeroext i8 @may_propagate_copy(%union.tree_node* %40, %union.tree_node* %41), !dbg !5459
  %conv46 = zext i8 %call45 to i32, !dbg !5459
  %tobool47 = icmp ne i32 %conv46, 0, !dbg !5459
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !5460

if.then48:                                        ; preds = %land.lhs.true44
  %42 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %orig_p, align 8, !dbg !5461
  %43 = load %union.tree_node*, %union.tree_node** %new_val, align 8, !dbg !5462
  call void @propagate_value(%struct.ssa_use_operand_d* %42, %union.tree_node* %43), !dbg !5463
  br label %if.end49, !dbg !5463

if.end49:                                         ; preds = %if.then48, %land.lhs.true44, %lor.lhs.false, %land.lhs.true, %cond.end32
  br label %for.inc, !dbg !5464

for.inc:                                          ; preds = %if.end49, %if.then15
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !5465
  br label %for.cond8, !dbg !5466, !llvm.loop !5467

for.end:                                          ; preds = %for.cond8
  br label %for.inc50, !dbg !5469

for.inc50:                                        ; preds = %for.end, %if.then6, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5391
  br label %for.cond, !dbg !5391, !llvm.loop !5470

for.end51:                                        ; preds = %for.cond
  ret void, !dbg !5472
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_hash_elt_t_heap_reserve(%struct.VEC_expr_hash_elt_t_heap** %vec_, i32 %alloc_) #0 !dbg !5473 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_expr_hash_elt_t_heap** %vec_, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, metadata !5476, metadata !DIExpression()), !dbg !5477
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5478, metadata !DIExpression()), !dbg !5477
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5479, metadata !DIExpression()), !dbg !5477
  %0 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !5477
  %1 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %0, align 8, !dbg !5477
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_heap* %1, null, !dbg !5477
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5477

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !5477
  %3 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %2, align 8, !dbg !5477
  %base = getelementptr inbounds %struct.VEC_expr_hash_elt_t_heap, %struct.VEC_expr_hash_elt_t_heap* %3, i32 0, i32 0, !dbg !5477
  br label %cond.end, !dbg !5477

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5477

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_hash_elt_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5477
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5477
  %call = call i32 @VEC_expr_hash_elt_t_base_space(%struct.VEC_expr_hash_elt_t_base* %cond, i32 %4), !dbg !5477
  %tobool1 = icmp ne i32 %call, 0, !dbg !5477
  %lnot = xor i1 %tobool1, true, !dbg !5477
  %lnot.ext = zext i1 %lnot to i32, !dbg !5477
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5477
  %5 = load i32, i32* %extend, align 4, !dbg !5480
  %tobool2 = icmp ne i32 %5, 0, !dbg !5480
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5477

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !5480
  %7 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** %6, align 8, !dbg !5480
  %8 = bitcast %struct.VEC_expr_hash_elt_t_heap* %7 to i8*, !dbg !5480
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5480
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5480
  %10 = bitcast i8* %call3 to %struct.VEC_expr_hash_elt_t_heap*, !dbg !5480
  %11 = load %struct.VEC_expr_hash_elt_t_heap**, %struct.VEC_expr_hash_elt_t_heap*** %vec_.addr, align 8, !dbg !5480
  store %struct.VEC_expr_hash_elt_t_heap* %10, %struct.VEC_expr_hash_elt_t_heap** %11, align 8, !dbg !5480
  br label %if.end, !dbg !5480

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5477
  ret i32 %12, !dbg !5477
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_hash_elt** @VEC_expr_hash_elt_t_base_quick_push(%struct.VEC_expr_hash_elt_t_base* %vec_, %struct.expr_hash_elt* %obj_) #0 !dbg !5482 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_base*, align 8
  %obj_.addr = alloca %struct.expr_hash_elt*, align 8
  %slot_ = alloca %struct.expr_hash_elt**, align 8
  store %struct.VEC_expr_hash_elt_t_base* %vec_, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_base** %vec_.addr, metadata !5486, metadata !DIExpression()), !dbg !5487
  store %struct.expr_hash_elt* %obj_, %struct.expr_hash_elt** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %obj_.addr, metadata !5488, metadata !DIExpression()), !dbg !5487
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt*** %slot_, metadata !5489, metadata !DIExpression()), !dbg !5487
  %0 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5487
  %num = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %0, i32 0, i32 0, !dbg !5487
  %1 = load i32, i32* %num, align 8, !dbg !5487
  %2 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5487
  %alloc = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %2, i32 0, i32 1, !dbg !5487
  %3 = load i32, i32* %alloc, align 4, !dbg !5487
  %cmp = icmp ult i32 %1, %3, !dbg !5487
  %conv = zext i1 %cmp to i32, !dbg !5487
  %4 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5487
  %vec = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %4, i32 0, i32 2, !dbg !5487
  %5 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5487
  %num1 = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %5, i32 0, i32 0, !dbg !5487
  %6 = load i32, i32* %num1, align 8, !dbg !5487
  %inc = add i32 %6, 1, !dbg !5487
  store i32 %inc, i32* %num1, align 8, !dbg !5487
  %idxprom = zext i32 %6 to i64, !dbg !5487
  %arrayidx = getelementptr inbounds [1 x %struct.expr_hash_elt*], [1 x %struct.expr_hash_elt*]* %vec, i64 0, i64 %idxprom, !dbg !5487
  store %struct.expr_hash_elt** %arrayidx, %struct.expr_hash_elt*** %slot_, align 8, !dbg !5487
  %7 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %obj_.addr, align 8, !dbg !5487
  %8 = load %struct.expr_hash_elt**, %struct.expr_hash_elt*** %slot_, align 8, !dbg !5487
  store %struct.expr_hash_elt* %7, %struct.expr_hash_elt** %8, align 8, !dbg !5487
  %9 = load %struct.expr_hash_elt**, %struct.expr_hash_elt*** %slot_, align 8, !dbg !5487
  ret %struct.expr_hash_elt** %9, !dbg !5487
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_hash_elt_t_base_space(%struct.VEC_expr_hash_elt_t_base* %vec_, i32 %alloc_) #0 !dbg !5490 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_expr_hash_elt_t_base* %vec_, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_base** %vec_.addr, metadata !5493, metadata !DIExpression()), !dbg !5494
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5495, metadata !DIExpression()), !dbg !5494
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5494
  %cmp = icmp sge i32 %0, 0, !dbg !5494
  %conv = zext i1 %cmp to i32, !dbg !5494
  %1 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5494
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_base* %1, null, !dbg !5494
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5494

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5494
  %alloc = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %2, i32 0, i32 1, !dbg !5494
  %3 = load i32, i32* %alloc, align 4, !dbg !5494
  %4 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !5494
  %num = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %4, i32 0, i32 0, !dbg !5494
  %5 = load i32, i32* %num, align 8, !dbg !5494
  %sub = sub i32 %3, %5, !dbg !5494
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5494
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5494
  %conv2 = zext i1 %cmp1 to i32, !dbg !5494
  br label %cond.end, !dbg !5494

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5494
  %tobool3 = icmp ne i32 %7, 0, !dbg !5494
  %lnot = xor i1 %tobool3, true, !dbg !5494
  %lnot.ext = zext i1 %lnot to i32, !dbg !5494
  br label %cond.end, !dbg !5494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5494
  ret i32 %cond, !dbg !5494
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) #0 !dbg !5496 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_tree_heap** %vec_, %struct.VEC_tree_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_heap*** %vec_.addr, metadata !5499, metadata !DIExpression()), !dbg !5500
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5501, metadata !DIExpression()), !dbg !5500
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5502, metadata !DIExpression()), !dbg !5500
  %0 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5500
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %0, align 8, !dbg !5500
  %tobool = icmp ne %struct.VEC_tree_heap* %1, null, !dbg !5500
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5500

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5500
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %2, align 8, !dbg !5500
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !5500
  br label %cond.end, !dbg !5500

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5500

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5500
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5500
  %call = call i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %4), !dbg !5500
  %tobool1 = icmp ne i32 %call, 0, !dbg !5500
  %lnot = xor i1 %tobool1, true, !dbg !5500
  %lnot.ext = zext i1 %lnot to i32, !dbg !5500
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5500
  %5 = load i32, i32* %extend, align 4, !dbg !5503
  %tobool2 = icmp ne i32 %5, 0, !dbg !5503
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5500

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5503
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %6, align 8, !dbg !5503
  %8 = bitcast %struct.VEC_tree_heap* %7 to i8*, !dbg !5503
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5503
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5503
  %10 = bitcast i8* %call3 to %struct.VEC_tree_heap*, !dbg !5503
  %11 = load %struct.VEC_tree_heap**, %struct.VEC_tree_heap*** %vec_.addr, align 8, !dbg !5503
  store %struct.VEC_tree_heap* %10, %struct.VEC_tree_heap** %11, align 8, !dbg !5503
  br label %if.end, !dbg !5503

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5500
  ret i32 %12, !dbg !5500
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) #0 !dbg !5505 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_.addr = alloca %union.tree_node*, align 8
  %slot_ = alloca %union.tree_node**, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5509, metadata !DIExpression()), !dbg !5510
  store %union.tree_node* %obj_, %union.tree_node** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_.addr, metadata !5511, metadata !DIExpression()), !dbg !5510
  call void @llvm.dbg.declare(metadata %union.tree_node*** %slot_, metadata !5512, metadata !DIExpression()), !dbg !5510
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5510
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !5510
  %1 = load i32, i32* %num, align 8, !dbg !5510
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5510
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !5510
  %3 = load i32, i32* %alloc, align 4, !dbg !5510
  %cmp = icmp ult i32 %1, %3, !dbg !5510
  %conv = zext i1 %cmp to i32, !dbg !5510
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5510
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 2, !dbg !5510
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5510
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 0, !dbg !5510
  %6 = load i32, i32* %num1, align 8, !dbg !5510
  %inc = add i32 %6, 1, !dbg !5510
  store i32 %inc, i32* %num1, align 8, !dbg !5510
  %idxprom = zext i32 %6 to i64, !dbg !5510
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5510
  store %union.tree_node** %arrayidx, %union.tree_node*** %slot_, align 8, !dbg !5510
  %7 = load %union.tree_node*, %union.tree_node** %obj_.addr, align 8, !dbg !5510
  %8 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5510
  store %union.tree_node* %7, %union.tree_node** %8, align 8, !dbg !5510
  %9 = load %union.tree_node**, %union.tree_node*** %slot_, align 8, !dbg !5510
  ret %union.tree_node** %9, !dbg !5510
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) #0 !dbg !5513 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5516, metadata !DIExpression()), !dbg !5517
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5518, metadata !DIExpression()), !dbg !5517
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5517
  %cmp = icmp sge i32 %0, 0, !dbg !5517
  %conv = zext i1 %cmp to i32, !dbg !5517
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5517
  %tobool = icmp ne %struct.VEC_tree_base* %1, null, !dbg !5517
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5517

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5517
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 1, !dbg !5517
  %3 = load i32, i32* %alloc, align 4, !dbg !5517
  %4 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5517
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %4, i32 0, i32 0, !dbg !5517
  %5 = load i32, i32* %num, align 8, !dbg !5517
  %sub = sub i32 %3, %5, !dbg !5517
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5517
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5517
  %conv2 = zext i1 %cmp1 to i32, !dbg !5517
  br label %cond.end, !dbg !5517

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5517
  %tobool3 = icmp ne i32 %7, 0, !dbg !5517
  %lnot = xor i1 %tobool3, true, !dbg !5517
  %lnot.ext = zext i1 %lnot to i32, !dbg !5517
  br label %cond.end, !dbg !5517

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5517
  ret i32 %cond, !dbg !5517
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_incoming_edge_ignoring_loop_edges(%struct.basic_block_def* %bb) #0 !dbg !5519 {
entry:
  %retval = alloca %struct.edge_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %retval1 = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5522, metadata !DIExpression()), !dbg !5523
  call void @llvm.dbg.declare(metadata %struct.edge_def** %retval1, metadata !5524, metadata !DIExpression()), !dbg !5525
  store %struct.edge_def* null, %struct.edge_def** %retval1, align 8, !dbg !5525
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5526, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5528, metadata !DIExpression()), !dbg !5529
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5530
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !5530
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !5530
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5530
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !5530
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5530
  store i32 %3, i32* %2, align 8, !dbg !5530
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !5530
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5530
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !5530
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5530
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5530
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !5530
  br label %for.cond, !dbg !5530

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5532
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5532
  %10 = load i32, i32* %9, align 8, !dbg !5532
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5532
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5532
  %call2 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !5532
  %tobool = icmp ne i8 %call2, 0, !dbg !5530
  br i1 %tobool, label %for.body, label %for.end, !dbg !5530

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5534
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !5537
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5537
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5538
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !5539
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5539
  %call3 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %16), !dbg !5540
  %tobool4 = icmp ne i8 %call3, 0, !dbg !5540
  br i1 %tobool4, label %if.then, label %if.end, !dbg !5541

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5542

if.end:                                           ; preds = %for.body
  %17 = load %struct.edge_def*, %struct.edge_def** %retval1, align 8, !dbg !5543
  %tobool5 = icmp ne %struct.edge_def* %17, null, !dbg !5543
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !5545

if.then6:                                         ; preds = %if.end
  store %struct.edge_def* null, %struct.edge_def** %retval, align 8, !dbg !5546
  br label %return, !dbg !5546

if.end7:                                          ; preds = %if.end
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5547
  store %struct.edge_def* %18, %struct.edge_def** %retval1, align 8, !dbg !5548
  br label %for.inc, !dbg !5549

for.inc:                                          ; preds = %if.end7, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5532
  br label %for.cond, !dbg !5532, !llvm.loop !5550

for.end:                                          ; preds = %for.cond
  %19 = load %struct.edge_def*, %struct.edge_def** %retval1, align 8, !dbg !5552
  store %struct.edge_def* %19, %struct.edge_def** %retval, align 8, !dbg !5553
  br label %return, !dbg !5553

return:                                           ; preds = %for.end, %if.then6
  %20 = load %struct.edge_def*, %struct.edge_def** %retval, align 8, !dbg !5554
  ret %struct.edge_def* %20, !dbg !5554
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_equality(%union.tree_node* %x, %union.tree_node* %y) #0 !dbg !5555 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  %y.addr = alloca %union.tree_node*, align 8
  %prev_x = alloca %union.tree_node*, align 8
  %prev_y = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !5558, metadata !DIExpression()), !dbg !5559
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !5560, metadata !DIExpression()), !dbg !5561
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_x, metadata !5562, metadata !DIExpression()), !dbg !5563
  store %union.tree_node* null, %union.tree_node** %prev_x, align 8, !dbg !5563
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_y, metadata !5564, metadata !DIExpression()), !dbg !5565
  store %union.tree_node* null, %union.tree_node** %prev_y, align 8, !dbg !5565
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5566
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5566
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5566
  %bf.load = load i64, i64* %1, align 8, !dbg !5566
  %bf.clear = and i64 %bf.load, 65535, !dbg !5566
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5566
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !5568
  br i1 %cmp, label %if.then, label %if.end, !dbg !5569

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5570
  %ssa_name = bitcast %union.tree_node* %2 to %struct.tree_ssa_name*, !dbg !5570
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !5570
  %3 = load i32, i32* %version, align 8, !dbg !5570
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5570
  %tobool = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !5570
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5570

cond.true:                                        ; preds = %if.then
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5570
  %base1 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !5570
  br label %cond.end, !dbg !5570

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base1, %cond.true ], [ null, %cond.false ], !dbg !5570
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !5570
  %cmp2 = icmp ult i32 %3, %call, !dbg !5570
  br i1 %cmp2, label %cond.true3, label %cond.false13, !dbg !5570

cond.true3:                                       ; preds = %cond.end
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5570
  %tobool4 = icmp ne %struct.VEC_tree_heap* %6, null, !dbg !5570
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5570

cond.true5:                                       ; preds = %cond.true3
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5570
  %base6 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %7, i32 0, i32 0, !dbg !5570
  br label %cond.end8, !dbg !5570

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !5570

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_tree_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5570
  %8 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5570
  %ssa_name10 = bitcast %union.tree_node* %8 to %struct.tree_ssa_name*, !dbg !5570
  %version11 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name10, i32 0, i32 3, !dbg !5570
  %9 = load i32, i32* %version11, align 8, !dbg !5570
  %call12 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond9, i32 %9), !dbg !5570
  br label %cond.end14, !dbg !5570

cond.false13:                                     ; preds = %cond.end
  br label %cond.end14, !dbg !5570

cond.end14:                                       ; preds = %cond.false13, %cond.end8
  %cond15 = phi %union.tree_node* [ %call12, %cond.end8 ], [ null, %cond.false13 ], !dbg !5570
  store %union.tree_node* %cond15, %union.tree_node** %prev_x, align 8, !dbg !5571
  br label %if.end, !dbg !5572

if.end:                                           ; preds = %cond.end14, %entry
  %10 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5573
  %base16 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !5573
  %11 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5573
  %bf.load17 = load i64, i64* %11, align 8, !dbg !5573
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5573
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5573
  %cmp20 = icmp eq i32 %bf.cast19, 141, !dbg !5575
  br i1 %cmp20, label %if.then21, label %if.end45, !dbg !5576

if.then21:                                        ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5577
  %ssa_name22 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !5577
  %version23 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name22, i32 0, i32 3, !dbg !5577
  %13 = load i32, i32* %version23, align 8, !dbg !5577
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5577
  %tobool24 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !5577
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !5577

cond.true25:                                      ; preds = %if.then21
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5577
  %base26 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !5577
  br label %cond.end28, !dbg !5577

cond.false27:                                     ; preds = %if.then21
  br label %cond.end28, !dbg !5577

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_tree_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !5577
  %call30 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond29), !dbg !5577
  %cmp31 = icmp ult i32 %13, %call30, !dbg !5577
  br i1 %cmp31, label %cond.true32, label %cond.false42, !dbg !5577

cond.true32:                                      ; preds = %cond.end28
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5577
  %tobool33 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !5577
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !5577

cond.true34:                                      ; preds = %cond.true32
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !5577
  %base35 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !5577
  br label %cond.end37, !dbg !5577

cond.false36:                                     ; preds = %cond.true32
  br label %cond.end37, !dbg !5577

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_tree_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !5577
  %18 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5577
  %ssa_name39 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !5577
  %version40 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name39, i32 0, i32 3, !dbg !5577
  %19 = load i32, i32* %version40, align 8, !dbg !5577
  %call41 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond38, i32 %19), !dbg !5577
  br label %cond.end43, !dbg !5577

cond.false42:                                     ; preds = %cond.end28
  br label %cond.end43, !dbg !5577

cond.end43:                                       ; preds = %cond.false42, %cond.end37
  %cond44 = phi %union.tree_node* [ %call41, %cond.end37 ], [ null, %cond.false42 ], !dbg !5577
  store %union.tree_node* %cond44, %union.tree_node** %prev_y, align 8, !dbg !5578
  br label %if.end45, !dbg !5579

if.end45:                                         ; preds = %cond.end43, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5580
  %call46 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %20), !dbg !5582
  %tobool47 = icmp ne i8 %call46, 0, !dbg !5582
  br i1 %tobool47, label %if.then48, label %if.else, !dbg !5583

if.then48:                                        ; preds = %if.end45
  br label %if.end68, !dbg !5583

if.else:                                          ; preds = %if.end45
  %21 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5584
  %call49 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %21), !dbg !5586
  %conv = zext i8 %call49 to i32, !dbg !5586
  %tobool50 = icmp ne i32 %conv, 0, !dbg !5586
  br i1 %tobool50, label %if.then55, label %lor.lhs.false, !dbg !5587

lor.lhs.false:                                    ; preds = %if.else
  %22 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5588
  %call51 = call i32 @loop_depth_of_name(%union.tree_node* %22), !dbg !5589
  %23 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5590
  %call52 = call i32 @loop_depth_of_name(%union.tree_node* %23), !dbg !5591
  %cmp53 = icmp sle i32 %call51, %call52, !dbg !5592
  br i1 %cmp53, label %if.then55, label %if.else56, !dbg !5593

if.then55:                                        ; preds = %lor.lhs.false, %if.else
  %24 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5594
  store %union.tree_node* %24, %union.tree_node** %prev_x, align 8, !dbg !5595
  %25 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5596
  store %union.tree_node* %25, %union.tree_node** %x.addr, align 8, !dbg !5597
  %26 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !5598
  store %union.tree_node* %26, %union.tree_node** %y.addr, align 8, !dbg !5599
  %27 = load %union.tree_node*, %union.tree_node** %prev_y, align 8, !dbg !5600
  store %union.tree_node* %27, %union.tree_node** %prev_x, align 8, !dbg !5601
  br label %if.end67, !dbg !5602

if.else56:                                        ; preds = %lor.lhs.false
  %28 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !5603
  %tobool57 = icmp ne %union.tree_node* %28, null, !dbg !5603
  br i1 %tobool57, label %land.lhs.true, label %if.else62, !dbg !5605

land.lhs.true:                                    ; preds = %if.else56
  %29 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !5606
  %call58 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %29), !dbg !5607
  %conv59 = zext i8 %call58 to i32, !dbg !5607
  %tobool60 = icmp ne i32 %conv59, 0, !dbg !5607
  br i1 %tobool60, label %if.then61, label %if.else62, !dbg !5608

if.then61:                                        ; preds = %land.lhs.true
  %30 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5609
  store %union.tree_node* %30, %union.tree_node** %x.addr, align 8, !dbg !5610
  %31 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !5611
  store %union.tree_node* %31, %union.tree_node** %y.addr, align 8, !dbg !5612
  %32 = load %union.tree_node*, %union.tree_node** %prev_y, align 8, !dbg !5613
  store %union.tree_node* %32, %union.tree_node** %prev_x, align 8, !dbg !5614
  br label %if.end66, !dbg !5615

if.else62:                                        ; preds = %land.lhs.true, %if.else56
  %33 = load %union.tree_node*, %union.tree_node** %prev_y, align 8, !dbg !5616
  %tobool63 = icmp ne %union.tree_node* %33, null, !dbg !5616
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !5618

if.then64:                                        ; preds = %if.else62
  %34 = load %union.tree_node*, %union.tree_node** %prev_y, align 8, !dbg !5619
  store %union.tree_node* %34, %union.tree_node** %y.addr, align 8, !dbg !5620
  br label %if.end65, !dbg !5621

if.end65:                                         ; preds = %if.then64, %if.else62
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then61
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then55
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.then48
  %35 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5622
  %base69 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !5622
  %36 = bitcast %struct.tree_base* %base69 to i64*, !dbg !5622
  %bf.load70 = load i64, i64* %36, align 8, !dbg !5622
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !5622
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !5622
  %cmp73 = icmp ne i32 %bf.cast72, 141, !dbg !5624
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !5625

if.then75:                                        ; preds = %if.end68
  br label %return, !dbg !5626

if.end76:                                         ; preds = %if.end68
  %37 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common = bitcast %union.tree_node* %37 to %struct.tree_common*, !dbg !5627
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5627
  %38 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5627
  %base77 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !5627
  %39 = bitcast %struct.tree_base* %base77 to i64*, !dbg !5627
  %bf.load78 = load i64, i64* %39, align 8, !dbg !5627
  %bf.clear79 = and i64 %bf.load78, 65535, !dbg !5627
  %bf.cast80 = trunc i64 %bf.clear79 to i32, !dbg !5627
  %cmp81 = icmp eq i32 %bf.cast80, 14, !dbg !5627
  br i1 %cmp81, label %cond.true83, label %cond.false87, !dbg !5627

cond.true83:                                      ; preds = %if.end76
  %40 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common84 = bitcast %union.tree_node* %40 to %struct.tree_common*, !dbg !5627
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !5627
  %41 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !5627
  %call86 = call i32 @vector_type_mode(%union.tree_node* %41), !dbg !5627
  br label %cond.end93, !dbg !5627

cond.false87:                                     ; preds = %if.end76
  %42 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common88 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !5627
  %type89 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common88, i32 0, i32 2, !dbg !5627
  %43 = load %union.tree_node*, %union.tree_node** %type89, align 8, !dbg !5627
  %type90 = bitcast %union.tree_node* %43 to %struct.tree_type*, !dbg !5627
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type90, i32 0, i32 6, !dbg !5627
  %bf.load91 = load i32, i32* %mode, align 4, !dbg !5627
  %bf.lshr = lshr i32 %bf.load91, 16, !dbg !5627
  %bf.clear92 = and i32 %bf.lshr, 255, !dbg !5627
  br label %cond.end93, !dbg !5627

cond.end93:                                       ; preds = %cond.false87, %cond.true83
  %cond94 = phi i32 [ %call86, %cond.true83 ], [ %bf.clear92, %cond.false87 ], !dbg !5627
  %idxprom = zext i32 %cond94 to i64, !dbg !5627
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5627
  %44 = load i8, i8* %arrayidx, align 1, !dbg !5627
  %conv95 = zext i8 %44 to i32, !dbg !5627
  %cmp96 = icmp eq i32 %conv95, 8, !dbg !5627
  br i1 %cmp96, label %land.lhs.true182, label %lor.lhs.false98, !dbg !5627

lor.lhs.false98:                                  ; preds = %cond.end93
  %45 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common99 = bitcast %union.tree_node* %45 to %struct.tree_common*, !dbg !5627
  %type100 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common99, i32 0, i32 2, !dbg !5627
  %46 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !5627
  %base101 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !5627
  %47 = bitcast %struct.tree_base* %base101 to i64*, !dbg !5627
  %bf.load102 = load i64, i64* %47, align 8, !dbg !5627
  %bf.clear103 = and i64 %bf.load102, 65535, !dbg !5627
  %bf.cast104 = trunc i64 %bf.clear103 to i32, !dbg !5627
  %cmp105 = icmp eq i32 %bf.cast104, 14, !dbg !5627
  br i1 %cmp105, label %cond.true107, label %cond.false111, !dbg !5627

cond.true107:                                     ; preds = %lor.lhs.false98
  %48 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common108 = bitcast %union.tree_node* %48 to %struct.tree_common*, !dbg !5627
  %type109 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common108, i32 0, i32 2, !dbg !5627
  %49 = load %union.tree_node*, %union.tree_node** %type109, align 8, !dbg !5627
  %call110 = call i32 @vector_type_mode(%union.tree_node* %49), !dbg !5627
  br label %cond.end119, !dbg !5627

cond.false111:                                    ; preds = %lor.lhs.false98
  %50 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common112 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !5627
  %type113 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common112, i32 0, i32 2, !dbg !5627
  %51 = load %union.tree_node*, %union.tree_node** %type113, align 8, !dbg !5627
  %type114 = bitcast %union.tree_node* %51 to %struct.tree_type*, !dbg !5627
  %mode115 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type114, i32 0, i32 6, !dbg !5627
  %bf.load116 = load i32, i32* %mode115, align 4, !dbg !5627
  %bf.lshr117 = lshr i32 %bf.load116, 16, !dbg !5627
  %bf.clear118 = and i32 %bf.lshr117, 255, !dbg !5627
  br label %cond.end119, !dbg !5627

cond.end119:                                      ; preds = %cond.false111, %cond.true107
  %cond120 = phi i32 [ %call110, %cond.true107 ], [ %bf.clear118, %cond.false111 ], !dbg !5627
  %idxprom121 = zext i32 %cond120 to i64, !dbg !5627
  %arrayidx122 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom121, !dbg !5627
  %52 = load i8, i8* %arrayidx122, align 1, !dbg !5627
  %conv123 = zext i8 %52 to i32, !dbg !5627
  %cmp124 = icmp eq i32 %conv123, 9, !dbg !5627
  br i1 %cmp124, label %land.lhs.true182, label %lor.lhs.false126, !dbg !5627

lor.lhs.false126:                                 ; preds = %cond.end119
  %53 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common127 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !5627
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !5627
  %54 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !5627
  %base129 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !5627
  %55 = bitcast %struct.tree_base* %base129 to i64*, !dbg !5627
  %bf.load130 = load i64, i64* %55, align 8, !dbg !5627
  %bf.clear131 = and i64 %bf.load130, 65535, !dbg !5627
  %bf.cast132 = trunc i64 %bf.clear131 to i32, !dbg !5627
  %cmp133 = icmp eq i32 %bf.cast132, 14, !dbg !5627
  br i1 %cmp133, label %cond.true135, label %cond.false139, !dbg !5627

cond.true135:                                     ; preds = %lor.lhs.false126
  %56 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common136 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !5627
  %type137 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common136, i32 0, i32 2, !dbg !5627
  %57 = load %union.tree_node*, %union.tree_node** %type137, align 8, !dbg !5627
  %call138 = call i32 @vector_type_mode(%union.tree_node* %57), !dbg !5627
  br label %cond.end147, !dbg !5627

cond.false139:                                    ; preds = %lor.lhs.false126
  %58 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common140 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !5627
  %type141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2, !dbg !5627
  %59 = load %union.tree_node*, %union.tree_node** %type141, align 8, !dbg !5627
  %type142 = bitcast %union.tree_node* %59 to %struct.tree_type*, !dbg !5627
  %mode143 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type142, i32 0, i32 6, !dbg !5627
  %bf.load144 = load i32, i32* %mode143, align 4, !dbg !5627
  %bf.lshr145 = lshr i32 %bf.load144, 16, !dbg !5627
  %bf.clear146 = and i32 %bf.lshr145, 255, !dbg !5627
  br label %cond.end147, !dbg !5627

cond.end147:                                      ; preds = %cond.false139, %cond.true135
  %cond148 = phi i32 [ %call138, %cond.true135 ], [ %bf.clear146, %cond.false139 ], !dbg !5627
  %idxprom149 = zext i32 %cond148 to i64, !dbg !5627
  %arrayidx150 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom149, !dbg !5627
  %60 = load i8, i8* %arrayidx150, align 1, !dbg !5627
  %conv151 = zext i8 %60 to i32, !dbg !5627
  %cmp152 = icmp eq i32 %conv151, 11, !dbg !5627
  br i1 %cmp152, label %land.lhs.true182, label %lor.lhs.false154, !dbg !5627

lor.lhs.false154:                                 ; preds = %cond.end147
  %61 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common155 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !5627
  %type156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common155, i32 0, i32 2, !dbg !5627
  %62 = load %union.tree_node*, %union.tree_node** %type156, align 8, !dbg !5627
  %base157 = bitcast %union.tree_node* %62 to %struct.tree_base*, !dbg !5627
  %63 = bitcast %struct.tree_base* %base157 to i64*, !dbg !5627
  %bf.load158 = load i64, i64* %63, align 8, !dbg !5627
  %bf.clear159 = and i64 %bf.load158, 65535, !dbg !5627
  %bf.cast160 = trunc i64 %bf.clear159 to i32, !dbg !5627
  %cmp161 = icmp eq i32 %bf.cast160, 14, !dbg !5627
  br i1 %cmp161, label %cond.true163, label %cond.false167, !dbg !5627

cond.true163:                                     ; preds = %lor.lhs.false154
  %64 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common164 = bitcast %union.tree_node* %64 to %struct.tree_common*, !dbg !5627
  %type165 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common164, i32 0, i32 2, !dbg !5627
  %65 = load %union.tree_node*, %union.tree_node** %type165, align 8, !dbg !5627
  %call166 = call i32 @vector_type_mode(%union.tree_node* %65), !dbg !5627
  br label %cond.end175, !dbg !5627

cond.false167:                                    ; preds = %lor.lhs.false154
  %66 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common168 = bitcast %union.tree_node* %66 to %struct.tree_common*, !dbg !5627
  %type169 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common168, i32 0, i32 2, !dbg !5627
  %67 = load %union.tree_node*, %union.tree_node** %type169, align 8, !dbg !5627
  %type170 = bitcast %union.tree_node* %67 to %struct.tree_type*, !dbg !5627
  %mode171 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type170, i32 0, i32 6, !dbg !5627
  %bf.load172 = load i32, i32* %mode171, align 4, !dbg !5627
  %bf.lshr173 = lshr i32 %bf.load172, 16, !dbg !5627
  %bf.clear174 = and i32 %bf.lshr173, 255, !dbg !5627
  br label %cond.end175, !dbg !5627

cond.end175:                                      ; preds = %cond.false167, %cond.true163
  %cond176 = phi i32 [ %call166, %cond.true163 ], [ %bf.clear174, %cond.false167 ], !dbg !5627
  %idxprom177 = zext i32 %cond176 to i64, !dbg !5627
  %arrayidx178 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom177, !dbg !5627
  %68 = load i8, i8* %arrayidx178, align 1, !dbg !5627
  %conv179 = zext i8 %68 to i32, !dbg !5627
  %cmp180 = icmp eq i32 %conv179, 17, !dbg !5627
  br i1 %cmp180, label %land.lhs.true182, label %if.end529, !dbg !5627

land.lhs.true182:                                 ; preds = %cond.end175, %cond.end147, %cond.end119, %cond.end93
  %69 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common183 = bitcast %union.tree_node* %69 to %struct.tree_common*, !dbg !5627
  %type184 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common183, i32 0, i32 2, !dbg !5627
  %70 = load %union.tree_node*, %union.tree_node** %type184, align 8, !dbg !5627
  %base185 = bitcast %union.tree_node* %70 to %struct.tree_base*, !dbg !5627
  %71 = bitcast %struct.tree_base* %base185 to i64*, !dbg !5627
  %bf.load186 = load i64, i64* %71, align 8, !dbg !5627
  %bf.clear187 = and i64 %bf.load186, 65535, !dbg !5627
  %bf.cast188 = trunc i64 %bf.clear187 to i32, !dbg !5627
  %cmp189 = icmp eq i32 %bf.cast188, 14, !dbg !5627
  br i1 %cmp189, label %cond.true191, label %cond.false195, !dbg !5627

cond.true191:                                     ; preds = %land.lhs.true182
  %72 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common192 = bitcast %union.tree_node* %72 to %struct.tree_common*, !dbg !5627
  %type193 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common192, i32 0, i32 2, !dbg !5627
  %73 = load %union.tree_node*, %union.tree_node** %type193, align 8, !dbg !5627
  %call194 = call i32 @vector_type_mode(%union.tree_node* %73), !dbg !5627
  br label %cond.end203, !dbg !5627

cond.false195:                                    ; preds = %land.lhs.true182
  %74 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common196 = bitcast %union.tree_node* %74 to %struct.tree_common*, !dbg !5627
  %type197 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common196, i32 0, i32 2, !dbg !5627
  %75 = load %union.tree_node*, %union.tree_node** %type197, align 8, !dbg !5627
  %type198 = bitcast %union.tree_node* %75 to %struct.tree_type*, !dbg !5627
  %mode199 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type198, i32 0, i32 6, !dbg !5627
  %bf.load200 = load i32, i32* %mode199, align 4, !dbg !5627
  %bf.lshr201 = lshr i32 %bf.load200, 16, !dbg !5627
  %bf.clear202 = and i32 %bf.lshr201, 255, !dbg !5627
  br label %cond.end203, !dbg !5627

cond.end203:                                      ; preds = %cond.false195, %cond.true191
  %cond204 = phi i32 [ %call194, %cond.true191 ], [ %bf.clear202, %cond.false195 ], !dbg !5627
  %idxprom205 = zext i32 %cond204 to i64, !dbg !5627
  %arrayidx206 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom205, !dbg !5627
  %76 = load i8, i8* %arrayidx206, align 1, !dbg !5627
  %conv207 = zext i8 %76 to i32, !dbg !5627
  %cmp208 = icmp eq i32 %conv207, 8, !dbg !5627
  br i1 %cmp208, label %cond.true238, label %lor.lhs.false210, !dbg !5627

lor.lhs.false210:                                 ; preds = %cond.end203
  %77 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common211 = bitcast %union.tree_node* %77 to %struct.tree_common*, !dbg !5627
  %type212 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common211, i32 0, i32 2, !dbg !5627
  %78 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !5627
  %base213 = bitcast %union.tree_node* %78 to %struct.tree_base*, !dbg !5627
  %79 = bitcast %struct.tree_base* %base213 to i64*, !dbg !5627
  %bf.load214 = load i64, i64* %79, align 8, !dbg !5627
  %bf.clear215 = and i64 %bf.load214, 65535, !dbg !5627
  %bf.cast216 = trunc i64 %bf.clear215 to i32, !dbg !5627
  %cmp217 = icmp eq i32 %bf.cast216, 14, !dbg !5627
  br i1 %cmp217, label %cond.true219, label %cond.false223, !dbg !5627

cond.true219:                                     ; preds = %lor.lhs.false210
  %80 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common220 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !5627
  %type221 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common220, i32 0, i32 2, !dbg !5627
  %81 = load %union.tree_node*, %union.tree_node** %type221, align 8, !dbg !5627
  %call222 = call i32 @vector_type_mode(%union.tree_node* %81), !dbg !5627
  br label %cond.end231, !dbg !5627

cond.false223:                                    ; preds = %lor.lhs.false210
  %82 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common224 = bitcast %union.tree_node* %82 to %struct.tree_common*, !dbg !5627
  %type225 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common224, i32 0, i32 2, !dbg !5627
  %83 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !5627
  %type226 = bitcast %union.tree_node* %83 to %struct.tree_type*, !dbg !5627
  %mode227 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type226, i32 0, i32 6, !dbg !5627
  %bf.load228 = load i32, i32* %mode227, align 4, !dbg !5627
  %bf.lshr229 = lshr i32 %bf.load228, 16, !dbg !5627
  %bf.clear230 = and i32 %bf.lshr229, 255, !dbg !5627
  br label %cond.end231, !dbg !5627

cond.end231:                                      ; preds = %cond.false223, %cond.true219
  %cond232 = phi i32 [ %call222, %cond.true219 ], [ %bf.clear230, %cond.false223 ], !dbg !5627
  %idxprom233 = zext i32 %cond232 to i64, !dbg !5627
  %arrayidx234 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom233, !dbg !5627
  %84 = load i8, i8* %arrayidx234, align 1, !dbg !5627
  %conv235 = zext i8 %84 to i32, !dbg !5627
  %cmp236 = icmp eq i32 %conv235, 9, !dbg !5627
  br i1 %cmp236, label %cond.true238, label %cond.false261, !dbg !5627

cond.true238:                                     ; preds = %cond.end231, %cond.end203
  %85 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common239 = bitcast %union.tree_node* %85 to %struct.tree_common*, !dbg !5627
  %type240 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common239, i32 0, i32 2, !dbg !5627
  %86 = load %union.tree_node*, %union.tree_node** %type240, align 8, !dbg !5627
  %base241 = bitcast %union.tree_node* %86 to %struct.tree_base*, !dbg !5627
  %87 = bitcast %struct.tree_base* %base241 to i64*, !dbg !5627
  %bf.load242 = load i64, i64* %87, align 8, !dbg !5627
  %bf.clear243 = and i64 %bf.load242, 65535, !dbg !5627
  %bf.cast244 = trunc i64 %bf.clear243 to i32, !dbg !5627
  %cmp245 = icmp eq i32 %bf.cast244, 14, !dbg !5627
  br i1 %cmp245, label %cond.true247, label %cond.false251, !dbg !5627

cond.true247:                                     ; preds = %cond.true238
  %88 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common248 = bitcast %union.tree_node* %88 to %struct.tree_common*, !dbg !5627
  %type249 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common248, i32 0, i32 2, !dbg !5627
  %89 = load %union.tree_node*, %union.tree_node** %type249, align 8, !dbg !5627
  %call250 = call i32 @vector_type_mode(%union.tree_node* %89), !dbg !5627
  br label %cond.end259, !dbg !5627

cond.false251:                                    ; preds = %cond.true238
  %90 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common252 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !5627
  %type253 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common252, i32 0, i32 2, !dbg !5627
  %91 = load %union.tree_node*, %union.tree_node** %type253, align 8, !dbg !5627
  %type254 = bitcast %union.tree_node* %91 to %struct.tree_type*, !dbg !5627
  %mode255 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type254, i32 0, i32 6, !dbg !5627
  %bf.load256 = load i32, i32* %mode255, align 4, !dbg !5627
  %bf.lshr257 = lshr i32 %bf.load256, 16, !dbg !5627
  %bf.clear258 = and i32 %bf.lshr257, 255, !dbg !5627
  br label %cond.end259, !dbg !5627

cond.end259:                                      ; preds = %cond.false251, %cond.true247
  %cond260 = phi i32 [ %call250, %cond.true247 ], [ %bf.clear258, %cond.false251 ], !dbg !5627
  br label %cond.end287, !dbg !5627

cond.false261:                                    ; preds = %cond.end231
  %92 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common262 = bitcast %union.tree_node* %92 to %struct.tree_common*, !dbg !5627
  %type263 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common262, i32 0, i32 2, !dbg !5627
  %93 = load %union.tree_node*, %union.tree_node** %type263, align 8, !dbg !5627
  %base264 = bitcast %union.tree_node* %93 to %struct.tree_base*, !dbg !5627
  %94 = bitcast %struct.tree_base* %base264 to i64*, !dbg !5627
  %bf.load265 = load i64, i64* %94, align 8, !dbg !5627
  %bf.clear266 = and i64 %bf.load265, 65535, !dbg !5627
  %bf.cast267 = trunc i64 %bf.clear266 to i32, !dbg !5627
  %cmp268 = icmp eq i32 %bf.cast267, 14, !dbg !5627
  br i1 %cmp268, label %cond.true270, label %cond.false274, !dbg !5627

cond.true270:                                     ; preds = %cond.false261
  %95 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common271 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !5627
  %type272 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common271, i32 0, i32 2, !dbg !5627
  %96 = load %union.tree_node*, %union.tree_node** %type272, align 8, !dbg !5627
  %call273 = call i32 @vector_type_mode(%union.tree_node* %96), !dbg !5627
  br label %cond.end282, !dbg !5627

cond.false274:                                    ; preds = %cond.false261
  %97 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common275 = bitcast %union.tree_node* %97 to %struct.tree_common*, !dbg !5627
  %type276 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common275, i32 0, i32 2, !dbg !5627
  %98 = load %union.tree_node*, %union.tree_node** %type276, align 8, !dbg !5627
  %type277 = bitcast %union.tree_node* %98 to %struct.tree_type*, !dbg !5627
  %mode278 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type277, i32 0, i32 6, !dbg !5627
  %bf.load279 = load i32, i32* %mode278, align 4, !dbg !5627
  %bf.lshr280 = lshr i32 %bf.load279, 16, !dbg !5627
  %bf.clear281 = and i32 %bf.lshr280, 255, !dbg !5627
  br label %cond.end282, !dbg !5627

cond.end282:                                      ; preds = %cond.false274, %cond.true270
  %cond283 = phi i32 [ %call273, %cond.true270 ], [ %bf.clear281, %cond.false274 ], !dbg !5627
  %idxprom284 = zext i32 %cond283 to i64, !dbg !5627
  %arrayidx285 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom284, !dbg !5627
  %99 = load i8, i8* %arrayidx285, align 1, !dbg !5627
  %conv286 = zext i8 %99 to i32, !dbg !5627
  br label %cond.end287, !dbg !5627

cond.end287:                                      ; preds = %cond.end282, %cond.end259
  %cond288 = phi i32 [ %cond260, %cond.end259 ], [ %conv286, %cond.end282 ], !dbg !5627
  %idxprom289 = zext i32 %cond288 to i64, !dbg !5627
  %arrayidx290 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom289, !dbg !5627
  %100 = load i8, i8* %arrayidx290, align 1, !dbg !5627
  %conv291 = zext i8 %100 to i32, !dbg !5627
  %cmp292 = icmp eq i32 %conv291, 9, !dbg !5627
  br i1 %cmp292, label %cond.true294, label %cond.false401, !dbg !5627

cond.true294:                                     ; preds = %cond.end287
  %101 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common295 = bitcast %union.tree_node* %101 to %struct.tree_common*, !dbg !5627
  %type296 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common295, i32 0, i32 2, !dbg !5627
  %102 = load %union.tree_node*, %union.tree_node** %type296, align 8, !dbg !5627
  %base297 = bitcast %union.tree_node* %102 to %struct.tree_base*, !dbg !5627
  %103 = bitcast %struct.tree_base* %base297 to i64*, !dbg !5627
  %bf.load298 = load i64, i64* %103, align 8, !dbg !5627
  %bf.clear299 = and i64 %bf.load298, 65535, !dbg !5627
  %bf.cast300 = trunc i64 %bf.clear299 to i32, !dbg !5627
  %cmp301 = icmp eq i32 %bf.cast300, 14, !dbg !5627
  br i1 %cmp301, label %cond.true303, label %cond.false307, !dbg !5627

cond.true303:                                     ; preds = %cond.true294
  %104 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common304 = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !5627
  %type305 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common304, i32 0, i32 2, !dbg !5627
  %105 = load %union.tree_node*, %union.tree_node** %type305, align 8, !dbg !5627
  %call306 = call i32 @vector_type_mode(%union.tree_node* %105), !dbg !5627
  br label %cond.end315, !dbg !5627

cond.false307:                                    ; preds = %cond.true294
  %106 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common308 = bitcast %union.tree_node* %106 to %struct.tree_common*, !dbg !5627
  %type309 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common308, i32 0, i32 2, !dbg !5627
  %107 = load %union.tree_node*, %union.tree_node** %type309, align 8, !dbg !5627
  %type310 = bitcast %union.tree_node* %107 to %struct.tree_type*, !dbg !5627
  %mode311 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type310, i32 0, i32 6, !dbg !5627
  %bf.load312 = load i32, i32* %mode311, align 4, !dbg !5627
  %bf.lshr313 = lshr i32 %bf.load312, 16, !dbg !5627
  %bf.clear314 = and i32 %bf.lshr313, 255, !dbg !5627
  br label %cond.end315, !dbg !5627

cond.end315:                                      ; preds = %cond.false307, %cond.true303
  %cond316 = phi i32 [ %call306, %cond.true303 ], [ %bf.clear314, %cond.false307 ], !dbg !5627
  %idxprom317 = zext i32 %cond316 to i64, !dbg !5627
  %arrayidx318 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom317, !dbg !5627
  %108 = load i8, i8* %arrayidx318, align 1, !dbg !5627
  %conv319 = zext i8 %108 to i32, !dbg !5627
  %cmp320 = icmp eq i32 %conv319, 8, !dbg !5627
  br i1 %cmp320, label %cond.true350, label %lor.lhs.false322, !dbg !5627

lor.lhs.false322:                                 ; preds = %cond.end315
  %109 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common323 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !5627
  %type324 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common323, i32 0, i32 2, !dbg !5627
  %110 = load %union.tree_node*, %union.tree_node** %type324, align 8, !dbg !5627
  %base325 = bitcast %union.tree_node* %110 to %struct.tree_base*, !dbg !5627
  %111 = bitcast %struct.tree_base* %base325 to i64*, !dbg !5627
  %bf.load326 = load i64, i64* %111, align 8, !dbg !5627
  %bf.clear327 = and i64 %bf.load326, 65535, !dbg !5627
  %bf.cast328 = trunc i64 %bf.clear327 to i32, !dbg !5627
  %cmp329 = icmp eq i32 %bf.cast328, 14, !dbg !5627
  br i1 %cmp329, label %cond.true331, label %cond.false335, !dbg !5627

cond.true331:                                     ; preds = %lor.lhs.false322
  %112 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common332 = bitcast %union.tree_node* %112 to %struct.tree_common*, !dbg !5627
  %type333 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common332, i32 0, i32 2, !dbg !5627
  %113 = load %union.tree_node*, %union.tree_node** %type333, align 8, !dbg !5627
  %call334 = call i32 @vector_type_mode(%union.tree_node* %113), !dbg !5627
  br label %cond.end343, !dbg !5627

cond.false335:                                    ; preds = %lor.lhs.false322
  %114 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common336 = bitcast %union.tree_node* %114 to %struct.tree_common*, !dbg !5627
  %type337 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common336, i32 0, i32 2, !dbg !5627
  %115 = load %union.tree_node*, %union.tree_node** %type337, align 8, !dbg !5627
  %type338 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !5627
  %mode339 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type338, i32 0, i32 6, !dbg !5627
  %bf.load340 = load i32, i32* %mode339, align 4, !dbg !5627
  %bf.lshr341 = lshr i32 %bf.load340, 16, !dbg !5627
  %bf.clear342 = and i32 %bf.lshr341, 255, !dbg !5627
  br label %cond.end343, !dbg !5627

cond.end343:                                      ; preds = %cond.false335, %cond.true331
  %cond344 = phi i32 [ %call334, %cond.true331 ], [ %bf.clear342, %cond.false335 ], !dbg !5627
  %idxprom345 = zext i32 %cond344 to i64, !dbg !5627
  %arrayidx346 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom345, !dbg !5627
  %116 = load i8, i8* %arrayidx346, align 1, !dbg !5627
  %conv347 = zext i8 %116 to i32, !dbg !5627
  %cmp348 = icmp eq i32 %conv347, 9, !dbg !5627
  br i1 %cmp348, label %cond.true350, label %cond.false373, !dbg !5627

cond.true350:                                     ; preds = %cond.end343, %cond.end315
  %117 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common351 = bitcast %union.tree_node* %117 to %struct.tree_common*, !dbg !5627
  %type352 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common351, i32 0, i32 2, !dbg !5627
  %118 = load %union.tree_node*, %union.tree_node** %type352, align 8, !dbg !5627
  %base353 = bitcast %union.tree_node* %118 to %struct.tree_base*, !dbg !5627
  %119 = bitcast %struct.tree_base* %base353 to i64*, !dbg !5627
  %bf.load354 = load i64, i64* %119, align 8, !dbg !5627
  %bf.clear355 = and i64 %bf.load354, 65535, !dbg !5627
  %bf.cast356 = trunc i64 %bf.clear355 to i32, !dbg !5627
  %cmp357 = icmp eq i32 %bf.cast356, 14, !dbg !5627
  br i1 %cmp357, label %cond.true359, label %cond.false363, !dbg !5627

cond.true359:                                     ; preds = %cond.true350
  %120 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common360 = bitcast %union.tree_node* %120 to %struct.tree_common*, !dbg !5627
  %type361 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common360, i32 0, i32 2, !dbg !5627
  %121 = load %union.tree_node*, %union.tree_node** %type361, align 8, !dbg !5627
  %call362 = call i32 @vector_type_mode(%union.tree_node* %121), !dbg !5627
  br label %cond.end371, !dbg !5627

cond.false363:                                    ; preds = %cond.true350
  %122 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common364 = bitcast %union.tree_node* %122 to %struct.tree_common*, !dbg !5627
  %type365 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common364, i32 0, i32 2, !dbg !5627
  %123 = load %union.tree_node*, %union.tree_node** %type365, align 8, !dbg !5627
  %type366 = bitcast %union.tree_node* %123 to %struct.tree_type*, !dbg !5627
  %mode367 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type366, i32 0, i32 6, !dbg !5627
  %bf.load368 = load i32, i32* %mode367, align 4, !dbg !5627
  %bf.lshr369 = lshr i32 %bf.load368, 16, !dbg !5627
  %bf.clear370 = and i32 %bf.lshr369, 255, !dbg !5627
  br label %cond.end371, !dbg !5627

cond.end371:                                      ; preds = %cond.false363, %cond.true359
  %cond372 = phi i32 [ %call362, %cond.true359 ], [ %bf.clear370, %cond.false363 ], !dbg !5627
  br label %cond.end399, !dbg !5627

cond.false373:                                    ; preds = %cond.end343
  %124 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common374 = bitcast %union.tree_node* %124 to %struct.tree_common*, !dbg !5627
  %type375 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common374, i32 0, i32 2, !dbg !5627
  %125 = load %union.tree_node*, %union.tree_node** %type375, align 8, !dbg !5627
  %base376 = bitcast %union.tree_node* %125 to %struct.tree_base*, !dbg !5627
  %126 = bitcast %struct.tree_base* %base376 to i64*, !dbg !5627
  %bf.load377 = load i64, i64* %126, align 8, !dbg !5627
  %bf.clear378 = and i64 %bf.load377, 65535, !dbg !5627
  %bf.cast379 = trunc i64 %bf.clear378 to i32, !dbg !5627
  %cmp380 = icmp eq i32 %bf.cast379, 14, !dbg !5627
  br i1 %cmp380, label %cond.true382, label %cond.false386, !dbg !5627

cond.true382:                                     ; preds = %cond.false373
  %127 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common383 = bitcast %union.tree_node* %127 to %struct.tree_common*, !dbg !5627
  %type384 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common383, i32 0, i32 2, !dbg !5627
  %128 = load %union.tree_node*, %union.tree_node** %type384, align 8, !dbg !5627
  %call385 = call i32 @vector_type_mode(%union.tree_node* %128), !dbg !5627
  br label %cond.end394, !dbg !5627

cond.false386:                                    ; preds = %cond.false373
  %129 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common387 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !5627
  %type388 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common387, i32 0, i32 2, !dbg !5627
  %130 = load %union.tree_node*, %union.tree_node** %type388, align 8, !dbg !5627
  %type389 = bitcast %union.tree_node* %130 to %struct.tree_type*, !dbg !5627
  %mode390 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type389, i32 0, i32 6, !dbg !5627
  %bf.load391 = load i32, i32* %mode390, align 4, !dbg !5627
  %bf.lshr392 = lshr i32 %bf.load391, 16, !dbg !5627
  %bf.clear393 = and i32 %bf.lshr392, 255, !dbg !5627
  br label %cond.end394, !dbg !5627

cond.end394:                                      ; preds = %cond.false386, %cond.true382
  %cond395 = phi i32 [ %call385, %cond.true382 ], [ %bf.clear393, %cond.false386 ], !dbg !5627
  %idxprom396 = zext i32 %cond395 to i64, !dbg !5627
  %arrayidx397 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom396, !dbg !5627
  %131 = load i8, i8* %arrayidx397, align 1, !dbg !5627
  %conv398 = zext i8 %131 to i32, !dbg !5627
  br label %cond.end399, !dbg !5627

cond.end399:                                      ; preds = %cond.end394, %cond.end371
  %cond400 = phi i32 [ %cond372, %cond.end371 ], [ %conv398, %cond.end394 ], !dbg !5627
  %sub = sub i32 %cond400, 42, !dbg !5627
  %add = add i32 %sub, 4, !dbg !5627
  br label %cond.end509, !dbg !5627

cond.false401:                                    ; preds = %cond.end287
  %132 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common402 = bitcast %union.tree_node* %132 to %struct.tree_common*, !dbg !5627
  %type403 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common402, i32 0, i32 2, !dbg !5627
  %133 = load %union.tree_node*, %union.tree_node** %type403, align 8, !dbg !5627
  %base404 = bitcast %union.tree_node* %133 to %struct.tree_base*, !dbg !5627
  %134 = bitcast %struct.tree_base* %base404 to i64*, !dbg !5627
  %bf.load405 = load i64, i64* %134, align 8, !dbg !5627
  %bf.clear406 = and i64 %bf.load405, 65535, !dbg !5627
  %bf.cast407 = trunc i64 %bf.clear406 to i32, !dbg !5627
  %cmp408 = icmp eq i32 %bf.cast407, 14, !dbg !5627
  br i1 %cmp408, label %cond.true410, label %cond.false414, !dbg !5627

cond.true410:                                     ; preds = %cond.false401
  %135 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common411 = bitcast %union.tree_node* %135 to %struct.tree_common*, !dbg !5627
  %type412 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common411, i32 0, i32 2, !dbg !5627
  %136 = load %union.tree_node*, %union.tree_node** %type412, align 8, !dbg !5627
  %call413 = call i32 @vector_type_mode(%union.tree_node* %136), !dbg !5627
  br label %cond.end422, !dbg !5627

cond.false414:                                    ; preds = %cond.false401
  %137 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common415 = bitcast %union.tree_node* %137 to %struct.tree_common*, !dbg !5627
  %type416 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common415, i32 0, i32 2, !dbg !5627
  %138 = load %union.tree_node*, %union.tree_node** %type416, align 8, !dbg !5627
  %type417 = bitcast %union.tree_node* %138 to %struct.tree_type*, !dbg !5627
  %mode418 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type417, i32 0, i32 6, !dbg !5627
  %bf.load419 = load i32, i32* %mode418, align 4, !dbg !5627
  %bf.lshr420 = lshr i32 %bf.load419, 16, !dbg !5627
  %bf.clear421 = and i32 %bf.lshr420, 255, !dbg !5627
  br label %cond.end422, !dbg !5627

cond.end422:                                      ; preds = %cond.false414, %cond.true410
  %cond423 = phi i32 [ %call413, %cond.true410 ], [ %bf.clear421, %cond.false414 ], !dbg !5627
  %idxprom424 = zext i32 %cond423 to i64, !dbg !5627
  %arrayidx425 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom424, !dbg !5627
  %139 = load i8, i8* %arrayidx425, align 1, !dbg !5627
  %conv426 = zext i8 %139 to i32, !dbg !5627
  %cmp427 = icmp eq i32 %conv426, 8, !dbg !5627
  br i1 %cmp427, label %cond.true457, label %lor.lhs.false429, !dbg !5627

lor.lhs.false429:                                 ; preds = %cond.end422
  %140 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common430 = bitcast %union.tree_node* %140 to %struct.tree_common*, !dbg !5627
  %type431 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common430, i32 0, i32 2, !dbg !5627
  %141 = load %union.tree_node*, %union.tree_node** %type431, align 8, !dbg !5627
  %base432 = bitcast %union.tree_node* %141 to %struct.tree_base*, !dbg !5627
  %142 = bitcast %struct.tree_base* %base432 to i64*, !dbg !5627
  %bf.load433 = load i64, i64* %142, align 8, !dbg !5627
  %bf.clear434 = and i64 %bf.load433, 65535, !dbg !5627
  %bf.cast435 = trunc i64 %bf.clear434 to i32, !dbg !5627
  %cmp436 = icmp eq i32 %bf.cast435, 14, !dbg !5627
  br i1 %cmp436, label %cond.true438, label %cond.false442, !dbg !5627

cond.true438:                                     ; preds = %lor.lhs.false429
  %143 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common439 = bitcast %union.tree_node* %143 to %struct.tree_common*, !dbg !5627
  %type440 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common439, i32 0, i32 2, !dbg !5627
  %144 = load %union.tree_node*, %union.tree_node** %type440, align 8, !dbg !5627
  %call441 = call i32 @vector_type_mode(%union.tree_node* %144), !dbg !5627
  br label %cond.end450, !dbg !5627

cond.false442:                                    ; preds = %lor.lhs.false429
  %145 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common443 = bitcast %union.tree_node* %145 to %struct.tree_common*, !dbg !5627
  %type444 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common443, i32 0, i32 2, !dbg !5627
  %146 = load %union.tree_node*, %union.tree_node** %type444, align 8, !dbg !5627
  %type445 = bitcast %union.tree_node* %146 to %struct.tree_type*, !dbg !5627
  %mode446 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type445, i32 0, i32 6, !dbg !5627
  %bf.load447 = load i32, i32* %mode446, align 4, !dbg !5627
  %bf.lshr448 = lshr i32 %bf.load447, 16, !dbg !5627
  %bf.clear449 = and i32 %bf.lshr448, 255, !dbg !5627
  br label %cond.end450, !dbg !5627

cond.end450:                                      ; preds = %cond.false442, %cond.true438
  %cond451 = phi i32 [ %call441, %cond.true438 ], [ %bf.clear449, %cond.false442 ], !dbg !5627
  %idxprom452 = zext i32 %cond451 to i64, !dbg !5627
  %arrayidx453 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom452, !dbg !5627
  %147 = load i8, i8* %arrayidx453, align 1, !dbg !5627
  %conv454 = zext i8 %147 to i32, !dbg !5627
  %cmp455 = icmp eq i32 %conv454, 9, !dbg !5627
  br i1 %cmp455, label %cond.true457, label %cond.false480, !dbg !5627

cond.true457:                                     ; preds = %cond.end450, %cond.end422
  %148 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common458 = bitcast %union.tree_node* %148 to %struct.tree_common*, !dbg !5627
  %type459 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common458, i32 0, i32 2, !dbg !5627
  %149 = load %union.tree_node*, %union.tree_node** %type459, align 8, !dbg !5627
  %base460 = bitcast %union.tree_node* %149 to %struct.tree_base*, !dbg !5627
  %150 = bitcast %struct.tree_base* %base460 to i64*, !dbg !5627
  %bf.load461 = load i64, i64* %150, align 8, !dbg !5627
  %bf.clear462 = and i64 %bf.load461, 65535, !dbg !5627
  %bf.cast463 = trunc i64 %bf.clear462 to i32, !dbg !5627
  %cmp464 = icmp eq i32 %bf.cast463, 14, !dbg !5627
  br i1 %cmp464, label %cond.true466, label %cond.false470, !dbg !5627

cond.true466:                                     ; preds = %cond.true457
  %151 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common467 = bitcast %union.tree_node* %151 to %struct.tree_common*, !dbg !5627
  %type468 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common467, i32 0, i32 2, !dbg !5627
  %152 = load %union.tree_node*, %union.tree_node** %type468, align 8, !dbg !5627
  %call469 = call i32 @vector_type_mode(%union.tree_node* %152), !dbg !5627
  br label %cond.end478, !dbg !5627

cond.false470:                                    ; preds = %cond.true457
  %153 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common471 = bitcast %union.tree_node* %153 to %struct.tree_common*, !dbg !5627
  %type472 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common471, i32 0, i32 2, !dbg !5627
  %154 = load %union.tree_node*, %union.tree_node** %type472, align 8, !dbg !5627
  %type473 = bitcast %union.tree_node* %154 to %struct.tree_type*, !dbg !5627
  %mode474 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type473, i32 0, i32 6, !dbg !5627
  %bf.load475 = load i32, i32* %mode474, align 4, !dbg !5627
  %bf.lshr476 = lshr i32 %bf.load475, 16, !dbg !5627
  %bf.clear477 = and i32 %bf.lshr476, 255, !dbg !5627
  br label %cond.end478, !dbg !5627

cond.end478:                                      ; preds = %cond.false470, %cond.true466
  %cond479 = phi i32 [ %call469, %cond.true466 ], [ %bf.clear477, %cond.false470 ], !dbg !5627
  br label %cond.end506, !dbg !5627

cond.false480:                                    ; preds = %cond.end450
  %155 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common481 = bitcast %union.tree_node* %155 to %struct.tree_common*, !dbg !5627
  %type482 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common481, i32 0, i32 2, !dbg !5627
  %156 = load %union.tree_node*, %union.tree_node** %type482, align 8, !dbg !5627
  %base483 = bitcast %union.tree_node* %156 to %struct.tree_base*, !dbg !5627
  %157 = bitcast %struct.tree_base* %base483 to i64*, !dbg !5627
  %bf.load484 = load i64, i64* %157, align 8, !dbg !5627
  %bf.clear485 = and i64 %bf.load484, 65535, !dbg !5627
  %bf.cast486 = trunc i64 %bf.clear485 to i32, !dbg !5627
  %cmp487 = icmp eq i32 %bf.cast486, 14, !dbg !5627
  br i1 %cmp487, label %cond.true489, label %cond.false493, !dbg !5627

cond.true489:                                     ; preds = %cond.false480
  %158 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common490 = bitcast %union.tree_node* %158 to %struct.tree_common*, !dbg !5627
  %type491 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common490, i32 0, i32 2, !dbg !5627
  %159 = load %union.tree_node*, %union.tree_node** %type491, align 8, !dbg !5627
  %call492 = call i32 @vector_type_mode(%union.tree_node* %159), !dbg !5627
  br label %cond.end501, !dbg !5627

cond.false493:                                    ; preds = %cond.false480
  %160 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5627
  %common494 = bitcast %union.tree_node* %160 to %struct.tree_common*, !dbg !5627
  %type495 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common494, i32 0, i32 2, !dbg !5627
  %161 = load %union.tree_node*, %union.tree_node** %type495, align 8, !dbg !5627
  %type496 = bitcast %union.tree_node* %161 to %struct.tree_type*, !dbg !5627
  %mode497 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type496, i32 0, i32 6, !dbg !5627
  %bf.load498 = load i32, i32* %mode497, align 4, !dbg !5627
  %bf.lshr499 = lshr i32 %bf.load498, 16, !dbg !5627
  %bf.clear500 = and i32 %bf.lshr499, 255, !dbg !5627
  br label %cond.end501, !dbg !5627

cond.end501:                                      ; preds = %cond.false493, %cond.true489
  %cond502 = phi i32 [ %call492, %cond.true489 ], [ %bf.clear500, %cond.false493 ], !dbg !5627
  %idxprom503 = zext i32 %cond502 to i64, !dbg !5627
  %arrayidx504 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom503, !dbg !5627
  %162 = load i8, i8* %arrayidx504, align 1, !dbg !5627
  %conv505 = zext i8 %162 to i32, !dbg !5627
  br label %cond.end506, !dbg !5627

cond.end506:                                      ; preds = %cond.end501, %cond.end478
  %cond507 = phi i32 [ %cond479, %cond.end478 ], [ %conv505, %cond.end501 ], !dbg !5627
  %sub508 = sub i32 %cond507, 38, !dbg !5627
  br label %cond.end509, !dbg !5627

cond.end509:                                      ; preds = %cond.end506, %cond.end399
  %cond510 = phi i32 [ %add, %cond.end399 ], [ %sub508, %cond.end506 ], !dbg !5627
  %idxprom511 = zext i32 %cond510 to i64, !dbg !5627
  %arrayidx512 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom511, !dbg !5627
  %163 = load %struct.real_format*, %struct.real_format** %arrayidx512, align 8, !dbg !5627
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %163, i32 0, i32 14, !dbg !5627
  %164 = load i8, i8* %has_signed_zero, align 1, !dbg !5627
  %conv513 = zext i8 %164 to i32, !dbg !5627
  %tobool514 = icmp ne i32 %conv513, 0, !dbg !5627
  br i1 %tobool514, label %land.lhs.true515, label %if.end529, !dbg !5627

land.lhs.true515:                                 ; preds = %cond.end509
  %165 = load i32, i32* @flag_signed_zeros, align 4, !dbg !5627
  %tobool516 = icmp ne i32 %165, 0, !dbg !5627
  br i1 %tobool516, label %land.lhs.true517, label %if.end529, !dbg !5629

land.lhs.true517:                                 ; preds = %land.lhs.true515
  %166 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5630
  %base518 = bitcast %union.tree_node* %166 to %struct.tree_base*, !dbg !5630
  %167 = bitcast %struct.tree_base* %base518 to i64*, !dbg !5630
  %bf.load519 = load i64, i64* %167, align 8, !dbg !5630
  %bf.clear520 = and i64 %bf.load519, 65535, !dbg !5630
  %bf.cast521 = trunc i64 %bf.clear520 to i32, !dbg !5630
  %cmp522 = icmp ne i32 %bf.cast521, 24, !dbg !5631
  br i1 %cmp522, label %if.then528, label %lor.lhs.false524, !dbg !5632

lor.lhs.false524:                                 ; preds = %land.lhs.true517
  %168 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5633
  %real_cst = bitcast %union.tree_node* %168 to %struct.tree_real_cst*, !dbg !5633
  %real_cst_ptr = getelementptr inbounds %struct.tree_real_cst, %struct.tree_real_cst* %real_cst, i32 0, i32 1, !dbg !5633
  %169 = load %struct.real_value*, %struct.real_value** %real_cst_ptr, align 8, !dbg !5633
  %call525 = call zeroext i8 @real_compare(i32 101, %struct.real_value* @dconst0, %struct.real_value* %169), !dbg !5633
  %conv526 = zext i8 %call525 to i32, !dbg !5633
  %tobool527 = icmp ne i32 %conv526, 0, !dbg !5633
  br i1 %tobool527, label %if.then528, label %if.end529, !dbg !5634

if.then528:                                       ; preds = %lor.lhs.false524, %land.lhs.true517
  br label %return, !dbg !5635

if.end529:                                        ; preds = %lor.lhs.false524, %land.lhs.true515, %cond.end509, %cond.end175
  %170 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5636
  %171 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5637
  %172 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !5638
  call void @record_const_or_copy_1(%union.tree_node* %170, %union.tree_node* %171, %union.tree_node* %172), !dbg !5639
  br label %return, !dbg !5640

return:                                           ; preds = %if.end529, %if.then528, %if.then75
  ret void, !dbg !5640
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_cond(%struct.cond_equivalence* %p) #0 !dbg !5641 {
entry:
  %p.addr = alloca %struct.cond_equivalence*, align 8
  %element = alloca %struct.expr_hash_elt*, align 8
  %slot = alloca i8**, align 8
  store %struct.cond_equivalence* %p, %struct.cond_equivalence** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cond_equivalence** %p.addr, metadata !5644, metadata !DIExpression()), !dbg !5645
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element, metadata !5646, metadata !DIExpression()), !dbg !5647
  %call = call i8* @xcalloc(i64 1, i64 80), !dbg !5648
  %0 = bitcast i8* %call to %struct.expr_hash_elt*, !dbg !5648
  store %struct.expr_hash_elt* %0, %struct.expr_hash_elt** %element, align 8, !dbg !5647
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !5649, metadata !DIExpression()), !dbg !5650
  %1 = load %struct.cond_equivalence*, %struct.cond_equivalence** %p.addr, align 8, !dbg !5651
  %cond = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %1, i32 0, i32 0, !dbg !5652
  %2 = load %struct.cond_equivalence*, %struct.cond_equivalence** %p.addr, align 8, !dbg !5653
  %value = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %2, i32 0, i32 1, !dbg !5654
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5654
  %4 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5655
  call void @initialize_hash_element_from_expr(%struct.hashable_expr* %cond, %union.tree_node* %3, %struct.expr_hash_elt* %4), !dbg !5656
  %5 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !5657
  %6 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5658
  %7 = bitcast %struct.expr_hash_elt* %6 to i8*, !dbg !5659
  %8 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5660
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %8, i32 0, i32 3, !dbg !5661
  %9 = load i32, i32* %hash, align 8, !dbg !5661
  %call1 = call i8** @htab_find_slot_with_hash(%struct.htab* %5, i8* %7, i32 %9, i32 1), !dbg !5662
  store i8** %call1, i8*** %slot, align 8, !dbg !5663
  %10 = load i8**, i8*** %slot, align 8, !dbg !5664
  %11 = load i8*, i8** %10, align 8, !dbg !5666
  %cmp = icmp eq i8* %11, null, !dbg !5667
  br i1 %cmp, label %if.then, label %if.else, !dbg !5668

if.then:                                          ; preds = %entry
  %12 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5669
  %13 = bitcast %struct.expr_hash_elt* %12 to i8*, !dbg !5671
  %14 = load i8**, i8*** %slot, align 8, !dbg !5672
  store i8* %13, i8** %14, align 8, !dbg !5673
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5674
  %tobool = icmp ne %struct._IO_FILE* %15, null, !dbg !5674
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5676

land.lhs.true:                                    ; preds = %if.then
  %16 = load i32, i32* @dump_flags, align 4, !dbg !5677
  %and = and i32 %16, 8, !dbg !5678
  %tobool2 = icmp ne i32 %and, 0, !dbg !5678
  br i1 %tobool2, label %if.then3, label %if.end, !dbg !5679

if.then3:                                         ; preds = %land.lhs.true
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5680
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0)), !dbg !5682
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5683
  %19 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5684
  call void @print_expr_hash_elt(%struct._IO_FILE* %18, %struct.expr_hash_elt* %19), !dbg !5685
  br label %if.end, !dbg !5686

if.end:                                           ; preds = %if.then3, %land.lhs.true, %if.then
  %20 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5687
  %call5 = call %struct.expr_hash_elt** @VEC_expr_hash_elt_t_heap_safe_push(%struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, %struct.expr_hash_elt* %20), !dbg !5687
  br label %if.end6, !dbg !5688

if.else:                                          ; preds = %entry
  %21 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element, align 8, !dbg !5689
  %22 = bitcast %struct.expr_hash_elt* %21 to i8*, !dbg !5689
  call void @free(i8* %22), !dbg !5690
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  ret void, !dbg !5691
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !5692 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !5695, metadata !DIExpression()), !dbg !5696
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !5697, metadata !DIExpression()), !dbg !5698
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !5699
  store i32 0, i32* %index, align 8, !dbg !5700
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !5701
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !5702
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !5703
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !5704
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !5704
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !5704
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !5705 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5709, metadata !DIExpression()), !dbg !5710
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !5711, metadata !DIExpression()), !dbg !5712
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5713
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5713
  %5 = load i32, i32* %4, align 8, !dbg !5713
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5713
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5713
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5713
  %tobool = icmp ne i8 %call, 0, !dbg !5713
  br i1 %tobool, label %if.else, label %if.then, !dbg !5715

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5716
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5716
  %10 = load i32, i32* %9, align 8, !dbg !5716
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5716
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5716
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5716
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5718
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !5719
  store i8 1, i8* %retval, align 1, !dbg !5720
  br label %return, !dbg !5720

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !5721
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !5723
  store i8 0, i8* %retval, align 1, !dbg !5724
  br label %return, !dbg !5724

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !5725
  ret i8 %15, !dbg !5725
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !5726 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !5730, metadata !DIExpression()), !dbg !5731
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5732
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !5732
  %1 = load i32, i32* %index, align 8, !dbg !5732
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5732
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !5732
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5732
  %5 = load i32, i32* %4, align 8, !dbg !5732
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5732
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5732
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5732
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5732
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5732

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5732
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !5732
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5732
  %11 = load i32, i32* %10, align 8, !dbg !5732
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5732
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5732
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5732
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5732
  br label %cond.end, !dbg !5732

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5732
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5732
  %cmp = icmp ult i32 %1, %call2, !dbg !5732
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !5732

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5732
  br label %cond.end5, !dbg !5732

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5732

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !5732
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !5733
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !5734
  %15 = load i32, i32* %index7, align 8, !dbg !5735
  %inc = add i32 %15, 1, !dbg !5735
  store i32 %inc, i32* %index7, align 8, !dbg !5735
  ret void, !dbg !5736
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5737 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5740, metadata !DIExpression()), !dbg !5741
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5742
  %3 = load i32, i32* %index, align 8, !dbg !5742
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5743
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5743
  %6 = load i32, i32* %5, align 8, !dbg !5743
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5743
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5743
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5743
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5743
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5743

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5743
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5743
  %11 = load i32, i32* %10, align 8, !dbg !5743
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5743
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5743
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5743
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5743
  br label %cond.end, !dbg !5743

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5743

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5743
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5743
  %cmp = icmp eq i32 %3, %call2, !dbg !5744
  %conv = zext i1 %cmp to i32, !dbg !5744
  %conv3 = trunc i32 %conv to i8, !dbg !5745
  ret i8 %conv3, !dbg !5746
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5747 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5750, metadata !DIExpression()), !dbg !5751
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5752
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5752
  %5 = load i32, i32* %4, align 8, !dbg !5752
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5752
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5752
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5752
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5752
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5752

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5752
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5752
  %10 = load i32, i32* %9, align 8, !dbg !5752
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5752
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5752
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5752
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5752
  br label %cond.end, !dbg !5752

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5752

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5752
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5752
  %13 = load i32, i32* %index, align 8, !dbg !5752
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5752
  ret %struct.edge_def* %call2, !dbg !5753
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5754 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5759, metadata !DIExpression()), !dbg !5760
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5760
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5760

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5760
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5760
  %2 = load i32, i32* %num, align 8, !dbg !5760
  br label %cond.end, !dbg !5760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5760
  ret i32 %cond, !dbg !5760
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5761 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5764, metadata !DIExpression()), !dbg !5765
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5766
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5766
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5766
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5766

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5766
  br label %cond.end, !dbg !5766

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5766

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5766
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5767
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5767
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5768
  ret %struct.VEC_edge_gc* %5, !dbg !5769
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !5770 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5773, metadata !DIExpression()), !dbg !5774
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5775, metadata !DIExpression()), !dbg !5774
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5774
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5774
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5774

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5774
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5774
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !5774
  %3 = load i32, i32* %num, align 8, !dbg !5774
  %cmp = icmp ult i32 %1, %3, !dbg !5774
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5776
  %land.ext = zext i1 %4 to i32, !dbg !5774
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5774
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !5774
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5774
  %idxprom = zext i32 %6 to i64, !dbg !5774
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !5774
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !5774
  ret %struct.edge_def* %7, !dbg !5774
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) #0 !dbg !5777 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5782, metadata !DIExpression()), !dbg !5783
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5783
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5783
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5783

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5783
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %1, i32 0, i32 0, !dbg !5783
  %2 = load i32, i32* %num, align 8, !dbg !5783
  br label %cond.end, !dbg !5783

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5783

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5783
  ret i32 %cond, !dbg !5783
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) #0 !dbg !5784 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !5787, metadata !DIExpression()), !dbg !5788
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5789, metadata !DIExpression()), !dbg !5788
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5788
  %tobool = icmp ne %struct.VEC_tree_base* %0, null, !dbg !5788
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5788

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5788
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5788
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 0, !dbg !5788
  %3 = load i32, i32* %num, align 8, !dbg !5788
  %cmp = icmp ult i32 %1, %3, !dbg !5788
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5790
  %land.ext = zext i1 %4 to i32, !dbg !5788
  %5 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !5788
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %5, i32 0, i32 2, !dbg !5788
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5788
  %idxprom = zext i32 %6 to i64, !dbg !5788
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !5788
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5788
  ret %union.tree_node* %7, !dbg !5788
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) #2

declare dso_local zeroext i8 @real_compare(i32, %struct.real_value*, %struct.real_value*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_const_or_copy_1(%union.tree_node* %x, %union.tree_node* %y, %union.tree_node* %prev_x) #0 !dbg !5791 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  %y.addr = alloca %union.tree_node*, align 8
  %prev_x.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !5794, metadata !DIExpression()), !dbg !5795
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !5796, metadata !DIExpression()), !dbg !5797
  store %union.tree_node* %prev_x, %union.tree_node** %prev_x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_x.addr, metadata !5798, metadata !DIExpression()), !dbg !5799
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5800
  %1 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5801
  call void @set_ssa_name_value(%union.tree_node* %0, %union.tree_node* %1), !dbg !5802
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5803
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !5803
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5805

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !5806
  %and = and i32 %3, 8, !dbg !5807
  %tobool1 = icmp ne i32 %and, 0, !dbg !5807
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5808

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5809
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i64 0, i64 0)), !dbg !5811
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5812
  %6 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5813
  call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %6, i32 0), !dbg !5814
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5815
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)), !dbg !5816
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5817
  %9 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !5818
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %9, i32 0), !dbg !5819
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5820
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5821
  br label %if.end, !dbg !5822

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %call4 = call i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** @const_and_copies_stack, i32 2), !dbg !5823
  %11 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !5824
  %tobool5 = icmp ne %struct.VEC_tree_heap* %11, null, !dbg !5824
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !5824

cond.true:                                        ; preds = %if.end
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !5824
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i32 0, i32 0, !dbg !5824
  br label %cond.end, !dbg !5824

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5824

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5824
  %13 = load %union.tree_node*, %union.tree_node** %prev_x.addr, align 8, !dbg !5824
  %call6 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %13), !dbg !5824
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !5825
  %tobool7 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !5825
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !5825

cond.true8:                                       ; preds = %cond.end
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !5825
  %base9 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !5825
  br label %cond.end11, !dbg !5825

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !5825

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_tree_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !5825
  %16 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !5825
  %call13 = call %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond12, %union.tree_node* %16), !dbg !5825
  ret void, !dbg !5826
}

declare dso_local void @set_ssa_name_value(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) #2

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_hash_element_from_expr(%struct.hashable_expr* %expr, %union.tree_node* %lhs, %struct.expr_hash_elt* %element) #0 !dbg !5827 {
entry:
  %expr.addr = alloca %struct.hashable_expr*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %element.addr = alloca %struct.expr_hash_elt*, align 8
  store %struct.hashable_expr* %expr, %struct.hashable_expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr.addr, metadata !5831, metadata !DIExpression()), !dbg !5832
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !5833, metadata !DIExpression()), !dbg !5834
  store %struct.expr_hash_elt* %element, %struct.expr_hash_elt** %element.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element.addr, metadata !5835, metadata !DIExpression()), !dbg !5836
  %0 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5837
  %expr1 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %0, i32 0, i32 1, !dbg !5838
  %1 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !5839
  %2 = bitcast %struct.hashable_expr* %expr1 to i8*, !dbg !5840
  %3 = bitcast %struct.hashable_expr* %1 to i8*, !dbg !5840
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 48, i1 false), !dbg !5840
  %4 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !5841
  %5 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5842
  %lhs2 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %5, i32 0, i32 0, !dbg !5843
  store %union.tree_node* %4, %union.tree_node** %lhs2, align 8, !dbg !5844
  %6 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5845
  %stmt = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %6, i32 0, i32 2, !dbg !5846
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !5847
  %7 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5848
  %8 = bitcast %struct.expr_hash_elt* %7 to i8*, !dbg !5848
  %call = call i32 @avail_expr_hash(i8* %8), !dbg !5849
  %9 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5850
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %9, i32 0, i32 3, !dbg !5851
  store i32 %call, i32* %hash, align 8, !dbg !5852
  %10 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5853
  %11 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5854
  %stamp = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %11, i32 0, i32 4, !dbg !5855
  store %struct.expr_hash_elt* %10, %struct.expr_hash_elt** %stamp, align 8, !dbg !5856
  ret void, !dbg !5857
}

declare dso_local i8** @htab_find_slot_with_hash(%struct.htab*, i8*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @print_expr_hash_elt(%struct._IO_FILE* %stream, %struct.expr_hash_elt* %element) #0 !dbg !5858 {
entry:
  %stream.addr = alloca %struct._IO_FILE*, align 8
  %element.addr = alloca %struct.expr_hash_elt*, align 8
  %i = alloca i64, align 8
  %nargs = alloca i64, align 8
  store %struct._IO_FILE* %stream, %struct._IO_FILE** %stream.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %stream.addr, metadata !5861, metadata !DIExpression()), !dbg !5862
  store %struct.expr_hash_elt* %element, %struct.expr_hash_elt** %element.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element.addr, metadata !5863, metadata !DIExpression()), !dbg !5864
  %0 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5865
  %stmt = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %0, i32 0, i32 2, !dbg !5867
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5867
  %tobool = icmp ne %union.gimple_statement_d* %1, null, !dbg !5865
  br i1 %tobool, label %if.then, label %if.else, !dbg !5868

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5869
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.17, i64 0, i64 0)), !dbg !5870
  br label %if.end, !dbg !5870

if.else:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5871
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0)), !dbg !5872
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5873
  %lhs = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %4, i32 0, i32 0, !dbg !5875
  %5 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !5875
  %tobool2 = icmp ne %union.tree_node* %5, null, !dbg !5873
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !5876

if.then3:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5877
  %7 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5879
  %lhs4 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %7, i32 0, i32 0, !dbg !5880
  %8 = load %union.tree_node*, %union.tree_node** %lhs4, align 8, !dbg !5880
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %8, i32 0), !dbg !5881
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5882
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)), !dbg !5883
  br label %if.end6, !dbg !5884

if.end6:                                          ; preds = %if.then3, %if.end
  %10 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5885
  %expr = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %10, i32 0, i32 1, !dbg !5886
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr, i32 0, i32 1, !dbg !5887
  %11 = load i32, i32* %kind, align 8, !dbg !5887
  switch i32 %11, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb15
    i32 3, label %sw.bb28
  ], !dbg !5888

sw.bb:                                            ; preds = %if.end6
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5889
  %13 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5891
  %expr7 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %13, i32 0, i32 1, !dbg !5892
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr7, i32 0, i32 2, !dbg !5893
  %single = bitcast %union.anon.0* %ops to %struct.anon*, !dbg !5894
  %rhs = getelementptr inbounds %struct.anon, %struct.anon* %single, i32 0, i32 0, !dbg !5895
  %14 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !5895
  call void @print_generic_expr(%struct._IO_FILE* %12, %union.tree_node* %14, i32 0), !dbg !5896
  br label %sw.epilog, !dbg !5897

sw.bb8:                                           ; preds = %if.end6
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5898
  %16 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5899
  %expr9 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %16, i32 0, i32 1, !dbg !5900
  %ops10 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr9, i32 0, i32 2, !dbg !5901
  %unary = bitcast %union.anon.0* %ops10 to %struct.anon.1*, !dbg !5902
  %op = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary, i32 0, i32 0, !dbg !5903
  %17 = load i32, i32* %op, align 8, !dbg !5903
  %idxprom = zext i32 %17 to i64, !dbg !5904
  %arrayidx = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom, !dbg !5904
  %18 = load i8*, i8** %arrayidx, align 8, !dbg !5904
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.19, i64 0, i64 0), i8* %18), !dbg !5905
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5906
  %20 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5907
  %expr12 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %20, i32 0, i32 1, !dbg !5908
  %ops13 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr12, i32 0, i32 2, !dbg !5909
  %unary14 = bitcast %union.anon.0* %ops13 to %struct.anon.1*, !dbg !5910
  %opnd = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary14, i32 0, i32 1, !dbg !5911
  %21 = load %union.tree_node*, %union.tree_node** %opnd, align 8, !dbg !5911
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %21, i32 0), !dbg !5912
  br label %sw.epilog, !dbg !5913

sw.bb15:                                          ; preds = %if.end6
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5914
  %23 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5915
  %expr16 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %23, i32 0, i32 1, !dbg !5916
  %ops17 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr16, i32 0, i32 2, !dbg !5917
  %binary = bitcast %union.anon.0* %ops17 to %struct.anon.2*, !dbg !5918
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 1, !dbg !5919
  %24 = load %union.tree_node*, %union.tree_node** %opnd0, align 8, !dbg !5919
  call void @print_generic_expr(%struct._IO_FILE* %22, %union.tree_node* %24, i32 0), !dbg !5920
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5921
  %26 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5922
  %expr18 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %26, i32 0, i32 1, !dbg !5923
  %ops19 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr18, i32 0, i32 2, !dbg !5924
  %binary20 = bitcast %union.anon.0* %ops19 to %struct.anon.2*, !dbg !5925
  %op21 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary20, i32 0, i32 0, !dbg !5926
  %27 = load i32, i32* %op21, align 8, !dbg !5926
  %idxprom22 = zext i32 %27 to i64, !dbg !5927
  %arrayidx23 = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom22, !dbg !5927
  %28 = load i8*, i8** %arrayidx23, align 8, !dbg !5927
  %call24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0), i8* %28), !dbg !5928
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5929
  %30 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5930
  %expr25 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %30, i32 0, i32 1, !dbg !5931
  %ops26 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr25, i32 0, i32 2, !dbg !5932
  %binary27 = bitcast %union.anon.0* %ops26 to %struct.anon.2*, !dbg !5933
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary27, i32 0, i32 2, !dbg !5934
  %31 = load %union.tree_node*, %union.tree_node** %opnd1, align 8, !dbg !5934
  call void @print_generic_expr(%struct._IO_FILE* %29, %union.tree_node* %31, i32 0), !dbg !5935
  br label %sw.epilog, !dbg !5936

sw.bb28:                                          ; preds = %if.end6
  call void @llvm.dbg.declare(metadata i64* %i, metadata !5937, metadata !DIExpression()), !dbg !5939
  call void @llvm.dbg.declare(metadata i64* %nargs, metadata !5940, metadata !DIExpression()), !dbg !5941
  %32 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5942
  %expr29 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %32, i32 0, i32 1, !dbg !5943
  %ops30 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr29, i32 0, i32 2, !dbg !5944
  %call31 = bitcast %union.anon.0* %ops30 to %struct.anon.3*, !dbg !5945
  %nargs32 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call31, i32 0, i32 2, !dbg !5946
  %33 = load i64, i64* %nargs32, align 8, !dbg !5946
  store i64 %33, i64* %nargs, align 8, !dbg !5941
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5947
  %35 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5948
  %expr33 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %35, i32 0, i32 1, !dbg !5949
  %ops34 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr33, i32 0, i32 2, !dbg !5950
  %call35 = bitcast %union.anon.0* %ops34 to %struct.anon.3*, !dbg !5951
  %fn = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call35, i32 0, i32 0, !dbg !5952
  %36 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !5952
  call void @print_generic_expr(%struct._IO_FILE* %34, %union.tree_node* %36, i32 0), !dbg !5953
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5954
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0)), !dbg !5955
  store i64 0, i64* %i, align 8, !dbg !5956
  br label %for.cond, !dbg !5958

for.cond:                                         ; preds = %for.inc, %sw.bb28
  %38 = load i64, i64* %i, align 8, !dbg !5959
  %39 = load i64, i64* %nargs, align 8, !dbg !5961
  %cmp = icmp ult i64 %38, %39, !dbg !5962
  br i1 %cmp, label %for.body, label %for.end, !dbg !5963

for.body:                                         ; preds = %for.cond
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5964
  %41 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5966
  %expr37 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %41, i32 0, i32 1, !dbg !5967
  %ops38 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr37, i32 0, i32 2, !dbg !5968
  %call39 = bitcast %union.anon.0* %ops38 to %struct.anon.3*, !dbg !5969
  %args = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call39, i32 0, i32 3, !dbg !5970
  %42 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !5970
  %43 = load i64, i64* %i, align 8, !dbg !5971
  %arrayidx40 = getelementptr inbounds %union.tree_node*, %union.tree_node** %42, i64 %43, !dbg !5966
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx40, align 8, !dbg !5966
  call void @print_generic_expr(%struct._IO_FILE* %40, %union.tree_node* %44, i32 0), !dbg !5972
  %45 = load i64, i64* %i, align 8, !dbg !5973
  %add = add i64 %45, 1, !dbg !5975
  %46 = load i64, i64* %nargs, align 8, !dbg !5976
  %cmp41 = icmp ult i64 %add, %46, !dbg !5977
  br i1 %cmp41, label %if.then42, label %if.end44, !dbg !5978

if.then42:                                        ; preds = %for.body
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5979
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0)), !dbg !5980
  br label %if.end44, !dbg !5980

if.end44:                                         ; preds = %if.then42, %for.body
  br label %for.inc, !dbg !5981

for.inc:                                          ; preds = %if.end44
  %48 = load i64, i64* %i, align 8, !dbg !5982
  %inc = add i64 %48, 1, !dbg !5982
  store i64 %inc, i64* %i, align 8, !dbg !5982
  br label %for.cond, !dbg !5983, !llvm.loop !5984

for.end:                                          ; preds = %for.cond
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5986
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0)), !dbg !5987
  br label %sw.epilog, !dbg !5988

sw.epilog:                                        ; preds = %if.end6, %for.end, %sw.bb15, %sw.bb8, %sw.bb
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5989
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !5990
  %51 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5991
  %stmt47 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %51, i32 0, i32 2, !dbg !5993
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt47, align 8, !dbg !5993
  %tobool48 = icmp ne %union.gimple_statement_d* %52, null, !dbg !5991
  br i1 %tobool48, label %if.then49, label %if.end52, !dbg !5994

if.then49:                                        ; preds = %sw.epilog
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5995
  %call50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.24, i64 0, i64 0)), !dbg !5997
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %stream.addr, align 8, !dbg !5998
  %55 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !5999
  %stmt51 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %55, i32 0, i32 2, !dbg !6000
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt51, align 8, !dbg !6000
  call void @print_gimple_stmt(%struct._IO_FILE* %54, %union.gimple_statement_d* %56, i32 0, i32 0), !dbg !6001
  br label %if.end52, !dbg !6002

if.end52:                                         ; preds = %if.then49, %sw.epilog
  ret void, !dbg !6003
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @avail_expr_hash(i8* %p) #0 !dbg !6004 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %expr = alloca %struct.hashable_expr*, align 8
  %vuse = alloca %union.tree_node*, align 8
  %val = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !6005, metadata !DIExpression()), !dbg !6006
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6007, metadata !DIExpression()), !dbg !6008
  %0 = load i8*, i8** %p.addr, align 8, !dbg !6009
  %1 = bitcast i8* %0 to %struct.expr_hash_elt*, !dbg !6010
  %stmt1 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %1, i32 0, i32 2, !dbg !6011
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt1, align 8, !dbg !6011
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %stmt, align 8, !dbg !6008
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr, metadata !6012, metadata !DIExpression()), !dbg !6013
  %3 = load i8*, i8** %p.addr, align 8, !dbg !6014
  %4 = bitcast i8* %3 to %struct.expr_hash_elt*, !dbg !6015
  %expr2 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %4, i32 0, i32 1, !dbg !6016
  store %struct.hashable_expr* %expr2, %struct.hashable_expr** %expr, align 8, !dbg !6013
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse, metadata !6017, metadata !DIExpression()), !dbg !6018
  call void @llvm.dbg.declare(metadata i32* %val, metadata !6019, metadata !DIExpression()), !dbg !6020
  store i32 0, i32* %val, align 4, !dbg !6020
  %5 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !6021
  %6 = load i32, i32* %val, align 4, !dbg !6022
  %call = call i32 @iterative_hash_hashable_expr(%struct.hashable_expr* %5, i32 %6), !dbg !6023
  store i32 %call, i32* %val, align 4, !dbg !6024
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6025
  %tobool = icmp ne %union.gimple_statement_d* %7, null, !dbg !6025
  br i1 %tobool, label %if.end, label %if.then, !dbg !6027

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %val, align 4, !dbg !6028
  store i32 %8, i32* %retval, align 4, !dbg !6029
  br label %return, !dbg !6029

if.end:                                           ; preds = %entry
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6030
  %call3 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %9), !dbg !6032
  store %union.tree_node* %call3, %union.tree_node** %vuse, align 8, !dbg !6033
  %tobool4 = icmp ne %union.tree_node* %call3, null, !dbg !6033
  br i1 %tobool4, label %if.then5, label %if.end7, !dbg !6034

if.then5:                                         ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %vuse, align 8, !dbg !6035
  %11 = load i32, i32* %val, align 4, !dbg !6036
  %call6 = call i32 @iterative_hash_expr(%union.tree_node* %10, i32 %11), !dbg !6037
  store i32 %call6, i32* %val, align 4, !dbg !6038
  br label %if.end7, !dbg !6039

if.end7:                                          ; preds = %if.then5, %if.end
  %12 = load i32, i32* %val, align 4, !dbg !6040
  store i32 %12, i32* %retval, align 4, !dbg !6041
  br label %return, !dbg !6041

return:                                           ; preds = %if.end7, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !6042
  ret i32 %13, !dbg !6042
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @iterative_hash_hashable_expr(%struct.hashable_expr* %expr, i32 %val) #0 !dbg !6043 {
entry:
  %expr.addr = alloca %struct.hashable_expr*, align 8
  %val.addr = alloca i32, align 4
  %i = alloca i64, align 8
  %code = alloca i32, align 4
  store %struct.hashable_expr* %expr, %struct.hashable_expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr.addr, metadata !6046, metadata !DIExpression()), !dbg !6047
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6048, metadata !DIExpression()), !dbg !6049
  %0 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6050
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %0, i32 0, i32 1, !dbg !6051
  %1 = load i32, i32* %kind, align 8, !dbg !6051
  switch i32 %1, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb1
    i32 2, label %sw.bb19
    i32 3, label %sw.bb42
  ], !dbg !6052

sw.bb:                                            ; preds = %entry
  %2 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6053
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %2, i32 0, i32 2, !dbg !6055
  %single = bitcast %union.anon.0* %ops to %struct.anon*, !dbg !6056
  %rhs = getelementptr inbounds %struct.anon, %struct.anon* %single, i32 0, i32 0, !dbg !6057
  %3 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6057
  %4 = load i32, i32* %val.addr, align 4, !dbg !6058
  %call = call i32 @iterative_hash_expr(%union.tree_node* %3, i32 %4), !dbg !6059
  store i32 %call, i32* %val.addr, align 4, !dbg !6060
  br label %sw.epilog, !dbg !6061

sw.bb1:                                           ; preds = %entry
  %5 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6062
  %ops2 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %5, i32 0, i32 2, !dbg !6062
  %unary = bitcast %union.anon.0* %ops2 to %struct.anon.1*, !dbg !6062
  %op = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary, i32 0, i32 0, !dbg !6062
  %6 = bitcast i32* %op to i8*, !dbg !6062
  %7 = load i32, i32* %val.addr, align 4, !dbg !6062
  %call3 = call i32 @iterative_hash(i8* %6, i64 4, i32 %7), !dbg !6062
  store i32 %call3, i32* %val.addr, align 4, !dbg !6063
  %8 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6064
  %ops4 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %8, i32 0, i32 2, !dbg !6064
  %unary5 = bitcast %union.anon.0* %ops4 to %struct.anon.1*, !dbg !6064
  %op6 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary5, i32 0, i32 0, !dbg !6064
  %9 = load i32, i32* %op6, align 8, !dbg !6064
  %cmp = icmp eq i32 %9, 116, !dbg !6064
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6064

lor.lhs.false:                                    ; preds = %sw.bb1
  %10 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6064
  %ops7 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %10, i32 0, i32 2, !dbg !6064
  %unary8 = bitcast %union.anon.0* %ops7 to %struct.anon.1*, !dbg !6064
  %op9 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary8, i32 0, i32 0, !dbg !6064
  %11 = load i32, i32* %op9, align 8, !dbg !6064
  %cmp10 = icmp eq i32 %11, 113, !dbg !6064
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !6066

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %12 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6067
  %ops12 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %12, i32 0, i32 2, !dbg !6068
  %unary13 = bitcast %union.anon.0* %ops12 to %struct.anon.1*, !dbg !6069
  %op14 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary13, i32 0, i32 0, !dbg !6070
  %13 = load i32, i32* %op14, align 8, !dbg !6070
  %cmp15 = icmp eq i32 %13, 117, !dbg !6071
  br i1 %cmp15, label %if.then, label %if.end, !dbg !6072

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false, %sw.bb1
  %14 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6073
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %14, i32 0, i32 0, !dbg !6073
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6073
  %base = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !6073
  %16 = bitcast %struct.tree_base* %base to i64*, !dbg !6073
  %bf.load = load i64, i64* %16, align 8, !dbg !6073
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !6073
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6073
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6073
  %17 = load i32, i32* %val.addr, align 4, !dbg !6074
  %add = add i32 %17, %bf.cast, !dbg !6074
  store i32 %add, i32* %val.addr, align 4, !dbg !6074
  br label %if.end, !dbg !6075

if.end:                                           ; preds = %if.then, %lor.lhs.false11
  %18 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6076
  %ops16 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %18, i32 0, i32 2, !dbg !6077
  %unary17 = bitcast %union.anon.0* %ops16 to %struct.anon.1*, !dbg !6078
  %opnd = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary17, i32 0, i32 1, !dbg !6079
  %19 = load %union.tree_node*, %union.tree_node** %opnd, align 8, !dbg !6079
  %20 = load i32, i32* %val.addr, align 4, !dbg !6080
  %call18 = call i32 @iterative_hash_expr(%union.tree_node* %19, i32 %20), !dbg !6081
  store i32 %call18, i32* %val.addr, align 4, !dbg !6082
  br label %sw.epilog, !dbg !6083

sw.bb19:                                          ; preds = %entry
  %21 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6084
  %ops20 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %21, i32 0, i32 2, !dbg !6084
  %binary = bitcast %union.anon.0* %ops20 to %struct.anon.2*, !dbg !6084
  %op21 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 0, !dbg !6084
  %22 = bitcast i32* %op21 to i8*, !dbg !6084
  %23 = load i32, i32* %val.addr, align 4, !dbg !6084
  %call22 = call i32 @iterative_hash(i8* %22, i64 4, i32 %23), !dbg !6084
  store i32 %call22, i32* %val.addr, align 4, !dbg !6085
  %24 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6086
  %ops23 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %24, i32 0, i32 2, !dbg !6088
  %binary24 = bitcast %union.anon.0* %ops23 to %struct.anon.2*, !dbg !6089
  %op25 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary24, i32 0, i32 0, !dbg !6090
  %25 = load i32, i32* %op25, align 8, !dbg !6090
  %call26 = call zeroext i8 @commutative_tree_code(i32 %25), !dbg !6091
  %tobool = icmp ne i8 %call26, 0, !dbg !6091
  br i1 %tobool, label %if.then27, label %if.else, !dbg !6092

if.then27:                                        ; preds = %sw.bb19
  %26 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6093
  %ops28 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %26, i32 0, i32 2, !dbg !6094
  %binary29 = bitcast %union.anon.0* %ops28 to %struct.anon.2*, !dbg !6095
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary29, i32 0, i32 1, !dbg !6096
  %27 = load %union.tree_node*, %union.tree_node** %opnd0, align 8, !dbg !6096
  %28 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6097
  %ops30 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %28, i32 0, i32 2, !dbg !6098
  %binary31 = bitcast %union.anon.0* %ops30 to %struct.anon.2*, !dbg !6099
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary31, i32 0, i32 2, !dbg !6100
  %29 = load %union.tree_node*, %union.tree_node** %opnd1, align 8, !dbg !6100
  %30 = load i32, i32* %val.addr, align 4, !dbg !6101
  %call32 = call i32 @iterative_hash_exprs_commutative(%union.tree_node* %27, %union.tree_node* %29, i32 %30), !dbg !6102
  store i32 %call32, i32* %val.addr, align 4, !dbg !6103
  br label %if.end41, !dbg !6104

if.else:                                          ; preds = %sw.bb19
  %31 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6105
  %ops33 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %31, i32 0, i32 2, !dbg !6107
  %binary34 = bitcast %union.anon.0* %ops33 to %struct.anon.2*, !dbg !6108
  %opnd035 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary34, i32 0, i32 1, !dbg !6109
  %32 = load %union.tree_node*, %union.tree_node** %opnd035, align 8, !dbg !6109
  %33 = load i32, i32* %val.addr, align 4, !dbg !6110
  %call36 = call i32 @iterative_hash_expr(%union.tree_node* %32, i32 %33), !dbg !6111
  store i32 %call36, i32* %val.addr, align 4, !dbg !6112
  %34 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6113
  %ops37 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %34, i32 0, i32 2, !dbg !6114
  %binary38 = bitcast %union.anon.0* %ops37 to %struct.anon.2*, !dbg !6115
  %opnd139 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary38, i32 0, i32 2, !dbg !6116
  %35 = load %union.tree_node*, %union.tree_node** %opnd139, align 8, !dbg !6116
  %36 = load i32, i32* %val.addr, align 4, !dbg !6117
  %call40 = call i32 @iterative_hash_expr(%union.tree_node* %35, i32 %36), !dbg !6118
  store i32 %call40, i32* %val.addr, align 4, !dbg !6119
  br label %if.end41

if.end41:                                         ; preds = %if.else, %if.then27
  br label %sw.epilog, !dbg !6120

sw.bb42:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i64* %i, metadata !6121, metadata !DIExpression()), !dbg !6123
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6124, metadata !DIExpression()), !dbg !6125
  store i32 59, i32* %code, align 4, !dbg !6125
  %37 = bitcast i32* %code to i8*, !dbg !6126
  %38 = load i32, i32* %val.addr, align 4, !dbg !6126
  %call43 = call i32 @iterative_hash(i8* %37, i64 4, i32 %38), !dbg !6126
  store i32 %call43, i32* %val.addr, align 4, !dbg !6127
  %39 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6128
  %ops44 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %39, i32 0, i32 2, !dbg !6129
  %call45 = bitcast %union.anon.0* %ops44 to %struct.anon.3*, !dbg !6130
  %fn = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call45, i32 0, i32 0, !dbg !6131
  %40 = load %union.tree_node*, %union.tree_node** %fn, align 8, !dbg !6131
  %41 = load i32, i32* %val.addr, align 4, !dbg !6132
  %call46 = call i32 @iterative_hash_expr(%union.tree_node* %40, i32 %41), !dbg !6133
  store i32 %call46, i32* %val.addr, align 4, !dbg !6134
  store i64 0, i64* %i, align 8, !dbg !6135
  br label %for.cond, !dbg !6137

for.cond:                                         ; preds = %for.inc, %sw.bb42
  %42 = load i64, i64* %i, align 8, !dbg !6138
  %43 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6140
  %ops47 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %43, i32 0, i32 2, !dbg !6141
  %call48 = bitcast %union.anon.0* %ops47 to %struct.anon.3*, !dbg !6142
  %nargs = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call48, i32 0, i32 2, !dbg !6143
  %44 = load i64, i64* %nargs, align 8, !dbg !6143
  %cmp49 = icmp ult i64 %42, %44, !dbg !6144
  br i1 %cmp49, label %for.body, label %for.end, !dbg !6145

for.body:                                         ; preds = %for.cond
  %45 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !6146
  %ops50 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %45, i32 0, i32 2, !dbg !6147
  %call51 = bitcast %union.anon.0* %ops50 to %struct.anon.3*, !dbg !6148
  %args = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call51, i32 0, i32 3, !dbg !6149
  %46 = load %union.tree_node**, %union.tree_node*** %args, align 8, !dbg !6149
  %47 = load i64, i64* %i, align 8, !dbg !6150
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %46, i64 %47, !dbg !6146
  %48 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6146
  %49 = load i32, i32* %val.addr, align 4, !dbg !6151
  %call52 = call i32 @iterative_hash_expr(%union.tree_node* %48, i32 %49), !dbg !6152
  store i32 %call52, i32* %val.addr, align 4, !dbg !6153
  br label %for.inc, !dbg !6154

for.inc:                                          ; preds = %for.body
  %50 = load i64, i64* %i, align 8, !dbg !6155
  %inc = add i64 %50, 1, !dbg !6155
  store i64 %inc, i64* %i, align 8, !dbg !6155
  br label %for.cond, !dbg !6156, !llvm.loop !6157

for.end:                                          ; preds = %for.cond
  br label %sw.epilog, !dbg !6159

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 481, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6160
  br label %sw.epilog, !dbg !6161

sw.epilog:                                        ; preds = %sw.default, %for.end, %if.end41, %if.end, %sw.bb
  %51 = load i32, i32* %val.addr, align 4, !dbg !6162
  ret i32 %51, !dbg !6163
}

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) #2

declare dso_local i32 @iterative_hash(i8*, i64, i32) #2

declare dso_local i32 @iterative_hash_exprs_commutative(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) #2

declare dso_local i32 @operand_equal_for_phi_arg_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @may_propagate_copy(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @canonicalize_comparison(%union.gimple_statement_d* %condstmt) #0 !dbg !6164 {
entry:
  %condstmt.addr = alloca %union.gimple_statement_d*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %condstmt, %union.gimple_statement_d** %condstmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %condstmt.addr, metadata !6165, metadata !DIExpression()), !dbg !6166
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6171, metadata !DIExpression()), !dbg !6172
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6173
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6173
  %cmp = icmp eq i32 %call, 1, !dbg !6173
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6173

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 776, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6173
  br label %cond.end, !dbg !6173

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6173

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6173
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6174
  %call1 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %1), !dbg !6175
  store %union.tree_node* %call1, %union.tree_node** %op0, align 8, !dbg !6176
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6177
  %call2 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %2), !dbg !6178
  store %union.tree_node* %call2, %union.tree_node** %op1, align 8, !dbg !6179
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6180
  %call3 = call i32 @gimple_cond_code(%union.gimple_statement_d* %3), !dbg !6181
  store i32 %call3, i32* %code, align 4, !dbg !6182
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6183
  %5 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6185
  %call4 = call zeroext i8 @tree_swap_operands_p(%union.tree_node* %4, %union.tree_node* %5, i8 zeroext 0), !dbg !6186
  %tobool = icmp ne i8 %call4, 0, !dbg !6186
  br i1 %tobool, label %if.then, label %if.end13, !dbg !6187

if.then:                                          ; preds = %cond.end
  %6 = load i32, i32* %code, align 4, !dbg !6188
  %cmp5 = icmp eq i32 %6, 97, !dbg !6191
  br i1 %cmp5, label %if.then11, label %lor.lhs.false, !dbg !6192

lor.lhs.false:                                    ; preds = %if.then
  %7 = load i32, i32* %code, align 4, !dbg !6193
  %cmp6 = icmp eq i32 %7, 99, !dbg !6194
  br i1 %cmp6, label %if.then11, label %lor.lhs.false7, !dbg !6195

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %8 = load i32, i32* %code, align 4, !dbg !6196
  %cmp8 = icmp eq i32 %8, 98, !dbg !6197
  br i1 %cmp8, label %if.then11, label %lor.lhs.false9, !dbg !6198

lor.lhs.false9:                                   ; preds = %lor.lhs.false7
  %9 = load i32, i32* %code, align 4, !dbg !6199
  %cmp10 = icmp eq i32 %9, 100, !dbg !6200
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !6201

if.then11:                                        ; preds = %lor.lhs.false9, %lor.lhs.false7, %lor.lhs.false, %if.then
  %10 = load i32, i32* %code, align 4, !dbg !6202
  %call12 = call i32 @swap_tree_comparison(i32 %10), !dbg !6204
  store i32 %call12, i32* %code, align 4, !dbg !6205
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6206
  %12 = load i32, i32* %code, align 4, !dbg !6207
  call void @gimple_cond_set_code(%union.gimple_statement_d* %11, i32 %12), !dbg !6208
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6209
  %14 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6210
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %13, %union.tree_node* %14), !dbg !6211
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6212
  %16 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6213
  call void @gimple_cond_set_rhs(%union.gimple_statement_d* %15, %union.tree_node* %16), !dbg !6214
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %condstmt.addr, align 8, !dbg !6215
  call void @update_stmt(%union.gimple_statement_d* %17), !dbg !6216
  br label %if.end, !dbg !6217

if.end:                                           ; preds = %if.then11, %lor.lhs.false9
  br label %if.end13, !dbg !6218

if.end13:                                         ; preds = %if.end, %cond.end
  ret void, !dbg !6219
}

; Function Attrs: noinline nounwind uwtable
define internal void @cprop_into_stmt(%union.gimple_statement_d* %stmt) #0 !dbg !6220 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %op_p, metadata !6223, metadata !DIExpression()), !dbg !6224
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6225, metadata !DIExpression()), !dbg !6238
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6239
  %call = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %iter, %union.gimple_statement_d* %0, i32 5), !dbg !6239
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !6239
  br label %for.cond, !dbg !6239

for.cond:                                         ; preds = %for.inc, %entry
  %call1 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %iter), !dbg !6241
  %tobool = icmp ne i8 %call1, 0, !dbg !6241
  %lnot = xor i1 %tobool, true, !dbg !6241
  br i1 %lnot, label %for.body, label %for.end, !dbg !6239

for.body:                                         ; preds = %for.cond
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !6243
  %call2 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %1), !dbg !6243
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !6243
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6243
  %bf.load = load i64, i64* %2, align 8, !dbg !6243
  %bf.clear = and i64 %bf.load, 65535, !dbg !6243
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6243
  %cmp = icmp eq i32 %bf.cast, 141, !dbg !6246
  br i1 %cmp, label %if.then, label %if.end, !dbg !6247

if.then:                                          ; preds = %for.body
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6248
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !6249
  call void @cprop_operand(%union.gimple_statement_d* %3, %struct.ssa_use_operand_d* %4), !dbg !6250
  br label %if.end, !dbg !6250

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6251

for.inc:                                          ; preds = %if.end
  %call3 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %iter), !dbg !6241
  store %struct.ssa_use_operand_d* %call3, %struct.ssa_use_operand_d** %op_p, align 8, !dbg !6241
  br label %for.cond, !dbg !6241, !llvm.loop !6252

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6254
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_modified_p(%union.gimple_statement_d* %g) #0 !dbg !6255 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6256, metadata !DIExpression()), !dbg !6257
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6258
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6259
  %conv = zext i8 %call to i32, !dbg !6260
  %tobool = icmp ne i32 %conv, 0, !dbg !6260
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6260

cond.true:                                        ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6261
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6262
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6263
  %bf.load = load i32, i32* %2, align 8, !dbg !6263
  %bf.lshr = lshr i32 %bf.load, 13, !dbg !6263
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6263
  %conv1 = trunc i32 %bf.clear to i8, !dbg !6264
  %conv2 = zext i8 %conv1 to i32, !dbg !6264
  br label %cond.end, !dbg !6260

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6260

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ 0, %cond.false ], !dbg !6260
  %conv3 = trunc i32 %cond to i8, !dbg !6260
  ret i8 %conv3, !dbg !6265
}

declare dso_local zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator*) #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) #2

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #0 !dbg !6266 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6267, metadata !DIExpression()), !dbg !6268
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6269
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6270
  ret %union.tree_node* %call, !dbg !6271
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) #0 !dbg !6272 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6273, metadata !DIExpression()), !dbg !6274
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6275
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6276
  ret %union.tree_node* %call, !dbg !6277
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %gs) #0 !dbg !6278 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6279, metadata !DIExpression()), !dbg !6280
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6281
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6282
  ret %union.tree_node* %call, !dbg !6283
}

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) #0 !dbg !6284 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6285, metadata !DIExpression()), !dbg !6286
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6287
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !6289
  %tobool = icmp ne i8 %call, 0, !dbg !6289
  br i1 %tobool, label %if.then, label %if.else, !dbg !6290

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6291
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6292
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6293
  %bf.load = load i32, i32* %2, align 8, !dbg !6293
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !6293
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6293
  %conv = trunc i32 %bf.clear to i8, !dbg !6291
  store i8 %conv, i8* %retval, align 1, !dbg !6294
  br label %return, !dbg !6294

if.else:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6295
  br label %return, !dbg !6295

return:                                           ; preds = %if.else, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6296
  ret i8 %3, !dbg !6296
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) #0 !dbg !6297 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6298, metadata !DIExpression()), !dbg !6299
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6300
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6301
  %cmp = icmp eq i32 %call, 6, !dbg !6302
  %conv = zext i1 %cmp to i32, !dbg !6302
  %conv1 = trunc i32 %conv to i8, !dbg !6301
  ret i8 %conv1, !dbg !6303
}

declare dso_local zeroext i8 @gimple_rhs_has_side_effects(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !6304 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6305, metadata !DIExpression()), !dbg !6306
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6307
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6308
  %cmp = icmp eq i32 %call, 8, !dbg !6309
  %conv = zext i1 %cmp to i32, !dbg !6309
  %conv1 = trunc i32 %conv to i8, !dbg !6308
  ret i8 %conv1, !dbg !6310
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6311 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6312, metadata !DIExpression()), !dbg !6313
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6314
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6315
  ret %union.tree_node* %call, !dbg !6316
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !6317 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6318, metadata !DIExpression()), !dbg !6319
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !6320, metadata !DIExpression()), !dbg !6321
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6322
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !6323
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !6321
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6324
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6324
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6324
  %bf.load = load i64, i64* %2, align 8, !dbg !6324
  %bf.clear = and i64 %bf.load, 65535, !dbg !6324
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6324
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !6326
  br i1 %cmp, label %if.then, label %if.end, !dbg !6327

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !6328
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !6328
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !6328
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !6328
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6328
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !6329
  br label %return, !dbg !6329

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6330
  br label %return, !dbg !6330

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6331
  ret %union.tree_node* %5, !dbg !6331
}

declare dso_local void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_redundant_computations(%struct.gimple_stmt_iterator* %gsi) #0 !dbg !6332 {
entry:
  %gsi.addr = alloca %struct.gimple_stmt_iterator*, align 8
  %expr_type = alloca %union.tree_node*, align 8
  %cached_lhs = alloca %union.tree_node*, align 8
  %insert = alloca i8, align 1
  %assigns_var_p = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  %def = alloca %union.tree_node*, align 8
  store %struct.gimple_stmt_iterator* %gsi, %struct.gimple_stmt_iterator** %gsi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator** %gsi.addr, metadata !6333, metadata !DIExpression()), !dbg !6334
  call void @llvm.dbg.declare(metadata %union.tree_node** %expr_type, metadata !6335, metadata !DIExpression()), !dbg !6336
  call void @llvm.dbg.declare(metadata %union.tree_node** %cached_lhs, metadata !6337, metadata !DIExpression()), !dbg !6338
  call void @llvm.dbg.declare(metadata i8* %insert, metadata !6339, metadata !DIExpression()), !dbg !6340
  store i8 1, i8* %insert, align 1, !dbg !6340
  call void @llvm.dbg.declare(metadata i8* %assigns_var_p, metadata !6341, metadata !DIExpression()), !dbg !6342
  store i8 0, i8* %assigns_var_p, align 1, !dbg !6342
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt, metadata !6343, metadata !DIExpression()), !dbg !6344
  %0 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6345
  %call = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %0), !dbg !6346
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !6344
  call void @llvm.dbg.declare(metadata %union.tree_node** %def, metadata !6347, metadata !DIExpression()), !dbg !6348
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6349
  %call1 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %1), !dbg !6350
  store %union.tree_node* %call1, %union.tree_node** %def, align 8, !dbg !6348
  %2 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6351
  %tobool = icmp ne %union.tree_node* %2, null, !dbg !6351
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6353

lor.lhs.false:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6354
  %base = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !6354
  %4 = bitcast %struct.tree_base* %base to i64*, !dbg !6354
  %bf.load = load i64, i64* %4, align 8, !dbg !6354
  %bf.clear = and i64 %bf.load, 65535, !dbg !6354
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6354
  %cmp = icmp ne i32 %bf.cast, 141, !dbg !6355
  br i1 %cmp, label %if.then, label %lor.lhs.false2, !dbg !6356

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %5 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6357
  %base3 = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6357
  %6 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6357
  %bf.load4 = load i64, i64* %6, align 8, !dbg !6357
  %bf.lshr = lshr i64 %bf.load4, 22, !dbg !6357
  %bf.clear5 = and i64 %bf.lshr, 1, !dbg !6357
  %bf.cast6 = trunc i64 %bf.clear5 to i32, !dbg !6357
  %tobool7 = icmp ne i32 %bf.cast6, 0, !dbg !6357
  br i1 %tobool7, label %if.then, label %lor.lhs.false8, !dbg !6358

lor.lhs.false8:                                   ; preds = %lor.lhs.false2
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6359
  %call9 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %7), !dbg !6360
  %tobool10 = icmp ne %union.tree_node* %call9, null, !dbg !6360
  br i1 %tobool10, label %if.then, label %lor.lhs.false11, !dbg !6361

lor.lhs.false11:                                  ; preds = %lor.lhs.false8
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6362
  %call12 = call zeroext i8 @simple_iv_increment_p(%union.gimple_statement_d* %8), !dbg !6363
  %conv = zext i8 %call12 to i32, !dbg !6363
  %tobool13 = icmp ne i32 %conv, 0, !dbg !6363
  br i1 %tobool13, label %if.then, label %if.end, !dbg !6364

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false8, %lor.lhs.false2, %lor.lhs.false, %entry
  store i8 0, i8* %insert, align 1, !dbg !6365
  br label %if.end, !dbg !6366

if.end:                                           ; preds = %if.then, %lor.lhs.false11
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6367
  %10 = load i8, i8* %insert, align 1, !dbg !6368
  %call14 = call %union.tree_node* @lookup_avail_expr(%union.gimple_statement_d* %9, i8 zeroext %10), !dbg !6369
  store %union.tree_node* %call14, %union.tree_node** %cached_lhs, align 8, !dbg !6370
  %11 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 1), align 8, !dbg !6371
  %inc = add nsw i64 %11, 1, !dbg !6371
  store i64 %inc, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 1), align 8, !dbg !6371
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6372
  %call15 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %12), !dbg !6374
  %tobool16 = icmp ne i8 %call15, 0, !dbg !6374
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !6375

if.then17:                                        ; preds = %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6376
  %call18 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %13), !dbg !6376
  %common = bitcast %union.tree_node* %call18 to %struct.tree_common*, !dbg !6376
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6376
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6376
  store %union.tree_node* %14, %union.tree_node** %expr_type, align 8, !dbg !6378
  store i8 1, i8* %assigns_var_p, align 1, !dbg !6379
  br label %if.end44, !dbg !6380

if.else:                                          ; preds = %if.end
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6381
  %call19 = call i32 @gimple_code(%union.gimple_statement_d* %15), !dbg !6383
  %cmp20 = icmp eq i32 %call19, 1, !dbg !6384
  br i1 %cmp20, label %if.then22, label %if.else23, !dbg !6385

if.then22:                                        ; preds = %if.else
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6386
  store %union.tree_node* %16, %union.tree_node** %expr_type, align 8, !dbg !6387
  br label %if.end43, !dbg !6388

if.else23:                                        ; preds = %if.else
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6389
  %call24 = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %17), !dbg !6391
  %tobool25 = icmp ne i8 %call24, 0, !dbg !6391
  br i1 %tobool25, label %if.then26, label %if.else32, !dbg !6392

if.then26:                                        ; preds = %if.else23
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6393
  %call27 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %18), !dbg !6393
  %tobool28 = icmp ne %union.tree_node* %call27, null, !dbg !6393
  br i1 %tobool28, label %cond.false, label %cond.true, !dbg !6393

cond.true:                                        ; preds = %if.then26
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 1815, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6393
  br label %cond.end, !dbg !6393

cond.false:                                       ; preds = %if.then26
  br label %cond.end, !dbg !6393

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6393
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6395
  %call29 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %19), !dbg !6395
  %common30 = bitcast %union.tree_node* %call29 to %struct.tree_common*, !dbg !6395
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 2, !dbg !6395
  %20 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !6395
  store %union.tree_node* %20, %union.tree_node** %expr_type, align 8, !dbg !6396
  store i8 1, i8* %assigns_var_p, align 1, !dbg !6397
  br label %if.end42, !dbg !6398

if.else32:                                        ; preds = %if.else23
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6399
  %call33 = call i32 @gimple_code(%union.gimple_statement_d* %21), !dbg !6401
  %cmp34 = icmp eq i32 %call33, 5, !dbg !6402
  br i1 %cmp34, label %if.then36, label %if.else40, !dbg !6403

if.then36:                                        ; preds = %if.else32
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6404
  %call37 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %22), !dbg !6404
  %common38 = bitcast %union.tree_node* %call37 to %struct.tree_common*, !dbg !6404
  %type39 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common38, i32 0, i32 2, !dbg !6404
  %23 = load %union.tree_node*, %union.tree_node** %type39, align 8, !dbg !6404
  store %union.tree_node* %23, %union.tree_node** %expr_type, align 8, !dbg !6405
  br label %if.end41, !dbg !6406

if.else40:                                        ; preds = %if.else32
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 1822, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6407
  br label %if.end41

if.end41:                                         ; preds = %if.else40, %if.then36
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %cond.end
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then22
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then17
  %24 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6408
  %tobool45 = icmp ne %union.tree_node* %24, null, !dbg !6408
  br i1 %tobool45, label %if.end47, label %if.then46, !dbg !6410

if.then46:                                        ; preds = %if.end44
  br label %if.end87, !dbg !6411

if.end47:                                         ; preds = %if.end44
  %25 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6412
  %base48 = bitcast %union.tree_node* %25 to %struct.tree_base*, !dbg !6412
  %26 = bitcast %struct.tree_base* %base48 to i64*, !dbg !6412
  %bf.load49 = load i64, i64* %26, align 8, !dbg !6412
  %bf.clear50 = and i64 %bf.load49, 65535, !dbg !6412
  %bf.cast51 = trunc i64 %bf.clear50 to i32, !dbg !6412
  %cmp52 = icmp ne i32 %bf.cast51, 141, !dbg !6414
  br i1 %cmp52, label %land.lhs.true, label %lor.lhs.false62, !dbg !6415

land.lhs.true:                                    ; preds = %if.end47
  %27 = load i8, i8* %assigns_var_p, align 1, !dbg !6416
  %conv54 = zext i8 %27 to i32, !dbg !6416
  %tobool55 = icmp ne i32 %conv54, 0, !dbg !6416
  br i1 %tobool55, label %if.then66, label %lor.lhs.false56, !dbg !6417

lor.lhs.false56:                                  ; preds = %land.lhs.true
  %28 = load %union.tree_node*, %union.tree_node** %expr_type, align 8, !dbg !6418
  %29 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6419
  %common57 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6419
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !6419
  %30 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !6419
  %call59 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %28, %union.tree_node* %30), !dbg !6420
  %conv60 = zext i8 %call59 to i32, !dbg !6420
  %tobool61 = icmp ne i32 %conv60, 0, !dbg !6420
  br i1 %tobool61, label %if.then66, label %lor.lhs.false62, !dbg !6421

lor.lhs.false62:                                  ; preds = %lor.lhs.false56, %if.end47
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6422
  %32 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6423
  %call63 = call zeroext i8 @may_propagate_copy_into_stmt(%union.gimple_statement_d* %31, %union.tree_node* %32), !dbg !6424
  %conv64 = zext i8 %call63 to i32, !dbg !6424
  %tobool65 = icmp ne i32 %conv64, 0, !dbg !6424
  br i1 %tobool65, label %if.then66, label %if.end87, !dbg !6425

if.then66:                                        ; preds = %lor.lhs.false62, %lor.lhs.false56, %land.lhs.true
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6426
  %tobool67 = icmp ne %struct._IO_FILE* %33, null, !dbg !6426
  br i1 %tobool67, label %land.lhs.true68, label %if.end74, !dbg !6429

land.lhs.true68:                                  ; preds = %if.then66
  %34 = load i32, i32* @dump_flags, align 4, !dbg !6430
  %and = and i32 %34, 8, !dbg !6431
  %tobool69 = icmp ne i32 %and, 0, !dbg !6431
  br i1 %tobool69, label %if.then70, label %if.end74, !dbg !6432

if.then70:                                        ; preds = %land.lhs.true68
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6433
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.35, i64 0, i64 0)), !dbg !6435
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6436
  %37 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6437
  %38 = load i32, i32* @dump_flags, align 4, !dbg !6438
  call void @print_gimple_expr(%struct._IO_FILE* %36, %union.gimple_statement_d* %37, i32 0, i32 %38), !dbg !6439
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6440
  %call72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0)), !dbg !6441
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6442
  %41 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6443
  %42 = load i32, i32* @dump_flags, align 4, !dbg !6444
  call void @print_generic_expr(%struct._IO_FILE* %40, %union.tree_node* %41, i32 %42), !dbg !6445
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6446
  %call73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !6447
  br label %if.end74, !dbg !6448

if.end74:                                         ; preds = %if.then70, %land.lhs.true68, %if.then66
  %44 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 2), align 8, !dbg !6449
  %inc75 = add nsw i64 %44, 1, !dbg !6449
  store i64 %inc75, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 2), align 8, !dbg !6449
  %45 = load i8, i8* %assigns_var_p, align 1, !dbg !6450
  %conv76 = zext i8 %45 to i32, !dbg !6450
  %tobool77 = icmp ne i32 %conv76, 0, !dbg !6450
  br i1 %tobool77, label %land.lhs.true78, label %if.end85, !dbg !6452

land.lhs.true78:                                  ; preds = %if.end74
  %46 = load %union.tree_node*, %union.tree_node** %expr_type, align 8, !dbg !6453
  %47 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6454
  %common79 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !6454
  %type80 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common79, i32 0, i32 2, !dbg !6454
  %48 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !6454
  %call81 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %46, %union.tree_node* %48), !dbg !6455
  %tobool82 = icmp ne i8 %call81, 0, !dbg !6455
  br i1 %tobool82, label %if.end85, label %if.then83, !dbg !6456

if.then83:                                        ; preds = %land.lhs.true78
  %49 = load %union.tree_node*, %union.tree_node** %expr_type, align 8, !dbg !6457
  %50 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6457
  %call84 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %49, %union.tree_node* %50), !dbg !6457
  store %union.tree_node* %call84, %union.tree_node** %cached_lhs, align 8, !dbg !6458
  br label %if.end85, !dbg !6459

if.end85:                                         ; preds = %if.then83, %land.lhs.true78, %if.end74
  %51 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6460
  %52 = load %union.tree_node*, %union.tree_node** %cached_lhs, align 8, !dbg !6461
  call void @propagate_tree_value_into_stmt(%struct.gimple_stmt_iterator* %51, %union.tree_node* %52), !dbg !6462
  %53 = load %struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator** %gsi.addr, align 8, !dbg !6463
  %call86 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %53), !dbg !6464
  call void @gimple_set_modified(%union.gimple_statement_d* %call86, i8 zeroext 1), !dbg !6465
  br label %if.end87, !dbg !6466

if.end87:                                         ; preds = %if.then46, %if.end85, %lor.lhs.false62
  ret void, !dbg !6467
}

; Function Attrs: noinline nounwind uwtable
define internal void @record_equivalences_from_stmt(%union.gimple_statement_d* %stmt, i32 %may_optimize_p) #0 !dbg !6468 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %may_optimize_p.addr = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %lhs_code = alloca i32, align 4
  %rhs = alloca %union.tree_node*, align 8
  %rhs53 = alloca %union.tree_node*, align 8
  %new_stmt = alloca %union.gimple_statement_d*, align 8
  %defstmt = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6471, metadata !DIExpression()), !dbg !6472
  store i32 %may_optimize_p, i32* %may_optimize_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %may_optimize_p.addr, metadata !6473, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !6475, metadata !DIExpression()), !dbg !6476
  call void @llvm.dbg.declare(metadata i32* %lhs_code, metadata !6477, metadata !DIExpression()), !dbg !6478
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6479
  %call = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %0), !dbg !6479
  %tobool = icmp ne i8 %call, 0, !dbg !6479
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6479

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 1878, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6479
  br label %cond.end, !dbg !6479

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6479

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6479
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6480
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !6481
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !6482
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6483
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !6483
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !6483
  %bf.load = load i64, i64* %3, align 8, !dbg !6483
  %bf.clear = and i64 %bf.load, 65535, !dbg !6483
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6483
  store i32 %bf.cast, i32* %lhs_code, align 4, !dbg !6484
  %4 = load i32, i32* %lhs_code, align 4, !dbg !6485
  %cmp = icmp eq i32 %4, 141, !dbg !6487
  br i1 %cmp, label %land.lhs.true, label %if.end25, !dbg !6488

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6489
  %call2 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %5), !dbg !6490
  %conv = zext i8 %call2 to i32, !dbg !6490
  %tobool3 = icmp ne i32 %conv, 0, !dbg !6490
  br i1 %tobool3, label %if.then, label %if.end25, !dbg !6491

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !6492, metadata !DIExpression()), !dbg !6494
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6495
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !6496
  store %union.tree_node* %call4, %union.tree_node** %rhs, align 8, !dbg !6494
  %7 = load i32, i32* %may_optimize_p.addr, align 4, !dbg !6497
  %tobool5 = icmp ne i32 %7, 0, !dbg !6497
  br i1 %tobool5, label %land.lhs.true6, label %if.end24, !dbg !6499

land.lhs.true6:                                   ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6500
  %base7 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !6500
  %9 = bitcast %struct.tree_base* %base7 to i64*, !dbg !6500
  %bf.load8 = load i64, i64* %9, align 8, !dbg !6500
  %bf.clear9 = and i64 %bf.load8, 65535, !dbg !6500
  %bf.cast10 = trunc i64 %bf.clear9 to i32, !dbg !6500
  %cmp11 = icmp eq i32 %bf.cast10, 141, !dbg !6501
  br i1 %cmp11, label %if.then16, label %lor.lhs.false, !dbg !6502

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %10 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6503
  %call13 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %10), !dbg !6504
  %conv14 = zext i8 %call13 to i32, !dbg !6504
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !6504
  br i1 %tobool15, label %if.then16, label %if.end24, !dbg !6505

if.then16:                                        ; preds = %lor.lhs.false, %land.lhs.true6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6506
  %tobool17 = icmp ne %struct._IO_FILE* %11, null, !dbg !6506
  br i1 %tobool17, label %land.lhs.true18, label %if.end, !dbg !6509

land.lhs.true18:                                  ; preds = %if.then16
  %12 = load i32, i32* @dump_flags, align 4, !dbg !6510
  %and = and i32 %12, 8, !dbg !6511
  %tobool19 = icmp ne i32 %and, 0, !dbg !6511
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !6512

if.then20:                                        ; preds = %land.lhs.true18
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6513
  %call21 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i64 0, i64 0)), !dbg !6515
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6516
  %15 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6517
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %15, i32 0), !dbg !6518
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6519
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)), !dbg !6520
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6521
  %18 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6522
  call void @print_generic_expr(%struct._IO_FILE* %17, %union.tree_node* %18, i32 0), !dbg !6523
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6524
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !6525
  br label %if.end, !dbg !6526

if.end:                                           ; preds = %if.then20, %land.lhs.true18, %if.then16
  %20 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6527
  %21 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !6528
  call void @set_ssa_name_value(%union.tree_node* %20, %union.tree_node* %21), !dbg !6529
  br label %if.end24, !dbg !6530

if.end24:                                         ; preds = %if.end, %lor.lhs.false, %if.then
  br label %if.end25, !dbg !6531

if.end25:                                         ; preds = %if.end24, %land.lhs.true, %cond.end
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6532
  %call26 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %22), !dbg !6534
  %tobool27 = icmp ne i8 %call26, 0, !dbg !6534
  br i1 %tobool27, label %if.end69, label %land.lhs.true28, !dbg !6535

land.lhs.true28:                                  ; preds = %if.end25
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6536
  %call29 = call zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %23), !dbg !6537
  %conv30 = zext i8 %call29 to i32, !dbg !6537
  %tobool31 = icmp ne i32 %conv30, 0, !dbg !6537
  br i1 %tobool31, label %land.lhs.true32, label %if.end69, !dbg !6538

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6539
  %call33 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %24), !dbg !6540
  %conv34 = zext i8 %call33 to i32, !dbg !6540
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !6540
  br i1 %tobool35, label %land.lhs.true36, label %if.end69, !dbg !6541

land.lhs.true36:                                  ; preds = %land.lhs.true32
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6542
  %call37 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %25), !dbg !6542
  %base38 = bitcast %union.tree_node* %call37 to %struct.tree_base*, !dbg !6542
  %26 = bitcast %struct.tree_base* %base38 to i64*, !dbg !6542
  %bf.load39 = load i64, i64* %26, align 8, !dbg !6542
  %bf.clear40 = and i64 %bf.load39, 65535, !dbg !6542
  %bf.cast41 = trunc i64 %bf.clear40 to i32, !dbg !6542
  %cmp42 = icmp eq i32 %bf.cast41, 141, !dbg !6543
  br i1 %cmp42, label %land.lhs.true49, label %lor.lhs.false44, !dbg !6544

lor.lhs.false44:                                  ; preds = %land.lhs.true36
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6545
  %call45 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %27), !dbg !6546
  %call46 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call45), !dbg !6547
  %conv47 = zext i8 %call46 to i32, !dbg !6547
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !6547
  br i1 %tobool48, label %land.lhs.true49, label %if.end69, !dbg !6548

land.lhs.true49:                                  ; preds = %lor.lhs.false44, %land.lhs.true36
  %28 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6549
  %call50 = call zeroext i8 @is_gimple_reg(%union.tree_node* %28), !dbg !6550
  %tobool51 = icmp ne i8 %call50, 0, !dbg !6550
  br i1 %tobool51, label %if.end69, label %if.then52, !dbg !6551

if.then52:                                        ; preds = %land.lhs.true49
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs53, metadata !6552, metadata !DIExpression()), !dbg !6554
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6555
  %call54 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %29), !dbg !6556
  store %union.tree_node* %call54, %union.tree_node** %rhs53, align 8, !dbg !6554
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %new_stmt, metadata !6557, metadata !DIExpression()), !dbg !6558
  %30 = load %union.tree_node*, %union.tree_node** %rhs53, align 8, !dbg !6559
  %base55 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6559
  %31 = bitcast %struct.tree_base* %base55 to i64*, !dbg !6559
  %bf.load56 = load i64, i64* %31, align 8, !dbg !6559
  %bf.clear57 = and i64 %bf.load56, 65535, !dbg !6559
  %bf.cast58 = trunc i64 %bf.clear57 to i32, !dbg !6559
  %cmp59 = icmp eq i32 %bf.cast58, 141, !dbg !6561
  br i1 %cmp59, label %if.then61, label %if.else, !dbg !6562

if.then61:                                        ; preds = %if.then52
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %defstmt, metadata !6563, metadata !DIExpression()), !dbg !6565
  %32 = load %union.tree_node*, %union.tree_node** %rhs53, align 8, !dbg !6566
  %ssa_name = bitcast %union.tree_node* %32 to %struct.tree_ssa_name*, !dbg !6566
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !6566
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6566
  store %union.gimple_statement_d* %33, %union.gimple_statement_d** %defstmt, align 8, !dbg !6565
  %34 = load %union.tree_node*, %union.tree_node** %rhs53, align 8, !dbg !6567
  %35 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6567
  %call62 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %34, %union.tree_node* %35), !dbg !6567
  store %union.gimple_statement_d* %call62, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6568
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %defstmt, align 8, !dbg !6569
  %37 = load %union.tree_node*, %union.tree_node** %rhs53, align 8, !dbg !6570
  %ssa_name63 = bitcast %union.tree_node* %37 to %struct.tree_ssa_name*, !dbg !6570
  %def_stmt64 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name63, i32 0, i32 2, !dbg !6570
  store %union.gimple_statement_d* %36, %union.gimple_statement_d** %def_stmt64, align 8, !dbg !6571
  br label %if.end66, !dbg !6572

if.else:                                          ; preds = %if.then52
  %38 = load %union.tree_node*, %union.tree_node** %rhs53, align 8, !dbg !6573
  %39 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !6573
  %call65 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %38, %union.tree_node* %39), !dbg !6573
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6574
  br label %if.end66

if.end66:                                         ; preds = %if.else, %if.then61
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6575
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6576
  %call67 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %41), !dbg !6577
  call void @gimple_set_vuse(%union.gimple_statement_d* %40, %union.tree_node* %call67), !dbg !6578
  %42 = load %union.gimple_statement_d*, %union.gimple_statement_d** %new_stmt, align 8, !dbg !6579
  %call68 = call %union.tree_node* @lookup_avail_expr(%union.gimple_statement_d* %42, i8 zeroext 1), !dbg !6580
  br label %if.end69, !dbg !6581

if.end69:                                         ; preds = %if.end66, %land.lhs.true49, %lor.lhs.false44, %land.lhs.true32, %land.lhs.true28, %if.end25
  ret void, !dbg !6582
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_location(%union.gimple_statement_d* %g) #0 !dbg !6583 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6586, metadata !DIExpression()), !dbg !6587
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6588
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6589
  %location = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 2, !dbg !6590
  %1 = load i32, i32* %location, align 8, !dbg !6590
  ret i32 %1, !dbg !6591
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_cond_code(%union.gimple_statement_d* %gs) #0 !dbg !6592 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6595, metadata !DIExpression()), !dbg !6596
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6597
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6598
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6599
  %bf.load = load i32, i32* %1, align 8, !dbg !6599
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6599
  ret i32 %bf.lshr, !dbg !6600
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !6601 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6602, metadata !DIExpression()), !dbg !6603
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6604
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !6605
  ret %union.tree_node* %call, !dbg !6606
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) #0 !dbg !6607 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6608, metadata !DIExpression()), !dbg !6609
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6610
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !6611
  ret %union.tree_node* %call, !dbg !6612
}

declare dso_local %struct.edge_def* @find_taken_edge(%struct.basic_block_def*, %union.tree_node*) #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) #2

declare dso_local zeroext i8 @tree_swap_operands_p(%union.tree_node*, %union.tree_node*, i8 zeroext) #2

declare dso_local i32 @swap_tree_comparison(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) #0 !dbg !6613 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6616, metadata !DIExpression()), !dbg !6617
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6618, metadata !DIExpression()), !dbg !6619
  %0 = load i32, i32* %code.addr, align 4, !dbg !6620
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6621
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !6622
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6623
  %bf.load = load i32, i32* %2, align 8, !dbg !6624
  %bf.value = and i32 %0, 65535, !dbg !6624
  %bf.shl = shl i32 %bf.value, 16, !dbg !6624
  %bf.clear = and i32 %bf.load, 65535, !dbg !6624
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6624
  store i32 %bf.set, i32* %2, align 8, !dbg !6624
  ret void, !dbg !6625
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !6626 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6629, metadata !DIExpression()), !dbg !6630
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !6631, metadata !DIExpression()), !dbg !6632
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6633
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !6634
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !6635
  ret void, !dbg !6636
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) #0 !dbg !6637 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6638, metadata !DIExpression()), !dbg !6639
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !6640, metadata !DIExpression()), !dbg !6641
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6642
  %1 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !6643
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 1, %union.tree_node* %1), !dbg !6644
  ret void, !dbg !6645
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_stmt(%union.gimple_statement_d* %s) #0 !dbg !6646 {
entry:
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6649
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6651
  %tobool = icmp ne i8 %call, 0, !dbg !6651
  br i1 %tobool, label %if.then, label %if.end, !dbg !6652

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6653
  call void @gimple_set_modified(%union.gimple_statement_d* %1, i8 zeroext 1), !dbg !6655
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !6656
  call void @update_stmt_operands(%union.gimple_statement_d* %2), !dbg !6657
  br label %if.end, !dbg !6658

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !6659
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6660 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6663, metadata !DIExpression()), !dbg !6664
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6665, metadata !DIExpression()), !dbg !6666
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6667, metadata !DIExpression()), !dbg !6668
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6669
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6669
  %conv = zext i8 %call to i32, !dbg !6669
  %tobool = icmp ne i32 %conv, 0, !dbg !6669
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6669

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6669
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6669
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6669
  %cmp = icmp ult i32 %1, %call1, !dbg !6669
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6669

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6669
  br label %cond.end, !dbg !6669

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6669
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6670
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6671
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6672
  %5 = load i32, i32* %i.addr, align 4, !dbg !6673
  %idxprom = zext i32 %5 to i64, !dbg !6672
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6672
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6674
  ret void, !dbg !6675
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6676 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6677, metadata !DIExpression()), !dbg !6678
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6679
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6680
  %cmp = icmp uge i32 %call, 1, !dbg !6681
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6682

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6683
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6684
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6685
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6686
  %land.ext = zext i1 %2 to i32, !dbg !6682
  %conv = trunc i32 %land.ext to i8, !dbg !6680
  ret i8 %conv, !dbg !6687
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6688 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6689, metadata !DIExpression()), !dbg !6690
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6691
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6692
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6693
  %1 = load i32, i32* %num_ops, align 4, !dbg !6693
  ret i32 %1, !dbg !6694
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6695 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6698, metadata !DIExpression()), !dbg !6699
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6700, metadata !DIExpression()), !dbg !6701
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6702
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6703
  %idxprom = zext i32 %call to i64, !dbg !6704
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6704
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6704
  store i64 %1, i64* %off, align 8, !dbg !6705
  %2 = load i64, i64* %off, align 8, !dbg !6706
  %cmp = icmp ne i64 %2, 0, !dbg !6706
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6706

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6706
  br label %cond.end, !dbg !6706

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6706

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6706
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6707
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6708
  %5 = load i64, i64* %off, align 8, !dbg !6709
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6710
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6711
  ret %union.tree_node** %6, !dbg !6712
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6713 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6716, metadata !DIExpression()), !dbg !6717
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6718
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6719
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6720
  ret i32 %call1, !dbg !6721
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6722 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6725, metadata !DIExpression()), !dbg !6726
  %0 = load i32, i32* %code.addr, align 4, !dbg !6727
  %idxprom = zext i32 %0 to i64, !dbg !6728
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6728
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6728
  ret i32 %1, !dbg !6729
}

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6730 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6734, metadata !DIExpression()), !dbg !6735
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6736, metadata !DIExpression()), !dbg !6737
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6738, metadata !DIExpression()), !dbg !6739
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6740
  %and = and i32 %0, 10, !dbg !6740
  %cmp = icmp eq i32 %and, 0, !dbg !6740
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !6740

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6740
  %and1 = and i32 %1, 1, !dbg !6740
  %tobool = icmp ne i32 %and1, 0, !dbg !6740
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6740

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6740
  br label %cond.end, !dbg !6740

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6740

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6740
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6741
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6742
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6743
  call void @op_iter_init(%struct.ssa_operand_iterator_d* %2, %union.gimple_statement_d* %3, i32 %4), !dbg !6744
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6745
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 1, !dbg !6746
  store i32 2, i32* %iter_type, align 4, !dbg !6747
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6748
  %call = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %6), !dbg !6749
  ret %struct.ssa_use_operand_d* %call, !dbg !6750
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6751 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6756, metadata !DIExpression()), !dbg !6757
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6758
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 0, !dbg !6759
  %1 = load i8, i8* %done, align 8, !dbg !6759
  ret i8 %1, !dbg !6760
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) #0 !dbg !6761 {
entry:
  %use.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use, %struct.ssa_use_operand_d** %use.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use.addr, metadata !6764, metadata !DIExpression()), !dbg !6765
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use.addr, align 8, !dbg !6766
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 3, !dbg !6767
  %1 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6767
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6768
  ret %union.tree_node* %2, !dbg !6769
}

; Function Attrs: noinline nounwind uwtable
define internal void @cprop_operand(%union.gimple_statement_d* %stmt, %struct.ssa_use_operand_d* %op_p) #0 !dbg !6770 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %op_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %val = alloca %union.tree_node*, align 8
  %op = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6773, metadata !DIExpression()), !dbg !6774
  store %struct.ssa_use_operand_d* %op_p, %struct.ssa_use_operand_d** %op_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %op_p.addr, metadata !6775, metadata !DIExpression()), !dbg !6776
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !6777, metadata !DIExpression()), !dbg !6778
  call void @llvm.dbg.declare(metadata %union.tree_node** %op, metadata !6779, metadata !DIExpression()), !dbg !6780
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p.addr, align 8, !dbg !6781
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %0), !dbg !6781
  store %union.tree_node* %call, %union.tree_node** %op, align 8, !dbg !6780
  %1 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6782
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !6782
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !6782
  %2 = load i32, i32* %version, align 8, !dbg !6782
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !6782
  %tobool = icmp ne %struct.VEC_tree_heap* %3, null, !dbg !6782
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6782

cond.true:                                        ; preds = %entry
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !6782
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %4, i32 0, i32 0, !dbg !6782
  br label %cond.end, !dbg !6782

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6782
  %call1 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !6782
  %cmp = icmp ult i32 %2, %call1, !dbg !6782
  br i1 %cmp, label %cond.true2, label %cond.false12, !dbg !6782

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !6782
  %tobool3 = icmp ne %struct.VEC_tree_heap* %5, null, !dbg !6782
  br i1 %tobool3, label %cond.true4, label %cond.false6, !dbg !6782

cond.true4:                                       ; preds = %cond.true2
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !6782
  %base5 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i32 0, i32 0, !dbg !6782
  br label %cond.end7, !dbg !6782

cond.false6:                                      ; preds = %cond.true2
  br label %cond.end7, !dbg !6782

cond.end7:                                        ; preds = %cond.false6, %cond.true4
  %cond8 = phi %struct.VEC_tree_base* [ %base5, %cond.true4 ], [ null, %cond.false6 ], !dbg !6782
  %7 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6782
  %ssa_name9 = bitcast %union.tree_node* %7 to %struct.tree_ssa_name*, !dbg !6782
  %version10 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name9, i32 0, i32 3, !dbg !6782
  %8 = load i32, i32* %version10, align 8, !dbg !6782
  %call11 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond8, i32 %8), !dbg !6782
  br label %cond.end13, !dbg !6782

cond.false12:                                     ; preds = %cond.end
  br label %cond.end13, !dbg !6782

cond.end13:                                       ; preds = %cond.false12, %cond.end7
  %cond14 = phi %union.tree_node* [ %call11, %cond.end7 ], [ null, %cond.false12 ], !dbg !6782
  store %union.tree_node* %cond14, %union.tree_node** %val, align 8, !dbg !6783
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6784
  %tobool15 = icmp ne %union.tree_node* %9, null, !dbg !6784
  br i1 %tobool15, label %land.lhs.true, label %if.end118, !dbg !6786

land.lhs.true:                                    ; preds = %cond.end13
  %10 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6787
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6788
  %cmp16 = icmp ne %union.tree_node* %10, %11, !dbg !6789
  br i1 %cmp16, label %if.then, label %if.end118, !dbg !6790

if.then:                                          ; preds = %land.lhs.true
  %12 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6791
  %call17 = call zeroext i8 @is_gimple_reg(%union.tree_node* %12), !dbg !6794
  %tobool18 = icmp ne i8 %call17, 0, !dbg !6794
  br i1 %tobool18, label %if.end, label %land.lhs.true19, !dbg !6795

land.lhs.true19:                                  ; preds = %if.then
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6796
  %base20 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !6796
  %14 = bitcast %struct.tree_base* %base20 to i64*, !dbg !6796
  %bf.load = load i64, i64* %14, align 8, !dbg !6796
  %bf.clear = and i64 %bf.load, 65535, !dbg !6796
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6796
  %cmp21 = icmp ne i32 %bf.cast, 141, !dbg !6797
  br i1 %cmp21, label %if.then29, label %lor.lhs.false, !dbg !6798

lor.lhs.false:                                    ; preds = %land.lhs.true19
  %15 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6799
  %call22 = call zeroext i8 @is_gimple_reg(%union.tree_node* %15), !dbg !6800
  %conv = zext i8 %call22 to i32, !dbg !6800
  %tobool23 = icmp ne i32 %conv, 0, !dbg !6800
  br i1 %tobool23, label %if.then29, label %lor.lhs.false24, !dbg !6801

lor.lhs.false24:                                  ; preds = %lor.lhs.false
  %16 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6802
  %call25 = call %union.tree_node* @get_virtual_var(%union.tree_node* %16), !dbg !6803
  %17 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6804
  %call26 = call %union.tree_node* @get_virtual_var(%union.tree_node* %17), !dbg !6805
  %cmp27 = icmp ne %union.tree_node* %call25, %call26, !dbg !6806
  br i1 %cmp27, label %if.then29, label %if.end, !dbg !6807

if.then29:                                        ; preds = %lor.lhs.false24, %lor.lhs.false, %land.lhs.true19
  br label %if.end118, !dbg !6808

if.end:                                           ; preds = %lor.lhs.false24, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6809
  %call30 = call i32 @gimple_code(%union.gimple_statement_d* %18), !dbg !6811
  %cmp31 = icmp eq i32 %call30, 7, !dbg !6812
  br i1 %cmp31, label %land.lhs.true33, label %if.end37, !dbg !6813

land.lhs.true33:                                  ; preds = %if.end
  %19 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6814
  %call34 = call zeroext i8 @may_propagate_copy_into_asm(%union.tree_node* %19), !dbg !6815
  %tobool35 = icmp ne i8 %call34, 0, !dbg !6815
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !6816

if.then36:                                        ; preds = %land.lhs.true33
  br label %if.end118, !dbg !6817

if.end37:                                         ; preds = %land.lhs.true33, %if.end
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6818
  %21 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6820
  %call38 = call zeroext i8 @may_propagate_copy(%union.tree_node* %20, %union.tree_node* %21), !dbg !6821
  %tobool39 = icmp ne i8 %call38, 0, !dbg !6821
  br i1 %tobool39, label %if.end41, label %if.then40, !dbg !6822

if.then40:                                        ; preds = %if.end37
  br label %if.end118, !dbg !6823

if.end41:                                         ; preds = %if.end37
  %22 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6824
  %common = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !6824
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6824
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6824
  %base42 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !6824
  %24 = bitcast %struct.tree_base* %base42 to i64*, !dbg !6824
  %bf.load43 = load i64, i64* %24, align 8, !dbg !6824
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !6824
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !6824
  %cmp46 = icmp eq i32 %bf.cast45, 10, !dbg !6824
  br i1 %cmp46, label %land.lhs.true57, label %lor.lhs.false48, !dbg !6824

lor.lhs.false48:                                  ; preds = %if.end41
  %25 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6824
  %common49 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !6824
  %type50 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common49, i32 0, i32 2, !dbg !6824
  %26 = load %union.tree_node*, %union.tree_node** %type50, align 8, !dbg !6824
  %base51 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !6824
  %27 = bitcast %struct.tree_base* %base51 to i64*, !dbg !6824
  %bf.load52 = load i64, i64* %27, align 8, !dbg !6824
  %bf.clear53 = and i64 %bf.load52, 65535, !dbg !6824
  %bf.cast54 = trunc i64 %bf.clear53 to i32, !dbg !6824
  %cmp55 = icmp eq i32 %bf.cast54, 12, !dbg !6824
  br i1 %cmp55, label %land.lhs.true57, label %if.end75, !dbg !6826

land.lhs.true57:                                  ; preds = %lor.lhs.false48, %if.end41
  %28 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6827
  %common58 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !6827
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !6827
  %29 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !6827
  %common60 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !6827
  %type61 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common60, i32 0, i32 2, !dbg !6827
  %30 = load %union.tree_node*, %union.tree_node** %type61, align 8, !dbg !6827
  %base62 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6827
  %31 = bitcast %struct.tree_base* %base62 to i64*, !dbg !6827
  %bf.load63 = load i64, i64* %31, align 8, !dbg !6827
  %bf.lshr = lshr i64 %bf.load63, 19, !dbg !6827
  %bf.clear64 = and i64 %bf.lshr, 1, !dbg !6827
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !6827
  %tobool66 = icmp ne i32 %bf.cast65, 0, !dbg !6827
  br i1 %tobool66, label %land.lhs.true67, label %if.end75, !dbg !6828

land.lhs.true67:                                  ; preds = %land.lhs.true57
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6829
  %call68 = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %32), !dbg !6830
  %conv69 = zext i8 %call68 to i32, !dbg !6830
  %tobool70 = icmp ne i32 %conv69, 0, !dbg !6830
  br i1 %tobool70, label %land.lhs.true71, label %if.end75, !dbg !6831

land.lhs.true71:                                  ; preds = %land.lhs.true67
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6832
  %call72 = call zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %33), !dbg !6833
  %tobool73 = icmp ne i8 %call72, 0, !dbg !6833
  br i1 %tobool73, label %if.end75, label %if.then74, !dbg !6834

if.then74:                                        ; preds = %land.lhs.true71
  br label %if.end118, !dbg !6835

if.end75:                                         ; preds = %land.lhs.true71, %land.lhs.true67, %land.lhs.true57, %lor.lhs.false48
  %34 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6836
  %call76 = call i32 @loop_depth_of_name(%union.tree_node* %34), !dbg !6838
  %35 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6839
  %call77 = call i32 @loop_depth_of_name(%union.tree_node* %35), !dbg !6840
  %cmp78 = icmp sgt i32 %call76, %call77, !dbg !6841
  br i1 %cmp78, label %if.then80, label %if.end81, !dbg !6842

if.then80:                                        ; preds = %if.end75
  br label %if.end118, !dbg !6843

if.end81:                                         ; preds = %if.end75
  %36 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6844
  %base82 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !6844
  %37 = bitcast %struct.tree_base* %base82 to i64*, !dbg !6844
  %bf.load83 = load i64, i64* %37, align 8, !dbg !6844
  %bf.clear84 = and i64 %bf.load83, 65535, !dbg !6844
  %bf.cast85 = trunc i64 %bf.clear84 to i32, !dbg !6844
  %cmp86 = icmp ne i32 %bf.cast85, 23, !dbg !6846
  br i1 %cmp86, label %land.lhs.true88, label %if.end93, !dbg !6847

land.lhs.true88:                                  ; preds = %if.end81
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6848
  %call89 = call zeroext i8 @simple_iv_increment_p(%union.gimple_statement_d* %38), !dbg !6849
  %conv90 = zext i8 %call89 to i32, !dbg !6849
  %tobool91 = icmp ne i32 %conv90, 0, !dbg !6849
  br i1 %tobool91, label %if.then92, label %if.end93, !dbg !6850

if.then92:                                        ; preds = %land.lhs.true88
  br label %if.end118, !dbg !6851

if.end93:                                         ; preds = %land.lhs.true88, %if.end81
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6852
  %tobool94 = icmp ne %struct._IO_FILE* %39, null, !dbg !6852
  br i1 %tobool94, label %land.lhs.true95, label %if.end108, !dbg !6854

land.lhs.true95:                                  ; preds = %if.end93
  %40 = load i32, i32* @dump_flags, align 4, !dbg !6855
  %and = and i32 %40, 8, !dbg !6856
  %tobool96 = icmp ne i32 %and, 0, !dbg !6856
  br i1 %tobool96, label %if.then97, label %if.end108, !dbg !6857

if.then97:                                        ; preds = %land.lhs.true95
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6858
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i64 0, i64 0)), !dbg !6860
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6861
  %43 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !6862
  %44 = load i32, i32* @dump_flags, align 4, !dbg !6863
  call void @print_generic_expr(%struct._IO_FILE* %42, %union.tree_node* %43, i32 %44), !dbg !6864
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6865
  %46 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6866
  %base99 = bitcast %union.tree_node* %46 to %struct.tree_base*, !dbg !6866
  %47 = bitcast %struct.tree_base* %base99 to i64*, !dbg !6866
  %bf.load100 = load i64, i64* %47, align 8, !dbg !6866
  %bf.clear101 = and i64 %bf.load100, 65535, !dbg !6866
  %bf.cast102 = trunc i64 %bf.clear101 to i32, !dbg !6866
  %cmp103 = icmp ne i32 %bf.cast102, 141, !dbg !6867
  %48 = zext i1 %cmp103 to i64, !dbg !6866
  %cond105 = select i1 %cmp103, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i64 0, i64 0), !dbg !6866
  %call106 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* %cond105), !dbg !6868
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6869
  %50 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6870
  %51 = load i32, i32* @dump_flags, align 4, !dbg !6871
  call void @print_generic_expr(%struct._IO_FILE* %49, %union.tree_node* %50, i32 %51), !dbg !6872
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6873
  %call107 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !6874
  br label %if.end108, !dbg !6875

if.end108:                                        ; preds = %if.then97, %land.lhs.true95, %if.end93
  %53 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6876
  %base109 = bitcast %union.tree_node* %53 to %struct.tree_base*, !dbg !6876
  %54 = bitcast %struct.tree_base* %base109 to i64*, !dbg !6876
  %bf.load110 = load i64, i64* %54, align 8, !dbg !6876
  %bf.clear111 = and i64 %bf.load110, 65535, !dbg !6876
  %bf.cast112 = trunc i64 %bf.clear111 to i32, !dbg !6876
  %cmp113 = icmp ne i32 %bf.cast112, 141, !dbg !6878
  br i1 %cmp113, label %if.then115, label %if.else, !dbg !6879

if.then115:                                       ; preds = %if.end108
  %55 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 3), align 8, !dbg !6880
  %inc = add nsw i64 %55, 1, !dbg !6880
  store i64 %inc, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 3), align 8, !dbg !6880
  br label %if.end117, !dbg !6881

if.else:                                          ; preds = %if.end108
  %56 = load i64, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 4), align 8, !dbg !6882
  %inc116 = add nsw i64 %56, 1, !dbg !6882
  store i64 %inc116, i64* getelementptr inbounds (%struct.opt_stats_d, %struct.opt_stats_d* @opt_stats, i32 0, i32 4), align 8, !dbg !6882
  br label %if.end117

if.end117:                                        ; preds = %if.else, %if.then115
  %57 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %op_p.addr, align 8, !dbg !6883
  %58 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6884
  call void @propagate_value(%struct.ssa_use_operand_d* %57, %union.tree_node* %58), !dbg !6885
  %59 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6886
  call void @gimple_set_modified(%union.gimple_statement_d* %59, i8 zeroext 1), !dbg !6887
  br label %if.end118, !dbg !6888

if.end118:                                        ; preds = %if.then29, %if.then36, %if.then40, %if.then74, %if.then80, %if.then92, %if.end117, %land.lhs.true, %cond.end13
  ret void, !dbg !6889
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !6890 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6893, metadata !DIExpression()), !dbg !6894
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !6895, metadata !DIExpression()), !dbg !6896
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6897
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 3, !dbg !6899
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6899
  %tobool = icmp ne %struct.use_optype_d* %1, null, !dbg !6897
  br i1 %tobool, label %if.then, label %if.end, !dbg !6900

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6901
  %uses1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 3, !dbg !6901
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %uses1, align 8, !dbg !6901
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %3, i32 0, i32 1, !dbg !6901
  store %struct.ssa_use_operand_d* %use_ptr, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6903
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6904
  %uses2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 3, !dbg !6905
  %5 = load %struct.use_optype_d*, %struct.use_optype_d** %uses2, align 8, !dbg !6905
  %next = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %5, i32 0, i32 0, !dbg !6906
  %6 = load %struct.use_optype_d*, %struct.use_optype_d** %next, align 8, !dbg !6906
  %7 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6907
  %uses3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %7, i32 0, i32 3, !dbg !6908
  store %struct.use_optype_d* %6, %struct.use_optype_d** %uses3, align 8, !dbg !6909
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !6910
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6911
  br label %return, !dbg !6911

if.end:                                           ; preds = %entry
  %9 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6912
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %9, i32 0, i32 4, !dbg !6914
  %10 = load i32, i32* %phi_i, align 8, !dbg !6914
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6915
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 5, !dbg !6916
  %12 = load i32, i32* %num_phi, align 4, !dbg !6916
  %cmp = icmp slt i32 %10, %12, !dbg !6917
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !6918

if.then4:                                         ; preds = %if.end
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6919
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 6, !dbg !6919
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6919
  %15 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6919
  %phi_i5 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %15, i32 0, i32 4, !dbg !6919
  %16 = load i32, i32* %phi_i5, align 8, !dbg !6919
  %inc = add nsw i32 %16, 1, !dbg !6919
  store i32 %inc, i32* %phi_i5, align 8, !dbg !6919
  %call = call %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %14, i32 %16), !dbg !6919
  store %struct.ssa_use_operand_d* %call, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6921
  br label %return, !dbg !6921

if.end6:                                          ; preds = %if.end
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6922
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 0, !dbg !6923
  store i8 1, i8* %done, align 8, !dbg !6924
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6925
  br label %return, !dbg !6925

return:                                           ; preds = %if.end6, %if.then4, %if.then
  %18 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !6926
  ret %struct.ssa_use_operand_d* %18, !dbg !6926
}

; Function Attrs: noinline nounwind uwtable
define internal void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #0 !dbg !6927 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !6930, metadata !DIExpression()), !dbg !6931
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !6932, metadata !DIExpression()), !dbg !6933
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !6934, metadata !DIExpression()), !dbg !6935
  %0 = load i32, i32* %flags.addr, align 4, !dbg !6936
  %and = and i32 %0, 8, !dbg !6936
  %tobool = icmp ne i32 %and, 0, !dbg !6936
  br i1 %tobool, label %lor.lhs.false, label %land.lhs.true, !dbg !6936

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %flags.addr, align 4, !dbg !6936
  %and1 = and i32 %1, 2, !dbg !6936
  %tobool2 = icmp ne i32 %and1, 0, !dbg !6936
  br i1 %tobool2, label %land.lhs.true, label %cond.true, !dbg !6936

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %2 = load i32, i32* %flags.addr, align 4, !dbg !6936
  %and3 = and i32 %2, 4, !dbg !6936
  %tobool4 = icmp ne i32 %and3, 0, !dbg !6936
  br i1 %tobool4, label %lor.lhs.false5, label %cond.false, !dbg !6936

lor.lhs.false5:                                   ; preds = %land.lhs.true
  %3 = load i32, i32* %flags.addr, align 4, !dbg !6936
  %and6 = and i32 %3, 1, !dbg !6936
  %tobool7 = icmp ne i32 %and6, 0, !dbg !6936
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !6936

cond.true:                                        ; preds = %lor.lhs.false5, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !6936
  br label %cond.end, !dbg !6936

cond.false:                                       ; preds = %lor.lhs.false5, %land.lhs.true
  br label %cond.end, !dbg !6936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6936
  %4 = load i32, i32* %flags.addr, align 4, !dbg !6937
  %and8 = and i32 %4, 10, !dbg !6938
  %tobool9 = icmp ne i32 %and8, 0, !dbg !6938
  br i1 %tobool9, label %cond.true10, label %cond.false11, !dbg !6939

cond.true10:                                      ; preds = %cond.end
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6940
  %call = call %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %5), !dbg !6941
  br label %cond.end12, !dbg !6939

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !6939

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.false11 ], !dbg !6939
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6942
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 2, !dbg !6943
  store %struct.def_optype_d* %cond13, %struct.def_optype_d** %defs, align 8, !dbg !6944
  %7 = load i32, i32* %flags.addr, align 4, !dbg !6945
  %and14 = and i32 %7, 8, !dbg !6947
  %tobool15 = icmp ne i32 %and14, 0, !dbg !6947
  br i1 %tobool15, label %if.end, label %land.lhs.true16, !dbg !6948

land.lhs.true16:                                  ; preds = %cond.end12
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6949
  %defs17 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 2, !dbg !6950
  %9 = load %struct.def_optype_d*, %struct.def_optype_d** %defs17, align 8, !dbg !6950
  %tobool18 = icmp ne %struct.def_optype_d* %9, null, !dbg !6949
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !6951

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6952
  %call20 = call %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %10), !dbg !6953
  %cmp = icmp ne %union.tree_node* %call20, null, !dbg !6954
  br i1 %cmp, label %if.then, label %if.end, !dbg !6955

if.then:                                          ; preds = %land.lhs.true19
  %11 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6956
  %defs21 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %11, i32 0, i32 2, !dbg !6957
  %12 = load %struct.def_optype_d*, %struct.def_optype_d** %defs21, align 8, !dbg !6957
  %next = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %12, i32 0, i32 0, !dbg !6958
  %13 = load %struct.def_optype_d*, %struct.def_optype_d** %next, align 8, !dbg !6958
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6959
  %defs22 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %14, i32 0, i32 2, !dbg !6960
  store %struct.def_optype_d* %13, %struct.def_optype_d** %defs22, align 8, !dbg !6961
  br label %if.end, !dbg !6959

if.end:                                           ; preds = %if.then, %land.lhs.true19, %land.lhs.true16, %cond.end12
  %15 = load i32, i32* %flags.addr, align 4, !dbg !6962
  %and23 = and i32 %15, 5, !dbg !6963
  %tobool24 = icmp ne i32 %and23, 0, !dbg !6963
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !6964

cond.true25:                                      ; preds = %if.end
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6965
  %call26 = call %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %16), !dbg !6966
  br label %cond.end28, !dbg !6964

cond.false27:                                     ; preds = %if.end
  br label %cond.end28, !dbg !6964

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %cond.false27 ], !dbg !6964
  %17 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6967
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %17, i32 0, i32 3, !dbg !6968
  store %struct.use_optype_d* %cond29, %struct.use_optype_d** %uses, align 8, !dbg !6969
  %18 = load i32, i32* %flags.addr, align 4, !dbg !6970
  %and30 = and i32 %18, 4, !dbg !6972
  %tobool31 = icmp ne i32 %and30, 0, !dbg !6972
  br i1 %tobool31, label %if.end42, label %land.lhs.true32, !dbg !6973

land.lhs.true32:                                  ; preds = %cond.end28
  %19 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6974
  %uses33 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %19, i32 0, i32 3, !dbg !6975
  %20 = load %struct.use_optype_d*, %struct.use_optype_d** %uses33, align 8, !dbg !6975
  %tobool34 = icmp ne %struct.use_optype_d* %20, null, !dbg !6974
  br i1 %tobool34, label %land.lhs.true35, label %if.end42, !dbg !6976

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %21 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !6977
  %call36 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %21), !dbg !6978
  %cmp37 = icmp ne %union.tree_node* %call36, null, !dbg !6979
  br i1 %cmp37, label %if.then38, label %if.end42, !dbg !6980

if.then38:                                        ; preds = %land.lhs.true35
  %22 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6981
  %uses39 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %22, i32 0, i32 3, !dbg !6982
  %23 = load %struct.use_optype_d*, %struct.use_optype_d** %uses39, align 8, !dbg !6982
  %next40 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %23, i32 0, i32 0, !dbg !6983
  %24 = load %struct.use_optype_d*, %struct.use_optype_d** %next40, align 8, !dbg !6983
  %25 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6984
  %uses41 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %25, i32 0, i32 3, !dbg !6985
  store %struct.use_optype_d* %24, %struct.use_optype_d** %uses41, align 8, !dbg !6986
  br label %if.end42, !dbg !6984

if.end42:                                         ; preds = %if.then38, %land.lhs.true35, %land.lhs.true32, %cond.end28
  %26 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6987
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %26, i32 0, i32 0, !dbg !6988
  store i8 0, i8* %done, align 8, !dbg !6989
  %27 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6990
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %27, i32 0, i32 4, !dbg !6991
  store i32 0, i32* %phi_i, align 8, !dbg !6992
  %28 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6993
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %28, i32 0, i32 5, !dbg !6994
  store i32 0, i32* %num_phi, align 4, !dbg !6995
  %29 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !6996
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %29, i32 0, i32 6, !dbg !6997
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6998
  ret void, !dbg !6999
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) #0 !dbg !7000 {
entry:
  %retval = alloca %struct.def_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7003, metadata !DIExpression()), !dbg !7004
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7005
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7007
  %tobool = icmp ne i8 %call, 0, !dbg !7007
  br i1 %tobool, label %if.end, label %if.then, !dbg !7008

if.then:                                          ; preds = %entry
  store %struct.def_optype_d* null, %struct.def_optype_d** %retval, align 8, !dbg !7009
  br label %return, !dbg !7009

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7010
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7011
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7012
  %def_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 1, !dbg !7013
  %2 = load %struct.def_optype_d*, %struct.def_optype_d** %def_ops, align 8, !dbg !7013
  store %struct.def_optype_d* %2, %struct.def_optype_d** %retval, align 8, !dbg !7014
  br label %return, !dbg !7014

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.def_optype_d*, %struct.def_optype_d** %retval, align 8, !dbg !7015
  ret %struct.def_optype_d* %3, !dbg !7015
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) #0 !dbg !7016 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7017, metadata !DIExpression()), !dbg !7018
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7019
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7021
  %tobool = icmp ne i8 %call, 0, !dbg !7021
  br i1 %tobool, label %if.end, label %if.then, !dbg !7022

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7023
  br label %return, !dbg !7023

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7024
  %gsmembase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7025
  %vdef = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 1, !dbg !7026
  %2 = load %union.tree_node*, %union.tree_node** %vdef, align 8, !dbg !7026
  store %union.tree_node* %2, %union.tree_node** %retval, align 8, !dbg !7027
  br label %return, !dbg !7027

return:                                           ; preds = %if.end, %if.then
  %3 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7028
  ret %union.tree_node* %3, !dbg !7028
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) #0 !dbg !7029 {
entry:
  %retval = alloca %struct.use_optype_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7032, metadata !DIExpression()), !dbg !7033
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7034
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7036
  %tobool = icmp ne i8 %call, 0, !dbg !7036
  br i1 %tobool, label %if.end, label %if.then, !dbg !7037

if.then:                                          ; preds = %entry
  store %struct.use_optype_d* null, %struct.use_optype_d** %retval, align 8, !dbg !7038
  br label %return, !dbg !7038

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7039
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !7040
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !7041
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !7042
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !7042
  store %struct.use_optype_d* %2, %struct.use_optype_d** %retval, align 8, !dbg !7043
  br label %return, !dbg !7043

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %retval, align 8, !dbg !7044
  ret %struct.use_optype_d* %3, !dbg !7044
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) #2

declare dso_local %union.tree_node* @get_virtual_var(%union.tree_node*) #2

declare dso_local zeroext i8 @may_propagate_copy_into_asm(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @simple_iv_increment_p(%union.gimple_statement_d* %stmt) #0 !dbg !7045 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %preinc = alloca %union.tree_node*, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7048, metadata !DIExpression()), !dbg !7049
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !7050, metadata !DIExpression()), !dbg !7051
  call void @llvm.dbg.declare(metadata %union.tree_node** %preinc, metadata !7052, metadata !DIExpression()), !dbg !7053
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !7054, metadata !DIExpression()), !dbg !7055
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7056, metadata !DIExpression()), !dbg !7057
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7058
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7060
  %cmp = icmp ne i32 %call, 6, !dbg !7061
  br i1 %cmp, label %if.then, label %if.end, !dbg !7062

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7063
  br label %return, !dbg !7063

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7064
  %call1 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %1), !dbg !7065
  store %union.tree_node* %call1, %union.tree_node** %lhs, align 8, !dbg !7066
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7067
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7067
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7067
  %bf.load = load i64, i64* %3, align 8, !dbg !7067
  %bf.clear = and i64 %bf.load, 65535, !dbg !7067
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7067
  %cmp2 = icmp ne i32 %bf.cast, 141, !dbg !7069
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !7070

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !7071
  br label %return, !dbg !7071

if.end4:                                          ; preds = %if.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7072
  %call5 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4), !dbg !7074
  %cmp6 = icmp ne i32 %call5, 63, !dbg !7075
  br i1 %cmp6, label %land.lhs.true, label %if.end10, !dbg !7076

land.lhs.true:                                    ; preds = %if.end4
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7077
  %call7 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %5), !dbg !7078
  %cmp8 = icmp ne i32 %call7, 64, !dbg !7079
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !7080

if.then9:                                         ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !7081
  br label %return, !dbg !7081

if.end10:                                         ; preds = %land.lhs.true, %if.end4
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7082
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %6), !dbg !7083
  store %union.tree_node* %call11, %union.tree_node** %preinc, align 8, !dbg !7084
  %7 = load %union.tree_node*, %union.tree_node** %preinc, align 8, !dbg !7085
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7085
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !7085
  %bf.load13 = load i64, i64* %8, align 8, !dbg !7085
  %bf.clear14 = and i64 %bf.load13, 65535, !dbg !7085
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !7085
  %cmp16 = icmp ne i32 %bf.cast15, 141, !dbg !7087
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !7088

if.then17:                                        ; preds = %if.end10
  store i8 0, i8* %retval, align 1, !dbg !7089
  br label %return, !dbg !7089

if.end18:                                         ; preds = %if.end10
  %9 = load %union.tree_node*, %union.tree_node** %preinc, align 8, !dbg !7090
  %ssa_name = bitcast %union.tree_node* %9 to %struct.tree_ssa_name*, !dbg !7090
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 2, !dbg !7090
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7090
  store %union.gimple_statement_d* %10, %union.gimple_statement_d** %phi, align 8, !dbg !7091
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7092
  %call19 = call i32 @gimple_code(%union.gimple_statement_d* %11), !dbg !7094
  %cmp20 = icmp ne i32 %call19, 16, !dbg !7095
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7096

if.then21:                                        ; preds = %if.end18
  store i8 0, i8* %retval, align 1, !dbg !7097
  br label %return, !dbg !7097

if.end22:                                         ; preds = %if.end18
  store i64 0, i64* %i, align 8, !dbg !7098
  br label %for.cond, !dbg !7100

for.cond:                                         ; preds = %for.inc, %if.end22
  %12 = load i64, i64* %i, align 8, !dbg !7101
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7103
  %call23 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %13), !dbg !7104
  %conv = zext i32 %call23 to i64, !dbg !7104
  %cmp24 = icmp ult i64 %12, %conv, !dbg !7105
  br i1 %cmp24, label %for.body, label %for.end, !dbg !7106

for.body:                                         ; preds = %for.cond
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !7107
  %15 = load i64, i64* %i, align 8, !dbg !7109
  %call26 = call %union.tree_node* @gimple_phi_arg_def(%union.gimple_statement_d* %14, i64 %15), !dbg !7110
  %16 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7111
  %cmp27 = icmp eq %union.tree_node* %call26, %16, !dbg !7112
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !7113

if.then29:                                        ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !7114
  br label %return, !dbg !7114

if.end30:                                         ; preds = %for.body
  br label %for.inc, !dbg !7111

for.inc:                                          ; preds = %if.end30
  %17 = load i64, i64* %i, align 8, !dbg !7115
  %inc = add i64 %17, 1, !dbg !7115
  store i64 %inc, i64* %i, align 8, !dbg !7115
  br label %for.cond, !dbg !7116, !llvm.loop !7117

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7119
  br label %return, !dbg !7119

return:                                           ; preds = %for.end, %if.then29, %if.then21, %if.then17, %if.then9, %if.then3, %if.then
  %18 = load i8, i8* %retval, align 1, !dbg !7120
  ret i8 %18, !dbg !7120
}

declare dso_local void @propagate_value(%struct.ssa_use_operand_d*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #0 !dbg !7121 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7122, metadata !DIExpression()), !dbg !7123
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7124
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !7125
  ret %union.tree_node* %call, !dbg !7126
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #0 !dbg !7127 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7128, metadata !DIExpression()), !dbg !7129
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7130, metadata !DIExpression()), !dbg !7131
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7132
  %call = call i32 @gimple_expr_code(%union.gimple_statement_d* %0), !dbg !7133
  store i32 %call, i32* %code, align 4, !dbg !7134
  %1 = load i32, i32* %code, align 4, !dbg !7135
  %call1 = call i32 @get_gimple_rhs_class(i32 %1), !dbg !7137
  %cmp = icmp eq i32 %call1, 3, !dbg !7138
  br i1 %cmp, label %if.then, label %if.end, !dbg !7139

if.then:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7140
  %call2 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2), !dbg !7140
  %base = bitcast %union.tree_node* %call2 to %struct.tree_base*, !dbg !7140
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7140
  %bf.load = load i64, i64* %3, align 8, !dbg !7140
  %bf.clear = and i64 %bf.load, 65535, !dbg !7140
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7140
  store i32 %bf.cast, i32* %code, align 4, !dbg !7141
  br label %if.end, !dbg !7142

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %code, align 4, !dbg !7143
  ret i32 %4, !dbg !7144
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7145 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7148, metadata !DIExpression()), !dbg !7149
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7150, metadata !DIExpression()), !dbg !7151
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7152
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !7154
  %tobool = icmp ne i8 %call, 0, !dbg !7154
  br i1 %tobool, label %if.then, label %if.else, !dbg !7155

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7156
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !7158
  %2 = load i32, i32* %i.addr, align 4, !dbg !7159
  %idxprom = zext i32 %2 to i64, !dbg !7158
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7158
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7158
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !7160
  br label %return, !dbg !7160

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7161
  br label %return, !dbg !7161

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7162
  ret %union.tree_node* %4, !dbg !7162
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) #0 !dbg !7163 {
entry:
  %retval = alloca i32, align 4
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %code = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7164, metadata !DIExpression()), !dbg !7165
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7166, metadata !DIExpression()), !dbg !7167
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7168
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7169
  store i32 %call, i32* %code, align 4, !dbg !7167
  %1 = load i32, i32* %code, align 4, !dbg !7170
  %cmp = icmp eq i32 %1, 6, !dbg !7172
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7173

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32, i32* %code, align 4, !dbg !7174
  %cmp1 = icmp eq i32 %2, 1, !dbg !7175
  br i1 %cmp1, label %if.then, label %if.else, !dbg !7176

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7177
  %gsbase = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_base*, !dbg !7178
  %4 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !7179
  %bf.load = load i32, i32* %4, align 8, !dbg !7179
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7179
  store i32 %bf.lshr, i32* %retval, align 4, !dbg !7180
  br label %return, !dbg !7180

if.else:                                          ; preds = %lor.lhs.false
  %5 = load i32, i32* %code, align 4, !dbg !7181
  %cmp2 = icmp eq i32 %5, 8, !dbg !7183
  br i1 %cmp2, label %if.then3, label %if.else4, !dbg !7184

if.then3:                                         ; preds = %if.else
  store i32 59, i32* %retval, align 4, !dbg !7185
  br label %return, !dbg !7185

if.else4:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7186
  br label %if.end

if.end:                                           ; preds = %if.else4
  br label %if.end5

if.end5:                                          ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7187
  br label %return, !dbg !7187

return:                                           ; preds = %if.end5, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !7188
  ret i32 %6, !dbg !7188
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_gimple_rhs_class(i32 %code) #0 !dbg !7189 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !7192, metadata !DIExpression()), !dbg !7193
  %0 = load i32, i32* %code.addr, align 4, !dbg !7194
  %idxprom = sext i32 %0 to i64, !dbg !7195
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !7195
  %1 = load i8, i8* %arrayidx, align 1, !dbg !7195
  %conv = zext i8 %1 to i32, !dbg !7196
  ret i32 %conv, !dbg !7197
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !7198 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7201, metadata !DIExpression()), !dbg !7202
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !7203, metadata !DIExpression()), !dbg !7204
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7205
  %1 = load i32, i32* %i.addr, align 4, !dbg !7206
  %call = call %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %0, i32 %1), !dbg !7207
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i32 0, i32 0, !dbg !7208
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7209
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7210 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7213, metadata !DIExpression()), !dbg !7214
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7215, metadata !DIExpression()), !dbg !7216
  %0 = load i32, i32* %index.addr, align 4, !dbg !7217
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7217
  %gimple_phi = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_phi*, !dbg !7217
  %capacity = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi, i32 0, i32 1, !dbg !7217
  %2 = load i32, i32* %capacity, align 8, !dbg !7217
  %cmp = icmp ule i32 %0, %2, !dbg !7217
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7217

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7217
  br label %cond.end, !dbg !7217

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7217

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7217
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7218
  %gimple_phi1 = bitcast %union.gimple_statement_d* %3 to %struct.gimple_statement_phi*, !dbg !7219
  %args = getelementptr inbounds %struct.gimple_statement_phi, %struct.gimple_statement_phi* %gimple_phi1, i32 0, i32 4, !dbg !7220
  %4 = load i32, i32* %index.addr, align 4, !dbg !7221
  %idxprom = zext i32 %4 to i64, !dbg !7218
  %arrayidx = getelementptr inbounds [1 x %struct.phi_arg_d], [1 x %struct.phi_arg_d]* %args, i64 0, i64 %idxprom, !dbg !7218
  ret %struct.phi_arg_d* %arrayidx, !dbg !7222
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !7223 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7224, metadata !DIExpression()), !dbg !7225
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7226
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !7227
  ret %union.tree_node* %call, !dbg !7228
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @lookup_avail_expr(%union.gimple_statement_d* %stmt, i8 zeroext %insert) #0 !dbg !7229 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %insert.addr = alloca i8, align 1
  %slot = alloca i8**, align 8
  %lhs = alloca %union.tree_node*, align 8
  %temp = alloca %union.tree_node*, align 8
  %element = alloca %struct.expr_hash_elt, align 8
  %element2 = alloca %struct.expr_hash_elt*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7232, metadata !DIExpression()), !dbg !7233
  store i8 %insert, i8* %insert.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %insert.addr, metadata !7234, metadata !DIExpression()), !dbg !7235
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !7236, metadata !DIExpression()), !dbg !7237
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !7238, metadata !DIExpression()), !dbg !7239
  call void @llvm.dbg.declare(metadata %union.tree_node** %temp, metadata !7240, metadata !DIExpression()), !dbg !7241
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt* %element, metadata !7242, metadata !DIExpression()), !dbg !7243
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7244
  %call = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %0), !dbg !7245
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !7246
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7247
  %2 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7248
  call void @initialize_hash_element(%union.gimple_statement_d* %1, %union.tree_node* %2, %struct.expr_hash_elt* %element), !dbg !7249
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7250
  %tobool = icmp ne %struct._IO_FILE* %3, null, !dbg !7250
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7252

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !7253
  %and = and i32 %4, 8, !dbg !7254
  %tobool1 = icmp ne i32 %and, 0, !dbg !7254
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7255

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7256
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)), !dbg !7258
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7259
  call void @print_expr_hash_elt(%struct._IO_FILE* %6, %struct.expr_hash_elt* %element), !dbg !7260
  br label %if.end, !dbg !7261

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %expr = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %element, i32 0, i32 1, !dbg !7262
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr, i32 0, i32 1, !dbg !7264
  %7 = load i32, i32* %kind, align 8, !dbg !7264
  %cmp = icmp eq i32 %7, 0, !dbg !7265
  br i1 %cmp, label %land.lhs.true3, label %if.end13, !dbg !7266

land.lhs.true3:                                   ; preds = %if.end
  %expr4 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %element, i32 0, i32 1, !dbg !7267
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr4, i32 0, i32 2, !dbg !7267
  %single = bitcast %union.anon.0* %ops to %struct.anon*, !dbg !7267
  %rhs = getelementptr inbounds %struct.anon, %struct.anon* %single, i32 0, i32 0, !dbg !7267
  %8 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !7267
  %base = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !7267
  %9 = bitcast %struct.tree_base* %base to i64*, !dbg !7267
  %bf.load = load i64, i64* %9, align 8, !dbg !7267
  %bf.clear = and i64 %bf.load, 65535, !dbg !7267
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7267
  %cmp5 = icmp eq i32 %bf.cast, 141, !dbg !7268
  br i1 %cmp5, label %if.then12, label %lor.lhs.false, !dbg !7269

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %expr6 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %element, i32 0, i32 1, !dbg !7270
  %ops7 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %expr6, i32 0, i32 2, !dbg !7271
  %single8 = bitcast %union.anon.0* %ops7 to %struct.anon*, !dbg !7272
  %rhs9 = getelementptr inbounds %struct.anon, %struct.anon* %single8, i32 0, i32 0, !dbg !7273
  %10 = load %union.tree_node*, %union.tree_node** %rhs9, align 8, !dbg !7273
  %call10 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %10), !dbg !7274
  %conv = zext i8 %call10 to i32, !dbg !7274
  %tobool11 = icmp ne i32 %conv, 0, !dbg !7274
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !7275

if.then12:                                        ; preds = %lor.lhs.false, %land.lhs.true3
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7276
  br label %return, !dbg !7276

if.end13:                                         ; preds = %lor.lhs.false, %if.end
  %11 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !7277
  %12 = bitcast %struct.expr_hash_elt* %element to i8*, !dbg !7278
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %element, i32 0, i32 3, !dbg !7279
  %13 = load i32, i32* %hash, align 8, !dbg !7279
  %14 = load i8, i8* %insert.addr, align 1, !dbg !7280
  %conv14 = zext i8 %14 to i32, !dbg !7280
  %tobool15 = icmp ne i32 %conv14, 0, !dbg !7280
  %15 = zext i1 %tobool15 to i64, !dbg !7280
  %cond = select i1 %tobool15, i32 1, i32 0, !dbg !7280
  %call16 = call i8** @htab_find_slot_with_hash(%struct.htab* %11, i8* %12, i32 %13, i32 %cond), !dbg !7281
  store i8** %call16, i8*** %slot, align 8, !dbg !7282
  %16 = load i8**, i8*** %slot, align 8, !dbg !7283
  %cmp17 = icmp eq i8** %16, null, !dbg !7285
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !7286

if.then19:                                        ; preds = %if.end13
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7287
  br label %return, !dbg !7287

if.end20:                                         ; preds = %if.end13
  %17 = load i8**, i8*** %slot, align 8, !dbg !7288
  %18 = load i8*, i8** %17, align 8, !dbg !7290
  %cmp21 = icmp eq i8* %18, null, !dbg !7291
  br i1 %cmp21, label %if.then23, label %if.end33, !dbg !7292

if.then23:                                        ; preds = %if.end20
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element2, metadata !7293, metadata !DIExpression()), !dbg !7295
  %call24 = call i8* @xmalloc(i64 80), !dbg !7296
  %19 = bitcast i8* %call24 to %struct.expr_hash_elt*, !dbg !7296
  store %struct.expr_hash_elt* %19, %struct.expr_hash_elt** %element2, align 8, !dbg !7295
  %20 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7297
  %21 = bitcast %struct.expr_hash_elt* %20 to i8*, !dbg !7298
  %22 = bitcast %struct.expr_hash_elt* %element to i8*, !dbg !7298
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 80, i1 false), !dbg !7298
  %23 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7299
  %24 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7300
  %stamp = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %24, i32 0, i32 4, !dbg !7301
  store %struct.expr_hash_elt* %23, %struct.expr_hash_elt** %stamp, align 8, !dbg !7302
  %25 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7303
  %26 = bitcast %struct.expr_hash_elt* %25 to i8*, !dbg !7304
  %27 = load i8**, i8*** %slot, align 8, !dbg !7305
  store i8* %26, i8** %27, align 8, !dbg !7306
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7307
  %tobool25 = icmp ne %struct._IO_FILE* %28, null, !dbg !7307
  br i1 %tobool25, label %land.lhs.true26, label %if.end31, !dbg !7309

land.lhs.true26:                                  ; preds = %if.then23
  %29 = load i32, i32* @dump_flags, align 4, !dbg !7310
  %and27 = and i32 %29, 8, !dbg !7311
  %tobool28 = icmp ne i32 %and27, 0, !dbg !7311
  br i1 %tobool28, label %if.then29, label %if.end31, !dbg !7312

if.then29:                                        ; preds = %land.lhs.true26
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7313
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0)), !dbg !7315
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7316
  %32 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7317
  call void @print_expr_hash_elt(%struct._IO_FILE* %31, %struct.expr_hash_elt* %32), !dbg !7318
  br label %if.end31, !dbg !7319

if.end31:                                         ; preds = %if.then29, %land.lhs.true26, %if.then23
  %33 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element2, align 8, !dbg !7320
  %call32 = call %struct.expr_hash_elt** @VEC_expr_hash_elt_t_heap_safe_push(%struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, %struct.expr_hash_elt* %33), !dbg !7320
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7321
  br label %return, !dbg !7321

if.end33:                                         ; preds = %if.end20
  %34 = load i8**, i8*** %slot, align 8, !dbg !7322
  %35 = load i8*, i8** %34, align 8, !dbg !7323
  %36 = bitcast i8* %35 to %struct.expr_hash_elt*, !dbg !7324
  %lhs34 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %36, i32 0, i32 0, !dbg !7325
  %37 = load %union.tree_node*, %union.tree_node** %lhs34, align 8, !dbg !7325
  store %union.tree_node* %37, %union.tree_node** %lhs, align 8, !dbg !7326
  %38 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7327
  %base35 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !7327
  %39 = bitcast %struct.tree_base* %base35 to i64*, !dbg !7327
  %bf.load36 = load i64, i64* %39, align 8, !dbg !7327
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !7327
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !7327
  %cmp39 = icmp eq i32 %bf.cast38, 141, !dbg !7329
  br i1 %cmp39, label %if.then41, label %if.end64, !dbg !7330

if.then41:                                        ; preds = %if.end33
  %40 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7331
  %ssa_name = bitcast %union.tree_node* %40 to %struct.tree_ssa_name*, !dbg !7331
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !7331
  %41 = load i32, i32* %version, align 8, !dbg !7331
  %42 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !7331
  %tobool42 = icmp ne %struct.VEC_tree_heap* %42, null, !dbg !7331
  br i1 %tobool42, label %cond.true, label %cond.false, !dbg !7331

cond.true:                                        ; preds = %if.then41
  %43 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !7331
  %base43 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %43, i32 0, i32 0, !dbg !7331
  br label %cond.end, !dbg !7331

cond.false:                                       ; preds = %if.then41
  br label %cond.end, !dbg !7331

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond44 = phi %struct.VEC_tree_base* [ %base43, %cond.true ], [ null, %cond.false ], !dbg !7331
  %call45 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond44), !dbg !7331
  %cmp46 = icmp ult i32 %41, %call45, !dbg !7331
  br i1 %cmp46, label %cond.true48, label %cond.false58, !dbg !7331

cond.true48:                                      ; preds = %cond.end
  %44 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !7331
  %tobool49 = icmp ne %struct.VEC_tree_heap* %44, null, !dbg !7331
  br i1 %tobool49, label %cond.true50, label %cond.false52, !dbg !7331

cond.true50:                                      ; preds = %cond.true48
  %45 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !7331
  %base51 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %45, i32 0, i32 0, !dbg !7331
  br label %cond.end53, !dbg !7331

cond.false52:                                     ; preds = %cond.true48
  br label %cond.end53, !dbg !7331

cond.end53:                                       ; preds = %cond.false52, %cond.true50
  %cond54 = phi %struct.VEC_tree_base* [ %base51, %cond.true50 ], [ null, %cond.false52 ], !dbg !7331
  %46 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7331
  %ssa_name55 = bitcast %union.tree_node* %46 to %struct.tree_ssa_name*, !dbg !7331
  %version56 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name55, i32 0, i32 3, !dbg !7331
  %47 = load i32, i32* %version56, align 8, !dbg !7331
  %call57 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond54, i32 %47), !dbg !7331
  br label %cond.end59, !dbg !7331

cond.false58:                                     ; preds = %cond.end
  br label %cond.end59, !dbg !7331

cond.end59:                                       ; preds = %cond.false58, %cond.end53
  %cond60 = phi %union.tree_node* [ %call57, %cond.end53 ], [ null, %cond.false58 ], !dbg !7331
  store %union.tree_node* %cond60, %union.tree_node** %temp, align 8, !dbg !7333
  %48 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !7334
  %tobool61 = icmp ne %union.tree_node* %48, null, !dbg !7334
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !7336

if.then62:                                        ; preds = %cond.end59
  %49 = load %union.tree_node*, %union.tree_node** %temp, align 8, !dbg !7337
  store %union.tree_node* %49, %union.tree_node** %lhs, align 8, !dbg !7338
  br label %if.end63, !dbg !7339

if.end63:                                         ; preds = %if.then62, %cond.end59
  br label %if.end64, !dbg !7340

if.end64:                                         ; preds = %if.end63, %if.end33
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7341
  %tobool65 = icmp ne %struct._IO_FILE* %50, null, !dbg !7341
  br i1 %tobool65, label %land.lhs.true66, label %if.end72, !dbg !7343

land.lhs.true66:                                  ; preds = %if.end64
  %51 = load i32, i32* @dump_flags, align 4, !dbg !7344
  %and67 = and i32 %51, 8, !dbg !7345
  %tobool68 = icmp ne i32 %and67, 0, !dbg !7345
  br i1 %tobool68, label %if.then69, label %if.end72, !dbg !7346

if.then69:                                        ; preds = %land.lhs.true66
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7347
  %call70 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.39, i64 0, i64 0)), !dbg !7349
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7350
  %54 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7351
  call void @print_generic_expr(%struct._IO_FILE* %53, %union.tree_node* %54, i32 0), !dbg !7352
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !7353
  %call71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !7354
  br label %if.end72, !dbg !7355

if.end72:                                         ; preds = %if.then69, %land.lhs.true66, %if.end64
  %56 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !7356
  store %union.tree_node* %56, %union.tree_node** %retval, align 8, !dbg !7357
  br label %return, !dbg !7357

return:                                           ; preds = %if.end72, %if.end31, %if.then19, %if.then12
  %57 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7358
  ret %union.tree_node* %57, !dbg !7358
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local zeroext i8 @may_propagate_copy_into_stmt(%union.gimple_statement_d*, %union.tree_node*) #2

declare dso_local void @print_gimple_expr(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_hash_element(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs, %struct.expr_hash_elt* %element) #0 !dbg !7359 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %element.addr = alloca %struct.expr_hash_elt*, align 8
  %code = alloca i32, align 4
  %expr = alloca %struct.hashable_expr*, align 8
  %subcode = alloca i32, align 4
  %nargs = alloca i64, align 8
  %i = alloca i64, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7362, metadata !DIExpression()), !dbg !7363
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  store %struct.expr_hash_elt* %element, %struct.expr_hash_elt** %element.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %element.addr, metadata !7366, metadata !DIExpression()), !dbg !7367
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7368, metadata !DIExpression()), !dbg !7369
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7370
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !7371
  store i32 %call, i32* %code, align 4, !dbg !7369
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr, metadata !7372, metadata !DIExpression()), !dbg !7373
  %1 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7374
  %expr1 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %1, i32 0, i32 1, !dbg !7375
  store %struct.hashable_expr* %expr1, %struct.hashable_expr** %expr, align 8, !dbg !7373
  %2 = load i32, i32* %code, align 4, !dbg !7376
  %cmp = icmp eq i32 %2, 6, !dbg !7378
  br i1 %cmp, label %if.then, label %if.else, !dbg !7379

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %subcode, metadata !7380, metadata !DIExpression()), !dbg !7382
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7383
  %call2 = call i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3), !dbg !7384
  store i32 %call2, i32* %subcode, align 4, !dbg !7382
  %4 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7385
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %4, i32 0, i32 0, !dbg !7386
  store %union.tree_node* null, %union.tree_node** %type, align 8, !dbg !7387
  %5 = load i32, i32* %subcode, align 4, !dbg !7388
  %call3 = call i32 @get_gimple_rhs_class(i32 %5), !dbg !7389
  switch i32 %call3, label %sw.default [
    i32 3, label %sw.bb
    i32 2, label %sw.bb5
    i32 1, label %sw.bb14
  ], !dbg !7390

sw.bb:                                            ; preds = %if.then
  %6 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7391
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %6, i32 0, i32 1, !dbg !7393
  store i32 0, i32* %kind, align 8, !dbg !7394
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7395
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %7), !dbg !7396
  %8 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7397
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %8, i32 0, i32 2, !dbg !7398
  %single = bitcast %union.anon.0* %ops to %struct.anon*, !dbg !7399
  %rhs = getelementptr inbounds %struct.anon, %struct.anon* %single, i32 0, i32 0, !dbg !7400
  store %union.tree_node* %call4, %union.tree_node** %rhs, align 8, !dbg !7401
  br label %sw.epilog, !dbg !7402

sw.bb5:                                           ; preds = %if.then
  %9 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7403
  %kind6 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %9, i32 0, i32 1, !dbg !7404
  store i32 1, i32* %kind6, align 8, !dbg !7405
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7406
  %call7 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %10), !dbg !7406
  %common = bitcast %union.tree_node* %call7 to %struct.tree_common*, !dbg !7406
  %type8 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7406
  %11 = load %union.tree_node*, %union.tree_node** %type8, align 8, !dbg !7406
  %12 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7407
  %type9 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %12, i32 0, i32 0, !dbg !7408
  store %union.tree_node* %11, %union.tree_node** %type9, align 8, !dbg !7409
  %13 = load i32, i32* %subcode, align 4, !dbg !7410
  %14 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7411
  %ops10 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %14, i32 0, i32 2, !dbg !7412
  %unary = bitcast %union.anon.0* %ops10 to %struct.anon.1*, !dbg !7413
  %op = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary, i32 0, i32 0, !dbg !7414
  store i32 %13, i32* %op, align 8, !dbg !7415
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7416
  %call11 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %15), !dbg !7417
  %16 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7418
  %ops12 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %16, i32 0, i32 2, !dbg !7419
  %unary13 = bitcast %union.anon.0* %ops12 to %struct.anon.1*, !dbg !7420
  %opnd = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary13, i32 0, i32 1, !dbg !7421
  store %union.tree_node* %call11, %union.tree_node** %opnd, align 8, !dbg !7422
  br label %sw.epilog, !dbg !7423

sw.bb14:                                          ; preds = %if.then
  %17 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7424
  %kind15 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %17, i32 0, i32 1, !dbg !7425
  store i32 2, i32* %kind15, align 8, !dbg !7426
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7427
  %call16 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %18), !dbg !7427
  %common17 = bitcast %union.tree_node* %call16 to %struct.tree_common*, !dbg !7427
  %type18 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common17, i32 0, i32 2, !dbg !7427
  %19 = load %union.tree_node*, %union.tree_node** %type18, align 8, !dbg !7427
  %20 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7428
  %type19 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %20, i32 0, i32 0, !dbg !7429
  store %union.tree_node* %19, %union.tree_node** %type19, align 8, !dbg !7430
  %21 = load i32, i32* %subcode, align 4, !dbg !7431
  %22 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7432
  %ops20 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %22, i32 0, i32 2, !dbg !7433
  %binary = bitcast %union.anon.0* %ops20 to %struct.anon.2*, !dbg !7434
  %op21 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 0, !dbg !7435
  store i32 %21, i32* %op21, align 8, !dbg !7436
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7437
  %call22 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %23), !dbg !7438
  %24 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7439
  %ops23 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %24, i32 0, i32 2, !dbg !7440
  %binary24 = bitcast %union.anon.0* %ops23 to %struct.anon.2*, !dbg !7441
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary24, i32 0, i32 1, !dbg !7442
  store %union.tree_node* %call22, %union.tree_node** %opnd0, align 8, !dbg !7443
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7444
  %call25 = call %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %25), !dbg !7445
  %26 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7446
  %ops26 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %26, i32 0, i32 2, !dbg !7447
  %binary27 = bitcast %union.anon.0* %ops26 to %struct.anon.2*, !dbg !7448
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary27, i32 0, i32 2, !dbg !7449
  store %union.tree_node* %call25, %union.tree_node** %opnd1, align 8, !dbg !7450
  br label %sw.epilog, !dbg !7451

sw.default:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 234, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7452
  br label %sw.epilog, !dbg !7453

sw.epilog:                                        ; preds = %sw.default, %sw.bb14, %sw.bb5, %sw.bb
  br label %if.end110, !dbg !7454

if.else:                                          ; preds = %entry
  %27 = load i32, i32* %code, align 4, !dbg !7455
  %cmp28 = icmp eq i32 %27, 1, !dbg !7457
  br i1 %cmp28, label %if.then29, label %if.else44, !dbg !7458

if.then29:                                        ; preds = %if.else
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !7459
  %29 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7461
  %type30 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %29, i32 0, i32 0, !dbg !7462
  store %union.tree_node* %28, %union.tree_node** %type30, align 8, !dbg !7463
  %30 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7464
  %kind31 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %30, i32 0, i32 1, !dbg !7465
  store i32 2, i32* %kind31, align 8, !dbg !7466
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7467
  %call32 = call i32 @gimple_cond_code(%union.gimple_statement_d* %31), !dbg !7468
  %32 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7469
  %ops33 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %32, i32 0, i32 2, !dbg !7470
  %binary34 = bitcast %union.anon.0* %ops33 to %struct.anon.2*, !dbg !7471
  %op35 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary34, i32 0, i32 0, !dbg !7472
  store i32 %call32, i32* %op35, align 8, !dbg !7473
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7474
  %call36 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %33), !dbg !7475
  %34 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7476
  %ops37 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %34, i32 0, i32 2, !dbg !7477
  %binary38 = bitcast %union.anon.0* %ops37 to %struct.anon.2*, !dbg !7478
  %opnd039 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary38, i32 0, i32 1, !dbg !7479
  store %union.tree_node* %call36, %union.tree_node** %opnd039, align 8, !dbg !7480
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7481
  %call40 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %35), !dbg !7482
  %36 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7483
  %ops41 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %36, i32 0, i32 2, !dbg !7484
  %binary42 = bitcast %union.anon.0* %ops41 to %struct.anon.2*, !dbg !7485
  %opnd143 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary42, i32 0, i32 2, !dbg !7486
  store %union.tree_node* %call40, %union.tree_node** %opnd143, align 8, !dbg !7487
  br label %if.end109, !dbg !7488

if.else44:                                        ; preds = %if.else
  %37 = load i32, i32* %code, align 4, !dbg !7489
  %cmp45 = icmp eq i32 %37, 8, !dbg !7491
  br i1 %cmp45, label %if.then46, label %if.else79, !dbg !7492

if.then46:                                        ; preds = %if.else44
  call void @llvm.dbg.declare(metadata i64* %nargs, metadata !7493, metadata !DIExpression()), !dbg !7495
  %38 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7496
  %call47 = call i32 @gimple_call_num_args(%union.gimple_statement_d* %38), !dbg !7497
  %conv = zext i32 %call47 to i64, !dbg !7497
  store i64 %conv, i64* %nargs, align 8, !dbg !7495
  call void @llvm.dbg.declare(metadata i64* %i, metadata !7498, metadata !DIExpression()), !dbg !7499
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7500
  %call48 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %39), !dbg !7500
  %tobool = icmp ne %union.tree_node* %call48, null, !dbg !7500
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7500

cond.true:                                        ; preds = %if.then46
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 250, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7500
  br label %cond.end, !dbg !7500

cond.false:                                       ; preds = %if.then46
  br label %cond.end, !dbg !7500

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7500
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7501
  %call49 = call %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %40), !dbg !7501
  %common50 = bitcast %union.tree_node* %call49 to %struct.tree_common*, !dbg !7501
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !7501
  %41 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !7501
  %42 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7502
  %type52 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %42, i32 0, i32 0, !dbg !7503
  store %union.tree_node* %41, %union.tree_node** %type52, align 8, !dbg !7504
  %43 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7505
  %kind53 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %43, i32 0, i32 1, !dbg !7506
  store i32 3, i32* %kind53, align 8, !dbg !7507
  %44 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7508
  %call54 = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %44), !dbg !7509
  %45 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7510
  %ops55 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %45, i32 0, i32 2, !dbg !7511
  %call56 = bitcast %union.anon.0* %ops55 to %struct.anon.3*, !dbg !7512
  %fn = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call56, i32 0, i32 0, !dbg !7513
  store %union.tree_node* %call54, %union.tree_node** %fn, align 8, !dbg !7514
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7515
  %call57 = call i32 @gimple_call_flags(%union.gimple_statement_d* %46), !dbg !7517
  %and = and i32 %call57, 3, !dbg !7518
  %tobool58 = icmp ne i32 %and, 0, !dbg !7518
  br i1 %tobool58, label %if.then59, label %if.else62, !dbg !7519

if.then59:                                        ; preds = %cond.end
  %47 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7520
  %ops60 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %47, i32 0, i32 2, !dbg !7521
  %call61 = bitcast %union.anon.0* %ops60 to %struct.anon.3*, !dbg !7522
  %pure = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call61, i32 0, i32 1, !dbg !7523
  store i8 1, i8* %pure, align 8, !dbg !7524
  br label %if.end, !dbg !7520

if.else62:                                        ; preds = %cond.end
  %48 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7525
  %ops63 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %48, i32 0, i32 2, !dbg !7526
  %call64 = bitcast %union.anon.0* %ops63 to %struct.anon.3*, !dbg !7527
  %pure65 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call64, i32 0, i32 1, !dbg !7528
  store i8 0, i8* %pure65, align 8, !dbg !7529
  br label %if.end

if.end:                                           ; preds = %if.else62, %if.then59
  %49 = load i64, i64* %nargs, align 8, !dbg !7530
  %50 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7531
  %ops66 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %50, i32 0, i32 2, !dbg !7532
  %call67 = bitcast %union.anon.0* %ops66 to %struct.anon.3*, !dbg !7533
  %nargs68 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call67, i32 0, i32 2, !dbg !7534
  store i64 %49, i64* %nargs68, align 8, !dbg !7535
  %51 = load i64, i64* %nargs, align 8, !dbg !7536
  %call69 = call i8* @xcalloc(i64 %51, i64 8), !dbg !7537
  %52 = bitcast i8* %call69 to %union.tree_node**, !dbg !7538
  %53 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7539
  %ops70 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %53, i32 0, i32 2, !dbg !7540
  %call71 = bitcast %union.anon.0* %ops70 to %struct.anon.3*, !dbg !7541
  %args = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call71, i32 0, i32 3, !dbg !7542
  store %union.tree_node** %52, %union.tree_node*** %args, align 8, !dbg !7543
  store i64 0, i64* %i, align 8, !dbg !7544
  br label %for.cond, !dbg !7546

for.cond:                                         ; preds = %for.inc, %if.end
  %54 = load i64, i64* %i, align 8, !dbg !7547
  %55 = load i64, i64* %nargs, align 8, !dbg !7549
  %cmp72 = icmp ult i64 %54, %55, !dbg !7550
  br i1 %cmp72, label %for.body, label %for.end, !dbg !7551

for.body:                                         ; preds = %for.cond
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7552
  %57 = load i64, i64* %i, align 8, !dbg !7553
  %conv74 = trunc i64 %57 to i32, !dbg !7553
  %call75 = call %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %56, i32 %conv74), !dbg !7554
  %58 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7555
  %ops76 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %58, i32 0, i32 2, !dbg !7556
  %call77 = bitcast %union.anon.0* %ops76 to %struct.anon.3*, !dbg !7557
  %args78 = getelementptr inbounds %struct.anon.3, %struct.anon.3* %call77, i32 0, i32 3, !dbg !7558
  %59 = load %union.tree_node**, %union.tree_node*** %args78, align 8, !dbg !7558
  %60 = load i64, i64* %i, align 8, !dbg !7559
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %59, i64 %60, !dbg !7555
  store %union.tree_node* %call75, %union.tree_node** %arrayidx, align 8, !dbg !7560
  br label %for.inc, !dbg !7555

for.inc:                                          ; preds = %for.body
  %61 = load i64, i64* %i, align 8, !dbg !7561
  %inc = add i64 %61, 1, !dbg !7561
  store i64 %inc, i64* %i, align 8, !dbg !7561
  br label %for.cond, !dbg !7562, !llvm.loop !7563

for.end:                                          ; preds = %for.cond
  br label %if.end108, !dbg !7565

if.else79:                                        ; preds = %if.else44
  %62 = load i32, i32* %code, align 4, !dbg !7566
  %cmp80 = icmp eq i32 %62, 5, !dbg !7568
  br i1 %cmp80, label %if.then82, label %if.else92, !dbg !7569

if.then82:                                        ; preds = %if.else79
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7570
  %call83 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %63), !dbg !7570
  %common84 = bitcast %union.tree_node* %call83 to %struct.tree_common*, !dbg !7570
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !7570
  %64 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !7570
  %65 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7572
  %type86 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %65, i32 0, i32 0, !dbg !7573
  store %union.tree_node* %64, %union.tree_node** %type86, align 8, !dbg !7574
  %66 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7575
  %kind87 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %66, i32 0, i32 1, !dbg !7576
  store i32 0, i32* %kind87, align 8, !dbg !7577
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7578
  %call88 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %67), !dbg !7579
  %68 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7580
  %ops89 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %68, i32 0, i32 2, !dbg !7581
  %single90 = bitcast %union.anon.0* %ops89 to %struct.anon*, !dbg !7582
  %rhs91 = getelementptr inbounds %struct.anon, %struct.anon* %single90, i32 0, i32 0, !dbg !7583
  store %union.tree_node* %call88, %union.tree_node** %rhs91, align 8, !dbg !7584
  br label %if.end107, !dbg !7585

if.else92:                                        ; preds = %if.else79
  %69 = load i32, i32* %code, align 4, !dbg !7586
  %cmp93 = icmp eq i32 %69, 3, !dbg !7588
  br i1 %cmp93, label %if.then95, label %if.else105, !dbg !7589

if.then95:                                        ; preds = %if.else92
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7590
  %call96 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %70), !dbg !7590
  %common97 = bitcast %union.tree_node* %call96 to %struct.tree_common*, !dbg !7590
  %type98 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common97, i32 0, i32 2, !dbg !7590
  %71 = load %union.tree_node*, %union.tree_node** %type98, align 8, !dbg !7590
  %72 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7592
  %type99 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %72, i32 0, i32 0, !dbg !7593
  store %union.tree_node* %71, %union.tree_node** %type99, align 8, !dbg !7594
  %73 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7595
  %kind100 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %73, i32 0, i32 1, !dbg !7596
  store i32 0, i32* %kind100, align 8, !dbg !7597
  %74 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7598
  %call101 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %74), !dbg !7599
  %75 = load %struct.hashable_expr*, %struct.hashable_expr** %expr, align 8, !dbg !7600
  %ops102 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %75, i32 0, i32 2, !dbg !7601
  %single103 = bitcast %union.anon.0* %ops102 to %struct.anon*, !dbg !7602
  %rhs104 = getelementptr inbounds %struct.anon, %struct.anon* %single103, i32 0, i32 0, !dbg !7603
  store %union.tree_node* %call101, %union.tree_node** %rhs104, align 8, !dbg !7604
  br label %if.end106, !dbg !7605

if.else105:                                       ; preds = %if.else92
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 279, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7606
  br label %if.end106

if.end106:                                        ; preds = %if.else105, %if.then95
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %if.then82
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %for.end
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.then29
  br label %if.end110

if.end110:                                        ; preds = %if.end109, %sw.epilog
  %76 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !7607
  %77 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7608
  %lhs111 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %77, i32 0, i32 0, !dbg !7609
  store %union.tree_node* %76, %union.tree_node** %lhs111, align 8, !dbg !7610
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7611
  %79 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7612
  %stmt112 = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %79, i32 0, i32 2, !dbg !7613
  store %union.gimple_statement_d* %78, %union.gimple_statement_d** %stmt112, align 8, !dbg !7614
  %80 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7615
  %81 = bitcast %struct.expr_hash_elt* %80 to i8*, !dbg !7615
  %call113 = call i32 @avail_expr_hash(i8* %81), !dbg !7616
  %82 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7617
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %82, i32 0, i32 3, !dbg !7618
  store i32 %call113, i32* %hash, align 8, !dbg !7619
  %83 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7620
  %84 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %element.addr, align 8, !dbg !7621
  %stamp = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %84, i32 0, i32 4, !dbg !7622
  store %struct.expr_hash_elt* %83, %struct.expr_hash_elt** %stamp, align 8, !dbg !7623
  ret void, !dbg !7624
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) #0 !dbg !7625 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7626, metadata !DIExpression()), !dbg !7627
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7628
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7630
  %cmp = icmp uge i32 %call, 3, !dbg !7631
  br i1 %cmp, label %if.then, label %if.else, !dbg !7632

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7633
  %call1 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %1, i32 2), !dbg !7634
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !7635
  br label %return, !dbg !7635

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !7636
  br label %return, !dbg !7636

return:                                           ; preds = %if.else, %if.then
  %2 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !7637
  ret %union.tree_node* %2, !dbg !7637
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) #0 !dbg !7638 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7639, metadata !DIExpression()), !dbg !7640
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !7641, metadata !DIExpression()), !dbg !7642
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7643
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7644
  store i32 %call, i32* %num_ops, align 4, !dbg !7645
  %1 = load i32, i32* %num_ops, align 4, !dbg !7646
  %sub = sub i32 %1, 3, !dbg !7647
  ret i32 %sub, !dbg !7648
}

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7649 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7650, metadata !DIExpression()), !dbg !7651
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7652, metadata !DIExpression()), !dbg !7653
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7654
  %1 = load i32, i32* %index.addr, align 4, !dbg !7655
  %add = add i32 %1, 3, !dbg !7656
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 %add), !dbg !7657
  ret %union.tree_node* %call, !dbg !7658
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) #0 !dbg !7659 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !7660, metadata !DIExpression()), !dbg !7661
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7662
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7663
  %conv = zext i8 %call to i32, !dbg !7663
  %tobool = icmp ne i32 %conv, 0, !dbg !7663
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7664

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !7665
  %call1 = call %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %1), !dbg !7666
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !7664
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool2, %land.rhs ], !dbg !7667
  %land.ext = zext i1 %2 to i32, !dbg !7664
  %conv3 = trunc i32 %land.ext to i8, !dbg !7663
  ret i8 %conv3, !dbg !7668
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) #0 !dbg !7669 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %vuse.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  store %union.tree_node* %vuse, %union.tree_node** %vuse.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %vuse.addr, metadata !7672, metadata !DIExpression()), !dbg !7673
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7674
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !7674
  %tobool = icmp ne i8 %call, 0, !dbg !7674
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7674

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7674
  br label %cond.end, !dbg !7674

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7674

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7674
  %1 = load %union.tree_node*, %union.tree_node** %vuse.addr, align 8, !dbg !7675
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !7676
  %gsmembase = bitcast %union.gimple_statement_d* %2 to %struct.gimple_statement_with_memory_ops_base*, !dbg !7677
  %vuse1 = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !7678
  store %union.tree_node* %1, %union.tree_node** %vuse1, align 8, !dbg !7679
  ret void, !dbg !7680
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !7681 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7682, metadata !DIExpression()), !dbg !7683
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7684, metadata !DIExpression()), !dbg !7685
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !7686, metadata !DIExpression()), !dbg !7687
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7688
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !7689
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !7690
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7691
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !7692
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !7693
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7694
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7695
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !7696
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !7697
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7698
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !7699
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !7700
  ret void, !dbg !7701
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) #0 !dbg !7702 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %num_ops = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7703, metadata !DIExpression()), !dbg !7704
  call void @llvm.dbg.declare(metadata i32* %num_ops, metadata !7705, metadata !DIExpression()), !dbg !7706
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7707
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7708
  store i32 %call, i32* %num_ops, align 4, !dbg !7709
  %1 = load i32, i32* %num_ops, align 4, !dbg !7710
  %cmp = icmp ugt i32 %1, 1, !dbg !7710
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7710

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7710
  br label %cond.end, !dbg !7710

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7710

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7710
  %2 = load i32, i32* %num_ops, align 4, !dbg !7711
  %sub = sub i32 %2, 1, !dbg !7712
  ret i32 %sub, !dbg !7713
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %gs, i32 %index) #0 !dbg !7714 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %index.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !7715, metadata !DIExpression()), !dbg !7716
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !7717, metadata !DIExpression()), !dbg !7718
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7719
  %call = call i32 @gimple_num_ops(%union.gimple_statement_d* %0), !dbg !7719
  %1 = load i32, i32* %index.addr, align 4, !dbg !7719
  %add = add i32 %1, 1, !dbg !7719
  %cmp = icmp ugt i32 %call, %add, !dbg !7719
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7719

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 3215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !7719
  br label %cond.end, !dbg !7719

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7719
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !7720
  %3 = load i32, i32* %index.addr, align 4, !dbg !7721
  %add1 = add i32 %3, 1, !dbg !7722
  %call2 = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %2, i32 %add1), !dbg !7723
  ret %union.tree_node* %call2, !dbg !7724
}

declare dso_local %struct.basic_block_def* @label_to_block_fn(%struct.function*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_info* @allocate_edge_info(%struct.edge_def* %e) #0 !dbg !7725 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %edge_info = alloca %struct.edge_info*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7728, metadata !DIExpression()), !dbg !7729
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info, metadata !7730, metadata !DIExpression()), !dbg !7731
  %call = call i8* @xcalloc(i64 1, i64 32), !dbg !7732
  %0 = bitcast i8* %call to %struct.edge_info*, !dbg !7732
  store %struct.edge_info* %0, %struct.edge_info** %edge_info, align 8, !dbg !7733
  %1 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !7734
  %2 = bitcast %struct.edge_info* %1 to i8*, !dbg !7734
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7735
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 3, !dbg !7736
  store i8* %2, i8** %aux, align 8, !dbg !7737
  %4 = load %struct.edge_info*, %struct.edge_info** %edge_info, align 8, !dbg !7738
  ret %struct.edge_info* %4, !dbg !7739
}

declare dso_local void @extract_true_false_edges_from_block(%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**) #2

declare dso_local i32 @integer_zerop(%union.tree_node*) #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @invert_truthvalue_loc(i32, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_conditions(%struct.edge_info* %edge_info, %union.tree_node* %cond, %union.tree_node* %inverted) #0 !dbg !7740 {
entry:
  %edge_info.addr = alloca %struct.edge_info*, align 8
  %cond.addr = alloca %union.tree_node*, align 8
  %inverted.addr = alloca %union.tree_node*, align 8
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  store %struct.edge_info* %edge_info, %struct.edge_info** %edge_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_info** %edge_info.addr, metadata !7743, metadata !DIExpression()), !dbg !7744
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !7745, metadata !DIExpression()), !dbg !7746
  store %union.tree_node* %inverted, %union.tree_node** %inverted.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %inverted.addr, metadata !7747, metadata !DIExpression()), !dbg !7748
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0, metadata !7749, metadata !DIExpression()), !dbg !7750
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1, metadata !7751, metadata !DIExpression()), !dbg !7752
  %0 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7753
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !7753
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !7753
  %bf.load = load i64, i64* %1, align 8, !dbg !7753
  %bf.clear = and i64 %bf.load, 65535, !dbg !7753
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7753
  %idxprom = sext i32 %bf.cast to i64, !dbg !7753
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7753
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7753
  %cmp = icmp eq i32 %2, 5, !dbg !7753
  br i1 %cmp, label %if.end, label %if.then, !dbg !7755

if.then:                                          ; preds = %entry
  br label %return, !dbg !7756

if.end:                                           ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7757
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !7757
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !7757
  %arrayidx1 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !7757
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx1, align 8, !dbg !7757
  store %union.tree_node* %4, %union.tree_node** %op0, align 8, !dbg !7758
  %5 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7759
  %exp2 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !7759
  %operands3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp2, i32 0, i32 3, !dbg !7759
  %arrayidx4 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands3, i64 0, i64 1, !dbg !7759
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx4, align 8, !dbg !7759
  store %union.tree_node* %6, %union.tree_node** %op1, align 8, !dbg !7760
  %7 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7761
  %base5 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !7761
  %8 = bitcast %struct.tree_base* %base5 to i64*, !dbg !7761
  %bf.load6 = load i64, i64* %8, align 8, !dbg !7761
  %bf.clear7 = and i64 %bf.load6, 65535, !dbg !7761
  %bf.cast8 = trunc i64 %bf.clear7 to i32, !dbg !7761
  switch i32 %bf.cast8, label %sw.default [
    i32 97, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb57
    i32 98, label %sw.bb57
    i32 101, label %sw.bb102
    i32 103, label %sw.bb151
    i32 105, label %sw.bb167
    i32 107, label %sw.bb167
    i32 109, label %sw.bb181
    i32 110, label %sw.bb189
  ], !dbg !7762

sw.bb:                                            ; preds = %if.end, %if.end
  %9 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7763
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !7763
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7763
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7763
  %base9 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !7763
  %11 = bitcast %struct.tree_base* %base9 to i64*, !dbg !7763
  %bf.load10 = load i64, i64* %11, align 8, !dbg !7763
  %bf.clear11 = and i64 %bf.load10, 65535, !dbg !7763
  %bf.cast12 = trunc i64 %bf.clear11 to i32, !dbg !7763
  %cmp13 = icmp eq i32 %bf.cast12, 9, !dbg !7763
  br i1 %cmp13, label %if.then38, label %lor.lhs.false, !dbg !7763

lor.lhs.false:                                    ; preds = %sw.bb
  %12 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7763
  %common14 = bitcast %union.tree_node* %12 to %struct.tree_common*, !dbg !7763
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common14, i32 0, i32 2, !dbg !7763
  %13 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !7763
  %base16 = bitcast %union.tree_node* %13 to %struct.tree_base*, !dbg !7763
  %14 = bitcast %struct.tree_base* %base16 to i64*, !dbg !7763
  %bf.load17 = load i64, i64* %14, align 8, !dbg !7763
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !7763
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !7763
  %cmp20 = icmp eq i32 %bf.cast19, 13, !dbg !7763
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false21, !dbg !7763

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %15 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7763
  %common22 = bitcast %union.tree_node* %15 to %struct.tree_common*, !dbg !7763
  %type23 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common22, i32 0, i32 2, !dbg !7763
  %16 = load %union.tree_node*, %union.tree_node** %type23, align 8, !dbg !7763
  %base24 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !7763
  %17 = bitcast %struct.tree_base* %base24 to i64*, !dbg !7763
  %bf.load25 = load i64, i64* %17, align 8, !dbg !7763
  %bf.clear26 = and i64 %bf.load25, 65535, !dbg !7763
  %bf.cast27 = trunc i64 %bf.clear26 to i32, !dbg !7763
  %cmp28 = icmp eq i32 %bf.cast27, 14, !dbg !7763
  br i1 %cmp28, label %land.lhs.true, label %if.else, !dbg !7763

land.lhs.true:                                    ; preds = %lor.lhs.false21, %lor.lhs.false
  %18 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7763
  %common29 = bitcast %union.tree_node* %18 to %struct.tree_common*, !dbg !7763
  %type30 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common29, i32 0, i32 2, !dbg !7763
  %19 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !7763
  %common31 = bitcast %union.tree_node* %19 to %struct.tree_common*, !dbg !7763
  %type32 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common31, i32 0, i32 2, !dbg !7763
  %20 = load %union.tree_node*, %union.tree_node** %type32, align 8, !dbg !7763
  %base33 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !7763
  %21 = bitcast %struct.tree_base* %base33 to i64*, !dbg !7763
  %bf.load34 = load i64, i64* %21, align 8, !dbg !7763
  %bf.clear35 = and i64 %bf.load34, 65535, !dbg !7763
  %bf.cast36 = trunc i64 %bf.clear35 to i32, !dbg !7763
  %cmp37 = icmp eq i32 %bf.cast36, 9, !dbg !7763
  br i1 %cmp37, label %if.then38, label %if.else, !dbg !7766

if.then38:                                        ; preds = %land.lhs.true, %sw.bb
  %22 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7767
  %max_cond_equivalences = getelementptr inbounds %struct.edge_info, %struct.edge_info* %22, i32 0, i32 3, !dbg !7769
  store i32 6, i32* %max_cond_equivalences, align 8, !dbg !7770
  %call = call i8* @xmalloc(i64 336), !dbg !7771
  %23 = bitcast i8* %call to %struct.cond_equivalence*, !dbg !7771
  %24 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7772
  %cond_equivalences = getelementptr inbounds %struct.edge_info, %struct.edge_info* %24, i32 0, i32 2, !dbg !7773
  store %struct.cond_equivalence* %23, %struct.cond_equivalence** %cond_equivalences, align 8, !dbg !7774
  %25 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7775
  %26 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7776
  %27 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7777
  %cond_equivalences39 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %27, i32 0, i32 2, !dbg !7778
  %28 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences39, align 8, !dbg !7778
  %arrayidx40 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %28, i64 4, !dbg !7777
  call void @build_and_record_new_cond(i32 104, %union.tree_node* %25, %union.tree_node* %26, %struct.cond_equivalence* %arrayidx40), !dbg !7779
  %29 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7780
  %30 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7781
  %31 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7782
  %cond_equivalences41 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %31, i32 0, i32 2, !dbg !7783
  %32 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences41, align 8, !dbg !7783
  %arrayidx42 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %32, i64 5, !dbg !7782
  call void @build_and_record_new_cond(i32 110, %union.tree_node* %29, %union.tree_node* %30, %struct.cond_equivalence* %arrayidx42), !dbg !7784
  br label %if.end46, !dbg !7785

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false21
  %33 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7786
  %max_cond_equivalences43 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %33, i32 0, i32 3, !dbg !7788
  store i32 4, i32* %max_cond_equivalences43, align 8, !dbg !7789
  %call44 = call i8* @xmalloc(i64 224), !dbg !7790
  %34 = bitcast i8* %call44 to %struct.cond_equivalence*, !dbg !7790
  %35 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7791
  %cond_equivalences45 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %35, i32 0, i32 2, !dbg !7792
  store %struct.cond_equivalence* %34, %struct.cond_equivalence** %cond_equivalences45, align 8, !dbg !7793
  br label %if.end46

if.end46:                                         ; preds = %if.else, %if.then38
  %36 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7794
  %base47 = bitcast %union.tree_node* %36 to %struct.tree_base*, !dbg !7794
  %37 = bitcast %struct.tree_base* %base47 to i64*, !dbg !7794
  %bf.load48 = load i64, i64* %37, align 8, !dbg !7794
  %bf.clear49 = and i64 %bf.load48, 65535, !dbg !7794
  %bf.cast50 = trunc i64 %bf.clear49 to i32, !dbg !7794
  %cmp51 = icmp eq i32 %bf.cast50, 97, !dbg !7795
  %38 = zext i1 %cmp51 to i64, !dbg !7794
  %cond52 = select i1 %cmp51, i32 98, i32 100, !dbg !7794
  %39 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7796
  %40 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7797
  %41 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7798
  %cond_equivalences53 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %41, i32 0, i32 2, !dbg !7799
  %42 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences53, align 8, !dbg !7799
  %arrayidx54 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %42, i64 2, !dbg !7798
  call void @build_and_record_new_cond(i32 %cond52, %union.tree_node* %39, %union.tree_node* %40, %struct.cond_equivalence* %arrayidx54), !dbg !7800
  %43 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7801
  %44 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7802
  %45 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7803
  %cond_equivalences55 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %45, i32 0, i32 2, !dbg !7804
  %46 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences55, align 8, !dbg !7804
  %arrayidx56 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %46, i64 3, !dbg !7803
  call void @build_and_record_new_cond(i32 102, %union.tree_node* %43, %union.tree_node* %44, %struct.cond_equivalence* %arrayidx56), !dbg !7805
  br label %sw.epilog, !dbg !7806

sw.bb57:                                          ; preds = %if.end, %if.end
  %47 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7807
  %common58 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !7807
  %type59 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common58, i32 0, i32 2, !dbg !7807
  %48 = load %union.tree_node*, %union.tree_node** %type59, align 8, !dbg !7807
  %base60 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !7807
  %49 = bitcast %struct.tree_base* %base60 to i64*, !dbg !7807
  %bf.load61 = load i64, i64* %49, align 8, !dbg !7807
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !7807
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !7807
  %cmp64 = icmp eq i32 %bf.cast63, 9, !dbg !7807
  br i1 %cmp64, label %if.then91, label %lor.lhs.false65, !dbg !7807

lor.lhs.false65:                                  ; preds = %sw.bb57
  %50 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7807
  %common66 = bitcast %union.tree_node* %50 to %struct.tree_common*, !dbg !7807
  %type67 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common66, i32 0, i32 2, !dbg !7807
  %51 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !7807
  %base68 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !7807
  %52 = bitcast %struct.tree_base* %base68 to i64*, !dbg !7807
  %bf.load69 = load i64, i64* %52, align 8, !dbg !7807
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !7807
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !7807
  %cmp72 = icmp eq i32 %bf.cast71, 13, !dbg !7807
  br i1 %cmp72, label %land.lhs.true81, label %lor.lhs.false73, !dbg !7807

lor.lhs.false73:                                  ; preds = %lor.lhs.false65
  %53 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7807
  %common74 = bitcast %union.tree_node* %53 to %struct.tree_common*, !dbg !7807
  %type75 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common74, i32 0, i32 2, !dbg !7807
  %54 = load %union.tree_node*, %union.tree_node** %type75, align 8, !dbg !7807
  %base76 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !7807
  %55 = bitcast %struct.tree_base* %base76 to i64*, !dbg !7807
  %bf.load77 = load i64, i64* %55, align 8, !dbg !7807
  %bf.clear78 = and i64 %bf.load77, 65535, !dbg !7807
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !7807
  %cmp80 = icmp eq i32 %bf.cast79, 14, !dbg !7807
  br i1 %cmp80, label %land.lhs.true81, label %if.else97, !dbg !7807

land.lhs.true81:                                  ; preds = %lor.lhs.false73, %lor.lhs.false65
  %56 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7807
  %common82 = bitcast %union.tree_node* %56 to %struct.tree_common*, !dbg !7807
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !7807
  %57 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !7807
  %common84 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !7807
  %type85 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common84, i32 0, i32 2, !dbg !7807
  %58 = load %union.tree_node*, %union.tree_node** %type85, align 8, !dbg !7807
  %base86 = bitcast %union.tree_node* %58 to %struct.tree_base*, !dbg !7807
  %59 = bitcast %struct.tree_base* %base86 to i64*, !dbg !7807
  %bf.load87 = load i64, i64* %59, align 8, !dbg !7807
  %bf.clear88 = and i64 %bf.load87, 65535, !dbg !7807
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !7807
  %cmp90 = icmp eq i32 %bf.cast89, 9, !dbg !7807
  br i1 %cmp90, label %if.then91, label %if.else97, !dbg !7809

if.then91:                                        ; preds = %land.lhs.true81, %sw.bb57
  %60 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7810
  %max_cond_equivalences92 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %60, i32 0, i32 3, !dbg !7812
  store i32 3, i32* %max_cond_equivalences92, align 8, !dbg !7813
  %call93 = call i8* @xmalloc(i64 168), !dbg !7814
  %61 = bitcast i8* %call93 to %struct.cond_equivalence*, !dbg !7814
  %62 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7815
  %cond_equivalences94 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %62, i32 0, i32 2, !dbg !7816
  store %struct.cond_equivalence* %61, %struct.cond_equivalence** %cond_equivalences94, align 8, !dbg !7817
  %63 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7818
  %64 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7819
  %65 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7820
  %cond_equivalences95 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %65, i32 0, i32 2, !dbg !7821
  %66 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences95, align 8, !dbg !7821
  %arrayidx96 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %66, i64 2, !dbg !7820
  call void @build_and_record_new_cond(i32 104, %union.tree_node* %63, %union.tree_node* %64, %struct.cond_equivalence* %arrayidx96), !dbg !7822
  br label %if.end101, !dbg !7823

if.else97:                                        ; preds = %land.lhs.true81, %lor.lhs.false73
  %67 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7824
  %max_cond_equivalences98 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %67, i32 0, i32 3, !dbg !7826
  store i32 2, i32* %max_cond_equivalences98, align 8, !dbg !7827
  %call99 = call i8* @xmalloc(i64 112), !dbg !7828
  %68 = bitcast i8* %call99 to %struct.cond_equivalence*, !dbg !7828
  %69 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7829
  %cond_equivalences100 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %69, i32 0, i32 2, !dbg !7830
  store %struct.cond_equivalence* %68, %struct.cond_equivalence** %cond_equivalences100, align 8, !dbg !7831
  br label %if.end101

if.end101:                                        ; preds = %if.else97, %if.then91
  br label %sw.epilog, !dbg !7832

sw.bb102:                                         ; preds = %if.end
  %70 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7833
  %common103 = bitcast %union.tree_node* %70 to %struct.tree_common*, !dbg !7833
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common103, i32 0, i32 2, !dbg !7833
  %71 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !7833
  %base105 = bitcast %union.tree_node* %71 to %struct.tree_base*, !dbg !7833
  %72 = bitcast %struct.tree_base* %base105 to i64*, !dbg !7833
  %bf.load106 = load i64, i64* %72, align 8, !dbg !7833
  %bf.clear107 = and i64 %bf.load106, 65535, !dbg !7833
  %bf.cast108 = trunc i64 %bf.clear107 to i32, !dbg !7833
  %cmp109 = icmp eq i32 %bf.cast108, 9, !dbg !7833
  br i1 %cmp109, label %if.then136, label %lor.lhs.false110, !dbg !7833

lor.lhs.false110:                                 ; preds = %sw.bb102
  %73 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7833
  %common111 = bitcast %union.tree_node* %73 to %struct.tree_common*, !dbg !7833
  %type112 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common111, i32 0, i32 2, !dbg !7833
  %74 = load %union.tree_node*, %union.tree_node** %type112, align 8, !dbg !7833
  %base113 = bitcast %union.tree_node* %74 to %struct.tree_base*, !dbg !7833
  %75 = bitcast %struct.tree_base* %base113 to i64*, !dbg !7833
  %bf.load114 = load i64, i64* %75, align 8, !dbg !7833
  %bf.clear115 = and i64 %bf.load114, 65535, !dbg !7833
  %bf.cast116 = trunc i64 %bf.clear115 to i32, !dbg !7833
  %cmp117 = icmp eq i32 %bf.cast116, 13, !dbg !7833
  br i1 %cmp117, label %land.lhs.true126, label %lor.lhs.false118, !dbg !7833

lor.lhs.false118:                                 ; preds = %lor.lhs.false110
  %76 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7833
  %common119 = bitcast %union.tree_node* %76 to %struct.tree_common*, !dbg !7833
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !7833
  %77 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !7833
  %base121 = bitcast %union.tree_node* %77 to %struct.tree_base*, !dbg !7833
  %78 = bitcast %struct.tree_base* %base121 to i64*, !dbg !7833
  %bf.load122 = load i64, i64* %78, align 8, !dbg !7833
  %bf.clear123 = and i64 %bf.load122, 65535, !dbg !7833
  %bf.cast124 = trunc i64 %bf.clear123 to i32, !dbg !7833
  %cmp125 = icmp eq i32 %bf.cast124, 14, !dbg !7833
  br i1 %cmp125, label %land.lhs.true126, label %if.else142, !dbg !7833

land.lhs.true126:                                 ; preds = %lor.lhs.false118, %lor.lhs.false110
  %79 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7833
  %common127 = bitcast %union.tree_node* %79 to %struct.tree_common*, !dbg !7833
  %type128 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common127, i32 0, i32 2, !dbg !7833
  %80 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !7833
  %common129 = bitcast %union.tree_node* %80 to %struct.tree_common*, !dbg !7833
  %type130 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common129, i32 0, i32 2, !dbg !7833
  %81 = load %union.tree_node*, %union.tree_node** %type130, align 8, !dbg !7833
  %base131 = bitcast %union.tree_node* %81 to %struct.tree_base*, !dbg !7833
  %82 = bitcast %struct.tree_base* %base131 to i64*, !dbg !7833
  %bf.load132 = load i64, i64* %82, align 8, !dbg !7833
  %bf.clear133 = and i64 %bf.load132, 65535, !dbg !7833
  %bf.cast134 = trunc i64 %bf.clear133 to i32, !dbg !7833
  %cmp135 = icmp eq i32 %bf.cast134, 9, !dbg !7833
  br i1 %cmp135, label %if.then136, label %if.else142, !dbg !7835

if.then136:                                       ; preds = %land.lhs.true126, %sw.bb102
  %83 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7836
  %max_cond_equivalences137 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %83, i32 0, i32 3, !dbg !7838
  store i32 5, i32* %max_cond_equivalences137, align 8, !dbg !7839
  %call138 = call i8* @xmalloc(i64 280), !dbg !7840
  %84 = bitcast i8* %call138 to %struct.cond_equivalence*, !dbg !7840
  %85 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7841
  %cond_equivalences139 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %85, i32 0, i32 2, !dbg !7842
  store %struct.cond_equivalence* %84, %struct.cond_equivalence** %cond_equivalences139, align 8, !dbg !7843
  %86 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7844
  %87 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7845
  %88 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7846
  %cond_equivalences140 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %88, i32 0, i32 2, !dbg !7847
  %89 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences140, align 8, !dbg !7847
  %arrayidx141 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %89, i64 4, !dbg !7846
  call void @build_and_record_new_cond(i32 104, %union.tree_node* %86, %union.tree_node* %87, %struct.cond_equivalence* %arrayidx141), !dbg !7848
  br label %if.end146, !dbg !7849

if.else142:                                       ; preds = %land.lhs.true126, %lor.lhs.false118
  %90 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7850
  %max_cond_equivalences143 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %90, i32 0, i32 3, !dbg !7852
  store i32 4, i32* %max_cond_equivalences143, align 8, !dbg !7853
  %call144 = call i8* @xmalloc(i64 224), !dbg !7854
  %91 = bitcast i8* %call144 to %struct.cond_equivalence*, !dbg !7854
  %92 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7855
  %cond_equivalences145 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %92, i32 0, i32 2, !dbg !7856
  store %struct.cond_equivalence* %91, %struct.cond_equivalence** %cond_equivalences145, align 8, !dbg !7857
  br label %if.end146

if.end146:                                        ; preds = %if.else142, %if.then136
  %93 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7858
  %94 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7859
  %95 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7860
  %cond_equivalences147 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %95, i32 0, i32 2, !dbg !7861
  %96 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences147, align 8, !dbg !7861
  %arrayidx148 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %96, i64 2, !dbg !7860
  call void @build_and_record_new_cond(i32 98, %union.tree_node* %93, %union.tree_node* %94, %struct.cond_equivalence* %arrayidx148), !dbg !7862
  %97 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7863
  %98 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7864
  %99 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7865
  %cond_equivalences149 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %99, i32 0, i32 2, !dbg !7866
  %100 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences149, align 8, !dbg !7866
  %arrayidx150 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %100, i64 3, !dbg !7865
  call void @build_and_record_new_cond(i32 100, %union.tree_node* %97, %union.tree_node* %98, %struct.cond_equivalence* %arrayidx150), !dbg !7867
  br label %sw.epilog, !dbg !7868

sw.bb151:                                         ; preds = %if.end
  %101 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7869
  %max_cond_equivalences152 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %101, i32 0, i32 3, !dbg !7870
  store i32 8, i32* %max_cond_equivalences152, align 8, !dbg !7871
  %call153 = call i8* @xmalloc(i64 448), !dbg !7872
  %102 = bitcast i8* %call153 to %struct.cond_equivalence*, !dbg !7872
  %103 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7873
  %cond_equivalences154 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %103, i32 0, i32 2, !dbg !7874
  store %struct.cond_equivalence* %102, %struct.cond_equivalence** %cond_equivalences154, align 8, !dbg !7875
  %104 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7876
  %105 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7877
  %106 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7878
  %cond_equivalences155 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %106, i32 0, i32 2, !dbg !7879
  %107 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences155, align 8, !dbg !7879
  %arrayidx156 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %107, i64 2, !dbg !7878
  call void @build_and_record_new_cond(i32 102, %union.tree_node* %104, %union.tree_node* %105, %struct.cond_equivalence* %arrayidx156), !dbg !7880
  %108 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7881
  %109 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7882
  %110 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7883
  %cond_equivalences157 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %110, i32 0, i32 2, !dbg !7884
  %111 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences157, align 8, !dbg !7884
  %arrayidx158 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %111, i64 3, !dbg !7883
  call void @build_and_record_new_cond(i32 106, %union.tree_node* %108, %union.tree_node* %109, %struct.cond_equivalence* %arrayidx158), !dbg !7885
  %112 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7886
  %113 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7887
  %114 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7888
  %cond_equivalences159 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %114, i32 0, i32 2, !dbg !7889
  %115 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences159, align 8, !dbg !7889
  %arrayidx160 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %115, i64 4, !dbg !7888
  call void @build_and_record_new_cond(i32 108, %union.tree_node* %112, %union.tree_node* %113, %struct.cond_equivalence* %arrayidx160), !dbg !7890
  %116 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7891
  %117 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7892
  %118 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7893
  %cond_equivalences161 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %118, i32 0, i32 2, !dbg !7894
  %119 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences161, align 8, !dbg !7894
  %arrayidx162 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %119, i64 5, !dbg !7893
  call void @build_and_record_new_cond(i32 109, %union.tree_node* %116, %union.tree_node* %117, %struct.cond_equivalence* %arrayidx162), !dbg !7895
  %120 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7896
  %121 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7897
  %122 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7898
  %cond_equivalences163 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %122, i32 0, i32 2, !dbg !7899
  %123 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences163, align 8, !dbg !7899
  %arrayidx164 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %123, i64 6, !dbg !7898
  call void @build_and_record_new_cond(i32 105, %union.tree_node* %120, %union.tree_node* %121, %struct.cond_equivalence* %arrayidx164), !dbg !7900
  %124 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7901
  %125 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7902
  %126 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7903
  %cond_equivalences165 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %126, i32 0, i32 2, !dbg !7904
  %127 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences165, align 8, !dbg !7904
  %arrayidx166 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %127, i64 7, !dbg !7903
  call void @build_and_record_new_cond(i32 107, %union.tree_node* %124, %union.tree_node* %125, %struct.cond_equivalence* %arrayidx166), !dbg !7905
  br label %sw.epilog, !dbg !7906

sw.bb167:                                         ; preds = %if.end, %if.end
  %128 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7907
  %max_cond_equivalences168 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %128, i32 0, i32 3, !dbg !7908
  store i32 4, i32* %max_cond_equivalences168, align 8, !dbg !7909
  %call169 = call i8* @xmalloc(i64 224), !dbg !7910
  %129 = bitcast i8* %call169 to %struct.cond_equivalence*, !dbg !7910
  %130 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7911
  %cond_equivalences170 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %130, i32 0, i32 2, !dbg !7912
  store %struct.cond_equivalence* %129, %struct.cond_equivalence** %cond_equivalences170, align 8, !dbg !7913
  %131 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7914
  %base171 = bitcast %union.tree_node* %131 to %struct.tree_base*, !dbg !7914
  %132 = bitcast %struct.tree_base* %base171 to i64*, !dbg !7914
  %bf.load172 = load i64, i64* %132, align 8, !dbg !7914
  %bf.clear173 = and i64 %bf.load172, 65535, !dbg !7914
  %bf.cast174 = trunc i64 %bf.clear173 to i32, !dbg !7914
  %cmp175 = icmp eq i32 %bf.cast174, 105, !dbg !7915
  %133 = zext i1 %cmp175 to i64, !dbg !7914
  %cond176 = select i1 %cmp175, i32 106, i32 108, !dbg !7914
  %134 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7916
  %135 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7917
  %136 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7918
  %cond_equivalences177 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %136, i32 0, i32 2, !dbg !7919
  %137 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences177, align 8, !dbg !7919
  %arrayidx178 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %137, i64 2, !dbg !7918
  call void @build_and_record_new_cond(i32 %cond176, %union.tree_node* %134, %union.tree_node* %135, %struct.cond_equivalence* %arrayidx178), !dbg !7920
  %138 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7921
  %139 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7922
  %140 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7923
  %cond_equivalences179 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %140, i32 0, i32 2, !dbg !7924
  %141 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences179, align 8, !dbg !7924
  %arrayidx180 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %141, i64 3, !dbg !7923
  call void @build_and_record_new_cond(i32 102, %union.tree_node* %138, %union.tree_node* %139, %struct.cond_equivalence* %arrayidx180), !dbg !7925
  br label %sw.epilog, !dbg !7926

sw.bb181:                                         ; preds = %if.end
  %142 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7927
  %max_cond_equivalences182 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %142, i32 0, i32 3, !dbg !7928
  store i32 4, i32* %max_cond_equivalences182, align 8, !dbg !7929
  %call183 = call i8* @xmalloc(i64 224), !dbg !7930
  %143 = bitcast i8* %call183 to %struct.cond_equivalence*, !dbg !7930
  %144 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7931
  %cond_equivalences184 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %144, i32 0, i32 2, !dbg !7932
  store %struct.cond_equivalence* %143, %struct.cond_equivalence** %cond_equivalences184, align 8, !dbg !7933
  %145 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7934
  %146 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7935
  %147 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7936
  %cond_equivalences185 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %147, i32 0, i32 2, !dbg !7937
  %148 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences185, align 8, !dbg !7937
  %arrayidx186 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %148, i64 2, !dbg !7936
  call void @build_and_record_new_cond(i32 106, %union.tree_node* %145, %union.tree_node* %146, %struct.cond_equivalence* %arrayidx186), !dbg !7938
  %149 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7939
  %150 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7940
  %151 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7941
  %cond_equivalences187 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %151, i32 0, i32 2, !dbg !7942
  %152 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences187, align 8, !dbg !7942
  %arrayidx188 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %152, i64 3, !dbg !7941
  call void @build_and_record_new_cond(i32 108, %union.tree_node* %149, %union.tree_node* %150, %struct.cond_equivalence* %arrayidx188), !dbg !7943
  br label %sw.epilog, !dbg !7944

sw.bb189:                                         ; preds = %if.end
  %153 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7945
  %max_cond_equivalences190 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %153, i32 0, i32 3, !dbg !7946
  store i32 4, i32* %max_cond_equivalences190, align 8, !dbg !7947
  %call191 = call i8* @xmalloc(i64 224), !dbg !7948
  %154 = bitcast i8* %call191 to %struct.cond_equivalence*, !dbg !7948
  %155 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7949
  %cond_equivalences192 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %155, i32 0, i32 2, !dbg !7950
  store %struct.cond_equivalence* %154, %struct.cond_equivalence** %cond_equivalences192, align 8, !dbg !7951
  %156 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7952
  %157 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7953
  %158 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7954
  %cond_equivalences193 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %158, i32 0, i32 2, !dbg !7955
  %159 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences193, align 8, !dbg !7955
  %arrayidx194 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %159, i64 2, !dbg !7954
  call void @build_and_record_new_cond(i32 102, %union.tree_node* %156, %union.tree_node* %157, %struct.cond_equivalence* %arrayidx194), !dbg !7956
  %160 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !7957
  %161 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !7958
  %162 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7959
  %cond_equivalences195 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %162, i32 0, i32 2, !dbg !7960
  %163 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences195, align 8, !dbg !7960
  %arrayidx196 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %163, i64 3, !dbg !7959
  call void @build_and_record_new_cond(i32 104, %union.tree_node* %160, %union.tree_node* %161, %struct.cond_equivalence* %arrayidx196), !dbg !7961
  br label %sw.epilog, !dbg !7962

sw.default:                                       ; preds = %if.end
  %164 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7963
  %max_cond_equivalences197 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %164, i32 0, i32 3, !dbg !7964
  store i32 2, i32* %max_cond_equivalences197, align 8, !dbg !7965
  %call198 = call i8* @xmalloc(i64 112), !dbg !7966
  %165 = bitcast i8* %call198 to %struct.cond_equivalence*, !dbg !7966
  %166 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7967
  %cond_equivalences199 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %166, i32 0, i32 2, !dbg !7968
  store %struct.cond_equivalence* %165, %struct.cond_equivalence** %cond_equivalences199, align 8, !dbg !7969
  br label %sw.epilog, !dbg !7970

sw.epilog:                                        ; preds = %sw.default, %sw.bb189, %sw.bb181, %sw.bb167, %sw.bb151, %if.end146, %if.end101, %if.end46
  %167 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !7971
  %168 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7972
  %cond_equivalences200 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %168, i32 0, i32 2, !dbg !7973
  %169 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences200, align 8, !dbg !7973
  %arrayidx201 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %169, i64 0, !dbg !7972
  %cond202 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %arrayidx201, i32 0, i32 0, !dbg !7974
  call void @initialize_expr_from_cond(%union.tree_node* %167, %struct.hashable_expr* %cond202), !dbg !7975
  %170 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !7976
  %171 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7977
  %cond_equivalences203 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %171, i32 0, i32 2, !dbg !7978
  %172 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences203, align 8, !dbg !7978
  %arrayidx204 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %172, i64 0, !dbg !7977
  %value = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %arrayidx204, i32 0, i32 1, !dbg !7979
  store %union.tree_node* %170, %union.tree_node** %value, align 8, !dbg !7980
  %173 = load %union.tree_node*, %union.tree_node** %inverted.addr, align 8, !dbg !7981
  %174 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7982
  %cond_equivalences205 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %174, i32 0, i32 2, !dbg !7983
  %175 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences205, align 8, !dbg !7983
  %arrayidx206 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %175, i64 1, !dbg !7982
  %cond207 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %arrayidx206, i32 0, i32 0, !dbg !7984
  call void @initialize_expr_from_cond(%union.tree_node* %173, %struct.hashable_expr* %cond207), !dbg !7985
  %176 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !7986
  %177 = load %struct.edge_info*, %struct.edge_info** %edge_info.addr, align 8, !dbg !7987
  %cond_equivalences208 = getelementptr inbounds %struct.edge_info, %struct.edge_info* %177, i32 0, i32 2, !dbg !7988
  %178 = load %struct.cond_equivalence*, %struct.cond_equivalence** %cond_equivalences208, align 8, !dbg !7988
  %arrayidx209 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %178, i64 1, !dbg !7987
  %value210 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %arrayidx209, i32 0, i32 1, !dbg !7989
  store %union.tree_node* %176, %union.tree_node** %value210, align 8, !dbg !7990
  br label %return, !dbg !7991

return:                                           ; preds = %sw.epilog, %if.then
  ret void, !dbg !7991
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !7992 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7995, metadata !DIExpression()), !dbg !7996
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7997
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !7998
  %1 = load i32, i32* %flags, align 8, !dbg !7998
  %and = and i32 %1, 512, !dbg !7999
  %tobool = icmp ne i32 %and, 0, !dbg !7999
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !8000

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8001
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !8002
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !8003
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !8003
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !8001
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !8004

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8005
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !8006
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !8007
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !8007
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !8008
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !8008
  br label %cond.end, !dbg !8004

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !8004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !8004
  ret %struct.gimple_seq_d* %cond, !dbg !8009
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !8010 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8016, metadata !DIExpression()), !dbg !8017
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8018
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8018
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8018

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8019
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !8020
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !8020
  br label %cond.end, !dbg !8018

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8018
  ret %struct.gimple_seq_node_d* %cond, !dbg !8021
}

; Function Attrs: noinline nounwind uwtable
define internal void @build_and_record_new_cond(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, %struct.cond_equivalence* %p) #0 !dbg !8022 {
entry:
  %code.addr = alloca i32, align 4
  %op0.addr = alloca %union.tree_node*, align 8
  %op1.addr = alloca %union.tree_node*, align 8
  %p.addr = alloca %struct.cond_equivalence*, align 8
  %cond = alloca %struct.hashable_expr*, align 8
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8025, metadata !DIExpression()), !dbg !8026
  store %union.tree_node* %op0, %union.tree_node** %op0.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op0.addr, metadata !8027, metadata !DIExpression()), !dbg !8028
  store %union.tree_node* %op1, %union.tree_node** %op1.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op1.addr, metadata !8029, metadata !DIExpression()), !dbg !8030
  store %struct.cond_equivalence* %p, %struct.cond_equivalence** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.cond_equivalence** %p.addr, metadata !8031, metadata !DIExpression()), !dbg !8032
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %cond, metadata !8033, metadata !DIExpression()), !dbg !8034
  %0 = load %struct.cond_equivalence*, %struct.cond_equivalence** %p.addr, align 8, !dbg !8035
  %cond1 = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %0, i32 0, i32 0, !dbg !8036
  store %struct.hashable_expr* %cond1, %struct.hashable_expr** %cond, align 8, !dbg !8034
  %1 = load i32, i32* %code.addr, align 4, !dbg !8037
  %idxprom = sext i32 %1 to i64, !dbg !8037
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8037
  %2 = load i32, i32* %arrayidx, align 4, !dbg !8037
  %cmp = icmp eq i32 %2, 5, !dbg !8037
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8037

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 1108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8037
  br label %cond.end, !dbg !8037

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8037

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond2 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8037
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8038
  %4 = load %struct.hashable_expr*, %struct.hashable_expr** %cond, align 8, !dbg !8039
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %4, i32 0, i32 0, !dbg !8040
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !8041
  %5 = load %struct.hashable_expr*, %struct.hashable_expr** %cond, align 8, !dbg !8042
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %5, i32 0, i32 1, !dbg !8043
  store i32 2, i32* %kind, align 8, !dbg !8044
  %6 = load i32, i32* %code.addr, align 4, !dbg !8045
  %7 = load %struct.hashable_expr*, %struct.hashable_expr** %cond, align 8, !dbg !8046
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %7, i32 0, i32 2, !dbg !8047
  %binary = bitcast %union.anon.0* %ops to %struct.anon.2*, !dbg !8048
  %op = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 0, !dbg !8049
  store i32 %6, i32* %op, align 8, !dbg !8050
  %8 = load %union.tree_node*, %union.tree_node** %op0.addr, align 8, !dbg !8051
  %9 = load %struct.hashable_expr*, %struct.hashable_expr** %cond, align 8, !dbg !8052
  %ops3 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %9, i32 0, i32 2, !dbg !8053
  %binary4 = bitcast %union.anon.0* %ops3 to %struct.anon.2*, !dbg !8054
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary4, i32 0, i32 1, !dbg !8055
  store %union.tree_node* %8, %union.tree_node** %opnd0, align 8, !dbg !8056
  %10 = load %union.tree_node*, %union.tree_node** %op1.addr, align 8, !dbg !8057
  %11 = load %struct.hashable_expr*, %struct.hashable_expr** %cond, align 8, !dbg !8058
  %ops5 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %11, i32 0, i32 2, !dbg !8059
  %binary6 = bitcast %union.anon.0* %ops5 to %struct.anon.2*, !dbg !8060
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary6, i32 0, i32 2, !dbg !8061
  store %union.tree_node* %10, %union.tree_node** %opnd1, align 8, !dbg !8062
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !8063
  %13 = load %struct.cond_equivalence*, %struct.cond_equivalence** %p.addr, align 8, !dbg !8064
  %value = getelementptr inbounds %struct.cond_equivalence, %struct.cond_equivalence* %13, i32 0, i32 1, !dbg !8065
  store %union.tree_node* %12, %union.tree_node** %value, align 8, !dbg !8066
  ret void, !dbg !8067
}

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_expr_from_cond(%union.tree_node* %cond, %struct.hashable_expr* %expr) #0 !dbg !8068 {
entry:
  %cond.addr = alloca %union.tree_node*, align 8
  %expr.addr = alloca %struct.hashable_expr*, align 8
  store %union.tree_node* %cond, %union.tree_node** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %cond.addr, metadata !8071, metadata !DIExpression()), !dbg !8072
  store %struct.hashable_expr* %expr, %struct.hashable_expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hashable_expr** %expr.addr, metadata !8073, metadata !DIExpression()), !dbg !8074
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8075
  %1 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8076
  %type = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %1, i32 0, i32 0, !dbg !8077
  store %union.tree_node* %0, %union.tree_node** %type, align 8, !dbg !8078
  %2 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8079
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8079
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !8079
  %bf.load = load i64, i64* %3, align 8, !dbg !8079
  %bf.clear = and i64 %bf.load, 65535, !dbg !8079
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8079
  %idxprom = sext i32 %bf.cast to i64, !dbg !8079
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !8079
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8079
  %cmp = icmp eq i32 %4, 5, !dbg !8079
  br i1 %cmp, label %if.then, label %if.else, !dbg !8081

if.then:                                          ; preds = %entry
  %5 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8082
  %kind = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %5, i32 0, i32 1, !dbg !8084
  store i32 2, i32* %kind, align 8, !dbg !8085
  %6 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8086
  %base1 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !8086
  %7 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8086
  %bf.load2 = load i64, i64* %7, align 8, !dbg !8086
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8086
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8086
  %8 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8087
  %ops = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %8, i32 0, i32 2, !dbg !8088
  %binary = bitcast %union.anon.0* %ops to %struct.anon.2*, !dbg !8089
  %op = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary, i32 0, i32 0, !dbg !8090
  store i32 %bf.cast4, i32* %op, align 8, !dbg !8091
  %9 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8092
  %exp = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !8092
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8092
  %arrayidx5 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !8092
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !8092
  %11 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8093
  %ops6 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %11, i32 0, i32 2, !dbg !8094
  %binary7 = bitcast %union.anon.0* %ops6 to %struct.anon.2*, !dbg !8095
  %opnd0 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary7, i32 0, i32 1, !dbg !8096
  store %union.tree_node* %10, %union.tree_node** %opnd0, align 8, !dbg !8097
  %12 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8098
  %exp8 = bitcast %union.tree_node* %12 to %struct.tree_exp*, !dbg !8098
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !8098
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !8098
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !8098
  %14 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8099
  %ops11 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %14, i32 0, i32 2, !dbg !8100
  %binary12 = bitcast %union.anon.0* %ops11 to %struct.anon.2*, !dbg !8101
  %opnd1 = getelementptr inbounds %struct.anon.2, %struct.anon.2* %binary12, i32 0, i32 2, !dbg !8102
  store %union.tree_node* %13, %union.tree_node** %opnd1, align 8, !dbg !8103
  br label %if.end28, !dbg !8104

if.else:                                          ; preds = %entry
  %15 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8105
  %base13 = bitcast %union.tree_node* %15 to %struct.tree_base*, !dbg !8105
  %16 = bitcast %struct.tree_base* %base13 to i64*, !dbg !8105
  %bf.load14 = load i64, i64* %16, align 8, !dbg !8105
  %bf.clear15 = and i64 %bf.load14, 65535, !dbg !8105
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !8105
  %cmp17 = icmp eq i32 %bf.cast16, 96, !dbg !8107
  br i1 %cmp17, label %if.then18, label %if.else27, !dbg !8108

if.then18:                                        ; preds = %if.else
  %17 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8109
  %kind19 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %17, i32 0, i32 1, !dbg !8111
  store i32 1, i32* %kind19, align 8, !dbg !8112
  %18 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8113
  %ops20 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %18, i32 0, i32 2, !dbg !8114
  %unary = bitcast %union.anon.0* %ops20 to %struct.anon.1*, !dbg !8115
  %op21 = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary, i32 0, i32 0, !dbg !8116
  store i32 96, i32* %op21, align 8, !dbg !8117
  %19 = load %union.tree_node*, %union.tree_node** %cond.addr, align 8, !dbg !8118
  %exp22 = bitcast %union.tree_node* %19 to %struct.tree_exp*, !dbg !8118
  %operands23 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp22, i32 0, i32 3, !dbg !8118
  %arrayidx24 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands23, i64 0, i64 0, !dbg !8118
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !8118
  %21 = load %struct.hashable_expr*, %struct.hashable_expr** %expr.addr, align 8, !dbg !8119
  %ops25 = getelementptr inbounds %struct.hashable_expr, %struct.hashable_expr* %21, i32 0, i32 2, !dbg !8120
  %unary26 = bitcast %union.anon.0* %ops25 to %struct.anon.1*, !dbg !8121
  %opnd = getelementptr inbounds %struct.anon.1, %struct.anon.1* %unary26, i32 0, i32 1, !dbg !8122
  store %union.tree_node* %20, %union.tree_node** %opnd, align 8, !dbg !8123
  br label %if.end, !dbg !8124

if.else27:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8125
  br label %if.end

if.end:                                           ; preds = %if.else27, %if.then18
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then
  ret void, !dbg !8126
}

declare dso_local zeroext i8 @potentially_threadable_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @dom_thread_across_edge(%struct.dom_walk_data* %walk_data, %struct.edge_def* %e) #0 !dbg !8127 {
entry:
  %walk_data.addr = alloca %struct.dom_walk_data*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %dummy_cond = alloca %union.gimple_statement_d*, align 8
  store %struct.dom_walk_data* %walk_data, %struct.dom_walk_data** %walk_data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.dom_walk_data** %walk_data.addr, metadata !8130, metadata !DIExpression()), !dbg !8131
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !8132, metadata !DIExpression()), !dbg !8133
  %0 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !8134
  %global_data = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %0, i32 0, i32 4, !dbg !8136
  %1 = load i8*, i8** %global_data, align 8, !dbg !8136
  %tobool = icmp ne i8* %1, null, !dbg !8134
  br i1 %tobool, label %if.end, label %if.then, !dbg !8137

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %dummy_cond, metadata !8138, metadata !DIExpression()), !dbg !8140
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8141
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !8142
  %call = call %union.gimple_statement_d* @gimple_build_cond(i32 102, %union.tree_node* %2, %union.tree_node* %3, %union.tree_node* null, %union.tree_node* null), !dbg !8143
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %dummy_cond, align 8, !dbg !8140
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %dummy_cond, align 8, !dbg !8144
  %5 = bitcast %union.gimple_statement_d* %4 to i8*, !dbg !8144
  %6 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !8145
  %global_data1 = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %6, i32 0, i32 4, !dbg !8146
  store i8* %5, i8** %global_data1, align 8, !dbg !8147
  br label %if.end, !dbg !8148

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.dom_walk_data*, %struct.dom_walk_data** %walk_data.addr, align 8, !dbg !8149
  %global_data2 = getelementptr inbounds %struct.dom_walk_data, %struct.dom_walk_data* %7, i32 0, i32 4, !dbg !8150
  %8 = load i8*, i8** %global_data2, align 8, !dbg !8150
  %9 = bitcast i8* %8 to %union.gimple_statement_d*, !dbg !8151
  %10 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !8152
  call void @thread_across_edge(%union.gimple_statement_d* %9, %struct.edge_def* %10, i8 zeroext 0, %struct.VEC_tree_heap** @const_and_copies_stack, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)* @simplify_stmt_for_jump_threading), !dbg !8153
  ret void, !dbg !8154
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @record_const_or_copy(%union.tree_node* %x, %union.tree_node* %y) #0 !dbg !8155 {
entry:
  %x.addr = alloca %union.tree_node*, align 8
  %y.addr = alloca %union.tree_node*, align 8
  %prev_x = alloca %union.tree_node*, align 8
  %tmp = alloca %union.tree_node*, align 8
  store %union.tree_node* %x, %union.tree_node** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %x.addr, metadata !8156, metadata !DIExpression()), !dbg !8157
  store %union.tree_node* %y, %union.tree_node** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %y.addr, metadata !8158, metadata !DIExpression()), !dbg !8159
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_x, metadata !8160, metadata !DIExpression()), !dbg !8161
  %0 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !8162
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8162
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8162
  %1 = load i32, i32* %version, align 8, !dbg !8162
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8162
  %tobool = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !8162
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8162

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8162
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !8162
  br label %cond.end, !dbg !8162

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8162

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8162
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !8162
  %cmp = icmp ult i32 %1, %call, !dbg !8162
  br i1 %cmp, label %cond.true1, label %cond.false11, !dbg !8162

cond.true1:                                       ; preds = %cond.end
  %4 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8162
  %tobool2 = icmp ne %struct.VEC_tree_heap* %4, null, !dbg !8162
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !8162

cond.true3:                                       ; preds = %cond.true1
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8162
  %base4 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i32 0, i32 0, !dbg !8162
  br label %cond.end6, !dbg !8162

cond.false5:                                      ; preds = %cond.true1
  br label %cond.end6, !dbg !8162

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_tree_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !8162
  %6 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !8162
  %ssa_name8 = bitcast %union.tree_node* %6 to %struct.tree_ssa_name*, !dbg !8162
  %version9 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name8, i32 0, i32 3, !dbg !8162
  %7 = load i32, i32* %version9, align 8, !dbg !8162
  %call10 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond7, i32 %7), !dbg !8162
  br label %cond.end12, !dbg !8162

cond.false11:                                     ; preds = %cond.end
  br label %cond.end12, !dbg !8162

cond.end12:                                       ; preds = %cond.false11, %cond.end6
  %cond13 = phi %union.tree_node* [ %call10, %cond.end6 ], [ null, %cond.false11 ], !dbg !8162
  store %union.tree_node* %cond13, %union.tree_node** %prev_x, align 8, !dbg !8161
  %8 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !8163
  %base14 = bitcast %union.tree_node* %8 to %struct.tree_base*, !dbg !8163
  %9 = bitcast %struct.tree_base* %base14 to i64*, !dbg !8163
  %bf.load = load i64, i64* %9, align 8, !dbg !8163
  %bf.clear = and i64 %bf.load, 65535, !dbg !8163
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8163
  %cmp15 = icmp eq i32 %bf.cast, 141, !dbg !8163
  br i1 %cmp15, label %cond.false17, label %cond.true16, !dbg !8163

cond.true16:                                      ; preds = %cond.end12
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 1320, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8163
  br label %cond.end18, !dbg !8163

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !8163

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !8163
  %10 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !8164
  %base20 = bitcast %union.tree_node* %10 to %struct.tree_base*, !dbg !8164
  %11 = bitcast %struct.tree_base* %base20 to i64*, !dbg !8164
  %bf.load21 = load i64, i64* %11, align 8, !dbg !8164
  %bf.clear22 = and i64 %bf.load21, 65535, !dbg !8164
  %bf.cast23 = trunc i64 %bf.clear22 to i32, !dbg !8164
  %cmp24 = icmp eq i32 %bf.cast23, 141, !dbg !8166
  br i1 %cmp24, label %if.then, label %if.end50, !dbg !8167

if.then:                                          ; preds = %cond.end18
  call void @llvm.dbg.declare(metadata %union.tree_node** %tmp, metadata !8168, metadata !DIExpression()), !dbg !8170
  %12 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !8171
  %ssa_name25 = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !8171
  %version26 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name25, i32 0, i32 3, !dbg !8171
  %13 = load i32, i32* %version26, align 8, !dbg !8171
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8171
  %tobool27 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !8171
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !8171

cond.true28:                                      ; preds = %if.then
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8171
  %base29 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !8171
  br label %cond.end31, !dbg !8171

cond.false30:                                     ; preds = %if.then
  br label %cond.end31, !dbg !8171

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_tree_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !8171
  %call33 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond32), !dbg !8171
  %cmp34 = icmp ult i32 %13, %call33, !dbg !8171
  br i1 %cmp34, label %cond.true35, label %cond.false45, !dbg !8171

cond.true35:                                      ; preds = %cond.end31
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8171
  %tobool36 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !8171
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !8171

cond.true37:                                      ; preds = %cond.true35
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8171
  %base38 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !8171
  br label %cond.end40, !dbg !8171

cond.false39:                                     ; preds = %cond.true35
  br label %cond.end40, !dbg !8171

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_tree_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !8171
  %18 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !8171
  %ssa_name42 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !8171
  %version43 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name42, i32 0, i32 3, !dbg !8171
  %19 = load i32, i32* %version43, align 8, !dbg !8171
  %call44 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond41, i32 %19), !dbg !8171
  br label %cond.end46, !dbg !8171

cond.false45:                                     ; preds = %cond.end31
  br label %cond.end46, !dbg !8171

cond.end46:                                       ; preds = %cond.false45, %cond.end40
  %cond47 = phi %union.tree_node* [ %call44, %cond.end40 ], [ null, %cond.false45 ], !dbg !8171
  store %union.tree_node* %cond47, %union.tree_node** %tmp, align 8, !dbg !8170
  %20 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !8172
  %tobool48 = icmp ne %union.tree_node* %20, null, !dbg !8172
  br i1 %tobool48, label %if.then49, label %if.end, !dbg !8174

if.then49:                                        ; preds = %cond.end46
  %21 = load %union.tree_node*, %union.tree_node** %tmp, align 8, !dbg !8175
  store %union.tree_node* %21, %union.tree_node** %y.addr, align 8, !dbg !8176
  br label %if.end, !dbg !8177

if.end:                                           ; preds = %if.then49, %cond.end46
  br label %if.end50, !dbg !8178

if.end50:                                         ; preds = %if.end, %cond.end18
  %22 = load %union.tree_node*, %union.tree_node** %x.addr, align 8, !dbg !8179
  %23 = load %union.tree_node*, %union.tree_node** %y.addr, align 8, !dbg !8180
  %24 = load %union.tree_node*, %union.tree_node** %prev_x, align 8, !dbg !8181
  call void @record_const_or_copy_1(%union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24), !dbg !8182
  ret void, !dbg !8183
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_local_expressions_from_table() #0 !dbg !8184 {
entry:
  %victim = alloca %struct.expr_hash_elt*, align 8
  %slot = alloca i8**, align 8
  br label %while.cond, !dbg !8185

while.cond:                                       ; preds = %cond.end20, %entry
  %0 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, align 8, !dbg !8186
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_heap* %0, null, !dbg !8186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8186

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, align 8, !dbg !8186
  %base = getelementptr inbounds %struct.VEC_expr_hash_elt_t_heap, %struct.VEC_expr_hash_elt_t_heap* %1, i32 0, i32 0, !dbg !8186
  br label %cond.end, !dbg !8186

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !8186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_hash_elt_t_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8186
  %call = call i32 @VEC_expr_hash_elt_t_base_length(%struct.VEC_expr_hash_elt_t_base* %cond), !dbg !8186
  %cmp = icmp ugt i32 %call, 0, !dbg !8187
  br i1 %cmp, label %while.body, label %while.end, !dbg !8185

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %victim, metadata !8188, metadata !DIExpression()), !dbg !8190
  %2 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, align 8, !dbg !8191
  %tobool1 = icmp ne %struct.VEC_expr_hash_elt_t_heap* %2, null, !dbg !8191
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8191

cond.true2:                                       ; preds = %while.body
  %3 = load %struct.VEC_expr_hash_elt_t_heap*, %struct.VEC_expr_hash_elt_t_heap** @avail_exprs_stack, align 8, !dbg !8191
  %base3 = getelementptr inbounds %struct.VEC_expr_hash_elt_t_heap, %struct.VEC_expr_hash_elt_t_heap* %3, i32 0, i32 0, !dbg !8191
  br label %cond.end5, !dbg !8191

cond.false4:                                      ; preds = %while.body
  br label %cond.end5, !dbg !8191

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_expr_hash_elt_t_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8191
  %call7 = call %struct.expr_hash_elt* @VEC_expr_hash_elt_t_base_pop(%struct.VEC_expr_hash_elt_t_base* %cond6), !dbg !8191
  store %struct.expr_hash_elt* %call7, %struct.expr_hash_elt** %victim, align 8, !dbg !8190
  call void @llvm.dbg.declare(metadata i8*** %slot, metadata !8192, metadata !DIExpression()), !dbg !8193
  %4 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %victim, align 8, !dbg !8194
  %cmp8 = icmp eq %struct.expr_hash_elt* %4, null, !dbg !8196
  br i1 %cmp8, label %if.then, label %if.end, !dbg !8197

if.then:                                          ; preds = %cond.end5
  br label %while.end, !dbg !8198

if.end:                                           ; preds = %cond.end5
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8199
  %tobool9 = icmp ne %struct._IO_FILE* %5, null, !dbg !8199
  br i1 %tobool9, label %land.lhs.true, label %if.end13, !dbg !8201

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !8202
  %and = and i32 %6, 8, !dbg !8203
  %tobool10 = icmp ne i32 %and, 0, !dbg !8203
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !8204

if.then11:                                        ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8205
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0)), !dbg !8207
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8208
  %9 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %victim, align 8, !dbg !8209
  call void @print_expr_hash_elt(%struct._IO_FILE* %8, %struct.expr_hash_elt* %9), !dbg !8210
  br label %if.end13, !dbg !8211

if.end13:                                         ; preds = %if.then11, %land.lhs.true, %if.end
  %10 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !8212
  %11 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %victim, align 8, !dbg !8213
  %12 = bitcast %struct.expr_hash_elt* %11 to i8*, !dbg !8213
  %13 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %victim, align 8, !dbg !8214
  %hash = getelementptr inbounds %struct.expr_hash_elt, %struct.expr_hash_elt* %13, i32 0, i32 3, !dbg !8215
  %14 = load i32, i32* %hash, align 8, !dbg !8215
  %call14 = call i8** @htab_find_slot_with_hash(%struct.htab* %10, i8* %12, i32 %14, i32 0), !dbg !8216
  store i8** %call14, i8*** %slot, align 8, !dbg !8217
  %15 = load i8**, i8*** %slot, align 8, !dbg !8218
  %tobool15 = icmp ne i8** %15, null, !dbg !8218
  br i1 %tobool15, label %land.lhs.true16, label %cond.true18, !dbg !8218

land.lhs.true16:                                  ; preds = %if.end13
  %16 = load i8**, i8*** %slot, align 8, !dbg !8218
  %17 = load i8*, i8** %16, align 8, !dbg !8218
  %18 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %victim, align 8, !dbg !8218
  %19 = bitcast %struct.expr_hash_elt* %18 to i8*, !dbg !8218
  %cmp17 = icmp eq i8* %17, %19, !dbg !8218
  br i1 %cmp17, label %cond.false19, label %cond.true18, !dbg !8218

cond.true18:                                      ; preds = %land.lhs.true16, %if.end13
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 839, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8218
  br label %cond.end20, !dbg !8218

cond.false19:                                     ; preds = %land.lhs.true16
  br label %cond.end20, !dbg !8218

cond.end20:                                       ; preds = %cond.false19, %cond.true18
  %cond21 = phi i32 [ 0, %cond.true18 ], [ 0, %cond.false19 ], !dbg !8218
  %20 = load %struct.htab*, %struct.htab** @avail_exprs, align 8, !dbg !8219
  %21 = load i8**, i8*** %slot, align 8, !dbg !8220
  call void @htab_clear_slot(%struct.htab* %20, i8** %21), !dbg !8221
  br label %while.cond, !dbg !8185, !llvm.loop !8222

while.end:                                        ; preds = %if.then, %cond.end
  ret void, !dbg !8224
}

; Function Attrs: noinline nounwind uwtable
define internal void @restore_vars_to_original_value() #0 !dbg !8225 {
entry:
  %prev_value = alloca %union.tree_node*, align 8
  %dest = alloca %union.tree_node*, align 8
  br label %while.cond, !dbg !8226

while.cond:                                       ; preds = %cond.end41, %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8227
  %tobool = icmp ne %struct.VEC_tree_heap* %0, null, !dbg !8227
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8227

cond.true:                                        ; preds = %while.cond
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8227
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i32 0, i32 0, !dbg !8227
  br label %cond.end, !dbg !8227

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !8227

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8227
  %call = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond), !dbg !8227
  %cmp = icmp ugt i32 %call, 0, !dbg !8228
  br i1 %cmp, label %while.body, label %while.end, !dbg !8226

while.body:                                       ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %union.tree_node** %prev_value, metadata !8229, metadata !DIExpression()), !dbg !8231
  call void @llvm.dbg.declare(metadata %union.tree_node** %dest, metadata !8232, metadata !DIExpression()), !dbg !8233
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8234
  %tobool1 = icmp ne %struct.VEC_tree_heap* %2, null, !dbg !8234
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8234

cond.true2:                                       ; preds = %while.body
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8234
  %base3 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i32 0, i32 0, !dbg !8234
  br label %cond.end5, !dbg !8234

cond.false4:                                      ; preds = %while.body
  br label %cond.end5, !dbg !8234

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_tree_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8234
  %call7 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond6), !dbg !8234
  store %union.tree_node* %call7, %union.tree_node** %dest, align 8, !dbg !8235
  %4 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8236
  %cmp8 = icmp eq %union.tree_node* %4, null, !dbg !8238
  br i1 %cmp8, label %if.then, label %if.end, !dbg !8239

if.then:                                          ; preds = %cond.end5
  br label %while.end, !dbg !8240

if.end:                                           ; preds = %cond.end5
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8241
  %tobool9 = icmp ne %struct._IO_FILE* %5, null, !dbg !8241
  br i1 %tobool9, label %land.lhs.true, label %if.end36, !dbg !8243

land.lhs.true:                                    ; preds = %if.end
  %6 = load i32, i32* @dump_flags, align 4, !dbg !8244
  %and = and i32 %6, 8, !dbg !8245
  %tobool10 = icmp ne i32 %and, 0, !dbg !8245
  br i1 %tobool10, label %if.then11, label %if.end36, !dbg !8246

if.then11:                                        ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8247
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0)), !dbg !8249
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8250
  %9 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8251
  call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %9, i32 0), !dbg !8252
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8253
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)), !dbg !8254
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8255
  %12 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8256
  %ssa_name = bitcast %union.tree_node* %12 to %struct.tree_ssa_name*, !dbg !8256
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8256
  %13 = load i32, i32* %version, align 8, !dbg !8256
  %14 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8256
  %tobool14 = icmp ne %struct.VEC_tree_heap* %14, null, !dbg !8256
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !8256

cond.true15:                                      ; preds = %if.then11
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8256
  %base16 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i32 0, i32 0, !dbg !8256
  br label %cond.end18, !dbg !8256

cond.false17:                                     ; preds = %if.then11
  br label %cond.end18, !dbg !8256

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !8256
  %call20 = call i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond19), !dbg !8256
  %cmp21 = icmp ult i32 %13, %call20, !dbg !8256
  br i1 %cmp21, label %cond.true22, label %cond.false32, !dbg !8256

cond.true22:                                      ; preds = %cond.end18
  %16 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8256
  %tobool23 = icmp ne %struct.VEC_tree_heap* %16, null, !dbg !8256
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !8256

cond.true24:                                      ; preds = %cond.true22
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @ssa_name_values, align 8, !dbg !8256
  %base25 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i32 0, i32 0, !dbg !8256
  br label %cond.end27, !dbg !8256

cond.false26:                                     ; preds = %cond.true22
  br label %cond.end27, !dbg !8256

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_tree_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !8256
  %18 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8256
  %ssa_name29 = bitcast %union.tree_node* %18 to %struct.tree_ssa_name*, !dbg !8256
  %version30 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name29, i32 0, i32 3, !dbg !8256
  %19 = load i32, i32* %version30, align 8, !dbg !8256
  %call31 = call %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond28, i32 %19), !dbg !8256
  br label %cond.end33, !dbg !8256

cond.false32:                                     ; preds = %cond.end18
  br label %cond.end33, !dbg !8256

cond.end33:                                       ; preds = %cond.false32, %cond.end27
  %cond34 = phi %union.tree_node* [ %call31, %cond.end27 ], [ null, %cond.false32 ], !dbg !8256
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* %cond34, i32 0), !dbg !8257
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8258
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.15, i64 0, i64 0)), !dbg !8259
  br label %if.end36, !dbg !8260

if.end36:                                         ; preds = %cond.end33, %land.lhs.true, %if.end
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8261
  %tobool37 = icmp ne %struct.VEC_tree_heap* %21, null, !dbg !8261
  br i1 %tobool37, label %cond.true38, label %cond.false40, !dbg !8261

cond.true38:                                      ; preds = %if.end36
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @const_and_copies_stack, align 8, !dbg !8261
  %base39 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %22, i32 0, i32 0, !dbg !8261
  br label %cond.end41, !dbg !8261

cond.false40:                                     ; preds = %if.end36
  br label %cond.end41, !dbg !8261

cond.end41:                                       ; preds = %cond.false40, %cond.true38
  %cond42 = phi %struct.VEC_tree_base* [ %base39, %cond.true38 ], [ null, %cond.false40 ], !dbg !8261
  %call43 = call %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond42), !dbg !8261
  store %union.tree_node* %call43, %union.tree_node** %prev_value, align 8, !dbg !8262
  %23 = load %union.tree_node*, %union.tree_node** %dest, align 8, !dbg !8263
  %24 = load %union.tree_node*, %union.tree_node** %prev_value, align 8, !dbg !8264
  call void @set_ssa_name_value(%union.tree_node* %23, %union.tree_node* %24), !dbg !8265
  br label %while.cond, !dbg !8226, !llvm.loop !8266

while.end:                                        ; preds = %if.then, %cond.end
  ret void, !dbg !8268
}

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @thread_across_edge(%union.gimple_statement_d*, %struct.edge_def*, i8 zeroext, %struct.VEC_tree_heap**, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @simplify_stmt_for_jump_threading(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %within_stmt) #0 !dbg !8269 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %within_stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8272, metadata !DIExpression()), !dbg !8273
  store %union.gimple_statement_d* %within_stmt, %union.gimple_statement_d** %within_stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %within_stmt.addr, metadata !8274, metadata !DIExpression()), !dbg !8275
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8276
  %call = call %union.tree_node* @lookup_avail_expr(%union.gimple_statement_d* %0, i8 zeroext 0), !dbg !8277
  ret %union.tree_node* %call, !dbg !8278
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_hash_elt_t_base_length(%struct.VEC_expr_hash_elt_t_base* %vec_) #0 !dbg !8279 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_base*, align 8
  store %struct.VEC_expr_hash_elt_t_base* %vec_, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_base** %vec_.addr, metadata !8284, metadata !DIExpression()), !dbg !8285
  %0 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !8285
  %tobool = icmp ne %struct.VEC_expr_hash_elt_t_base* %0, null, !dbg !8285
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8285

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !8285
  %num = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %1, i32 0, i32 0, !dbg !8285
  %2 = load i32, i32* %num, align 8, !dbg !8285
  br label %cond.end, !dbg !8285

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8285

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8285
  ret i32 %cond, !dbg !8285
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_hash_elt* @VEC_expr_hash_elt_t_base_pop(%struct.VEC_expr_hash_elt_t_base* %vec_) #0 !dbg !8286 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_hash_elt_t_base*, align 8
  %obj_ = alloca %struct.expr_hash_elt*, align 8
  store %struct.VEC_expr_hash_elt_t_base* %vec_, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_hash_elt_t_base** %vec_.addr, metadata !8289, metadata !DIExpression()), !dbg !8290
  call void @llvm.dbg.declare(metadata %struct.expr_hash_elt** %obj_, metadata !8291, metadata !DIExpression()), !dbg !8290
  %0 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !8290
  %num = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %0, i32 0, i32 0, !dbg !8290
  %1 = load i32, i32* %num, align 8, !dbg !8290
  %2 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !8290
  %vec = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %2, i32 0, i32 2, !dbg !8290
  %3 = load %struct.VEC_expr_hash_elt_t_base*, %struct.VEC_expr_hash_elt_t_base** %vec_.addr, align 8, !dbg !8290
  %num1 = getelementptr inbounds %struct.VEC_expr_hash_elt_t_base, %struct.VEC_expr_hash_elt_t_base* %3, i32 0, i32 0, !dbg !8290
  %4 = load i32, i32* %num1, align 8, !dbg !8290
  %dec = add i32 %4, -1, !dbg !8290
  store i32 %dec, i32* %num1, align 8, !dbg !8290
  %idxprom = zext i32 %dec to i64, !dbg !8290
  %arrayidx = getelementptr inbounds [1 x %struct.expr_hash_elt*], [1 x %struct.expr_hash_elt*]* %vec, i64 0, i64 %idxprom, !dbg !8290
  %5 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %arrayidx, align 8, !dbg !8290
  store %struct.expr_hash_elt* %5, %struct.expr_hash_elt** %obj_, align 8, !dbg !8290
  %6 = load %struct.expr_hash_elt*, %struct.expr_hash_elt** %obj_, align 8, !dbg !8290
  ret %struct.expr_hash_elt* %6, !dbg !8290
}

declare dso_local void @htab_clear_slot(%struct.htab*, i8**) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) #0 !dbg !8292 {
entry:
  %vec_.addr = alloca %struct.VEC_tree_base*, align 8
  %obj_ = alloca %union.tree_node*, align 8
  store %struct.VEC_tree_base* %vec_, %struct.VEC_tree_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_tree_base** %vec_.addr, metadata !8295, metadata !DIExpression()), !dbg !8296
  call void @llvm.dbg.declare(metadata %union.tree_node** %obj_, metadata !8297, metadata !DIExpression()), !dbg !8296
  %0 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8296
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %0, i32 0, i32 0, !dbg !8296
  %1 = load i32, i32* %num, align 8, !dbg !8296
  %2 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8296
  %vec = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %2, i32 0, i32 2, !dbg !8296
  %3 = load %struct.VEC_tree_base*, %struct.VEC_tree_base** %vec_.addr, align 8, !dbg !8296
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %3, i32 0, i32 0, !dbg !8296
  %4 = load i32, i32* %num1, align 8, !dbg !8296
  %dec = add i32 %4, -1, !dbg !8296
  store i32 %dec, i32* %num1, align 8, !dbg !8296
  %idxprom = zext i32 %dec to i64, !dbg !8296
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %vec, i64 0, i64 %idxprom, !dbg !8296
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8296
  store %union.tree_node* %5, %union.tree_node** %obj_, align 8, !dbg !8296
  %6 = load %union.tree_node*, %union.tree_node** %obj_, align 8, !dbg !8296
  ret %union.tree_node* %6, !dbg !8296
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) #0 !dbg !8298 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !8299, metadata !DIExpression()), !dbg !8300
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8301
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !8301
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8301

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !8302
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 0, !dbg !8303
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !8303
  br label %cond.end, !dbg !8301

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8301

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !8301
  ret %struct.gimple_seq_node_d* %cond, !dbg !8304
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local i64 @htab_size(%struct.htab*) #2

declare dso_local i64 @htab_elements(%struct.htab*) #2

declare dso_local double @htab_collisions(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_degenerate_phis_1(%struct.basic_block_def* %bb, %struct.bitmap_head_def* %interesting_names) #0 !dbg !8305 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %interesting_names.addr = alloca %struct.bitmap_head_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %son = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8308, metadata !DIExpression()), !dbg !8309
  store %struct.bitmap_head_def* %interesting_names, %struct.bitmap_head_def** %interesting_names.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %interesting_names.addr, metadata !8310, metadata !DIExpression()), !dbg !8311
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8312, metadata !DIExpression()), !dbg !8313
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %son, metadata !8314, metadata !DIExpression()), !dbg !8315
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8316
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %0), !dbg !8318
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8318
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8318
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !8318
  br label %for.cond, !dbg !8319

for.cond:                                         ; preds = %for.inc, %entry
  %call = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8320
  %tobool = icmp ne i8 %call, 0, !dbg !8322
  %lnot = xor i1 %tobool, true, !dbg !8322
  br i1 %lnot, label %for.body, label %for.end, !dbg !8323

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8324, metadata !DIExpression()), !dbg !8326
  %call1 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi), !dbg !8327
  store %union.gimple_statement_d* %call1, %union.gimple_statement_d** %phi, align 8, !dbg !8326
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8328
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8329
  call void @eliminate_const_or_copy(%union.gimple_statement_d* %3, %struct.bitmap_head_def* %4), !dbg !8330
  br label %for.inc, !dbg !8331

for.inc:                                          ; preds = %for.body
  call void @gsi_next(%struct.gimple_stmt_iterator* %gsi), !dbg !8332
  br label %for.cond, !dbg !8333, !llvm.loop !8334

for.end:                                          ; preds = %for.cond
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8336
  %call2 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %5), !dbg !8338
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %son, align 8, !dbg !8339
  br label %for.cond3, !dbg !8340

for.cond3:                                        ; preds = %for.inc6, %for.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8341
  %tobool4 = icmp ne %struct.basic_block_def* %6, null, !dbg !8343
  br i1 %tobool4, label %for.body5, label %for.end8, !dbg !8343

for.body5:                                        ; preds = %for.cond3
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8344
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8345
  call void @eliminate_degenerate_phis_1(%struct.basic_block_def* %7, %struct.bitmap_head_def* %8), !dbg !8346
  br label %for.inc6, !dbg !8346

for.inc6:                                         ; preds = %for.body5
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %son, align 8, !dbg !8347
  %call7 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %9), !dbg !8348
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %son, align 8, !dbg !8349
  br label %for.cond3, !dbg !8350, !llvm.loop !8351

for.end8:                                         ; preds = %for.cond3
  ret void, !dbg !8353
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @eliminate_const_or_copy(%union.gimple_statement_d* %stmt, %struct.bitmap_head_def* %interesting_names) #0 !dbg !8354 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %interesting_names.addr = alloca %struct.bitmap_head_def*, align 8
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  %version = alloca i32, align 4
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8357, metadata !DIExpression()), !dbg !8358
  store %struct.bitmap_head_def* %interesting_names, %struct.bitmap_head_def** %interesting_names.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %interesting_names.addr, metadata !8359, metadata !DIExpression()), !dbg !8360
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs, metadata !8361, metadata !DIExpression()), !dbg !8362
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8363
  %call = call %union.tree_node* @get_lhs_or_phi_result(%union.gimple_statement_d* %0), !dbg !8364
  store %union.tree_node* %call, %union.tree_node** %lhs, align 8, !dbg !8362
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs, metadata !8365, metadata !DIExpression()), !dbg !8366
  call void @llvm.dbg.declare(metadata i32* %version, metadata !8367, metadata !DIExpression()), !dbg !8368
  %1 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8369
  %ssa_name = bitcast %union.tree_node* %1 to %struct.tree_ssa_name*, !dbg !8369
  %version1 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 3, !dbg !8369
  %2 = load i32, i32* %version1, align 8, !dbg !8369
  store i32 %2, i32* %version, align 4, !dbg !8368
  %3 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8370
  %call2 = call zeroext i8 @has_zero_uses(%union.tree_node* %3), !dbg !8372
  %tobool = icmp ne i8 %call2, 0, !dbg !8372
  br i1 %tobool, label %if.then, label %if.end, !dbg !8373

if.then:                                          ; preds = %entry
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8374
  %5 = load i32, i32* %version, align 4, !dbg !8376
  %call3 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %4, i32 %5), !dbg !8377
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8378
  call void @remove_stmt_or_phi(%union.gimple_statement_d* %6), !dbg !8379
  br label %return, !dbg !8380

if.end:                                           ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8381
  %call4 = call %union.tree_node* @get_rhs_or_phi_arg(%union.gimple_statement_d* %7), !dbg !8382
  store %union.tree_node* %call4, %union.tree_node** %rhs, align 8, !dbg !8383
  %8 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8384
  %tobool5 = icmp ne %union.tree_node* %8, null, !dbg !8384
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !8386

if.then6:                                         ; preds = %if.end
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8387
  %10 = load i32, i32* %version, align 4, !dbg !8389
  %call7 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %9, i32 %10), !dbg !8390
  br label %return, !dbg !8391

if.end8:                                          ; preds = %if.end
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8392
  %12 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !8393
  %13 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !8394
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8395
  call void @propagate_rhs_into_lhs(%union.gimple_statement_d* %11, %union.tree_node* %12, %union.tree_node* %13, %struct.bitmap_head_def* %14), !dbg !8396
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8397
  %16 = load i32, i32* %version, align 4, !dbg !8398
  %call9 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %15, i32 %16), !dbg !8399
  br label %return, !dbg !8400

return:                                           ; preds = %if.end8, %if.then6, %if.then
  ret void, !dbg !8400
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_lhs_or_phi_result(%union.gimple_statement_d* %stmt) #0 !dbg !8401 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8402, metadata !DIExpression()), !dbg !8403
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8404
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8406
  %cmp = icmp eq i32 %call, 16, !dbg !8407
  br i1 %cmp, label %if.then, label %if.else, !dbg !8408

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8409
  %call1 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %1), !dbg !8410
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !8411
  br label %return, !dbg !8411

if.else:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8412
  %call2 = call zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %2), !dbg !8414
  %tobool = icmp ne i8 %call2, 0, !dbg !8414
  br i1 %tobool, label %if.then3, label %if.else5, !dbg !8415

if.then3:                                         ; preds = %if.else
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8416
  %call4 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3), !dbg !8417
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !8418
  br label %return, !dbg !8418

if.else5:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 2461, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8419
  br label %if.end

if.end:                                           ; preds = %if.else5
  br label %if.end6

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8420
  br label %return, !dbg !8420

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8421
  ret %union.tree_node* %4, !dbg !8421
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_zero_uses(%union.tree_node* %var) #0 !dbg !8422 {
entry:
  %retval = alloca i8, align 1
  %var.addr = alloca %union.tree_node*, align 8
  %ptr = alloca %struct.ssa_use_operand_d*, align 8
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8428, metadata !DIExpression()), !dbg !8429
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %ptr, metadata !8430, metadata !DIExpression()), !dbg !8434
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8435
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8435
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8435
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !8434
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !8436
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !8438
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !8439
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8439
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8440
  br i1 %cmp, label %if.then, label %if.end, !dbg !8441

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !8442
  br label %return, !dbg !8442

if.end:                                           ; preds = %entry
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !8443
  %tobool = icmp ne i32 %4, 0, !dbg !8443
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !8445

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !8446
  br label %return, !dbg !8446

if.end2:                                          ; preds = %if.end
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %ptr, align 8, !dbg !8447
  %call = call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* %5), !dbg !8448
  store i8 %call, i8* %retval, align 1, !dbg !8449
  br label %return, !dbg !8449

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !8450
  ret i8 %6, !dbg !8450
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_stmt_or_phi(%union.gimple_statement_d* %stmt) #0 !dbg !8451 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8452, metadata !DIExpression()), !dbg !8453
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8454, metadata !DIExpression()), !dbg !8455
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8456
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret %gsi, %union.gimple_statement_d* %0), !dbg !8457
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8458
  %call = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !8460
  %cmp = icmp eq i32 %call, 16, !dbg !8461
  br i1 %cmp, label %if.then, label %if.else, !dbg !8462

if.then:                                          ; preds = %entry
  call void @remove_phi_node(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !8463
  br label %if.end, !dbg !8463

if.else:                                          ; preds = %entry
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !8464
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8466
  call void @release_defs(%union.gimple_statement_d* %2), !dbg !8467
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !8468
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @get_rhs_or_phi_arg(%union.gimple_statement_d* %stmt) #0 !dbg !8469 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8470, metadata !DIExpression()), !dbg !8471
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8472
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !8474
  %cmp = icmp eq i32 %call, 16, !dbg !8475
  br i1 %cmp, label %if.then, label %if.else, !dbg !8476

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8477
  %call1 = call %union.tree_node* @degenerate_phi_result(%union.gimple_statement_d* %1), !dbg !8478
  store %union.tree_node* %call1, %union.tree_node** %retval, align 8, !dbg !8479
  br label %return, !dbg !8479

if.else:                                          ; preds = %entry
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8480
  %call2 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %2), !dbg !8482
  %tobool = icmp ne i8 %call2, 0, !dbg !8482
  br i1 %tobool, label %if.then3, label %if.else5, !dbg !8483

if.then3:                                         ; preds = %if.else
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8484
  %call4 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3), !dbg !8485
  store %union.tree_node* %call4, %union.tree_node** %retval, align 8, !dbg !8486
  br label %return, !dbg !8486

if.else5:                                         ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 2443, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8487
  br label %if.end

if.end:                                           ; preds = %if.else5
  br label %if.end6

if.end6:                                          ; preds = %if.end
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !8488
  br label %return, !dbg !8488

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !8489
  ret %union.tree_node* %4, !dbg !8489
}

; Function Attrs: noinline nounwind uwtable
define internal void @propagate_rhs_into_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs, %union.tree_node* %rhs, %struct.bitmap_head_def* %interesting_names) #0 !dbg !8490 {
entry:
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  %rhs.addr = alloca %union.tree_node*, align 8
  %interesting_names.addr = alloca %struct.bitmap_head_def*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %all = alloca i8, align 1
  %result = alloca %union.tree_node*, align 8
  %result155 = alloca %union.tree_node*, align 8
  %val = alloca %union.tree_node*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %te = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %psi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp207 = alloca %struct.gimple_stmt_iterator, align 8
  %phi = alloca %union.gimple_statement_d*, align 8
  %result214 = alloca %union.tree_node*, align 8
  %version216 = alloca i32, align 4
  %tmp228 = alloca %struct.gimple_stmt_iterator, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !8493, metadata !DIExpression()), !dbg !8494
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !8495, metadata !DIExpression()), !dbg !8496
  store %union.tree_node* %rhs, %union.tree_node** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %rhs.addr, metadata !8497, metadata !DIExpression()), !dbg !8498
  store %struct.bitmap_head_def* %interesting_names, %struct.bitmap_head_def** %interesting_names.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %interesting_names.addr, metadata !8499, metadata !DIExpression()), !dbg !8500
  %0 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8501
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !8501
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !8501
  %bf.load = load i64, i64* %1, align 8, !dbg !8501
  %bf.lshr = lshr i64 %bf.load, 22, !dbg !8501
  %bf.clear = and i64 %bf.lshr, 1, !dbg !8501
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !8501
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8501
  br i1 %tobool, label %if.end255, label %land.lhs.true, !dbg !8503

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8504
  %base1 = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !8504
  %3 = bitcast %struct.tree_base* %base1 to i64*, !dbg !8504
  %bf.load2 = load i64, i64* %3, align 8, !dbg !8504
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !8504
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !8504
  %cmp = icmp ne i32 %bf.cast4, 141, !dbg !8505
  br i1 %cmp, label %land.lhs.true11, label %lor.lhs.false, !dbg !8506

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8507
  %base5 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !8507
  %5 = bitcast %struct.tree_base* %base5 to i64*, !dbg !8507
  %bf.load6 = load i64, i64* %5, align 8, !dbg !8507
  %bf.lshr7 = lshr i64 %bf.load6, 22, !dbg !8507
  %bf.clear8 = and i64 %bf.lshr7, 1, !dbg !8507
  %bf.cast9 = trunc i64 %bf.clear8 to i32, !dbg !8507
  %tobool10 = icmp ne i32 %bf.cast9, 0, !dbg !8507
  br i1 %tobool10, label %if.end255, label %land.lhs.true11, !dbg !8508

land.lhs.true11:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8509
  %7 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8510
  %call = call zeroext i8 @may_propagate_copy(%union.tree_node* %6, %union.tree_node* %7), !dbg !8511
  %conv = zext i8 %call to i32, !dbg !8511
  %tobool12 = icmp ne i32 %conv, 0, !dbg !8511
  br i1 %tobool12, label %land.lhs.true13, label %if.end255, !dbg !8512

land.lhs.true13:                                  ; preds = %land.lhs.true11
  %8 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8513
  %call14 = call i32 @loop_depth_of_name(%union.tree_node* %8), !dbg !8514
  %9 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8515
  %call15 = call i32 @loop_depth_of_name(%union.tree_node* %9), !dbg !8516
  %cmp16 = icmp sge i32 %call14, %call15, !dbg !8517
  br i1 %cmp16, label %if.then, label %if.end255, !dbg !8518

if.then:                                          ; preds = %land.lhs.true13
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !8519, metadata !DIExpression()), !dbg !8521
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d* %iter, metadata !8522, metadata !DIExpression()), !dbg !8530
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %use_stmt, metadata !8531, metadata !DIExpression()), !dbg !8532
  call void @llvm.dbg.declare(metadata i8* %all, metadata !8533, metadata !DIExpression()), !dbg !8534
  store i8 1, i8* %all, align 1, !dbg !8534
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8535
  %tobool18 = icmp ne %struct._IO_FILE* %10, null, !dbg !8535
  br i1 %tobool18, label %land.lhs.true19, label %if.end, !dbg !8537

land.lhs.true19:                                  ; preds = %if.then
  %11 = load i32, i32* @dump_flags, align 4, !dbg !8538
  %and = and i32 %11, 8, !dbg !8539
  %tobool20 = icmp ne i32 %and, 0, !dbg !8539
  br i1 %tobool20, label %if.then21, label %if.end, !dbg !8540

if.then21:                                        ; preds = %land.lhs.true19
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8541
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0)), !dbg !8543
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8544
  %14 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8545
  %15 = load i32, i32* @dump_flags, align 4, !dbg !8546
  call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %14, i32 %15), !dbg !8547
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8548
  %17 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8549
  %base23 = bitcast %union.tree_node* %17 to %struct.tree_base*, !dbg !8549
  %18 = bitcast %struct.tree_base* %base23 to i64*, !dbg !8549
  %bf.load24 = load i64, i64* %18, align 8, !dbg !8549
  %bf.clear25 = and i64 %bf.load24, 65535, !dbg !8549
  %bf.cast26 = trunc i64 %bf.clear25 to i32, !dbg !8549
  %cmp27 = icmp ne i32 %bf.cast26, 141, !dbg !8550
  %19 = zext i1 %cmp27 to i64, !dbg !8549
  %cond = select i1 %cmp27, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i64 0, i64 0), !dbg !8549
  %call29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* %cond), !dbg !8551
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8552
  %21 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8553
  %22 = load i32, i32* @dump_flags, align 4, !dbg !8554
  call void @print_generic_expr(%struct._IO_FILE* %20, %union.tree_node* %21, i32 %22), !dbg !8555
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8556
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34, i64 0, i64 0)), !dbg !8557
  br label %if.end, !dbg !8558

if.end:                                           ; preds = %if.then21, %land.lhs.true19, %if.then
  %24 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8559
  %call31 = call %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %iter, %union.tree_node* %24), !dbg !8559
  store %union.gimple_statement_d* %call31, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8559
  br label %for.cond, !dbg !8559

for.cond:                                         ; preds = %for.inc243, %if.end
  %call32 = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !8561
  %tobool33 = icmp ne i8 %call32, 0, !dbg !8561
  %lnot = xor i1 %tobool33, true, !dbg !8561
  br i1 %lnot, label %for.body, label %for.end245, !dbg !8559

for.body:                                         ; preds = %for.cond
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8563
  %call34 = call zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %25), !dbg !8566
  %tobool35 = icmp ne i8 %call34, 0, !dbg !8566
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !8567

if.then36:                                        ; preds = %for.body
  br label %for.inc243, !dbg !8568

if.end37:                                         ; preds = %for.body
  %26 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8569
  %call38 = call i32 @gimple_code(%union.gimple_statement_d* %26), !dbg !8571
  %cmp39 = icmp eq i32 %call38, 7, !dbg !8572
  br i1 %cmp39, label %land.lhs.true41, label %if.end45, !dbg !8573

land.lhs.true41:                                  ; preds = %if.end37
  %27 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8574
  %call42 = call zeroext i8 @may_propagate_copy_into_asm(%union.tree_node* %27), !dbg !8575
  %tobool43 = icmp ne i8 %call42, 0, !dbg !8575
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !8576

if.then44:                                        ; preds = %land.lhs.true41
  store i8 0, i8* %all, align 1, !dbg !8577
  br label %for.inc243, !dbg !8579

if.end45:                                         ; preds = %land.lhs.true41, %if.end37
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8580
  %tobool46 = icmp ne %struct._IO_FILE* %28, null, !dbg !8580
  br i1 %tobool46, label %land.lhs.true47, label %if.end52, !dbg !8582

land.lhs.true47:                                  ; preds = %if.end45
  %29 = load i32, i32* @dump_flags, align 4, !dbg !8583
  %and48 = and i32 %29, 8, !dbg !8584
  %tobool49 = icmp ne i32 %and48, 0, !dbg !8584
  br i1 %tobool49, label %if.then50, label %if.end52, !dbg !8585

if.then50:                                        ; preds = %land.lhs.true47
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8586
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.45, i64 0, i64 0)), !dbg !8588
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8589
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8590
  %33 = load i32, i32* @dump_flags, align 4, !dbg !8591
  call void @print_gimple_stmt(%struct._IO_FILE* %31, %union.gimple_statement_d* %32, i32 0, i32 %33), !dbg !8592
  br label %if.end52, !dbg !8593

if.end52:                                         ; preds = %if.then50, %land.lhs.true47, %if.end45
  %call53 = call %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !8594
  store %struct.ssa_use_operand_d* %call53, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8594
  br label %for.cond54, !dbg !8594

for.cond54:                                       ; preds = %for.inc, %if.end52
  %call55 = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %iter), !dbg !8596
  %tobool56 = icmp ne i8 %call55, 0, !dbg !8596
  %lnot57 = xor i1 %tobool56, true, !dbg !8596
  br i1 %lnot57, label %for.body58, label %for.end, !dbg !8594

for.body58:                                       ; preds = %for.cond54
  %34 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8598
  %35 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8599
  call void @propagate_value(%struct.ssa_use_operand_d* %34, %union.tree_node* %35), !dbg !8600
  br label %for.inc, !dbg !8600

for.inc:                                          ; preds = %for.body58
  %call59 = call %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !8596
  store %struct.ssa_use_operand_d* %call59, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !8596
  br label %for.cond54, !dbg !8596, !llvm.loop !8601

for.end:                                          ; preds = %for.cond54
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8603
  %call60 = call i32 @gimple_code(%union.gimple_statement_d* %36), !dbg !8605
  %cmp61 = icmp eq i32 %call60, 16, !dbg !8606
  br i1 %cmp61, label %if.then78, label %lor.lhs.false63, !dbg !8607

lor.lhs.false63:                                  ; preds = %for.end
  %37 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8608
  %call64 = call zeroext i8 @is_gimple_reg(%union.tree_node* %37), !dbg !8609
  %tobool65 = icmp ne i8 %call64, 0, !dbg !8609
  br i1 %tobool65, label %if.end94, label %land.lhs.true66, !dbg !8610

land.lhs.true66:                                  ; preds = %lor.lhs.false63
  %38 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8611
  %base67 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !8611
  %39 = bitcast %struct.tree_base* %base67 to i64*, !dbg !8611
  %bf.load68 = load i64, i64* %39, align 8, !dbg !8611
  %bf.clear69 = and i64 %bf.load68, 65535, !dbg !8611
  %bf.cast70 = trunc i64 %bf.clear69 to i32, !dbg !8611
  %cmp71 = icmp eq i32 %bf.cast70, 141, !dbg !8612
  br i1 %cmp71, label %land.lhs.true73, label %if.end94, !dbg !8613

land.lhs.true73:                                  ; preds = %land.lhs.true66
  %40 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8614
  %ssa_name = bitcast %union.tree_node* %40 to %struct.tree_ssa_name*, !dbg !8614
  %var = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 1, !dbg !8614
  %41 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !8614
  %42 = load %union.tree_node*, %union.tree_node** %rhs.addr, align 8, !dbg !8615
  %ssa_name74 = bitcast %union.tree_node* %42 to %struct.tree_ssa_name*, !dbg !8615
  %var75 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name74, i32 0, i32 1, !dbg !8615
  %43 = load %union.tree_node*, %union.tree_node** %var75, align 8, !dbg !8615
  %cmp76 = icmp eq %union.tree_node* %41, %43, !dbg !8616
  br i1 %cmp76, label %if.then78, label %if.end94, !dbg !8617

if.then78:                                        ; preds = %land.lhs.true73, %for.end
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8618
  %tobool79 = icmp ne %struct._IO_FILE* %44, null, !dbg !8618
  br i1 %tobool79, label %land.lhs.true80, label %if.end85, !dbg !8621

land.lhs.true80:                                  ; preds = %if.then78
  %45 = load i32, i32* @dump_flags, align 4, !dbg !8622
  %and81 = and i32 %45, 8, !dbg !8623
  %tobool82 = icmp ne i32 %and81, 0, !dbg !8623
  br i1 %tobool82, label %if.then83, label %if.end85, !dbg !8624

if.then83:                                        ; preds = %land.lhs.true80
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8625
  %call84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.46, i64 0, i64 0)), !dbg !8627
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8628
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8629
  %49 = load i32, i32* @dump_flags, align 4, !dbg !8630
  call void @print_gimple_stmt(%struct._IO_FILE* %47, %union.gimple_statement_d* %48, i32 0, i32 %49), !dbg !8631
  br label %if.end85, !dbg !8632

if.end85:                                         ; preds = %if.then83, %land.lhs.true80, %if.then78
  %50 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8633
  %call86 = call i32 @gimple_code(%union.gimple_statement_d* %50), !dbg !8635
  %cmp87 = icmp eq i32 %call86, 16, !dbg !8636
  br i1 %cmp87, label %if.then89, label %if.end93, !dbg !8637

if.then89:                                        ; preds = %if.end85
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !8638, metadata !DIExpression()), !dbg !8640
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8641
  %call90 = call %union.tree_node* @get_lhs_or_phi_result(%union.gimple_statement_d* %51), !dbg !8642
  store %union.tree_node* %call90, %union.tree_node** %result, align 8, !dbg !8640
  %52 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8643
  %53 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !8644
  %ssa_name91 = bitcast %union.tree_node* %53 to %struct.tree_ssa_name*, !dbg !8644
  %version = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name91, i32 0, i32 3, !dbg !8644
  %54 = load i32, i32* %version, align 8, !dbg !8644
  %call92 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %52, i32 %54), !dbg !8645
  br label %if.end93, !dbg !8646

if.end93:                                         ; preds = %if.then89, %if.end85
  br label %for.inc243, !dbg !8647

if.end94:                                         ; preds = %land.lhs.true73, %land.lhs.true66, %lor.lhs.false63
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8648
  %call95 = call zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d* %55), !dbg !8649
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8650
  call void @update_stmt(%union.gimple_statement_d* %56), !dbg !8651
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8652
  %tobool96 = icmp ne %struct._IO_FILE* %57, null, !dbg !8652
  br i1 %tobool96, label %land.lhs.true97, label %if.end102, !dbg !8654

land.lhs.true97:                                  ; preds = %if.end94
  %58 = load i32, i32* @dump_flags, align 4, !dbg !8655
  %and98 = and i32 %58, 8, !dbg !8656
  %tobool99 = icmp ne i32 %and98, 0, !dbg !8656
  br i1 %tobool99, label %if.then100, label %if.end102, !dbg !8657

if.then100:                                       ; preds = %land.lhs.true97
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8658
  %call101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.46, i64 0, i64 0)), !dbg !8660
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8661
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8662
  %62 = load i32, i32* @dump_flags, align 4, !dbg !8663
  call void @print_gimple_stmt(%struct._IO_FILE* %60, %union.gimple_statement_d* %61, i32 0, i32 %62), !dbg !8664
  br label %if.end102, !dbg !8665

if.end102:                                        ; preds = %if.then100, %land.lhs.true97, %if.end94
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8666
  %call103 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %63), !dbg !8668
  %conv104 = zext i8 %call103 to i32, !dbg !8668
  %tobool105 = icmp ne i32 %conv104, 0, !dbg !8668
  br i1 %tobool105, label %land.lhs.true106, label %if.end116, !dbg !8669

land.lhs.true106:                                 ; preds = %if.end102
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8670
  %call107 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %64), !dbg !8670
  %base108 = bitcast %union.tree_node* %call107 to %struct.tree_base*, !dbg !8670
  %65 = bitcast %struct.tree_base* %base108 to i64*, !dbg !8670
  %bf.load109 = load i64, i64* %65, align 8, !dbg !8670
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !8670
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !8670
  %cmp112 = icmp eq i32 %bf.cast111, 121, !dbg !8671
  br i1 %cmp112, label %if.then114, label %if.end116, !dbg !8672

if.then114:                                       ; preds = %land.lhs.true106
  %66 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8673
  %call115 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %66), !dbg !8674
  call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %call115), !dbg !8675
  br label %if.end116, !dbg !8675

if.end116:                                        ; preds = %if.then114, %land.lhs.true106, %if.end102
  %67 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8676
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8678
  %call117 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %67, %union.gimple_statement_d* %68), !dbg !8679
  %tobool118 = icmp ne i8 %call117, 0, !dbg !8679
  br i1 %tobool118, label %if.then119, label %if.end129, !dbg !8680

if.then119:                                       ; preds = %if.end116
  %69 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_eh_cleanup, align 8, !dbg !8681
  %70 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8683
  %call120 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %70), !dbg !8684
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call120, i32 0, i32 9, !dbg !8685
  %71 = load i32, i32* %index, align 8, !dbg !8685
  %call121 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %69, i32 %71), !dbg !8686
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8687
  %tobool122 = icmp ne %struct._IO_FILE* %72, null, !dbg !8687
  br i1 %tobool122, label %land.lhs.true123, label %if.end128, !dbg !8689

land.lhs.true123:                                 ; preds = %if.then119
  %73 = load i32, i32* @dump_flags, align 4, !dbg !8690
  %and124 = and i32 %73, 8, !dbg !8691
  %tobool125 = icmp ne i32 %and124, 0, !dbg !8691
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !8692

if.then126:                                       ; preds = %land.lhs.true123
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8693
  %call127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.27, i64 0, i64 0)), !dbg !8694
  br label %if.end128, !dbg !8694

if.end128:                                        ; preds = %if.then126, %land.lhs.true123, %if.then119
  br label %if.end129, !dbg !8695

if.end129:                                        ; preds = %if.end128, %if.end116
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8696
  %call130 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %75), !dbg !8698
  %conv131 = zext i8 %call130 to i32, !dbg !8698
  %tobool132 = icmp ne i32 %conv131, 0, !dbg !8698
  br i1 %tobool132, label %land.lhs.true133, label %if.else, !dbg !8699

land.lhs.true133:                                 ; preds = %if.end129
  %76 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8700
  %call134 = call %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %76), !dbg !8700
  %base135 = bitcast %union.tree_node* %call134 to %struct.tree_base*, !dbg !8700
  %77 = bitcast %struct.tree_base* %base135 to i64*, !dbg !8700
  %bf.load136 = load i64, i64* %77, align 8, !dbg !8700
  %bf.clear137 = and i64 %bf.load136, 65535, !dbg !8700
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !8700
  %cmp139 = icmp eq i32 %bf.cast138, 141, !dbg !8701
  br i1 %cmp139, label %land.lhs.true141, label %if.else, !dbg !8702

land.lhs.true141:                                 ; preds = %land.lhs.true133
  %78 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8703
  %call142 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %78), !dbg !8703
  %base143 = bitcast %union.tree_node* %call142 to %struct.tree_base*, !dbg !8703
  %79 = bitcast %struct.tree_base* %base143 to i64*, !dbg !8703
  %bf.load144 = load i64, i64* %79, align 8, !dbg !8703
  %bf.clear145 = and i64 %bf.load144, 65535, !dbg !8703
  %bf.cast146 = trunc i64 %bf.clear145 to i32, !dbg !8703
  %cmp147 = icmp eq i32 %bf.cast146, 141, !dbg !8704
  br i1 %cmp147, label %if.then154, label %lor.lhs.false149, !dbg !8705

lor.lhs.false149:                                 ; preds = %land.lhs.true141
  %80 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8706
  %call150 = call %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %80), !dbg !8707
  %call151 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call150), !dbg !8708
  %conv152 = zext i8 %call151 to i32, !dbg !8708
  %tobool153 = icmp ne i32 %conv152, 0, !dbg !8708
  br i1 %tobool153, label %if.then154, label %if.else, !dbg !8709

if.then154:                                       ; preds = %lor.lhs.false149, %land.lhs.true141
  call void @llvm.dbg.declare(metadata %union.tree_node** %result155, metadata !8710, metadata !DIExpression()), !dbg !8712
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8713
  %call156 = call %union.tree_node* @get_lhs_or_phi_result(%union.gimple_statement_d* %81), !dbg !8714
  store %union.tree_node* %call156, %union.tree_node** %result155, align 8, !dbg !8712
  %82 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8715
  %83 = load %union.tree_node*, %union.tree_node** %result155, align 8, !dbg !8716
  %ssa_name157 = bitcast %union.tree_node* %83 to %struct.tree_ssa_name*, !dbg !8716
  %version158 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name157, i32 0, i32 3, !dbg !8716
  %84 = load i32, i32* %version158, align 8, !dbg !8716
  %call159 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %82, i32 %84), !dbg !8717
  br label %if.end242, !dbg !8718

if.else:                                          ; preds = %lor.lhs.false149, %land.lhs.true133, %if.end129
  %85 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8719
  %call160 = call i32 @gimple_code(%union.gimple_statement_d* %85), !dbg !8721
  %cmp161 = icmp eq i32 %call160, 1, !dbg !8722
  br i1 %cmp161, label %if.then171, label %lor.lhs.false163, !dbg !8723

lor.lhs.false163:                                 ; preds = %if.else
  %86 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8724
  %call164 = call i32 @gimple_code(%union.gimple_statement_d* %86), !dbg !8725
  %cmp165 = icmp eq i32 %call164, 5, !dbg !8726
  br i1 %cmp165, label %if.then171, label %lor.lhs.false167, !dbg !8727

lor.lhs.false167:                                 ; preds = %lor.lhs.false163
  %87 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8728
  %call168 = call i32 @gimple_code(%union.gimple_statement_d* %87), !dbg !8729
  %cmp169 = icmp eq i32 %call168, 3, !dbg !8730
  br i1 %cmp169, label %if.then171, label %if.end241, !dbg !8731

if.then171:                                       ; preds = %lor.lhs.false167, %lor.lhs.false163, %if.else
  call void @llvm.dbg.declare(metadata %union.tree_node** %val, metadata !8732, metadata !DIExpression()), !dbg !8734
  %88 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8735
  %call172 = call i32 @gimple_code(%union.gimple_statement_d* %88), !dbg !8737
  %cmp173 = icmp eq i32 %call172, 1, !dbg !8738
  br i1 %cmp173, label %if.then175, label %if.else181, !dbg !8739

if.then175:                                       ; preds = %if.then171
  %89 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8740
  %call176 = call i32 @gimple_location(%union.gimple_statement_d* %89), !dbg !8741
  %90 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8742
  %call177 = call i32 @gimple_cond_code(%union.gimple_statement_d* %90), !dbg !8743
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8744
  %92 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8745
  %call178 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %92), !dbg !8746
  %93 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8747
  %call179 = call %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %93), !dbg !8748
  %call180 = call %union.tree_node* @fold_binary_loc(i32 %call176, i32 %call177, %union.tree_node* %91, %union.tree_node* %call178, %union.tree_node* %call179), !dbg !8749
  store %union.tree_node* %call180, %union.tree_node** %val, align 8, !dbg !8750
  br label %if.end190, !dbg !8751

if.else181:                                       ; preds = %if.then171
  %94 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8752
  %call182 = call i32 @gimple_code(%union.gimple_statement_d* %94), !dbg !8754
  %cmp183 = icmp eq i32 %call182, 5, !dbg !8755
  br i1 %cmp183, label %if.then185, label %if.else187, !dbg !8756

if.then185:                                       ; preds = %if.else181
  %95 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8757
  %call186 = call %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %95), !dbg !8758
  store %union.tree_node* %call186, %union.tree_node** %val, align 8, !dbg !8759
  br label %if.end189, !dbg !8760

if.else187:                                       ; preds = %if.else181
  %96 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8761
  %call188 = call %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %96), !dbg !8762
  store %union.tree_node* %call188, %union.tree_node** %val, align 8, !dbg !8763
  br label %if.end189

if.end189:                                        ; preds = %if.else187, %if.then185
  br label %if.end190

if.end190:                                        ; preds = %if.end189, %if.then175
  %97 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8764
  %tobool191 = icmp ne %union.tree_node* %97, null, !dbg !8764
  br i1 %tobool191, label %land.lhs.true192, label %if.end240, !dbg !8766

land.lhs.true192:                                 ; preds = %if.end190
  %98 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8767
  %call193 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %98), !dbg !8768
  %conv194 = zext i8 %call193 to i32, !dbg !8768
  %tobool195 = icmp ne i32 %conv194, 0, !dbg !8768
  br i1 %tobool195, label %if.then196, label %if.end240, !dbg !8769

if.then196:                                       ; preds = %land.lhs.true192
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8770, metadata !DIExpression()), !dbg !8772
  %99 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8773
  %call197 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %99), !dbg !8774
  store %struct.basic_block_def* %call197, %struct.basic_block_def** %bb, align 8, !dbg !8772
  call void @llvm.dbg.declare(metadata %struct.edge_def** %te, metadata !8775, metadata !DIExpression()), !dbg !8776
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8777
  %101 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !8778
  %call198 = call %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %100, %union.tree_node* %101), !dbg !8779
  store %struct.edge_def* %call198, %struct.edge_def** %te, align 8, !dbg !8776
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8780, metadata !DIExpression()), !dbg !8781
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8782, metadata !DIExpression()), !dbg !8783
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8784, metadata !DIExpression()), !dbg !8785
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %psi, metadata !8786, metadata !DIExpression()), !dbg !8787
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8788
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 1, !dbg !8788
  %call199 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8788
  %103 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8788
  %104 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %103, i32 0, i32 0, !dbg !8788
  %105 = extractvalue { i32, %struct.VEC_edge_gc** } %call199, 0, !dbg !8788
  store i32 %105, i32* %104, align 8, !dbg !8788
  %106 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %103, i32 0, i32 1, !dbg !8788
  %107 = extractvalue { i32, %struct.VEC_edge_gc** } %call199, 1, !dbg !8788
  store %struct.VEC_edge_gc** %107, %struct.VEC_edge_gc*** %106, align 8, !dbg !8788
  %108 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8788
  %109 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8788
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 16, i1 false), !dbg !8788
  br label %for.cond200, !dbg !8790

for.cond200:                                      ; preds = %if.end226, %if.then196
  %110 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8791
  %111 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %110, i32 0, i32 0, !dbg !8791
  %112 = load i32, i32* %111, align 8, !dbg !8791
  %113 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %110, i32 0, i32 1, !dbg !8791
  %114 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %113, align 8, !dbg !8791
  %call201 = call %struct.edge_def* @ei_safe_edge(i32 %112, %struct.VEC_edge_gc** %114), !dbg !8791
  store %struct.edge_def* %call201, %struct.edge_def** %e, align 8, !dbg !8793
  %tobool202 = icmp ne %struct.edge_def* %call201, null, !dbg !8794
  br i1 %tobool202, label %for.body203, label %for.end227, !dbg !8794

for.body203:                                      ; preds = %for.cond200
  %115 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8795
  %116 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8798
  %cmp204 = icmp ne %struct.edge_def* %115, %116, !dbg !8799
  br i1 %cmp204, label %if.then206, label %if.else225, !dbg !8800

if.then206:                                       ; preds = %for.body203
  %117 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8801
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %117, i32 0, i32 1, !dbg !8804
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8804
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* sret %tmp207, %struct.basic_block_def* %118), !dbg !8805
  %119 = bitcast %struct.gimple_stmt_iterator* %psi to i8*, !dbg !8805
  %120 = bitcast %struct.gimple_stmt_iterator* %tmp207 to i8*, !dbg !8805
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 24, i1 false), !dbg !8805
  br label %for.cond208, !dbg !8806

for.cond208:                                      ; preds = %for.inc220, %if.then206
  %call209 = call zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8807
  %tobool210 = icmp ne i8 %call209, 0, !dbg !8809
  %lnot211 = xor i1 %tobool210, true, !dbg !8809
  br i1 %lnot211, label %for.body212, label %for.end221, !dbg !8810

for.body212:                                      ; preds = %for.cond208
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi, metadata !8811, metadata !DIExpression()), !dbg !8813
  %call213 = call %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %psi), !dbg !8814
  store %union.gimple_statement_d* %call213, %union.gimple_statement_d** %phi, align 8, !dbg !8813
  call void @llvm.dbg.declare(metadata %union.tree_node** %result214, metadata !8815, metadata !DIExpression()), !dbg !8816
  %121 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi, align 8, !dbg !8817
  %call215 = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %121), !dbg !8818
  store %union.tree_node* %call215, %union.tree_node** %result214, align 8, !dbg !8816
  call void @llvm.dbg.declare(metadata i32* %version216, metadata !8819, metadata !DIExpression()), !dbg !8820
  %122 = load %union.tree_node*, %union.tree_node** %result214, align 8, !dbg !8821
  %ssa_name217 = bitcast %union.tree_node* %122 to %struct.tree_ssa_name*, !dbg !8821
  %version218 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name217, i32 0, i32 3, !dbg !8821
  %123 = load i32, i32* %version218, align 8, !dbg !8821
  store i32 %123, i32* %version216, align 4, !dbg !8820
  %124 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %interesting_names.addr, align 8, !dbg !8822
  %125 = load i32, i32* %version216, align 4, !dbg !8823
  %call219 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %124, i32 %125), !dbg !8824
  br label %for.inc220, !dbg !8825

for.inc220:                                       ; preds = %for.body212
  call void @gsi_next(%struct.gimple_stmt_iterator* %psi), !dbg !8826
  br label %for.cond208, !dbg !8827, !llvm.loop !8828

for.end221:                                       ; preds = %for.cond208
  %126 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8830
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %126, i32 0, i32 8, !dbg !8831
  %127 = load i32, i32* %probability, align 4, !dbg !8831
  %128 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8832
  %probability222 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %128, i32 0, i32 8, !dbg !8833
  %129 = load i32, i32* %probability222, align 4, !dbg !8834
  %add = add nsw i32 %129, %127, !dbg !8834
  store i32 %add, i32* %probability222, align 4, !dbg !8834
  %130 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8835
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %130, i32 0, i32 9, !dbg !8836
  %131 = load i64, i64* %count, align 8, !dbg !8836
  %132 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8837
  %count223 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %132, i32 0, i32 9, !dbg !8838
  %133 = load i64, i64* %count223, align 8, !dbg !8839
  %add224 = add nsw i64 %133, %131, !dbg !8839
  store i64 %add224, i64* %count223, align 8, !dbg !8839
  %134 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8840
  call void @remove_edge(%struct.edge_def* %134), !dbg !8841
  store i8 1, i8* @cfg_altered, align 1, !dbg !8842
  br label %if.end226, !dbg !8843

if.else225:                                       ; preds = %for.body203
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8844
  br label %if.end226

if.end226:                                        ; preds = %if.else225, %for.end221
  br label %for.cond200, !dbg !8845, !llvm.loop !8846

for.end227:                                       ; preds = %for.cond200
  %135 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8848
  %call229 = call %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %135), !dbg !8849
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp228, %struct.basic_block_def* %call229), !dbg !8850
  %136 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8850
  %137 = bitcast %struct.gimple_stmt_iterator* %tmp228 to i8*, !dbg !8850
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 8 %137, i64 24, i1 false), !dbg !8850
  call void @gsi_remove(%struct.gimple_stmt_iterator* %gsi, i8 zeroext 1), !dbg !8851
  %138 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8852
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %138, i32 0, i32 7, !dbg !8853
  %139 = load i32, i32* %flags, align 8, !dbg !8854
  %and230 = and i32 %139, -3073, !dbg !8854
  store i32 %and230, i32* %flags, align 8, !dbg !8854
  %140 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8855
  %flags231 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %140, i32 0, i32 7, !dbg !8856
  %141 = load i32, i32* %flags231, align 8, !dbg !8857
  %and232 = and i32 %141, -3, !dbg !8857
  store i32 %and232, i32* %flags231, align 8, !dbg !8857
  %142 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8858
  %flags233 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %142, i32 0, i32 7, !dbg !8859
  %143 = load i32, i32* %flags233, align 8, !dbg !8860
  %or = or i32 %143, 1, !dbg !8860
  store i32 %or, i32* %flags233, align 8, !dbg !8860
  %144 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8861
  %probability234 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %144, i32 0, i32 8, !dbg !8863
  %145 = load i32, i32* %probability234, align 4, !dbg !8863
  %cmp235 = icmp sgt i32 %145, 10000, !dbg !8864
  br i1 %cmp235, label %if.then237, label %if.end239, !dbg !8865

if.then237:                                       ; preds = %for.end227
  %146 = load %struct.edge_def*, %struct.edge_def** %te, align 8, !dbg !8866
  %probability238 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %146, i32 0, i32 8, !dbg !8867
  store i32 10000, i32* %probability238, align 4, !dbg !8868
  br label %if.end239, !dbg !8866

if.end239:                                        ; preds = %if.then237, %for.end227
  br label %if.end240, !dbg !8869

if.end240:                                        ; preds = %if.end239, %land.lhs.true192, %if.end190
  br label %if.end241, !dbg !8870

if.end241:                                        ; preds = %if.end240, %lor.lhs.false167
  br label %if.end242

if.end242:                                        ; preds = %if.end241, %if.then154
  br label %for.inc243, !dbg !8871

for.inc243:                                       ; preds = %if.end242, %if.end93, %if.then44, %if.then36
  %call244 = call %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %iter), !dbg !8561
  store %union.gimple_statement_d* %call244, %union.gimple_statement_d** %use_stmt, align 8, !dbg !8561
  br label %for.cond, !dbg !8561, !llvm.loop !8872

for.end245:                                       ; preds = %for.cond
  %147 = load i8, i8* %all, align 1, !dbg !8874
  %tobool246 = icmp ne i8 %147, 0, !dbg !8874
  br i1 %tobool246, label %lor.lhs.false247, label %cond.false, !dbg !8874

lor.lhs.false247:                                 ; preds = %for.end245
  %148 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !8874
  %call248 = call zeroext i8 @has_zero_uses(%union.tree_node* %148), !dbg !8874
  %conv249 = zext i8 %call248 to i32, !dbg !8874
  %tobool250 = icmp ne i32 %conv249, 0, !dbg !8874
  br i1 %tobool250, label %cond.false, label %cond.true, !dbg !8874

cond.true:                                        ; preds = %lor.lhs.false247
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9, i64 0, i64 0), i32 2690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8874
  br label %cond.end, !dbg !8874

cond.false:                                       ; preds = %lor.lhs.false247, %for.end245
  br label %cond.end, !dbg !8874

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond251 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8874
  %149 = load i8, i8* %all, align 1, !dbg !8875
  %tobool252 = icmp ne i8 %149, 0, !dbg !8875
  br i1 %tobool252, label %if.then253, label %if.end254, !dbg !8877

if.then253:                                       ; preds = %cond.end
  %150 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !8878
  call void @remove_stmt_or_phi(%union.gimple_statement_d* %150), !dbg !8879
  br label %if.end254, !dbg !8879

if.end254:                                        ; preds = %if.then253, %cond.end
  br label %if.end255, !dbg !8880

if.end255:                                        ; preds = %if.end254, %land.lhs.true13, %land.lhs.true11, %lor.lhs.false, %entry
  ret void, !dbg !8881
}

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) #2

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) #2

declare dso_local void @remove_phi_node(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) #2

declare dso_local void @release_defs(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) #0 !dbg !8882 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %var.addr = alloca %union.tree_node*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8886, metadata !DIExpression()), !dbg !8887
  store %union.tree_node* %var, %union.tree_node** %var.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %var.addr, metadata !8888, metadata !DIExpression()), !dbg !8889
  %0 = load %union.tree_node*, %union.tree_node** %var.addr, align 8, !dbg !8890
  %ssa_name = bitcast %union.tree_node* %0 to %struct.tree_ssa_name*, !dbg !8890
  %imm_uses = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %ssa_name, i32 0, i32 5, !dbg !8890
  %1 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8891
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %1, i32 0, i32 1, !dbg !8892
  store %struct.ssa_use_operand_d* %imm_uses, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8893
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8894
  %end_p1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8895
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p1, align 8, !dbg !8895
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i32 0, i32 1, !dbg !8896
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8896
  %5 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8897
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %5, i32 0, i32 0, !dbg !8898
  store %struct.ssa_use_operand_d* %4, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8899
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8900
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 3, !dbg !8901
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8902
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8903
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 2, !dbg !8904
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !8905
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !8906
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8907
  %iter_node2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 2, !dbg !8908
  %next3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node2, i32 0, i32 1, !dbg !8909
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !8910
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8911
  %iter_node4 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %9, i32 0, i32 2, !dbg !8912
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node4, i32 0, i32 2, !dbg !8913
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !8914
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !8915
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8916
  %iter_node5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 2, !dbg !8917
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node5, i32 0, i32 3, !dbg !8918
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !8919
  %11 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8920
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %11), !dbg !8922
  %tobool = icmp ne i8 %call, 0, !dbg !8922
  br i1 %tobool, label %if.then, label %if.end, !dbg !8923

if.then:                                          ; preds = %entry
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !8924
  br label %return, !dbg !8924

if.end:                                           ; preds = %entry
  %12 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8925
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %12, i32 0, i32 0, !dbg !8926
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !8926
  %14 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8927
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %13, %struct.immediate_use_iterator_d* %14), !dbg !8928
  %15 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8929
  %imm_use7 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %15, i32 0, i32 0, !dbg !8929
  %16 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use7, align 8, !dbg !8929
  %loc8 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %16, i32 0, i32 2, !dbg !8929
  %stmt9 = bitcast %union.anon* %loc8 to %union.gimple_statement_d**, !dbg !8929
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !8929
  store %union.gimple_statement_d* %17, %union.gimple_statement_d** %retval, align 8, !dbg !8930
  br label %return, !dbg !8930

return:                                           ; preds = %if.end, %if.then
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !8931
  ret %union.gimple_statement_d* %18, !dbg !8931
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8932 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8937, metadata !DIExpression()), !dbg !8938
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8939
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8940
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8940
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8941
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 1, !dbg !8942
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !8942
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %3, !dbg !8943
  %conv = zext i1 %cmp to i32, !dbg !8943
  %conv1 = trunc i32 %conv to i8, !dbg !8944
  ret i8 %conv1, !dbg !8945
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) #0 !dbg !8946 {
entry:
  %retval = alloca i8, align 1
  %s.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %s, %union.gimple_statement_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %s.addr, metadata !8947, metadata !DIExpression()), !dbg !8948
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8949
  %call = call zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %0), !dbg !8951
  %tobool = icmp ne i8 %call, 0, !dbg !8951
  br i1 %tobool, label %if.then, label %if.end, !dbg !8952

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %s.addr, align 8, !dbg !8953
  %gsbase = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_base*, !dbg !8954
  %2 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !8955
  %bf.load = load i32, i32* %2, align 8, !dbg !8955
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8955
  %cmp = icmp eq i32 %bf.lshr, 0, !dbg !8956
  %conv = zext i1 %cmp to i32, !dbg !8956
  %conv1 = trunc i32 %conv to i8, !dbg !8953
  store i8 %conv1, i8* %retval, align 1, !dbg !8957
  br label %return, !dbg !8957

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !8958
  br label %return, !dbg !8958

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !8959
  ret i8 %3, !dbg !8959
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8960 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8963, metadata !DIExpression()), !dbg !8964
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8965
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8966
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8966
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 1, !dbg !8967
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !8967
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8968
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %3, i32 0, i32 3, !dbg !8969
  store %struct.ssa_use_operand_d* %2, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8970
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8971
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8972
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8972
  ret %struct.ssa_use_operand_d* %5, !dbg !8973
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8974 {
entry:
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8975, metadata !DIExpression()), !dbg !8976
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8977
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 0, !dbg !8978
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8978
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8979
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 2, !dbg !8980
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, %iter_node, !dbg !8981
  %conv = zext i1 %cmp to i32, !dbg !8981
  %conv1 = trunc i32 %conv to i8, !dbg !8982
  ret i8 %conv1, !dbg !8983
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !8984 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !8985, metadata !DIExpression()), !dbg !8986
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8987
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 3, !dbg !8988
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !8988
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8989
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !8990
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !8991
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8992
  %call = call zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !8994
  %tobool = icmp ne i8 %call, 0, !dbg !8994
  br i1 %tobool, label %if.then, label %if.else, !dbg !8995

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !8996
  br label %return, !dbg !8996

if.else:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !8997
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 0, !dbg !8999
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !8999
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !9000
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9000
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9001
  %next_imm_name2 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 3, !dbg !9002
  store %struct.ssa_use_operand_d* %6, %struct.ssa_use_operand_d** %next_imm_name2, align 8, !dbg !9003
  %8 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9004
  %imm_use3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %8, i32 0, i32 0, !dbg !9005
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use3, align 8, !dbg !9005
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9006
  br label %return, !dbg !9006

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9007
  ret %struct.ssa_use_operand_d* %10, !dbg !9007
}

declare dso_local zeroext i8 @fold_stmt_inplace(%union.gimple_statement_d*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9008 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9009, metadata !DIExpression()), !dbg !9010
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9011
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9011
  %5 = load i32, i32* %4, align 8, !dbg !9011
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9011
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9011
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9011
  %tobool = icmp ne i8 %call, 0, !dbg !9011
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9012

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9013
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9013
  %10 = load i32, i32* %9, align 8, !dbg !9013
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9013
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9013
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9013
  br label %cond.end, !dbg !9012

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9012

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !9012
  ret %struct.edge_def* %cond, !dbg !9014
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) #0 !dbg !9015 {
entry:
  %retval = alloca %union.gimple_statement_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9018, metadata !DIExpression()), !dbg !9019
  %0 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9020
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %0, i32 0, i32 2, !dbg !9021
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 1, !dbg !9022
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9022
  %2 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9023
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %2, i32 0, i32 0, !dbg !9024
  store %struct.ssa_use_operand_d* %1, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !9025
  %3 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9026
  %call = call zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %3), !dbg !9028
  %tobool = icmp ne i8 %call, 0, !dbg !9028
  br i1 %tobool, label %if.then, label %if.end4, !dbg !9029

if.then:                                          ; preds = %entry
  %4 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9030
  %iter_node1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %4, i32 0, i32 2, !dbg !9033
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node1, i32 0, i32 0, !dbg !9034
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9034
  %cmp = icmp ne %struct.ssa_use_operand_d* %5, null, !dbg !9035
  br i1 %cmp, label %if.then2, label %if.end, !dbg !9036

if.then2:                                         ; preds = %if.then
  %6 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9037
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %6, i32 0, i32 2, !dbg !9038
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node3), !dbg !9039
  br label %if.end, !dbg !9039

if.end:                                           ; preds = %if.then2, %if.then
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %retval, align 8, !dbg !9040
  br label %return, !dbg !9040

if.end4:                                          ; preds = %entry
  %7 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9041
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %7, i32 0, i32 0, !dbg !9042
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !9042
  %9 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9043
  call void @link_use_stmts_after(%struct.ssa_use_operand_d* %8, %struct.immediate_use_iterator_d* %9), !dbg !9044
  %10 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9045
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %10, i32 0, i32 0, !dbg !9045
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !9045
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 2, !dbg !9045
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9045
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9045
  store %union.gimple_statement_d* %12, %union.gimple_statement_d** %retval, align 8, !dbg !9046
  br label %return, !dbg !9046

return:                                           ; preds = %if.end4, %if.end
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %retval, align 8, !dbg !9047
  ret %union.gimple_statement_d* %13, !dbg !9047
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) #0 !dbg !9048 {
entry:
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %imm.addr = alloca %struct.immediate_use_iterator_d*, align 8
  %use_p = alloca %struct.ssa_use_operand_d*, align 8
  %last_p = alloca %struct.ssa_use_operand_d*, align 8
  %head_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %union.tree_node*, align 8
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  %flag = alloca i32, align 4
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !9051, metadata !DIExpression()), !dbg !9052
  store %struct.immediate_use_iterator_d* %imm, %struct.immediate_use_iterator_d** %imm.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.immediate_use_iterator_d** %imm.addr, metadata !9053, metadata !DIExpression()), !dbg !9054
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p, metadata !9055, metadata !DIExpression()), !dbg !9056
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p, metadata !9057, metadata !DIExpression()), !dbg !9058
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9059
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9058
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %head_stmt, metadata !9060, metadata !DIExpression()), !dbg !9061
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9062
  %loc = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 2, !dbg !9062
  %stmt = bitcast %union.anon* %loc to %union.gimple_statement_d**, !dbg !9062
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9062
  store %union.gimple_statement_d* %2, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9061
  call void @llvm.dbg.declare(metadata %union.tree_node** %use, metadata !9063, metadata !DIExpression()), !dbg !9064
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9065
  %call = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %3), !dbg !9065
  store %union.tree_node* %call, %union.tree_node** %use, align 8, !dbg !9064
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !9066, metadata !DIExpression()), !dbg !9067
  call void @llvm.dbg.declare(metadata i32* %flag, metadata !9068, metadata !DIExpression()), !dbg !9069
  %4 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9070
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !9071
  %conv = zext i8 %call1 to i32, !dbg !9071
  %tobool = icmp ne i32 %conv, 0, !dbg !9071
  %5 = zext i1 %tobool to i64, !dbg !9071
  %cond = select i1 %tobool, i32 1, i32 4, !dbg !9071
  store i32 %cond, i32* %flag, align 4, !dbg !9072
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9073
  %call2 = call i32 @gimple_code(%union.gimple_statement_d* %6), !dbg !9075
  %cmp = icmp eq i32 %call2, 16, !dbg !9076
  br i1 %cmp, label %if.then, label %if.else, !dbg !9077

if.then:                                          ; preds = %entry
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9078
  %8 = load i32, i32* %flag, align 4, !dbg !9078
  %call4 = call %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %7, i32 %8), !dbg !9078
  store %struct.ssa_use_operand_d* %call4, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9078
  br label %for.cond, !dbg !9078

for.cond:                                         ; preds = %for.inc, %if.then
  %call5 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9081
  %tobool6 = icmp ne i8 %call5, 0, !dbg !9081
  %lnot = xor i1 %tobool6, true, !dbg !9081
  br i1 %lnot, label %for.body, label %for.end, !dbg !9078

for.body:                                         ; preds = %for.cond
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9083
  %call7 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %9), !dbg !9083
  %10 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9085
  %cmp8 = icmp eq %union.tree_node* %call7, %10, !dbg !9086
  br i1 %cmp8, label %if.then10, label %if.end, !dbg !9087

if.then10:                                        ; preds = %for.body
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9088
  %12 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9089
  %13 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9090
  %call11 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %11, %struct.ssa_use_operand_d* %12, %struct.ssa_use_operand_d* %13), !dbg !9091
  store %struct.ssa_use_operand_d* %call11, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9092
  br label %if.end, !dbg !9093

if.end:                                           ; preds = %if.then10, %for.body
  br label %for.inc, !dbg !9085

for.inc:                                          ; preds = %if.end
  %call12 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9081
  store %struct.ssa_use_operand_d* %call12, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9081
  br label %for.cond, !dbg !9081, !llvm.loop !9094

for.end:                                          ; preds = %for.cond
  br label %if.end44, !dbg !9096

if.else:                                          ; preds = %entry
  %14 = load i32, i32* %flag, align 4, !dbg !9097
  %cmp13 = icmp eq i32 %14, 1, !dbg !9100
  br i1 %cmp13, label %if.then15, label %if.else31, !dbg !9101

if.then15:                                        ; preds = %if.else
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9102
  %16 = load i32, i32* %flag, align 4, !dbg !9102
  %call16 = call %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %op_iter, %union.gimple_statement_d* %15, i32 %16), !dbg !9102
  store %struct.ssa_use_operand_d* %call16, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9102
  br label %for.cond17, !dbg !9102

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %call18 = call zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9105
  %tobool19 = icmp ne i8 %call18, 0, !dbg !9105
  %lnot20 = xor i1 %tobool19, true, !dbg !9105
  br i1 %lnot20, label %for.body21, label %for.end30, !dbg !9102

for.body21:                                       ; preds = %for.cond17
  %17 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9107
  %call22 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %17), !dbg !9107
  %18 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9109
  %cmp23 = icmp eq %union.tree_node* %call22, %18, !dbg !9110
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !9111

if.then25:                                        ; preds = %for.body21
  %19 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9112
  %20 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9113
  %21 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9114
  %call26 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %19, %struct.ssa_use_operand_d* %20, %struct.ssa_use_operand_d* %21), !dbg !9115
  store %struct.ssa_use_operand_d* %call26, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9116
  br label %if.end27, !dbg !9117

if.end27:                                         ; preds = %if.then25, %for.body21
  br label %for.inc28, !dbg !9109

for.inc28:                                        ; preds = %if.end27
  %call29 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %op_iter), !dbg !9105
  store %struct.ssa_use_operand_d* %call29, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9105
  br label %for.cond17, !dbg !9105, !llvm.loop !9118

for.end30:                                        ; preds = %for.cond17
  br label %if.end43, !dbg !9120

if.else31:                                        ; preds = %if.else
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %head_stmt, align 8, !dbg !9121
  %call32 = call %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %22), !dbg !9123
  store %struct.ssa_use_operand_d* %call32, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9124
  %cmp33 = icmp ne %struct.ssa_use_operand_d* %call32, null, !dbg !9125
  br i1 %cmp33, label %if.then35, label %if.end42, !dbg !9126

if.then35:                                        ; preds = %if.else31
  %23 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9127
  %call36 = call %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %23), !dbg !9127
  %24 = load %union.tree_node*, %union.tree_node** %use, align 8, !dbg !9130
  %cmp37 = icmp eq %union.tree_node* %call36, %24, !dbg !9131
  br i1 %cmp37, label %if.then39, label %if.end41, !dbg !9132

if.then39:                                        ; preds = %if.then35
  %25 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !9133
  %26 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9134
  %27 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9135
  %call40 = call %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %25, %struct.ssa_use_operand_d* %26, %struct.ssa_use_operand_d* %27), !dbg !9136
  store %struct.ssa_use_operand_d* %call40, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9137
  br label %if.end41, !dbg !9138

if.end41:                                         ; preds = %if.then39, %if.then35
  br label %if.end42, !dbg !9139

if.end42:                                         ; preds = %if.end41, %if.else31
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %for.end30
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %for.end
  %28 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9140
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %28, i32 0, i32 2, !dbg !9142
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %iter_node, i32 0, i32 0, !dbg !9143
  %29 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9143
  %cmp45 = icmp ne %struct.ssa_use_operand_d* %29, null, !dbg !9144
  br i1 %cmp45, label %if.then47, label %if.end49, !dbg !9145

if.then47:                                        ; preds = %if.end44
  %30 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9146
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %30, i32 0, i32 2, !dbg !9147
  call void @delink_imm_use(%struct.ssa_use_operand_d* %iter_node48), !dbg !9148
  br label %if.end49, !dbg !9148

if.end49:                                         ; preds = %if.then47, %if.end44
  %31 = load %struct.immediate_use_iterator_d*, %struct.immediate_use_iterator_d** %imm.addr, align 8, !dbg !9149
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %31, i32 0, i32 2, !dbg !9150
  %32 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p, align 8, !dbg !9151
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %iter_node50, %struct.ssa_use_operand_d* %32), !dbg !9152
  ret void, !dbg !9153
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) #0 !dbg !9154 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  %phi.addr = alloca %union.gimple_statement_d*, align 8
  %flags.addr = alloca i32, align 4
  %phi_def = alloca %union.tree_node*, align 8
  %comp = alloca i32, align 4
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9155, metadata !DIExpression()), !dbg !9156
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %phi.addr, metadata !9157, metadata !DIExpression()), !dbg !9158
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !9159, metadata !DIExpression()), !dbg !9160
  call void @llvm.dbg.declare(metadata %union.tree_node** %phi_def, metadata !9161, metadata !DIExpression()), !dbg !9162
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9163
  %call = call %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %0), !dbg !9164
  store %union.tree_node* %call, %union.tree_node** %phi_def, align 8, !dbg !9162
  call void @llvm.dbg.declare(metadata i32* %comp, metadata !9165, metadata !DIExpression()), !dbg !9166
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9167
  call void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %1), !dbg !9168
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9169
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 0, !dbg !9170
  store i8 0, i8* %done, align 8, !dbg !9171
  %3 = load i32, i32* %flags.addr, align 4, !dbg !9172
  %and = and i32 %3, 5, !dbg !9172
  %cmp = icmp ne i32 %and, 0, !dbg !9172
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9172

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.29, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9172
  br label %cond.end, !dbg !9172

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9172
  %4 = load %union.tree_node*, %union.tree_node** %phi_def, align 8, !dbg !9173
  %call1 = call zeroext i8 @is_gimple_reg(%union.tree_node* %4), !dbg !9174
  %conv = zext i8 %call1 to i32, !dbg !9174
  %tobool = icmp ne i32 %conv, 0, !dbg !9174
  %5 = zext i1 %tobool to i64, !dbg !9174
  %cond2 = select i1 %tobool, i32 1, i32 4, !dbg !9174
  store i32 %cond2, i32* %comp, align 4, !dbg !9175
  %6 = load i32, i32* %flags.addr, align 4, !dbg !9176
  %7 = load i32, i32* %comp, align 4, !dbg !9178
  %and3 = and i32 %6, %7, !dbg !9179
  %cmp4 = icmp eq i32 %and3, 0, !dbg !9180
  br i1 %cmp4, label %if.then, label %if.end, !dbg !9181

if.then:                                          ; preds = %cond.end
  %8 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9182
  %done6 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %8, i32 0, i32 0, !dbg !9184
  store i8 1, i8* %done6, align 8, !dbg !9185
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9186
  br label %return, !dbg !9186

if.end:                                           ; preds = %cond.end
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9187
  %10 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9188
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %10, i32 0, i32 6, !dbg !9189
  store %union.gimple_statement_d* %9, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !9190
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi.addr, align 8, !dbg !9191
  %call7 = call i32 @gimple_phi_num_args(%union.gimple_statement_d* %11), !dbg !9192
  %12 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9193
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %12, i32 0, i32 5, !dbg !9194
  store i32 %call7, i32* %num_phi, align 4, !dbg !9195
  %13 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9196
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %13, i32 0, i32 1, !dbg !9197
  store i32 2, i32* %iter_type, align 4, !dbg !9198
  %14 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9199
  %call8 = call %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %14), !dbg !9200
  store %struct.ssa_use_operand_d* %call8, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9201
  br label %return, !dbg !9201

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9202
  ret %struct.ssa_use_operand_d* %15, !dbg !9202
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) #0 !dbg !9203 {
entry:
  %use_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  %head.addr = alloca %struct.ssa_use_operand_d*, align 8
  %last_p.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d** %use_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %use_p.addr, metadata !9206, metadata !DIExpression()), !dbg !9207
  store %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %head.addr, metadata !9208, metadata !DIExpression()), !dbg !9209
  store %struct.ssa_use_operand_d* %last_p, %struct.ssa_use_operand_d** %last_p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %last_p.addr, metadata !9210, metadata !DIExpression()), !dbg !9211
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9212
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %head.addr, align 8, !dbg !9214
  %cmp = icmp ne %struct.ssa_use_operand_d* %0, %1, !dbg !9215
  br i1 %cmp, label %if.then, label %if.end3, !dbg !9216

if.then:                                          ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !9217
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !9220
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9220
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9221
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %3, %4, !dbg !9222
  br i1 %cmp1, label %if.then2, label %if.else, !dbg !9223

if.then2:                                         ; preds = %if.then
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9224
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !9225
  br label %if.end, !dbg !9226

if.else:                                          ; preds = %if.then
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9227
  call void @delink_imm_use(%struct.ssa_use_operand_d* %6), !dbg !9229
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9230
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !9231
  call void @link_imm_use_to_list(%struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d* %8), !dbg !9232
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use_p.addr, align 8, !dbg !9233
  store %struct.ssa_use_operand_d* %9, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !9234
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then2
  br label %if.end3, !dbg !9235

if.end3:                                          ; preds = %if.end, %entry
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %last_p.addr, align 8, !dbg !9236
  ret %struct.ssa_use_operand_d* %10, !dbg !9237
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) #0 !dbg !9238 {
entry:
  %retval = alloca %struct.ssa_use_operand_d*, align 8
  %g.addr = alloca %union.gimple_statement_d*, align 8
  %ops = alloca %struct.use_optype_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9241, metadata !DIExpression()), !dbg !9242
  call void @llvm.dbg.declare(metadata %struct.use_optype_d** %ops, metadata !9243, metadata !DIExpression()), !dbg !9244
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9245
  %call = call zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %0), !dbg !9247
  %tobool = icmp ne i8 %call, 0, !dbg !9247
  br i1 %tobool, label %if.end, label %if.then, !dbg !9248

if.then:                                          ; preds = %entry
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9249
  br label %return, !dbg !9249

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9250
  %gsops = bitcast %union.gimple_statement_d* %1 to %struct.gimple_statement_with_ops*, !dbg !9251
  %opbase = getelementptr inbounds %struct.gimple_statement_with_ops, %struct.gimple_statement_with_ops* %gsops, i32 0, i32 0, !dbg !9252
  %use_ops = getelementptr inbounds %struct.gimple_statement_with_ops_base, %struct.gimple_statement_with_ops_base* %opbase, i32 0, i32 2, !dbg !9253
  %2 = load %struct.use_optype_d*, %struct.use_optype_d** %use_ops, align 8, !dbg !9253
  store %struct.use_optype_d* %2, %struct.use_optype_d** %ops, align 8, !dbg !9254
  %3 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !9255
  %tobool1 = icmp ne %struct.use_optype_d* %3, null, !dbg !9255
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !9257

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !9258
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %4, i32 0, i32 1, !dbg !9258
  %use = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use_ptr, i32 0, i32 3, !dbg !9259
  %5 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !9259
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9260
  %gsmembase = bitcast %union.gimple_statement_d* %6 to %struct.gimple_statement_with_memory_ops_base*, !dbg !9261
  %vuse = getelementptr inbounds %struct.gimple_statement_with_memory_ops_base, %struct.gimple_statement_with_memory_ops_base* %gsmembase, i32 0, i32 2, !dbg !9262
  %cmp = icmp eq %union.tree_node** %5, %vuse, !dbg !9263
  br i1 %cmp, label %if.then2, label %if.end4, !dbg !9264

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.use_optype_d*, %struct.use_optype_d** %ops, align 8, !dbg !9265
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %7, i32 0, i32 1, !dbg !9265
  store %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9266
  br label %return, !dbg !9266

if.end4:                                          ; preds = %land.lhs.true, %if.end
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9267
  br label %return, !dbg !9267

return:                                           ; preds = %if.end4, %if.then2, %if.then
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %retval, align 8, !dbg !9268
  ret %struct.ssa_use_operand_d* %8, !dbg !9268
}

; Function Attrs: noinline nounwind uwtable
define internal void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) #0 !dbg !9269 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !9272, metadata !DIExpression()), !dbg !9273
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9274
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i32 0, i32 0, !dbg !9276
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9276
  %cmp = icmp eq %struct.ssa_use_operand_d* %1, null, !dbg !9277
  br i1 %cmp, label %if.then, label %if.end, !dbg !9278

if.then:                                          ; preds = %entry
  br label %return, !dbg !9279

if.end:                                           ; preds = %entry
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9280
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !9281
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9281
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9282
  %prev1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 0, !dbg !9283
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev1, align 8, !dbg !9283
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i32 0, i32 1, !dbg !9284
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next2, align 8, !dbg !9285
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9286
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 0, !dbg !9287
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !9287
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9288
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i32 0, i32 1, !dbg !9289
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next4, align 8, !dbg !9289
  %prev5 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 0, !dbg !9290
  store %struct.ssa_use_operand_d* %7, %struct.ssa_use_operand_d** %prev5, align 8, !dbg !9291
  %10 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9292
  %prev6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %10, i32 0, i32 0, !dbg !9293
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev6, align 8, !dbg !9294
  %11 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9295
  %next7 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %11, i32 0, i32 1, !dbg !9296
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next7, align 8, !dbg !9297
  br label %return, !dbg !9298

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !9298
}

; Function Attrs: noinline nounwind uwtable
define internal void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) #0 !dbg !9299 {
entry:
  %linknode.addr = alloca %struct.ssa_use_operand_d*, align 8
  %list.addr = alloca %struct.ssa_use_operand_d*, align 8
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %linknode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %linknode.addr, metadata !9302, metadata !DIExpression()), !dbg !9303
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_use_operand_d** %list.addr, metadata !9304, metadata !DIExpression()), !dbg !9305
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !9306
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9307
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %1, i32 0, i32 0, !dbg !9308
  store %struct.ssa_use_operand_d* %0, %struct.ssa_use_operand_d** %prev, align 8, !dbg !9309
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !9310
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i32 0, i32 1, !dbg !9311
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !9311
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9312
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %4, i32 0, i32 1, !dbg !9313
  store %struct.ssa_use_operand_d* %3, %struct.ssa_use_operand_d** %next1, align 8, !dbg !9314
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9315
  %6 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !9316
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %6, i32 0, i32 1, !dbg !9317
  %7 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !9317
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %7, i32 0, i32 0, !dbg !9318
  store %struct.ssa_use_operand_d* %5, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !9319
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %linknode.addr, align 8, !dbg !9320
  %9 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %list.addr, align 8, !dbg !9321
  %next4 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %9, i32 0, i32 1, !dbg !9322
  store %struct.ssa_use_operand_d* %8, %struct.ssa_use_operand_d** %next4, align 8, !dbg !9323
  ret void, !dbg !9324
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #0 !dbg !9325 {
entry:
  %ptr.addr = alloca %struct.ssa_operand_iterator_d*, align 8
  store %struct.ssa_operand_iterator_d* %ptr, %struct.ssa_operand_iterator_d** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ssa_operand_iterator_d** %ptr.addr, metadata !9328, metadata !DIExpression()), !dbg !9329
  %0 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9330
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %0, i32 0, i32 2, !dbg !9331
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !9332
  %1 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9333
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %1, i32 0, i32 3, !dbg !9334
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !9335
  %2 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9336
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %2, i32 0, i32 1, !dbg !9337
  store i32 0, i32* %iter_type, align 4, !dbg !9338
  %3 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9339
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %3, i32 0, i32 4, !dbg !9340
  store i32 0, i32* %phi_i, align 8, !dbg !9341
  %4 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9342
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %4, i32 0, i32 5, !dbg !9343
  store i32 0, i32* %num_phi, align 4, !dbg !9344
  %5 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9345
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %5, i32 0, i32 6, !dbg !9346
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !9347
  %6 = load %struct.ssa_operand_iterator_d*, %struct.ssa_operand_iterator_d** %ptr.addr, align 8, !dbg !9348
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %6, i32 0, i32 0, !dbg !9349
  store i8 1, i8* %done, align 8, !dbg !9350
  ret void, !dbg !9351
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) #0 !dbg !9352 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9353, metadata !DIExpression()), !dbg !9354
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9355
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9356
  %cmp = icmp eq i32 %call, 2, !dbg !9357
  %conv = zext i1 %cmp to i32, !dbg !9357
  %conv1 = trunc i32 %conv to i8, !dbg !9356
  ret i8 %conv1, !dbg !9358
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3101, !3102, !3103}
!llvm.ident = !{!3104}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_dominator", scope: !2, file: !3, line: 743, type: !3056, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !1588, globals: !3053, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-dom.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !317, !512, !521, !525, !531, !536, !541, !559, !566, !573, !577, !587, !593, !632, !654, !659, !665, !1385, !1519, !1545, !1552, !1558, !1572, !1585}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !190, line: 7, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316}
!192 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!231 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!232 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!233 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!234 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!235 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!236 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!237 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!238 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!239 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!240 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!241 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!242 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!243 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!244 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!245 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!246 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!247 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!248 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!249 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!250 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!251 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!252 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!253 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!254 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!255 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!256 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!257 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!258 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!259 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!260 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!261 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!262 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!263 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!264 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!265 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!266 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!267 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!268 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!269 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!270 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!271 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!272 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!273 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!274 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!275 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!276 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!277 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!278 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!279 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!280 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!281 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!282 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!283 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!284 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!285 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!286 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!287 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!288 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!289 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!290 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!291 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!292 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!293 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!294 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!295 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!296 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!297 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!298 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!299 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!300 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!301 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!302 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!303 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!304 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!305 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!306 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!307 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!308 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!309 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!310 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!311 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!312 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!313 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!314 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!315 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!316 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!317 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !318, line: 39, baseType: !7, size: 32, elements: !319)
!318 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!319 = !{!320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511}
!320 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!321 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!322 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!323 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!324 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!325 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!326 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!327 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!328 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!329 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!330 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!331 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!332 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!333 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!334 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!335 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!336 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!337 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!338 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!339 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!340 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!341 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!342 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!343 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!344 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!345 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!346 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!347 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!348 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!349 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!350 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!351 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!352 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!353 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!354 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!355 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!356 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!357 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!358 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!359 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!360 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!361 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!362 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!363 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!364 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!365 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!366 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!367 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!368 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!369 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!370 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!371 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!372 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!373 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!374 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!375 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!376 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!378 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!379 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!380 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!381 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!382 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!383 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!384 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!385 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!386 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!387 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!388 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!389 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!390 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!391 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!392 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!393 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!394 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!395 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!396 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!397 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!398 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!399 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!400 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!401 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!402 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!403 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!404 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!405 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!406 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!407 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!408 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!409 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!410 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!411 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!412 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!413 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!414 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!415 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!416 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!417 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!418 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!419 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!420 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!421 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!422 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!423 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!424 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!425 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!426 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!427 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!428 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!429 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!430 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!431 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!432 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!433 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!434 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!435 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!436 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!437 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!438 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!439 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!440 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!441 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!442 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!443 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!444 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!445 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!446 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!447 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!448 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!449 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!450 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!451 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!452 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!453 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!454 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!455 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!456 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!457 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!458 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!459 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!460 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!461 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!462 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!463 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!464 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!465 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!466 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!467 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!468 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!469 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!470 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!471 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!472 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!473 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!474 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!475 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!476 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!477 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!478 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!479 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!480 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!481 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!482 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!483 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!484 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!485 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!486 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!487 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!488 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!489 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!490 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!491 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!492 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!493 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!494 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!495 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!496 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!497 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!498 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!499 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!500 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!501 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!502 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!503 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!504 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!505 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!506 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!507 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!508 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!509 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!510 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!511 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!512 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !513, line: 31, baseType: !7, size: 32, elements: !514)
!513 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!514 = !{!515, !516, !517, !518, !519, !520}
!515 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!516 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!517 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!518 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!519 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!520 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!521 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !513, line: 91, baseType: !7, size: 32, elements: !522)
!522 = !{!523, !524}
!523 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!524 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!525 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !526, line: 363, baseType: !7, size: 32, elements: !527)
!526 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!527 = !{!528, !529, !530}
!528 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!529 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!530 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!531 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !526, line: 355, baseType: !7, size: 32, elements: !532)
!532 = !{!533, !534, !535}
!533 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!534 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!535 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!536 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !537, line: 474, baseType: !7, size: 32, elements: !538)
!537 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!538 = !{!539, !540}
!539 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!540 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!541 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !318, line: 280, baseType: !7, size: 32, elements: !542)
!542 = !{!543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558}
!543 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!544 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!545 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!546 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!547 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!548 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!549 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!550 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!551 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!552 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!553 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!554 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!555 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!556 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!557 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!558 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!559 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !318, line: 1817, baseType: !7, size: 32, elements: !560)
!560 = !{!561, !562, !563, !564, !565}
!561 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!562 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!563 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!564 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!565 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!566 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !318, line: 1805, baseType: !7, size: 32, elements: !567)
!567 = !{!568, !569, !570, !571, !572}
!568 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!569 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!570 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!571 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!572 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !526, line: 912, baseType: !7, size: 32, elements: !574)
!574 = !{!575, !576}
!575 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!576 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!577 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !513, line: 170, baseType: !7, size: 32, elements: !578)
!578 = !{!579, !580, !581, !582, !583, !584, !585, !586}
!579 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!580 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!581 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!582 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!583 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!584 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!585 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!586 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!587 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expr_kind", file: !3, line: 52, baseType: !7, size: 32, elements: !588)
!588 = !{!589, !590, !591, !592}
!589 = !DIEnumerator(name: "EXPR_SINGLE", value: 0, isUnsigned: true)
!590 = !DIEnumerator(name: "EXPR_UNARY", value: 1, isUnsigned: true)
!591 = !DIEnumerator(name: "EXPR_BINARY", value: 2, isUnsigned: true)
!592 = !DIEnumerator(name: "EXPR_CALL", value: 3, isUnsigned: true)
!593 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !594, line: 51, baseType: !7, size: 32, elements: !595)
!594 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!595 = !{!596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631}
!596 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!631 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!632 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !633, line: 36, baseType: !7, size: 32, elements: !634)
!633 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!634 = !{!635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653}
!635 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!636 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!637 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!638 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!639 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!640 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!641 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!642 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!643 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!644 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!645 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!646 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!647 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!648 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!649 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!650 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!651 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!652 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!653 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!654 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insert_option", file: !655, line: 147, baseType: !7, size: 32, elements: !656)
!655 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!656 = !{!657, !658}
!657 = !DIEnumerator(name: "NO_INSERT", value: 0, isUnsigned: true)
!658 = !DIEnumerator(name: "INSERT", value: 1, isUnsigned: true)
!659 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_class", file: !318, line: 205, baseType: !7, size: 32, elements: !660)
!660 = !{!661, !662, !663, !664}
!661 = !DIEnumerator(name: "NOT_BUILT_IN", value: 0, isUnsigned: true)
!662 = !DIEnumerator(name: "BUILT_IN_FRONTEND", value: 1, isUnsigned: true)
!663 = !DIEnumerator(name: "BUILT_IN_MD", value: 2, isUnsigned: true)
!664 = !DIEnumerator(name: "BUILT_IN_NORMAL", value: 3, isUnsigned: true)
!665 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "built_in_function", file: !318, line: 220, baseType: !7, size: 32, elements: !666)
!666 = !{!667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384}
!667 = !DIEnumerator(name: "BUILT_IN_ACOS", value: 0, isUnsigned: true)
!668 = !DIEnumerator(name: "BUILT_IN_ACOSF", value: 1, isUnsigned: true)
!669 = !DIEnumerator(name: "BUILT_IN_ACOSH", value: 2, isUnsigned: true)
!670 = !DIEnumerator(name: "BUILT_IN_ACOSHF", value: 3, isUnsigned: true)
!671 = !DIEnumerator(name: "BUILT_IN_ACOSHL", value: 4, isUnsigned: true)
!672 = !DIEnumerator(name: "BUILT_IN_ACOSL", value: 5, isUnsigned: true)
!673 = !DIEnumerator(name: "BUILT_IN_ASIN", value: 6, isUnsigned: true)
!674 = !DIEnumerator(name: "BUILT_IN_ASINF", value: 7, isUnsigned: true)
!675 = !DIEnumerator(name: "BUILT_IN_ASINH", value: 8, isUnsigned: true)
!676 = !DIEnumerator(name: "BUILT_IN_ASINHF", value: 9, isUnsigned: true)
!677 = !DIEnumerator(name: "BUILT_IN_ASINHL", value: 10, isUnsigned: true)
!678 = !DIEnumerator(name: "BUILT_IN_ASINL", value: 11, isUnsigned: true)
!679 = !DIEnumerator(name: "BUILT_IN_ATAN", value: 12, isUnsigned: true)
!680 = !DIEnumerator(name: "BUILT_IN_ATAN2", value: 13, isUnsigned: true)
!681 = !DIEnumerator(name: "BUILT_IN_ATAN2F", value: 14, isUnsigned: true)
!682 = !DIEnumerator(name: "BUILT_IN_ATAN2L", value: 15, isUnsigned: true)
!683 = !DIEnumerator(name: "BUILT_IN_ATANF", value: 16, isUnsigned: true)
!684 = !DIEnumerator(name: "BUILT_IN_ATANH", value: 17, isUnsigned: true)
!685 = !DIEnumerator(name: "BUILT_IN_ATANHF", value: 18, isUnsigned: true)
!686 = !DIEnumerator(name: "BUILT_IN_ATANHL", value: 19, isUnsigned: true)
!687 = !DIEnumerator(name: "BUILT_IN_ATANL", value: 20, isUnsigned: true)
!688 = !DIEnumerator(name: "BUILT_IN_CBRT", value: 21, isUnsigned: true)
!689 = !DIEnumerator(name: "BUILT_IN_CBRTF", value: 22, isUnsigned: true)
!690 = !DIEnumerator(name: "BUILT_IN_CBRTL", value: 23, isUnsigned: true)
!691 = !DIEnumerator(name: "BUILT_IN_CEIL", value: 24, isUnsigned: true)
!692 = !DIEnumerator(name: "BUILT_IN_CEILF", value: 25, isUnsigned: true)
!693 = !DIEnumerator(name: "BUILT_IN_CEILL", value: 26, isUnsigned: true)
!694 = !DIEnumerator(name: "BUILT_IN_COPYSIGN", value: 27, isUnsigned: true)
!695 = !DIEnumerator(name: "BUILT_IN_COPYSIGNF", value: 28, isUnsigned: true)
!696 = !DIEnumerator(name: "BUILT_IN_COPYSIGNL", value: 29, isUnsigned: true)
!697 = !DIEnumerator(name: "BUILT_IN_COS", value: 30, isUnsigned: true)
!698 = !DIEnumerator(name: "BUILT_IN_COSF", value: 31, isUnsigned: true)
!699 = !DIEnumerator(name: "BUILT_IN_COSH", value: 32, isUnsigned: true)
!700 = !DIEnumerator(name: "BUILT_IN_COSHF", value: 33, isUnsigned: true)
!701 = !DIEnumerator(name: "BUILT_IN_COSHL", value: 34, isUnsigned: true)
!702 = !DIEnumerator(name: "BUILT_IN_COSL", value: 35, isUnsigned: true)
!703 = !DIEnumerator(name: "BUILT_IN_DREM", value: 36, isUnsigned: true)
!704 = !DIEnumerator(name: "BUILT_IN_DREMF", value: 37, isUnsigned: true)
!705 = !DIEnumerator(name: "BUILT_IN_DREML", value: 38, isUnsigned: true)
!706 = !DIEnumerator(name: "BUILT_IN_ERF", value: 39, isUnsigned: true)
!707 = !DIEnumerator(name: "BUILT_IN_ERFC", value: 40, isUnsigned: true)
!708 = !DIEnumerator(name: "BUILT_IN_ERFCF", value: 41, isUnsigned: true)
!709 = !DIEnumerator(name: "BUILT_IN_ERFCL", value: 42, isUnsigned: true)
!710 = !DIEnumerator(name: "BUILT_IN_ERFF", value: 43, isUnsigned: true)
!711 = !DIEnumerator(name: "BUILT_IN_ERFL", value: 44, isUnsigned: true)
!712 = !DIEnumerator(name: "BUILT_IN_EXP", value: 45, isUnsigned: true)
!713 = !DIEnumerator(name: "BUILT_IN_EXP10", value: 46, isUnsigned: true)
!714 = !DIEnumerator(name: "BUILT_IN_EXP10F", value: 47, isUnsigned: true)
!715 = !DIEnumerator(name: "BUILT_IN_EXP10L", value: 48, isUnsigned: true)
!716 = !DIEnumerator(name: "BUILT_IN_EXP2", value: 49, isUnsigned: true)
!717 = !DIEnumerator(name: "BUILT_IN_EXP2F", value: 50, isUnsigned: true)
!718 = !DIEnumerator(name: "BUILT_IN_EXP2L", value: 51, isUnsigned: true)
!719 = !DIEnumerator(name: "BUILT_IN_EXPF", value: 52, isUnsigned: true)
!720 = !DIEnumerator(name: "BUILT_IN_EXPL", value: 53, isUnsigned: true)
!721 = !DIEnumerator(name: "BUILT_IN_EXPM1", value: 54, isUnsigned: true)
!722 = !DIEnumerator(name: "BUILT_IN_EXPM1F", value: 55, isUnsigned: true)
!723 = !DIEnumerator(name: "BUILT_IN_EXPM1L", value: 56, isUnsigned: true)
!724 = !DIEnumerator(name: "BUILT_IN_FABS", value: 57, isUnsigned: true)
!725 = !DIEnumerator(name: "BUILT_IN_FABSF", value: 58, isUnsigned: true)
!726 = !DIEnumerator(name: "BUILT_IN_FABSL", value: 59, isUnsigned: true)
!727 = !DIEnumerator(name: "BUILT_IN_FDIM", value: 60, isUnsigned: true)
!728 = !DIEnumerator(name: "BUILT_IN_FDIMF", value: 61, isUnsigned: true)
!729 = !DIEnumerator(name: "BUILT_IN_FDIML", value: 62, isUnsigned: true)
!730 = !DIEnumerator(name: "BUILT_IN_FLOOR", value: 63, isUnsigned: true)
!731 = !DIEnumerator(name: "BUILT_IN_FLOORF", value: 64, isUnsigned: true)
!732 = !DIEnumerator(name: "BUILT_IN_FLOORL", value: 65, isUnsigned: true)
!733 = !DIEnumerator(name: "BUILT_IN_FMA", value: 66, isUnsigned: true)
!734 = !DIEnumerator(name: "BUILT_IN_FMAF", value: 67, isUnsigned: true)
!735 = !DIEnumerator(name: "BUILT_IN_FMAL", value: 68, isUnsigned: true)
!736 = !DIEnumerator(name: "BUILT_IN_FMAX", value: 69, isUnsigned: true)
!737 = !DIEnumerator(name: "BUILT_IN_FMAXF", value: 70, isUnsigned: true)
!738 = !DIEnumerator(name: "BUILT_IN_FMAXL", value: 71, isUnsigned: true)
!739 = !DIEnumerator(name: "BUILT_IN_FMIN", value: 72, isUnsigned: true)
!740 = !DIEnumerator(name: "BUILT_IN_FMINF", value: 73, isUnsigned: true)
!741 = !DIEnumerator(name: "BUILT_IN_FMINL", value: 74, isUnsigned: true)
!742 = !DIEnumerator(name: "BUILT_IN_FMOD", value: 75, isUnsigned: true)
!743 = !DIEnumerator(name: "BUILT_IN_FMODF", value: 76, isUnsigned: true)
!744 = !DIEnumerator(name: "BUILT_IN_FMODL", value: 77, isUnsigned: true)
!745 = !DIEnumerator(name: "BUILT_IN_FREXP", value: 78, isUnsigned: true)
!746 = !DIEnumerator(name: "BUILT_IN_FREXPF", value: 79, isUnsigned: true)
!747 = !DIEnumerator(name: "BUILT_IN_FREXPL", value: 80, isUnsigned: true)
!748 = !DIEnumerator(name: "BUILT_IN_GAMMA", value: 81, isUnsigned: true)
!749 = !DIEnumerator(name: "BUILT_IN_GAMMAF", value: 82, isUnsigned: true)
!750 = !DIEnumerator(name: "BUILT_IN_GAMMAL", value: 83, isUnsigned: true)
!751 = !DIEnumerator(name: "BUILT_IN_GAMMA_R", value: 84, isUnsigned: true)
!752 = !DIEnumerator(name: "BUILT_IN_GAMMAF_R", value: 85, isUnsigned: true)
!753 = !DIEnumerator(name: "BUILT_IN_GAMMAL_R", value: 86, isUnsigned: true)
!754 = !DIEnumerator(name: "BUILT_IN_HUGE_VAL", value: 87, isUnsigned: true)
!755 = !DIEnumerator(name: "BUILT_IN_HUGE_VALF", value: 88, isUnsigned: true)
!756 = !DIEnumerator(name: "BUILT_IN_HUGE_VALL", value: 89, isUnsigned: true)
!757 = !DIEnumerator(name: "BUILT_IN_HYPOT", value: 90, isUnsigned: true)
!758 = !DIEnumerator(name: "BUILT_IN_HYPOTF", value: 91, isUnsigned: true)
!759 = !DIEnumerator(name: "BUILT_IN_HYPOTL", value: 92, isUnsigned: true)
!760 = !DIEnumerator(name: "BUILT_IN_ILOGB", value: 93, isUnsigned: true)
!761 = !DIEnumerator(name: "BUILT_IN_ILOGBF", value: 94, isUnsigned: true)
!762 = !DIEnumerator(name: "BUILT_IN_ILOGBL", value: 95, isUnsigned: true)
!763 = !DIEnumerator(name: "BUILT_IN_INF", value: 96, isUnsigned: true)
!764 = !DIEnumerator(name: "BUILT_IN_INFF", value: 97, isUnsigned: true)
!765 = !DIEnumerator(name: "BUILT_IN_INFL", value: 98, isUnsigned: true)
!766 = !DIEnumerator(name: "BUILT_IN_INFD32", value: 99, isUnsigned: true)
!767 = !DIEnumerator(name: "BUILT_IN_INFD64", value: 100, isUnsigned: true)
!768 = !DIEnumerator(name: "BUILT_IN_INFD128", value: 101, isUnsigned: true)
!769 = !DIEnumerator(name: "BUILT_IN_J0", value: 102, isUnsigned: true)
!770 = !DIEnumerator(name: "BUILT_IN_J0F", value: 103, isUnsigned: true)
!771 = !DIEnumerator(name: "BUILT_IN_J0L", value: 104, isUnsigned: true)
!772 = !DIEnumerator(name: "BUILT_IN_J1", value: 105, isUnsigned: true)
!773 = !DIEnumerator(name: "BUILT_IN_J1F", value: 106, isUnsigned: true)
!774 = !DIEnumerator(name: "BUILT_IN_J1L", value: 107, isUnsigned: true)
!775 = !DIEnumerator(name: "BUILT_IN_JN", value: 108, isUnsigned: true)
!776 = !DIEnumerator(name: "BUILT_IN_JNF", value: 109, isUnsigned: true)
!777 = !DIEnumerator(name: "BUILT_IN_JNL", value: 110, isUnsigned: true)
!778 = !DIEnumerator(name: "BUILT_IN_LCEIL", value: 111, isUnsigned: true)
!779 = !DIEnumerator(name: "BUILT_IN_LCEILF", value: 112, isUnsigned: true)
!780 = !DIEnumerator(name: "BUILT_IN_LCEILL", value: 113, isUnsigned: true)
!781 = !DIEnumerator(name: "BUILT_IN_LDEXP", value: 114, isUnsigned: true)
!782 = !DIEnumerator(name: "BUILT_IN_LDEXPF", value: 115, isUnsigned: true)
!783 = !DIEnumerator(name: "BUILT_IN_LDEXPL", value: 116, isUnsigned: true)
!784 = !DIEnumerator(name: "BUILT_IN_LFLOOR", value: 117, isUnsigned: true)
!785 = !DIEnumerator(name: "BUILT_IN_LFLOORF", value: 118, isUnsigned: true)
!786 = !DIEnumerator(name: "BUILT_IN_LFLOORL", value: 119, isUnsigned: true)
!787 = !DIEnumerator(name: "BUILT_IN_LGAMMA", value: 120, isUnsigned: true)
!788 = !DIEnumerator(name: "BUILT_IN_LGAMMAF", value: 121, isUnsigned: true)
!789 = !DIEnumerator(name: "BUILT_IN_LGAMMAL", value: 122, isUnsigned: true)
!790 = !DIEnumerator(name: "BUILT_IN_LGAMMA_R", value: 123, isUnsigned: true)
!791 = !DIEnumerator(name: "BUILT_IN_LGAMMAF_R", value: 124, isUnsigned: true)
!792 = !DIEnumerator(name: "BUILT_IN_LGAMMAL_R", value: 125, isUnsigned: true)
!793 = !DIEnumerator(name: "BUILT_IN_LLCEIL", value: 126, isUnsigned: true)
!794 = !DIEnumerator(name: "BUILT_IN_LLCEILF", value: 127, isUnsigned: true)
!795 = !DIEnumerator(name: "BUILT_IN_LLCEILL", value: 128, isUnsigned: true)
!796 = !DIEnumerator(name: "BUILT_IN_LLFLOOR", value: 129, isUnsigned: true)
!797 = !DIEnumerator(name: "BUILT_IN_LLFLOORF", value: 130, isUnsigned: true)
!798 = !DIEnumerator(name: "BUILT_IN_LLFLOORL", value: 131, isUnsigned: true)
!799 = !DIEnumerator(name: "BUILT_IN_LLRINT", value: 132, isUnsigned: true)
!800 = !DIEnumerator(name: "BUILT_IN_LLRINTF", value: 133, isUnsigned: true)
!801 = !DIEnumerator(name: "BUILT_IN_LLRINTL", value: 134, isUnsigned: true)
!802 = !DIEnumerator(name: "BUILT_IN_LLROUND", value: 135, isUnsigned: true)
!803 = !DIEnumerator(name: "BUILT_IN_LLROUNDF", value: 136, isUnsigned: true)
!804 = !DIEnumerator(name: "BUILT_IN_LLROUNDL", value: 137, isUnsigned: true)
!805 = !DIEnumerator(name: "BUILT_IN_LOG", value: 138, isUnsigned: true)
!806 = !DIEnumerator(name: "BUILT_IN_LOG10", value: 139, isUnsigned: true)
!807 = !DIEnumerator(name: "BUILT_IN_LOG10F", value: 140, isUnsigned: true)
!808 = !DIEnumerator(name: "BUILT_IN_LOG10L", value: 141, isUnsigned: true)
!809 = !DIEnumerator(name: "BUILT_IN_LOG1P", value: 142, isUnsigned: true)
!810 = !DIEnumerator(name: "BUILT_IN_LOG1PF", value: 143, isUnsigned: true)
!811 = !DIEnumerator(name: "BUILT_IN_LOG1PL", value: 144, isUnsigned: true)
!812 = !DIEnumerator(name: "BUILT_IN_LOG2", value: 145, isUnsigned: true)
!813 = !DIEnumerator(name: "BUILT_IN_LOG2F", value: 146, isUnsigned: true)
!814 = !DIEnumerator(name: "BUILT_IN_LOG2L", value: 147, isUnsigned: true)
!815 = !DIEnumerator(name: "BUILT_IN_LOGB", value: 148, isUnsigned: true)
!816 = !DIEnumerator(name: "BUILT_IN_LOGBF", value: 149, isUnsigned: true)
!817 = !DIEnumerator(name: "BUILT_IN_LOGBL", value: 150, isUnsigned: true)
!818 = !DIEnumerator(name: "BUILT_IN_LOGF", value: 151, isUnsigned: true)
!819 = !DIEnumerator(name: "BUILT_IN_LOGL", value: 152, isUnsigned: true)
!820 = !DIEnumerator(name: "BUILT_IN_LRINT", value: 153, isUnsigned: true)
!821 = !DIEnumerator(name: "BUILT_IN_LRINTF", value: 154, isUnsigned: true)
!822 = !DIEnumerator(name: "BUILT_IN_LRINTL", value: 155, isUnsigned: true)
!823 = !DIEnumerator(name: "BUILT_IN_LROUND", value: 156, isUnsigned: true)
!824 = !DIEnumerator(name: "BUILT_IN_LROUNDF", value: 157, isUnsigned: true)
!825 = !DIEnumerator(name: "BUILT_IN_LROUNDL", value: 158, isUnsigned: true)
!826 = !DIEnumerator(name: "BUILT_IN_MODF", value: 159, isUnsigned: true)
!827 = !DIEnumerator(name: "BUILT_IN_MODFF", value: 160, isUnsigned: true)
!828 = !DIEnumerator(name: "BUILT_IN_MODFL", value: 161, isUnsigned: true)
!829 = !DIEnumerator(name: "BUILT_IN_NAN", value: 162, isUnsigned: true)
!830 = !DIEnumerator(name: "BUILT_IN_NANF", value: 163, isUnsigned: true)
!831 = !DIEnumerator(name: "BUILT_IN_NANL", value: 164, isUnsigned: true)
!832 = !DIEnumerator(name: "BUILT_IN_NAND32", value: 165, isUnsigned: true)
!833 = !DIEnumerator(name: "BUILT_IN_NAND64", value: 166, isUnsigned: true)
!834 = !DIEnumerator(name: "BUILT_IN_NAND128", value: 167, isUnsigned: true)
!835 = !DIEnumerator(name: "BUILT_IN_NANS", value: 168, isUnsigned: true)
!836 = !DIEnumerator(name: "BUILT_IN_NANSF", value: 169, isUnsigned: true)
!837 = !DIEnumerator(name: "BUILT_IN_NANSL", value: 170, isUnsigned: true)
!838 = !DIEnumerator(name: "BUILT_IN_NEARBYINT", value: 171, isUnsigned: true)
!839 = !DIEnumerator(name: "BUILT_IN_NEARBYINTF", value: 172, isUnsigned: true)
!840 = !DIEnumerator(name: "BUILT_IN_NEARBYINTL", value: 173, isUnsigned: true)
!841 = !DIEnumerator(name: "BUILT_IN_NEXTAFTER", value: 174, isUnsigned: true)
!842 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERF", value: 175, isUnsigned: true)
!843 = !DIEnumerator(name: "BUILT_IN_NEXTAFTERL", value: 176, isUnsigned: true)
!844 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARD", value: 177, isUnsigned: true)
!845 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDF", value: 178, isUnsigned: true)
!846 = !DIEnumerator(name: "BUILT_IN_NEXTTOWARDL", value: 179, isUnsigned: true)
!847 = !DIEnumerator(name: "BUILT_IN_POW", value: 180, isUnsigned: true)
!848 = !DIEnumerator(name: "BUILT_IN_POW10", value: 181, isUnsigned: true)
!849 = !DIEnumerator(name: "BUILT_IN_POW10F", value: 182, isUnsigned: true)
!850 = !DIEnumerator(name: "BUILT_IN_POW10L", value: 183, isUnsigned: true)
!851 = !DIEnumerator(name: "BUILT_IN_POWF", value: 184, isUnsigned: true)
!852 = !DIEnumerator(name: "BUILT_IN_POWI", value: 185, isUnsigned: true)
!853 = !DIEnumerator(name: "BUILT_IN_POWIF", value: 186, isUnsigned: true)
!854 = !DIEnumerator(name: "BUILT_IN_POWIL", value: 187, isUnsigned: true)
!855 = !DIEnumerator(name: "BUILT_IN_POWL", value: 188, isUnsigned: true)
!856 = !DIEnumerator(name: "BUILT_IN_REMAINDER", value: 189, isUnsigned: true)
!857 = !DIEnumerator(name: "BUILT_IN_REMAINDERF", value: 190, isUnsigned: true)
!858 = !DIEnumerator(name: "BUILT_IN_REMAINDERL", value: 191, isUnsigned: true)
!859 = !DIEnumerator(name: "BUILT_IN_REMQUO", value: 192, isUnsigned: true)
!860 = !DIEnumerator(name: "BUILT_IN_REMQUOF", value: 193, isUnsigned: true)
!861 = !DIEnumerator(name: "BUILT_IN_REMQUOL", value: 194, isUnsigned: true)
!862 = !DIEnumerator(name: "BUILT_IN_RINT", value: 195, isUnsigned: true)
!863 = !DIEnumerator(name: "BUILT_IN_RINTF", value: 196, isUnsigned: true)
!864 = !DIEnumerator(name: "BUILT_IN_RINTL", value: 197, isUnsigned: true)
!865 = !DIEnumerator(name: "BUILT_IN_ROUND", value: 198, isUnsigned: true)
!866 = !DIEnumerator(name: "BUILT_IN_ROUNDF", value: 199, isUnsigned: true)
!867 = !DIEnumerator(name: "BUILT_IN_ROUNDL", value: 200, isUnsigned: true)
!868 = !DIEnumerator(name: "BUILT_IN_SCALB", value: 201, isUnsigned: true)
!869 = !DIEnumerator(name: "BUILT_IN_SCALBF", value: 202, isUnsigned: true)
!870 = !DIEnumerator(name: "BUILT_IN_SCALBL", value: 203, isUnsigned: true)
!871 = !DIEnumerator(name: "BUILT_IN_SCALBLN", value: 204, isUnsigned: true)
!872 = !DIEnumerator(name: "BUILT_IN_SCALBLNF", value: 205, isUnsigned: true)
!873 = !DIEnumerator(name: "BUILT_IN_SCALBLNL", value: 206, isUnsigned: true)
!874 = !DIEnumerator(name: "BUILT_IN_SCALBN", value: 207, isUnsigned: true)
!875 = !DIEnumerator(name: "BUILT_IN_SCALBNF", value: 208, isUnsigned: true)
!876 = !DIEnumerator(name: "BUILT_IN_SCALBNL", value: 209, isUnsigned: true)
!877 = !DIEnumerator(name: "BUILT_IN_SIGNBIT", value: 210, isUnsigned: true)
!878 = !DIEnumerator(name: "BUILT_IN_SIGNBITF", value: 211, isUnsigned: true)
!879 = !DIEnumerator(name: "BUILT_IN_SIGNBITL", value: 212, isUnsigned: true)
!880 = !DIEnumerator(name: "BUILT_IN_SIGNBITD32", value: 213, isUnsigned: true)
!881 = !DIEnumerator(name: "BUILT_IN_SIGNBITD64", value: 214, isUnsigned: true)
!882 = !DIEnumerator(name: "BUILT_IN_SIGNBITD128", value: 215, isUnsigned: true)
!883 = !DIEnumerator(name: "BUILT_IN_SIGNIFICAND", value: 216, isUnsigned: true)
!884 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDF", value: 217, isUnsigned: true)
!885 = !DIEnumerator(name: "BUILT_IN_SIGNIFICANDL", value: 218, isUnsigned: true)
!886 = !DIEnumerator(name: "BUILT_IN_SIN", value: 219, isUnsigned: true)
!887 = !DIEnumerator(name: "BUILT_IN_SINCOS", value: 220, isUnsigned: true)
!888 = !DIEnumerator(name: "BUILT_IN_SINCOSF", value: 221, isUnsigned: true)
!889 = !DIEnumerator(name: "BUILT_IN_SINCOSL", value: 222, isUnsigned: true)
!890 = !DIEnumerator(name: "BUILT_IN_SINF", value: 223, isUnsigned: true)
!891 = !DIEnumerator(name: "BUILT_IN_SINH", value: 224, isUnsigned: true)
!892 = !DIEnumerator(name: "BUILT_IN_SINHF", value: 225, isUnsigned: true)
!893 = !DIEnumerator(name: "BUILT_IN_SINHL", value: 226, isUnsigned: true)
!894 = !DIEnumerator(name: "BUILT_IN_SINL", value: 227, isUnsigned: true)
!895 = !DIEnumerator(name: "BUILT_IN_SQRT", value: 228, isUnsigned: true)
!896 = !DIEnumerator(name: "BUILT_IN_SQRTF", value: 229, isUnsigned: true)
!897 = !DIEnumerator(name: "BUILT_IN_SQRTL", value: 230, isUnsigned: true)
!898 = !DIEnumerator(name: "BUILT_IN_TAN", value: 231, isUnsigned: true)
!899 = !DIEnumerator(name: "BUILT_IN_TANF", value: 232, isUnsigned: true)
!900 = !DIEnumerator(name: "BUILT_IN_TANH", value: 233, isUnsigned: true)
!901 = !DIEnumerator(name: "BUILT_IN_TANHF", value: 234, isUnsigned: true)
!902 = !DIEnumerator(name: "BUILT_IN_TANHL", value: 235, isUnsigned: true)
!903 = !DIEnumerator(name: "BUILT_IN_TANL", value: 236, isUnsigned: true)
!904 = !DIEnumerator(name: "BUILT_IN_TGAMMA", value: 237, isUnsigned: true)
!905 = !DIEnumerator(name: "BUILT_IN_TGAMMAF", value: 238, isUnsigned: true)
!906 = !DIEnumerator(name: "BUILT_IN_TGAMMAL", value: 239, isUnsigned: true)
!907 = !DIEnumerator(name: "BUILT_IN_TRUNC", value: 240, isUnsigned: true)
!908 = !DIEnumerator(name: "BUILT_IN_TRUNCF", value: 241, isUnsigned: true)
!909 = !DIEnumerator(name: "BUILT_IN_TRUNCL", value: 242, isUnsigned: true)
!910 = !DIEnumerator(name: "BUILT_IN_Y0", value: 243, isUnsigned: true)
!911 = !DIEnumerator(name: "BUILT_IN_Y0F", value: 244, isUnsigned: true)
!912 = !DIEnumerator(name: "BUILT_IN_Y0L", value: 245, isUnsigned: true)
!913 = !DIEnumerator(name: "BUILT_IN_Y1", value: 246, isUnsigned: true)
!914 = !DIEnumerator(name: "BUILT_IN_Y1F", value: 247, isUnsigned: true)
!915 = !DIEnumerator(name: "BUILT_IN_Y1L", value: 248, isUnsigned: true)
!916 = !DIEnumerator(name: "BUILT_IN_YN", value: 249, isUnsigned: true)
!917 = !DIEnumerator(name: "BUILT_IN_YNF", value: 250, isUnsigned: true)
!918 = !DIEnumerator(name: "BUILT_IN_YNL", value: 251, isUnsigned: true)
!919 = !DIEnumerator(name: "BUILT_IN_CABS", value: 252, isUnsigned: true)
!920 = !DIEnumerator(name: "BUILT_IN_CABSF", value: 253, isUnsigned: true)
!921 = !DIEnumerator(name: "BUILT_IN_CABSL", value: 254, isUnsigned: true)
!922 = !DIEnumerator(name: "BUILT_IN_CACOS", value: 255, isUnsigned: true)
!923 = !DIEnumerator(name: "BUILT_IN_CACOSF", value: 256, isUnsigned: true)
!924 = !DIEnumerator(name: "BUILT_IN_CACOSH", value: 257, isUnsigned: true)
!925 = !DIEnumerator(name: "BUILT_IN_CACOSHF", value: 258, isUnsigned: true)
!926 = !DIEnumerator(name: "BUILT_IN_CACOSHL", value: 259, isUnsigned: true)
!927 = !DIEnumerator(name: "BUILT_IN_CACOSL", value: 260, isUnsigned: true)
!928 = !DIEnumerator(name: "BUILT_IN_CARG", value: 261, isUnsigned: true)
!929 = !DIEnumerator(name: "BUILT_IN_CARGF", value: 262, isUnsigned: true)
!930 = !DIEnumerator(name: "BUILT_IN_CARGL", value: 263, isUnsigned: true)
!931 = !DIEnumerator(name: "BUILT_IN_CASIN", value: 264, isUnsigned: true)
!932 = !DIEnumerator(name: "BUILT_IN_CASINF", value: 265, isUnsigned: true)
!933 = !DIEnumerator(name: "BUILT_IN_CASINH", value: 266, isUnsigned: true)
!934 = !DIEnumerator(name: "BUILT_IN_CASINHF", value: 267, isUnsigned: true)
!935 = !DIEnumerator(name: "BUILT_IN_CASINHL", value: 268, isUnsigned: true)
!936 = !DIEnumerator(name: "BUILT_IN_CASINL", value: 269, isUnsigned: true)
!937 = !DIEnumerator(name: "BUILT_IN_CATAN", value: 270, isUnsigned: true)
!938 = !DIEnumerator(name: "BUILT_IN_CATANF", value: 271, isUnsigned: true)
!939 = !DIEnumerator(name: "BUILT_IN_CATANH", value: 272, isUnsigned: true)
!940 = !DIEnumerator(name: "BUILT_IN_CATANHF", value: 273, isUnsigned: true)
!941 = !DIEnumerator(name: "BUILT_IN_CATANHL", value: 274, isUnsigned: true)
!942 = !DIEnumerator(name: "BUILT_IN_CATANL", value: 275, isUnsigned: true)
!943 = !DIEnumerator(name: "BUILT_IN_CCOS", value: 276, isUnsigned: true)
!944 = !DIEnumerator(name: "BUILT_IN_CCOSF", value: 277, isUnsigned: true)
!945 = !DIEnumerator(name: "BUILT_IN_CCOSH", value: 278, isUnsigned: true)
!946 = !DIEnumerator(name: "BUILT_IN_CCOSHF", value: 279, isUnsigned: true)
!947 = !DIEnumerator(name: "BUILT_IN_CCOSHL", value: 280, isUnsigned: true)
!948 = !DIEnumerator(name: "BUILT_IN_CCOSL", value: 281, isUnsigned: true)
!949 = !DIEnumerator(name: "BUILT_IN_CEXP", value: 282, isUnsigned: true)
!950 = !DIEnumerator(name: "BUILT_IN_CEXPF", value: 283, isUnsigned: true)
!951 = !DIEnumerator(name: "BUILT_IN_CEXPL", value: 284, isUnsigned: true)
!952 = !DIEnumerator(name: "BUILT_IN_CEXPI", value: 285, isUnsigned: true)
!953 = !DIEnumerator(name: "BUILT_IN_CEXPIF", value: 286, isUnsigned: true)
!954 = !DIEnumerator(name: "BUILT_IN_CEXPIL", value: 287, isUnsigned: true)
!955 = !DIEnumerator(name: "BUILT_IN_CIMAG", value: 288, isUnsigned: true)
!956 = !DIEnumerator(name: "BUILT_IN_CIMAGF", value: 289, isUnsigned: true)
!957 = !DIEnumerator(name: "BUILT_IN_CIMAGL", value: 290, isUnsigned: true)
!958 = !DIEnumerator(name: "BUILT_IN_CLOG", value: 291, isUnsigned: true)
!959 = !DIEnumerator(name: "BUILT_IN_CLOGF", value: 292, isUnsigned: true)
!960 = !DIEnumerator(name: "BUILT_IN_CLOGL", value: 293, isUnsigned: true)
!961 = !DIEnumerator(name: "BUILT_IN_CLOG10", value: 294, isUnsigned: true)
!962 = !DIEnumerator(name: "BUILT_IN_CLOG10F", value: 295, isUnsigned: true)
!963 = !DIEnumerator(name: "BUILT_IN_CLOG10L", value: 296, isUnsigned: true)
!964 = !DIEnumerator(name: "BUILT_IN_CONJ", value: 297, isUnsigned: true)
!965 = !DIEnumerator(name: "BUILT_IN_CONJF", value: 298, isUnsigned: true)
!966 = !DIEnumerator(name: "BUILT_IN_CONJL", value: 299, isUnsigned: true)
!967 = !DIEnumerator(name: "BUILT_IN_CPOW", value: 300, isUnsigned: true)
!968 = !DIEnumerator(name: "BUILT_IN_CPOWF", value: 301, isUnsigned: true)
!969 = !DIEnumerator(name: "BUILT_IN_CPOWL", value: 302, isUnsigned: true)
!970 = !DIEnumerator(name: "BUILT_IN_CPROJ", value: 303, isUnsigned: true)
!971 = !DIEnumerator(name: "BUILT_IN_CPROJF", value: 304, isUnsigned: true)
!972 = !DIEnumerator(name: "BUILT_IN_CPROJL", value: 305, isUnsigned: true)
!973 = !DIEnumerator(name: "BUILT_IN_CREAL", value: 306, isUnsigned: true)
!974 = !DIEnumerator(name: "BUILT_IN_CREALF", value: 307, isUnsigned: true)
!975 = !DIEnumerator(name: "BUILT_IN_CREALL", value: 308, isUnsigned: true)
!976 = !DIEnumerator(name: "BUILT_IN_CSIN", value: 309, isUnsigned: true)
!977 = !DIEnumerator(name: "BUILT_IN_CSINF", value: 310, isUnsigned: true)
!978 = !DIEnumerator(name: "BUILT_IN_CSINH", value: 311, isUnsigned: true)
!979 = !DIEnumerator(name: "BUILT_IN_CSINHF", value: 312, isUnsigned: true)
!980 = !DIEnumerator(name: "BUILT_IN_CSINHL", value: 313, isUnsigned: true)
!981 = !DIEnumerator(name: "BUILT_IN_CSINL", value: 314, isUnsigned: true)
!982 = !DIEnumerator(name: "BUILT_IN_CSQRT", value: 315, isUnsigned: true)
!983 = !DIEnumerator(name: "BUILT_IN_CSQRTF", value: 316, isUnsigned: true)
!984 = !DIEnumerator(name: "BUILT_IN_CSQRTL", value: 317, isUnsigned: true)
!985 = !DIEnumerator(name: "BUILT_IN_CTAN", value: 318, isUnsigned: true)
!986 = !DIEnumerator(name: "BUILT_IN_CTANF", value: 319, isUnsigned: true)
!987 = !DIEnumerator(name: "BUILT_IN_CTANH", value: 320, isUnsigned: true)
!988 = !DIEnumerator(name: "BUILT_IN_CTANHF", value: 321, isUnsigned: true)
!989 = !DIEnumerator(name: "BUILT_IN_CTANHL", value: 322, isUnsigned: true)
!990 = !DIEnumerator(name: "BUILT_IN_CTANL", value: 323, isUnsigned: true)
!991 = !DIEnumerator(name: "BUILT_IN_BCMP", value: 324, isUnsigned: true)
!992 = !DIEnumerator(name: "BUILT_IN_BCOPY", value: 325, isUnsigned: true)
!993 = !DIEnumerator(name: "BUILT_IN_BZERO", value: 326, isUnsigned: true)
!994 = !DIEnumerator(name: "BUILT_IN_INDEX", value: 327, isUnsigned: true)
!995 = !DIEnumerator(name: "BUILT_IN_MEMCHR", value: 328, isUnsigned: true)
!996 = !DIEnumerator(name: "BUILT_IN_MEMCMP", value: 329, isUnsigned: true)
!997 = !DIEnumerator(name: "BUILT_IN_MEMCPY", value: 330, isUnsigned: true)
!998 = !DIEnumerator(name: "BUILT_IN_MEMMOVE", value: 331, isUnsigned: true)
!999 = !DIEnumerator(name: "BUILT_IN_MEMPCPY", value: 332, isUnsigned: true)
!1000 = !DIEnumerator(name: "BUILT_IN_MEMSET", value: 333, isUnsigned: true)
!1001 = !DIEnumerator(name: "BUILT_IN_RINDEX", value: 334, isUnsigned: true)
!1002 = !DIEnumerator(name: "BUILT_IN_STPCPY", value: 335, isUnsigned: true)
!1003 = !DIEnumerator(name: "BUILT_IN_STPNCPY", value: 336, isUnsigned: true)
!1004 = !DIEnumerator(name: "BUILT_IN_STRCASECMP", value: 337, isUnsigned: true)
!1005 = !DIEnumerator(name: "BUILT_IN_STRCAT", value: 338, isUnsigned: true)
!1006 = !DIEnumerator(name: "BUILT_IN_STRCHR", value: 339, isUnsigned: true)
!1007 = !DIEnumerator(name: "BUILT_IN_STRCMP", value: 340, isUnsigned: true)
!1008 = !DIEnumerator(name: "BUILT_IN_STRCPY", value: 341, isUnsigned: true)
!1009 = !DIEnumerator(name: "BUILT_IN_STRCSPN", value: 342, isUnsigned: true)
!1010 = !DIEnumerator(name: "BUILT_IN_STRDUP", value: 343, isUnsigned: true)
!1011 = !DIEnumerator(name: "BUILT_IN_STRNDUP", value: 344, isUnsigned: true)
!1012 = !DIEnumerator(name: "BUILT_IN_STRLEN", value: 345, isUnsigned: true)
!1013 = !DIEnumerator(name: "BUILT_IN_STRNCASECMP", value: 346, isUnsigned: true)
!1014 = !DIEnumerator(name: "BUILT_IN_STRNCAT", value: 347, isUnsigned: true)
!1015 = !DIEnumerator(name: "BUILT_IN_STRNCMP", value: 348, isUnsigned: true)
!1016 = !DIEnumerator(name: "BUILT_IN_STRNCPY", value: 349, isUnsigned: true)
!1017 = !DIEnumerator(name: "BUILT_IN_STRPBRK", value: 350, isUnsigned: true)
!1018 = !DIEnumerator(name: "BUILT_IN_STRRCHR", value: 351, isUnsigned: true)
!1019 = !DIEnumerator(name: "BUILT_IN_STRSPN", value: 352, isUnsigned: true)
!1020 = !DIEnumerator(name: "BUILT_IN_STRSTR", value: 353, isUnsigned: true)
!1021 = !DIEnumerator(name: "BUILT_IN_FPRINTF", value: 354, isUnsigned: true)
!1022 = !DIEnumerator(name: "BUILT_IN_FPRINTF_UNLOCKED", value: 355, isUnsigned: true)
!1023 = !DIEnumerator(name: "BUILT_IN_PUTC", value: 356, isUnsigned: true)
!1024 = !DIEnumerator(name: "BUILT_IN_PUTC_UNLOCKED", value: 357, isUnsigned: true)
!1025 = !DIEnumerator(name: "BUILT_IN_FPUTC", value: 358, isUnsigned: true)
!1026 = !DIEnumerator(name: "BUILT_IN_FPUTC_UNLOCKED", value: 359, isUnsigned: true)
!1027 = !DIEnumerator(name: "BUILT_IN_FPUTS", value: 360, isUnsigned: true)
!1028 = !DIEnumerator(name: "BUILT_IN_FPUTS_UNLOCKED", value: 361, isUnsigned: true)
!1029 = !DIEnumerator(name: "BUILT_IN_FSCANF", value: 362, isUnsigned: true)
!1030 = !DIEnumerator(name: "BUILT_IN_FWRITE", value: 363, isUnsigned: true)
!1031 = !DIEnumerator(name: "BUILT_IN_FWRITE_UNLOCKED", value: 364, isUnsigned: true)
!1032 = !DIEnumerator(name: "BUILT_IN_PRINTF", value: 365, isUnsigned: true)
!1033 = !DIEnumerator(name: "BUILT_IN_PRINTF_UNLOCKED", value: 366, isUnsigned: true)
!1034 = !DIEnumerator(name: "BUILT_IN_PUTCHAR", value: 367, isUnsigned: true)
!1035 = !DIEnumerator(name: "BUILT_IN_PUTCHAR_UNLOCKED", value: 368, isUnsigned: true)
!1036 = !DIEnumerator(name: "BUILT_IN_PUTS", value: 369, isUnsigned: true)
!1037 = !DIEnumerator(name: "BUILT_IN_PUTS_UNLOCKED", value: 370, isUnsigned: true)
!1038 = !DIEnumerator(name: "BUILT_IN_SCANF", value: 371, isUnsigned: true)
!1039 = !DIEnumerator(name: "BUILT_IN_SNPRINTF", value: 372, isUnsigned: true)
!1040 = !DIEnumerator(name: "BUILT_IN_SPRINTF", value: 373, isUnsigned: true)
!1041 = !DIEnumerator(name: "BUILT_IN_SSCANF", value: 374, isUnsigned: true)
!1042 = !DIEnumerator(name: "BUILT_IN_VFPRINTF", value: 375, isUnsigned: true)
!1043 = !DIEnumerator(name: "BUILT_IN_VFSCANF", value: 376, isUnsigned: true)
!1044 = !DIEnumerator(name: "BUILT_IN_VPRINTF", value: 377, isUnsigned: true)
!1045 = !DIEnumerator(name: "BUILT_IN_VSCANF", value: 378, isUnsigned: true)
!1046 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF", value: 379, isUnsigned: true)
!1047 = !DIEnumerator(name: "BUILT_IN_VSPRINTF", value: 380, isUnsigned: true)
!1048 = !DIEnumerator(name: "BUILT_IN_VSSCANF", value: 381, isUnsigned: true)
!1049 = !DIEnumerator(name: "BUILT_IN_ISALNUM", value: 382, isUnsigned: true)
!1050 = !DIEnumerator(name: "BUILT_IN_ISALPHA", value: 383, isUnsigned: true)
!1051 = !DIEnumerator(name: "BUILT_IN_ISASCII", value: 384, isUnsigned: true)
!1052 = !DIEnumerator(name: "BUILT_IN_ISBLANK", value: 385, isUnsigned: true)
!1053 = !DIEnumerator(name: "BUILT_IN_ISCNTRL", value: 386, isUnsigned: true)
!1054 = !DIEnumerator(name: "BUILT_IN_ISDIGIT", value: 387, isUnsigned: true)
!1055 = !DIEnumerator(name: "BUILT_IN_ISGRAPH", value: 388, isUnsigned: true)
!1056 = !DIEnumerator(name: "BUILT_IN_ISLOWER", value: 389, isUnsigned: true)
!1057 = !DIEnumerator(name: "BUILT_IN_ISPRINT", value: 390, isUnsigned: true)
!1058 = !DIEnumerator(name: "BUILT_IN_ISPUNCT", value: 391, isUnsigned: true)
!1059 = !DIEnumerator(name: "BUILT_IN_ISSPACE", value: 392, isUnsigned: true)
!1060 = !DIEnumerator(name: "BUILT_IN_ISUPPER", value: 393, isUnsigned: true)
!1061 = !DIEnumerator(name: "BUILT_IN_ISXDIGIT", value: 394, isUnsigned: true)
!1062 = !DIEnumerator(name: "BUILT_IN_TOASCII", value: 395, isUnsigned: true)
!1063 = !DIEnumerator(name: "BUILT_IN_TOLOWER", value: 396, isUnsigned: true)
!1064 = !DIEnumerator(name: "BUILT_IN_TOUPPER", value: 397, isUnsigned: true)
!1065 = !DIEnumerator(name: "BUILT_IN_ISWALNUM", value: 398, isUnsigned: true)
!1066 = !DIEnumerator(name: "BUILT_IN_ISWALPHA", value: 399, isUnsigned: true)
!1067 = !DIEnumerator(name: "BUILT_IN_ISWBLANK", value: 400, isUnsigned: true)
!1068 = !DIEnumerator(name: "BUILT_IN_ISWCNTRL", value: 401, isUnsigned: true)
!1069 = !DIEnumerator(name: "BUILT_IN_ISWDIGIT", value: 402, isUnsigned: true)
!1070 = !DIEnumerator(name: "BUILT_IN_ISWGRAPH", value: 403, isUnsigned: true)
!1071 = !DIEnumerator(name: "BUILT_IN_ISWLOWER", value: 404, isUnsigned: true)
!1072 = !DIEnumerator(name: "BUILT_IN_ISWPRINT", value: 405, isUnsigned: true)
!1073 = !DIEnumerator(name: "BUILT_IN_ISWPUNCT", value: 406, isUnsigned: true)
!1074 = !DIEnumerator(name: "BUILT_IN_ISWSPACE", value: 407, isUnsigned: true)
!1075 = !DIEnumerator(name: "BUILT_IN_ISWUPPER", value: 408, isUnsigned: true)
!1076 = !DIEnumerator(name: "BUILT_IN_ISWXDIGIT", value: 409, isUnsigned: true)
!1077 = !DIEnumerator(name: "BUILT_IN_TOWLOWER", value: 410, isUnsigned: true)
!1078 = !DIEnumerator(name: "BUILT_IN_TOWUPPER", value: 411, isUnsigned: true)
!1079 = !DIEnumerator(name: "BUILT_IN_ABORT", value: 412, isUnsigned: true)
!1080 = !DIEnumerator(name: "BUILT_IN_ABS", value: 413, isUnsigned: true)
!1081 = !DIEnumerator(name: "BUILT_IN_AGGREGATE_INCOMING_ADDRESS", value: 414, isUnsigned: true)
!1082 = !DIEnumerator(name: "BUILT_IN_ALLOCA", value: 415, isUnsigned: true)
!1083 = !DIEnumerator(name: "BUILT_IN_APPLY", value: 416, isUnsigned: true)
!1084 = !DIEnumerator(name: "BUILT_IN_APPLY_ARGS", value: 417, isUnsigned: true)
!1085 = !DIEnumerator(name: "BUILT_IN_ARGS_INFO", value: 418, isUnsigned: true)
!1086 = !DIEnumerator(name: "BUILT_IN_BSWAP32", value: 419, isUnsigned: true)
!1087 = !DIEnumerator(name: "BUILT_IN_BSWAP64", value: 420, isUnsigned: true)
!1088 = !DIEnumerator(name: "BUILT_IN_CLEAR_CACHE", value: 421, isUnsigned: true)
!1089 = !DIEnumerator(name: "BUILT_IN_CALLOC", value: 422, isUnsigned: true)
!1090 = !DIEnumerator(name: "BUILT_IN_CLASSIFY_TYPE", value: 423, isUnsigned: true)
!1091 = !DIEnumerator(name: "BUILT_IN_CLZ", value: 424, isUnsigned: true)
!1092 = !DIEnumerator(name: "BUILT_IN_CLZIMAX", value: 425, isUnsigned: true)
!1093 = !DIEnumerator(name: "BUILT_IN_CLZL", value: 426, isUnsigned: true)
!1094 = !DIEnumerator(name: "BUILT_IN_CLZLL", value: 427, isUnsigned: true)
!1095 = !DIEnumerator(name: "BUILT_IN_CONSTANT_P", value: 428, isUnsigned: true)
!1096 = !DIEnumerator(name: "BUILT_IN_CTZ", value: 429, isUnsigned: true)
!1097 = !DIEnumerator(name: "BUILT_IN_CTZIMAX", value: 430, isUnsigned: true)
!1098 = !DIEnumerator(name: "BUILT_IN_CTZL", value: 431, isUnsigned: true)
!1099 = !DIEnumerator(name: "BUILT_IN_CTZLL", value: 432, isUnsigned: true)
!1100 = !DIEnumerator(name: "BUILT_IN_DCGETTEXT", value: 433, isUnsigned: true)
!1101 = !DIEnumerator(name: "BUILT_IN_DGETTEXT", value: 434, isUnsigned: true)
!1102 = !DIEnumerator(name: "BUILT_IN_DWARF_CFA", value: 435, isUnsigned: true)
!1103 = !DIEnumerator(name: "BUILT_IN_DWARF_SP_COLUMN", value: 436, isUnsigned: true)
!1104 = !DIEnumerator(name: "BUILT_IN_EH_RETURN", value: 437, isUnsigned: true)
!1105 = !DIEnumerator(name: "BUILT_IN_EH_RETURN_DATA_REGNO", value: 438, isUnsigned: true)
!1106 = !DIEnumerator(name: "BUILT_IN_EXECL", value: 439, isUnsigned: true)
!1107 = !DIEnumerator(name: "BUILT_IN_EXECLP", value: 440, isUnsigned: true)
!1108 = !DIEnumerator(name: "BUILT_IN_EXECLE", value: 441, isUnsigned: true)
!1109 = !DIEnumerator(name: "BUILT_IN_EXECV", value: 442, isUnsigned: true)
!1110 = !DIEnumerator(name: "BUILT_IN_EXECVP", value: 443, isUnsigned: true)
!1111 = !DIEnumerator(name: "BUILT_IN_EXECVE", value: 444, isUnsigned: true)
!1112 = !DIEnumerator(name: "BUILT_IN_EXIT", value: 445, isUnsigned: true)
!1113 = !DIEnumerator(name: "BUILT_IN_EXPECT", value: 446, isUnsigned: true)
!1114 = !DIEnumerator(name: "BUILT_IN_EXTEND_POINTER", value: 447, isUnsigned: true)
!1115 = !DIEnumerator(name: "BUILT_IN_EXTRACT_RETURN_ADDR", value: 448, isUnsigned: true)
!1116 = !DIEnumerator(name: "BUILT_IN_FFS", value: 449, isUnsigned: true)
!1117 = !DIEnumerator(name: "BUILT_IN_FFSIMAX", value: 450, isUnsigned: true)
!1118 = !DIEnumerator(name: "BUILT_IN_FFSL", value: 451, isUnsigned: true)
!1119 = !DIEnumerator(name: "BUILT_IN_FFSLL", value: 452, isUnsigned: true)
!1120 = !DIEnumerator(name: "BUILT_IN_FORK", value: 453, isUnsigned: true)
!1121 = !DIEnumerator(name: "BUILT_IN_FRAME_ADDRESS", value: 454, isUnsigned: true)
!1122 = !DIEnumerator(name: "BUILT_IN_FREE", value: 455, isUnsigned: true)
!1123 = !DIEnumerator(name: "BUILT_IN_FROB_RETURN_ADDR", value: 456, isUnsigned: true)
!1124 = !DIEnumerator(name: "BUILT_IN_GETTEXT", value: 457, isUnsigned: true)
!1125 = !DIEnumerator(name: "BUILT_IN_IMAXABS", value: 458, isUnsigned: true)
!1126 = !DIEnumerator(name: "BUILT_IN_INIT_DWARF_REG_SIZES", value: 459, isUnsigned: true)
!1127 = !DIEnumerator(name: "BUILT_IN_FINITE", value: 460, isUnsigned: true)
!1128 = !DIEnumerator(name: "BUILT_IN_FINITEF", value: 461, isUnsigned: true)
!1129 = !DIEnumerator(name: "BUILT_IN_FINITEL", value: 462, isUnsigned: true)
!1130 = !DIEnumerator(name: "BUILT_IN_FINITED32", value: 463, isUnsigned: true)
!1131 = !DIEnumerator(name: "BUILT_IN_FINITED64", value: 464, isUnsigned: true)
!1132 = !DIEnumerator(name: "BUILT_IN_FINITED128", value: 465, isUnsigned: true)
!1133 = !DIEnumerator(name: "BUILT_IN_FPCLASSIFY", value: 466, isUnsigned: true)
!1134 = !DIEnumerator(name: "BUILT_IN_ISFINITE", value: 467, isUnsigned: true)
!1135 = !DIEnumerator(name: "BUILT_IN_ISINF_SIGN", value: 468, isUnsigned: true)
!1136 = !DIEnumerator(name: "BUILT_IN_ISINF", value: 469, isUnsigned: true)
!1137 = !DIEnumerator(name: "BUILT_IN_ISINFF", value: 470, isUnsigned: true)
!1138 = !DIEnumerator(name: "BUILT_IN_ISINFL", value: 471, isUnsigned: true)
!1139 = !DIEnumerator(name: "BUILT_IN_ISINFD32", value: 472, isUnsigned: true)
!1140 = !DIEnumerator(name: "BUILT_IN_ISINFD64", value: 473, isUnsigned: true)
!1141 = !DIEnumerator(name: "BUILT_IN_ISINFD128", value: 474, isUnsigned: true)
!1142 = !DIEnumerator(name: "BUILT_IN_ISNAN", value: 475, isUnsigned: true)
!1143 = !DIEnumerator(name: "BUILT_IN_ISNANF", value: 476, isUnsigned: true)
!1144 = !DIEnumerator(name: "BUILT_IN_ISNANL", value: 477, isUnsigned: true)
!1145 = !DIEnumerator(name: "BUILT_IN_ISNAND32", value: 478, isUnsigned: true)
!1146 = !DIEnumerator(name: "BUILT_IN_ISNAND64", value: 479, isUnsigned: true)
!1147 = !DIEnumerator(name: "BUILT_IN_ISNAND128", value: 480, isUnsigned: true)
!1148 = !DIEnumerator(name: "BUILT_IN_ISNORMAL", value: 481, isUnsigned: true)
!1149 = !DIEnumerator(name: "BUILT_IN_ISGREATER", value: 482, isUnsigned: true)
!1150 = !DIEnumerator(name: "BUILT_IN_ISGREATEREQUAL", value: 483, isUnsigned: true)
!1151 = !DIEnumerator(name: "BUILT_IN_ISLESS", value: 484, isUnsigned: true)
!1152 = !DIEnumerator(name: "BUILT_IN_ISLESSEQUAL", value: 485, isUnsigned: true)
!1153 = !DIEnumerator(name: "BUILT_IN_ISLESSGREATER", value: 486, isUnsigned: true)
!1154 = !DIEnumerator(name: "BUILT_IN_ISUNORDERED", value: 487, isUnsigned: true)
!1155 = !DIEnumerator(name: "BUILT_IN_LABS", value: 488, isUnsigned: true)
!1156 = !DIEnumerator(name: "BUILT_IN_LLABS", value: 489, isUnsigned: true)
!1157 = !DIEnumerator(name: "BUILT_IN_LONGJMP", value: 490, isUnsigned: true)
!1158 = !DIEnumerator(name: "BUILT_IN_MALLOC", value: 491, isUnsigned: true)
!1159 = !DIEnumerator(name: "BUILT_IN_NEXT_ARG", value: 492, isUnsigned: true)
!1160 = !DIEnumerator(name: "BUILT_IN_PARITY", value: 493, isUnsigned: true)
!1161 = !DIEnumerator(name: "BUILT_IN_PARITYIMAX", value: 494, isUnsigned: true)
!1162 = !DIEnumerator(name: "BUILT_IN_PARITYL", value: 495, isUnsigned: true)
!1163 = !DIEnumerator(name: "BUILT_IN_PARITYLL", value: 496, isUnsigned: true)
!1164 = !DIEnumerator(name: "BUILT_IN_POPCOUNT", value: 497, isUnsigned: true)
!1165 = !DIEnumerator(name: "BUILT_IN_POPCOUNTIMAX", value: 498, isUnsigned: true)
!1166 = !DIEnumerator(name: "BUILT_IN_POPCOUNTL", value: 499, isUnsigned: true)
!1167 = !DIEnumerator(name: "BUILT_IN_POPCOUNTLL", value: 500, isUnsigned: true)
!1168 = !DIEnumerator(name: "BUILT_IN_PREFETCH", value: 501, isUnsigned: true)
!1169 = !DIEnumerator(name: "BUILT_IN_REALLOC", value: 502, isUnsigned: true)
!1170 = !DIEnumerator(name: "BUILT_IN_RETURN", value: 503, isUnsigned: true)
!1171 = !DIEnumerator(name: "BUILT_IN_RETURN_ADDRESS", value: 504, isUnsigned: true)
!1172 = !DIEnumerator(name: "BUILT_IN_SAVEREGS", value: 505, isUnsigned: true)
!1173 = !DIEnumerator(name: "BUILT_IN_SETJMP", value: 506, isUnsigned: true)
!1174 = !DIEnumerator(name: "BUILT_IN_STRFMON", value: 507, isUnsigned: true)
!1175 = !DIEnumerator(name: "BUILT_IN_STRFTIME", value: 508, isUnsigned: true)
!1176 = !DIEnumerator(name: "BUILT_IN_TRAP", value: 509, isUnsigned: true)
!1177 = !DIEnumerator(name: "BUILT_IN_UNREACHABLE", value: 510, isUnsigned: true)
!1178 = !DIEnumerator(name: "BUILT_IN_UNWIND_INIT", value: 511, isUnsigned: true)
!1179 = !DIEnumerator(name: "BUILT_IN_UPDATE_SETJMP_BUF", value: 512, isUnsigned: true)
!1180 = !DIEnumerator(name: "BUILT_IN_VA_COPY", value: 513, isUnsigned: true)
!1181 = !DIEnumerator(name: "BUILT_IN_VA_END", value: 514, isUnsigned: true)
!1182 = !DIEnumerator(name: "BUILT_IN_VA_START", value: 515, isUnsigned: true)
!1183 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK", value: 516, isUnsigned: true)
!1184 = !DIEnumerator(name: "BUILT_IN_VA_ARG_PACK_LEN", value: 517, isUnsigned: true)
!1185 = !DIEnumerator(name: "BUILT_IN__EXIT", value: 518, isUnsigned: true)
!1186 = !DIEnumerator(name: "BUILT_IN__EXIT2", value: 519, isUnsigned: true)
!1187 = !DIEnumerator(name: "BUILT_IN_INIT_TRAMPOLINE", value: 520, isUnsigned: true)
!1188 = !DIEnumerator(name: "BUILT_IN_ADJUST_TRAMPOLINE", value: 521, isUnsigned: true)
!1189 = !DIEnumerator(name: "BUILT_IN_NONLOCAL_GOTO", value: 522, isUnsigned: true)
!1190 = !DIEnumerator(name: "BUILT_IN_SETJMP_SETUP", value: 523, isUnsigned: true)
!1191 = !DIEnumerator(name: "BUILT_IN_SETJMP_DISPATCHER", value: 524, isUnsigned: true)
!1192 = !DIEnumerator(name: "BUILT_IN_SETJMP_RECEIVER", value: 525, isUnsigned: true)
!1193 = !DIEnumerator(name: "BUILT_IN_STACK_SAVE", value: 526, isUnsigned: true)
!1194 = !DIEnumerator(name: "BUILT_IN_STACK_RESTORE", value: 527, isUnsigned: true)
!1195 = !DIEnumerator(name: "BUILT_IN_OBJECT_SIZE", value: 528, isUnsigned: true)
!1196 = !DIEnumerator(name: "BUILT_IN_MEMCPY_CHK", value: 529, isUnsigned: true)
!1197 = !DIEnumerator(name: "BUILT_IN_MEMMOVE_CHK", value: 530, isUnsigned: true)
!1198 = !DIEnumerator(name: "BUILT_IN_MEMPCPY_CHK", value: 531, isUnsigned: true)
!1199 = !DIEnumerator(name: "BUILT_IN_MEMSET_CHK", value: 532, isUnsigned: true)
!1200 = !DIEnumerator(name: "BUILT_IN_STPCPY_CHK", value: 533, isUnsigned: true)
!1201 = !DIEnumerator(name: "BUILT_IN_STRCAT_CHK", value: 534, isUnsigned: true)
!1202 = !DIEnumerator(name: "BUILT_IN_STRCPY_CHK", value: 535, isUnsigned: true)
!1203 = !DIEnumerator(name: "BUILT_IN_STRNCAT_CHK", value: 536, isUnsigned: true)
!1204 = !DIEnumerator(name: "BUILT_IN_STRNCPY_CHK", value: 537, isUnsigned: true)
!1205 = !DIEnumerator(name: "BUILT_IN_SNPRINTF_CHK", value: 538, isUnsigned: true)
!1206 = !DIEnumerator(name: "BUILT_IN_SPRINTF_CHK", value: 539, isUnsigned: true)
!1207 = !DIEnumerator(name: "BUILT_IN_VSNPRINTF_CHK", value: 540, isUnsigned: true)
!1208 = !DIEnumerator(name: "BUILT_IN_VSPRINTF_CHK", value: 541, isUnsigned: true)
!1209 = !DIEnumerator(name: "BUILT_IN_FPRINTF_CHK", value: 542, isUnsigned: true)
!1210 = !DIEnumerator(name: "BUILT_IN_PRINTF_CHK", value: 543, isUnsigned: true)
!1211 = !DIEnumerator(name: "BUILT_IN_VFPRINTF_CHK", value: 544, isUnsigned: true)
!1212 = !DIEnumerator(name: "BUILT_IN_VPRINTF_CHK", value: 545, isUnsigned: true)
!1213 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_ENTER", value: 546, isUnsigned: true)
!1214 = !DIEnumerator(name: "BUILT_IN_PROFILE_FUNC_EXIT", value: 547, isUnsigned: true)
!1215 = !DIEnumerator(name: "BUILT_IN_EMUTLS_GET_ADDRESS", value: 548, isUnsigned: true)
!1216 = !DIEnumerator(name: "BUILT_IN_EMUTLS_REGISTER_COMMON", value: 549, isUnsigned: true)
!1217 = !DIEnumerator(name: "BUILT_IN_UNWIND_RESUME", value: 550, isUnsigned: true)
!1218 = !DIEnumerator(name: "BUILT_IN_CXA_END_CLEANUP", value: 551, isUnsigned: true)
!1219 = !DIEnumerator(name: "BUILT_IN_EH_POINTER", value: 552, isUnsigned: true)
!1220 = !DIEnumerator(name: "BUILT_IN_EH_FILTER", value: 553, isUnsigned: true)
!1221 = !DIEnumerator(name: "BUILT_IN_EH_COPY_VALUES", value: 554, isUnsigned: true)
!1222 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_N", value: 555, isUnsigned: true)
!1223 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_1", value: 556, isUnsigned: true)
!1224 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_2", value: 557, isUnsigned: true)
!1225 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_4", value: 558, isUnsigned: true)
!1226 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_8", value: 559, isUnsigned: true)
!1227 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_ADD_16", value: 560, isUnsigned: true)
!1228 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_N", value: 561, isUnsigned: true)
!1229 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_1", value: 562, isUnsigned: true)
!1230 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_2", value: 563, isUnsigned: true)
!1231 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_4", value: 564, isUnsigned: true)
!1232 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_8", value: 565, isUnsigned: true)
!1233 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_SUB_16", value: 566, isUnsigned: true)
!1234 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_N", value: 567, isUnsigned: true)
!1235 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_1", value: 568, isUnsigned: true)
!1236 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_2", value: 569, isUnsigned: true)
!1237 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_4", value: 570, isUnsigned: true)
!1238 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_8", value: 571, isUnsigned: true)
!1239 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_OR_16", value: 572, isUnsigned: true)
!1240 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_N", value: 573, isUnsigned: true)
!1241 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_1", value: 574, isUnsigned: true)
!1242 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_2", value: 575, isUnsigned: true)
!1243 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_4", value: 576, isUnsigned: true)
!1244 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_8", value: 577, isUnsigned: true)
!1245 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_AND_16", value: 578, isUnsigned: true)
!1246 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_N", value: 579, isUnsigned: true)
!1247 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_1", value: 580, isUnsigned: true)
!1248 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_2", value: 581, isUnsigned: true)
!1249 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_4", value: 582, isUnsigned: true)
!1250 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_8", value: 583, isUnsigned: true)
!1251 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_XOR_16", value: 584, isUnsigned: true)
!1252 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_N", value: 585, isUnsigned: true)
!1253 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_1", value: 586, isUnsigned: true)
!1254 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_2", value: 587, isUnsigned: true)
!1255 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_4", value: 588, isUnsigned: true)
!1256 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_8", value: 589, isUnsigned: true)
!1257 = !DIEnumerator(name: "BUILT_IN_FETCH_AND_NAND_16", value: 590, isUnsigned: true)
!1258 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_N", value: 591, isUnsigned: true)
!1259 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_1", value: 592, isUnsigned: true)
!1260 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_2", value: 593, isUnsigned: true)
!1261 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_4", value: 594, isUnsigned: true)
!1262 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_8", value: 595, isUnsigned: true)
!1263 = !DIEnumerator(name: "BUILT_IN_ADD_AND_FETCH_16", value: 596, isUnsigned: true)
!1264 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_N", value: 597, isUnsigned: true)
!1265 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_1", value: 598, isUnsigned: true)
!1266 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_2", value: 599, isUnsigned: true)
!1267 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_4", value: 600, isUnsigned: true)
!1268 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_8", value: 601, isUnsigned: true)
!1269 = !DIEnumerator(name: "BUILT_IN_SUB_AND_FETCH_16", value: 602, isUnsigned: true)
!1270 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_N", value: 603, isUnsigned: true)
!1271 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_1", value: 604, isUnsigned: true)
!1272 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_2", value: 605, isUnsigned: true)
!1273 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_4", value: 606, isUnsigned: true)
!1274 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_8", value: 607, isUnsigned: true)
!1275 = !DIEnumerator(name: "BUILT_IN_OR_AND_FETCH_16", value: 608, isUnsigned: true)
!1276 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_N", value: 609, isUnsigned: true)
!1277 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_1", value: 610, isUnsigned: true)
!1278 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_2", value: 611, isUnsigned: true)
!1279 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_4", value: 612, isUnsigned: true)
!1280 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_8", value: 613, isUnsigned: true)
!1281 = !DIEnumerator(name: "BUILT_IN_AND_AND_FETCH_16", value: 614, isUnsigned: true)
!1282 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_N", value: 615, isUnsigned: true)
!1283 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_1", value: 616, isUnsigned: true)
!1284 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_2", value: 617, isUnsigned: true)
!1285 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_4", value: 618, isUnsigned: true)
!1286 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_8", value: 619, isUnsigned: true)
!1287 = !DIEnumerator(name: "BUILT_IN_XOR_AND_FETCH_16", value: 620, isUnsigned: true)
!1288 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_N", value: 621, isUnsigned: true)
!1289 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_1", value: 622, isUnsigned: true)
!1290 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_2", value: 623, isUnsigned: true)
!1291 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_4", value: 624, isUnsigned: true)
!1292 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_8", value: 625, isUnsigned: true)
!1293 = !DIEnumerator(name: "BUILT_IN_NAND_AND_FETCH_16", value: 626, isUnsigned: true)
!1294 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_N", value: 627, isUnsigned: true)
!1295 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_1", value: 628, isUnsigned: true)
!1296 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_2", value: 629, isUnsigned: true)
!1297 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_4", value: 630, isUnsigned: true)
!1298 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_8", value: 631, isUnsigned: true)
!1299 = !DIEnumerator(name: "BUILT_IN_BOOL_COMPARE_AND_SWAP_16", value: 632, isUnsigned: true)
!1300 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_N", value: 633, isUnsigned: true)
!1301 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_1", value: 634, isUnsigned: true)
!1302 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_2", value: 635, isUnsigned: true)
!1303 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_4", value: 636, isUnsigned: true)
!1304 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_8", value: 637, isUnsigned: true)
!1305 = !DIEnumerator(name: "BUILT_IN_VAL_COMPARE_AND_SWAP_16", value: 638, isUnsigned: true)
!1306 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_N", value: 639, isUnsigned: true)
!1307 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_1", value: 640, isUnsigned: true)
!1308 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_2", value: 641, isUnsigned: true)
!1309 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_4", value: 642, isUnsigned: true)
!1310 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_8", value: 643, isUnsigned: true)
!1311 = !DIEnumerator(name: "BUILT_IN_LOCK_TEST_AND_SET_16", value: 644, isUnsigned: true)
!1312 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_N", value: 645, isUnsigned: true)
!1313 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_1", value: 646, isUnsigned: true)
!1314 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_2", value: 647, isUnsigned: true)
!1315 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_4", value: 648, isUnsigned: true)
!1316 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_8", value: 649, isUnsigned: true)
!1317 = !DIEnumerator(name: "BUILT_IN_LOCK_RELEASE_16", value: 650, isUnsigned: true)
!1318 = !DIEnumerator(name: "BUILT_IN_SYNCHRONIZE", value: 651, isUnsigned: true)
!1319 = !DIEnumerator(name: "BUILT_IN_OMP_GET_THREAD_NUM", value: 652, isUnsigned: true)
!1320 = !DIEnumerator(name: "BUILT_IN_OMP_GET_NUM_THREADS", value: 653, isUnsigned: true)
!1321 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_START", value: 654, isUnsigned: true)
!1322 = !DIEnumerator(name: "BUILT_IN_GOMP_ATOMIC_END", value: 655, isUnsigned: true)
!1323 = !DIEnumerator(name: "BUILT_IN_GOMP_BARRIER", value: 656, isUnsigned: true)
!1324 = !DIEnumerator(name: "BUILT_IN_GOMP_TASKWAIT", value: 657, isUnsigned: true)
!1325 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_START", value: 658, isUnsigned: true)
!1326 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_END", value: 659, isUnsigned: true)
!1327 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_START", value: 660, isUnsigned: true)
!1328 = !DIEnumerator(name: "BUILT_IN_GOMP_CRITICAL_NAME_END", value: 661, isUnsigned: true)
!1329 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_START", value: 662, isUnsigned: true)
!1330 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_START", value: 663, isUnsigned: true)
!1331 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_START", value: 664, isUnsigned: true)
!1332 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_START", value: 665, isUnsigned: true)
!1333 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_START", value: 666, isUnsigned: true)
!1334 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_START", value: 667, isUnsigned: true)
!1335 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_START", value: 668, isUnsigned: true)
!1336 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_START", value: 669, isUnsigned: true)
!1337 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_STATIC_NEXT", value: 670, isUnsigned: true)
!1338 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_DYNAMIC_NEXT", value: 671, isUnsigned: true)
!1339 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_GUIDED_NEXT", value: 672, isUnsigned: true)
!1340 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_RUNTIME_NEXT", value: 673, isUnsigned: true)
!1341 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_STATIC_NEXT", value: 674, isUnsigned: true)
!1342 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_DYNAMIC_NEXT", value: 675, isUnsigned: true)
!1343 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_GUIDED_NEXT", value: 676, isUnsigned: true)
!1344 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ORDERED_RUNTIME_NEXT", value: 677, isUnsigned: true)
!1345 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_START", value: 678, isUnsigned: true)
!1346 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_START", value: 679, isUnsigned: true)
!1347 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_START", value: 680, isUnsigned: true)
!1348 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_START", value: 681, isUnsigned: true)
!1349 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_START", value: 682, isUnsigned: true)
!1350 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_START", value: 683, isUnsigned: true)
!1351 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_START", value: 684, isUnsigned: true)
!1352 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_START", value: 685, isUnsigned: true)
!1353 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_STATIC_NEXT", value: 686, isUnsigned: true)
!1354 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_DYNAMIC_NEXT", value: 687, isUnsigned: true)
!1355 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_GUIDED_NEXT", value: 688, isUnsigned: true)
!1356 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_RUNTIME_NEXT", value: 689, isUnsigned: true)
!1357 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_STATIC_NEXT", value: 690, isUnsigned: true)
!1358 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_DYNAMIC_NEXT", value: 691, isUnsigned: true)
!1359 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_GUIDED_NEXT", value: 692, isUnsigned: true)
!1360 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_ULL_ORDERED_RUNTIME_NEXT", value: 693, isUnsigned: true)
!1361 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_STATIC_START", value: 694, isUnsigned: true)
!1362 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_DYNAMIC_START", value: 695, isUnsigned: true)
!1363 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_GUIDED_START", value: 696, isUnsigned: true)
!1364 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_LOOP_RUNTIME_START", value: 697, isUnsigned: true)
!1365 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END", value: 698, isUnsigned: true)
!1366 = !DIEnumerator(name: "BUILT_IN_GOMP_LOOP_END_NOWAIT", value: 699, isUnsigned: true)
!1367 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_START", value: 700, isUnsigned: true)
!1368 = !DIEnumerator(name: "BUILT_IN_GOMP_ORDERED_END", value: 701, isUnsigned: true)
!1369 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_START", value: 702, isUnsigned: true)
!1370 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_END", value: 703, isUnsigned: true)
!1371 = !DIEnumerator(name: "BUILT_IN_GOMP_TASK", value: 704, isUnsigned: true)
!1372 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_START", value: 705, isUnsigned: true)
!1373 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_NEXT", value: 706, isUnsigned: true)
!1374 = !DIEnumerator(name: "BUILT_IN_GOMP_PARALLEL_SECTIONS_START", value: 707, isUnsigned: true)
!1375 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END", value: 708, isUnsigned: true)
!1376 = !DIEnumerator(name: "BUILT_IN_GOMP_SECTIONS_END_NOWAIT", value: 709, isUnsigned: true)
!1377 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_START", value: 710, isUnsigned: true)
!1378 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_START", value: 711, isUnsigned: true)
!1379 = !DIEnumerator(name: "BUILT_IN_GOMP_SINGLE_COPY_END", value: 712, isUnsigned: true)
!1380 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MIN", value: 713, isUnsigned: true)
!1381 = !DIEnumerator(name: "BUILT_IN_COMPLEX_MUL_MAX", value: 716, isUnsigned: true)
!1382 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MIN", value: 717, isUnsigned: true)
!1383 = !DIEnumerator(name: "BUILT_IN_COMPLEX_DIV_MAX", value: 720, isUnsigned: true)
!1384 = !DIEnumerator(name: "END_BUILTINS", value: 721, isUnsigned: true)
!1385 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !318, line: 3410, baseType: !7, size: 32, elements: !1386)
!1386 = !{!1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518}
!1387 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!1388 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!1389 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!1390 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!1391 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!1392 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!1393 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!1394 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!1395 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!1396 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!1397 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!1398 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!1399 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!1400 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!1401 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!1402 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!1403 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!1404 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!1405 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!1406 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!1407 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!1408 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!1409 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!1410 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!1411 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!1412 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!1413 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!1414 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!1415 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!1416 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!1417 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!1418 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!1419 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!1420 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!1421 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!1422 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!1423 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!1424 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!1425 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!1426 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!1427 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!1428 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!1429 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!1430 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!1431 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!1432 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!1433 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!1434 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!1435 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!1436 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!1437 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!1438 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!1439 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!1440 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!1441 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!1442 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!1443 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!1444 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!1445 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!1446 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!1447 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!1448 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!1449 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!1450 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!1451 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!1452 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!1453 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!1454 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!1455 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!1456 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!1457 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!1458 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!1459 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!1460 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!1461 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!1462 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!1463 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!1464 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!1465 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!1466 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!1467 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!1468 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!1469 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!1470 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!1471 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!1472 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!1473 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!1474 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!1475 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!1476 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!1477 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!1478 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!1479 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!1480 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!1481 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!1482 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!1483 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!1484 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!1485 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!1486 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!1487 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!1488 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!1489 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!1490 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!1491 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!1492 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!1493 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!1494 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!1495 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!1496 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!1497 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!1498 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!1499 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!1500 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!1501 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!1502 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!1503 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!1504 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!1505 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!1506 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!1507 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!1508 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!1509 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!1510 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!1511 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!1512 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!1513 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!1514 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!1515 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!1516 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!1517 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!1518 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!1519 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !594, line: 727, baseType: !7, size: 32, elements: !1520)
!1520 = !{!1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544}
!1521 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!1522 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!1523 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!1524 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!1525 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!1526 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!1527 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!1528 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!1529 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!1530 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!1531 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!1532 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!1533 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!1534 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!1535 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!1536 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!1537 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!1538 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!1539 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!1540 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!1541 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!1542 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!1543 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!1544 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!1545 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !1546, line: 119, baseType: !7, size: 32, elements: !1547)
!1546 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1547 = !{!1548, !1549, !1550, !1551}
!1548 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!1549 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!1550 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!1551 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!1552 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !594, line: 80, baseType: !7, size: 32, elements: !1553)
!1553 = !{!1554, !1555, !1556, !1557}
!1554 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!1555 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!1556 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!1557 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!1558 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !526, line: 295, baseType: !7, size: 32, elements: !1559)
!1559 = !{!1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571}
!1560 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!1561 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!1562 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!1563 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!1564 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!1565 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!1566 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!1567 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!1568 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!1569 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!1570 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!1571 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!1572 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !318, line: 58, baseType: !7, size: 32, elements: !1573)
!1573 = !{!1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584}
!1574 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1575 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1576 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1577 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1578 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1579 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1580 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1581 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1582 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1583 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1584 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1585 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_debug_subcode", file: !594, line: 124, baseType: !7, size: 32, elements: !1586)
!1586 = !{!1587}
!1587 = !DIEnumerator(name: "GIMPLE_DEBUG_BIND", value: 0, isUnsigned: true)
!1588 = !{!317, !1589, !1590, !1656, !1661, !3017, !3018, !3031, !7, !3036, !632, !189, !1960, !1631, !1927, !3048, !1552, !1643, !3050, !1776, !1786, !3042, !1926, !1625}
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!1590 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !1591, line: 47, baseType: !1592)
!1591 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1593, size: 64)
!1593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !1594, line: 75, size: 256, elements: !1595)
!1594 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1595 = !{!1596, !1611, !1612, !1613}
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1593, file: !1594, line: 76, baseType: !1597, size: 64)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !1594, line: 68, baseType: !1599)
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !1594, line: 63, size: 320, elements: !1600)
!1600 = !{!1601, !1603, !1604, !1605}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1599, file: !1594, line: 64, baseType: !1602, size: 64)
!1602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1599, size: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1599, file: !1594, line: 65, baseType: !1602, size: 64, offset: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1599, file: !1594, line: 66, baseType: !7, size: 32, offset: 128)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1599, file: !1594, line: 67, baseType: !1606, size: 128, offset: 192)
!1606 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1607, size: 128, elements: !1609)
!1607 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !1594, line: 29, baseType: !1608)
!1608 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!1609 = !{!1610}
!1610 = !DISubrange(count: 2)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !1593, file: !1594, line: 77, baseType: !1597, size: 64, offset: 64)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !1593, file: !1594, line: 78, baseType: !7, size: 32, offset: 128)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1593, file: !1594, line: 79, baseType: !1614, size: 64, offset: 192)
!1614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1615, size: 64)
!1615 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !1594, line: 49, baseType: !1616)
!1616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !1594, line: 45, size: 832, elements: !1617)
!1617 = !{!1618, !1619, !1620}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1616, file: !1594, line: 46, baseType: !1602, size: 64)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !1616, file: !1594, line: 47, baseType: !1592, size: 64, offset: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !1616, file: !1594, line: 48, baseType: !1621, size: 704, offset: 128)
!1621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !1622, line: 164, size: 704, elements: !1623)
!1622 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1623 = !{!1624, !1626, !1638, !1639, !1640, !1641, !1642, !1644, !1648, !1652, !1653, !1654, !1655}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !1621, file: !1622, line: 166, baseType: !1625, size: 64)
!1625 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !1621, file: !1622, line: 167, baseType: !1627, size: 64, offset: 64)
!1627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1628, size: 64)
!1628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !1622, line: 157, size: 192, elements: !1629)
!1629 = !{!1630, !1633, !1634}
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !1628, file: !1622, line: 159, baseType: !1631, size: 64)
!1631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1632, size: 64)
!1632 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1628, file: !1622, line: 160, baseType: !1627, size: 64, offset: 64)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !1628, file: !1622, line: 161, baseType: !1635, size: 32, offset: 128)
!1635 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1632, size: 32, elements: !1636)
!1636 = !{!1637}
!1637 = !DISubrange(count: 4)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !1621, file: !1622, line: 168, baseType: !1631, size: 64, offset: 128)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1621, file: !1622, line: 169, baseType: !1631, size: 64, offset: 192)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !1621, file: !1622, line: 170, baseType: !1631, size: 64, offset: 256)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !1621, file: !1622, line: 171, baseType: !1625, size: 64, offset: 320)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !1621, file: !1622, line: 172, baseType: !1643, size: 32, offset: 384)
!1643 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !1621, file: !1622, line: 176, baseType: !1645, size: 64, offset: 448)
!1645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!1646 = !DISubroutineType(types: !1647)
!1647 = !{!1627, !1589, !1625}
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !1621, file: !1622, line: 177, baseType: !1649, size: 64, offset: 512)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!1650 = !DISubroutineType(types: !1651)
!1651 = !{null, !1589, !1627}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !1621, file: !1622, line: 178, baseType: !1589, size: 64, offset: 576)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !1621, file: !1622, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !1621, file: !1622, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !1621, file: !1622, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1658)
!1658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "expr_hash_elt", file: !3, line: 132, size: 640, elements: !1659)
!1659 = !{!1660, !2984, !3014, !3015, !3016}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1658, file: !3, line: 135, baseType: !1661, size: 64)
!1661 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !1591, line: 56, baseType: !1662)
!1662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1663, size: 64)
!1663 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !318, line: 3371, size: 1792, elements: !1664)
!1664 = !{!1665, !1698, !1704, !1715, !1734, !1745, !1750, !1759, !1765, !1779, !1791, !1829, !2316, !2344, !2361, !2362, !2367, !2376, !2382, !2387, !2391, !2395, !2635, !2682, !2688, !2694, !2701, !2714, !2728, !2745, !2757, !2779, !2794, !2966}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1663, file: !318, line: 3372, baseType: !1666, size: 64)
!1666 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !318, line: 360, size: 64, elements: !1667)
!1667 = !{!1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1666, file: !318, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !1666, file: !318, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !1666, file: !318, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !1666, file: !318, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !1666, file: !318, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !1666, file: !318, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !1666, file: !318, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !1666, file: !318, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !1666, file: !318, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !1666, file: !318, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !1666, file: !318, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !1666, file: !318, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !1666, file: !318, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !1666, file: !318, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !1666, file: !318, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !1666, file: !318, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !1666, file: !318, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !1666, file: !318, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1666, file: !318, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1666, file: !318, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1666, file: !318, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1666, file: !318, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1666, file: !318, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1666, file: !318, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1666, file: !318, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1666, file: !318, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !1666, file: !318, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !1666, file: !318, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !1666, file: !318, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !1666, file: !318, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1663, file: !318, line: 3373, baseType: !1699, size: 192)
!1699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !318, line: 402, size: 192, elements: !1700)
!1700 = !{!1701, !1702, !1703}
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1699, file: !318, line: 403, baseType: !1666, size: 64)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1699, file: !318, line: 404, baseType: !1661, size: 64, offset: 64)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1699, file: !318, line: 405, baseType: !1661, size: 64, offset: 128)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1663, file: !318, line: 3374, baseType: !1705, size: 320)
!1705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !318, line: 1384, size: 320, elements: !1706)
!1706 = !{!1707, !1708}
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1705, file: !318, line: 1385, baseType: !1699, size: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1705, file: !318, line: 1386, baseType: !1709, size: 128, offset: 192)
!1709 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1710, line: 58, baseType: !1711)
!1710 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1711 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1710, line: 54, size: 128, elements: !1712)
!1712 = !{!1713, !1714}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1711, file: !1710, line: 56, baseType: !1608, size: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1711, file: !1710, line: 57, baseType: !1625, size: 64, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !1663, file: !318, line: 3375, baseType: !1716, size: 256)
!1716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !318, line: 1397, size: 256, elements: !1717)
!1717 = !{!1718, !1719}
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1716, file: !318, line: 1398, baseType: !1699, size: 192)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1716, file: !318, line: 1399, baseType: !1720, size: 64, offset: 192)
!1720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1721, size: 64)
!1721 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1722, line: 52, size: 256, elements: !1723)
!1722 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1723 = !{!1724, !1725, !1726, !1727, !1728, !1729, !1730}
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1721, file: !1722, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1721, file: !1722, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1721, file: !1722, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1721, file: !1722, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1721, file: !1722, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1721, file: !1722, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1721, file: !1722, line: 62, baseType: !1731, size: 192, offset: 64)
!1731 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1608, size: 192, elements: !1732)
!1732 = !{!1733}
!1733 = !DISubrange(count: 3)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !1663, file: !318, line: 3376, baseType: !1735, size: 256)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !318, line: 1408, size: 256, elements: !1736)
!1736 = !{!1737, !1738}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1735, file: !318, line: 1409, baseType: !1699, size: 192)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1735, file: !318, line: 1410, baseType: !1739, size: 64, offset: 192)
!1739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1740, size: 64)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1741, line: 27, size: 192, elements: !1742)
!1741 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1742 = !{!1743, !1744}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1740, file: !1741, line: 29, baseType: !1709, size: 128)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1740, file: !1741, line: 30, baseType: !189, size: 32, offset: 128)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !1663, file: !318, line: 3377, baseType: !1746, size: 256)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !318, line: 1437, size: 256, elements: !1747)
!1747 = !{!1748, !1749}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1746, file: !318, line: 1438, baseType: !1699, size: 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1746, file: !318, line: 1439, baseType: !1661, size: 64, offset: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1663, file: !318, line: 3378, baseType: !1751, size: 256)
!1751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !318, line: 1418, size: 256, elements: !1752)
!1752 = !{!1753, !1754, !1755}
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1751, file: !318, line: 1419, baseType: !1699, size: 192)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1751, file: !318, line: 1420, baseType: !1643, size: 32, offset: 192)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1751, file: !318, line: 1421, baseType: !1756, size: 8, offset: 224)
!1756 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1632, size: 8, elements: !1757)
!1757 = !{!1758}
!1758 = !DISubrange(count: 1)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !1663, file: !318, line: 3379, baseType: !1760, size: 320)
!1760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !318, line: 1428, size: 320, elements: !1761)
!1761 = !{!1762, !1763, !1764}
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1760, file: !318, line: 1429, baseType: !1699, size: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1760, file: !318, line: 1430, baseType: !1661, size: 64, offset: 192)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1760, file: !318, line: 1431, baseType: !1661, size: 64, offset: 256)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !1663, file: !318, line: 3380, baseType: !1766, size: 320)
!1766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !318, line: 1460, size: 320, elements: !1767)
!1767 = !{!1768, !1769}
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1766, file: !318, line: 1461, baseType: !1699, size: 192)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1766, file: !318, line: 1462, baseType: !1770, size: 128, offset: 192)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1771, line: 31, size: 128, elements: !1772)
!1771 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1772 = !{!1773, !1777, !1778}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1770, file: !1771, line: 32, baseType: !1774, size: 64)
!1774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1775, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1776)
!1776 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1770, file: !1771, line: 33, baseType: !7, size: 32, offset: 64)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1770, file: !1771, line: 34, baseType: !7, size: 32, offset: 96)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !1663, file: !318, line: 3381, baseType: !1780, size: 384)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !318, line: 2507, size: 384, elements: !1781)
!1781 = !{!1782, !1783, !1788, !1789, !1790}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1780, file: !318, line: 2508, baseType: !1699, size: 192)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1780, file: !318, line: 2509, baseType: !1784, size: 32, offset: 192)
!1784 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1785, line: 58, baseType: !1786)
!1785 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1786 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1787, line: 44, baseType: !7)
!1787 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1780, file: !318, line: 2510, baseType: !7, size: 32, offset: 224)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1780, file: !318, line: 2511, baseType: !1661, size: 64, offset: 256)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1780, file: !318, line: 2512, baseType: !1661, size: 64, offset: 320)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !1663, file: !318, line: 3382, baseType: !1792, size: 896)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !318, line: 2652, size: 896, elements: !1793)
!1793 = !{!1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1792, file: !318, line: 2653, baseType: !1780, size: 384)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1792, file: !318, line: 2654, baseType: !1661, size: 64, offset: 384)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1792, file: !318, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1792, file: !318, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1792, file: !318, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1792, file: !318, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1792, file: !318, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1792, file: !318, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1792, file: !318, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1792, file: !318, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1792, file: !318, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1792, file: !318, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1792, file: !318, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1792, file: !318, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1792, file: !318, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1792, file: !318, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1792, file: !318, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1792, file: !318, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1792, file: !318, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1792, file: !318, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1792, file: !318, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1792, file: !318, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1792, file: !318, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1792, file: !318, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1792, file: !318, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1792, file: !318, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1792, file: !318, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1792, file: !318, line: 2703, baseType: !7, size: 32, offset: 512)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1792, file: !318, line: 2705, baseType: !1661, size: 64, offset: 576)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1792, file: !318, line: 2706, baseType: !1661, size: 64, offset: 640)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1792, file: !318, line: 2707, baseType: !1661, size: 64, offset: 704)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1792, file: !318, line: 2708, baseType: !1661, size: 64, offset: 768)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1792, file: !318, line: 2711, baseType: !1827, size: 64, offset: 832)
!1827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1828, size: 64)
!1828 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !318, line: 2711, flags: DIFlagFwdDecl)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !1663, file: !318, line: 3383, baseType: !1830, size: 960)
!1830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !318, line: 2756, size: 960, elements: !1831)
!1831 = !{!1832, !1833}
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1830, file: !318, line: 2757, baseType: !1792, size: 896)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1830, file: !318, line: 2758, baseType: !1834, size: 64, offset: 896)
!1834 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !1591, line: 50, baseType: !1835)
!1835 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1836, size: 64)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !1837, line: 240, size: 384, elements: !1838)
!1837 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1838 = !{!1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1836, file: !1837, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1836, file: !1837, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !1836, file: !1837, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !1836, file: !1837, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !1836, file: !1837, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !1836, file: !1837, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !1836, file: !1837, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1836, file: !1837, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !1836, file: !1837, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !1836, file: !1837, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1836, file: !1837, line: 321, baseType: !1850, size: 320, offset: 64)
!1850 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !1837, line: 315, size: 320, elements: !1851)
!1851 = !{!1852, !2249, !2251, !2314, !2315}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1850, file: !1837, line: 316, baseType: !1853, size: 64)
!1853 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1854, size: 64, elements: !1757)
!1854 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !1837, line: 183, baseType: !1855)
!1855 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !1837, line: 166, size: 64, elements: !1856)
!1856 = !{!1857, !1858, !1859, !1862, !1863, !1871, !1872, !1884, !1887, !1888, !1889, !2226, !2239, !2246}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !1855, file: !1837, line: 168, baseType: !1643, size: 32)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !1855, file: !1837, line: 169, baseType: !7, size: 32)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !1855, file: !1837, line: 170, baseType: !1860, size: 64)
!1860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1861, size: 64)
!1861 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1632)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !1855, file: !1837, line: 171, baseType: !1834, size: 64)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !1855, file: !1837, line: 172, baseType: !1864, size: 64)
!1864 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !1591, line: 53, baseType: !1865)
!1865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1866, size: 64)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !1837, line: 359, size: 128, elements: !1867)
!1867 = !{!1868, !1869}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !1866, file: !1837, line: 360, baseType: !1643, size: 32)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !1866, file: !1837, line: 361, baseType: !1870, size: 64, offset: 64)
!1870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1834, size: 64, elements: !1757)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !1855, file: !1837, line: 173, baseType: !189, size: 32)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !1855, file: !1837, line: 174, baseType: !1873, size: 32)
!1873 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !1837, line: 133, baseType: !1874)
!1874 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1837, line: 115, size: 32, elements: !1875)
!1875 = !{!1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883}
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !1874, file: !1837, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !1874, file: !1837, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !1874, file: !1837, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !1874, file: !1837, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !1874, file: !1837, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !1874, file: !1837, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !1874, file: !1837, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !1874, file: !1837, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !1855, file: !1837, line: 175, baseType: !1885, size: 64)
!1885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1886, size: 64)
!1886 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !1837, line: 175, flags: DIFlagFwdDecl)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !1855, file: !1837, line: 176, baseType: !1592, size: 64)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !1855, file: !1837, line: 177, baseType: !1661, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !1855, file: !1837, line: 178, baseType: !1890, size: 64)
!1890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1891, size: 64)
!1891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !526, line: 217, size: 832, elements: !1892)
!1892 = !{!1893, !2138, !2139, !2140, !2196, !2200, !2201, !2202, !2220, !2221, !2222, !2223, !2224, !2225}
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1891, file: !526, line: 219, baseType: !1894, size: 64)
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !526, line: 151, baseType: !1896)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !526, line: 151, size: 128, elements: !1897)
!1897 = !{!1898}
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1896, file: !526, line: 151, baseType: !1899, size: 128)
!1899 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !526, line: 150, baseType: !1900)
!1900 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !526, line: 150, size: 128, elements: !1901)
!1901 = !{!1902, !1903, !1904}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1900, file: !526, line: 150, baseType: !7, size: 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1900, file: !526, line: 150, baseType: !7, size: 32, offset: 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1900, file: !526, line: 150, baseType: !1905, size: 64, offset: 64)
!1905 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1906, size: 64, elements: !1757)
!1906 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !1591, line: 108, baseType: !1907)
!1907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1908, size: 64)
!1908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !526, line: 122, size: 512, elements: !1909)
!1909 = !{!1910, !1911, !1912, !2130, !2131, !2132, !2133, !2134, !2135, !2136}
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1908, file: !526, line: 124, baseType: !1890, size: 64)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1908, file: !526, line: 125, baseType: !1890, size: 64, offset: 64)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1908, file: !526, line: 131, baseType: !1913, size: 64, offset: 128)
!1913 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !526, line: 128, size: 64, elements: !1914)
!1914 = !{!1915, !2129}
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1913, file: !526, line: 129, baseType: !1916, size: 64)
!1916 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !1591, line: 66, baseType: !1917)
!1917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1918, size: 64)
!1918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !594, line: 143, size: 192, elements: !1919)
!1919 = !{!1920, !2127, !2128}
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1918, file: !594, line: 145, baseType: !1921, size: 64)
!1921 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !1591, line: 69, baseType: !1922)
!1922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1923, size: 64)
!1923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !594, line: 136, size: 192, elements: !1924)
!1924 = !{!1925, !2125, !2126}
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1923, file: !594, line: 137, baseType: !1926, size: 64)
!1926 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !1591, line: 58, baseType: !1927)
!1927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1928, size: 64)
!1928 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !594, line: 737, size: 768, elements: !1929)
!1929 = !{!1930, !1947, !1980, !1986, !1991, !1996, !2003, !2009, !2015, !2020, !2034, !2039, !2045, !2050, !2060, !2065, !2083, !2090, !2097, !2103, !2108, !2114, !2120}
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1928, file: !594, line: 738, baseType: !1931, size: 256)
!1931 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !594, line: 271, size: 256, elements: !1932)
!1932 = !{!1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946}
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1931, file: !594, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1931, file: !594, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1931, file: !594, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1931, file: !594, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1931, file: !594, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1931, file: !594, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1931, file: !594, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1931, file: !594, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1931, file: !594, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1931, file: !594, line: 312, baseType: !7, size: 32, offset: 32)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1931, file: !594, line: 316, baseType: !1784, size: 32, offset: 64)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1931, file: !594, line: 319, baseType: !7, size: 32, offset: 96)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1931, file: !594, line: 323, baseType: !1890, size: 64, offset: 128)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1931, file: !594, line: 327, baseType: !1661, size: 64, offset: 192)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1928, file: !594, line: 739, baseType: !1948, size: 448)
!1948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !594, line: 350, size: 448, elements: !1949)
!1949 = !{!1950, !1978}
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1948, file: !594, line: 353, baseType: !1951, size: 384)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !594, line: 333, size: 384, elements: !1952)
!1952 = !{!1953, !1954, !1961}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1951, file: !594, line: 336, baseType: !1931, size: 256)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1951, file: !594, line: 343, baseType: !1955, size: 64, offset: 256)
!1955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1956, size: 64)
!1956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1546, line: 37, size: 128, elements: !1957)
!1957 = !{!1958, !1959}
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1956, file: !1546, line: 39, baseType: !1955, size: 64)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1956, file: !1546, line: 40, baseType: !1960, size: 64, offset: 64)
!1960 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1661, size: 64)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1951, file: !594, line: 344, baseType: !1962, size: 64, offset: 320)
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1546, line: 45, size: 320, elements: !1964)
!1964 = !{!1965, !1966}
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1963, file: !1546, line: 47, baseType: !1962, size: 64)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1963, file: !1546, line: 48, baseType: !1967, size: 256, offset: 64)
!1967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !318, line: 1883, size: 256, elements: !1968)
!1968 = !{!1969, !1971, !1972, !1977}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1967, file: !318, line: 1884, baseType: !1970, size: 64)
!1970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1967, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1967, file: !318, line: 1885, baseType: !1970, size: 64, offset: 64)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1967, file: !318, line: 1891, baseType: !1973, size: 64, offset: 128)
!1973 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1967, file: !318, line: 1891, size: 64, elements: !1974)
!1974 = !{!1975, !1976}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1973, file: !318, line: 1891, baseType: !1926, size: 64)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1973, file: !318, line: 1891, baseType: !1661, size: 64)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1967, file: !318, line: 1892, baseType: !1960, size: 64, offset: 192)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1948, file: !594, line: 359, baseType: !1979, size: 64, offset: 384)
!1979 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1661, size: 64, elements: !1757)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1928, file: !594, line: 740, baseType: !1981, size: 512)
!1981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !594, line: 365, size: 512, elements: !1982)
!1982 = !{!1983, !1984, !1985}
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1981, file: !594, line: 368, baseType: !1951, size: 384)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1981, file: !594, line: 373, baseType: !1661, size: 64, offset: 384)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1981, file: !594, line: 374, baseType: !1661, size: 64, offset: 448)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1928, file: !594, line: 741, baseType: !1987, size: 576)
!1987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !594, line: 380, size: 576, elements: !1988)
!1988 = !{!1989, !1990}
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1987, file: !594, line: 383, baseType: !1981, size: 512)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1987, file: !594, line: 389, baseType: !1979, size: 64, offset: 512)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1928, file: !594, line: 742, baseType: !1992, size: 320)
!1992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !594, line: 395, size: 320, elements: !1993)
!1993 = !{!1994, !1995}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1992, file: !594, line: 397, baseType: !1931, size: 256)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1992, file: !594, line: 400, baseType: !1916, size: 64, offset: 256)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1928, file: !594, line: 743, baseType: !1997, size: 448)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !594, line: 406, size: 448, elements: !1998)
!1998 = !{!1999, !2000, !2001, !2002}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1997, file: !594, line: 408, baseType: !1931, size: 256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1997, file: !594, line: 412, baseType: !1661, size: 64, offset: 256)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1997, file: !594, line: 420, baseType: !1661, size: 64, offset: 320)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1997, file: !594, line: 423, baseType: !1916, size: 64, offset: 384)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1928, file: !594, line: 744, baseType: !2004, size: 384)
!2004 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !594, line: 429, size: 384, elements: !2005)
!2005 = !{!2006, !2007, !2008}
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2004, file: !594, line: 431, baseType: !1931, size: 256)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2004, file: !594, line: 434, baseType: !1661, size: 64, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !2004, file: !594, line: 437, baseType: !1916, size: 64, offset: 320)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1928, file: !594, line: 745, baseType: !2010, size: 384)
!2010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !594, line: 443, size: 384, elements: !2011)
!2011 = !{!2012, !2013, !2014}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2010, file: !594, line: 445, baseType: !1931, size: 256)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !2010, file: !594, line: 449, baseType: !1661, size: 64, offset: 256)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !2010, file: !594, line: 453, baseType: !1916, size: 64, offset: 320)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1928, file: !594, line: 746, baseType: !2016, size: 320)
!2016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !594, line: 459, size: 320, elements: !2017)
!2017 = !{!2018, !2019}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2016, file: !594, line: 461, baseType: !1931, size: 256)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !2016, file: !594, line: 464, baseType: !1661, size: 64, offset: 256)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1928, file: !594, line: 747, baseType: !2021, size: 768)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !594, line: 469, size: 768, elements: !2022)
!2022 = !{!2023, !2024, !2025, !2026, !2027}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2021, file: !594, line: 471, baseType: !1931, size: 256)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !2021, file: !594, line: 474, baseType: !7, size: 32, offset: 256)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !2021, file: !594, line: 475, baseType: !7, size: 32, offset: 288)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2021, file: !594, line: 478, baseType: !1661, size: 64, offset: 320)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !2021, file: !594, line: 481, baseType: !2028, size: 384, offset: 384)
!2028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2029, size: 384, elements: !1757)
!2029 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !318, line: 1917, size: 384, elements: !2030)
!2030 = !{!2031, !2032, !2033}
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !2029, file: !318, line: 1920, baseType: !1967, size: 256)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2029, file: !318, line: 1921, baseType: !1661, size: 64, offset: 256)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2029, file: !318, line: 1922, baseType: !1784, size: 32, offset: 320)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1928, file: !594, line: 748, baseType: !2035, size: 320)
!2035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !594, line: 487, size: 320, elements: !2036)
!2036 = !{!2037, !2038}
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2035, file: !594, line: 490, baseType: !1931, size: 256)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2035, file: !594, line: 494, baseType: !1643, size: 32, offset: 256)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1928, file: !594, line: 749, baseType: !2040, size: 384)
!2040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !594, line: 500, size: 384, elements: !2041)
!2041 = !{!2042, !2043, !2044}
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2040, file: !594, line: 502, baseType: !1931, size: 256)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !2040, file: !594, line: 506, baseType: !1916, size: 64, offset: 256)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2040, file: !594, line: 510, baseType: !1916, size: 64, offset: 320)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1928, file: !594, line: 750, baseType: !2046, size: 320)
!2046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !594, line: 529, size: 320, elements: !2047)
!2047 = !{!2048, !2049}
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2046, file: !594, line: 531, baseType: !1931, size: 256)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2046, file: !594, line: 540, baseType: !1916, size: 64, offset: 256)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1928, file: !594, line: 751, baseType: !2051, size: 704)
!2051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !594, line: 546, size: 704, elements: !2052)
!2052 = !{!2053, !2054, !2055, !2056, !2057, !2058, !2059}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !2051, file: !594, line: 549, baseType: !1981, size: 512)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2051, file: !594, line: 553, baseType: !1860, size: 64, offset: 512)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !2051, file: !594, line: 557, baseType: !1776, size: 8, offset: 576)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !2051, file: !594, line: 558, baseType: !1776, size: 8, offset: 584)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !2051, file: !594, line: 559, baseType: !1776, size: 8, offset: 592)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !2051, file: !594, line: 560, baseType: !1776, size: 8, offset: 600)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2051, file: !594, line: 566, baseType: !1979, size: 64, offset: 640)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1928, file: !594, line: 752, baseType: !2061, size: 384)
!2061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !594, line: 571, size: 384, elements: !2062)
!2062 = !{!2063, !2064}
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2061, file: !594, line: 573, baseType: !1992, size: 320)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2061, file: !594, line: 577, baseType: !1661, size: 64, offset: 320)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1928, file: !594, line: 753, baseType: !2066, size: 576)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !594, line: 600, size: 576, elements: !2067)
!2067 = !{!2068, !2069, !2070, !2073, !2082}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2066, file: !594, line: 602, baseType: !1992, size: 320)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2066, file: !594, line: 605, baseType: !1661, size: 64, offset: 320)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !2066, file: !594, line: 609, baseType: !2071, size: 64, offset: 384)
!2071 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !2072, line: 46, baseType: !1608)
!2072 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !2066, file: !594, line: 612, baseType: !2074, size: 64, offset: 448)
!2074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!2075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !594, line: 581, size: 320, elements: !2076)
!2076 = !{!2077, !2078, !2079, !2080, !2081}
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !2075, file: !594, line: 583, baseType: !317, size: 32)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2075, file: !594, line: 586, baseType: !1661, size: 64, offset: 64)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2075, file: !594, line: 589, baseType: !1661, size: 64, offset: 128)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !2075, file: !594, line: 592, baseType: !1661, size: 64, offset: 192)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !2075, file: !594, line: 595, baseType: !1661, size: 64, offset: 256)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !2066, file: !594, line: 616, baseType: !1916, size: 64, offset: 512)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1928, file: !594, line: 754, baseType: !2084, size: 512)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !594, line: 622, size: 512, elements: !2085)
!2085 = !{!2086, !2087, !2088, !2089}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2084, file: !594, line: 624, baseType: !1992, size: 320)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2084, file: !594, line: 628, baseType: !1661, size: 64, offset: 320)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !2084, file: !594, line: 632, baseType: !1661, size: 64, offset: 384)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !2084, file: !594, line: 636, baseType: !1661, size: 64, offset: 448)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1928, file: !594, line: 755, baseType: !2091, size: 704)
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !594, line: 642, size: 704, elements: !2092)
!2092 = !{!2093, !2094, !2095, !2096}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !2091, file: !594, line: 644, baseType: !2084, size: 512)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !2091, file: !594, line: 648, baseType: !1661, size: 64, offset: 512)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !2091, file: !594, line: 652, baseType: !1661, size: 64, offset: 576)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !2091, file: !594, line: 653, baseType: !1661, size: 64, offset: 640)
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1928, file: !594, line: 756, baseType: !2098, size: 448)
!2098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !594, line: 663, size: 448, elements: !2099)
!2099 = !{!2100, !2101, !2102}
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2098, file: !594, line: 665, baseType: !1992, size: 320)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2098, file: !594, line: 668, baseType: !1661, size: 64, offset: 320)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2098, file: !594, line: 673, baseType: !1661, size: 64, offset: 384)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1928, file: !594, line: 757, baseType: !2104, size: 384)
!2104 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !594, line: 694, size: 384, elements: !2105)
!2105 = !{!2106, !2107}
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !2104, file: !594, line: 696, baseType: !1992, size: 320)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !2104, file: !594, line: 699, baseType: !1661, size: 64, offset: 320)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1928, file: !594, line: 758, baseType: !2109, size: 384)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !594, line: 681, size: 384, elements: !2110)
!2110 = !{!2111, !2112, !2113}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2109, file: !594, line: 683, baseType: !1931, size: 256)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !2109, file: !594, line: 686, baseType: !1661, size: 64, offset: 256)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !2109, file: !594, line: 689, baseType: !1661, size: 64, offset: 320)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1928, file: !594, line: 759, baseType: !2115, size: 384)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !594, line: 707, size: 384, elements: !2116)
!2116 = !{!2117, !2118, !2119}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2115, file: !594, line: 709, baseType: !1931, size: 256)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2115, file: !594, line: 712, baseType: !1661, size: 64, offset: 256)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2115, file: !594, line: 712, baseType: !1661, size: 64, offset: 320)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1928, file: !594, line: 760, baseType: !2121, size: 320)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !594, line: 718, size: 320, elements: !2122)
!2122 = !{!2123, !2124}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2121, file: !594, line: 720, baseType: !1931, size: 256)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2121, file: !594, line: 723, baseType: !1661, size: 64, offset: 256)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1923, file: !594, line: 138, baseType: !1922, size: 64, offset: 64)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1923, file: !594, line: 139, baseType: !1922, size: 64, offset: 128)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1918, file: !594, line: 146, baseType: !1921, size: 64, offset: 64)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1918, file: !594, line: 152, baseType: !1916, size: 64, offset: 128)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1913, file: !526, line: 130, baseType: !1834, size: 64)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1908, file: !526, line: 134, baseType: !1589, size: 64, offset: 192)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1908, file: !526, line: 137, baseType: !1661, size: 64, offset: 256)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1908, file: !526, line: 138, baseType: !1784, size: 32, offset: 320)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1908, file: !526, line: 142, baseType: !7, size: 32, offset: 352)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1908, file: !526, line: 144, baseType: !1643, size: 32, offset: 384)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1908, file: !526, line: 145, baseType: !1643, size: 32, offset: 416)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1908, file: !526, line: 146, baseType: !2137, size: 64, offset: 448)
!2137 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !526, line: 119, baseType: !1625)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1891, file: !526, line: 220, baseType: !1894, size: 64, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1891, file: !526, line: 223, baseType: !1589, size: 64, offset: 128)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1891, file: !526, line: 226, baseType: !2141, size: 64, offset: 192)
!2141 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !513, line: 100, size: 1216, elements: !2143)
!2143 = !{!2144, !2145, !2146, !2147, !2148, !2153, !2154, !2155, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2186, !2194, !2195}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2142, file: !513, line: 102, baseType: !1643, size: 32)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !2142, file: !513, line: 105, baseType: !7, size: 32, offset: 32)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2142, file: !513, line: 108, baseType: !1890, size: 64, offset: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !2142, file: !513, line: 111, baseType: !1890, size: 64, offset: 128)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !2142, file: !513, line: 114, baseType: !2149, size: 64, offset: 192)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !513, line: 41, size: 64, elements: !2150)
!2150 = !{!2151, !2152}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !2149, file: !513, line: 42, baseType: !512, size: 32)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !2149, file: !513, line: 43, baseType: !7, size: 32, offset: 32)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !2142, file: !513, line: 117, baseType: !7, size: 32, offset: 256)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !2142, file: !513, line: 120, baseType: !7, size: 32, offset: 288)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !2142, file: !513, line: 123, baseType: !2156, size: 64, offset: 320)
!2156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!2157 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !513, line: 87, baseType: !2158)
!2158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !513, line: 87, size: 128, elements: !2159)
!2159 = !{!2160}
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2158, file: !513, line: 87, baseType: !2161, size: 128)
!2161 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !513, line: 85, baseType: !2162)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !513, line: 85, size: 128, elements: !2163)
!2163 = !{!2164, !2165, !2166}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2162, file: !513, line: 85, baseType: !7, size: 32)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2162, file: !513, line: 85, baseType: !7, size: 32, offset: 32)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2162, file: !513, line: 85, baseType: !2167, size: 64, offset: 64)
!2167 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2168, size: 64, elements: !1757)
!2168 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !513, line: 84, baseType: !2141)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2142, file: !513, line: 126, baseType: !2141, size: 64, offset: 384)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2142, file: !513, line: 129, baseType: !2141, size: 64, offset: 448)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2142, file: !513, line: 132, baseType: !1589, size: 64, offset: 512)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !2142, file: !513, line: 139, baseType: !1661, size: 64, offset: 576)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !2142, file: !513, line: 143, baseType: !1709, size: 128, offset: 640)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !2142, file: !513, line: 146, baseType: !1709, size: 128, offset: 768)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !2142, file: !513, line: 148, baseType: !1776, size: 8, offset: 896)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !2142, file: !513, line: 149, baseType: !1776, size: 8, offset: 904)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !2142, file: !513, line: 153, baseType: !521, size: 32, offset: 928)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !2142, file: !513, line: 156, baseType: !2179, size: 64, offset: 960)
!2179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!2180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !513, line: 48, size: 320, elements: !2181)
!2181 = !{!2182, !2183, !2184, !2185}
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2180, file: !513, line: 50, baseType: !1926, size: 64)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2180, file: !513, line: 59, baseType: !1709, size: 128, offset: 64)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !2180, file: !513, line: 64, baseType: !1776, size: 8, offset: 192)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2180, file: !513, line: 67, baseType: !2179, size: 64, offset: 256)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2142, file: !513, line: 159, baseType: !2187, size: 64, offset: 1024)
!2187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2188, size: 64)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !513, line: 72, size: 256, elements: !2189)
!2189 = !{!2190, !2191, !2192, !2193}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2188, file: !513, line: 74, baseType: !1907, size: 64)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2188, file: !513, line: 77, baseType: !2187, size: 64, offset: 64)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2188, file: !513, line: 78, baseType: !2187, size: 64, offset: 128)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !2188, file: !513, line: 81, baseType: !2187, size: 64, offset: 192)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !2142, file: !513, line: 162, baseType: !1776, size: 8, offset: 1088)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !2142, file: !513, line: 166, baseType: !1661, size: 64, offset: 1152)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1891, file: !526, line: 229, baseType: !2197, size: 128, offset: 256)
!2197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2198, size: 128, elements: !1609)
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2199 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !526, line: 229, flags: DIFlagFwdDecl)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1891, file: !526, line: 232, baseType: !1890, size: 64, offset: 384)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1891, file: !526, line: 233, baseType: !1890, size: 64, offset: 448)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1891, file: !526, line: 238, baseType: !2203, size: 64, offset: 512)
!2203 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !526, line: 235, size: 64, elements: !2204)
!2204 = !{!2205, !2211}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2203, file: !526, line: 236, baseType: !2206, size: 64)
!2206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2207, size: 64)
!2207 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !526, line: 273, size: 128, elements: !2208)
!2208 = !{!2209, !2210}
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2207, file: !526, line: 275, baseType: !1916, size: 64)
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2207, file: !526, line: 278, baseType: !1916, size: 64, offset: 64)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2203, file: !526, line: 237, baseType: !2212, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2213, size: 64)
!2213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !526, line: 259, size: 320, elements: !2214)
!2214 = !{!2215, !2216, !2217, !2218, !2219}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2213, file: !526, line: 261, baseType: !1834, size: 64)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2213, file: !526, line: 262, baseType: !1834, size: 64, offset: 64)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2213, file: !526, line: 266, baseType: !1834, size: 64, offset: 128)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2213, file: !526, line: 267, baseType: !1834, size: 64, offset: 192)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2213, file: !526, line: 270, baseType: !1643, size: 32, offset: 256)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1891, file: !526, line: 241, baseType: !2137, size: 64, offset: 576)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1891, file: !526, line: 244, baseType: !1643, size: 32, offset: 640)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1891, file: !526, line: 247, baseType: !1643, size: 32, offset: 672)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1891, file: !526, line: 250, baseType: !1643, size: 32, offset: 704)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1891, file: !526, line: 253, baseType: !1643, size: 32, offset: 736)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1891, file: !526, line: 256, baseType: !1643, size: 32, offset: 768)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !1855, file: !1837, line: 179, baseType: !2227, size: 64)
!2227 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2228, size: 64)
!2228 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !1837, line: 150, baseType: !2229)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !1837, line: 142, size: 320, elements: !2230)
!2230 = !{!2231, !2232, !2233, !2234, !2237, !2238}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2229, file: !1837, line: 144, baseType: !1661, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2229, file: !1837, line: 145, baseType: !1834, size: 64, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2229, file: !1837, line: 146, baseType: !1834, size: 64, offset: 128)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2229, file: !1837, line: 147, baseType: !2235, size: 32, offset: 192)
!2235 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !2236, line: 31, baseType: !1643)
!2236 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2229, file: !1837, line: 148, baseType: !7, size: 32, offset: 224)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2229, file: !1837, line: 149, baseType: !1776, size: 8, offset: 256)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !1855, file: !1837, line: 180, baseType: !2240, size: 64)
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2241, size: 64)
!2241 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !1837, line: 162, baseType: !2242)
!2242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !1837, line: 159, size: 128, elements: !2243)
!2243 = !{!2244, !2245}
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2242, file: !1837, line: 160, baseType: !1661, size: 64)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2242, file: !1837, line: 161, baseType: !1625, size: 64, offset: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !1855, file: !1837, line: 181, baseType: !2247, size: 64)
!2247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2248, size: 64)
!2248 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !1837, line: 181, flags: DIFlagFwdDecl)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !1850, file: !1837, line: 317, baseType: !2250, size: 64)
!2250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1625, size: 64, elements: !1757)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !1850, file: !1837, line: 318, baseType: !2252, size: 320)
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !1837, line: 188, size: 320, elements: !2253)
!2253 = !{!2254, !2256, !2313}
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2252, file: !1837, line: 190, baseType: !2255, size: 192)
!2255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1854, size: 192, elements: !1732)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2252, file: !1837, line: 193, baseType: !2257, size: 64, offset: 192)
!2257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2258, size: 64)
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !1837, line: 206, size: 320, elements: !2259)
!2259 = !{!2260, !2298, !2299, !2300, !2312}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2258, file: !1837, line: 208, baseType: !2261, size: 64)
!2261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2262, size: 64)
!2262 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !1591, line: 62, baseType: !2263)
!2263 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !2264, line: 538, size: 256, elements: !2265)
!2264 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2265 = !{!2266, !2270, !2276, !2289}
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2263, file: !2264, line: 539, baseType: !2267, size: 32)
!2267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !2264, line: 482, size: 32, elements: !2268)
!2268 = !{!2269}
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2267, file: !2264, line: 484, baseType: !7, size: 32)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !2263, file: !2264, line: 540, baseType: !2271, size: 192)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !2264, line: 488, size: 192, elements: !2272)
!2272 = !{!2273, !2274, !2275}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2271, file: !2264, line: 489, baseType: !2267, size: 32)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2271, file: !2264, line: 492, baseType: !1860, size: 64, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2271, file: !2264, line: 496, baseType: !1661, size: 64, offset: 128)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !2263, file: !2264, line: 541, baseType: !2277, size: 256)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !2264, line: 504, size: 256, elements: !2278)
!2278 = !{!2279, !2280, !2287, !2288}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2277, file: !2264, line: 505, baseType: !2267, size: 32)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2277, file: !2264, line: 509, baseType: !2281, size: 64, offset: 64)
!2281 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !2264, line: 501, baseType: !2282)
!2282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2283 = !DISubroutineType(types: !2284)
!2284 = !{null, !2285}
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2277, file: !2264, line: 510, baseType: !2285, size: 64, offset: 128)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2277, file: !2264, line: 513, baseType: !2261, size: 64, offset: 192)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !2263, file: !2264, line: 542, baseType: !2290, size: 128)
!2290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !2264, line: 530, size: 128, elements: !2291)
!2291 = !{!2292, !2293}
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2290, file: !2264, line: 531, baseType: !2267, size: 32)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !2290, file: !2264, line: 534, baseType: !2294, size: 64, offset: 64)
!2294 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !2264, line: 525, baseType: !2295)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!2296 = !DISubroutineType(types: !2297)
!2297 = !{!1776, !1661, !1860, !1608, !1608}
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2258, file: !1837, line: 211, baseType: !7, size: 32, offset: 64)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2258, file: !1837, line: 214, baseType: !1625, size: 64, offset: 128)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2258, file: !1837, line: 224, baseType: !2301, size: 64, offset: 192)
!2301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2302, size: 64)
!2302 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !1837, line: 202, baseType: !2303)
!2303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !1837, line: 202, size: 128, elements: !2304)
!2304 = !{!2305}
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2303, file: !1837, line: 202, baseType: !2306, size: 128)
!2306 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !1837, line: 200, baseType: !2307)
!2307 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !1837, line: 200, size: 128, elements: !2308)
!2308 = !{!2309, !2310, !2311}
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2307, file: !1837, line: 200, baseType: !7, size: 32)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2307, file: !1837, line: 200, baseType: !7, size: 32, offset: 32)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2307, file: !1837, line: 200, baseType: !1870, size: 64, offset: 64)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2258, file: !1837, line: 234, baseType: !2301, size: 64, offset: 256)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2252, file: !1837, line: 197, baseType: !1625, size: 64, offset: 256)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !1850, file: !1837, line: 319, baseType: !1721, size: 256)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !1850, file: !1837, line: 320, baseType: !1740, size: 192)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !1663, file: !318, line: 3384, baseType: !2317, size: 1472)
!2317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !318, line: 3114, size: 1472, elements: !2318)
!2318 = !{!2319, !2340, !2341, !2342, !2343}
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2317, file: !318, line: 3115, baseType: !2320, size: 1216)
!2320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !318, line: 2984, size: 1216, elements: !2321)
!2321 = !{!2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339}
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2320, file: !318, line: 2985, baseType: !1830, size: 960)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2320, file: !318, line: 2986, baseType: !1661, size: 64, offset: 960)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2320, file: !318, line: 2987, baseType: !1661, size: 64, offset: 1024)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2320, file: !318, line: 2988, baseType: !1661, size: 64, offset: 1088)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2320, file: !318, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2320, file: !318, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2320, file: !318, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2320, file: !318, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2320, file: !318, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2320, file: !318, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2320, file: !318, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2320, file: !318, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2320, file: !318, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2320, file: !318, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2320, file: !318, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2320, file: !318, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2320, file: !318, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2320, file: !318, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2317, file: !318, line: 3117, baseType: !1661, size: 64, offset: 1216)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2317, file: !318, line: 3119, baseType: !1661, size: 64, offset: 1280)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2317, file: !318, line: 3121, baseType: !1661, size: 64, offset: 1344)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2317, file: !318, line: 3123, baseType: !1661, size: 64, offset: 1408)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !1663, file: !318, line: 3385, baseType: !2345, size: 1088)
!2345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !318, line: 2874, size: 1088, elements: !2346)
!2346 = !{!2347, !2348, !2349}
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2345, file: !318, line: 2875, baseType: !1830, size: 960)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2345, file: !318, line: 2876, baseType: !1834, size: 64, offset: 960)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2345, file: !318, line: 2877, baseType: !2350, size: 64, offset: 1024)
!2350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2351, size: 64)
!2351 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !2352, line: 172, size: 128, elements: !2353)
!2352 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2353 = !{!2354, !2355, !2356, !2357, !2358, !2359, !2360}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !2351, file: !2352, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2351, file: !2352, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !2351, file: !2352, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !2351, file: !2352, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !2351, file: !2352, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !2351, file: !2352, line: 195, baseType: !7, size: 32, offset: 32)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !2351, file: !2352, line: 199, baseType: !1661, size: 64, offset: 64)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !1663, file: !318, line: 3386, baseType: !2320, size: 1216)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !1663, file: !318, line: 3387, baseType: !2363, size: 1280)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !318, line: 3093, size: 1280, elements: !2364)
!2364 = !{!2365, !2366}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2363, file: !318, line: 3094, baseType: !2320, size: 1216)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2363, file: !318, line: 3095, baseType: !2350, size: 64, offset: 1216)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !1663, file: !318, line: 3388, baseType: !2368, size: 1216)
!2368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !318, line: 2824, size: 1216, elements: !2369)
!2369 = !{!2370, !2371, !2372, !2373, !2374, !2375}
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2368, file: !318, line: 2825, baseType: !1792, size: 896)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2368, file: !318, line: 2827, baseType: !1661, size: 64, offset: 896)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2368, file: !318, line: 2828, baseType: !1661, size: 64, offset: 960)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2368, file: !318, line: 2829, baseType: !1661, size: 64, offset: 1024)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2368, file: !318, line: 2830, baseType: !1661, size: 64, offset: 1088)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2368, file: !318, line: 2831, baseType: !1661, size: 64, offset: 1152)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !1663, file: !318, line: 3389, baseType: !2377, size: 1024)
!2377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !318, line: 2850, size: 1024, elements: !2378)
!2378 = !{!2379, !2380, !2381}
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2377, file: !318, line: 2851, baseType: !1830, size: 960)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2377, file: !318, line: 2852, baseType: !1643, size: 32, offset: 960)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2377, file: !318, line: 2853, baseType: !1643, size: 32, offset: 992)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !1663, file: !318, line: 3390, baseType: !2383, size: 1024)
!2383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !318, line: 2857, size: 1024, elements: !2384)
!2384 = !{!2385, !2386}
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2383, file: !318, line: 2858, baseType: !1830, size: 960)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2383, file: !318, line: 2859, baseType: !2350, size: 64, offset: 960)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !1663, file: !318, line: 3391, baseType: !2388, size: 960)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !318, line: 2862, size: 960, elements: !2389)
!2389 = !{!2390}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2388, file: !318, line: 2863, baseType: !1830, size: 960)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !1663, file: !318, line: 3392, baseType: !2392, size: 1472)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !318, line: 3304, size: 1472, elements: !2393)
!2393 = !{!2394}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2392, file: !318, line: 3305, baseType: !2317, size: 1472)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !1663, file: !318, line: 3393, baseType: !2396, size: 1792)
!2396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !318, line: 3248, size: 1792, elements: !2397)
!2397 = !{!2398, !2399, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634}
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2396, file: !318, line: 3249, baseType: !2317, size: 1472)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2396, file: !318, line: 3251, baseType: !2400, size: 64, offset: 1472)
!2400 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2401, size: 64)
!2401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2402, line: 463, size: 1152, elements: !2403)
!2402 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2403 = !{!2404, !2407, !2438, !2439, !2550, !2558, !2559, !2560, !2561, !2562, !2563, !2587, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2401, file: !2402, line: 464, baseType: !2405, size: 64)
!2405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2406, size: 64)
!2406 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !2402, line: 464, flags: DIFlagFwdDecl)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2401, file: !2402, line: 467, baseType: !2408, size: 64, offset: 64)
!2408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2409, size: 64)
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !526, line: 374, size: 640, elements: !2410)
!2410 = !{!2411, !2413, !2414, !2427, !2428, !2429, !2430, !2431, !2432, !2434, !2436, !2437}
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !2409, file: !526, line: 377, baseType: !2412, size: 64)
!2412 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !1591, line: 111, baseType: !1890)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !2409, file: !526, line: 378, baseType: !2412, size: 64, offset: 64)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !2409, file: !526, line: 381, baseType: !2415, size: 64, offset: 128)
!2415 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2416, size: 64)
!2416 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !526, line: 282, baseType: !2417)
!2417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !526, line: 282, size: 128, elements: !2418)
!2418 = !{!2419}
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2417, file: !526, line: 282, baseType: !2420, size: 128)
!2420 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !526, line: 281, baseType: !2421)
!2421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !526, line: 281, size: 128, elements: !2422)
!2422 = !{!2423, !2424, !2425}
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2421, file: !526, line: 281, baseType: !7, size: 32)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2421, file: !526, line: 281, baseType: !7, size: 32, offset: 32)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2421, file: !526, line: 281, baseType: !2426, size: 64, offset: 64)
!2426 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2412, size: 64, elements: !1757)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !2409, file: !526, line: 384, baseType: !1643, size: 32, offset: 192)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !2409, file: !526, line: 387, baseType: !1643, size: 32, offset: 224)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !2409, file: !526, line: 390, baseType: !1643, size: 32, offset: 256)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !2409, file: !526, line: 394, baseType: !2415, size: 64, offset: 320)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !2409, file: !526, line: 396, baseType: !525, size: 32, offset: 384)
!2432 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !2409, file: !526, line: 399, baseType: !2433, size: 64, offset: 416)
!2433 = !DICompositeType(tag: DW_TAG_array_type, baseType: !531, size: 64, elements: !1609)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !2409, file: !526, line: 402, baseType: !2435, size: 64, offset: 480)
!2435 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !1609)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !2409, file: !526, line: 406, baseType: !1643, size: 32, offset: 544)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !2409, file: !526, line: 409, baseType: !1643, size: 32, offset: 576)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2401, file: !2402, line: 470, baseType: !1917, size: 64, offset: 128)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2401, file: !2402, line: 473, baseType: !2440, size: 64, offset: 192)
!2440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2441, size: 64)
!2441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2352, line: 39, size: 1152, elements: !2442)
!2442 = !{!2443, !2490, !2503, !2515, !2516, !2527, !2528, !2532, !2533, !2534, !2535, !2536}
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !2441, file: !2352, line: 41, baseType: !2444, size: 64)
!2444 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !655, line: 144, baseType: !2445)
!2445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2446, size: 64)
!2446 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !655, line: 100, size: 896, elements: !2447)
!2447 = !{!2448, !2454, !2459, !2464, !2466, !2467, !2468, !2469, !2470, !2471, !2476, !2478, !2479, !2484, !2489}
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !2446, file: !655, line: 102, baseType: !2449, size: 64)
!2449 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !655, line: 52, baseType: !2450)
!2450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2451, size: 64)
!2451 = !DISubroutineType(types: !2452)
!2452 = !{!2453, !2285}
!2453 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !655, line: 47, baseType: !7)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !2446, file: !655, line: 105, baseType: !2455, size: 64, offset: 64)
!2455 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !655, line: 59, baseType: !2456)
!2456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2457, size: 64)
!2457 = !DISubroutineType(types: !2458)
!2458 = !{!1643, !2285, !2285}
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !2446, file: !655, line: 108, baseType: !2460, size: 64, offset: 128)
!2460 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !655, line: 63, baseType: !2461)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DISubroutineType(types: !2463)
!2463 = !{null, !1589}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !2446, file: !655, line: 111, baseType: !2465, size: 64, offset: 192)
!2465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1589, size: 64)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2446, file: !655, line: 114, baseType: !2071, size: 64, offset: 256)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !2446, file: !655, line: 117, baseType: !2071, size: 64, offset: 320)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !2446, file: !655, line: 120, baseType: !2071, size: 64, offset: 384)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !2446, file: !655, line: 124, baseType: !7, size: 32, offset: 448)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !2446, file: !655, line: 128, baseType: !7, size: 32, offset: 480)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !2446, file: !655, line: 131, baseType: !2472, size: 64, offset: 512)
!2472 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !655, line: 75, baseType: !2473)
!2473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2474, size: 64)
!2474 = !DISubroutineType(types: !2475)
!2475 = !{!1589, !2071, !2071}
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !2446, file: !655, line: 132, baseType: !2477, size: 64, offset: 576)
!2477 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !655, line: 78, baseType: !2461)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !2446, file: !655, line: 135, baseType: !1589, size: 64, offset: 640)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !2446, file: !655, line: 136, baseType: !2480, size: 64, offset: 704)
!2480 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !655, line: 82, baseType: !2481)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = !DISubroutineType(types: !2483)
!2483 = !{!1589, !1589, !2071, !2071}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !2446, file: !655, line: 137, baseType: !2485, size: 64, offset: 768)
!2485 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !655, line: 83, baseType: !2486)
!2486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2487, size: 64)
!2487 = !DISubroutineType(types: !2488)
!2488 = !{null, !1589, !1589}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !2446, file: !655, line: 141, baseType: !7, size: 32, offset: 832)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !2441, file: !2352, line: 48, baseType: !2491, size: 64, offset: 64)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !594, line: 35, baseType: !2493)
!2493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !594, line: 35, size: 128, elements: !2494)
!2494 = !{!2495}
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2493, file: !594, line: 35, baseType: !2496, size: 128)
!2496 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !594, line: 33, baseType: !2497)
!2497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !594, line: 33, size: 128, elements: !2498)
!2498 = !{!2499, !2500, !2501}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2497, file: !594, line: 33, baseType: !7, size: 32)
!2500 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2497, file: !594, line: 33, baseType: !7, size: 32, offset: 32)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2497, file: !594, line: 33, baseType: !2502, size: 64, offset: 64)
!2502 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1926, size: 64, elements: !1757)
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !2441, file: !2352, line: 51, baseType: !2504, size: 64, offset: 128)
!2504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2505, size: 64)
!2505 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !318, line: 183, baseType: !2506)
!2506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !318, line: 183, size: 128, elements: !2507)
!2507 = !{!2508}
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2506, file: !318, line: 183, baseType: !2509, size: 128)
!2509 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !318, line: 182, baseType: !2510)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !318, line: 182, size: 128, elements: !2511)
!2511 = !{!2512, !2513, !2514}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2510, file: !318, line: 182, baseType: !7, size: 32)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2510, file: !318, line: 182, baseType: !7, size: 32, offset: 32)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2510, file: !318, line: 182, baseType: !1979, size: 64, offset: 64)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !2441, file: !2352, line: 54, baseType: !1661, size: 64, offset: 192)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2441, file: !2352, line: 57, baseType: !2517, size: 128, offset: 256)
!2517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !2518, line: 31, size: 128, elements: !2519)
!2518 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2519 = !{!2520, !2521, !2522, !2523, !2524, !2525, !2526}
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !2517, file: !2518, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !2517, file: !2518, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !2517, file: !2518, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !2517, file: !2518, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !2517, file: !2518, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !2517, file: !2518, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2517, file: !2518, line: 56, baseType: !1590, size: 64, offset: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !2441, file: !2352, line: 60, baseType: !2517, size: 128, offset: 384)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !2441, file: !2352, line: 64, baseType: !2529, size: 64, offset: 512)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !2531, line: 33, flags: DIFlagFwdDecl)
!2531 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !2441, file: !2352, line: 67, baseType: !1661, size: 64, offset: 576)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !2441, file: !2352, line: 73, baseType: !2444, size: 64, offset: 640)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !2441, file: !2352, line: 77, baseType: !1590, size: 64, offset: 704)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !2441, file: !2352, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !2441, file: !2352, line: 82, baseType: !2537, size: 320, offset: 832)
!2537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1546, line: 62, size: 320, elements: !2538)
!2538 = !{!2539, !2545, !2546, !2547, !2548, !2549}
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !2537, file: !1546, line: 63, baseType: !2540, size: 64)
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2541, size: 64)
!2541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1546, line: 56, size: 128, elements: !2542)
!2542 = !{!2543, !2544}
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2541, file: !1546, line: 57, baseType: !2540, size: 64)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !2541, file: !1546, line: 58, baseType: !1756, size: 8, offset: 64)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !2537, file: !1546, line: 64, baseType: !7, size: 32, offset: 64)
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !2537, file: !1546, line: 66, baseType: !7, size: 32, offset: 96)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !2537, file: !1546, line: 68, baseType: !1776, size: 8, offset: 128)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !2537, file: !1546, line: 70, baseType: !1955, size: 64, offset: 192)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !2537, file: !1546, line: 71, baseType: !1962, size: 64, offset: 256)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2401, file: !2402, line: 476, baseType: !2551, size: 64, offset: 256)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2552, size: 64)
!2552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !513, line: 187, size: 256, elements: !2553)
!2553 = !{!2554, !2555, !2556, !2557}
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2552, file: !513, line: 189, baseType: !1643, size: 32)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !2552, file: !513, line: 192, baseType: !2156, size: 64, offset: 64)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !2552, file: !513, line: 197, baseType: !2444, size: 64, offset: 128)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !2552, file: !513, line: 200, baseType: !2141, size: 64, offset: 192)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2401, file: !2402, line: 479, baseType: !2444, size: 64, offset: 320)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2401, file: !2402, line: 484, baseType: !1661, size: 64, offset: 384)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2401, file: !2402, line: 488, baseType: !1661, size: 64, offset: 448)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2401, file: !2402, line: 493, baseType: !1661, size: 64, offset: 512)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2401, file: !2402, line: 496, baseType: !1661, size: 64, offset: 576)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2401, file: !2402, line: 501, baseType: !2564, size: 64, offset: 640)
!2564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2565, size: 64)
!2565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !537, line: 2355, size: 576, elements: !2566)
!2566 = !{!2567, !2570, !2571, !2572, !2573, !2575, !2576, !2581, !2582, !2583, !2584, !2585, !2586}
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !2565, file: !537, line: 2356, baseType: !2568, size: 64)
!2568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2569, size: 64)
!2569 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !537, line: 2356, flags: DIFlagFwdDecl)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !2565, file: !537, line: 2357, baseType: !1860, size: 64, offset: 64)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !2565, file: !537, line: 2358, baseType: !1643, size: 32, offset: 128)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !2565, file: !537, line: 2359, baseType: !1643, size: 32, offset: 160)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !2565, file: !537, line: 2360, baseType: !2574, size: 128, offset: 192)
!2574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1643, size: 128, elements: !1636)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !2565, file: !537, line: 2364, baseType: !1643, size: 32, offset: 320)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !2565, file: !537, line: 2367, baseType: !2577, size: 128, offset: 384)
!2577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !537, line: 2349, size: 128, elements: !2578)
!2578 = !{!2579, !2580}
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !2577, file: !537, line: 2351, baseType: !1834, size: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2577, file: !537, line: 2352, baseType: !1625, size: 64, offset: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !2565, file: !537, line: 2371, baseType: !536, size: 32, offset: 512)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !2565, file: !537, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !2565, file: !537, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !2565, file: !537, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !2565, file: !537, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !2565, file: !537, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2401, file: !2402, line: 504, baseType: !2588, size: 64, offset: 704)
!2588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2589, size: 64)
!2589 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2402, line: 504, flags: DIFlagFwdDecl)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2401, file: !2402, line: 507, baseType: !2444, size: 64, offset: 768)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2401, file: !2402, line: 510, baseType: !1643, size: 32, offset: 832)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2401, file: !2402, line: 513, baseType: !1643, size: 32, offset: 864)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2401, file: !2402, line: 516, baseType: !1784, size: 32, offset: 896)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2401, file: !2402, line: 519, baseType: !1784, size: 32, offset: 928)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2401, file: !2402, line: 522, baseType: !7, size: 32, offset: 960)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2401, file: !2402, line: 523, baseType: !7, size: 32, offset: 992)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2401, file: !2402, line: 528, baseType: !1860, size: 64, offset: 1024)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2401, file: !2402, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2401, file: !2402, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2401, file: !2402, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2401, file: !2402, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2401, file: !2402, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2401, file: !2402, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2401, file: !2402, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2401, file: !2402, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2401, file: !2402, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2401, file: !2402, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2401, file: !2402, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2401, file: !2402, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2401, file: !2402, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2401, file: !2402, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2401, file: !2402, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2401, file: !2402, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2396, file: !318, line: 3254, baseType: !1661, size: 64, offset: 1536)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2396, file: !318, line: 3257, baseType: !1661, size: 64, offset: 1600)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2396, file: !318, line: 3258, baseType: !1661, size: 64, offset: 1664)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2396, file: !318, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2396, file: !318, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2396, file: !318, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2396, file: !318, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2396, file: !318, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2396, file: !318, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2396, file: !318, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2396, file: !318, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2396, file: !318, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2396, file: !318, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2396, file: !318, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2396, file: !318, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2396, file: !318, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2396, file: !318, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2396, file: !318, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2396, file: !318, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2396, file: !318, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2396, file: !318, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1663, file: !318, line: 3394, baseType: !2636, size: 1344)
!2636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !318, line: 2279, size: 1344, elements: !2637)
!2637 = !{!2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679}
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2636, file: !318, line: 2280, baseType: !1699, size: 192)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !2636, file: !318, line: 2281, baseType: !1661, size: 64, offset: 192)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2636, file: !318, line: 2282, baseType: !1661, size: 64, offset: 256)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2636, file: !318, line: 2283, baseType: !1661, size: 64, offset: 320)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2636, file: !318, line: 2284, baseType: !1661, size: 64, offset: 384)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2636, file: !318, line: 2285, baseType: !7, size: 32, offset: 448)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !2636, file: !318, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !2636, file: !318, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !2636, file: !318, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !2636, file: !318, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !2636, file: !318, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !2636, file: !318, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2636, file: !318, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !2636, file: !318, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2636, file: !318, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2636, file: !318, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2636, file: !318, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2636, file: !318, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2636, file: !318, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2636, file: !318, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2636, file: !318, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2636, file: !318, line: 2305, baseType: !7, size: 32, offset: 512)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !2636, file: !318, line: 2306, baseType: !2235, size: 32, offset: 544)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !2636, file: !318, line: 2307, baseType: !1661, size: 64, offset: 576)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !2636, file: !318, line: 2308, baseType: !1661, size: 64, offset: 640)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !2636, file: !318, line: 2314, baseType: !2664, size: 64, offset: 704)
!2664 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !318, line: 2309, size: 64, elements: !2665)
!2665 = !{!2666, !2667, !2668}
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !2664, file: !318, line: 2310, baseType: !1643, size: 32)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !2664, file: !318, line: 2311, baseType: !1860, size: 64)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !2664, file: !318, line: 2312, baseType: !2669, size: 64)
!2669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2670, size: 64)
!2670 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !318, line: 2277, flags: DIFlagFwdDecl)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2636, file: !318, line: 2315, baseType: !1661, size: 64, offset: 768)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !2636, file: !318, line: 2316, baseType: !1661, size: 64, offset: 832)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !2636, file: !318, line: 2317, baseType: !1661, size: 64, offset: 896)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !2636, file: !318, line: 2318, baseType: !1661, size: 64, offset: 960)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !2636, file: !318, line: 2319, baseType: !1661, size: 64, offset: 1024)
!2676 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2636, file: !318, line: 2320, baseType: !1661, size: 64, offset: 1088)
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2636, file: !318, line: 2321, baseType: !1661, size: 64, offset: 1152)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2636, file: !318, line: 2322, baseType: !1661, size: 64, offset: 1216)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2636, file: !318, line: 2324, baseType: !2680, size: 64, offset: 1280)
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2681, size: 64)
!2681 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !318, line: 2324, flags: DIFlagFwdDecl)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1663, file: !318, line: 3395, baseType: !2683, size: 320)
!2683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !318, line: 1469, size: 320, elements: !2684)
!2684 = !{!2685, !2686, !2687}
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2683, file: !318, line: 1470, baseType: !1699, size: 192)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !2683, file: !318, line: 1471, baseType: !1661, size: 64, offset: 192)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2683, file: !318, line: 1472, baseType: !1661, size: 64, offset: 256)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1663, file: !318, line: 3396, baseType: !2689, size: 320)
!2689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !318, line: 1482, size: 320, elements: !2690)
!2690 = !{!2691, !2692, !2693}
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2689, file: !318, line: 1483, baseType: !1699, size: 192)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2689, file: !318, line: 1484, baseType: !1643, size: 32, offset: 192)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !2689, file: !318, line: 1485, baseType: !1979, size: 64, offset: 256)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !1663, file: !318, line: 3397, baseType: !2695, size: 384)
!2695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !318, line: 1829, size: 384, elements: !2696)
!2696 = !{!2697, !2698, !2699, !2700}
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2695, file: !318, line: 1830, baseType: !1699, size: 192)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2695, file: !318, line: 1831, baseType: !1784, size: 32, offset: 192)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2695, file: !318, line: 1832, baseType: !1661, size: 64, offset: 256)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !2695, file: !318, line: 1835, baseType: !1979, size: 64, offset: 320)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1663, file: !318, line: 3398, baseType: !2702, size: 704)
!2702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !318, line: 1898, size: 704, elements: !2703)
!2703 = !{!2704, !2705, !2706, !2707, !2708, !2713}
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2702, file: !318, line: 1899, baseType: !1699, size: 192)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !2702, file: !318, line: 1902, baseType: !1661, size: 64, offset: 192)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !2702, file: !318, line: 1905, baseType: !1926, size: 64, offset: 256)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !2702, file: !318, line: 1908, baseType: !7, size: 32, offset: 320)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !2702, file: !318, line: 1911, baseType: !2709, size: 64, offset: 384)
!2709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2710, size: 64)
!2710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !2352, line: 117, size: 128, elements: !2711)
!2711 = !{!2712}
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !2710, file: !2352, line: 120, baseType: !2517, size: 128)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !2702, file: !318, line: 1914, baseType: !1967, size: 256, offset: 448)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1663, file: !318, line: 3399, baseType: !2715, size: 704)
!2715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !318, line: 2008, size: 704, elements: !2716)
!2716 = !{!2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727}
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2715, file: !318, line: 2009, baseType: !1699, size: 192)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2715, file: !318, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !2715, file: !318, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2715, file: !318, line: 2014, baseType: !1784, size: 32, offset: 224)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !2715, file: !318, line: 2016, baseType: !1661, size: 64, offset: 256)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !2715, file: !318, line: 2017, baseType: !2504, size: 64, offset: 320)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !2715, file: !318, line: 2019, baseType: !1661, size: 64, offset: 384)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !2715, file: !318, line: 2020, baseType: !1661, size: 64, offset: 448)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2715, file: !318, line: 2021, baseType: !1661, size: 64, offset: 512)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !2715, file: !318, line: 2022, baseType: !1661, size: 64, offset: 576)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !2715, file: !318, line: 2023, baseType: !1661, size: 64, offset: 640)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1663, file: !318, line: 3400, baseType: !2729, size: 832)
!2729 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !318, line: 2430, size: 832, elements: !2730)
!2730 = !{!2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740}
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2729, file: !318, line: 2431, baseType: !1699, size: 192)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2729, file: !318, line: 2433, baseType: !1661, size: 64, offset: 192)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !2729, file: !318, line: 2434, baseType: !1661, size: 64, offset: 256)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !2729, file: !318, line: 2435, baseType: !1661, size: 64, offset: 320)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !2729, file: !318, line: 2436, baseType: !1661, size: 64, offset: 384)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !2729, file: !318, line: 2437, baseType: !2504, size: 64, offset: 448)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !2729, file: !318, line: 2438, baseType: !1661, size: 64, offset: 512)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !2729, file: !318, line: 2440, baseType: !1661, size: 64, offset: 576)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !2729, file: !318, line: 2441, baseType: !1661, size: 64, offset: 640)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !2729, file: !318, line: 2443, baseType: !2741, size: 128, offset: 704)
!2741 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !318, line: 182, baseType: !2742)
!2742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !318, line: 182, size: 128, elements: !2743)
!2743 = !{!2744}
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2742, file: !318, line: 182, baseType: !2509, size: 128)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !1663, file: !318, line: 3401, baseType: !2746, size: 320)
!2746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !318, line: 3327, size: 320, elements: !2747)
!2747 = !{!2748, !2749, !2756}
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2746, file: !318, line: 3329, baseType: !1699, size: 192)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2746, file: !318, line: 3330, baseType: !2750, size: 64, offset: 192)
!2750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2751, size: 64)
!2751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !318, line: 3320, size: 192, elements: !2752)
!2752 = !{!2753, !2754, !2755}
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2751, file: !318, line: 3322, baseType: !2750, size: 64)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2751, file: !318, line: 3323, baseType: !2750, size: 64, offset: 64)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2751, file: !318, line: 3324, baseType: !1661, size: 64, offset: 128)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2746, file: !318, line: 3331, baseType: !2750, size: 64, offset: 256)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !1663, file: !318, line: 3402, baseType: !2758, size: 256)
!2758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !318, line: 1540, size: 256, elements: !2759)
!2759 = !{!2760, !2761}
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2758, file: !318, line: 1541, baseType: !1699, size: 192)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !2758, file: !318, line: 1542, baseType: !2762, size: 64, offset: 192)
!2762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2763, size: 64)
!2763 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !318, line: 1538, baseType: !2764)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !318, line: 1538, size: 192, elements: !2765)
!2765 = !{!2766}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2764, file: !318, line: 1538, baseType: !2767, size: 192)
!2767 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !318, line: 1537, baseType: !2768)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !318, line: 1537, size: 192, elements: !2769)
!2769 = !{!2770, !2771, !2772}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2768, file: !318, line: 1537, baseType: !7, size: 32)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2768, file: !318, line: 1537, baseType: !7, size: 32, offset: 32)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2768, file: !318, line: 1537, baseType: !2773, size: 128, offset: 64)
!2773 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2774, size: 128, elements: !1757)
!2774 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !318, line: 1535, baseType: !2775)
!2775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !318, line: 1532, size: 128, elements: !2776)
!2776 = !{!2777, !2778}
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2775, file: !318, line: 1533, baseType: !1661, size: 64)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2775, file: !318, line: 1534, baseType: !1661, size: 64, offset: 64)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !1663, file: !318, line: 3403, baseType: !2780, size: 512)
!2780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !318, line: 1938, size: 512, elements: !2781)
!2781 = !{!2782, !2783, !2784, !2785, !2791, !2792, !2793}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2780, file: !318, line: 1939, baseType: !1699, size: 192)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2780, file: !318, line: 1940, baseType: !1784, size: 32, offset: 192)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2780, file: !318, line: 1941, baseType: !541, size: 32, offset: 224)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !2780, file: !318, line: 1946, baseType: !2786, size: 32, offset: 256)
!2786 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !318, line: 1942, size: 32, elements: !2787)
!2787 = !{!2788, !2789, !2790}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !2786, file: !318, line: 1943, baseType: !559, size: 32)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !2786, file: !318, line: 1944, baseType: !566, size: 32)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !2786, file: !318, line: 1945, baseType: !317, size: 32)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !2780, file: !318, line: 1950, baseType: !1916, size: 64, offset: 320)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !2780, file: !318, line: 1951, baseType: !1916, size: 64, offset: 384)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2780, file: !318, line: 1953, baseType: !1979, size: 64, offset: 448)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !1663, file: !318, line: 3404, baseType: !2795, size: 1664)
!2795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !318, line: 3337, size: 1664, elements: !2796)
!2796 = !{!2797, !2798}
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2795, file: !318, line: 3338, baseType: !1699, size: 192)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2795, file: !318, line: 3341, baseType: !2799, size: 1472, offset: 192)
!2799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !2800, line: 410, size: 1472, elements: !2801)
!2800 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2801 = !{!2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965}
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !2799, file: !2800, line: 412, baseType: !1643, size: 32)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !2799, file: !2800, line: 413, baseType: !1643, size: 32, offset: 32)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !2799, file: !2800, line: 414, baseType: !1643, size: 32, offset: 64)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !2799, file: !2800, line: 415, baseType: !1643, size: 32, offset: 96)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !2799, file: !2800, line: 416, baseType: !1643, size: 32, offset: 128)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !2799, file: !2800, line: 417, baseType: !1643, size: 32, offset: 160)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !2799, file: !2800, line: 418, baseType: !1776, size: 8, offset: 192)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !2799, file: !2800, line: 419, baseType: !1776, size: 8, offset: 200)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !2799, file: !2800, line: 420, baseType: !2811, size: 8, offset: 208)
!2811 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !2799, file: !2800, line: 421, baseType: !2811, size: 8, offset: 216)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !2799, file: !2800, line: 422, baseType: !2811, size: 8, offset: 224)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !2799, file: !2800, line: 423, baseType: !2811, size: 8, offset: 232)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !2799, file: !2800, line: 424, baseType: !2811, size: 8, offset: 240)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !2799, file: !2800, line: 425, baseType: !2811, size: 8, offset: 248)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !2799, file: !2800, line: 426, baseType: !2811, size: 8, offset: 256)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !2799, file: !2800, line: 427, baseType: !2811, size: 8, offset: 264)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !2799, file: !2800, line: 428, baseType: !2811, size: 8, offset: 272)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !2799, file: !2800, line: 429, baseType: !2811, size: 8, offset: 280)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !2799, file: !2800, line: 430, baseType: !2811, size: 8, offset: 288)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !2799, file: !2800, line: 431, baseType: !2811, size: 8, offset: 296)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !2799, file: !2800, line: 432, baseType: !2811, size: 8, offset: 304)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !2799, file: !2800, line: 433, baseType: !2811, size: 8, offset: 312)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !2799, file: !2800, line: 434, baseType: !2811, size: 8, offset: 320)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !2799, file: !2800, line: 435, baseType: !2811, size: 8, offset: 328)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !2799, file: !2800, line: 436, baseType: !2811, size: 8, offset: 336)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !2799, file: !2800, line: 437, baseType: !2811, size: 8, offset: 344)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !2799, file: !2800, line: 438, baseType: !2811, size: 8, offset: 352)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !2799, file: !2800, line: 439, baseType: !2811, size: 8, offset: 360)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !2799, file: !2800, line: 440, baseType: !2811, size: 8, offset: 368)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !2799, file: !2800, line: 441, baseType: !2811, size: 8, offset: 376)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !2799, file: !2800, line: 442, baseType: !2811, size: 8, offset: 384)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !2799, file: !2800, line: 443, baseType: !2811, size: 8, offset: 392)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !2799, file: !2800, line: 444, baseType: !2811, size: 8, offset: 400)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !2799, file: !2800, line: 445, baseType: !2811, size: 8, offset: 408)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !2799, file: !2800, line: 446, baseType: !2811, size: 8, offset: 416)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !2799, file: !2800, line: 447, baseType: !2811, size: 8, offset: 424)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !2799, file: !2800, line: 448, baseType: !2811, size: 8, offset: 432)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !2799, file: !2800, line: 449, baseType: !2811, size: 8, offset: 440)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !2799, file: !2800, line: 450, baseType: !2811, size: 8, offset: 448)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !2799, file: !2800, line: 451, baseType: !2811, size: 8, offset: 456)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !2799, file: !2800, line: 452, baseType: !2811, size: 8, offset: 464)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !2799, file: !2800, line: 453, baseType: !2811, size: 8, offset: 472)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !2799, file: !2800, line: 454, baseType: !2811, size: 8, offset: 480)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !2799, file: !2800, line: 455, baseType: !2811, size: 8, offset: 488)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !2799, file: !2800, line: 456, baseType: !2811, size: 8, offset: 496)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !2799, file: !2800, line: 457, baseType: !2811, size: 8, offset: 504)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !2799, file: !2800, line: 458, baseType: !2811, size: 8, offset: 512)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !2799, file: !2800, line: 459, baseType: !2811, size: 8, offset: 520)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !2799, file: !2800, line: 460, baseType: !2811, size: 8, offset: 528)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !2799, file: !2800, line: 461, baseType: !2811, size: 8, offset: 536)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !2799, file: !2800, line: 462, baseType: !2811, size: 8, offset: 544)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !2799, file: !2800, line: 463, baseType: !2811, size: 8, offset: 552)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !2799, file: !2800, line: 464, baseType: !2811, size: 8, offset: 560)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !2799, file: !2800, line: 465, baseType: !2811, size: 8, offset: 568)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !2799, file: !2800, line: 466, baseType: !2811, size: 8, offset: 576)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !2799, file: !2800, line: 467, baseType: !2811, size: 8, offset: 584)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !2799, file: !2800, line: 468, baseType: !2811, size: 8, offset: 592)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !2799, file: !2800, line: 469, baseType: !2811, size: 8, offset: 600)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !2799, file: !2800, line: 470, baseType: !2811, size: 8, offset: 608)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !2799, file: !2800, line: 471, baseType: !2811, size: 8, offset: 616)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !2799, file: !2800, line: 472, baseType: !2811, size: 8, offset: 624)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !2799, file: !2800, line: 473, baseType: !2811, size: 8, offset: 632)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !2799, file: !2800, line: 474, baseType: !2811, size: 8, offset: 640)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !2799, file: !2800, line: 475, baseType: !2811, size: 8, offset: 648)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !2799, file: !2800, line: 476, baseType: !2811, size: 8, offset: 656)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !2799, file: !2800, line: 477, baseType: !2811, size: 8, offset: 664)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !2799, file: !2800, line: 478, baseType: !2811, size: 8, offset: 672)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !2799, file: !2800, line: 479, baseType: !2811, size: 8, offset: 680)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !2799, file: !2800, line: 480, baseType: !2811, size: 8, offset: 688)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !2799, file: !2800, line: 481, baseType: !2811, size: 8, offset: 696)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !2799, file: !2800, line: 482, baseType: !2811, size: 8, offset: 704)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !2799, file: !2800, line: 483, baseType: !2811, size: 8, offset: 712)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !2799, file: !2800, line: 484, baseType: !2811, size: 8, offset: 720)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !2799, file: !2800, line: 485, baseType: !2811, size: 8, offset: 728)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !2799, file: !2800, line: 486, baseType: !2811, size: 8, offset: 736)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !2799, file: !2800, line: 487, baseType: !2811, size: 8, offset: 744)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !2799, file: !2800, line: 488, baseType: !2811, size: 8, offset: 752)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !2799, file: !2800, line: 489, baseType: !2811, size: 8, offset: 760)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !2799, file: !2800, line: 490, baseType: !2811, size: 8, offset: 768)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !2799, file: !2800, line: 491, baseType: !2811, size: 8, offset: 776)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !2799, file: !2800, line: 492, baseType: !2811, size: 8, offset: 784)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !2799, file: !2800, line: 493, baseType: !2811, size: 8, offset: 792)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !2799, file: !2800, line: 494, baseType: !2811, size: 8, offset: 800)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !2799, file: !2800, line: 495, baseType: !2811, size: 8, offset: 808)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !2799, file: !2800, line: 496, baseType: !2811, size: 8, offset: 816)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !2799, file: !2800, line: 497, baseType: !2811, size: 8, offset: 824)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !2799, file: !2800, line: 498, baseType: !2811, size: 8, offset: 832)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !2799, file: !2800, line: 499, baseType: !2811, size: 8, offset: 840)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !2799, file: !2800, line: 500, baseType: !2811, size: 8, offset: 848)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !2799, file: !2800, line: 501, baseType: !2811, size: 8, offset: 856)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !2799, file: !2800, line: 502, baseType: !2811, size: 8, offset: 864)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !2799, file: !2800, line: 503, baseType: !2811, size: 8, offset: 872)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !2799, file: !2800, line: 504, baseType: !2811, size: 8, offset: 880)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !2799, file: !2800, line: 505, baseType: !2811, size: 8, offset: 888)
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !2799, file: !2800, line: 506, baseType: !2811, size: 8, offset: 896)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !2799, file: !2800, line: 507, baseType: !2811, size: 8, offset: 904)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !2799, file: !2800, line: 508, baseType: !2811, size: 8, offset: 912)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !2799, file: !2800, line: 509, baseType: !2811, size: 8, offset: 920)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !2799, file: !2800, line: 510, baseType: !2811, size: 8, offset: 928)
!2902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !2799, file: !2800, line: 511, baseType: !2811, size: 8, offset: 936)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !2799, file: !2800, line: 512, baseType: !2811, size: 8, offset: 944)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !2799, file: !2800, line: 513, baseType: !2811, size: 8, offset: 952)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !2799, file: !2800, line: 514, baseType: !2811, size: 8, offset: 960)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !2799, file: !2800, line: 515, baseType: !2811, size: 8, offset: 968)
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !2799, file: !2800, line: 516, baseType: !2811, size: 8, offset: 976)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !2799, file: !2800, line: 517, baseType: !2811, size: 8, offset: 984)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !2799, file: !2800, line: 518, baseType: !2811, size: 8, offset: 992)
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !2799, file: !2800, line: 519, baseType: !2811, size: 8, offset: 1000)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !2799, file: !2800, line: 520, baseType: !2811, size: 8, offset: 1008)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !2799, file: !2800, line: 521, baseType: !2811, size: 8, offset: 1016)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !2799, file: !2800, line: 522, baseType: !2811, size: 8, offset: 1024)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !2799, file: !2800, line: 523, baseType: !2811, size: 8, offset: 1032)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !2799, file: !2800, line: 524, baseType: !2811, size: 8, offset: 1040)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !2799, file: !2800, line: 525, baseType: !2811, size: 8, offset: 1048)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !2799, file: !2800, line: 526, baseType: !2811, size: 8, offset: 1056)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !2799, file: !2800, line: 527, baseType: !2811, size: 8, offset: 1064)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !2799, file: !2800, line: 528, baseType: !2811, size: 8, offset: 1072)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !2799, file: !2800, line: 529, baseType: !2811, size: 8, offset: 1080)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !2799, file: !2800, line: 530, baseType: !2811, size: 8, offset: 1088)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !2799, file: !2800, line: 531, baseType: !2811, size: 8, offset: 1096)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !2799, file: !2800, line: 532, baseType: !2811, size: 8, offset: 1104)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !2799, file: !2800, line: 533, baseType: !2811, size: 8, offset: 1112)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !2799, file: !2800, line: 534, baseType: !2811, size: 8, offset: 1120)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !2799, file: !2800, line: 535, baseType: !2811, size: 8, offset: 1128)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !2799, file: !2800, line: 536, baseType: !2811, size: 8, offset: 1136)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !2799, file: !2800, line: 537, baseType: !2811, size: 8, offset: 1144)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !2799, file: !2800, line: 538, baseType: !2811, size: 8, offset: 1152)
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !2799, file: !2800, line: 539, baseType: !2811, size: 8, offset: 1160)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !2799, file: !2800, line: 540, baseType: !2811, size: 8, offset: 1168)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !2799, file: !2800, line: 541, baseType: !2811, size: 8, offset: 1176)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !2799, file: !2800, line: 542, baseType: !2811, size: 8, offset: 1184)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !2799, file: !2800, line: 543, baseType: !2811, size: 8, offset: 1192)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !2799, file: !2800, line: 544, baseType: !2811, size: 8, offset: 1200)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !2799, file: !2800, line: 545, baseType: !2811, size: 8, offset: 1208)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !2799, file: !2800, line: 546, baseType: !2811, size: 8, offset: 1216)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !2799, file: !2800, line: 547, baseType: !2811, size: 8, offset: 1224)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !2799, file: !2800, line: 548, baseType: !2811, size: 8, offset: 1232)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !2799, file: !2800, line: 549, baseType: !2811, size: 8, offset: 1240)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !2799, file: !2800, line: 550, baseType: !2811, size: 8, offset: 1248)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !2799, file: !2800, line: 551, baseType: !2811, size: 8, offset: 1256)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !2799, file: !2800, line: 552, baseType: !2811, size: 8, offset: 1264)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !2799, file: !2800, line: 553, baseType: !2811, size: 8, offset: 1272)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !2799, file: !2800, line: 554, baseType: !2811, size: 8, offset: 1280)
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !2799, file: !2800, line: 555, baseType: !2811, size: 8, offset: 1288)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !2799, file: !2800, line: 556, baseType: !2811, size: 8, offset: 1296)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !2799, file: !2800, line: 557, baseType: !2811, size: 8, offset: 1304)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !2799, file: !2800, line: 558, baseType: !2811, size: 8, offset: 1312)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !2799, file: !2800, line: 559, baseType: !2811, size: 8, offset: 1320)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !2799, file: !2800, line: 560, baseType: !2811, size: 8, offset: 1328)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !2799, file: !2800, line: 561, baseType: !2811, size: 8, offset: 1336)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !2799, file: !2800, line: 562, baseType: !2811, size: 8, offset: 1344)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !2799, file: !2800, line: 563, baseType: !2811, size: 8, offset: 1352)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !2799, file: !2800, line: 564, baseType: !2811, size: 8, offset: 1360)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !2799, file: !2800, line: 565, baseType: !2811, size: 8, offset: 1368)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !2799, file: !2800, line: 566, baseType: !2811, size: 8, offset: 1376)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !2799, file: !2800, line: 567, baseType: !2811, size: 8, offset: 1384)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !2799, file: !2800, line: 568, baseType: !2811, size: 8, offset: 1392)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !2799, file: !2800, line: 569, baseType: !2811, size: 8, offset: 1400)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !2799, file: !2800, line: 570, baseType: !2811, size: 8, offset: 1408)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !2799, file: !2800, line: 571, baseType: !2811, size: 8, offset: 1416)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !2799, file: !2800, line: 572, baseType: !2811, size: 8, offset: 1424)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !2799, file: !2800, line: 573, baseType: !2811, size: 8, offset: 1432)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !2799, file: !2800, line: 574, baseType: !2811, size: 8, offset: 1440)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !1663, file: !318, line: 3405, baseType: !2967, size: 384)
!2967 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !318, line: 3352, size: 384, elements: !2968)
!2968 = !{!2969, !2970}
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2967, file: !318, line: 3353, baseType: !1699, size: 192)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2967, file: !318, line: 3356, baseType: !2971, size: 192, offset: 192)
!2971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !2800, line: 578, size: 192, elements: !2972)
!2972 = !{!2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983}
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2971, file: !2800, line: 580, baseType: !1643, size: 32)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2971, file: !2800, line: 581, baseType: !1643, size: 32, offset: 32)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2971, file: !2800, line: 582, baseType: !1643, size: 32, offset: 64)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2971, file: !2800, line: 583, baseType: !1643, size: 32, offset: 96)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2971, file: !2800, line: 584, baseType: !1776, size: 8, offset: 128)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2971, file: !2800, line: 585, baseType: !1776, size: 8, offset: 136)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2971, file: !2800, line: 586, baseType: !1776, size: 8, offset: 144)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2971, file: !2800, line: 587, baseType: !1776, size: 8, offset: 152)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2971, file: !2800, line: 588, baseType: !1776, size: 8, offset: 160)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2971, file: !2800, line: 589, baseType: !1776, size: 8, offset: 168)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2971, file: !2800, line: 590, baseType: !1776, size: 8, offset: 176)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1658, file: !3, line: 138, baseType: !2985, size: 384, offset: 64)
!2985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hashable_expr", file: !3, line: 60, size: 384, elements: !2986)
!2986 = !{!2987, !2988, !2989}
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2985, file: !3, line: 62, baseType: !1661, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "kind", scope: !2985, file: !3, line: 63, baseType: !587, size: 32, offset: 64)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2985, file: !3, line: 69, baseType: !2990, size: 256, offset: 128)
!2990 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2985, file: !3, line: 64, size: 256, elements: !2991)
!2991 = !{!2992, !2996, !3001, !3007}
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "single", scope: !2990, file: !3, line: 65, baseType: !2993, size: 64)
!2993 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2990, file: !3, line: 65, size: 64, elements: !2994)
!2994 = !{!2995}
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2993, file: !3, line: 65, baseType: !1661, size: 64)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "unary", scope: !2990, file: !3, line: 66, baseType: !2997, size: 128)
!2997 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2990, file: !3, line: 66, size: 128, elements: !2998)
!2998 = !{!2999, !3000}
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2997, file: !3, line: 66, baseType: !317, size: 32)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "opnd", scope: !2997, file: !3, line: 66, baseType: !1661, size: 64, offset: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "binary", scope: !2990, file: !3, line: 67, baseType: !3002, size: 192)
!3002 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2990, file: !3, line: 67, size: 192, elements: !3003)
!3003 = !{!3004, !3005, !3006}
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !3002, file: !3, line: 67, baseType: !317, size: 32)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "opnd0", scope: !3002, file: !3, line: 67, baseType: !1661, size: 64, offset: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "opnd1", scope: !3002, file: !3, line: 67, baseType: !1661, size: 64, offset: 128)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2990, file: !3, line: 68, baseType: !3008, size: 256)
!3008 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2990, file: !3, line: 68, size: 256, elements: !3009)
!3009 = !{!3010, !3011, !3012, !3013}
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !3008, file: !3, line: 68, baseType: !1661, size: 64)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "pure", scope: !3008, file: !3, line: 68, baseType: !1776, size: 8, offset: 64)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3008, file: !3, line: 68, baseType: !2071, size: 64, offset: 128)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3008, file: !3, line: 68, baseType: !1960, size: 64, offset: 192)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1658, file: !3, line: 141, baseType: !1926, size: 64, offset: 448)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1658, file: !3, line: 144, baseType: !2453, size: 32, offset: 512)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "stamp", scope: !1658, file: !3, line: 148, baseType: !3017, size: 64, offset: 576)
!3017 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!3018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3019, size: 64)
!3019 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_expr_hash_elt_t_heap", file: !3, line: 126, baseType: !3020)
!3020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_expr_hash_elt_t_heap", file: !3, line: 126, size: 128, elements: !3021)
!3021 = !{!3022}
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3020, file: !3, line: 126, baseType: !3023, size: 128)
!3023 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_expr_hash_elt_t_base", file: !3, line: 125, baseType: !3024)
!3024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_expr_hash_elt_t_base", file: !3, line: 125, size: 128, elements: !3025)
!3025 = !{!3026, !3027, !3028}
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3024, file: !3, line: 125, baseType: !7, size: 32)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3024, file: !3, line: 125, baseType: !7, size: 32, offset: 32)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3024, file: !3, line: 125, baseType: !3029, size: 64, offset: 64)
!3029 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3030, size: 64, elements: !1757)
!3030 = !DIDerivedType(tag: DW_TAG_typedef, name: "expr_hash_elt_t", file: !3, line: 124, baseType: !3017)
!3031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3032, size: 64)
!3032 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !318, line: 184, baseType: !3033)
!3033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !318, line: 184, size: 128, elements: !3034)
!3034 = !{!3035}
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3033, file: !318, line: 184, baseType: !2509, size: 128)
!3036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3037, size: 64)
!3037 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_info", file: !3, line: 95, size: 256, elements: !3038)
!3038 = !{!3039, !3040, !3041, !3047}
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !3037, file: !3, line: 99, baseType: !1661, size: 64)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !3037, file: !3, line: 100, baseType: !1661, size: 64, offset: 64)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "cond_equivalences", scope: !3037, file: !3, line: 106, baseType: !3042, size: 64, offset: 128)
!3042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3043, size: 64)
!3043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cond_equivalence", file: !3, line: 75, size: 448, elements: !3044)
!3044 = !{!3045, !3046}
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !3043, file: !3, line: 77, baseType: !2985, size: 384)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3043, file: !3, line: 78, baseType: !1661, size: 64, offset: 384)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "max_cond_equivalences", scope: !3037, file: !3, line: 107, baseType: !7, size: 32, offset: 192)
!3048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3049, size: 64)
!3049 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1928)
!3050 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !1546, line: 30, baseType: !3051)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3052, size: 64)
!3052 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !318, line: 1893, baseType: !1967)
!3053 = !{!0, !3054, !3082, !3084, !3093, !3095, !3097, !3099}
!3054 = !DIGlobalVariableExpression(var: !3055, expr: !DIExpression())
!3055 = distinct !DIGlobalVariable(name: "pass_phi_only_cprop", scope: !2, file: !3, line: 2875, type: !3056, isLocal: false, isDefinition: true)
!3056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !6, line: 156, size: 640, elements: !3057)
!3057 = !{!3058}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3056, file: !6, line: 158, baseType: !3059, size: 640)
!3059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !3060)
!3060 = !{!3061, !3062, !3063, !3067, !3071, !3073, !3074, !3075, !3077, !3078, !3079, !3080, !3081}
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3059, file: !6, line: 117, baseType: !5, size: 32)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3059, file: !6, line: 121, baseType: !1860, size: 64, offset: 64)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3059, file: !6, line: 125, baseType: !3064, size: 64, offset: 128)
!3064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3065, size: 64)
!3065 = !DISubroutineType(types: !3066)
!3066 = !{!1776}
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3059, file: !6, line: 130, baseType: !3068, size: 64, offset: 192)
!3068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3069, size: 64)
!3069 = !DISubroutineType(types: !3070)
!3070 = !{!7}
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3059, file: !6, line: 133, baseType: !3072, size: 64, offset: 256)
!3072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3059, size: 64)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3059, file: !6, line: 136, baseType: !3072, size: 64, offset: 320)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3059, file: !6, line: 139, baseType: !1643, size: 32, offset: 384)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3059, file: !6, line: 143, baseType: !3076, size: 32, offset: 416)
!3076 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3059, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3059, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3059, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3059, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3059, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!3082 = !DIGlobalVariableExpression(var: !3083, expr: !DIExpression())
!3083 = distinct !DIGlobalVariable(name: "avail_exprs", scope: !2, file: !3, line: 117, type: !2444, isLocal: true, isDefinition: true)
!3084 = !DIGlobalVariableExpression(var: !3085, expr: !DIExpression())
!3085 = distinct !DIGlobalVariable(name: "opt_stats", scope: !2, file: !3, line: 174, type: !3086, isLocal: true, isDefinition: true)
!3086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_stats_d", file: !3, line: 165, size: 320, elements: !3087)
!3087 = !{!3088, !3089, !3090, !3091, !3092}
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "num_stmts", scope: !3086, file: !3, line: 167, baseType: !1625, size: 64)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "num_exprs_considered", scope: !3086, file: !3, line: 168, baseType: !1625, size: 64, offset: 64)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "num_re", scope: !3086, file: !3, line: 169, baseType: !1625, size: 64, offset: 128)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "num_const_prop", scope: !3086, file: !3, line: 170, baseType: !1625, size: 64, offset: 192)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "num_copy_prop", scope: !3086, file: !3, line: 171, baseType: !1625, size: 64, offset: 256)
!3093 = !DIGlobalVariableExpression(var: !3094, expr: !DIExpression())
!3094 = distinct !DIGlobalVariable(name: "avail_exprs_stack", scope: !2, file: !3, line: 128, type: !3018, isLocal: true, isDefinition: true)
!3095 = !DIGlobalVariableExpression(var: !3096, expr: !DIExpression())
!3096 = distinct !DIGlobalVariable(name: "const_and_copies_stack", scope: !2, file: !3, line: 155, type: !3031, isLocal: true, isDefinition: true)
!3097 = !DIGlobalVariableExpression(var: !3098, expr: !DIExpression())
!3098 = distinct !DIGlobalVariable(name: "need_eh_cleanup", scope: !2, file: !3, line: 162, type: !1590, isLocal: true, isDefinition: true)
!3099 = !DIGlobalVariableExpression(var: !3100, expr: !DIExpression())
!3100 = distinct !DIGlobalVariable(name: "cfg_altered", scope: !2, file: !3, line: 158, type: !1776, isLocal: true, isDefinition: true)
!3101 = !{i32 7, !"Dwarf Version", i32 4}
!3102 = !{i32 2, !"Debug Info Version", i32 3}
!3103 = !{i32 1, !"wchar_size", i32 4}
!3104 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3105 = distinct !DISubprogram(name: "gate_dominator", scope: !3, file: !3, line: 738, type: !3065, scopeLine: 739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3106 = !{}
!3107 = !DILocation(line: 740, column: 10, scope: !3105)
!3108 = !DILocation(line: 740, column: 24, scope: !3105)
!3109 = !DILocation(line: 740, column: 3, scope: !3105)
!3110 = distinct !DISubprogram(name: "tree_ssa_dominator_optimize", scope: !3, file: !3, line: 610, type: !3069, scopeLine: 611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3111 = !DILocalVariable(name: "walk_data", scope: !3110, file: !3, line: 612, type: !3112)
!3112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dom_walk_data", file: !3113, line: 29, size: 512, elements: !3114)
!3113 = !DIFile(filename: "./domwalk.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3114 = !{!3115, !3116, !3121, !3125, !3126, !3127, !3141, !3142}
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "dom_direction", scope: !3112, file: !3113, line: 35, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "initialize_block_local_data", scope: !3112, file: !3113, line: 46, baseType: !3117, size: 64, offset: 64)
!3117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3118 = !DISubroutineType(types: !3119)
!3119 = !{null, !3120, !2412, !1776}
!3120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "before_dom_children", scope: !3112, file: !3113, line: 50, baseType: !3122, size: 64, offset: 128)
!3122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3123, size: 64)
!3123 = !DISubroutineType(types: !3124)
!3124 = !{null, !3120, !2412}
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "after_dom_children", scope: !3112, file: !3113, line: 53, baseType: !3122, size: 64, offset: 192)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "global_data", scope: !3112, file: !3113, line: 56, baseType: !1589, size: 64, offset: 256)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "block_data_stack", scope: !3112, file: !3113, line: 61, baseType: !3128, size: 64, offset: 320)
!3128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3129, size: 64)
!3129 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_heap", file: !3113, line: 23, baseType: !3130)
!3130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_heap", file: !3113, line: 23, size: 128, elements: !3131)
!3131 = !{!3132}
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3130, file: !3113, line: 23, baseType: !3133, size: 128)
!3133 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_void_p_base", file: !3113, line: 22, baseType: !3134)
!3134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_void_p_base", file: !3113, line: 22, size: 128, elements: !3135)
!3135 = !{!3136, !3137, !3138}
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3134, file: !3113, line: 22, baseType: !7, size: 32)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3134, file: !3113, line: 22, baseType: !7, size: 32, offset: 32)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3134, file: !3113, line: 22, baseType: !3139, size: 64, offset: 64)
!3139 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3140, size: 64, elements: !1757)
!3140 = !DIDerivedType(tag: DW_TAG_typedef, name: "void_p", file: !3113, line: 21, baseType: !1589)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "block_local_data_size", scope: !3112, file: !3113, line: 65, baseType: !2071, size: 64, offset: 384)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "free_block_data", scope: !3112, file: !3113, line: 71, baseType: !3128, size: 64, offset: 448)
!3143 = !DILocation(line: 612, column: 24, scope: !3110)
!3144 = !DILocation(line: 614, column: 3, scope: !3110)
!3145 = !DILocation(line: 617, column: 17, scope: !3110)
!3146 = !DILocation(line: 617, column: 15, scope: !3110)
!3147 = !DILocation(line: 618, column: 23, scope: !3110)
!3148 = !DILocation(line: 618, column: 21, scope: !3110)
!3149 = !DILocation(line: 619, column: 28, scope: !3110)
!3150 = !DILocation(line: 619, column: 26, scope: !3110)
!3151 = !DILocation(line: 620, column: 21, scope: !3110)
!3152 = !DILocation(line: 620, column: 19, scope: !3110)
!3153 = !DILocation(line: 623, column: 13, scope: !3110)
!3154 = !DILocation(line: 623, column: 27, scope: !3110)
!3155 = !DILocation(line: 624, column: 13, scope: !3110)
!3156 = !DILocation(line: 624, column: 41, scope: !3110)
!3157 = !DILocation(line: 625, column: 13, scope: !3110)
!3158 = !DILocation(line: 625, column: 33, scope: !3110)
!3159 = !DILocation(line: 626, column: 13, scope: !3110)
!3160 = !DILocation(line: 626, column: 32, scope: !3110)
!3161 = !DILocation(line: 630, column: 13, scope: !3110)
!3162 = !DILocation(line: 630, column: 25, scope: !3110)
!3163 = !DILocation(line: 631, column: 13, scope: !3110)
!3164 = !DILocation(line: 631, column: 35, scope: !3110)
!3165 = !DILocation(line: 634, column: 3, scope: !3110)
!3166 = !DILocation(line: 636, column: 3, scope: !3110)
!3167 = !DILocation(line: 637, column: 15, scope: !3110)
!3168 = !DILocation(line: 643, column: 3, scope: !3110)
!3169 = !DILocation(line: 646, column: 3, scope: !3110)
!3170 = !DILocation(line: 651, column: 3, scope: !3110)
!3171 = !DILocation(line: 654, column: 36, scope: !3110)
!3172 = !DILocation(line: 654, column: 3, scope: !3110)
!3173 = !DILocalVariable(name: "gsi", scope: !3174, file: !3, line: 657, type: !3175)
!3174 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 656, column: 3)
!3175 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !594, line: 265, baseType: !3176)
!3176 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !594, line: 254, size: 192, elements: !3177)
!3177 = !{!3178, !3179, !3180}
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3176, file: !594, line: 257, baseType: !1921, size: 64)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3176, file: !594, line: 263, baseType: !1916, size: 64, offset: 64)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3176, file: !594, line: 264, baseType: !2412, size: 64, offset: 128)
!3181 = !DILocation(line: 657, column: 26, scope: !3174)
!3182 = !DILocalVariable(name: "bb", scope: !3174, file: !3, line: 658, type: !2412)
!3183 = !DILocation(line: 658, column: 17, scope: !3174)
!3184 = !DILocation(line: 659, column: 5, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3174, file: !3, line: 659, column: 5)
!3186 = !DILocation(line: 659, column: 5, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3185, file: !3, line: 659, column: 5)
!3188 = !DILocation(line: 660, column: 33, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3190, file: !3, line: 660, column: 8)
!3190 = distinct !DILexicalBlock(scope: !3187, file: !3, line: 660, column: 7)
!3191 = !DILocation(line: 660, column: 19, scope: !3189)
!3192 = !DILocation(line: 660, column: 13, scope: !3189)
!3193 = !DILocation(line: 660, column: 39, scope: !3194)
!3194 = distinct !DILexicalBlock(scope: !3189, file: !3, line: 660, column: 8)
!3195 = !DILocation(line: 660, column: 38, scope: !3194)
!3196 = !DILocation(line: 660, column: 8, scope: !3189)
!3197 = !DILocation(line: 661, column: 29, scope: !3194)
!3198 = !DILocation(line: 661, column: 4, scope: !3194)
!3199 = !DILocation(line: 660, column: 56, scope: !3194)
!3200 = !DILocation(line: 660, column: 8, scope: !3194)
!3201 = distinct !{!3201, !3196, !3202}
!3202 = !DILocation(line: 661, column: 43, scope: !3189)
!3203 = !DILocation(line: 662, column: 7, scope: !3190)
!3204 = distinct !{!3204, !3184, !3205}
!3205 = !DILocation(line: 662, column: 7, scope: !3185)
!3206 = !DILocation(line: 670, column: 3, scope: !3110)
!3207 = !DILocation(line: 672, column: 3, scope: !3110)
!3208 = !DILocation(line: 675, column: 45, scope: !3110)
!3209 = !DILocation(line: 675, column: 18, scope: !3110)
!3210 = !DILocation(line: 675, column: 15, scope: !3110)
!3211 = !DILocation(line: 677, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 677, column: 7)
!3213 = !DILocation(line: 677, column: 7, scope: !3110)
!3214 = !DILocation(line: 678, column: 5, scope: !3212)
!3215 = !DILocation(line: 682, column: 8, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 682, column: 7)
!3217 = !DILocation(line: 682, column: 7, scope: !3110)
!3218 = !DILocalVariable(name: "i", scope: !3219, file: !3, line: 684, type: !7)
!3219 = distinct !DILexicalBlock(scope: !3216, file: !3, line: 683, column: 5)
!3220 = !DILocation(line: 684, column: 16, scope: !3219)
!3221 = !DILocalVariable(name: "bi", scope: !3219, file: !3, line: 685, type: !3222)
!3222 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !1594, line: 218, baseType: !3223)
!3223 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1594, line: 203, size: 256, elements: !3224)
!3224 = !{!3225, !3226, !3227, !3228}
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3223, file: !1594, line: 206, baseType: !1597, size: 64)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3223, file: !1594, line: 209, baseType: !1597, size: 64, offset: 64)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3223, file: !1594, line: 212, baseType: !7, size: 32, offset: 128)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3223, file: !1594, line: 217, baseType: !1607, size: 64, offset: 192)
!3229 = !DILocation(line: 685, column: 23, scope: !3219)
!3230 = !DILocation(line: 690, column: 7, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3219, file: !3, line: 690, column: 7)
!3232 = !DILocation(line: 690, column: 7, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3231, file: !3, line: 690, column: 7)
!3234 = !DILocalVariable(name: "bb", scope: !3235, file: !3, line: 692, type: !2412)
!3235 = distinct !DILexicalBlock(scope: !3233, file: !3, line: 691, column: 2)
!3236 = !DILocation(line: 692, column: 16, scope: !3235)
!3237 = !DILocation(line: 692, column: 21, scope: !3235)
!3238 = !DILocation(line: 693, column: 23, scope: !3239)
!3239 = distinct !DILexicalBlock(scope: !3235, file: !3, line: 693, column: 8)
!3240 = !DILocation(line: 693, column: 8, scope: !3239)
!3241 = !DILocation(line: 693, column: 27, scope: !3239)
!3242 = !DILocation(line: 694, column: 8, scope: !3239)
!3243 = !DILocation(line: 694, column: 30, scope: !3239)
!3244 = !DILocation(line: 694, column: 12, scope: !3239)
!3245 = !DILocation(line: 694, column: 35, scope: !3239)
!3246 = !DILocation(line: 694, column: 41, scope: !3239)
!3247 = !DILocation(line: 694, column: 52, scope: !3239)
!3248 = !DILocation(line: 693, column: 8, scope: !3235)
!3249 = !DILocation(line: 696, column: 26, scope: !3250)
!3250 = distinct !DILexicalBlock(scope: !3239, file: !3, line: 695, column: 6)
!3251 = !DILocation(line: 696, column: 43, scope: !3250)
!3252 = !DILocation(line: 696, column: 8, scope: !3250)
!3253 = !DILocation(line: 697, column: 24, scope: !3250)
!3254 = !DILocation(line: 697, column: 54, scope: !3250)
!3255 = !DILocation(line: 697, column: 41, scope: !3250)
!3256 = !DILocation(line: 697, column: 59, scope: !3250)
!3257 = !DILocation(line: 697, column: 8, scope: !3250)
!3258 = !DILocation(line: 698, column: 6, scope: !3250)
!3259 = !DILocation(line: 699, column: 2, scope: !3235)
!3260 = distinct !{!3260, !3230, !3261}
!3261 = !DILocation(line: 699, column: 2, scope: !3231)
!3262 = !DILocation(line: 701, column: 39, scope: !3219)
!3263 = !DILocation(line: 701, column: 7, scope: !3219)
!3264 = !DILocation(line: 702, column: 7, scope: !3219)
!3265 = !DILocation(line: 703, column: 5, scope: !3219)
!3266 = !DILocation(line: 705, column: 29, scope: !3110)
!3267 = !DILocation(line: 706, column: 18, scope: !3110)
!3268 = !DILocation(line: 706, column: 8, scope: !3110)
!3269 = !DILocation(line: 705, column: 3, scope: !3110)
!3270 = !DILocation(line: 707, column: 29, scope: !3110)
!3271 = !DILocation(line: 708, column: 18, scope: !3110)
!3272 = !DILocation(line: 708, column: 8, scope: !3110)
!3273 = !DILocation(line: 707, column: 3, scope: !3110)
!3274 = !DILocation(line: 709, column: 29, scope: !3110)
!3275 = !DILocation(line: 710, column: 18, scope: !3110)
!3276 = !DILocation(line: 710, column: 8, scope: !3110)
!3277 = !DILocation(line: 709, column: 3, scope: !3110)
!3278 = !DILocation(line: 713, column: 7, scope: !3279)
!3279 = distinct !DILexicalBlock(scope: !3110, file: !3, line: 713, column: 7)
!3280 = !DILocation(line: 713, column: 17, scope: !3279)
!3281 = !DILocation(line: 713, column: 21, scope: !3279)
!3282 = !DILocation(line: 713, column: 32, scope: !3279)
!3283 = !DILocation(line: 713, column: 7, scope: !3110)
!3284 = !DILocation(line: 714, column: 40, scope: !3279)
!3285 = !DILocation(line: 714, column: 5, scope: !3279)
!3286 = !DILocation(line: 716, column: 3, scope: !3110)
!3287 = !DILocation(line: 719, column: 16, scope: !3110)
!3288 = !DILocation(line: 719, column: 3, scope: !3110)
!3289 = !DILocation(line: 722, column: 3, scope: !3110)
!3290 = !DILocation(line: 725, column: 3, scope: !3110)
!3291 = !DILocation(line: 727, column: 3, scope: !3110)
!3292 = !DILocation(line: 728, column: 3, scope: !3110)
!3293 = !DILocation(line: 731, column: 3, scope: !3110)
!3294 = !DILocation(line: 732, column: 19, scope: !3110)
!3295 = !DILocation(line: 734, column: 3, scope: !3110)
!3296 = distinct !DISubprogram(name: "dump_dominator_optimization_stats", scope: !3, file: !3, line: 1033, type: !3297, scopeLine: 1034, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{null, !3299}
!3299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3300, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3301, line: 7, baseType: !3302)
!3301 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3303, line: 49, size: 1728, elements: !3304)
!3303 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3304 = !{!3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3320, !3322, !3323, !3324, !3327, !3329, !3330, !3331, !3334, !3336, !3339, !3342, !3343, !3344, !3345, !3346}
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3302, file: !3303, line: 51, baseType: !1643, size: 32)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3302, file: !3303, line: 54, baseType: !1631, size: 64, offset: 64)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3302, file: !3303, line: 55, baseType: !1631, size: 64, offset: 128)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3302, file: !3303, line: 56, baseType: !1631, size: 64, offset: 192)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3302, file: !3303, line: 57, baseType: !1631, size: 64, offset: 256)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3302, file: !3303, line: 58, baseType: !1631, size: 64, offset: 320)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3302, file: !3303, line: 59, baseType: !1631, size: 64, offset: 384)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3302, file: !3303, line: 60, baseType: !1631, size: 64, offset: 448)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3302, file: !3303, line: 61, baseType: !1631, size: 64, offset: 512)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3302, file: !3303, line: 64, baseType: !1631, size: 64, offset: 576)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3302, file: !3303, line: 65, baseType: !1631, size: 64, offset: 640)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3302, file: !3303, line: 66, baseType: !1631, size: 64, offset: 704)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3302, file: !3303, line: 68, baseType: !3318, size: 64, offset: 768)
!3318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3319, size: 64)
!3319 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3303, line: 36, flags: DIFlagFwdDecl)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3302, file: !3303, line: 70, baseType: !3321, size: 64, offset: 832)
!3321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3302, size: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3302, file: !3303, line: 72, baseType: !1643, size: 32, offset: 896)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3302, file: !3303, line: 73, baseType: !1643, size: 32, offset: 928)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3302, file: !3303, line: 74, baseType: !3325, size: 64, offset: 960)
!3325 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3326, line: 152, baseType: !1625)
!3326 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3302, file: !3303, line: 77, baseType: !3328, size: 16, offset: 1024)
!3328 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3302, file: !3303, line: 78, baseType: !2811, size: 8, offset: 1040)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3302, file: !3303, line: 79, baseType: !1756, size: 8, offset: 1048)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3302, file: !3303, line: 81, baseType: !3332, size: 64, offset: 1088)
!3332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3333, size: 64)
!3333 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3303, line: 43, baseType: null)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3302, file: !3303, line: 89, baseType: !3335, size: 64, offset: 1152)
!3335 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3326, line: 153, baseType: !1625)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3302, file: !3303, line: 91, baseType: !3337, size: 64, offset: 1216)
!3337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3338, size: 64)
!3338 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3303, line: 37, flags: DIFlagFwdDecl)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3302, file: !3303, line: 92, baseType: !3340, size: 64, offset: 1280)
!3340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3341, size: 64)
!3341 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3303, line: 38, flags: DIFlagFwdDecl)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3302, file: !3303, line: 93, baseType: !3321, size: 64, offset: 1344)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3302, file: !3303, line: 94, baseType: !1589, size: 64, offset: 1408)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3302, file: !3303, line: 95, baseType: !2071, size: 64, offset: 1472)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3302, file: !3303, line: 96, baseType: !1643, size: 32, offset: 1536)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3302, file: !3303, line: 98, baseType: !3347, size: 160, offset: 1568)
!3347 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1632, size: 160, elements: !3348)
!3348 = !{!3349}
!3349 = !DISubrange(count: 20)
!3350 = !DILocalVariable(name: "file", arg: 1, scope: !3296, file: !3, line: 1033, type: !3299)
!3351 = !DILocation(line: 1033, column: 42, scope: !3296)
!3352 = !DILocation(line: 1035, column: 12, scope: !3296)
!3353 = !DILocation(line: 1036, column: 15, scope: !3296)
!3354 = !DILocation(line: 1035, column: 3, scope: !3296)
!3355 = !DILocation(line: 1037, column: 12, scope: !3296)
!3356 = !DILocation(line: 1038, column: 22, scope: !3296)
!3357 = !DILocation(line: 1037, column: 3, scope: !3296)
!3358 = !DILocation(line: 1040, column: 12, scope: !3296)
!3359 = !DILocation(line: 1040, column: 3, scope: !3296)
!3360 = !DILocation(line: 1042, column: 12, scope: !3296)
!3361 = !DILocation(line: 1042, column: 3, scope: !3296)
!3362 = !DILocation(line: 1043, column: 20, scope: !3296)
!3363 = !DILocation(line: 1043, column: 26, scope: !3296)
!3364 = !DILocation(line: 1043, column: 3, scope: !3296)
!3365 = !DILocation(line: 1044, column: 1, scope: !3296)
!3366 = distinct !DISubprogram(name: "htab_statistics", scope: !3, file: !3, line: 1059, type: !3367, scopeLine: 1060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3367 = !DISubroutineType(types: !3368)
!3368 = !{null, !3299, !2444}
!3369 = !DILocalVariable(name: "file", arg: 1, scope: !3366, file: !3, line: 1059, type: !3299)
!3370 = !DILocation(line: 1059, column: 24, scope: !3366)
!3371 = !DILocalVariable(name: "htab", arg: 2, scope: !3366, file: !3, line: 1059, type: !2444)
!3372 = !DILocation(line: 1059, column: 37, scope: !3366)
!3373 = !DILocation(line: 1061, column: 12, scope: !3366)
!3374 = !DILocation(line: 1062, column: 23, scope: !3366)
!3375 = !DILocation(line: 1062, column: 12, scope: !3366)
!3376 = !DILocation(line: 1063, column: 27, scope: !3366)
!3377 = !DILocation(line: 1063, column: 12, scope: !3366)
!3378 = !DILocation(line: 1064, column: 22, scope: !3366)
!3379 = !DILocation(line: 1064, column: 5, scope: !3366)
!3380 = !DILocation(line: 1061, column: 3, scope: !3366)
!3381 = !DILocation(line: 1065, column: 1, scope: !3366)
!3382 = distinct !DISubprogram(name: "debug_dominator_optimization_stats", scope: !3, file: !3, line: 1050, type: !3383, scopeLine: 1051, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{null}
!3385 = !DILocation(line: 1052, column: 38, scope: !3382)
!3386 = !DILocation(line: 1052, column: 3, scope: !3382)
!3387 = !DILocation(line: 1053, column: 1, scope: !3382)
!3388 = distinct !DISubprogram(name: "loop_depth_of_name", scope: !3, file: !3, line: 1292, type: !3389, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3389 = !DISubroutineType(types: !3390)
!3390 = !{!1643, !1661}
!3391 = !DILocalVariable(name: "x", arg: 1, scope: !3388, file: !3, line: 1292, type: !1661)
!3392 = !DILocation(line: 1292, column: 26, scope: !3388)
!3393 = !DILocalVariable(name: "defstmt", scope: !3388, file: !3, line: 1294, type: !1926)
!3394 = !DILocation(line: 1294, column: 10, scope: !3388)
!3395 = !DILocalVariable(name: "defbb", scope: !3388, file: !3, line: 1295, type: !2412)
!3396 = !DILocation(line: 1295, column: 15, scope: !3388)
!3397 = !DILocation(line: 1298, column: 7, scope: !3398)
!3398 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1298, column: 7)
!3399 = !DILocation(line: 1298, column: 21, scope: !3398)
!3400 = !DILocation(line: 1298, column: 7, scope: !3388)
!3401 = !DILocation(line: 1299, column: 5, scope: !3398)
!3402 = !DILocation(line: 1304, column: 13, scope: !3388)
!3403 = !DILocation(line: 1304, column: 11, scope: !3388)
!3404 = !DILocation(line: 1305, column: 22, scope: !3388)
!3405 = !DILocation(line: 1305, column: 11, scope: !3388)
!3406 = !DILocation(line: 1305, column: 9, scope: !3388)
!3407 = !DILocation(line: 1306, column: 8, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1306, column: 7)
!3409 = !DILocation(line: 1306, column: 7, scope: !3388)
!3410 = !DILocation(line: 1307, column: 5, scope: !3408)
!3411 = !DILocation(line: 1309, column: 10, scope: !3388)
!3412 = !DILocation(line: 1309, column: 17, scope: !3388)
!3413 = !DILocation(line: 1309, column: 3, scope: !3388)
!3414 = !DILocation(line: 1310, column: 1, scope: !3388)
!3415 = distinct !DISubprogram(name: "gimple_bb", scope: !594, file: !594, line: 1112, type: !3416, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3416 = !DISubroutineType(types: !3417)
!3417 = !{!1890, !3418}
!3418 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !1591, line: 60, baseType: !3048)
!3419 = !DILocalVariable(name: "g", arg: 1, scope: !3415, file: !594, line: 1112, type: !3418)
!3420 = !DILocation(line: 1112, column: 25, scope: !3415)
!3421 = !DILocation(line: 1114, column: 10, scope: !3415)
!3422 = !DILocation(line: 1114, column: 13, scope: !3415)
!3423 = !DILocation(line: 1114, column: 20, scope: !3415)
!3424 = !DILocation(line: 1114, column: 3, scope: !3415)
!3425 = distinct !DISubprogram(name: "degenerate_phi_result", scope: !3, file: !3, line: 2382, type: !3426, scopeLine: 2383, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3426 = !DISubroutineType(types: !3427)
!3427 = !{!1661, !1926}
!3428 = !DILocalVariable(name: "phi", arg: 1, scope: !3425, file: !3, line: 2382, type: !1926)
!3429 = !DILocation(line: 2382, column: 31, scope: !3425)
!3430 = !DILocalVariable(name: "lhs", scope: !3425, file: !3, line: 2384, type: !1661)
!3431 = !DILocation(line: 2384, column: 8, scope: !3425)
!3432 = !DILocation(line: 2384, column: 33, scope: !3425)
!3433 = !DILocation(line: 2384, column: 14, scope: !3425)
!3434 = !DILocalVariable(name: "val", scope: !3425, file: !3, line: 2385, type: !1661)
!3435 = !DILocation(line: 2385, column: 8, scope: !3425)
!3436 = !DILocalVariable(name: "i", scope: !3425, file: !3, line: 2386, type: !2071)
!3437 = !DILocation(line: 2386, column: 10, scope: !3425)
!3438 = !DILocation(line: 2391, column: 10, scope: !3439)
!3439 = distinct !DILexicalBlock(scope: !3425, file: !3, line: 2391, column: 3)
!3440 = !DILocation(line: 2391, column: 8, scope: !3439)
!3441 = !DILocation(line: 2391, column: 15, scope: !3442)
!3442 = distinct !DILexicalBlock(scope: !3439, file: !3, line: 2391, column: 3)
!3443 = !DILocation(line: 2391, column: 40, scope: !3442)
!3444 = !DILocation(line: 2391, column: 19, scope: !3442)
!3445 = !DILocation(line: 2391, column: 17, scope: !3442)
!3446 = !DILocation(line: 2391, column: 3, scope: !3439)
!3447 = !DILocalVariable(name: "arg", scope: !3448, file: !3, line: 2393, type: !1661)
!3448 = distinct !DILexicalBlock(scope: !3442, file: !3, line: 2392, column: 5)
!3449 = !DILocation(line: 2393, column: 12, scope: !3448)
!3450 = !DILocation(line: 2393, column: 38, scope: !3448)
!3451 = !DILocation(line: 2393, column: 43, scope: !3448)
!3452 = !DILocation(line: 2393, column: 18, scope: !3448)
!3453 = !DILocation(line: 2395, column: 11, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3448, file: !3, line: 2395, column: 11)
!3455 = !DILocation(line: 2395, column: 18, scope: !3454)
!3456 = !DILocation(line: 2395, column: 15, scope: !3454)
!3457 = !DILocation(line: 2395, column: 11, scope: !3448)
!3458 = !DILocation(line: 2396, column: 2, scope: !3454)
!3459 = !DILocation(line: 2397, column: 17, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3454, file: !3, line: 2397, column: 16)
!3461 = !DILocation(line: 2397, column: 16, scope: !3454)
!3462 = !DILocation(line: 2398, column: 2, scope: !3460)
!3463 = !DILocation(line: 2399, column: 17, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3460, file: !3, line: 2399, column: 16)
!3465 = !DILocation(line: 2399, column: 16, scope: !3460)
!3466 = !DILocation(line: 2400, column: 8, scope: !3464)
!3467 = !DILocation(line: 2400, column: 6, scope: !3464)
!3468 = !DILocation(line: 2400, column: 2, scope: !3464)
!3469 = !DILocation(line: 2401, column: 16, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3464, file: !3, line: 2401, column: 16)
!3471 = !DILocation(line: 2401, column: 23, scope: !3470)
!3472 = !DILocation(line: 2401, column: 20, scope: !3470)
!3473 = !DILocation(line: 2401, column: 16, scope: !3464)
!3474 = !DILocation(line: 2402, column: 2, scope: !3470)
!3475 = !DILocation(line: 2406, column: 16, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3470, file: !3, line: 2406, column: 16)
!3477 = !DILocation(line: 2406, column: 35, scope: !3476)
!3478 = !DILocation(line: 2406, column: 32, scope: !3476)
!3479 = !DILocation(line: 2407, column: 9, scope: !3476)
!3480 = !DILocation(line: 2407, column: 12, scope: !3476)
!3481 = !DILocation(line: 2407, column: 28, scope: !3476)
!3482 = !DILocation(line: 2408, column: 9, scope: !3476)
!3483 = !DILocation(line: 2408, column: 30, scope: !3476)
!3484 = !DILocation(line: 2408, column: 35, scope: !3476)
!3485 = !DILocation(line: 2408, column: 13, scope: !3476)
!3486 = !DILocation(line: 2406, column: 16, scope: !3470)
!3487 = !DILocation(line: 2409, column: 2, scope: !3476)
!3488 = !DILocation(line: 2410, column: 5, scope: !3448)
!3489 = !DILocation(line: 2391, column: 47, scope: !3442)
!3490 = !DILocation(line: 2391, column: 3, scope: !3442)
!3491 = distinct !{!3491, !3446, !3492}
!3492 = !DILocation(line: 2410, column: 5, scope: !3439)
!3493 = !DILocation(line: 2411, column: 11, scope: !3425)
!3494 = !DILocation(line: 2411, column: 37, scope: !3425)
!3495 = !DILocation(line: 2411, column: 16, scope: !3425)
!3496 = !DILocation(line: 2411, column: 13, scope: !3425)
!3497 = !DILocation(line: 2411, column: 44, scope: !3425)
!3498 = !DILocation(line: 2411, column: 3, scope: !3425)
!3499 = distinct !DISubprogram(name: "gimple_phi_result", scope: !594, file: !594, line: 3071, type: !3500, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3500 = !DISubroutineType(types: !3501)
!3501 = !{!1661, !3418}
!3502 = !DILocalVariable(name: "gs", arg: 1, scope: !3499, file: !594, line: 3071, type: !3418)
!3503 = !DILocation(line: 3071, column: 33, scope: !3499)
!3504 = !DILocation(line: 3074, column: 10, scope: !3499)
!3505 = !DILocation(line: 3074, column: 14, scope: !3499)
!3506 = !DILocation(line: 3074, column: 25, scope: !3499)
!3507 = !DILocation(line: 3074, column: 3, scope: !3499)
!3508 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !594, file: !594, line: 3061, type: !3509, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3509 = !DISubroutineType(types: !3510)
!3510 = !{!7, !3418}
!3511 = !DILocalVariable(name: "gs", arg: 1, scope: !3508, file: !594, line: 3061, type: !3418)
!3512 = !DILocation(line: 3061, column: 35, scope: !3508)
!3513 = !DILocation(line: 3064, column: 10, scope: !3508)
!3514 = !DILocation(line: 3064, column: 14, scope: !3508)
!3515 = !DILocation(line: 3064, column: 25, scope: !3508)
!3516 = !DILocation(line: 3064, column: 3, scope: !3508)
!3517 = distinct !DISubprogram(name: "gimple_phi_arg_def", scope: !3518, file: !3518, line: 450, type: !3519, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3518 = !DIFile(filename: "./tree-flow-inline.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3519 = !DISubroutineType(types: !3520)
!3520 = !{!1661, !1926, !2071}
!3521 = !DILocalVariable(name: "gs", arg: 1, scope: !3517, file: !3518, line: 450, type: !1926)
!3522 = !DILocation(line: 450, column: 28, scope: !3517)
!3523 = !DILocalVariable(name: "index", arg: 2, scope: !3517, file: !3518, line: 450, type: !2071)
!3524 = !DILocation(line: 450, column: 39, scope: !3517)
!3525 = !DILocalVariable(name: "pd", scope: !3517, file: !3518, line: 452, type: !3526)
!3526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2029, size: 64)
!3527 = !DILocation(line: 452, column: 21, scope: !3517)
!3528 = !DILocation(line: 452, column: 42, scope: !3517)
!3529 = !DILocation(line: 452, column: 46, scope: !3517)
!3530 = !DILocation(line: 452, column: 26, scope: !3517)
!3531 = !DILocation(line: 453, column: 29, scope: !3517)
!3532 = !DILocation(line: 453, column: 33, scope: !3517)
!3533 = !DILocation(line: 453, column: 10, scope: !3517)
!3534 = !DILocation(line: 453, column: 3, scope: !3517)
!3535 = distinct !DISubprogram(name: "eliminate_degenerate_phis", scope: !3, file: !3, line: 2798, type: !3069, scopeLine: 2799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3536 = !DILocalVariable(name: "interesting_names", scope: !3535, file: !3, line: 2800, type: !1590)
!3537 = !DILocation(line: 2800, column: 10, scope: !3535)
!3538 = !DILocalVariable(name: "interesting_names1", scope: !3535, file: !3, line: 2801, type: !1590)
!3539 = !DILocation(line: 2801, column: 10, scope: !3535)
!3540 = !DILocation(line: 2805, column: 21, scope: !3535)
!3541 = !DILocation(line: 2805, column: 19, scope: !3535)
!3542 = !DILocation(line: 2817, column: 23, scope: !3535)
!3543 = !DILocation(line: 2817, column: 21, scope: !3535)
!3544 = !DILocation(line: 2818, column: 24, scope: !3535)
!3545 = !DILocation(line: 2818, column: 22, scope: !3535)
!3546 = !DILocation(line: 2820, column: 3, scope: !3535)
!3547 = !DILocation(line: 2821, column: 15, scope: !3535)
!3548 = !DILocation(line: 2831, column: 32, scope: !3535)
!3549 = !DILocation(line: 2831, column: 49, scope: !3535)
!3550 = !DILocation(line: 2831, column: 3, scope: !3535)
!3551 = !DILocation(line: 2837, column: 3, scope: !3535)
!3552 = !DILocation(line: 2837, column: 11, scope: !3535)
!3553 = !DILocation(line: 2837, column: 10, scope: !3535)
!3554 = !DILocalVariable(name: "i", scope: !3555, file: !3, line: 2839, type: !7)
!3555 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 2838, column: 5)
!3556 = !DILocation(line: 2839, column: 20, scope: !3555)
!3557 = !DILocalVariable(name: "bi", scope: !3555, file: !3, line: 2840, type: !3222)
!3558 = !DILocation(line: 2840, column: 23, scope: !3555)
!3559 = !DILocation(line: 2845, column: 20, scope: !3555)
!3560 = !DILocation(line: 2845, column: 40, scope: !3555)
!3561 = !DILocation(line: 2845, column: 7, scope: !3555)
!3562 = !DILocation(line: 2847, column: 7, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 2847, column: 7)
!3564 = !DILocation(line: 2847, column: 7, scope: !3565)
!3565 = distinct !DILexicalBlock(scope: !3563, file: !3, line: 2847, column: 7)
!3566 = !DILocalVariable(name: "name", scope: !3567, file: !3, line: 2849, type: !1661)
!3567 = distinct !DILexicalBlock(scope: !3565, file: !3, line: 2848, column: 2)
!3568 = !DILocation(line: 2849, column: 9, scope: !3567)
!3569 = !DILocation(line: 2849, column: 16, scope: !3567)
!3570 = !DILocation(line: 2853, column: 8, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 2853, column: 8)
!3572 = !DILocation(line: 2853, column: 8, scope: !3567)
!3573 = !DILocation(line: 2854, column: 31, scope: !3571)
!3574 = !DILocation(line: 2855, column: 10, scope: !3571)
!3575 = !DILocation(line: 2854, column: 6, scope: !3571)
!3576 = !DILocation(line: 2856, column: 2, scope: !3567)
!3577 = distinct !{!3577, !3562, !3578}
!3578 = !DILocation(line: 2856, column: 2, scope: !3563)
!3579 = distinct !{!3579, !3551, !3580}
!3580 = !DILocation(line: 2857, column: 5, scope: !3535)
!3581 = !DILocation(line: 2859, column: 7, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 2859, column: 7)
!3583 = !DILocation(line: 2859, column: 7, scope: !3535)
!3584 = !DILocation(line: 2860, column: 5, scope: !3582)
!3585 = !DILocation(line: 2864, column: 8, scope: !3586)
!3586 = distinct !DILexicalBlock(scope: !3535, file: !3, line: 2864, column: 7)
!3587 = !DILocation(line: 2864, column: 7, scope: !3535)
!3588 = !DILocation(line: 2866, column: 39, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3586, file: !3, line: 2865, column: 5)
!3590 = !DILocation(line: 2866, column: 7, scope: !3589)
!3591 = !DILocation(line: 2867, column: 7, scope: !3589)
!3592 = !DILocation(line: 2868, column: 5, scope: !3589)
!3593 = !DILocation(line: 2870, column: 3, scope: !3535)
!3594 = !DILocation(line: 2871, column: 3, scope: !3535)
!3595 = !DILocation(line: 2872, column: 3, scope: !3535)
!3596 = distinct !DISubprogram(name: "real_avail_expr_hash", scope: !3, file: !3, line: 2333, type: !2451, scopeLine: 2334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3597 = !DILocalVariable(name: "p", arg: 1, scope: !3596, file: !3, line: 2333, type: !2285)
!3598 = !DILocation(line: 2333, column: 35, scope: !3596)
!3599 = !DILocation(line: 2335, column: 41, scope: !3596)
!3600 = !DILocation(line: 2335, column: 11, scope: !3596)
!3601 = !DILocation(line: 2335, column: 45, scope: !3596)
!3602 = !DILocation(line: 2335, column: 3, scope: !3596)
!3603 = distinct !DISubprogram(name: "avail_expr_eq", scope: !3, file: !3, line: 2339, type: !2457, scopeLine: 2340, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3604 = !DILocalVariable(name: "p1", arg: 1, scope: !3603, file: !3, line: 2339, type: !2285)
!3605 = !DILocation(line: 2339, column: 28, scope: !3603)
!3606 = !DILocalVariable(name: "p2", arg: 2, scope: !3603, file: !3, line: 2339, type: !2285)
!3607 = !DILocation(line: 2339, column: 44, scope: !3603)
!3608 = !DILocalVariable(name: "stmt1", scope: !3603, file: !3, line: 2341, type: !1926)
!3609 = !DILocation(line: 2341, column: 10, scope: !3603)
!3610 = !DILocation(line: 2341, column: 49, scope: !3603)
!3611 = !DILocation(line: 2341, column: 19, scope: !3603)
!3612 = !DILocation(line: 2341, column: 54, scope: !3603)
!3613 = !DILocalVariable(name: "expr1", scope: !3603, file: !3, line: 2342, type: !3614)
!3614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3615, size: 64)
!3615 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2985)
!3616 = !DILocation(line: 2342, column: 31, scope: !3603)
!3617 = !DILocation(line: 2342, column: 71, scope: !3603)
!3618 = !DILocation(line: 2342, column: 41, scope: !3603)
!3619 = !DILocation(line: 2342, column: 76, scope: !3603)
!3620 = !DILocalVariable(name: "stamp1", scope: !3603, file: !3, line: 2343, type: !1656)
!3621 = !DILocation(line: 2343, column: 31, scope: !3603)
!3622 = !DILocation(line: 2343, column: 71, scope: !3603)
!3623 = !DILocation(line: 2343, column: 41, scope: !3603)
!3624 = !DILocation(line: 2343, column: 76, scope: !3603)
!3625 = !DILocalVariable(name: "stmt2", scope: !3603, file: !3, line: 2344, type: !1926)
!3626 = !DILocation(line: 2344, column: 10, scope: !3603)
!3627 = !DILocation(line: 2344, column: 49, scope: !3603)
!3628 = !DILocation(line: 2344, column: 19, scope: !3603)
!3629 = !DILocation(line: 2344, column: 54, scope: !3603)
!3630 = !DILocalVariable(name: "expr2", scope: !3603, file: !3, line: 2345, type: !3614)
!3631 = !DILocation(line: 2345, column: 31, scope: !3603)
!3632 = !DILocation(line: 2345, column: 71, scope: !3603)
!3633 = !DILocation(line: 2345, column: 41, scope: !3603)
!3634 = !DILocation(line: 2345, column: 76, scope: !3603)
!3635 = !DILocalVariable(name: "stamp2", scope: !3603, file: !3, line: 2346, type: !1656)
!3636 = !DILocation(line: 2346, column: 31, scope: !3603)
!3637 = !DILocation(line: 2346, column: 71, scope: !3603)
!3638 = !DILocation(line: 2346, column: 41, scope: !3603)
!3639 = !DILocation(line: 2346, column: 76, scope: !3603)
!3640 = !DILocation(line: 2349, column: 7, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2349, column: 7)
!3642 = !DILocation(line: 2349, column: 17, scope: !3641)
!3643 = !DILocation(line: 2349, column: 14, scope: !3641)
!3644 = !DILocation(line: 2349, column: 7, scope: !3603)
!3645 = !DILocation(line: 2350, column: 5, scope: !3641)
!3646 = !DILocation(line: 2358, column: 38, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2358, column: 7)
!3648 = !DILocation(line: 2358, column: 8, scope: !3647)
!3649 = !DILocation(line: 2358, column: 43, scope: !3647)
!3650 = !DILocation(line: 2359, column: 41, scope: !3647)
!3651 = !DILocation(line: 2359, column: 11, scope: !3647)
!3652 = !DILocation(line: 2359, column: 46, scope: !3647)
!3653 = !DILocation(line: 2359, column: 7, scope: !3647)
!3654 = !DILocation(line: 2358, column: 7, scope: !3603)
!3655 = !DILocation(line: 2360, column: 5, scope: !3647)
!3656 = !DILocation(line: 2364, column: 30, scope: !3657)
!3657 = distinct !DILexicalBlock(scope: !3603, file: !3, line: 2364, column: 7)
!3658 = !DILocation(line: 2364, column: 37, scope: !3657)
!3659 = !DILocation(line: 2364, column: 7, scope: !3657)
!3660 = !DILocation(line: 2365, column: 7, scope: !3657)
!3661 = !DILocation(line: 2365, column: 30, scope: !3657)
!3662 = !DILocation(line: 2365, column: 37, scope: !3657)
!3663 = !DILocation(line: 2365, column: 43, scope: !3657)
!3664 = !DILocation(line: 2365, column: 50, scope: !3657)
!3665 = !DILocation(line: 2365, column: 10, scope: !3657)
!3666 = !DILocation(line: 2364, column: 7, scope: !3603)
!3667 = !DILocation(line: 2368, column: 16, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3657, file: !3, line: 2366, column: 5)
!3669 = !DILocation(line: 2368, column: 37, scope: !3668)
!3670 = !DILocation(line: 2368, column: 24, scope: !3668)
!3671 = !DILocation(line: 2369, column: 12, scope: !3668)
!3672 = !DILocation(line: 2369, column: 33, scope: !3668)
!3673 = !DILocation(line: 2369, column: 20, scope: !3668)
!3674 = !DILocation(line: 2369, column: 8, scope: !3668)
!3675 = !DILocation(line: 2368, column: 7, scope: !3668)
!3676 = !DILocation(line: 2372, column: 3, scope: !3603)
!3677 = !DILocation(line: 2373, column: 1, scope: !3603)
!3678 = distinct !DISubprogram(name: "free_expr_hash_elt", scope: !3, file: !3, line: 549, type: !2462, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3679 = !DILocalVariable(name: "elt", arg: 1, scope: !3678, file: !3, line: 549, type: !1589)
!3680 = !DILocation(line: 549, column: 27, scope: !3678)
!3681 = !DILocalVariable(name: "element", scope: !3678, file: !3, line: 551, type: !3017)
!3682 = !DILocation(line: 551, column: 25, scope: !3678)
!3683 = !DILocation(line: 551, column: 60, scope: !3678)
!3684 = !DILocation(line: 551, column: 36, scope: !3678)
!3685 = !DILocation(line: 553, column: 7, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !3678, file: !3, line: 553, column: 7)
!3687 = !DILocation(line: 553, column: 16, scope: !3686)
!3688 = !DILocation(line: 553, column: 21, scope: !3686)
!3689 = !DILocation(line: 553, column: 26, scope: !3686)
!3690 = !DILocation(line: 553, column: 7, scope: !3678)
!3691 = !DILocation(line: 554, column: 11, scope: !3686)
!3692 = !DILocation(line: 554, column: 20, scope: !3686)
!3693 = !DILocation(line: 554, column: 25, scope: !3686)
!3694 = !DILocation(line: 554, column: 29, scope: !3686)
!3695 = !DILocation(line: 554, column: 34, scope: !3686)
!3696 = !DILocation(line: 554, column: 5, scope: !3686)
!3697 = !DILocation(line: 556, column: 9, scope: !3678)
!3698 = !DILocation(line: 556, column: 3, scope: !3678)
!3699 = !DILocation(line: 557, column: 1, scope: !3678)
!3700 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_heap_alloc", scope: !3, file: !3, line: 126, type: !3701, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3701 = !DISubroutineType(types: !3702)
!3702 = !{!3018, !1643}
!3703 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3700, file: !3, line: 126, type: !1643)
!3704 = !DILocation(line: 126, column: 1, scope: !3700)
!3705 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !318, file: !318, line: 184, type: !3706, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3706 = !DISubroutineType(types: !3707)
!3707 = !{!3031, !1643}
!3708 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3705, file: !318, line: 184, type: !1643)
!3709 = !DILocation(line: 184, column: 1, scope: !3705)
!3710 = distinct !DISubprogram(name: "dom_opt_enter_block", scope: !3, file: !3, line: 1634, type: !3123, scopeLine: 1636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3711 = !DILocalVariable(name: "walk_data", arg: 1, scope: !3710, file: !3, line: 1634, type: !3120)
!3712 = !DILocation(line: 1634, column: 44, scope: !3710)
!3713 = !DILocalVariable(name: "bb", arg: 2, scope: !3710, file: !3, line: 1635, type: !2412)
!3714 = !DILocation(line: 1635, column: 20, scope: !3710)
!3715 = !DILocalVariable(name: "gsi", scope: !3710, file: !3, line: 1637, type: !3175)
!3716 = !DILocation(line: 1637, column: 24, scope: !3710)
!3717 = !DILocation(line: 1639, column: 7, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3710, file: !3, line: 1639, column: 7)
!3719 = !DILocation(line: 1639, column: 17, scope: !3718)
!3720 = !DILocation(line: 1639, column: 21, scope: !3718)
!3721 = !DILocation(line: 1639, column: 32, scope: !3718)
!3722 = !DILocation(line: 1639, column: 7, scope: !3710)
!3723 = !DILocation(line: 1640, column: 14, scope: !3718)
!3724 = !DILocation(line: 1640, column: 57, scope: !3718)
!3725 = !DILocation(line: 1640, column: 61, scope: !3718)
!3726 = !DILocation(line: 1640, column: 5, scope: !3718)
!3727 = !DILocation(line: 1644, column: 3, scope: !3710)
!3728 = !DILocation(line: 1645, column: 3, scope: !3710)
!3729 = !DILocation(line: 1647, column: 43, scope: !3710)
!3730 = !DILocation(line: 1647, column: 3, scope: !3710)
!3731 = !DILocation(line: 1650, column: 34, scope: !3710)
!3732 = !DILocation(line: 1650, column: 3, scope: !3710)
!3733 = !DILocation(line: 1652, column: 28, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3710, file: !3, line: 1652, column: 3)
!3735 = !DILocation(line: 1652, column: 14, scope: !3734)
!3736 = !DILocation(line: 1652, column: 8, scope: !3734)
!3737 = !DILocation(line: 1652, column: 34, scope: !3738)
!3738 = distinct !DILexicalBlock(scope: !3734, file: !3, line: 1652, column: 3)
!3739 = !DILocation(line: 1652, column: 33, scope: !3738)
!3740 = !DILocation(line: 1652, column: 3, scope: !3734)
!3741 = !DILocation(line: 1653, column: 20, scope: !3738)
!3742 = !DILocation(line: 1653, column: 5, scope: !3738)
!3743 = !DILocation(line: 1652, column: 51, scope: !3738)
!3744 = !DILocation(line: 1652, column: 3, scope: !3738)
!3745 = distinct !{!3745, !3740, !3746}
!3746 = !DILocation(line: 1653, column: 27, scope: !3734)
!3747 = !DILocation(line: 1656, column: 21, scope: !3710)
!3748 = !DILocation(line: 1656, column: 3, scope: !3710)
!3749 = !DILocation(line: 1657, column: 30, scope: !3710)
!3750 = !DILocation(line: 1657, column: 3, scope: !3710)
!3751 = !DILocation(line: 1658, column: 1, scope: !3710)
!3752 = distinct !DISubprogram(name: "dom_opt_leave_block", scope: !3, file: !3, line: 1665, type: !3123, scopeLine: 1666, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3753 = !DILocalVariable(name: "walk_data", arg: 1, scope: !3752, file: !3, line: 1665, type: !3120)
!3754 = !DILocation(line: 1665, column: 44, scope: !3752)
!3755 = !DILocalVariable(name: "bb", arg: 2, scope: !3752, file: !3, line: 1665, type: !2412)
!3756 = !DILocation(line: 1665, column: 67, scope: !3752)
!3757 = !DILocalVariable(name: "last", scope: !3752, file: !3, line: 1667, type: !1926)
!3758 = !DILocation(line: 1667, column: 10, scope: !3752)
!3759 = !DILocation(line: 1673, column: 22, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3752, file: !3, line: 1673, column: 7)
!3761 = !DILocation(line: 1673, column: 7, scope: !3760)
!3762 = !DILocation(line: 1674, column: 7, scope: !3760)
!3763 = !DILocation(line: 1674, column: 29, scope: !3760)
!3764 = !DILocation(line: 1674, column: 11, scope: !3760)
!3765 = !DILocation(line: 1674, column: 34, scope: !3760)
!3766 = !DILocation(line: 1674, column: 40, scope: !3760)
!3767 = !DILocation(line: 1674, column: 57, scope: !3760)
!3768 = !DILocation(line: 1675, column: 7, scope: !3760)
!3769 = !DILocation(line: 1675, column: 53, scope: !3760)
!3770 = !DILocation(line: 1675, column: 40, scope: !3760)
!3771 = !DILocation(line: 1675, column: 10, scope: !3760)
!3772 = !DILocation(line: 1673, column: 7, scope: !3752)
!3773 = !DILocation(line: 1677, column: 31, scope: !3774)
!3774 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 1676, column: 5)
!3775 = !DILocation(line: 1677, column: 60, scope: !3774)
!3776 = !DILocation(line: 1677, column: 42, scope: !3774)
!3777 = !DILocation(line: 1677, column: 7, scope: !3774)
!3778 = !DILocation(line: 1678, column: 5, scope: !3774)
!3779 = !DILocation(line: 1679, column: 31, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3760, file: !3, line: 1679, column: 12)
!3781 = !DILocation(line: 1679, column: 20, scope: !3780)
!3782 = !DILocation(line: 1679, column: 18, scope: !3780)
!3783 = !DILocation(line: 1680, column: 5, scope: !3780)
!3784 = !DILocation(line: 1680, column: 21, scope: !3780)
!3785 = !DILocation(line: 1680, column: 8, scope: !3780)
!3786 = !DILocation(line: 1680, column: 27, scope: !3780)
!3787 = !DILocation(line: 1681, column: 5, scope: !3780)
!3788 = !DILocation(line: 1681, column: 8, scope: !3780)
!3789 = !DILocation(line: 1681, column: 31, scope: !3780)
!3790 = !DILocation(line: 1682, column: 5, scope: !3780)
!3791 = !DILocation(line: 1682, column: 9, scope: !3780)
!3792 = !DILocation(line: 1682, column: 28, scope: !3780)
!3793 = !DILocation(line: 1682, column: 34, scope: !3780)
!3794 = !DILocation(line: 1682, column: 51, scope: !3780)
!3795 = !DILocation(line: 1683, column: 5, scope: !3780)
!3796 = !DILocation(line: 1683, column: 9, scope: !3780)
!3797 = !DILocation(line: 1683, column: 28, scope: !3780)
!3798 = !DILocation(line: 1683, column: 34, scope: !3780)
!3799 = !DILocation(line: 1683, column: 51, scope: !3780)
!3800 = !DILocation(line: 1679, column: 12, scope: !3760)
!3801 = !DILocalVariable(name: "true_edge", scope: !3802, file: !3, line: 1685, type: !1906)
!3802 = distinct !DILexicalBlock(scope: !3780, file: !3, line: 1684, column: 5)
!3803 = !DILocation(line: 1685, column: 12, scope: !3802)
!3804 = !DILocalVariable(name: "false_edge", scope: !3802, file: !3, line: 1685, type: !1906)
!3805 = !DILocation(line: 1685, column: 23, scope: !3802)
!3806 = !DILocation(line: 1687, column: 44, scope: !3802)
!3807 = !DILocation(line: 1687, column: 7, scope: !3802)
!3808 = !DILocation(line: 1691, column: 41, scope: !3809)
!3809 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 1691, column: 11)
!3810 = !DILocation(line: 1691, column: 52, scope: !3809)
!3811 = !DILocation(line: 1691, column: 11, scope: !3809)
!3812 = !DILocation(line: 1691, column: 11, scope: !3802)
!3813 = !DILocalVariable(name: "edge_info", scope: !3814, file: !3, line: 1693, type: !3036)
!3814 = distinct !DILexicalBlock(scope: !3809, file: !3, line: 1692, column: 2)
!3815 = !DILocation(line: 1693, column: 22, scope: !3814)
!3816 = !DILocalVariable(name: "i", scope: !3814, file: !3, line: 1694, type: !7)
!3817 = !DILocation(line: 1694, column: 17, scope: !3814)
!3818 = !DILocation(line: 1699, column: 11, scope: !3814)
!3819 = !DILocation(line: 1700, column: 4, scope: !3814)
!3820 = !DILocation(line: 1702, column: 37, scope: !3814)
!3821 = !DILocation(line: 1702, column: 48, scope: !3814)
!3822 = !DILocation(line: 1702, column: 16, scope: !3814)
!3823 = !DILocation(line: 1702, column: 14, scope: !3814)
!3824 = !DILocation(line: 1706, column: 8, scope: !3825)
!3825 = distinct !DILexicalBlock(scope: !3814, file: !3, line: 1706, column: 8)
!3826 = !DILocation(line: 1706, column: 8, scope: !3814)
!3827 = !DILocalVariable(name: "cond_equivalences", scope: !3828, file: !3, line: 1708, type: !3042)
!3828 = distinct !DILexicalBlock(scope: !3825, file: !3, line: 1707, column: 6)
!3829 = !DILocation(line: 1708, column: 33, scope: !3828)
!3830 = !DILocation(line: 1708, column: 53, scope: !3828)
!3831 = !DILocation(line: 1708, column: 64, scope: !3828)
!3832 = !DILocalVariable(name: "lhs", scope: !3828, file: !3, line: 1709, type: !1661)
!3833 = !DILocation(line: 1709, column: 13, scope: !3828)
!3834 = !DILocation(line: 1709, column: 19, scope: !3828)
!3835 = !DILocation(line: 1709, column: 30, scope: !3828)
!3836 = !DILocalVariable(name: "rhs", scope: !3828, file: !3, line: 1710, type: !1661)
!3837 = !DILocation(line: 1710, column: 13, scope: !3828)
!3838 = !DILocation(line: 1710, column: 19, scope: !3828)
!3839 = !DILocation(line: 1710, column: 30, scope: !3828)
!3840 = !DILocation(line: 1713, column: 12, scope: !3841)
!3841 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 1713, column: 12)
!3842 = !DILocation(line: 1713, column: 16, scope: !3841)
!3843 = !DILocation(line: 1713, column: 19, scope: !3841)
!3844 = !DILocation(line: 1713, column: 35, scope: !3841)
!3845 = !DILocation(line: 1713, column: 12, scope: !3828)
!3846 = !DILocation(line: 1714, column: 25, scope: !3841)
!3847 = !DILocation(line: 1714, column: 30, scope: !3841)
!3848 = !DILocation(line: 1714, column: 3, scope: !3841)
!3849 = !DILocation(line: 1718, column: 12, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 1718, column: 12)
!3851 = !DILocation(line: 1718, column: 12, scope: !3828)
!3852 = !DILocation(line: 1719, column: 10, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3850, file: !3, line: 1719, column: 3)
!3854 = !DILocation(line: 1719, column: 8, scope: !3853)
!3855 = !DILocation(line: 1719, column: 15, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3853, file: !3, line: 1719, column: 3)
!3857 = !DILocation(line: 1719, column: 19, scope: !3856)
!3858 = !DILocation(line: 1719, column: 30, scope: !3856)
!3859 = !DILocation(line: 1719, column: 17, scope: !3856)
!3860 = !DILocation(line: 1719, column: 3, scope: !3853)
!3861 = !DILocation(line: 1720, column: 33, scope: !3856)
!3862 = !DILocation(line: 1720, column: 51, scope: !3856)
!3863 = !DILocation(line: 1720, column: 19, scope: !3856)
!3864 = !DILocation(line: 1719, column: 54, scope: !3856)
!3865 = !DILocation(line: 1719, column: 3, scope: !3856)
!3866 = distinct !{!3866, !3860, !3867}
!3867 = !DILocation(line: 1720, column: 53, scope: !3853)
!3868 = !DILocation(line: 1721, column: 6, scope: !3828)
!3869 = !DILocation(line: 1723, column: 28, scope: !3814)
!3870 = !DILocation(line: 1723, column: 39, scope: !3814)
!3871 = !DILocation(line: 1723, column: 4, scope: !3814)
!3872 = !DILocation(line: 1727, column: 4, scope: !3814)
!3873 = !DILocation(line: 1728, column: 2, scope: !3814)
!3874 = !DILocation(line: 1731, column: 41, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 1731, column: 11)
!3876 = !DILocation(line: 1731, column: 53, scope: !3875)
!3877 = !DILocation(line: 1731, column: 11, scope: !3875)
!3878 = !DILocation(line: 1731, column: 11, scope: !3802)
!3879 = !DILocalVariable(name: "edge_info", scope: !3880, file: !3, line: 1733, type: !3036)
!3880 = distinct !DILexicalBlock(scope: !3875, file: !3, line: 1732, column: 2)
!3881 = !DILocation(line: 1733, column: 22, scope: !3880)
!3882 = !DILocalVariable(name: "i", scope: !3880, file: !3, line: 1734, type: !7)
!3883 = !DILocation(line: 1734, column: 17, scope: !3880)
!3884 = !DILocation(line: 1736, column: 4, scope: !3880)
!3885 = !DILocation(line: 1737, column: 37, scope: !3880)
!3886 = !DILocation(line: 1737, column: 49, scope: !3880)
!3887 = !DILocation(line: 1737, column: 16, scope: !3880)
!3888 = !DILocation(line: 1737, column: 14, scope: !3880)
!3889 = !DILocation(line: 1741, column: 8, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3880, file: !3, line: 1741, column: 8)
!3891 = !DILocation(line: 1741, column: 8, scope: !3880)
!3892 = !DILocalVariable(name: "cond_equivalences", scope: !3893, file: !3, line: 1743, type: !3042)
!3893 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 1742, column: 6)
!3894 = !DILocation(line: 1743, column: 33, scope: !3893)
!3895 = !DILocation(line: 1743, column: 53, scope: !3893)
!3896 = !DILocation(line: 1743, column: 64, scope: !3893)
!3897 = !DILocalVariable(name: "lhs", scope: !3893, file: !3, line: 1744, type: !1661)
!3898 = !DILocation(line: 1744, column: 13, scope: !3893)
!3899 = !DILocation(line: 1744, column: 19, scope: !3893)
!3900 = !DILocation(line: 1744, column: 30, scope: !3893)
!3901 = !DILocalVariable(name: "rhs", scope: !3893, file: !3, line: 1745, type: !1661)
!3902 = !DILocation(line: 1745, column: 13, scope: !3893)
!3903 = !DILocation(line: 1745, column: 19, scope: !3893)
!3904 = !DILocation(line: 1745, column: 30, scope: !3893)
!3905 = !DILocation(line: 1748, column: 12, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 1748, column: 12)
!3907 = !DILocation(line: 1748, column: 16, scope: !3906)
!3908 = !DILocation(line: 1748, column: 19, scope: !3906)
!3909 = !DILocation(line: 1748, column: 35, scope: !3906)
!3910 = !DILocation(line: 1748, column: 12, scope: !3893)
!3911 = !DILocation(line: 1749, column: 25, scope: !3906)
!3912 = !DILocation(line: 1749, column: 30, scope: !3906)
!3913 = !DILocation(line: 1749, column: 3, scope: !3906)
!3914 = !DILocation(line: 1753, column: 12, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 1753, column: 12)
!3916 = !DILocation(line: 1753, column: 12, scope: !3893)
!3917 = !DILocation(line: 1754, column: 10, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 1754, column: 3)
!3919 = !DILocation(line: 1754, column: 8, scope: !3918)
!3920 = !DILocation(line: 1754, column: 15, scope: !3921)
!3921 = distinct !DILexicalBlock(scope: !3918, file: !3, line: 1754, column: 3)
!3922 = !DILocation(line: 1754, column: 19, scope: !3921)
!3923 = !DILocation(line: 1754, column: 30, scope: !3921)
!3924 = !DILocation(line: 1754, column: 17, scope: !3921)
!3925 = !DILocation(line: 1754, column: 3, scope: !3918)
!3926 = !DILocation(line: 1755, column: 33, scope: !3921)
!3927 = !DILocation(line: 1755, column: 51, scope: !3921)
!3928 = !DILocation(line: 1755, column: 19, scope: !3921)
!3929 = !DILocation(line: 1754, column: 54, scope: !3921)
!3930 = !DILocation(line: 1754, column: 3, scope: !3921)
!3931 = distinct !{!3931, !3925, !3932}
!3932 = !DILocation(line: 1755, column: 53, scope: !3918)
!3933 = !DILocation(line: 1756, column: 6, scope: !3893)
!3934 = !DILocation(line: 1759, column: 28, scope: !3880)
!3935 = !DILocation(line: 1759, column: 39, scope: !3880)
!3936 = !DILocation(line: 1759, column: 4, scope: !3880)
!3937 = !DILocation(line: 1764, column: 2, scope: !3880)
!3938 = !DILocation(line: 1765, column: 5, scope: !3802)
!3939 = !DILocation(line: 1767, column: 3, scope: !3752)
!3940 = !DILocation(line: 1768, column: 3, scope: !3752)
!3941 = !DILocation(line: 1769, column: 1, scope: !3752)
!3942 = distinct !DISubprogram(name: "gsi_start_bb", scope: !594, file: !594, line: 4418, type: !3943, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3943 = !DISubroutineType(types: !3944)
!3944 = !{!3175, !2412}
!3945 = !DILocalVariable(name: "bb", arg: 1, scope: !3942, file: !594, line: 4418, type: !2412)
!3946 = !DILocation(line: 4418, column: 27, scope: !3942)
!3947 = !DILocalVariable(name: "i", scope: !3942, file: !594, line: 4420, type: !3175)
!3948 = !DILocation(line: 4420, column: 24, scope: !3942)
!3949 = !DILocalVariable(name: "seq", scope: !3942, file: !594, line: 4421, type: !1916)
!3950 = !DILocation(line: 4421, column: 14, scope: !3942)
!3951 = !DILocation(line: 4423, column: 17, scope: !3942)
!3952 = !DILocation(line: 4423, column: 9, scope: !3942)
!3953 = !DILocation(line: 4423, column: 7, scope: !3942)
!3954 = !DILocation(line: 4424, column: 29, scope: !3942)
!3955 = !DILocation(line: 4424, column: 11, scope: !3942)
!3956 = !DILocation(line: 4424, column: 5, scope: !3942)
!3957 = !DILocation(line: 4424, column: 9, scope: !3942)
!3958 = !DILocation(line: 4425, column: 11, scope: !3942)
!3959 = !DILocation(line: 4425, column: 5, scope: !3942)
!3960 = !DILocation(line: 4425, column: 9, scope: !3942)
!3961 = !DILocation(line: 4426, column: 10, scope: !3942)
!3962 = !DILocation(line: 4426, column: 5, scope: !3942)
!3963 = !DILocation(line: 4426, column: 8, scope: !3942)
!3964 = !DILocation(line: 4428, column: 3, scope: !3942)
!3965 = distinct !DISubprogram(name: "gsi_end_p", scope: !594, file: !594, line: 4467, type: !3966, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3966 = !DISubroutineType(types: !3967)
!3967 = !{!1776, !3175}
!3968 = !DILocalVariable(name: "i", arg: 1, scope: !3965, file: !594, line: 4467, type: !3175)
!3969 = !DILocation(line: 4467, column: 33, scope: !3965)
!3970 = !DILocation(line: 4469, column: 12, scope: !3965)
!3971 = !DILocation(line: 4469, column: 16, scope: !3965)
!3972 = !DILocation(line: 4469, column: 10, scope: !3965)
!3973 = !DILocation(line: 4469, column: 3, scope: !3965)
!3974 = distinct !DISubprogram(name: "update_stmt_if_modified", scope: !594, file: !594, line: 1468, type: !3975, scopeLine: 1469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3975 = !DISubroutineType(types: !3976)
!3976 = !{null, !1926}
!3977 = !DILocalVariable(name: "s", arg: 1, scope: !3974, file: !594, line: 1468, type: !1926)
!3978 = !DILocation(line: 1468, column: 33, scope: !3974)
!3979 = !DILocation(line: 1470, column: 26, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3974, file: !594, line: 1470, column: 7)
!3981 = !DILocation(line: 1470, column: 7, scope: !3980)
!3982 = !DILocation(line: 1470, column: 7, scope: !3974)
!3983 = !DILocation(line: 1471, column: 27, scope: !3980)
!3984 = !DILocation(line: 1471, column: 5, scope: !3980)
!3985 = !DILocation(line: 1472, column: 1, scope: !3974)
!3986 = distinct !DISubprogram(name: "gsi_stmt", scope: !594, file: !594, line: 4501, type: !3987, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3987 = !DISubroutineType(types: !3988)
!3988 = !{!1926, !3175}
!3989 = !DILocalVariable(name: "i", arg: 1, scope: !3986, file: !594, line: 4501, type: !3175)
!3990 = !DILocation(line: 4501, column: 32, scope: !3986)
!3991 = !DILocation(line: 4503, column: 12, scope: !3986)
!3992 = !DILocation(line: 4503, column: 17, scope: !3986)
!3993 = !DILocation(line: 4503, column: 3, scope: !3986)
!3994 = distinct !DISubprogram(name: "gsi_next", scope: !594, file: !594, line: 4485, type: !3995, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!3995 = !DISubroutineType(types: !3996)
!3996 = !{null, !3997}
!3997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3175, size: 64)
!3998 = !DILocalVariable(name: "i", arg: 1, scope: !3994, file: !594, line: 4485, type: !3997)
!3999 = !DILocation(line: 4485, column: 33, scope: !3994)
!4000 = !DILocation(line: 4487, column: 12, scope: !3994)
!4001 = !DILocation(line: 4487, column: 15, scope: !3994)
!4002 = !DILocation(line: 4487, column: 20, scope: !3994)
!4003 = !DILocation(line: 4487, column: 3, scope: !3994)
!4004 = !DILocation(line: 4487, column: 6, scope: !3994)
!4005 = !DILocation(line: 4487, column: 10, scope: !3994)
!4006 = !DILocation(line: 4488, column: 1, scope: !3994)
!4007 = distinct !DISubprogram(name: "free_all_edge_infos", scope: !3, file: !3, line: 580, type: !3383, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4008 = !DILocalVariable(name: "bb", scope: !4007, file: !3, line: 582, type: !2412)
!4009 = !DILocation(line: 582, column: 15, scope: !4007)
!4010 = !DILocalVariable(name: "ei", scope: !4007, file: !3, line: 583, type: !4011)
!4011 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !526, line: 682, baseType: !4012)
!4012 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !526, line: 679, size: 128, elements: !4013)
!4013 = !{!4014, !4015}
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4012, file: !526, line: 680, baseType: !7, size: 32)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4012, file: !526, line: 681, baseType: !4016, size: 64, offset: 64)
!4016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1894, size: 64)
!4017 = !DILocation(line: 583, column: 17, scope: !4007)
!4018 = !DILocalVariable(name: "e", scope: !4007, file: !3, line: 584, type: !1906)
!4019 = !DILocation(line: 584, column: 8, scope: !4007)
!4020 = !DILocation(line: 586, column: 3, scope: !4021)
!4021 = distinct !DILexicalBlock(scope: !4007, file: !3, line: 586, column: 3)
!4022 = !DILocation(line: 586, column: 3, scope: !4023)
!4023 = distinct !DILexicalBlock(scope: !4021, file: !3, line: 586, column: 3)
!4024 = !DILocation(line: 588, column: 7, scope: !4025)
!4025 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 588, column: 7)
!4026 = distinct !DILexicalBlock(scope: !4023, file: !3, line: 587, column: 5)
!4027 = !DILocation(line: 588, column: 7, scope: !4028)
!4028 = distinct !DILexicalBlock(scope: !4025, file: !3, line: 588, column: 7)
!4029 = !DILocalVariable(name: "edge_info", scope: !4030, file: !3, line: 590, type: !3036)
!4030 = distinct !DILexicalBlock(scope: !4028, file: !3, line: 589, column: 9)
!4031 = !DILocation(line: 590, column: 21, scope: !4030)
!4032 = !DILocation(line: 590, column: 54, scope: !4030)
!4033 = !DILocation(line: 590, column: 57, scope: !4030)
!4034 = !DILocation(line: 590, column: 33, scope: !4030)
!4035 = !DILocation(line: 592, column: 8, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 592, column: 8)
!4037 = !DILocation(line: 592, column: 8, scope: !4030)
!4038 = !DILocation(line: 594, column: 12, scope: !4039)
!4039 = distinct !DILexicalBlock(scope: !4040, file: !3, line: 594, column: 12)
!4040 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 593, column: 6)
!4041 = !DILocation(line: 594, column: 23, scope: !4039)
!4042 = !DILocation(line: 594, column: 12, scope: !4040)
!4043 = !DILocation(line: 595, column: 9, scope: !4039)
!4044 = !DILocation(line: 595, column: 20, scope: !4039)
!4045 = !DILocation(line: 595, column: 3, scope: !4039)
!4046 = !DILocation(line: 596, column: 14, scope: !4040)
!4047 = !DILocation(line: 596, column: 8, scope: !4040)
!4048 = !DILocation(line: 597, column: 8, scope: !4040)
!4049 = !DILocation(line: 597, column: 11, scope: !4040)
!4050 = !DILocation(line: 597, column: 15, scope: !4040)
!4051 = !DILocation(line: 598, column: 6, scope: !4040)
!4052 = !DILocation(line: 599, column: 2, scope: !4030)
!4053 = distinct !{!4053, !4024, !4054}
!4054 = !DILocation(line: 599, column: 2, scope: !4025)
!4055 = !DILocation(line: 600, column: 5, scope: !4026)
!4056 = distinct !{!4056, !4020, !4057}
!4057 = !DILocation(line: 600, column: 5, scope: !4021)
!4058 = !DILocation(line: 601, column: 1, scope: !4007)
!4059 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !1594, file: !1594, line: 224, type: !4060, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4060 = !DISubroutineType(types: !4061)
!4061 = !{null, !4062, !4063, !7, !4066}
!4062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3222, size: 64)
!4063 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !1591, line: 48, baseType: !4064)
!4064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4065, size: 64)
!4065 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1593)
!4066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4067 = !DILocalVariable(name: "bi", arg: 1, scope: !4059, file: !1594, line: 224, type: !4062)
!4068 = !DILocation(line: 224, column: 37, scope: !4059)
!4069 = !DILocalVariable(name: "map", arg: 2, scope: !4059, file: !1594, line: 224, type: !4063)
!4070 = !DILocation(line: 224, column: 54, scope: !4059)
!4071 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4059, file: !1594, line: 225, type: !7)
!4072 = !DILocation(line: 225, column: 15, scope: !4059)
!4073 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4059, file: !1594, line: 225, type: !4066)
!4074 = !DILocation(line: 225, column: 36, scope: !4059)
!4075 = !DILocation(line: 227, column: 14, scope: !4059)
!4076 = !DILocation(line: 227, column: 19, scope: !4059)
!4077 = !DILocation(line: 227, column: 3, scope: !4059)
!4078 = !DILocation(line: 227, column: 7, scope: !4059)
!4079 = !DILocation(line: 227, column: 12, scope: !4059)
!4080 = !DILocation(line: 228, column: 3, scope: !4059)
!4081 = !DILocation(line: 228, column: 7, scope: !4059)
!4082 = !DILocation(line: 228, column: 12, scope: !4059)
!4083 = !DILocation(line: 231, column: 3, scope: !4059)
!4084 = !DILocation(line: 233, column: 12, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4086, file: !1594, line: 233, column: 11)
!4086 = distinct !DILexicalBlock(scope: !4059, file: !1594, line: 232, column: 5)
!4087 = !DILocation(line: 233, column: 16, scope: !4085)
!4088 = !DILocation(line: 233, column: 11, scope: !4086)
!4089 = !DILocation(line: 235, column: 4, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4085, file: !1594, line: 234, column: 2)
!4091 = !DILocation(line: 235, column: 8, scope: !4090)
!4092 = !DILocation(line: 235, column: 13, scope: !4090)
!4093 = !DILocation(line: 236, column: 4, scope: !4090)
!4094 = !DILocation(line: 239, column: 11, scope: !4095)
!4095 = distinct !DILexicalBlock(scope: !4086, file: !1594, line: 239, column: 11)
!4096 = !DILocation(line: 239, column: 15, scope: !4095)
!4097 = !DILocation(line: 239, column: 21, scope: !4095)
!4098 = !DILocation(line: 239, column: 29, scope: !4095)
!4099 = !DILocation(line: 239, column: 39, scope: !4095)
!4100 = !DILocation(line: 239, column: 26, scope: !4095)
!4101 = !DILocation(line: 239, column: 11, scope: !4086)
!4102 = !DILocation(line: 240, column: 2, scope: !4095)
!4103 = !DILocation(line: 241, column: 18, scope: !4086)
!4104 = !DILocation(line: 241, column: 22, scope: !4086)
!4105 = !DILocation(line: 241, column: 28, scope: !4086)
!4106 = !DILocation(line: 241, column: 7, scope: !4086)
!4107 = !DILocation(line: 241, column: 11, scope: !4086)
!4108 = !DILocation(line: 241, column: 16, scope: !4086)
!4109 = distinct !{!4109, !4083, !4110}
!4110 = !DILocation(line: 242, column: 5, scope: !4059)
!4111 = !DILocation(line: 245, column: 7, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4059, file: !1594, line: 245, column: 7)
!4113 = !DILocation(line: 245, column: 11, scope: !4112)
!4114 = !DILocation(line: 245, column: 17, scope: !4112)
!4115 = !DILocation(line: 245, column: 25, scope: !4112)
!4116 = !DILocation(line: 245, column: 35, scope: !4112)
!4117 = !DILocation(line: 245, column: 22, scope: !4112)
!4118 = !DILocation(line: 245, column: 7, scope: !4059)
!4119 = !DILocation(line: 246, column: 17, scope: !4112)
!4120 = !DILocation(line: 246, column: 21, scope: !4112)
!4121 = !DILocation(line: 246, column: 27, scope: !4112)
!4122 = !DILocation(line: 246, column: 32, scope: !4112)
!4123 = !DILocation(line: 246, column: 15, scope: !4112)
!4124 = !DILocation(line: 246, column: 5, scope: !4112)
!4125 = !DILocation(line: 249, column: 17, scope: !4059)
!4126 = !DILocation(line: 249, column: 27, scope: !4059)
!4127 = !DILocation(line: 249, column: 46, scope: !4059)
!4128 = !DILocation(line: 249, column: 3, scope: !4059)
!4129 = !DILocation(line: 249, column: 7, scope: !4059)
!4130 = !DILocation(line: 249, column: 15, scope: !4059)
!4131 = !DILocation(line: 250, column: 14, scope: !4059)
!4132 = !DILocation(line: 250, column: 18, scope: !4059)
!4133 = !DILocation(line: 250, column: 24, scope: !4059)
!4134 = !DILocation(line: 250, column: 29, scope: !4059)
!4135 = !DILocation(line: 250, column: 33, scope: !4059)
!4136 = !DILocation(line: 250, column: 3, scope: !4059)
!4137 = !DILocation(line: 250, column: 7, scope: !4059)
!4138 = !DILocation(line: 250, column: 12, scope: !4059)
!4139 = !DILocation(line: 251, column: 16, scope: !4059)
!4140 = !DILocation(line: 251, column: 26, scope: !4059)
!4141 = !DILocation(line: 251, column: 3, scope: !4059)
!4142 = !DILocation(line: 251, column: 7, scope: !4059)
!4143 = !DILocation(line: 251, column: 12, scope: !4059)
!4144 = !DILocation(line: 257, column: 17, scope: !4059)
!4145 = !DILocation(line: 257, column: 21, scope: !4059)
!4146 = !DILocation(line: 257, column: 16, scope: !4059)
!4147 = !DILocation(line: 257, column: 13, scope: !4059)
!4148 = !DILocation(line: 259, column: 13, scope: !4059)
!4149 = !DILocation(line: 259, column: 4, scope: !4059)
!4150 = !DILocation(line: 259, column: 11, scope: !4059)
!4151 = !DILocation(line: 260, column: 1, scope: !4059)
!4152 = distinct !DISubprogram(name: "bmp_iter_set", scope: !1594, file: !1594, line: 393, type: !4153, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4153 = !DISubroutineType(types: !4154)
!4154 = !{!1776, !4062, !4066}
!4155 = !DILocalVariable(name: "bi", arg: 1, scope: !4152, file: !1594, line: 393, type: !4062)
!4156 = !DILocation(line: 393, column: 32, scope: !4152)
!4157 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4152, file: !1594, line: 393, type: !4066)
!4158 = !DILocation(line: 393, column: 46, scope: !4152)
!4159 = !DILocation(line: 396, column: 7, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4152, file: !1594, line: 396, column: 7)
!4161 = !DILocation(line: 396, column: 11, scope: !4160)
!4162 = !DILocation(line: 396, column: 7, scope: !4152)
!4163 = !DILocation(line: 397, column: 5, scope: !4160)
!4164 = !DILabel(scope: !4165, name: "next_bit", file: !1594, line: 398)
!4165 = distinct !DILexicalBlock(scope: !4160, file: !1594, line: 397, column: 5)
!4166 = !DILocation(line: 398, column: 5, scope: !4165)
!4167 = !DILocation(line: 399, column: 7, scope: !4165)
!4168 = !DILocation(line: 399, column: 16, scope: !4165)
!4169 = !DILocation(line: 399, column: 20, scope: !4165)
!4170 = !DILocation(line: 399, column: 25, scope: !4165)
!4171 = !DILocation(line: 399, column: 14, scope: !4165)
!4172 = !DILocation(line: 401, column: 4, scope: !4173)
!4173 = distinct !DILexicalBlock(scope: !4165, file: !1594, line: 400, column: 2)
!4174 = !DILocation(line: 401, column: 8, scope: !4173)
!4175 = !DILocation(line: 401, column: 13, scope: !4173)
!4176 = !DILocation(line: 402, column: 5, scope: !4173)
!4177 = !DILocation(line: 402, column: 12, scope: !4173)
!4178 = distinct !{!4178, !4167, !4179}
!4179 = !DILocation(line: 403, column: 2, scope: !4165)
!4180 = !DILocation(line: 404, column: 7, scope: !4165)
!4181 = !DILocation(line: 410, column: 16, scope: !4152)
!4182 = !DILocation(line: 410, column: 15, scope: !4152)
!4183 = !DILocation(line: 410, column: 23, scope: !4152)
!4184 = !DILocation(line: 410, column: 42, scope: !4152)
!4185 = !DILocation(line: 411, column: 7, scope: !4152)
!4186 = !DILocation(line: 411, column: 26, scope: !4152)
!4187 = !DILocation(line: 410, column: 4, scope: !4152)
!4188 = !DILocation(line: 410, column: 11, scope: !4152)
!4189 = !DILocation(line: 412, column: 3, scope: !4152)
!4190 = !DILocation(line: 412, column: 7, scope: !4152)
!4191 = !DILocation(line: 412, column: 14, scope: !4152)
!4192 = !DILocation(line: 414, column: 3, scope: !4152)
!4193 = !DILocation(line: 417, column: 7, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4152, file: !1594, line: 415, column: 5)
!4195 = !DILocation(line: 417, column: 14, scope: !4194)
!4196 = !DILocation(line: 417, column: 18, scope: !4194)
!4197 = !DILocation(line: 417, column: 26, scope: !4194)
!4198 = !DILocation(line: 419, column: 15, scope: !4199)
!4199 = distinct !DILexicalBlock(scope: !4194, file: !1594, line: 418, column: 2)
!4200 = !DILocation(line: 419, column: 19, scope: !4199)
!4201 = !DILocation(line: 419, column: 25, scope: !4199)
!4202 = !DILocation(line: 419, column: 30, scope: !4199)
!4203 = !DILocation(line: 419, column: 34, scope: !4199)
!4204 = !DILocation(line: 419, column: 4, scope: !4199)
!4205 = !DILocation(line: 419, column: 8, scope: !4199)
!4206 = !DILocation(line: 419, column: 13, scope: !4199)
!4207 = !DILocation(line: 420, column: 8, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4199, file: !1594, line: 420, column: 8)
!4209 = !DILocation(line: 420, column: 12, scope: !4208)
!4210 = !DILocation(line: 420, column: 8, scope: !4199)
!4211 = !DILocation(line: 421, column: 6, scope: !4208)
!4212 = !DILocation(line: 422, column: 5, scope: !4199)
!4213 = !DILocation(line: 422, column: 12, scope: !4199)
!4214 = !DILocation(line: 423, column: 4, scope: !4199)
!4215 = !DILocation(line: 423, column: 8, scope: !4199)
!4216 = !DILocation(line: 423, column: 15, scope: !4199)
!4217 = distinct !{!4217, !4193, !4218}
!4218 = !DILocation(line: 424, column: 2, scope: !4194)
!4219 = !DILocation(line: 427, column: 18, scope: !4194)
!4220 = !DILocation(line: 427, column: 22, scope: !4194)
!4221 = !DILocation(line: 427, column: 28, scope: !4194)
!4222 = !DILocation(line: 427, column: 7, scope: !4194)
!4223 = !DILocation(line: 427, column: 11, scope: !4194)
!4224 = !DILocation(line: 427, column: 16, scope: !4194)
!4225 = !DILocation(line: 428, column: 12, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4194, file: !1594, line: 428, column: 11)
!4227 = !DILocation(line: 428, column: 16, scope: !4226)
!4228 = !DILocation(line: 428, column: 11, scope: !4194)
!4229 = !DILocation(line: 429, column: 2, scope: !4226)
!4230 = !DILocation(line: 430, column: 17, scope: !4194)
!4231 = !DILocation(line: 430, column: 21, scope: !4194)
!4232 = !DILocation(line: 430, column: 27, scope: !4194)
!4233 = !DILocation(line: 430, column: 32, scope: !4194)
!4234 = !DILocation(line: 430, column: 8, scope: !4194)
!4235 = !DILocation(line: 430, column: 15, scope: !4194)
!4236 = !DILocation(line: 431, column: 7, scope: !4194)
!4237 = !DILocation(line: 431, column: 11, scope: !4194)
!4238 = !DILocation(line: 431, column: 19, scope: !4194)
!4239 = distinct !{!4239, !4192, !4240}
!4240 = !DILocation(line: 432, column: 5, scope: !4152)
!4241 = !DILocation(line: 433, column: 1, scope: !4152)
!4242 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !526, file: !526, line: 281, type: !4243, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4243 = !DISubroutineType(types: !4244)
!4244 = !{!2412, !4245, !7}
!4245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4246, size: 64)
!4246 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2420)
!4247 = !DILocalVariable(name: "vec_", arg: 1, scope: !4242, file: !526, line: 281, type: !4245)
!4248 = !DILocation(line: 281, column: 1, scope: !4242)
!4249 = !DILocalVariable(name: "ix_", arg: 2, scope: !4242, file: !526, line: 281, type: !7)
!4250 = !DILocation(line: 0, scope: !4242)
!4251 = distinct !DISubprogram(name: "single_succ_p", scope: !526, file: !526, line: 626, type: !4252, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4252 = !DISubroutineType(types: !4253)
!4253 = !{!1776, !4254}
!4254 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !1591, line: 112, baseType: !4255)
!4255 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4256, size: 64)
!4256 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1891)
!4257 = !DILocalVariable(name: "bb", arg: 1, scope: !4251, file: !526, line: 626, type: !4254)
!4258 = !DILocation(line: 626, column: 34, scope: !4251)
!4259 = !DILocation(line: 628, column: 10, scope: !4251)
!4260 = !DILocation(line: 628, column: 33, scope: !4251)
!4261 = !DILocation(line: 628, column: 3, scope: !4251)
!4262 = distinct !DISubprogram(name: "single_succ_edge", scope: !526, file: !526, line: 643, type: !4263, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4263 = !DISubroutineType(types: !4264)
!4264 = !{!1906, !4254}
!4265 = !DILocalVariable(name: "bb", arg: 1, scope: !4262, file: !526, line: 643, type: !4254)
!4266 = !DILocation(line: 643, column: 37, scope: !4262)
!4267 = !DILocation(line: 645, column: 3, scope: !4262)
!4268 = !DILocation(line: 646, column: 10, scope: !4262)
!4269 = !DILocation(line: 646, column: 3, scope: !4262)
!4270 = distinct !DISubprogram(name: "single_succ", scope: !526, file: !526, line: 663, type: !4271, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4271 = !DISubroutineType(types: !4272)
!4272 = !{!2412, !4254}
!4273 = !DILocalVariable(name: "bb", arg: 1, scope: !4270, file: !526, line: 663, type: !4254)
!4274 = !DILocation(line: 663, column: 32, scope: !4270)
!4275 = !DILocation(line: 665, column: 28, scope: !4270)
!4276 = !DILocation(line: 665, column: 10, scope: !4270)
!4277 = !DILocation(line: 665, column: 33, scope: !4270)
!4278 = !DILocation(line: 665, column: 3, scope: !4270)
!4279 = distinct !DISubprogram(name: "bmp_iter_next", scope: !1594, file: !1594, line: 382, type: !4280, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4280 = !DISubroutineType(types: !4281)
!4281 = !{null, !4062, !4066}
!4282 = !DILocalVariable(name: "bi", arg: 1, scope: !4279, file: !1594, line: 382, type: !4062)
!4283 = !DILocation(line: 382, column: 33, scope: !4279)
!4284 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4279, file: !1594, line: 382, type: !4066)
!4285 = !DILocation(line: 382, column: 47, scope: !4279)
!4286 = !DILocation(line: 384, column: 3, scope: !4279)
!4287 = !DILocation(line: 384, column: 7, scope: !4279)
!4288 = !DILocation(line: 384, column: 12, scope: !4279)
!4289 = !DILocation(line: 385, column: 4, scope: !4279)
!4290 = !DILocation(line: 385, column: 11, scope: !4279)
!4291 = !DILocation(line: 386, column: 1, scope: !4279)
!4292 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_heap_free", scope: !3, file: !3, line: 126, type: !4293, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4293 = !DISubroutineType(types: !4294)
!4294 = !{null, !4295}
!4295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3018, size: 64)
!4296 = !DILocalVariable(name: "vec_", arg: 1, scope: !4292, file: !3, line: 126, type: !4295)
!4297 = !DILocation(line: 126, column: 1, scope: !4292)
!4298 = !DILocation(line: 126, column: 1, scope: !4299)
!4299 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 126, column: 1)
!4300 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !318, file: !318, line: 184, type: !4301, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4301 = !DISubroutineType(types: !4302)
!4302 = !{null, !4303}
!4303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3031, size: 64)
!4304 = !DILocalVariable(name: "vec_", arg: 1, scope: !4300, file: !318, line: 184, type: !4303)
!4305 = !DILocation(line: 184, column: 1, scope: !4300)
!4306 = !DILocation(line: 184, column: 1, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4300, file: !318, line: 184, column: 1)
!4308 = distinct !DISubprogram(name: "hashable_expr_equal_p", scope: !3, file: !3, line: 335, type: !4309, scopeLine: 337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4309 = !DISubroutineType(types: !4310)
!4310 = !{!1776, !3614, !3614}
!4311 = !DILocalVariable(name: "expr0", arg: 1, scope: !4308, file: !3, line: 335, type: !3614)
!4312 = !DILocation(line: 335, column: 52, scope: !4308)
!4313 = !DILocalVariable(name: "expr1", arg: 2, scope: !4308, file: !3, line: 336, type: !3614)
!4314 = !DILocation(line: 336, column: 53, scope: !4308)
!4315 = !DILocalVariable(name: "type0", scope: !4308, file: !3, line: 338, type: !1661)
!4316 = !DILocation(line: 338, column: 8, scope: !4308)
!4317 = !DILocation(line: 338, column: 16, scope: !4308)
!4318 = !DILocation(line: 338, column: 23, scope: !4308)
!4319 = !DILocalVariable(name: "type1", scope: !4308, file: !3, line: 339, type: !1661)
!4320 = !DILocation(line: 339, column: 8, scope: !4308)
!4321 = !DILocation(line: 339, column: 16, scope: !4308)
!4322 = !DILocation(line: 339, column: 23, scope: !4308)
!4323 = !DILocation(line: 342, column: 8, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 342, column: 7)
!4325 = !DILocation(line: 342, column: 14, scope: !4324)
!4326 = !DILocation(line: 342, column: 31, scope: !4324)
!4327 = !DILocation(line: 342, column: 37, scope: !4324)
!4328 = !DILocation(line: 342, column: 28, scope: !4324)
!4329 = !DILocation(line: 342, column: 7, scope: !4308)
!4330 = !DILocation(line: 343, column: 5, scope: !4324)
!4331 = !DILocation(line: 347, column: 7, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 347, column: 7)
!4333 = !DILocation(line: 347, column: 16, scope: !4332)
!4334 = !DILocation(line: 347, column: 13, scope: !4332)
!4335 = !DILocation(line: 348, column: 7, scope: !4332)
!4336 = !DILocation(line: 348, column: 11, scope: !4332)
!4337 = !DILocation(line: 348, column: 29, scope: !4332)
!4338 = !DILocation(line: 349, column: 4, scope: !4332)
!4339 = !DILocation(line: 349, column: 7, scope: !4332)
!4340 = !DILocation(line: 349, column: 25, scope: !4332)
!4341 = !DILocation(line: 350, column: 4, scope: !4332)
!4342 = !DILocation(line: 350, column: 7, scope: !4332)
!4343 = !DILocation(line: 350, column: 32, scope: !4332)
!4344 = !DILocation(line: 350, column: 29, scope: !4332)
!4345 = !DILocation(line: 351, column: 4, scope: !4332)
!4346 = !DILocation(line: 351, column: 7, scope: !4332)
!4347 = !DILocation(line: 351, column: 33, scope: !4332)
!4348 = !DILocation(line: 351, column: 30, scope: !4332)
!4349 = !DILocation(line: 352, column: 4, scope: !4332)
!4350 = !DILocation(line: 352, column: 7, scope: !4332)
!4351 = !DILocation(line: 352, column: 28, scope: !4332)
!4352 = !DILocation(line: 352, column: 25, scope: !4332)
!4353 = !DILocation(line: 347, column: 7, scope: !4308)
!4354 = !DILocation(line: 353, column: 5, scope: !4332)
!4355 = !DILocation(line: 355, column: 7, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 355, column: 7)
!4357 = !DILocation(line: 355, column: 14, scope: !4356)
!4358 = !DILocation(line: 355, column: 22, scope: !4356)
!4359 = !DILocation(line: 355, column: 29, scope: !4356)
!4360 = !DILocation(line: 355, column: 19, scope: !4356)
!4361 = !DILocation(line: 355, column: 7, scope: !4308)
!4362 = !DILocation(line: 356, column: 5, scope: !4356)
!4363 = !DILocation(line: 358, column: 11, scope: !4308)
!4364 = !DILocation(line: 358, column: 18, scope: !4308)
!4365 = !DILocation(line: 358, column: 3, scope: !4308)
!4366 = !DILocation(line: 361, column: 31, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4308, file: !3, line: 359, column: 5)
!4368 = !DILocation(line: 361, column: 38, scope: !4367)
!4369 = !DILocation(line: 361, column: 42, scope: !4367)
!4370 = !DILocation(line: 361, column: 49, scope: !4367)
!4371 = !DILocation(line: 362, column: 31, scope: !4367)
!4372 = !DILocation(line: 362, column: 38, scope: !4367)
!4373 = !DILocation(line: 362, column: 42, scope: !4367)
!4374 = !DILocation(line: 362, column: 49, scope: !4367)
!4375 = !DILocation(line: 361, column: 14, scope: !4367)
!4376 = !DILocation(line: 361, column: 7, scope: !4367)
!4377 = !DILocation(line: 365, column: 11, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 365, column: 11)
!4379 = !DILocation(line: 365, column: 18, scope: !4378)
!4380 = !DILocation(line: 365, column: 22, scope: !4378)
!4381 = !DILocation(line: 365, column: 28, scope: !4378)
!4382 = !DILocation(line: 365, column: 34, scope: !4378)
!4383 = !DILocation(line: 365, column: 41, scope: !4378)
!4384 = !DILocation(line: 365, column: 45, scope: !4378)
!4385 = !DILocation(line: 365, column: 51, scope: !4378)
!4386 = !DILocation(line: 365, column: 31, scope: !4378)
!4387 = !DILocation(line: 365, column: 11, scope: !4367)
!4388 = !DILocation(line: 366, column: 9, scope: !4378)
!4389 = !DILocation(line: 368, column: 12, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 368, column: 11)
!4391 = !DILocation(line: 369, column: 12, scope: !4390)
!4392 = !DILocation(line: 369, column: 15, scope: !4390)
!4393 = !DILocation(line: 369, column: 22, scope: !4390)
!4394 = !DILocation(line: 369, column: 26, scope: !4390)
!4395 = !DILocation(line: 369, column: 32, scope: !4390)
!4396 = !DILocation(line: 369, column: 35, scope: !4390)
!4397 = !DILocation(line: 370, column: 11, scope: !4390)
!4398 = !DILocation(line: 370, column: 14, scope: !4390)
!4399 = !DILocation(line: 370, column: 45, scope: !4390)
!4400 = !DILocation(line: 370, column: 42, scope: !4390)
!4401 = !DILocation(line: 368, column: 11, scope: !4367)
!4402 = !DILocation(line: 371, column: 9, scope: !4390)
!4403 = !DILocation(line: 373, column: 31, scope: !4367)
!4404 = !DILocation(line: 373, column: 38, scope: !4367)
!4405 = !DILocation(line: 373, column: 42, scope: !4367)
!4406 = !DILocation(line: 373, column: 48, scope: !4367)
!4407 = !DILocation(line: 374, column: 31, scope: !4367)
!4408 = !DILocation(line: 374, column: 38, scope: !4367)
!4409 = !DILocation(line: 374, column: 42, scope: !4367)
!4410 = !DILocation(line: 374, column: 48, scope: !4367)
!4411 = !DILocation(line: 373, column: 14, scope: !4367)
!4412 = !DILocation(line: 373, column: 7, scope: !4367)
!4413 = !DILocation(line: 378, column: 13, scope: !4414)
!4414 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 378, column: 13)
!4415 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 377, column: 7)
!4416 = !DILocation(line: 378, column: 20, scope: !4414)
!4417 = !DILocation(line: 378, column: 24, scope: !4414)
!4418 = !DILocation(line: 378, column: 31, scope: !4414)
!4419 = !DILocation(line: 378, column: 37, scope: !4414)
!4420 = !DILocation(line: 378, column: 44, scope: !4414)
!4421 = !DILocation(line: 378, column: 48, scope: !4414)
!4422 = !DILocation(line: 378, column: 55, scope: !4414)
!4423 = !DILocation(line: 378, column: 34, scope: !4414)
!4424 = !DILocation(line: 378, column: 13, scope: !4415)
!4425 = !DILocation(line: 379, column: 11, scope: !4414)
!4426 = !DILocation(line: 381, column: 30, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 381, column: 13)
!4428 = !DILocation(line: 381, column: 37, scope: !4427)
!4429 = !DILocation(line: 381, column: 41, scope: !4427)
!4430 = !DILocation(line: 381, column: 48, scope: !4427)
!4431 = !DILocation(line: 382, column: 30, scope: !4427)
!4432 = !DILocation(line: 382, column: 37, scope: !4427)
!4433 = !DILocation(line: 382, column: 41, scope: !4427)
!4434 = !DILocation(line: 382, column: 48, scope: !4427)
!4435 = !DILocation(line: 381, column: 13, scope: !4427)
!4436 = !DILocation(line: 383, column: 13, scope: !4427)
!4437 = !DILocation(line: 383, column: 33, scope: !4427)
!4438 = !DILocation(line: 383, column: 40, scope: !4427)
!4439 = !DILocation(line: 383, column: 44, scope: !4427)
!4440 = !DILocation(line: 383, column: 51, scope: !4427)
!4441 = !DILocation(line: 384, column: 33, scope: !4427)
!4442 = !DILocation(line: 384, column: 40, scope: !4427)
!4443 = !DILocation(line: 384, column: 44, scope: !4427)
!4444 = !DILocation(line: 384, column: 51, scope: !4427)
!4445 = !DILocation(line: 383, column: 16, scope: !4427)
!4446 = !DILocation(line: 381, column: 13, scope: !4415)
!4447 = !DILocation(line: 385, column: 11, scope: !4427)
!4448 = !DILocation(line: 388, column: 40, scope: !4415)
!4449 = !DILocation(line: 388, column: 47, scope: !4415)
!4450 = !DILocation(line: 388, column: 51, scope: !4415)
!4451 = !DILocation(line: 388, column: 58, scope: !4415)
!4452 = !DILocation(line: 388, column: 17, scope: !4415)
!4453 = !DILocation(line: 389, column: 17, scope: !4415)
!4454 = !DILocation(line: 389, column: 37, scope: !4415)
!4455 = !DILocation(line: 389, column: 44, scope: !4415)
!4456 = !DILocation(line: 389, column: 48, scope: !4415)
!4457 = !DILocation(line: 389, column: 55, scope: !4415)
!4458 = !DILocation(line: 390, column: 37, scope: !4415)
!4459 = !DILocation(line: 390, column: 44, scope: !4415)
!4460 = !DILocation(line: 390, column: 48, scope: !4415)
!4461 = !DILocation(line: 390, column: 55, scope: !4415)
!4462 = !DILocation(line: 389, column: 20, scope: !4415)
!4463 = !DILocation(line: 391, column: 17, scope: !4415)
!4464 = !DILocation(line: 391, column: 37, scope: !4415)
!4465 = !DILocation(line: 391, column: 44, scope: !4415)
!4466 = !DILocation(line: 391, column: 48, scope: !4415)
!4467 = !DILocation(line: 391, column: 55, scope: !4415)
!4468 = !DILocation(line: 392, column: 37, scope: !4415)
!4469 = !DILocation(line: 392, column: 44, scope: !4415)
!4470 = !DILocation(line: 392, column: 48, scope: !4415)
!4471 = !DILocation(line: 392, column: 55, scope: !4415)
!4472 = !DILocation(line: 391, column: 20, scope: !4415)
!4473 = !DILocation(line: 0, scope: !4415)
!4474 = !DILocation(line: 388, column: 16, scope: !4415)
!4475 = !DILocation(line: 388, column: 9, scope: !4415)
!4476 = !DILocalVariable(name: "i", scope: !4477, file: !3, line: 397, type: !2071)
!4477 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 396, column: 7)
!4478 = !DILocation(line: 397, column: 16, scope: !4477)
!4479 = !DILocation(line: 401, column: 32, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 401, column: 13)
!4481 = !DILocation(line: 401, column: 39, scope: !4480)
!4482 = !DILocation(line: 401, column: 43, scope: !4480)
!4483 = !DILocation(line: 401, column: 48, scope: !4480)
!4484 = !DILocation(line: 402, column: 32, scope: !4480)
!4485 = !DILocation(line: 402, column: 39, scope: !4480)
!4486 = !DILocation(line: 402, column: 43, scope: !4480)
!4487 = !DILocation(line: 402, column: 48, scope: !4480)
!4488 = !DILocation(line: 401, column: 15, scope: !4480)
!4489 = !DILocation(line: 401, column: 13, scope: !4477)
!4490 = !DILocation(line: 403, column: 11, scope: !4480)
!4491 = !DILocation(line: 405, column: 15, scope: !4492)
!4492 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 405, column: 13)
!4493 = !DILocation(line: 405, column: 22, scope: !4492)
!4494 = !DILocation(line: 405, column: 26, scope: !4492)
!4495 = !DILocation(line: 405, column: 31, scope: !4492)
!4496 = !DILocation(line: 405, column: 13, scope: !4477)
!4497 = !DILocation(line: 406, column: 11, scope: !4492)
!4498 = !DILocation(line: 408, column: 13, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 408, column: 13)
!4500 = !DILocation(line: 408, column: 20, scope: !4499)
!4501 = !DILocation(line: 408, column: 24, scope: !4499)
!4502 = !DILocation(line: 408, column: 29, scope: !4499)
!4503 = !DILocation(line: 408, column: 39, scope: !4499)
!4504 = !DILocation(line: 408, column: 46, scope: !4499)
!4505 = !DILocation(line: 408, column: 50, scope: !4499)
!4506 = !DILocation(line: 408, column: 55, scope: !4499)
!4507 = !DILocation(line: 408, column: 35, scope: !4499)
!4508 = !DILocation(line: 408, column: 13, scope: !4477)
!4509 = !DILocation(line: 409, column: 11, scope: !4499)
!4510 = !DILocation(line: 411, column: 16, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 411, column: 9)
!4512 = !DILocation(line: 411, column: 14, scope: !4511)
!4513 = !DILocation(line: 411, column: 21, scope: !4514)
!4514 = distinct !DILexicalBlock(scope: !4511, file: !3, line: 411, column: 9)
!4515 = !DILocation(line: 411, column: 25, scope: !4514)
!4516 = !DILocation(line: 411, column: 32, scope: !4514)
!4517 = !DILocation(line: 411, column: 36, scope: !4514)
!4518 = !DILocation(line: 411, column: 41, scope: !4514)
!4519 = !DILocation(line: 411, column: 23, scope: !4514)
!4520 = !DILocation(line: 411, column: 9, scope: !4511)
!4521 = !DILocation(line: 412, column: 34, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4514, file: !3, line: 412, column: 15)
!4523 = !DILocation(line: 412, column: 41, scope: !4522)
!4524 = !DILocation(line: 412, column: 45, scope: !4522)
!4525 = !DILocation(line: 412, column: 50, scope: !4522)
!4526 = !DILocation(line: 412, column: 55, scope: !4522)
!4527 = !DILocation(line: 413, column: 34, scope: !4522)
!4528 = !DILocation(line: 413, column: 41, scope: !4522)
!4529 = !DILocation(line: 413, column: 45, scope: !4522)
!4530 = !DILocation(line: 413, column: 50, scope: !4522)
!4531 = !DILocation(line: 413, column: 55, scope: !4522)
!4532 = !DILocation(line: 412, column: 17, scope: !4522)
!4533 = !DILocation(line: 412, column: 15, scope: !4514)
!4534 = !DILocation(line: 414, column: 13, scope: !4522)
!4535 = !DILocation(line: 413, column: 60, scope: !4522)
!4536 = !DILocation(line: 411, column: 49, scope: !4514)
!4537 = !DILocation(line: 411, column: 9, scope: !4514)
!4538 = distinct !{!4538, !4520, !4539}
!4539 = !DILocation(line: 414, column: 20, scope: !4511)
!4540 = !DILocation(line: 416, column: 9, scope: !4477)
!4541 = !DILocation(line: 420, column: 7, scope: !4367)
!4542 = !DILocation(line: 421, column: 5, scope: !4367)
!4543 = !DILocation(line: 423, column: 5, scope: !4308)
!4544 = !DILocation(line: 425, column: 1, scope: !4308)
!4545 = distinct !DISubprogram(name: "gimple_vuse", scope: !594, file: !594, line: 1365, type: !3500, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4546 = !DILocalVariable(name: "g", arg: 1, scope: !4545, file: !594, line: 1365, type: !3418)
!4547 = !DILocation(line: 1365, column: 27, scope: !4545)
!4548 = !DILocation(line: 1367, column: 28, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4545, file: !594, line: 1367, column: 7)
!4550 = !DILocation(line: 1367, column: 8, scope: !4549)
!4551 = !DILocation(line: 1367, column: 7, scope: !4545)
!4552 = !DILocation(line: 1368, column: 5, scope: !4549)
!4553 = !DILocation(line: 1369, column: 10, scope: !4545)
!4554 = !DILocation(line: 1369, column: 13, scope: !4545)
!4555 = !DILocation(line: 1369, column: 23, scope: !4545)
!4556 = !DILocation(line: 1369, column: 3, scope: !4545)
!4557 = !DILocation(line: 1370, column: 1, scope: !4545)
!4558 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !594, file: !594, line: 1283, type: !4559, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4559 = !DISubroutineType(types: !4560)
!4560 = !{!1776, !3418}
!4561 = !DILocalVariable(name: "g", arg: 1, scope: !4558, file: !594, line: 1283, type: !3418)
!4562 = !DILocation(line: 1283, column: 34, scope: !4558)
!4563 = !DILocation(line: 1285, column: 23, scope: !4558)
!4564 = !DILocation(line: 1285, column: 10, scope: !4558)
!4565 = !DILocation(line: 1285, column: 26, scope: !4558)
!4566 = !DILocation(line: 1285, column: 43, scope: !4558)
!4567 = !DILocation(line: 1285, column: 59, scope: !4558)
!4568 = !DILocation(line: 1285, column: 46, scope: !4558)
!4569 = !DILocation(line: 1285, column: 62, scope: !4558)
!4570 = !DILocation(line: 0, scope: !4558)
!4571 = !DILocation(line: 1285, column: 3, scope: !4558)
!4572 = distinct !DISubprogram(name: "gimple_code", scope: !594, file: !594, line: 1052, type: !4573, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4573 = !DISubroutineType(types: !4574)
!4574 = !{!593, !3418}
!4575 = !DILocalVariable(name: "g", arg: 1, scope: !4572, file: !594, line: 1052, type: !3418)
!4576 = !DILocation(line: 1052, column: 27, scope: !4572)
!4577 = !DILocation(line: 1054, column: 10, scope: !4572)
!4578 = !DILocation(line: 1054, column: 13, scope: !4572)
!4579 = !DILocation(line: 1054, column: 20, scope: !4572)
!4580 = !DILocation(line: 1054, column: 3, scope: !4572)
!4581 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_heap_safe_push", scope: !3, file: !3, line: 126, type: !4582, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4582 = !DISubroutineType(types: !4583)
!4583 = !{!4584, !4295, !3030}
!4584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3030, size: 64)
!4585 = !DILocalVariable(name: "vec_", arg: 1, scope: !4581, file: !3, line: 126, type: !4295)
!4586 = !DILocation(line: 126, column: 1, scope: !4581)
!4587 = !DILocalVariable(name: "obj_", arg: 2, scope: !4581, file: !3, line: 126, type: !3030)
!4588 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !318, file: !318, line: 184, type: !4589, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4589 = !DISubroutineType(types: !4590)
!4590 = !{!1960, !4303, !1661}
!4591 = !DILocalVariable(name: "vec_", arg: 1, scope: !4588, file: !318, line: 184, type: !4303)
!4592 = !DILocation(line: 184, column: 1, scope: !4588)
!4593 = !DILocalVariable(name: "obj_", arg: 2, scope: !4588, file: !318, line: 184, type: !1661)
!4594 = distinct !DISubprogram(name: "record_equivalences_from_incoming_edge", scope: !3, file: !3, line: 993, type: !4595, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4595 = !DISubroutineType(types: !4596)
!4596 = !{null, !2412}
!4597 = !DILocalVariable(name: "bb", arg: 1, scope: !4594, file: !3, line: 993, type: !2412)
!4598 = !DILocation(line: 993, column: 53, scope: !4594)
!4599 = !DILocalVariable(name: "e", scope: !4594, file: !3, line: 995, type: !1906)
!4600 = !DILocation(line: 995, column: 8, scope: !4594)
!4601 = !DILocalVariable(name: "parent", scope: !4594, file: !3, line: 996, type: !2412)
!4602 = !DILocation(line: 996, column: 15, scope: !4594)
!4603 = !DILocalVariable(name: "edge_info", scope: !4594, file: !3, line: 997, type: !3036)
!4604 = !DILocation(line: 997, column: 21, scope: !4594)
!4605 = !DILocation(line: 1002, column: 53, scope: !4594)
!4606 = !DILocation(line: 1002, column: 12, scope: !4594)
!4607 = !DILocation(line: 1002, column: 10, scope: !4594)
!4608 = !DILocation(line: 1004, column: 49, scope: !4594)
!4609 = !DILocation(line: 1004, column: 7, scope: !4594)
!4610 = !DILocation(line: 1004, column: 5, scope: !4594)
!4611 = !DILocation(line: 1008, column: 7, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 1008, column: 7)
!4613 = !DILocation(line: 1008, column: 9, scope: !4612)
!4614 = !DILocation(line: 1008, column: 12, scope: !4612)
!4615 = !DILocation(line: 1008, column: 15, scope: !4612)
!4616 = !DILocation(line: 1008, column: 22, scope: !4612)
!4617 = !DILocation(line: 1008, column: 19, scope: !4612)
!4618 = !DILocation(line: 1008, column: 7, scope: !4594)
!4619 = !DILocalVariable(name: "i", scope: !4620, file: !3, line: 1010, type: !7)
!4620 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 1009, column: 5)
!4621 = !DILocation(line: 1010, column: 20, scope: !4620)
!4622 = !DILocation(line: 1012, column: 40, scope: !4620)
!4623 = !DILocation(line: 1012, column: 43, scope: !4620)
!4624 = !DILocation(line: 1012, column: 19, scope: !4620)
!4625 = !DILocation(line: 1012, column: 17, scope: !4620)
!4626 = !DILocation(line: 1014, column: 11, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 1014, column: 11)
!4628 = !DILocation(line: 1014, column: 11, scope: !4620)
!4629 = !DILocalVariable(name: "lhs", scope: !4630, file: !3, line: 1016, type: !1661)
!4630 = distinct !DILexicalBlock(scope: !4627, file: !3, line: 1015, column: 2)
!4631 = !DILocation(line: 1016, column: 9, scope: !4630)
!4632 = !DILocation(line: 1016, column: 15, scope: !4630)
!4633 = !DILocation(line: 1016, column: 26, scope: !4630)
!4634 = !DILocalVariable(name: "rhs", scope: !4630, file: !3, line: 1017, type: !1661)
!4635 = !DILocation(line: 1017, column: 9, scope: !4630)
!4636 = !DILocation(line: 1017, column: 15, scope: !4630)
!4637 = !DILocation(line: 1017, column: 26, scope: !4630)
!4638 = !DILocalVariable(name: "cond_equivalences", scope: !4630, file: !3, line: 1018, type: !3042)
!4639 = !DILocation(line: 1018, column: 29, scope: !4630)
!4640 = !DILocation(line: 1018, column: 49, scope: !4630)
!4641 = !DILocation(line: 1018, column: 60, scope: !4630)
!4642 = !DILocation(line: 1020, column: 8, scope: !4643)
!4643 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1020, column: 8)
!4644 = !DILocation(line: 1020, column: 8, scope: !4630)
!4645 = !DILocation(line: 1021, column: 23, scope: !4643)
!4646 = !DILocation(line: 1021, column: 28, scope: !4643)
!4647 = !DILocation(line: 1021, column: 6, scope: !4643)
!4648 = !DILocation(line: 1023, column: 8, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4630, file: !3, line: 1023, column: 8)
!4650 = !DILocation(line: 1023, column: 8, scope: !4630)
!4651 = !DILocation(line: 1024, column: 20, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 1024, column: 13)
!4653 = !DILocation(line: 1024, column: 18, scope: !4652)
!4654 = !DILocation(line: 1024, column: 25, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4652, file: !3, line: 1024, column: 13)
!4656 = !DILocation(line: 1024, column: 29, scope: !4655)
!4657 = !DILocation(line: 1024, column: 40, scope: !4655)
!4658 = !DILocation(line: 1024, column: 27, scope: !4655)
!4659 = !DILocation(line: 1024, column: 13, scope: !4652)
!4660 = !DILocation(line: 1025, column: 29, scope: !4655)
!4661 = !DILocation(line: 1025, column: 47, scope: !4655)
!4662 = !DILocation(line: 1025, column: 15, scope: !4655)
!4663 = !DILocation(line: 1024, column: 64, scope: !4655)
!4664 = !DILocation(line: 1024, column: 13, scope: !4655)
!4665 = distinct !{!4665, !4659, !4666}
!4666 = !DILocation(line: 1025, column: 49, scope: !4652)
!4667 = !DILocation(line: 1026, column: 2, scope: !4630)
!4668 = !DILocation(line: 1027, column: 5, scope: !4620)
!4669 = !DILocation(line: 1028, column: 1, scope: !4594)
!4670 = distinct !DISubprogram(name: "record_equivalences_from_phis", scope: !3, file: !3, line: 911, type: !4595, scopeLine: 912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4671 = !DILocalVariable(name: "bb", arg: 1, scope: !4670, file: !3, line: 911, type: !2412)
!4672 = !DILocation(line: 911, column: 44, scope: !4670)
!4673 = !DILocalVariable(name: "gsi", scope: !4670, file: !3, line: 913, type: !3175)
!4674 = !DILocation(line: 913, column: 24, scope: !4670)
!4675 = !DILocation(line: 915, column: 30, scope: !4676)
!4676 = distinct !DILexicalBlock(scope: !4670, file: !3, line: 915, column: 3)
!4677 = !DILocation(line: 915, column: 14, scope: !4676)
!4678 = !DILocation(line: 915, column: 8, scope: !4676)
!4679 = !DILocation(line: 915, column: 36, scope: !4680)
!4680 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 915, column: 3)
!4681 = !DILocation(line: 915, column: 35, scope: !4680)
!4682 = !DILocation(line: 915, column: 3, scope: !4676)
!4683 = !DILocalVariable(name: "phi", scope: !4684, file: !3, line: 917, type: !1926)
!4684 = distinct !DILexicalBlock(scope: !4680, file: !3, line: 916, column: 5)
!4685 = !DILocation(line: 917, column: 14, scope: !4684)
!4686 = !DILocation(line: 917, column: 20, scope: !4684)
!4687 = !DILocalVariable(name: "lhs", scope: !4684, file: !3, line: 919, type: !1661)
!4688 = !DILocation(line: 919, column: 12, scope: !4684)
!4689 = !DILocation(line: 919, column: 37, scope: !4684)
!4690 = !DILocation(line: 919, column: 18, scope: !4684)
!4691 = !DILocalVariable(name: "rhs", scope: !4684, file: !3, line: 920, type: !1661)
!4692 = !DILocation(line: 920, column: 12, scope: !4684)
!4693 = !DILocalVariable(name: "i", scope: !4684, file: !3, line: 921, type: !2071)
!4694 = !DILocation(line: 921, column: 14, scope: !4684)
!4695 = !DILocation(line: 923, column: 14, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 923, column: 7)
!4697 = !DILocation(line: 923, column: 12, scope: !4696)
!4698 = !DILocation(line: 923, column: 19, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4696, file: !3, line: 923, column: 7)
!4700 = !DILocation(line: 923, column: 44, scope: !4699)
!4701 = !DILocation(line: 923, column: 23, scope: !4699)
!4702 = !DILocation(line: 923, column: 21, scope: !4699)
!4703 = !DILocation(line: 923, column: 7, scope: !4696)
!4704 = !DILocalVariable(name: "t", scope: !4705, file: !3, line: 925, type: !1661)
!4705 = distinct !DILexicalBlock(scope: !4699, file: !3, line: 924, column: 2)
!4706 = !DILocation(line: 925, column: 9, scope: !4705)
!4707 = !DILocation(line: 925, column: 33, scope: !4705)
!4708 = !DILocation(line: 925, column: 38, scope: !4705)
!4709 = !DILocation(line: 925, column: 13, scope: !4705)
!4710 = !DILocation(line: 930, column: 8, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 930, column: 8)
!4712 = !DILocation(line: 930, column: 15, scope: !4711)
!4713 = !DILocation(line: 930, column: 12, scope: !4711)
!4714 = !DILocation(line: 930, column: 8, scope: !4705)
!4715 = !DILocation(line: 931, column: 6, scope: !4711)
!4716 = !DILocation(line: 935, column: 8, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 935, column: 8)
!4718 = !DILocation(line: 935, column: 12, scope: !4717)
!4719 = !DILocation(line: 935, column: 8, scope: !4705)
!4720 = !DILocation(line: 936, column: 12, scope: !4717)
!4721 = !DILocation(line: 936, column: 10, scope: !4717)
!4722 = !DILocation(line: 936, column: 6, scope: !4717)
!4723 = !DILocation(line: 940, column: 44, scope: !4724)
!4724 = distinct !DILexicalBlock(scope: !4717, file: !3, line: 940, column: 13)
!4725 = !DILocation(line: 940, column: 49, scope: !4724)
!4726 = !DILocation(line: 940, column: 15, scope: !4724)
!4727 = !DILocation(line: 940, column: 13, scope: !4717)
!4728 = !DILocation(line: 941, column: 6, scope: !4724)
!4729 = !DILocation(line: 942, column: 2, scope: !4705)
!4730 = !DILocation(line: 923, column: 51, scope: !4699)
!4731 = !DILocation(line: 923, column: 7, scope: !4699)
!4732 = distinct !{!4732, !4703, !4733}
!4733 = !DILocation(line: 942, column: 2, scope: !4696)
!4734 = !DILocation(line: 946, column: 12, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 946, column: 11)
!4736 = !DILocation(line: 946, column: 11, scope: !4684)
!4737 = !DILocation(line: 947, column: 8, scope: !4735)
!4738 = !DILocation(line: 947, column: 6, scope: !4735)
!4739 = !DILocation(line: 947, column: 2, scope: !4735)
!4740 = !DILocation(line: 955, column: 11, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4684, file: !3, line: 955, column: 11)
!4742 = !DILocation(line: 955, column: 37, scope: !4741)
!4743 = !DILocation(line: 955, column: 16, scope: !4741)
!4744 = !DILocation(line: 955, column: 13, scope: !4741)
!4745 = !DILocation(line: 955, column: 42, scope: !4741)
!4746 = !DILocation(line: 955, column: 65, scope: !4741)
!4747 = !DILocation(line: 955, column: 70, scope: !4741)
!4748 = !DILocation(line: 955, column: 45, scope: !4741)
!4749 = !DILocation(line: 955, column: 11, scope: !4684)
!4750 = !DILocation(line: 956, column: 22, scope: !4741)
!4751 = !DILocation(line: 956, column: 27, scope: !4741)
!4752 = !DILocation(line: 956, column: 2, scope: !4741)
!4753 = !DILocation(line: 957, column: 5, scope: !4684)
!4754 = !DILocation(line: 915, column: 53, scope: !4680)
!4755 = !DILocation(line: 915, column: 3, scope: !4680)
!4756 = distinct !{!4756, !4682, !4757}
!4757 = !DILocation(line: 957, column: 5, scope: !4676)
!4758 = !DILocation(line: 958, column: 1, scope: !4670)
!4759 = distinct !DISubprogram(name: "optimize_stmt", scope: !3, file: !3, line: 2071, type: !4760, scopeLine: 2072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!4760 = !DISubroutineType(types: !4761)
!4761 = !{null, !2412, !3175}
!4762 = !DILocalVariable(name: "bb", arg: 1, scope: !4759, file: !3, line: 2071, type: !2412)
!4763 = !DILocation(line: 2071, column: 28, scope: !4759)
!4764 = !DILocalVariable(name: "si", arg: 2, scope: !4759, file: !3, line: 2071, type: !3175)
!4765 = !DILocation(line: 2071, column: 53, scope: !4759)
!4766 = !DILocalVariable(name: "stmt", scope: !4759, file: !3, line: 2073, type: !1926)
!4767 = !DILocation(line: 2073, column: 10, scope: !4759)
!4768 = !DILocalVariable(name: "old_stmt", scope: !4759, file: !3, line: 2073, type: !1926)
!4769 = !DILocation(line: 2073, column: 16, scope: !4759)
!4770 = !DILocalVariable(name: "may_optimize_p", scope: !4759, file: !3, line: 2074, type: !1776)
!4771 = !DILocation(line: 2074, column: 8, scope: !4759)
!4772 = !DILocalVariable(name: "modified_p", scope: !4759, file: !3, line: 2075, type: !1776)
!4773 = !DILocation(line: 2075, column: 8, scope: !4759)
!4774 = !DILocation(line: 2077, column: 21, scope: !4759)
!4775 = !DILocation(line: 2077, column: 19, scope: !4759)
!4776 = !DILocation(line: 2077, column: 12, scope: !4759)
!4777 = !DILocation(line: 2079, column: 20, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2079, column: 7)
!4779 = !DILocation(line: 2079, column: 7, scope: !4778)
!4780 = !DILocation(line: 2079, column: 26, scope: !4778)
!4781 = !DILocation(line: 2079, column: 7, scope: !4759)
!4782 = !DILocation(line: 2080, column: 30, scope: !4778)
!4783 = !DILocation(line: 2080, column: 5, scope: !4778)
!4784 = !DILocation(line: 2082, column: 28, scope: !4759)
!4785 = !DILocation(line: 2082, column: 3, scope: !4759)
!4786 = !DILocation(line: 2083, column: 22, scope: !4759)
!4787 = !DILocation(line: 2085, column: 7, scope: !4788)
!4788 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2085, column: 7)
!4789 = !DILocation(line: 2085, column: 17, scope: !4788)
!4790 = !DILocation(line: 2085, column: 21, scope: !4788)
!4791 = !DILocation(line: 2085, column: 32, scope: !4788)
!4792 = !DILocation(line: 2085, column: 7, scope: !4759)
!4793 = !DILocation(line: 2087, column: 16, scope: !4794)
!4794 = distinct !DILexicalBlock(scope: !4788, file: !3, line: 2086, column: 5)
!4795 = !DILocation(line: 2087, column: 7, scope: !4794)
!4796 = !DILocation(line: 2088, column: 26, scope: !4794)
!4797 = !DILocation(line: 2088, column: 37, scope: !4794)
!4798 = !DILocation(line: 2088, column: 7, scope: !4794)
!4799 = !DILocation(line: 2089, column: 5, scope: !4794)
!4800 = !DILocation(line: 2092, column: 20, scope: !4759)
!4801 = !DILocation(line: 2092, column: 3, scope: !4759)
!4802 = !DILocation(line: 2096, column: 26, scope: !4803)
!4803 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2096, column: 7)
!4804 = !DILocation(line: 2096, column: 7, scope: !4803)
!4805 = !DILocation(line: 2096, column: 7, scope: !4759)
!4806 = !DILocalVariable(name: "rhs", scope: !4807, file: !3, line: 2098, type: !1661)
!4807 = distinct !DILexicalBlock(scope: !4803, file: !3, line: 2097, column: 5)
!4808 = !DILocation(line: 2098, column: 12, scope: !4807)
!4809 = !DILocation(line: 2102, column: 11, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 2102, column: 11)
!4811 = !DILocation(line: 2102, column: 11, scope: !4807)
!4812 = !DILocation(line: 2104, column: 11, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4810, file: !3, line: 2103, column: 2)
!4814 = !DILocation(line: 2104, column: 9, scope: !4813)
!4815 = !DILocation(line: 2105, column: 25, scope: !4813)
!4816 = !DILocation(line: 2105, column: 4, scope: !4813)
!4817 = !DILocation(line: 2107, column: 8, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 2107, column: 8)
!4819 = !DILocation(line: 2107, column: 18, scope: !4818)
!4820 = !DILocation(line: 2107, column: 22, scope: !4818)
!4821 = !DILocation(line: 2107, column: 33, scope: !4818)
!4822 = !DILocation(line: 2107, column: 8, scope: !4813)
!4823 = !DILocation(line: 2109, column: 17, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 2108, column: 6)
!4825 = !DILocation(line: 2109, column: 8, scope: !4824)
!4826 = !DILocation(line: 2110, column: 27, scope: !4824)
!4827 = !DILocation(line: 2110, column: 38, scope: !4824)
!4828 = !DILocation(line: 2110, column: 8, scope: !4824)
!4829 = !DILocation(line: 2111, column: 6, scope: !4824)
!4830 = !DILocation(line: 2112, column: 2, scope: !4813)
!4831 = !DILocation(line: 2115, column: 35, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 2115, column: 11)
!4833 = !DILocation(line: 2115, column: 11, scope: !4832)
!4834 = !DILocation(line: 2115, column: 11, scope: !4807)
!4835 = !DILocation(line: 2116, column: 35, scope: !4832)
!4836 = !DILocation(line: 2116, column: 15, scope: !4832)
!4837 = !DILocation(line: 2116, column: 13, scope: !4832)
!4838 = !DILocation(line: 2116, column: 9, scope: !4832)
!4839 = !DILocation(line: 2117, column: 29, scope: !4840)
!4840 = distinct !DILexicalBlock(scope: !4832, file: !3, line: 2117, column: 16)
!4841 = !DILocation(line: 2117, column: 16, scope: !4840)
!4842 = !DILocation(line: 2117, column: 35, scope: !4840)
!4843 = !DILocation(line: 2117, column: 16, scope: !4832)
!4844 = !DILocation(line: 2118, column: 33, scope: !4840)
!4845 = !DILocation(line: 2118, column: 15, scope: !4840)
!4846 = !DILocation(line: 2118, column: 13, scope: !4840)
!4847 = !DILocation(line: 2118, column: 9, scope: !4840)
!4848 = !DILocation(line: 2119, column: 29, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 2119, column: 16)
!4850 = !DILocation(line: 2119, column: 16, scope: !4849)
!4851 = !DILocation(line: 2119, column: 35, scope: !4849)
!4852 = !DILocation(line: 2119, column: 16, scope: !4840)
!4853 = !DILocation(line: 2121, column: 36, scope: !4849)
!4854 = !DILocation(line: 2121, column: 15, scope: !4849)
!4855 = !DILocation(line: 2121, column: 13, scope: !4849)
!4856 = !DILocation(line: 2121, column: 9, scope: !4849)
!4857 = !DILocation(line: 2123, column: 11, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 2123, column: 11)
!4859 = !DILocation(line: 2123, column: 15, scope: !4858)
!4860 = !DILocation(line: 2123, column: 18, scope: !4858)
!4861 = !DILocation(line: 2123, column: 34, scope: !4858)
!4862 = !DILocation(line: 2123, column: 11, scope: !4807)
!4863 = !DILocation(line: 2124, column: 49, scope: !4858)
!4864 = !DILocation(line: 2124, column: 9, scope: !4858)
!4865 = !DILocation(line: 2129, column: 18, scope: !4807)
!4866 = !DILocation(line: 2130, column: 5, scope: !4807)
!4867 = !DILocation(line: 2134, column: 47, scope: !4759)
!4868 = !DILocation(line: 2134, column: 22, scope: !4759)
!4869 = !DILocation(line: 2135, column: 21, scope: !4759)
!4870 = !DILocation(line: 2135, column: 44, scope: !4759)
!4871 = !DILocation(line: 2135, column: 26, scope: !4759)
!4872 = !DILocation(line: 2136, column: 26, scope: !4759)
!4873 = !DILocation(line: 2136, column: 59, scope: !4759)
!4874 = !DILocation(line: 2136, column: 30, scope: !4759)
!4875 = !DILocation(line: 2137, column: 25, scope: !4759)
!4876 = !DILocation(line: 2137, column: 45, scope: !4759)
!4877 = !DILocation(line: 2137, column: 29, scope: !4759)
!4878 = !DILocation(line: 2138, column: 29, scope: !4759)
!4879 = !DILocation(line: 2138, column: 49, scope: !4759)
!4880 = !DILocation(line: 2138, column: 32, scope: !4759)
!4881 = !DILocation(line: 2138, column: 55, scope: !4759)
!4882 = !DILocation(line: 2139, column: 29, scope: !4759)
!4883 = !DILocation(line: 2139, column: 62, scope: !4759)
!4884 = !DILocation(line: 2139, column: 33, scope: !4759)
!4885 = !DILocation(line: 2140, column: 25, scope: !4759)
!4886 = !DILocation(line: 2140, column: 41, scope: !4759)
!4887 = !DILocation(line: 2140, column: 28, scope: !4759)
!4888 = !DILocation(line: 2140, column: 47, scope: !4759)
!4889 = !DILocation(line: 2141, column: 25, scope: !4759)
!4890 = !DILocation(line: 2141, column: 41, scope: !4759)
!4891 = !DILocation(line: 2141, column: 28, scope: !4759)
!4892 = !DILocation(line: 2141, column: 47, scope: !4759)
!4893 = !DILocation(line: 0, scope: !4759)
!4894 = !DILocation(line: 2134, column: 20, scope: !4759)
!4895 = !DILocation(line: 2134, column: 18, scope: !4759)
!4896 = !DILocation(line: 2143, column: 7, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2143, column: 7)
!4898 = !DILocation(line: 2143, column: 7, scope: !4759)
!4899 = !DILocation(line: 2145, column: 24, scope: !4900)
!4900 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 2145, column: 11)
!4901 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 2144, column: 5)
!4902 = !DILocation(line: 2145, column: 11, scope: !4900)
!4903 = !DILocation(line: 2145, column: 30, scope: !4900)
!4904 = !DILocation(line: 2145, column: 11, scope: !4901)
!4905 = !DILocalVariable(name: "callee", scope: !4906, file: !3, line: 2150, type: !1661)
!4906 = distinct !DILexicalBlock(scope: !4900, file: !3, line: 2146, column: 2)
!4907 = !DILocation(line: 2150, column: 9, scope: !4906)
!4908 = !DILocation(line: 2150, column: 38, scope: !4906)
!4909 = !DILocation(line: 2150, column: 18, scope: !4906)
!4910 = !DILocation(line: 2151, column: 8, scope: !4911)
!4911 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 2151, column: 8)
!4912 = !DILocation(line: 2152, column: 8, scope: !4911)
!4913 = !DILocation(line: 2152, column: 11, scope: !4911)
!4914 = !DILocation(line: 2152, column: 40, scope: !4911)
!4915 = !DILocation(line: 2153, column: 8, scope: !4911)
!4916 = !DILocation(line: 2153, column: 11, scope: !4911)
!4917 = !DILocation(line: 2153, column: 39, scope: !4911)
!4918 = !DILocation(line: 2151, column: 8, scope: !4906)
!4919 = !DILocation(line: 2155, column: 45, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 2154, column: 6)
!4921 = !DILocation(line: 2155, column: 8, scope: !4920)
!4922 = !DILocation(line: 2156, column: 15, scope: !4920)
!4923 = !DILocation(line: 2156, column: 13, scope: !4920)
!4924 = !DILocation(line: 2157, column: 6, scope: !4920)
!4925 = !DILocation(line: 2158, column: 2, scope: !4906)
!4926 = !DILocation(line: 2160, column: 32, scope: !4901)
!4927 = !DILocation(line: 2160, column: 7, scope: !4901)
!4928 = !DILocation(line: 2161, column: 7, scope: !4901)
!4929 = !DILocation(line: 2162, column: 14, scope: !4901)
!4930 = !DILocation(line: 2162, column: 12, scope: !4901)
!4931 = !DILocation(line: 2163, column: 5, scope: !4901)
!4932 = !DILocation(line: 2166, column: 25, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2166, column: 7)
!4934 = !DILocation(line: 2166, column: 7, scope: !4933)
!4935 = !DILocation(line: 2166, column: 7, scope: !4759)
!4936 = !DILocation(line: 2167, column: 36, scope: !4933)
!4937 = !DILocation(line: 2167, column: 42, scope: !4933)
!4938 = !DILocation(line: 2167, column: 5, scope: !4933)
!4939 = !DILocation(line: 2194, column: 26, scope: !4940)
!4940 = distinct !DILexicalBlock(scope: !4759, file: !3, line: 2194, column: 7)
!4941 = !DILocation(line: 2194, column: 7, scope: !4940)
!4942 = !DILocation(line: 2194, column: 32, scope: !4940)
!4943 = !DILocation(line: 2194, column: 35, scope: !4940)
!4944 = !DILocation(line: 2194, column: 7, scope: !4759)
!4945 = !DILocalVariable(name: "val", scope: !4946, file: !3, line: 2196, type: !1661)
!4946 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 2195, column: 5)
!4947 = !DILocation(line: 2196, column: 12, scope: !4946)
!4948 = !DILocation(line: 2198, column: 32, scope: !4946)
!4949 = !DILocation(line: 2198, column: 7, scope: !4946)
!4950 = !DILocation(line: 2200, column: 24, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 2200, column: 11)
!4952 = !DILocation(line: 2200, column: 11, scope: !4951)
!4953 = !DILocation(line: 2200, column: 30, scope: !4951)
!4954 = !DILocation(line: 2200, column: 11, scope: !4946)
!4955 = !DILocation(line: 2201, column: 49, scope: !4951)
!4956 = !DILocation(line: 2201, column: 32, scope: !4951)
!4957 = !DILocation(line: 2202, column: 25, scope: !4951)
!4958 = !DILocation(line: 2202, column: 7, scope: !4951)
!4959 = !DILocation(line: 2202, column: 32, scope: !4951)
!4960 = !DILocation(line: 2203, column: 45, scope: !4951)
!4961 = !DILocation(line: 2203, column: 28, scope: !4951)
!4962 = !DILocation(line: 2203, column: 70, scope: !4951)
!4963 = !DILocation(line: 2203, column: 53, scope: !4951)
!4964 = !DILocation(line: 2201, column: 15, scope: !4951)
!4965 = !DILocation(line: 2201, column: 13, scope: !4951)
!4966 = !DILocation(line: 2201, column: 9, scope: !4951)
!4967 = !DILocation(line: 2204, column: 29, scope: !4968)
!4968 = distinct !DILexicalBlock(scope: !4951, file: !3, line: 2204, column: 16)
!4969 = !DILocation(line: 2204, column: 16, scope: !4968)
!4970 = !DILocation(line: 2204, column: 35, scope: !4968)
!4971 = !DILocation(line: 2204, column: 16, scope: !4951)
!4972 = !DILocation(line: 2205, column: 29, scope: !4968)
!4973 = !DILocation(line: 2205, column: 8, scope: !4968)
!4974 = !DILocation(line: 2205, column: 6, scope: !4968)
!4975 = !DILocation(line: 2205, column: 2, scope: !4968)
!4976 = !DILocation(line: 2207, column: 11, scope: !4977)
!4977 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 2207, column: 11)
!4978 = !DILocation(line: 2207, column: 15, scope: !4977)
!4979 = !DILocation(line: 2207, column: 18, scope: !4977)
!4980 = !DILocation(line: 2207, column: 34, scope: !4977)
!4981 = !DILocation(line: 2207, column: 49, scope: !4977)
!4982 = !DILocation(line: 2207, column: 69, scope: !4977)
!4983 = !DILocation(line: 2207, column: 73, scope: !4977)
!4984 = !DILocation(line: 2207, column: 52, scope: !4977)
!4985 = !DILocation(line: 2207, column: 11, scope: !4946)
!4986 = !DILocation(line: 2208, column: 14, scope: !4977)
!4987 = !DILocation(line: 2208, column: 2, scope: !4977)
!4988 = !DILocation(line: 2212, column: 43, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4946, file: !3, line: 2212, column: 11)
!4990 = !DILocation(line: 2212, column: 53, scope: !4989)
!4991 = !DILocation(line: 2212, column: 11, scope: !4989)
!4992 = !DILocation(line: 2212, column: 11, scope: !4946)
!4993 = !DILocation(line: 2214, column: 20, scope: !4994)
!4994 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 2213, column: 2)
!4995 = !DILocation(line: 2214, column: 37, scope: !4994)
!4996 = !DILocation(line: 2214, column: 41, scope: !4994)
!4997 = !DILocation(line: 2214, column: 4, scope: !4994)
!4998 = !DILocation(line: 2215, column: 8, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4994, file: !3, line: 2215, column: 8)
!5000 = !DILocation(line: 2215, column: 18, scope: !4999)
!5001 = !DILocation(line: 2215, column: 22, scope: !4999)
!5002 = !DILocation(line: 2215, column: 33, scope: !4999)
!5003 = !DILocation(line: 2215, column: 8, scope: !4994)
!5004 = !DILocation(line: 2216, column: 15, scope: !4999)
!5005 = !DILocation(line: 2216, column: 6, scope: !4999)
!5006 = !DILocation(line: 2217, column: 2, scope: !4994)
!5007 = !DILocation(line: 2218, column: 5, scope: !4946)
!5008 = !DILocation(line: 2219, column: 1, scope: !4759)
!5009 = distinct !DISubprogram(name: "record_edge_info", scope: !3, file: !3, line: 1473, type: !4595, scopeLine: 1474, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5010 = !DILocalVariable(name: "bb", arg: 1, scope: !5009, file: !3, line: 1473, type: !2412)
!5011 = !DILocation(line: 1473, column: 31, scope: !5009)
!5012 = !DILocalVariable(name: "gsi", scope: !5009, file: !3, line: 1475, type: !3175)
!5013 = !DILocation(line: 1475, column: 24, scope: !5009)
!5014 = !DILocation(line: 1475, column: 43, scope: !5009)
!5015 = !DILocation(line: 1475, column: 30, scope: !5009)
!5016 = !DILocalVariable(name: "edge_info", scope: !5009, file: !3, line: 1476, type: !3036)
!5017 = !DILocation(line: 1476, column: 21, scope: !5009)
!5018 = !DILocation(line: 1478, column: 9, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5009, file: !3, line: 1478, column: 7)
!5020 = !DILocation(line: 1478, column: 7, scope: !5009)
!5021 = !DILocalVariable(name: "stmt", scope: !5022, file: !3, line: 1480, type: !1926)
!5022 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 1479, column: 5)
!5023 = !DILocation(line: 1480, column: 14, scope: !5022)
!5024 = !DILocation(line: 1480, column: 21, scope: !5022)
!5025 = !DILocalVariable(name: "loc", scope: !5022, file: !3, line: 1481, type: !1784)
!5026 = !DILocation(line: 1481, column: 18, scope: !5022)
!5027 = !DILocation(line: 1481, column: 41, scope: !5022)
!5028 = !DILocation(line: 1481, column: 24, scope: !5022)
!5029 = !DILocation(line: 1483, column: 24, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5022, file: !3, line: 1483, column: 11)
!5031 = !DILocation(line: 1483, column: 11, scope: !5030)
!5032 = !DILocation(line: 1483, column: 30, scope: !5030)
!5033 = !DILocation(line: 1483, column: 11, scope: !5022)
!5034 = !DILocalVariable(name: "index", scope: !5035, file: !3, line: 1485, type: !1661)
!5035 = distinct !DILexicalBlock(scope: !5030, file: !3, line: 1484, column: 2)
!5036 = !DILocation(line: 1485, column: 9, scope: !5035)
!5037 = !DILocation(line: 1485, column: 38, scope: !5035)
!5038 = !DILocation(line: 1485, column: 17, scope: !5035)
!5039 = !DILocation(line: 1487, column: 8, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 1487, column: 8)
!5041 = !DILocation(line: 1487, column: 26, scope: !5040)
!5042 = !DILocation(line: 1487, column: 8, scope: !5035)
!5043 = !DILocalVariable(name: "i", scope: !5044, file: !3, line: 1489, type: !1643)
!5044 = distinct !DILexicalBlock(scope: !5040, file: !3, line: 1488, column: 6)
!5045 = !DILocation(line: 1489, column: 12, scope: !5044)
!5046 = !DILocalVariable(name: "n_labels", scope: !5044, file: !3, line: 1490, type: !1643)
!5047 = !DILocation(line: 1490, column: 19, scope: !5044)
!5048 = !DILocation(line: 1490, column: 56, scope: !5044)
!5049 = !DILocation(line: 1490, column: 30, scope: !5044)
!5050 = !DILocalVariable(name: "info", scope: !5044, file: !3, line: 1491, type: !1960)
!5051 = !DILocation(line: 1491, column: 14, scope: !5044)
!5052 = !DILocation(line: 1491, column: 21, scope: !5044)
!5053 = !DILocalVariable(name: "e", scope: !5044, file: !3, line: 1492, type: !1906)
!5054 = !DILocation(line: 1492, column: 13, scope: !5044)
!5055 = !DILocalVariable(name: "ei", scope: !5044, file: !3, line: 1493, type: !4011)
!5056 = !DILocation(line: 1493, column: 22, scope: !5044)
!5057 = !DILocation(line: 1495, column: 15, scope: !5058)
!5058 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 1495, column: 8)
!5059 = !DILocation(line: 1495, column: 13, scope: !5058)
!5060 = !DILocation(line: 1495, column: 20, scope: !5061)
!5061 = distinct !DILexicalBlock(scope: !5058, file: !3, line: 1495, column: 8)
!5062 = !DILocation(line: 1495, column: 24, scope: !5061)
!5063 = !DILocation(line: 1495, column: 22, scope: !5061)
!5064 = !DILocation(line: 1495, column: 8, scope: !5058)
!5065 = !DILocalVariable(name: "label", scope: !5066, file: !3, line: 1497, type: !1661)
!5066 = distinct !DILexicalBlock(scope: !5061, file: !3, line: 1496, column: 3)
!5067 = !DILocation(line: 1497, column: 10, scope: !5066)
!5068 = !DILocation(line: 1497, column: 39, scope: !5066)
!5069 = !DILocation(line: 1497, column: 45, scope: !5066)
!5070 = !DILocation(line: 1497, column: 18, scope: !5066)
!5071 = !DILocalVariable(name: "target_bb", scope: !5066, file: !3, line: 1498, type: !2412)
!5072 = !DILocation(line: 1498, column: 17, scope: !5066)
!5073 = !DILocation(line: 1498, column: 29, scope: !5066)
!5074 = !DILocation(line: 1499, column: 9, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5066, file: !3, line: 1499, column: 9)
!5076 = !DILocation(line: 1500, column: 9, scope: !5075)
!5077 = !DILocation(line: 1500, column: 13, scope: !5075)
!5078 = !DILocation(line: 1501, column: 9, scope: !5075)
!5079 = !DILocation(line: 1501, column: 12, scope: !5075)
!5080 = !DILocation(line: 1501, column: 17, scope: !5075)
!5081 = !DILocation(line: 1501, column: 28, scope: !5075)
!5082 = !DILocation(line: 1499, column: 9, scope: !5066)
!5083 = !DILocation(line: 1502, column: 32, scope: !5075)
!5084 = !DILocation(line: 1502, column: 7, scope: !5075)
!5085 = !DILocation(line: 1502, column: 12, scope: !5075)
!5086 = !DILocation(line: 1502, column: 23, scope: !5075)
!5087 = !DILocation(line: 1502, column: 30, scope: !5075)
!5088 = !DILocation(line: 1504, column: 32, scope: !5075)
!5089 = !DILocation(line: 1504, column: 7, scope: !5075)
!5090 = !DILocation(line: 1504, column: 12, scope: !5075)
!5091 = !DILocation(line: 1504, column: 23, scope: !5075)
!5092 = !DILocation(line: 1504, column: 30, scope: !5075)
!5093 = !DILocation(line: 1505, column: 3, scope: !5066)
!5094 = !DILocation(line: 1495, column: 35, scope: !5061)
!5095 = !DILocation(line: 1495, column: 8, scope: !5061)
!5096 = distinct !{!5096, !5064, !5097}
!5097 = !DILocation(line: 1505, column: 3, scope: !5058)
!5098 = !DILocation(line: 1507, column: 8, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 1507, column: 8)
!5100 = !DILocation(line: 1507, column: 8, scope: !5101)
!5101 = distinct !DILexicalBlock(scope: !5099, file: !3, line: 1507, column: 8)
!5102 = !DILocalVariable(name: "target_bb", scope: !5103, file: !3, line: 1509, type: !2412)
!5103 = distinct !DILexicalBlock(scope: !5101, file: !3, line: 1508, column: 3)
!5104 = !DILocation(line: 1509, column: 17, scope: !5103)
!5105 = !DILocation(line: 1509, column: 29, scope: !5103)
!5106 = !DILocation(line: 1509, column: 32, scope: !5103)
!5107 = !DILocalVariable(name: "label", scope: !5103, file: !3, line: 1510, type: !1661)
!5108 = !DILocation(line: 1510, column: 10, scope: !5103)
!5109 = !DILocation(line: 1510, column: 18, scope: !5103)
!5110 = !DILocation(line: 1510, column: 23, scope: !5103)
!5111 = !DILocation(line: 1510, column: 34, scope: !5103)
!5112 = !DILocation(line: 1512, column: 9, scope: !5113)
!5113 = distinct !DILexicalBlock(scope: !5103, file: !3, line: 1512, column: 9)
!5114 = !DILocation(line: 1512, column: 15, scope: !5113)
!5115 = !DILocation(line: 1512, column: 23, scope: !5113)
!5116 = !DILocation(line: 1512, column: 26, scope: !5113)
!5117 = !DILocation(line: 1512, column: 35, scope: !5113)
!5118 = !DILocation(line: 1512, column: 32, scope: !5113)
!5119 = !DILocation(line: 1512, column: 9, scope: !5103)
!5120 = !DILocalVariable(name: "x", scope: !5121, file: !3, line: 1514, type: !1661)
!5121 = distinct !DILexicalBlock(scope: !5113, file: !3, line: 1513, column: 7)
!5122 = !DILocation(line: 1514, column: 14, scope: !5121)
!5123 = !DILocation(line: 1514, column: 36, scope: !5121)
!5124 = !DILocation(line: 1514, column: 41, scope: !5121)
!5125 = !DILocation(line: 1515, column: 8, scope: !5121)
!5126 = !DILocation(line: 1514, column: 18, scope: !5121)
!5127 = !DILocation(line: 1516, column: 41, scope: !5121)
!5128 = !DILocation(line: 1516, column: 21, scope: !5121)
!5129 = !DILocation(line: 1516, column: 19, scope: !5121)
!5130 = !DILocation(line: 1517, column: 26, scope: !5121)
!5131 = !DILocation(line: 1517, column: 9, scope: !5121)
!5132 = !DILocation(line: 1517, column: 20, scope: !5121)
!5133 = !DILocation(line: 1517, column: 24, scope: !5121)
!5134 = !DILocation(line: 1518, column: 26, scope: !5121)
!5135 = !DILocation(line: 1518, column: 9, scope: !5121)
!5136 = !DILocation(line: 1518, column: 20, scope: !5121)
!5137 = !DILocation(line: 1518, column: 24, scope: !5121)
!5138 = !DILocation(line: 1519, column: 7, scope: !5121)
!5139 = !DILocation(line: 1520, column: 3, scope: !5103)
!5140 = distinct !{!5140, !5098, !5141}
!5141 = !DILocation(line: 1520, column: 3, scope: !5099)
!5142 = !DILocation(line: 1521, column: 14, scope: !5044)
!5143 = !DILocation(line: 1521, column: 8, scope: !5044)
!5144 = !DILocation(line: 1522, column: 6, scope: !5044)
!5145 = !DILocation(line: 1523, column: 2, scope: !5035)
!5146 = !DILocation(line: 1526, column: 24, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5022, file: !3, line: 1526, column: 11)
!5148 = !DILocation(line: 1526, column: 11, scope: !5147)
!5149 = !DILocation(line: 1526, column: 30, scope: !5147)
!5150 = !DILocation(line: 1526, column: 11, scope: !5022)
!5151 = !DILocalVariable(name: "true_edge", scope: !5152, file: !3, line: 1528, type: !1906)
!5152 = distinct !DILexicalBlock(scope: !5147, file: !3, line: 1527, column: 2)
!5153 = !DILocation(line: 1528, column: 9, scope: !5152)
!5154 = !DILocalVariable(name: "false_edge", scope: !5152, file: !3, line: 1529, type: !1906)
!5155 = !DILocation(line: 1529, column: 9, scope: !5152)
!5156 = !DILocalVariable(name: "op0", scope: !5152, file: !3, line: 1531, type: !1661)
!5157 = !DILocation(line: 1531, column: 16, scope: !5152)
!5158 = !DILocation(line: 1531, column: 39, scope: !5152)
!5159 = !DILocation(line: 1531, column: 22, scope: !5152)
!5160 = !DILocalVariable(name: "op1", scope: !5152, file: !3, line: 1532, type: !1661)
!5161 = !DILocation(line: 1532, column: 16, scope: !5152)
!5162 = !DILocation(line: 1532, column: 39, scope: !5152)
!5163 = !DILocation(line: 1532, column: 22, scope: !5152)
!5164 = !DILocalVariable(name: "code", scope: !5152, file: !3, line: 1533, type: !317)
!5165 = !DILocation(line: 1533, column: 26, scope: !5152)
!5166 = !DILocation(line: 1533, column: 51, scope: !5152)
!5167 = !DILocation(line: 1533, column: 33, scope: !5152)
!5168 = !DILocation(line: 1535, column: 41, scope: !5152)
!5169 = !DILocation(line: 1535, column: 4, scope: !5152)
!5170 = !DILocation(line: 1540, column: 16, scope: !5171)
!5171 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 1540, column: 15)
!5172 = !DILocation(line: 1540, column: 21, scope: !5171)
!5173 = !DILocation(line: 1540, column: 32, scope: !5171)
!5174 = !DILocation(line: 1540, column: 35, scope: !5171)
!5175 = !DILocation(line: 1540, column: 40, scope: !5171)
!5176 = !DILocation(line: 1541, column: 15, scope: !5171)
!5177 = !DILocation(line: 1541, column: 18, scope: !5171)
!5178 = !DILocation(line: 1541, column: 34, scope: !5171)
!5179 = !DILocation(line: 1542, column: 15, scope: !5171)
!5180 = !DILocation(line: 1542, column: 18, scope: !5171)
!5181 = !DILocation(line: 1542, column: 46, scope: !5171)
!5182 = !DILocation(line: 1543, column: 15, scope: !5171)
!5183 = !DILocation(line: 1543, column: 43, scope: !5171)
!5184 = !DILocation(line: 1543, column: 18, scope: !5171)
!5185 = !DILocation(line: 1540, column: 15, scope: !5152)
!5186 = !DILocation(line: 1545, column: 19, scope: !5187)
!5187 = distinct !DILexicalBlock(scope: !5188, file: !3, line: 1545, column: 19)
!5188 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 1544, column: 13)
!5189 = !DILocation(line: 1545, column: 24, scope: !5187)
!5190 = !DILocation(line: 1545, column: 19, scope: !5188)
!5191 = !DILocation(line: 1547, column: 51, scope: !5192)
!5192 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1546, column: 17)
!5193 = !DILocation(line: 1547, column: 31, scope: !5192)
!5194 = !DILocation(line: 1547, column: 29, scope: !5192)
!5195 = !DILocation(line: 1548, column: 36, scope: !5192)
!5196 = !DILocation(line: 1548, column: 19, scope: !5192)
!5197 = !DILocation(line: 1548, column: 30, scope: !5192)
!5198 = !DILocation(line: 1548, column: 34, scope: !5192)
!5199 = !DILocation(line: 1549, column: 52, scope: !5192)
!5200 = !DILocation(line: 1549, column: 37, scope: !5192)
!5201 = !DILocation(line: 1550, column: 39, scope: !5192)
!5202 = !DILocation(line: 1551, column: 39, scope: !5192)
!5203 = !DILocation(line: 1549, column: 19, scope: !5192)
!5204 = !DILocation(line: 1549, column: 30, scope: !5192)
!5205 = !DILocation(line: 1549, column: 34, scope: !5192)
!5206 = !DILocation(line: 1553, column: 51, scope: !5192)
!5207 = !DILocation(line: 1553, column: 31, scope: !5192)
!5208 = !DILocation(line: 1553, column: 29, scope: !5192)
!5209 = !DILocation(line: 1554, column: 36, scope: !5192)
!5210 = !DILocation(line: 1554, column: 19, scope: !5192)
!5211 = !DILocation(line: 1554, column: 30, scope: !5192)
!5212 = !DILocation(line: 1554, column: 34, scope: !5192)
!5213 = !DILocation(line: 1555, column: 52, scope: !5192)
!5214 = !DILocation(line: 1555, column: 37, scope: !5192)
!5215 = !DILocation(line: 1556, column: 39, scope: !5192)
!5216 = !DILocation(line: 1557, column: 39, scope: !5192)
!5217 = !DILocation(line: 1555, column: 19, scope: !5192)
!5218 = !DILocation(line: 1555, column: 30, scope: !5192)
!5219 = !DILocation(line: 1555, column: 34, scope: !5192)
!5220 = !DILocation(line: 1558, column: 17, scope: !5192)
!5221 = !DILocation(line: 1561, column: 51, scope: !5222)
!5222 = distinct !DILexicalBlock(scope: !5187, file: !3, line: 1560, column: 17)
!5223 = !DILocation(line: 1561, column: 31, scope: !5222)
!5224 = !DILocation(line: 1561, column: 29, scope: !5222)
!5225 = !DILocation(line: 1562, column: 36, scope: !5222)
!5226 = !DILocation(line: 1562, column: 19, scope: !5222)
!5227 = !DILocation(line: 1562, column: 30, scope: !5222)
!5228 = !DILocation(line: 1562, column: 34, scope: !5222)
!5229 = !DILocation(line: 1563, column: 52, scope: !5222)
!5230 = !DILocation(line: 1563, column: 37, scope: !5222)
!5231 = !DILocation(line: 1564, column: 39, scope: !5222)
!5232 = !DILocation(line: 1565, column: 39, scope: !5222)
!5233 = !DILocation(line: 1563, column: 19, scope: !5222)
!5234 = !DILocation(line: 1563, column: 30, scope: !5222)
!5235 = !DILocation(line: 1563, column: 34, scope: !5222)
!5236 = !DILocation(line: 1567, column: 51, scope: !5222)
!5237 = !DILocation(line: 1567, column: 31, scope: !5222)
!5238 = !DILocation(line: 1567, column: 29, scope: !5222)
!5239 = !DILocation(line: 1568, column: 36, scope: !5222)
!5240 = !DILocation(line: 1568, column: 19, scope: !5222)
!5241 = !DILocation(line: 1568, column: 30, scope: !5222)
!5242 = !DILocation(line: 1568, column: 34, scope: !5222)
!5243 = !DILocation(line: 1569, column: 52, scope: !5222)
!5244 = !DILocation(line: 1569, column: 37, scope: !5222)
!5245 = !DILocation(line: 1570, column: 39, scope: !5222)
!5246 = !DILocation(line: 1571, column: 39, scope: !5222)
!5247 = !DILocation(line: 1569, column: 19, scope: !5222)
!5248 = !DILocation(line: 1569, column: 30, scope: !5222)
!5249 = !DILocation(line: 1569, column: 34, scope: !5222)
!5250 = !DILocation(line: 1573, column: 13, scope: !5188)
!5251 = !DILocation(line: 1574, column: 45, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5171, file: !3, line: 1574, column: 20)
!5253 = !DILocation(line: 1574, column: 20, scope: !5252)
!5254 = !DILocation(line: 1575, column: 20, scope: !5252)
!5255 = !DILocation(line: 1575, column: 24, scope: !5252)
!5256 = !DILocation(line: 1575, column: 40, scope: !5252)
!5257 = !DILocation(line: 1576, column: 24, scope: !5252)
!5258 = !DILocation(line: 1576, column: 52, scope: !5252)
!5259 = !DILocation(line: 1576, column: 27, scope: !5252)
!5260 = !DILocation(line: 1574, column: 20, scope: !5171)
!5261 = !DILocalVariable(name: "cond", scope: !5262, file: !3, line: 1578, type: !1661)
!5262 = distinct !DILexicalBlock(scope: !5252, file: !3, line: 1577, column: 13)
!5263 = !DILocation(line: 1578, column: 20, scope: !5262)
!5264 = !DILocation(line: 1578, column: 27, scope: !5262)
!5265 = !DILocalVariable(name: "inverted", scope: !5262, file: !3, line: 1579, type: !1661)
!5266 = !DILocation(line: 1579, column: 20, scope: !5262)
!5267 = !DILocation(line: 1579, column: 54, scope: !5262)
!5268 = !DILocation(line: 1579, column: 59, scope: !5262)
!5269 = !DILocation(line: 1579, column: 31, scope: !5262)
!5270 = !DILocalVariable(name: "edge_info", scope: !5262, file: !3, line: 1580, type: !3036)
!5271 = !DILocation(line: 1580, column: 33, scope: !5262)
!5272 = !DILocation(line: 1582, column: 47, scope: !5262)
!5273 = !DILocation(line: 1582, column: 27, scope: !5262)
!5274 = !DILocation(line: 1582, column: 25, scope: !5262)
!5275 = !DILocation(line: 1583, column: 34, scope: !5262)
!5276 = !DILocation(line: 1583, column: 45, scope: !5262)
!5277 = !DILocation(line: 1583, column: 51, scope: !5262)
!5278 = !DILocation(line: 1583, column: 15, scope: !5262)
!5279 = !DILocation(line: 1585, column: 19, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1585, column: 19)
!5281 = !DILocation(line: 1585, column: 24, scope: !5280)
!5282 = !DILocation(line: 1585, column: 19, scope: !5262)
!5283 = !DILocation(line: 1587, column: 36, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1586, column: 17)
!5285 = !DILocation(line: 1587, column: 19, scope: !5284)
!5286 = !DILocation(line: 1587, column: 30, scope: !5284)
!5287 = !DILocation(line: 1587, column: 34, scope: !5284)
!5288 = !DILocation(line: 1588, column: 36, scope: !5284)
!5289 = !DILocation(line: 1588, column: 19, scope: !5284)
!5290 = !DILocation(line: 1588, column: 30, scope: !5284)
!5291 = !DILocation(line: 1588, column: 34, scope: !5284)
!5292 = !DILocation(line: 1589, column: 17, scope: !5284)
!5293 = !DILocation(line: 1591, column: 47, scope: !5262)
!5294 = !DILocation(line: 1591, column: 27, scope: !5262)
!5295 = !DILocation(line: 1591, column: 25, scope: !5262)
!5296 = !DILocation(line: 1592, column: 34, scope: !5262)
!5297 = !DILocation(line: 1592, column: 45, scope: !5262)
!5298 = !DILocation(line: 1592, column: 55, scope: !5262)
!5299 = !DILocation(line: 1592, column: 15, scope: !5262)
!5300 = !DILocation(line: 1594, column: 19, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1594, column: 19)
!5302 = !DILocation(line: 1594, column: 24, scope: !5301)
!5303 = !DILocation(line: 1594, column: 19, scope: !5262)
!5304 = !DILocation(line: 1596, column: 36, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5301, file: !3, line: 1595, column: 17)
!5306 = !DILocation(line: 1596, column: 19, scope: !5305)
!5307 = !DILocation(line: 1596, column: 30, scope: !5305)
!5308 = !DILocation(line: 1596, column: 34, scope: !5305)
!5309 = !DILocation(line: 1597, column: 36, scope: !5305)
!5310 = !DILocation(line: 1597, column: 19, scope: !5305)
!5311 = !DILocation(line: 1597, column: 30, scope: !5305)
!5312 = !DILocation(line: 1597, column: 34, scope: !5305)
!5313 = !DILocation(line: 1598, column: 17, scope: !5305)
!5314 = !DILocation(line: 1599, column: 13, scope: !5262)
!5315 = !DILocation(line: 1601, column: 20, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5252, file: !3, line: 1601, column: 20)
!5317 = !DILocation(line: 1601, column: 36, scope: !5316)
!5318 = !DILocation(line: 1602, column: 20, scope: !5316)
!5319 = !DILocation(line: 1602, column: 49, scope: !5316)
!5320 = !DILocation(line: 1602, column: 24, scope: !5316)
!5321 = !DILocation(line: 1603, column: 24, scope: !5316)
!5322 = !DILocation(line: 1603, column: 27, scope: !5316)
!5323 = !DILocation(line: 1603, column: 43, scope: !5316)
!5324 = !DILocation(line: 1601, column: 20, scope: !5252)
!5325 = !DILocalVariable(name: "cond", scope: !5326, file: !3, line: 1605, type: !1661)
!5326 = distinct !DILexicalBlock(scope: !5316, file: !3, line: 1604, column: 13)
!5327 = !DILocation(line: 1605, column: 20, scope: !5326)
!5328 = !DILocation(line: 1605, column: 27, scope: !5326)
!5329 = !DILocalVariable(name: "inverted", scope: !5326, file: !3, line: 1606, type: !1661)
!5330 = !DILocation(line: 1606, column: 20, scope: !5326)
!5331 = !DILocation(line: 1606, column: 54, scope: !5326)
!5332 = !DILocation(line: 1606, column: 59, scope: !5326)
!5333 = !DILocation(line: 1606, column: 31, scope: !5326)
!5334 = !DILocalVariable(name: "edge_info", scope: !5326, file: !3, line: 1607, type: !3036)
!5335 = !DILocation(line: 1607, column: 33, scope: !5326)
!5336 = !DILocation(line: 1609, column: 47, scope: !5326)
!5337 = !DILocation(line: 1609, column: 27, scope: !5326)
!5338 = !DILocation(line: 1609, column: 25, scope: !5326)
!5339 = !DILocation(line: 1610, column: 34, scope: !5326)
!5340 = !DILocation(line: 1610, column: 45, scope: !5326)
!5341 = !DILocation(line: 1610, column: 51, scope: !5326)
!5342 = !DILocation(line: 1610, column: 15, scope: !5326)
!5343 = !DILocation(line: 1612, column: 19, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 1612, column: 19)
!5345 = !DILocation(line: 1612, column: 24, scope: !5344)
!5346 = !DILocation(line: 1612, column: 19, scope: !5326)
!5347 = !DILocation(line: 1614, column: 36, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 1613, column: 17)
!5349 = !DILocation(line: 1614, column: 19, scope: !5348)
!5350 = !DILocation(line: 1614, column: 30, scope: !5348)
!5351 = !DILocation(line: 1614, column: 34, scope: !5348)
!5352 = !DILocation(line: 1615, column: 36, scope: !5348)
!5353 = !DILocation(line: 1615, column: 19, scope: !5348)
!5354 = !DILocation(line: 1615, column: 30, scope: !5348)
!5355 = !DILocation(line: 1615, column: 34, scope: !5348)
!5356 = !DILocation(line: 1616, column: 17, scope: !5348)
!5357 = !DILocation(line: 1618, column: 47, scope: !5326)
!5358 = !DILocation(line: 1618, column: 27, scope: !5326)
!5359 = !DILocation(line: 1618, column: 25, scope: !5326)
!5360 = !DILocation(line: 1619, column: 34, scope: !5326)
!5361 = !DILocation(line: 1619, column: 45, scope: !5326)
!5362 = !DILocation(line: 1619, column: 55, scope: !5326)
!5363 = !DILocation(line: 1619, column: 15, scope: !5326)
!5364 = !DILocation(line: 1621, column: 19, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5326, file: !3, line: 1621, column: 19)
!5366 = !DILocation(line: 1621, column: 36, scope: !5365)
!5367 = !DILocation(line: 1621, column: 19, scope: !5326)
!5368 = !DILocation(line: 1623, column: 36, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5365, file: !3, line: 1622, column: 17)
!5370 = !DILocation(line: 1623, column: 19, scope: !5369)
!5371 = !DILocation(line: 1623, column: 30, scope: !5369)
!5372 = !DILocation(line: 1623, column: 34, scope: !5369)
!5373 = !DILocation(line: 1624, column: 36, scope: !5369)
!5374 = !DILocation(line: 1624, column: 19, scope: !5369)
!5375 = !DILocation(line: 1624, column: 30, scope: !5369)
!5376 = !DILocation(line: 1624, column: 34, scope: !5369)
!5377 = !DILocation(line: 1625, column: 17, scope: !5369)
!5378 = !DILocation(line: 1626, column: 13, scope: !5326)
!5379 = !DILocation(line: 1627, column: 9, scope: !5152)
!5380 = !DILocation(line: 1630, column: 5, scope: !5022)
!5381 = !DILocation(line: 1631, column: 1, scope: !5009)
!5382 = distinct !DISubprogram(name: "cprop_into_successor_phis", scope: !3, file: !3, line: 1422, type: !4595, scopeLine: 1423, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5383 = !DILocalVariable(name: "bb", arg: 1, scope: !5382, file: !3, line: 1422, type: !2412)
!5384 = !DILocation(line: 1422, column: 40, scope: !5382)
!5385 = !DILocalVariable(name: "e", scope: !5382, file: !3, line: 1424, type: !1906)
!5386 = !DILocation(line: 1424, column: 8, scope: !5382)
!5387 = !DILocalVariable(name: "ei", scope: !5382, file: !3, line: 1425, type: !4011)
!5388 = !DILocation(line: 1425, column: 17, scope: !5382)
!5389 = !DILocation(line: 1427, column: 3, scope: !5390)
!5390 = distinct !DILexicalBlock(scope: !5382, file: !3, line: 1427, column: 3)
!5391 = !DILocation(line: 1427, column: 3, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5390, file: !3, line: 1427, column: 3)
!5393 = !DILocalVariable(name: "indx", scope: !5394, file: !3, line: 1429, type: !1643)
!5394 = distinct !DILexicalBlock(scope: !5392, file: !3, line: 1428, column: 5)
!5395 = !DILocation(line: 1429, column: 11, scope: !5394)
!5396 = !DILocalVariable(name: "gsi", scope: !5394, file: !3, line: 1430, type: !3175)
!5397 = !DILocation(line: 1430, column: 28, scope: !5394)
!5398 = !DILocation(line: 1434, column: 11, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5394, file: !3, line: 1434, column: 11)
!5400 = !DILocation(line: 1434, column: 14, scope: !5399)
!5401 = !DILocation(line: 1434, column: 20, scope: !5399)
!5402 = !DILocation(line: 1434, column: 11, scope: !5394)
!5403 = !DILocation(line: 1435, column: 2, scope: !5399)
!5404 = !DILocation(line: 1437, column: 29, scope: !5394)
!5405 = !DILocation(line: 1437, column: 32, scope: !5394)
!5406 = !DILocation(line: 1437, column: 13, scope: !5394)
!5407 = !DILocation(line: 1438, column: 11, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5394, file: !3, line: 1438, column: 11)
!5409 = !DILocation(line: 1438, column: 11, scope: !5394)
!5410 = !DILocation(line: 1439, column: 2, scope: !5408)
!5411 = !DILocation(line: 1441, column: 14, scope: !5394)
!5412 = !DILocation(line: 1441, column: 17, scope: !5394)
!5413 = !DILocation(line: 1441, column: 12, scope: !5394)
!5414 = !DILocation(line: 1442, column: 7, scope: !5394)
!5415 = !DILocation(line: 1442, column: 16, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1442, column: 7)
!5417 = distinct !DILexicalBlock(scope: !5394, file: !3, line: 1442, column: 7)
!5418 = !DILocation(line: 1442, column: 15, scope: !5416)
!5419 = !DILocation(line: 1442, column: 7, scope: !5417)
!5420 = !DILocalVariable(name: "new_val", scope: !5421, file: !3, line: 1444, type: !1661)
!5421 = distinct !DILexicalBlock(scope: !5416, file: !3, line: 1443, column: 2)
!5422 = !DILocation(line: 1444, column: 9, scope: !5421)
!5423 = !DILocalVariable(name: "orig_p", scope: !5421, file: !3, line: 1445, type: !3050)
!5424 = !DILocation(line: 1445, column: 18, scope: !5421)
!5425 = !DILocalVariable(name: "orig_val", scope: !5421, file: !3, line: 1446, type: !1661)
!5426 = !DILocation(line: 1446, column: 9, scope: !5421)
!5427 = !DILocalVariable(name: "phi", scope: !5421, file: !3, line: 1447, type: !1926)
!5428 = !DILocation(line: 1447, column: 18, scope: !5421)
!5429 = !DILocation(line: 1447, column: 24, scope: !5421)
!5430 = !DILocation(line: 1451, column: 41, scope: !5421)
!5431 = !DILocation(line: 1451, column: 46, scope: !5421)
!5432 = !DILocation(line: 1451, column: 13, scope: !5421)
!5433 = !DILocation(line: 1451, column: 11, scope: !5421)
!5434 = !DILocation(line: 1452, column: 33, scope: !5421)
!5435 = !DILocation(line: 1452, column: 15, scope: !5421)
!5436 = !DILocation(line: 1452, column: 13, scope: !5421)
!5437 = !DILocation(line: 1453, column: 8, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 1453, column: 8)
!5439 = !DILocation(line: 1453, column: 29, scope: !5438)
!5440 = !DILocation(line: 1453, column: 8, scope: !5421)
!5441 = !DILocation(line: 1454, column: 6, scope: !5438)
!5442 = !DILocation(line: 1458, column: 14, scope: !5421)
!5443 = !DILocation(line: 1458, column: 12, scope: !5421)
!5444 = !DILocation(line: 1459, column: 8, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 1459, column: 8)
!5446 = !DILocation(line: 1460, column: 8, scope: !5445)
!5447 = !DILocation(line: 1460, column: 11, scope: !5445)
!5448 = !DILocation(line: 1460, column: 22, scope: !5445)
!5449 = !DILocation(line: 1460, column: 19, scope: !5445)
!5450 = !DILocation(line: 1461, column: 8, scope: !5445)
!5451 = !DILocation(line: 1461, column: 12, scope: !5445)
!5452 = !DILocation(line: 1461, column: 32, scope: !5445)
!5453 = !DILocation(line: 1462, column: 5, scope: !5445)
!5454 = !DILocation(line: 1462, column: 33, scope: !5445)
!5455 = !DILocation(line: 1462, column: 8, scope: !5445)
!5456 = !DILocation(line: 1463, column: 8, scope: !5445)
!5457 = !DILocation(line: 1463, column: 31, scope: !5445)
!5458 = !DILocation(line: 1463, column: 41, scope: !5445)
!5459 = !DILocation(line: 1463, column: 11, scope: !5445)
!5460 = !DILocation(line: 1459, column: 8, scope: !5421)
!5461 = !DILocation(line: 1464, column: 23, scope: !5445)
!5462 = !DILocation(line: 1464, column: 31, scope: !5445)
!5463 = !DILocation(line: 1464, column: 6, scope: !5445)
!5464 = !DILocation(line: 1465, column: 2, scope: !5421)
!5465 = !DILocation(line: 1442, column: 33, scope: !5416)
!5466 = !DILocation(line: 1442, column: 7, scope: !5416)
!5467 = distinct !{!5467, !5419, !5468}
!5468 = !DILocation(line: 1465, column: 2, scope: !5417)
!5469 = !DILocation(line: 1466, column: 5, scope: !5394)
!5470 = distinct !{!5470, !5389, !5471}
!5471 = !DILocation(line: 1466, column: 5, scope: !5390)
!5472 = !DILocation(line: 1467, column: 1, scope: !5382)
!5473 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_heap_reserve", scope: !3, file: !3, line: 126, type: !5474, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5474 = !DISubroutineType(types: !5475)
!5475 = !{!1643, !4295, !1643}
!5476 = !DILocalVariable(name: "vec_", arg: 1, scope: !5473, file: !3, line: 126, type: !4295)
!5477 = !DILocation(line: 126, column: 1, scope: !5473)
!5478 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5473, file: !3, line: 126, type: !1643)
!5479 = !DILocalVariable(name: "extend", scope: !5473, file: !3, line: 126, type: !1643)
!5480 = !DILocation(line: 126, column: 1, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 126, column: 1)
!5482 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_base_quick_push", scope: !3, file: !3, line: 125, type: !5483, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5483 = !DISubroutineType(types: !5484)
!5484 = !{!4584, !5485, !3030}
!5485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3023, size: 64)
!5486 = !DILocalVariable(name: "vec_", arg: 1, scope: !5482, file: !3, line: 125, type: !5485)
!5487 = !DILocation(line: 125, column: 1, scope: !5482)
!5488 = !DILocalVariable(name: "obj_", arg: 2, scope: !5482, file: !3, line: 125, type: !3030)
!5489 = !DILocalVariable(name: "slot_", scope: !5482, file: !3, line: 125, type: !4584)
!5490 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_base_space", scope: !3, file: !3, line: 125, type: !5491, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5491 = !DISubroutineType(types: !5492)
!5492 = !{!1643, !5485, !1643}
!5493 = !DILocalVariable(name: "vec_", arg: 1, scope: !5490, file: !3, line: 125, type: !5485)
!5494 = !DILocation(line: 125, column: 1, scope: !5490)
!5495 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5490, file: !3, line: 125, type: !1643)
!5496 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !318, file: !318, line: 184, type: !5497, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5497 = !DISubroutineType(types: !5498)
!5498 = !{!1643, !4303, !1643}
!5499 = !DILocalVariable(name: "vec_", arg: 1, scope: !5496, file: !318, line: 184, type: !4303)
!5500 = !DILocation(line: 184, column: 1, scope: !5496)
!5501 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5496, file: !318, line: 184, type: !1643)
!5502 = !DILocalVariable(name: "extend", scope: !5496, file: !318, line: 184, type: !1643)
!5503 = !DILocation(line: 184, column: 1, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5496, file: !318, line: 184, column: 1)
!5505 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !318, file: !318, line: 182, type: !5506, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5506 = !DISubroutineType(types: !5507)
!5507 = !{!1960, !5508, !1661}
!5508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2509, size: 64)
!5509 = !DILocalVariable(name: "vec_", arg: 1, scope: !5505, file: !318, line: 182, type: !5508)
!5510 = !DILocation(line: 182, column: 1, scope: !5505)
!5511 = !DILocalVariable(name: "obj_", arg: 2, scope: !5505, file: !318, line: 182, type: !1661)
!5512 = !DILocalVariable(name: "slot_", scope: !5505, file: !318, line: 182, type: !1960)
!5513 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !318, file: !318, line: 182, type: !5514, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5514 = !DISubroutineType(types: !5515)
!5515 = !{!1643, !5508, !1643}
!5516 = !DILocalVariable(name: "vec_", arg: 1, scope: !5513, file: !318, line: 182, type: !5508)
!5517 = !DILocation(line: 182, column: 1, scope: !5513)
!5518 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5513, file: !318, line: 182, type: !1643)
!5519 = distinct !DISubprogram(name: "single_incoming_edge_ignoring_loop_edges", scope: !3, file: !3, line: 963, type: !5520, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5520 = !DISubroutineType(types: !5521)
!5521 = !{!1906, !2412}
!5522 = !DILocalVariable(name: "bb", arg: 1, scope: !5519, file: !3, line: 963, type: !2412)
!5523 = !DILocation(line: 963, column: 55, scope: !5519)
!5524 = !DILocalVariable(name: "retval", scope: !5519, file: !3, line: 965, type: !1906)
!5525 = !DILocation(line: 965, column: 8, scope: !5519)
!5526 = !DILocalVariable(name: "e", scope: !5519, file: !3, line: 966, type: !1906)
!5527 = !DILocation(line: 966, column: 8, scope: !5519)
!5528 = !DILocalVariable(name: "ei", scope: !5519, file: !3, line: 967, type: !4011)
!5529 = !DILocation(line: 967, column: 17, scope: !5519)
!5530 = !DILocation(line: 969, column: 3, scope: !5531)
!5531 = distinct !DILexicalBlock(scope: !5519, file: !3, line: 969, column: 3)
!5532 = !DILocation(line: 969, column: 3, scope: !5533)
!5533 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 969, column: 3)
!5534 = !DILocation(line: 973, column: 43, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 973, column: 11)
!5536 = distinct !DILexicalBlock(scope: !5533, file: !3, line: 970, column: 5)
!5537 = !DILocation(line: 973, column: 46, scope: !5535)
!5538 = !DILocation(line: 973, column: 51, scope: !5535)
!5539 = !DILocation(line: 973, column: 54, scope: !5535)
!5540 = !DILocation(line: 973, column: 11, scope: !5535)
!5541 = !DILocation(line: 973, column: 11, scope: !5536)
!5542 = !DILocation(line: 974, column: 2, scope: !5535)
!5543 = !DILocation(line: 978, column: 11, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 978, column: 11)
!5545 = !DILocation(line: 978, column: 11, scope: !5536)
!5546 = !DILocation(line: 979, column: 2, scope: !5544)
!5547 = !DILocation(line: 983, column: 16, scope: !5536)
!5548 = !DILocation(line: 983, column: 14, scope: !5536)
!5549 = !DILocation(line: 984, column: 5, scope: !5536)
!5550 = distinct !{!5550, !5530, !5551}
!5551 = !DILocation(line: 984, column: 5, scope: !5531)
!5552 = !DILocation(line: 986, column: 10, scope: !5519)
!5553 = !DILocation(line: 986, column: 3, scope: !5519)
!5554 = !DILocation(line: 987, column: 1, scope: !5519)
!5555 = distinct !DISubprogram(name: "record_equality", scope: !3, file: !3, line: 1336, type: !5556, scopeLine: 1337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5556 = !DISubroutineType(types: !5557)
!5557 = !{null, !1661, !1661}
!5558 = !DILocalVariable(name: "x", arg: 1, scope: !5555, file: !3, line: 1336, type: !1661)
!5559 = !DILocation(line: 1336, column: 23, scope: !5555)
!5560 = !DILocalVariable(name: "y", arg: 2, scope: !5555, file: !3, line: 1336, type: !1661)
!5561 = !DILocation(line: 1336, column: 31, scope: !5555)
!5562 = !DILocalVariable(name: "prev_x", scope: !5555, file: !3, line: 1338, type: !1661)
!5563 = !DILocation(line: 1338, column: 8, scope: !5555)
!5564 = !DILocalVariable(name: "prev_y", scope: !5555, file: !3, line: 1338, type: !1661)
!5565 = !DILocation(line: 1338, column: 23, scope: !5555)
!5566 = !DILocation(line: 1340, column: 7, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1340, column: 7)
!5568 = !DILocation(line: 1340, column: 21, scope: !5567)
!5569 = !DILocation(line: 1340, column: 7, scope: !5555)
!5570 = !DILocation(line: 1341, column: 14, scope: !5567)
!5571 = !DILocation(line: 1341, column: 12, scope: !5567)
!5572 = !DILocation(line: 1341, column: 5, scope: !5567)
!5573 = !DILocation(line: 1342, column: 7, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1342, column: 7)
!5575 = !DILocation(line: 1342, column: 21, scope: !5574)
!5576 = !DILocation(line: 1342, column: 7, scope: !5555)
!5577 = !DILocation(line: 1343, column: 14, scope: !5574)
!5578 = !DILocation(line: 1343, column: 12, scope: !5574)
!5579 = !DILocation(line: 1343, column: 5, scope: !5574)
!5580 = !DILocation(line: 1349, column: 32, scope: !5581)
!5581 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1349, column: 7)
!5582 = !DILocation(line: 1349, column: 7, scope: !5581)
!5583 = !DILocation(line: 1349, column: 7, scope: !5555)
!5584 = !DILocation(line: 1351, column: 37, scope: !5585)
!5585 = distinct !DILexicalBlock(scope: !5581, file: !3, line: 1351, column: 12)
!5586 = !DILocation(line: 1351, column: 12, scope: !5585)
!5587 = !DILocation(line: 1352, column: 5, scope: !5585)
!5588 = !DILocation(line: 1352, column: 29, scope: !5585)
!5589 = !DILocation(line: 1352, column: 9, scope: !5585)
!5590 = !DILocation(line: 1352, column: 55, scope: !5585)
!5591 = !DILocation(line: 1352, column: 35, scope: !5585)
!5592 = !DILocation(line: 1352, column: 32, scope: !5585)
!5593 = !DILocation(line: 1351, column: 12, scope: !5581)
!5594 = !DILocation(line: 1353, column: 14, scope: !5585)
!5595 = !DILocation(line: 1353, column: 12, scope: !5585)
!5596 = !DILocation(line: 1353, column: 21, scope: !5585)
!5597 = !DILocation(line: 1353, column: 19, scope: !5585)
!5598 = !DILocation(line: 1353, column: 28, scope: !5585)
!5599 = !DILocation(line: 1353, column: 26, scope: !5585)
!5600 = !DILocation(line: 1353, column: 45, scope: !5585)
!5601 = !DILocation(line: 1353, column: 43, scope: !5585)
!5602 = !DILocation(line: 1353, column: 5, scope: !5585)
!5603 = !DILocation(line: 1354, column: 12, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 1354, column: 12)
!5605 = !DILocation(line: 1354, column: 19, scope: !5604)
!5606 = !DILocation(line: 1354, column: 47, scope: !5604)
!5607 = !DILocation(line: 1354, column: 22, scope: !5604)
!5608 = !DILocation(line: 1354, column: 12, scope: !5585)
!5609 = !DILocation(line: 1355, column: 9, scope: !5604)
!5610 = !DILocation(line: 1355, column: 7, scope: !5604)
!5611 = !DILocation(line: 1355, column: 16, scope: !5604)
!5612 = !DILocation(line: 1355, column: 14, scope: !5604)
!5613 = !DILocation(line: 1355, column: 33, scope: !5604)
!5614 = !DILocation(line: 1355, column: 31, scope: !5604)
!5615 = !DILocation(line: 1355, column: 5, scope: !5604)
!5616 = !DILocation(line: 1356, column: 12, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 1356, column: 12)
!5618 = !DILocation(line: 1356, column: 12, scope: !5604)
!5619 = !DILocation(line: 1357, column: 9, scope: !5617)
!5620 = !DILocation(line: 1357, column: 7, scope: !5617)
!5621 = !DILocation(line: 1357, column: 5, scope: !5617)
!5622 = !DILocation(line: 1360, column: 7, scope: !5623)
!5623 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1360, column: 7)
!5624 = !DILocation(line: 1360, column: 21, scope: !5623)
!5625 = !DILocation(line: 1360, column: 7, scope: !5555)
!5626 = !DILocation(line: 1361, column: 5, scope: !5623)
!5627 = !DILocation(line: 1367, column: 7, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5555, file: !3, line: 1367, column: 7)
!5629 = !DILocation(line: 1368, column: 7, scope: !5628)
!5630 = !DILocation(line: 1368, column: 11, scope: !5628)
!5631 = !DILocation(line: 1368, column: 25, scope: !5628)
!5632 = !DILocation(line: 1369, column: 4, scope: !5628)
!5633 = !DILocation(line: 1369, column: 7, scope: !5628)
!5634 = !DILocation(line: 1367, column: 7, scope: !5555)
!5635 = !DILocation(line: 1370, column: 5, scope: !5628)
!5636 = !DILocation(line: 1372, column: 27, scope: !5555)
!5637 = !DILocation(line: 1372, column: 30, scope: !5555)
!5638 = !DILocation(line: 1372, column: 33, scope: !5555)
!5639 = !DILocation(line: 1372, column: 3, scope: !5555)
!5640 = !DILocation(line: 1373, column: 1, scope: !5555)
!5641 = distinct !DISubprogram(name: "record_cond", scope: !3, file: !3, line: 1073, type: !5642, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5642 = !DISubroutineType(types: !5643)
!5643 = !{null, !3042}
!5644 = !DILocalVariable(name: "p", arg: 1, scope: !5641, file: !3, line: 1073, type: !3042)
!5645 = !DILocation(line: 1073, column: 39, scope: !5641)
!5646 = !DILocalVariable(name: "element", scope: !5641, file: !3, line: 1075, type: !3017)
!5647 = !DILocation(line: 1075, column: 25, scope: !5641)
!5648 = !DILocation(line: 1075, column: 35, scope: !5641)
!5649 = !DILocalVariable(name: "slot", scope: !5641, file: !3, line: 1076, type: !2465)
!5650 = !DILocation(line: 1076, column: 10, scope: !5641)
!5651 = !DILocation(line: 1078, column: 39, scope: !5641)
!5652 = !DILocation(line: 1078, column: 42, scope: !5641)
!5653 = !DILocation(line: 1078, column: 48, scope: !5641)
!5654 = !DILocation(line: 1078, column: 51, scope: !5641)
!5655 = !DILocation(line: 1078, column: 58, scope: !5641)
!5656 = !DILocation(line: 1078, column: 3, scope: !5641)
!5657 = !DILocation(line: 1080, column: 36, scope: !5641)
!5658 = !DILocation(line: 1080, column: 57, scope: !5641)
!5659 = !DILocation(line: 1080, column: 49, scope: !5641)
!5660 = !DILocation(line: 1081, column: 8, scope: !5641)
!5661 = !DILocation(line: 1081, column: 17, scope: !5641)
!5662 = !DILocation(line: 1080, column: 10, scope: !5641)
!5663 = !DILocation(line: 1080, column: 8, scope: !5641)
!5664 = !DILocation(line: 1082, column: 8, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5641, file: !3, line: 1082, column: 7)
!5666 = !DILocation(line: 1082, column: 7, scope: !5665)
!5667 = !DILocation(line: 1082, column: 13, scope: !5665)
!5668 = !DILocation(line: 1082, column: 7, scope: !5641)
!5669 = !DILocation(line: 1084, column: 24, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 1083, column: 5)
!5671 = !DILocation(line: 1084, column: 15, scope: !5670)
!5672 = !DILocation(line: 1084, column: 8, scope: !5670)
!5673 = !DILocation(line: 1084, column: 13, scope: !5670)
!5674 = !DILocation(line: 1086, column: 11, scope: !5675)
!5675 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1086, column: 11)
!5676 = !DILocation(line: 1086, column: 21, scope: !5675)
!5677 = !DILocation(line: 1086, column: 25, scope: !5675)
!5678 = !DILocation(line: 1086, column: 36, scope: !5675)
!5679 = !DILocation(line: 1086, column: 11, scope: !5670)
!5680 = !DILocation(line: 1088, column: 20, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 1087, column: 9)
!5682 = !DILocation(line: 1088, column: 11, scope: !5681)
!5683 = !DILocation(line: 1089, column: 32, scope: !5681)
!5684 = !DILocation(line: 1089, column: 43, scope: !5681)
!5685 = !DILocation(line: 1089, column: 11, scope: !5681)
!5686 = !DILocation(line: 1090, column: 9, scope: !5681)
!5687 = !DILocation(line: 1092, column: 7, scope: !5670)
!5688 = !DILocation(line: 1093, column: 5, scope: !5670)
!5689 = !DILocation(line: 1095, column: 11, scope: !5665)
!5690 = !DILocation(line: 1095, column: 5, scope: !5665)
!5691 = !DILocation(line: 1096, column: 1, scope: !5641)
!5692 = distinct !DISubprogram(name: "ei_start_1", scope: !526, file: !526, line: 696, type: !5693, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5693 = !DISubroutineType(types: !5694)
!5694 = !{!4011, !4016}
!5695 = !DILocalVariable(name: "ev", arg: 1, scope: !5692, file: !526, line: 696, type: !4016)
!5696 = !DILocation(line: 696, column: 28, scope: !5692)
!5697 = !DILocalVariable(name: "i", scope: !5692, file: !526, line: 698, type: !4011)
!5698 = !DILocation(line: 698, column: 17, scope: !5692)
!5699 = !DILocation(line: 700, column: 5, scope: !5692)
!5700 = !DILocation(line: 700, column: 11, scope: !5692)
!5701 = !DILocation(line: 701, column: 17, scope: !5692)
!5702 = !DILocation(line: 701, column: 5, scope: !5692)
!5703 = !DILocation(line: 701, column: 15, scope: !5692)
!5704 = !DILocation(line: 703, column: 3, scope: !5692)
!5705 = distinct !DISubprogram(name: "ei_cond", scope: !526, file: !526, line: 771, type: !5706, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5706 = !DISubroutineType(types: !5707)
!5707 = !{!1776, !4011, !5708}
!5708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1906, size: 64)
!5709 = !DILocalVariable(name: "ei", arg: 1, scope: !5705, file: !526, line: 771, type: !4011)
!5710 = !DILocation(line: 771, column: 24, scope: !5705)
!5711 = !DILocalVariable(name: "p", arg: 2, scope: !5705, file: !526, line: 771, type: !5708)
!5712 = !DILocation(line: 771, column: 34, scope: !5705)
!5713 = !DILocation(line: 773, column: 8, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5705, file: !526, line: 773, column: 7)
!5715 = !DILocation(line: 773, column: 7, scope: !5705)
!5716 = !DILocation(line: 775, column: 12, scope: !5717)
!5717 = distinct !DILexicalBlock(scope: !5714, file: !526, line: 774, column: 5)
!5718 = !DILocation(line: 775, column: 8, scope: !5717)
!5719 = !DILocation(line: 775, column: 10, scope: !5717)
!5720 = !DILocation(line: 776, column: 7, scope: !5717)
!5721 = !DILocation(line: 780, column: 8, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !5714, file: !526, line: 779, column: 5)
!5723 = !DILocation(line: 780, column: 10, scope: !5722)
!5724 = !DILocation(line: 781, column: 7, scope: !5722)
!5725 = !DILocation(line: 783, column: 1, scope: !5705)
!5726 = distinct !DISubprogram(name: "ei_next", scope: !526, file: !526, line: 736, type: !5727, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5727 = !DISubroutineType(types: !5728)
!5728 = !{null, !5729}
!5729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4011, size: 64)
!5730 = !DILocalVariable(name: "i", arg: 1, scope: !5726, file: !526, line: 736, type: !5729)
!5731 = !DILocation(line: 736, column: 25, scope: !5726)
!5732 = !DILocation(line: 738, column: 3, scope: !5726)
!5733 = !DILocation(line: 739, column: 3, scope: !5726)
!5734 = !DILocation(line: 739, column: 6, scope: !5726)
!5735 = !DILocation(line: 739, column: 11, scope: !5726)
!5736 = !DILocation(line: 740, column: 1, scope: !5726)
!5737 = distinct !DISubprogram(name: "ei_end_p", scope: !526, file: !526, line: 721, type: !5738, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5738 = !DISubroutineType(types: !5739)
!5739 = !{!1776, !4011}
!5740 = !DILocalVariable(name: "i", arg: 1, scope: !5737, file: !526, line: 721, type: !4011)
!5741 = !DILocation(line: 721, column: 25, scope: !5737)
!5742 = !DILocation(line: 723, column: 13, scope: !5737)
!5743 = !DILocation(line: 723, column: 22, scope: !5737)
!5744 = !DILocation(line: 723, column: 19, scope: !5737)
!5745 = !DILocation(line: 723, column: 10, scope: !5737)
!5746 = !DILocation(line: 723, column: 3, scope: !5737)
!5747 = distinct !DISubprogram(name: "ei_edge", scope: !526, file: !526, line: 752, type: !5748, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5748 = !DISubroutineType(types: !5749)
!5749 = !{!1906, !4011}
!5750 = !DILocalVariable(name: "i", arg: 1, scope: !5747, file: !526, line: 752, type: !4011)
!5751 = !DILocation(line: 752, column: 24, scope: !5747)
!5752 = !DILocation(line: 754, column: 10, scope: !5747)
!5753 = !DILocation(line: 754, column: 3, scope: !5747)
!5754 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !526, file: !526, line: 150, type: !5755, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5755 = !DISubroutineType(types: !5756)
!5756 = !{!7, !5757}
!5757 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5758, size: 64)
!5758 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1899)
!5759 = !DILocalVariable(name: "vec_", arg: 1, scope: !5754, file: !526, line: 150, type: !5757)
!5760 = !DILocation(line: 150, column: 1, scope: !5754)
!5761 = distinct !DISubprogram(name: "ei_container", scope: !526, file: !526, line: 685, type: !5762, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5762 = !DISubroutineType(types: !5763)
!5763 = !{!1894, !4011}
!5764 = !DILocalVariable(name: "i", arg: 1, scope: !5761, file: !526, line: 685, type: !4011)
!5765 = !DILocation(line: 685, column: 29, scope: !5761)
!5766 = !DILocation(line: 687, column: 3, scope: !5761)
!5767 = !DILocation(line: 688, column: 13, scope: !5761)
!5768 = !DILocation(line: 688, column: 10, scope: !5761)
!5769 = !DILocation(line: 688, column: 3, scope: !5761)
!5770 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !526, file: !526, line: 150, type: !5771, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5771 = !DISubroutineType(types: !5772)
!5772 = !{!1906, !5757, !7}
!5773 = !DILocalVariable(name: "vec_", arg: 1, scope: !5770, file: !526, line: 150, type: !5757)
!5774 = !DILocation(line: 150, column: 1, scope: !5770)
!5775 = !DILocalVariable(name: "ix_", arg: 2, scope: !5770, file: !526, line: 150, type: !7)
!5776 = !DILocation(line: 0, scope: !5770)
!5777 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !318, file: !318, line: 182, type: !5778, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5778 = !DISubroutineType(types: !5779)
!5779 = !{!7, !5780}
!5780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5781, size: 64)
!5781 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2509)
!5782 = !DILocalVariable(name: "vec_", arg: 1, scope: !5777, file: !318, line: 182, type: !5780)
!5783 = !DILocation(line: 182, column: 1, scope: !5777)
!5784 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !318, file: !318, line: 182, type: !5785, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5785 = !DISubroutineType(types: !5786)
!5786 = !{!1661, !5780, !7}
!5787 = !DILocalVariable(name: "vec_", arg: 1, scope: !5784, file: !318, line: 182, type: !5780)
!5788 = !DILocation(line: 182, column: 1, scope: !5784)
!5789 = !DILocalVariable(name: "ix_", arg: 2, scope: !5784, file: !318, line: 182, type: !7)
!5790 = !DILocation(line: 0, scope: !5784)
!5791 = distinct !DISubprogram(name: "record_const_or_copy_1", scope: !3, file: !3, line: 1267, type: !5792, scopeLine: 1268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5792 = !DISubroutineType(types: !5793)
!5793 = !{null, !1661, !1661, !1661}
!5794 = !DILocalVariable(name: "x", arg: 1, scope: !5791, file: !3, line: 1267, type: !1661)
!5795 = !DILocation(line: 1267, column: 30, scope: !5791)
!5796 = !DILocalVariable(name: "y", arg: 2, scope: !5791, file: !3, line: 1267, type: !1661)
!5797 = !DILocation(line: 1267, column: 38, scope: !5791)
!5798 = !DILocalVariable(name: "prev_x", arg: 3, scope: !5791, file: !3, line: 1267, type: !1661)
!5799 = !DILocation(line: 1267, column: 46, scope: !5791)
!5800 = !DILocation(line: 1269, column: 23, scope: !5791)
!5801 = !DILocation(line: 1269, column: 26, scope: !5791)
!5802 = !DILocation(line: 1269, column: 3, scope: !5791)
!5803 = !DILocation(line: 1271, column: 7, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5791, file: !3, line: 1271, column: 7)
!5805 = !DILocation(line: 1271, column: 17, scope: !5804)
!5806 = !DILocation(line: 1271, column: 21, scope: !5804)
!5807 = !DILocation(line: 1271, column: 32, scope: !5804)
!5808 = !DILocation(line: 1271, column: 7, scope: !5791)
!5809 = !DILocation(line: 1273, column: 16, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5804, file: !3, line: 1272, column: 5)
!5811 = !DILocation(line: 1273, column: 7, scope: !5810)
!5812 = !DILocation(line: 1274, column: 27, scope: !5810)
!5813 = !DILocation(line: 1274, column: 38, scope: !5810)
!5814 = !DILocation(line: 1274, column: 7, scope: !5810)
!5815 = !DILocation(line: 1275, column: 16, scope: !5810)
!5816 = !DILocation(line: 1275, column: 7, scope: !5810)
!5817 = !DILocation(line: 1276, column: 27, scope: !5810)
!5818 = !DILocation(line: 1276, column: 38, scope: !5810)
!5819 = !DILocation(line: 1276, column: 7, scope: !5810)
!5820 = !DILocation(line: 1277, column: 16, scope: !5810)
!5821 = !DILocation(line: 1277, column: 7, scope: !5810)
!5822 = !DILocation(line: 1278, column: 5, scope: !5810)
!5823 = !DILocation(line: 1280, column: 3, scope: !5791)
!5824 = !DILocation(line: 1281, column: 3, scope: !5791)
!5825 = !DILocation(line: 1282, column: 3, scope: !5791)
!5826 = !DILocation(line: 1283, column: 1, scope: !5791)
!5827 = distinct !DISubprogram(name: "initialize_hash_element_from_expr", scope: !3, file: !3, line: 318, type: !5828, scopeLine: 321, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5828 = !DISubroutineType(types: !5829)
!5829 = !{null, !5830, !1661, !3017}
!5830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2985, size: 64)
!5831 = !DILocalVariable(name: "expr", arg: 1, scope: !5827, file: !3, line: 318, type: !5830)
!5832 = !DILocation(line: 318, column: 58, scope: !5827)
!5833 = !DILocalVariable(name: "lhs", arg: 2, scope: !5827, file: !3, line: 319, type: !1661)
!5834 = !DILocation(line: 319, column: 41, scope: !5827)
!5835 = !DILocalVariable(name: "element", arg: 3, scope: !5827, file: !3, line: 320, type: !3017)
!5836 = !DILocation(line: 320, column: 58, scope: !5827)
!5837 = !DILocation(line: 322, column: 3, scope: !5827)
!5838 = !DILocation(line: 322, column: 12, scope: !5827)
!5839 = !DILocation(line: 322, column: 20, scope: !5827)
!5840 = !DILocation(line: 322, column: 19, scope: !5827)
!5841 = !DILocation(line: 323, column: 18, scope: !5827)
!5842 = !DILocation(line: 323, column: 3, scope: !5827)
!5843 = !DILocation(line: 323, column: 12, scope: !5827)
!5844 = !DILocation(line: 323, column: 16, scope: !5827)
!5845 = !DILocation(line: 324, column: 3, scope: !5827)
!5846 = !DILocation(line: 324, column: 12, scope: !5827)
!5847 = !DILocation(line: 324, column: 17, scope: !5827)
!5848 = !DILocation(line: 325, column: 36, scope: !5827)
!5849 = !DILocation(line: 325, column: 19, scope: !5827)
!5850 = !DILocation(line: 325, column: 3, scope: !5827)
!5851 = !DILocation(line: 325, column: 12, scope: !5827)
!5852 = !DILocation(line: 325, column: 17, scope: !5827)
!5853 = !DILocation(line: 326, column: 20, scope: !5827)
!5854 = !DILocation(line: 326, column: 3, scope: !5827)
!5855 = !DILocation(line: 326, column: 12, scope: !5827)
!5856 = !DILocation(line: 326, column: 18, scope: !5827)
!5857 = !DILocation(line: 327, column: 1, scope: !5827)
!5858 = distinct !DISubprogram(name: "print_expr_hash_elt", scope: !3, file: !3, line: 490, type: !5859, scopeLine: 491, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!5859 = !DISubroutineType(types: !5860)
!5860 = !{null, !3299, !1656}
!5861 = !DILocalVariable(name: "stream", arg: 1, scope: !5858, file: !3, line: 490, type: !3299)
!5862 = !DILocation(line: 490, column: 29, scope: !5858)
!5863 = !DILocalVariable(name: "element", arg: 2, scope: !5858, file: !3, line: 490, type: !1656)
!5864 = !DILocation(line: 490, column: 65, scope: !5858)
!5865 = !DILocation(line: 492, column: 7, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 492, column: 7)
!5867 = !DILocation(line: 492, column: 16, scope: !5866)
!5868 = !DILocation(line: 492, column: 7, scope: !5858)
!5869 = !DILocation(line: 493, column: 14, scope: !5866)
!5870 = !DILocation(line: 493, column: 5, scope: !5866)
!5871 = !DILocation(line: 495, column: 14, scope: !5866)
!5872 = !DILocation(line: 495, column: 5, scope: !5866)
!5873 = !DILocation(line: 497, column: 7, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 497, column: 7)
!5875 = !DILocation(line: 497, column: 16, scope: !5874)
!5876 = !DILocation(line: 497, column: 7, scope: !5858)
!5877 = !DILocation(line: 499, column: 27, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5874, file: !3, line: 498, column: 5)
!5879 = !DILocation(line: 499, column: 35, scope: !5878)
!5880 = !DILocation(line: 499, column: 44, scope: !5878)
!5881 = !DILocation(line: 499, column: 7, scope: !5878)
!5882 = !DILocation(line: 500, column: 16, scope: !5878)
!5883 = !DILocation(line: 500, column: 7, scope: !5878)
!5884 = !DILocation(line: 501, column: 5, scope: !5878)
!5885 = !DILocation(line: 503, column: 11, scope: !5858)
!5886 = !DILocation(line: 503, column: 20, scope: !5858)
!5887 = !DILocation(line: 503, column: 25, scope: !5858)
!5888 = !DILocation(line: 503, column: 3, scope: !5858)
!5889 = !DILocation(line: 506, column: 29, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 504, column: 5)
!5891 = !DILocation(line: 506, column: 37, scope: !5890)
!5892 = !DILocation(line: 506, column: 46, scope: !5890)
!5893 = !DILocation(line: 506, column: 51, scope: !5890)
!5894 = !DILocation(line: 506, column: 55, scope: !5890)
!5895 = !DILocation(line: 506, column: 62, scope: !5890)
!5896 = !DILocation(line: 506, column: 9, scope: !5890)
!5897 = !DILocation(line: 507, column: 9, scope: !5890)
!5898 = !DILocation(line: 510, column: 18, scope: !5890)
!5899 = !DILocation(line: 510, column: 48, scope: !5890)
!5900 = !DILocation(line: 510, column: 57, scope: !5890)
!5901 = !DILocation(line: 510, column: 62, scope: !5890)
!5902 = !DILocation(line: 510, column: 66, scope: !5890)
!5903 = !DILocation(line: 510, column: 72, scope: !5890)
!5904 = !DILocation(line: 510, column: 33, scope: !5890)
!5905 = !DILocation(line: 510, column: 9, scope: !5890)
!5906 = !DILocation(line: 511, column: 29, scope: !5890)
!5907 = !DILocation(line: 511, column: 37, scope: !5890)
!5908 = !DILocation(line: 511, column: 46, scope: !5890)
!5909 = !DILocation(line: 511, column: 51, scope: !5890)
!5910 = !DILocation(line: 511, column: 55, scope: !5890)
!5911 = !DILocation(line: 511, column: 61, scope: !5890)
!5912 = !DILocation(line: 511, column: 9, scope: !5890)
!5913 = !DILocation(line: 512, column: 9, scope: !5890)
!5914 = !DILocation(line: 515, column: 29, scope: !5890)
!5915 = !DILocation(line: 515, column: 37, scope: !5890)
!5916 = !DILocation(line: 515, column: 46, scope: !5890)
!5917 = !DILocation(line: 515, column: 51, scope: !5890)
!5918 = !DILocation(line: 515, column: 55, scope: !5890)
!5919 = !DILocation(line: 515, column: 62, scope: !5890)
!5920 = !DILocation(line: 515, column: 9, scope: !5890)
!5921 = !DILocation(line: 516, column: 18, scope: !5890)
!5922 = !DILocation(line: 516, column: 49, scope: !5890)
!5923 = !DILocation(line: 516, column: 58, scope: !5890)
!5924 = !DILocation(line: 516, column: 63, scope: !5890)
!5925 = !DILocation(line: 516, column: 67, scope: !5890)
!5926 = !DILocation(line: 516, column: 74, scope: !5890)
!5927 = !DILocation(line: 516, column: 34, scope: !5890)
!5928 = !DILocation(line: 516, column: 9, scope: !5890)
!5929 = !DILocation(line: 517, column: 29, scope: !5890)
!5930 = !DILocation(line: 517, column: 37, scope: !5890)
!5931 = !DILocation(line: 517, column: 46, scope: !5890)
!5932 = !DILocation(line: 517, column: 51, scope: !5890)
!5933 = !DILocation(line: 517, column: 55, scope: !5890)
!5934 = !DILocation(line: 517, column: 62, scope: !5890)
!5935 = !DILocation(line: 517, column: 9, scope: !5890)
!5936 = !DILocation(line: 518, column: 9, scope: !5890)
!5937 = !DILocalVariable(name: "i", scope: !5938, file: !3, line: 522, type: !2071)
!5938 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 521, column: 9)
!5939 = !DILocation(line: 522, column: 18, scope: !5938)
!5940 = !DILocalVariable(name: "nargs", scope: !5938, file: !3, line: 523, type: !2071)
!5941 = !DILocation(line: 523, column: 18, scope: !5938)
!5942 = !DILocation(line: 523, column: 26, scope: !5938)
!5943 = !DILocation(line: 523, column: 35, scope: !5938)
!5944 = !DILocation(line: 523, column: 40, scope: !5938)
!5945 = !DILocation(line: 523, column: 44, scope: !5938)
!5946 = !DILocation(line: 523, column: 49, scope: !5938)
!5947 = !DILocation(line: 525, column: 31, scope: !5938)
!5948 = !DILocation(line: 525, column: 39, scope: !5938)
!5949 = !DILocation(line: 525, column: 48, scope: !5938)
!5950 = !DILocation(line: 525, column: 53, scope: !5938)
!5951 = !DILocation(line: 525, column: 57, scope: !5938)
!5952 = !DILocation(line: 525, column: 62, scope: !5938)
!5953 = !DILocation(line: 525, column: 11, scope: !5938)
!5954 = !DILocation(line: 526, column: 20, scope: !5938)
!5955 = !DILocation(line: 526, column: 11, scope: !5938)
!5956 = !DILocation(line: 527, column: 18, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5938, file: !3, line: 527, column: 11)
!5958 = !DILocation(line: 527, column: 16, scope: !5957)
!5959 = !DILocation(line: 527, column: 23, scope: !5960)
!5960 = distinct !DILexicalBlock(scope: !5957, file: !3, line: 527, column: 11)
!5961 = !DILocation(line: 527, column: 27, scope: !5960)
!5962 = !DILocation(line: 527, column: 25, scope: !5960)
!5963 = !DILocation(line: 527, column: 11, scope: !5957)
!5964 = !DILocation(line: 529, column: 35, scope: !5965)
!5965 = distinct !DILexicalBlock(scope: !5960, file: !3, line: 528, column: 13)
!5966 = !DILocation(line: 529, column: 43, scope: !5965)
!5967 = !DILocation(line: 529, column: 52, scope: !5965)
!5968 = !DILocation(line: 529, column: 57, scope: !5965)
!5969 = !DILocation(line: 529, column: 61, scope: !5965)
!5970 = !DILocation(line: 529, column: 66, scope: !5965)
!5971 = !DILocation(line: 529, column: 71, scope: !5965)
!5972 = !DILocation(line: 529, column: 15, scope: !5965)
!5973 = !DILocation(line: 530, column: 19, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5965, file: !3, line: 530, column: 19)
!5975 = !DILocation(line: 530, column: 21, scope: !5974)
!5976 = !DILocation(line: 530, column: 27, scope: !5974)
!5977 = !DILocation(line: 530, column: 25, scope: !5974)
!5978 = !DILocation(line: 530, column: 19, scope: !5965)
!5979 = !DILocation(line: 531, column: 26, scope: !5974)
!5980 = !DILocation(line: 531, column: 17, scope: !5974)
!5981 = !DILocation(line: 532, column: 13, scope: !5965)
!5982 = !DILocation(line: 527, column: 35, scope: !5960)
!5983 = !DILocation(line: 527, column: 11, scope: !5960)
!5984 = distinct !{!5984, !5963, !5985}
!5985 = !DILocation(line: 532, column: 13, scope: !5957)
!5986 = !DILocation(line: 533, column: 20, scope: !5938)
!5987 = !DILocation(line: 533, column: 11, scope: !5938)
!5988 = !DILocation(line: 535, column: 9, scope: !5890)
!5989 = !DILocation(line: 537, column: 12, scope: !5858)
!5990 = !DILocation(line: 537, column: 3, scope: !5858)
!5991 = !DILocation(line: 539, column: 7, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 539, column: 7)
!5993 = !DILocation(line: 539, column: 16, scope: !5992)
!5994 = !DILocation(line: 539, column: 7, scope: !5858)
!5995 = !DILocation(line: 541, column: 16, scope: !5996)
!5996 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 540, column: 5)
!5997 = !DILocation(line: 541, column: 7, scope: !5996)
!5998 = !DILocation(line: 542, column: 26, scope: !5996)
!5999 = !DILocation(line: 542, column: 34, scope: !5996)
!6000 = !DILocation(line: 542, column: 43, scope: !5996)
!6001 = !DILocation(line: 542, column: 7, scope: !5996)
!6002 = !DILocation(line: 543, column: 5, scope: !5996)
!6003 = !DILocation(line: 544, column: 1, scope: !5858)
!6004 = distinct !DISubprogram(name: "avail_expr_hash", scope: !3, file: !3, line: 2307, type: !2451, scopeLine: 2308, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6005 = !DILocalVariable(name: "p", arg: 1, scope: !6004, file: !3, line: 2307, type: !2285)
!6006 = !DILocation(line: 2307, column: 30, scope: !6004)
!6007 = !DILocalVariable(name: "stmt", scope: !6004, file: !3, line: 2309, type: !1926)
!6008 = !DILocation(line: 2309, column: 10, scope: !6004)
!6009 = !DILocation(line: 2309, column: 48, scope: !6004)
!6010 = !DILocation(line: 2309, column: 18, scope: !6004)
!6011 = !DILocation(line: 2309, column: 52, scope: !6004)
!6012 = !DILocalVariable(name: "expr", scope: !6004, file: !3, line: 2310, type: !3614)
!6013 = !DILocation(line: 2310, column: 31, scope: !6004)
!6014 = !DILocation(line: 2310, column: 70, scope: !6004)
!6015 = !DILocation(line: 2310, column: 40, scope: !6004)
!6016 = !DILocation(line: 2310, column: 74, scope: !6004)
!6017 = !DILocalVariable(name: "vuse", scope: !6004, file: !3, line: 2311, type: !1661)
!6018 = !DILocation(line: 2311, column: 8, scope: !6004)
!6019 = !DILocalVariable(name: "val", scope: !6004, file: !3, line: 2312, type: !2453)
!6020 = !DILocation(line: 2312, column: 13, scope: !6004)
!6021 = !DILocation(line: 2314, column: 39, scope: !6004)
!6022 = !DILocation(line: 2314, column: 45, scope: !6004)
!6023 = !DILocation(line: 2314, column: 9, scope: !6004)
!6024 = !DILocation(line: 2314, column: 7, scope: !6004)
!6025 = !DILocation(line: 2319, column: 8, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !6004, file: !3, line: 2319, column: 7)
!6027 = !DILocation(line: 2319, column: 7, scope: !6004)
!6028 = !DILocation(line: 2320, column: 12, scope: !6026)
!6029 = !DILocation(line: 2320, column: 5, scope: !6026)
!6030 = !DILocation(line: 2326, column: 28, scope: !6031)
!6031 = distinct !DILexicalBlock(scope: !6004, file: !3, line: 2326, column: 7)
!6032 = !DILocation(line: 2326, column: 15, scope: !6031)
!6033 = !DILocation(line: 2326, column: 13, scope: !6031)
!6034 = !DILocation(line: 2326, column: 7, scope: !6004)
!6035 = !DILocation(line: 2327, column: 32, scope: !6031)
!6036 = !DILocation(line: 2327, column: 38, scope: !6031)
!6037 = !DILocation(line: 2327, column: 11, scope: !6031)
!6038 = !DILocation(line: 2327, column: 9, scope: !6031)
!6039 = !DILocation(line: 2327, column: 5, scope: !6031)
!6040 = !DILocation(line: 2329, column: 10, scope: !6004)
!6041 = !DILocation(line: 2329, column: 3, scope: !6004)
!6042 = !DILocation(line: 2330, column: 1, scope: !6004)
!6043 = distinct !DISubprogram(name: "iterative_hash_hashable_expr", scope: !3, file: !3, line: 434, type: !6044, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6044 = !DISubroutineType(types: !6045)
!6045 = !{!2453, !3614, !2453}
!6046 = !DILocalVariable(name: "expr", arg: 1, scope: !6043, file: !3, line: 434, type: !3614)
!6047 = !DILocation(line: 434, column: 59, scope: !6043)
!6048 = !DILocalVariable(name: "val", arg: 2, scope: !6043, file: !3, line: 434, type: !2453)
!6049 = !DILocation(line: 434, column: 75, scope: !6043)
!6050 = !DILocation(line: 436, column: 11, scope: !6043)
!6051 = !DILocation(line: 436, column: 17, scope: !6043)
!6052 = !DILocation(line: 436, column: 3, scope: !6043)
!6053 = !DILocation(line: 439, column: 34, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 437, column: 5)
!6055 = !DILocation(line: 439, column: 40, scope: !6054)
!6056 = !DILocation(line: 439, column: 44, scope: !6054)
!6057 = !DILocation(line: 439, column: 51, scope: !6054)
!6058 = !DILocation(line: 439, column: 56, scope: !6054)
!6059 = !DILocation(line: 439, column: 13, scope: !6054)
!6060 = !DILocation(line: 439, column: 11, scope: !6054)
!6061 = !DILocation(line: 440, column: 7, scope: !6054)
!6062 = !DILocation(line: 443, column: 13, scope: !6054)
!6063 = !DILocation(line: 443, column: 11, scope: !6054)
!6064 = !DILocation(line: 449, column: 11, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 449, column: 11)
!6066 = !DILocation(line: 450, column: 11, scope: !6065)
!6067 = !DILocation(line: 450, column: 14, scope: !6065)
!6068 = !DILocation(line: 450, column: 20, scope: !6065)
!6069 = !DILocation(line: 450, column: 24, scope: !6065)
!6070 = !DILocation(line: 450, column: 30, scope: !6065)
!6071 = !DILocation(line: 450, column: 33, scope: !6065)
!6072 = !DILocation(line: 449, column: 11, scope: !6054)
!6073 = !DILocation(line: 451, column: 16, scope: !6065)
!6074 = !DILocation(line: 451, column: 13, scope: !6065)
!6075 = !DILocation(line: 451, column: 9, scope: !6065)
!6076 = !DILocation(line: 453, column: 34, scope: !6054)
!6077 = !DILocation(line: 453, column: 40, scope: !6054)
!6078 = !DILocation(line: 453, column: 44, scope: !6054)
!6079 = !DILocation(line: 453, column: 50, scope: !6054)
!6080 = !DILocation(line: 453, column: 56, scope: !6054)
!6081 = !DILocation(line: 453, column: 13, scope: !6054)
!6082 = !DILocation(line: 453, column: 11, scope: !6054)
!6083 = !DILocation(line: 454, column: 7, scope: !6054)
!6084 = !DILocation(line: 457, column: 13, scope: !6054)
!6085 = !DILocation(line: 457, column: 11, scope: !6054)
!6086 = !DILocation(line: 458, column: 34, scope: !6087)
!6087 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 458, column: 11)
!6088 = !DILocation(line: 458, column: 40, scope: !6087)
!6089 = !DILocation(line: 458, column: 44, scope: !6087)
!6090 = !DILocation(line: 458, column: 51, scope: !6087)
!6091 = !DILocation(line: 458, column: 11, scope: !6087)
!6092 = !DILocation(line: 458, column: 11, scope: !6054)
!6093 = !DILocation(line: 459, column: 51, scope: !6087)
!6094 = !DILocation(line: 459, column: 57, scope: !6087)
!6095 = !DILocation(line: 459, column: 61, scope: !6087)
!6096 = !DILocation(line: 459, column: 68, scope: !6087)
!6097 = !DILocation(line: 460, column: 51, scope: !6087)
!6098 = !DILocation(line: 460, column: 57, scope: !6087)
!6099 = !DILocation(line: 460, column: 61, scope: !6087)
!6100 = !DILocation(line: 460, column: 68, scope: !6087)
!6101 = !DILocation(line: 460, column: 75, scope: !6087)
!6102 = !DILocation(line: 459, column: 17, scope: !6087)
!6103 = !DILocation(line: 459, column: 15, scope: !6087)
!6104 = !DILocation(line: 459, column: 11, scope: !6087)
!6105 = !DILocation(line: 463, column: 38, scope: !6106)
!6106 = distinct !DILexicalBlock(scope: !6087, file: !3, line: 462, column: 9)
!6107 = !DILocation(line: 463, column: 44, scope: !6106)
!6108 = !DILocation(line: 463, column: 48, scope: !6106)
!6109 = !DILocation(line: 463, column: 55, scope: !6106)
!6110 = !DILocation(line: 463, column: 62, scope: !6106)
!6111 = !DILocation(line: 463, column: 17, scope: !6106)
!6112 = !DILocation(line: 463, column: 15, scope: !6106)
!6113 = !DILocation(line: 464, column: 38, scope: !6106)
!6114 = !DILocation(line: 464, column: 44, scope: !6106)
!6115 = !DILocation(line: 464, column: 48, scope: !6106)
!6116 = !DILocation(line: 464, column: 55, scope: !6106)
!6117 = !DILocation(line: 464, column: 62, scope: !6106)
!6118 = !DILocation(line: 464, column: 17, scope: !6106)
!6119 = !DILocation(line: 464, column: 15, scope: !6106)
!6120 = !DILocation(line: 466, column: 7, scope: !6054)
!6121 = !DILocalVariable(name: "i", scope: !6122, file: !3, line: 470, type: !2071)
!6122 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 469, column: 7)
!6123 = !DILocation(line: 470, column: 16, scope: !6122)
!6124 = !DILocalVariable(name: "code", scope: !6122, file: !3, line: 471, type: !317)
!6125 = !DILocation(line: 471, column: 24, scope: !6122)
!6126 = !DILocation(line: 473, column: 15, scope: !6122)
!6127 = !DILocation(line: 473, column: 13, scope: !6122)
!6128 = !DILocation(line: 474, column: 36, scope: !6122)
!6129 = !DILocation(line: 474, column: 42, scope: !6122)
!6130 = !DILocation(line: 474, column: 46, scope: !6122)
!6131 = !DILocation(line: 474, column: 51, scope: !6122)
!6132 = !DILocation(line: 474, column: 55, scope: !6122)
!6133 = !DILocation(line: 474, column: 15, scope: !6122)
!6134 = !DILocation(line: 474, column: 13, scope: !6122)
!6135 = !DILocation(line: 475, column: 16, scope: !6136)
!6136 = distinct !DILexicalBlock(scope: !6122, file: !3, line: 475, column: 9)
!6137 = !DILocation(line: 475, column: 14, scope: !6136)
!6138 = !DILocation(line: 475, column: 21, scope: !6139)
!6139 = distinct !DILexicalBlock(scope: !6136, file: !3, line: 475, column: 9)
!6140 = !DILocation(line: 475, column: 25, scope: !6139)
!6141 = !DILocation(line: 475, column: 31, scope: !6139)
!6142 = !DILocation(line: 475, column: 35, scope: !6139)
!6143 = !DILocation(line: 475, column: 40, scope: !6139)
!6144 = !DILocation(line: 475, column: 23, scope: !6139)
!6145 = !DILocation(line: 475, column: 9, scope: !6136)
!6146 = !DILocation(line: 476, column: 38, scope: !6139)
!6147 = !DILocation(line: 476, column: 44, scope: !6139)
!6148 = !DILocation(line: 476, column: 48, scope: !6139)
!6149 = !DILocation(line: 476, column: 53, scope: !6139)
!6150 = !DILocation(line: 476, column: 58, scope: !6139)
!6151 = !DILocation(line: 476, column: 62, scope: !6139)
!6152 = !DILocation(line: 476, column: 17, scope: !6139)
!6153 = !DILocation(line: 476, column: 15, scope: !6139)
!6154 = !DILocation(line: 476, column: 11, scope: !6139)
!6155 = !DILocation(line: 475, column: 48, scope: !6139)
!6156 = !DILocation(line: 475, column: 9, scope: !6139)
!6157 = distinct !{!6157, !6145, !6158}
!6158 = !DILocation(line: 476, column: 65, scope: !6136)
!6159 = !DILocation(line: 478, column: 7, scope: !6054)
!6160 = !DILocation(line: 481, column: 7, scope: !6054)
!6161 = !DILocation(line: 482, column: 5, scope: !6054)
!6162 = !DILocation(line: 484, column: 10, scope: !6043)
!6163 = !DILocation(line: 484, column: 3, scope: !6043)
!6164 = distinct !DISubprogram(name: "canonicalize_comparison", scope: !3, file: !3, line: 770, type: !3975, scopeLine: 771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6165 = !DILocalVariable(name: "condstmt", arg: 1, scope: !6164, file: !3, line: 770, type: !1926)
!6166 = !DILocation(line: 770, column: 33, scope: !6164)
!6167 = !DILocalVariable(name: "op0", scope: !6164, file: !3, line: 772, type: !1661)
!6168 = !DILocation(line: 772, column: 8, scope: !6164)
!6169 = !DILocalVariable(name: "op1", scope: !6164, file: !3, line: 773, type: !1661)
!6170 = !DILocation(line: 773, column: 8, scope: !6164)
!6171 = !DILocalVariable(name: "code", scope: !6164, file: !3, line: 774, type: !317)
!6172 = !DILocation(line: 774, column: 18, scope: !6164)
!6173 = !DILocation(line: 776, column: 3, scope: !6164)
!6174 = !DILocation(line: 778, column: 26, scope: !6164)
!6175 = !DILocation(line: 778, column: 9, scope: !6164)
!6176 = !DILocation(line: 778, column: 7, scope: !6164)
!6177 = !DILocation(line: 779, column: 26, scope: !6164)
!6178 = !DILocation(line: 779, column: 9, scope: !6164)
!6179 = !DILocation(line: 779, column: 7, scope: !6164)
!6180 = !DILocation(line: 781, column: 28, scope: !6164)
!6181 = !DILocation(line: 781, column: 10, scope: !6164)
!6182 = !DILocation(line: 781, column: 8, scope: !6164)
!6183 = !DILocation(line: 789, column: 29, scope: !6184)
!6184 = distinct !DILexicalBlock(scope: !6164, file: !3, line: 789, column: 7)
!6185 = !DILocation(line: 789, column: 34, scope: !6184)
!6186 = !DILocation(line: 789, column: 7, scope: !6184)
!6187 = !DILocation(line: 789, column: 7, scope: !6164)
!6188 = !DILocation(line: 793, column: 11, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6190, file: !3, line: 793, column: 11)
!6190 = distinct !DILexicalBlock(scope: !6184, file: !3, line: 790, column: 5)
!6191 = !DILocation(line: 793, column: 16, scope: !6189)
!6192 = !DILocation(line: 794, column: 4, scope: !6189)
!6193 = !DILocation(line: 794, column: 7, scope: !6189)
!6194 = !DILocation(line: 794, column: 12, scope: !6189)
!6195 = !DILocation(line: 795, column: 4, scope: !6189)
!6196 = !DILocation(line: 795, column: 7, scope: !6189)
!6197 = !DILocation(line: 795, column: 12, scope: !6189)
!6198 = !DILocation(line: 796, column: 4, scope: !6189)
!6199 = !DILocation(line: 796, column: 7, scope: !6189)
!6200 = !DILocation(line: 796, column: 12, scope: !6189)
!6201 = !DILocation(line: 793, column: 11, scope: !6190)
!6202 = !DILocation(line: 798, column: 40, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6189, file: !3, line: 797, column: 2)
!6204 = !DILocation(line: 798, column: 18, scope: !6203)
!6205 = !DILocation(line: 798, column: 16, scope: !6203)
!6206 = !DILocation(line: 800, column: 33, scope: !6203)
!6207 = !DILocation(line: 800, column: 43, scope: !6203)
!6208 = !DILocation(line: 800, column: 11, scope: !6203)
!6209 = !DILocation(line: 801, column: 32, scope: !6203)
!6210 = !DILocation(line: 801, column: 42, scope: !6203)
!6211 = !DILocation(line: 801, column: 11, scope: !6203)
!6212 = !DILocation(line: 802, column: 32, scope: !6203)
!6213 = !DILocation(line: 802, column: 42, scope: !6203)
!6214 = !DILocation(line: 802, column: 11, scope: !6203)
!6215 = !DILocation(line: 804, column: 24, scope: !6203)
!6216 = !DILocation(line: 804, column: 11, scope: !6203)
!6217 = !DILocation(line: 805, column: 2, scope: !6203)
!6218 = !DILocation(line: 806, column: 5, scope: !6190)
!6219 = !DILocation(line: 807, column: 1, scope: !6164)
!6220 = distinct !DISubprogram(name: "cprop_into_stmt", scope: !3, file: !3, line: 2043, type: !3975, scopeLine: 2044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6221 = !DILocalVariable(name: "stmt", arg: 1, scope: !6220, file: !3, line: 2043, type: !1926)
!6222 = !DILocation(line: 2043, column: 25, scope: !6220)
!6223 = !DILocalVariable(name: "op_p", scope: !6220, file: !3, line: 2045, type: !3050)
!6224 = !DILocation(line: 2045, column: 17, scope: !6220)
!6225 = !DILocalVariable(name: "iter", scope: !6220, file: !3, line: 2046, type: !6226)
!6226 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !1546, line: 140, baseType: !6227)
!6227 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !1546, line: 131, size: 320, elements: !6228)
!6228 = !{!6229, !6230, !6231, !6233, !6235, !6236, !6237}
!6229 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6227, file: !1546, line: 133, baseType: !1776, size: 8)
!6230 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6227, file: !1546, line: 134, baseType: !1545, size: 32, offset: 32)
!6231 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6227, file: !1546, line: 135, baseType: !6232, size: 64, offset: 64)
!6232 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !1546, line: 42, baseType: !1955)
!6233 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6227, file: !1546, line: 136, baseType: !6234, size: 64, offset: 128)
!6234 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !1546, line: 50, baseType: !1962)
!6235 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6227, file: !1546, line: 137, baseType: !1643, size: 32, offset: 192)
!6236 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6227, file: !1546, line: 138, baseType: !1643, size: 32, offset: 224)
!6237 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6227, file: !1546, line: 139, baseType: !1926, size: 64, offset: 256)
!6238 = !DILocation(line: 2046, column: 15, scope: !6220)
!6239 = !DILocation(line: 2048, column: 3, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6220, file: !3, line: 2048, column: 3)
!6241 = !DILocation(line: 2048, column: 3, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6240, file: !3, line: 2048, column: 3)
!6243 = !DILocation(line: 2050, column: 11, scope: !6244)
!6244 = distinct !DILexicalBlock(scope: !6245, file: !3, line: 2050, column: 11)
!6245 = distinct !DILexicalBlock(scope: !6242, file: !3, line: 2049, column: 5)
!6246 = !DILocation(line: 2050, column: 43, scope: !6244)
!6247 = !DILocation(line: 2050, column: 11, scope: !6245)
!6248 = !DILocation(line: 2051, column: 17, scope: !6244)
!6249 = !DILocation(line: 2051, column: 23, scope: !6244)
!6250 = !DILocation(line: 2051, column: 2, scope: !6244)
!6251 = !DILocation(line: 2052, column: 5, scope: !6245)
!6252 = distinct !{!6252, !6239, !6253}
!6253 = !DILocation(line: 2052, column: 5, scope: !6240)
!6254 = !DILocation(line: 2053, column: 1, scope: !6220)
!6255 = distinct !DISubprogram(name: "gimple_modified_p", scope: !594, file: !594, line: 1425, type: !4559, scopeLine: 1426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6256 = !DILocalVariable(name: "g", arg: 1, scope: !6255, file: !594, line: 1425, type: !3418)
!6257 = !DILocation(line: 1425, column: 33, scope: !6255)
!6258 = !DILocation(line: 1427, column: 27, scope: !6255)
!6259 = !DILocation(line: 1427, column: 11, scope: !6255)
!6260 = !DILocation(line: 1427, column: 10, scope: !6255)
!6261 = !DILocation(line: 1427, column: 40, scope: !6255)
!6262 = !DILocation(line: 1427, column: 43, scope: !6255)
!6263 = !DILocation(line: 1427, column: 50, scope: !6255)
!6264 = !DILocation(line: 1427, column: 33, scope: !6255)
!6265 = !DILocation(line: 1427, column: 3, scope: !6255)
!6266 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !594, file: !594, line: 1727, type: !3500, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6267 = !DILocalVariable(name: "gs", arg: 1, scope: !6266, file: !594, line: 1727, type: !3418)
!6268 = !DILocation(line: 1727, column: 34, scope: !6266)
!6269 = !DILocation(line: 1730, column: 21, scope: !6266)
!6270 = !DILocation(line: 1730, column: 10, scope: !6266)
!6271 = !DILocation(line: 1730, column: 3, scope: !6266)
!6272 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !594, file: !594, line: 2465, type: !3500, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6273 = !DILocalVariable(name: "gs", arg: 1, scope: !6272, file: !594, line: 2465, type: !3418)
!6274 = !DILocation(line: 2465, column: 32, scope: !6272)
!6275 = !DILocation(line: 2468, column: 21, scope: !6272)
!6276 = !DILocation(line: 2468, column: 10, scope: !6272)
!6277 = !DILocation(line: 2468, column: 3, scope: !6272)
!6278 = distinct !DISubprogram(name: "gimple_switch_index", scope: !594, file: !594, line: 3180, type: !3500, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6279 = !DILocalVariable(name: "gs", arg: 1, scope: !6278, file: !594, line: 3180, type: !3418)
!6280 = !DILocation(line: 3180, column: 35, scope: !6278)
!6281 = !DILocation(line: 3183, column: 21, scope: !6278)
!6282 = !DILocation(line: 3183, column: 10, scope: !6278)
!6283 = !DILocation(line: 3183, column: 3, scope: !6278)
!6284 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !594, file: !594, line: 1477, type: !4559, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6285 = !DILocalVariable(name: "stmt", arg: 1, scope: !6284, file: !594, line: 1477, type: !3418)
!6286 = !DILocation(line: 1477, column: 39, scope: !6284)
!6287 = !DILocation(line: 1479, column: 27, scope: !6288)
!6288 = distinct !DILexicalBlock(scope: !6284, file: !594, line: 1479, column: 7)
!6289 = !DILocation(line: 1479, column: 7, scope: !6288)
!6290 = !DILocation(line: 1479, column: 7, scope: !6284)
!6291 = !DILocation(line: 1480, column: 12, scope: !6288)
!6292 = !DILocation(line: 1480, column: 18, scope: !6288)
!6293 = !DILocation(line: 1480, column: 25, scope: !6288)
!6294 = !DILocation(line: 1480, column: 5, scope: !6288)
!6295 = !DILocation(line: 1482, column: 5, scope: !6288)
!6296 = !DILocation(line: 1483, column: 1, scope: !6284)
!6297 = distinct !DISubprogram(name: "is_gimple_assign", scope: !594, file: !594, line: 1677, type: !4559, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6298 = !DILocalVariable(name: "gs", arg: 1, scope: !6297, file: !594, line: 1677, type: !3418)
!6299 = !DILocation(line: 1677, column: 32, scope: !6297)
!6300 = !DILocation(line: 1679, column: 23, scope: !6297)
!6301 = !DILocation(line: 1679, column: 10, scope: !6297)
!6302 = !DILocation(line: 1679, column: 27, scope: !6297)
!6303 = !DILocation(line: 1679, column: 3, scope: !6297)
!6304 = distinct !DISubprogram(name: "is_gimple_call", scope: !594, file: !594, line: 1870, type: !4559, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6305 = !DILocalVariable(name: "gs", arg: 1, scope: !6304, file: !594, line: 1870, type: !3418)
!6306 = !DILocation(line: 1870, column: 30, scope: !6304)
!6307 = !DILocation(line: 1872, column: 23, scope: !6304)
!6308 = !DILocation(line: 1872, column: 10, scope: !6304)
!6309 = !DILocation(line: 1872, column: 27, scope: !6304)
!6310 = !DILocation(line: 1872, column: 3, scope: !6304)
!6311 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !594, file: !594, line: 1878, type: !3500, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6312 = !DILocalVariable(name: "gs", arg: 1, scope: !6311, file: !594, line: 1878, type: !3418)
!6313 = !DILocation(line: 1878, column: 31, scope: !6311)
!6314 = !DILocation(line: 1881, column: 21, scope: !6311)
!6315 = !DILocation(line: 1881, column: 10, scope: !6311)
!6316 = !DILocation(line: 1881, column: 3, scope: !6311)
!6317 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !594, file: !594, line: 1954, type: !3500, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6318 = !DILocalVariable(name: "gs", arg: 1, scope: !6317, file: !594, line: 1954, type: !3418)
!6319 = !DILocation(line: 1954, column: 34, scope: !6317)
!6320 = !DILocalVariable(name: "addr", scope: !6317, file: !594, line: 1956, type: !1661)
!6321 = !DILocation(line: 1956, column: 8, scope: !6317)
!6322 = !DILocation(line: 1956, column: 31, scope: !6317)
!6323 = !DILocation(line: 1956, column: 15, scope: !6317)
!6324 = !DILocation(line: 1957, column: 7, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6317, file: !594, line: 1957, column: 7)
!6326 = !DILocation(line: 1957, column: 24, scope: !6325)
!6327 = !DILocation(line: 1957, column: 7, scope: !6317)
!6328 = !DILocation(line: 1958, column: 12, scope: !6325)
!6329 = !DILocation(line: 1958, column: 5, scope: !6325)
!6330 = !DILocation(line: 1959, column: 3, scope: !6317)
!6331 = !DILocation(line: 1960, column: 1, scope: !6317)
!6332 = distinct !DISubprogram(name: "eliminate_redundant_computations", scope: !3, file: !3, line: 1778, type: !3995, scopeLine: 1779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6333 = !DILocalVariable(name: "gsi", arg: 1, scope: !6332, file: !3, line: 1778, type: !3997)
!6334 = !DILocation(line: 1778, column: 57, scope: !6332)
!6335 = !DILocalVariable(name: "expr_type", scope: !6332, file: !3, line: 1780, type: !1661)
!6336 = !DILocation(line: 1780, column: 8, scope: !6332)
!6337 = !DILocalVariable(name: "cached_lhs", scope: !6332, file: !3, line: 1781, type: !1661)
!6338 = !DILocation(line: 1781, column: 8, scope: !6332)
!6339 = !DILocalVariable(name: "insert", scope: !6332, file: !3, line: 1782, type: !1776)
!6340 = !DILocation(line: 1782, column: 8, scope: !6332)
!6341 = !DILocalVariable(name: "assigns_var_p", scope: !6332, file: !3, line: 1783, type: !1776)
!6342 = !DILocation(line: 1783, column: 8, scope: !6332)
!6343 = !DILocalVariable(name: "stmt", scope: !6332, file: !3, line: 1785, type: !1926)
!6344 = !DILocation(line: 1785, column: 10, scope: !6332)
!6345 = !DILocation(line: 1785, column: 28, scope: !6332)
!6346 = !DILocation(line: 1785, column: 17, scope: !6332)
!6347 = !DILocalVariable(name: "def", scope: !6332, file: !3, line: 1787, type: !1661)
!6348 = !DILocation(line: 1787, column: 8, scope: !6332)
!6349 = !DILocation(line: 1787, column: 30, scope: !6332)
!6350 = !DILocation(line: 1787, column: 14, scope: !6332)
!6351 = !DILocation(line: 1791, column: 9, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 1791, column: 7)
!6353 = !DILocation(line: 1792, column: 7, scope: !6352)
!6354 = !DILocation(line: 1792, column: 10, scope: !6352)
!6355 = !DILocation(line: 1792, column: 26, scope: !6352)
!6356 = !DILocation(line: 1793, column: 7, scope: !6352)
!6357 = !DILocation(line: 1793, column: 10, scope: !6352)
!6358 = !DILocation(line: 1794, column: 7, scope: !6352)
!6359 = !DILocation(line: 1794, column: 23, scope: !6352)
!6360 = !DILocation(line: 1794, column: 10, scope: !6352)
!6361 = !DILocation(line: 1797, column: 7, scope: !6352)
!6362 = !DILocation(line: 1797, column: 33, scope: !6352)
!6363 = !DILocation(line: 1797, column: 10, scope: !6352)
!6364 = !DILocation(line: 1791, column: 7, scope: !6332)
!6365 = !DILocation(line: 1798, column: 12, scope: !6352)
!6366 = !DILocation(line: 1798, column: 5, scope: !6352)
!6367 = !DILocation(line: 1801, column: 35, scope: !6332)
!6368 = !DILocation(line: 1801, column: 41, scope: !6332)
!6369 = !DILocation(line: 1801, column: 16, scope: !6332)
!6370 = !DILocation(line: 1801, column: 14, scope: !6332)
!6371 = !DILocation(line: 1803, column: 33, scope: !6332)
!6372 = !DILocation(line: 1806, column: 25, scope: !6373)
!6373 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 1806, column: 7)
!6374 = !DILocation(line: 1806, column: 7, scope: !6373)
!6375 = !DILocation(line: 1806, column: 7, scope: !6332)
!6376 = !DILocation(line: 1808, column: 19, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1807, column: 5)
!6378 = !DILocation(line: 1808, column: 17, scope: !6377)
!6379 = !DILocation(line: 1809, column: 21, scope: !6377)
!6380 = !DILocation(line: 1810, column: 5, scope: !6377)
!6381 = !DILocation(line: 1811, column: 25, scope: !6382)
!6382 = distinct !DILexicalBlock(scope: !6373, file: !3, line: 1811, column: 12)
!6383 = !DILocation(line: 1811, column: 12, scope: !6382)
!6384 = !DILocation(line: 1811, column: 31, scope: !6382)
!6385 = !DILocation(line: 1811, column: 12, scope: !6373)
!6386 = !DILocation(line: 1812, column: 17, scope: !6382)
!6387 = !DILocation(line: 1812, column: 15, scope: !6382)
!6388 = !DILocation(line: 1812, column: 5, scope: !6382)
!6389 = !DILocation(line: 1813, column: 28, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6382, file: !3, line: 1813, column: 12)
!6391 = !DILocation(line: 1813, column: 12, scope: !6390)
!6392 = !DILocation(line: 1813, column: 12, scope: !6382)
!6393 = !DILocation(line: 1815, column: 7, scope: !6394)
!6394 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 1814, column: 5)
!6395 = !DILocation(line: 1816, column: 19, scope: !6394)
!6396 = !DILocation(line: 1816, column: 17, scope: !6394)
!6397 = !DILocation(line: 1817, column: 21, scope: !6394)
!6398 = !DILocation(line: 1818, column: 5, scope: !6394)
!6399 = !DILocation(line: 1819, column: 25, scope: !6400)
!6400 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 1819, column: 12)
!6401 = !DILocation(line: 1819, column: 12, scope: !6400)
!6402 = !DILocation(line: 1819, column: 31, scope: !6400)
!6403 = !DILocation(line: 1819, column: 12, scope: !6390)
!6404 = !DILocation(line: 1820, column: 17, scope: !6400)
!6405 = !DILocation(line: 1820, column: 15, scope: !6400)
!6406 = !DILocation(line: 1820, column: 5, scope: !6400)
!6407 = !DILocation(line: 1822, column: 5, scope: !6400)
!6408 = !DILocation(line: 1824, column: 8, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 1824, column: 7)
!6410 = !DILocation(line: 1824, column: 7, scope: !6332)
!6411 = !DILocation(line: 1825, column: 5, scope: !6409)
!6412 = !DILocation(line: 1832, column: 8, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6332, file: !3, line: 1832, column: 7)
!6414 = !DILocation(line: 1832, column: 31, scope: !6413)
!6415 = !DILocation(line: 1833, column: 8, scope: !6413)
!6416 = !DILocation(line: 1833, column: 12, scope: !6413)
!6417 = !DILocation(line: 1834, column: 12, scope: !6413)
!6418 = !DILocation(line: 1834, column: 42, scope: !6413)
!6419 = !DILocation(line: 1834, column: 53, scope: !6413)
!6420 = !DILocation(line: 1834, column: 15, scope: !6413)
!6421 = !DILocation(line: 1835, column: 7, scope: !6413)
!6422 = !DILocation(line: 1835, column: 40, scope: !6413)
!6423 = !DILocation(line: 1835, column: 46, scope: !6413)
!6424 = !DILocation(line: 1835, column: 10, scope: !6413)
!6425 = !DILocation(line: 1832, column: 7, scope: !6332)
!6426 = !DILocation(line: 1842, column: 11, scope: !6427)
!6427 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 1842, column: 11)
!6428 = distinct !DILexicalBlock(scope: !6413, file: !3, line: 1836, column: 3)
!6429 = !DILocation(line: 1842, column: 21, scope: !6427)
!6430 = !DILocation(line: 1842, column: 25, scope: !6427)
!6431 = !DILocation(line: 1842, column: 36, scope: !6427)
!6432 = !DILocation(line: 1842, column: 11, scope: !6428)
!6433 = !DILocation(line: 1844, column: 13, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6427, file: !3, line: 1843, column: 2)
!6435 = !DILocation(line: 1844, column: 4, scope: !6434)
!6436 = !DILocation(line: 1845, column: 23, scope: !6434)
!6437 = !DILocation(line: 1845, column: 34, scope: !6434)
!6438 = !DILocation(line: 1845, column: 43, scope: !6434)
!6439 = !DILocation(line: 1845, column: 4, scope: !6434)
!6440 = !DILocation(line: 1846, column: 13, scope: !6434)
!6441 = !DILocation(line: 1846, column: 4, scope: !6434)
!6442 = !DILocation(line: 1847, column: 24, scope: !6434)
!6443 = !DILocation(line: 1847, column: 35, scope: !6434)
!6444 = !DILocation(line: 1847, column: 47, scope: !6434)
!6445 = !DILocation(line: 1847, column: 4, scope: !6434)
!6446 = !DILocation(line: 1848, column: 20, scope: !6434)
!6447 = !DILocation(line: 1848, column: 11, scope: !6434)
!6448 = !DILocation(line: 1849, column: 2, scope: !6434)
!6449 = !DILocation(line: 1851, column: 23, scope: !6428)
!6450 = !DILocation(line: 1853, column: 11, scope: !6451)
!6451 = distinct !DILexicalBlock(scope: !6428, file: !3, line: 1853, column: 11)
!6452 = !DILocation(line: 1854, column: 4, scope: !6451)
!6453 = !DILocation(line: 1854, column: 35, scope: !6451)
!6454 = !DILocation(line: 1854, column: 46, scope: !6451)
!6455 = !DILocation(line: 1854, column: 8, scope: !6451)
!6456 = !DILocation(line: 1853, column: 11, scope: !6428)
!6457 = !DILocation(line: 1855, column: 15, scope: !6451)
!6458 = !DILocation(line: 1855, column: 13, scope: !6451)
!6459 = !DILocation(line: 1855, column: 2, scope: !6451)
!6460 = !DILocation(line: 1857, column: 39, scope: !6428)
!6461 = !DILocation(line: 1857, column: 44, scope: !6428)
!6462 = !DILocation(line: 1857, column: 7, scope: !6428)
!6463 = !DILocation(line: 1862, column: 39, scope: !6428)
!6464 = !DILocation(line: 1862, column: 28, scope: !6428)
!6465 = !DILocation(line: 1862, column: 7, scope: !6428)
!6466 = !DILocation(line: 1863, column: 3, scope: !6428)
!6467 = !DILocation(line: 1864, column: 1, scope: !6332)
!6468 = distinct !DISubprogram(name: "record_equivalences_from_stmt", scope: !3, file: !3, line: 1873, type: !6469, scopeLine: 1874, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6469 = !DISubroutineType(types: !6470)
!6470 = !{null, !1926, !1643}
!6471 = !DILocalVariable(name: "stmt", arg: 1, scope: !6468, file: !3, line: 1873, type: !1926)
!6472 = !DILocation(line: 1873, column: 39, scope: !6468)
!6473 = !DILocalVariable(name: "may_optimize_p", arg: 2, scope: !6468, file: !3, line: 1873, type: !1643)
!6474 = !DILocation(line: 1873, column: 49, scope: !6468)
!6475 = !DILocalVariable(name: "lhs", scope: !6468, file: !3, line: 1875, type: !1661)
!6476 = !DILocation(line: 1875, column: 8, scope: !6468)
!6477 = !DILocalVariable(name: "lhs_code", scope: !6468, file: !3, line: 1876, type: !317)
!6478 = !DILocation(line: 1876, column: 18, scope: !6468)
!6479 = !DILocation(line: 1878, column: 3, scope: !6468)
!6480 = !DILocation(line: 1880, column: 28, scope: !6468)
!6481 = !DILocation(line: 1880, column: 9, scope: !6468)
!6482 = !DILocation(line: 1880, column: 7, scope: !6468)
!6483 = !DILocation(line: 1881, column: 14, scope: !6468)
!6484 = !DILocation(line: 1881, column: 12, scope: !6468)
!6485 = !DILocation(line: 1883, column: 7, scope: !6486)
!6486 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 1883, column: 7)
!6487 = !DILocation(line: 1883, column: 16, scope: !6486)
!6488 = !DILocation(line: 1884, column: 7, scope: !6486)
!6489 = !DILocation(line: 1884, column: 34, scope: !6486)
!6490 = !DILocation(line: 1884, column: 10, scope: !6486)
!6491 = !DILocation(line: 1883, column: 7, scope: !6468)
!6492 = !DILocalVariable(name: "rhs", scope: !6493, file: !3, line: 1886, type: !1661)
!6493 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 1885, column: 5)
!6494 = !DILocation(line: 1886, column: 12, scope: !6493)
!6495 = !DILocation(line: 1886, column: 38, scope: !6493)
!6496 = !DILocation(line: 1886, column: 18, scope: !6493)
!6497 = !DILocation(line: 1894, column: 11, scope: !6498)
!6498 = distinct !DILexicalBlock(scope: !6493, file: !3, line: 1894, column: 11)
!6499 = !DILocation(line: 1895, column: 4, scope: !6498)
!6500 = !DILocation(line: 1895, column: 8, scope: !6498)
!6501 = !DILocation(line: 1895, column: 24, scope: !6498)
!6502 = !DILocation(line: 1896, column: 8, scope: !6498)
!6503 = !DILocation(line: 1896, column: 36, scope: !6498)
!6504 = !DILocation(line: 1896, column: 11, scope: !6498)
!6505 = !DILocation(line: 1894, column: 11, scope: !6493)
!6506 = !DILocation(line: 1898, column: 6, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6508, file: !3, line: 1898, column: 6)
!6508 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 1897, column: 7)
!6509 = !DILocation(line: 1898, column: 16, scope: !6507)
!6510 = !DILocation(line: 1898, column: 20, scope: !6507)
!6511 = !DILocation(line: 1898, column: 31, scope: !6507)
!6512 = !DILocation(line: 1898, column: 6, scope: !6508)
!6513 = !DILocation(line: 1900, column: 15, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6507, file: !3, line: 1899, column: 4)
!6515 = !DILocation(line: 1900, column: 6, scope: !6514)
!6516 = !DILocation(line: 1901, column: 26, scope: !6514)
!6517 = !DILocation(line: 1901, column: 37, scope: !6514)
!6518 = !DILocation(line: 1901, column: 6, scope: !6514)
!6519 = !DILocation(line: 1902, column: 15, scope: !6514)
!6520 = !DILocation(line: 1902, column: 6, scope: !6514)
!6521 = !DILocation(line: 1903, column: 26, scope: !6514)
!6522 = !DILocation(line: 1903, column: 37, scope: !6514)
!6523 = !DILocation(line: 1903, column: 6, scope: !6514)
!6524 = !DILocation(line: 1904, column: 15, scope: !6514)
!6525 = !DILocation(line: 1904, column: 6, scope: !6514)
!6526 = !DILocation(line: 1905, column: 4, scope: !6514)
!6527 = !DILocation(line: 1907, column: 22, scope: !6508)
!6528 = !DILocation(line: 1907, column: 27, scope: !6508)
!6529 = !DILocation(line: 1907, column: 2, scope: !6508)
!6530 = !DILocation(line: 1908, column: 7, scope: !6508)
!6531 = !DILocation(line: 1909, column: 5, scope: !6493)
!6532 = !DILocation(line: 1915, column: 33, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 1915, column: 7)
!6534 = !DILocation(line: 1915, column: 8, scope: !6533)
!6535 = !DILocation(line: 1916, column: 7, scope: !6533)
!6536 = !DILocation(line: 1916, column: 38, scope: !6533)
!6537 = !DILocation(line: 1916, column: 10, scope: !6533)
!6538 = !DILocation(line: 1917, column: 7, scope: !6533)
!6539 = !DILocation(line: 1917, column: 34, scope: !6533)
!6540 = !DILocation(line: 1917, column: 10, scope: !6533)
!6541 = !DILocation(line: 1918, column: 7, scope: !6533)
!6542 = !DILocation(line: 1918, column: 11, scope: !6533)
!6543 = !DILocation(line: 1918, column: 49, scope: !6533)
!6544 = !DILocation(line: 1919, column: 4, scope: !6533)
!6545 = !DILocation(line: 1919, column: 52, scope: !6533)
!6546 = !DILocation(line: 1919, column: 32, scope: !6533)
!6547 = !DILocation(line: 1919, column: 7, scope: !6533)
!6548 = !DILocation(line: 1920, column: 7, scope: !6533)
!6549 = !DILocation(line: 1920, column: 26, scope: !6533)
!6550 = !DILocation(line: 1920, column: 11, scope: !6533)
!6551 = !DILocation(line: 1915, column: 7, scope: !6468)
!6552 = !DILocalVariable(name: "rhs", scope: !6553, file: !3, line: 1922, type: !1661)
!6553 = distinct !DILexicalBlock(scope: !6533, file: !3, line: 1921, column: 5)
!6554 = !DILocation(line: 1922, column: 12, scope: !6553)
!6555 = !DILocation(line: 1922, column: 38, scope: !6553)
!6556 = !DILocation(line: 1922, column: 18, scope: !6553)
!6557 = !DILocalVariable(name: "new_stmt", scope: !6553, file: !3, line: 1923, type: !1926)
!6558 = !DILocation(line: 1923, column: 14, scope: !6553)
!6559 = !DILocation(line: 1926, column: 11, scope: !6560)
!6560 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 1926, column: 11)
!6561 = !DILocation(line: 1926, column: 27, scope: !6560)
!6562 = !DILocation(line: 1926, column: 11, scope: !6553)
!6563 = !DILocalVariable(name: "defstmt", scope: !6564, file: !3, line: 1937, type: !1926)
!6564 = distinct !DILexicalBlock(scope: !6560, file: !3, line: 1927, column: 9)
!6565 = !DILocation(line: 1937, column: 18, scope: !6564)
!6566 = !DILocation(line: 1937, column: 28, scope: !6564)
!6567 = !DILocation(line: 1938, column: 22, scope: !6564)
!6568 = !DILocation(line: 1938, column: 20, scope: !6564)
!6569 = !DILocation(line: 1939, column: 37, scope: !6564)
!6570 = !DILocation(line: 1939, column: 11, scope: !6564)
!6571 = !DILocation(line: 1939, column: 35, scope: !6564)
!6572 = !DILocation(line: 1940, column: 9, scope: !6564)
!6573 = !DILocation(line: 1942, column: 20, scope: !6560)
!6574 = !DILocation(line: 1942, column: 18, scope: !6560)
!6575 = !DILocation(line: 1944, column: 24, scope: !6553)
!6576 = !DILocation(line: 1944, column: 47, scope: !6553)
!6577 = !DILocation(line: 1944, column: 34, scope: !6553)
!6578 = !DILocation(line: 1944, column: 7, scope: !6553)
!6579 = !DILocation(line: 1948, column: 26, scope: !6553)
!6580 = !DILocation(line: 1948, column: 7, scope: !6553)
!6581 = !DILocation(line: 1949, column: 5, scope: !6553)
!6582 = !DILocation(line: 1950, column: 1, scope: !6468)
!6583 = distinct !DISubprogram(name: "gimple_location", scope: !594, file: !594, line: 1139, type: !6584, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6584 = !DISubroutineType(types: !6585)
!6585 = !{!1784, !3418}
!6586 = !DILocalVariable(name: "g", arg: 1, scope: !6583, file: !594, line: 1139, type: !3418)
!6587 = !DILocation(line: 1139, column: 31, scope: !6583)
!6588 = !DILocation(line: 1141, column: 10, scope: !6583)
!6589 = !DILocation(line: 1141, column: 13, scope: !6583)
!6590 = !DILocation(line: 1141, column: 20, scope: !6583)
!6591 = !DILocation(line: 1141, column: 3, scope: !6583)
!6592 = distinct !DISubprogram(name: "gimple_cond_code", scope: !594, file: !594, line: 2221, type: !6593, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6593 = !DISubroutineType(types: !6594)
!6594 = !{!317, !3418}
!6595 = !DILocalVariable(name: "gs", arg: 1, scope: !6592, file: !594, line: 2221, type: !3418)
!6596 = !DILocation(line: 2221, column: 32, scope: !6592)
!6597 = !DILocation(line: 2224, column: 27, scope: !6592)
!6598 = !DILocation(line: 2224, column: 31, scope: !6592)
!6599 = !DILocation(line: 2224, column: 38, scope: !6592)
!6600 = !DILocation(line: 2224, column: 3, scope: !6592)
!6601 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !594, file: !594, line: 2241, type: !3500, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6602 = !DILocalVariable(name: "gs", arg: 1, scope: !6601, file: !594, line: 2241, type: !3418)
!6603 = !DILocation(line: 2241, column: 31, scope: !6601)
!6604 = !DILocation(line: 2244, column: 21, scope: !6601)
!6605 = !DILocation(line: 2244, column: 10, scope: !6601)
!6606 = !DILocation(line: 2244, column: 3, scope: !6601)
!6607 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !594, file: !594, line: 2271, type: !3500, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6608 = !DILocalVariable(name: "gs", arg: 1, scope: !6607, file: !594, line: 2271, type: !3418)
!6609 = !DILocation(line: 2271, column: 31, scope: !6607)
!6610 = !DILocation(line: 2274, column: 21, scope: !6607)
!6611 = !DILocation(line: 2274, column: 10, scope: !6607)
!6612 = !DILocation(line: 2274, column: 3, scope: !6607)
!6613 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !594, file: !594, line: 2231, type: !6614, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6614 = !DISubroutineType(types: !6615)
!6615 = !{null, !1926, !317}
!6616 = !DILocalVariable(name: "gs", arg: 1, scope: !6613, file: !594, line: 2231, type: !1926)
!6617 = !DILocation(line: 2231, column: 30, scope: !6613)
!6618 = !DILocalVariable(name: "code", arg: 2, scope: !6613, file: !594, line: 2231, type: !317)
!6619 = !DILocation(line: 2231, column: 49, scope: !6613)
!6620 = !DILocation(line: 2234, column: 24, scope: !6613)
!6621 = !DILocation(line: 2234, column: 3, scope: !6613)
!6622 = !DILocation(line: 2234, column: 7, scope: !6613)
!6623 = !DILocation(line: 2234, column: 14, scope: !6613)
!6624 = !DILocation(line: 2234, column: 22, scope: !6613)
!6625 = !DILocation(line: 2235, column: 1, scope: !6613)
!6626 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !594, file: !594, line: 2261, type: !6627, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6627 = !DISubroutineType(types: !6628)
!6628 = !{null, !1926, !1661}
!6629 = !DILocalVariable(name: "gs", arg: 1, scope: !6626, file: !594, line: 2261, type: !1926)
!6630 = !DILocation(line: 2261, column: 29, scope: !6626)
!6631 = !DILocalVariable(name: "lhs", arg: 2, scope: !6626, file: !594, line: 2261, type: !1661)
!6632 = !DILocation(line: 2261, column: 38, scope: !6626)
!6633 = !DILocation(line: 2264, column: 18, scope: !6626)
!6634 = !DILocation(line: 2264, column: 25, scope: !6626)
!6635 = !DILocation(line: 2264, column: 3, scope: !6626)
!6636 = !DILocation(line: 2265, column: 1, scope: !6626)
!6637 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !594, file: !594, line: 2292, type: !6627, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6638 = !DILocalVariable(name: "gs", arg: 1, scope: !6637, file: !594, line: 2292, type: !1926)
!6639 = !DILocation(line: 2292, column: 29, scope: !6637)
!6640 = !DILocalVariable(name: "rhs", arg: 2, scope: !6637, file: !594, line: 2292, type: !1661)
!6641 = !DILocation(line: 2292, column: 38, scope: !6637)
!6642 = !DILocation(line: 2295, column: 18, scope: !6637)
!6643 = !DILocation(line: 2295, column: 25, scope: !6637)
!6644 = !DILocation(line: 2295, column: 3, scope: !6637)
!6645 = !DILocation(line: 2296, column: 1, scope: !6637)
!6646 = distinct !DISubprogram(name: "update_stmt", scope: !594, file: !594, line: 1456, type: !3975, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6647 = !DILocalVariable(name: "s", arg: 1, scope: !6646, file: !594, line: 1456, type: !1926)
!6648 = !DILocation(line: 1456, column: 21, scope: !6646)
!6649 = !DILocation(line: 1458, column: 23, scope: !6650)
!6650 = distinct !DILexicalBlock(scope: !6646, file: !594, line: 1458, column: 7)
!6651 = !DILocation(line: 1458, column: 7, scope: !6650)
!6652 = !DILocation(line: 1458, column: 7, scope: !6646)
!6653 = !DILocation(line: 1460, column: 28, scope: !6654)
!6654 = distinct !DILexicalBlock(scope: !6650, file: !594, line: 1459, column: 5)
!6655 = !DILocation(line: 1460, column: 7, scope: !6654)
!6656 = !DILocation(line: 1461, column: 29, scope: !6654)
!6657 = !DILocation(line: 1461, column: 7, scope: !6654)
!6658 = !DILocation(line: 1462, column: 5, scope: !6654)
!6659 = !DILocation(line: 1463, column: 1, scope: !6646)
!6660 = distinct !DISubprogram(name: "gimple_set_op", scope: !594, file: !594, line: 1663, type: !6661, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6661 = !DISubroutineType(types: !6662)
!6662 = !{null, !1926, !7, !1661}
!6663 = !DILocalVariable(name: "gs", arg: 1, scope: !6660, file: !594, line: 1663, type: !1926)
!6664 = !DILocation(line: 1663, column: 23, scope: !6660)
!6665 = !DILocalVariable(name: "i", arg: 2, scope: !6660, file: !594, line: 1663, type: !7)
!6666 = !DILocation(line: 1663, column: 36, scope: !6660)
!6667 = !DILocalVariable(name: "op", arg: 3, scope: !6660, file: !594, line: 1663, type: !1661)
!6668 = !DILocation(line: 1663, column: 44, scope: !6660)
!6669 = !DILocation(line: 1665, column: 3, scope: !6660)
!6670 = !DILocation(line: 1671, column: 24, scope: !6660)
!6671 = !DILocation(line: 1671, column: 15, scope: !6660)
!6672 = !DILocation(line: 1671, column: 3, scope: !6660)
!6673 = !DILocation(line: 1671, column: 19, scope: !6660)
!6674 = !DILocation(line: 1671, column: 22, scope: !6660)
!6675 = !DILocation(line: 1672, column: 1, scope: !6660)
!6676 = distinct !DISubprogram(name: "gimple_has_ops", scope: !594, file: !594, line: 1274, type: !4559, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6677 = !DILocalVariable(name: "g", arg: 1, scope: !6676, file: !594, line: 1274, type: !3418)
!6678 = !DILocation(line: 1274, column: 30, scope: !6676)
!6679 = !DILocation(line: 1276, column: 23, scope: !6676)
!6680 = !DILocation(line: 1276, column: 10, scope: !6676)
!6681 = !DILocation(line: 1276, column: 26, scope: !6676)
!6682 = !DILocation(line: 1276, column: 41, scope: !6676)
!6683 = !DILocation(line: 1276, column: 57, scope: !6676)
!6684 = !DILocation(line: 1276, column: 44, scope: !6676)
!6685 = !DILocation(line: 1276, column: 60, scope: !6676)
!6686 = !DILocation(line: 0, scope: !6676)
!6687 = !DILocation(line: 1276, column: 3, scope: !6676)
!6688 = distinct !DISubprogram(name: "gimple_num_ops", scope: !594, file: !594, line: 1596, type: !3509, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6689 = !DILocalVariable(name: "gs", arg: 1, scope: !6688, file: !594, line: 1596, type: !3418)
!6690 = !DILocation(line: 1596, column: 30, scope: !6688)
!6691 = !DILocation(line: 1598, column: 10, scope: !6688)
!6692 = !DILocation(line: 1598, column: 14, scope: !6688)
!6693 = !DILocation(line: 1598, column: 21, scope: !6688)
!6694 = !DILocation(line: 1598, column: 3, scope: !6688)
!6695 = distinct !DISubprogram(name: "gimple_ops", scope: !594, file: !594, line: 1614, type: !6696, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6696 = !DISubroutineType(types: !6697)
!6697 = !{!1960, !1926}
!6698 = !DILocalVariable(name: "gs", arg: 1, scope: !6695, file: !594, line: 1614, type: !1926)
!6699 = !DILocation(line: 1614, column: 20, scope: !6695)
!6700 = !DILocalVariable(name: "off", scope: !6695, file: !594, line: 1616, type: !2071)
!6701 = !DILocation(line: 1616, column: 10, scope: !6695)
!6702 = !DILocation(line: 1621, column: 56, scope: !6695)
!6703 = !DILocation(line: 1621, column: 28, scope: !6695)
!6704 = !DILocation(line: 1621, column: 9, scope: !6695)
!6705 = !DILocation(line: 1621, column: 7, scope: !6695)
!6706 = !DILocation(line: 1622, column: 3, scope: !6695)
!6707 = !DILocation(line: 1624, column: 29, scope: !6695)
!6708 = !DILocation(line: 1624, column: 20, scope: !6695)
!6709 = !DILocation(line: 1624, column: 34, scope: !6695)
!6710 = !DILocation(line: 1624, column: 32, scope: !6695)
!6711 = !DILocation(line: 1624, column: 10, scope: !6695)
!6712 = !DILocation(line: 1624, column: 3, scope: !6695)
!6713 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !594, file: !594, line: 1073, type: !6714, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6714 = !DISubroutineType(types: !6715)
!6715 = !{!1519, !1926}
!6716 = !DILocalVariable(name: "gs", arg: 1, scope: !6713, file: !594, line: 1073, type: !1926)
!6717 = !DILocation(line: 1073, column: 36, scope: !6713)
!6718 = !DILocation(line: 1075, column: 37, scope: !6713)
!6719 = !DILocation(line: 1075, column: 24, scope: !6713)
!6720 = !DILocation(line: 1075, column: 10, scope: !6713)
!6721 = !DILocation(line: 1075, column: 3, scope: !6713)
!6722 = distinct !DISubprogram(name: "gss_for_code", scope: !594, file: !594, line: 1061, type: !6723, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6723 = !DISubroutineType(types: !6724)
!6724 = !{!1519, !593}
!6725 = !DILocalVariable(name: "code", arg: 1, scope: !6722, file: !594, line: 1061, type: !593)
!6726 = !DILocation(line: 1061, column: 32, scope: !6722)
!6727 = !DILocation(line: 1066, column: 24, scope: !6722)
!6728 = !DILocation(line: 1066, column: 10, scope: !6722)
!6729 = !DILocation(line: 1066, column: 3, scope: !6722)
!6730 = distinct !DISubprogram(name: "op_iter_init_use", scope: !3518, file: !3518, line: 768, type: !6731, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6731 = !DISubroutineType(types: !6732)
!6732 = !{!3050, !6733, !1926, !1643}
!6733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6226, size: 64)
!6734 = !DILocalVariable(name: "ptr", arg: 1, scope: !6730, file: !3518, line: 768, type: !6733)
!6735 = !DILocation(line: 768, column: 32, scope: !6730)
!6736 = !DILocalVariable(name: "stmt", arg: 2, scope: !6730, file: !3518, line: 768, type: !1926)
!6737 = !DILocation(line: 768, column: 44, scope: !6730)
!6738 = !DILocalVariable(name: "flags", arg: 3, scope: !6730, file: !3518, line: 768, type: !1643)
!6739 = !DILocation(line: 768, column: 54, scope: !6730)
!6740 = !DILocation(line: 770, column: 3, scope: !6730)
!6741 = !DILocation(line: 772, column: 17, scope: !6730)
!6742 = !DILocation(line: 772, column: 22, scope: !6730)
!6743 = !DILocation(line: 772, column: 28, scope: !6730)
!6744 = !DILocation(line: 772, column: 3, scope: !6730)
!6745 = !DILocation(line: 773, column: 3, scope: !6730)
!6746 = !DILocation(line: 773, column: 8, scope: !6730)
!6747 = !DILocation(line: 773, column: 18, scope: !6730)
!6748 = !DILocation(line: 774, column: 28, scope: !6730)
!6749 = !DILocation(line: 774, column: 10, scope: !6730)
!6750 = !DILocation(line: 774, column: 3, scope: !6730)
!6751 = distinct !DISubprogram(name: "op_iter_done", scope: !3518, file: !3518, line: 652, type: !6752, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6752 = !DISubroutineType(types: !6753)
!6753 = !{!1776, !6754}
!6754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6755, size: 64)
!6755 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6226)
!6756 = !DILocalVariable(name: "ptr", arg: 1, scope: !6751, file: !3518, line: 652, type: !6754)
!6757 = !DILocation(line: 652, column: 34, scope: !6751)
!6758 = !DILocation(line: 654, column: 10, scope: !6751)
!6759 = !DILocation(line: 654, column: 15, scope: !6751)
!6760 = !DILocation(line: 654, column: 3, scope: !6751)
!6761 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3518, file: !3518, line: 427, type: !6762, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6762 = !DISubroutineType(types: !6763)
!6763 = !{!1661, !3050}
!6764 = !DILocalVariable(name: "use", arg: 1, scope: !6761, file: !3518, line: 427, type: !3050)
!6765 = !DILocation(line: 427, column: 33, scope: !6761)
!6766 = !DILocation(line: 429, column: 12, scope: !6761)
!6767 = !DILocation(line: 429, column: 17, scope: !6761)
!6768 = !DILocation(line: 429, column: 10, scope: !6761)
!6769 = !DILocation(line: 429, column: 3, scope: !6761)
!6770 = distinct !DISubprogram(name: "cprop_operand", scope: !3, file: !3, line: 1956, type: !6771, scopeLine: 1957, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6771 = !DISubroutineType(types: !6772)
!6772 = !{null, !1926, !3050}
!6773 = !DILocalVariable(name: "stmt", arg: 1, scope: !6770, file: !3, line: 1956, type: !1926)
!6774 = !DILocation(line: 1956, column: 23, scope: !6770)
!6775 = !DILocalVariable(name: "op_p", arg: 2, scope: !6770, file: !3, line: 1956, type: !3050)
!6776 = !DILocation(line: 1956, column: 43, scope: !6770)
!6777 = !DILocalVariable(name: "val", scope: !6770, file: !3, line: 1958, type: !1661)
!6778 = !DILocation(line: 1958, column: 8, scope: !6770)
!6779 = !DILocalVariable(name: "op", scope: !6770, file: !3, line: 1959, type: !1661)
!6780 = !DILocation(line: 1959, column: 8, scope: !6770)
!6781 = !DILocation(line: 1959, column: 13, scope: !6770)
!6782 = !DILocation(line: 1964, column: 9, scope: !6770)
!6783 = !DILocation(line: 1964, column: 7, scope: !6770)
!6784 = !DILocation(line: 1965, column: 7, scope: !6785)
!6785 = distinct !DILexicalBlock(scope: !6770, file: !3, line: 1965, column: 7)
!6786 = !DILocation(line: 1965, column: 11, scope: !6785)
!6787 = !DILocation(line: 1965, column: 14, scope: !6785)
!6788 = !DILocation(line: 1965, column: 21, scope: !6785)
!6789 = !DILocation(line: 1965, column: 18, scope: !6785)
!6790 = !DILocation(line: 1965, column: 7, scope: !6770)
!6791 = !DILocation(line: 1972, column: 27, scope: !6792)
!6792 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 1972, column: 11)
!6793 = distinct !DILexicalBlock(scope: !6785, file: !3, line: 1966, column: 5)
!6794 = !DILocation(line: 1972, column: 12, scope: !6792)
!6795 = !DILocation(line: 1973, column: 4, scope: !6792)
!6796 = !DILocation(line: 1973, column: 8, scope: !6792)
!6797 = !DILocation(line: 1973, column: 24, scope: !6792)
!6798 = !DILocation(line: 1974, column: 8, scope: !6792)
!6799 = !DILocation(line: 1974, column: 26, scope: !6792)
!6800 = !DILocation(line: 1974, column: 11, scope: !6792)
!6801 = !DILocation(line: 1975, column: 8, scope: !6792)
!6802 = !DILocation(line: 1975, column: 28, scope: !6792)
!6803 = !DILocation(line: 1975, column: 11, scope: !6792)
!6804 = !DILocation(line: 1975, column: 53, scope: !6792)
!6805 = !DILocation(line: 1975, column: 36, scope: !6792)
!6806 = !DILocation(line: 1975, column: 33, scope: !6792)
!6807 = !DILocation(line: 1972, column: 11, scope: !6793)
!6808 = !DILocation(line: 1976, column: 2, scope: !6792)
!6809 = !DILocation(line: 1979, column: 24, scope: !6810)
!6810 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 1979, column: 11)
!6811 = !DILocation(line: 1979, column: 11, scope: !6810)
!6812 = !DILocation(line: 1979, column: 30, scope: !6810)
!6813 = !DILocation(line: 1980, column: 4, scope: !6810)
!6814 = !DILocation(line: 1980, column: 37, scope: !6810)
!6815 = !DILocation(line: 1980, column: 8, scope: !6810)
!6816 = !DILocation(line: 1979, column: 11, scope: !6793)
!6817 = !DILocation(line: 1981, column: 2, scope: !6810)
!6818 = !DILocation(line: 1986, column: 32, scope: !6819)
!6819 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 1986, column: 11)
!6820 = !DILocation(line: 1986, column: 36, scope: !6819)
!6821 = !DILocation(line: 1986, column: 12, scope: !6819)
!6822 = !DILocation(line: 1986, column: 11, scope: !6793)
!6823 = !DILocation(line: 1987, column: 2, scope: !6819)
!6824 = !DILocation(line: 1991, column: 11, scope: !6825)
!6825 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 1991, column: 11)
!6826 = !DILocation(line: 1992, column: 4, scope: !6825)
!6827 = !DILocation(line: 1992, column: 7, scope: !6825)
!6828 = !DILocation(line: 1993, column: 4, scope: !6825)
!6829 = !DILocation(line: 1993, column: 27, scope: !6825)
!6830 = !DILocation(line: 1993, column: 7, scope: !6825)
!6831 = !DILocation(line: 1994, column: 4, scope: !6825)
!6832 = !DILocation(line: 1994, column: 33, scope: !6825)
!6833 = !DILocation(line: 1994, column: 8, scope: !6825)
!6834 = !DILocation(line: 1991, column: 11, scope: !6793)
!6835 = !DILocation(line: 1995, column: 2, scope: !6825)
!6836 = !DILocation(line: 2002, column: 31, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2002, column: 11)
!6838 = !DILocation(line: 2002, column: 11, scope: !6837)
!6839 = !DILocation(line: 2002, column: 58, scope: !6837)
!6840 = !DILocation(line: 2002, column: 38, scope: !6837)
!6841 = !DILocation(line: 2002, column: 36, scope: !6837)
!6842 = !DILocation(line: 2002, column: 11, scope: !6793)
!6843 = !DILocation(line: 2003, column: 2, scope: !6837)
!6844 = !DILocation(line: 2007, column: 11, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2007, column: 11)
!6846 = !DILocation(line: 2007, column: 27, scope: !6845)
!6847 = !DILocation(line: 2008, column: 4, scope: !6845)
!6848 = !DILocation(line: 2008, column: 30, scope: !6845)
!6849 = !DILocation(line: 2008, column: 7, scope: !6845)
!6850 = !DILocation(line: 2007, column: 11, scope: !6793)
!6851 = !DILocation(line: 2009, column: 2, scope: !6845)
!6852 = !DILocation(line: 2012, column: 11, scope: !6853)
!6853 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2012, column: 11)
!6854 = !DILocation(line: 2012, column: 21, scope: !6853)
!6855 = !DILocation(line: 2012, column: 25, scope: !6853)
!6856 = !DILocation(line: 2012, column: 36, scope: !6853)
!6857 = !DILocation(line: 2012, column: 11, scope: !6793)
!6858 = !DILocation(line: 2014, column: 13, scope: !6859)
!6859 = distinct !DILexicalBlock(scope: !6853, file: !3, line: 2013, column: 2)
!6860 = !DILocation(line: 2014, column: 4, scope: !6859)
!6861 = !DILocation(line: 2015, column: 24, scope: !6859)
!6862 = !DILocation(line: 2015, column: 35, scope: !6859)
!6863 = !DILocation(line: 2015, column: 39, scope: !6859)
!6864 = !DILocation(line: 2015, column: 4, scope: !6859)
!6865 = !DILocation(line: 2016, column: 13, scope: !6859)
!6866 = !DILocation(line: 2017, column: 7, scope: !6859)
!6867 = !DILocation(line: 2017, column: 23, scope: !6859)
!6868 = !DILocation(line: 2016, column: 4, scope: !6859)
!6869 = !DILocation(line: 2018, column: 24, scope: !6859)
!6870 = !DILocation(line: 2018, column: 35, scope: !6859)
!6871 = !DILocation(line: 2018, column: 40, scope: !6859)
!6872 = !DILocation(line: 2018, column: 4, scope: !6859)
!6873 = !DILocation(line: 2019, column: 13, scope: !6859)
!6874 = !DILocation(line: 2019, column: 4, scope: !6859)
!6875 = !DILocation(line: 2020, column: 2, scope: !6859)
!6876 = !DILocation(line: 2022, column: 11, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2022, column: 11)
!6878 = !DILocation(line: 2022, column: 27, scope: !6877)
!6879 = !DILocation(line: 2022, column: 11, scope: !6793)
!6880 = !DILocation(line: 2023, column: 26, scope: !6877)
!6881 = !DILocation(line: 2023, column: 2, scope: !6877)
!6882 = !DILocation(line: 2025, column: 25, scope: !6877)
!6883 = !DILocation(line: 2027, column: 24, scope: !6793)
!6884 = !DILocation(line: 2027, column: 30, scope: !6793)
!6885 = !DILocation(line: 2027, column: 7, scope: !6793)
!6886 = !DILocation(line: 2032, column: 28, scope: !6793)
!6887 = !DILocation(line: 2032, column: 7, scope: !6793)
!6888 = !DILocation(line: 2033, column: 5, scope: !6793)
!6889 = !DILocation(line: 2034, column: 1, scope: !6770)
!6890 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3518, file: !3518, line: 659, type: !6891, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6891 = !DISubroutineType(types: !6892)
!6892 = !{!3050, !6733}
!6893 = !DILocalVariable(name: "ptr", arg: 1, scope: !6890, file: !3518, line: 659, type: !6733)
!6894 = !DILocation(line: 659, column: 32, scope: !6890)
!6895 = !DILocalVariable(name: "use_p", scope: !6890, file: !3518, line: 661, type: !3050)
!6896 = !DILocation(line: 661, column: 17, scope: !6890)
!6897 = !DILocation(line: 665, column: 7, scope: !6898)
!6898 = distinct !DILexicalBlock(scope: !6890, file: !3518, line: 665, column: 7)
!6899 = !DILocation(line: 665, column: 12, scope: !6898)
!6900 = !DILocation(line: 665, column: 7, scope: !6890)
!6901 = !DILocation(line: 667, column: 15, scope: !6902)
!6902 = distinct !DILexicalBlock(scope: !6898, file: !3518, line: 666, column: 5)
!6903 = !DILocation(line: 667, column: 13, scope: !6902)
!6904 = !DILocation(line: 668, column: 19, scope: !6902)
!6905 = !DILocation(line: 668, column: 24, scope: !6902)
!6906 = !DILocation(line: 668, column: 30, scope: !6902)
!6907 = !DILocation(line: 668, column: 7, scope: !6902)
!6908 = !DILocation(line: 668, column: 12, scope: !6902)
!6909 = !DILocation(line: 668, column: 17, scope: !6902)
!6910 = !DILocation(line: 669, column: 14, scope: !6902)
!6911 = !DILocation(line: 669, column: 7, scope: !6902)
!6912 = !DILocation(line: 671, column: 7, scope: !6913)
!6913 = distinct !DILexicalBlock(scope: !6890, file: !3518, line: 671, column: 7)
!6914 = !DILocation(line: 671, column: 12, scope: !6913)
!6915 = !DILocation(line: 671, column: 20, scope: !6913)
!6916 = !DILocation(line: 671, column: 25, scope: !6913)
!6917 = !DILocation(line: 671, column: 18, scope: !6913)
!6918 = !DILocation(line: 671, column: 7, scope: !6890)
!6919 = !DILocation(line: 673, column: 14, scope: !6920)
!6920 = distinct !DILexicalBlock(scope: !6913, file: !3518, line: 672, column: 5)
!6921 = !DILocation(line: 673, column: 7, scope: !6920)
!6922 = !DILocation(line: 675, column: 3, scope: !6890)
!6923 = !DILocation(line: 675, column: 8, scope: !6890)
!6924 = !DILocation(line: 675, column: 13, scope: !6890)
!6925 = !DILocation(line: 676, column: 3, scope: !6890)
!6926 = !DILocation(line: 677, column: 1, scope: !6890)
!6927 = distinct !DISubprogram(name: "op_iter_init", scope: !3518, file: !3518, line: 742, type: !6928, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!6928 = !DISubroutineType(types: !6929)
!6929 = !{null, !6733, !1926, !1643}
!6930 = !DILocalVariable(name: "ptr", arg: 1, scope: !6927, file: !3518, line: 742, type: !6733)
!6931 = !DILocation(line: 742, column: 28, scope: !6927)
!6932 = !DILocalVariable(name: "stmt", arg: 2, scope: !6927, file: !3518, line: 742, type: !1926)
!6933 = !DILocation(line: 742, column: 40, scope: !6927)
!6934 = !DILocalVariable(name: "flags", arg: 3, scope: !6927, file: !3518, line: 742, type: !1643)
!6935 = !DILocation(line: 742, column: 50, scope: !6927)
!6936 = !DILocation(line: 746, column: 3, scope: !6927)
!6937 = !DILocation(line: 748, column: 16, scope: !6927)
!6938 = !DILocation(line: 748, column: 22, scope: !6927)
!6939 = !DILocation(line: 748, column: 15, scope: !6927)
!6940 = !DILocation(line: 748, column: 68, scope: !6927)
!6941 = !DILocation(line: 748, column: 52, scope: !6927)
!6942 = !DILocation(line: 748, column: 3, scope: !6927)
!6943 = !DILocation(line: 748, column: 8, scope: !6927)
!6944 = !DILocation(line: 748, column: 13, scope: !6927)
!6945 = !DILocation(line: 749, column: 9, scope: !6946)
!6946 = distinct !DILexicalBlock(scope: !6927, file: !3518, line: 749, column: 7)
!6947 = !DILocation(line: 749, column: 15, scope: !6946)
!6948 = !DILocation(line: 750, column: 7, scope: !6946)
!6949 = !DILocation(line: 750, column: 10, scope: !6946)
!6950 = !DILocation(line: 750, column: 15, scope: !6946)
!6951 = !DILocation(line: 751, column: 7, scope: !6946)
!6952 = !DILocation(line: 751, column: 23, scope: !6946)
!6953 = !DILocation(line: 751, column: 10, scope: !6946)
!6954 = !DILocation(line: 751, column: 29, scope: !6946)
!6955 = !DILocation(line: 749, column: 7, scope: !6927)
!6956 = !DILocation(line: 752, column: 17, scope: !6946)
!6957 = !DILocation(line: 752, column: 22, scope: !6946)
!6958 = !DILocation(line: 752, column: 28, scope: !6946)
!6959 = !DILocation(line: 752, column: 5, scope: !6946)
!6960 = !DILocation(line: 752, column: 10, scope: !6946)
!6961 = !DILocation(line: 752, column: 15, scope: !6946)
!6962 = !DILocation(line: 753, column: 16, scope: !6927)
!6963 = !DILocation(line: 753, column: 22, scope: !6927)
!6964 = !DILocation(line: 753, column: 15, scope: !6927)
!6965 = !DILocation(line: 753, column: 68, scope: !6927)
!6966 = !DILocation(line: 753, column: 52, scope: !6927)
!6967 = !DILocation(line: 753, column: 3, scope: !6927)
!6968 = !DILocation(line: 753, column: 8, scope: !6927)
!6969 = !DILocation(line: 753, column: 13, scope: !6927)
!6970 = !DILocation(line: 754, column: 9, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6927, file: !3518, line: 754, column: 7)
!6972 = !DILocation(line: 754, column: 15, scope: !6971)
!6973 = !DILocation(line: 755, column: 7, scope: !6971)
!6974 = !DILocation(line: 755, column: 10, scope: !6971)
!6975 = !DILocation(line: 755, column: 15, scope: !6971)
!6976 = !DILocation(line: 756, column: 7, scope: !6971)
!6977 = !DILocation(line: 756, column: 23, scope: !6971)
!6978 = !DILocation(line: 756, column: 10, scope: !6971)
!6979 = !DILocation(line: 756, column: 29, scope: !6971)
!6980 = !DILocation(line: 754, column: 7, scope: !6927)
!6981 = !DILocation(line: 757, column: 17, scope: !6971)
!6982 = !DILocation(line: 757, column: 22, scope: !6971)
!6983 = !DILocation(line: 757, column: 28, scope: !6971)
!6984 = !DILocation(line: 757, column: 5, scope: !6971)
!6985 = !DILocation(line: 757, column: 10, scope: !6971)
!6986 = !DILocation(line: 757, column: 15, scope: !6971)
!6987 = !DILocation(line: 758, column: 3, scope: !6927)
!6988 = !DILocation(line: 758, column: 8, scope: !6927)
!6989 = !DILocation(line: 758, column: 13, scope: !6927)
!6990 = !DILocation(line: 760, column: 3, scope: !6927)
!6991 = !DILocation(line: 760, column: 8, scope: !6927)
!6992 = !DILocation(line: 760, column: 14, scope: !6927)
!6993 = !DILocation(line: 761, column: 3, scope: !6927)
!6994 = !DILocation(line: 761, column: 8, scope: !6927)
!6995 = !DILocation(line: 761, column: 16, scope: !6927)
!6996 = !DILocation(line: 762, column: 3, scope: !6927)
!6997 = !DILocation(line: 762, column: 8, scope: !6927)
!6998 = !DILocation(line: 762, column: 17, scope: !6927)
!6999 = !DILocation(line: 763, column: 1, scope: !6927)
!7000 = distinct !DISubprogram(name: "gimple_def_ops", scope: !594, file: !594, line: 1292, type: !7001, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7001 = !DISubroutineType(types: !7002)
!7002 = !{!1955, !3418}
!7003 = !DILocalVariable(name: "g", arg: 1, scope: !7000, file: !594, line: 1292, type: !3418)
!7004 = !DILocation(line: 1292, column: 30, scope: !7000)
!7005 = !DILocation(line: 1294, column: 24, scope: !7006)
!7006 = distinct !DILexicalBlock(scope: !7000, file: !594, line: 1294, column: 7)
!7007 = !DILocation(line: 1294, column: 8, scope: !7006)
!7008 = !DILocation(line: 1294, column: 7, scope: !7000)
!7009 = !DILocation(line: 1295, column: 5, scope: !7006)
!7010 = !DILocation(line: 1296, column: 10, scope: !7000)
!7011 = !DILocation(line: 1296, column: 13, scope: !7000)
!7012 = !DILocation(line: 1296, column: 19, scope: !7000)
!7013 = !DILocation(line: 1296, column: 26, scope: !7000)
!7014 = !DILocation(line: 1296, column: 3, scope: !7000)
!7015 = !DILocation(line: 1297, column: 1, scope: !7000)
!7016 = distinct !DISubprogram(name: "gimple_vdef", scope: !594, file: !594, line: 1375, type: !3500, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7017 = !DILocalVariable(name: "g", arg: 1, scope: !7016, file: !594, line: 1375, type: !3418)
!7018 = !DILocation(line: 1375, column: 27, scope: !7016)
!7019 = !DILocation(line: 1377, column: 28, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7016, file: !594, line: 1377, column: 7)
!7021 = !DILocation(line: 1377, column: 8, scope: !7020)
!7022 = !DILocation(line: 1377, column: 7, scope: !7016)
!7023 = !DILocation(line: 1378, column: 5, scope: !7020)
!7024 = !DILocation(line: 1379, column: 10, scope: !7016)
!7025 = !DILocation(line: 1379, column: 13, scope: !7016)
!7026 = !DILocation(line: 1379, column: 23, scope: !7016)
!7027 = !DILocation(line: 1379, column: 3, scope: !7016)
!7028 = !DILocation(line: 1380, column: 1, scope: !7016)
!7029 = distinct !DISubprogram(name: "gimple_use_ops", scope: !594, file: !594, line: 1313, type: !7030, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7030 = !DISubroutineType(types: !7031)
!7031 = !{!1962, !3418}
!7032 = !DILocalVariable(name: "g", arg: 1, scope: !7029, file: !594, line: 1313, type: !3418)
!7033 = !DILocation(line: 1313, column: 30, scope: !7029)
!7034 = !DILocation(line: 1315, column: 24, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !7029, file: !594, line: 1315, column: 7)
!7036 = !DILocation(line: 1315, column: 8, scope: !7035)
!7037 = !DILocation(line: 1315, column: 7, scope: !7029)
!7038 = !DILocation(line: 1316, column: 5, scope: !7035)
!7039 = !DILocation(line: 1317, column: 10, scope: !7029)
!7040 = !DILocation(line: 1317, column: 13, scope: !7029)
!7041 = !DILocation(line: 1317, column: 19, scope: !7029)
!7042 = !DILocation(line: 1317, column: 26, scope: !7029)
!7043 = !DILocation(line: 1317, column: 3, scope: !7029)
!7044 = !DILocation(line: 1318, column: 1, scope: !7029)
!7045 = distinct !DISubprogram(name: "simple_iv_increment_p", scope: !3, file: !3, line: 1382, type: !7046, scopeLine: 1383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7046 = !DISubroutineType(types: !7047)
!7047 = !{!1776, !1926}
!7048 = !DILocalVariable(name: "stmt", arg: 1, scope: !7045, file: !3, line: 1382, type: !1926)
!7049 = !DILocation(line: 1382, column: 31, scope: !7045)
!7050 = !DILocalVariable(name: "lhs", scope: !7045, file: !3, line: 1384, type: !1661)
!7051 = !DILocation(line: 1384, column: 8, scope: !7045)
!7052 = !DILocalVariable(name: "preinc", scope: !7045, file: !3, line: 1384, type: !1661)
!7053 = !DILocation(line: 1384, column: 13, scope: !7045)
!7054 = !DILocalVariable(name: "phi", scope: !7045, file: !3, line: 1385, type: !1926)
!7055 = !DILocation(line: 1385, column: 10, scope: !7045)
!7056 = !DILocalVariable(name: "i", scope: !7045, file: !3, line: 1386, type: !2071)
!7057 = !DILocation(line: 1386, column: 10, scope: !7045)
!7058 = !DILocation(line: 1388, column: 20, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1388, column: 7)
!7060 = !DILocation(line: 1388, column: 7, scope: !7059)
!7061 = !DILocation(line: 1388, column: 26, scope: !7059)
!7062 = !DILocation(line: 1388, column: 7, scope: !7045)
!7063 = !DILocation(line: 1389, column: 5, scope: !7059)
!7064 = !DILocation(line: 1391, column: 28, scope: !7045)
!7065 = !DILocation(line: 1391, column: 9, scope: !7045)
!7066 = !DILocation(line: 1391, column: 7, scope: !7045)
!7067 = !DILocation(line: 1392, column: 7, scope: !7068)
!7068 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1392, column: 7)
!7069 = !DILocation(line: 1392, column: 23, scope: !7068)
!7070 = !DILocation(line: 1392, column: 7, scope: !7045)
!7071 = !DILocation(line: 1393, column: 5, scope: !7068)
!7072 = !DILocation(line: 1395, column: 31, scope: !7073)
!7073 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1395, column: 7)
!7074 = !DILocation(line: 1395, column: 7, scope: !7073)
!7075 = !DILocation(line: 1395, column: 37, scope: !7073)
!7076 = !DILocation(line: 1396, column: 7, scope: !7073)
!7077 = !DILocation(line: 1396, column: 34, scope: !7073)
!7078 = !DILocation(line: 1396, column: 10, scope: !7073)
!7079 = !DILocation(line: 1396, column: 40, scope: !7073)
!7080 = !DILocation(line: 1395, column: 7, scope: !7045)
!7081 = !DILocation(line: 1397, column: 5, scope: !7073)
!7082 = !DILocation(line: 1399, column: 32, scope: !7045)
!7083 = !DILocation(line: 1399, column: 12, scope: !7045)
!7084 = !DILocation(line: 1399, column: 10, scope: !7045)
!7085 = !DILocation(line: 1401, column: 7, scope: !7086)
!7086 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1401, column: 7)
!7087 = !DILocation(line: 1401, column: 26, scope: !7086)
!7088 = !DILocation(line: 1401, column: 7, scope: !7045)
!7089 = !DILocation(line: 1402, column: 5, scope: !7086)
!7090 = !DILocation(line: 1404, column: 9, scope: !7045)
!7091 = !DILocation(line: 1404, column: 7, scope: !7045)
!7092 = !DILocation(line: 1405, column: 20, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1405, column: 7)
!7094 = !DILocation(line: 1405, column: 7, scope: !7093)
!7095 = !DILocation(line: 1405, column: 25, scope: !7093)
!7096 = !DILocation(line: 1405, column: 7, scope: !7045)
!7097 = !DILocation(line: 1406, column: 5, scope: !7093)
!7098 = !DILocation(line: 1408, column: 10, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7045, file: !3, line: 1408, column: 3)
!7100 = !DILocation(line: 1408, column: 8, scope: !7099)
!7101 = !DILocation(line: 1408, column: 15, scope: !7102)
!7102 = distinct !DILexicalBlock(scope: !7099, file: !3, line: 1408, column: 3)
!7103 = !DILocation(line: 1408, column: 40, scope: !7102)
!7104 = !DILocation(line: 1408, column: 19, scope: !7102)
!7105 = !DILocation(line: 1408, column: 17, scope: !7102)
!7106 = !DILocation(line: 1408, column: 3, scope: !7099)
!7107 = !DILocation(line: 1409, column: 29, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 1409, column: 9)
!7109 = !DILocation(line: 1409, column: 34, scope: !7108)
!7110 = !DILocation(line: 1409, column: 9, scope: !7108)
!7111 = !DILocation(line: 1409, column: 40, scope: !7108)
!7112 = !DILocation(line: 1409, column: 37, scope: !7108)
!7113 = !DILocation(line: 1409, column: 9, scope: !7102)
!7114 = !DILocation(line: 1410, column: 7, scope: !7108)
!7115 = !DILocation(line: 1408, column: 47, scope: !7102)
!7116 = !DILocation(line: 1408, column: 3, scope: !7102)
!7117 = distinct !{!7117, !7106, !7118}
!7118 = !DILocation(line: 1410, column: 14, scope: !7099)
!7119 = !DILocation(line: 1412, column: 3, scope: !7045)
!7120 = !DILocation(line: 1413, column: 1, scope: !7045)
!7121 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !594, file: !594, line: 1694, type: !3500, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7122 = !DILocalVariable(name: "gs", arg: 1, scope: !7121, file: !594, line: 1694, type: !3418)
!7123 = !DILocation(line: 1694, column: 33, scope: !7121)
!7124 = !DILocation(line: 1697, column: 21, scope: !7121)
!7125 = !DILocation(line: 1697, column: 10, scope: !7121)
!7126 = !DILocation(line: 1697, column: 3, scope: !7121)
!7127 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !594, file: !594, line: 1815, type: !6593, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7128 = !DILocalVariable(name: "gs", arg: 1, scope: !7127, file: !594, line: 1815, type: !3418)
!7129 = !DILocation(line: 1815, column: 38, scope: !7127)
!7130 = !DILocalVariable(name: "code", scope: !7127, file: !594, line: 1817, type: !317)
!7131 = !DILocation(line: 1817, column: 18, scope: !7127)
!7132 = !DILocation(line: 1820, column: 28, scope: !7127)
!7133 = !DILocation(line: 1820, column: 10, scope: !7127)
!7134 = !DILocation(line: 1820, column: 8, scope: !7127)
!7135 = !DILocation(line: 1821, column: 29, scope: !7136)
!7136 = distinct !DILexicalBlock(scope: !7127, file: !594, line: 1821, column: 7)
!7137 = !DILocation(line: 1821, column: 7, scope: !7136)
!7138 = !DILocation(line: 1821, column: 35, scope: !7136)
!7139 = !DILocation(line: 1821, column: 7, scope: !7127)
!7140 = !DILocation(line: 1822, column: 12, scope: !7136)
!7141 = !DILocation(line: 1822, column: 10, scope: !7136)
!7142 = !DILocation(line: 1822, column: 5, scope: !7136)
!7143 = !DILocation(line: 1824, column: 10, scope: !7127)
!7144 = !DILocation(line: 1824, column: 3, scope: !7127)
!7145 = distinct !DISubprogram(name: "gimple_op", scope: !594, file: !594, line: 1631, type: !7146, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7146 = !DISubroutineType(types: !7147)
!7147 = !{!1661, !3418, !7}
!7148 = !DILocalVariable(name: "gs", arg: 1, scope: !7145, file: !594, line: 1631, type: !3418)
!7149 = !DILocation(line: 1631, column: 25, scope: !7145)
!7150 = !DILocalVariable(name: "i", arg: 2, scope: !7145, file: !594, line: 1631, type: !7)
!7151 = !DILocation(line: 1631, column: 38, scope: !7145)
!7152 = !DILocation(line: 1633, column: 23, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7145, file: !594, line: 1633, column: 7)
!7154 = !DILocation(line: 1633, column: 7, scope: !7153)
!7155 = !DILocation(line: 1633, column: 7, scope: !7145)
!7156 = !DILocation(line: 1638, column: 26, scope: !7157)
!7157 = distinct !DILexicalBlock(scope: !7153, file: !594, line: 1634, column: 5)
!7158 = !DILocation(line: 1638, column: 14, scope: !7157)
!7159 = !DILocation(line: 1638, column: 50, scope: !7157)
!7160 = !DILocation(line: 1638, column: 7, scope: !7157)
!7161 = !DILocation(line: 1641, column: 5, scope: !7153)
!7162 = !DILocation(line: 1642, column: 1, scope: !7145)
!7163 = distinct !DISubprogram(name: "gimple_expr_code", scope: !594, file: !594, line: 1438, type: !6593, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7164 = !DILocalVariable(name: "stmt", arg: 1, scope: !7163, file: !594, line: 1438, type: !3418)
!7165 = !DILocation(line: 1438, column: 32, scope: !7163)
!7166 = !DILocalVariable(name: "code", scope: !7163, file: !594, line: 1440, type: !593)
!7167 = !DILocation(line: 1440, column: 20, scope: !7163)
!7168 = !DILocation(line: 1440, column: 40, scope: !7163)
!7169 = !DILocation(line: 1440, column: 27, scope: !7163)
!7170 = !DILocation(line: 1441, column: 7, scope: !7171)
!7171 = distinct !DILexicalBlock(scope: !7163, file: !594, line: 1441, column: 7)
!7172 = !DILocation(line: 1441, column: 12, scope: !7171)
!7173 = !DILocation(line: 1441, column: 29, scope: !7171)
!7174 = !DILocation(line: 1441, column: 32, scope: !7171)
!7175 = !DILocation(line: 1441, column: 37, scope: !7171)
!7176 = !DILocation(line: 1441, column: 7, scope: !7163)
!7177 = !DILocation(line: 1442, column: 29, scope: !7171)
!7178 = !DILocation(line: 1442, column: 35, scope: !7171)
!7179 = !DILocation(line: 1442, column: 42, scope: !7171)
!7180 = !DILocation(line: 1442, column: 5, scope: !7171)
!7181 = !DILocation(line: 1443, column: 12, scope: !7182)
!7182 = distinct !DILexicalBlock(scope: !7171, file: !594, line: 1443, column: 12)
!7183 = !DILocation(line: 1443, column: 17, scope: !7182)
!7184 = !DILocation(line: 1443, column: 12, scope: !7171)
!7185 = !DILocation(line: 1444, column: 5, scope: !7182)
!7186 = !DILocation(line: 1446, column: 5, scope: !7182)
!7187 = !DILocation(line: 1448, column: 5, scope: !7163)
!7188 = !DILocation(line: 1450, column: 1, scope: !7163)
!7189 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !594, file: !594, line: 1686, type: !7190, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7190 = !DISubroutineType(types: !7191)
!7191 = !{!1552, !317}
!7192 = !DILocalVariable(name: "code", arg: 1, scope: !7189, file: !594, line: 1686, type: !317)
!7193 = !DILocation(line: 1686, column: 38, scope: !7189)
!7194 = !DILocation(line: 1688, column: 63, scope: !7189)
!7195 = !DILocation(line: 1688, column: 34, scope: !7189)
!7196 = !DILocation(line: 1688, column: 10, scope: !7189)
!7197 = !DILocation(line: 1688, column: 3, scope: !7189)
!7198 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3518, file: !3518, line: 442, type: !7199, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7199 = !DISubroutineType(types: !7200)
!7200 = !{!3050, !1926, !1643}
!7201 = !DILocalVariable(name: "gs", arg: 1, scope: !7198, file: !3518, line: 442, type: !1926)
!7202 = !DILocation(line: 442, column: 36, scope: !7198)
!7203 = !DILocalVariable(name: "i", arg: 2, scope: !7198, file: !3518, line: 442, type: !1643)
!7204 = !DILocation(line: 442, column: 44, scope: !7198)
!7205 = !DILocation(line: 444, column: 27, scope: !7198)
!7206 = !DILocation(line: 444, column: 31, scope: !7198)
!7207 = !DILocation(line: 444, column: 11, scope: !7198)
!7208 = !DILocation(line: 444, column: 35, scope: !7198)
!7209 = !DILocation(line: 444, column: 3, scope: !7198)
!7210 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !594, file: !594, line: 3100, type: !7211, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7211 = !DISubroutineType(types: !7212)
!7212 = !{!3526, !1926, !7}
!7213 = !DILocalVariable(name: "gs", arg: 1, scope: !7210, file: !594, line: 3100, type: !1926)
!7214 = !DILocation(line: 3100, column: 24, scope: !7210)
!7215 = !DILocalVariable(name: "index", arg: 2, scope: !7210, file: !594, line: 3100, type: !7)
!7216 = !DILocation(line: 3100, column: 37, scope: !7210)
!7217 = !DILocation(line: 3103, column: 3, scope: !7210)
!7218 = !DILocation(line: 3104, column: 12, scope: !7210)
!7219 = !DILocation(line: 3104, column: 16, scope: !7210)
!7220 = !DILocation(line: 3104, column: 27, scope: !7210)
!7221 = !DILocation(line: 3104, column: 32, scope: !7210)
!7222 = !DILocation(line: 3104, column: 3, scope: !7210)
!7223 = distinct !DISubprogram(name: "gimple_call_fn", scope: !594, file: !594, line: 1911, type: !3500, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7224 = !DILocalVariable(name: "gs", arg: 1, scope: !7223, file: !594, line: 1911, type: !3418)
!7225 = !DILocation(line: 1911, column: 30, scope: !7223)
!7226 = !DILocation(line: 1914, column: 21, scope: !7223)
!7227 = !DILocation(line: 1914, column: 10, scope: !7223)
!7228 = !DILocation(line: 1914, column: 3, scope: !7223)
!7229 = distinct !DISubprogram(name: "lookup_avail_expr", scope: !3, file: !3, line: 2230, type: !7230, scopeLine: 2231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7230 = !DISubroutineType(types: !7231)
!7231 = !{!1661, !1926, !1776}
!7232 = !DILocalVariable(name: "stmt", arg: 1, scope: !7229, file: !3, line: 2230, type: !1926)
!7233 = !DILocation(line: 2230, column: 27, scope: !7229)
!7234 = !DILocalVariable(name: "insert", arg: 2, scope: !7229, file: !3, line: 2230, type: !1776)
!7235 = !DILocation(line: 2230, column: 38, scope: !7229)
!7236 = !DILocalVariable(name: "slot", scope: !7229, file: !3, line: 2232, type: !2465)
!7237 = !DILocation(line: 2232, column: 10, scope: !7229)
!7238 = !DILocalVariable(name: "lhs", scope: !7229, file: !3, line: 2233, type: !1661)
!7239 = !DILocation(line: 2233, column: 8, scope: !7229)
!7240 = !DILocalVariable(name: "temp", scope: !7229, file: !3, line: 2234, type: !1661)
!7241 = !DILocation(line: 2234, column: 8, scope: !7229)
!7242 = !DILocalVariable(name: "element", scope: !7229, file: !3, line: 2235, type: !1658)
!7243 = !DILocation(line: 2235, column: 24, scope: !7229)
!7244 = !DILocation(line: 2238, column: 25, scope: !7229)
!7245 = !DILocation(line: 2238, column: 9, scope: !7229)
!7246 = !DILocation(line: 2238, column: 7, scope: !7229)
!7247 = !DILocation(line: 2240, column: 28, scope: !7229)
!7248 = !DILocation(line: 2240, column: 34, scope: !7229)
!7249 = !DILocation(line: 2240, column: 3, scope: !7229)
!7250 = !DILocation(line: 2242, column: 7, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2242, column: 7)
!7252 = !DILocation(line: 2242, column: 17, scope: !7251)
!7253 = !DILocation(line: 2242, column: 21, scope: !7251)
!7254 = !DILocation(line: 2242, column: 32, scope: !7251)
!7255 = !DILocation(line: 2242, column: 7, scope: !7229)
!7256 = !DILocation(line: 2244, column: 16, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7251, file: !3, line: 2243, column: 5)
!7258 = !DILocation(line: 2244, column: 7, scope: !7257)
!7259 = !DILocation(line: 2245, column: 28, scope: !7257)
!7260 = !DILocation(line: 2245, column: 7, scope: !7257)
!7261 = !DILocation(line: 2246, column: 5, scope: !7257)
!7262 = !DILocation(line: 2251, column: 15, scope: !7263)
!7263 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2251, column: 7)
!7264 = !DILocation(line: 2251, column: 20, scope: !7263)
!7265 = !DILocation(line: 2251, column: 25, scope: !7263)
!7266 = !DILocation(line: 2252, column: 7, scope: !7263)
!7267 = !DILocation(line: 2252, column: 11, scope: !7263)
!7268 = !DILocation(line: 2252, column: 51, scope: !7263)
!7269 = !DILocation(line: 2253, column: 11, scope: !7263)
!7270 = !DILocation(line: 2253, column: 47, scope: !7263)
!7271 = !DILocation(line: 2253, column: 52, scope: !7263)
!7272 = !DILocation(line: 2253, column: 56, scope: !7263)
!7273 = !DILocation(line: 2253, column: 63, scope: !7263)
!7274 = !DILocation(line: 2253, column: 14, scope: !7263)
!7275 = !DILocation(line: 2251, column: 7, scope: !7229)
!7276 = !DILocation(line: 2254, column: 5, scope: !7263)
!7277 = !DILocation(line: 2257, column: 36, scope: !7229)
!7278 = !DILocation(line: 2257, column: 49, scope: !7229)
!7279 = !DILocation(line: 2257, column: 67, scope: !7229)
!7280 = !DILocation(line: 2258, column: 9, scope: !7229)
!7281 = !DILocation(line: 2257, column: 10, scope: !7229)
!7282 = !DILocation(line: 2257, column: 8, scope: !7229)
!7283 = !DILocation(line: 2259, column: 7, scope: !7284)
!7284 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2259, column: 7)
!7285 = !DILocation(line: 2259, column: 12, scope: !7284)
!7286 = !DILocation(line: 2259, column: 7, scope: !7229)
!7287 = !DILocation(line: 2260, column: 5, scope: !7284)
!7288 = !DILocation(line: 2262, column: 8, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2262, column: 7)
!7290 = !DILocation(line: 2262, column: 7, scope: !7289)
!7291 = !DILocation(line: 2262, column: 13, scope: !7289)
!7292 = !DILocation(line: 2262, column: 7, scope: !7229)
!7293 = !DILocalVariable(name: "element2", scope: !7294, file: !3, line: 2264, type: !3017)
!7294 = distinct !DILexicalBlock(scope: !7289, file: !3, line: 2263, column: 5)
!7295 = !DILocation(line: 2264, column: 29, scope: !7294)
!7296 = !DILocation(line: 2264, column: 40, scope: !7294)
!7297 = !DILocation(line: 2265, column: 8, scope: !7294)
!7298 = !DILocation(line: 2265, column: 19, scope: !7294)
!7299 = !DILocation(line: 2266, column: 25, scope: !7294)
!7300 = !DILocation(line: 2266, column: 7, scope: !7294)
!7301 = !DILocation(line: 2266, column: 17, scope: !7294)
!7302 = !DILocation(line: 2266, column: 23, scope: !7294)
!7303 = !DILocation(line: 2267, column: 24, scope: !7294)
!7304 = !DILocation(line: 2267, column: 15, scope: !7294)
!7305 = !DILocation(line: 2267, column: 8, scope: !7294)
!7306 = !DILocation(line: 2267, column: 13, scope: !7294)
!7307 = !DILocation(line: 2269, column: 11, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 2269, column: 11)
!7309 = !DILocation(line: 2269, column: 21, scope: !7308)
!7310 = !DILocation(line: 2269, column: 25, scope: !7308)
!7311 = !DILocation(line: 2269, column: 36, scope: !7308)
!7312 = !DILocation(line: 2269, column: 11, scope: !7294)
!7313 = !DILocation(line: 2271, column: 20, scope: !7314)
!7314 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 2270, column: 9)
!7315 = !DILocation(line: 2271, column: 11, scope: !7314)
!7316 = !DILocation(line: 2272, column: 32, scope: !7314)
!7317 = !DILocation(line: 2272, column: 43, scope: !7314)
!7318 = !DILocation(line: 2272, column: 11, scope: !7314)
!7319 = !DILocation(line: 2273, column: 9, scope: !7314)
!7320 = !DILocation(line: 2275, column: 7, scope: !7294)
!7321 = !DILocation(line: 2276, column: 7, scope: !7294)
!7322 = !DILocation(line: 2281, column: 35, scope: !7229)
!7323 = !DILocation(line: 2281, column: 34, scope: !7229)
!7324 = !DILocation(line: 2281, column: 10, scope: !7229)
!7325 = !DILocation(line: 2281, column: 42, scope: !7229)
!7326 = !DILocation(line: 2281, column: 7, scope: !7229)
!7327 = !DILocation(line: 2285, column: 7, scope: !7328)
!7328 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2285, column: 7)
!7329 = !DILocation(line: 2285, column: 23, scope: !7328)
!7330 = !DILocation(line: 2285, column: 7, scope: !7229)
!7331 = !DILocation(line: 2287, column: 14, scope: !7332)
!7332 = distinct !DILexicalBlock(scope: !7328, file: !3, line: 2286, column: 5)
!7333 = !DILocation(line: 2287, column: 12, scope: !7332)
!7334 = !DILocation(line: 2288, column: 11, scope: !7335)
!7335 = distinct !DILexicalBlock(scope: !7332, file: !3, line: 2288, column: 11)
!7336 = !DILocation(line: 2288, column: 11, scope: !7332)
!7337 = !DILocation(line: 2289, column: 8, scope: !7335)
!7338 = !DILocation(line: 2289, column: 6, scope: !7335)
!7339 = !DILocation(line: 2289, column: 2, scope: !7335)
!7340 = !DILocation(line: 2290, column: 5, scope: !7332)
!7341 = !DILocation(line: 2292, column: 7, scope: !7342)
!7342 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 2292, column: 7)
!7343 = !DILocation(line: 2292, column: 17, scope: !7342)
!7344 = !DILocation(line: 2292, column: 21, scope: !7342)
!7345 = !DILocation(line: 2292, column: 32, scope: !7342)
!7346 = !DILocation(line: 2292, column: 7, scope: !7229)
!7347 = !DILocation(line: 2294, column: 16, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7342, file: !3, line: 2293, column: 5)
!7349 = !DILocation(line: 2294, column: 7, scope: !7348)
!7350 = !DILocation(line: 2295, column: 27, scope: !7348)
!7351 = !DILocation(line: 2295, column: 38, scope: !7348)
!7352 = !DILocation(line: 2295, column: 7, scope: !7348)
!7353 = !DILocation(line: 2296, column: 16, scope: !7348)
!7354 = !DILocation(line: 2296, column: 7, scope: !7348)
!7355 = !DILocation(line: 2297, column: 5, scope: !7348)
!7356 = !DILocation(line: 2299, column: 10, scope: !7229)
!7357 = !DILocation(line: 2299, column: 3, scope: !7229)
!7358 = !DILocation(line: 2300, column: 1, scope: !7229)
!7359 = distinct !DISubprogram(name: "initialize_hash_element", scope: !3, file: !3, line: 202, type: !7360, scopeLine: 204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7360 = !DISubroutineType(types: !7361)
!7361 = !{null, !1926, !1661, !3017}
!7362 = !DILocalVariable(name: "stmt", arg: 1, scope: !7359, file: !3, line: 202, type: !1926)
!7363 = !DILocation(line: 202, column: 33, scope: !7359)
!7364 = !DILocalVariable(name: "lhs", arg: 2, scope: !7359, file: !3, line: 202, type: !1661)
!7365 = !DILocation(line: 202, column: 44, scope: !7359)
!7366 = !DILocalVariable(name: "element", arg: 3, scope: !7359, file: !3, line: 203, type: !3017)
!7367 = !DILocation(line: 203, column: 48, scope: !7359)
!7368 = !DILocalVariable(name: "code", scope: !7359, file: !3, line: 205, type: !593)
!7369 = !DILocation(line: 205, column: 20, scope: !7359)
!7370 = !DILocation(line: 205, column: 40, scope: !7359)
!7371 = !DILocation(line: 205, column: 27, scope: !7359)
!7372 = !DILocalVariable(name: "expr", scope: !7359, file: !3, line: 206, type: !5830)
!7373 = !DILocation(line: 206, column: 25, scope: !7359)
!7374 = !DILocation(line: 206, column: 33, scope: !7359)
!7375 = !DILocation(line: 206, column: 42, scope: !7359)
!7376 = !DILocation(line: 208, column: 7, scope: !7377)
!7377 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 208, column: 7)
!7378 = !DILocation(line: 208, column: 12, scope: !7377)
!7379 = !DILocation(line: 208, column: 7, scope: !7359)
!7380 = !DILocalVariable(name: "subcode", scope: !7381, file: !3, line: 210, type: !317)
!7381 = distinct !DILexicalBlock(scope: !7377, file: !3, line: 209, column: 5)
!7382 = !DILocation(line: 210, column: 22, scope: !7381)
!7383 = !DILocation(line: 210, column: 56, scope: !7381)
!7384 = !DILocation(line: 210, column: 32, scope: !7381)
!7385 = !DILocation(line: 212, column: 7, scope: !7381)
!7386 = !DILocation(line: 212, column: 13, scope: !7381)
!7387 = !DILocation(line: 212, column: 18, scope: !7381)
!7388 = !DILocation(line: 214, column: 37, scope: !7381)
!7389 = !DILocation(line: 214, column: 15, scope: !7381)
!7390 = !DILocation(line: 214, column: 7, scope: !7381)
!7391 = !DILocation(line: 217, column: 11, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !7381, file: !3, line: 215, column: 9)
!7393 = !DILocation(line: 217, column: 17, scope: !7392)
!7394 = !DILocation(line: 217, column: 22, scope: !7392)
!7395 = !DILocation(line: 218, column: 54, scope: !7392)
!7396 = !DILocation(line: 218, column: 34, scope: !7392)
!7397 = !DILocation(line: 218, column: 11, scope: !7392)
!7398 = !DILocation(line: 218, column: 17, scope: !7392)
!7399 = !DILocation(line: 218, column: 21, scope: !7392)
!7400 = !DILocation(line: 218, column: 28, scope: !7392)
!7401 = !DILocation(line: 218, column: 32, scope: !7392)
!7402 = !DILocation(line: 219, column: 11, scope: !7392)
!7403 = !DILocation(line: 221, column: 11, scope: !7392)
!7404 = !DILocation(line: 221, column: 17, scope: !7392)
!7405 = !DILocation(line: 221, column: 22, scope: !7392)
!7406 = !DILocation(line: 222, column: 17, scope: !7392)
!7407 = !DILocation(line: 222, column: 4, scope: !7392)
!7408 = !DILocation(line: 222, column: 10, scope: !7392)
!7409 = !DILocation(line: 222, column: 15, scope: !7392)
!7410 = !DILocation(line: 223, column: 32, scope: !7392)
!7411 = !DILocation(line: 223, column: 11, scope: !7392)
!7412 = !DILocation(line: 223, column: 17, scope: !7392)
!7413 = !DILocation(line: 223, column: 21, scope: !7392)
!7414 = !DILocation(line: 223, column: 27, scope: !7392)
!7415 = !DILocation(line: 223, column: 30, scope: !7392)
!7416 = !DILocation(line: 224, column: 54, scope: !7392)
!7417 = !DILocation(line: 224, column: 34, scope: !7392)
!7418 = !DILocation(line: 224, column: 11, scope: !7392)
!7419 = !DILocation(line: 224, column: 17, scope: !7392)
!7420 = !DILocation(line: 224, column: 21, scope: !7392)
!7421 = !DILocation(line: 224, column: 27, scope: !7392)
!7422 = !DILocation(line: 224, column: 32, scope: !7392)
!7423 = !DILocation(line: 225, column: 11, scope: !7392)
!7424 = !DILocation(line: 227, column: 11, scope: !7392)
!7425 = !DILocation(line: 227, column: 17, scope: !7392)
!7426 = !DILocation(line: 227, column: 22, scope: !7392)
!7427 = !DILocation(line: 228, column: 17, scope: !7392)
!7428 = !DILocation(line: 228, column: 4, scope: !7392)
!7429 = !DILocation(line: 228, column: 10, scope: !7392)
!7430 = !DILocation(line: 228, column: 15, scope: !7392)
!7431 = !DILocation(line: 229, column: 33, scope: !7392)
!7432 = !DILocation(line: 229, column: 11, scope: !7392)
!7433 = !DILocation(line: 229, column: 17, scope: !7392)
!7434 = !DILocation(line: 229, column: 21, scope: !7392)
!7435 = !DILocation(line: 229, column: 28, scope: !7392)
!7436 = !DILocation(line: 229, column: 31, scope: !7392)
!7437 = !DILocation(line: 230, column: 56, scope: !7392)
!7438 = !DILocation(line: 230, column: 36, scope: !7392)
!7439 = !DILocation(line: 230, column: 11, scope: !7392)
!7440 = !DILocation(line: 230, column: 17, scope: !7392)
!7441 = !DILocation(line: 230, column: 21, scope: !7392)
!7442 = !DILocation(line: 230, column: 28, scope: !7392)
!7443 = !DILocation(line: 230, column: 34, scope: !7392)
!7444 = !DILocation(line: 231, column: 56, scope: !7392)
!7445 = !DILocation(line: 231, column: 36, scope: !7392)
!7446 = !DILocation(line: 231, column: 11, scope: !7392)
!7447 = !DILocation(line: 231, column: 17, scope: !7392)
!7448 = !DILocation(line: 231, column: 21, scope: !7392)
!7449 = !DILocation(line: 231, column: 28, scope: !7392)
!7450 = !DILocation(line: 231, column: 34, scope: !7392)
!7451 = !DILocation(line: 232, column: 11, scope: !7392)
!7452 = !DILocation(line: 234, column: 11, scope: !7392)
!7453 = !DILocation(line: 235, column: 9, scope: !7392)
!7454 = !DILocation(line: 236, column: 5, scope: !7381)
!7455 = !DILocation(line: 237, column: 12, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7377, file: !3, line: 237, column: 12)
!7457 = !DILocation(line: 237, column: 17, scope: !7456)
!7458 = !DILocation(line: 237, column: 12, scope: !7377)
!7459 = !DILocation(line: 239, column: 20, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7456, file: !3, line: 238, column: 5)
!7461 = !DILocation(line: 239, column: 7, scope: !7460)
!7462 = !DILocation(line: 239, column: 13, scope: !7460)
!7463 = !DILocation(line: 239, column: 18, scope: !7460)
!7464 = !DILocation(line: 240, column: 7, scope: !7460)
!7465 = !DILocation(line: 240, column: 13, scope: !7460)
!7466 = !DILocation(line: 240, column: 18, scope: !7460)
!7467 = !DILocation(line: 241, column: 47, scope: !7460)
!7468 = !DILocation(line: 241, column: 29, scope: !7460)
!7469 = !DILocation(line: 241, column: 7, scope: !7460)
!7470 = !DILocation(line: 241, column: 13, scope: !7460)
!7471 = !DILocation(line: 241, column: 17, scope: !7460)
!7472 = !DILocation(line: 241, column: 24, scope: !7460)
!7473 = !DILocation(line: 241, column: 27, scope: !7460)
!7474 = !DILocation(line: 242, column: 49, scope: !7460)
!7475 = !DILocation(line: 242, column: 32, scope: !7460)
!7476 = !DILocation(line: 242, column: 7, scope: !7460)
!7477 = !DILocation(line: 242, column: 13, scope: !7460)
!7478 = !DILocation(line: 242, column: 17, scope: !7460)
!7479 = !DILocation(line: 242, column: 24, scope: !7460)
!7480 = !DILocation(line: 242, column: 30, scope: !7460)
!7481 = !DILocation(line: 243, column: 49, scope: !7460)
!7482 = !DILocation(line: 243, column: 32, scope: !7460)
!7483 = !DILocation(line: 243, column: 7, scope: !7460)
!7484 = !DILocation(line: 243, column: 13, scope: !7460)
!7485 = !DILocation(line: 243, column: 17, scope: !7460)
!7486 = !DILocation(line: 243, column: 24, scope: !7460)
!7487 = !DILocation(line: 243, column: 30, scope: !7460)
!7488 = !DILocation(line: 244, column: 5, scope: !7460)
!7489 = !DILocation(line: 245, column: 12, scope: !7490)
!7490 = distinct !DILexicalBlock(scope: !7456, file: !3, line: 245, column: 12)
!7491 = !DILocation(line: 245, column: 17, scope: !7490)
!7492 = !DILocation(line: 245, column: 12, scope: !7456)
!7493 = !DILocalVariable(name: "nargs", scope: !7494, file: !3, line: 247, type: !2071)
!7494 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 246, column: 5)
!7495 = !DILocation(line: 247, column: 14, scope: !7494)
!7496 = !DILocation(line: 247, column: 44, scope: !7494)
!7497 = !DILocation(line: 247, column: 22, scope: !7494)
!7498 = !DILocalVariable(name: "i", scope: !7494, file: !3, line: 248, type: !2071)
!7499 = !DILocation(line: 248, column: 14, scope: !7494)
!7500 = !DILocation(line: 250, column: 7, scope: !7494)
!7501 = !DILocation(line: 252, column: 20, scope: !7494)
!7502 = !DILocation(line: 252, column: 7, scope: !7494)
!7503 = !DILocation(line: 252, column: 13, scope: !7494)
!7504 = !DILocation(line: 252, column: 18, scope: !7494)
!7505 = !DILocation(line: 253, column: 7, scope: !7494)
!7506 = !DILocation(line: 253, column: 13, scope: !7494)
!7507 = !DILocation(line: 253, column: 18, scope: !7494)
!7508 = !DILocation(line: 254, column: 43, scope: !7494)
!7509 = !DILocation(line: 254, column: 27, scope: !7494)
!7510 = !DILocation(line: 254, column: 7, scope: !7494)
!7511 = !DILocation(line: 254, column: 13, scope: !7494)
!7512 = !DILocation(line: 254, column: 17, scope: !7494)
!7513 = !DILocation(line: 254, column: 22, scope: !7494)
!7514 = !DILocation(line: 254, column: 25, scope: !7494)
!7515 = !DILocation(line: 256, column: 30, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7494, file: !3, line: 256, column: 11)
!7517 = !DILocation(line: 256, column: 11, scope: !7516)
!7518 = !DILocation(line: 256, column: 36, scope: !7516)
!7519 = !DILocation(line: 256, column: 11, scope: !7494)
!7520 = !DILocation(line: 257, column: 9, scope: !7516)
!7521 = !DILocation(line: 257, column: 15, scope: !7516)
!7522 = !DILocation(line: 257, column: 19, scope: !7516)
!7523 = !DILocation(line: 257, column: 24, scope: !7516)
!7524 = !DILocation(line: 257, column: 29, scope: !7516)
!7525 = !DILocation(line: 259, column: 9, scope: !7516)
!7526 = !DILocation(line: 259, column: 15, scope: !7516)
!7527 = !DILocation(line: 259, column: 19, scope: !7516)
!7528 = !DILocation(line: 259, column: 24, scope: !7516)
!7529 = !DILocation(line: 259, column: 29, scope: !7516)
!7530 = !DILocation(line: 261, column: 30, scope: !7494)
!7531 = !DILocation(line: 261, column: 7, scope: !7494)
!7532 = !DILocation(line: 261, column: 13, scope: !7494)
!7533 = !DILocation(line: 261, column: 17, scope: !7494)
!7534 = !DILocation(line: 261, column: 22, scope: !7494)
!7535 = !DILocation(line: 261, column: 28, scope: !7494)
!7536 = !DILocation(line: 262, column: 47, scope: !7494)
!7537 = !DILocation(line: 262, column: 38, scope: !7494)
!7538 = !DILocation(line: 262, column: 29, scope: !7494)
!7539 = !DILocation(line: 262, column: 7, scope: !7494)
!7540 = !DILocation(line: 262, column: 13, scope: !7494)
!7541 = !DILocation(line: 262, column: 17, scope: !7494)
!7542 = !DILocation(line: 262, column: 22, scope: !7494)
!7543 = !DILocation(line: 262, column: 27, scope: !7494)
!7544 = !DILocation(line: 263, column: 14, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7494, file: !3, line: 263, column: 7)
!7546 = !DILocation(line: 263, column: 12, scope: !7545)
!7547 = !DILocation(line: 263, column: 19, scope: !7548)
!7548 = distinct !DILexicalBlock(scope: !7545, file: !3, line: 263, column: 7)
!7549 = !DILocation(line: 263, column: 23, scope: !7548)
!7550 = !DILocation(line: 263, column: 21, scope: !7548)
!7551 = !DILocation(line: 263, column: 7, scope: !7545)
!7552 = !DILocation(line: 264, column: 51, scope: !7548)
!7553 = !DILocation(line: 264, column: 57, scope: !7548)
!7554 = !DILocation(line: 264, column: 34, scope: !7548)
!7555 = !DILocation(line: 264, column: 9, scope: !7548)
!7556 = !DILocation(line: 264, column: 15, scope: !7548)
!7557 = !DILocation(line: 264, column: 19, scope: !7548)
!7558 = !DILocation(line: 264, column: 24, scope: !7548)
!7559 = !DILocation(line: 264, column: 29, scope: !7548)
!7560 = !DILocation(line: 264, column: 32, scope: !7548)
!7561 = !DILocation(line: 263, column: 31, scope: !7548)
!7562 = !DILocation(line: 263, column: 7, scope: !7548)
!7563 = distinct !{!7563, !7551, !7564}
!7564 = !DILocation(line: 264, column: 58, scope: !7545)
!7565 = !DILocation(line: 265, column: 5, scope: !7494)
!7566 = !DILocation(line: 266, column: 12, scope: !7567)
!7567 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 266, column: 12)
!7568 = !DILocation(line: 266, column: 17, scope: !7567)
!7569 = !DILocation(line: 266, column: 12, scope: !7490)
!7570 = !DILocation(line: 268, column: 20, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 267, column: 5)
!7572 = !DILocation(line: 268, column: 7, scope: !7571)
!7573 = !DILocation(line: 268, column: 13, scope: !7571)
!7574 = !DILocation(line: 268, column: 18, scope: !7571)
!7575 = !DILocation(line: 269, column: 7, scope: !7571)
!7576 = !DILocation(line: 269, column: 13, scope: !7571)
!7577 = !DILocation(line: 269, column: 18, scope: !7571)
!7578 = !DILocation(line: 270, column: 51, scope: !7571)
!7579 = !DILocation(line: 270, column: 30, scope: !7571)
!7580 = !DILocation(line: 270, column: 7, scope: !7571)
!7581 = !DILocation(line: 270, column: 13, scope: !7571)
!7582 = !DILocation(line: 270, column: 17, scope: !7571)
!7583 = !DILocation(line: 270, column: 24, scope: !7571)
!7584 = !DILocation(line: 270, column: 28, scope: !7571)
!7585 = !DILocation(line: 271, column: 5, scope: !7571)
!7586 = !DILocation(line: 272, column: 12, scope: !7587)
!7587 = distinct !DILexicalBlock(scope: !7567, file: !3, line: 272, column: 12)
!7588 = !DILocation(line: 272, column: 17, scope: !7587)
!7589 = !DILocation(line: 272, column: 12, scope: !7567)
!7590 = !DILocation(line: 274, column: 20, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7587, file: !3, line: 273, column: 5)
!7592 = !DILocation(line: 274, column: 7, scope: !7591)
!7593 = !DILocation(line: 274, column: 13, scope: !7591)
!7594 = !DILocation(line: 274, column: 18, scope: !7591)
!7595 = !DILocation(line: 275, column: 7, scope: !7591)
!7596 = !DILocation(line: 275, column: 13, scope: !7591)
!7597 = !DILocation(line: 275, column: 18, scope: !7591)
!7598 = !DILocation(line: 276, column: 48, scope: !7591)
!7599 = !DILocation(line: 276, column: 30, scope: !7591)
!7600 = !DILocation(line: 276, column: 7, scope: !7591)
!7601 = !DILocation(line: 276, column: 13, scope: !7591)
!7602 = !DILocation(line: 276, column: 17, scope: !7591)
!7603 = !DILocation(line: 276, column: 24, scope: !7591)
!7604 = !DILocation(line: 276, column: 28, scope: !7591)
!7605 = !DILocation(line: 277, column: 5, scope: !7591)
!7606 = !DILocation(line: 279, column: 5, scope: !7587)
!7607 = !DILocation(line: 281, column: 18, scope: !7359)
!7608 = !DILocation(line: 281, column: 3, scope: !7359)
!7609 = !DILocation(line: 281, column: 12, scope: !7359)
!7610 = !DILocation(line: 281, column: 16, scope: !7359)
!7611 = !DILocation(line: 282, column: 19, scope: !7359)
!7612 = !DILocation(line: 282, column: 3, scope: !7359)
!7613 = !DILocation(line: 282, column: 12, scope: !7359)
!7614 = !DILocation(line: 282, column: 17, scope: !7359)
!7615 = !DILocation(line: 283, column: 36, scope: !7359)
!7616 = !DILocation(line: 283, column: 19, scope: !7359)
!7617 = !DILocation(line: 283, column: 3, scope: !7359)
!7618 = !DILocation(line: 283, column: 12, scope: !7359)
!7619 = !DILocation(line: 283, column: 17, scope: !7359)
!7620 = !DILocation(line: 284, column: 20, scope: !7359)
!7621 = !DILocation(line: 284, column: 3, scope: !7359)
!7622 = !DILocation(line: 284, column: 12, scope: !7359)
!7623 = !DILocation(line: 284, column: 18, scope: !7359)
!7624 = !DILocation(line: 285, column: 1, scope: !7359)
!7625 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !594, file: !594, line: 1759, type: !3500, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7626 = !DILocalVariable(name: "gs", arg: 1, scope: !7625, file: !594, line: 1759, type: !3418)
!7627 = !DILocation(line: 1759, column: 34, scope: !7625)
!7628 = !DILocation(line: 1763, column: 23, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7625, file: !594, line: 1763, column: 7)
!7630 = !DILocation(line: 1763, column: 7, scope: !7629)
!7631 = !DILocation(line: 1763, column: 27, scope: !7629)
!7632 = !DILocation(line: 1763, column: 7, scope: !7625)
!7633 = !DILocation(line: 1764, column: 23, scope: !7629)
!7634 = !DILocation(line: 1764, column: 12, scope: !7629)
!7635 = !DILocation(line: 1764, column: 5, scope: !7629)
!7636 = !DILocation(line: 1766, column: 5, scope: !7629)
!7637 = !DILocation(line: 1767, column: 1, scope: !7625)
!7638 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !594, file: !594, line: 2013, type: !3509, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7639 = !DILocalVariable(name: "gs", arg: 1, scope: !7638, file: !594, line: 2013, type: !3418)
!7640 = !DILocation(line: 2013, column: 36, scope: !7638)
!7641 = !DILocalVariable(name: "num_ops", scope: !7638, file: !594, line: 2015, type: !7)
!7642 = !DILocation(line: 2015, column: 12, scope: !7638)
!7643 = !DILocation(line: 2017, column: 29, scope: !7638)
!7644 = !DILocation(line: 2017, column: 13, scope: !7638)
!7645 = !DILocation(line: 2017, column: 11, scope: !7638)
!7646 = !DILocation(line: 2018, column: 10, scope: !7638)
!7647 = !DILocation(line: 2018, column: 18, scope: !7638)
!7648 = !DILocation(line: 2018, column: 3, scope: !7638)
!7649 = distinct !DISubprogram(name: "gimple_call_arg", scope: !594, file: !594, line: 2025, type: !7146, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7650 = !DILocalVariable(name: "gs", arg: 1, scope: !7649, file: !594, line: 2025, type: !3418)
!7651 = !DILocation(line: 2025, column: 31, scope: !7649)
!7652 = !DILocalVariable(name: "index", arg: 2, scope: !7649, file: !594, line: 2025, type: !7)
!7653 = !DILocation(line: 2025, column: 44, scope: !7649)
!7654 = !DILocation(line: 2028, column: 21, scope: !7649)
!7655 = !DILocation(line: 2028, column: 25, scope: !7649)
!7656 = !DILocation(line: 2028, column: 31, scope: !7649)
!7657 = !DILocation(line: 2028, column: 10, scope: !7649)
!7658 = !DILocation(line: 2028, column: 3, scope: !7649)
!7659 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !594, file: !594, line: 1499, type: !7046, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7660 = !DILocalVariable(name: "stmt", arg: 1, scope: !7659, file: !594, line: 1499, type: !1926)
!7661 = !DILocation(line: 1499, column: 36, scope: !7659)
!7662 = !DILocation(line: 1501, column: 30, scope: !7659)
!7663 = !DILocation(line: 1501, column: 10, scope: !7659)
!7664 = !DILocation(line: 1501, column: 36, scope: !7659)
!7665 = !DILocation(line: 1501, column: 52, scope: !7659)
!7666 = !DILocation(line: 1501, column: 39, scope: !7659)
!7667 = !DILocation(line: 0, scope: !7659)
!7668 = !DILocation(line: 1501, column: 3, scope: !7659)
!7669 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !594, file: !594, line: 1405, type: !6627, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7670 = !DILocalVariable(name: "g", arg: 1, scope: !7669, file: !594, line: 1405, type: !1926)
!7671 = !DILocation(line: 1405, column: 25, scope: !7669)
!7672 = !DILocalVariable(name: "vuse", arg: 2, scope: !7669, file: !594, line: 1405, type: !1661)
!7673 = !DILocation(line: 1405, column: 33, scope: !7669)
!7674 = !DILocation(line: 1407, column: 3, scope: !7669)
!7675 = !DILocation(line: 1408, column: 23, scope: !7669)
!7676 = !DILocation(line: 1408, column: 3, scope: !7669)
!7677 = !DILocation(line: 1408, column: 6, scope: !7669)
!7678 = !DILocation(line: 1408, column: 16, scope: !7669)
!7679 = !DILocation(line: 1408, column: 21, scope: !7669)
!7680 = !DILocation(line: 1409, column: 1, scope: !7669)
!7681 = distinct !DISubprogram(name: "gsi_last_bb", scope: !594, file: !594, line: 4450, type: !3943, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7682 = !DILocalVariable(name: "bb", arg: 1, scope: !7681, file: !594, line: 4450, type: !2412)
!7683 = !DILocation(line: 4450, column: 26, scope: !7681)
!7684 = !DILocalVariable(name: "i", scope: !7681, file: !594, line: 4452, type: !3175)
!7685 = !DILocation(line: 4452, column: 24, scope: !7681)
!7686 = !DILocalVariable(name: "seq", scope: !7681, file: !594, line: 4453, type: !1916)
!7687 = !DILocation(line: 4453, column: 14, scope: !7681)
!7688 = !DILocation(line: 4455, column: 17, scope: !7681)
!7689 = !DILocation(line: 4455, column: 9, scope: !7681)
!7690 = !DILocation(line: 4455, column: 7, scope: !7681)
!7691 = !DILocation(line: 4456, column: 28, scope: !7681)
!7692 = !DILocation(line: 4456, column: 11, scope: !7681)
!7693 = !DILocation(line: 4456, column: 5, scope: !7681)
!7694 = !DILocation(line: 4456, column: 9, scope: !7681)
!7695 = !DILocation(line: 4457, column: 11, scope: !7681)
!7696 = !DILocation(line: 4457, column: 5, scope: !7681)
!7697 = !DILocation(line: 4457, column: 9, scope: !7681)
!7698 = !DILocation(line: 4458, column: 10, scope: !7681)
!7699 = !DILocation(line: 4458, column: 5, scope: !7681)
!7700 = !DILocation(line: 4458, column: 8, scope: !7681)
!7701 = !DILocation(line: 4460, column: 3, scope: !7681)
!7702 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !594, file: !594, line: 3157, type: !3509, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7703 = !DILocalVariable(name: "gs", arg: 1, scope: !7702, file: !594, line: 3157, type: !3418)
!7704 = !DILocation(line: 3157, column: 40, scope: !7702)
!7705 = !DILocalVariable(name: "num_ops", scope: !7702, file: !594, line: 3159, type: !7)
!7706 = !DILocation(line: 3159, column: 12, scope: !7702)
!7707 = !DILocation(line: 3161, column: 29, scope: !7702)
!7708 = !DILocation(line: 3161, column: 13, scope: !7702)
!7709 = !DILocation(line: 3161, column: 11, scope: !7702)
!7710 = !DILocation(line: 3162, column: 3, scope: !7702)
!7711 = !DILocation(line: 3163, column: 10, scope: !7702)
!7712 = !DILocation(line: 3163, column: 18, scope: !7702)
!7713 = !DILocation(line: 3163, column: 3, scope: !7702)
!7714 = distinct !DISubprogram(name: "gimple_switch_label", scope: !594, file: !594, line: 3212, type: !7146, scopeLine: 3213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7715 = !DILocalVariable(name: "gs", arg: 1, scope: !7714, file: !594, line: 3212, type: !3418)
!7716 = !DILocation(line: 3212, column: 35, scope: !7714)
!7717 = !DILocalVariable(name: "index", arg: 2, scope: !7714, file: !594, line: 3212, type: !7)
!7718 = !DILocation(line: 3212, column: 48, scope: !7714)
!7719 = !DILocation(line: 3215, column: 3, scope: !7714)
!7720 = !DILocation(line: 3216, column: 21, scope: !7714)
!7721 = !DILocation(line: 3216, column: 25, scope: !7714)
!7722 = !DILocation(line: 3216, column: 31, scope: !7714)
!7723 = !DILocation(line: 3216, column: 10, scope: !7714)
!7724 = !DILocation(line: 3216, column: 3, scope: !7714)
!7725 = distinct !DISubprogram(name: "allocate_edge_info", scope: !3, file: !3, line: 563, type: !7726, scopeLine: 564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7726 = !DISubroutineType(types: !7727)
!7727 = !{!3036, !1906}
!7728 = !DILocalVariable(name: "e", arg: 1, scope: !7725, file: !3, line: 563, type: !1906)
!7729 = !DILocation(line: 563, column: 26, scope: !7725)
!7730 = !DILocalVariable(name: "edge_info", scope: !7725, file: !3, line: 565, type: !3036)
!7731 = !DILocation(line: 565, column: 21, scope: !7725)
!7732 = !DILocation(line: 567, column: 15, scope: !7725)
!7733 = !DILocation(line: 567, column: 13, scope: !7725)
!7734 = !DILocation(line: 569, column: 12, scope: !7725)
!7735 = !DILocation(line: 569, column: 3, scope: !7725)
!7736 = !DILocation(line: 569, column: 6, scope: !7725)
!7737 = !DILocation(line: 569, column: 10, scope: !7725)
!7738 = !DILocation(line: 570, column: 10, scope: !7725)
!7739 = !DILocation(line: 570, column: 3, scope: !7725)
!7740 = distinct !DISubprogram(name: "record_conditions", scope: !3, file: !3, line: 1126, type: !7741, scopeLine: 1127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7741 = !DISubroutineType(types: !7742)
!7742 = !{null, !3036, !1661, !1661}
!7743 = !DILocalVariable(name: "edge_info", arg: 1, scope: !7740, file: !3, line: 1126, type: !3036)
!7744 = !DILocation(line: 1126, column: 38, scope: !7740)
!7745 = !DILocalVariable(name: "cond", arg: 2, scope: !7740, file: !3, line: 1126, type: !1661)
!7746 = !DILocation(line: 1126, column: 54, scope: !7740)
!7747 = !DILocalVariable(name: "inverted", arg: 3, scope: !7740, file: !3, line: 1126, type: !1661)
!7748 = !DILocation(line: 1126, column: 65, scope: !7740)
!7749 = !DILocalVariable(name: "op0", scope: !7740, file: !3, line: 1128, type: !1661)
!7750 = !DILocation(line: 1128, column: 8, scope: !7740)
!7751 = !DILocalVariable(name: "op1", scope: !7740, file: !3, line: 1128, type: !1661)
!7752 = !DILocation(line: 1128, column: 13, scope: !7740)
!7753 = !DILocation(line: 1130, column: 8, scope: !7754)
!7754 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 1130, column: 7)
!7755 = !DILocation(line: 1130, column: 7, scope: !7740)
!7756 = !DILocation(line: 1131, column: 5, scope: !7754)
!7757 = !DILocation(line: 1133, column: 9, scope: !7740)
!7758 = !DILocation(line: 1133, column: 7, scope: !7740)
!7759 = !DILocation(line: 1134, column: 9, scope: !7740)
!7760 = !DILocation(line: 1134, column: 7, scope: !7740)
!7761 = !DILocation(line: 1136, column: 11, scope: !7740)
!7762 = !DILocation(line: 1136, column: 3, scope: !7740)
!7763 = !DILocation(line: 1140, column: 11, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7765, file: !3, line: 1140, column: 11)
!7765 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 1137, column: 5)
!7766 = !DILocation(line: 1140, column: 11, scope: !7765)
!7767 = !DILocation(line: 1142, column: 4, scope: !7768)
!7768 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1141, column: 2)
!7769 = !DILocation(line: 1142, column: 15, scope: !7768)
!7770 = !DILocation(line: 1142, column: 37, scope: !7768)
!7771 = !DILocation(line: 1143, column: 35, scope: !7768)
!7772 = !DILocation(line: 1143, column: 4, scope: !7768)
!7773 = !DILocation(line: 1143, column: 15, scope: !7768)
!7774 = !DILocation(line: 1143, column: 33, scope: !7768)
!7775 = !DILocation(line: 1144, column: 45, scope: !7768)
!7776 = !DILocation(line: 1144, column: 50, scope: !7768)
!7777 = !DILocation(line: 1145, column: 11, scope: !7768)
!7778 = !DILocation(line: 1145, column: 22, scope: !7768)
!7779 = !DILocation(line: 1144, column: 4, scope: !7768)
!7780 = !DILocation(line: 1146, column: 42, scope: !7768)
!7781 = !DILocation(line: 1146, column: 47, scope: !7768)
!7782 = !DILocation(line: 1147, column: 11, scope: !7768)
!7783 = !DILocation(line: 1147, column: 22, scope: !7768)
!7784 = !DILocation(line: 1146, column: 4, scope: !7768)
!7785 = !DILocation(line: 1148, column: 2, scope: !7768)
!7786 = !DILocation(line: 1151, column: 11, scope: !7787)
!7787 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1150, column: 9)
!7788 = !DILocation(line: 1151, column: 22, scope: !7787)
!7789 = !DILocation(line: 1151, column: 44, scope: !7787)
!7790 = !DILocation(line: 1152, column: 35, scope: !7787)
!7791 = !DILocation(line: 1152, column: 4, scope: !7787)
!7792 = !DILocation(line: 1152, column: 15, scope: !7787)
!7793 = !DILocation(line: 1152, column: 33, scope: !7787)
!7794 = !DILocation(line: 1155, column: 35, scope: !7765)
!7795 = !DILocation(line: 1155, column: 52, scope: !7765)
!7796 = !DILocation(line: 1157, column: 6, scope: !7765)
!7797 = !DILocation(line: 1157, column: 11, scope: !7765)
!7798 = !DILocation(line: 1157, column: 17, scope: !7765)
!7799 = !DILocation(line: 1157, column: 28, scope: !7765)
!7800 = !DILocation(line: 1155, column: 7, scope: !7765)
!7801 = !DILocation(line: 1158, column: 43, scope: !7765)
!7802 = !DILocation(line: 1158, column: 48, scope: !7765)
!7803 = !DILocation(line: 1159, column: 7, scope: !7765)
!7804 = !DILocation(line: 1159, column: 18, scope: !7765)
!7805 = !DILocation(line: 1158, column: 7, scope: !7765)
!7806 = !DILocation(line: 1160, column: 7, scope: !7765)
!7807 = !DILocation(line: 1164, column: 11, scope: !7808)
!7808 = distinct !DILexicalBlock(scope: !7765, file: !3, line: 1164, column: 11)
!7809 = !DILocation(line: 1164, column: 11, scope: !7765)
!7810 = !DILocation(line: 1166, column: 4, scope: !7811)
!7811 = distinct !DILexicalBlock(scope: !7808, file: !3, line: 1165, column: 2)
!7812 = !DILocation(line: 1166, column: 15, scope: !7811)
!7813 = !DILocation(line: 1166, column: 37, scope: !7811)
!7814 = !DILocation(line: 1167, column: 35, scope: !7811)
!7815 = !DILocation(line: 1167, column: 4, scope: !7811)
!7816 = !DILocation(line: 1167, column: 15, scope: !7811)
!7817 = !DILocation(line: 1167, column: 33, scope: !7811)
!7818 = !DILocation(line: 1168, column: 45, scope: !7811)
!7819 = !DILocation(line: 1168, column: 50, scope: !7811)
!7820 = !DILocation(line: 1169, column: 11, scope: !7811)
!7821 = !DILocation(line: 1169, column: 22, scope: !7811)
!7822 = !DILocation(line: 1168, column: 4, scope: !7811)
!7823 = !DILocation(line: 1170, column: 2, scope: !7811)
!7824 = !DILocation(line: 1173, column: 4, scope: !7825)
!7825 = distinct !DILexicalBlock(scope: !7808, file: !3, line: 1172, column: 2)
!7826 = !DILocation(line: 1173, column: 15, scope: !7825)
!7827 = !DILocation(line: 1173, column: 37, scope: !7825)
!7828 = !DILocation(line: 1174, column: 35, scope: !7825)
!7829 = !DILocation(line: 1174, column: 4, scope: !7825)
!7830 = !DILocation(line: 1174, column: 15, scope: !7825)
!7831 = !DILocation(line: 1174, column: 33, scope: !7825)
!7832 = !DILocation(line: 1176, column: 7, scope: !7765)
!7833 = !DILocation(line: 1179, column: 11, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7765, file: !3, line: 1179, column: 11)
!7835 = !DILocation(line: 1179, column: 11, scope: !7765)
!7836 = !DILocation(line: 1181, column: 4, scope: !7837)
!7837 = distinct !DILexicalBlock(scope: !7834, file: !3, line: 1180, column: 2)
!7838 = !DILocation(line: 1181, column: 15, scope: !7837)
!7839 = !DILocation(line: 1181, column: 37, scope: !7837)
!7840 = !DILocation(line: 1182, column: 35, scope: !7837)
!7841 = !DILocation(line: 1182, column: 4, scope: !7837)
!7842 = !DILocation(line: 1182, column: 15, scope: !7837)
!7843 = !DILocation(line: 1182, column: 33, scope: !7837)
!7844 = !DILocation(line: 1183, column: 45, scope: !7837)
!7845 = !DILocation(line: 1183, column: 50, scope: !7837)
!7846 = !DILocation(line: 1184, column: 11, scope: !7837)
!7847 = !DILocation(line: 1184, column: 22, scope: !7837)
!7848 = !DILocation(line: 1183, column: 4, scope: !7837)
!7849 = !DILocation(line: 1185, column: 2, scope: !7837)
!7850 = !DILocation(line: 1188, column: 4, scope: !7851)
!7851 = distinct !DILexicalBlock(scope: !7834, file: !3, line: 1187, column: 2)
!7852 = !DILocation(line: 1188, column: 15, scope: !7851)
!7853 = !DILocation(line: 1188, column: 37, scope: !7851)
!7854 = !DILocation(line: 1189, column: 35, scope: !7851)
!7855 = !DILocation(line: 1189, column: 4, scope: !7851)
!7856 = !DILocation(line: 1189, column: 15, scope: !7851)
!7857 = !DILocation(line: 1189, column: 33, scope: !7851)
!7858 = !DILocation(line: 1191, column: 43, scope: !7765)
!7859 = !DILocation(line: 1191, column: 48, scope: !7765)
!7860 = !DILocation(line: 1192, column: 7, scope: !7765)
!7861 = !DILocation(line: 1192, column: 18, scope: !7765)
!7862 = !DILocation(line: 1191, column: 7, scope: !7765)
!7863 = !DILocation(line: 1193, column: 43, scope: !7765)
!7864 = !DILocation(line: 1193, column: 48, scope: !7765)
!7865 = !DILocation(line: 1194, column: 7, scope: !7765)
!7866 = !DILocation(line: 1194, column: 18, scope: !7765)
!7867 = !DILocation(line: 1193, column: 7, scope: !7765)
!7868 = !DILocation(line: 1195, column: 7, scope: !7765)
!7869 = !DILocation(line: 1198, column: 7, scope: !7765)
!7870 = !DILocation(line: 1198, column: 18, scope: !7765)
!7871 = !DILocation(line: 1198, column: 40, scope: !7765)
!7872 = !DILocation(line: 1199, column: 38, scope: !7765)
!7873 = !DILocation(line: 1199, column: 7, scope: !7765)
!7874 = !DILocation(line: 1199, column: 18, scope: !7765)
!7875 = !DILocation(line: 1199, column: 36, scope: !7765)
!7876 = !DILocation(line: 1200, column: 43, scope: !7765)
!7877 = !DILocation(line: 1200, column: 48, scope: !7765)
!7878 = !DILocation(line: 1201, column: 7, scope: !7765)
!7879 = !DILocation(line: 1201, column: 18, scope: !7765)
!7880 = !DILocation(line: 1200, column: 7, scope: !7765)
!7881 = !DILocation(line: 1202, column: 45, scope: !7765)
!7882 = !DILocation(line: 1202, column: 50, scope: !7765)
!7883 = !DILocation(line: 1203, column: 7, scope: !7765)
!7884 = !DILocation(line: 1203, column: 18, scope: !7765)
!7885 = !DILocation(line: 1202, column: 7, scope: !7765)
!7886 = !DILocation(line: 1204, column: 45, scope: !7765)
!7887 = !DILocation(line: 1204, column: 50, scope: !7765)
!7888 = !DILocation(line: 1205, column: 7, scope: !7765)
!7889 = !DILocation(line: 1205, column: 18, scope: !7765)
!7890 = !DILocation(line: 1204, column: 7, scope: !7765)
!7891 = !DILocation(line: 1206, column: 45, scope: !7765)
!7892 = !DILocation(line: 1206, column: 50, scope: !7765)
!7893 = !DILocation(line: 1207, column: 7, scope: !7765)
!7894 = !DILocation(line: 1207, column: 18, scope: !7765)
!7895 = !DILocation(line: 1206, column: 7, scope: !7765)
!7896 = !DILocation(line: 1208, column: 45, scope: !7765)
!7897 = !DILocation(line: 1208, column: 50, scope: !7765)
!7898 = !DILocation(line: 1209, column: 7, scope: !7765)
!7899 = !DILocation(line: 1209, column: 18, scope: !7765)
!7900 = !DILocation(line: 1208, column: 7, scope: !7765)
!7901 = !DILocation(line: 1210, column: 45, scope: !7765)
!7902 = !DILocation(line: 1210, column: 50, scope: !7765)
!7903 = !DILocation(line: 1211, column: 7, scope: !7765)
!7904 = !DILocation(line: 1211, column: 18, scope: !7765)
!7905 = !DILocation(line: 1210, column: 7, scope: !7765)
!7906 = !DILocation(line: 1212, column: 7, scope: !7765)
!7907 = !DILocation(line: 1216, column: 7, scope: !7765)
!7908 = !DILocation(line: 1216, column: 18, scope: !7765)
!7909 = !DILocation(line: 1216, column: 40, scope: !7765)
!7910 = !DILocation(line: 1217, column: 38, scope: !7765)
!7911 = !DILocation(line: 1217, column: 7, scope: !7765)
!7912 = !DILocation(line: 1217, column: 18, scope: !7765)
!7913 = !DILocation(line: 1217, column: 36, scope: !7765)
!7914 = !DILocation(line: 1218, column: 35, scope: !7765)
!7915 = !DILocation(line: 1218, column: 52, scope: !7765)
!7916 = !DILocation(line: 1220, column: 6, scope: !7765)
!7917 = !DILocation(line: 1220, column: 11, scope: !7765)
!7918 = !DILocation(line: 1220, column: 17, scope: !7765)
!7919 = !DILocation(line: 1220, column: 28, scope: !7765)
!7920 = !DILocation(line: 1218, column: 7, scope: !7765)
!7921 = !DILocation(line: 1221, column: 43, scope: !7765)
!7922 = !DILocation(line: 1221, column: 48, scope: !7765)
!7923 = !DILocation(line: 1222, column: 7, scope: !7765)
!7924 = !DILocation(line: 1222, column: 18, scope: !7765)
!7925 = !DILocation(line: 1221, column: 7, scope: !7765)
!7926 = !DILocation(line: 1223, column: 7, scope: !7765)
!7927 = !DILocation(line: 1226, column: 7, scope: !7765)
!7928 = !DILocation(line: 1226, column: 18, scope: !7765)
!7929 = !DILocation(line: 1226, column: 40, scope: !7765)
!7930 = !DILocation(line: 1227, column: 38, scope: !7765)
!7931 = !DILocation(line: 1227, column: 7, scope: !7765)
!7932 = !DILocation(line: 1227, column: 18, scope: !7765)
!7933 = !DILocation(line: 1227, column: 36, scope: !7765)
!7934 = !DILocation(line: 1228, column: 45, scope: !7765)
!7935 = !DILocation(line: 1228, column: 50, scope: !7765)
!7936 = !DILocation(line: 1229, column: 7, scope: !7765)
!7937 = !DILocation(line: 1229, column: 18, scope: !7765)
!7938 = !DILocation(line: 1228, column: 7, scope: !7765)
!7939 = !DILocation(line: 1230, column: 45, scope: !7765)
!7940 = !DILocation(line: 1230, column: 50, scope: !7765)
!7941 = !DILocation(line: 1231, column: 7, scope: !7765)
!7942 = !DILocation(line: 1231, column: 18, scope: !7765)
!7943 = !DILocation(line: 1230, column: 7, scope: !7765)
!7944 = !DILocation(line: 1232, column: 7, scope: !7765)
!7945 = !DILocation(line: 1235, column: 7, scope: !7765)
!7946 = !DILocation(line: 1235, column: 18, scope: !7765)
!7947 = !DILocation(line: 1235, column: 40, scope: !7765)
!7948 = !DILocation(line: 1236, column: 38, scope: !7765)
!7949 = !DILocation(line: 1236, column: 7, scope: !7765)
!7950 = !DILocation(line: 1236, column: 18, scope: !7765)
!7951 = !DILocation(line: 1236, column: 36, scope: !7765)
!7952 = !DILocation(line: 1237, column: 43, scope: !7765)
!7953 = !DILocation(line: 1237, column: 48, scope: !7765)
!7954 = !DILocation(line: 1238, column: 7, scope: !7765)
!7955 = !DILocation(line: 1238, column: 18, scope: !7765)
!7956 = !DILocation(line: 1237, column: 7, scope: !7765)
!7957 = !DILocation(line: 1239, column: 48, scope: !7765)
!7958 = !DILocation(line: 1239, column: 53, scope: !7765)
!7959 = !DILocation(line: 1240, column: 7, scope: !7765)
!7960 = !DILocation(line: 1240, column: 18, scope: !7765)
!7961 = !DILocation(line: 1239, column: 7, scope: !7765)
!7962 = !DILocation(line: 1241, column: 7, scope: !7765)
!7963 = !DILocation(line: 1244, column: 7, scope: !7765)
!7964 = !DILocation(line: 1244, column: 18, scope: !7765)
!7965 = !DILocation(line: 1244, column: 40, scope: !7765)
!7966 = !DILocation(line: 1245, column: 38, scope: !7765)
!7967 = !DILocation(line: 1245, column: 7, scope: !7765)
!7968 = !DILocation(line: 1245, column: 18, scope: !7765)
!7969 = !DILocation(line: 1245, column: 36, scope: !7765)
!7970 = !DILocation(line: 1246, column: 7, scope: !7765)
!7971 = !DILocation(line: 1251, column: 30, scope: !7740)
!7972 = !DILocation(line: 1251, column: 37, scope: !7740)
!7973 = !DILocation(line: 1251, column: 48, scope: !7740)
!7974 = !DILocation(line: 1251, column: 69, scope: !7740)
!7975 = !DILocation(line: 1251, column: 3, scope: !7740)
!7976 = !DILocation(line: 1252, column: 43, scope: !7740)
!7977 = !DILocation(line: 1252, column: 3, scope: !7740)
!7978 = !DILocation(line: 1252, column: 14, scope: !7740)
!7979 = !DILocation(line: 1252, column: 35, scope: !7740)
!7980 = !DILocation(line: 1252, column: 41, scope: !7740)
!7981 = !DILocation(line: 1259, column: 30, scope: !7740)
!7982 = !DILocation(line: 1259, column: 41, scope: !7740)
!7983 = !DILocation(line: 1259, column: 52, scope: !7740)
!7984 = !DILocation(line: 1259, column: 73, scope: !7740)
!7985 = !DILocation(line: 1259, column: 3, scope: !7740)
!7986 = !DILocation(line: 1260, column: 43, scope: !7740)
!7987 = !DILocation(line: 1260, column: 3, scope: !7740)
!7988 = !DILocation(line: 1260, column: 14, scope: !7740)
!7989 = !DILocation(line: 1260, column: 35, scope: !7740)
!7990 = !DILocation(line: 1260, column: 41, scope: !7740)
!7991 = !DILocation(line: 1261, column: 1, scope: !7740)
!7992 = distinct !DISubprogram(name: "bb_seq", scope: !594, file: !594, line: 237, type: !7993, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!7993 = !DISubroutineType(types: !7994)
!7994 = !{!1916, !4254}
!7995 = !DILocalVariable(name: "bb", arg: 1, scope: !7992, file: !594, line: 237, type: !4254)
!7996 = !DILocation(line: 237, column: 27, scope: !7992)
!7997 = !DILocation(line: 239, column: 13, scope: !7992)
!7998 = !DILocation(line: 239, column: 17, scope: !7992)
!7999 = !DILocation(line: 239, column: 23, scope: !7992)
!8000 = !DILocation(line: 239, column: 33, scope: !7992)
!8001 = !DILocation(line: 239, column: 36, scope: !7992)
!8002 = !DILocation(line: 239, column: 40, scope: !7992)
!8003 = !DILocation(line: 239, column: 43, scope: !7992)
!8004 = !DILocation(line: 239, column: 10, scope: !7992)
!8005 = !DILocation(line: 239, column: 53, scope: !7992)
!8006 = !DILocation(line: 239, column: 57, scope: !7992)
!8007 = !DILocation(line: 239, column: 60, scope: !7992)
!8008 = !DILocation(line: 239, column: 68, scope: !7992)
!8009 = !DILocation(line: 239, column: 3, scope: !7992)
!8010 = distinct !DISubprogram(name: "gimple_seq_last", scope: !594, file: !594, line: 178, type: !8011, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8011 = !DISubroutineType(types: !8012)
!8012 = !{!1921, !8013}
!8013 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !1591, line: 67, baseType: !8014)
!8014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8015, size: 64)
!8015 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1918)
!8016 = !DILocalVariable(name: "s", arg: 1, scope: !8010, file: !594, line: 178, type: !8013)
!8017 = !DILocation(line: 178, column: 35, scope: !8010)
!8018 = !DILocation(line: 180, column: 10, scope: !8010)
!8019 = !DILocation(line: 180, column: 14, scope: !8010)
!8020 = !DILocation(line: 180, column: 17, scope: !8010)
!8021 = !DILocation(line: 180, column: 3, scope: !8010)
!8022 = distinct !DISubprogram(name: "build_and_record_new_cond", scope: !3, file: !3, line: 1102, type: !8023, scopeLine: 1105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8023 = !DISubroutineType(types: !8024)
!8024 = !{null, !317, !1661, !1661, !3042}
!8025 = !DILocalVariable(name: "code", arg: 1, scope: !8022, file: !3, line: 1102, type: !317)
!8026 = !DILocation(line: 1102, column: 43, scope: !8022)
!8027 = !DILocalVariable(name: "op0", arg: 2, scope: !8022, file: !3, line: 1103, type: !1661)
!8028 = !DILocation(line: 1103, column: 33, scope: !8022)
!8029 = !DILocalVariable(name: "op1", arg: 3, scope: !8022, file: !3, line: 1103, type: !1661)
!8030 = !DILocation(line: 1103, column: 43, scope: !8022)
!8031 = !DILocalVariable(name: "p", arg: 4, scope: !8022, file: !3, line: 1104, type: !3042)
!8032 = !DILocation(line: 1104, column: 53, scope: !8022)
!8033 = !DILocalVariable(name: "cond", scope: !8022, file: !3, line: 1106, type: !5830)
!8034 = !DILocation(line: 1106, column: 25, scope: !8022)
!8035 = !DILocation(line: 1106, column: 33, scope: !8022)
!8036 = !DILocation(line: 1106, column: 36, scope: !8022)
!8037 = !DILocation(line: 1108, column: 3, scope: !8022)
!8038 = !DILocation(line: 1110, column: 16, scope: !8022)
!8039 = !DILocation(line: 1110, column: 3, scope: !8022)
!8040 = !DILocation(line: 1110, column: 9, scope: !8022)
!8041 = !DILocation(line: 1110, column: 14, scope: !8022)
!8042 = !DILocation(line: 1111, column: 3, scope: !8022)
!8043 = !DILocation(line: 1111, column: 9, scope: !8022)
!8044 = !DILocation(line: 1111, column: 14, scope: !8022)
!8045 = !DILocation(line: 1112, column: 25, scope: !8022)
!8046 = !DILocation(line: 1112, column: 3, scope: !8022)
!8047 = !DILocation(line: 1112, column: 9, scope: !8022)
!8048 = !DILocation(line: 1112, column: 13, scope: !8022)
!8049 = !DILocation(line: 1112, column: 20, scope: !8022)
!8050 = !DILocation(line: 1112, column: 23, scope: !8022)
!8051 = !DILocation(line: 1113, column: 28, scope: !8022)
!8052 = !DILocation(line: 1113, column: 3, scope: !8022)
!8053 = !DILocation(line: 1113, column: 9, scope: !8022)
!8054 = !DILocation(line: 1113, column: 13, scope: !8022)
!8055 = !DILocation(line: 1113, column: 20, scope: !8022)
!8056 = !DILocation(line: 1113, column: 26, scope: !8022)
!8057 = !DILocation(line: 1114, column: 28, scope: !8022)
!8058 = !DILocation(line: 1114, column: 3, scope: !8022)
!8059 = !DILocation(line: 1114, column: 9, scope: !8022)
!8060 = !DILocation(line: 1114, column: 13, scope: !8022)
!8061 = !DILocation(line: 1114, column: 20, scope: !8022)
!8062 = !DILocation(line: 1114, column: 26, scope: !8022)
!8063 = !DILocation(line: 1116, column: 14, scope: !8022)
!8064 = !DILocation(line: 1116, column: 3, scope: !8022)
!8065 = !DILocation(line: 1116, column: 6, scope: !8022)
!8066 = !DILocation(line: 1116, column: 12, scope: !8022)
!8067 = !DILocation(line: 1117, column: 1, scope: !8022)
!8068 = distinct !DISubprogram(name: "initialize_expr_from_cond", scope: !3, file: !3, line: 293, type: !8069, scopeLine: 294, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8069 = !DISubroutineType(types: !8070)
!8070 = !{null, !1661, !5830}
!8071 = !DILocalVariable(name: "cond", arg: 1, scope: !8068, file: !3, line: 293, type: !1661)
!8072 = !DILocation(line: 293, column: 33, scope: !8068)
!8073 = !DILocalVariable(name: "expr", arg: 2, scope: !8068, file: !3, line: 293, type: !5830)
!8074 = !DILocation(line: 293, column: 61, scope: !8068)
!8075 = !DILocation(line: 295, column: 16, scope: !8068)
!8076 = !DILocation(line: 295, column: 3, scope: !8068)
!8077 = !DILocation(line: 295, column: 9, scope: !8068)
!8078 = !DILocation(line: 295, column: 14, scope: !8068)
!8079 = !DILocation(line: 297, column: 7, scope: !8080)
!8080 = distinct !DILexicalBlock(scope: !8068, file: !3, line: 297, column: 7)
!8081 = !DILocation(line: 297, column: 7, scope: !8068)
!8082 = !DILocation(line: 299, column: 7, scope: !8083)
!8083 = distinct !DILexicalBlock(scope: !8080, file: !3, line: 298, column: 5)
!8084 = !DILocation(line: 299, column: 13, scope: !8083)
!8085 = !DILocation(line: 299, column: 18, scope: !8083)
!8086 = !DILocation(line: 300, column: 29, scope: !8083)
!8087 = !DILocation(line: 300, column: 7, scope: !8083)
!8088 = !DILocation(line: 300, column: 13, scope: !8083)
!8089 = !DILocation(line: 300, column: 17, scope: !8083)
!8090 = !DILocation(line: 300, column: 24, scope: !8083)
!8091 = !DILocation(line: 300, column: 27, scope: !8083)
!8092 = !DILocation(line: 301, column: 32, scope: !8083)
!8093 = !DILocation(line: 301, column: 7, scope: !8083)
!8094 = !DILocation(line: 301, column: 13, scope: !8083)
!8095 = !DILocation(line: 301, column: 17, scope: !8083)
!8096 = !DILocation(line: 301, column: 24, scope: !8083)
!8097 = !DILocation(line: 301, column: 30, scope: !8083)
!8098 = !DILocation(line: 302, column: 32, scope: !8083)
!8099 = !DILocation(line: 302, column: 7, scope: !8083)
!8100 = !DILocation(line: 302, column: 13, scope: !8083)
!8101 = !DILocation(line: 302, column: 17, scope: !8083)
!8102 = !DILocation(line: 302, column: 24, scope: !8083)
!8103 = !DILocation(line: 302, column: 30, scope: !8083)
!8104 = !DILocation(line: 303, column: 5, scope: !8083)
!8105 = !DILocation(line: 304, column: 12, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8080, file: !3, line: 304, column: 12)
!8107 = !DILocation(line: 304, column: 29, scope: !8106)
!8108 = !DILocation(line: 304, column: 12, scope: !8080)
!8109 = !DILocation(line: 306, column: 7, scope: !8110)
!8110 = distinct !DILexicalBlock(scope: !8106, file: !3, line: 305, column: 5)
!8111 = !DILocation(line: 306, column: 13, scope: !8110)
!8112 = !DILocation(line: 306, column: 18, scope: !8110)
!8113 = !DILocation(line: 307, column: 7, scope: !8110)
!8114 = !DILocation(line: 307, column: 13, scope: !8110)
!8115 = !DILocation(line: 307, column: 17, scope: !8110)
!8116 = !DILocation(line: 307, column: 23, scope: !8110)
!8117 = !DILocation(line: 307, column: 26, scope: !8110)
!8118 = !DILocation(line: 308, column: 30, scope: !8110)
!8119 = !DILocation(line: 308, column: 7, scope: !8110)
!8120 = !DILocation(line: 308, column: 13, scope: !8110)
!8121 = !DILocation(line: 308, column: 17, scope: !8110)
!8122 = !DILocation(line: 308, column: 23, scope: !8110)
!8123 = !DILocation(line: 308, column: 28, scope: !8110)
!8124 = !DILocation(line: 309, column: 5, scope: !8110)
!8125 = !DILocation(line: 311, column: 5, scope: !8106)
!8126 = !DILocation(line: 312, column: 1, scope: !8068)
!8127 = distinct !DISubprogram(name: "dom_thread_across_edge", scope: !3, file: !3, line: 888, type: !8128, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8128 = !DISubroutineType(types: !8129)
!8129 = !{null, !3120, !1906}
!8130 = !DILocalVariable(name: "walk_data", arg: 1, scope: !8127, file: !3, line: 888, type: !3120)
!8131 = !DILocation(line: 888, column: 47, scope: !8127)
!8132 = !DILocalVariable(name: "e", arg: 2, scope: !8127, file: !3, line: 888, type: !1906)
!8133 = !DILocation(line: 888, column: 63, scope: !8127)
!8134 = !DILocation(line: 890, column: 9, scope: !8135)
!8135 = distinct !DILexicalBlock(scope: !8127, file: !3, line: 890, column: 7)
!8136 = !DILocation(line: 890, column: 20, scope: !8135)
!8137 = !DILocation(line: 890, column: 7, scope: !8127)
!8138 = !DILocalVariable(name: "dummy_cond", scope: !8139, file: !3, line: 892, type: !1926)
!8139 = distinct !DILexicalBlock(scope: !8135, file: !3, line: 891, column: 3)
!8140 = !DILocation(line: 892, column: 12, scope: !8139)
!8141 = !DILocation(line: 894, column: 28, scope: !8139)
!8142 = !DILocation(line: 894, column: 47, scope: !8139)
!8143 = !DILocation(line: 893, column: 9, scope: !8139)
!8144 = !DILocation(line: 896, column: 30, scope: !8139)
!8145 = !DILocation(line: 896, column: 5, scope: !8139)
!8146 = !DILocation(line: 896, column: 16, scope: !8139)
!8147 = !DILocation(line: 896, column: 28, scope: !8139)
!8148 = !DILocation(line: 897, column: 3, scope: !8139)
!8149 = !DILocation(line: 899, column: 32, scope: !8127)
!8150 = !DILocation(line: 899, column: 43, scope: !8127)
!8151 = !DILocation(line: 899, column: 23, scope: !8127)
!8152 = !DILocation(line: 899, column: 56, scope: !8127)
!8153 = !DILocation(line: 899, column: 3, scope: !8127)
!8154 = !DILocation(line: 902, column: 1, scope: !8127)
!8155 = distinct !DISubprogram(name: "record_const_or_copy", scope: !3, file: !3, line: 1316, type: !5556, scopeLine: 1317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8156 = !DILocalVariable(name: "x", arg: 1, scope: !8155, file: !3, line: 1316, type: !1661)
!8157 = !DILocation(line: 1316, column: 28, scope: !8155)
!8158 = !DILocalVariable(name: "y", arg: 2, scope: !8155, file: !3, line: 1316, type: !1661)
!8159 = !DILocation(line: 1316, column: 36, scope: !8155)
!8160 = !DILocalVariable(name: "prev_x", scope: !8155, file: !3, line: 1318, type: !1661)
!8161 = !DILocation(line: 1318, column: 8, scope: !8155)
!8162 = !DILocation(line: 1318, column: 17, scope: !8155)
!8163 = !DILocation(line: 1320, column: 3, scope: !8155)
!8164 = !DILocation(line: 1322, column: 7, scope: !8165)
!8165 = distinct !DILexicalBlock(scope: !8155, file: !3, line: 1322, column: 7)
!8166 = !DILocation(line: 1322, column: 21, scope: !8165)
!8167 = !DILocation(line: 1322, column: 7, scope: !8155)
!8168 = !DILocalVariable(name: "tmp", scope: !8169, file: !3, line: 1324, type: !1661)
!8169 = distinct !DILexicalBlock(scope: !8165, file: !3, line: 1323, column: 5)
!8170 = !DILocation(line: 1324, column: 12, scope: !8169)
!8171 = !DILocation(line: 1324, column: 18, scope: !8169)
!8172 = !DILocation(line: 1325, column: 11, scope: !8173)
!8173 = distinct !DILexicalBlock(scope: !8169, file: !3, line: 1325, column: 11)
!8174 = !DILocation(line: 1325, column: 11, scope: !8169)
!8175 = !DILocation(line: 1326, column: 6, scope: !8173)
!8176 = !DILocation(line: 1326, column: 4, scope: !8173)
!8177 = !DILocation(line: 1326, column: 2, scope: !8173)
!8178 = !DILocation(line: 1327, column: 5, scope: !8169)
!8179 = !DILocation(line: 1329, column: 27, scope: !8155)
!8180 = !DILocation(line: 1329, column: 30, scope: !8155)
!8181 = !DILocation(line: 1329, column: 33, scope: !8155)
!8182 = !DILocation(line: 1329, column: 3, scope: !8155)
!8183 = !DILocation(line: 1330, column: 1, scope: !8155)
!8184 = distinct !DISubprogram(name: "remove_local_expressions_from_table", scope: !3, file: !3, line: 817, type: !3383, scopeLine: 818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8185 = !DILocation(line: 820, column: 3, scope: !8184)
!8186 = !DILocation(line: 820, column: 10, scope: !8184)
!8187 = !DILocation(line: 820, column: 58, scope: !8184)
!8188 = !DILocalVariable(name: "victim", scope: !8189, file: !3, line: 822, type: !3030)
!8189 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 821, column: 5)
!8190 = !DILocation(line: 822, column: 23, scope: !8189)
!8191 = !DILocation(line: 822, column: 32, scope: !8189)
!8192 = !DILocalVariable(name: "slot", scope: !8189, file: !3, line: 823, type: !2465)
!8193 = !DILocation(line: 823, column: 14, scope: !8189)
!8194 = !DILocation(line: 825, column: 11, scope: !8195)
!8195 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 825, column: 11)
!8196 = !DILocation(line: 825, column: 18, scope: !8195)
!8197 = !DILocation(line: 825, column: 11, scope: !8189)
!8198 = !DILocation(line: 826, column: 2, scope: !8195)
!8199 = !DILocation(line: 831, column: 11, scope: !8200)
!8200 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 831, column: 11)
!8201 = !DILocation(line: 831, column: 21, scope: !8200)
!8202 = !DILocation(line: 831, column: 25, scope: !8200)
!8203 = !DILocation(line: 831, column: 36, scope: !8200)
!8204 = !DILocation(line: 831, column: 11, scope: !8189)
!8205 = !DILocation(line: 833, column: 20, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8200, file: !3, line: 832, column: 9)
!8207 = !DILocation(line: 833, column: 11, scope: !8206)
!8208 = !DILocation(line: 834, column: 32, scope: !8206)
!8209 = !DILocation(line: 834, column: 43, scope: !8206)
!8210 = !DILocation(line: 834, column: 11, scope: !8206)
!8211 = !DILocation(line: 835, column: 9, scope: !8206)
!8212 = !DILocation(line: 837, column: 40, scope: !8189)
!8213 = !DILocation(line: 838, column: 12, scope: !8189)
!8214 = !DILocation(line: 838, column: 20, scope: !8189)
!8215 = !DILocation(line: 838, column: 28, scope: !8189)
!8216 = !DILocation(line: 837, column: 14, scope: !8189)
!8217 = !DILocation(line: 837, column: 12, scope: !8189)
!8218 = !DILocation(line: 839, column: 7, scope: !8189)
!8219 = !DILocation(line: 840, column: 24, scope: !8189)
!8220 = !DILocation(line: 840, column: 37, scope: !8189)
!8221 = !DILocation(line: 840, column: 7, scope: !8189)
!8222 = distinct !{!8222, !8185, !8223}
!8223 = !DILocation(line: 841, column: 5, scope: !8184)
!8224 = !DILocation(line: 842, column: 1, scope: !8184)
!8225 = distinct !DISubprogram(name: "restore_vars_to_original_value", scope: !3, file: !3, line: 849, type: !3383, scopeLine: 850, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8226 = !DILocation(line: 851, column: 3, scope: !8225)
!8227 = !DILocation(line: 851, column: 10, scope: !8225)
!8228 = !DILocation(line: 851, column: 52, scope: !8225)
!8229 = !DILocalVariable(name: "prev_value", scope: !8230, file: !3, line: 853, type: !1661)
!8230 = distinct !DILexicalBlock(scope: !8225, file: !3, line: 852, column: 5)
!8231 = !DILocation(line: 853, column: 12, scope: !8230)
!8232 = !DILocalVariable(name: "dest", scope: !8230, file: !3, line: 853, type: !1661)
!8233 = !DILocation(line: 853, column: 24, scope: !8230)
!8234 = !DILocation(line: 855, column: 14, scope: !8230)
!8235 = !DILocation(line: 855, column: 12, scope: !8230)
!8236 = !DILocation(line: 857, column: 11, scope: !8237)
!8237 = distinct !DILexicalBlock(scope: !8230, file: !3, line: 857, column: 11)
!8238 = !DILocation(line: 857, column: 16, scope: !8237)
!8239 = !DILocation(line: 857, column: 11, scope: !8230)
!8240 = !DILocation(line: 858, column: 2, scope: !8237)
!8241 = !DILocation(line: 860, column: 11, scope: !8242)
!8242 = distinct !DILexicalBlock(scope: !8230, file: !3, line: 860, column: 11)
!8243 = !DILocation(line: 860, column: 21, scope: !8242)
!8244 = !DILocation(line: 860, column: 25, scope: !8242)
!8245 = !DILocation(line: 860, column: 36, scope: !8242)
!8246 = !DILocation(line: 860, column: 11, scope: !8230)
!8247 = !DILocation(line: 862, column: 13, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 861, column: 2)
!8249 = !DILocation(line: 862, column: 4, scope: !8248)
!8250 = !DILocation(line: 863, column: 24, scope: !8248)
!8251 = !DILocation(line: 863, column: 35, scope: !8248)
!8252 = !DILocation(line: 863, column: 4, scope: !8248)
!8253 = !DILocation(line: 864, column: 13, scope: !8248)
!8254 = !DILocation(line: 864, column: 4, scope: !8248)
!8255 = !DILocation(line: 865, column: 24, scope: !8248)
!8256 = !DILocation(line: 865, column: 35, scope: !8248)
!8257 = !DILocation(line: 865, column: 4, scope: !8248)
!8258 = !DILocation(line: 866, column: 13, scope: !8248)
!8259 = !DILocation(line: 866, column: 4, scope: !8248)
!8260 = !DILocation(line: 867, column: 2, scope: !8248)
!8261 = !DILocation(line: 869, column: 20, scope: !8230)
!8262 = !DILocation(line: 869, column: 18, scope: !8230)
!8263 = !DILocation(line: 870, column: 27, scope: !8230)
!8264 = !DILocation(line: 870, column: 33, scope: !8230)
!8265 = !DILocation(line: 870, column: 7, scope: !8230)
!8266 = distinct !{!8266, !8226, !8267}
!8267 = !DILocation(line: 871, column: 5, scope: !8225)
!8268 = !DILocation(line: 872, column: 1, scope: !8225)
!8269 = distinct !DISubprogram(name: "simplify_stmt_for_jump_threading", scope: !3, file: !3, line: 877, type: !8270, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8270 = !DISubroutineType(types: !8271)
!8271 = !{!1661, !1926, !1926}
!8272 = !DILocalVariable(name: "stmt", arg: 1, scope: !8269, file: !3, line: 877, type: !1926)
!8273 = !DILocation(line: 877, column: 42, scope: !8269)
!8274 = !DILocalVariable(name: "within_stmt", arg: 2, scope: !8269, file: !3, line: 878, type: !1926)
!8275 = !DILocation(line: 878, column: 14, scope: !8269)
!8276 = !DILocation(line: 880, column: 29, scope: !8269)
!8277 = !DILocation(line: 880, column: 10, scope: !8269)
!8278 = !DILocation(line: 880, column: 3, scope: !8269)
!8279 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_base_length", scope: !3, file: !3, line: 125, type: !8280, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8280 = !DISubroutineType(types: !8281)
!8281 = !{!7, !8282}
!8282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8283, size: 64)
!8283 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3023)
!8284 = !DILocalVariable(name: "vec_", arg: 1, scope: !8279, file: !3, line: 125, type: !8282)
!8285 = !DILocation(line: 125, column: 1, scope: !8279)
!8286 = distinct !DISubprogram(name: "VEC_expr_hash_elt_t_base_pop", scope: !3, file: !3, line: 125, type: !8287, scopeLine: 125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8287 = !DISubroutineType(types: !8288)
!8288 = !{!3030, !5485}
!8289 = !DILocalVariable(name: "vec_", arg: 1, scope: !8286, file: !3, line: 125, type: !5485)
!8290 = !DILocation(line: 125, column: 1, scope: !8286)
!8291 = !DILocalVariable(name: "obj_", scope: !8286, file: !3, line: 125, type: !3030)
!8292 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !318, file: !318, line: 182, type: !8293, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8293 = !DISubroutineType(types: !8294)
!8294 = !{!1661, !5508}
!8295 = !DILocalVariable(name: "vec_", arg: 1, scope: !8292, file: !318, line: 182, type: !5508)
!8296 = !DILocation(line: 182, column: 1, scope: !8292)
!8297 = !DILocalVariable(name: "obj_", scope: !8292, file: !318, line: 182, type: !1661)
!8298 = distinct !DISubprogram(name: "gimple_seq_first", scope: !594, file: !594, line: 159, type: !8011, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8299 = !DILocalVariable(name: "s", arg: 1, scope: !8298, file: !594, line: 159, type: !8013)
!8300 = !DILocation(line: 159, column: 36, scope: !8298)
!8301 = !DILocation(line: 161, column: 10, scope: !8298)
!8302 = !DILocation(line: 161, column: 14, scope: !8298)
!8303 = !DILocation(line: 161, column: 17, scope: !8298)
!8304 = !DILocation(line: 161, column: 3, scope: !8298)
!8305 = distinct !DISubprogram(name: "eliminate_degenerate_phis_1", scope: !3, file: !3, line: 2751, type: !8306, scopeLine: 2752, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8306 = !DISubroutineType(types: !8307)
!8307 = !{null, !2412, !1590}
!8308 = !DILocalVariable(name: "bb", arg: 1, scope: !8305, file: !3, line: 2751, type: !2412)
!8309 = !DILocation(line: 2751, column: 42, scope: !8305)
!8310 = !DILocalVariable(name: "interesting_names", arg: 2, scope: !8305, file: !3, line: 2751, type: !1590)
!8311 = !DILocation(line: 2751, column: 53, scope: !8305)
!8312 = !DILocalVariable(name: "gsi", scope: !8305, file: !3, line: 2753, type: !3175)
!8313 = !DILocation(line: 2753, column: 24, scope: !8305)
!8314 = !DILocalVariable(name: "son", scope: !8305, file: !3, line: 2754, type: !2412)
!8315 = !DILocation(line: 2754, column: 15, scope: !8305)
!8316 = !DILocation(line: 2756, column: 30, scope: !8317)
!8317 = distinct !DILexicalBlock(scope: !8305, file: !3, line: 2756, column: 3)
!8318 = !DILocation(line: 2756, column: 14, scope: !8317)
!8319 = !DILocation(line: 2756, column: 8, scope: !8317)
!8320 = !DILocation(line: 2756, column: 36, scope: !8321)
!8321 = distinct !DILexicalBlock(scope: !8317, file: !3, line: 2756, column: 3)
!8322 = !DILocation(line: 2756, column: 35, scope: !8321)
!8323 = !DILocation(line: 2756, column: 3, scope: !8317)
!8324 = !DILocalVariable(name: "phi", scope: !8325, file: !3, line: 2758, type: !1926)
!8325 = distinct !DILexicalBlock(scope: !8321, file: !3, line: 2757, column: 5)
!8326 = !DILocation(line: 2758, column: 14, scope: !8325)
!8327 = !DILocation(line: 2758, column: 20, scope: !8325)
!8328 = !DILocation(line: 2760, column: 32, scope: !8325)
!8329 = !DILocation(line: 2760, column: 37, scope: !8325)
!8330 = !DILocation(line: 2760, column: 7, scope: !8325)
!8331 = !DILocation(line: 2761, column: 5, scope: !8325)
!8332 = !DILocation(line: 2756, column: 53, scope: !8321)
!8333 = !DILocation(line: 2756, column: 3, scope: !8321)
!8334 = distinct !{!8334, !8323, !8335}
!8335 = !DILocation(line: 2761, column: 5, scope: !8317)
!8336 = !DILocation(line: 2764, column: 45, scope: !8337)
!8337 = distinct !DILexicalBlock(scope: !8305, file: !3, line: 2764, column: 3)
!8338 = !DILocation(line: 2764, column: 14, scope: !8337)
!8339 = !DILocation(line: 2764, column: 12, scope: !8337)
!8340 = !DILocation(line: 2764, column: 8, scope: !8337)
!8341 = !DILocation(line: 2765, column: 8, scope: !8342)
!8342 = distinct !DILexicalBlock(scope: !8337, file: !3, line: 2764, column: 3)
!8343 = !DILocation(line: 2764, column: 3, scope: !8337)
!8344 = !DILocation(line: 2767, column: 34, scope: !8342)
!8345 = !DILocation(line: 2767, column: 39, scope: !8342)
!8346 = !DILocation(line: 2767, column: 5, scope: !8342)
!8347 = !DILocation(line: 2766, column: 44, scope: !8342)
!8348 = !DILocation(line: 2766, column: 14, scope: !8342)
!8349 = !DILocation(line: 2766, column: 12, scope: !8342)
!8350 = !DILocation(line: 2764, column: 3, scope: !8342)
!8351 = distinct !{!8351, !8343, !8352}
!8352 = !DILocation(line: 2767, column: 56, scope: !8337)
!8353 = !DILocation(line: 2768, column: 1, scope: !8305)
!8354 = distinct !DISubprogram(name: "eliminate_const_or_copy", scope: !3, file: !3, line: 2710, type: !8355, scopeLine: 2711, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8355 = !DISubroutineType(types: !8356)
!8356 = !{null, !1926, !1590}
!8357 = !DILocalVariable(name: "stmt", arg: 1, scope: !8354, file: !3, line: 2710, type: !1926)
!8358 = !DILocation(line: 2710, column: 33, scope: !8354)
!8359 = !DILocalVariable(name: "interesting_names", arg: 2, scope: !8354, file: !3, line: 2710, type: !1590)
!8360 = !DILocation(line: 2710, column: 46, scope: !8354)
!8361 = !DILocalVariable(name: "lhs", scope: !8354, file: !3, line: 2712, type: !1661)
!8362 = !DILocation(line: 2712, column: 8, scope: !8354)
!8363 = !DILocation(line: 2712, column: 37, scope: !8354)
!8364 = !DILocation(line: 2712, column: 14, scope: !8354)
!8365 = !DILocalVariable(name: "rhs", scope: !8354, file: !3, line: 2713, type: !1661)
!8366 = !DILocation(line: 2713, column: 8, scope: !8354)
!8367 = !DILocalVariable(name: "version", scope: !8354, file: !3, line: 2714, type: !1643)
!8368 = !DILocation(line: 2714, column: 7, scope: !8354)
!8369 = !DILocation(line: 2714, column: 17, scope: !8354)
!8370 = !DILocation(line: 2721, column: 22, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 2721, column: 7)
!8372 = !DILocation(line: 2721, column: 7, scope: !8371)
!8373 = !DILocation(line: 2721, column: 7, scope: !8354)
!8374 = !DILocation(line: 2723, column: 25, scope: !8375)
!8375 = distinct !DILexicalBlock(scope: !8371, file: !3, line: 2722, column: 5)
!8376 = !DILocation(line: 2723, column: 44, scope: !8375)
!8377 = !DILocation(line: 2723, column: 7, scope: !8375)
!8378 = !DILocation(line: 2724, column: 27, scope: !8375)
!8379 = !DILocation(line: 2724, column: 7, scope: !8375)
!8380 = !DILocation(line: 2725, column: 7, scope: !8375)
!8381 = !DILocation(line: 2730, column: 29, scope: !8354)
!8382 = !DILocation(line: 2730, column: 9, scope: !8354)
!8383 = !DILocation(line: 2730, column: 7, scope: !8354)
!8384 = !DILocation(line: 2731, column: 8, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 2731, column: 7)
!8386 = !DILocation(line: 2731, column: 7, scope: !8354)
!8387 = !DILocation(line: 2733, column: 25, scope: !8388)
!8388 = distinct !DILexicalBlock(scope: !8385, file: !3, line: 2732, column: 5)
!8389 = !DILocation(line: 2733, column: 44, scope: !8388)
!8390 = !DILocation(line: 2733, column: 7, scope: !8388)
!8391 = !DILocation(line: 2734, column: 7, scope: !8388)
!8392 = !DILocation(line: 2737, column: 27, scope: !8354)
!8393 = !DILocation(line: 2737, column: 33, scope: !8354)
!8394 = !DILocation(line: 2737, column: 38, scope: !8354)
!8395 = !DILocation(line: 2737, column: 43, scope: !8354)
!8396 = !DILocation(line: 2737, column: 3, scope: !8354)
!8397 = !DILocation(line: 2742, column: 21, scope: !8354)
!8398 = !DILocation(line: 2742, column: 40, scope: !8354)
!8399 = !DILocation(line: 2742, column: 3, scope: !8354)
!8400 = !DILocation(line: 2743, column: 1, scope: !8354)
!8401 = distinct !DISubprogram(name: "get_lhs_or_phi_result", scope: !3, file: !3, line: 2454, type: !3426, scopeLine: 2455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8402 = !DILocalVariable(name: "stmt", arg: 1, scope: !8401, file: !3, line: 2454, type: !1926)
!8403 = !DILocation(line: 2454, column: 31, scope: !8401)
!8404 = !DILocation(line: 2456, column: 20, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8401, file: !3, line: 2456, column: 7)
!8406 = !DILocation(line: 2456, column: 7, scope: !8405)
!8407 = !DILocation(line: 2456, column: 26, scope: !8405)
!8408 = !DILocation(line: 2456, column: 7, scope: !8401)
!8409 = !DILocation(line: 2457, column: 31, scope: !8405)
!8410 = !DILocation(line: 2457, column: 12, scope: !8405)
!8411 = !DILocation(line: 2457, column: 5, scope: !8405)
!8412 = !DILocation(line: 2458, column: 30, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8405, file: !3, line: 2458, column: 12)
!8414 = !DILocation(line: 2458, column: 12, scope: !8413)
!8415 = !DILocation(line: 2458, column: 12, scope: !8405)
!8416 = !DILocation(line: 2459, column: 31, scope: !8413)
!8417 = !DILocation(line: 2459, column: 12, scope: !8413)
!8418 = !DILocation(line: 2459, column: 5, scope: !8413)
!8419 = !DILocation(line: 2461, column: 5, scope: !8413)
!8420 = !DILocation(line: 2463, column: 5, scope: !8401)
!8421 = !DILocation(line: 2465, column: 1, scope: !8401)
!8422 = distinct !DISubprogram(name: "has_zero_uses", scope: !3518, file: !3518, line: 332, type: !8423, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8423 = !DISubroutineType(types: !8424)
!8424 = !{!1776, !8425}
!8425 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !1591, line: 59, baseType: !8426)
!8426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8427, size: 64)
!8427 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1663)
!8428 = !DILocalVariable(name: "var", arg: 1, scope: !8422, file: !3518, line: 332, type: !8425)
!8429 = !DILocation(line: 332, column: 27, scope: !8422)
!8430 = !DILocalVariable(name: "ptr", scope: !8422, file: !3518, line: 334, type: !8431)
!8431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8432)
!8432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8433, size: 64)
!8433 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3052)
!8434 = !DILocation(line: 334, column: 34, scope: !8422)
!8435 = !DILocation(line: 334, column: 42, scope: !8422)
!8436 = !DILocation(line: 337, column: 7, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8422, file: !3518, line: 337, column: 7)
!8438 = !DILocation(line: 337, column: 14, scope: !8437)
!8439 = !DILocation(line: 337, column: 19, scope: !8437)
!8440 = !DILocation(line: 337, column: 11, scope: !8437)
!8441 = !DILocation(line: 337, column: 7, scope: !8422)
!8442 = !DILocation(line: 338, column: 5, scope: !8437)
!8443 = !DILocation(line: 342, column: 8, scope: !8444)
!8444 = distinct !DILexicalBlock(scope: !8422, file: !3518, line: 342, column: 7)
!8445 = !DILocation(line: 342, column: 7, scope: !8422)
!8446 = !DILocation(line: 343, column: 5, scope: !8444)
!8447 = !DILocation(line: 345, column: 27, scope: !8422)
!8448 = !DILocation(line: 345, column: 10, scope: !8422)
!8449 = !DILocation(line: 345, column: 3, scope: !8422)
!8450 = !DILocation(line: 346, column: 1, scope: !8422)
!8451 = distinct !DISubprogram(name: "remove_stmt_or_phi", scope: !3, file: !3, line: 2418, type: !3975, scopeLine: 2419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8452 = !DILocalVariable(name: "stmt", arg: 1, scope: !8451, file: !3, line: 2418, type: !1926)
!8453 = !DILocation(line: 2418, column: 28, scope: !8451)
!8454 = !DILocalVariable(name: "gsi", scope: !8451, file: !3, line: 2420, type: !3175)
!8455 = !DILocation(line: 2420, column: 24, scope: !8451)
!8456 = !DILocation(line: 2420, column: 44, scope: !8451)
!8457 = !DILocation(line: 2420, column: 30, scope: !8451)
!8458 = !DILocation(line: 2422, column: 20, scope: !8459)
!8459 = distinct !DILexicalBlock(scope: !8451, file: !3, line: 2422, column: 7)
!8460 = !DILocation(line: 2422, column: 7, scope: !8459)
!8461 = !DILocation(line: 2422, column: 26, scope: !8459)
!8462 = !DILocation(line: 2422, column: 7, scope: !8451)
!8463 = !DILocation(line: 2423, column: 5, scope: !8459)
!8464 = !DILocation(line: 2426, column: 7, scope: !8465)
!8465 = distinct !DILexicalBlock(scope: !8459, file: !3, line: 2425, column: 5)
!8466 = !DILocation(line: 2427, column: 21, scope: !8465)
!8467 = !DILocation(line: 2427, column: 7, scope: !8465)
!8468 = !DILocation(line: 2429, column: 1, scope: !8451)
!8469 = distinct !DISubprogram(name: "get_rhs_or_phi_arg", scope: !3, file: !3, line: 2436, type: !3426, scopeLine: 2437, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8470 = !DILocalVariable(name: "stmt", arg: 1, scope: !8469, file: !3, line: 2436, type: !1926)
!8471 = !DILocation(line: 2436, column: 28, scope: !8469)
!8472 = !DILocation(line: 2438, column: 20, scope: !8473)
!8473 = distinct !DILexicalBlock(scope: !8469, file: !3, line: 2438, column: 7)
!8474 = !DILocation(line: 2438, column: 7, scope: !8473)
!8475 = !DILocation(line: 2438, column: 26, scope: !8473)
!8476 = !DILocation(line: 2438, column: 7, scope: !8469)
!8477 = !DILocation(line: 2439, column: 35, scope: !8473)
!8478 = !DILocation(line: 2439, column: 12, scope: !8473)
!8479 = !DILocation(line: 2439, column: 5, scope: !8473)
!8480 = !DILocation(line: 2440, column: 36, scope: !8481)
!8481 = distinct !DILexicalBlock(scope: !8473, file: !3, line: 2440, column: 12)
!8482 = !DILocation(line: 2440, column: 12, scope: !8481)
!8483 = !DILocation(line: 2440, column: 12, scope: !8473)
!8484 = !DILocation(line: 2441, column: 32, scope: !8481)
!8485 = !DILocation(line: 2441, column: 12, scope: !8481)
!8486 = !DILocation(line: 2441, column: 5, scope: !8481)
!8487 = !DILocation(line: 2443, column: 5, scope: !8481)
!8488 = !DILocation(line: 2445, column: 5, scope: !8469)
!8489 = !DILocation(line: 2447, column: 1, scope: !8469)
!8490 = distinct !DISubprogram(name: "propagate_rhs_into_lhs", scope: !3, file: !3, line: 2479, type: !8491, scopeLine: 2480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8491 = !DISubroutineType(types: !8492)
!8492 = !{null, !1926, !1661, !1661, !1590}
!8493 = !DILocalVariable(name: "stmt", arg: 1, scope: !8490, file: !3, line: 2479, type: !1926)
!8494 = !DILocation(line: 2479, column: 32, scope: !8490)
!8495 = !DILocalVariable(name: "lhs", arg: 2, scope: !8490, file: !3, line: 2479, type: !1661)
!8496 = !DILocation(line: 2479, column: 43, scope: !8490)
!8497 = !DILocalVariable(name: "rhs", arg: 3, scope: !8490, file: !3, line: 2479, type: !1661)
!8498 = !DILocation(line: 2479, column: 53, scope: !8490)
!8499 = !DILocalVariable(name: "interesting_names", arg: 4, scope: !8490, file: !3, line: 2479, type: !1590)
!8500 = !DILocation(line: 2479, column: 65, scope: !8490)
!8501 = !DILocation(line: 2483, column: 9, scope: !8502)
!8502 = distinct !DILexicalBlock(scope: !8490, file: !3, line: 2483, column: 7)
!8503 = !DILocation(line: 2484, column: 7, scope: !8502)
!8504 = !DILocation(line: 2484, column: 11, scope: !8502)
!8505 = !DILocation(line: 2484, column: 27, scope: !8502)
!8506 = !DILocation(line: 2485, column: 4, scope: !8502)
!8507 = !DILocation(line: 2485, column: 9, scope: !8502)
!8508 = !DILocation(line: 2486, column: 7, scope: !8502)
!8509 = !DILocation(line: 2486, column: 30, scope: !8502)
!8510 = !DILocation(line: 2486, column: 35, scope: !8502)
!8511 = !DILocation(line: 2486, column: 10, scope: !8502)
!8512 = !DILocation(line: 2487, column: 7, scope: !8502)
!8513 = !DILocation(line: 2487, column: 30, scope: !8502)
!8514 = !DILocation(line: 2487, column: 10, scope: !8502)
!8515 = !DILocation(line: 2487, column: 58, scope: !8502)
!8516 = !DILocation(line: 2487, column: 38, scope: !8502)
!8517 = !DILocation(line: 2487, column: 35, scope: !8502)
!8518 = !DILocation(line: 2483, column: 7, scope: !8490)
!8519 = !DILocalVariable(name: "use_p", scope: !8520, file: !3, line: 2489, type: !3050)
!8520 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 2488, column: 5)
!8521 = !DILocation(line: 2489, column: 21, scope: !8520)
!8522 = !DILocalVariable(name: "iter", scope: !8520, file: !3, line: 2490, type: !8523)
!8523 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !2352, line: 249, baseType: !8524)
!8524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !2352, line: 238, size: 448, elements: !8525)
!8525 = !{!8526, !8527, !8528, !8529}
!8526 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !8524, file: !2352, line: 241, baseType: !3051, size: 64)
!8527 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !8524, file: !2352, line: 243, baseType: !3051, size: 64, offset: 64)
!8528 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !8524, file: !2352, line: 245, baseType: !3052, size: 256, offset: 128)
!8529 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !8524, file: !2352, line: 248, baseType: !3051, size: 64, offset: 384)
!8530 = !DILocation(line: 2490, column: 24, scope: !8520)
!8531 = !DILocalVariable(name: "use_stmt", scope: !8520, file: !3, line: 2491, type: !1926)
!8532 = !DILocation(line: 2491, column: 14, scope: !8520)
!8533 = !DILocalVariable(name: "all", scope: !8520, file: !3, line: 2492, type: !1776)
!8534 = !DILocation(line: 2492, column: 12, scope: !8520)
!8535 = !DILocation(line: 2495, column: 11, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 2495, column: 11)
!8537 = !DILocation(line: 2495, column: 21, scope: !8536)
!8538 = !DILocation(line: 2495, column: 25, scope: !8536)
!8539 = !DILocation(line: 2495, column: 36, scope: !8536)
!8540 = !DILocation(line: 2495, column: 11, scope: !8520)
!8541 = !DILocation(line: 2497, column: 13, scope: !8542)
!8542 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 2496, column: 2)
!8543 = !DILocation(line: 2497, column: 4, scope: !8542)
!8544 = !DILocation(line: 2498, column: 24, scope: !8542)
!8545 = !DILocation(line: 2498, column: 35, scope: !8542)
!8546 = !DILocation(line: 2498, column: 40, scope: !8542)
!8547 = !DILocation(line: 2498, column: 4, scope: !8542)
!8548 = !DILocation(line: 2499, column: 13, scope: !8542)
!8549 = !DILocation(line: 2500, column: 14, scope: !8542)
!8550 = !DILocation(line: 2500, column: 30, scope: !8542)
!8551 = !DILocation(line: 2499, column: 4, scope: !8542)
!8552 = !DILocation(line: 2501, column: 26, scope: !8542)
!8553 = !DILocation(line: 2501, column: 37, scope: !8542)
!8554 = !DILocation(line: 2501, column: 42, scope: !8542)
!8555 = !DILocation(line: 2501, column: 6, scope: !8542)
!8556 = !DILocation(line: 2502, column: 13, scope: !8542)
!8557 = !DILocation(line: 2502, column: 4, scope: !8542)
!8558 = !DILocation(line: 2503, column: 2, scope: !8542)
!8559 = !DILocation(line: 2508, column: 7, scope: !8560)
!8560 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 2508, column: 7)
!8561 = !DILocation(line: 2508, column: 7, scope: !8562)
!8562 = distinct !DILexicalBlock(scope: !8560, file: !3, line: 2508, column: 7)
!8563 = !DILocation(line: 2513, column: 29, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2513, column: 8)
!8565 = distinct !DILexicalBlock(scope: !8562, file: !3, line: 2509, column: 2)
!8566 = !DILocation(line: 2513, column: 8, scope: !8564)
!8567 = !DILocation(line: 2513, column: 8, scope: !8565)
!8568 = !DILocation(line: 2514, column: 6, scope: !8564)
!8569 = !DILocation(line: 2517, column: 21, scope: !8570)
!8570 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2517, column: 8)
!8571 = !DILocation(line: 2517, column: 8, scope: !8570)
!8572 = !DILocation(line: 2517, column: 31, scope: !8570)
!8573 = !DILocation(line: 2518, column: 15, scope: !8570)
!8574 = !DILocation(line: 2518, column: 49, scope: !8570)
!8575 = !DILocation(line: 2518, column: 20, scope: !8570)
!8576 = !DILocation(line: 2517, column: 8, scope: !8565)
!8577 = !DILocation(line: 2520, column: 12, scope: !8578)
!8578 = distinct !DILexicalBlock(scope: !8570, file: !3, line: 2519, column: 6)
!8579 = !DILocation(line: 2521, column: 8, scope: !8578)
!8580 = !DILocation(line: 2525, column: 8, scope: !8581)
!8581 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2525, column: 8)
!8582 = !DILocation(line: 2525, column: 18, scope: !8581)
!8583 = !DILocation(line: 2525, column: 22, scope: !8581)
!8584 = !DILocation(line: 2525, column: 33, scope: !8581)
!8585 = !DILocation(line: 2525, column: 8, scope: !8565)
!8586 = !DILocation(line: 2527, column: 17, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 2526, column: 6)
!8588 = !DILocation(line: 2527, column: 8, scope: !8587)
!8589 = !DILocation(line: 2528, column: 27, scope: !8587)
!8590 = !DILocation(line: 2528, column: 38, scope: !8587)
!8591 = !DILocation(line: 2528, column: 51, scope: !8587)
!8592 = !DILocation(line: 2528, column: 8, scope: !8587)
!8593 = !DILocation(line: 2529, column: 6, scope: !8587)
!8594 = !DILocation(line: 2532, column: 4, scope: !8595)
!8595 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2532, column: 4)
!8596 = !DILocation(line: 2532, column: 4, scope: !8597)
!8597 = distinct !DILexicalBlock(scope: !8595, file: !3, line: 2532, column: 4)
!8598 = !DILocation(line: 2533, column: 23, scope: !8597)
!8599 = !DILocation(line: 2533, column: 30, scope: !8597)
!8600 = !DILocation(line: 2533, column: 6, scope: !8597)
!8601 = distinct !{!8601, !8594, !8602}
!8602 = !DILocation(line: 2533, column: 33, scope: !8595)
!8603 = !DILocation(line: 2545, column: 21, scope: !8604)
!8604 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2545, column: 8)
!8605 = !DILocation(line: 2545, column: 8, scope: !8604)
!8606 = !DILocation(line: 2545, column: 31, scope: !8604)
!8607 = !DILocation(line: 2546, column: 8, scope: !8604)
!8608 = !DILocation(line: 2546, column: 29, scope: !8604)
!8609 = !DILocation(line: 2546, column: 14, scope: !8604)
!8610 = !DILocation(line: 2547, column: 5, scope: !8604)
!8611 = !DILocation(line: 2547, column: 8, scope: !8604)
!8612 = !DILocation(line: 2547, column: 24, scope: !8604)
!8613 = !DILocation(line: 2548, column: 5, scope: !8604)
!8614 = !DILocation(line: 2548, column: 8, scope: !8604)
!8615 = !DILocation(line: 2548, column: 30, scope: !8604)
!8616 = !DILocation(line: 2548, column: 27, scope: !8604)
!8617 = !DILocation(line: 2545, column: 8, scope: !8565)
!8618 = !DILocation(line: 2551, column: 12, scope: !8619)
!8619 = distinct !DILexicalBlock(scope: !8620, file: !3, line: 2551, column: 12)
!8620 = distinct !DILexicalBlock(scope: !8604, file: !3, line: 2549, column: 6)
!8621 = !DILocation(line: 2551, column: 22, scope: !8619)
!8622 = !DILocation(line: 2551, column: 26, scope: !8619)
!8623 = !DILocation(line: 2551, column: 37, scope: !8619)
!8624 = !DILocation(line: 2551, column: 12, scope: !8620)
!8625 = !DILocation(line: 2553, column: 14, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8619, file: !3, line: 2552, column: 3)
!8627 = !DILocation(line: 2553, column: 5, scope: !8626)
!8628 = !DILocation(line: 2554, column: 24, scope: !8626)
!8629 = !DILocation(line: 2554, column: 35, scope: !8626)
!8630 = !DILocation(line: 2554, column: 48, scope: !8626)
!8631 = !DILocation(line: 2554, column: 5, scope: !8626)
!8632 = !DILocation(line: 2555, column: 3, scope: !8626)
!8633 = !DILocation(line: 2559, column: 25, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8620, file: !3, line: 2559, column: 12)
!8635 = !DILocation(line: 2559, column: 12, scope: !8634)
!8636 = !DILocation(line: 2559, column: 35, scope: !8634)
!8637 = !DILocation(line: 2559, column: 12, scope: !8620)
!8638 = !DILocalVariable(name: "result", scope: !8639, file: !3, line: 2561, type: !1661)
!8639 = distinct !DILexicalBlock(scope: !8634, file: !3, line: 2560, column: 3)
!8640 = !DILocation(line: 2561, column: 10, scope: !8639)
!8641 = !DILocation(line: 2561, column: 42, scope: !8639)
!8642 = !DILocation(line: 2561, column: 19, scope: !8639)
!8643 = !DILocation(line: 2562, column: 21, scope: !8639)
!8644 = !DILocation(line: 2562, column: 40, scope: !8639)
!8645 = !DILocation(line: 2562, column: 5, scope: !8639)
!8646 = !DILocation(line: 2563, column: 3, scope: !8639)
!8647 = !DILocation(line: 2565, column: 8, scope: !8620)
!8648 = !DILocation(line: 2578, column: 23, scope: !8565)
!8649 = !DILocation(line: 2578, column: 4, scope: !8565)
!8650 = !DILocation(line: 2582, column: 17, scope: !8565)
!8651 = !DILocation(line: 2582, column: 4, scope: !8565)
!8652 = !DILocation(line: 2585, column: 8, scope: !8653)
!8653 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2585, column: 8)
!8654 = !DILocation(line: 2585, column: 18, scope: !8653)
!8655 = !DILocation(line: 2585, column: 22, scope: !8653)
!8656 = !DILocation(line: 2585, column: 33, scope: !8653)
!8657 = !DILocation(line: 2585, column: 8, scope: !8565)
!8658 = !DILocation(line: 2587, column: 17, scope: !8659)
!8659 = distinct !DILexicalBlock(scope: !8653, file: !3, line: 2586, column: 6)
!8660 = !DILocation(line: 2587, column: 8, scope: !8659)
!8661 = !DILocation(line: 2588, column: 27, scope: !8659)
!8662 = !DILocation(line: 2588, column: 38, scope: !8659)
!8663 = !DILocation(line: 2588, column: 51, scope: !8659)
!8664 = !DILocation(line: 2588, column: 8, scope: !8659)
!8665 = !DILocation(line: 2589, column: 6, scope: !8659)
!8666 = !DILocation(line: 2593, column: 39, scope: !8667)
!8667 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2593, column: 15)
!8668 = !DILocation(line: 2593, column: 15, scope: !8667)
!8669 = !DILocation(line: 2594, column: 15, scope: !8667)
!8670 = !DILocation(line: 2594, column: 18, scope: !8667)
!8671 = !DILocation(line: 2594, column: 60, scope: !8667)
!8672 = !DILocation(line: 2593, column: 15, scope: !8565)
!8673 = !DILocation(line: 2596, column: 38, scope: !8667)
!8674 = !DILocation(line: 2596, column: 18, scope: !8667)
!8675 = !DILocation(line: 2595, column: 6, scope: !8667)
!8676 = !DILocation(line: 2600, column: 40, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2600, column: 8)
!8678 = !DILocation(line: 2600, column: 50, scope: !8677)
!8679 = !DILocation(line: 2600, column: 8, scope: !8677)
!8680 = !DILocation(line: 2600, column: 8, scope: !8565)
!8681 = !DILocation(line: 2602, column: 24, scope: !8682)
!8682 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 2601, column: 6)
!8683 = !DILocation(line: 2602, column: 52, scope: !8682)
!8684 = !DILocation(line: 2602, column: 41, scope: !8682)
!8685 = !DILocation(line: 2602, column: 63, scope: !8682)
!8686 = !DILocation(line: 2602, column: 8, scope: !8682)
!8687 = !DILocation(line: 2603, column: 12, scope: !8688)
!8688 = distinct !DILexicalBlock(scope: !8682, file: !3, line: 2603, column: 12)
!8689 = !DILocation(line: 2603, column: 22, scope: !8688)
!8690 = !DILocation(line: 2603, column: 26, scope: !8688)
!8691 = !DILocation(line: 2603, column: 37, scope: !8688)
!8692 = !DILocation(line: 2603, column: 12, scope: !8682)
!8693 = !DILocation(line: 2604, column: 12, scope: !8688)
!8694 = !DILocation(line: 2604, column: 3, scope: !8688)
!8695 = !DILocation(line: 2605, column: 6, scope: !8682)
!8696 = !DILocation(line: 2609, column: 39, scope: !8697)
!8697 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 2609, column: 15)
!8698 = !DILocation(line: 2609, column: 15, scope: !8697)
!8699 = !DILocation(line: 2610, column: 15, scope: !8697)
!8700 = !DILocation(line: 2610, column: 18, scope: !8697)
!8701 = !DILocation(line: 2610, column: 59, scope: !8697)
!8702 = !DILocation(line: 2611, column: 15, scope: !8697)
!8703 = !DILocation(line: 2611, column: 19, scope: !8697)
!8704 = !DILocation(line: 2611, column: 61, scope: !8697)
!8705 = !DILocation(line: 2612, column: 19, scope: !8697)
!8706 = !DILocation(line: 2612, column: 67, scope: !8697)
!8707 = !DILocation(line: 2612, column: 47, scope: !8697)
!8708 = !DILocation(line: 2612, column: 22, scope: !8697)
!8709 = !DILocation(line: 2609, column: 15, scope: !8565)
!8710 = !DILocalVariable(name: "result", scope: !8711, file: !3, line: 2614, type: !1661)
!8711 = distinct !DILexicalBlock(scope: !8697, file: !3, line: 2613, column: 13)
!8712 = !DILocation(line: 2614, column: 13, scope: !8711)
!8713 = !DILocation(line: 2614, column: 45, scope: !8711)
!8714 = !DILocation(line: 2614, column: 22, scope: !8711)
!8715 = !DILocation(line: 2615, column: 24, scope: !8711)
!8716 = !DILocation(line: 2615, column: 43, scope: !8711)
!8717 = !DILocation(line: 2615, column: 8, scope: !8711)
!8718 = !DILocation(line: 2616, column: 6, scope: !8711)
!8719 = !DILocation(line: 2622, column: 26, scope: !8720)
!8720 = distinct !DILexicalBlock(scope: !8697, file: !3, line: 2622, column: 13)
!8721 = !DILocation(line: 2622, column: 13, scope: !8720)
!8722 = !DILocation(line: 2622, column: 36, scope: !8720)
!8723 = !DILocation(line: 2623, column: 6, scope: !8720)
!8724 = !DILocation(line: 2623, column: 22, scope: !8720)
!8725 = !DILocation(line: 2623, column: 9, scope: !8720)
!8726 = !DILocation(line: 2623, column: 32, scope: !8720)
!8727 = !DILocation(line: 2624, column: 6, scope: !8720)
!8728 = !DILocation(line: 2624, column: 22, scope: !8720)
!8729 = !DILocation(line: 2624, column: 9, scope: !8720)
!8730 = !DILocation(line: 2624, column: 32, scope: !8720)
!8731 = !DILocation(line: 2622, column: 13, scope: !8697)
!8732 = !DILocalVariable(name: "val", scope: !8733, file: !3, line: 2626, type: !1661)
!8733 = distinct !DILexicalBlock(scope: !8720, file: !3, line: 2625, column: 13)
!8734 = !DILocation(line: 2626, column: 13, scope: !8733)
!8735 = !DILocation(line: 2628, column: 25, scope: !8736)
!8736 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 2628, column: 12)
!8737 = !DILocation(line: 2628, column: 12, scope: !8736)
!8738 = !DILocation(line: 2628, column: 35, scope: !8736)
!8739 = !DILocation(line: 2628, column: 12, scope: !8733)
!8740 = !DILocation(line: 2629, column: 57, scope: !8736)
!8741 = !DILocation(line: 2629, column: 40, scope: !8736)
!8742 = !DILocation(line: 2630, column: 26, scope: !8736)
!8743 = !DILocation(line: 2630, column: 8, scope: !8736)
!8744 = !DILocation(line: 2631, column: 36, scope: !8736)
!8745 = !DILocation(line: 2632, column: 53, scope: !8736)
!8746 = !DILocation(line: 2632, column: 36, scope: !8736)
!8747 = !DILocation(line: 2633, column: 53, scope: !8736)
!8748 = !DILocation(line: 2633, column: 36, scope: !8736)
!8749 = !DILocation(line: 2629, column: 23, scope: !8736)
!8750 = !DILocation(line: 2629, column: 21, scope: !8736)
!8751 = !DILocation(line: 2629, column: 17, scope: !8736)
!8752 = !DILocation(line: 2634, column: 37, scope: !8753)
!8753 = distinct !DILexicalBlock(scope: !8736, file: !3, line: 2634, column: 24)
!8754 = !DILocation(line: 2634, column: 24, scope: !8753)
!8755 = !DILocation(line: 2634, column: 47, scope: !8753)
!8756 = !DILocation(line: 2634, column: 24, scope: !8736)
!8757 = !DILocation(line: 2635, column: 30, scope: !8753)
!8758 = !DILocation(line: 2635, column: 9, scope: !8753)
!8759 = !DILocation(line: 2635, column: 7, scope: !8753)
!8760 = !DILocation(line: 2635, column: 3, scope: !8753)
!8761 = !DILocation(line: 2637, column: 28, scope: !8753)
!8762 = !DILocation(line: 2637, column: 9, scope: !8753)
!8763 = !DILocation(line: 2637, column: 7, scope: !8753)
!8764 = !DILocation(line: 2639, column: 12, scope: !8765)
!8765 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 2639, column: 12)
!8766 = !DILocation(line: 2639, column: 16, scope: !8765)
!8767 = !DILocation(line: 2639, column: 44, scope: !8765)
!8768 = !DILocation(line: 2639, column: 19, scope: !8765)
!8769 = !DILocation(line: 2639, column: 12, scope: !8733)
!8770 = !DILocalVariable(name: "bb", scope: !8771, file: !3, line: 2641, type: !2412)
!8771 = distinct !DILexicalBlock(scope: !8765, file: !3, line: 2640, column: 3)
!8772 = !DILocation(line: 2641, column: 17, scope: !8771)
!8773 = !DILocation(line: 2641, column: 33, scope: !8771)
!8774 = !DILocation(line: 2641, column: 22, scope: !8771)
!8775 = !DILocalVariable(name: "te", scope: !8771, file: !3, line: 2642, type: !1906)
!8776 = !DILocation(line: 2642, column: 10, scope: !8771)
!8777 = !DILocation(line: 2642, column: 32, scope: !8771)
!8778 = !DILocation(line: 2642, column: 36, scope: !8771)
!8779 = !DILocation(line: 2642, column: 15, scope: !8771)
!8780 = !DILocalVariable(name: "ei", scope: !8771, file: !3, line: 2643, type: !4011)
!8781 = !DILocation(line: 2643, column: 19, scope: !8771)
!8782 = !DILocalVariable(name: "e", scope: !8771, file: !3, line: 2644, type: !1906)
!8783 = !DILocation(line: 2644, column: 10, scope: !8771)
!8784 = !DILocalVariable(name: "gsi", scope: !8771, file: !3, line: 2645, type: !3175)
!8785 = !DILocation(line: 2645, column: 26, scope: !8771)
!8786 = !DILocalVariable(name: "psi", scope: !8771, file: !3, line: 2645, type: !3175)
!8787 = !DILocation(line: 2645, column: 31, scope: !8771)
!8788 = !DILocation(line: 2648, column: 15, scope: !8789)
!8789 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 2648, column: 5)
!8790 = !DILocation(line: 2648, column: 10, scope: !8789)
!8791 = !DILocation(line: 2648, column: 42, scope: !8792)
!8792 = distinct !DILexicalBlock(scope: !8789, file: !3, line: 2648, column: 5)
!8793 = !DILocation(line: 2648, column: 40, scope: !8792)
!8794 = !DILocation(line: 2648, column: 5, scope: !8789)
!8795 = !DILocation(line: 2650, column: 13, scope: !8796)
!8796 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2650, column: 13)
!8797 = distinct !DILexicalBlock(scope: !8792, file: !3, line: 2649, column: 7)
!8798 = !DILocation(line: 2650, column: 18, scope: !8796)
!8799 = !DILocation(line: 2650, column: 15, scope: !8796)
!8800 = !DILocation(line: 2650, column: 13, scope: !8797)
!8801 = !DILocation(line: 2654, column: 54, scope: !8802)
!8802 = distinct !DILexicalBlock(scope: !8803, file: !3, line: 2654, column: 27)
!8803 = distinct !DILexicalBlock(scope: !8796, file: !3, line: 2651, column: 4)
!8804 = !DILocation(line: 2654, column: 57, scope: !8802)
!8805 = !DILocation(line: 2654, column: 38, scope: !8802)
!8806 = !DILocation(line: 2654, column: 32, scope: !8802)
!8807 = !DILocation(line: 2655, column: 33, scope: !8808)
!8808 = distinct !DILexicalBlock(scope: !8802, file: !3, line: 2654, column: 27)
!8809 = !DILocation(line: 2655, column: 32, scope: !8808)
!8810 = !DILocation(line: 2654, column: 27, scope: !8802)
!8811 = !DILocalVariable(name: "phi", scope: !8812, file: !3, line: 2658, type: !1926)
!8812 = distinct !DILexicalBlock(scope: !8808, file: !3, line: 2657, column: 29)
!8813 = !DILocation(line: 2658, column: 38, scope: !8812)
!8814 = !DILocation(line: 2658, column: 44, scope: !8812)
!8815 = !DILocalVariable(name: "result", scope: !8812, file: !3, line: 2660, type: !1661)
!8816 = !DILocation(line: 2660, column: 15, scope: !8812)
!8817 = !DILocation(line: 2660, column: 43, scope: !8812)
!8818 = !DILocation(line: 2660, column: 24, scope: !8812)
!8819 = !DILocalVariable(name: "version", scope: !8812, file: !3, line: 2661, type: !1643)
!8820 = !DILocation(line: 2661, column: 14, scope: !8812)
!8821 = !DILocation(line: 2661, column: 24, scope: !8812)
!8822 = !DILocation(line: 2663, column: 26, scope: !8812)
!8823 = !DILocation(line: 2663, column: 45, scope: !8812)
!8824 = !DILocation(line: 2663, column: 10, scope: !8812)
!8825 = !DILocation(line: 2664, column: 8, scope: !8812)
!8826 = !DILocation(line: 2656, column: 32, scope: !8808)
!8827 = !DILocation(line: 2654, column: 27, scope: !8808)
!8828 = distinct !{!8828, !8810, !8829}
!8829 = !DILocation(line: 2664, column: 8, scope: !8802)
!8830 = !DILocation(line: 2666, column: 25, scope: !8803)
!8831 = !DILocation(line: 2666, column: 28, scope: !8803)
!8832 = !DILocation(line: 2666, column: 6, scope: !8803)
!8833 = !DILocation(line: 2666, column: 10, scope: !8803)
!8834 = !DILocation(line: 2666, column: 22, scope: !8803)
!8835 = !DILocation(line: 2668, column: 19, scope: !8803)
!8836 = !DILocation(line: 2668, column: 22, scope: !8803)
!8837 = !DILocation(line: 2668, column: 6, scope: !8803)
!8838 = !DILocation(line: 2668, column: 10, scope: !8803)
!8839 = !DILocation(line: 2668, column: 16, scope: !8803)
!8840 = !DILocation(line: 2669, column: 19, scope: !8803)
!8841 = !DILocation(line: 2669, column: 6, scope: !8803)
!8842 = !DILocation(line: 2670, column: 18, scope: !8803)
!8843 = !DILocation(line: 2671, column: 4, scope: !8803)
!8844 = !DILocation(line: 2673, column: 4, scope: !8796)
!8845 = !DILocation(line: 2648, column: 5, scope: !8792)
!8846 = distinct !{!8846, !8794, !8847}
!8847 = !DILocation(line: 2674, column: 7, scope: !8789)
!8848 = !DILocation(line: 2676, column: 35, scope: !8771)
!8849 = !DILocation(line: 2676, column: 24, scope: !8771)
!8850 = !DILocation(line: 2676, column: 11, scope: !8771)
!8851 = !DILocation(line: 2677, column: 5, scope: !8771)
!8852 = !DILocation(line: 2680, column: 5, scope: !8771)
!8853 = !DILocation(line: 2680, column: 9, scope: !8771)
!8854 = !DILocation(line: 2680, column: 15, scope: !8771)
!8855 = !DILocation(line: 2681, column: 5, scope: !8771)
!8856 = !DILocation(line: 2681, column: 9, scope: !8771)
!8857 = !DILocation(line: 2681, column: 15, scope: !8771)
!8858 = !DILocation(line: 2682, column: 5, scope: !8771)
!8859 = !DILocation(line: 2682, column: 9, scope: !8771)
!8860 = !DILocation(line: 2682, column: 15, scope: !8771)
!8861 = !DILocation(line: 2683, column: 9, scope: !8862)
!8862 = distinct !DILexicalBlock(scope: !8771, file: !3, line: 2683, column: 9)
!8863 = !DILocation(line: 2683, column: 13, scope: !8862)
!8864 = !DILocation(line: 2683, column: 25, scope: !8862)
!8865 = !DILocation(line: 2683, column: 9, scope: !8771)
!8866 = !DILocation(line: 2684, column: 7, scope: !8862)
!8867 = !DILocation(line: 2684, column: 11, scope: !8862)
!8868 = !DILocation(line: 2684, column: 23, scope: !8862)
!8869 = !DILocation(line: 2685, column: 10, scope: !8771)
!8870 = !DILocation(line: 2686, column: 6, scope: !8733)
!8871 = !DILocation(line: 2687, column: 2, scope: !8565)
!8872 = distinct !{!8872, !8559, !8873}
!8873 = !DILocation(line: 2687, column: 2, scope: !8560)
!8874 = !DILocation(line: 2690, column: 7, scope: !8520)
!8875 = !DILocation(line: 2694, column: 11, scope: !8876)
!8876 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 2694, column: 11)
!8877 = !DILocation(line: 2694, column: 11, scope: !8520)
!8878 = !DILocation(line: 2695, column: 22, scope: !8876)
!8879 = !DILocation(line: 2695, column: 2, scope: !8876)
!8880 = !DILocation(line: 2696, column: 5, scope: !8520)
!8881 = !DILocation(line: 2697, column: 1, scope: !8490)
!8882 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !3518, file: !3518, line: 1058, type: !8883, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8883 = !DISubroutineType(types: !8884)
!8884 = !{!1926, !8885, !1661}
!8885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8523, size: 64)
!8886 = !DILocalVariable(name: "imm", arg: 1, scope: !8882, file: !3518, line: 1058, type: !8885)
!8887 = !DILocation(line: 1058, column: 39, scope: !8882)
!8888 = !DILocalVariable(name: "var", arg: 2, scope: !8882, file: !3518, line: 1058, type: !1661)
!8889 = !DILocation(line: 1058, column: 49, scope: !8882)
!8890 = !DILocation(line: 1060, column: 18, scope: !8882)
!8891 = !DILocation(line: 1060, column: 3, scope: !8882)
!8892 = !DILocation(line: 1060, column: 8, scope: !8882)
!8893 = !DILocation(line: 1060, column: 14, scope: !8882)
!8894 = !DILocation(line: 1061, column: 18, scope: !8882)
!8895 = !DILocation(line: 1061, column: 23, scope: !8882)
!8896 = !DILocation(line: 1061, column: 30, scope: !8882)
!8897 = !DILocation(line: 1061, column: 3, scope: !8882)
!8898 = !DILocation(line: 1061, column: 8, scope: !8882)
!8899 = !DILocation(line: 1061, column: 16, scope: !8882)
!8900 = !DILocation(line: 1062, column: 3, scope: !8882)
!8901 = !DILocation(line: 1062, column: 8, scope: !8882)
!8902 = !DILocation(line: 1062, column: 22, scope: !8882)
!8903 = !DILocation(line: 1067, column: 3, scope: !8882)
!8904 = !DILocation(line: 1067, column: 8, scope: !8882)
!8905 = !DILocation(line: 1067, column: 18, scope: !8882)
!8906 = !DILocation(line: 1067, column: 23, scope: !8882)
!8907 = !DILocation(line: 1068, column: 3, scope: !8882)
!8908 = !DILocation(line: 1068, column: 8, scope: !8882)
!8909 = !DILocation(line: 1068, column: 18, scope: !8882)
!8910 = !DILocation(line: 1068, column: 23, scope: !8882)
!8911 = !DILocation(line: 1069, column: 3, scope: !8882)
!8912 = !DILocation(line: 1069, column: 8, scope: !8882)
!8913 = !DILocation(line: 1069, column: 18, scope: !8882)
!8914 = !DILocation(line: 1069, column: 22, scope: !8882)
!8915 = !DILocation(line: 1069, column: 27, scope: !8882)
!8916 = !DILocation(line: 1070, column: 3, scope: !8882)
!8917 = !DILocation(line: 1070, column: 8, scope: !8882)
!8918 = !DILocation(line: 1070, column: 18, scope: !8882)
!8919 = !DILocation(line: 1070, column: 22, scope: !8882)
!8920 = !DILocation(line: 1072, column: 27, scope: !8921)
!8921 = distinct !DILexicalBlock(scope: !8882, file: !3518, line: 1072, column: 7)
!8922 = !DILocation(line: 1072, column: 7, scope: !8921)
!8923 = !DILocation(line: 1072, column: 7, scope: !8882)
!8924 = !DILocation(line: 1073, column: 5, scope: !8921)
!8925 = !DILocation(line: 1075, column: 25, scope: !8882)
!8926 = !DILocation(line: 1075, column: 30, scope: !8882)
!8927 = !DILocation(line: 1075, column: 39, scope: !8882)
!8928 = !DILocation(line: 1075, column: 3, scope: !8882)
!8929 = !DILocation(line: 1077, column: 10, scope: !8882)
!8930 = !DILocation(line: 1077, column: 3, scope: !8882)
!8931 = !DILocation(line: 1078, column: 1, scope: !8882)
!8932 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !3518, file: !3518, line: 969, type: !8933, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8933 = !DISubroutineType(types: !8934)
!8934 = !{!1776, !8935}
!8935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8936, size: 64)
!8936 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8523)
!8937 = !DILocalVariable(name: "imm", arg: 1, scope: !8932, file: !3518, line: 969, type: !8935)
!8938 = !DILocation(line: 969, column: 45, scope: !8932)
!8939 = !DILocation(line: 971, column: 11, scope: !8932)
!8940 = !DILocation(line: 971, column: 16, scope: !8932)
!8941 = !DILocation(line: 971, column: 27, scope: !8932)
!8942 = !DILocation(line: 971, column: 32, scope: !8932)
!8943 = !DILocation(line: 971, column: 24, scope: !8932)
!8944 = !DILocation(line: 971, column: 10, scope: !8932)
!8945 = !DILocation(line: 971, column: 3, scope: !8932)
!8946 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !594, file: !594, line: 3257, type: !4559, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8947 = !DILocalVariable(name: "s", arg: 1, scope: !8946, file: !594, line: 3257, type: !3418)
!8948 = !DILocation(line: 3257, column: 35, scope: !8946)
!8949 = !DILocation(line: 3259, column: 24, scope: !8950)
!8950 = distinct !DILexicalBlock(scope: !8946, file: !594, line: 3259, column: 7)
!8951 = !DILocation(line: 3259, column: 7, scope: !8950)
!8952 = !DILocation(line: 3259, column: 7, scope: !8946)
!8953 = !DILocation(line: 3260, column: 12, scope: !8950)
!8954 = !DILocation(line: 3260, column: 15, scope: !8950)
!8955 = !DILocation(line: 3260, column: 22, scope: !8950)
!8956 = !DILocation(line: 3260, column: 30, scope: !8950)
!8957 = !DILocation(line: 3260, column: 5, scope: !8950)
!8958 = !DILocation(line: 3262, column: 3, scope: !8946)
!8959 = !DILocation(line: 3263, column: 1, scope: !8946)
!8960 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !3518, file: !3518, line: 1101, type: !8961, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8961 = !DISubroutineType(types: !8962)
!8962 = !{!3050, !8885}
!8963 = !DILocalVariable(name: "imm", arg: 1, scope: !8960, file: !3518, line: 1101, type: !8885)
!8964 = !DILocation(line: 1101, column: 42, scope: !8960)
!8965 = !DILocation(line: 1103, column: 24, scope: !8960)
!8966 = !DILocation(line: 1103, column: 29, scope: !8960)
!8967 = !DILocation(line: 1103, column: 38, scope: !8960)
!8968 = !DILocation(line: 1103, column: 3, scope: !8960)
!8969 = !DILocation(line: 1103, column: 8, scope: !8960)
!8970 = !DILocation(line: 1103, column: 22, scope: !8960)
!8971 = !DILocation(line: 1104, column: 10, scope: !8960)
!8972 = !DILocation(line: 1104, column: 15, scope: !8960)
!8973 = !DILocation(line: 1104, column: 3, scope: !8960)
!8974 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !3518, file: !3518, line: 1110, type: !8933, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8975 = !DILocalVariable(name: "imm", arg: 1, scope: !8974, file: !3518, line: 1110, type: !8935)
!8976 = !DILocation(line: 1110, column: 48, scope: !8974)
!8977 = !DILocation(line: 1112, column: 11, scope: !8974)
!8978 = !DILocation(line: 1112, column: 16, scope: !8974)
!8979 = !DILocation(line: 1112, column: 29, scope: !8974)
!8980 = !DILocation(line: 1112, column: 34, scope: !8974)
!8981 = !DILocation(line: 1112, column: 24, scope: !8974)
!8982 = !DILocation(line: 1112, column: 10, scope: !8974)
!8983 = !DILocation(line: 1112, column: 3, scope: !8974)
!8984 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !3518, file: !3518, line: 1118, type: !8961, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!8985 = !DILocalVariable(name: "imm", arg: 1, scope: !8984, file: !3518, line: 1118, type: !8885)
!8986 = !DILocation(line: 1118, column: 41, scope: !8984)
!8987 = !DILocation(line: 1120, column: 18, scope: !8984)
!8988 = !DILocation(line: 1120, column: 23, scope: !8984)
!8989 = !DILocation(line: 1120, column: 3, scope: !8984)
!8990 = !DILocation(line: 1120, column: 8, scope: !8984)
!8991 = !DILocation(line: 1120, column: 16, scope: !8984)
!8992 = !DILocation(line: 1121, column: 30, scope: !8993)
!8993 = distinct !DILexicalBlock(scope: !8984, file: !3518, line: 1121, column: 7)
!8994 = !DILocation(line: 1121, column: 7, scope: !8993)
!8995 = !DILocation(line: 1121, column: 7, scope: !8984)
!8996 = !DILocation(line: 1122, column: 5, scope: !8993)
!8997 = !DILocation(line: 1125, column: 28, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8993, file: !3518, line: 1124, column: 5)
!8999 = !DILocation(line: 1125, column: 33, scope: !8998)
!9000 = !DILocation(line: 1125, column: 42, scope: !8998)
!9001 = !DILocation(line: 1125, column: 7, scope: !8998)
!9002 = !DILocation(line: 1125, column: 12, scope: !8998)
!9003 = !DILocation(line: 1125, column: 26, scope: !8998)
!9004 = !DILocation(line: 1126, column: 14, scope: !8998)
!9005 = !DILocation(line: 1126, column: 19, scope: !8998)
!9006 = !DILocation(line: 1126, column: 7, scope: !8998)
!9007 = !DILocation(line: 1128, column: 1, scope: !8984)
!9008 = distinct !DISubprogram(name: "ei_safe_edge", scope: !526, file: !526, line: 761, type: !5748, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9009 = !DILocalVariable(name: "i", arg: 1, scope: !9008, file: !526, line: 761, type: !4011)
!9010 = !DILocation(line: 761, column: 29, scope: !9008)
!9011 = !DILocation(line: 763, column: 11, scope: !9008)
!9012 = !DILocation(line: 763, column: 10, scope: !9008)
!9013 = !DILocation(line: 763, column: 26, scope: !9008)
!9014 = !DILocation(line: 763, column: 3, scope: !9008)
!9015 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !3518, file: !3518, line: 1083, type: !9016, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9016 = !DISubroutineType(types: !9017)
!9017 = !{!1926, !8885}
!9018 = !DILocalVariable(name: "imm", arg: 1, scope: !9015, file: !3518, line: 1083, type: !8885)
!9019 = !DILocation(line: 1083, column: 38, scope: !9015)
!9020 = !DILocation(line: 1085, column: 18, scope: !9015)
!9021 = !DILocation(line: 1085, column: 23, scope: !9015)
!9022 = !DILocation(line: 1085, column: 33, scope: !9015)
!9023 = !DILocation(line: 1085, column: 3, scope: !9015)
!9024 = !DILocation(line: 1085, column: 8, scope: !9015)
!9025 = !DILocation(line: 1085, column: 16, scope: !9015)
!9026 = !DILocation(line: 1086, column: 27, scope: !9027)
!9027 = distinct !DILexicalBlock(scope: !9015, file: !3518, line: 1086, column: 7)
!9028 = !DILocation(line: 1086, column: 7, scope: !9027)
!9029 = !DILocation(line: 1086, column: 7, scope: !9015)
!9030 = !DILocation(line: 1088, column: 11, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !9032, file: !3518, line: 1088, column: 11)
!9032 = distinct !DILexicalBlock(scope: !9027, file: !3518, line: 1087, column: 5)
!9033 = !DILocation(line: 1088, column: 16, scope: !9031)
!9034 = !DILocation(line: 1088, column: 26, scope: !9031)
!9035 = !DILocation(line: 1088, column: 31, scope: !9031)
!9036 = !DILocation(line: 1088, column: 11, scope: !9032)
!9037 = !DILocation(line: 1089, column: 19, scope: !9031)
!9038 = !DILocation(line: 1089, column: 24, scope: !9031)
!9039 = !DILocation(line: 1089, column: 2, scope: !9031)
!9040 = !DILocation(line: 1090, column: 7, scope: !9032)
!9041 = !DILocation(line: 1093, column: 25, scope: !9015)
!9042 = !DILocation(line: 1093, column: 30, scope: !9015)
!9043 = !DILocation(line: 1093, column: 39, scope: !9015)
!9044 = !DILocation(line: 1093, column: 3, scope: !9015)
!9045 = !DILocation(line: 1094, column: 10, scope: !9015)
!9046 = !DILocation(line: 1094, column: 3, scope: !9015)
!9047 = !DILocation(line: 1095, column: 1, scope: !9015)
!9048 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !3518, file: !3518, line: 1018, type: !9049, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9049 = !DISubroutineType(types: !9050)
!9050 = !{null, !3050, !8885}
!9051 = !DILocalVariable(name: "head", arg: 1, scope: !9048, file: !3518, line: 1018, type: !3050)
!9052 = !DILocation(line: 1018, column: 37, scope: !9048)
!9053 = !DILocalVariable(name: "imm", arg: 2, scope: !9048, file: !3518, line: 1018, type: !8885)
!9054 = !DILocation(line: 1018, column: 61, scope: !9048)
!9055 = !DILocalVariable(name: "use_p", scope: !9048, file: !3518, line: 1020, type: !3050)
!9056 = !DILocation(line: 1020, column: 17, scope: !9048)
!9057 = !DILocalVariable(name: "last_p", scope: !9048, file: !3518, line: 1021, type: !3050)
!9058 = !DILocation(line: 1021, column: 17, scope: !9048)
!9059 = !DILocation(line: 1021, column: 26, scope: !9048)
!9060 = !DILocalVariable(name: "head_stmt", scope: !9048, file: !3518, line: 1022, type: !1926)
!9061 = !DILocation(line: 1022, column: 10, scope: !9048)
!9062 = !DILocation(line: 1022, column: 22, scope: !9048)
!9063 = !DILocalVariable(name: "use", scope: !9048, file: !3518, line: 1023, type: !1661)
!9064 = !DILocation(line: 1023, column: 8, scope: !9048)
!9065 = !DILocation(line: 1023, column: 14, scope: !9048)
!9066 = !DILocalVariable(name: "op_iter", scope: !9048, file: !3518, line: 1024, type: !6226)
!9067 = !DILocation(line: 1024, column: 15, scope: !9048)
!9068 = !DILocalVariable(name: "flag", scope: !9048, file: !3518, line: 1025, type: !1643)
!9069 = !DILocation(line: 1025, column: 7, scope: !9048)
!9070 = !DILocation(line: 1028, column: 26, scope: !9048)
!9071 = !DILocation(line: 1028, column: 11, scope: !9048)
!9072 = !DILocation(line: 1028, column: 8, scope: !9048)
!9073 = !DILocation(line: 1030, column: 20, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !9048, file: !3518, line: 1030, column: 7)
!9075 = !DILocation(line: 1030, column: 7, scope: !9074)
!9076 = !DILocation(line: 1030, column: 31, scope: !9074)
!9077 = !DILocation(line: 1030, column: 7, scope: !9048)
!9078 = !DILocation(line: 1032, column: 7, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9080, file: !3518, line: 1032, column: 7)
!9080 = distinct !DILexicalBlock(scope: !9074, file: !3518, line: 1031, column: 5)
!9081 = !DILocation(line: 1032, column: 7, scope: !9082)
!9082 = distinct !DILexicalBlock(scope: !9079, file: !3518, line: 1032, column: 7)
!9083 = !DILocation(line: 1033, column: 6, scope: !9084)
!9084 = distinct !DILexicalBlock(scope: !9082, file: !3518, line: 1033, column: 6)
!9085 = !DILocation(line: 1033, column: 30, scope: !9084)
!9086 = !DILocation(line: 1033, column: 27, scope: !9084)
!9087 = !DILocation(line: 1033, column: 6, scope: !9082)
!9088 = !DILocation(line: 1034, column: 34, scope: !9084)
!9089 = !DILocation(line: 1034, column: 41, scope: !9084)
!9090 = !DILocation(line: 1034, column: 47, scope: !9084)
!9091 = !DILocation(line: 1034, column: 13, scope: !9084)
!9092 = !DILocation(line: 1034, column: 11, scope: !9084)
!9093 = !DILocation(line: 1034, column: 4, scope: !9084)
!9094 = distinct !{!9094, !9078, !9095}
!9095 = !DILocation(line: 1034, column: 53, scope: !9079)
!9096 = !DILocation(line: 1035, column: 5, scope: !9080)
!9097 = !DILocation(line: 1038, column: 11, scope: !9098)
!9098 = distinct !DILexicalBlock(scope: !9099, file: !3518, line: 1038, column: 11)
!9099 = distinct !DILexicalBlock(scope: !9074, file: !3518, line: 1037, column: 5)
!9100 = !DILocation(line: 1038, column: 16, scope: !9098)
!9101 = !DILocation(line: 1038, column: 11, scope: !9099)
!9102 = !DILocation(line: 1040, column: 4, scope: !9103)
!9103 = distinct !DILexicalBlock(scope: !9104, file: !3518, line: 1040, column: 4)
!9104 = distinct !DILexicalBlock(scope: !9098, file: !3518, line: 1039, column: 2)
!9105 = !DILocation(line: 1040, column: 4, scope: !9106)
!9106 = distinct !DILexicalBlock(scope: !9103, file: !3518, line: 1040, column: 4)
!9107 = !DILocation(line: 1041, column: 10, scope: !9108)
!9108 = distinct !DILexicalBlock(scope: !9106, file: !3518, line: 1041, column: 10)
!9109 = !DILocation(line: 1041, column: 34, scope: !9108)
!9110 = !DILocation(line: 1041, column: 31, scope: !9108)
!9111 = !DILocation(line: 1041, column: 10, scope: !9106)
!9112 = !DILocation(line: 1042, column: 38, scope: !9108)
!9113 = !DILocation(line: 1042, column: 45, scope: !9108)
!9114 = !DILocation(line: 1042, column: 51, scope: !9108)
!9115 = !DILocation(line: 1042, column: 17, scope: !9108)
!9116 = !DILocation(line: 1042, column: 15, scope: !9108)
!9117 = !DILocation(line: 1042, column: 8, scope: !9108)
!9118 = distinct !{!9118, !9102, !9119}
!9119 = !DILocation(line: 1042, column: 57, scope: !9103)
!9120 = !DILocation(line: 1043, column: 2, scope: !9104)
!9121 = !DILocation(line: 1044, column: 41, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !9098, file: !3518, line: 1044, column: 16)
!9123 = !DILocation(line: 1044, column: 25, scope: !9122)
!9124 = !DILocation(line: 1044, column: 23, scope: !9122)
!9125 = !DILocation(line: 1044, column: 53, scope: !9122)
!9126 = !DILocation(line: 1044, column: 16, scope: !9098)
!9127 = !DILocation(line: 1046, column: 8, scope: !9128)
!9128 = distinct !DILexicalBlock(scope: !9129, file: !3518, line: 1046, column: 8)
!9129 = distinct !DILexicalBlock(scope: !9122, file: !3518, line: 1045, column: 2)
!9130 = !DILocation(line: 1046, column: 32, scope: !9128)
!9131 = !DILocation(line: 1046, column: 29, scope: !9128)
!9132 = !DILocation(line: 1046, column: 8, scope: !9129)
!9133 = !DILocation(line: 1047, column: 36, scope: !9128)
!9134 = !DILocation(line: 1047, column: 43, scope: !9128)
!9135 = !DILocation(line: 1047, column: 49, scope: !9128)
!9136 = !DILocation(line: 1047, column: 15, scope: !9128)
!9137 = !DILocation(line: 1047, column: 13, scope: !9128)
!9138 = !DILocation(line: 1047, column: 6, scope: !9128)
!9139 = !DILocation(line: 1048, column: 2, scope: !9129)
!9140 = !DILocation(line: 1051, column: 7, scope: !9141)
!9141 = distinct !DILexicalBlock(scope: !9048, file: !3518, line: 1051, column: 7)
!9142 = !DILocation(line: 1051, column: 12, scope: !9141)
!9143 = !DILocation(line: 1051, column: 22, scope: !9141)
!9144 = !DILocation(line: 1051, column: 27, scope: !9141)
!9145 = !DILocation(line: 1051, column: 7, scope: !9048)
!9146 = !DILocation(line: 1052, column: 22, scope: !9141)
!9147 = !DILocation(line: 1052, column: 27, scope: !9141)
!9148 = !DILocation(line: 1052, column: 5, scope: !9141)
!9149 = !DILocation(line: 1053, column: 27, scope: !9048)
!9150 = !DILocation(line: 1053, column: 32, scope: !9048)
!9151 = !DILocation(line: 1053, column: 44, scope: !9048)
!9152 = !DILocation(line: 1053, column: 3, scope: !9048)
!9153 = !DILocation(line: 1054, column: 1, scope: !9048)
!9154 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3518, file: !3518, line: 910, type: !6731, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9155 = !DILocalVariable(name: "ptr", arg: 1, scope: !9154, file: !3518, line: 910, type: !6733)
!9156 = !DILocation(line: 910, column: 35, scope: !9154)
!9157 = !DILocalVariable(name: "phi", arg: 2, scope: !9154, file: !3518, line: 910, type: !1926)
!9158 = !DILocation(line: 910, column: 47, scope: !9154)
!9159 = !DILocalVariable(name: "flags", arg: 3, scope: !9154, file: !3518, line: 910, type: !1643)
!9160 = !DILocation(line: 910, column: 56, scope: !9154)
!9161 = !DILocalVariable(name: "phi_def", scope: !9154, file: !3518, line: 912, type: !1661)
!9162 = !DILocation(line: 912, column: 8, scope: !9154)
!9163 = !DILocation(line: 912, column: 37, scope: !9154)
!9164 = !DILocation(line: 912, column: 18, scope: !9154)
!9165 = !DILocalVariable(name: "comp", scope: !9154, file: !3518, line: 913, type: !1643)
!9166 = !DILocation(line: 913, column: 7, scope: !9154)
!9167 = !DILocation(line: 915, column: 28, scope: !9154)
!9168 = !DILocation(line: 915, column: 3, scope: !9154)
!9169 = !DILocation(line: 916, column: 3, scope: !9154)
!9170 = !DILocation(line: 916, column: 8, scope: !9154)
!9171 = !DILocation(line: 916, column: 13, scope: !9154)
!9172 = !DILocation(line: 918, column: 3, scope: !9154)
!9173 = !DILocation(line: 920, column: 26, scope: !9154)
!9174 = !DILocation(line: 920, column: 11, scope: !9154)
!9175 = !DILocation(line: 920, column: 8, scope: !9154)
!9176 = !DILocation(line: 923, column: 8, scope: !9177)
!9177 = distinct !DILexicalBlock(scope: !9154, file: !3518, line: 923, column: 7)
!9178 = !DILocation(line: 923, column: 16, scope: !9177)
!9179 = !DILocation(line: 923, column: 14, scope: !9177)
!9180 = !DILocation(line: 923, column: 22, scope: !9177)
!9181 = !DILocation(line: 923, column: 7, scope: !9154)
!9182 = !DILocation(line: 925, column: 7, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9177, file: !3518, line: 924, column: 5)
!9184 = !DILocation(line: 925, column: 12, scope: !9183)
!9185 = !DILocation(line: 925, column: 17, scope: !9183)
!9186 = !DILocation(line: 926, column: 7, scope: !9183)
!9187 = !DILocation(line: 929, column: 19, scope: !9154)
!9188 = !DILocation(line: 929, column: 3, scope: !9154)
!9189 = !DILocation(line: 929, column: 8, scope: !9154)
!9190 = !DILocation(line: 929, column: 17, scope: !9154)
!9191 = !DILocation(line: 930, column: 39, scope: !9154)
!9192 = !DILocation(line: 930, column: 18, scope: !9154)
!9193 = !DILocation(line: 930, column: 3, scope: !9154)
!9194 = !DILocation(line: 930, column: 8, scope: !9154)
!9195 = !DILocation(line: 930, column: 16, scope: !9154)
!9196 = !DILocation(line: 931, column: 3, scope: !9154)
!9197 = !DILocation(line: 931, column: 8, scope: !9154)
!9198 = !DILocation(line: 931, column: 18, scope: !9154)
!9199 = !DILocation(line: 932, column: 28, scope: !9154)
!9200 = !DILocation(line: 932, column: 10, scope: !9154)
!9201 = !DILocation(line: 932, column: 3, scope: !9154)
!9202 = !DILocation(line: 933, column: 1, scope: !9154)
!9203 = distinct !DISubprogram(name: "move_use_after_head", scope: !3518, file: !3518, line: 990, type: !9204, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9204 = !DISubroutineType(types: !9205)
!9205 = !{!3050, !3050, !3050, !3050}
!9206 = !DILocalVariable(name: "use_p", arg: 1, scope: !9203, file: !3518, line: 990, type: !3050)
!9207 = !DILocation(line: 990, column: 36, scope: !9203)
!9208 = !DILocalVariable(name: "head", arg: 2, scope: !9203, file: !3518, line: 990, type: !3050)
!9209 = !DILocation(line: 990, column: 57, scope: !9203)
!9210 = !DILocalVariable(name: "last_p", arg: 3, scope: !9203, file: !3518, line: 991, type: !3050)
!9211 = !DILocation(line: 991, column: 23, scope: !9203)
!9212 = !DILocation(line: 997, column: 7, scope: !9213)
!9213 = distinct !DILexicalBlock(scope: !9203, file: !3518, line: 997, column: 7)
!9214 = !DILocation(line: 997, column: 16, scope: !9213)
!9215 = !DILocation(line: 997, column: 13, scope: !9213)
!9216 = !DILocation(line: 997, column: 7, scope: !9203)
!9217 = !DILocation(line: 1000, column: 11, scope: !9218)
!9218 = distinct !DILexicalBlock(scope: !9219, file: !3518, line: 1000, column: 11)
!9219 = distinct !DILexicalBlock(scope: !9213, file: !3518, line: 998, column: 5)
!9220 = !DILocation(line: 1000, column: 19, scope: !9218)
!9221 = !DILocation(line: 1000, column: 27, scope: !9218)
!9222 = !DILocation(line: 1000, column: 24, scope: !9218)
!9223 = !DILocation(line: 1000, column: 11, scope: !9219)
!9224 = !DILocation(line: 1001, column: 11, scope: !9218)
!9225 = !DILocation(line: 1001, column: 9, scope: !9218)
!9226 = !DILocation(line: 1001, column: 2, scope: !9218)
!9227 = !DILocation(line: 1005, column: 20, scope: !9228)
!9228 = distinct !DILexicalBlock(scope: !9218, file: !3518, line: 1003, column: 2)
!9229 = !DILocation(line: 1005, column: 4, scope: !9228)
!9230 = !DILocation(line: 1006, column: 26, scope: !9228)
!9231 = !DILocation(line: 1006, column: 33, scope: !9228)
!9232 = !DILocation(line: 1006, column: 4, scope: !9228)
!9233 = !DILocation(line: 1007, column: 13, scope: !9228)
!9234 = !DILocation(line: 1007, column: 11, scope: !9228)
!9235 = !DILocation(line: 1009, column: 5, scope: !9219)
!9236 = !DILocation(line: 1010, column: 10, scope: !9203)
!9237 = !DILocation(line: 1010, column: 3, scope: !9203)
!9238 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !594, file: !594, line: 1334, type: !9239, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9239 = !DISubroutineType(types: !9240)
!9240 = !{!3050, !3418}
!9241 = !DILocalVariable(name: "g", arg: 1, scope: !9238, file: !594, line: 1334, type: !3418)
!9242 = !DILocation(line: 1334, column: 30, scope: !9238)
!9243 = !DILocalVariable(name: "ops", scope: !9238, file: !594, line: 1336, type: !1962)
!9244 = !DILocation(line: 1336, column: 24, scope: !9238)
!9245 = !DILocation(line: 1337, column: 28, scope: !9246)
!9246 = distinct !DILexicalBlock(scope: !9238, file: !594, line: 1337, column: 7)
!9247 = !DILocation(line: 1337, column: 8, scope: !9246)
!9248 = !DILocation(line: 1337, column: 7, scope: !9238)
!9249 = !DILocation(line: 1338, column: 5, scope: !9246)
!9250 = !DILocation(line: 1339, column: 9, scope: !9238)
!9251 = !DILocation(line: 1339, column: 12, scope: !9238)
!9252 = !DILocation(line: 1339, column: 18, scope: !9238)
!9253 = !DILocation(line: 1339, column: 25, scope: !9238)
!9254 = !DILocation(line: 1339, column: 7, scope: !9238)
!9255 = !DILocation(line: 1340, column: 7, scope: !9256)
!9256 = distinct !DILexicalBlock(scope: !9238, file: !594, line: 1340, column: 7)
!9257 = !DILocation(line: 1341, column: 7, scope: !9256)
!9258 = !DILocation(line: 1341, column: 10, scope: !9256)
!9259 = !DILocation(line: 1341, column: 28, scope: !9256)
!9260 = !DILocation(line: 1341, column: 36, scope: !9256)
!9261 = !DILocation(line: 1341, column: 39, scope: !9256)
!9262 = !DILocation(line: 1341, column: 49, scope: !9256)
!9263 = !DILocation(line: 1341, column: 32, scope: !9256)
!9264 = !DILocation(line: 1340, column: 7, scope: !9238)
!9265 = !DILocation(line: 1342, column: 12, scope: !9256)
!9266 = !DILocation(line: 1342, column: 5, scope: !9256)
!9267 = !DILocation(line: 1343, column: 3, scope: !9238)
!9268 = !DILocation(line: 1344, column: 1, scope: !9238)
!9269 = distinct !DISubprogram(name: "delink_imm_use", scope: !3518, file: !3518, line: 188, type: !9270, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9270 = !DISubroutineType(types: !9271)
!9271 = !{null, !3051}
!9272 = !DILocalVariable(name: "linknode", arg: 1, scope: !9269, file: !3518, line: 188, type: !3051)
!9273 = !DILocation(line: 188, column: 36, scope: !9269)
!9274 = !DILocation(line: 191, column: 7, scope: !9275)
!9275 = distinct !DILexicalBlock(scope: !9269, file: !3518, line: 191, column: 7)
!9276 = !DILocation(line: 191, column: 17, scope: !9275)
!9277 = !DILocation(line: 191, column: 22, scope: !9275)
!9278 = !DILocation(line: 191, column: 7, scope: !9269)
!9279 = !DILocation(line: 192, column: 5, scope: !9275)
!9280 = !DILocation(line: 194, column: 26, scope: !9269)
!9281 = !DILocation(line: 194, column: 36, scope: !9269)
!9282 = !DILocation(line: 194, column: 3, scope: !9269)
!9283 = !DILocation(line: 194, column: 13, scope: !9269)
!9284 = !DILocation(line: 194, column: 19, scope: !9269)
!9285 = !DILocation(line: 194, column: 24, scope: !9269)
!9286 = !DILocation(line: 195, column: 26, scope: !9269)
!9287 = !DILocation(line: 195, column: 36, scope: !9269)
!9288 = !DILocation(line: 195, column: 3, scope: !9269)
!9289 = !DILocation(line: 195, column: 13, scope: !9269)
!9290 = !DILocation(line: 195, column: 19, scope: !9269)
!9291 = !DILocation(line: 195, column: 24, scope: !9269)
!9292 = !DILocation(line: 196, column: 3, scope: !9269)
!9293 = !DILocation(line: 196, column: 13, scope: !9269)
!9294 = !DILocation(line: 196, column: 18, scope: !9269)
!9295 = !DILocation(line: 197, column: 3, scope: !9269)
!9296 = !DILocation(line: 197, column: 13, scope: !9269)
!9297 = !DILocation(line: 197, column: 18, scope: !9269)
!9298 = !DILocation(line: 198, column: 1, scope: !9269)
!9299 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3518, file: !3518, line: 202, type: !9300, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9300 = !DISubroutineType(types: !9301)
!9301 = !{null, !3051, !3051}
!9302 = !DILocalVariable(name: "linknode", arg: 1, scope: !9299, file: !3518, line: 202, type: !3051)
!9303 = !DILocation(line: 202, column: 42, scope: !9299)
!9304 = !DILocalVariable(name: "list", arg: 2, scope: !9299, file: !3518, line: 202, type: !3051)
!9305 = !DILocation(line: 202, column: 71, scope: !9299)
!9306 = !DILocation(line: 206, column: 20, scope: !9299)
!9307 = !DILocation(line: 206, column: 3, scope: !9299)
!9308 = !DILocation(line: 206, column: 13, scope: !9299)
!9309 = !DILocation(line: 206, column: 18, scope: !9299)
!9310 = !DILocation(line: 207, column: 20, scope: !9299)
!9311 = !DILocation(line: 207, column: 26, scope: !9299)
!9312 = !DILocation(line: 207, column: 3, scope: !9299)
!9313 = !DILocation(line: 207, column: 13, scope: !9299)
!9314 = !DILocation(line: 207, column: 18, scope: !9299)
!9315 = !DILocation(line: 208, column: 22, scope: !9299)
!9316 = !DILocation(line: 208, column: 3, scope: !9299)
!9317 = !DILocation(line: 208, column: 9, scope: !9299)
!9318 = !DILocation(line: 208, column: 15, scope: !9299)
!9319 = !DILocation(line: 208, column: 20, scope: !9299)
!9320 = !DILocation(line: 209, column: 16, scope: !9299)
!9321 = !DILocation(line: 209, column: 3, scope: !9299)
!9322 = !DILocation(line: 209, column: 9, scope: !9299)
!9323 = !DILocation(line: 209, column: 14, scope: !9299)
!9324 = !DILocation(line: 210, column: 1, scope: !9299)
!9325 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3518, file: !3518, line: 729, type: !9326, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9326 = !DISubroutineType(types: !9327)
!9327 = !{null, !6733}
!9328 = !DILocalVariable(name: "ptr", arg: 1, scope: !9325, file: !3518, line: 729, type: !6733)
!9329 = !DILocation(line: 729, column: 39, scope: !9325)
!9330 = !DILocation(line: 731, column: 3, scope: !9325)
!9331 = !DILocation(line: 731, column: 8, scope: !9325)
!9332 = !DILocation(line: 731, column: 13, scope: !9325)
!9333 = !DILocation(line: 732, column: 3, scope: !9325)
!9334 = !DILocation(line: 732, column: 8, scope: !9325)
!9335 = !DILocation(line: 732, column: 13, scope: !9325)
!9336 = !DILocation(line: 733, column: 3, scope: !9325)
!9337 = !DILocation(line: 733, column: 8, scope: !9325)
!9338 = !DILocation(line: 733, column: 18, scope: !9325)
!9339 = !DILocation(line: 734, column: 3, scope: !9325)
!9340 = !DILocation(line: 734, column: 8, scope: !9325)
!9341 = !DILocation(line: 734, column: 14, scope: !9325)
!9342 = !DILocation(line: 735, column: 3, scope: !9325)
!9343 = !DILocation(line: 735, column: 8, scope: !9325)
!9344 = !DILocation(line: 735, column: 16, scope: !9325)
!9345 = !DILocation(line: 736, column: 3, scope: !9325)
!9346 = !DILocation(line: 736, column: 8, scope: !9325)
!9347 = !DILocation(line: 736, column: 17, scope: !9325)
!9348 = !DILocation(line: 737, column: 3, scope: !9325)
!9349 = !DILocation(line: 737, column: 8, scope: !9325)
!9350 = !DILocation(line: 737, column: 13, scope: !9325)
!9351 = !DILocation(line: 738, column: 1, scope: !9325)
!9352 = distinct !DISubprogram(name: "is_gimple_debug", scope: !594, file: !594, line: 3249, type: !4559, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3106)
!9353 = !DILocalVariable(name: "gs", arg: 1, scope: !9352, file: !594, line: 3249, type: !3418)
!9354 = !DILocation(line: 3249, column: 31, scope: !9352)
!9355 = !DILocation(line: 3251, column: 23, scope: !9352)
!9356 = !DILocation(line: 3251, column: 10, scope: !9352)
!9357 = !DILocation(line: 3251, column: 27, scope: !9352)
!9358 = !DILocation(line: 3251, column: 3, scope: !9352)
